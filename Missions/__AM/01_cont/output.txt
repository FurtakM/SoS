// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26731 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26731 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26731 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26731 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64180 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68099 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68099 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68099 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68099 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68099 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68099 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 26731 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68099 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6009
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// end ;
6009: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6010: LD_EXP 18
6014: PPUSH
6015: LD_INT 10
6017: PPUSH
6018: CALL_OW 308
6022: PUSH
6023: LD_EXP 18
6027: PPUSH
6028: LD_INT 12
6030: PPUSH
6031: CALL_OW 308
6035: OR
6036: IFFALSE 6085
6038: GO 6040
6040: DISABLE
// begin cyrus_saved := true ;
6041: LD_ADDR_EXP 13
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6049: LD_EXP 18
6053: PPUSH
6054: CALL_OW 256
6058: PPUSH
6059: LD_STRING 01_CyrusLifePoints_1
6061: PPUSH
6062: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6066: LD_EXP 18
6070: PPUSH
6071: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6075: LD_STRING Cyrus
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: CALL_OW 101
// end ;
6085: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6086: LD_EXP 16
6090: PPUSH
6091: LD_INT 10
6093: PPUSH
6094: CALL_OW 308
6098: PUSH
6099: LD_EXP 16
6103: PPUSH
6104: LD_INT 12
6106: PPUSH
6107: CALL_OW 308
6111: OR
6112: IFFALSE 6720
6114: GO 6116
6116: DISABLE
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
// begin if macmilan_use_radio then
6125: LD_EXP 6
6129: IFFALSE 6138
// SetAchievement ( ACH_RADIO ) ;
6131: LD_STRING ACH_RADIO
6133: PPUSH
6134: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6138: LD_EXP 13
6142: NOT
6143: PUSH
6144: LD_EXP 7
6148: AND
6149: PUSH
6150: LD_EXP 18
6154: PPUSH
6155: CALL_OW 302
6159: AND
6160: PUSH
6161: LD_EXP 12
6165: NOT
6166: PUSH
6167: LD_EXP 4
6171: AND
6172: PUSH
6173: LD_EXP 17
6177: PPUSH
6178: CALL_OW 302
6182: AND
6183: OR
6184: IFFALSE 6225
// case Query ( Q2 ) of 1 :
6186: LD_STRING Q2
6188: PPUSH
6189: CALL_OW 97
6193: PUSH
6194: LD_INT 1
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6213
6202: POP
// wait_for_them := true ; 2 :
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 1
6210: ST_TO_ADDR
6211: GO 6225
6213: LD_INT 2
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6224
6221: POP
// ; end ;
6222: GO 6225
6224: POP
// if wait_for_them then
6225: LD_VAR 0 3
6229: IFFALSE 6342
// repeat wait ( 0 0$01 ) ;
6231: LD_INT 35
6233: PPUSH
6234: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6238: LD_EXP 13
6242: PUSH
6243: LD_EXP 12
6247: AND
6248: PUSH
6249: LD_EXP 13
6253: PUSH
6254: LD_EXP 4
6258: NOT
6259: PUSH
6260: LD_EXP 17
6264: PPUSH
6265: CALL_OW 303
6269: OR
6270: PUSH
6271: LD_EXP 17
6275: PPUSH
6276: CALL_OW 301
6280: OR
6281: AND
6282: OR
6283: PUSH
6284: LD_EXP 12
6288: PUSH
6289: LD_EXP 7
6293: NOT
6294: PUSH
6295: LD_EXP 18
6299: PPUSH
6300: CALL_OW 303
6304: OR
6305: PUSH
6306: LD_EXP 18
6310: PPUSH
6311: CALL_OW 301
6315: OR
6316: AND
6317: OR
6318: PUSH
6319: LD_EXP 17
6323: PPUSH
6324: CALL_OW 301
6328: PUSH
6329: LD_EXP 18
6333: PPUSH
6334: CALL_OW 301
6338: AND
6339: OR
6340: IFFALSE 6231
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6342: LD_EXP 16
6346: PPUSH
6347: CALL_OW 256
6351: PPUSH
6352: LD_STRING 01_JMMLifePoints_1
6354: PPUSH
6355: CALL_OW 39
// RemoveUnit ( JMM ) ;
6359: LD_EXP 16
6363: PPUSH
6364: CALL_OW 64
// to_reward := [ JMM ] ;
6368: LD_ADDR_VAR 0 2
6372: PUSH
6373: LD_EXP 16
6377: PUSH
6378: EMPTY
6379: LIST
6380: ST_TO_ADDR
// if bobby_saved then
6381: LD_EXP 12
6385: IFFALSE 6403
// to_reward := to_reward ^ Bobby ;
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_VAR 0 2
6396: PUSH
6397: LD_EXP 17
6401: ADD
6402: ST_TO_ADDR
// if cyrus_saved then
6403: LD_EXP 13
6407: IFFALSE 6425
// to_reward := to_reward ^ Cyrus ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_EXP 18
6423: ADD
6424: ST_TO_ADDR
// m1 := true ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// m2 := bobby_saved ;
6433: LD_ADDR_VAR 0 5
6437: PUSH
6438: LD_EXP 12
6442: ST_TO_ADDR
// m3 := cyrus_saved ;
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: LD_EXP 13
6452: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6453: LD_STRING JMM
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 101
// if not bobby_in_squad then
6463: LD_EXP 4
6467: NOT
6468: IFFALSE 6481
// AddMedal ( Bobby , - 1 ) ;
6470: LD_STRING Bobby
6472: PPUSH
6473: LD_INT 1
6475: NEG
6476: PPUSH
6477: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6481: LD_EXP 12
6485: NOT
6486: PUSH
6487: LD_EXP 17
6491: PPUSH
6492: CALL_OW 303
6496: PUSH
6497: LD_EXP 17
6501: PPUSH
6502: CALL_OW 301
6506: OR
6507: AND
6508: IFFALSE 6521
// AddMedal ( Bobby , - 2 ) ;
6510: LD_STRING Bobby
6512: PPUSH
6513: LD_INT 2
6515: NEG
6516: PPUSH
6517: CALL_OW 101
// if not cyrus_in_squad then
6521: LD_EXP 7
6525: NOT
6526: IFFALSE 6539
// AddMedal ( Cyrus , - 1 ) ;
6528: LD_STRING Cyrus
6530: PPUSH
6531: LD_INT 1
6533: NEG
6534: PPUSH
6535: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6539: LD_EXP 13
6543: NOT
6544: PUSH
6545: LD_EXP 18
6549: PPUSH
6550: CALL_OW 303
6554: PUSH
6555: LD_EXP 18
6559: PPUSH
6560: CALL_OW 301
6564: OR
6565: AND
6566: IFFALSE 6579
// AddMedal ( Cyrus , - 2 ) ;
6568: LD_STRING Cyrus
6570: PPUSH
6571: LD_INT 2
6573: NEG
6574: PPUSH
6575: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6579: LD_OWVAR 67
6583: PUSH
6584: LD_INT 3
6586: GREATEREQUAL
6587: PUSH
6588: LD_VAR 0 4
6592: AND
6593: PUSH
6594: LD_VAR 0 5
6598: AND
6599: PUSH
6600: LD_VAR 0 6
6604: AND
6605: IFFALSE 6617
// SetAchievementEX ( ACH_AMER , 1 ) ;
6607: LD_STRING ACH_AMER
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 564
// GiveMedals ( MAIN ) ;
6617: LD_STRING MAIN
6619: PPUSH
6620: CALL_OW 102
// RewardPeople ( to_reward ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 43
// if bobby_saved then
6633: LD_EXP 12
6637: IFFALSE 6657
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6639: LD_EXP 17
6643: PPUSH
6644: LD_EXP 2
6648: PUSH
6649: LD_STRING Bobby
6651: STR
6652: PPUSH
6653: CALL_OW 38
// if cyrus_saved then
6657: LD_EXP 13
6661: IFFALSE 6681
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6663: LD_EXP 18
6667: PPUSH
6668: LD_EXP 2
6672: PUSH
6673: LD_STRING Cyrus
6675: STR
6676: PPUSH
6677: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6681: LD_EXP 16
6685: PPUSH
6686: LD_EXP 2
6690: PUSH
6691: LD_STRING JMM
6693: STR
6694: PPUSH
6695: CALL_OW 38
// if tick <= 3 3$00 then
6699: LD_OWVAR 1
6703: PUSH
6704: LD_INT 6300
6706: LESSEQUAL
6707: IFFALSE 6716
// SetAchievement ( ACH_ASPEED_1 ) ;
6709: LD_STRING ACH_ASPEED_1
6711: PPUSH
6712: CALL_OW 543
// YouWin ;
6716: CALL_OW 103
// end ; end_of_file
6720: PPOPN 6
6722: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6723: LD_VAR 0 1
6727: PUSH
6728: LD_EXP 16
6732: EQUAL
6733: IFFALSE 6742
// YouLost ( JMM ) ;
6735: LD_STRING JMM
6737: PPUSH
6738: CALL_OW 104
// end ;
6742: PPOPN 1
6744: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6745: LD_VAR 0 1
6749: PPUSH
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL 22562 0 2
// end ;
6759: PPOPN 2
6761: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL 22442 0 1
// if un = JMM then
6771: LD_VAR 0 1
6775: PUSH
6776: LD_EXP 16
6780: EQUAL
6781: IFFALSE 6790
// YouLost ( JMM ) ;
6783: LD_STRING JMM
6785: PPUSH
6786: CALL_OW 104
// end ; end_of_file end_of_file
6790: PPOPN 1
6792: END
// every 0 0$1 do
6793: GO 6795
6795: DISABLE
// begin enable ;
6796: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6797: LD_STRING updateTimer(
6799: PUSH
6800: LD_OWVAR 1
6804: STR
6805: PUSH
6806: LD_STRING );
6808: STR
6809: PPUSH
6810: CALL_OW 559
// end ;
6814: END
// export function SOS_MapStart ( ) ; begin
6815: LD_INT 0
6817: PPUSH
// if streamModeActive then
6818: LD_EXP 28
6822: IFFALSE 6831
// DefineStreamItems ( true ) ;
6824: LD_INT 1
6826: PPUSH
6827: CALL 8485 0 1
// UpdateFactoryWaypoints ( ) ;
6831: CALL 21346 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6835: CALL 21603 0 0
// end ;
6839: LD_VAR 0 1
6843: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6844: LD_INT 0
6846: PPUSH
// if p2 = hack_mode then
6847: LD_VAR 0 2
6851: PUSH
6852: LD_INT 100
6854: EQUAL
6855: IFFALSE 7858
// begin if not StreamModeActive then
6857: LD_EXP 28
6861: NOT
6862: IFFALSE 6872
// StreamModeActive := true ;
6864: LD_ADDR_EXP 28
6868: PUSH
6869: LD_INT 1
6871: ST_TO_ADDR
// if p3 = 0 then
6872: LD_VAR 0 3
6876: PUSH
6877: LD_INT 0
6879: EQUAL
6880: IFFALSE 6886
// InitStreamMode ;
6882: CALL 8021 0 0
// if p3 = 1 then
6886: LD_VAR 0 3
6890: PUSH
6891: LD_INT 1
6893: EQUAL
6894: IFFALSE 6904
// sRocket := true ;
6896: LD_ADDR_EXP 33
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// if p3 = 2 then
6904: LD_VAR 0 3
6908: PUSH
6909: LD_INT 2
6911: EQUAL
6912: IFFALSE 6922
// sSpeed := true ;
6914: LD_ADDR_EXP 32
6918: PUSH
6919: LD_INT 1
6921: ST_TO_ADDR
// if p3 = 3 then
6922: LD_VAR 0 3
6926: PUSH
6927: LD_INT 3
6929: EQUAL
6930: IFFALSE 6940
// sEngine := true ;
6932: LD_ADDR_EXP 34
6936: PUSH
6937: LD_INT 1
6939: ST_TO_ADDR
// if p3 = 4 then
6940: LD_VAR 0 3
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 6958
// sSpec := true ;
6950: LD_ADDR_EXP 31
6954: PUSH
6955: LD_INT 1
6957: ST_TO_ADDR
// if p3 = 5 then
6958: LD_VAR 0 3
6962: PUSH
6963: LD_INT 5
6965: EQUAL
6966: IFFALSE 6976
// sLevel := true ;
6968: LD_ADDR_EXP 35
6972: PUSH
6973: LD_INT 1
6975: ST_TO_ADDR
// if p3 = 6 then
6976: LD_VAR 0 3
6980: PUSH
6981: LD_INT 6
6983: EQUAL
6984: IFFALSE 6994
// sArmoury := true ;
6986: LD_ADDR_EXP 36
6990: PUSH
6991: LD_INT 1
6993: ST_TO_ADDR
// if p3 = 7 then
6994: LD_VAR 0 3
6998: PUSH
6999: LD_INT 7
7001: EQUAL
7002: IFFALSE 7012
// sRadar := true ;
7004: LD_ADDR_EXP 37
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// if p3 = 8 then
7012: LD_VAR 0 3
7016: PUSH
7017: LD_INT 8
7019: EQUAL
7020: IFFALSE 7030
// sBunker := true ;
7022: LD_ADDR_EXP 38
7026: PUSH
7027: LD_INT 1
7029: ST_TO_ADDR
// if p3 = 9 then
7030: LD_VAR 0 3
7034: PUSH
7035: LD_INT 9
7037: EQUAL
7038: IFFALSE 7048
// sHack := true ;
7040: LD_ADDR_EXP 39
7044: PUSH
7045: LD_INT 1
7047: ST_TO_ADDR
// if p3 = 10 then
7048: LD_VAR 0 3
7052: PUSH
7053: LD_INT 10
7055: EQUAL
7056: IFFALSE 7066
// sFire := true ;
7058: LD_ADDR_EXP 40
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// if p3 = 11 then
7066: LD_VAR 0 3
7070: PUSH
7071: LD_INT 11
7073: EQUAL
7074: IFFALSE 7084
// sRefresh := true ;
7076: LD_ADDR_EXP 41
7080: PUSH
7081: LD_INT 1
7083: ST_TO_ADDR
// if p3 = 12 then
7084: LD_VAR 0 3
7088: PUSH
7089: LD_INT 12
7091: EQUAL
7092: IFFALSE 7102
// sExp := true ;
7094: LD_ADDR_EXP 42
7098: PUSH
7099: LD_INT 1
7101: ST_TO_ADDR
// if p3 = 13 then
7102: LD_VAR 0 3
7106: PUSH
7107: LD_INT 13
7109: EQUAL
7110: IFFALSE 7120
// sDepot := true ;
7112: LD_ADDR_EXP 43
7116: PUSH
7117: LD_INT 1
7119: ST_TO_ADDR
// if p3 = 14 then
7120: LD_VAR 0 3
7124: PUSH
7125: LD_INT 14
7127: EQUAL
7128: IFFALSE 7138
// sFlag := true ;
7130: LD_ADDR_EXP 44
7134: PUSH
7135: LD_INT 1
7137: ST_TO_ADDR
// if p3 = 15 then
7138: LD_VAR 0 3
7142: PUSH
7143: LD_INT 15
7145: EQUAL
7146: IFFALSE 7156
// sKamikadze := true ;
7148: LD_ADDR_EXP 52
7152: PUSH
7153: LD_INT 1
7155: ST_TO_ADDR
// if p3 = 16 then
7156: LD_VAR 0 3
7160: PUSH
7161: LD_INT 16
7163: EQUAL
7164: IFFALSE 7174
// sTroll := true ;
7166: LD_ADDR_EXP 53
7170: PUSH
7171: LD_INT 1
7173: ST_TO_ADDR
// if p3 = 17 then
7174: LD_VAR 0 3
7178: PUSH
7179: LD_INT 17
7181: EQUAL
7182: IFFALSE 7192
// sSlow := true ;
7184: LD_ADDR_EXP 54
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// if p3 = 18 then
7192: LD_VAR 0 3
7196: PUSH
7197: LD_INT 18
7199: EQUAL
7200: IFFALSE 7210
// sLack := true ;
7202: LD_ADDR_EXP 55
7206: PUSH
7207: LD_INT 1
7209: ST_TO_ADDR
// if p3 = 19 then
7210: LD_VAR 0 3
7214: PUSH
7215: LD_INT 19
7217: EQUAL
7218: IFFALSE 7228
// sTank := true ;
7220: LD_ADDR_EXP 57
7224: PUSH
7225: LD_INT 1
7227: ST_TO_ADDR
// if p3 = 20 then
7228: LD_VAR 0 3
7232: PUSH
7233: LD_INT 20
7235: EQUAL
7236: IFFALSE 7246
// sRemote := true ;
7238: LD_ADDR_EXP 58
7242: PUSH
7243: LD_INT 1
7245: ST_TO_ADDR
// if p3 = 21 then
7246: LD_VAR 0 3
7250: PUSH
7251: LD_INT 21
7253: EQUAL
7254: IFFALSE 7264
// sPowell := true ;
7256: LD_ADDR_EXP 59
7260: PUSH
7261: LD_INT 1
7263: ST_TO_ADDR
// if p3 = 22 then
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 22
7271: EQUAL
7272: IFFALSE 7282
// sTeleport := true ;
7274: LD_ADDR_EXP 62
7278: PUSH
7279: LD_INT 1
7281: ST_TO_ADDR
// if p3 = 23 then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 23
7289: EQUAL
7290: IFFALSE 7300
// sOilTower := true ;
7292: LD_ADDR_EXP 64
7296: PUSH
7297: LD_INT 1
7299: ST_TO_ADDR
// if p3 = 24 then
7300: LD_VAR 0 3
7304: PUSH
7305: LD_INT 24
7307: EQUAL
7308: IFFALSE 7318
// sShovel := true ;
7310: LD_ADDR_EXP 65
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// if p3 = 25 then
7318: LD_VAR 0 3
7322: PUSH
7323: LD_INT 25
7325: EQUAL
7326: IFFALSE 7336
// sSheik := true ;
7328: LD_ADDR_EXP 66
7332: PUSH
7333: LD_INT 1
7335: ST_TO_ADDR
// if p3 = 26 then
7336: LD_VAR 0 3
7340: PUSH
7341: LD_INT 26
7343: EQUAL
7344: IFFALSE 7354
// sEarthquake := true ;
7346: LD_ADDR_EXP 68
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// if p3 = 27 then
7354: LD_VAR 0 3
7358: PUSH
7359: LD_INT 27
7361: EQUAL
7362: IFFALSE 7372
// sAI := true ;
7364: LD_ADDR_EXP 69
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// if p3 = 28 then
7372: LD_VAR 0 3
7376: PUSH
7377: LD_INT 28
7379: EQUAL
7380: IFFALSE 7390
// sCargo := true ;
7382: LD_ADDR_EXP 72
7386: PUSH
7387: LD_INT 1
7389: ST_TO_ADDR
// if p3 = 29 then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 29
7397: EQUAL
7398: IFFALSE 7408
// sDLaser := true ;
7400: LD_ADDR_EXP 73
7404: PUSH
7405: LD_INT 1
7407: ST_TO_ADDR
// if p3 = 30 then
7408: LD_VAR 0 3
7412: PUSH
7413: LD_INT 30
7415: EQUAL
7416: IFFALSE 7426
// sExchange := true ;
7418: LD_ADDR_EXP 74
7422: PUSH
7423: LD_INT 1
7425: ST_TO_ADDR
// if p3 = 31 then
7426: LD_VAR 0 3
7430: PUSH
7431: LD_INT 31
7433: EQUAL
7434: IFFALSE 7444
// sFac := true ;
7436: LD_ADDR_EXP 75
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// if p3 = 32 then
7444: LD_VAR 0 3
7448: PUSH
7449: LD_INT 32
7451: EQUAL
7452: IFFALSE 7462
// sPower := true ;
7454: LD_ADDR_EXP 76
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// if p3 = 33 then
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 33
7469: EQUAL
7470: IFFALSE 7480
// sRandom := true ;
7472: LD_ADDR_EXP 77
7476: PUSH
7477: LD_INT 1
7479: ST_TO_ADDR
// if p3 = 34 then
7480: LD_VAR 0 3
7484: PUSH
7485: LD_INT 34
7487: EQUAL
7488: IFFALSE 7498
// sShield := true ;
7490: LD_ADDR_EXP 78
7494: PUSH
7495: LD_INT 1
7497: ST_TO_ADDR
// if p3 = 35 then
7498: LD_VAR 0 3
7502: PUSH
7503: LD_INT 35
7505: EQUAL
7506: IFFALSE 7516
// sTime := true ;
7508: LD_ADDR_EXP 79
7512: PUSH
7513: LD_INT 1
7515: ST_TO_ADDR
// if p3 = 36 then
7516: LD_VAR 0 3
7520: PUSH
7521: LD_INT 36
7523: EQUAL
7524: IFFALSE 7534
// sTools := true ;
7526: LD_ADDR_EXP 80
7530: PUSH
7531: LD_INT 1
7533: ST_TO_ADDR
// if p3 = 101 then
7534: LD_VAR 0 3
7538: PUSH
7539: LD_INT 101
7541: EQUAL
7542: IFFALSE 7552
// sSold := true ;
7544: LD_ADDR_EXP 45
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// if p3 = 102 then
7552: LD_VAR 0 3
7556: PUSH
7557: LD_INT 102
7559: EQUAL
7560: IFFALSE 7570
// sDiff := true ;
7562: LD_ADDR_EXP 46
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// if p3 = 103 then
7570: LD_VAR 0 3
7574: PUSH
7575: LD_INT 103
7577: EQUAL
7578: IFFALSE 7588
// sFog := true ;
7580: LD_ADDR_EXP 49
7584: PUSH
7585: LD_INT 1
7587: ST_TO_ADDR
// if p3 = 104 then
7588: LD_VAR 0 3
7592: PUSH
7593: LD_INT 104
7595: EQUAL
7596: IFFALSE 7606
// sReset := true ;
7598: LD_ADDR_EXP 50
7602: PUSH
7603: LD_INT 1
7605: ST_TO_ADDR
// if p3 = 105 then
7606: LD_VAR 0 3
7610: PUSH
7611: LD_INT 105
7613: EQUAL
7614: IFFALSE 7624
// sSun := true ;
7616: LD_ADDR_EXP 51
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
// if p3 = 106 then
7624: LD_VAR 0 3
7628: PUSH
7629: LD_INT 106
7631: EQUAL
7632: IFFALSE 7642
// sTiger := true ;
7634: LD_ADDR_EXP 47
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if p3 = 107 then
7642: LD_VAR 0 3
7646: PUSH
7647: LD_INT 107
7649: EQUAL
7650: IFFALSE 7660
// sBomb := true ;
7652: LD_ADDR_EXP 48
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// if p3 = 108 then
7660: LD_VAR 0 3
7664: PUSH
7665: LD_INT 108
7667: EQUAL
7668: IFFALSE 7678
// sWound := true ;
7670: LD_ADDR_EXP 56
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// if p3 = 109 then
7678: LD_VAR 0 3
7682: PUSH
7683: LD_INT 109
7685: EQUAL
7686: IFFALSE 7696
// sBetray := true ;
7688: LD_ADDR_EXP 60
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// if p3 = 110 then
7696: LD_VAR 0 3
7700: PUSH
7701: LD_INT 110
7703: EQUAL
7704: IFFALSE 7714
// sContamin := true ;
7706: LD_ADDR_EXP 61
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// if p3 = 111 then
7714: LD_VAR 0 3
7718: PUSH
7719: LD_INT 111
7721: EQUAL
7722: IFFALSE 7732
// sOil := true ;
7724: LD_ADDR_EXP 63
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// if p3 = 112 then
7732: LD_VAR 0 3
7736: PUSH
7737: LD_INT 112
7739: EQUAL
7740: IFFALSE 7750
// sStu := true ;
7742: LD_ADDR_EXP 67
7746: PUSH
7747: LD_INT 1
7749: ST_TO_ADDR
// if p3 = 113 then
7750: LD_VAR 0 3
7754: PUSH
7755: LD_INT 113
7757: EQUAL
7758: IFFALSE 7768
// sBazooka := true ;
7760: LD_ADDR_EXP 70
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// if p3 = 114 then
7768: LD_VAR 0 3
7772: PUSH
7773: LD_INT 114
7775: EQUAL
7776: IFFALSE 7786
// sMortar := true ;
7778: LD_ADDR_EXP 71
7782: PUSH
7783: LD_INT 1
7785: ST_TO_ADDR
// if p3 = 115 then
7786: LD_VAR 0 3
7790: PUSH
7791: LD_INT 115
7793: EQUAL
7794: IFFALSE 7804
// sRanger := true ;
7796: LD_ADDR_EXP 81
7800: PUSH
7801: LD_INT 1
7803: ST_TO_ADDR
// if p3 = 116 then
7804: LD_VAR 0 3
7808: PUSH
7809: LD_INT 116
7811: EQUAL
7812: IFFALSE 7822
// sComputer := true ;
7814: LD_ADDR_EXP 82
7818: PUSH
7819: LD_INT 1
7821: ST_TO_ADDR
// if p3 = 117 then
7822: LD_VAR 0 3
7826: PUSH
7827: LD_INT 117
7829: EQUAL
7830: IFFALSE 7840
// s30 := true ;
7832: LD_ADDR_EXP 83
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// if p3 = 118 then
7840: LD_VAR 0 3
7844: PUSH
7845: LD_INT 118
7847: EQUAL
7848: IFFALSE 7858
// s60 := true ;
7850: LD_ADDR_EXP 84
7854: PUSH
7855: LD_INT 1
7857: ST_TO_ADDR
// end ; if p2 = stream_mode then
7858: LD_VAR 0 2
7862: PUSH
7863: LD_INT 101
7865: EQUAL
7866: IFFALSE 7994
// begin case p3 of 1 :
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 1
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7888
7881: POP
// hHackUnlimitedResources ; 2 :
7882: CALL 20092 0 0
7886: GO 7994
7888: LD_INT 2
7890: DOUBLE
7891: EQUAL
7892: IFTRUE 7896
7894: GO 7903
7896: POP
// hHackSetLevel10 ; 3 :
7897: CALL 20225 0 0
7901: GO 7994
7903: LD_INT 3
7905: DOUBLE
7906: EQUAL
7907: IFTRUE 7911
7909: GO 7918
7911: POP
// hHackSetLevel10YourUnits ; 4 :
7912: CALL 20310 0 0
7916: GO 7994
7918: LD_INT 4
7920: DOUBLE
7921: EQUAL
7922: IFTRUE 7926
7924: GO 7933
7926: POP
// hHackInvincible ; 5 :
7927: CALL 20758 0 0
7931: GO 7994
7933: LD_INT 5
7935: DOUBLE
7936: EQUAL
7937: IFTRUE 7941
7939: GO 7948
7941: POP
// hHackInvisible ; 6 :
7942: CALL 20869 0 0
7946: GO 7994
7948: LD_INT 6
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 7963
7956: POP
// hHackChangeYourSide ; 7 :
7957: CALL 20926 0 0
7961: GO 7994
7963: LD_INT 7
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 7978
7971: POP
// hHackChangeUnitSide ; 8 :
7972: CALL 20968 0 0
7976: GO 7994
7978: LD_INT 8
7980: DOUBLE
7981: EQUAL
7982: IFTRUE 7986
7984: GO 7993
7986: POP
// hHackFog ; end ;
7987: CALL 21069 0 0
7991: GO 7994
7993: POP
// end ; end ;
7994: LD_VAR 0 7
7998: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7999: GO 8001
8001: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8002: LD_STRING initStreamRollete();
8004: PPUSH
8005: CALL_OW 559
// InitStreamMode ;
8009: CALL 8021 0 0
// DefineStreamItems ( false ) ;
8013: LD_INT 0
8015: PPUSH
8016: CALL 8485 0 1
// end ;
8020: END
// function InitStreamMode ; begin
8021: LD_INT 0
8023: PPUSH
// streamModeActive := false ;
8024: LD_ADDR_EXP 28
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// normalCounter := 36 ;
8032: LD_ADDR_EXP 29
8036: PUSH
8037: LD_INT 36
8039: ST_TO_ADDR
// hardcoreCounter := 18 ;
8040: LD_ADDR_EXP 30
8044: PUSH
8045: LD_INT 18
8047: ST_TO_ADDR
// sRocket := false ;
8048: LD_ADDR_EXP 33
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sSpeed := false ;
8056: LD_ADDR_EXP 32
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sEngine := false ;
8064: LD_ADDR_EXP 34
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sSpec := false ;
8072: LD_ADDR_EXP 31
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sLevel := false ;
8080: LD_ADDR_EXP 35
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sArmoury := false ;
8088: LD_ADDR_EXP 36
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// sRadar := false ;
8096: LD_ADDR_EXP 37
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// sBunker := false ;
8104: LD_ADDR_EXP 38
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// sHack := false ;
8112: LD_ADDR_EXP 39
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// sFire := false ;
8120: LD_ADDR_EXP 40
8124: PUSH
8125: LD_INT 0
8127: ST_TO_ADDR
// sRefresh := false ;
8128: LD_ADDR_EXP 41
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// sExp := false ;
8136: LD_ADDR_EXP 42
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// sDepot := false ;
8144: LD_ADDR_EXP 43
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// sFlag := false ;
8152: LD_ADDR_EXP 44
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// sKamikadze := false ;
8160: LD_ADDR_EXP 52
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// sTroll := false ;
8168: LD_ADDR_EXP 53
8172: PUSH
8173: LD_INT 0
8175: ST_TO_ADDR
// sSlow := false ;
8176: LD_ADDR_EXP 54
8180: PUSH
8181: LD_INT 0
8183: ST_TO_ADDR
// sLack := false ;
8184: LD_ADDR_EXP 55
8188: PUSH
8189: LD_INT 0
8191: ST_TO_ADDR
// sTank := false ;
8192: LD_ADDR_EXP 57
8196: PUSH
8197: LD_INT 0
8199: ST_TO_ADDR
// sRemote := false ;
8200: LD_ADDR_EXP 58
8204: PUSH
8205: LD_INT 0
8207: ST_TO_ADDR
// sPowell := false ;
8208: LD_ADDR_EXP 59
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// sTeleport := false ;
8216: LD_ADDR_EXP 62
8220: PUSH
8221: LD_INT 0
8223: ST_TO_ADDR
// sOilTower := false ;
8224: LD_ADDR_EXP 64
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// sShovel := false ;
8232: LD_ADDR_EXP 65
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// sSheik := false ;
8240: LD_ADDR_EXP 66
8244: PUSH
8245: LD_INT 0
8247: ST_TO_ADDR
// sEarthquake := false ;
8248: LD_ADDR_EXP 68
8252: PUSH
8253: LD_INT 0
8255: ST_TO_ADDR
// sAI := false ;
8256: LD_ADDR_EXP 69
8260: PUSH
8261: LD_INT 0
8263: ST_TO_ADDR
// sCargo := false ;
8264: LD_ADDR_EXP 72
8268: PUSH
8269: LD_INT 0
8271: ST_TO_ADDR
// sDLaser := false ;
8272: LD_ADDR_EXP 73
8276: PUSH
8277: LD_INT 0
8279: ST_TO_ADDR
// sExchange := false ;
8280: LD_ADDR_EXP 74
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// sFac := false ;
8288: LD_ADDR_EXP 75
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// sPower := false ;
8296: LD_ADDR_EXP 76
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// sRandom := false ;
8304: LD_ADDR_EXP 77
8308: PUSH
8309: LD_INT 0
8311: ST_TO_ADDR
// sShield := false ;
8312: LD_ADDR_EXP 78
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// sTime := false ;
8320: LD_ADDR_EXP 79
8324: PUSH
8325: LD_INT 0
8327: ST_TO_ADDR
// sTools := false ;
8328: LD_ADDR_EXP 80
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// sSold := false ;
8336: LD_ADDR_EXP 45
8340: PUSH
8341: LD_INT 0
8343: ST_TO_ADDR
// sDiff := false ;
8344: LD_ADDR_EXP 46
8348: PUSH
8349: LD_INT 0
8351: ST_TO_ADDR
// sFog := false ;
8352: LD_ADDR_EXP 49
8356: PUSH
8357: LD_INT 0
8359: ST_TO_ADDR
// sReset := false ;
8360: LD_ADDR_EXP 50
8364: PUSH
8365: LD_INT 0
8367: ST_TO_ADDR
// sSun := false ;
8368: LD_ADDR_EXP 51
8372: PUSH
8373: LD_INT 0
8375: ST_TO_ADDR
// sTiger := false ;
8376: LD_ADDR_EXP 47
8380: PUSH
8381: LD_INT 0
8383: ST_TO_ADDR
// sBomb := false ;
8384: LD_ADDR_EXP 48
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// sWound := false ;
8392: LD_ADDR_EXP 56
8396: PUSH
8397: LD_INT 0
8399: ST_TO_ADDR
// sBetray := false ;
8400: LD_ADDR_EXP 60
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// sContamin := false ;
8408: LD_ADDR_EXP 61
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
// sOil := false ;
8416: LD_ADDR_EXP 63
8420: PUSH
8421: LD_INT 0
8423: ST_TO_ADDR
// sStu := false ;
8424: LD_ADDR_EXP 67
8428: PUSH
8429: LD_INT 0
8431: ST_TO_ADDR
// sBazooka := false ;
8432: LD_ADDR_EXP 70
8436: PUSH
8437: LD_INT 0
8439: ST_TO_ADDR
// sMortar := false ;
8440: LD_ADDR_EXP 71
8444: PUSH
8445: LD_INT 0
8447: ST_TO_ADDR
// sRanger := false ;
8448: LD_ADDR_EXP 81
8452: PUSH
8453: LD_INT 0
8455: ST_TO_ADDR
// sComputer := false ;
8456: LD_ADDR_EXP 82
8460: PUSH
8461: LD_INT 0
8463: ST_TO_ADDR
// s30 := false ;
8464: LD_ADDR_EXP 83
8468: PUSH
8469: LD_INT 0
8471: ST_TO_ADDR
// s60 := false ;
8472: LD_ADDR_EXP 84
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// end ;
8480: LD_VAR 0 1
8484: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
// result := [ ] ;
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: EMPTY
8500: ST_TO_ADDR
// if campaign_id = 1 then
8501: LD_OWVAR 69
8505: PUSH
8506: LD_INT 1
8508: EQUAL
8509: IFFALSE 11675
// begin case mission_number of 1 :
8511: LD_OWVAR 70
8515: PUSH
8516: LD_INT 1
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8600
8524: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 2
8532: PUSH
8533: LD_INT 4
8535: PUSH
8536: LD_INT 11
8538: PUSH
8539: LD_INT 12
8541: PUSH
8542: LD_INT 15
8544: PUSH
8545: LD_INT 16
8547: PUSH
8548: LD_INT 22
8550: PUSH
8551: LD_INT 23
8553: PUSH
8554: LD_INT 26
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 101
8570: PUSH
8571: LD_INT 102
8573: PUSH
8574: LD_INT 106
8576: PUSH
8577: LD_INT 116
8579: PUSH
8580: LD_INT 117
8582: PUSH
8583: LD_INT 118
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
8598: GO 11673
8600: LD_INT 2
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8692
8608: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8609: LD_ADDR_VAR 0 2
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: LD_INT 4
8619: PUSH
8620: LD_INT 11
8622: PUSH
8623: LD_INT 12
8625: PUSH
8626: LD_INT 15
8628: PUSH
8629: LD_INT 16
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 23
8637: PUSH
8638: LD_INT 26
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 101
8654: PUSH
8655: LD_INT 102
8657: PUSH
8658: LD_INT 105
8660: PUSH
8661: LD_INT 106
8663: PUSH
8664: LD_INT 108
8666: PUSH
8667: LD_INT 116
8669: PUSH
8670: LD_INT 117
8672: PUSH
8673: LD_INT 118
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: ST_TO_ADDR
8690: GO 11673
8692: LD_INT 3
8694: DOUBLE
8695: EQUAL
8696: IFTRUE 8700
8698: GO 8788
8700: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_INT 2
8708: PUSH
8709: LD_INT 4
8711: PUSH
8712: LD_INT 5
8714: PUSH
8715: LD_INT 11
8717: PUSH
8718: LD_INT 12
8720: PUSH
8721: LD_INT 15
8723: PUSH
8724: LD_INT 16
8726: PUSH
8727: LD_INT 22
8729: PUSH
8730: LD_INT 26
8732: PUSH
8733: LD_INT 36
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 105
8756: PUSH
8757: LD_INT 106
8759: PUSH
8760: LD_INT 108
8762: PUSH
8763: LD_INT 116
8765: PUSH
8766: LD_INT 117
8768: PUSH
8769: LD_INT 118
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: ST_TO_ADDR
8786: GO 11673
8788: LD_INT 4
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8892
8796: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: LD_INT 4
8807: PUSH
8808: LD_INT 5
8810: PUSH
8811: LD_INT 8
8813: PUSH
8814: LD_INT 11
8816: PUSH
8817: LD_INT 12
8819: PUSH
8820: LD_INT 15
8822: PUSH
8823: LD_INT 16
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_INT 23
8831: PUSH
8832: LD_INT 26
8834: PUSH
8835: LD_INT 36
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 101
8854: PUSH
8855: LD_INT 102
8857: PUSH
8858: LD_INT 105
8860: PUSH
8861: LD_INT 106
8863: PUSH
8864: LD_INT 108
8866: PUSH
8867: LD_INT 116
8869: PUSH
8870: LD_INT 117
8872: PUSH
8873: LD_INT 118
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: ST_TO_ADDR
8890: GO 11673
8892: LD_INT 5
8894: DOUBLE
8895: EQUAL
8896: IFTRUE 8900
8898: GO 9012
8900: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8901: LD_ADDR_VAR 0 2
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: LD_INT 4
8911: PUSH
8912: LD_INT 5
8914: PUSH
8915: LD_INT 6
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 11
8923: PUSH
8924: LD_INT 12
8926: PUSH
8927: LD_INT 15
8929: PUSH
8930: LD_INT 16
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 23
8938: PUSH
8939: LD_INT 25
8941: PUSH
8942: LD_INT 26
8944: PUSH
8945: LD_INT 36
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 101
8966: PUSH
8967: LD_INT 102
8969: PUSH
8970: LD_INT 105
8972: PUSH
8973: LD_INT 106
8975: PUSH
8976: LD_INT 108
8978: PUSH
8979: LD_INT 109
8981: PUSH
8982: LD_INT 112
8984: PUSH
8985: LD_INT 116
8987: PUSH
8988: LD_INT 117
8990: PUSH
8991: LD_INT 118
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: ST_TO_ADDR
9010: GO 11673
9012: LD_INT 6
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9152
9020: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 4
9031: PUSH
9032: LD_INT 5
9034: PUSH
9035: LD_INT 6
9037: PUSH
9038: LD_INT 8
9040: PUSH
9041: LD_INT 11
9043: PUSH
9044: LD_INT 12
9046: PUSH
9047: LD_INT 15
9049: PUSH
9050: LD_INT 16
9052: PUSH
9053: LD_INT 20
9055: PUSH
9056: LD_INT 21
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 23
9064: PUSH
9065: LD_INT 25
9067: PUSH
9068: LD_INT 26
9070: PUSH
9071: LD_INT 30
9073: PUSH
9074: LD_INT 31
9076: PUSH
9077: LD_INT 32
9079: PUSH
9080: LD_INT 36
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 101
9106: PUSH
9107: LD_INT 102
9109: PUSH
9110: LD_INT 105
9112: PUSH
9113: LD_INT 106
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: LD_INT 109
9121: PUSH
9122: LD_INT 112
9124: PUSH
9125: LD_INT 116
9127: PUSH
9128: LD_INT 117
9130: PUSH
9131: LD_INT 118
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: ST_TO_ADDR
9150: GO 11673
9152: LD_INT 7
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9272
9160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9161: LD_ADDR_VAR 0 2
9165: PUSH
9166: LD_INT 2
9168: PUSH
9169: LD_INT 4
9171: PUSH
9172: LD_INT 5
9174: PUSH
9175: LD_INT 7
9177: PUSH
9178: LD_INT 11
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: LD_INT 15
9186: PUSH
9187: LD_INT 16
9189: PUSH
9190: LD_INT 20
9192: PUSH
9193: LD_INT 21
9195: PUSH
9196: LD_INT 22
9198: PUSH
9199: LD_INT 23
9201: PUSH
9202: LD_INT 25
9204: PUSH
9205: LD_INT 26
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 101
9226: PUSH
9227: LD_INT 102
9229: PUSH
9230: LD_INT 103
9232: PUSH
9233: LD_INT 105
9235: PUSH
9236: LD_INT 106
9238: PUSH
9239: LD_INT 108
9241: PUSH
9242: LD_INT 112
9244: PUSH
9245: LD_INT 116
9247: PUSH
9248: LD_INT 117
9250: PUSH
9251: LD_INT 118
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: ST_TO_ADDR
9270: GO 11673
9272: LD_INT 8
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9420
9280: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9281: LD_ADDR_VAR 0 2
9285: PUSH
9286: LD_INT 2
9288: PUSH
9289: LD_INT 4
9291: PUSH
9292: LD_INT 5
9294: PUSH
9295: LD_INT 6
9297: PUSH
9298: LD_INT 7
9300: PUSH
9301: LD_INT 8
9303: PUSH
9304: LD_INT 11
9306: PUSH
9307: LD_INT 12
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 20
9318: PUSH
9319: LD_INT 21
9321: PUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 23
9327: PUSH
9328: LD_INT 25
9330: PUSH
9331: LD_INT 26
9333: PUSH
9334: LD_INT 30
9336: PUSH
9337: LD_INT 31
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 36
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 101
9370: PUSH
9371: LD_INT 102
9373: PUSH
9374: LD_INT 103
9376: PUSH
9377: LD_INT 105
9379: PUSH
9380: LD_INT 106
9382: PUSH
9383: LD_INT 108
9385: PUSH
9386: LD_INT 109
9388: PUSH
9389: LD_INT 112
9391: PUSH
9392: LD_INT 116
9394: PUSH
9395: LD_INT 117
9397: PUSH
9398: LD_INT 118
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: ST_TO_ADDR
9418: GO 11673
9420: LD_INT 9
9422: DOUBLE
9423: EQUAL
9424: IFTRUE 9428
9426: GO 9576
9428: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9429: LD_ADDR_VAR 0 2
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: LD_INT 4
9439: PUSH
9440: LD_INT 5
9442: PUSH
9443: LD_INT 6
9445: PUSH
9446: LD_INT 7
9448: PUSH
9449: LD_INT 8
9451: PUSH
9452: LD_INT 11
9454: PUSH
9455: LD_INT 12
9457: PUSH
9458: LD_INT 15
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: LD_INT 20
9466: PUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 23
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 28
9484: PUSH
9485: LD_INT 30
9487: PUSH
9488: LD_INT 31
9490: PUSH
9491: LD_INT 32
9493: PUSH
9494: LD_INT 36
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 101
9522: PUSH
9523: LD_INT 102
9525: PUSH
9526: LD_INT 103
9528: PUSH
9529: LD_INT 105
9531: PUSH
9532: LD_INT 106
9534: PUSH
9535: LD_INT 108
9537: PUSH
9538: LD_INT 109
9540: PUSH
9541: LD_INT 112
9543: PUSH
9544: LD_INT 114
9546: PUSH
9547: LD_INT 116
9549: PUSH
9550: LD_INT 117
9552: PUSH
9553: LD_INT 118
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: ST_TO_ADDR
9574: GO 11673
9576: LD_INT 10
9578: DOUBLE
9579: EQUAL
9580: IFTRUE 9584
9582: GO 9780
9584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9585: LD_ADDR_VAR 0 2
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 4
9595: PUSH
9596: LD_INT 5
9598: PUSH
9599: LD_INT 6
9601: PUSH
9602: LD_INT 7
9604: PUSH
9605: LD_INT 8
9607: PUSH
9608: LD_INT 9
9610: PUSH
9611: LD_INT 10
9613: PUSH
9614: LD_INT 11
9616: PUSH
9617: LD_INT 12
9619: PUSH
9620: LD_INT 13
9622: PUSH
9623: LD_INT 14
9625: PUSH
9626: LD_INT 15
9628: PUSH
9629: LD_INT 16
9631: PUSH
9632: LD_INT 17
9634: PUSH
9635: LD_INT 18
9637: PUSH
9638: LD_INT 19
9640: PUSH
9641: LD_INT 20
9643: PUSH
9644: LD_INT 21
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 24
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 26
9661: PUSH
9662: LD_INT 28
9664: PUSH
9665: LD_INT 30
9667: PUSH
9668: LD_INT 31
9670: PUSH
9671: LD_INT 32
9673: PUSH
9674: LD_INT 36
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 101
9710: PUSH
9711: LD_INT 102
9713: PUSH
9714: LD_INT 103
9716: PUSH
9717: LD_INT 104
9719: PUSH
9720: LD_INT 105
9722: PUSH
9723: LD_INT 106
9725: PUSH
9726: LD_INT 107
9728: PUSH
9729: LD_INT 108
9731: PUSH
9732: LD_INT 109
9734: PUSH
9735: LD_INT 110
9737: PUSH
9738: LD_INT 111
9740: PUSH
9741: LD_INT 112
9743: PUSH
9744: LD_INT 114
9746: PUSH
9747: LD_INT 116
9749: PUSH
9750: LD_INT 117
9752: PUSH
9753: LD_INT 118
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: ST_TO_ADDR
9778: GO 11673
9780: LD_INT 11
9782: DOUBLE
9783: EQUAL
9784: IFTRUE 9788
9786: GO 9992
9788: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 6
9808: PUSH
9809: LD_INT 7
9811: PUSH
9812: LD_INT 8
9814: PUSH
9815: LD_INT 9
9817: PUSH
9818: LD_INT 10
9820: PUSH
9821: LD_INT 11
9823: PUSH
9824: LD_INT 12
9826: PUSH
9827: LD_INT 13
9829: PUSH
9830: LD_INT 14
9832: PUSH
9833: LD_INT 15
9835: PUSH
9836: LD_INT 16
9838: PUSH
9839: LD_INT 17
9841: PUSH
9842: LD_INT 18
9844: PUSH
9845: LD_INT 19
9847: PUSH
9848: LD_INT 20
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_INT 24
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 26
9868: PUSH
9869: LD_INT 28
9871: PUSH
9872: LD_INT 30
9874: PUSH
9875: LD_INT 31
9877: PUSH
9878: LD_INT 32
9880: PUSH
9881: LD_INT 34
9883: PUSH
9884: LD_INT 36
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 101
9922: PUSH
9923: LD_INT 102
9925: PUSH
9926: LD_INT 103
9928: PUSH
9929: LD_INT 104
9931: PUSH
9932: LD_INT 105
9934: PUSH
9935: LD_INT 106
9937: PUSH
9938: LD_INT 107
9940: PUSH
9941: LD_INT 108
9943: PUSH
9944: LD_INT 109
9946: PUSH
9947: LD_INT 110
9949: PUSH
9950: LD_INT 111
9952: PUSH
9953: LD_INT 112
9955: PUSH
9956: LD_INT 114
9958: PUSH
9959: LD_INT 116
9961: PUSH
9962: LD_INT 117
9964: PUSH
9965: LD_INT 118
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: ST_TO_ADDR
9990: GO 11673
9992: LD_INT 12
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10000
9998: GO 10220
10000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 4
10017: PUSH
10018: LD_INT 5
10020: PUSH
10021: LD_INT 6
10023: PUSH
10024: LD_INT 7
10026: PUSH
10027: LD_INT 8
10029: PUSH
10030: LD_INT 9
10032: PUSH
10033: LD_INT 10
10035: PUSH
10036: LD_INT 11
10038: PUSH
10039: LD_INT 12
10041: PUSH
10042: LD_INT 13
10044: PUSH
10045: LD_INT 14
10047: PUSH
10048: LD_INT 15
10050: PUSH
10051: LD_INT 16
10053: PUSH
10054: LD_INT 17
10056: PUSH
10057: LD_INT 18
10059: PUSH
10060: LD_INT 19
10062: PUSH
10063: LD_INT 20
10065: PUSH
10066: LD_INT 21
10068: PUSH
10069: LD_INT 22
10071: PUSH
10072: LD_INT 23
10074: PUSH
10075: LD_INT 24
10077: PUSH
10078: LD_INT 25
10080: PUSH
10081: LD_INT 26
10083: PUSH
10084: LD_INT 27
10086: PUSH
10087: LD_INT 28
10089: PUSH
10090: LD_INT 30
10092: PUSH
10093: LD_INT 31
10095: PUSH
10096: LD_INT 32
10098: PUSH
10099: LD_INT 33
10101: PUSH
10102: LD_INT 34
10104: PUSH
10105: LD_INT 36
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 101
10146: PUSH
10147: LD_INT 102
10149: PUSH
10150: LD_INT 103
10152: PUSH
10153: LD_INT 104
10155: PUSH
10156: LD_INT 105
10158: PUSH
10159: LD_INT 106
10161: PUSH
10162: LD_INT 107
10164: PUSH
10165: LD_INT 108
10167: PUSH
10168: LD_INT 109
10170: PUSH
10171: LD_INT 110
10173: PUSH
10174: LD_INT 111
10176: PUSH
10177: LD_INT 112
10179: PUSH
10180: LD_INT 113
10182: PUSH
10183: LD_INT 114
10185: PUSH
10186: LD_INT 116
10188: PUSH
10189: LD_INT 117
10191: PUSH
10192: LD_INT 118
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: ST_TO_ADDR
10218: GO 11673
10220: LD_INT 13
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10436
10228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_INT 1
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: LD_INT 3
10242: PUSH
10243: LD_INT 4
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: LD_INT 8
10251: PUSH
10252: LD_INT 9
10254: PUSH
10255: LD_INT 10
10257: PUSH
10258: LD_INT 11
10260: PUSH
10261: LD_INT 12
10263: PUSH
10264: LD_INT 14
10266: PUSH
10267: LD_INT 15
10269: PUSH
10270: LD_INT 16
10272: PUSH
10273: LD_INT 17
10275: PUSH
10276: LD_INT 18
10278: PUSH
10279: LD_INT 19
10281: PUSH
10282: LD_INT 20
10284: PUSH
10285: LD_INT 21
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 23
10293: PUSH
10294: LD_INT 24
10296: PUSH
10297: LD_INT 25
10299: PUSH
10300: LD_INT 26
10302: PUSH
10303: LD_INT 27
10305: PUSH
10306: LD_INT 28
10308: PUSH
10309: LD_INT 30
10311: PUSH
10312: LD_INT 31
10314: PUSH
10315: LD_INT 32
10317: PUSH
10318: LD_INT 33
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 36
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 101
10362: PUSH
10363: LD_INT 102
10365: PUSH
10366: LD_INT 103
10368: PUSH
10369: LD_INT 104
10371: PUSH
10372: LD_INT 105
10374: PUSH
10375: LD_INT 106
10377: PUSH
10378: LD_INT 107
10380: PUSH
10381: LD_INT 108
10383: PUSH
10384: LD_INT 109
10386: PUSH
10387: LD_INT 110
10389: PUSH
10390: LD_INT 111
10392: PUSH
10393: LD_INT 112
10395: PUSH
10396: LD_INT 113
10398: PUSH
10399: LD_INT 114
10401: PUSH
10402: LD_INT 116
10404: PUSH
10405: LD_INT 117
10407: PUSH
10408: LD_INT 118
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: ST_TO_ADDR
10434: GO 11673
10436: LD_INT 14
10438: DOUBLE
10439: EQUAL
10440: IFTRUE 10444
10442: GO 10668
10444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 1
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: LD_INT 3
10458: PUSH
10459: LD_INT 4
10461: PUSH
10462: LD_INT 5
10464: PUSH
10465: LD_INT 6
10467: PUSH
10468: LD_INT 7
10470: PUSH
10471: LD_INT 8
10473: PUSH
10474: LD_INT 9
10476: PUSH
10477: LD_INT 10
10479: PUSH
10480: LD_INT 11
10482: PUSH
10483: LD_INT 12
10485: PUSH
10486: LD_INT 13
10488: PUSH
10489: LD_INT 14
10491: PUSH
10492: LD_INT 15
10494: PUSH
10495: LD_INT 16
10497: PUSH
10498: LD_INT 17
10500: PUSH
10501: LD_INT 18
10503: PUSH
10504: LD_INT 19
10506: PUSH
10507: LD_INT 20
10509: PUSH
10510: LD_INT 21
10512: PUSH
10513: LD_INT 22
10515: PUSH
10516: LD_INT 23
10518: PUSH
10519: LD_INT 24
10521: PUSH
10522: LD_INT 25
10524: PUSH
10525: LD_INT 26
10527: PUSH
10528: LD_INT 27
10530: PUSH
10531: LD_INT 28
10533: PUSH
10534: LD_INT 29
10536: PUSH
10537: LD_INT 30
10539: PUSH
10540: LD_INT 31
10542: PUSH
10543: LD_INT 32
10545: PUSH
10546: LD_INT 33
10548: PUSH
10549: LD_INT 34
10551: PUSH
10552: LD_INT 36
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 101
10594: PUSH
10595: LD_INT 102
10597: PUSH
10598: LD_INT 103
10600: PUSH
10601: LD_INT 104
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 107
10612: PUSH
10613: LD_INT 108
10615: PUSH
10616: LD_INT 109
10618: PUSH
10619: LD_INT 110
10621: PUSH
10622: LD_INT 111
10624: PUSH
10625: LD_INT 112
10627: PUSH
10628: LD_INT 113
10630: PUSH
10631: LD_INT 114
10633: PUSH
10634: LD_INT 116
10636: PUSH
10637: LD_INT 117
10639: PUSH
10640: LD_INT 118
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: ST_TO_ADDR
10666: GO 11673
10668: LD_INT 15
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10900
10676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 3
10690: PUSH
10691: LD_INT 4
10693: PUSH
10694: LD_INT 5
10696: PUSH
10697: LD_INT 6
10699: PUSH
10700: LD_INT 7
10702: PUSH
10703: LD_INT 8
10705: PUSH
10706: LD_INT 9
10708: PUSH
10709: LD_INT 10
10711: PUSH
10712: LD_INT 11
10714: PUSH
10715: LD_INT 12
10717: PUSH
10718: LD_INT 13
10720: PUSH
10721: LD_INT 14
10723: PUSH
10724: LD_INT 15
10726: PUSH
10727: LD_INT 16
10729: PUSH
10730: LD_INT 17
10732: PUSH
10733: LD_INT 18
10735: PUSH
10736: LD_INT 19
10738: PUSH
10739: LD_INT 20
10741: PUSH
10742: LD_INT 21
10744: PUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 23
10750: PUSH
10751: LD_INT 24
10753: PUSH
10754: LD_INT 25
10756: PUSH
10757: LD_INT 26
10759: PUSH
10760: LD_INT 27
10762: PUSH
10763: LD_INT 28
10765: PUSH
10766: LD_INT 29
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 31
10774: PUSH
10775: LD_INT 32
10777: PUSH
10778: LD_INT 33
10780: PUSH
10781: LD_INT 34
10783: PUSH
10784: LD_INT 36
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 101
10826: PUSH
10827: LD_INT 102
10829: PUSH
10830: LD_INT 103
10832: PUSH
10833: LD_INT 104
10835: PUSH
10836: LD_INT 105
10838: PUSH
10839: LD_INT 106
10841: PUSH
10842: LD_INT 107
10844: PUSH
10845: LD_INT 108
10847: PUSH
10848: LD_INT 109
10850: PUSH
10851: LD_INT 110
10853: PUSH
10854: LD_INT 111
10856: PUSH
10857: LD_INT 112
10859: PUSH
10860: LD_INT 113
10862: PUSH
10863: LD_INT 114
10865: PUSH
10866: LD_INT 116
10868: PUSH
10869: LD_INT 117
10871: PUSH
10872: LD_INT 118
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: ST_TO_ADDR
10898: GO 11673
10900: LD_INT 16
10902: DOUBLE
10903: EQUAL
10904: IFTRUE 10908
10906: GO 11044
10908: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_INT 2
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 5
10922: PUSH
10923: LD_INT 7
10925: PUSH
10926: LD_INT 11
10928: PUSH
10929: LD_INT 12
10931: PUSH
10932: LD_INT 15
10934: PUSH
10935: LD_INT 16
10937: PUSH
10938: LD_INT 20
10940: PUSH
10941: LD_INT 21
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 23
10949: PUSH
10950: LD_INT 25
10952: PUSH
10953: LD_INT 26
10955: PUSH
10956: LD_INT 30
10958: PUSH
10959: LD_INT 31
10961: PUSH
10962: LD_INT 32
10964: PUSH
10965: LD_INT 33
10967: PUSH
10968: LD_INT 34
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 101
10994: PUSH
10995: LD_INT 102
10997: PUSH
10998: LD_INT 103
11000: PUSH
11001: LD_INT 106
11003: PUSH
11004: LD_INT 108
11006: PUSH
11007: LD_INT 112
11009: PUSH
11010: LD_INT 113
11012: PUSH
11013: LD_INT 114
11015: PUSH
11016: LD_INT 116
11018: PUSH
11019: LD_INT 117
11021: PUSH
11022: LD_INT 118
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: ST_TO_ADDR
11042: GO 11673
11044: LD_INT 17
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11276
11052: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_INT 1
11060: PUSH
11061: LD_INT 2
11063: PUSH
11064: LD_INT 3
11066: PUSH
11067: LD_INT 4
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: LD_INT 6
11075: PUSH
11076: LD_INT 7
11078: PUSH
11079: LD_INT 8
11081: PUSH
11082: LD_INT 9
11084: PUSH
11085: LD_INT 10
11087: PUSH
11088: LD_INT 11
11090: PUSH
11091: LD_INT 12
11093: PUSH
11094: LD_INT 13
11096: PUSH
11097: LD_INT 14
11099: PUSH
11100: LD_INT 15
11102: PUSH
11103: LD_INT 16
11105: PUSH
11106: LD_INT 17
11108: PUSH
11109: LD_INT 18
11111: PUSH
11112: LD_INT 19
11114: PUSH
11115: LD_INT 20
11117: PUSH
11118: LD_INT 21
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 23
11126: PUSH
11127: LD_INT 24
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 26
11135: PUSH
11136: LD_INT 27
11138: PUSH
11139: LD_INT 28
11141: PUSH
11142: LD_INT 29
11144: PUSH
11145: LD_INT 30
11147: PUSH
11148: LD_INT 31
11150: PUSH
11151: LD_INT 32
11153: PUSH
11154: LD_INT 33
11156: PUSH
11157: LD_INT 34
11159: PUSH
11160: LD_INT 36
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 101
11202: PUSH
11203: LD_INT 102
11205: PUSH
11206: LD_INT 103
11208: PUSH
11209: LD_INT 104
11211: PUSH
11212: LD_INT 105
11214: PUSH
11215: LD_INT 106
11217: PUSH
11218: LD_INT 107
11220: PUSH
11221: LD_INT 108
11223: PUSH
11224: LD_INT 109
11226: PUSH
11227: LD_INT 110
11229: PUSH
11230: LD_INT 111
11232: PUSH
11233: LD_INT 112
11235: PUSH
11236: LD_INT 113
11238: PUSH
11239: LD_INT 114
11241: PUSH
11242: LD_INT 116
11244: PUSH
11245: LD_INT 117
11247: PUSH
11248: LD_INT 118
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: ST_TO_ADDR
11274: GO 11673
11276: LD_INT 18
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11432
11284: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: LD_INT 4
11295: PUSH
11296: LD_INT 5
11298: PUSH
11299: LD_INT 7
11301: PUSH
11302: LD_INT 11
11304: PUSH
11305: LD_INT 12
11307: PUSH
11308: LD_INT 15
11310: PUSH
11311: LD_INT 16
11313: PUSH
11314: LD_INT 20
11316: PUSH
11317: LD_INT 21
11319: PUSH
11320: LD_INT 22
11322: PUSH
11323: LD_INT 23
11325: PUSH
11326: LD_INT 25
11328: PUSH
11329: LD_INT 26
11331: PUSH
11332: LD_INT 30
11334: PUSH
11335: LD_INT 31
11337: PUSH
11338: LD_INT 32
11340: PUSH
11341: LD_INT 33
11343: PUSH
11344: LD_INT 34
11346: PUSH
11347: LD_INT 35
11349: PUSH
11350: LD_INT 36
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 101
11378: PUSH
11379: LD_INT 102
11381: PUSH
11382: LD_INT 103
11384: PUSH
11385: LD_INT 106
11387: PUSH
11388: LD_INT 108
11390: PUSH
11391: LD_INT 112
11393: PUSH
11394: LD_INT 113
11396: PUSH
11397: LD_INT 114
11399: PUSH
11400: LD_INT 115
11402: PUSH
11403: LD_INT 116
11405: PUSH
11406: LD_INT 117
11408: PUSH
11409: LD_INT 118
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: ST_TO_ADDR
11430: GO 11673
11432: LD_INT 19
11434: DOUBLE
11435: EQUAL
11436: IFTRUE 11440
11438: GO 11672
11440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: LD_INT 1
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: LD_INT 3
11454: PUSH
11455: LD_INT 4
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: LD_INT 6
11463: PUSH
11464: LD_INT 7
11466: PUSH
11467: LD_INT 8
11469: PUSH
11470: LD_INT 9
11472: PUSH
11473: LD_INT 10
11475: PUSH
11476: LD_INT 11
11478: PUSH
11479: LD_INT 12
11481: PUSH
11482: LD_INT 13
11484: PUSH
11485: LD_INT 14
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 17
11496: PUSH
11497: LD_INT 18
11499: PUSH
11500: LD_INT 19
11502: PUSH
11503: LD_INT 20
11505: PUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_INT 23
11514: PUSH
11515: LD_INT 24
11517: PUSH
11518: LD_INT 25
11520: PUSH
11521: LD_INT 26
11523: PUSH
11524: LD_INT 27
11526: PUSH
11527: LD_INT 28
11529: PUSH
11530: LD_INT 29
11532: PUSH
11533: LD_INT 30
11535: PUSH
11536: LD_INT 31
11538: PUSH
11539: LD_INT 32
11541: PUSH
11542: LD_INT 33
11544: PUSH
11545: LD_INT 34
11547: PUSH
11548: LD_INT 35
11550: PUSH
11551: LD_INT 36
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 101
11594: PUSH
11595: LD_INT 102
11597: PUSH
11598: LD_INT 103
11600: PUSH
11601: LD_INT 104
11603: PUSH
11604: LD_INT 105
11606: PUSH
11607: LD_INT 106
11609: PUSH
11610: LD_INT 107
11612: PUSH
11613: LD_INT 108
11615: PUSH
11616: LD_INT 109
11618: PUSH
11619: LD_INT 110
11621: PUSH
11622: LD_INT 111
11624: PUSH
11625: LD_INT 112
11627: PUSH
11628: LD_INT 113
11630: PUSH
11631: LD_INT 114
11633: PUSH
11634: LD_INT 115
11636: PUSH
11637: LD_INT 116
11639: PUSH
11640: LD_INT 117
11642: PUSH
11643: LD_INT 118
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: ST_TO_ADDR
11670: GO 11673
11672: POP
// end else
11673: GO 11904
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: LD_INT 4
11691: PUSH
11692: LD_INT 5
11694: PUSH
11695: LD_INT 6
11697: PUSH
11698: LD_INT 7
11700: PUSH
11701: LD_INT 8
11703: PUSH
11704: LD_INT 9
11706: PUSH
11707: LD_INT 10
11709: PUSH
11710: LD_INT 11
11712: PUSH
11713: LD_INT 12
11715: PUSH
11716: LD_INT 13
11718: PUSH
11719: LD_INT 14
11721: PUSH
11722: LD_INT 15
11724: PUSH
11725: LD_INT 16
11727: PUSH
11728: LD_INT 17
11730: PUSH
11731: LD_INT 18
11733: PUSH
11734: LD_INT 19
11736: PUSH
11737: LD_INT 20
11739: PUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 23
11748: PUSH
11749: LD_INT 24
11751: PUSH
11752: LD_INT 25
11754: PUSH
11755: LD_INT 26
11757: PUSH
11758: LD_INT 27
11760: PUSH
11761: LD_INT 28
11763: PUSH
11764: LD_INT 29
11766: PUSH
11767: LD_INT 30
11769: PUSH
11770: LD_INT 31
11772: PUSH
11773: LD_INT 32
11775: PUSH
11776: LD_INT 33
11778: PUSH
11779: LD_INT 34
11781: PUSH
11782: LD_INT 35
11784: PUSH
11785: LD_INT 36
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 101
11828: PUSH
11829: LD_INT 102
11831: PUSH
11832: LD_INT 103
11834: PUSH
11835: LD_INT 104
11837: PUSH
11838: LD_INT 105
11840: PUSH
11841: LD_INT 106
11843: PUSH
11844: LD_INT 107
11846: PUSH
11847: LD_INT 108
11849: PUSH
11850: LD_INT 109
11852: PUSH
11853: LD_INT 110
11855: PUSH
11856: LD_INT 111
11858: PUSH
11859: LD_INT 112
11861: PUSH
11862: LD_INT 113
11864: PUSH
11865: LD_INT 114
11867: PUSH
11868: LD_INT 115
11870: PUSH
11871: LD_INT 116
11873: PUSH
11874: LD_INT 117
11876: PUSH
11877: LD_INT 118
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: ST_TO_ADDR
// if result then
11904: LD_VAR 0 2
11908: IFFALSE 12694
// begin normal :=  ;
11910: LD_ADDR_VAR 0 5
11914: PUSH
11915: LD_STRING 
11917: ST_TO_ADDR
// hardcore :=  ;
11918: LD_ADDR_VAR 0 6
11922: PUSH
11923: LD_STRING 
11925: ST_TO_ADDR
// active :=  ;
11926: LD_ADDR_VAR 0 7
11930: PUSH
11931: LD_STRING 
11933: ST_TO_ADDR
// for i = 1 to normalCounter do
11934: LD_ADDR_VAR 0 8
11938: PUSH
11939: DOUBLE
11940: LD_INT 1
11942: DEC
11943: ST_TO_ADDR
11944: LD_EXP 29
11948: PUSH
11949: FOR_TO
11950: IFFALSE 12051
// begin tmp := 0 ;
11952: LD_ADDR_VAR 0 3
11956: PUSH
11957: LD_STRING 0
11959: ST_TO_ADDR
// if result [ 1 ] then
11960: LD_VAR 0 2
11964: PUSH
11965: LD_INT 1
11967: ARRAY
11968: IFFALSE 12033
// if result [ 1 ] [ 1 ] = i then
11970: LD_VAR 0 2
11974: PUSH
11975: LD_INT 1
11977: ARRAY
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PUSH
11983: LD_VAR 0 8
11987: EQUAL
11988: IFFALSE 12033
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_VAR 0 2
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_VAR 0 2
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 3
12019: PPUSH
12020: CALL_OW 1
12024: ST_TO_ADDR
// tmp := 1 ;
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_STRING 1
12032: ST_TO_ADDR
// end ; normal := normal & tmp ;
12033: LD_ADDR_VAR 0 5
12037: PUSH
12038: LD_VAR 0 5
12042: PUSH
12043: LD_VAR 0 3
12047: STR
12048: ST_TO_ADDR
// end ;
12049: GO 11949
12051: POP
12052: POP
// for i = 1 to hardcoreCounter do
12053: LD_ADDR_VAR 0 8
12057: PUSH
12058: DOUBLE
12059: LD_INT 1
12061: DEC
12062: ST_TO_ADDR
12063: LD_EXP 30
12067: PUSH
12068: FOR_TO
12069: IFFALSE 12174
// begin tmp := 0 ;
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: LD_STRING 0
12078: ST_TO_ADDR
// if result [ 2 ] then
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 2
12086: ARRAY
12087: IFFALSE 12156
// if result [ 2 ] [ 1 ] = 100 + i then
12089: LD_VAR 0 2
12093: PUSH
12094: LD_INT 2
12096: ARRAY
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PUSH
12102: LD_INT 100
12104: PUSH
12105: LD_VAR 0 8
12109: PLUS
12110: EQUAL
12111: IFFALSE 12156
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_VAR 0 2
12122: PPUSH
12123: LD_INT 2
12125: PPUSH
12126: LD_VAR 0 2
12130: PUSH
12131: LD_INT 2
12133: ARRAY
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 3
12142: PPUSH
12143: CALL_OW 1
12147: ST_TO_ADDR
// tmp := 1 ;
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_STRING 1
12155: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12156: LD_ADDR_VAR 0 6
12160: PUSH
12161: LD_VAR 0 6
12165: PUSH
12166: LD_VAR 0 3
12170: STR
12171: ST_TO_ADDR
// end ;
12172: GO 12068
12174: POP
12175: POP
// if isGameLoad then
12176: LD_VAR 0 1
12180: IFFALSE 12655
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12182: LD_ADDR_VAR 0 4
12186: PUSH
12187: LD_EXP 33
12191: PUSH
12192: LD_EXP 32
12196: PUSH
12197: LD_EXP 34
12201: PUSH
12202: LD_EXP 31
12206: PUSH
12207: LD_EXP 35
12211: PUSH
12212: LD_EXP 36
12216: PUSH
12217: LD_EXP 37
12221: PUSH
12222: LD_EXP 38
12226: PUSH
12227: LD_EXP 39
12231: PUSH
12232: LD_EXP 40
12236: PUSH
12237: LD_EXP 41
12241: PUSH
12242: LD_EXP 42
12246: PUSH
12247: LD_EXP 43
12251: PUSH
12252: LD_EXP 44
12256: PUSH
12257: LD_EXP 52
12261: PUSH
12262: LD_EXP 53
12266: PUSH
12267: LD_EXP 54
12271: PUSH
12272: LD_EXP 55
12276: PUSH
12277: LD_EXP 57
12281: PUSH
12282: LD_EXP 58
12286: PUSH
12287: LD_EXP 59
12291: PUSH
12292: LD_EXP 62
12296: PUSH
12297: LD_EXP 64
12301: PUSH
12302: LD_EXP 65
12306: PUSH
12307: LD_EXP 66
12311: PUSH
12312: LD_EXP 68
12316: PUSH
12317: LD_EXP 69
12321: PUSH
12322: LD_EXP 72
12326: PUSH
12327: LD_EXP 73
12331: PUSH
12332: LD_EXP 74
12336: PUSH
12337: LD_EXP 75
12341: PUSH
12342: LD_EXP 76
12346: PUSH
12347: LD_EXP 77
12351: PUSH
12352: LD_EXP 78
12356: PUSH
12357: LD_EXP 79
12361: PUSH
12362: LD_EXP 80
12366: PUSH
12367: LD_EXP 45
12371: PUSH
12372: LD_EXP 46
12376: PUSH
12377: LD_EXP 49
12381: PUSH
12382: LD_EXP 50
12386: PUSH
12387: LD_EXP 51
12391: PUSH
12392: LD_EXP 47
12396: PUSH
12397: LD_EXP 48
12401: PUSH
12402: LD_EXP 56
12406: PUSH
12407: LD_EXP 60
12411: PUSH
12412: LD_EXP 61
12416: PUSH
12417: LD_EXP 63
12421: PUSH
12422: LD_EXP 67
12426: PUSH
12427: LD_EXP 70
12431: PUSH
12432: LD_EXP 71
12436: PUSH
12437: LD_EXP 81
12441: PUSH
12442: LD_EXP 82
12446: PUSH
12447: LD_EXP 83
12451: PUSH
12452: LD_EXP 84
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: ST_TO_ADDR
// tmp :=  ;
12513: LD_ADDR_VAR 0 3
12517: PUSH
12518: LD_STRING 
12520: ST_TO_ADDR
// for i = 1 to normalCounter do
12521: LD_ADDR_VAR 0 8
12525: PUSH
12526: DOUBLE
12527: LD_INT 1
12529: DEC
12530: ST_TO_ADDR
12531: LD_EXP 29
12535: PUSH
12536: FOR_TO
12537: IFFALSE 12573
// begin if flags [ i ] then
12539: LD_VAR 0 4
12543: PUSH
12544: LD_VAR 0 8
12548: ARRAY
12549: IFFALSE 12571
// tmp := tmp & i & ; ;
12551: LD_ADDR_VAR 0 3
12555: PUSH
12556: LD_VAR 0 3
12560: PUSH
12561: LD_VAR 0 8
12565: STR
12566: PUSH
12567: LD_STRING ;
12569: STR
12570: ST_TO_ADDR
// end ;
12571: GO 12536
12573: POP
12574: POP
// for i = 1 to hardcoreCounter do
12575: LD_ADDR_VAR 0 8
12579: PUSH
12580: DOUBLE
12581: LD_INT 1
12583: DEC
12584: ST_TO_ADDR
12585: LD_EXP 30
12589: PUSH
12590: FOR_TO
12591: IFFALSE 12637
// begin if flags [ normalCounter + i ] then
12593: LD_VAR 0 4
12597: PUSH
12598: LD_EXP 29
12602: PUSH
12603: LD_VAR 0 8
12607: PLUS
12608: ARRAY
12609: IFFALSE 12635
// tmp := tmp & ( 100 + i ) & ; ;
12611: LD_ADDR_VAR 0 3
12615: PUSH
12616: LD_VAR 0 3
12620: PUSH
12621: LD_INT 100
12623: PUSH
12624: LD_VAR 0 8
12628: PLUS
12629: STR
12630: PUSH
12631: LD_STRING ;
12633: STR
12634: ST_TO_ADDR
// end ;
12635: GO 12590
12637: POP
12638: POP
// if tmp then
12639: LD_VAR 0 3
12643: IFFALSE 12655
// active := tmp ;
12645: LD_ADDR_VAR 0 7
12649: PUSH
12650: LD_VAR 0 3
12654: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12655: LD_STRING getStreamItemsFromMission("
12657: PUSH
12658: LD_VAR 0 5
12662: STR
12663: PUSH
12664: LD_STRING ","
12666: STR
12667: PUSH
12668: LD_VAR 0 6
12672: STR
12673: PUSH
12674: LD_STRING ","
12676: STR
12677: PUSH
12678: LD_VAR 0 7
12682: STR
12683: PUSH
12684: LD_STRING ")
12686: STR
12687: PPUSH
12688: CALL_OW 559
// end else
12692: GO 12701
// ToLua ( getStreamItemsFromMission("","","") ) ;
12694: LD_STRING getStreamItemsFromMission("","","")
12696: PPUSH
12697: CALL_OW 559
// end ;
12701: LD_VAR 0 2
12705: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12706: LD_EXP 28
12710: PUSH
12711: LD_EXP 33
12715: AND
12716: IFFALSE 12840
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin enable ;
12725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_OWVAR 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 34
12748: PUSH
12749: LD_INT 7
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 34
12758: PUSH
12759: LD_INT 45
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 34
12768: PUSH
12769: LD_INT 28
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 34
12778: PUSH
12779: LD_INT 47
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 69
12801: ST_TO_ADDR
// if not tmp then
12802: LD_VAR 0 2
12806: NOT
12807: IFFALSE 12811
// exit ;
12809: GO 12840
// for i in tmp do
12811: LD_ADDR_VAR 0 1
12815: PUSH
12816: LD_VAR 0 2
12820: PUSH
12821: FOR_IN
12822: IFFALSE 12838
// begin SetLives ( i , 0 ) ;
12824: LD_VAR 0 1
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 234
// end ;
12836: GO 12821
12838: POP
12839: POP
// end ;
12840: PPOPN 2
12842: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12843: LD_EXP 28
12847: PUSH
12848: LD_EXP 34
12852: AND
12853: IFFALSE 12937
12855: GO 12857
12857: DISABLE
12858: LD_INT 0
12860: PPUSH
12861: PPUSH
// begin enable ;
12862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12863: LD_ADDR_VAR 0 2
12867: PUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 32
12882: PUSH
12883: LD_INT 3
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PPUSH
12894: CALL_OW 69
12898: ST_TO_ADDR
// if not tmp then
12899: LD_VAR 0 2
12903: NOT
12904: IFFALSE 12908
// exit ;
12906: GO 12937
// for i in tmp do
12908: LD_ADDR_VAR 0 1
12912: PUSH
12913: LD_VAR 0 2
12917: PUSH
12918: FOR_IN
12919: IFFALSE 12935
// begin SetLives ( i , 0 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 0
12928: PPUSH
12929: CALL_OW 234
// end ;
12933: GO 12918
12935: POP
12936: POP
// end ;
12937: PPOPN 2
12939: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12940: LD_EXP 28
12944: PUSH
12945: LD_EXP 31
12949: AND
12950: IFFALSE 13043
12952: GO 12954
12954: DISABLE
12955: LD_INT 0
12957: PPUSH
// begin enable ;
12958: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12959: LD_ADDR_VAR 0 1
12963: PUSH
12964: LD_INT 22
12966: PUSH
12967: LD_OWVAR 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: LD_INT 25
12981: PUSH
12982: LD_INT 5
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 25
12991: PUSH
12992: LD_INT 9
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 69
13023: PUSH
13024: FOR_IN
13025: IFFALSE 13041
// begin SetClass ( i , 1 ) ;
13027: LD_VAR 0 1
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 336
// end ;
13039: GO 13024
13041: POP
13042: POP
// end ;
13043: PPOPN 1
13045: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13046: LD_EXP 28
13050: PUSH
13051: LD_EXP 32
13055: AND
13056: PUSH
13057: LD_OWVAR 65
13061: PUSH
13062: LD_INT 7
13064: LESS
13065: AND
13066: IFFALSE 13080
13068: GO 13070
13070: DISABLE
// begin enable ;
13071: ENABLE
// game_speed := 7 ;
13072: LD_ADDR_OWVAR 65
13076: PUSH
13077: LD_INT 7
13079: ST_TO_ADDR
// end ;
13080: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13081: LD_EXP 28
13085: PUSH
13086: LD_EXP 35
13090: AND
13091: IFFALSE 13293
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
13099: PPUSH
13100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: LD_INT 81
13108: PUSH
13109: LD_OWVAR 2
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 21
13120: PUSH
13121: LD_INT 1
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PPUSH
13132: CALL_OW 69
13136: ST_TO_ADDR
// if not tmp then
13137: LD_VAR 0 3
13141: NOT
13142: IFFALSE 13146
// exit ;
13144: GO 13293
// if tmp > 5 then
13146: LD_VAR 0 3
13150: PUSH
13151: LD_INT 5
13153: GREATER
13154: IFFALSE 13166
// k := 5 else
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_INT 5
13163: ST_TO_ADDR
13164: GO 13176
// k := tmp ;
13166: LD_ADDR_VAR 0 2
13170: PUSH
13171: LD_VAR 0 3
13175: ST_TO_ADDR
// for i := 1 to k do
13176: LD_ADDR_VAR 0 1
13180: PUSH
13181: DOUBLE
13182: LD_INT 1
13184: DEC
13185: ST_TO_ADDR
13186: LD_VAR 0 2
13190: PUSH
13191: FOR_TO
13192: IFFALSE 13291
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13194: LD_VAR 0 3
13198: PUSH
13199: LD_VAR 0 1
13203: ARRAY
13204: PPUSH
13205: LD_VAR 0 1
13209: PUSH
13210: LD_INT 4
13212: MOD
13213: PUSH
13214: LD_INT 1
13216: PLUS
13217: PPUSH
13218: CALL_OW 259
13222: PUSH
13223: LD_INT 10
13225: LESS
13226: IFFALSE 13289
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13228: LD_VAR 0 3
13232: PUSH
13233: LD_VAR 0 1
13237: ARRAY
13238: PPUSH
13239: LD_VAR 0 1
13243: PUSH
13244: LD_INT 4
13246: MOD
13247: PUSH
13248: LD_INT 1
13250: PLUS
13251: PPUSH
13252: LD_VAR 0 3
13256: PUSH
13257: LD_VAR 0 1
13261: ARRAY
13262: PPUSH
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 4
13270: MOD
13271: PUSH
13272: LD_INT 1
13274: PLUS
13275: PPUSH
13276: CALL_OW 259
13280: PUSH
13281: LD_INT 1
13283: PLUS
13284: PPUSH
13285: CALL_OW 237
13289: GO 13191
13291: POP
13292: POP
// end ;
13293: PPOPN 3
13295: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13296: LD_EXP 28
13300: PUSH
13301: LD_EXP 36
13305: AND
13306: IFFALSE 13326
13308: GO 13310
13310: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13311: LD_INT 4
13313: PPUSH
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_INT 0
13321: PPUSH
13322: CALL_OW 324
13326: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13327: LD_EXP 28
13331: PUSH
13332: LD_EXP 65
13336: AND
13337: IFFALSE 13357
13339: GO 13341
13341: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13342: LD_INT 19
13344: PPUSH
13345: LD_OWVAR 2
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 324
13357: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13358: LD_EXP 28
13362: PUSH
13363: LD_EXP 37
13367: AND
13368: IFFALSE 13470
13370: GO 13372
13372: DISABLE
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
// begin enable ;
13377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 34
13400: PUSH
13401: LD_INT 11
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 34
13410: PUSH
13411: LD_INT 30
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: ST_TO_ADDR
// if not tmp then
13432: LD_VAR 0 2
13436: NOT
13437: IFFALSE 13441
// exit ;
13439: GO 13470
// for i in tmp do
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_VAR 0 2
13450: PUSH
13451: FOR_IN
13452: IFFALSE 13468
// begin SetLives ( i , 0 ) ;
13454: LD_VAR 0 1
13458: PPUSH
13459: LD_INT 0
13461: PPUSH
13462: CALL_OW 234
// end ;
13466: GO 13451
13468: POP
13469: POP
// end ;
13470: PPOPN 2
13472: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13473: LD_EXP 28
13477: PUSH
13478: LD_EXP 38
13482: AND
13483: IFFALSE 13503
13485: GO 13487
13487: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13488: LD_INT 32
13490: PPUSH
13491: LD_OWVAR 2
13495: PPUSH
13496: LD_INT 0
13498: PPUSH
13499: CALL_OW 324
13503: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13504: LD_EXP 28
13508: PUSH
13509: LD_EXP 39
13513: AND
13514: IFFALSE 13695
13516: GO 13518
13518: DISABLE
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
13523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 22
13531: PUSH
13532: LD_OWVAR 2
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 33
13543: PUSH
13544: LD_INT 3
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: ST_TO_ADDR
// if not tmp then
13560: LD_VAR 0 2
13564: NOT
13565: IFFALSE 13569
// exit ;
13567: GO 13695
// side := 0 ;
13569: LD_ADDR_VAR 0 3
13573: PUSH
13574: LD_INT 0
13576: ST_TO_ADDR
// for i := 1 to 8 do
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: DOUBLE
13583: LD_INT 1
13585: DEC
13586: ST_TO_ADDR
13587: LD_INT 8
13589: PUSH
13590: FOR_TO
13591: IFFALSE 13639
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13593: LD_OWVAR 2
13597: PUSH
13598: LD_VAR 0 1
13602: NONEQUAL
13603: PUSH
13604: LD_OWVAR 2
13608: PPUSH
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 81
13618: PUSH
13619: LD_INT 2
13621: EQUAL
13622: AND
13623: IFFALSE 13637
// begin side := i ;
13625: LD_ADDR_VAR 0 3
13629: PUSH
13630: LD_VAR 0 1
13634: ST_TO_ADDR
// break ;
13635: GO 13639
// end ;
13637: GO 13590
13639: POP
13640: POP
// if not side then
13641: LD_VAR 0 3
13645: NOT
13646: IFFALSE 13650
// exit ;
13648: GO 13695
// for i := 1 to tmp do
13650: LD_ADDR_VAR 0 1
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_VAR 0 2
13664: PUSH
13665: FOR_TO
13666: IFFALSE 13693
// if Prob ( 60 ) then
13668: LD_INT 60
13670: PPUSH
13671: CALL_OW 13
13675: IFFALSE 13691
// SetSide ( i , side ) ;
13677: LD_VAR 0 1
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: CALL_OW 235
13691: GO 13665
13693: POP
13694: POP
// end ;
13695: PPOPN 3
13697: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13698: LD_EXP 28
13702: PUSH
13703: LD_EXP 41
13707: AND
13708: IFFALSE 13827
13710: GO 13712
13712: DISABLE
13713: LD_INT 0
13715: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_OWVAR 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 3
13745: PUSH
13746: LD_INT 23
13748: PUSH
13749: LD_INT 0
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13825
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13773: LD_VAR 0 1
13777: PPUSH
13778: CALL_OW 257
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: LD_INT 2
13788: PUSH
13789: LD_INT 3
13791: PUSH
13792: LD_INT 4
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: IN
13801: IFFALSE 13823
// SetClass ( un , rand ( 1 , 4 ) ) ;
13803: LD_VAR 0 1
13807: PPUSH
13808: LD_INT 1
13810: PPUSH
13811: LD_INT 4
13813: PPUSH
13814: CALL_OW 12
13818: PPUSH
13819: CALL_OW 336
13823: GO 13770
13825: POP
13826: POP
// end ;
13827: PPOPN 1
13829: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13830: LD_EXP 28
13834: PUSH
13835: LD_EXP 40
13839: AND
13840: IFFALSE 13919
13842: GO 13844
13844: DISABLE
13845: LD_INT 0
13847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_INT 22
13855: PUSH
13856: LD_OWVAR 2
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 3
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 69
13883: ST_TO_ADDR
// if not tmp then
13884: LD_VAR 0 1
13888: NOT
13889: IFFALSE 13893
// exit ;
13891: GO 13919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13893: LD_VAR 0 1
13897: PUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 12
13910: ARRAY
13911: PPUSH
13912: LD_INT 100
13914: PPUSH
13915: CALL_OW 234
// end ;
13919: PPOPN 1
13921: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13922: LD_EXP 28
13926: PUSH
13927: LD_EXP 42
13931: AND
13932: IFFALSE 14030
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13940: LD_ADDR_VAR 0 1
13944: PUSH
13945: LD_INT 22
13947: PUSH
13948: LD_OWVAR 2
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PPUSH
13971: CALL_OW 69
13975: ST_TO_ADDR
// if not tmp then
13976: LD_VAR 0 1
13980: NOT
13981: IFFALSE 13985
// exit ;
13983: GO 14030
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13985: LD_VAR 0 1
13989: PUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 12
14002: ARRAY
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: LD_INT 4
14009: PPUSH
14010: CALL_OW 12
14014: PPUSH
14015: LD_INT 3000
14017: PPUSH
14018: LD_INT 9000
14020: PPUSH
14021: CALL_OW 12
14025: PPUSH
14026: CALL_OW 492
// end ;
14030: PPOPN 1
14032: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14033: LD_EXP 28
14037: PUSH
14038: LD_EXP 43
14042: AND
14043: IFFALSE 14063
14045: GO 14047
14047: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14048: LD_INT 1
14050: PPUSH
14051: LD_OWVAR 2
14055: PPUSH
14056: LD_INT 0
14058: PPUSH
14059: CALL_OW 324
14063: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14064: LD_EXP 28
14068: PUSH
14069: LD_EXP 44
14073: AND
14074: IFFALSE 14157
14076: GO 14078
14078: DISABLE
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14083: LD_ADDR_VAR 0 2
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_OWVAR 2
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 21
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PPUSH
14114: CALL_OW 69
14118: ST_TO_ADDR
// if not tmp then
14119: LD_VAR 0 2
14123: NOT
14124: IFFALSE 14128
// exit ;
14126: GO 14157
// for i in tmp do
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: LD_VAR 0 2
14137: PUSH
14138: FOR_IN
14139: IFFALSE 14155
// SetBLevel ( i , 10 ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 10
14148: PPUSH
14149: CALL_OW 241
14153: GO 14138
14155: POP
14156: POP
// end ;
14157: PPOPN 2
14159: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14160: LD_EXP 28
14164: PUSH
14165: LD_EXP 45
14169: AND
14170: IFFALSE 14281
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
14179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_OWVAR 2
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 25
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: ST_TO_ADDR
// if not tmp then
14216: LD_VAR 0 3
14220: NOT
14221: IFFALSE 14225
// exit ;
14223: GO 14281
// un := tmp [ rand ( 1 , tmp ) ] ;
14225: LD_ADDR_VAR 0 2
14229: PUSH
14230: LD_VAR 0 3
14234: PUSH
14235: LD_INT 1
14237: PPUSH
14238: LD_VAR 0 3
14242: PPUSH
14243: CALL_OW 12
14247: ARRAY
14248: ST_TO_ADDR
// if Crawls ( un ) then
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 318
14258: IFFALSE 14269
// ComWalk ( un ) ;
14260: LD_VAR 0 2
14264: PPUSH
14265: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_INT 5
14276: PPUSH
14277: CALL_OW 336
// end ;
14281: PPOPN 3
14283: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14284: LD_EXP 28
14288: PUSH
14289: LD_EXP 46
14293: AND
14294: PUSH
14295: LD_OWVAR 67
14299: PUSH
14300: LD_INT 4
14302: LESS
14303: AND
14304: IFFALSE 14323
14306: GO 14308
14308: DISABLE
// begin Difficulty := Difficulty + 1 ;
14309: LD_ADDR_OWVAR 67
14313: PUSH
14314: LD_OWVAR 67
14318: PUSH
14319: LD_INT 1
14321: PLUS
14322: ST_TO_ADDR
// end ;
14323: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14324: LD_EXP 28
14328: PUSH
14329: LD_EXP 47
14333: AND
14334: IFFALSE 14437
14336: GO 14338
14338: DISABLE
14339: LD_INT 0
14341: PPUSH
// begin for i := 1 to 5 do
14342: LD_ADDR_VAR 0 1
14346: PUSH
14347: DOUBLE
14348: LD_INT 1
14350: DEC
14351: ST_TO_ADDR
14352: LD_INT 5
14354: PUSH
14355: FOR_TO
14356: IFFALSE 14435
// begin uc_nation := nation_nature ;
14358: LD_ADDR_OWVAR 21
14362: PUSH
14363: LD_INT 0
14365: ST_TO_ADDR
// uc_side := 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14374: LD_ADDR_OWVAR 29
14378: PUSH
14379: LD_INT 12
14381: PUSH
14382: LD_INT 12
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: ST_TO_ADDR
// hc_agressivity := 20 ;
14389: LD_ADDR_OWVAR 35
14393: PUSH
14394: LD_INT 20
14396: ST_TO_ADDR
// hc_class := class_tiger ;
14397: LD_ADDR_OWVAR 28
14401: PUSH
14402: LD_INT 14
14404: ST_TO_ADDR
// hc_gallery :=  ;
14405: LD_ADDR_OWVAR 33
14409: PUSH
14410: LD_STRING 
14412: ST_TO_ADDR
// hc_name :=  ;
14413: LD_ADDR_OWVAR 26
14417: PUSH
14418: LD_STRING 
14420: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14421: CALL_OW 44
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 51
// end ;
14433: GO 14355
14435: POP
14436: POP
// end ;
14437: PPOPN 1
14439: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14440: LD_EXP 28
14444: PUSH
14445: LD_EXP 48
14449: AND
14450: IFFALSE 14459
14452: GO 14454
14454: DISABLE
// StreamSibBomb ;
14455: CALL 14460 0 0
14459: END
// export function StreamSibBomb ; var i , x , y ; begin
14460: LD_INT 0
14462: PPUSH
14463: PPUSH
14464: PPUSH
14465: PPUSH
// result := false ;
14466: LD_ADDR_VAR 0 1
14470: PUSH
14471: LD_INT 0
14473: ST_TO_ADDR
// for i := 1 to 16 do
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: DOUBLE
14480: LD_INT 1
14482: DEC
14483: ST_TO_ADDR
14484: LD_INT 16
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14687
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 10
14497: PUSH
14498: LD_INT 20
14500: PUSH
14501: LD_INT 30
14503: PUSH
14504: LD_INT 40
14506: PUSH
14507: LD_INT 50
14509: PUSH
14510: LD_INT 60
14512: PUSH
14513: LD_INT 70
14515: PUSH
14516: LD_INT 80
14518: PUSH
14519: LD_INT 90
14521: PUSH
14522: LD_INT 100
14524: PUSH
14525: LD_INT 110
14527: PUSH
14528: LD_INT 120
14530: PUSH
14531: LD_INT 130
14533: PUSH
14534: LD_INT 140
14536: PUSH
14537: LD_INT 150
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 1
14559: PPUSH
14560: LD_INT 15
14562: PPUSH
14563: CALL_OW 12
14567: ARRAY
14568: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14569: LD_ADDR_VAR 0 4
14573: PUSH
14574: LD_INT 10
14576: PUSH
14577: LD_INT 20
14579: PUSH
14580: LD_INT 30
14582: PUSH
14583: LD_INT 40
14585: PUSH
14586: LD_INT 50
14588: PUSH
14589: LD_INT 60
14591: PUSH
14592: LD_INT 70
14594: PUSH
14595: LD_INT 80
14597: PUSH
14598: LD_INT 90
14600: PUSH
14601: LD_INT 100
14603: PUSH
14604: LD_INT 110
14606: PUSH
14607: LD_INT 120
14609: PUSH
14610: LD_INT 130
14612: PUSH
14613: LD_INT 140
14615: PUSH
14616: LD_INT 150
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_INT 15
14641: PPUSH
14642: CALL_OW 12
14646: ARRAY
14647: ST_TO_ADDR
// if ValidHex ( x , y ) then
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_VAR 0 4
14657: PPUSH
14658: CALL_OW 488
14662: IFFALSE 14685
// begin result := [ x , y ] ;
14664: LD_ADDR_VAR 0 1
14668: PUSH
14669: LD_VAR 0 3
14673: PUSH
14674: LD_VAR 0 4
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: ST_TO_ADDR
// break ;
14683: GO 14687
// end ; end ;
14685: GO 14487
14687: POP
14688: POP
// if result then
14689: LD_VAR 0 1
14693: IFFALSE 14753
// begin ToLua ( playSibBomb() ) ;
14695: LD_STRING playSibBomb()
14697: PPUSH
14698: CALL_OW 559
// wait ( 0 0$14 ) ;
14702: LD_INT 490
14704: PPUSH
14705: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14709: LD_VAR 0 1
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: LD_VAR 0 1
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: PPUSH
14727: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14731: LD_VAR 0 1
14735: PUSH
14736: LD_INT 1
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 1
14744: PUSH
14745: LD_INT 2
14747: ARRAY
14748: PPUSH
14749: CALL_OW 429
// end ; end ;
14753: LD_VAR 0 1
14757: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14758: LD_EXP 28
14762: PUSH
14763: LD_EXP 50
14767: AND
14768: IFFALSE 14780
14770: GO 14772
14772: DISABLE
// YouLost (  ) ;
14773: LD_STRING 
14775: PPUSH
14776: CALL_OW 104
14780: END
// every 0 0$1 trigger StreamModeActive and sFog do
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 49
14790: AND
14791: IFFALSE 14805
14793: GO 14795
14795: DISABLE
// FogOff ( your_side ) ;
14796: LD_OWVAR 2
14800: PPUSH
14801: CALL_OW 344
14805: END
// every 0 0$1 trigger StreamModeActive and sSun do
14806: LD_EXP 28
14810: PUSH
14811: LD_EXP 51
14815: AND
14816: IFFALSE 14844
14818: GO 14820
14820: DISABLE
// begin solar_recharge_percent := 0 ;
14821: LD_ADDR_OWVAR 79
14825: PUSH
14826: LD_INT 0
14828: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14829: LD_INT 10500
14831: PPUSH
14832: CALL_OW 67
// solar_recharge_percent := 100 ;
14836: LD_ADDR_OWVAR 79
14840: PUSH
14841: LD_INT 100
14843: ST_TO_ADDR
// end ;
14844: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14845: LD_EXP 28
14849: PUSH
14850: LD_EXP 52
14854: AND
14855: IFFALSE 15094
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
14864: PPUSH
// begin tmp := [ ] ;
14865: LD_ADDR_VAR 0 3
14869: PUSH
14870: EMPTY
14871: ST_TO_ADDR
// for i := 1 to 6 do
14872: LD_ADDR_VAR 0 1
14876: PUSH
14877: DOUBLE
14878: LD_INT 1
14880: DEC
14881: ST_TO_ADDR
14882: LD_INT 6
14884: PUSH
14885: FOR_TO
14886: IFFALSE 14991
// begin uc_nation := nation_nature ;
14888: LD_ADDR_OWVAR 21
14892: PUSH
14893: LD_INT 0
14895: ST_TO_ADDR
// uc_side := 0 ;
14896: LD_ADDR_OWVAR 20
14900: PUSH
14901: LD_INT 0
14903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14904: LD_ADDR_OWVAR 29
14908: PUSH
14909: LD_INT 12
14911: PUSH
14912: LD_INT 12
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: ST_TO_ADDR
// hc_agressivity := 20 ;
14919: LD_ADDR_OWVAR 35
14923: PUSH
14924: LD_INT 20
14926: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14927: LD_ADDR_OWVAR 28
14931: PUSH
14932: LD_INT 17
14934: ST_TO_ADDR
// hc_gallery :=  ;
14935: LD_ADDR_OWVAR 33
14939: PUSH
14940: LD_STRING 
14942: ST_TO_ADDR
// hc_name :=  ;
14943: LD_ADDR_OWVAR 26
14947: PUSH
14948: LD_STRING 
14950: ST_TO_ADDR
// un := CreateHuman ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: CALL_OW 44
14960: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14961: LD_VAR 0 2
14965: PPUSH
14966: LD_INT 1
14968: PPUSH
14969: CALL_OW 51
// tmp := tmp ^ un ;
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: LD_VAR 0 3
14982: PUSH
14983: LD_VAR 0 2
14987: ADD
14988: ST_TO_ADDR
// end ;
14989: GO 14885
14991: POP
14992: POP
// repeat wait ( 0 0$1 ) ;
14993: LD_INT 35
14995: PPUSH
14996: CALL_OW 67
// for un in tmp do
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_VAR 0 3
15009: PUSH
15010: FOR_IN
15011: IFFALSE 15085
// begin if IsDead ( un ) then
15013: LD_VAR 0 2
15017: PPUSH
15018: CALL_OW 301
15022: IFFALSE 15042
// begin tmp := tmp diff un ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_VAR 0 3
15033: PUSH
15034: LD_VAR 0 2
15038: DIFF
15039: ST_TO_ADDR
// continue ;
15040: GO 15010
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_INT 3
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 0
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: PPUSH
15069: LD_VAR 0 2
15073: PPUSH
15074: CALL_OW 74
15078: PPUSH
15079: CALL_OW 115
// end ;
15083: GO 15010
15085: POP
15086: POP
// until not tmp ;
15087: LD_VAR 0 3
15091: NOT
15092: IFFALSE 14993
// end ;
15094: PPOPN 3
15096: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15097: LD_EXP 28
15101: PUSH
15102: LD_EXP 53
15106: AND
15107: IFFALSE 15161
15109: GO 15111
15111: DISABLE
// begin ToLua ( displayTroll(); ) ;
15112: LD_STRING displayTroll();
15114: PPUSH
15115: CALL_OW 559
// wait ( 3 3$00 ) ;
15119: LD_INT 6300
15121: PPUSH
15122: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15126: LD_STRING hideTroll();
15128: PPUSH
15129: CALL_OW 559
// wait ( 1 1$00 ) ;
15133: LD_INT 2100
15135: PPUSH
15136: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15140: LD_STRING displayTroll();
15142: PPUSH
15143: CALL_OW 559
// wait ( 1 1$00 ) ;
15147: LD_INT 2100
15149: PPUSH
15150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15154: LD_STRING hideTroll();
15156: PPUSH
15157: CALL_OW 559
// end ;
15161: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15162: LD_EXP 28
15166: PUSH
15167: LD_EXP 54
15171: AND
15172: IFFALSE 15235
15174: GO 15176
15176: DISABLE
15177: LD_INT 0
15179: PPUSH
// begin p := 0 ;
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: LD_INT 0
15187: ST_TO_ADDR
// repeat game_speed := 1 ;
15188: LD_ADDR_OWVAR 65
15192: PUSH
15193: LD_INT 1
15195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15196: LD_INT 35
15198: PPUSH
15199: CALL_OW 67
// p := p + 1 ;
15203: LD_ADDR_VAR 0 1
15207: PUSH
15208: LD_VAR 0 1
15212: PUSH
15213: LD_INT 1
15215: PLUS
15216: ST_TO_ADDR
// until p >= 60 ;
15217: LD_VAR 0 1
15221: PUSH
15222: LD_INT 60
15224: GREATEREQUAL
15225: IFFALSE 15188
// game_speed := 4 ;
15227: LD_ADDR_OWVAR 65
15231: PUSH
15232: LD_INT 4
15234: ST_TO_ADDR
// end ;
15235: PPOPN 1
15237: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15238: LD_EXP 28
15242: PUSH
15243: LD_EXP 55
15247: AND
15248: IFFALSE 15394
15250: GO 15252
15252: DISABLE
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15257: LD_ADDR_VAR 0 1
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_OWVAR 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 30
15279: PUSH
15280: LD_INT 0
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 30
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: ST_TO_ADDR
// if not depot then
15311: LD_VAR 0 1
15315: NOT
15316: IFFALSE 15320
// exit ;
15318: GO 15394
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15320: LD_ADDR_VAR 0 2
15324: PUSH
15325: LD_VAR 0 1
15329: PUSH
15330: LD_INT 1
15332: PPUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 12
15342: ARRAY
15343: PPUSH
15344: CALL_OW 274
15348: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15364: LD_VAR 0 2
15368: PPUSH
15369: LD_INT 2
15371: PPUSH
15372: LD_INT 0
15374: PPUSH
15375: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15379: LD_VAR 0 2
15383: PPUSH
15384: LD_INT 3
15386: PPUSH
15387: LD_INT 0
15389: PPUSH
15390: CALL_OW 277
// end ;
15394: PPOPN 2
15396: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15397: LD_EXP 28
15401: PUSH
15402: LD_EXP 56
15406: AND
15407: IFFALSE 15504
15409: GO 15411
15411: DISABLE
15412: LD_INT 0
15414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: LD_INT 22
15422: PUSH
15423: LD_OWVAR 2
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 21
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: LD_INT 23
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: ST_TO_ADDR
// if not tmp then
15469: LD_VAR 0 1
15473: NOT
15474: IFFALSE 15478
// exit ;
15476: GO 15504
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 12
15495: ARRAY
15496: PPUSH
15497: LD_INT 200
15499: PPUSH
15500: CALL_OW 234
// end ;
15504: PPOPN 1
15506: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15507: LD_EXP 28
15511: PUSH
15512: LD_EXP 57
15516: AND
15517: IFFALSE 15596
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15525: LD_ADDR_VAR 0 1
15529: PUSH
15530: LD_INT 22
15532: PUSH
15533: LD_OWVAR 2
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 2
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 69
15560: ST_TO_ADDR
// if not tmp then
15561: LD_VAR 0 1
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15570: LD_VAR 0 1
15574: PUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_VAR 0 1
15582: PPUSH
15583: CALL_OW 12
15587: ARRAY
15588: PPUSH
15589: LD_INT 60
15591: PPUSH
15592: CALL_OW 234
// end ;
15596: PPOPN 1
15598: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15599: LD_EXP 28
15603: PUSH
15604: LD_EXP 58
15608: AND
15609: IFFALSE 15708
15611: GO 15613
15613: DISABLE
15614: LD_INT 0
15616: PPUSH
15617: PPUSH
// begin enable ;
15618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_INT 22
15626: PUSH
15627: LD_OWVAR 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 61
15638: PUSH
15639: EMPTY
15640: LIST
15641: PUSH
15642: LD_INT 33
15644: PUSH
15645: LD_INT 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 69
15661: ST_TO_ADDR
// if not tmp then
15662: LD_VAR 0 1
15666: NOT
15667: IFFALSE 15671
// exit ;
15669: GO 15708
// for i in tmp do
15671: LD_ADDR_VAR 0 2
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: FOR_IN
15682: IFFALSE 15706
// if IsControledBy ( i ) then
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 312
15693: IFFALSE 15704
// ComUnlink ( i ) ;
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 136
15704: GO 15681
15706: POP
15707: POP
// end ;
15708: PPOPN 2
15710: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15711: LD_EXP 28
15715: PUSH
15716: LD_EXP 59
15720: AND
15721: IFFALSE 15861
15723: GO 15725
15725: DISABLE
15726: LD_INT 0
15728: PPUSH
15729: PPUSH
// begin ToLua ( displayPowell(); ) ;
15730: LD_STRING displayPowell();
15732: PPUSH
15733: CALL_OW 559
// uc_side := 0 ;
15737: LD_ADDR_OWVAR 20
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// uc_nation := 2 ;
15745: LD_ADDR_OWVAR 21
15749: PUSH
15750: LD_INT 2
15752: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15753: LD_ADDR_OWVAR 37
15757: PUSH
15758: LD_INT 14
15760: ST_TO_ADDR
// vc_engine := engine_siberite ;
15761: LD_ADDR_OWVAR 39
15765: PUSH
15766: LD_INT 3
15768: ST_TO_ADDR
// vc_control := control_apeman ;
15769: LD_ADDR_OWVAR 38
15773: PUSH
15774: LD_INT 5
15776: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15777: LD_ADDR_OWVAR 40
15781: PUSH
15782: LD_INT 29
15784: ST_TO_ADDR
// un := CreateVehicle ;
15785: LD_ADDR_VAR 0 2
15789: PUSH
15790: CALL_OW 45
15794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15795: LD_VAR 0 2
15799: PPUSH
15800: LD_INT 1
15802: PPUSH
15803: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15807: LD_INT 35
15809: PPUSH
15810: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15814: LD_VAR 0 2
15818: PPUSH
15819: LD_INT 22
15821: PUSH
15822: LD_OWVAR 2
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: CALL_OW 69
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: CALL_OW 74
15845: PPUSH
15846: CALL_OW 115
// until IsDead ( un ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: CALL_OW 301
15859: IFFALSE 15807
// end ;
15861: PPOPN 2
15863: END
// every 0 0$1 trigger StreamModeActive and sStu do
15864: LD_EXP 28
15868: PUSH
15869: LD_EXP 67
15873: AND
15874: IFFALSE 15890
15876: GO 15878
15878: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15879: LD_STRING displayStucuk();
15881: PPUSH
15882: CALL_OW 559
// ResetFog ;
15886: CALL_OW 335
// end ;
15890: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15891: LD_EXP 28
15895: PUSH
15896: LD_EXP 60
15900: AND
15901: IFFALSE 16042
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15910: LD_ADDR_VAR 0 2
15914: PUSH
15915: LD_INT 22
15917: PUSH
15918: LD_OWVAR 2
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 21
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PPUSH
15941: CALL_OW 69
15945: ST_TO_ADDR
// if not tmp then
15946: LD_VAR 0 2
15950: NOT
15951: IFFALSE 15955
// exit ;
15953: GO 16042
// un := tmp [ rand ( 1 , tmp ) ] ;
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_VAR 0 2
15964: PUSH
15965: LD_INT 1
15967: PPUSH
15968: LD_VAR 0 2
15972: PPUSH
15973: CALL_OW 12
15977: ARRAY
15978: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15979: LD_VAR 0 1
15983: PPUSH
15984: LD_INT 0
15986: PPUSH
15987: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_OWVAR 3
16000: PUSH
16001: LD_VAR 0 1
16005: DIFF
16006: PPUSH
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 74
16016: PPUSH
16017: CALL_OW 115
// wait ( 0 0$20 ) ;
16021: LD_INT 700
16023: PPUSH
16024: CALL_OW 67
// SetSide ( un , your_side ) ;
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_OWVAR 2
16037: PPUSH
16038: CALL_OW 235
// end ;
16042: PPOPN 2
16044: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16045: LD_EXP 28
16049: PUSH
16050: LD_EXP 61
16054: AND
16055: IFFALSE 16161
16057: GO 16059
16059: DISABLE
16060: LD_INT 0
16062: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16063: LD_ADDR_VAR 0 1
16067: PUSH
16068: LD_INT 22
16070: PUSH
16071: LD_OWVAR 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: LD_INT 30
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 30
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if not depot then
16117: LD_VAR 0 1
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16161
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16126: LD_VAR 0 1
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: PPUSH
16135: CALL_OW 250
16139: PPUSH
16140: LD_VAR 0 1
16144: PUSH
16145: LD_INT 1
16147: ARRAY
16148: PPUSH
16149: CALL_OW 251
16153: PPUSH
16154: LD_INT 70
16156: PPUSH
16157: CALL_OW 495
// end ;
16161: PPOPN 1
16163: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16164: LD_EXP 28
16168: PUSH
16169: LD_EXP 62
16173: AND
16174: IFFALSE 16385
16176: GO 16178
16178: DISABLE
16179: LD_INT 0
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
16185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16186: LD_ADDR_VAR 0 5
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_OWVAR 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 21
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: ST_TO_ADDR
// if not tmp then
16222: LD_VAR 0 5
16226: NOT
16227: IFFALSE 16231
// exit ;
16229: GO 16385
// for i in tmp do
16231: LD_ADDR_VAR 0 1
16235: PUSH
16236: LD_VAR 0 5
16240: PUSH
16241: FOR_IN
16242: IFFALSE 16383
// begin d := rand ( 0 , 5 ) ;
16244: LD_ADDR_VAR 0 4
16248: PUSH
16249: LD_INT 0
16251: PPUSH
16252: LD_INT 5
16254: PPUSH
16255: CALL_OW 12
16259: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16260: LD_ADDR_VAR 0 2
16264: PUSH
16265: LD_VAR 0 1
16269: PPUSH
16270: CALL_OW 250
16274: PPUSH
16275: LD_VAR 0 4
16279: PPUSH
16280: LD_INT 3
16282: PPUSH
16283: LD_INT 12
16285: PPUSH
16286: CALL_OW 12
16290: PPUSH
16291: CALL_OW 272
16295: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16296: LD_ADDR_VAR 0 3
16300: PUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 251
16310: PPUSH
16311: LD_VAR 0 4
16315: PPUSH
16316: LD_INT 3
16318: PPUSH
16319: LD_INT 12
16321: PPUSH
16322: CALL_OW 12
16326: PPUSH
16327: CALL_OW 273
16331: ST_TO_ADDR
// if ValidHex ( x , y ) then
16332: LD_VAR 0 2
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: CALL_OW 488
16346: IFFALSE 16381
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16348: LD_VAR 0 1
16352: PPUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_VAR 0 3
16362: PPUSH
16363: LD_INT 3
16365: PPUSH
16366: LD_INT 6
16368: PPUSH
16369: CALL_OW 12
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 483
// end ;
16381: GO 16241
16383: POP
16384: POP
// end ;
16385: PPOPN 5
16387: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16388: LD_EXP 28
16392: PUSH
16393: LD_EXP 63
16397: AND
16398: IFFALSE 16492
16400: GO 16402
16402: DISABLE
16403: LD_INT 0
16405: PPUSH
16406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: LD_INT 22
16414: PUSH
16415: LD_OWVAR 2
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 32
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 21
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 2
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16492
// for i in tmp do
16463: LD_ADDR_VAR 0 1
16467: PUSH
16468: LD_VAR 0 2
16472: PUSH
16473: FOR_IN
16474: IFFALSE 16490
// SetFuel ( i , 0 ) ;
16476: LD_VAR 0 1
16480: PPUSH
16481: LD_INT 0
16483: PPUSH
16484: CALL_OW 240
16488: GO 16473
16490: POP
16491: POP
// end ;
16492: PPOPN 2
16494: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16495: LD_EXP 28
16499: PUSH
16500: LD_EXP 64
16504: AND
16505: IFFALSE 16571
16507: GO 16509
16509: DISABLE
16510: LD_INT 0
16512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: LD_INT 22
16520: PUSH
16521: LD_OWVAR 2
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 30
16532: PUSH
16533: LD_INT 29
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 1
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16571
// DestroyUnit ( tmp [ 1 ] ) ;
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 65
// end ;
16571: PPOPN 1
16573: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16574: LD_EXP 28
16578: PUSH
16579: LD_EXP 66
16583: AND
16584: IFFALSE 16713
16586: GO 16588
16588: DISABLE
16589: LD_INT 0
16591: PPUSH
// begin uc_side := 0 ;
16592: LD_ADDR_OWVAR 20
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// uc_nation := nation_arabian ;
16600: LD_ADDR_OWVAR 21
16604: PUSH
16605: LD_INT 2
16607: ST_TO_ADDR
// hc_gallery :=  ;
16608: LD_ADDR_OWVAR 33
16612: PUSH
16613: LD_STRING 
16615: ST_TO_ADDR
// hc_name :=  ;
16616: LD_ADDR_OWVAR 26
16620: PUSH
16621: LD_STRING 
16623: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16624: LD_INT 1
16626: PPUSH
16627: LD_INT 11
16629: PPUSH
16630: LD_INT 10
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_INT 1
16654: PPUSH
16655: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16659: LD_INT 35
16661: PPUSH
16662: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16666: LD_VAR 0 1
16670: PPUSH
16671: LD_INT 22
16673: PUSH
16674: LD_OWVAR 2
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 74
16697: PPUSH
16698: CALL_OW 115
// until IsDead ( un ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 301
16711: IFFALSE 16659
// end ;
16713: PPOPN 1
16715: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16716: LD_EXP 28
16720: PUSH
16721: LD_EXP 68
16725: AND
16726: IFFALSE 16738
16728: GO 16730
16730: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16731: LD_STRING earthquake(getX(game), 0, 32)
16733: PPUSH
16734: CALL_OW 559
16738: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16739: LD_EXP 28
16743: PUSH
16744: LD_EXP 69
16748: AND
16749: IFFALSE 16840
16751: GO 16753
16753: DISABLE
16754: LD_INT 0
16756: PPUSH
// begin enable ;
16757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: LD_INT 22
16765: PUSH
16766: LD_OWVAR 2
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 21
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 33
16787: PUSH
16788: LD_INT 3
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// if not tmp then
16805: LD_VAR 0 1
16809: NOT
16810: IFFALSE 16814
// exit ;
16812: GO 16840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16814: LD_VAR 0 1
16818: PUSH
16819: LD_INT 1
16821: PPUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 12
16831: ARRAY
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 234
// end ;
16840: PPOPN 1
16842: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16843: LD_EXP 28
16847: PUSH
16848: LD_EXP 70
16852: AND
16853: IFFALSE 16994
16855: GO 16857
16857: DISABLE
16858: LD_INT 0
16860: PPUSH
16861: PPUSH
16862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: LD_INT 22
16870: PUSH
16871: LD_OWVAR 2
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PPUSH
16894: CALL_OW 69
16898: ST_TO_ADDR
// if not tmp then
16899: LD_VAR 0 3
16903: NOT
16904: IFFALSE 16908
// exit ;
16906: GO 16994
// un := tmp [ rand ( 1 , tmp ) ] ;
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_VAR 0 3
16917: PUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: CALL_OW 12
16930: ARRAY
16931: ST_TO_ADDR
// if Crawls ( un ) then
16932: LD_VAR 0 2
16936: PPUSH
16937: CALL_OW 318
16941: IFFALSE 16952
// ComWalk ( un ) ;
16943: LD_VAR 0 2
16947: PPUSH
16948: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16952: LD_VAR 0 2
16956: PPUSH
16957: LD_INT 9
16959: PPUSH
16960: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16964: LD_INT 28
16966: PPUSH
16967: LD_OWVAR 2
16971: PPUSH
16972: LD_INT 2
16974: PPUSH
16975: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16979: LD_INT 29
16981: PPUSH
16982: LD_OWVAR 2
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: CALL_OW 322
// end ;
16994: PPOPN 3
16996: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16997: LD_EXP 28
17001: PUSH
17002: LD_EXP 71
17006: AND
17007: IFFALSE 17118
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
17016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_INT 22
17024: PUSH
17025: LD_OWVAR 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 25
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PPUSH
17048: CALL_OW 69
17052: ST_TO_ADDR
// if not tmp then
17053: LD_VAR 0 3
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17118
// un := tmp [ rand ( 1 , tmp ) ] ;
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_VAR 0 3
17071: PUSH
17072: LD_INT 1
17074: PPUSH
17075: LD_VAR 0 3
17079: PPUSH
17080: CALL_OW 12
17084: ARRAY
17085: ST_TO_ADDR
// if Crawls ( un ) then
17086: LD_VAR 0 2
17090: PPUSH
17091: CALL_OW 318
17095: IFFALSE 17106
// ComWalk ( un ) ;
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17106: LD_VAR 0 2
17110: PPUSH
17111: LD_INT 8
17113: PPUSH
17114: CALL_OW 336
// end ;
17118: PPOPN 3
17120: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17121: LD_EXP 28
17125: PUSH
17126: LD_EXP 72
17130: AND
17131: IFFALSE 17275
17133: GO 17135
17135: DISABLE
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17140: LD_ADDR_VAR 0 2
17144: PUSH
17145: LD_INT 22
17147: PUSH
17148: LD_OWVAR 2
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 21
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 2
17169: PUSH
17170: LD_INT 34
17172: PUSH
17173: LD_INT 12
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 34
17192: PUSH
17193: LD_INT 32
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 69
17215: ST_TO_ADDR
// if not tmp then
17216: LD_VAR 0 2
17220: NOT
17221: IFFALSE 17225
// exit ;
17223: GO 17275
// for i in tmp do
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_VAR 0 2
17234: PUSH
17235: FOR_IN
17236: IFFALSE 17273
// if GetCargo ( i , mat_artifact ) = 0 then
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 4
17245: PPUSH
17246: CALL_OW 289
17250: PUSH
17251: LD_INT 0
17253: EQUAL
17254: IFFALSE 17271
// SetCargo ( i , mat_siberit , 100 ) ;
17256: LD_VAR 0 1
17260: PPUSH
17261: LD_INT 3
17263: PPUSH
17264: LD_INT 100
17266: PPUSH
17267: CALL_OW 290
17271: GO 17235
17273: POP
17274: POP
// end ;
17275: PPOPN 2
17277: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17278: LD_EXP 28
17282: PUSH
17283: LD_EXP 73
17287: AND
17288: IFFALSE 17471
17290: GO 17292
17292: DISABLE
17293: LD_INT 0
17295: PPUSH
17296: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17297: LD_ADDR_VAR 0 2
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_OWVAR 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 69
17318: ST_TO_ADDR
// if not tmp then
17319: LD_VAR 0 2
17323: NOT
17324: IFFALSE 17328
// exit ;
17326: GO 17471
// for i := 1 to 2 do
17328: LD_ADDR_VAR 0 1
17332: PUSH
17333: DOUBLE
17334: LD_INT 1
17336: DEC
17337: ST_TO_ADDR
17338: LD_INT 2
17340: PUSH
17341: FOR_TO
17342: IFFALSE 17469
// begin uc_side := your_side ;
17344: LD_ADDR_OWVAR 20
17348: PUSH
17349: LD_OWVAR 2
17353: ST_TO_ADDR
// uc_nation := nation_american ;
17354: LD_ADDR_OWVAR 21
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// vc_chassis := us_morphling ;
17362: LD_ADDR_OWVAR 37
17366: PUSH
17367: LD_INT 5
17369: ST_TO_ADDR
// vc_engine := engine_siberite ;
17370: LD_ADDR_OWVAR 39
17374: PUSH
17375: LD_INT 3
17377: ST_TO_ADDR
// vc_control := control_computer ;
17378: LD_ADDR_OWVAR 38
17382: PUSH
17383: LD_INT 3
17385: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17386: LD_ADDR_OWVAR 40
17390: PUSH
17391: LD_INT 10
17393: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 1
17401: ARRAY
17402: PPUSH
17403: CALL_OW 310
17407: NOT
17408: IFFALSE 17455
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17410: CALL_OW 45
17414: PPUSH
17415: LD_VAR 0 2
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: CALL_OW 250
17428: PPUSH
17429: LD_VAR 0 2
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: PPUSH
17438: CALL_OW 251
17442: PPUSH
17443: LD_INT 12
17445: PPUSH
17446: LD_INT 1
17448: PPUSH
17449: CALL_OW 50
17453: GO 17467
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17455: CALL_OW 45
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 51
// end ;
17467: GO 17341
17469: POP
17470: POP
// end ;
17471: PPOPN 2
17473: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17474: LD_EXP 28
17478: PUSH
17479: LD_EXP 74
17483: AND
17484: IFFALSE 17706
17486: GO 17488
17488: DISABLE
17489: LD_INT 0
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17497: LD_ADDR_VAR 0 6
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_OWVAR 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 3
17526: PUSH
17527: LD_INT 23
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 69
17550: ST_TO_ADDR
// if not tmp then
17551: LD_VAR 0 6
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 17706
// s1 := rand ( 1 , 4 ) ;
17560: LD_ADDR_VAR 0 2
17564: PUSH
17565: LD_INT 1
17567: PPUSH
17568: LD_INT 4
17570: PPUSH
17571: CALL_OW 12
17575: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17576: LD_ADDR_VAR 0 4
17580: PUSH
17581: LD_VAR 0 6
17585: PUSH
17586: LD_INT 1
17588: ARRAY
17589: PPUSH
17590: LD_VAR 0 2
17594: PPUSH
17595: CALL_OW 259
17599: ST_TO_ADDR
// if s1 = 1 then
17600: LD_VAR 0 2
17604: PUSH
17605: LD_INT 1
17607: EQUAL
17608: IFFALSE 17628
// s2 := rand ( 2 , 4 ) else
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: LD_INT 2
17617: PPUSH
17618: LD_INT 4
17620: PPUSH
17621: CALL_OW 12
17625: ST_TO_ADDR
17626: GO 17636
// s2 := 1 ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: LD_INT 1
17635: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17636: LD_ADDR_VAR 0 5
17640: PUSH
17641: LD_VAR 0 6
17645: PUSH
17646: LD_INT 1
17648: ARRAY
17649: PPUSH
17650: LD_VAR 0 3
17654: PPUSH
17655: CALL_OW 259
17659: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17660: LD_VAR 0 6
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PPUSH
17669: LD_VAR 0 2
17673: PPUSH
17674: LD_VAR 0 5
17678: PPUSH
17679: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17683: LD_VAR 0 6
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: PPUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: LD_VAR 0 4
17701: PPUSH
17702: CALL_OW 237
// end ;
17706: PPOPN 6
17708: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17709: LD_EXP 28
17713: PUSH
17714: LD_EXP 75
17718: AND
17719: IFFALSE 17798
17721: GO 17723
17723: DISABLE
17724: LD_INT 0
17726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17727: LD_ADDR_VAR 0 1
17731: PUSH
17732: LD_INT 22
17734: PUSH
17735: LD_OWVAR 2
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 30
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: ST_TO_ADDR
// if not tmp then
17763: LD_VAR 0 1
17767: NOT
17768: IFFALSE 17772
// exit ;
17770: GO 17798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17772: LD_VAR 0 1
17776: PUSH
17777: LD_INT 1
17779: PPUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 12
17789: ARRAY
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 234
// end ;
17798: PPOPN 1
17800: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17801: LD_EXP 28
17805: PUSH
17806: LD_EXP 76
17810: AND
17811: IFFALSE 17923
17813: GO 17815
17815: DISABLE
17816: LD_INT 0
17818: PPUSH
17819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_OWVAR 2
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: LD_INT 30
17842: PUSH
17843: LD_INT 27
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 30
17852: PUSH
17853: LD_INT 26
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 30
17862: PUSH
17863: LD_INT 28
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: ST_TO_ADDR
// if not tmp then
17885: LD_VAR 0 2
17889: NOT
17890: IFFALSE 17894
// exit ;
17892: GO 17923
// for i in tmp do
17894: LD_ADDR_VAR 0 1
17898: PUSH
17899: LD_VAR 0 2
17903: PUSH
17904: FOR_IN
17905: IFFALSE 17921
// SetLives ( i , 1 ) ;
17907: LD_VAR 0 1
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 234
17919: GO 17904
17921: POP
17922: POP
// end ;
17923: PPOPN 2
17925: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17926: LD_EXP 28
17930: PUSH
17931: LD_EXP 77
17935: AND
17936: IFFALSE 18223
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
17944: PPUSH
17945: PPUSH
// begin i := rand ( 1 , 7 ) ;
17946: LD_ADDR_VAR 0 1
17950: PUSH
17951: LD_INT 1
17953: PPUSH
17954: LD_INT 7
17956: PPUSH
17957: CALL_OW 12
17961: ST_TO_ADDR
// case i of 1 :
17962: LD_VAR 0 1
17966: PUSH
17967: LD_INT 1
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 17985
17975: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17976: LD_STRING earthquake(getX(game), 0, 32)
17978: PPUSH
17979: CALL_OW 559
17983: GO 18223
17985: LD_INT 2
17987: DOUBLE
17988: EQUAL
17989: IFTRUE 17993
17991: GO 18007
17993: POP
// begin ToLua ( displayStucuk(); ) ;
17994: LD_STRING displayStucuk();
17996: PPUSH
17997: CALL_OW 559
// ResetFog ;
18001: CALL_OW 335
// end ; 3 :
18005: GO 18223
18007: LD_INT 3
18009: DOUBLE
18010: EQUAL
18011: IFTRUE 18015
18013: GO 18119
18015: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_INT 22
18023: PUSH
18024: LD_OWVAR 2
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 25
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PPUSH
18047: CALL_OW 69
18051: ST_TO_ADDR
// if not tmp then
18052: LD_VAR 0 2
18056: NOT
18057: IFFALSE 18061
// exit ;
18059: GO 18223
// un := tmp [ rand ( 1 , tmp ) ] ;
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_VAR 0 2
18070: PUSH
18071: LD_INT 1
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 12
18083: ARRAY
18084: ST_TO_ADDR
// if Crawls ( un ) then
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL_OW 318
18094: IFFALSE 18105
// ComWalk ( un ) ;
18096: LD_VAR 0 3
18100: PPUSH
18101: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18105: LD_VAR 0 3
18109: PPUSH
18110: LD_INT 8
18112: PPUSH
18113: CALL_OW 336
// end ; 4 :
18117: GO 18223
18119: LD_INT 4
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18201
18127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18128: LD_ADDR_VAR 0 2
18132: PUSH
18133: LD_INT 22
18135: PUSH
18136: LD_OWVAR 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: LD_INT 29
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: ST_TO_ADDR
// if not tmp then
18164: LD_VAR 0 2
18168: NOT
18169: IFFALSE 18173
// exit ;
18171: GO 18223
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18173: LD_VAR 0 2
18177: PUSH
18178: LD_INT 1
18180: ARRAY
18181: PPUSH
18182: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18186: LD_VAR 0 2
18190: PUSH
18191: LD_INT 1
18193: ARRAY
18194: PPUSH
18195: CALL_OW 65
// end ; 5 .. 7 :
18199: GO 18223
18201: LD_INT 5
18203: DOUBLE
18204: GREATEREQUAL
18205: IFFALSE 18213
18207: LD_INT 7
18209: DOUBLE
18210: LESSEQUAL
18211: IFTRUE 18215
18213: GO 18222
18215: POP
// StreamSibBomb ; end ;
18216: CALL 14460 0 0
18220: GO 18223
18222: POP
// end ;
18223: PPOPN 3
18225: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18226: LD_EXP 28
18230: PUSH
18231: LD_EXP 78
18235: AND
18236: IFFALSE 18392
18238: GO 18240
18240: DISABLE
18241: LD_INT 0
18243: PPUSH
18244: PPUSH
18245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18246: LD_ADDR_VAR 0 2
18250: PUSH
18251: LD_INT 81
18253: PUSH
18254: LD_OWVAR 2
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 2
18265: PUSH
18266: LD_INT 21
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 21
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 69
18299: ST_TO_ADDR
// if not tmp then
18300: LD_VAR 0 2
18304: NOT
18305: IFFALSE 18309
// exit ;
18307: GO 18392
// p := 0 ;
18309: LD_ADDR_VAR 0 3
18313: PUSH
18314: LD_INT 0
18316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18317: LD_INT 35
18319: PPUSH
18320: CALL_OW 67
// p := p + 1 ;
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_INT 1
18336: PLUS
18337: ST_TO_ADDR
// for i in tmp do
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: LD_VAR 0 2
18347: PUSH
18348: FOR_IN
18349: IFFALSE 18380
// if GetLives ( i ) < 1000 then
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 256
18360: PUSH
18361: LD_INT 1000
18363: LESS
18364: IFFALSE 18378
// SetLives ( i , 1000 ) ;
18366: LD_VAR 0 1
18370: PPUSH
18371: LD_INT 1000
18373: PPUSH
18374: CALL_OW 234
18378: GO 18348
18380: POP
18381: POP
// until p > 20 ;
18382: LD_VAR 0 3
18386: PUSH
18387: LD_INT 20
18389: GREATER
18390: IFFALSE 18317
// end ;
18392: PPOPN 3
18394: END
// every 0 0$1 trigger StreamModeActive and sTime do
18395: LD_EXP 28
18399: PUSH
18400: LD_EXP 79
18404: AND
18405: IFFALSE 18440
18407: GO 18409
18409: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18410: LD_INT 28
18412: PPUSH
18413: LD_OWVAR 2
18417: PPUSH
18418: LD_INT 2
18420: PPUSH
18421: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18425: LD_INT 30
18427: PPUSH
18428: LD_OWVAR 2
18432: PPUSH
18433: LD_INT 2
18435: PPUSH
18436: CALL_OW 322
// end ;
18440: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18441: LD_EXP 28
18445: PUSH
18446: LD_EXP 80
18450: AND
18451: IFFALSE 18572
18453: GO 18455
18455: DISABLE
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18460: LD_ADDR_VAR 0 2
18464: PUSH
18465: LD_INT 22
18467: PUSH
18468: LD_OWVAR 2
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 21
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: PUSH
18490: LD_INT 23
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 69
18513: ST_TO_ADDR
// if not tmp then
18514: LD_VAR 0 2
18518: NOT
18519: IFFALSE 18523
// exit ;
18521: GO 18572
// for i in tmp do
18523: LD_ADDR_VAR 0 1
18527: PUSH
18528: LD_VAR 0 2
18532: PUSH
18533: FOR_IN
18534: IFFALSE 18570
// begin if Crawls ( i ) then
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 318
18545: IFFALSE 18556
// ComWalk ( i ) ;
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 138
// SetClass ( i , 2 ) ;
18556: LD_VAR 0 1
18560: PPUSH
18561: LD_INT 2
18563: PPUSH
18564: CALL_OW 336
// end ;
18568: GO 18533
18570: POP
18571: POP
// end ;
18572: PPOPN 2
18574: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18575: LD_EXP 28
18579: PUSH
18580: LD_EXP 81
18584: AND
18585: IFFALSE 18873
18587: GO 18589
18589: DISABLE
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
18594: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18595: LD_OWVAR 2
18599: PPUSH
18600: LD_INT 9
18602: PPUSH
18603: LD_INT 1
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18613: LD_INT 9
18615: PPUSH
18616: LD_OWVAR 2
18620: PPUSH
18621: CALL_OW 343
// uc_side := 9 ;
18625: LD_ADDR_OWVAR 20
18629: PUSH
18630: LD_INT 9
18632: ST_TO_ADDR
// uc_nation := 2 ;
18633: LD_ADDR_OWVAR 21
18637: PUSH
18638: LD_INT 2
18640: ST_TO_ADDR
// hc_name := Dark Warrior ;
18641: LD_ADDR_OWVAR 26
18645: PUSH
18646: LD_STRING Dark Warrior
18648: ST_TO_ADDR
// hc_gallery :=  ;
18649: LD_ADDR_OWVAR 33
18653: PUSH
18654: LD_STRING 
18656: ST_TO_ADDR
// hc_noskilllimit := true ;
18657: LD_ADDR_OWVAR 76
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18665: LD_ADDR_OWVAR 31
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 30
18675: PUSH
18676: LD_INT 30
18678: PUSH
18679: LD_INT 30
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: ST_TO_ADDR
// un := CreateHuman ;
18688: LD_ADDR_VAR 0 3
18692: PUSH
18693: CALL_OW 44
18697: ST_TO_ADDR
// hc_noskilllimit := false ;
18698: LD_ADDR_OWVAR 76
18702: PUSH
18703: LD_INT 0
18705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18706: LD_VAR 0 3
18710: PPUSH
18711: LD_INT 1
18713: PPUSH
18714: CALL_OW 51
// ToLua ( playRanger() ) ;
18718: LD_STRING playRanger()
18720: PPUSH
18721: CALL_OW 559
// p := 0 ;
18725: LD_ADDR_VAR 0 2
18729: PUSH
18730: LD_INT 0
18732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18733: LD_INT 35
18735: PPUSH
18736: CALL_OW 67
// p := p + 1 ;
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_VAR 0 2
18749: PUSH
18750: LD_INT 1
18752: PLUS
18753: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18754: LD_VAR 0 3
18758: PPUSH
18759: CALL_OW 256
18763: PUSH
18764: LD_INT 1000
18766: LESS
18767: IFFALSE 18781
// SetLives ( un , 1000 ) ;
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1000
18776: PPUSH
18777: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18781: LD_VAR 0 3
18785: PPUSH
18786: LD_INT 81
18788: PUSH
18789: LD_OWVAR 2
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 91
18800: PUSH
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: PPUSH
18823: LD_VAR 0 3
18827: PPUSH
18828: CALL_OW 74
18832: PPUSH
18833: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18837: LD_VAR 0 2
18841: PUSH
18842: LD_INT 80
18844: GREATER
18845: PUSH
18846: LD_VAR 0 3
18850: PPUSH
18851: CALL_OW 301
18855: OR
18856: IFFALSE 18733
// if un then
18858: LD_VAR 0 3
18862: IFFALSE 18873
// RemoveUnit ( un ) ;
18864: LD_VAR 0 3
18868: PPUSH
18869: CALL_OW 64
// end ;
18873: PPOPN 3
18875: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18876: LD_EXP 82
18880: IFFALSE 18996
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
18888: PPUSH
18889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: LD_INT 81
18897: PUSH
18898: LD_OWVAR 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18926: LD_STRING playComputer()
18928: PPUSH
18929: CALL_OW 559
// if not tmp then
18933: LD_VAR 0 2
18937: NOT
18938: IFFALSE 18942
// exit ;
18940: GO 18996
// for i in tmp do
18942: LD_ADDR_VAR 0 1
18946: PUSH
18947: LD_VAR 0 2
18951: PUSH
18952: FOR_IN
18953: IFFALSE 18994
// for j := 1 to 4 do
18955: LD_ADDR_VAR 0 3
18959: PUSH
18960: DOUBLE
18961: LD_INT 1
18963: DEC
18964: ST_TO_ADDR
18965: LD_INT 4
18967: PUSH
18968: FOR_TO
18969: IFFALSE 18990
// SetSkill ( i , j , 10 ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_INT 10
18983: PPUSH
18984: CALL_OW 237
18988: GO 18968
18990: POP
18991: POP
18992: GO 18952
18994: POP
18995: POP
// end ;
18996: PPOPN 3
18998: END
// every 0 0$1 trigger s30 do var i , tmp ;
18999: LD_EXP 83
19003: IFFALSE 19072
19005: GO 19007
19007: DISABLE
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19012: LD_ADDR_VAR 0 2
19016: PUSH
19017: LD_INT 22
19019: PUSH
19020: LD_OWVAR 2
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PPUSH
19029: CALL_OW 69
19033: ST_TO_ADDR
// if not tmp then
19034: LD_VAR 0 2
19038: NOT
19039: IFFALSE 19043
// exit ;
19041: GO 19072
// for i in tmp do
19043: LD_ADDR_VAR 0 1
19047: PUSH
19048: LD_VAR 0 2
19052: PUSH
19053: FOR_IN
19054: IFFALSE 19070
// SetLives ( i , 300 ) ;
19056: LD_VAR 0 1
19060: PPUSH
19061: LD_INT 300
19063: PPUSH
19064: CALL_OW 234
19068: GO 19053
19070: POP
19071: POP
// end ;
19072: PPOPN 2
19074: END
// every 0 0$1 trigger s60 do var i , tmp ;
19075: LD_EXP 84
19079: IFFALSE 19148
19081: GO 19083
19083: DISABLE
19084: LD_INT 0
19086: PPUSH
19087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_OWVAR 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: ST_TO_ADDR
// if not tmp then
19110: LD_VAR 0 2
19114: NOT
19115: IFFALSE 19119
// exit ;
19117: GO 19148
// for i in tmp do
19119: LD_ADDR_VAR 0 1
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: FOR_IN
19130: IFFALSE 19146
// SetLives ( i , 600 ) ;
19132: LD_VAR 0 1
19136: PPUSH
19137: LD_INT 600
19139: PPUSH
19140: CALL_OW 234
19144: GO 19129
19146: POP
19147: POP
// end ;
19148: PPOPN 2
19150: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19151: LD_INT 0
19153: PPUSH
// case cmd of 301 :
19154: LD_VAR 0 1
19158: PUSH
19159: LD_INT 301
19161: DOUBLE
19162: EQUAL
19163: IFTRUE 19167
19165: GO 19199
19167: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19168: LD_VAR 0 6
19172: PPUSH
19173: LD_VAR 0 7
19177: PPUSH
19178: LD_VAR 0 8
19182: PPUSH
19183: LD_VAR 0 4
19187: PPUSH
19188: LD_VAR 0 5
19192: PPUSH
19193: CALL 20400 0 5
19197: GO 19320
19199: LD_INT 302
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19244
19207: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19208: LD_VAR 0 6
19212: PPUSH
19213: LD_VAR 0 7
19217: PPUSH
19218: LD_VAR 0 8
19222: PPUSH
19223: LD_VAR 0 9
19227: PPUSH
19228: LD_VAR 0 4
19232: PPUSH
19233: LD_VAR 0 5
19237: PPUSH
19238: CALL 20491 0 6
19242: GO 19320
19244: LD_INT 303
19246: DOUBLE
19247: EQUAL
19248: IFTRUE 19252
19250: GO 19289
19252: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19253: LD_VAR 0 6
19257: PPUSH
19258: LD_VAR 0 7
19262: PPUSH
19263: LD_VAR 0 8
19267: PPUSH
19268: LD_VAR 0 9
19272: PPUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: LD_VAR 0 5
19282: PPUSH
19283: CALL 19325 0 6
19287: GO 19320
19289: LD_INT 304
19291: DOUBLE
19292: EQUAL
19293: IFTRUE 19297
19295: GO 19319
19297: POP
// hHackTeleport ( unit , x , y ) ; end ;
19298: LD_VAR 0 2
19302: PPUSH
19303: LD_VAR 0 4
19307: PPUSH
19308: LD_VAR 0 5
19312: PPUSH
19313: CALL 21084 0 3
19317: GO 19320
19319: POP
// end ;
19320: LD_VAR 0 12
19324: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 1
19336: LESS
19337: PUSH
19338: LD_VAR 0 1
19342: PUSH
19343: LD_INT 3
19345: GREATER
19346: OR
19347: PUSH
19348: LD_VAR 0 5
19352: PPUSH
19353: LD_VAR 0 6
19357: PPUSH
19358: CALL_OW 428
19362: OR
19363: IFFALSE 19367
// exit ;
19365: GO 20087
// uc_side := your_side ;
19367: LD_ADDR_OWVAR 20
19371: PUSH
19372: LD_OWVAR 2
19376: ST_TO_ADDR
// uc_nation := nation ;
19377: LD_ADDR_OWVAR 21
19381: PUSH
19382: LD_VAR 0 1
19386: ST_TO_ADDR
// bc_level = 1 ;
19387: LD_ADDR_OWVAR 43
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// case btype of 1 :
19395: LD_VAR 0 2
19399: PUSH
19400: LD_INT 1
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19419
19408: POP
// bc_type := b_depot ; 2 :
19409: LD_ADDR_OWVAR 42
19413: PUSH
19414: LD_INT 0
19416: ST_TO_ADDR
19417: GO 20031
19419: LD_INT 2
19421: DOUBLE
19422: EQUAL
19423: IFTRUE 19427
19425: GO 19438
19427: POP
// bc_type := b_warehouse ; 3 :
19428: LD_ADDR_OWVAR 42
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
19436: GO 20031
19438: LD_INT 3
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19457
19446: POP
// bc_type := b_lab ; 4 .. 9 :
19447: LD_ADDR_OWVAR 42
19451: PUSH
19452: LD_INT 6
19454: ST_TO_ADDR
19455: GO 20031
19457: LD_INT 4
19459: DOUBLE
19460: GREATEREQUAL
19461: IFFALSE 19469
19463: LD_INT 9
19465: DOUBLE
19466: LESSEQUAL
19467: IFTRUE 19471
19469: GO 19523
19471: POP
// begin bc_type := b_lab_half ;
19472: LD_ADDR_OWVAR 42
19476: PUSH
19477: LD_INT 7
19479: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19480: LD_ADDR_OWVAR 44
19484: PUSH
19485: LD_INT 10
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 15
19496: PUSH
19497: LD_INT 14
19499: PUSH
19500: LD_INT 13
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: PUSH
19511: LD_VAR 0 2
19515: PUSH
19516: LD_INT 3
19518: MINUS
19519: ARRAY
19520: ST_TO_ADDR
// end ; 10 .. 13 :
19521: GO 20031
19523: LD_INT 10
19525: DOUBLE
19526: GREATEREQUAL
19527: IFFALSE 19535
19529: LD_INT 13
19531: DOUBLE
19532: LESSEQUAL
19533: IFTRUE 19537
19535: GO 19614
19537: POP
// begin bc_type := b_lab_full ;
19538: LD_ADDR_OWVAR 42
19542: PUSH
19543: LD_INT 8
19545: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19546: LD_ADDR_OWVAR 44
19550: PUSH
19551: LD_INT 10
19553: PUSH
19554: LD_INT 12
19556: PUSH
19557: LD_INT 14
19559: PUSH
19560: LD_INT 13
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: PUSH
19569: LD_VAR 0 2
19573: PUSH
19574: LD_INT 9
19576: MINUS
19577: ARRAY
19578: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19579: LD_ADDR_OWVAR 45
19583: PUSH
19584: LD_INT 11
19586: PUSH
19587: LD_INT 15
19589: PUSH
19590: LD_INT 12
19592: PUSH
19593: LD_INT 15
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: PUSH
19602: LD_VAR 0 2
19606: PUSH
19607: LD_INT 9
19609: MINUS
19610: ARRAY
19611: ST_TO_ADDR
// end ; 14 :
19612: GO 20031
19614: LD_INT 14
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19633
19622: POP
// bc_type := b_workshop ; 15 :
19623: LD_ADDR_OWVAR 42
19627: PUSH
19628: LD_INT 2
19630: ST_TO_ADDR
19631: GO 20031
19633: LD_INT 15
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19652
19641: POP
// bc_type := b_factory ; 16 :
19642: LD_ADDR_OWVAR 42
19646: PUSH
19647: LD_INT 3
19649: ST_TO_ADDR
19650: GO 20031
19652: LD_INT 16
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19671
19660: POP
// bc_type := b_ext_gun ; 17 :
19661: LD_ADDR_OWVAR 42
19665: PUSH
19666: LD_INT 17
19668: ST_TO_ADDR
19669: GO 20031
19671: LD_INT 17
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19707
19679: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19680: LD_ADDR_OWVAR 42
19684: PUSH
19685: LD_INT 19
19687: PUSH
19688: LD_INT 23
19690: PUSH
19691: LD_INT 19
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: PUSH
19699: LD_VAR 0 1
19703: ARRAY
19704: ST_TO_ADDR
19705: GO 20031
19707: LD_INT 18
19709: DOUBLE
19710: EQUAL
19711: IFTRUE 19715
19713: GO 19726
19715: POP
// bc_type := b_ext_radar ; 19 :
19716: LD_ADDR_OWVAR 42
19720: PUSH
19721: LD_INT 20
19723: ST_TO_ADDR
19724: GO 20031
19726: LD_INT 19
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19745
19734: POP
// bc_type := b_ext_radio ; 20 :
19735: LD_ADDR_OWVAR 42
19739: PUSH
19740: LD_INT 22
19742: ST_TO_ADDR
19743: GO 20031
19745: LD_INT 20
19747: DOUBLE
19748: EQUAL
19749: IFTRUE 19753
19751: GO 19764
19753: POP
// bc_type := b_ext_siberium ; 21 :
19754: LD_ADDR_OWVAR 42
19758: PUSH
19759: LD_INT 21
19761: ST_TO_ADDR
19762: GO 20031
19764: LD_INT 21
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19783
19772: POP
// bc_type := b_ext_computer ; 22 :
19773: LD_ADDR_OWVAR 42
19777: PUSH
19778: LD_INT 24
19780: ST_TO_ADDR
19781: GO 20031
19783: LD_INT 22
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19802
19791: POP
// bc_type := b_ext_track ; 23 :
19792: LD_ADDR_OWVAR 42
19796: PUSH
19797: LD_INT 16
19799: ST_TO_ADDR
19800: GO 20031
19802: LD_INT 23
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// bc_type := b_ext_laser ; 24 :
19811: LD_ADDR_OWVAR 42
19815: PUSH
19816: LD_INT 25
19818: ST_TO_ADDR
19819: GO 20031
19821: LD_INT 24
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19840
19829: POP
// bc_type := b_control_tower ; 25 :
19830: LD_ADDR_OWVAR 42
19834: PUSH
19835: LD_INT 36
19837: ST_TO_ADDR
19838: GO 20031
19840: LD_INT 25
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19859
19848: POP
// bc_type := b_breastwork ; 26 :
19849: LD_ADDR_OWVAR 42
19853: PUSH
19854: LD_INT 31
19856: ST_TO_ADDR
19857: GO 20031
19859: LD_INT 26
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19878
19867: POP
// bc_type := b_bunker ; 27 :
19868: LD_ADDR_OWVAR 42
19872: PUSH
19873: LD_INT 32
19875: ST_TO_ADDR
19876: GO 20031
19878: LD_INT 27
19880: DOUBLE
19881: EQUAL
19882: IFTRUE 19886
19884: GO 19897
19886: POP
// bc_type := b_turret ; 28 :
19887: LD_ADDR_OWVAR 42
19891: PUSH
19892: LD_INT 33
19894: ST_TO_ADDR
19895: GO 20031
19897: LD_INT 28
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19916
19905: POP
// bc_type := b_armoury ; 29 :
19906: LD_ADDR_OWVAR 42
19910: PUSH
19911: LD_INT 4
19913: ST_TO_ADDR
19914: GO 20031
19916: LD_INT 29
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 19935
19924: POP
// bc_type := b_barracks ; 30 :
19925: LD_ADDR_OWVAR 42
19929: PUSH
19930: LD_INT 5
19932: ST_TO_ADDR
19933: GO 20031
19935: LD_INT 30
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19954
19943: POP
// bc_type := b_solar_power ; 31 :
19944: LD_ADDR_OWVAR 42
19948: PUSH
19949: LD_INT 27
19951: ST_TO_ADDR
19952: GO 20031
19954: LD_INT 31
19956: DOUBLE
19957: EQUAL
19958: IFTRUE 19962
19960: GO 19973
19962: POP
// bc_type := b_oil_power ; 32 :
19963: LD_ADDR_OWVAR 42
19967: PUSH
19968: LD_INT 26
19970: ST_TO_ADDR
19971: GO 20031
19973: LD_INT 32
19975: DOUBLE
19976: EQUAL
19977: IFTRUE 19981
19979: GO 19992
19981: POP
// bc_type := b_siberite_power ; 33 :
19982: LD_ADDR_OWVAR 42
19986: PUSH
19987: LD_INT 28
19989: ST_TO_ADDR
19990: GO 20031
19992: LD_INT 33
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20011
20000: POP
// bc_type := b_oil_mine ; 34 :
20001: LD_ADDR_OWVAR 42
20005: PUSH
20006: LD_INT 29
20008: ST_TO_ADDR
20009: GO 20031
20011: LD_INT 34
20013: DOUBLE
20014: EQUAL
20015: IFTRUE 20019
20017: GO 20030
20019: POP
// bc_type := b_siberite_mine ; end ;
20020: LD_ADDR_OWVAR 42
20024: PUSH
20025: LD_INT 30
20027: ST_TO_ADDR
20028: GO 20031
20030: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20031: LD_ADDR_VAR 0 8
20035: PUSH
20036: LD_VAR 0 5
20040: PPUSH
20041: LD_VAR 0 6
20045: PPUSH
20046: LD_VAR 0 3
20050: PPUSH
20051: CALL_OW 47
20055: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20056: LD_OWVAR 42
20060: PUSH
20061: LD_INT 32
20063: PUSH
20064: LD_INT 33
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: IN
20071: IFFALSE 20087
// PlaceWeaponTurret ( b , weapon ) ;
20073: LD_VAR 0 8
20077: PPUSH
20078: LD_VAR 0 4
20082: PPUSH
20083: CALL_OW 431
// end ;
20087: LD_VAR 0 7
20091: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20092: LD_INT 0
20094: PPUSH
20095: PPUSH
20096: PPUSH
20097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20098: LD_ADDR_VAR 0 4
20102: PUSH
20103: LD_INT 22
20105: PUSH
20106: LD_OWVAR 2
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 30
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 30
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PPUSH
20147: CALL_OW 69
20151: ST_TO_ADDR
// if not tmp then
20152: LD_VAR 0 4
20156: NOT
20157: IFFALSE 20161
// exit ;
20159: GO 20220
// for i in tmp do
20161: LD_ADDR_VAR 0 2
20165: PUSH
20166: LD_VAR 0 4
20170: PUSH
20171: FOR_IN
20172: IFFALSE 20218
// for j = 1 to 3 do
20174: LD_ADDR_VAR 0 3
20178: PUSH
20179: DOUBLE
20180: LD_INT 1
20182: DEC
20183: ST_TO_ADDR
20184: LD_INT 3
20186: PUSH
20187: FOR_TO
20188: IFFALSE 20214
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20190: LD_VAR 0 2
20194: PPUSH
20195: CALL_OW 274
20199: PPUSH
20200: LD_VAR 0 3
20204: PPUSH
20205: LD_INT 99999
20207: PPUSH
20208: CALL_OW 277
20212: GO 20187
20214: POP
20215: POP
20216: GO 20171
20218: POP
20219: POP
// end ;
20220: LD_VAR 0 1
20224: RET
// export function hHackSetLevel10 ; var i , j ; begin
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
20229: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20230: LD_ADDR_VAR 0 2
20234: PUSH
20235: LD_INT 21
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: PUSH
20250: FOR_IN
20251: IFFALSE 20303
// if IsSelected ( i ) then
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 306
20262: IFFALSE 20301
// begin for j := 1 to 4 do
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: DOUBLE
20270: LD_INT 1
20272: DEC
20273: ST_TO_ADDR
20274: LD_INT 4
20276: PUSH
20277: FOR_TO
20278: IFFALSE 20299
// SetSkill ( i , j , 10 ) ;
20280: LD_VAR 0 2
20284: PPUSH
20285: LD_VAR 0 3
20289: PPUSH
20290: LD_INT 10
20292: PPUSH
20293: CALL_OW 237
20297: GO 20277
20299: POP
20300: POP
// end ;
20301: GO 20250
20303: POP
20304: POP
// end ;
20305: LD_VAR 0 1
20309: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20315: LD_ADDR_VAR 0 2
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_OWVAR 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 21
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: PUSH
20351: FOR_IN
20352: IFFALSE 20393
// begin for j := 1 to 4 do
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: DOUBLE
20360: LD_INT 1
20362: DEC
20363: ST_TO_ADDR
20364: LD_INT 4
20366: PUSH
20367: FOR_TO
20368: IFFALSE 20389
// SetSkill ( i , j , 10 ) ;
20370: LD_VAR 0 2
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: LD_INT 10
20382: PPUSH
20383: CALL_OW 237
20387: GO 20367
20389: POP
20390: POP
// end ;
20391: GO 20351
20393: POP
20394: POP
// end ;
20395: LD_VAR 0 1
20399: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20400: LD_INT 0
20402: PPUSH
// uc_side := your_side ;
20403: LD_ADDR_OWVAR 20
20407: PUSH
20408: LD_OWVAR 2
20412: ST_TO_ADDR
// uc_nation := nation ;
20413: LD_ADDR_OWVAR 21
20417: PUSH
20418: LD_VAR 0 1
20422: ST_TO_ADDR
// InitHc ;
20423: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20427: LD_INT 0
20429: PPUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: LD_VAR 0 3
20439: PPUSH
20440: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20444: LD_VAR 0 4
20448: PPUSH
20449: LD_VAR 0 5
20453: PPUSH
20454: CALL_OW 428
20458: PUSH
20459: LD_INT 0
20461: EQUAL
20462: IFFALSE 20486
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20464: CALL_OW 44
20468: PPUSH
20469: LD_VAR 0 4
20473: PPUSH
20474: LD_VAR 0 5
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: CALL_OW 48
// end ;
20486: LD_VAR 0 6
20490: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20491: LD_INT 0
20493: PPUSH
20494: PPUSH
// uc_side := your_side ;
20495: LD_ADDR_OWVAR 20
20499: PUSH
20500: LD_OWVAR 2
20504: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20505: LD_VAR 0 1
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: LD_INT 4
20521: PUSH
20522: LD_INT 5
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: IN
20532: IFFALSE 20544
// uc_nation := nation_american else
20534: LD_ADDR_OWVAR 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
20542: GO 20587
// if chassis in [ 11 , 12 , 13 , 14 ] then
20544: LD_VAR 0 1
20548: PUSH
20549: LD_INT 11
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 13
20557: PUSH
20558: LD_INT 14
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: IN
20567: IFFALSE 20579
// uc_nation := nation_arabian else
20569: LD_ADDR_OWVAR 21
20573: PUSH
20574: LD_INT 2
20576: ST_TO_ADDR
20577: GO 20587
// uc_nation := nation_russian ;
20579: LD_ADDR_OWVAR 21
20583: PUSH
20584: LD_INT 3
20586: ST_TO_ADDR
// vc_chassis := chassis ;
20587: LD_ADDR_OWVAR 37
20591: PUSH
20592: LD_VAR 0 1
20596: ST_TO_ADDR
// vc_engine := engine ;
20597: LD_ADDR_OWVAR 39
20601: PUSH
20602: LD_VAR 0 2
20606: ST_TO_ADDR
// vc_control := control ;
20607: LD_ADDR_OWVAR 38
20611: PUSH
20612: LD_VAR 0 3
20616: ST_TO_ADDR
// vc_weapon := weapon ;
20617: LD_ADDR_OWVAR 40
20621: PUSH
20622: LD_VAR 0 4
20626: ST_TO_ADDR
// un := CreateVehicle ;
20627: LD_ADDR_VAR 0 8
20631: PUSH
20632: CALL_OW 45
20636: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20637: LD_VAR 0 8
20641: PPUSH
20642: LD_INT 0
20644: PPUSH
20645: LD_INT 5
20647: PPUSH
20648: CALL_OW 12
20652: PPUSH
20653: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20657: LD_VAR 0 8
20661: PPUSH
20662: LD_VAR 0 5
20666: PPUSH
20667: LD_VAR 0 6
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: CALL_OW 48
// end ;
20679: LD_VAR 0 7
20683: RET
// export hInvincible ; every 1 do
20684: GO 20686
20686: DISABLE
// hInvincible := [ ] ;
20687: LD_ADDR_EXP 85
20691: PUSH
20692: EMPTY
20693: ST_TO_ADDR
20694: END
// every 10 do var i ;
20695: GO 20697
20697: DISABLE
20698: LD_INT 0
20700: PPUSH
// begin enable ;
20701: ENABLE
// if not hInvincible then
20702: LD_EXP 85
20706: NOT
20707: IFFALSE 20711
// exit ;
20709: GO 20755
// for i in hInvincible do
20711: LD_ADDR_VAR 0 1
20715: PUSH
20716: LD_EXP 85
20720: PUSH
20721: FOR_IN
20722: IFFALSE 20753
// if GetLives ( i ) < 1000 then
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 256
20733: PUSH
20734: LD_INT 1000
20736: LESS
20737: IFFALSE 20751
// SetLives ( i , 1000 ) ;
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_INT 1000
20746: PPUSH
20747: CALL_OW 234
20751: GO 20721
20753: POP
20754: POP
// end ;
20755: PPOPN 1
20757: END
// export function hHackInvincible ; var i ; begin
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20762: LD_ADDR_VAR 0 2
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 21
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 21
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: PPUSH
20795: CALL_OW 69
20799: PUSH
20800: FOR_IN
20801: IFFALSE 20862
// if IsSelected ( i ) then
20803: LD_VAR 0 2
20807: PPUSH
20808: CALL_OW 306
20812: IFFALSE 20860
// begin if i in hInvincible then
20814: LD_VAR 0 2
20818: PUSH
20819: LD_EXP 85
20823: IN
20824: IFFALSE 20844
// hInvincible := hInvincible diff i else
20826: LD_ADDR_EXP 85
20830: PUSH
20831: LD_EXP 85
20835: PUSH
20836: LD_VAR 0 2
20840: DIFF
20841: ST_TO_ADDR
20842: GO 20860
// hInvincible := hInvincible union i ;
20844: LD_ADDR_EXP 85
20848: PUSH
20849: LD_EXP 85
20853: PUSH
20854: LD_VAR 0 2
20858: UNION
20859: ST_TO_ADDR
// end ;
20860: GO 20800
20862: POP
20863: POP
// end ;
20864: LD_VAR 0 1
20868: RET
// export function hHackInvisible ; var i , j ; begin
20869: LD_INT 0
20871: PPUSH
20872: PPUSH
20873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20874: LD_ADDR_VAR 0 2
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: PUSH
20894: FOR_IN
20895: IFFALSE 20919
// if IsSelected ( i ) then
20897: LD_VAR 0 2
20901: PPUSH
20902: CALL_OW 306
20906: IFFALSE 20917
// ComForceInvisible ( i ) ;
20908: LD_VAR 0 2
20912: PPUSH
20913: CALL_OW 496
20917: GO 20894
20919: POP
20920: POP
// end ;
20921: LD_VAR 0 1
20925: RET
// export function hHackChangeYourSide ; begin
20926: LD_INT 0
20928: PPUSH
// if your_side = 8 then
20929: LD_OWVAR 2
20933: PUSH
20934: LD_INT 8
20936: EQUAL
20937: IFFALSE 20949
// your_side := 0 else
20939: LD_ADDR_OWVAR 2
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
20947: GO 20963
// your_side := your_side + 1 ;
20949: LD_ADDR_OWVAR 2
20953: PUSH
20954: LD_OWVAR 2
20958: PUSH
20959: LD_INT 1
20961: PLUS
20962: ST_TO_ADDR
// end ;
20963: LD_VAR 0 1
20967: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20968: LD_INT 0
20970: PPUSH
20971: PPUSH
20972: PPUSH
// for i in all_units do
20973: LD_ADDR_VAR 0 2
20977: PUSH
20978: LD_OWVAR 3
20982: PUSH
20983: FOR_IN
20984: IFFALSE 21062
// if IsSelected ( i ) then
20986: LD_VAR 0 2
20990: PPUSH
20991: CALL_OW 306
20995: IFFALSE 21060
// begin j := GetSide ( i ) ;
20997: LD_ADDR_VAR 0 3
21001: PUSH
21002: LD_VAR 0 2
21006: PPUSH
21007: CALL_OW 255
21011: ST_TO_ADDR
// if j = 8 then
21012: LD_VAR 0 3
21016: PUSH
21017: LD_INT 8
21019: EQUAL
21020: IFFALSE 21032
// j := 0 else
21022: LD_ADDR_VAR 0 3
21026: PUSH
21027: LD_INT 0
21029: ST_TO_ADDR
21030: GO 21046
// j := j + 1 ;
21032: LD_ADDR_VAR 0 3
21036: PUSH
21037: LD_VAR 0 3
21041: PUSH
21042: LD_INT 1
21044: PLUS
21045: ST_TO_ADDR
// SetSide ( i , j ) ;
21046: LD_VAR 0 2
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: CALL_OW 235
// end ;
21060: GO 20983
21062: POP
21063: POP
// end ;
21064: LD_VAR 0 1
21068: RET
// export function hHackFog ; begin
21069: LD_INT 0
21071: PPUSH
// FogOff ( true ) ;
21072: LD_INT 1
21074: PPUSH
21075: CALL_OW 344
// end ;
21079: LD_VAR 0 1
21083: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21084: LD_INT 0
21086: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21087: LD_VAR 0 1
21091: PPUSH
21092: LD_VAR 0 2
21096: PPUSH
21097: LD_VAR 0 3
21101: PPUSH
21102: LD_INT 1
21104: PPUSH
21105: LD_INT 1
21107: PPUSH
21108: CALL_OW 483
// CenterOnXY ( x , y ) ;
21112: LD_VAR 0 2
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: CALL_OW 84
// end ;
21126: LD_VAR 0 4
21130: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21131: LD_INT 0
21133: PPUSH
21134: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21135: LD_VAR 0 1
21139: NOT
21140: PUSH
21141: LD_VAR 0 2
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: CALL_OW 488
21155: NOT
21156: OR
21157: PUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 266
21167: PUSH
21168: LD_INT 3
21170: NONEQUAL
21171: PUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 247
21181: PUSH
21182: LD_INT 1
21184: EQUAL
21185: NOT
21186: AND
21187: OR
21188: IFFALSE 21192
// exit ;
21190: GO 21341
// if GetType ( factory ) = unit_human then
21192: LD_VAR 0 1
21196: PPUSH
21197: CALL_OW 247
21201: PUSH
21202: LD_INT 1
21204: EQUAL
21205: IFFALSE 21222
// factory := IsInUnit ( factory ) ;
21207: LD_ADDR_VAR 0 1
21211: PUSH
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 310
21221: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 266
21231: PUSH
21232: LD_INT 3
21234: NONEQUAL
21235: IFFALSE 21239
// exit ;
21237: GO 21341
// if HexInfo ( x , y ) = factory then
21239: LD_VAR 0 2
21243: PPUSH
21244: LD_VAR 0 3
21248: PPUSH
21249: CALL_OW 428
21253: PUSH
21254: LD_VAR 0 1
21258: EQUAL
21259: IFFALSE 21286
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21261: LD_ADDR_EXP 86
21265: PUSH
21266: LD_EXP 86
21270: PPUSH
21271: LD_VAR 0 1
21275: PPUSH
21276: LD_INT 0
21278: PPUSH
21279: CALL_OW 1
21283: ST_TO_ADDR
21284: GO 21337
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21286: LD_ADDR_EXP 86
21290: PUSH
21291: LD_EXP 86
21295: PPUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL_OW 255
21310: PUSH
21311: LD_VAR 0 1
21315: PUSH
21316: LD_VAR 0 2
21320: PUSH
21321: LD_VAR 0 3
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 1
21336: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21337: CALL 21346 0 0
// end ;
21341: LD_VAR 0 4
21345: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
21350: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21351: LD_STRING resetFactoryWaypoint();
21353: PPUSH
21354: CALL_OW 559
// if factoryWaypoints then
21358: LD_EXP 86
21362: IFFALSE 21488
// begin list := PrepareArray ( factoryWaypoints ) ;
21364: LD_ADDR_VAR 0 3
21368: PUSH
21369: LD_EXP 86
21373: PPUSH
21374: CALL 67938 0 1
21378: ST_TO_ADDR
// for i := 1 to list do
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: DOUBLE
21385: LD_INT 1
21387: DEC
21388: ST_TO_ADDR
21389: LD_VAR 0 3
21393: PUSH
21394: FOR_TO
21395: IFFALSE 21486
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21397: LD_STRING setFactoryWaypointXY(
21399: PUSH
21400: LD_VAR 0 3
21404: PUSH
21405: LD_VAR 0 2
21409: ARRAY
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: STR
21415: PUSH
21416: LD_STRING ,
21418: STR
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_VAR 0 2
21429: ARRAY
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: STR
21435: PUSH
21436: LD_STRING ,
21438: STR
21439: PUSH
21440: LD_VAR 0 3
21444: PUSH
21445: LD_VAR 0 2
21449: ARRAY
21450: PUSH
21451: LD_INT 3
21453: ARRAY
21454: STR
21455: PUSH
21456: LD_STRING ,
21458: STR
21459: PUSH
21460: LD_VAR 0 3
21464: PUSH
21465: LD_VAR 0 2
21469: ARRAY
21470: PUSH
21471: LD_INT 4
21473: ARRAY
21474: STR
21475: PUSH
21476: LD_STRING )
21478: STR
21479: PPUSH
21480: CALL_OW 559
21484: GO 21394
21486: POP
21487: POP
// end ; end ;
21488: LD_VAR 0 1
21492: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21493: LD_INT 0
21495: PPUSH
// if HexInfo ( x , y ) = warehouse then
21496: LD_VAR 0 2
21500: PPUSH
21501: LD_VAR 0 3
21505: PPUSH
21506: CALL_OW 428
21510: PUSH
21511: LD_VAR 0 1
21515: EQUAL
21516: IFFALSE 21543
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21518: LD_ADDR_EXP 87
21522: PUSH
21523: LD_EXP 87
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: LD_INT 0
21535: PPUSH
21536: CALL_OW 1
21540: ST_TO_ADDR
21541: GO 21594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21543: LD_ADDR_EXP 87
21547: PUSH
21548: LD_EXP 87
21552: PPUSH
21553: LD_VAR 0 1
21557: PPUSH
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 255
21567: PUSH
21568: LD_VAR 0 1
21572: PUSH
21573: LD_VAR 0 2
21577: PUSH
21578: LD_VAR 0 3
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: PPUSH
21589: CALL_OW 1
21593: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21594: CALL 21603 0 0
// end ;
21598: LD_VAR 0 4
21602: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21608: LD_STRING resetWarehouseGatheringPoints();
21610: PPUSH
21611: CALL_OW 559
// if warehouseGatheringPoints then
21615: LD_EXP 87
21619: IFFALSE 21745
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21621: LD_ADDR_VAR 0 3
21625: PUSH
21626: LD_EXP 87
21630: PPUSH
21631: CALL 67938 0 1
21635: ST_TO_ADDR
// for i := 1 to list do
21636: LD_ADDR_VAR 0 2
21640: PUSH
21641: DOUBLE
21642: LD_INT 1
21644: DEC
21645: ST_TO_ADDR
21646: LD_VAR 0 3
21650: PUSH
21651: FOR_TO
21652: IFFALSE 21743
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21654: LD_STRING setWarehouseGatheringPointXY(
21656: PUSH
21657: LD_VAR 0 3
21661: PUSH
21662: LD_VAR 0 2
21666: ARRAY
21667: PUSH
21668: LD_INT 1
21670: ARRAY
21671: STR
21672: PUSH
21673: LD_STRING ,
21675: STR
21676: PUSH
21677: LD_VAR 0 3
21681: PUSH
21682: LD_VAR 0 2
21686: ARRAY
21687: PUSH
21688: LD_INT 2
21690: ARRAY
21691: STR
21692: PUSH
21693: LD_STRING ,
21695: STR
21696: PUSH
21697: LD_VAR 0 3
21701: PUSH
21702: LD_VAR 0 2
21706: ARRAY
21707: PUSH
21708: LD_INT 3
21710: ARRAY
21711: STR
21712: PUSH
21713: LD_STRING ,
21715: STR
21716: PUSH
21717: LD_VAR 0 3
21721: PUSH
21722: LD_VAR 0 2
21726: ARRAY
21727: PUSH
21728: LD_INT 4
21730: ARRAY
21731: STR
21732: PUSH
21733: LD_STRING )
21735: STR
21736: PPUSH
21737: CALL_OW 559
21741: GO 21651
21743: POP
21744: POP
// end ; end ;
21745: LD_VAR 0 1
21749: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21750: LD_EXP 87
21754: IFFALSE 22439
21756: GO 21758
21758: DISABLE
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
21763: PPUSH
21764: PPUSH
21765: PPUSH
21766: PPUSH
21767: PPUSH
21768: PPUSH
21769: PPUSH
// begin enable ;
21770: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_EXP 87
21780: PPUSH
21781: CALL 67938 0 1
21785: ST_TO_ADDR
// if not list then
21786: LD_VAR 0 3
21790: NOT
21791: IFFALSE 21795
// exit ;
21793: GO 22439
// for i := 1 to list do
21795: LD_ADDR_VAR 0 1
21799: PUSH
21800: DOUBLE
21801: LD_INT 1
21803: DEC
21804: ST_TO_ADDR
21805: LD_VAR 0 3
21809: PUSH
21810: FOR_TO
21811: IFFALSE 22437
// begin depot := list [ i ] [ 2 ] ;
21813: LD_ADDR_VAR 0 8
21817: PUSH
21818: LD_VAR 0 3
21822: PUSH
21823: LD_VAR 0 1
21827: ARRAY
21828: PUSH
21829: LD_INT 2
21831: ARRAY
21832: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21833: LD_ADDR_VAR 0 5
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_VAR 0 1
21847: ARRAY
21848: PUSH
21849: LD_INT 1
21851: ARRAY
21852: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21853: LD_VAR 0 8
21857: PPUSH
21858: CALL_OW 301
21862: PUSH
21863: LD_VAR 0 5
21867: PUSH
21868: LD_VAR 0 8
21872: PPUSH
21873: CALL_OW 255
21877: NONEQUAL
21878: OR
21879: IFFALSE 21908
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21881: LD_ADDR_EXP 87
21885: PUSH
21886: LD_EXP 87
21890: PPUSH
21891: LD_VAR 0 8
21895: PPUSH
21896: LD_INT 0
21898: PPUSH
21899: CALL_OW 1
21903: ST_TO_ADDR
// exit ;
21904: POP
21905: POP
21906: GO 22439
// end ; x := list [ i ] [ 3 ] ;
21908: LD_ADDR_VAR 0 6
21912: PUSH
21913: LD_VAR 0 3
21917: PUSH
21918: LD_VAR 0 1
21922: ARRAY
21923: PUSH
21924: LD_INT 3
21926: ARRAY
21927: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21928: LD_ADDR_VAR 0 7
21932: PUSH
21933: LD_VAR 0 3
21937: PUSH
21938: LD_VAR 0 1
21942: ARRAY
21943: PUSH
21944: LD_INT 4
21946: ARRAY
21947: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21948: LD_ADDR_VAR 0 9
21952: PUSH
21953: LD_VAR 0 6
21957: PPUSH
21958: LD_VAR 0 7
21962: PPUSH
21963: LD_INT 16
21965: PPUSH
21966: CALL 66526 0 3
21970: ST_TO_ADDR
// if not cratesNearbyPoint then
21971: LD_VAR 0 9
21975: NOT
21976: IFFALSE 21982
// exit ;
21978: POP
21979: POP
21980: GO 22439
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21982: LD_ADDR_VAR 0 4
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_VAR 0 5
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: LD_INT 60
22004: PUSH
22005: EMPTY
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 91
22014: PUSH
22015: LD_VAR 0 8
22019: PUSH
22020: LD_INT 6
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: LD_INT 25
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 16
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: PUSH
22067: LD_VAR 0 8
22071: PPUSH
22072: CALL_OW 313
22076: PPUSH
22077: LD_INT 3
22079: PUSH
22080: LD_INT 60
22082: PUSH
22083: EMPTY
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 25
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 25
22105: PUSH
22106: LD_INT 16
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 72
22126: UNION
22127: ST_TO_ADDR
// if tmp then
22128: LD_VAR 0 4
22132: IFFALSE 22212
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_VAR 0 4
22143: PPUSH
22144: LD_INT 3
22146: PPUSH
22147: CALL 64495 0 2
22151: ST_TO_ADDR
// for j in tmp do
22152: LD_ADDR_VAR 0 2
22156: PUSH
22157: LD_VAR 0 4
22161: PUSH
22162: FOR_IN
22163: IFFALSE 22206
// begin if IsInUnit ( j ) then
22165: LD_VAR 0 2
22169: PPUSH
22170: CALL_OW 310
22174: IFFALSE 22185
// ComExit ( j ) ;
22176: LD_VAR 0 2
22180: PPUSH
22181: CALL 64578 0 1
// AddComCollect ( j , x , y ) ;
22185: LD_VAR 0 2
22189: PPUSH
22190: LD_VAR 0 6
22194: PPUSH
22195: LD_VAR 0 7
22199: PPUSH
22200: CALL_OW 177
// end ;
22204: GO 22162
22206: POP
22207: POP
// exit ;
22208: POP
22209: POP
22210: GO 22439
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22212: LD_ADDR_VAR 0 4
22216: PUSH
22217: LD_INT 22
22219: PUSH
22220: LD_VAR 0 5
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 91
22231: PUSH
22232: LD_VAR 0 8
22236: PUSH
22237: LD_INT 8
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 34
22250: PUSH
22251: LD_INT 12
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 34
22260: PUSH
22261: LD_INT 51
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 34
22270: PUSH
22271: LD_INT 32
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 34
22280: PUSH
22281: LD_INT 89
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: PPUSH
22300: CALL_OW 69
22304: ST_TO_ADDR
// if tmp then
22305: LD_VAR 0 4
22309: IFFALSE 22435
// begin for j in tmp do
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_VAR 0 4
22320: PUSH
22321: FOR_IN
22322: IFFALSE 22433
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22324: LD_VAR 0 2
22328: PPUSH
22329: CALL_OW 262
22333: PUSH
22334: LD_INT 3
22336: EQUAL
22337: PUSH
22338: LD_VAR 0 2
22342: PPUSH
22343: CALL_OW 261
22347: PUSH
22348: LD_INT 20
22350: GREATER
22351: OR
22352: PUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 314
22362: NOT
22363: AND
22364: PUSH
22365: LD_VAR 0 2
22369: PPUSH
22370: CALL_OW 263
22374: PUSH
22375: LD_INT 1
22377: NONEQUAL
22378: PUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 311
22388: OR
22389: AND
22390: IFFALSE 22431
// begin ComCollect ( j , x , y ) ;
22392: LD_VAR 0 2
22396: PPUSH
22397: LD_VAR 0 6
22401: PPUSH
22402: LD_VAR 0 7
22406: PPUSH
22407: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22411: LD_VAR 0 2
22415: PPUSH
22416: LD_VAR 0 8
22420: PPUSH
22421: CALL_OW 172
// exit ;
22425: POP
22426: POP
22427: POP
22428: POP
22429: GO 22439
// end ;
22431: GO 22321
22433: POP
22434: POP
// end ; end ;
22435: GO 21810
22437: POP
22438: POP
// end ; end_of_file
22439: PPOPN 9
22441: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22442: LD_INT 0
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 264
22457: PUSH
22458: LD_INT 91
22460: EQUAL
22461: IFFALSE 22533
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22463: LD_INT 68
22465: PPUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: CALL_OW 255
22475: PPUSH
22476: CALL_OW 321
22480: PUSH
22481: LD_INT 2
22483: EQUAL
22484: IFFALSE 22496
// eff := 70 else
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: LD_INT 70
22493: ST_TO_ADDR
22494: GO 22504
// eff := 30 ;
22496: LD_ADDR_VAR 0 4
22500: PUSH
22501: LD_INT 30
22503: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 250
22513: PPUSH
22514: LD_VAR 0 1
22518: PPUSH
22519: CALL_OW 251
22523: PPUSH
22524: LD_VAR 0 4
22528: PPUSH
22529: CALL_OW 495
// end ; end ;
22533: LD_VAR 0 2
22537: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22538: LD_INT 0
22540: PPUSH
// end ;
22541: LD_VAR 0 4
22545: RET
// export function SOS_Command ( cmd ) ; begin
22546: LD_INT 0
22548: PPUSH
// end ;
22549: LD_VAR 0 2
22553: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22554: LD_INT 0
22556: PPUSH
// end ;
22557: LD_VAR 0 6
22561: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22562: LD_INT 0
22564: PPUSH
22565: PPUSH
// if not vehicle or not factory then
22566: LD_VAR 0 1
22570: NOT
22571: PUSH
22572: LD_VAR 0 2
22576: NOT
22577: OR
22578: IFFALSE 22582
// exit ;
22580: GO 22813
// if factoryWaypoints >= factory then
22582: LD_EXP 86
22586: PUSH
22587: LD_VAR 0 2
22591: GREATEREQUAL
22592: IFFALSE 22813
// if factoryWaypoints [ factory ] then
22594: LD_EXP 86
22598: PUSH
22599: LD_VAR 0 2
22603: ARRAY
22604: IFFALSE 22813
// begin if GetControl ( vehicle ) = control_manual then
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 263
22615: PUSH
22616: LD_INT 1
22618: EQUAL
22619: IFFALSE 22700
// begin driver := IsDrivenBy ( vehicle ) ;
22621: LD_ADDR_VAR 0 4
22625: PUSH
22626: LD_VAR 0 1
22630: PPUSH
22631: CALL_OW 311
22635: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22636: LD_VAR 0 4
22640: PPUSH
22641: LD_EXP 86
22645: PUSH
22646: LD_VAR 0 2
22650: ARRAY
22651: PUSH
22652: LD_INT 3
22654: ARRAY
22655: PPUSH
22656: LD_EXP 86
22660: PUSH
22661: LD_VAR 0 2
22665: ARRAY
22666: PUSH
22667: LD_INT 4
22669: ARRAY
22670: PPUSH
22671: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22675: LD_VAR 0 4
22679: PPUSH
22680: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22684: LD_VAR 0 4
22688: PPUSH
22689: LD_VAR 0 2
22693: PPUSH
22694: CALL_OW 180
// end else
22698: GO 22813
// if GetControl ( vehicle ) = control_remote then
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 263
22709: PUSH
22710: LD_INT 2
22712: EQUAL
22713: IFFALSE 22774
// begin wait ( 0 0$2 ) ;
22715: LD_INT 70
22717: PPUSH
22718: CALL_OW 67
// if Connect ( vehicle ) then
22722: LD_VAR 0 1
22726: PPUSH
22727: CALL 34837 0 1
22731: IFFALSE 22772
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22733: LD_VAR 0 1
22737: PPUSH
22738: LD_EXP 86
22742: PUSH
22743: LD_VAR 0 2
22747: ARRAY
22748: PUSH
22749: LD_INT 3
22751: ARRAY
22752: PPUSH
22753: LD_EXP 86
22757: PUSH
22758: LD_VAR 0 2
22762: ARRAY
22763: PUSH
22764: LD_INT 4
22766: ARRAY
22767: PPUSH
22768: CALL_OW 171
// end else
22772: GO 22813
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_EXP 86
22783: PUSH
22784: LD_VAR 0 2
22788: ARRAY
22789: PUSH
22790: LD_INT 3
22792: ARRAY
22793: PPUSH
22794: LD_EXP 86
22798: PUSH
22799: LD_VAR 0 2
22803: ARRAY
22804: PUSH
22805: LD_INT 4
22807: ARRAY
22808: PPUSH
22809: CALL_OW 171
// end ; end ;
22813: LD_VAR 0 3
22817: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22818: LD_INT 0
22820: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22821: LD_VAR 0 1
22825: PUSH
22826: LD_INT 250
22828: EQUAL
22829: PUSH
22830: LD_VAR 0 2
22834: PPUSH
22835: CALL_OW 264
22839: PUSH
22840: LD_INT 81
22842: EQUAL
22843: AND
22844: IFFALSE 22865
// MinerPlaceMine ( unit , x , y ) ;
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_VAR 0 4
22855: PPUSH
22856: LD_VAR 0 5
22860: PPUSH
22861: CALL 25250 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 251
22872: EQUAL
22873: PUSH
22874: LD_VAR 0 2
22878: PPUSH
22879: CALL_OW 264
22883: PUSH
22884: LD_INT 81
22886: EQUAL
22887: AND
22888: IFFALSE 22909
// MinerDetonateMine ( unit , x , y ) ;
22890: LD_VAR 0 2
22894: PPUSH
22895: LD_VAR 0 4
22899: PPUSH
22900: LD_VAR 0 5
22904: PPUSH
22905: CALL 25525 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22909: LD_VAR 0 1
22913: PUSH
22914: LD_INT 252
22916: EQUAL
22917: PUSH
22918: LD_VAR 0 2
22922: PPUSH
22923: CALL_OW 264
22927: PUSH
22928: LD_INT 81
22930: EQUAL
22931: AND
22932: IFFALSE 22953
// MinerCreateMinefield ( unit , x , y ) ;
22934: LD_VAR 0 2
22938: PPUSH
22939: LD_VAR 0 4
22943: PPUSH
22944: LD_VAR 0 5
22948: PPUSH
22949: CALL 25942 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22953: LD_VAR 0 1
22957: PUSH
22958: LD_INT 253
22960: EQUAL
22961: PUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: CALL_OW 257
22971: PUSH
22972: LD_INT 5
22974: EQUAL
22975: AND
22976: IFFALSE 22997
// ComBinocular ( unit , x , y ) ;
22978: LD_VAR 0 2
22982: PPUSH
22983: LD_VAR 0 4
22987: PPUSH
22988: LD_VAR 0 5
22992: PPUSH
22993: CALL 26311 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22997: LD_VAR 0 1
23001: PUSH
23002: LD_INT 254
23004: EQUAL
23005: PUSH
23006: LD_VAR 0 2
23010: PPUSH
23011: CALL_OW 264
23015: PUSH
23016: LD_INT 99
23018: EQUAL
23019: AND
23020: PUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: CALL_OW 263
23030: PUSH
23031: LD_INT 3
23033: EQUAL
23034: AND
23035: IFFALSE 23051
// HackDestroyVehicle ( unit , selectedUnit ) ;
23037: LD_VAR 0 2
23041: PPUSH
23042: LD_VAR 0 3
23046: PPUSH
23047: CALL 24614 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23051: LD_VAR 0 1
23055: PUSH
23056: LD_INT 255
23058: EQUAL
23059: PUSH
23060: LD_VAR 0 2
23064: PPUSH
23065: CALL_OW 264
23069: PUSH
23070: LD_INT 14
23072: PUSH
23073: LD_INT 53
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: IN
23080: AND
23081: PUSH
23082: LD_VAR 0 4
23086: PPUSH
23087: LD_VAR 0 5
23091: PPUSH
23092: CALL_OW 488
23096: AND
23097: IFFALSE 23121
// CutTreeXYR ( unit , x , y , 12 ) ;
23099: LD_VAR 0 2
23103: PPUSH
23104: LD_VAR 0 4
23108: PPUSH
23109: LD_VAR 0 5
23113: PPUSH
23114: LD_INT 12
23116: PPUSH
23117: CALL 23184 0 4
// if cmd = 256 then
23121: LD_VAR 0 1
23125: PUSH
23126: LD_INT 256
23128: EQUAL
23129: IFFALSE 23150
// SetFactoryWaypoint ( unit , x , y ) ;
23131: LD_VAR 0 2
23135: PPUSH
23136: LD_VAR 0 4
23140: PPUSH
23141: LD_VAR 0 5
23145: PPUSH
23146: CALL 21131 0 3
// if cmd = 257 then
23150: LD_VAR 0 1
23154: PUSH
23155: LD_INT 257
23157: EQUAL
23158: IFFALSE 23179
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23160: LD_VAR 0 2
23164: PPUSH
23165: LD_VAR 0 4
23169: PPUSH
23170: LD_VAR 0 5
23174: PPUSH
23175: CALL 21493 0 3
// end ;
23179: LD_VAR 0 6
23183: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23184: LD_INT 0
23186: PPUSH
23187: PPUSH
23188: PPUSH
23189: PPUSH
23190: PPUSH
23191: PPUSH
23192: PPUSH
23193: PPUSH
23194: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23195: LD_VAR 0 1
23199: NOT
23200: PUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: LD_VAR 0 3
23210: PPUSH
23211: CALL_OW 488
23215: NOT
23216: OR
23217: PUSH
23218: LD_VAR 0 4
23222: NOT
23223: OR
23224: IFFALSE 23228
// exit ;
23226: GO 23568
// list := [ ] ;
23228: LD_ADDR_VAR 0 13
23232: PUSH
23233: EMPTY
23234: ST_TO_ADDR
// if x - r < 0 then
23235: LD_VAR 0 2
23239: PUSH
23240: LD_VAR 0 4
23244: MINUS
23245: PUSH
23246: LD_INT 0
23248: LESS
23249: IFFALSE 23261
// min_x := 0 else
23251: LD_ADDR_VAR 0 7
23255: PUSH
23256: LD_INT 0
23258: ST_TO_ADDR
23259: GO 23277
// min_x := x - r ;
23261: LD_ADDR_VAR 0 7
23265: PUSH
23266: LD_VAR 0 2
23270: PUSH
23271: LD_VAR 0 4
23275: MINUS
23276: ST_TO_ADDR
// if y - r < 0 then
23277: LD_VAR 0 3
23281: PUSH
23282: LD_VAR 0 4
23286: MINUS
23287: PUSH
23288: LD_INT 0
23290: LESS
23291: IFFALSE 23303
// min_y := 0 else
23293: LD_ADDR_VAR 0 8
23297: PUSH
23298: LD_INT 0
23300: ST_TO_ADDR
23301: GO 23319
// min_y := y - r ;
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: LD_VAR 0 3
23312: PUSH
23313: LD_VAR 0 4
23317: MINUS
23318: ST_TO_ADDR
// max_x := x + r ;
23319: LD_ADDR_VAR 0 9
23323: PUSH
23324: LD_VAR 0 2
23328: PUSH
23329: LD_VAR 0 4
23333: PLUS
23334: ST_TO_ADDR
// max_y := y + r ;
23335: LD_ADDR_VAR 0 10
23339: PUSH
23340: LD_VAR 0 3
23344: PUSH
23345: LD_VAR 0 4
23349: PLUS
23350: ST_TO_ADDR
// for _x = min_x to max_x do
23351: LD_ADDR_VAR 0 11
23355: PUSH
23356: DOUBLE
23357: LD_VAR 0 7
23361: DEC
23362: ST_TO_ADDR
23363: LD_VAR 0 9
23367: PUSH
23368: FOR_TO
23369: IFFALSE 23486
// for _y = min_y to max_y do
23371: LD_ADDR_VAR 0 12
23375: PUSH
23376: DOUBLE
23377: LD_VAR 0 8
23381: DEC
23382: ST_TO_ADDR
23383: LD_VAR 0 10
23387: PUSH
23388: FOR_TO
23389: IFFALSE 23482
// begin if not ValidHex ( _x , _y ) then
23391: LD_VAR 0 11
23395: PPUSH
23396: LD_VAR 0 12
23400: PPUSH
23401: CALL_OW 488
23405: NOT
23406: IFFALSE 23410
// continue ;
23408: GO 23388
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23410: LD_VAR 0 11
23414: PPUSH
23415: LD_VAR 0 12
23419: PPUSH
23420: CALL_OW 351
23424: PUSH
23425: LD_VAR 0 11
23429: PPUSH
23430: LD_VAR 0 12
23434: PPUSH
23435: CALL_OW 554
23439: AND
23440: IFFALSE 23480
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23442: LD_ADDR_VAR 0 13
23446: PUSH
23447: LD_VAR 0 13
23451: PPUSH
23452: LD_VAR 0 13
23456: PUSH
23457: LD_INT 1
23459: PLUS
23460: PPUSH
23461: LD_VAR 0 11
23465: PUSH
23466: LD_VAR 0 12
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PPUSH
23475: CALL_OW 2
23479: ST_TO_ADDR
// end ;
23480: GO 23388
23482: POP
23483: POP
23484: GO 23368
23486: POP
23487: POP
// if not list then
23488: LD_VAR 0 13
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23568
// for i in list do
23497: LD_ADDR_VAR 0 6
23501: PUSH
23502: LD_VAR 0 13
23506: PUSH
23507: FOR_IN
23508: IFFALSE 23566
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23510: LD_VAR 0 1
23514: PPUSH
23515: LD_STRING M
23517: PUSH
23518: LD_VAR 0 6
23522: PUSH
23523: LD_INT 1
23525: ARRAY
23526: PUSH
23527: LD_VAR 0 6
23531: PUSH
23532: LD_INT 2
23534: ARRAY
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: PPUSH
23560: CALL_OW 447
23564: GO 23507
23566: POP
23567: POP
// end ;
23568: LD_VAR 0 5
23572: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23573: LD_EXP 89
23577: NOT
23578: IFFALSE 23628
23580: GO 23582
23582: DISABLE
// begin initHack := true ;
23583: LD_ADDR_EXP 89
23587: PUSH
23588: LD_INT 1
23590: ST_TO_ADDR
// hackTanks := [ ] ;
23591: LD_ADDR_EXP 90
23595: PUSH
23596: EMPTY
23597: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23598: LD_ADDR_EXP 91
23602: PUSH
23603: EMPTY
23604: ST_TO_ADDR
// hackLimit := 3 ;
23605: LD_ADDR_EXP 92
23609: PUSH
23610: LD_INT 3
23612: ST_TO_ADDR
// hackDist := 12 ;
23613: LD_ADDR_EXP 93
23617: PUSH
23618: LD_INT 12
23620: ST_TO_ADDR
// hackCounter := [ ] ;
23621: LD_ADDR_EXP 94
23625: PUSH
23626: EMPTY
23627: ST_TO_ADDR
// end ;
23628: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23629: LD_EXP 89
23633: PUSH
23634: LD_INT 34
23636: PUSH
23637: LD_INT 99
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PPUSH
23644: CALL_OW 69
23648: AND
23649: IFFALSE 23902
23651: GO 23653
23653: DISABLE
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
// begin enable ;
23658: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23659: LD_ADDR_VAR 0 1
23663: PUSH
23664: LD_INT 34
23666: PUSH
23667: LD_INT 99
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PPUSH
23674: CALL_OW 69
23678: PUSH
23679: FOR_IN
23680: IFFALSE 23900
// begin if not i in hackTanks then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_EXP 90
23691: IN
23692: NOT
23693: IFFALSE 23776
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23695: LD_ADDR_EXP 90
23699: PUSH
23700: LD_EXP 90
23704: PPUSH
23705: LD_EXP 90
23709: PUSH
23710: LD_INT 1
23712: PLUS
23713: PPUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: CALL_OW 1
23723: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23724: LD_ADDR_EXP 91
23728: PUSH
23729: LD_EXP 91
23733: PPUSH
23734: LD_EXP 91
23738: PUSH
23739: LD_INT 1
23741: PLUS
23742: PPUSH
23743: EMPTY
23744: PPUSH
23745: CALL_OW 1
23749: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23750: LD_ADDR_EXP 94
23754: PUSH
23755: LD_EXP 94
23759: PPUSH
23760: LD_EXP 94
23764: PUSH
23765: LD_INT 1
23767: PLUS
23768: PPUSH
23769: EMPTY
23770: PPUSH
23771: CALL_OW 1
23775: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 302
23785: NOT
23786: IFFALSE 23799
// begin HackUnlinkAll ( i ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL 23905 0 1
// continue ;
23797: GO 23679
// end ; HackCheckCapturedStatus ( i ) ;
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL 24348 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23808: LD_ADDR_VAR 0 2
23812: PUSH
23813: LD_INT 81
23815: PUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL_OW 255
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 33
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 91
23842: PUSH
23843: LD_VAR 0 1
23847: PUSH
23848: LD_EXP 93
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 50
23860: PUSH
23861: EMPTY
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PPUSH
23870: CALL_OW 69
23874: ST_TO_ADDR
// if not tmp then
23875: LD_VAR 0 2
23879: NOT
23880: IFFALSE 23884
// continue ;
23882: GO 23679
// HackLink ( i , tmp ) ;
23884: LD_VAR 0 1
23888: PPUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: CALL 24041 0 2
// end ;
23898: GO 23679
23900: POP
23901: POP
// end ;
23902: PPOPN 2
23904: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23905: LD_INT 0
23907: PPUSH
23908: PPUSH
23909: PPUSH
// if not hack in hackTanks then
23910: LD_VAR 0 1
23914: PUSH
23915: LD_EXP 90
23919: IN
23920: NOT
23921: IFFALSE 23925
// exit ;
23923: GO 24036
// index := GetElementIndex ( hackTanks , hack ) ;
23925: LD_ADDR_VAR 0 4
23929: PUSH
23930: LD_EXP 90
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL 31653 0 2
23944: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23945: LD_EXP 91
23949: PUSH
23950: LD_VAR 0 4
23954: ARRAY
23955: IFFALSE 24036
// begin for i in hackTanksCaptured [ index ] do
23957: LD_ADDR_VAR 0 3
23961: PUSH
23962: LD_EXP 91
23966: PUSH
23967: LD_VAR 0 4
23971: ARRAY
23972: PUSH
23973: FOR_IN
23974: IFFALSE 24000
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23976: LD_VAR 0 3
23980: PUSH
23981: LD_INT 1
23983: ARRAY
23984: PPUSH
23985: LD_VAR 0 3
23989: PUSH
23990: LD_INT 2
23992: ARRAY
23993: PPUSH
23994: CALL_OW 235
23998: GO 23973
24000: POP
24001: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24002: LD_ADDR_EXP 91
24006: PUSH
24007: LD_EXP 91
24011: PPUSH
24012: LD_VAR 0 4
24016: PPUSH
24017: EMPTY
24018: PPUSH
24019: CALL_OW 1
24023: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_INT 0
24031: PPUSH
24032: CALL_OW 505
// end ; end ;
24036: LD_VAR 0 2
24040: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24041: LD_INT 0
24043: PPUSH
24044: PPUSH
24045: PPUSH
// if not hack in hackTanks or not vehicles then
24046: LD_VAR 0 1
24050: PUSH
24051: LD_EXP 90
24055: IN
24056: NOT
24057: PUSH
24058: LD_VAR 0 2
24062: NOT
24063: OR
24064: IFFALSE 24068
// exit ;
24066: GO 24343
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_INT 1
24085: PPUSH
24086: LD_INT 1
24088: PPUSH
24089: CALL 32303 0 4
24093: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: LD_EXP 90
24103: PPUSH
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL 31653 0 2
24113: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24114: LD_EXP 91
24118: PUSH
24119: LD_VAR 0 5
24123: ARRAY
24124: PUSH
24125: LD_EXP 92
24129: LESS
24130: IFFALSE 24319
// begin for i := 1 to vehicles do
24132: LD_ADDR_VAR 0 4
24136: PUSH
24137: DOUBLE
24138: LD_INT 1
24140: DEC
24141: ST_TO_ADDR
24142: LD_VAR 0 2
24146: PUSH
24147: FOR_TO
24148: IFFALSE 24317
// begin if hackTanksCaptured [ index ] = hackLimit then
24150: LD_EXP 91
24154: PUSH
24155: LD_VAR 0 5
24159: ARRAY
24160: PUSH
24161: LD_EXP 92
24165: EQUAL
24166: IFFALSE 24170
// break ;
24168: GO 24317
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24170: LD_ADDR_EXP 94
24174: PUSH
24175: LD_EXP 94
24179: PPUSH
24180: LD_VAR 0 5
24184: PPUSH
24185: LD_EXP 94
24189: PUSH
24190: LD_VAR 0 5
24194: ARRAY
24195: PUSH
24196: LD_INT 1
24198: PLUS
24199: PPUSH
24200: CALL_OW 1
24204: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24205: LD_ADDR_EXP 91
24209: PUSH
24210: LD_EXP 91
24214: PPUSH
24215: LD_VAR 0 5
24219: PUSH
24220: LD_EXP 91
24224: PUSH
24225: LD_VAR 0 5
24229: ARRAY
24230: PUSH
24231: LD_INT 1
24233: PLUS
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PUSH
24250: LD_VAR 0 2
24254: PUSH
24255: LD_VAR 0 4
24259: ARRAY
24260: PPUSH
24261: CALL_OW 255
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL 31868 0 3
24274: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24275: LD_VAR 0 2
24279: PUSH
24280: LD_VAR 0 4
24284: ARRAY
24285: PPUSH
24286: LD_VAR 0 1
24290: PPUSH
24291: CALL_OW 255
24295: PPUSH
24296: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24300: LD_VAR 0 2
24304: PUSH
24305: LD_VAR 0 4
24309: ARRAY
24310: PPUSH
24311: CALL_OW 141
// end ;
24315: GO 24147
24317: POP
24318: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24319: LD_VAR 0 1
24323: PPUSH
24324: LD_EXP 91
24328: PUSH
24329: LD_VAR 0 5
24333: ARRAY
24334: PUSH
24335: LD_INT 0
24337: PLUS
24338: PPUSH
24339: CALL_OW 505
// end ;
24343: LD_VAR 0 3
24347: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24348: LD_INT 0
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
// if not hack in hackTanks then
24354: LD_VAR 0 1
24358: PUSH
24359: LD_EXP 90
24363: IN
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24609
// index := GetElementIndex ( hackTanks , hack ) ;
24369: LD_ADDR_VAR 0 4
24373: PUSH
24374: LD_EXP 90
24378: PPUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL 31653 0 2
24388: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: DOUBLE
24395: LD_EXP 91
24399: PUSH
24400: LD_VAR 0 4
24404: ARRAY
24405: INC
24406: ST_TO_ADDR
24407: LD_INT 1
24409: PUSH
24410: FOR_DOWNTO
24411: IFFALSE 24583
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24413: LD_ADDR_VAR 0 5
24417: PUSH
24418: LD_EXP 91
24422: PUSH
24423: LD_VAR 0 4
24427: ARRAY
24428: PUSH
24429: LD_VAR 0 3
24433: ARRAY
24434: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24435: LD_VAR 0 5
24439: PUSH
24440: LD_INT 1
24442: ARRAY
24443: PPUSH
24444: CALL_OW 302
24448: NOT
24449: PUSH
24450: LD_VAR 0 5
24454: PUSH
24455: LD_INT 1
24457: ARRAY
24458: PPUSH
24459: CALL_OW 255
24463: PUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 255
24473: NONEQUAL
24474: OR
24475: IFFALSE 24581
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24477: LD_VAR 0 5
24481: PUSH
24482: LD_INT 1
24484: ARRAY
24485: PPUSH
24486: CALL_OW 305
24490: PUSH
24491: LD_VAR 0 5
24495: PUSH
24496: LD_INT 1
24498: ARRAY
24499: PPUSH
24500: CALL_OW 255
24504: PUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 255
24514: EQUAL
24515: AND
24516: IFFALSE 24540
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24518: LD_VAR 0 5
24522: PUSH
24523: LD_INT 1
24525: ARRAY
24526: PPUSH
24527: LD_VAR 0 5
24531: PUSH
24532: LD_INT 2
24534: ARRAY
24535: PPUSH
24536: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24540: LD_ADDR_EXP 91
24544: PUSH
24545: LD_EXP 91
24549: PPUSH
24550: LD_VAR 0 4
24554: PPUSH
24555: LD_EXP 91
24559: PUSH
24560: LD_VAR 0 4
24564: ARRAY
24565: PPUSH
24566: LD_VAR 0 3
24570: PPUSH
24571: CALL_OW 3
24575: PPUSH
24576: CALL_OW 1
24580: ST_TO_ADDR
// end ; end ;
24581: GO 24410
24583: POP
24584: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24585: LD_VAR 0 1
24589: PPUSH
24590: LD_EXP 91
24594: PUSH
24595: LD_VAR 0 4
24599: ARRAY
24600: PUSH
24601: LD_INT 0
24603: PLUS
24604: PPUSH
24605: CALL_OW 505
// end ;
24609: LD_VAR 0 2
24613: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
// if not hack in hackTanks then
24620: LD_VAR 0 1
24624: PUSH
24625: LD_EXP 90
24629: IN
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 24720
// index := GetElementIndex ( hackTanks , hack ) ;
24635: LD_ADDR_VAR 0 5
24639: PUSH
24640: LD_EXP 90
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL 31653 0 2
24654: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24655: LD_ADDR_VAR 0 4
24659: PUSH
24660: DOUBLE
24661: LD_INT 1
24663: DEC
24664: ST_TO_ADDR
24665: LD_EXP 91
24669: PUSH
24670: LD_VAR 0 5
24674: ARRAY
24675: PUSH
24676: FOR_TO
24677: IFFALSE 24718
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24679: LD_EXP 91
24683: PUSH
24684: LD_VAR 0 5
24688: ARRAY
24689: PUSH
24690: LD_VAR 0 4
24694: ARRAY
24695: PUSH
24696: LD_INT 1
24698: ARRAY
24699: PUSH
24700: LD_VAR 0 2
24704: EQUAL
24705: IFFALSE 24716
// KillUnit ( vehicle ) ;
24707: LD_VAR 0 2
24711: PPUSH
24712: CALL_OW 66
24716: GO 24676
24718: POP
24719: POP
// end ;
24720: LD_VAR 0 3
24724: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24725: LD_EXP 95
24729: NOT
24730: IFFALSE 24765
24732: GO 24734
24734: DISABLE
// begin initMiner := true ;
24735: LD_ADDR_EXP 95
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// minersList := [ ] ;
24743: LD_ADDR_EXP 96
24747: PUSH
24748: EMPTY
24749: ST_TO_ADDR
// minerMinesList := [ ] ;
24750: LD_ADDR_EXP 97
24754: PUSH
24755: EMPTY
24756: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24757: LD_ADDR_EXP 98
24761: PUSH
24762: LD_INT 5
24764: ST_TO_ADDR
// end ;
24765: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24766: LD_EXP 95
24770: PUSH
24771: LD_INT 34
24773: PUSH
24774: LD_INT 81
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PPUSH
24781: CALL_OW 69
24785: AND
24786: IFFALSE 25247
24788: GO 24790
24790: DISABLE
24791: LD_INT 0
24793: PPUSH
24794: PPUSH
24795: PPUSH
24796: PPUSH
// begin enable ;
24797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24798: LD_ADDR_VAR 0 1
24802: PUSH
24803: LD_INT 34
24805: PUSH
24806: LD_INT 81
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 69
24817: PUSH
24818: FOR_IN
24819: IFFALSE 24891
// begin if not i in minersList then
24821: LD_VAR 0 1
24825: PUSH
24826: LD_EXP 96
24830: IN
24831: NOT
24832: IFFALSE 24889
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24834: LD_ADDR_EXP 96
24838: PUSH
24839: LD_EXP 96
24843: PPUSH
24844: LD_EXP 96
24848: PUSH
24849: LD_INT 1
24851: PLUS
24852: PPUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 1
24862: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24863: LD_ADDR_EXP 97
24867: PUSH
24868: LD_EXP 97
24872: PPUSH
24873: LD_EXP 97
24877: PUSH
24878: LD_INT 1
24880: PLUS
24881: PPUSH
24882: EMPTY
24883: PPUSH
24884: CALL_OW 1
24888: ST_TO_ADDR
// end end ;
24889: GO 24818
24891: POP
24892: POP
// for i := minerMinesList downto 1 do
24893: LD_ADDR_VAR 0 1
24897: PUSH
24898: DOUBLE
24899: LD_EXP 97
24903: INC
24904: ST_TO_ADDR
24905: LD_INT 1
24907: PUSH
24908: FOR_DOWNTO
24909: IFFALSE 25245
// begin if IsLive ( minersList [ i ] ) then
24911: LD_EXP 96
24915: PUSH
24916: LD_VAR 0 1
24920: ARRAY
24921: PPUSH
24922: CALL_OW 300
24926: IFFALSE 24954
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24928: LD_EXP 96
24932: PUSH
24933: LD_VAR 0 1
24937: ARRAY
24938: PPUSH
24939: LD_EXP 97
24943: PUSH
24944: LD_VAR 0 1
24948: ARRAY
24949: PPUSH
24950: CALL_OW 505
// if not minerMinesList [ i ] then
24954: LD_EXP 97
24958: PUSH
24959: LD_VAR 0 1
24963: ARRAY
24964: NOT
24965: IFFALSE 24969
// continue ;
24967: GO 24908
// for j := minerMinesList [ i ] downto 1 do
24969: LD_ADDR_VAR 0 2
24973: PUSH
24974: DOUBLE
24975: LD_EXP 97
24979: PUSH
24980: LD_VAR 0 1
24984: ARRAY
24985: INC
24986: ST_TO_ADDR
24987: LD_INT 1
24989: PUSH
24990: FOR_DOWNTO
24991: IFFALSE 25241
// begin side := GetSide ( minersList [ i ] ) ;
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_EXP 96
25002: PUSH
25003: LD_VAR 0 1
25007: ARRAY
25008: PPUSH
25009: CALL_OW 255
25013: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25014: LD_ADDR_VAR 0 4
25018: PUSH
25019: LD_EXP 97
25023: PUSH
25024: LD_VAR 0 1
25028: ARRAY
25029: PUSH
25030: LD_VAR 0 2
25034: ARRAY
25035: PUSH
25036: LD_INT 1
25038: ARRAY
25039: PPUSH
25040: LD_EXP 97
25044: PUSH
25045: LD_VAR 0 1
25049: ARRAY
25050: PUSH
25051: LD_VAR 0 2
25055: ARRAY
25056: PUSH
25057: LD_INT 2
25059: ARRAY
25060: PPUSH
25061: CALL_OW 428
25065: ST_TO_ADDR
// if not tmp then
25066: LD_VAR 0 4
25070: NOT
25071: IFFALSE 25075
// continue ;
25073: GO 24990
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25075: LD_VAR 0 4
25079: PUSH
25080: LD_INT 81
25082: PUSH
25083: LD_VAR 0 3
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PPUSH
25092: CALL_OW 69
25096: IN
25097: PUSH
25098: LD_EXP 97
25102: PUSH
25103: LD_VAR 0 1
25107: ARRAY
25108: PUSH
25109: LD_VAR 0 2
25113: ARRAY
25114: PUSH
25115: LD_INT 1
25117: ARRAY
25118: PPUSH
25119: LD_EXP 97
25123: PUSH
25124: LD_VAR 0 1
25128: ARRAY
25129: PUSH
25130: LD_VAR 0 2
25134: ARRAY
25135: PUSH
25136: LD_INT 2
25138: ARRAY
25139: PPUSH
25140: CALL_OW 458
25144: AND
25145: IFFALSE 25239
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25147: LD_EXP 97
25151: PUSH
25152: LD_VAR 0 1
25156: ARRAY
25157: PUSH
25158: LD_VAR 0 2
25162: ARRAY
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: PPUSH
25168: LD_EXP 97
25172: PUSH
25173: LD_VAR 0 1
25177: ARRAY
25178: PUSH
25179: LD_VAR 0 2
25183: ARRAY
25184: PUSH
25185: LD_INT 2
25187: ARRAY
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25198: LD_ADDR_EXP 97
25202: PUSH
25203: LD_EXP 97
25207: PPUSH
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_EXP 97
25217: PUSH
25218: LD_VAR 0 1
25222: ARRAY
25223: PPUSH
25224: LD_VAR 0 2
25228: PPUSH
25229: CALL_OW 3
25233: PPUSH
25234: CALL_OW 1
25238: ST_TO_ADDR
// end ; end ;
25239: GO 24990
25241: POP
25242: POP
// end ;
25243: GO 24908
25245: POP
25246: POP
// end ;
25247: PPOPN 4
25249: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25250: LD_INT 0
25252: PPUSH
25253: PPUSH
// result := false ;
25254: LD_ADDR_VAR 0 4
25258: PUSH
25259: LD_INT 0
25261: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 264
25271: PUSH
25272: LD_INT 81
25274: EQUAL
25275: NOT
25276: IFFALSE 25280
// exit ;
25278: GO 25520
// index := GetElementIndex ( minersList , unit ) ;
25280: LD_ADDR_VAR 0 5
25284: PUSH
25285: LD_EXP 96
25289: PPUSH
25290: LD_VAR 0 1
25294: PPUSH
25295: CALL 31653 0 2
25299: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25300: LD_EXP 97
25304: PUSH
25305: LD_VAR 0 5
25309: ARRAY
25310: PUSH
25311: LD_EXP 98
25315: GREATEREQUAL
25316: IFFALSE 25320
// exit ;
25318: GO 25520
// ComMoveXY ( unit , x , y ) ;
25320: LD_VAR 0 1
25324: PPUSH
25325: LD_VAR 0 2
25329: PPUSH
25330: LD_VAR 0 3
25334: PPUSH
25335: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25339: LD_INT 35
25341: PPUSH
25342: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25346: LD_VAR 0 1
25350: PPUSH
25351: LD_VAR 0 2
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: CALL 62989 0 3
25365: NOT
25366: PUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 314
25376: AND
25377: IFFALSE 25381
// exit ;
25379: GO 25520
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25381: LD_VAR 0 2
25385: PPUSH
25386: LD_VAR 0 3
25390: PPUSH
25391: CALL_OW 428
25395: PUSH
25396: LD_VAR 0 1
25400: EQUAL
25401: PUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 314
25411: NOT
25412: AND
25413: IFFALSE 25339
// PlaySoundXY ( x , y , PlantMine ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: LD_STRING PlantMine
25427: PPUSH
25428: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25432: LD_VAR 0 2
25436: PPUSH
25437: LD_VAR 0 3
25441: PPUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 255
25451: PPUSH
25452: LD_INT 0
25454: PPUSH
25455: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25459: LD_ADDR_EXP 97
25463: PUSH
25464: LD_EXP 97
25468: PPUSH
25469: LD_VAR 0 5
25473: PUSH
25474: LD_EXP 97
25478: PUSH
25479: LD_VAR 0 5
25483: ARRAY
25484: PUSH
25485: LD_INT 1
25487: PLUS
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: LD_VAR 0 2
25497: PUSH
25498: LD_VAR 0 3
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PPUSH
25507: CALL 31868 0 3
25511: ST_TO_ADDR
// result := true ;
25512: LD_ADDR_VAR 0 4
25516: PUSH
25517: LD_INT 1
25519: ST_TO_ADDR
// end ;
25520: LD_VAR 0 4
25524: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25525: LD_INT 0
25527: PPUSH
25528: PPUSH
25529: PPUSH
// if not unit in minersList then
25530: LD_VAR 0 1
25534: PUSH
25535: LD_EXP 96
25539: IN
25540: NOT
25541: IFFALSE 25545
// exit ;
25543: GO 25937
// index := GetElementIndex ( minersList , unit ) ;
25545: LD_ADDR_VAR 0 6
25549: PUSH
25550: LD_EXP 96
25554: PPUSH
25555: LD_VAR 0 1
25559: PPUSH
25560: CALL 31653 0 2
25564: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25565: LD_ADDR_VAR 0 5
25569: PUSH
25570: DOUBLE
25571: LD_EXP 97
25575: PUSH
25576: LD_VAR 0 6
25580: ARRAY
25581: INC
25582: ST_TO_ADDR
25583: LD_INT 1
25585: PUSH
25586: FOR_DOWNTO
25587: IFFALSE 25748
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25589: LD_EXP 97
25593: PUSH
25594: LD_VAR 0 6
25598: ARRAY
25599: PUSH
25600: LD_VAR 0 5
25604: ARRAY
25605: PUSH
25606: LD_INT 1
25608: ARRAY
25609: PUSH
25610: LD_VAR 0 2
25614: EQUAL
25615: PUSH
25616: LD_EXP 97
25620: PUSH
25621: LD_VAR 0 6
25625: ARRAY
25626: PUSH
25627: LD_VAR 0 5
25631: ARRAY
25632: PUSH
25633: LD_INT 2
25635: ARRAY
25636: PUSH
25637: LD_VAR 0 3
25641: EQUAL
25642: AND
25643: IFFALSE 25746
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25645: LD_EXP 97
25649: PUSH
25650: LD_VAR 0 6
25654: ARRAY
25655: PUSH
25656: LD_VAR 0 5
25660: ARRAY
25661: PUSH
25662: LD_INT 1
25664: ARRAY
25665: PPUSH
25666: LD_EXP 97
25670: PUSH
25671: LD_VAR 0 6
25675: ARRAY
25676: PUSH
25677: LD_VAR 0 5
25681: ARRAY
25682: PUSH
25683: LD_INT 2
25685: ARRAY
25686: PPUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 255
25696: PPUSH
25697: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25701: LD_ADDR_EXP 97
25705: PUSH
25706: LD_EXP 97
25710: PPUSH
25711: LD_VAR 0 6
25715: PPUSH
25716: LD_EXP 97
25720: PUSH
25721: LD_VAR 0 6
25725: ARRAY
25726: PPUSH
25727: LD_VAR 0 5
25731: PPUSH
25732: CALL_OW 3
25736: PPUSH
25737: CALL_OW 1
25741: ST_TO_ADDR
// exit ;
25742: POP
25743: POP
25744: GO 25937
// end ; end ;
25746: GO 25586
25748: POP
25749: POP
// for i := minerMinesList [ index ] downto 1 do
25750: LD_ADDR_VAR 0 5
25754: PUSH
25755: DOUBLE
25756: LD_EXP 97
25760: PUSH
25761: LD_VAR 0 6
25765: ARRAY
25766: INC
25767: ST_TO_ADDR
25768: LD_INT 1
25770: PUSH
25771: FOR_DOWNTO
25772: IFFALSE 25935
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25774: LD_EXP 97
25778: PUSH
25779: LD_VAR 0 6
25783: ARRAY
25784: PUSH
25785: LD_VAR 0 5
25789: ARRAY
25790: PUSH
25791: LD_INT 1
25793: ARRAY
25794: PPUSH
25795: LD_EXP 97
25799: PUSH
25800: LD_VAR 0 6
25804: ARRAY
25805: PUSH
25806: LD_VAR 0 5
25810: ARRAY
25811: PUSH
25812: LD_INT 2
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 298
25830: PUSH
25831: LD_INT 6
25833: LESS
25834: IFFALSE 25933
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25836: LD_EXP 97
25840: PUSH
25841: LD_VAR 0 6
25845: ARRAY
25846: PUSH
25847: LD_VAR 0 5
25851: ARRAY
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: PPUSH
25857: LD_EXP 97
25861: PUSH
25862: LD_VAR 0 6
25866: ARRAY
25867: PUSH
25868: LD_VAR 0 5
25872: ARRAY
25873: PUSH
25874: LD_INT 2
25876: ARRAY
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 255
25887: PPUSH
25888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25892: LD_ADDR_EXP 97
25896: PUSH
25897: LD_EXP 97
25901: PPUSH
25902: LD_VAR 0 6
25906: PPUSH
25907: LD_EXP 97
25911: PUSH
25912: LD_VAR 0 6
25916: ARRAY
25917: PPUSH
25918: LD_VAR 0 5
25922: PPUSH
25923: CALL_OW 3
25927: PPUSH
25928: CALL_OW 1
25932: ST_TO_ADDR
// end ; end ;
25933: GO 25771
25935: POP
25936: POP
// end ;
25937: LD_VAR 0 4
25941: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25953: LD_VAR 0 1
25957: PPUSH
25958: CALL_OW 264
25962: PUSH
25963: LD_INT 81
25965: EQUAL
25966: NOT
25967: PUSH
25968: LD_VAR 0 1
25972: PUSH
25973: LD_EXP 96
25977: IN
25978: NOT
25979: OR
25980: IFFALSE 25984
// exit ;
25982: GO 26306
// index := GetElementIndex ( minersList , unit ) ;
25984: LD_ADDR_VAR 0 6
25988: PUSH
25989: LD_EXP 96
25993: PPUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL 31653 0 2
26003: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26004: LD_ADDR_VAR 0 8
26008: PUSH
26009: LD_EXP 98
26013: PUSH
26014: LD_EXP 97
26018: PUSH
26019: LD_VAR 0 6
26023: ARRAY
26024: MINUS
26025: ST_TO_ADDR
// if not minesFreeAmount then
26026: LD_VAR 0 8
26030: NOT
26031: IFFALSE 26035
// exit ;
26033: GO 26306
// tmp := [ ] ;
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: EMPTY
26041: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26042: LD_ADDR_VAR 0 5
26046: PUSH
26047: DOUBLE
26048: LD_INT 1
26050: DEC
26051: ST_TO_ADDR
26052: LD_VAR 0 8
26056: PUSH
26057: FOR_TO
26058: IFFALSE 26253
// begin _d := rand ( 0 , 5 ) ;
26060: LD_ADDR_VAR 0 11
26064: PUSH
26065: LD_INT 0
26067: PPUSH
26068: LD_INT 5
26070: PPUSH
26071: CALL_OW 12
26075: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26076: LD_ADDR_VAR 0 12
26080: PUSH
26081: LD_INT 2
26083: PPUSH
26084: LD_INT 6
26086: PPUSH
26087: CALL_OW 12
26091: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26092: LD_ADDR_VAR 0 9
26096: PUSH
26097: LD_VAR 0 2
26101: PPUSH
26102: LD_VAR 0 11
26106: PPUSH
26107: LD_VAR 0 12
26111: PPUSH
26112: CALL_OW 272
26116: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26117: LD_ADDR_VAR 0 10
26121: PUSH
26122: LD_VAR 0 3
26126: PPUSH
26127: LD_VAR 0 11
26131: PPUSH
26132: LD_VAR 0 12
26136: PPUSH
26137: CALL_OW 273
26141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26142: LD_VAR 0 9
26146: PPUSH
26147: LD_VAR 0 10
26151: PPUSH
26152: CALL_OW 488
26156: PUSH
26157: LD_VAR 0 9
26161: PUSH
26162: LD_VAR 0 10
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_VAR 0 7
26175: IN
26176: NOT
26177: AND
26178: PUSH
26179: LD_VAR 0 9
26183: PPUSH
26184: LD_VAR 0 10
26188: PPUSH
26189: CALL_OW 458
26193: NOT
26194: AND
26195: IFFALSE 26237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26197: LD_ADDR_VAR 0 7
26201: PUSH
26202: LD_VAR 0 7
26206: PPUSH
26207: LD_VAR 0 7
26211: PUSH
26212: LD_INT 1
26214: PLUS
26215: PPUSH
26216: LD_VAR 0 9
26220: PUSH
26221: LD_VAR 0 10
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
26235: GO 26251
// i := i - 1 ;
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 5
26246: PUSH
26247: LD_INT 1
26249: MINUS
26250: ST_TO_ADDR
// end ;
26251: GO 26057
26253: POP
26254: POP
// for i in tmp do
26255: LD_ADDR_VAR 0 5
26259: PUSH
26260: LD_VAR 0 7
26264: PUSH
26265: FOR_IN
26266: IFFALSE 26304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26268: LD_VAR 0 1
26272: PPUSH
26273: LD_VAR 0 5
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PPUSH
26282: LD_VAR 0 5
26286: PUSH
26287: LD_INT 2
26289: ARRAY
26290: PPUSH
26291: CALL 25250 0 3
26295: NOT
26296: IFFALSE 26302
// exit ;
26298: POP
26299: POP
26300: GO 26306
26302: GO 26265
26304: POP
26305: POP
// end ;
26306: LD_VAR 0 4
26310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
26318: PPUSH
26319: PPUSH
// if not GetClass ( unit ) = class_sniper then
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 257
26329: PUSH
26330: LD_INT 5
26332: EQUAL
26333: NOT
26334: IFFALSE 26338
// exit ;
26336: GO 26726
// dist := 8 ;
26338: LD_ADDR_VAR 0 5
26342: PUSH
26343: LD_INT 8
26345: ST_TO_ADDR
// viewRange := 12 ;
26346: LD_ADDR_VAR 0 7
26350: PUSH
26351: LD_INT 12
26353: ST_TO_ADDR
// side := GetSide ( unit ) ;
26354: LD_ADDR_VAR 0 6
26358: PUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: CALL_OW 255
26368: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26369: LD_INT 61
26371: PPUSH
26372: LD_VAR 0 6
26376: PPUSH
26377: CALL_OW 321
26381: PUSH
26382: LD_INT 2
26384: EQUAL
26385: IFFALSE 26395
// viewRange := 16 ;
26387: LD_ADDR_VAR 0 7
26391: PUSH
26392: LD_INT 16
26394: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26395: LD_VAR 0 1
26399: PPUSH
26400: LD_VAR 0 2
26404: PPUSH
26405: LD_VAR 0 3
26409: PPUSH
26410: CALL_OW 297
26414: PUSH
26415: LD_VAR 0 5
26419: GREATER
26420: IFFALSE 26499
// begin ComMoveXY ( unit , x , y ) ;
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_VAR 0 2
26431: PPUSH
26432: LD_VAR 0 3
26436: PPUSH
26437: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26441: LD_INT 35
26443: PPUSH
26444: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26448: LD_VAR 0 1
26452: PPUSH
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_VAR 0 3
26462: PPUSH
26463: CALL 62989 0 3
26467: NOT
26468: IFFALSE 26472
// exit ;
26470: GO 26726
// until GetDistUnitXY ( unit , x , y ) < dist ;
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 297
26491: PUSH
26492: LD_VAR 0 5
26496: LESS
26497: IFFALSE 26441
// end ; ComTurnXY ( unit , x , y ) ;
26499: LD_VAR 0 1
26503: PPUSH
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 3
26513: PPUSH
26514: CALL_OW 118
// wait ( 5 ) ;
26518: LD_INT 5
26520: PPUSH
26521: CALL_OW 67
// _d := GetDir ( unit ) ;
26525: LD_ADDR_VAR 0 10
26529: PUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: CALL_OW 254
26539: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26540: LD_ADDR_VAR 0 8
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 250
26554: PPUSH
26555: LD_VAR 0 10
26559: PPUSH
26560: LD_VAR 0 5
26564: PPUSH
26565: CALL_OW 272
26569: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26570: LD_ADDR_VAR 0 9
26574: PUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 251
26584: PPUSH
26585: LD_VAR 0 10
26589: PPUSH
26590: LD_VAR 0 5
26594: PPUSH
26595: CALL_OW 273
26599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26600: LD_VAR 0 8
26604: PPUSH
26605: LD_VAR 0 9
26609: PPUSH
26610: CALL_OW 488
26614: NOT
26615: IFFALSE 26619
// exit ;
26617: GO 26726
// ComAnimCustom ( unit , 1 ) ;
26619: LD_VAR 0 1
26623: PPUSH
26624: LD_INT 1
26626: PPUSH
26627: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26631: LD_VAR 0 8
26635: PPUSH
26636: LD_VAR 0 9
26640: PPUSH
26641: LD_VAR 0 6
26645: PPUSH
26646: LD_VAR 0 7
26650: PPUSH
26651: CALL_OW 330
// repeat wait ( 1 ) ;
26655: LD_INT 1
26657: PPUSH
26658: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 316
26671: PUSH
26672: LD_VAR 0 1
26676: PPUSH
26677: CALL_OW 314
26681: OR
26682: PUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 302
26692: NOT
26693: OR
26694: PUSH
26695: LD_VAR 0 1
26699: PPUSH
26700: CALL_OW 301
26704: OR
26705: IFFALSE 26655
// RemoveSeeing ( _x , _y , side ) ;
26707: LD_VAR 0 8
26711: PPUSH
26712: LD_VAR 0 9
26716: PPUSH
26717: LD_VAR 0 6
26721: PPUSH
26722: CALL_OW 331
// end ; end_of_file
26726: LD_VAR 0 4
26730: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26731: LD_INT 0
26733: PPUSH
26734: PPUSH
// if exist_mode then
26735: LD_VAR 0 2
26739: IFFALSE 26764
// unit := CreateCharacter ( prefix & ident ) else
26741: LD_ADDR_VAR 0 5
26745: PUSH
26746: LD_VAR 0 3
26750: PUSH
26751: LD_VAR 0 1
26755: STR
26756: PPUSH
26757: CALL_OW 34
26761: ST_TO_ADDR
26762: GO 26779
// unit := NewCharacter ( ident ) ;
26764: LD_ADDR_VAR 0 5
26768: PUSH
26769: LD_VAR 0 1
26773: PPUSH
26774: CALL_OW 25
26778: ST_TO_ADDR
// result := unit ;
26779: LD_ADDR_VAR 0 4
26783: PUSH
26784: LD_VAR 0 5
26788: ST_TO_ADDR
// end ;
26789: LD_VAR 0 4
26793: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
// if not side or not nation then
26798: LD_VAR 0 1
26802: NOT
26803: PUSH
26804: LD_VAR 0 2
26808: NOT
26809: OR
26810: IFFALSE 26814
// exit ;
26812: GO 27582
// case nation of nation_american :
26814: LD_VAR 0 2
26818: PUSH
26819: LD_INT 1
26821: DOUBLE
26822: EQUAL
26823: IFTRUE 26827
26825: GO 27041
26827: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26828: LD_ADDR_VAR 0 4
26832: PUSH
26833: LD_INT 35
26835: PUSH
26836: LD_INT 45
26838: PUSH
26839: LD_INT 46
26841: PUSH
26842: LD_INT 47
26844: PUSH
26845: LD_INT 82
26847: PUSH
26848: LD_INT 83
26850: PUSH
26851: LD_INT 84
26853: PUSH
26854: LD_INT 85
26856: PUSH
26857: LD_INT 86
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 6
26868: PUSH
26869: LD_INT 15
26871: PUSH
26872: LD_INT 16
26874: PUSH
26875: LD_INT 7
26877: PUSH
26878: LD_INT 12
26880: PUSH
26881: LD_INT 13
26883: PUSH
26884: LD_INT 10
26886: PUSH
26887: LD_INT 14
26889: PUSH
26890: LD_INT 20
26892: PUSH
26893: LD_INT 21
26895: PUSH
26896: LD_INT 22
26898: PUSH
26899: LD_INT 25
26901: PUSH
26902: LD_INT 32
26904: PUSH
26905: LD_INT 27
26907: PUSH
26908: LD_INT 36
26910: PUSH
26911: LD_INT 69
26913: PUSH
26914: LD_INT 39
26916: PUSH
26917: LD_INT 34
26919: PUSH
26920: LD_INT 40
26922: PUSH
26923: LD_INT 48
26925: PUSH
26926: LD_INT 49
26928: PUSH
26929: LD_INT 50
26931: PUSH
26932: LD_INT 51
26934: PUSH
26935: LD_INT 52
26937: PUSH
26938: LD_INT 53
26940: PUSH
26941: LD_INT 54
26943: PUSH
26944: LD_INT 55
26946: PUSH
26947: LD_INT 56
26949: PUSH
26950: LD_INT 57
26952: PUSH
26953: LD_INT 58
26955: PUSH
26956: LD_INT 59
26958: PUSH
26959: LD_INT 60
26961: PUSH
26962: LD_INT 61
26964: PUSH
26965: LD_INT 62
26967: PUSH
26968: LD_INT 80
26970: PUSH
26971: LD_INT 82
26973: PUSH
26974: LD_INT 83
26976: PUSH
26977: LD_INT 84
26979: PUSH
26980: LD_INT 85
26982: PUSH
26983: LD_INT 86
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
27039: GO 27506
27041: LD_INT 2
27043: DOUBLE
27044: EQUAL
27045: IFTRUE 27049
27047: GO 27275
27049: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27050: LD_ADDR_VAR 0 4
27054: PUSH
27055: LD_INT 35
27057: PUSH
27058: LD_INT 45
27060: PUSH
27061: LD_INT 46
27063: PUSH
27064: LD_INT 47
27066: PUSH
27067: LD_INT 82
27069: PUSH
27070: LD_INT 83
27072: PUSH
27073: LD_INT 84
27075: PUSH
27076: LD_INT 85
27078: PUSH
27079: LD_INT 87
27081: PUSH
27082: LD_INT 70
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 11
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: LD_INT 5
27099: PUSH
27100: LD_INT 6
27102: PUSH
27103: LD_INT 15
27105: PUSH
27106: LD_INT 18
27108: PUSH
27109: LD_INT 7
27111: PUSH
27112: LD_INT 17
27114: PUSH
27115: LD_INT 8
27117: PUSH
27118: LD_INT 20
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 22
27126: PUSH
27127: LD_INT 72
27129: PUSH
27130: LD_INT 26
27132: PUSH
27133: LD_INT 69
27135: PUSH
27136: LD_INT 39
27138: PUSH
27139: LD_INT 40
27141: PUSH
27142: LD_INT 41
27144: PUSH
27145: LD_INT 42
27147: PUSH
27148: LD_INT 43
27150: PUSH
27151: LD_INT 48
27153: PUSH
27154: LD_INT 49
27156: PUSH
27157: LD_INT 50
27159: PUSH
27160: LD_INT 51
27162: PUSH
27163: LD_INT 52
27165: PUSH
27166: LD_INT 53
27168: PUSH
27169: LD_INT 54
27171: PUSH
27172: LD_INT 55
27174: PUSH
27175: LD_INT 56
27177: PUSH
27178: LD_INT 60
27180: PUSH
27181: LD_INT 61
27183: PUSH
27184: LD_INT 62
27186: PUSH
27187: LD_INT 66
27189: PUSH
27190: LD_INT 67
27192: PUSH
27193: LD_INT 68
27195: PUSH
27196: LD_INT 81
27198: PUSH
27199: LD_INT 82
27201: PUSH
27202: LD_INT 83
27204: PUSH
27205: LD_INT 84
27207: PUSH
27208: LD_INT 85
27210: PUSH
27211: LD_INT 87
27213: PUSH
27214: LD_INT 88
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
27273: GO 27506
27275: LD_INT 3
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27505
27283: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27284: LD_ADDR_VAR 0 4
27288: PUSH
27289: LD_INT 46
27291: PUSH
27292: LD_INT 47
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 82
27303: PUSH
27304: LD_INT 83
27306: PUSH
27307: LD_INT 84
27309: PUSH
27310: LD_INT 85
27312: PUSH
27313: LD_INT 86
27315: PUSH
27316: LD_INT 11
27318: PUSH
27319: LD_INT 9
27321: PUSH
27322: LD_INT 20
27324: PUSH
27325: LD_INT 19
27327: PUSH
27328: LD_INT 21
27330: PUSH
27331: LD_INT 24
27333: PUSH
27334: LD_INT 22
27336: PUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 28
27342: PUSH
27343: LD_INT 29
27345: PUSH
27346: LD_INT 30
27348: PUSH
27349: LD_INT 31
27351: PUSH
27352: LD_INT 37
27354: PUSH
27355: LD_INT 38
27357: PUSH
27358: LD_INT 32
27360: PUSH
27361: LD_INT 27
27363: PUSH
27364: LD_INT 33
27366: PUSH
27367: LD_INT 69
27369: PUSH
27370: LD_INT 39
27372: PUSH
27373: LD_INT 34
27375: PUSH
27376: LD_INT 40
27378: PUSH
27379: LD_INT 71
27381: PUSH
27382: LD_INT 23
27384: PUSH
27385: LD_INT 44
27387: PUSH
27388: LD_INT 48
27390: PUSH
27391: LD_INT 49
27393: PUSH
27394: LD_INT 50
27396: PUSH
27397: LD_INT 51
27399: PUSH
27400: LD_INT 52
27402: PUSH
27403: LD_INT 53
27405: PUSH
27406: LD_INT 54
27408: PUSH
27409: LD_INT 55
27411: PUSH
27412: LD_INT 56
27414: PUSH
27415: LD_INT 57
27417: PUSH
27418: LD_INT 58
27420: PUSH
27421: LD_INT 59
27423: PUSH
27424: LD_INT 63
27426: PUSH
27427: LD_INT 64
27429: PUSH
27430: LD_INT 65
27432: PUSH
27433: LD_INT 82
27435: PUSH
27436: LD_INT 83
27438: PUSH
27439: LD_INT 84
27441: PUSH
27442: LD_INT 85
27444: PUSH
27445: LD_INT 86
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
27503: GO 27506
27505: POP
// if state > - 1 and state < 3 then
27506: LD_VAR 0 3
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: GREATER
27515: PUSH
27516: LD_VAR 0 3
27520: PUSH
27521: LD_INT 3
27523: LESS
27524: AND
27525: IFFALSE 27582
// for i in result do
27527: LD_ADDR_VAR 0 5
27531: PUSH
27532: LD_VAR 0 4
27536: PUSH
27537: FOR_IN
27538: IFFALSE 27580
// if GetTech ( i , side ) <> state then
27540: LD_VAR 0 5
27544: PPUSH
27545: LD_VAR 0 1
27549: PPUSH
27550: CALL_OW 321
27554: PUSH
27555: LD_VAR 0 3
27559: NONEQUAL
27560: IFFALSE 27578
// result := result diff i ;
27562: LD_ADDR_VAR 0 4
27566: PUSH
27567: LD_VAR 0 4
27571: PUSH
27572: LD_VAR 0 5
27576: DIFF
27577: ST_TO_ADDR
27578: GO 27537
27580: POP
27581: POP
// end ;
27582: LD_VAR 0 4
27586: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27587: LD_INT 0
27589: PPUSH
27590: PPUSH
27591: PPUSH
// result := true ;
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 1
27599: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27600: LD_ADDR_VAR 0 5
27604: PUSH
27605: LD_VAR 0 2
27609: PPUSH
27610: CALL_OW 480
27614: ST_TO_ADDR
// if not tmp then
27615: LD_VAR 0 5
27619: NOT
27620: IFFALSE 27624
// exit ;
27622: GO 27673
// for i in tmp do
27624: LD_ADDR_VAR 0 4
27628: PUSH
27629: LD_VAR 0 5
27633: PUSH
27634: FOR_IN
27635: IFFALSE 27671
// if GetTech ( i , side ) <> state_researched then
27637: LD_VAR 0 4
27641: PPUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 321
27651: PUSH
27652: LD_INT 2
27654: NONEQUAL
27655: IFFALSE 27669
// begin result := false ;
27657: LD_ADDR_VAR 0 3
27661: PUSH
27662: LD_INT 0
27664: ST_TO_ADDR
// exit ;
27665: POP
27666: POP
27667: GO 27673
// end ;
27669: GO 27634
27671: POP
27672: POP
// end ;
27673: LD_VAR 0 3
27677: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27693: LD_VAR 0 1
27697: NOT
27698: PUSH
27699: LD_VAR 0 1
27703: PPUSH
27704: CALL_OW 257
27708: PUSH
27709: LD_INT 9
27711: NONEQUAL
27712: OR
27713: IFFALSE 27717
// exit ;
27715: GO 28290
// side := GetSide ( unit ) ;
27717: LD_ADDR_VAR 0 9
27721: PUSH
27722: LD_VAR 0 1
27726: PPUSH
27727: CALL_OW 255
27731: ST_TO_ADDR
// tech_space := tech_spacanom ;
27732: LD_ADDR_VAR 0 12
27736: PUSH
27737: LD_INT 29
27739: ST_TO_ADDR
// tech_time := tech_taurad ;
27740: LD_ADDR_VAR 0 13
27744: PUSH
27745: LD_INT 28
27747: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27748: LD_ADDR_VAR 0 11
27752: PUSH
27753: LD_VAR 0 1
27757: PPUSH
27758: CALL_OW 310
27762: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27763: LD_VAR 0 11
27767: PPUSH
27768: CALL_OW 247
27772: PUSH
27773: LD_INT 2
27775: EQUAL
27776: IFFALSE 27780
// exit ;
27778: GO 28290
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27780: LD_ADDR_VAR 0 8
27784: PUSH
27785: LD_INT 81
27787: PUSH
27788: LD_VAR 0 9
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 21
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: ST_TO_ADDR
// if not tmp then
27823: LD_VAR 0 8
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 28290
// if in_unit then
27832: LD_VAR 0 11
27836: IFFALSE 27860
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27838: LD_ADDR_VAR 0 10
27842: PUSH
27843: LD_VAR 0 8
27847: PPUSH
27848: LD_VAR 0 11
27852: PPUSH
27853: CALL_OW 74
27857: ST_TO_ADDR
27858: GO 27880
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27860: LD_ADDR_VAR 0 10
27864: PUSH
27865: LD_VAR 0 8
27869: PPUSH
27870: LD_VAR 0 1
27874: PPUSH
27875: CALL_OW 74
27879: ST_TO_ADDR
// if not enemy then
27880: LD_VAR 0 10
27884: NOT
27885: IFFALSE 27889
// exit ;
27887: GO 28290
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27889: LD_VAR 0 11
27893: PUSH
27894: LD_VAR 0 11
27898: PPUSH
27899: LD_VAR 0 10
27903: PPUSH
27904: CALL_OW 296
27908: PUSH
27909: LD_INT 13
27911: GREATER
27912: AND
27913: PUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: LD_VAR 0 10
27923: PPUSH
27924: CALL_OW 296
27928: PUSH
27929: LD_INT 12
27931: GREATER
27932: OR
27933: IFFALSE 27937
// exit ;
27935: GO 28290
// missile := [ 1 ] ;
27937: LD_ADDR_VAR 0 14
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27948: LD_VAR 0 9
27952: PPUSH
27953: LD_VAR 0 12
27957: PPUSH
27958: CALL_OW 325
27962: IFFALSE 27991
// missile := Replace ( missile , missile + 1 , 2 ) ;
27964: LD_ADDR_VAR 0 14
27968: PUSH
27969: LD_VAR 0 14
27973: PPUSH
27974: LD_VAR 0 14
27978: PUSH
27979: LD_INT 1
27981: PLUS
27982: PPUSH
27983: LD_INT 2
27985: PPUSH
27986: CALL_OW 1
27990: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27991: LD_VAR 0 9
27995: PPUSH
27996: LD_VAR 0 13
28000: PPUSH
28001: CALL_OW 325
28005: PUSH
28006: LD_VAR 0 10
28010: PPUSH
28011: CALL_OW 255
28015: PPUSH
28016: LD_VAR 0 13
28020: PPUSH
28021: CALL_OW 325
28025: NOT
28026: AND
28027: IFFALSE 28056
// missile := Replace ( missile , missile + 1 , 3 ) ;
28029: LD_ADDR_VAR 0 14
28033: PUSH
28034: LD_VAR 0 14
28038: PPUSH
28039: LD_VAR 0 14
28043: PUSH
28044: LD_INT 1
28046: PLUS
28047: PPUSH
28048: LD_INT 3
28050: PPUSH
28051: CALL_OW 1
28055: ST_TO_ADDR
// if missile < 2 then
28056: LD_VAR 0 14
28060: PUSH
28061: LD_INT 2
28063: LESS
28064: IFFALSE 28068
// exit ;
28066: GO 28290
// x := GetX ( enemy ) ;
28068: LD_ADDR_VAR 0 4
28072: PUSH
28073: LD_VAR 0 10
28077: PPUSH
28078: CALL_OW 250
28082: ST_TO_ADDR
// y := GetY ( enemy ) ;
28083: LD_ADDR_VAR 0 5
28087: PUSH
28088: LD_VAR 0 10
28092: PPUSH
28093: CALL_OW 251
28097: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28098: LD_ADDR_VAR 0 6
28102: PUSH
28103: LD_VAR 0 4
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PPUSH
28112: LD_INT 1
28114: PPUSH
28115: CALL_OW 12
28119: PLUS
28120: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28121: LD_ADDR_VAR 0 7
28125: PUSH
28126: LD_VAR 0 5
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PPUSH
28135: LD_INT 1
28137: PPUSH
28138: CALL_OW 12
28142: PLUS
28143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28144: LD_VAR 0 6
28148: PPUSH
28149: LD_VAR 0 7
28153: PPUSH
28154: CALL_OW 488
28158: NOT
28159: IFFALSE 28181
// begin _x := x ;
28161: LD_ADDR_VAR 0 6
28165: PUSH
28166: LD_VAR 0 4
28170: ST_TO_ADDR
// _y := y ;
28171: LD_ADDR_VAR 0 7
28175: PUSH
28176: LD_VAR 0 5
28180: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_INT 1
28188: PPUSH
28189: LD_VAR 0 14
28193: PPUSH
28194: CALL_OW 12
28198: ST_TO_ADDR
// case i of 1 :
28199: LD_VAR 0 3
28203: PUSH
28204: LD_INT 1
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28212
28210: GO 28229
28212: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28213: LD_VAR 0 1
28217: PPUSH
28218: LD_VAR 0 10
28222: PPUSH
28223: CALL_OW 115
28227: GO 28290
28229: LD_INT 2
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28259
28237: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28238: LD_VAR 0 1
28242: PPUSH
28243: LD_VAR 0 6
28247: PPUSH
28248: LD_VAR 0 7
28252: PPUSH
28253: CALL_OW 153
28257: GO 28290
28259: LD_INT 3
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28289
28267: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28268: LD_VAR 0 1
28272: PPUSH
28273: LD_VAR 0 6
28277: PPUSH
28278: LD_VAR 0 7
28282: PPUSH
28283: CALL_OW 154
28287: GO 28290
28289: POP
// end ;
28290: LD_VAR 0 2
28294: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
// if not unit or not building then
28303: LD_VAR 0 1
28307: NOT
28308: PUSH
28309: LD_VAR 0 2
28313: NOT
28314: OR
28315: IFFALSE 28319
// exit ;
28317: GO 28477
// x := GetX ( building ) ;
28319: LD_ADDR_VAR 0 5
28323: PUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: CALL_OW 250
28333: ST_TO_ADDR
// y := GetY ( building ) ;
28334: LD_ADDR_VAR 0 6
28338: PUSH
28339: LD_VAR 0 2
28343: PPUSH
28344: CALL_OW 251
28348: ST_TO_ADDR
// for i = 0 to 5 do
28349: LD_ADDR_VAR 0 4
28353: PUSH
28354: DOUBLE
28355: LD_INT 0
28357: DEC
28358: ST_TO_ADDR
28359: LD_INT 5
28361: PUSH
28362: FOR_TO
28363: IFFALSE 28475
// begin _x := ShiftX ( x , i , 3 ) ;
28365: LD_ADDR_VAR 0 7
28369: PUSH
28370: LD_VAR 0 5
28374: PPUSH
28375: LD_VAR 0 4
28379: PPUSH
28380: LD_INT 3
28382: PPUSH
28383: CALL_OW 272
28387: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28388: LD_ADDR_VAR 0 8
28392: PUSH
28393: LD_VAR 0 6
28397: PPUSH
28398: LD_VAR 0 4
28402: PPUSH
28403: LD_INT 3
28405: PPUSH
28406: CALL_OW 273
28410: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28411: LD_VAR 0 7
28415: PPUSH
28416: LD_VAR 0 8
28420: PPUSH
28421: CALL_OW 488
28425: NOT
28426: IFFALSE 28430
// continue ;
28428: GO 28362
// if HexInfo ( _x , _y ) = 0 then
28430: LD_VAR 0 7
28434: PPUSH
28435: LD_VAR 0 8
28439: PPUSH
28440: CALL_OW 428
28444: PUSH
28445: LD_INT 0
28447: EQUAL
28448: IFFALSE 28473
// begin ComMoveXY ( unit , _x , _y ) ;
28450: LD_VAR 0 1
28454: PPUSH
28455: LD_VAR 0 7
28459: PPUSH
28460: LD_VAR 0 8
28464: PPUSH
28465: CALL_OW 111
// exit ;
28469: POP
28470: POP
28471: GO 28477
// end ; end ;
28473: GO 28362
28475: POP
28476: POP
// end ;
28477: LD_VAR 0 3
28481: RET
// export function ScanBase ( side , base_area ) ; begin
28482: LD_INT 0
28484: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28485: LD_ADDR_VAR 0 3
28489: PUSH
28490: LD_VAR 0 2
28494: PPUSH
28495: LD_INT 81
28497: PUSH
28498: LD_VAR 0 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 70
28511: ST_TO_ADDR
// end ;
28512: LD_VAR 0 3
28516: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28517: LD_INT 0
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
// result := false ;
28523: LD_ADDR_VAR 0 2
28527: PUSH
28528: LD_INT 0
28530: ST_TO_ADDR
// side := GetSide ( unit ) ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL_OW 255
28545: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28546: LD_ADDR_VAR 0 4
28550: PUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 248
28560: ST_TO_ADDR
// case nat of 1 :
28561: LD_VAR 0 4
28565: PUSH
28566: LD_INT 1
28568: DOUBLE
28569: EQUAL
28570: IFTRUE 28574
28572: GO 28585
28574: POP
// tech := tech_lassight ; 2 :
28575: LD_ADDR_VAR 0 5
28579: PUSH
28580: LD_INT 12
28582: ST_TO_ADDR
28583: GO 28624
28585: LD_INT 2
28587: DOUBLE
28588: EQUAL
28589: IFTRUE 28593
28591: GO 28604
28593: POP
// tech := tech_mortar ; 3 :
28594: LD_ADDR_VAR 0 5
28598: PUSH
28599: LD_INT 41
28601: ST_TO_ADDR
28602: GO 28624
28604: LD_INT 3
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 28623
28612: POP
// tech := tech_bazooka ; end ;
28613: LD_ADDR_VAR 0 5
28617: PUSH
28618: LD_INT 44
28620: ST_TO_ADDR
28621: GO 28624
28623: POP
// if Researched ( side , tech ) then
28624: LD_VAR 0 3
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: CALL_OW 325
28638: IFFALSE 28665
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28640: LD_ADDR_VAR 0 2
28644: PUSH
28645: LD_INT 5
28647: PUSH
28648: LD_INT 8
28650: PUSH
28651: LD_INT 9
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: PUSH
28659: LD_VAR 0 4
28663: ARRAY
28664: ST_TO_ADDR
// end ;
28665: LD_VAR 0 2
28669: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
// if not mines then
28675: LD_VAR 0 2
28679: NOT
28680: IFFALSE 28684
// exit ;
28682: GO 28828
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28684: LD_ADDR_VAR 0 5
28688: PUSH
28689: LD_INT 81
28691: PUSH
28692: LD_VAR 0 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: LD_INT 21
28706: PUSH
28707: LD_INT 3
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// for i in mines do
28727: LD_ADDR_VAR 0 4
28731: PUSH
28732: LD_VAR 0 2
28736: PUSH
28737: FOR_IN
28738: IFFALSE 28826
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28740: LD_VAR 0 4
28744: PUSH
28745: LD_INT 1
28747: ARRAY
28748: PPUSH
28749: LD_VAR 0 4
28753: PUSH
28754: LD_INT 2
28756: ARRAY
28757: PPUSH
28758: CALL_OW 458
28762: NOT
28763: IFFALSE 28767
// continue ;
28765: GO 28737
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28767: LD_VAR 0 4
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 4
28780: PUSH
28781: LD_INT 2
28783: ARRAY
28784: PPUSH
28785: CALL_OW 428
28789: PUSH
28790: LD_VAR 0 5
28794: IN
28795: IFFALSE 28824
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28797: LD_VAR 0 4
28801: PUSH
28802: LD_INT 1
28804: ARRAY
28805: PPUSH
28806: LD_VAR 0 4
28810: PUSH
28811: LD_INT 2
28813: ARRAY
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 456
// end ;
28824: GO 28737
28826: POP
28827: POP
// end ;
28828: LD_VAR 0 3
28832: RET
// export function Count ( array ) ; var i ; begin
28833: LD_INT 0
28835: PPUSH
28836: PPUSH
// result := 0 ;
28837: LD_ADDR_VAR 0 2
28841: PUSH
28842: LD_INT 0
28844: ST_TO_ADDR
// for i in array do
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_VAR 0 1
28854: PUSH
28855: FOR_IN
28856: IFFALSE 28880
// if i then
28858: LD_VAR 0 3
28862: IFFALSE 28878
// result := result + 1 ;
28864: LD_ADDR_VAR 0 2
28868: PUSH
28869: LD_VAR 0 2
28873: PUSH
28874: LD_INT 1
28876: PLUS
28877: ST_TO_ADDR
28878: GO 28855
28880: POP
28881: POP
// end ;
28882: LD_VAR 0 2
28886: RET
// export function IsEmpty ( building ) ; begin
28887: LD_INT 0
28889: PPUSH
// if not building then
28890: LD_VAR 0 1
28894: NOT
28895: IFFALSE 28899
// exit ;
28897: GO 28942
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28899: LD_ADDR_VAR 0 2
28903: PUSH
28904: LD_VAR 0 1
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 255
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 58
28928: PUSH
28929: EMPTY
28930: LIST
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PPUSH
28936: CALL_OW 69
28940: IN
28941: ST_TO_ADDR
// end ;
28942: LD_VAR 0 2
28946: RET
// export function IsNotFull ( building ) ; var places ; begin
28947: LD_INT 0
28949: PPUSH
28950: PPUSH
// if not building then
28951: LD_VAR 0 1
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 29131
// result := false ;
28960: LD_ADDR_VAR 0 2
28964: PUSH
28965: LD_INT 0
28967: ST_TO_ADDR
// places := 0 ;
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 0
28975: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28976: LD_VAR 0 1
28980: PPUSH
28981: CALL_OW 266
28985: PUSH
28986: LD_INT 0
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 29048
28992: LD_INT 1
28994: DOUBLE
28995: EQUAL
28996: IFTRUE 29048
28998: LD_INT 6
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29048
29004: LD_INT 7
29006: DOUBLE
29007: EQUAL
29008: IFTRUE 29048
29010: LD_INT 8
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29048
29016: LD_INT 4
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29048
29022: LD_INT 5
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29048
29028: LD_INT 2
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29048
29034: LD_INT 3
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29048
29040: LD_INT 35
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29059
29048: POP
// places := 6 ; b_bunker , b_breastwork :
29049: LD_ADDR_VAR 0 3
29053: PUSH
29054: LD_INT 6
29056: ST_TO_ADDR
29057: GO 29104
29059: LD_INT 32
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29073
29065: LD_INT 31
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29084
29073: POP
// places := 1 ; b_control_tower :
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_INT 1
29081: ST_TO_ADDR
29082: GO 29104
29084: LD_INT 36
29086: DOUBLE
29087: EQUAL
29088: IFTRUE 29092
29090: GO 29103
29092: POP
// places := 3 ; end ;
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: LD_INT 3
29100: ST_TO_ADDR
29101: GO 29104
29103: POP
// if places then
29104: LD_VAR 0 3
29108: IFFALSE 29131
// result := UnitsInside ( building ) < places ;
29110: LD_ADDR_VAR 0 2
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: CALL_OW 313
29124: PUSH
29125: LD_VAR 0 3
29129: LESS
29130: ST_TO_ADDR
// end ;
29131: LD_VAR 0 2
29135: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29136: LD_INT 0
29138: PPUSH
29139: PPUSH
29140: PPUSH
29141: PPUSH
// tmp := [ ] ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: EMPTY
29148: ST_TO_ADDR
// list := [ ] ;
29149: LD_ADDR_VAR 0 5
29153: PUSH
29154: EMPTY
29155: ST_TO_ADDR
// for i = 16 to 25 do
29156: LD_ADDR_VAR 0 4
29160: PUSH
29161: DOUBLE
29162: LD_INT 16
29164: DEC
29165: ST_TO_ADDR
29166: LD_INT 25
29168: PUSH
29169: FOR_TO
29170: IFFALSE 29243
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29172: LD_ADDR_VAR 0 3
29176: PUSH
29177: LD_VAR 0 3
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_VAR 0 1
29189: PPUSH
29190: CALL_OW 255
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 91
29201: PUSH
29202: LD_VAR 0 1
29206: PUSH
29207: LD_INT 6
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 30
29217: PUSH
29218: LD_VAR 0 4
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: PPUSH
29235: CALL_OW 69
29239: ADD
29240: ST_TO_ADDR
29241: GO 29169
29243: POP
29244: POP
// for i = 1 to tmp do
29245: LD_ADDR_VAR 0 4
29249: PUSH
29250: DOUBLE
29251: LD_INT 1
29253: DEC
29254: ST_TO_ADDR
29255: LD_VAR 0 3
29259: PUSH
29260: FOR_TO
29261: IFFALSE 29349
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29263: LD_ADDR_VAR 0 5
29267: PUSH
29268: LD_VAR 0 5
29272: PUSH
29273: LD_VAR 0 3
29277: PUSH
29278: LD_VAR 0 4
29282: ARRAY
29283: PPUSH
29284: CALL_OW 266
29288: PUSH
29289: LD_VAR 0 3
29293: PUSH
29294: LD_VAR 0 4
29298: ARRAY
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 3
29309: PUSH
29310: LD_VAR 0 4
29314: ARRAY
29315: PPUSH
29316: CALL_OW 251
29320: PUSH
29321: LD_VAR 0 3
29325: PUSH
29326: LD_VAR 0 4
29330: ARRAY
29331: PPUSH
29332: CALL_OW 254
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: ADD
29346: ST_TO_ADDR
29347: GO 29260
29349: POP
29350: POP
// result := list ;
29351: LD_ADDR_VAR 0 2
29355: PUSH
29356: LD_VAR 0 5
29360: ST_TO_ADDR
// end ;
29361: LD_VAR 0 2
29365: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
// if not factory then
29375: LD_VAR 0 1
29379: NOT
29380: IFFALSE 29384
// exit ;
29382: GO 29977
// if control = control_apeman then
29384: LD_VAR 0 4
29388: PUSH
29389: LD_INT 5
29391: EQUAL
29392: IFFALSE 29501
// begin tmp := UnitsInside ( factory ) ;
29394: LD_ADDR_VAR 0 8
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 313
29408: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29409: LD_VAR 0 8
29413: PPUSH
29414: LD_INT 25
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PPUSH
29424: CALL_OW 72
29428: NOT
29429: IFFALSE 29439
// control := control_manual ;
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: LD_INT 1
29438: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29439: LD_ADDR_VAR 0 8
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL 29136 0 1
29453: ST_TO_ADDR
// if tmp then
29454: LD_VAR 0 8
29458: IFFALSE 29501
// begin for i in tmp do
29460: LD_ADDR_VAR 0 7
29464: PUSH
29465: LD_VAR 0 8
29469: PUSH
29470: FOR_IN
29471: IFFALSE 29499
// if i [ 1 ] = b_ext_radio then
29473: LD_VAR 0 7
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: PUSH
29482: LD_INT 22
29484: EQUAL
29485: IFFALSE 29497
// begin control := control_remote ;
29487: LD_ADDR_VAR 0 4
29491: PUSH
29492: LD_INT 2
29494: ST_TO_ADDR
// break ;
29495: GO 29499
// end ;
29497: GO 29470
29499: POP
29500: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29501: LD_VAR 0 1
29505: PPUSH
29506: LD_VAR 0 2
29510: PPUSH
29511: LD_VAR 0 3
29515: PPUSH
29516: LD_VAR 0 4
29520: PPUSH
29521: LD_VAR 0 5
29525: PPUSH
29526: CALL_OW 448
29530: IFFALSE 29565
// begin result := [ chassis , engine , control , weapon ] ;
29532: LD_ADDR_VAR 0 6
29536: PUSH
29537: LD_VAR 0 2
29541: PUSH
29542: LD_VAR 0 3
29546: PUSH
29547: LD_VAR 0 4
29551: PUSH
29552: LD_VAR 0 5
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// exit ;
29563: GO 29977
// end ; _chassis := AvailableChassisList ( factory ) ;
29565: LD_ADDR_VAR 0 9
29569: PUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 475
29579: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29580: LD_ADDR_VAR 0 11
29584: PUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: CALL_OW 476
29594: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29595: LD_ADDR_VAR 0 12
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 477
29609: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29610: LD_ADDR_VAR 0 10
29614: PUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 478
29624: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29625: LD_VAR 0 9
29629: NOT
29630: PUSH
29631: LD_VAR 0 11
29635: NOT
29636: OR
29637: PUSH
29638: LD_VAR 0 12
29642: NOT
29643: OR
29644: PUSH
29645: LD_VAR 0 10
29649: NOT
29650: OR
29651: IFFALSE 29686
// begin result := [ chassis , engine , control , weapon ] ;
29653: LD_ADDR_VAR 0 6
29657: PUSH
29658: LD_VAR 0 2
29662: PUSH
29663: LD_VAR 0 3
29667: PUSH
29668: LD_VAR 0 4
29672: PUSH
29673: LD_VAR 0 5
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: ST_TO_ADDR
// exit ;
29684: GO 29977
// end ; if not chassis in _chassis then
29686: LD_VAR 0 2
29690: PUSH
29691: LD_VAR 0 9
29695: IN
29696: NOT
29697: IFFALSE 29723
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29699: LD_ADDR_VAR 0 2
29703: PUSH
29704: LD_VAR 0 9
29708: PUSH
29709: LD_INT 1
29711: PPUSH
29712: LD_VAR 0 9
29716: PPUSH
29717: CALL_OW 12
29721: ARRAY
29722: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29723: LD_VAR 0 2
29727: PPUSH
29728: LD_VAR 0 3
29732: PPUSH
29733: CALL 29982 0 2
29737: NOT
29738: IFFALSE 29797
// repeat engine := _engine [ 1 ] ;
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_VAR 0 11
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29754: LD_ADDR_VAR 0 11
29758: PUSH
29759: LD_VAR 0 11
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: CALL_OW 3
29771: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: CALL 29982 0 2
29786: PUSH
29787: LD_VAR 0 11
29791: PUSH
29792: EMPTY
29793: EQUAL
29794: OR
29795: IFFALSE 29740
// if not control in _control then
29797: LD_VAR 0 4
29801: PUSH
29802: LD_VAR 0 12
29806: IN
29807: NOT
29808: IFFALSE 29834
// control := _control [ rand ( 1 , _control ) ] ;
29810: LD_ADDR_VAR 0 4
29814: PUSH
29815: LD_VAR 0 12
29819: PUSH
29820: LD_INT 1
29822: PPUSH
29823: LD_VAR 0 12
29827: PPUSH
29828: CALL_OW 12
29832: ARRAY
29833: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29834: LD_VAR 0 2
29838: PPUSH
29839: LD_VAR 0 5
29843: PPUSH
29844: CALL 30202 0 2
29848: NOT
29849: IFFALSE 29908
// repeat weapon := _weapon [ 1 ] ;
29851: LD_ADDR_VAR 0 5
29855: PUSH
29856: LD_VAR 0 10
29860: PUSH
29861: LD_INT 1
29863: ARRAY
29864: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29865: LD_ADDR_VAR 0 10
29869: PUSH
29870: LD_VAR 0 10
29874: PPUSH
29875: LD_INT 1
29877: PPUSH
29878: CALL_OW 3
29882: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29883: LD_VAR 0 2
29887: PPUSH
29888: LD_VAR 0 5
29892: PPUSH
29893: CALL 30202 0 2
29897: PUSH
29898: LD_VAR 0 10
29902: PUSH
29903: EMPTY
29904: EQUAL
29905: OR
29906: IFFALSE 29851
// result := [ ] ;
29908: LD_ADDR_VAR 0 6
29912: PUSH
29913: EMPTY
29914: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29915: LD_VAR 0 1
29919: PPUSH
29920: LD_VAR 0 2
29924: PPUSH
29925: LD_VAR 0 3
29929: PPUSH
29930: LD_VAR 0 4
29934: PPUSH
29935: LD_VAR 0 5
29939: PPUSH
29940: CALL_OW 448
29944: IFFALSE 29977
// result := [ chassis , engine , control , weapon ] ;
29946: LD_ADDR_VAR 0 6
29950: PUSH
29951: LD_VAR 0 2
29955: PUSH
29956: LD_VAR 0 3
29960: PUSH
29961: LD_VAR 0 4
29965: PUSH
29966: LD_VAR 0 5
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: ST_TO_ADDR
// end ;
29977: LD_VAR 0 6
29981: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29982: LD_INT 0
29984: PPUSH
// if not chassis or not engine then
29985: LD_VAR 0 1
29989: NOT
29990: PUSH
29991: LD_VAR 0 2
29995: NOT
29996: OR
29997: IFFALSE 30001
// exit ;
29999: GO 30197
// case engine of engine_solar :
30001: LD_VAR 0 2
30005: PUSH
30006: LD_INT 2
30008: DOUBLE
30009: EQUAL
30010: IFTRUE 30014
30012: GO 30052
30014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_INT 11
30022: PUSH
30023: LD_INT 12
30025: PUSH
30026: LD_INT 13
30028: PUSH
30029: LD_INT 14
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 3
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: ST_TO_ADDR
30050: GO 30181
30052: LD_INT 1
30054: DOUBLE
30055: EQUAL
30056: IFTRUE 30060
30058: GO 30122
30060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_INT 11
30068: PUSH
30069: LD_INT 12
30071: PUSH
30072: LD_INT 13
30074: PUSH
30075: LD_INT 14
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 4
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: LD_INT 21
30095: PUSH
30096: LD_INT 23
30098: PUSH
30099: LD_INT 22
30101: PUSH
30102: LD_INT 24
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
30120: GO 30181
30122: LD_INT 3
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30180
30130: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_INT 13
30138: PUSH
30139: LD_INT 14
30141: PUSH
30142: LD_INT 2
30144: PUSH
30145: LD_INT 3
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: LD_INT 21
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_INT 23
30162: PUSH
30163: LD_INT 24
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
30178: GO 30181
30180: POP
// result := ( chassis in result ) ;
30181: LD_ADDR_VAR 0 3
30185: PUSH
30186: LD_VAR 0 1
30190: PUSH
30191: LD_VAR 0 3
30195: IN
30196: ST_TO_ADDR
// end ;
30197: LD_VAR 0 3
30201: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30202: LD_INT 0
30204: PPUSH
// if not chassis or not weapon then
30205: LD_VAR 0 1
30209: NOT
30210: PUSH
30211: LD_VAR 0 2
30215: NOT
30216: OR
30217: IFFALSE 30221
// exit ;
30219: GO 31281
// case weapon of us_machine_gun :
30221: LD_VAR 0 2
30225: PUSH
30226: LD_INT 2
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30264
30234: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 4
30251: PUSH
30252: LD_INT 5
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
30262: GO 31265
30264: LD_INT 3
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30302
30272: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
30300: GO 31265
30302: LD_INT 11
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30340
30310: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30311: LD_ADDR_VAR 0 3
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 4
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
30338: GO 31265
30340: LD_INT 4
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30374
30348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 4
30362: PUSH
30363: LD_INT 5
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: ST_TO_ADDR
30372: GO 31265
30374: LD_INT 5
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30408
30382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30383: LD_ADDR_VAR 0 3
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 4
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
30406: GO 31265
30408: LD_INT 9
30410: DOUBLE
30411: EQUAL
30412: IFTRUE 30416
30414: GO 30442
30416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: LD_INT 4
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
30440: GO 31265
30442: LD_INT 7
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30450
30448: GO 30476
30450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: LD_INT 4
30464: PUSH
30465: LD_INT 5
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
30474: GO 31265
30476: LD_INT 12
30478: DOUBLE
30479: EQUAL
30480: IFTRUE 30484
30482: GO 30510
30484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30485: LD_ADDR_VAR 0 3
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: LD_INT 4
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
30508: GO 31265
30510: LD_INT 13
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30544
30518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
30542: GO 31265
30544: LD_INT 14
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30570
30552: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 4
30560: PUSH
30561: LD_INT 5
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: ST_TO_ADDR
30568: GO 31265
30570: LD_INT 6
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30596
30578: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_INT 4
30586: PUSH
30587: LD_INT 5
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: ST_TO_ADDR
30594: GO 31265
30596: LD_INT 10
30598: DOUBLE
30599: EQUAL
30600: IFTRUE 30604
30602: GO 30622
30604: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30605: LD_ADDR_VAR 0 3
30609: PUSH
30610: LD_INT 4
30612: PUSH
30613: LD_INT 5
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 31265
30622: LD_INT 22
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30656
30630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 11
30638: PUSH
30639: LD_INT 12
30641: PUSH
30642: LD_INT 13
30644: PUSH
30645: LD_INT 14
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
30654: GO 31265
30656: LD_INT 23
30658: DOUBLE
30659: EQUAL
30660: IFTRUE 30664
30662: GO 30690
30664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 11
30672: PUSH
30673: LD_INT 12
30675: PUSH
30676: LD_INT 13
30678: PUSH
30679: LD_INT 14
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: ST_TO_ADDR
30688: GO 31265
30690: LD_INT 24
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30724
30698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 11
30706: PUSH
30707: LD_INT 12
30709: PUSH
30710: LD_INT 13
30712: PUSH
30713: LD_INT 14
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
30722: GO 31265
30724: LD_INT 30
30726: DOUBLE
30727: EQUAL
30728: IFTRUE 30732
30730: GO 30758
30732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30733: LD_ADDR_VAR 0 3
30737: PUSH
30738: LD_INT 11
30740: PUSH
30741: LD_INT 12
30743: PUSH
30744: LD_INT 13
30746: PUSH
30747: LD_INT 14
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: ST_TO_ADDR
30756: GO 31265
30758: LD_INT 25
30760: DOUBLE
30761: EQUAL
30762: IFTRUE 30766
30764: GO 30784
30766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30767: LD_ADDR_VAR 0 3
30771: PUSH
30772: LD_INT 13
30774: PUSH
30775: LD_INT 14
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: ST_TO_ADDR
30782: GO 31265
30784: LD_INT 27
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30810
30792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30793: LD_ADDR_VAR 0 3
30797: PUSH
30798: LD_INT 13
30800: PUSH
30801: LD_INT 14
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: ST_TO_ADDR
30808: GO 31265
30810: LD_INT 92
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30844
30818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_INT 11
30826: PUSH
30827: LD_INT 12
30829: PUSH
30830: LD_INT 13
30832: PUSH
30833: LD_INT 14
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: ST_TO_ADDR
30842: GO 31265
30844: LD_INT 28
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30870
30852: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30853: LD_ADDR_VAR 0 3
30857: PUSH
30858: LD_INT 13
30860: PUSH
30861: LD_INT 14
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: ST_TO_ADDR
30868: GO 31265
30870: LD_INT 29
30872: DOUBLE
30873: EQUAL
30874: IFTRUE 30878
30876: GO 30896
30878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30879: LD_ADDR_VAR 0 3
30883: PUSH
30884: LD_INT 13
30886: PUSH
30887: LD_INT 14
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: ST_TO_ADDR
30894: GO 31265
30896: LD_INT 31
30898: DOUBLE
30899: EQUAL
30900: IFTRUE 30904
30902: GO 30922
30904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30905: LD_ADDR_VAR 0 3
30909: PUSH
30910: LD_INT 13
30912: PUSH
30913: LD_INT 14
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: ST_TO_ADDR
30920: GO 31265
30922: LD_INT 26
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30948
30930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_INT 13
30938: PUSH
30939: LD_INT 14
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: ST_TO_ADDR
30946: GO 31265
30948: LD_INT 42
30950: DOUBLE
30951: EQUAL
30952: IFTRUE 30956
30954: GO 30982
30956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30957: LD_ADDR_VAR 0 3
30961: PUSH
30962: LD_INT 21
30964: PUSH
30965: LD_INT 22
30967: PUSH
30968: LD_INT 23
30970: PUSH
30971: LD_INT 24
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: ST_TO_ADDR
30980: GO 31265
30982: LD_INT 43
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31016
30990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_INT 21
30998: PUSH
30999: LD_INT 22
31001: PUSH
31002: LD_INT 23
31004: PUSH
31005: LD_INT 24
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: ST_TO_ADDR
31014: GO 31265
31016: LD_INT 44
31018: DOUBLE
31019: EQUAL
31020: IFTRUE 31024
31022: GO 31050
31024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_INT 21
31032: PUSH
31033: LD_INT 22
31035: PUSH
31036: LD_INT 23
31038: PUSH
31039: LD_INT 24
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: ST_TO_ADDR
31048: GO 31265
31050: LD_INT 45
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31084
31058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 21
31066: PUSH
31067: LD_INT 22
31069: PUSH
31070: LD_INT 23
31072: PUSH
31073: LD_INT 24
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: ST_TO_ADDR
31082: GO 31265
31084: LD_INT 49
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31118
31092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: LD_INT 21
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_INT 23
31106: PUSH
31107: LD_INT 24
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
31116: GO 31265
31118: LD_INT 51
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31152
31126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 21
31134: PUSH
31135: LD_INT 22
31137: PUSH
31138: LD_INT 23
31140: PUSH
31141: LD_INT 24
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
31150: GO 31265
31152: LD_INT 52
31154: DOUBLE
31155: EQUAL
31156: IFTRUE 31160
31158: GO 31186
31160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_INT 21
31168: PUSH
31169: LD_INT 22
31171: PUSH
31172: LD_INT 23
31174: PUSH
31175: LD_INT 24
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
31184: GO 31265
31186: LD_INT 53
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31212
31194: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31195: LD_ADDR_VAR 0 3
31199: PUSH
31200: LD_INT 23
31202: PUSH
31203: LD_INT 24
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: ST_TO_ADDR
31210: GO 31265
31212: LD_INT 46
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31238
31220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_INT 23
31228: PUSH
31229: LD_INT 24
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: ST_TO_ADDR
31236: GO 31265
31238: LD_INT 47
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31264
31246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_INT 23
31254: PUSH
31255: LD_INT 24
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 31265
31264: POP
// result := ( chassis in result ) ;
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: LD_VAR 0 1
31274: PUSH
31275: LD_VAR 0 3
31279: IN
31280: ST_TO_ADDR
// end ;
31281: LD_VAR 0 3
31285: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31286: LD_INT 0
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
// result := array ;
31295: LD_ADDR_VAR 0 5
31299: PUSH
31300: LD_VAR 0 1
31304: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31305: LD_VAR 0 1
31309: NOT
31310: PUSH
31311: LD_VAR 0 2
31315: NOT
31316: OR
31317: PUSH
31318: LD_VAR 0 3
31322: NOT
31323: OR
31324: PUSH
31325: LD_VAR 0 2
31329: PUSH
31330: LD_VAR 0 1
31334: GREATER
31335: OR
31336: PUSH
31337: LD_VAR 0 3
31341: PUSH
31342: LD_VAR 0 1
31346: GREATER
31347: OR
31348: IFFALSE 31352
// exit ;
31350: GO 31648
// if direction then
31352: LD_VAR 0 4
31356: IFFALSE 31420
// begin d := 1 ;
31358: LD_ADDR_VAR 0 9
31362: PUSH
31363: LD_INT 1
31365: ST_TO_ADDR
// if i_from > i_to then
31366: LD_VAR 0 2
31370: PUSH
31371: LD_VAR 0 3
31375: GREATER
31376: IFFALSE 31402
// length := ( array - i_from ) + i_to else
31378: LD_ADDR_VAR 0 11
31382: PUSH
31383: LD_VAR 0 1
31387: PUSH
31388: LD_VAR 0 2
31392: MINUS
31393: PUSH
31394: LD_VAR 0 3
31398: PLUS
31399: ST_TO_ADDR
31400: GO 31418
// length := i_to - i_from ;
31402: LD_ADDR_VAR 0 11
31406: PUSH
31407: LD_VAR 0 3
31411: PUSH
31412: LD_VAR 0 2
31416: MINUS
31417: ST_TO_ADDR
// end else
31418: GO 31481
// begin d := - 1 ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: ST_TO_ADDR
// if i_from > i_to then
31429: LD_VAR 0 2
31433: PUSH
31434: LD_VAR 0 3
31438: GREATER
31439: IFFALSE 31459
// length := i_from - i_to else
31441: LD_ADDR_VAR 0 11
31445: PUSH
31446: LD_VAR 0 2
31450: PUSH
31451: LD_VAR 0 3
31455: MINUS
31456: ST_TO_ADDR
31457: GO 31481
// length := ( array - i_to ) + i_from ;
31459: LD_ADDR_VAR 0 11
31463: PUSH
31464: LD_VAR 0 1
31468: PUSH
31469: LD_VAR 0 3
31473: MINUS
31474: PUSH
31475: LD_VAR 0 2
31479: PLUS
31480: ST_TO_ADDR
// end ; if not length then
31481: LD_VAR 0 11
31485: NOT
31486: IFFALSE 31490
// exit ;
31488: GO 31648
// tmp := array ;
31490: LD_ADDR_VAR 0 10
31494: PUSH
31495: LD_VAR 0 1
31499: ST_TO_ADDR
// for i = 1 to length do
31500: LD_ADDR_VAR 0 6
31504: PUSH
31505: DOUBLE
31506: LD_INT 1
31508: DEC
31509: ST_TO_ADDR
31510: LD_VAR 0 11
31514: PUSH
31515: FOR_TO
31516: IFFALSE 31636
// begin for j = 1 to array do
31518: LD_ADDR_VAR 0 7
31522: PUSH
31523: DOUBLE
31524: LD_INT 1
31526: DEC
31527: ST_TO_ADDR
31528: LD_VAR 0 1
31532: PUSH
31533: FOR_TO
31534: IFFALSE 31622
// begin k := j + d ;
31536: LD_ADDR_VAR 0 8
31540: PUSH
31541: LD_VAR 0 7
31545: PUSH
31546: LD_VAR 0 9
31550: PLUS
31551: ST_TO_ADDR
// if k > array then
31552: LD_VAR 0 8
31556: PUSH
31557: LD_VAR 0 1
31561: GREATER
31562: IFFALSE 31572
// k := 1 ;
31564: LD_ADDR_VAR 0 8
31568: PUSH
31569: LD_INT 1
31571: ST_TO_ADDR
// if not k then
31572: LD_VAR 0 8
31576: NOT
31577: IFFALSE 31589
// k := array ;
31579: LD_ADDR_VAR 0 8
31583: PUSH
31584: LD_VAR 0 1
31588: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31589: LD_ADDR_VAR 0 10
31593: PUSH
31594: LD_VAR 0 10
31598: PPUSH
31599: LD_VAR 0 8
31603: PPUSH
31604: LD_VAR 0 1
31608: PUSH
31609: LD_VAR 0 7
31613: ARRAY
31614: PPUSH
31615: CALL_OW 1
31619: ST_TO_ADDR
// end ;
31620: GO 31533
31622: POP
31623: POP
// array := tmp ;
31624: LD_ADDR_VAR 0 1
31628: PUSH
31629: LD_VAR 0 10
31633: ST_TO_ADDR
// end ;
31634: GO 31515
31636: POP
31637: POP
// result := array ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_VAR 0 1
31647: ST_TO_ADDR
// end ;
31648: LD_VAR 0 5
31652: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31653: LD_INT 0
31655: PPUSH
31656: PPUSH
// result := 0 ;
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_INT 0
31664: ST_TO_ADDR
// if not array or not value in array then
31665: LD_VAR 0 1
31669: NOT
31670: PUSH
31671: LD_VAR 0 2
31675: PUSH
31676: LD_VAR 0 1
31680: IN
31681: NOT
31682: OR
31683: IFFALSE 31687
// exit ;
31685: GO 31741
// for i = 1 to array do
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: DOUBLE
31693: LD_INT 1
31695: DEC
31696: ST_TO_ADDR
31697: LD_VAR 0 1
31701: PUSH
31702: FOR_TO
31703: IFFALSE 31739
// if value = array [ i ] then
31705: LD_VAR 0 2
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: LD_VAR 0 4
31719: ARRAY
31720: EQUAL
31721: IFFALSE 31737
// begin result := i ;
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_VAR 0 4
31732: ST_TO_ADDR
// exit ;
31733: POP
31734: POP
31735: GO 31741
// end ;
31737: GO 31702
31739: POP
31740: POP
// end ;
31741: LD_VAR 0 3
31745: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31746: LD_INT 0
31748: PPUSH
// vc_chassis := chassis ;
31749: LD_ADDR_OWVAR 37
31753: PUSH
31754: LD_VAR 0 1
31758: ST_TO_ADDR
// vc_engine := engine ;
31759: LD_ADDR_OWVAR 39
31763: PUSH
31764: LD_VAR 0 2
31768: ST_TO_ADDR
// vc_control := control ;
31769: LD_ADDR_OWVAR 38
31773: PUSH
31774: LD_VAR 0 3
31778: ST_TO_ADDR
// vc_weapon := weapon ;
31779: LD_ADDR_OWVAR 40
31783: PUSH
31784: LD_VAR 0 4
31788: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31789: LD_ADDR_OWVAR 41
31793: PUSH
31794: LD_VAR 0 5
31798: ST_TO_ADDR
// end ;
31799: LD_VAR 0 6
31803: RET
// export function WantPlant ( unit ) ; var task ; begin
31804: LD_INT 0
31806: PPUSH
31807: PPUSH
// result := false ;
31808: LD_ADDR_VAR 0 2
31812: PUSH
31813: LD_INT 0
31815: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_VAR 0 1
31825: PPUSH
31826: CALL_OW 437
31830: ST_TO_ADDR
// if task then
31831: LD_VAR 0 3
31835: IFFALSE 31863
// if task [ 1 ] [ 1 ] = p then
31837: LD_VAR 0 3
31841: PUSH
31842: LD_INT 1
31844: ARRAY
31845: PUSH
31846: LD_INT 1
31848: ARRAY
31849: PUSH
31850: LD_STRING p
31852: EQUAL
31853: IFFALSE 31863
// result := true ;
31855: LD_ADDR_VAR 0 2
31859: PUSH
31860: LD_INT 1
31862: ST_TO_ADDR
// end ;
31863: LD_VAR 0 2
31867: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
// if pos < 1 then
31874: LD_VAR 0 2
31878: PUSH
31879: LD_INT 1
31881: LESS
31882: IFFALSE 31886
// exit ;
31884: GO 32189
// if pos = 1 then
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 1
31893: EQUAL
31894: IFFALSE 31927
// result := Replace ( arr , pos [ 1 ] , value ) else
31896: LD_ADDR_VAR 0 4
31900: PUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_VAR 0 2
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: LD_VAR 0 3
31919: PPUSH
31920: CALL_OW 1
31924: ST_TO_ADDR
31925: GO 32189
// begin tmp := arr ;
31927: LD_ADDR_VAR 0 6
31931: PUSH
31932: LD_VAR 0 1
31936: ST_TO_ADDR
// s_arr := [ tmp ] ;
31937: LD_ADDR_VAR 0 7
31941: PUSH
31942: LD_VAR 0 6
31946: PUSH
31947: EMPTY
31948: LIST
31949: ST_TO_ADDR
// for i = 1 to pos - 1 do
31950: LD_ADDR_VAR 0 5
31954: PUSH
31955: DOUBLE
31956: LD_INT 1
31958: DEC
31959: ST_TO_ADDR
31960: LD_VAR 0 2
31964: PUSH
31965: LD_INT 1
31967: MINUS
31968: PUSH
31969: FOR_TO
31970: IFFALSE 32015
// begin tmp := tmp [ pos [ i ] ] ;
31972: LD_ADDR_VAR 0 6
31976: PUSH
31977: LD_VAR 0 6
31981: PUSH
31982: LD_VAR 0 2
31986: PUSH
31987: LD_VAR 0 5
31991: ARRAY
31992: ARRAY
31993: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31994: LD_ADDR_VAR 0 7
31998: PUSH
31999: LD_VAR 0 7
32003: PUSH
32004: LD_VAR 0 6
32008: PUSH
32009: EMPTY
32010: LIST
32011: ADD
32012: ST_TO_ADDR
// end ;
32013: GO 31969
32015: POP
32016: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32017: LD_ADDR_VAR 0 6
32021: PUSH
32022: LD_VAR 0 6
32026: PPUSH
32027: LD_VAR 0 2
32031: PUSH
32032: LD_VAR 0 2
32036: ARRAY
32037: PPUSH
32038: LD_VAR 0 3
32042: PPUSH
32043: CALL_OW 1
32047: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32048: LD_ADDR_VAR 0 7
32052: PUSH
32053: LD_VAR 0 7
32057: PPUSH
32058: LD_VAR 0 7
32062: PPUSH
32063: LD_VAR 0 6
32067: PPUSH
32068: CALL_OW 1
32072: ST_TO_ADDR
// for i = s_arr downto 2 do
32073: LD_ADDR_VAR 0 5
32077: PUSH
32078: DOUBLE
32079: LD_VAR 0 7
32083: INC
32084: ST_TO_ADDR
32085: LD_INT 2
32087: PUSH
32088: FOR_DOWNTO
32089: IFFALSE 32173
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32091: LD_ADDR_VAR 0 6
32095: PUSH
32096: LD_VAR 0 7
32100: PUSH
32101: LD_VAR 0 5
32105: PUSH
32106: LD_INT 1
32108: MINUS
32109: ARRAY
32110: PPUSH
32111: LD_VAR 0 2
32115: PUSH
32116: LD_VAR 0 5
32120: PUSH
32121: LD_INT 1
32123: MINUS
32124: ARRAY
32125: PPUSH
32126: LD_VAR 0 7
32130: PUSH
32131: LD_VAR 0 5
32135: ARRAY
32136: PPUSH
32137: CALL_OW 1
32141: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32142: LD_ADDR_VAR 0 7
32146: PUSH
32147: LD_VAR 0 7
32151: PPUSH
32152: LD_VAR 0 5
32156: PUSH
32157: LD_INT 1
32159: MINUS
32160: PPUSH
32161: LD_VAR 0 6
32165: PPUSH
32166: CALL_OW 1
32170: ST_TO_ADDR
// end ;
32171: GO 32088
32173: POP
32174: POP
// result := s_arr [ 1 ] ;
32175: LD_ADDR_VAR 0 4
32179: PUSH
32180: LD_VAR 0 7
32184: PUSH
32185: LD_INT 1
32187: ARRAY
32188: ST_TO_ADDR
// end ; end ;
32189: LD_VAR 0 4
32193: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32194: LD_INT 0
32196: PPUSH
32197: PPUSH
// if not list then
32198: LD_VAR 0 1
32202: NOT
32203: IFFALSE 32207
// exit ;
32205: GO 32298
// i := list [ pos1 ] ;
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: LD_VAR 0 1
32216: PUSH
32217: LD_VAR 0 2
32221: ARRAY
32222: ST_TO_ADDR
// if not i then
32223: LD_VAR 0 5
32227: NOT
32228: IFFALSE 32232
// exit ;
32230: GO 32298
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32232: LD_ADDR_VAR 0 1
32236: PUSH
32237: LD_VAR 0 1
32241: PPUSH
32242: LD_VAR 0 2
32246: PPUSH
32247: LD_VAR 0 1
32251: PUSH
32252: LD_VAR 0 3
32256: ARRAY
32257: PPUSH
32258: CALL_OW 1
32262: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32263: LD_ADDR_VAR 0 1
32267: PUSH
32268: LD_VAR 0 1
32272: PPUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: LD_VAR 0 5
32282: PPUSH
32283: CALL_OW 1
32287: ST_TO_ADDR
// result := list ;
32288: LD_ADDR_VAR 0 4
32292: PUSH
32293: LD_VAR 0 1
32297: ST_TO_ADDR
// end ;
32298: LD_VAR 0 4
32302: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32303: LD_INT 0
32305: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32306: LD_ADDR_VAR 0 5
32310: PUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 250
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL_OW 251
32330: PPUSH
32331: LD_VAR 0 2
32335: PPUSH
32336: LD_VAR 0 3
32340: PPUSH
32341: LD_VAR 0 4
32345: PPUSH
32346: CALL 32356 0 5
32350: ST_TO_ADDR
// end ;
32351: LD_VAR 0 5
32355: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32356: LD_INT 0
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
// if not list then
32362: LD_VAR 0 3
32366: NOT
32367: IFFALSE 32371
// exit ;
32369: GO 32759
// result := [ ] ;
32371: LD_ADDR_VAR 0 6
32375: PUSH
32376: EMPTY
32377: ST_TO_ADDR
// for i in list do
32378: LD_ADDR_VAR 0 7
32382: PUSH
32383: LD_VAR 0 3
32387: PUSH
32388: FOR_IN
32389: IFFALSE 32591
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32391: LD_ADDR_VAR 0 9
32395: PUSH
32396: LD_VAR 0 7
32400: PPUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: LD_VAR 0 2
32410: PPUSH
32411: CALL_OW 297
32415: ST_TO_ADDR
// if not result then
32416: LD_VAR 0 6
32420: NOT
32421: IFFALSE 32447
// result := [ [ i , tmp ] ] else
32423: LD_ADDR_VAR 0 6
32427: PUSH
32428: LD_VAR 0 7
32432: PUSH
32433: LD_VAR 0 9
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: ST_TO_ADDR
32445: GO 32589
// begin if result [ result ] [ 2 ] < tmp then
32447: LD_VAR 0 6
32451: PUSH
32452: LD_VAR 0 6
32456: ARRAY
32457: PUSH
32458: LD_INT 2
32460: ARRAY
32461: PUSH
32462: LD_VAR 0 9
32466: LESS
32467: IFFALSE 32509
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32469: LD_ADDR_VAR 0 6
32473: PUSH
32474: LD_VAR 0 6
32478: PPUSH
32479: LD_VAR 0 6
32483: PUSH
32484: LD_INT 1
32486: PLUS
32487: PPUSH
32488: LD_VAR 0 7
32492: PUSH
32493: LD_VAR 0 9
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PPUSH
32502: CALL_OW 2
32506: ST_TO_ADDR
32507: GO 32589
// for j = 1 to result do
32509: LD_ADDR_VAR 0 8
32513: PUSH
32514: DOUBLE
32515: LD_INT 1
32517: DEC
32518: ST_TO_ADDR
32519: LD_VAR 0 6
32523: PUSH
32524: FOR_TO
32525: IFFALSE 32587
// begin if tmp < result [ j ] [ 2 ] then
32527: LD_VAR 0 9
32531: PUSH
32532: LD_VAR 0 6
32536: PUSH
32537: LD_VAR 0 8
32541: ARRAY
32542: PUSH
32543: LD_INT 2
32545: ARRAY
32546: LESS
32547: IFFALSE 32585
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32549: LD_ADDR_VAR 0 6
32553: PUSH
32554: LD_VAR 0 6
32558: PPUSH
32559: LD_VAR 0 8
32563: PPUSH
32564: LD_VAR 0 7
32568: PUSH
32569: LD_VAR 0 9
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 2
32582: ST_TO_ADDR
// break ;
32583: GO 32587
// end ; end ;
32585: GO 32524
32587: POP
32588: POP
// end ; end ;
32589: GO 32388
32591: POP
32592: POP
// if result and not asc then
32593: LD_VAR 0 6
32597: PUSH
32598: LD_VAR 0 4
32602: NOT
32603: AND
32604: IFFALSE 32679
// begin tmp := result ;
32606: LD_ADDR_VAR 0 9
32610: PUSH
32611: LD_VAR 0 6
32615: ST_TO_ADDR
// for i = tmp downto 1 do
32616: LD_ADDR_VAR 0 7
32620: PUSH
32621: DOUBLE
32622: LD_VAR 0 9
32626: INC
32627: ST_TO_ADDR
32628: LD_INT 1
32630: PUSH
32631: FOR_DOWNTO
32632: IFFALSE 32677
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32634: LD_ADDR_VAR 0 6
32638: PUSH
32639: LD_VAR 0 6
32643: PPUSH
32644: LD_VAR 0 9
32648: PUSH
32649: LD_VAR 0 7
32653: MINUS
32654: PUSH
32655: LD_INT 1
32657: PLUS
32658: PPUSH
32659: LD_VAR 0 9
32663: PUSH
32664: LD_VAR 0 7
32668: ARRAY
32669: PPUSH
32670: CALL_OW 1
32674: ST_TO_ADDR
32675: GO 32631
32677: POP
32678: POP
// end ; tmp := [ ] ;
32679: LD_ADDR_VAR 0 9
32683: PUSH
32684: EMPTY
32685: ST_TO_ADDR
// if mode then
32686: LD_VAR 0 5
32690: IFFALSE 32759
// begin for i = 1 to result do
32692: LD_ADDR_VAR 0 7
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_VAR 0 6
32706: PUSH
32707: FOR_TO
32708: IFFALSE 32747
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 9
32719: PPUSH
32720: LD_VAR 0 7
32724: PPUSH
32725: LD_VAR 0 6
32729: PUSH
32730: LD_VAR 0 7
32734: ARRAY
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: PPUSH
32740: CALL_OW 1
32744: ST_TO_ADDR
32745: GO 32707
32747: POP
32748: POP
// result := tmp ;
32749: LD_ADDR_VAR 0 6
32753: PUSH
32754: LD_VAR 0 9
32758: ST_TO_ADDR
// end ; end ;
32759: LD_VAR 0 6
32763: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32764: LD_INT 0
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: ST_TO_ADDR
// if not x or not y then
32794: LD_VAR 0 2
32798: NOT
32799: PUSH
32800: LD_VAR 0 3
32804: NOT
32805: OR
32806: IFFALSE 32810
// exit ;
32808: GO 34460
// if not range then
32810: LD_VAR 0 4
32814: NOT
32815: IFFALSE 32825
// range := 10 ;
32817: LD_ADDR_VAR 0 4
32821: PUSH
32822: LD_INT 10
32824: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32825: LD_ADDR_VAR 0 8
32829: PUSH
32830: LD_INT 81
32832: PUSH
32833: LD_VAR 0 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 92
32844: PUSH
32845: LD_VAR 0 2
32849: PUSH
32850: LD_VAR 0 3
32854: PUSH
32855: LD_VAR 0 4
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 21
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: PPUSH
32888: CALL_OW 69
32892: ST_TO_ADDR
// if not tmp then
32893: LD_VAR 0 8
32897: NOT
32898: IFFALSE 32902
// exit ;
32900: GO 34460
// for i in tmp do
32902: LD_ADDR_VAR 0 6
32906: PUSH
32907: LD_VAR 0 8
32911: PUSH
32912: FOR_IN
32913: IFFALSE 34435
// begin points := [ 0 , 0 , 0 ] ;
32915: LD_ADDR_VAR 0 9
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
// bpoints := 1 ;
32934: LD_ADDR_VAR 0 10
32938: PUSH
32939: LD_INT 1
32941: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32942: LD_VAR 0 6
32946: PPUSH
32947: CALL_OW 247
32951: PUSH
32952: LD_INT 1
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 33538
32960: POP
// begin if GetClass ( i ) = 1 then
32961: LD_VAR 0 6
32965: PPUSH
32966: CALL_OW 257
32970: PUSH
32971: LD_INT 1
32973: EQUAL
32974: IFFALSE 32995
// points := [ 10 , 5 , 3 ] ;
32976: LD_ADDR_VAR 0 9
32980: PUSH
32981: LD_INT 10
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32995: LD_VAR 0 6
32999: PPUSH
33000: CALL_OW 257
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 3
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: LIST
33018: IN
33019: IFFALSE 33040
// points := [ 3 , 2 , 1 ] ;
33021: LD_ADDR_VAR 0 9
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33040: LD_VAR 0 6
33044: PPUSH
33045: CALL_OW 257
33049: PUSH
33050: LD_INT 5
33052: EQUAL
33053: IFFALSE 33074
// points := [ 130 , 5 , 2 ] ;
33055: LD_ADDR_VAR 0 9
33059: PUSH
33060: LD_INT 130
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33074: LD_VAR 0 6
33078: PPUSH
33079: CALL_OW 257
33083: PUSH
33084: LD_INT 8
33086: EQUAL
33087: IFFALSE 33108
// points := [ 35 , 35 , 30 ] ;
33089: LD_ADDR_VAR 0 9
33093: PUSH
33094: LD_INT 35
33096: PUSH
33097: LD_INT 35
33099: PUSH
33100: LD_INT 30
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33108: LD_VAR 0 6
33112: PPUSH
33113: CALL_OW 257
33117: PUSH
33118: LD_INT 9
33120: EQUAL
33121: IFFALSE 33142
// points := [ 20 , 55 , 40 ] ;
33123: LD_ADDR_VAR 0 9
33127: PUSH
33128: LD_INT 20
33130: PUSH
33131: LD_INT 55
33133: PUSH
33134: LD_INT 40
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33142: LD_VAR 0 6
33146: PPUSH
33147: CALL_OW 257
33151: PUSH
33152: LD_INT 12
33154: PUSH
33155: LD_INT 16
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: IN
33162: IFFALSE 33183
// points := [ 5 , 3 , 2 ] ;
33164: LD_ADDR_VAR 0 9
33168: PUSH
33169: LD_INT 5
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33183: LD_VAR 0 6
33187: PPUSH
33188: CALL_OW 257
33192: PUSH
33193: LD_INT 17
33195: EQUAL
33196: IFFALSE 33217
// points := [ 100 , 50 , 75 ] ;
33198: LD_ADDR_VAR 0 9
33202: PUSH
33203: LD_INT 100
33205: PUSH
33206: LD_INT 50
33208: PUSH
33209: LD_INT 75
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33217: LD_VAR 0 6
33221: PPUSH
33222: CALL_OW 257
33226: PUSH
33227: LD_INT 15
33229: EQUAL
33230: IFFALSE 33251
// points := [ 10 , 5 , 3 ] ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: LD_INT 10
33239: PUSH
33240: LD_INT 5
33242: PUSH
33243: LD_INT 3
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33251: LD_VAR 0 6
33255: PPUSH
33256: CALL_OW 257
33260: PUSH
33261: LD_INT 14
33263: EQUAL
33264: IFFALSE 33285
// points := [ 10 , 0 , 0 ] ;
33266: LD_ADDR_VAR 0 9
33270: PUSH
33271: LD_INT 10
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33285: LD_VAR 0 6
33289: PPUSH
33290: CALL_OW 257
33294: PUSH
33295: LD_INT 11
33297: EQUAL
33298: IFFALSE 33319
// points := [ 30 , 10 , 5 ] ;
33300: LD_ADDR_VAR 0 9
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: LD_INT 10
33310: PUSH
33311: LD_INT 5
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33319: LD_VAR 0 1
33323: PPUSH
33324: LD_INT 5
33326: PPUSH
33327: CALL_OW 321
33331: PUSH
33332: LD_INT 2
33334: EQUAL
33335: IFFALSE 33352
// bpoints := bpoints * 1.8 ;
33337: LD_ADDR_VAR 0 10
33341: PUSH
33342: LD_VAR 0 10
33346: PUSH
33347: LD_REAL  1.80000000000000E+0000
33350: MUL
33351: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33352: LD_VAR 0 6
33356: PPUSH
33357: CALL_OW 257
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: IN
33380: PUSH
33381: LD_VAR 0 1
33385: PPUSH
33386: LD_INT 51
33388: PPUSH
33389: CALL_OW 321
33393: PUSH
33394: LD_INT 2
33396: EQUAL
33397: AND
33398: IFFALSE 33415
// bpoints := bpoints * 1.2 ;
33400: LD_ADDR_VAR 0 10
33404: PUSH
33405: LD_VAR 0 10
33409: PUSH
33410: LD_REAL  1.20000000000000E+0000
33413: MUL
33414: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33415: LD_VAR 0 6
33419: PPUSH
33420: CALL_OW 257
33424: PUSH
33425: LD_INT 5
33427: PUSH
33428: LD_INT 7
33430: PUSH
33431: LD_INT 9
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: IN
33439: PUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: LD_INT 52
33447: PPUSH
33448: CALL_OW 321
33452: PUSH
33453: LD_INT 2
33455: EQUAL
33456: AND
33457: IFFALSE 33474
// bpoints := bpoints * 1.5 ;
33459: LD_ADDR_VAR 0 10
33463: PUSH
33464: LD_VAR 0 10
33468: PUSH
33469: LD_REAL  1.50000000000000E+0000
33472: MUL
33473: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33474: LD_VAR 0 1
33478: PPUSH
33479: LD_INT 66
33481: PPUSH
33482: CALL_OW 321
33486: PUSH
33487: LD_INT 2
33489: EQUAL
33490: IFFALSE 33507
// bpoints := bpoints * 1.1 ;
33492: LD_ADDR_VAR 0 10
33496: PUSH
33497: LD_VAR 0 10
33501: PUSH
33502: LD_REAL  1.10000000000000E+0000
33505: MUL
33506: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33507: LD_ADDR_VAR 0 10
33511: PUSH
33512: LD_VAR 0 10
33516: PUSH
33517: LD_VAR 0 6
33521: PPUSH
33522: LD_INT 1
33524: PPUSH
33525: CALL_OW 259
33529: PUSH
33530: LD_REAL  1.15000000000000E+0000
33533: MUL
33534: MUL
33535: ST_TO_ADDR
// end ; unit_vehicle :
33536: GO 34364
33538: LD_INT 2
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33546
33544: GO 34352
33546: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33547: LD_VAR 0 6
33551: PPUSH
33552: CALL_OW 264
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 42
33562: PUSH
33563: LD_INT 24
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: IN
33571: IFFALSE 33592
// points := [ 25 , 5 , 3 ] ;
33573: LD_ADDR_VAR 0 9
33577: PUSH
33578: LD_INT 25
33580: PUSH
33581: LD_INT 5
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33592: LD_VAR 0 6
33596: PPUSH
33597: CALL_OW 264
33601: PUSH
33602: LD_INT 4
33604: PUSH
33605: LD_INT 43
33607: PUSH
33608: LD_INT 25
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: IN
33616: IFFALSE 33637
// points := [ 40 , 15 , 5 ] ;
33618: LD_ADDR_VAR 0 9
33622: PUSH
33623: LD_INT 40
33625: PUSH
33626: LD_INT 15
33628: PUSH
33629: LD_INT 5
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33637: LD_VAR 0 6
33641: PPUSH
33642: CALL_OW 264
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: LD_INT 23
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: IN
33657: IFFALSE 33678
// points := [ 7 , 25 , 8 ] ;
33659: LD_ADDR_VAR 0 9
33663: PUSH
33664: LD_INT 7
33666: PUSH
33667: LD_INT 25
33669: PUSH
33670: LD_INT 8
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33678: LD_VAR 0 6
33682: PPUSH
33683: CALL_OW 264
33687: PUSH
33688: LD_INT 5
33690: PUSH
33691: LD_INT 27
33693: PUSH
33694: LD_INT 44
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: IN
33702: IFFALSE 33723
// points := [ 14 , 50 , 16 ] ;
33704: LD_ADDR_VAR 0 9
33708: PUSH
33709: LD_INT 14
33711: PUSH
33712: LD_INT 50
33714: PUSH
33715: LD_INT 16
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33723: LD_VAR 0 6
33727: PPUSH
33728: CALL_OW 264
33732: PUSH
33733: LD_INT 6
33735: PUSH
33736: LD_INT 46
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: IN
33743: IFFALSE 33764
// points := [ 32 , 120 , 70 ] ;
33745: LD_ADDR_VAR 0 9
33749: PUSH
33750: LD_INT 32
33752: PUSH
33753: LD_INT 120
33755: PUSH
33756: LD_INT 70
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 264
33773: PUSH
33774: LD_INT 7
33776: PUSH
33777: LD_INT 28
33779: PUSH
33780: LD_INT 45
33782: PUSH
33783: LD_INT 92
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: IN
33792: IFFALSE 33813
// points := [ 35 , 20 , 45 ] ;
33794: LD_ADDR_VAR 0 9
33798: PUSH
33799: LD_INT 35
33801: PUSH
33802: LD_INT 20
33804: PUSH
33805: LD_INT 45
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33813: LD_VAR 0 6
33817: PPUSH
33818: CALL_OW 264
33822: PUSH
33823: LD_INT 47
33825: PUSH
33826: EMPTY
33827: LIST
33828: IN
33829: IFFALSE 33850
// points := [ 67 , 45 , 75 ] ;
33831: LD_ADDR_VAR 0 9
33835: PUSH
33836: LD_INT 67
33838: PUSH
33839: LD_INT 45
33841: PUSH
33842: LD_INT 75
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33850: LD_VAR 0 6
33854: PPUSH
33855: CALL_OW 264
33859: PUSH
33860: LD_INT 26
33862: PUSH
33863: EMPTY
33864: LIST
33865: IN
33866: IFFALSE 33887
// points := [ 120 , 30 , 80 ] ;
33868: LD_ADDR_VAR 0 9
33872: PUSH
33873: LD_INT 120
33875: PUSH
33876: LD_INT 30
33878: PUSH
33879: LD_INT 80
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33887: LD_VAR 0 6
33891: PPUSH
33892: CALL_OW 264
33896: PUSH
33897: LD_INT 22
33899: PUSH
33900: EMPTY
33901: LIST
33902: IN
33903: IFFALSE 33924
// points := [ 40 , 1 , 1 ] ;
33905: LD_ADDR_VAR 0 9
33909: PUSH
33910: LD_INT 40
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33924: LD_VAR 0 6
33928: PPUSH
33929: CALL_OW 264
33933: PUSH
33934: LD_INT 29
33936: PUSH
33937: EMPTY
33938: LIST
33939: IN
33940: IFFALSE 33961
// points := [ 70 , 200 , 400 ] ;
33942: LD_ADDR_VAR 0 9
33946: PUSH
33947: LD_INT 70
33949: PUSH
33950: LD_INT 200
33952: PUSH
33953: LD_INT 400
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33961: LD_VAR 0 6
33965: PPUSH
33966: CALL_OW 264
33970: PUSH
33971: LD_INT 14
33973: PUSH
33974: LD_INT 53
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: IN
33981: IFFALSE 34002
// points := [ 40 , 10 , 20 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 40
33990: PUSH
33991: LD_INT 10
33993: PUSH
33994: LD_INT 20
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 264
34011: PUSH
34012: LD_INT 9
34014: PUSH
34015: EMPTY
34016: LIST
34017: IN
34018: IFFALSE 34039
// points := [ 5 , 70 , 20 ] ;
34020: LD_ADDR_VAR 0 9
34024: PUSH
34025: LD_INT 5
34027: PUSH
34028: LD_INT 70
34030: PUSH
34031: LD_INT 20
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34039: LD_VAR 0 6
34043: PPUSH
34044: CALL_OW 264
34048: PUSH
34049: LD_INT 10
34051: PUSH
34052: EMPTY
34053: LIST
34054: IN
34055: IFFALSE 34076
// points := [ 35 , 110 , 70 ] ;
34057: LD_ADDR_VAR 0 9
34061: PUSH
34062: LD_INT 35
34064: PUSH
34065: LD_INT 110
34067: PUSH
34068: LD_INT 70
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34076: LD_VAR 0 6
34080: PPUSH
34081: CALL_OW 265
34085: PUSH
34086: LD_INT 25
34088: EQUAL
34089: IFFALSE 34110
// points := [ 80 , 65 , 100 ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: LD_INT 80
34098: PUSH
34099: LD_INT 65
34101: PUSH
34102: LD_INT 100
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34110: LD_VAR 0 6
34114: PPUSH
34115: CALL_OW 263
34119: PUSH
34120: LD_INT 1
34122: EQUAL
34123: IFFALSE 34158
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34125: LD_ADDR_VAR 0 10
34129: PUSH
34130: LD_VAR 0 10
34134: PUSH
34135: LD_VAR 0 6
34139: PPUSH
34140: CALL_OW 311
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 259
34152: PUSH
34153: LD_INT 4
34155: MUL
34156: MUL
34157: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34158: LD_VAR 0 6
34162: PPUSH
34163: CALL_OW 263
34167: PUSH
34168: LD_INT 2
34170: EQUAL
34171: IFFALSE 34222
// begin j := IsControledBy ( i ) ;
34173: LD_ADDR_VAR 0 7
34177: PUSH
34178: LD_VAR 0 6
34182: PPUSH
34183: CALL_OW 312
34187: ST_TO_ADDR
// if j then
34188: LD_VAR 0 7
34192: IFFALSE 34222
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34194: LD_ADDR_VAR 0 10
34198: PUSH
34199: LD_VAR 0 10
34203: PUSH
34204: LD_VAR 0 7
34208: PPUSH
34209: LD_INT 3
34211: PPUSH
34212: CALL_OW 259
34216: PUSH
34217: LD_INT 3
34219: MUL
34220: MUL
34221: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34222: LD_VAR 0 6
34226: PPUSH
34227: CALL_OW 264
34231: PUSH
34232: LD_INT 5
34234: PUSH
34235: LD_INT 6
34237: PUSH
34238: LD_INT 46
34240: PUSH
34241: LD_INT 44
34243: PUSH
34244: LD_INT 47
34246: PUSH
34247: LD_INT 45
34249: PUSH
34250: LD_INT 28
34252: PUSH
34253: LD_INT 7
34255: PUSH
34256: LD_INT 27
34258: PUSH
34259: LD_INT 29
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: IN
34274: PUSH
34275: LD_VAR 0 1
34279: PPUSH
34280: LD_INT 52
34282: PPUSH
34283: CALL_OW 321
34287: PUSH
34288: LD_INT 2
34290: EQUAL
34291: AND
34292: IFFALSE 34309
// bpoints := bpoints * 1.2 ;
34294: LD_ADDR_VAR 0 10
34298: PUSH
34299: LD_VAR 0 10
34303: PUSH
34304: LD_REAL  1.20000000000000E+0000
34307: MUL
34308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 264
34318: PUSH
34319: LD_INT 6
34321: PUSH
34322: LD_INT 46
34324: PUSH
34325: LD_INT 47
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: IN
34333: IFFALSE 34350
// bpoints := bpoints * 1.2 ;
34335: LD_ADDR_VAR 0 10
34339: PUSH
34340: LD_VAR 0 10
34344: PUSH
34345: LD_REAL  1.20000000000000E+0000
34348: MUL
34349: ST_TO_ADDR
// end ; unit_building :
34350: GO 34364
34352: LD_INT 3
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34363
34360: POP
// ; end ;
34361: GO 34364
34363: POP
// for j = 1 to 3 do
34364: LD_ADDR_VAR 0 7
34368: PUSH
34369: DOUBLE
34370: LD_INT 1
34372: DEC
34373: ST_TO_ADDR
34374: LD_INT 3
34376: PUSH
34377: FOR_TO
34378: IFFALSE 34431
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34380: LD_ADDR_VAR 0 5
34384: PUSH
34385: LD_VAR 0 5
34389: PPUSH
34390: LD_VAR 0 7
34394: PPUSH
34395: LD_VAR 0 5
34399: PUSH
34400: LD_VAR 0 7
34404: ARRAY
34405: PUSH
34406: LD_VAR 0 9
34410: PUSH
34411: LD_VAR 0 7
34415: ARRAY
34416: PUSH
34417: LD_VAR 0 10
34421: MUL
34422: PLUS
34423: PPUSH
34424: CALL_OW 1
34428: ST_TO_ADDR
34429: GO 34377
34431: POP
34432: POP
// end ;
34433: GO 32912
34435: POP
34436: POP
// result := Replace ( result , 4 , tmp ) ;
34437: LD_ADDR_VAR 0 5
34441: PUSH
34442: LD_VAR 0 5
34446: PPUSH
34447: LD_INT 4
34449: PPUSH
34450: LD_VAR 0 8
34454: PPUSH
34455: CALL_OW 1
34459: ST_TO_ADDR
// end ;
34460: LD_VAR 0 5
34464: RET
// export function DangerAtRange ( unit , range ) ; begin
34465: LD_INT 0
34467: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 255
34482: PPUSH
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 250
34492: PPUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 251
34502: PPUSH
34503: LD_VAR 0 2
34507: PPUSH
34508: CALL 32764 0 4
34512: ST_TO_ADDR
// end ;
34513: LD_VAR 0 3
34517: RET
// export function DangerInArea ( side , area ) ; begin
34518: LD_INT 0
34520: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_VAR 0 2
34530: PPUSH
34531: LD_INT 81
34533: PUSH
34534: LD_VAR 0 1
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PPUSH
34543: CALL_OW 70
34547: ST_TO_ADDR
// end ;
34548: LD_VAR 0 3
34552: RET
// export function IsExtension ( b ) ; begin
34553: LD_INT 0
34555: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34556: LD_ADDR_VAR 0 2
34560: PUSH
34561: LD_VAR 0 1
34565: PUSH
34566: LD_INT 23
34568: PUSH
34569: LD_INT 20
34571: PUSH
34572: LD_INT 22
34574: PUSH
34575: LD_INT 17
34577: PUSH
34578: LD_INT 24
34580: PUSH
34581: LD_INT 21
34583: PUSH
34584: LD_INT 19
34586: PUSH
34587: LD_INT 16
34589: PUSH
34590: LD_INT 25
34592: PUSH
34593: LD_INT 18
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: IN
34608: ST_TO_ADDR
// end ;
34609: LD_VAR 0 2
34613: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34614: LD_INT 0
34616: PPUSH
34617: PPUSH
34618: PPUSH
// result := [ ] ;
34619: LD_ADDR_VAR 0 4
34623: PUSH
34624: EMPTY
34625: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34626: LD_ADDR_VAR 0 5
34630: PUSH
34631: LD_VAR 0 2
34635: PPUSH
34636: LD_INT 21
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PPUSH
34646: CALL_OW 70
34650: ST_TO_ADDR
// if not tmp then
34651: LD_VAR 0 5
34655: NOT
34656: IFFALSE 34660
// exit ;
34658: GO 34724
// if checkLink then
34660: LD_VAR 0 3
34664: IFFALSE 34714
// begin for i in tmp do
34666: LD_ADDR_VAR 0 6
34670: PUSH
34671: LD_VAR 0 5
34675: PUSH
34676: FOR_IN
34677: IFFALSE 34712
// if GetBase ( i ) <> base then
34679: LD_VAR 0 6
34683: PPUSH
34684: CALL_OW 274
34688: PUSH
34689: LD_VAR 0 1
34693: NONEQUAL
34694: IFFALSE 34710
// ComLinkToBase ( base , i ) ;
34696: LD_VAR 0 1
34700: PPUSH
34701: LD_VAR 0 6
34705: PPUSH
34706: CALL_OW 169
34710: GO 34676
34712: POP
34713: POP
// end ; result := tmp ;
34714: LD_ADDR_VAR 0 4
34718: PUSH
34719: LD_VAR 0 5
34723: ST_TO_ADDR
// end ;
34724: LD_VAR 0 4
34728: RET
// export function ComComplete ( units , b ) ; var i ; begin
34729: LD_INT 0
34731: PPUSH
34732: PPUSH
// if not units then
34733: LD_VAR 0 1
34737: NOT
34738: IFFALSE 34742
// exit ;
34740: GO 34832
// for i in units do
34742: LD_ADDR_VAR 0 4
34746: PUSH
34747: LD_VAR 0 1
34751: PUSH
34752: FOR_IN
34753: IFFALSE 34830
// if BuildingStatus ( b ) = bs_build then
34755: LD_VAR 0 2
34759: PPUSH
34760: CALL_OW 461
34764: PUSH
34765: LD_INT 1
34767: EQUAL
34768: IFFALSE 34828
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34770: LD_VAR 0 4
34774: PPUSH
34775: LD_STRING h
34777: PUSH
34778: LD_VAR 0 2
34782: PPUSH
34783: CALL_OW 250
34787: PUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: CALL_OW 251
34797: PUSH
34798: LD_VAR 0 2
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: PUSH
34821: EMPTY
34822: LIST
34823: PPUSH
34824: CALL_OW 446
34828: GO 34752
34830: POP
34831: POP
// end ;
34832: LD_VAR 0 3
34836: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34837: LD_INT 0
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34845: LD_VAR 0 1
34849: NOT
34850: PUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 263
34860: PUSH
34861: LD_INT 2
34863: NONEQUAL
34864: OR
34865: IFFALSE 34869
// exit ;
34867: GO 35185
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34869: LD_ADDR_VAR 0 6
34873: PUSH
34874: LD_INT 22
34876: PUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 255
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 30
34896: PUSH
34897: LD_INT 36
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 34
34906: PUSH
34907: LD_INT 31
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PPUSH
34923: CALL_OW 69
34927: ST_TO_ADDR
// if not tmp then
34928: LD_VAR 0 6
34932: NOT
34933: IFFALSE 34937
// exit ;
34935: GO 35185
// result := [ ] ;
34937: LD_ADDR_VAR 0 2
34941: PUSH
34942: EMPTY
34943: ST_TO_ADDR
// for i in tmp do
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_VAR 0 6
34953: PUSH
34954: FOR_IN
34955: IFFALSE 35026
// begin t := UnitsInside ( i ) ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_VAR 0 3
34966: PPUSH
34967: CALL_OW 313
34971: ST_TO_ADDR
// if t then
34972: LD_VAR 0 4
34976: IFFALSE 35024
// for j in t do
34978: LD_ADDR_VAR 0 7
34982: PUSH
34983: LD_VAR 0 4
34987: PUSH
34988: FOR_IN
34989: IFFALSE 35022
// result := Replace ( result , result + 1 , j ) ;
34991: LD_ADDR_VAR 0 2
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: LD_VAR 0 2
35005: PUSH
35006: LD_INT 1
35008: PLUS
35009: PPUSH
35010: LD_VAR 0 7
35014: PPUSH
35015: CALL_OW 1
35019: ST_TO_ADDR
35020: GO 34988
35022: POP
35023: POP
// end ;
35024: GO 34954
35026: POP
35027: POP
// if not result then
35028: LD_VAR 0 2
35032: NOT
35033: IFFALSE 35037
// exit ;
35035: GO 35185
// mech := result [ 1 ] ;
35037: LD_ADDR_VAR 0 5
35041: PUSH
35042: LD_VAR 0 2
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: ST_TO_ADDR
// if result > 1 then
35051: LD_VAR 0 2
35055: PUSH
35056: LD_INT 1
35058: GREATER
35059: IFFALSE 35171
// begin for i = 2 to result do
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: DOUBLE
35067: LD_INT 2
35069: DEC
35070: ST_TO_ADDR
35071: LD_VAR 0 2
35075: PUSH
35076: FOR_TO
35077: IFFALSE 35169
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35079: LD_ADDR_VAR 0 4
35083: PUSH
35084: LD_VAR 0 2
35088: PUSH
35089: LD_VAR 0 3
35093: ARRAY
35094: PPUSH
35095: LD_INT 3
35097: PPUSH
35098: CALL_OW 259
35102: PUSH
35103: LD_VAR 0 2
35107: PUSH
35108: LD_VAR 0 3
35112: ARRAY
35113: PPUSH
35114: CALL_OW 432
35118: MINUS
35119: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35120: LD_VAR 0 4
35124: PUSH
35125: LD_VAR 0 5
35129: PPUSH
35130: LD_INT 3
35132: PPUSH
35133: CALL_OW 259
35137: PUSH
35138: LD_VAR 0 5
35142: PPUSH
35143: CALL_OW 432
35147: MINUS
35148: GREATEREQUAL
35149: IFFALSE 35167
// mech := result [ i ] ;
35151: LD_ADDR_VAR 0 5
35155: PUSH
35156: LD_VAR 0 2
35160: PUSH
35161: LD_VAR 0 3
35165: ARRAY
35166: ST_TO_ADDR
// end ;
35167: GO 35076
35169: POP
35170: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35171: LD_VAR 0 1
35175: PPUSH
35176: LD_VAR 0 5
35180: PPUSH
35181: CALL_OW 135
// end ;
35185: LD_VAR 0 2
35189: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35190: LD_INT 0
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
// result := [ ] ;
35205: LD_ADDR_VAR 0 7
35209: PUSH
35210: EMPTY
35211: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35212: LD_VAR 0 1
35216: PPUSH
35217: CALL_OW 266
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: IN
35232: NOT
35233: IFFALSE 35237
// exit ;
35235: GO 36871
// if name then
35237: LD_VAR 0 3
35241: IFFALSE 35257
// SetBName ( base_dep , name ) ;
35243: LD_VAR 0 1
35247: PPUSH
35248: LD_VAR 0 3
35252: PPUSH
35253: CALL_OW 500
// base := GetBase ( base_dep ) ;
35257: LD_ADDR_VAR 0 15
35261: PUSH
35262: LD_VAR 0 1
35266: PPUSH
35267: CALL_OW 274
35271: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35272: LD_ADDR_VAR 0 16
35276: PUSH
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 255
35286: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35287: LD_ADDR_VAR 0 17
35291: PUSH
35292: LD_VAR 0 1
35296: PPUSH
35297: CALL_OW 248
35301: ST_TO_ADDR
// if sources then
35302: LD_VAR 0 5
35306: IFFALSE 35353
// for i = 1 to 3 do
35308: LD_ADDR_VAR 0 8
35312: PUSH
35313: DOUBLE
35314: LD_INT 1
35316: DEC
35317: ST_TO_ADDR
35318: LD_INT 3
35320: PUSH
35321: FOR_TO
35322: IFFALSE 35351
// AddResourceType ( base , i , sources [ i ] ) ;
35324: LD_VAR 0 15
35328: PPUSH
35329: LD_VAR 0 8
35333: PPUSH
35334: LD_VAR 0 5
35338: PUSH
35339: LD_VAR 0 8
35343: ARRAY
35344: PPUSH
35345: CALL_OW 276
35349: GO 35321
35351: POP
35352: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35353: LD_ADDR_VAR 0 18
35357: PUSH
35358: LD_VAR 0 15
35362: PPUSH
35363: LD_VAR 0 2
35367: PPUSH
35368: LD_INT 1
35370: PPUSH
35371: CALL 34614 0 3
35375: ST_TO_ADDR
// InitHc ;
35376: CALL_OW 19
// InitUc ;
35380: CALL_OW 18
// uc_side := side ;
35384: LD_ADDR_OWVAR 20
35388: PUSH
35389: LD_VAR 0 16
35393: ST_TO_ADDR
// uc_nation := nation ;
35394: LD_ADDR_OWVAR 21
35398: PUSH
35399: LD_VAR 0 17
35403: ST_TO_ADDR
// if buildings then
35404: LD_VAR 0 18
35408: IFFALSE 36730
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35410: LD_ADDR_VAR 0 19
35414: PUSH
35415: LD_VAR 0 18
35419: PPUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 30
35425: PUSH
35426: LD_INT 29
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 30
35435: PUSH
35436: LD_INT 30
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: PPUSH
35448: CALL_OW 72
35452: ST_TO_ADDR
// if tmp then
35453: LD_VAR 0 19
35457: IFFALSE 35505
// for i in tmp do
35459: LD_ADDR_VAR 0 8
35463: PUSH
35464: LD_VAR 0 19
35468: PUSH
35469: FOR_IN
35470: IFFALSE 35503
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35472: LD_VAR 0 8
35476: PPUSH
35477: CALL_OW 250
35481: PPUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: CALL_OW 251
35491: PPUSH
35492: LD_VAR 0 16
35496: PPUSH
35497: CALL_OW 441
35501: GO 35469
35503: POP
35504: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35505: LD_VAR 0 18
35509: PPUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 30
35515: PUSH
35516: LD_INT 32
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 30
35525: PUSH
35526: LD_INT 33
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: PPUSH
35538: CALL_OW 72
35542: IFFALSE 35630
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35544: LD_ADDR_VAR 0 8
35548: PUSH
35549: LD_VAR 0 18
35553: PPUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 30
35559: PUSH
35560: LD_INT 32
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 30
35569: PUSH
35570: LD_INT 33
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: PPUSH
35582: CALL_OW 72
35586: PUSH
35587: FOR_IN
35588: IFFALSE 35628
// begin if not GetBWeapon ( i ) then
35590: LD_VAR 0 8
35594: PPUSH
35595: CALL_OW 269
35599: NOT
35600: IFFALSE 35626
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35602: LD_VAR 0 8
35606: PPUSH
35607: LD_VAR 0 8
35611: PPUSH
35612: LD_VAR 0 2
35616: PPUSH
35617: CALL 36876 0 2
35621: PPUSH
35622: CALL_OW 431
// end ;
35626: GO 35587
35628: POP
35629: POP
// end ; for i = 1 to personel do
35630: LD_ADDR_VAR 0 8
35634: PUSH
35635: DOUBLE
35636: LD_INT 1
35638: DEC
35639: ST_TO_ADDR
35640: LD_VAR 0 6
35644: PUSH
35645: FOR_TO
35646: IFFALSE 36710
// begin if i > 4 then
35648: LD_VAR 0 8
35652: PUSH
35653: LD_INT 4
35655: GREATER
35656: IFFALSE 35660
// break ;
35658: GO 36710
// case i of 1 :
35660: LD_VAR 0 8
35664: PUSH
35665: LD_INT 1
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35753
35673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35674: LD_ADDR_VAR 0 12
35678: PUSH
35679: LD_VAR 0 18
35683: PPUSH
35684: LD_INT 22
35686: PUSH
35687: LD_VAR 0 16
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 58
35698: PUSH
35699: EMPTY
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: LD_INT 30
35707: PUSH
35708: LD_INT 32
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 30
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 30
35727: PUSH
35728: LD_INT 5
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: PPUSH
35746: CALL_OW 72
35750: ST_TO_ADDR
35751: GO 35975
35753: LD_INT 2
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 35823
35761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35762: LD_ADDR_VAR 0 12
35766: PUSH
35767: LD_VAR 0 18
35771: PPUSH
35772: LD_INT 22
35774: PUSH
35775: LD_VAR 0 16
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 30
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 72
35820: ST_TO_ADDR
35821: GO 35975
35823: LD_INT 3
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35893
35831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35832: LD_ADDR_VAR 0 12
35836: PUSH
35837: LD_VAR 0 18
35841: PPUSH
35842: LD_INT 22
35844: PUSH
35845: LD_VAR 0 16
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 30
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 30
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PPUSH
35886: CALL_OW 72
35890: ST_TO_ADDR
35891: GO 35975
35893: LD_INT 4
35895: DOUBLE
35896: EQUAL
35897: IFTRUE 35901
35899: GO 35974
35901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35902: LD_ADDR_VAR 0 12
35906: PUSH
35907: LD_VAR 0 18
35911: PPUSH
35912: LD_INT 22
35914: PUSH
35915: LD_VAR 0 16
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 30
35929: PUSH
35930: LD_INT 6
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 30
35939: PUSH
35940: LD_INT 7
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 30
35949: PUSH
35950: LD_INT 8
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PPUSH
35967: CALL_OW 72
35971: ST_TO_ADDR
35972: GO 35975
35974: POP
// if i = 1 then
35975: LD_VAR 0 8
35979: PUSH
35980: LD_INT 1
35982: EQUAL
35983: IFFALSE 36094
// begin tmp := [ ] ;
35985: LD_ADDR_VAR 0 19
35989: PUSH
35990: EMPTY
35991: ST_TO_ADDR
// for j in f do
35992: LD_ADDR_VAR 0 9
35996: PUSH
35997: LD_VAR 0 12
36001: PUSH
36002: FOR_IN
36003: IFFALSE 36076
// if GetBType ( j ) = b_bunker then
36005: LD_VAR 0 9
36009: PPUSH
36010: CALL_OW 266
36014: PUSH
36015: LD_INT 32
36017: EQUAL
36018: IFFALSE 36045
// tmp := Insert ( tmp , 1 , j ) else
36020: LD_ADDR_VAR 0 19
36024: PUSH
36025: LD_VAR 0 19
36029: PPUSH
36030: LD_INT 1
36032: PPUSH
36033: LD_VAR 0 9
36037: PPUSH
36038: CALL_OW 2
36042: ST_TO_ADDR
36043: GO 36074
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36045: LD_ADDR_VAR 0 19
36049: PUSH
36050: LD_VAR 0 19
36054: PPUSH
36055: LD_VAR 0 19
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: LD_VAR 0 9
36068: PPUSH
36069: CALL_OW 2
36073: ST_TO_ADDR
36074: GO 36002
36076: POP
36077: POP
// if tmp then
36078: LD_VAR 0 19
36082: IFFALSE 36094
// f := tmp ;
36084: LD_ADDR_VAR 0 12
36088: PUSH
36089: LD_VAR 0 19
36093: ST_TO_ADDR
// end ; x := personel [ i ] ;
36094: LD_ADDR_VAR 0 13
36098: PUSH
36099: LD_VAR 0 6
36103: PUSH
36104: LD_VAR 0 8
36108: ARRAY
36109: ST_TO_ADDR
// if x = - 1 then
36110: LD_VAR 0 13
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: EQUAL
36119: IFFALSE 36328
// begin for j in f do
36121: LD_ADDR_VAR 0 9
36125: PUSH
36126: LD_VAR 0 12
36130: PUSH
36131: FOR_IN
36132: IFFALSE 36324
// repeat InitHc ;
36134: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36138: LD_VAR 0 9
36142: PPUSH
36143: CALL_OW 266
36147: PUSH
36148: LD_INT 5
36150: EQUAL
36151: IFFALSE 36221
// begin if UnitsInside ( j ) < 3 then
36153: LD_VAR 0 9
36157: PPUSH
36158: CALL_OW 313
36162: PUSH
36163: LD_INT 3
36165: LESS
36166: IFFALSE 36202
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36168: LD_INT 0
36170: PPUSH
36171: LD_INT 5
36173: PUSH
36174: LD_INT 8
36176: PUSH
36177: LD_INT 9
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: PUSH
36185: LD_VAR 0 17
36189: ARRAY
36190: PPUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: CALL_OW 380
36200: GO 36219
// PrepareHuman ( false , i , skill ) ;
36202: LD_INT 0
36204: PPUSH
36205: LD_VAR 0 8
36209: PPUSH
36210: LD_VAR 0 4
36214: PPUSH
36215: CALL_OW 380
// end else
36219: GO 36238
// PrepareHuman ( false , i , skill ) ;
36221: LD_INT 0
36223: PPUSH
36224: LD_VAR 0 8
36228: PPUSH
36229: LD_VAR 0 4
36233: PPUSH
36234: CALL_OW 380
// un := CreateHuman ;
36238: LD_ADDR_VAR 0 14
36242: PUSH
36243: CALL_OW 44
36247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36248: LD_ADDR_VAR 0 7
36252: PUSH
36253: LD_VAR 0 7
36257: PPUSH
36258: LD_INT 1
36260: PPUSH
36261: LD_VAR 0 14
36265: PPUSH
36266: CALL_OW 2
36270: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36271: LD_VAR 0 14
36275: PPUSH
36276: LD_VAR 0 9
36280: PPUSH
36281: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36285: LD_VAR 0 9
36289: PPUSH
36290: CALL_OW 313
36294: PUSH
36295: LD_INT 6
36297: EQUAL
36298: PUSH
36299: LD_VAR 0 9
36303: PPUSH
36304: CALL_OW 266
36308: PUSH
36309: LD_INT 32
36311: PUSH
36312: LD_INT 31
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: IN
36319: OR
36320: IFFALSE 36134
36322: GO 36131
36324: POP
36325: POP
// end else
36326: GO 36708
// for j = 1 to x do
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: DOUBLE
36334: LD_INT 1
36336: DEC
36337: ST_TO_ADDR
36338: LD_VAR 0 13
36342: PUSH
36343: FOR_TO
36344: IFFALSE 36706
// begin InitHc ;
36346: CALL_OW 19
// if not f then
36350: LD_VAR 0 12
36354: NOT
36355: IFFALSE 36444
// begin PrepareHuman ( false , i , skill ) ;
36357: LD_INT 0
36359: PPUSH
36360: LD_VAR 0 8
36364: PPUSH
36365: LD_VAR 0 4
36369: PPUSH
36370: CALL_OW 380
// un := CreateHuman ;
36374: LD_ADDR_VAR 0 14
36378: PUSH
36379: CALL_OW 44
36383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: LD_VAR 0 7
36393: PPUSH
36394: LD_INT 1
36396: PPUSH
36397: LD_VAR 0 14
36401: PPUSH
36402: CALL_OW 2
36406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36407: LD_VAR 0 14
36411: PPUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 250
36421: PPUSH
36422: LD_VAR 0 1
36426: PPUSH
36427: CALL_OW 251
36431: PPUSH
36432: LD_INT 10
36434: PPUSH
36435: LD_INT 0
36437: PPUSH
36438: CALL_OW 50
// continue ;
36442: GO 36343
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36444: LD_VAR 0 12
36448: PUSH
36449: LD_INT 1
36451: ARRAY
36452: PPUSH
36453: CALL_OW 313
36457: PUSH
36458: LD_VAR 0 12
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: CALL_OW 266
36471: PUSH
36472: LD_INT 32
36474: PUSH
36475: LD_INT 31
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: IN
36482: AND
36483: PUSH
36484: LD_VAR 0 12
36488: PUSH
36489: LD_INT 1
36491: ARRAY
36492: PPUSH
36493: CALL_OW 313
36497: PUSH
36498: LD_INT 6
36500: EQUAL
36501: OR
36502: IFFALSE 36522
// f := Delete ( f , 1 ) ;
36504: LD_ADDR_VAR 0 12
36508: PUSH
36509: LD_VAR 0 12
36513: PPUSH
36514: LD_INT 1
36516: PPUSH
36517: CALL_OW 3
36521: ST_TO_ADDR
// if not f then
36522: LD_VAR 0 12
36526: NOT
36527: IFFALSE 36545
// begin x := x + 2 ;
36529: LD_ADDR_VAR 0 13
36533: PUSH
36534: LD_VAR 0 13
36538: PUSH
36539: LD_INT 2
36541: PLUS
36542: ST_TO_ADDR
// continue ;
36543: GO 36343
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36545: LD_VAR 0 12
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PPUSH
36554: CALL_OW 266
36558: PUSH
36559: LD_INT 5
36561: EQUAL
36562: IFFALSE 36636
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36564: LD_VAR 0 12
36568: PUSH
36569: LD_INT 1
36571: ARRAY
36572: PPUSH
36573: CALL_OW 313
36577: PUSH
36578: LD_INT 3
36580: LESS
36581: IFFALSE 36617
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36583: LD_INT 0
36585: PPUSH
36586: LD_INT 5
36588: PUSH
36589: LD_INT 8
36591: PUSH
36592: LD_INT 9
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: PUSH
36600: LD_VAR 0 17
36604: ARRAY
36605: PPUSH
36606: LD_VAR 0 4
36610: PPUSH
36611: CALL_OW 380
36615: GO 36634
// PrepareHuman ( false , i , skill ) ;
36617: LD_INT 0
36619: PPUSH
36620: LD_VAR 0 8
36624: PPUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: CALL_OW 380
// end else
36634: GO 36653
// PrepareHuman ( false , i , skill ) ;
36636: LD_INT 0
36638: PPUSH
36639: LD_VAR 0 8
36643: PPUSH
36644: LD_VAR 0 4
36648: PPUSH
36649: CALL_OW 380
// un := CreateHuman ;
36653: LD_ADDR_VAR 0 14
36657: PUSH
36658: CALL_OW 44
36662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36663: LD_ADDR_VAR 0 7
36667: PUSH
36668: LD_VAR 0 7
36672: PPUSH
36673: LD_INT 1
36675: PPUSH
36676: LD_VAR 0 14
36680: PPUSH
36681: CALL_OW 2
36685: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36686: LD_VAR 0 14
36690: PPUSH
36691: LD_VAR 0 12
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PPUSH
36700: CALL_OW 52
// end ;
36704: GO 36343
36706: POP
36707: POP
// end ;
36708: GO 35645
36710: POP
36711: POP
// result := result ^ buildings ;
36712: LD_ADDR_VAR 0 7
36716: PUSH
36717: LD_VAR 0 7
36721: PUSH
36722: LD_VAR 0 18
36726: ADD
36727: ST_TO_ADDR
// end else
36728: GO 36871
// begin for i = 1 to personel do
36730: LD_ADDR_VAR 0 8
36734: PUSH
36735: DOUBLE
36736: LD_INT 1
36738: DEC
36739: ST_TO_ADDR
36740: LD_VAR 0 6
36744: PUSH
36745: FOR_TO
36746: IFFALSE 36869
// begin if i > 4 then
36748: LD_VAR 0 8
36752: PUSH
36753: LD_INT 4
36755: GREATER
36756: IFFALSE 36760
// break ;
36758: GO 36869
// x := personel [ i ] ;
36760: LD_ADDR_VAR 0 13
36764: PUSH
36765: LD_VAR 0 6
36769: PUSH
36770: LD_VAR 0 8
36774: ARRAY
36775: ST_TO_ADDR
// if x = - 1 then
36776: LD_VAR 0 13
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: EQUAL
36785: IFFALSE 36789
// continue ;
36787: GO 36745
// PrepareHuman ( false , i , skill ) ;
36789: LD_INT 0
36791: PPUSH
36792: LD_VAR 0 8
36796: PPUSH
36797: LD_VAR 0 4
36801: PPUSH
36802: CALL_OW 380
// un := CreateHuman ;
36806: LD_ADDR_VAR 0 14
36810: PUSH
36811: CALL_OW 44
36815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36816: LD_VAR 0 14
36820: PPUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 250
36830: PPUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 251
36840: PPUSH
36841: LD_INT 10
36843: PPUSH
36844: LD_INT 0
36846: PPUSH
36847: CALL_OW 50
// result := result ^ un ;
36851: LD_ADDR_VAR 0 7
36855: PUSH
36856: LD_VAR 0 7
36860: PUSH
36861: LD_VAR 0 14
36865: ADD
36866: ST_TO_ADDR
// end ;
36867: GO 36745
36869: POP
36870: POP
// end ; end ;
36871: LD_VAR 0 7
36875: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36876: LD_INT 0
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
// result := false ;
36894: LD_ADDR_VAR 0 3
36898: PUSH
36899: LD_INT 0
36901: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36902: LD_VAR 0 1
36906: NOT
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 266
36917: PUSH
36918: LD_INT 32
36920: PUSH
36921: LD_INT 33
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: IN
36928: NOT
36929: OR
36930: IFFALSE 36934
// exit ;
36932: GO 38043
// nat := GetNation ( tower ) ;
36934: LD_ADDR_VAR 0 12
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 248
36948: ST_TO_ADDR
// side := GetSide ( tower ) ;
36949: LD_ADDR_VAR 0 16
36953: PUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 255
36963: ST_TO_ADDR
// x := GetX ( tower ) ;
36964: LD_ADDR_VAR 0 10
36968: PUSH
36969: LD_VAR 0 1
36973: PPUSH
36974: CALL_OW 250
36978: ST_TO_ADDR
// y := GetY ( tower ) ;
36979: LD_ADDR_VAR 0 11
36983: PUSH
36984: LD_VAR 0 1
36988: PPUSH
36989: CALL_OW 251
36993: ST_TO_ADDR
// if not x or not y then
36994: LD_VAR 0 10
36998: NOT
36999: PUSH
37000: LD_VAR 0 11
37004: NOT
37005: OR
37006: IFFALSE 37010
// exit ;
37008: GO 38043
// weapon := 0 ;
37010: LD_ADDR_VAR 0 18
37014: PUSH
37015: LD_INT 0
37017: ST_TO_ADDR
// fac_list := [ ] ;
37018: LD_ADDR_VAR 0 17
37022: PUSH
37023: EMPTY
37024: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37025: LD_ADDR_VAR 0 6
37029: PUSH
37030: LD_VAR 0 1
37034: PPUSH
37035: CALL_OW 274
37039: PPUSH
37040: LD_VAR 0 2
37044: PPUSH
37045: LD_INT 0
37047: PPUSH
37048: CALL 34614 0 3
37052: PPUSH
37053: LD_INT 30
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PPUSH
37063: CALL_OW 72
37067: ST_TO_ADDR
// if not factories then
37068: LD_VAR 0 6
37072: NOT
37073: IFFALSE 37077
// exit ;
37075: GO 38043
// for i in factories do
37077: LD_ADDR_VAR 0 8
37081: PUSH
37082: LD_VAR 0 6
37086: PUSH
37087: FOR_IN
37088: IFFALSE 37113
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37090: LD_ADDR_VAR 0 17
37094: PUSH
37095: LD_VAR 0 17
37099: PUSH
37100: LD_VAR 0 8
37104: PPUSH
37105: CALL_OW 478
37109: UNION
37110: ST_TO_ADDR
37111: GO 37087
37113: POP
37114: POP
// if not fac_list then
37115: LD_VAR 0 17
37119: NOT
37120: IFFALSE 37124
// exit ;
37122: GO 38043
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37124: LD_ADDR_VAR 0 5
37128: PUSH
37129: LD_INT 4
37131: PUSH
37132: LD_INT 5
37134: PUSH
37135: LD_INT 9
37137: PUSH
37138: LD_INT 10
37140: PUSH
37141: LD_INT 6
37143: PUSH
37144: LD_INT 7
37146: PUSH
37147: LD_INT 11
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 27
37161: PUSH
37162: LD_INT 28
37164: PUSH
37165: LD_INT 26
37167: PUSH
37168: LD_INT 30
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 43
37179: PUSH
37180: LD_INT 44
37182: PUSH
37183: LD_INT 46
37185: PUSH
37186: LD_INT 45
37188: PUSH
37189: LD_INT 47
37191: PUSH
37192: LD_INT 49
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: LD_VAR 0 12
37212: ARRAY
37213: ST_TO_ADDR
// list := list isect fac_list ;
37214: LD_ADDR_VAR 0 5
37218: PUSH
37219: LD_VAR 0 5
37223: PUSH
37224: LD_VAR 0 17
37228: ISECT
37229: ST_TO_ADDR
// if not list then
37230: LD_VAR 0 5
37234: NOT
37235: IFFALSE 37239
// exit ;
37237: GO 38043
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37239: LD_VAR 0 12
37243: PUSH
37244: LD_INT 3
37246: EQUAL
37247: PUSH
37248: LD_INT 49
37250: PUSH
37251: LD_VAR 0 5
37255: IN
37256: AND
37257: PUSH
37258: LD_INT 31
37260: PPUSH
37261: LD_VAR 0 16
37265: PPUSH
37266: CALL_OW 321
37270: PUSH
37271: LD_INT 2
37273: EQUAL
37274: AND
37275: IFFALSE 37335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37277: LD_INT 22
37279: PUSH
37280: LD_VAR 0 16
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 35
37291: PUSH
37292: LD_INT 49
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 91
37301: PUSH
37302: LD_VAR 0 1
37306: PUSH
37307: LD_INT 10
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PPUSH
37320: CALL_OW 69
37324: NOT
37325: IFFALSE 37335
// weapon := ru_time_lapser ;
37327: LD_ADDR_VAR 0 18
37331: PUSH
37332: LD_INT 49
37334: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37335: LD_VAR 0 12
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: IN
37350: PUSH
37351: LD_INT 11
37353: PUSH
37354: LD_VAR 0 5
37358: IN
37359: PUSH
37360: LD_INT 30
37362: PUSH
37363: LD_VAR 0 5
37367: IN
37368: OR
37369: AND
37370: PUSH
37371: LD_INT 6
37373: PPUSH
37374: LD_VAR 0 16
37378: PPUSH
37379: CALL_OW 321
37383: PUSH
37384: LD_INT 2
37386: EQUAL
37387: AND
37388: IFFALSE 37553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37390: LD_INT 22
37392: PUSH
37393: LD_VAR 0 16
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 35
37407: PUSH
37408: LD_INT 11
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 35
37417: PUSH
37418: LD_INT 30
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 91
37432: PUSH
37433: LD_VAR 0 1
37437: PUSH
37438: LD_INT 18
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PPUSH
37451: CALL_OW 69
37455: NOT
37456: PUSH
37457: LD_INT 22
37459: PUSH
37460: LD_VAR 0 16
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 30
37474: PUSH
37475: LD_INT 32
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 30
37484: PUSH
37485: LD_INT 33
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 91
37499: PUSH
37500: LD_VAR 0 1
37504: PUSH
37505: LD_INT 12
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: PPUSH
37521: CALL_OW 69
37525: PUSH
37526: LD_INT 2
37528: GREATER
37529: AND
37530: IFFALSE 37553
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37532: LD_ADDR_VAR 0 18
37536: PUSH
37537: LD_INT 11
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 12
37551: ARRAY
37552: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37553: LD_VAR 0 18
37557: NOT
37558: PUSH
37559: LD_INT 40
37561: PPUSH
37562: LD_VAR 0 16
37566: PPUSH
37567: CALL_OW 321
37571: PUSH
37572: LD_INT 2
37574: EQUAL
37575: AND
37576: PUSH
37577: LD_INT 7
37579: PUSH
37580: LD_VAR 0 5
37584: IN
37585: PUSH
37586: LD_INT 28
37588: PUSH
37589: LD_VAR 0 5
37593: IN
37594: OR
37595: PUSH
37596: LD_INT 45
37598: PUSH
37599: LD_VAR 0 5
37603: IN
37604: OR
37605: AND
37606: IFFALSE 37860
// begin hex := GetHexInfo ( x , y ) ;
37608: LD_ADDR_VAR 0 4
37612: PUSH
37613: LD_VAR 0 10
37617: PPUSH
37618: LD_VAR 0 11
37622: PPUSH
37623: CALL_OW 546
37627: ST_TO_ADDR
// if hex [ 1 ] then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: IFFALSE 37640
// exit ;
37638: GO 38043
// height := hex [ 2 ] ;
37640: LD_ADDR_VAR 0 15
37644: PUSH
37645: LD_VAR 0 4
37649: PUSH
37650: LD_INT 2
37652: ARRAY
37653: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37654: LD_ADDR_VAR 0 14
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 5
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// for i in tmp do
37677: LD_ADDR_VAR 0 8
37681: PUSH
37682: LD_VAR 0 14
37686: PUSH
37687: FOR_IN
37688: IFFALSE 37858
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37690: LD_ADDR_VAR 0 9
37694: PUSH
37695: LD_VAR 0 10
37699: PPUSH
37700: LD_VAR 0 8
37704: PPUSH
37705: LD_INT 5
37707: PPUSH
37708: CALL_OW 272
37712: PUSH
37713: LD_VAR 0 11
37717: PPUSH
37718: LD_VAR 0 8
37722: PPUSH
37723: LD_INT 5
37725: PPUSH
37726: CALL_OW 273
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37735: LD_VAR 0 9
37739: PUSH
37740: LD_INT 1
37742: ARRAY
37743: PPUSH
37744: LD_VAR 0 9
37748: PUSH
37749: LD_INT 2
37751: ARRAY
37752: PPUSH
37753: CALL_OW 488
37757: IFFALSE 37856
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37759: LD_ADDR_VAR 0 4
37763: PUSH
37764: LD_VAR 0 9
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: PPUSH
37773: LD_VAR 0 9
37777: PUSH
37778: LD_INT 2
37780: ARRAY
37781: PPUSH
37782: CALL_OW 546
37786: ST_TO_ADDR
// if hex [ 1 ] then
37787: LD_VAR 0 4
37791: PUSH
37792: LD_INT 1
37794: ARRAY
37795: IFFALSE 37799
// continue ;
37797: GO 37687
// h := hex [ 2 ] ;
37799: LD_ADDR_VAR 0 13
37803: PUSH
37804: LD_VAR 0 4
37808: PUSH
37809: LD_INT 2
37811: ARRAY
37812: ST_TO_ADDR
// if h + 7 < height then
37813: LD_VAR 0 13
37817: PUSH
37818: LD_INT 7
37820: PLUS
37821: PUSH
37822: LD_VAR 0 15
37826: LESS
37827: IFFALSE 37856
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37829: LD_ADDR_VAR 0 18
37833: PUSH
37834: LD_INT 7
37836: PUSH
37837: LD_INT 28
37839: PUSH
37840: LD_INT 45
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: LD_VAR 0 12
37852: ARRAY
37853: ST_TO_ADDR
// break ;
37854: GO 37858
// end ; end ; end ;
37856: GO 37687
37858: POP
37859: POP
// end ; if not weapon then
37860: LD_VAR 0 18
37864: NOT
37865: IFFALSE 37925
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37867: LD_ADDR_VAR 0 5
37871: PUSH
37872: LD_VAR 0 5
37876: PUSH
37877: LD_INT 11
37879: PUSH
37880: LD_INT 30
37882: PUSH
37883: LD_INT 49
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: DIFF
37891: ST_TO_ADDR
// if not list then
37892: LD_VAR 0 5
37896: NOT
37897: IFFALSE 37901
// exit ;
37899: GO 38043
// weapon := list [ rand ( 1 , list ) ] ;
37901: LD_ADDR_VAR 0 18
37905: PUSH
37906: LD_VAR 0 5
37910: PUSH
37911: LD_INT 1
37913: PPUSH
37914: LD_VAR 0 5
37918: PPUSH
37919: CALL_OW 12
37923: ARRAY
37924: ST_TO_ADDR
// end ; if weapon then
37925: LD_VAR 0 18
37929: IFFALSE 38043
// begin tmp := CostOfWeapon ( weapon ) ;
37931: LD_ADDR_VAR 0 14
37935: PUSH
37936: LD_VAR 0 18
37940: PPUSH
37941: CALL_OW 451
37945: ST_TO_ADDR
// j := GetBase ( tower ) ;
37946: LD_ADDR_VAR 0 9
37950: PUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL_OW 274
37960: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37961: LD_VAR 0 9
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: CALL_OW 275
37973: PUSH
37974: LD_VAR 0 14
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: GREATEREQUAL
37983: PUSH
37984: LD_VAR 0 9
37988: PPUSH
37989: LD_INT 2
37991: PPUSH
37992: CALL_OW 275
37996: PUSH
37997: LD_VAR 0 14
38001: PUSH
38002: LD_INT 2
38004: ARRAY
38005: GREATEREQUAL
38006: AND
38007: PUSH
38008: LD_VAR 0 9
38012: PPUSH
38013: LD_INT 3
38015: PPUSH
38016: CALL_OW 275
38020: PUSH
38021: LD_VAR 0 14
38025: PUSH
38026: LD_INT 3
38028: ARRAY
38029: GREATEREQUAL
38030: AND
38031: IFFALSE 38043
// result := weapon ;
38033: LD_ADDR_VAR 0 3
38037: PUSH
38038: LD_VAR 0 18
38042: ST_TO_ADDR
// end ; end ;
38043: LD_VAR 0 3
38047: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38048: LD_INT 0
38050: PPUSH
38051: PPUSH
// result := true ;
38052: LD_ADDR_VAR 0 3
38056: PUSH
38057: LD_INT 1
38059: ST_TO_ADDR
// if array1 = array2 then
38060: LD_VAR 0 1
38064: PUSH
38065: LD_VAR 0 2
38069: EQUAL
38070: IFFALSE 38130
// begin for i = 1 to array1 do
38072: LD_ADDR_VAR 0 4
38076: PUSH
38077: DOUBLE
38078: LD_INT 1
38080: DEC
38081: ST_TO_ADDR
38082: LD_VAR 0 1
38086: PUSH
38087: FOR_TO
38088: IFFALSE 38126
// if array1 [ i ] <> array2 [ i ] then
38090: LD_VAR 0 1
38094: PUSH
38095: LD_VAR 0 4
38099: ARRAY
38100: PUSH
38101: LD_VAR 0 2
38105: PUSH
38106: LD_VAR 0 4
38110: ARRAY
38111: NONEQUAL
38112: IFFALSE 38124
// begin result := false ;
38114: LD_ADDR_VAR 0 3
38118: PUSH
38119: LD_INT 0
38121: ST_TO_ADDR
// break ;
38122: GO 38126
// end ;
38124: GO 38087
38126: POP
38127: POP
// end else
38128: GO 38138
// result := false ;
38130: LD_ADDR_VAR 0 3
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
// end ;
38138: LD_VAR 0 3
38142: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38143: LD_INT 0
38145: PPUSH
38146: PPUSH
// if not array1 or not array2 then
38147: LD_VAR 0 1
38151: NOT
38152: PUSH
38153: LD_VAR 0 2
38157: NOT
38158: OR
38159: IFFALSE 38163
// exit ;
38161: GO 38227
// result := true ;
38163: LD_ADDR_VAR 0 3
38167: PUSH
38168: LD_INT 1
38170: ST_TO_ADDR
// for i = 1 to array1 do
38171: LD_ADDR_VAR 0 4
38175: PUSH
38176: DOUBLE
38177: LD_INT 1
38179: DEC
38180: ST_TO_ADDR
38181: LD_VAR 0 1
38185: PUSH
38186: FOR_TO
38187: IFFALSE 38225
// if array1 [ i ] <> array2 [ i ] then
38189: LD_VAR 0 1
38193: PUSH
38194: LD_VAR 0 4
38198: ARRAY
38199: PUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_VAR 0 4
38209: ARRAY
38210: NONEQUAL
38211: IFFALSE 38223
// begin result := false ;
38213: LD_ADDR_VAR 0 3
38217: PUSH
38218: LD_INT 0
38220: ST_TO_ADDR
// break ;
38221: GO 38225
// end ;
38223: GO 38186
38225: POP
38226: POP
// end ;
38227: LD_VAR 0 3
38231: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38232: LD_INT 0
38234: PPUSH
38235: PPUSH
38236: PPUSH
// pom := GetBase ( fac ) ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 274
38251: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38252: LD_ADDR_VAR 0 4
38256: PUSH
38257: LD_VAR 0 2
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: LD_VAR 0 2
38270: PUSH
38271: LD_INT 2
38273: ARRAY
38274: PPUSH
38275: LD_VAR 0 2
38279: PUSH
38280: LD_INT 3
38282: ARRAY
38283: PPUSH
38284: LD_VAR 0 2
38288: PUSH
38289: LD_INT 4
38291: ARRAY
38292: PPUSH
38293: CALL_OW 449
38297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38298: LD_ADDR_VAR 0 3
38302: PUSH
38303: LD_VAR 0 5
38307: PPUSH
38308: LD_INT 1
38310: PPUSH
38311: CALL_OW 275
38315: PUSH
38316: LD_VAR 0 4
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: GREATEREQUAL
38325: PUSH
38326: LD_VAR 0 5
38330: PPUSH
38331: LD_INT 2
38333: PPUSH
38334: CALL_OW 275
38338: PUSH
38339: LD_VAR 0 4
38343: PUSH
38344: LD_INT 2
38346: ARRAY
38347: GREATEREQUAL
38348: AND
38349: PUSH
38350: LD_VAR 0 5
38354: PPUSH
38355: LD_INT 3
38357: PPUSH
38358: CALL_OW 275
38362: PUSH
38363: LD_VAR 0 4
38367: PUSH
38368: LD_INT 3
38370: ARRAY
38371: GREATEREQUAL
38372: AND
38373: ST_TO_ADDR
// end ;
38374: LD_VAR 0 3
38378: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38379: LD_INT 0
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
// pom := GetBase ( building ) ;
38385: LD_ADDR_VAR 0 3
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 274
38399: ST_TO_ADDR
// if not pom then
38400: LD_VAR 0 3
38404: NOT
38405: IFFALSE 38409
// exit ;
38407: GO 38579
// btype := GetBType ( building ) ;
38409: LD_ADDR_VAR 0 5
38413: PUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 266
38423: ST_TO_ADDR
// if btype = b_armoury then
38424: LD_VAR 0 5
38428: PUSH
38429: LD_INT 4
38431: EQUAL
38432: IFFALSE 38442
// btype := b_barracks ;
38434: LD_ADDR_VAR 0 5
38438: PUSH
38439: LD_INT 5
38441: ST_TO_ADDR
// if btype = b_depot then
38442: LD_VAR 0 5
38446: PUSH
38447: LD_INT 0
38449: EQUAL
38450: IFFALSE 38460
// btype := b_warehouse ;
38452: LD_ADDR_VAR 0 5
38456: PUSH
38457: LD_INT 1
38459: ST_TO_ADDR
// if btype = b_workshop then
38460: LD_VAR 0 5
38464: PUSH
38465: LD_INT 2
38467: EQUAL
38468: IFFALSE 38478
// btype := b_factory ;
38470: LD_ADDR_VAR 0 5
38474: PUSH
38475: LD_INT 3
38477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_VAR 0 5
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 248
38497: PPUSH
38498: CALL_OW 450
38502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38503: LD_ADDR_VAR 0 2
38507: PUSH
38508: LD_VAR 0 3
38512: PPUSH
38513: LD_INT 1
38515: PPUSH
38516: CALL_OW 275
38520: PUSH
38521: LD_VAR 0 4
38525: PUSH
38526: LD_INT 1
38528: ARRAY
38529: GREATEREQUAL
38530: PUSH
38531: LD_VAR 0 3
38535: PPUSH
38536: LD_INT 2
38538: PPUSH
38539: CALL_OW 275
38543: PUSH
38544: LD_VAR 0 4
38548: PUSH
38549: LD_INT 2
38551: ARRAY
38552: GREATEREQUAL
38553: AND
38554: PUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: LD_INT 3
38562: PPUSH
38563: CALL_OW 275
38567: PUSH
38568: LD_VAR 0 4
38572: PUSH
38573: LD_INT 3
38575: ARRAY
38576: GREATEREQUAL
38577: AND
38578: ST_TO_ADDR
// end ;
38579: LD_VAR 0 2
38583: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38584: LD_INT 0
38586: PPUSH
38587: PPUSH
38588: PPUSH
// pom := GetBase ( building ) ;
38589: LD_ADDR_VAR 0 4
38593: PUSH
38594: LD_VAR 0 1
38598: PPUSH
38599: CALL_OW 274
38603: ST_TO_ADDR
// if not pom then
38604: LD_VAR 0 4
38608: NOT
38609: IFFALSE 38613
// exit ;
38611: GO 38714
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38613: LD_ADDR_VAR 0 5
38617: PUSH
38618: LD_VAR 0 2
38622: PPUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 248
38632: PPUSH
38633: CALL_OW 450
38637: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38638: LD_ADDR_VAR 0 3
38642: PUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: LD_INT 1
38650: PPUSH
38651: CALL_OW 275
38655: PUSH
38656: LD_VAR 0 5
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: GREATEREQUAL
38665: PUSH
38666: LD_VAR 0 4
38670: PPUSH
38671: LD_INT 2
38673: PPUSH
38674: CALL_OW 275
38678: PUSH
38679: LD_VAR 0 5
38683: PUSH
38684: LD_INT 2
38686: ARRAY
38687: GREATEREQUAL
38688: AND
38689: PUSH
38690: LD_VAR 0 4
38694: PPUSH
38695: LD_INT 3
38697: PPUSH
38698: CALL_OW 275
38702: PUSH
38703: LD_VAR 0 5
38707: PUSH
38708: LD_INT 3
38710: ARRAY
38711: GREATEREQUAL
38712: AND
38713: ST_TO_ADDR
// end ;
38714: LD_VAR 0 3
38718: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38719: LD_INT 0
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
// result := false ;
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_INT 0
38739: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38740: LD_VAR 0 5
38744: NOT
38745: PUSH
38746: LD_VAR 0 1
38750: NOT
38751: OR
38752: PUSH
38753: LD_VAR 0 2
38757: NOT
38758: OR
38759: PUSH
38760: LD_VAR 0 3
38764: NOT
38765: OR
38766: IFFALSE 38770
// exit ;
38768: GO 39584
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38770: LD_ADDR_VAR 0 14
38774: PUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: LD_VAR 0 2
38784: PPUSH
38785: LD_VAR 0 3
38789: PPUSH
38790: LD_VAR 0 4
38794: PPUSH
38795: LD_VAR 0 5
38799: PUSH
38800: LD_INT 1
38802: ARRAY
38803: PPUSH
38804: CALL_OW 248
38808: PPUSH
38809: LD_INT 0
38811: PPUSH
38812: CALL 40817 0 6
38816: ST_TO_ADDR
// if not hexes then
38817: LD_VAR 0 14
38821: NOT
38822: IFFALSE 38826
// exit ;
38824: GO 39584
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38826: LD_ADDR_VAR 0 17
38830: PUSH
38831: LD_VAR 0 5
38835: PPUSH
38836: LD_INT 22
38838: PUSH
38839: LD_VAR 0 13
38843: PPUSH
38844: CALL_OW 255
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 30
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PPUSH
38885: CALL_OW 72
38889: ST_TO_ADDR
// for i = 1 to hexes do
38890: LD_ADDR_VAR 0 9
38894: PUSH
38895: DOUBLE
38896: LD_INT 1
38898: DEC
38899: ST_TO_ADDR
38900: LD_VAR 0 14
38904: PUSH
38905: FOR_TO
38906: IFFALSE 39582
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38908: LD_ADDR_VAR 0 13
38912: PUSH
38913: LD_VAR 0 14
38917: PUSH
38918: LD_VAR 0 9
38922: ARRAY
38923: PUSH
38924: LD_INT 1
38926: ARRAY
38927: PPUSH
38928: LD_VAR 0 14
38932: PUSH
38933: LD_VAR 0 9
38937: ARRAY
38938: PUSH
38939: LD_INT 2
38941: ARRAY
38942: PPUSH
38943: CALL_OW 428
38947: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38948: LD_VAR 0 14
38952: PUSH
38953: LD_VAR 0 9
38957: ARRAY
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: PPUSH
38963: LD_VAR 0 14
38967: PUSH
38968: LD_VAR 0 9
38972: ARRAY
38973: PUSH
38974: LD_INT 2
38976: ARRAY
38977: PPUSH
38978: CALL_OW 351
38982: PUSH
38983: LD_VAR 0 14
38987: PUSH
38988: LD_VAR 0 9
38992: ARRAY
38993: PUSH
38994: LD_INT 1
38996: ARRAY
38997: PPUSH
38998: LD_VAR 0 14
39002: PUSH
39003: LD_VAR 0 9
39007: ARRAY
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: PPUSH
39013: CALL_OW 488
39017: NOT
39018: OR
39019: PUSH
39020: LD_VAR 0 13
39024: PPUSH
39025: CALL_OW 247
39029: PUSH
39030: LD_INT 3
39032: EQUAL
39033: OR
39034: IFFALSE 39040
// exit ;
39036: POP
39037: POP
39038: GO 39584
// if not tmp then
39040: LD_VAR 0 13
39044: NOT
39045: IFFALSE 39049
// continue ;
39047: GO 38905
// result := true ;
39049: LD_ADDR_VAR 0 8
39053: PUSH
39054: LD_INT 1
39056: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39057: LD_VAR 0 6
39061: PUSH
39062: LD_VAR 0 13
39066: PPUSH
39067: CALL_OW 247
39071: PUSH
39072: LD_INT 2
39074: EQUAL
39075: AND
39076: PUSH
39077: LD_VAR 0 13
39081: PPUSH
39082: CALL_OW 263
39086: PUSH
39087: LD_INT 1
39089: EQUAL
39090: AND
39091: IFFALSE 39255
// begin if IsDrivenBy ( tmp ) then
39093: LD_VAR 0 13
39097: PPUSH
39098: CALL_OW 311
39102: IFFALSE 39106
// continue ;
39104: GO 38905
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39106: LD_VAR 0 6
39110: PPUSH
39111: LD_INT 3
39113: PUSH
39114: LD_INT 60
39116: PUSH
39117: EMPTY
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: LD_INT 55
39129: PUSH
39130: EMPTY
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PPUSH
39141: CALL_OW 72
39145: IFFALSE 39253
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39147: LD_ADDR_VAR 0 18
39151: PUSH
39152: LD_VAR 0 6
39156: PPUSH
39157: LD_INT 3
39159: PUSH
39160: LD_INT 60
39162: PUSH
39163: EMPTY
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: LD_INT 55
39175: PUSH
39176: EMPTY
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PPUSH
39187: CALL_OW 72
39191: PUSH
39192: LD_INT 1
39194: ARRAY
39195: ST_TO_ADDR
// if IsInUnit ( driver ) then
39196: LD_VAR 0 18
39200: PPUSH
39201: CALL_OW 310
39205: IFFALSE 39216
// ComExit ( driver ) ;
39207: LD_VAR 0 18
39211: PPUSH
39212: CALL 64578 0 1
// AddComEnterUnit ( driver , tmp ) ;
39216: LD_VAR 0 18
39220: PPUSH
39221: LD_VAR 0 13
39225: PPUSH
39226: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39230: LD_VAR 0 18
39234: PPUSH
39235: LD_VAR 0 7
39239: PPUSH
39240: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39244: LD_VAR 0 18
39248: PPUSH
39249: CALL_OW 181
// end ; continue ;
39253: GO 38905
// end ; if not cleaners or not tmp in cleaners then
39255: LD_VAR 0 6
39259: NOT
39260: PUSH
39261: LD_VAR 0 13
39265: PUSH
39266: LD_VAR 0 6
39270: IN
39271: NOT
39272: OR
39273: IFFALSE 39580
// begin if dep then
39275: LD_VAR 0 17
39279: IFFALSE 39415
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39281: LD_ADDR_VAR 0 16
39285: PUSH
39286: LD_VAR 0 17
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PPUSH
39295: CALL_OW 250
39299: PPUSH
39300: LD_VAR 0 17
39304: PUSH
39305: LD_INT 1
39307: ARRAY
39308: PPUSH
39309: CALL_OW 254
39313: PPUSH
39314: LD_INT 5
39316: PPUSH
39317: CALL_OW 272
39321: PUSH
39322: LD_VAR 0 17
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: CALL_OW 251
39335: PPUSH
39336: LD_VAR 0 17
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PPUSH
39345: CALL_OW 254
39349: PPUSH
39350: LD_INT 5
39352: PPUSH
39353: CALL_OW 273
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39362: LD_VAR 0 16
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PPUSH
39371: LD_VAR 0 16
39375: PUSH
39376: LD_INT 2
39378: ARRAY
39379: PPUSH
39380: CALL_OW 488
39384: IFFALSE 39415
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39386: LD_VAR 0 13
39390: PPUSH
39391: LD_VAR 0 16
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PPUSH
39400: LD_VAR 0 16
39404: PUSH
39405: LD_INT 2
39407: ARRAY
39408: PPUSH
39409: CALL_OW 111
// continue ;
39413: GO 38905
// end ; end ; r := GetDir ( tmp ) ;
39415: LD_ADDR_VAR 0 15
39419: PUSH
39420: LD_VAR 0 13
39424: PPUSH
39425: CALL_OW 254
39429: ST_TO_ADDR
// if r = 5 then
39430: LD_VAR 0 15
39434: PUSH
39435: LD_INT 5
39437: EQUAL
39438: IFFALSE 39448
// r := 0 ;
39440: LD_ADDR_VAR 0 15
39444: PUSH
39445: LD_INT 0
39447: ST_TO_ADDR
// for j = r to 5 do
39448: LD_ADDR_VAR 0 10
39452: PUSH
39453: DOUBLE
39454: LD_VAR 0 15
39458: DEC
39459: ST_TO_ADDR
39460: LD_INT 5
39462: PUSH
39463: FOR_TO
39464: IFFALSE 39578
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39466: LD_ADDR_VAR 0 11
39470: PUSH
39471: LD_VAR 0 13
39475: PPUSH
39476: CALL_OW 250
39480: PPUSH
39481: LD_VAR 0 10
39485: PPUSH
39486: LD_INT 2
39488: PPUSH
39489: CALL_OW 272
39493: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39494: LD_ADDR_VAR 0 12
39498: PUSH
39499: LD_VAR 0 13
39503: PPUSH
39504: CALL_OW 251
39508: PPUSH
39509: LD_VAR 0 10
39513: PPUSH
39514: LD_INT 2
39516: PPUSH
39517: CALL_OW 273
39521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39522: LD_VAR 0 11
39526: PPUSH
39527: LD_VAR 0 12
39531: PPUSH
39532: CALL_OW 488
39536: PUSH
39537: LD_VAR 0 11
39541: PPUSH
39542: LD_VAR 0 12
39546: PPUSH
39547: CALL_OW 428
39551: NOT
39552: AND
39553: IFFALSE 39576
// begin ComMoveXY ( tmp , _x , _y ) ;
39555: LD_VAR 0 13
39559: PPUSH
39560: LD_VAR 0 11
39564: PPUSH
39565: LD_VAR 0 12
39569: PPUSH
39570: CALL_OW 111
// break ;
39574: GO 39578
// end ; end ;
39576: GO 39463
39578: POP
39579: POP
// end ; end ;
39580: GO 38905
39582: POP
39583: POP
// end ;
39584: LD_VAR 0 8
39588: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39589: LD_INT 0
39591: PPUSH
// result := true ;
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_INT 1
39599: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39600: LD_VAR 0 2
39604: PUSH
39605: LD_INT 24
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39619
39611: LD_INT 33
39613: DOUBLE
39614: EQUAL
39615: IFTRUE 39619
39617: GO 39644
39619: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_INT 32
39627: PPUSH
39628: LD_VAR 0 1
39632: PPUSH
39633: CALL_OW 321
39637: PUSH
39638: LD_INT 2
39640: EQUAL
39641: ST_TO_ADDR
39642: GO 39960
39644: LD_INT 20
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39677
39652: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 6
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 321
39670: PUSH
39671: LD_INT 2
39673: EQUAL
39674: ST_TO_ADDR
39675: GO 39960
39677: LD_INT 22
39679: DOUBLE
39680: EQUAL
39681: IFTRUE 39691
39683: LD_INT 36
39685: DOUBLE
39686: EQUAL
39687: IFTRUE 39691
39689: GO 39716
39691: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39692: LD_ADDR_VAR 0 3
39696: PUSH
39697: LD_INT 15
39699: PPUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 321
39709: PUSH
39710: LD_INT 2
39712: EQUAL
39713: ST_TO_ADDR
39714: GO 39960
39716: LD_INT 30
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 39749
39724: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_INT 20
39732: PPUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 321
39742: PUSH
39743: LD_INT 2
39745: EQUAL
39746: ST_TO_ADDR
39747: GO 39960
39749: LD_INT 28
39751: DOUBLE
39752: EQUAL
39753: IFTRUE 39763
39755: LD_INT 21
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39763
39761: GO 39788
39763: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_INT 21
39771: PPUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 321
39781: PUSH
39782: LD_INT 2
39784: EQUAL
39785: ST_TO_ADDR
39786: GO 39960
39788: LD_INT 16
39790: DOUBLE
39791: EQUAL
39792: IFTRUE 39796
39794: GO 39821
39796: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39797: LD_ADDR_VAR 0 3
39801: PUSH
39802: LD_INT 84
39804: PPUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 321
39814: PUSH
39815: LD_INT 2
39817: EQUAL
39818: ST_TO_ADDR
39819: GO 39960
39821: LD_INT 19
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39835
39827: LD_INT 23
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39860
39835: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: LD_INT 83
39843: PPUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 321
39853: PUSH
39854: LD_INT 2
39856: EQUAL
39857: ST_TO_ADDR
39858: GO 39960
39860: LD_INT 17
39862: DOUBLE
39863: EQUAL
39864: IFTRUE 39868
39866: GO 39893
39868: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_INT 39
39876: PPUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 321
39886: PUSH
39887: LD_INT 2
39889: EQUAL
39890: ST_TO_ADDR
39891: GO 39960
39893: LD_INT 18
39895: DOUBLE
39896: EQUAL
39897: IFTRUE 39901
39899: GO 39926
39901: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_INT 40
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 321
39919: PUSH
39920: LD_INT 2
39922: EQUAL
39923: ST_TO_ADDR
39924: GO 39960
39926: LD_INT 27
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 39959
39934: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39935: LD_ADDR_VAR 0 3
39939: PUSH
39940: LD_INT 35
39942: PPUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 321
39952: PUSH
39953: LD_INT 2
39955: EQUAL
39956: ST_TO_ADDR
39957: GO 39960
39959: POP
// end ;
39960: LD_VAR 0 3
39964: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39965: LD_INT 0
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
// result := false ;
39978: LD_ADDR_VAR 0 6
39982: PUSH
39983: LD_INT 0
39985: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39986: LD_VAR 0 1
39990: NOT
39991: PUSH
39992: LD_VAR 0 1
39996: PPUSH
39997: CALL_OW 266
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: IN
40012: NOT
40013: OR
40014: PUSH
40015: LD_VAR 0 2
40019: NOT
40020: OR
40021: PUSH
40022: LD_VAR 0 5
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: LD_INT 5
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: IN
40053: NOT
40054: OR
40055: PUSH
40056: LD_VAR 0 3
40060: PPUSH
40061: LD_VAR 0 4
40065: PPUSH
40066: CALL_OW 488
40070: NOT
40071: OR
40072: IFFALSE 40076
// exit ;
40074: GO 40812
// side := GetSide ( depot ) ;
40076: LD_ADDR_VAR 0 9
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 255
40090: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40091: LD_VAR 0 9
40095: PPUSH
40096: LD_VAR 0 2
40100: PPUSH
40101: CALL 39589 0 2
40105: NOT
40106: IFFALSE 40110
// exit ;
40108: GO 40812
// pom := GetBase ( depot ) ;
40110: LD_ADDR_VAR 0 10
40114: PUSH
40115: LD_VAR 0 1
40119: PPUSH
40120: CALL_OW 274
40124: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40125: LD_ADDR_VAR 0 11
40129: PUSH
40130: LD_VAR 0 2
40134: PPUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 248
40144: PPUSH
40145: CALL_OW 450
40149: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40150: LD_VAR 0 10
40154: PPUSH
40155: LD_INT 1
40157: PPUSH
40158: CALL_OW 275
40162: PUSH
40163: LD_VAR 0 11
40167: PUSH
40168: LD_INT 1
40170: ARRAY
40171: GREATEREQUAL
40172: PUSH
40173: LD_VAR 0 10
40177: PPUSH
40178: LD_INT 2
40180: PPUSH
40181: CALL_OW 275
40185: PUSH
40186: LD_VAR 0 11
40190: PUSH
40191: LD_INT 2
40193: ARRAY
40194: GREATEREQUAL
40195: AND
40196: PUSH
40197: LD_VAR 0 10
40201: PPUSH
40202: LD_INT 3
40204: PPUSH
40205: CALL_OW 275
40209: PUSH
40210: LD_VAR 0 11
40214: PUSH
40215: LD_INT 3
40217: ARRAY
40218: GREATEREQUAL
40219: AND
40220: NOT
40221: IFFALSE 40225
// exit ;
40223: GO 40812
// if GetBType ( depot ) = b_depot then
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 266
40234: PUSH
40235: LD_INT 0
40237: EQUAL
40238: IFFALSE 40250
// dist := 28 else
40240: LD_ADDR_VAR 0 14
40244: PUSH
40245: LD_INT 28
40247: ST_TO_ADDR
40248: GO 40258
// dist := 36 ;
40250: LD_ADDR_VAR 0 14
40254: PUSH
40255: LD_INT 36
40257: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40258: LD_VAR 0 1
40262: PPUSH
40263: LD_VAR 0 3
40267: PPUSH
40268: LD_VAR 0 4
40272: PPUSH
40273: CALL_OW 297
40277: PUSH
40278: LD_VAR 0 14
40282: GREATER
40283: IFFALSE 40287
// exit ;
40285: GO 40812
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40287: LD_ADDR_VAR 0 12
40291: PUSH
40292: LD_VAR 0 2
40296: PPUSH
40297: LD_VAR 0 3
40301: PPUSH
40302: LD_VAR 0 4
40306: PPUSH
40307: LD_VAR 0 5
40311: PPUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: CALL_OW 248
40321: PPUSH
40322: LD_INT 0
40324: PPUSH
40325: CALL 40817 0 6
40329: ST_TO_ADDR
// if not hexes then
40330: LD_VAR 0 12
40334: NOT
40335: IFFALSE 40339
// exit ;
40337: GO 40812
// hex := GetHexInfo ( x , y ) ;
40339: LD_ADDR_VAR 0 15
40343: PUSH
40344: LD_VAR 0 3
40348: PPUSH
40349: LD_VAR 0 4
40353: PPUSH
40354: CALL_OW 546
40358: ST_TO_ADDR
// if hex [ 1 ] then
40359: LD_VAR 0 15
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: IFFALSE 40371
// exit ;
40369: GO 40812
// height := hex [ 2 ] ;
40371: LD_ADDR_VAR 0 13
40375: PUSH
40376: LD_VAR 0 15
40380: PUSH
40381: LD_INT 2
40383: ARRAY
40384: ST_TO_ADDR
// for i = 1 to hexes do
40385: LD_ADDR_VAR 0 7
40389: PUSH
40390: DOUBLE
40391: LD_INT 1
40393: DEC
40394: ST_TO_ADDR
40395: LD_VAR 0 12
40399: PUSH
40400: FOR_TO
40401: IFFALSE 40731
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40403: LD_VAR 0 12
40407: PUSH
40408: LD_VAR 0 7
40412: ARRAY
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: PPUSH
40418: LD_VAR 0 12
40422: PUSH
40423: LD_VAR 0 7
40427: ARRAY
40428: PUSH
40429: LD_INT 2
40431: ARRAY
40432: PPUSH
40433: CALL_OW 488
40437: NOT
40438: PUSH
40439: LD_VAR 0 12
40443: PUSH
40444: LD_VAR 0 7
40448: ARRAY
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PPUSH
40454: LD_VAR 0 12
40458: PUSH
40459: LD_VAR 0 7
40463: ARRAY
40464: PUSH
40465: LD_INT 2
40467: ARRAY
40468: PPUSH
40469: CALL_OW 428
40473: PUSH
40474: LD_INT 0
40476: GREATER
40477: OR
40478: PUSH
40479: LD_VAR 0 12
40483: PUSH
40484: LD_VAR 0 7
40488: ARRAY
40489: PUSH
40490: LD_INT 1
40492: ARRAY
40493: PPUSH
40494: LD_VAR 0 12
40498: PUSH
40499: LD_VAR 0 7
40503: ARRAY
40504: PUSH
40505: LD_INT 2
40507: ARRAY
40508: PPUSH
40509: CALL_OW 351
40513: OR
40514: IFFALSE 40520
// exit ;
40516: POP
40517: POP
40518: GO 40812
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40520: LD_ADDR_VAR 0 8
40524: PUSH
40525: LD_VAR 0 12
40529: PUSH
40530: LD_VAR 0 7
40534: ARRAY
40535: PUSH
40536: LD_INT 1
40538: ARRAY
40539: PPUSH
40540: LD_VAR 0 12
40544: PUSH
40545: LD_VAR 0 7
40549: ARRAY
40550: PUSH
40551: LD_INT 2
40553: ARRAY
40554: PPUSH
40555: CALL_OW 546
40559: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40560: LD_VAR 0 8
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PUSH
40569: LD_VAR 0 8
40573: PUSH
40574: LD_INT 2
40576: ARRAY
40577: PUSH
40578: LD_VAR 0 13
40582: PUSH
40583: LD_INT 2
40585: PLUS
40586: GREATER
40587: OR
40588: PUSH
40589: LD_VAR 0 8
40593: PUSH
40594: LD_INT 2
40596: ARRAY
40597: PUSH
40598: LD_VAR 0 13
40602: PUSH
40603: LD_INT 2
40605: MINUS
40606: LESS
40607: OR
40608: PUSH
40609: LD_VAR 0 8
40613: PUSH
40614: LD_INT 3
40616: ARRAY
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 8
40623: PUSH
40624: LD_INT 9
40626: PUSH
40627: LD_INT 10
40629: PUSH
40630: LD_INT 11
40632: PUSH
40633: LD_INT 12
40635: PUSH
40636: LD_INT 13
40638: PUSH
40639: LD_INT 16
40641: PUSH
40642: LD_INT 17
40644: PUSH
40645: LD_INT 18
40647: PUSH
40648: LD_INT 19
40650: PUSH
40651: LD_INT 20
40653: PUSH
40654: LD_INT 21
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: IN
40672: NOT
40673: OR
40674: PUSH
40675: LD_VAR 0 8
40679: PUSH
40680: LD_INT 5
40682: ARRAY
40683: NOT
40684: OR
40685: PUSH
40686: LD_VAR 0 8
40690: PUSH
40691: LD_INT 6
40693: ARRAY
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 7
40703: PUSH
40704: LD_INT 9
40706: PUSH
40707: LD_INT 10
40709: PUSH
40710: LD_INT 11
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: IN
40721: NOT
40722: OR
40723: IFFALSE 40729
// exit ;
40725: POP
40726: POP
40727: GO 40812
// end ;
40729: GO 40400
40731: POP
40732: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40733: LD_VAR 0 9
40737: PPUSH
40738: LD_VAR 0 3
40742: PPUSH
40743: LD_VAR 0 4
40747: PPUSH
40748: LD_INT 20
40750: PPUSH
40751: CALL 32764 0 4
40755: PUSH
40756: LD_INT 4
40758: ARRAY
40759: IFFALSE 40763
// exit ;
40761: GO 40812
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40763: LD_VAR 0 2
40767: PUSH
40768: LD_INT 29
40770: PUSH
40771: LD_INT 30
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: IN
40778: PUSH
40779: LD_VAR 0 3
40783: PPUSH
40784: LD_VAR 0 4
40788: PPUSH
40789: LD_VAR 0 9
40793: PPUSH
40794: CALL_OW 440
40798: NOT
40799: AND
40800: IFFALSE 40804
// exit ;
40802: GO 40812
// result := true ;
40804: LD_ADDR_VAR 0 6
40808: PUSH
40809: LD_INT 1
40811: ST_TO_ADDR
// end ;
40812: LD_VAR 0 6
40816: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40817: LD_INT 0
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
// result = [ ] ;
40877: LD_ADDR_VAR 0 7
40881: PUSH
40882: EMPTY
40883: ST_TO_ADDR
// temp_list = [ ] ;
40884: LD_ADDR_VAR 0 9
40888: PUSH
40889: EMPTY
40890: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40891: LD_VAR 0 4
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 3
40907: PUSH
40908: LD_INT 4
40910: PUSH
40911: LD_INT 5
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: IN
40922: NOT
40923: PUSH
40924: LD_VAR 0 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: IN
40939: PUSH
40940: LD_VAR 0 5
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: IN
40959: NOT
40960: AND
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 59357
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40966: LD_VAR 0 1
40970: PUSH
40971: LD_INT 6
40973: PUSH
40974: LD_INT 7
40976: PUSH
40977: LD_INT 8
40979: PUSH
40980: LD_INT 13
40982: PUSH
40983: LD_INT 12
40985: PUSH
40986: LD_INT 15
40988: PUSH
40989: LD_INT 11
40991: PUSH
40992: LD_INT 14
40994: PUSH
40995: LD_INT 10
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: IN
41009: IFFALSE 41019
// btype = b_lab ;
41011: LD_ADDR_VAR 0 1
41015: PUSH
41016: LD_INT 6
41018: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41019: LD_VAR 0 6
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: IN
41038: NOT
41039: PUSH
41040: LD_VAR 0 1
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 6
41059: PUSH
41060: LD_INT 36
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: LD_INT 5
41068: PUSH
41069: LD_INT 31
41071: PUSH
41072: LD_INT 32
41074: PUSH
41075: LD_INT 33
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: IN
41091: NOT
41092: PUSH
41093: LD_VAR 0 6
41097: PUSH
41098: LD_INT 1
41100: EQUAL
41101: AND
41102: OR
41103: PUSH
41104: LD_VAR 0 1
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: IN
41119: NOT
41120: PUSH
41121: LD_VAR 0 6
41125: PUSH
41126: LD_INT 2
41128: EQUAL
41129: AND
41130: OR
41131: IFFALSE 41141
// mode = 0 ;
41133: LD_ADDR_VAR 0 6
41137: PUSH
41138: LD_INT 0
41140: ST_TO_ADDR
// case mode of 0 :
41141: LD_VAR 0 6
41145: PUSH
41146: LD_INT 0
41148: DOUBLE
41149: EQUAL
41150: IFTRUE 41154
41152: GO 52607
41154: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41155: LD_ADDR_VAR 0 11
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41348: LD_ADDR_VAR 0 12
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 3
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41544: LD_ADDR_VAR 0 13
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 2
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 3
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 3
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: NEG
41716: PUSH
41717: LD_INT 3
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41743: LD_ADDR_VAR 0 14
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41939: LD_ADDR_VAR 0 15
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 3
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42132: LD_ADDR_VAR 0 16
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 3
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42325: LD_ADDR_VAR 0 17
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42555: LD_ADDR_VAR 0 18
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 19
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43015: LD_ADDR_VAR 0 20
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43245: LD_ADDR_VAR 0 21
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43475: LD_ADDR_VAR 0 22
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43705: LD_ADDR_VAR 0 23
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43985: LD_ADDR_VAR 0 24
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44261: LD_ADDR_VAR 0 25
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 3
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44535: LD_ADDR_VAR 0 26
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44811: LD_ADDR_VAR 0 27
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45091: LD_ADDR_VAR 0 28
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45373: LD_ADDR_VAR 0 29
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45652: LD_ADDR_VAR 0 30
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 3
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45930: LD_ADDR_VAR 0 31
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46208: LD_ADDR_VAR 0 32
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46486: LD_ADDR_VAR 0 33
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 3
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46765: LD_ADDR_VAR 0 34
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47045: LD_ADDR_VAR 0 35
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47157: LD_ADDR_VAR 0 36
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47269: LD_ADDR_VAR 0 37
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47381: LD_ADDR_VAR 0 38
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47493: LD_ADDR_VAR 0 39
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47605: LD_ADDR_VAR 0 40
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47717: LD_ADDR_VAR 0 41
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 3
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48067: LD_ADDR_VAR 0 42
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 3
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48417: LD_ADDR_VAR 0 43
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 3
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 3
48713: NEG
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48765: LD_ADDR_VAR 0 44
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49115: LD_ADDR_VAR 0 45
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 3
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 3
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49465: LD_ADDR_VAR 0 46
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49813: LD_ADDR_VAR 0 47
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49964: LD_ADDR_VAR 0 48
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50111: LD_ADDR_VAR 0 49
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50255: LD_ADDR_VAR 0 50
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50399: LD_ADDR_VAR 0 51
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50546: LD_ADDR_VAR 0 52
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50697: LD_ADDR_VAR 0 53
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50927: LD_ADDR_VAR 0 54
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51157: LD_ADDR_VAR 0 55
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51387: LD_ADDR_VAR 0 56
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51617: LD_ADDR_VAR 0 57
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51847: LD_ADDR_VAR 0 58
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52077: LD_ADDR_VAR 0 59
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52165: LD_ADDR_VAR 0 60
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52253: LD_ADDR_VAR 0 61
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52341: LD_ADDR_VAR 0 62
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52429: LD_ADDR_VAR 0 63
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52517: LD_ADDR_VAR 0 64
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// end ; 1 :
52605: GO 58502
52607: LD_INT 1
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52615
52613: GO 55238
52615: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52616: LD_ADDR_VAR 0 11
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52660: LD_ADDR_VAR 0 12
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52701: LD_ADDR_VAR 0 13
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: LD_INT 3
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52741: LD_ADDR_VAR 0 14
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52782: LD_ADDR_VAR 0 15
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52826: LD_ADDR_VAR 0 16
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52872: LD_ADDR_VAR 0 17
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 3
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52916: LD_ADDR_VAR 0 18
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52957: LD_ADDR_VAR 0 19
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52997: LD_ADDR_VAR 0 20
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53038: LD_ADDR_VAR 0 21
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53082: LD_ADDR_VAR 0 22
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: LD_INT 3
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53128: LD_ADDR_VAR 0 23
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 4
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53172: LD_ADDR_VAR 0 24
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 4
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53213: LD_ADDR_VAR 0 25
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53253: LD_ADDR_VAR 0 26
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53294: LD_ADDR_VAR 0 27
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 4
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53338: LD_ADDR_VAR 0 28
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 4
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 4
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53384: LD_ADDR_VAR 0 29
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 4
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 4
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 5
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 4
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 6
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 6
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 5
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53539: LD_ADDR_VAR 0 30
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 4
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 5
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 5
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 5
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 6
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 6
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53682: LD_ADDR_VAR 0 31
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 4
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 5
53749: PUSH
53750: LD_INT 4
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: LD_INT 5
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 6
53779: PUSH
53780: LD_INT 5
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 6
53789: PUSH
53790: LD_INT 6
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 5
53799: PUSH
53800: LD_INT 6
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53821: LD_ADDR_VAR 0 32
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 4
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 5
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 5
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 6
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 6
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53964: LD_ADDR_VAR 0 33
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 4
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 4
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 4
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 5
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 5
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 5
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 6
54084: NEG
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 6
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54119: LD_ADDR_VAR 0 34
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 3
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 4
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 4
54174: NEG
54175: PUSH
54176: LD_INT 3
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 4
54186: NEG
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 4
54198: NEG
54199: PUSH
54200: LD_INT 5
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 5
54210: NEG
54211: PUSH
54212: LD_INT 4
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: LD_INT 5
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 5
54234: NEG
54235: PUSH
54236: LD_INT 6
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 6
54246: NEG
54247: PUSH
54248: LD_INT 5
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 6
54258: NEG
54259: PUSH
54260: LD_INT 6
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54282: LD_ADDR_VAR 0 41
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54326: LD_ADDR_VAR 0 42
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54367: LD_ADDR_VAR 0 43
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54407: LD_ADDR_VAR 0 44
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54448: LD_ADDR_VAR 0 45
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54492: LD_ADDR_VAR 0 46
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54538: LD_ADDR_VAR 0 47
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54571: LD_ADDR_VAR 0 48
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54602: LD_ADDR_VAR 0 49
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54631: LD_ADDR_VAR 0 50
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54660: LD_ADDR_VAR 0 51
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54691: LD_ADDR_VAR 0 52
54695: PUSH
54696: LD_INT 3
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54724: LD_ADDR_VAR 0 53
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54768: LD_ADDR_VAR 0 54
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54809: LD_ADDR_VAR 0 55
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54849: LD_ADDR_VAR 0 56
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54890: LD_ADDR_VAR 0 57
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54934: LD_ADDR_VAR 0 58
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54980: LD_ADDR_VAR 0 59
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55024: LD_ADDR_VAR 0 60
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55065: LD_ADDR_VAR 0 61
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55105: LD_ADDR_VAR 0 62
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55146: LD_ADDR_VAR 0 63
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55190: LD_ADDR_VAR 0 64
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// end ; 2 :
55236: GO 58502
55238: LD_INT 2
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55246
55244: GO 58501
55246: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55247: LD_ADDR_VAR 0 29
55251: PUSH
55252: LD_INT 4
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 4
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 5
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: LD_INT 4
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 4
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 4
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 4
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 5
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 5
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 4
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 4
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 4
55632: NEG
55633: PUSH
55634: LD_INT 4
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 4
55644: NEG
55645: PUSH
55646: LD_INT 5
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: LD_INT 4
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 4
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 5
55692: NEG
55693: PUSH
55694: LD_INT 4
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: NEG
55705: PUSH
55706: LD_INT 5
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 5
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: NEG
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55785: LD_ADDR_VAR 0 30
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: LD_INT 4
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 5
55822: PUSH
55823: LD_INT 5
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: LD_INT 5
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 5
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 5
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 4
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 4
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 4
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 5
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 5
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 5
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: LD_INT 4
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 4
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 5
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 4
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 4
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 5
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 5
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56332: LD_ADDR_VAR 0 31
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 5
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: NEG
56547: PUSH
56548: LD_INT 5
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 4
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: NEG
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 5
56606: NEG
56607: PUSH
56608: LD_INT 5
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 5
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 5
56630: NEG
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 4
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 5
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56882: LD_ADDR_VAR 0 32
56886: PUSH
56887: LD_INT 4
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 4
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 4
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 5
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 5
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 4
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: LD_INT 4
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 5
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 5
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 5
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 4
57294: PUSH
57295: LD_INT 4
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 4
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 5
57314: PUSH
57315: LD_INT 4
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 5
57324: PUSH
57325: LD_INT 5
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 4
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 3
57374: PUSH
57375: LD_INT 5
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57429: LD_ADDR_VAR 0 33
57433: PUSH
57434: LD_INT 4
57436: NEG
57437: PUSH
57438: LD_INT 4
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 5
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 4
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: LD_INT 4
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: LD_INT 5
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: LD_INT 5
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 5
57532: NEG
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 4
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 5
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 5
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 5
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: PUSH
57770: LD_INT 4
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 4
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 4
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 4
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 5
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 4
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 5
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57967: LD_ADDR_VAR 0 34
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 5
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 4
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 5
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 5
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 4
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 5
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: LD_INT 5
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 5
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 5
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 4
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 4
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: NEG
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 5
58408: NEG
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 5
58419: NEG
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 5
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// end ; end ;
58499: GO 58502
58501: POP
// case btype of b_depot , b_warehouse :
58502: LD_VAR 0 1
58506: PUSH
58507: LD_INT 0
58509: DOUBLE
58510: EQUAL
58511: IFTRUE 58521
58513: LD_INT 1
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58521
58519: GO 58722
58521: POP
// case nation of nation_american :
58522: LD_VAR 0 5
58526: PUSH
58527: LD_INT 1
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58535
58533: GO 58591
58535: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58536: LD_ADDR_VAR 0 9
58540: PUSH
58541: LD_VAR 0 11
58545: PUSH
58546: LD_VAR 0 12
58550: PUSH
58551: LD_VAR 0 13
58555: PUSH
58556: LD_VAR 0 14
58560: PUSH
58561: LD_VAR 0 15
58565: PUSH
58566: LD_VAR 0 16
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PUSH
58579: LD_VAR 0 4
58583: PUSH
58584: LD_INT 1
58586: PLUS
58587: ARRAY
58588: ST_TO_ADDR
58589: GO 58720
58591: LD_INT 2
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58655
58599: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58600: LD_ADDR_VAR 0 9
58604: PUSH
58605: LD_VAR 0 17
58609: PUSH
58610: LD_VAR 0 18
58614: PUSH
58615: LD_VAR 0 19
58619: PUSH
58620: LD_VAR 0 20
58624: PUSH
58625: LD_VAR 0 21
58629: PUSH
58630: LD_VAR 0 22
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_INT 1
58650: PLUS
58651: ARRAY
58652: ST_TO_ADDR
58653: GO 58720
58655: LD_INT 3
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58663
58661: GO 58719
58663: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58664: LD_ADDR_VAR 0 9
58668: PUSH
58669: LD_VAR 0 23
58673: PUSH
58674: LD_VAR 0 24
58678: PUSH
58679: LD_VAR 0 25
58683: PUSH
58684: LD_VAR 0 26
58688: PUSH
58689: LD_VAR 0 27
58693: PUSH
58694: LD_VAR 0 28
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: PUSH
58707: LD_VAR 0 4
58711: PUSH
58712: LD_INT 1
58714: PLUS
58715: ARRAY
58716: ST_TO_ADDR
58717: GO 58720
58719: POP
58720: GO 59275
58722: LD_INT 2
58724: DOUBLE
58725: EQUAL
58726: IFTRUE 58736
58728: LD_INT 3
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58736
58734: GO 58792
58736: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58737: LD_ADDR_VAR 0 9
58741: PUSH
58742: LD_VAR 0 29
58746: PUSH
58747: LD_VAR 0 30
58751: PUSH
58752: LD_VAR 0 31
58756: PUSH
58757: LD_VAR 0 32
58761: PUSH
58762: LD_VAR 0 33
58766: PUSH
58767: LD_VAR 0 34
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: PUSH
58780: LD_VAR 0 4
58784: PUSH
58785: LD_INT 1
58787: PLUS
58788: ARRAY
58789: ST_TO_ADDR
58790: GO 59275
58792: LD_INT 16
58794: DOUBLE
58795: EQUAL
58796: IFTRUE 58854
58798: LD_INT 17
58800: DOUBLE
58801: EQUAL
58802: IFTRUE 58854
58804: LD_INT 18
58806: DOUBLE
58807: EQUAL
58808: IFTRUE 58854
58810: LD_INT 19
58812: DOUBLE
58813: EQUAL
58814: IFTRUE 58854
58816: LD_INT 22
58818: DOUBLE
58819: EQUAL
58820: IFTRUE 58854
58822: LD_INT 20
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58854
58828: LD_INT 21
58830: DOUBLE
58831: EQUAL
58832: IFTRUE 58854
58834: LD_INT 23
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58854
58840: LD_INT 24
58842: DOUBLE
58843: EQUAL
58844: IFTRUE 58854
58846: LD_INT 25
58848: DOUBLE
58849: EQUAL
58850: IFTRUE 58854
58852: GO 58910
58854: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58855: LD_ADDR_VAR 0 9
58859: PUSH
58860: LD_VAR 0 35
58864: PUSH
58865: LD_VAR 0 36
58869: PUSH
58870: LD_VAR 0 37
58874: PUSH
58875: LD_VAR 0 38
58879: PUSH
58880: LD_VAR 0 39
58884: PUSH
58885: LD_VAR 0 40
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: PUSH
58898: LD_VAR 0 4
58902: PUSH
58903: LD_INT 1
58905: PLUS
58906: ARRAY
58907: ST_TO_ADDR
58908: GO 59275
58910: LD_INT 6
58912: DOUBLE
58913: EQUAL
58914: IFTRUE 58966
58916: LD_INT 7
58918: DOUBLE
58919: EQUAL
58920: IFTRUE 58966
58922: LD_INT 8
58924: DOUBLE
58925: EQUAL
58926: IFTRUE 58966
58928: LD_INT 13
58930: DOUBLE
58931: EQUAL
58932: IFTRUE 58966
58934: LD_INT 12
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58966
58940: LD_INT 15
58942: DOUBLE
58943: EQUAL
58944: IFTRUE 58966
58946: LD_INT 11
58948: DOUBLE
58949: EQUAL
58950: IFTRUE 58966
58952: LD_INT 14
58954: DOUBLE
58955: EQUAL
58956: IFTRUE 58966
58958: LD_INT 10
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 59022
58966: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58967: LD_ADDR_VAR 0 9
58971: PUSH
58972: LD_VAR 0 41
58976: PUSH
58977: LD_VAR 0 42
58981: PUSH
58982: LD_VAR 0 43
58986: PUSH
58987: LD_VAR 0 44
58991: PUSH
58992: LD_VAR 0 45
58996: PUSH
58997: LD_VAR 0 46
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: PUSH
59010: LD_VAR 0 4
59014: PUSH
59015: LD_INT 1
59017: PLUS
59018: ARRAY
59019: ST_TO_ADDR
59020: GO 59275
59022: LD_INT 36
59024: DOUBLE
59025: EQUAL
59026: IFTRUE 59030
59028: GO 59086
59030: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59031: LD_ADDR_VAR 0 9
59035: PUSH
59036: LD_VAR 0 47
59040: PUSH
59041: LD_VAR 0 48
59045: PUSH
59046: LD_VAR 0 49
59050: PUSH
59051: LD_VAR 0 50
59055: PUSH
59056: LD_VAR 0 51
59060: PUSH
59061: LD_VAR 0 52
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: PUSH
59074: LD_VAR 0 4
59078: PUSH
59079: LD_INT 1
59081: PLUS
59082: ARRAY
59083: ST_TO_ADDR
59084: GO 59275
59086: LD_INT 4
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59112
59092: LD_INT 5
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59112
59098: LD_INT 34
59100: DOUBLE
59101: EQUAL
59102: IFTRUE 59112
59104: LD_INT 37
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59112
59110: GO 59168
59112: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59113: LD_ADDR_VAR 0 9
59117: PUSH
59118: LD_VAR 0 53
59122: PUSH
59123: LD_VAR 0 54
59127: PUSH
59128: LD_VAR 0 55
59132: PUSH
59133: LD_VAR 0 56
59137: PUSH
59138: LD_VAR 0 57
59142: PUSH
59143: LD_VAR 0 58
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: PUSH
59156: LD_VAR 0 4
59160: PUSH
59161: LD_INT 1
59163: PLUS
59164: ARRAY
59165: ST_TO_ADDR
59166: GO 59275
59168: LD_INT 31
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59218
59174: LD_INT 32
59176: DOUBLE
59177: EQUAL
59178: IFTRUE 59218
59180: LD_INT 33
59182: DOUBLE
59183: EQUAL
59184: IFTRUE 59218
59186: LD_INT 27
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59218
59192: LD_INT 26
59194: DOUBLE
59195: EQUAL
59196: IFTRUE 59218
59198: LD_INT 28
59200: DOUBLE
59201: EQUAL
59202: IFTRUE 59218
59204: LD_INT 29
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59218
59210: LD_INT 30
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59218
59216: GO 59274
59218: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59219: LD_ADDR_VAR 0 9
59223: PUSH
59224: LD_VAR 0 59
59228: PUSH
59229: LD_VAR 0 60
59233: PUSH
59234: LD_VAR 0 61
59238: PUSH
59239: LD_VAR 0 62
59243: PUSH
59244: LD_VAR 0 63
59248: PUSH
59249: LD_VAR 0 64
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: PUSH
59262: LD_VAR 0 4
59266: PUSH
59267: LD_INT 1
59269: PLUS
59270: ARRAY
59271: ST_TO_ADDR
59272: GO 59275
59274: POP
// temp_list2 = [ ] ;
59275: LD_ADDR_VAR 0 10
59279: PUSH
59280: EMPTY
59281: ST_TO_ADDR
// for i in temp_list do
59282: LD_ADDR_VAR 0 8
59286: PUSH
59287: LD_VAR 0 9
59291: PUSH
59292: FOR_IN
59293: IFFALSE 59345
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59295: LD_ADDR_VAR 0 10
59299: PUSH
59300: LD_VAR 0 10
59304: PUSH
59305: LD_VAR 0 8
59309: PUSH
59310: LD_INT 1
59312: ARRAY
59313: PUSH
59314: LD_VAR 0 2
59318: PLUS
59319: PUSH
59320: LD_VAR 0 8
59324: PUSH
59325: LD_INT 2
59327: ARRAY
59328: PUSH
59329: LD_VAR 0 3
59333: PLUS
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: ADD
59342: ST_TO_ADDR
59343: GO 59292
59345: POP
59346: POP
// result = temp_list2 ;
59347: LD_ADDR_VAR 0 7
59351: PUSH
59352: LD_VAR 0 10
59356: ST_TO_ADDR
// end ;
59357: LD_VAR 0 7
59361: RET
// export function EnemyInRange ( unit , dist ) ; begin
59362: LD_INT 0
59364: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59365: LD_ADDR_VAR 0 3
59369: PUSH
59370: LD_VAR 0 1
59374: PPUSH
59375: CALL_OW 255
59379: PPUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: CALL_OW 250
59389: PPUSH
59390: LD_VAR 0 1
59394: PPUSH
59395: CALL_OW 251
59399: PPUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: CALL 32764 0 4
59409: PUSH
59410: LD_INT 4
59412: ARRAY
59413: ST_TO_ADDR
// end ;
59414: LD_VAR 0 3
59418: RET
// export function PlayerSeeMe ( unit ) ; begin
59419: LD_INT 0
59421: PPUSH
// result := See ( your_side , unit ) ;
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: LD_OWVAR 2
59431: PPUSH
59432: LD_VAR 0 1
59436: PPUSH
59437: CALL_OW 292
59441: ST_TO_ADDR
// end ;
59442: LD_VAR 0 2
59446: RET
// export function ReverseDir ( unit ) ; begin
59447: LD_INT 0
59449: PPUSH
// if not unit then
59450: LD_VAR 0 1
59454: NOT
59455: IFFALSE 59459
// exit ;
59457: GO 59482
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59459: LD_ADDR_VAR 0 2
59463: PUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 254
59473: PUSH
59474: LD_INT 3
59476: PLUS
59477: PUSH
59478: LD_INT 6
59480: MOD
59481: ST_TO_ADDR
// end ;
59482: LD_VAR 0 2
59486: RET
// export function ReverseArray ( array ) ; var i ; begin
59487: LD_INT 0
59489: PPUSH
59490: PPUSH
// if not array then
59491: LD_VAR 0 1
59495: NOT
59496: IFFALSE 59500
// exit ;
59498: GO 59555
// result := [ ] ;
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: EMPTY
59506: ST_TO_ADDR
// for i := array downto 1 do
59507: LD_ADDR_VAR 0 3
59511: PUSH
59512: DOUBLE
59513: LD_VAR 0 1
59517: INC
59518: ST_TO_ADDR
59519: LD_INT 1
59521: PUSH
59522: FOR_DOWNTO
59523: IFFALSE 59553
// result := Join ( result , array [ i ] ) ;
59525: LD_ADDR_VAR 0 2
59529: PUSH
59530: LD_VAR 0 2
59534: PPUSH
59535: LD_VAR 0 1
59539: PUSH
59540: LD_VAR 0 3
59544: ARRAY
59545: PPUSH
59546: CALL 64180 0 2
59550: ST_TO_ADDR
59551: GO 59522
59553: POP
59554: POP
// end ;
59555: LD_VAR 0 2
59559: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59560: LD_INT 0
59562: PPUSH
59563: PPUSH
59564: PPUSH
59565: PPUSH
59566: PPUSH
59567: PPUSH
// if not unit or not hexes then
59568: LD_VAR 0 1
59572: NOT
59573: PUSH
59574: LD_VAR 0 2
59578: NOT
59579: OR
59580: IFFALSE 59584
// exit ;
59582: GO 59707
// dist := 9999 ;
59584: LD_ADDR_VAR 0 5
59588: PUSH
59589: LD_INT 9999
59591: ST_TO_ADDR
// for i = 1 to hexes do
59592: LD_ADDR_VAR 0 4
59596: PUSH
59597: DOUBLE
59598: LD_INT 1
59600: DEC
59601: ST_TO_ADDR
59602: LD_VAR 0 2
59606: PUSH
59607: FOR_TO
59608: IFFALSE 59695
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59610: LD_ADDR_VAR 0 6
59614: PUSH
59615: LD_VAR 0 1
59619: PPUSH
59620: LD_VAR 0 2
59624: PUSH
59625: LD_VAR 0 4
59629: ARRAY
59630: PUSH
59631: LD_INT 1
59633: ARRAY
59634: PPUSH
59635: LD_VAR 0 2
59639: PUSH
59640: LD_VAR 0 4
59644: ARRAY
59645: PUSH
59646: LD_INT 2
59648: ARRAY
59649: PPUSH
59650: CALL_OW 297
59654: ST_TO_ADDR
// if tdist < dist then
59655: LD_VAR 0 6
59659: PUSH
59660: LD_VAR 0 5
59664: LESS
59665: IFFALSE 59693
// begin hex := hexes [ i ] ;
59667: LD_ADDR_VAR 0 8
59671: PUSH
59672: LD_VAR 0 2
59676: PUSH
59677: LD_VAR 0 4
59681: ARRAY
59682: ST_TO_ADDR
// dist := tdist ;
59683: LD_ADDR_VAR 0 5
59687: PUSH
59688: LD_VAR 0 6
59692: ST_TO_ADDR
// end ; end ;
59693: GO 59607
59695: POP
59696: POP
// result := hex ;
59697: LD_ADDR_VAR 0 3
59701: PUSH
59702: LD_VAR 0 8
59706: ST_TO_ADDR
// end ;
59707: LD_VAR 0 3
59711: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59712: LD_INT 0
59714: PPUSH
59715: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59716: LD_VAR 0 1
59720: NOT
59721: PUSH
59722: LD_VAR 0 1
59726: PUSH
59727: LD_INT 21
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 23
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PPUSH
59751: CALL_OW 69
59755: IN
59756: NOT
59757: OR
59758: IFFALSE 59762
// exit ;
59760: GO 59809
// for i = 1 to 3 do
59762: LD_ADDR_VAR 0 3
59766: PUSH
59767: DOUBLE
59768: LD_INT 1
59770: DEC
59771: ST_TO_ADDR
59772: LD_INT 3
59774: PUSH
59775: FOR_TO
59776: IFFALSE 59807
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59778: LD_VAR 0 1
59782: PPUSH
59783: CALL_OW 250
59787: PPUSH
59788: LD_VAR 0 1
59792: PPUSH
59793: CALL_OW 251
59797: PPUSH
59798: LD_INT 1
59800: PPUSH
59801: CALL_OW 453
59805: GO 59775
59807: POP
59808: POP
// end ;
59809: LD_VAR 0 2
59813: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59814: LD_INT 0
59816: PPUSH
59817: PPUSH
59818: PPUSH
59819: PPUSH
59820: PPUSH
59821: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59822: LD_VAR 0 1
59826: NOT
59827: PUSH
59828: LD_VAR 0 2
59832: NOT
59833: OR
59834: PUSH
59835: LD_VAR 0 1
59839: PPUSH
59840: CALL_OW 314
59844: OR
59845: IFFALSE 59849
// exit ;
59847: GO 60290
// x := GetX ( enemy_unit ) ;
59849: LD_ADDR_VAR 0 7
59853: PUSH
59854: LD_VAR 0 2
59858: PPUSH
59859: CALL_OW 250
59863: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59864: LD_ADDR_VAR 0 8
59868: PUSH
59869: LD_VAR 0 2
59873: PPUSH
59874: CALL_OW 251
59878: ST_TO_ADDR
// if not x or not y then
59879: LD_VAR 0 7
59883: NOT
59884: PUSH
59885: LD_VAR 0 8
59889: NOT
59890: OR
59891: IFFALSE 59895
// exit ;
59893: GO 60290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59895: LD_ADDR_VAR 0 6
59899: PUSH
59900: LD_VAR 0 7
59904: PPUSH
59905: LD_INT 0
59907: PPUSH
59908: LD_INT 4
59910: PPUSH
59911: CALL_OW 272
59915: PUSH
59916: LD_VAR 0 8
59920: PPUSH
59921: LD_INT 0
59923: PPUSH
59924: LD_INT 4
59926: PPUSH
59927: CALL_OW 273
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_VAR 0 7
59940: PPUSH
59941: LD_INT 1
59943: PPUSH
59944: LD_INT 4
59946: PPUSH
59947: CALL_OW 272
59951: PUSH
59952: LD_VAR 0 8
59956: PPUSH
59957: LD_INT 1
59959: PPUSH
59960: LD_INT 4
59962: PPUSH
59963: CALL_OW 273
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_VAR 0 7
59976: PPUSH
59977: LD_INT 2
59979: PPUSH
59980: LD_INT 4
59982: PPUSH
59983: CALL_OW 272
59987: PUSH
59988: LD_VAR 0 8
59992: PPUSH
59993: LD_INT 2
59995: PPUSH
59996: LD_INT 4
59998: PPUSH
59999: CALL_OW 273
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_VAR 0 7
60012: PPUSH
60013: LD_INT 3
60015: PPUSH
60016: LD_INT 4
60018: PPUSH
60019: CALL_OW 272
60023: PUSH
60024: LD_VAR 0 8
60028: PPUSH
60029: LD_INT 3
60031: PPUSH
60032: LD_INT 4
60034: PPUSH
60035: CALL_OW 273
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_VAR 0 7
60048: PPUSH
60049: LD_INT 4
60051: PPUSH
60052: LD_INT 4
60054: PPUSH
60055: CALL_OW 272
60059: PUSH
60060: LD_VAR 0 8
60064: PPUSH
60065: LD_INT 4
60067: PPUSH
60068: LD_INT 4
60070: PPUSH
60071: CALL_OW 273
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_VAR 0 7
60084: PPUSH
60085: LD_INT 5
60087: PPUSH
60088: LD_INT 4
60090: PPUSH
60091: CALL_OW 272
60095: PUSH
60096: LD_VAR 0 8
60100: PPUSH
60101: LD_INT 5
60103: PPUSH
60104: LD_INT 4
60106: PPUSH
60107: CALL_OW 273
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// for i = tmp downto 1 do
60124: LD_ADDR_VAR 0 4
60128: PUSH
60129: DOUBLE
60130: LD_VAR 0 6
60134: INC
60135: ST_TO_ADDR
60136: LD_INT 1
60138: PUSH
60139: FOR_DOWNTO
60140: IFFALSE 60241
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60142: LD_VAR 0 6
60146: PUSH
60147: LD_VAR 0 4
60151: ARRAY
60152: PUSH
60153: LD_INT 1
60155: ARRAY
60156: PPUSH
60157: LD_VAR 0 6
60161: PUSH
60162: LD_VAR 0 4
60166: ARRAY
60167: PUSH
60168: LD_INT 2
60170: ARRAY
60171: PPUSH
60172: CALL_OW 488
60176: NOT
60177: PUSH
60178: LD_VAR 0 6
60182: PUSH
60183: LD_VAR 0 4
60187: ARRAY
60188: PUSH
60189: LD_INT 1
60191: ARRAY
60192: PPUSH
60193: LD_VAR 0 6
60197: PUSH
60198: LD_VAR 0 4
60202: ARRAY
60203: PUSH
60204: LD_INT 2
60206: ARRAY
60207: PPUSH
60208: CALL_OW 428
60212: PUSH
60213: LD_INT 0
60215: NONEQUAL
60216: OR
60217: IFFALSE 60239
// tmp := Delete ( tmp , i ) ;
60219: LD_ADDR_VAR 0 6
60223: PUSH
60224: LD_VAR 0 6
60228: PPUSH
60229: LD_VAR 0 4
60233: PPUSH
60234: CALL_OW 3
60238: ST_TO_ADDR
60239: GO 60139
60241: POP
60242: POP
// j := GetClosestHex ( unit , tmp ) ;
60243: LD_ADDR_VAR 0 5
60247: PUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: LD_VAR 0 6
60257: PPUSH
60258: CALL 59560 0 2
60262: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60263: LD_VAR 0 1
60267: PPUSH
60268: LD_VAR 0 5
60272: PUSH
60273: LD_INT 1
60275: ARRAY
60276: PPUSH
60277: LD_VAR 0 5
60281: PUSH
60282: LD_INT 2
60284: ARRAY
60285: PPUSH
60286: CALL_OW 111
// end ;
60290: LD_VAR 0 3
60294: RET
// export function PrepareApemanSoldier ( ) ; begin
60295: LD_INT 0
60297: PPUSH
// uc_nation := 0 ;
60298: LD_ADDR_OWVAR 21
60302: PUSH
60303: LD_INT 0
60305: ST_TO_ADDR
// hc_sex := sex_male ;
60306: LD_ADDR_OWVAR 27
60310: PUSH
60311: LD_INT 1
60313: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60314: LD_ADDR_OWVAR 28
60318: PUSH
60319: LD_INT 15
60321: ST_TO_ADDR
// hc_gallery :=  ;
60322: LD_ADDR_OWVAR 33
60326: PUSH
60327: LD_STRING 
60329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60330: LD_ADDR_OWVAR 31
60334: PUSH
60335: LD_INT 0
60337: PPUSH
60338: LD_INT 3
60340: PPUSH
60341: CALL_OW 12
60345: PUSH
60346: LD_INT 0
60348: PPUSH
60349: LD_INT 3
60351: PPUSH
60352: CALL_OW 12
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// end ;
60369: LD_VAR 0 1
60373: RET
// export function PrepareApemanEngineer ( ) ; begin
60374: LD_INT 0
60376: PPUSH
// uc_nation := 0 ;
60377: LD_ADDR_OWVAR 21
60381: PUSH
60382: LD_INT 0
60384: ST_TO_ADDR
// hc_sex := sex_male ;
60385: LD_ADDR_OWVAR 27
60389: PUSH
60390: LD_INT 1
60392: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60393: LD_ADDR_OWVAR 28
60397: PUSH
60398: LD_INT 16
60400: ST_TO_ADDR
// hc_gallery :=  ;
60401: LD_ADDR_OWVAR 33
60405: PUSH
60406: LD_STRING 
60408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60409: LD_ADDR_OWVAR 31
60413: PUSH
60414: LD_INT 0
60416: PPUSH
60417: LD_INT 3
60419: PPUSH
60420: CALL_OW 12
60424: PUSH
60425: LD_INT 0
60427: PPUSH
60428: LD_INT 3
60430: PPUSH
60431: CALL_OW 12
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// end ;
60448: LD_VAR 0 1
60452: RET
// export function PrepareApeman ( agressivity ) ; begin
60453: LD_INT 0
60455: PPUSH
// uc_side := 0 ;
60456: LD_ADDR_OWVAR 20
60460: PUSH
60461: LD_INT 0
60463: ST_TO_ADDR
// uc_nation := 0 ;
60464: LD_ADDR_OWVAR 21
60468: PUSH
60469: LD_INT 0
60471: ST_TO_ADDR
// hc_sex := sex_male ;
60472: LD_ADDR_OWVAR 27
60476: PUSH
60477: LD_INT 1
60479: ST_TO_ADDR
// hc_class := class_apeman ;
60480: LD_ADDR_OWVAR 28
60484: PUSH
60485: LD_INT 12
60487: ST_TO_ADDR
// hc_gallery :=  ;
60488: LD_ADDR_OWVAR 33
60492: PUSH
60493: LD_STRING 
60495: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60496: LD_ADDR_OWVAR 35
60500: PUSH
60501: LD_VAR 0 1
60505: NEG
60506: PPUSH
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 12
60516: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60517: LD_ADDR_OWVAR 31
60521: PUSH
60522: LD_INT 0
60524: PPUSH
60525: LD_INT 3
60527: PPUSH
60528: CALL_OW 12
60532: PUSH
60533: LD_INT 0
60535: PPUSH
60536: LD_INT 3
60538: PPUSH
60539: CALL_OW 12
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: ST_TO_ADDR
// end ;
60556: LD_VAR 0 2
60560: RET
// export function PrepareTiger ( agressivity ) ; begin
60561: LD_INT 0
60563: PPUSH
// uc_side := 0 ;
60564: LD_ADDR_OWVAR 20
60568: PUSH
60569: LD_INT 0
60571: ST_TO_ADDR
// uc_nation := 0 ;
60572: LD_ADDR_OWVAR 21
60576: PUSH
60577: LD_INT 0
60579: ST_TO_ADDR
// hc_class := class_tiger ;
60580: LD_ADDR_OWVAR 28
60584: PUSH
60585: LD_INT 14
60587: ST_TO_ADDR
// hc_gallery :=  ;
60588: LD_ADDR_OWVAR 33
60592: PUSH
60593: LD_STRING 
60595: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60596: LD_ADDR_OWVAR 35
60600: PUSH
60601: LD_VAR 0 1
60605: NEG
60606: PPUSH
60607: LD_VAR 0 1
60611: PPUSH
60612: CALL_OW 12
60616: ST_TO_ADDR
// end ;
60617: LD_VAR 0 2
60621: RET
// export function PrepareEnchidna ( ) ; begin
60622: LD_INT 0
60624: PPUSH
// uc_side := 0 ;
60625: LD_ADDR_OWVAR 20
60629: PUSH
60630: LD_INT 0
60632: ST_TO_ADDR
// uc_nation := 0 ;
60633: LD_ADDR_OWVAR 21
60637: PUSH
60638: LD_INT 0
60640: ST_TO_ADDR
// hc_class := class_baggie ;
60641: LD_ADDR_OWVAR 28
60645: PUSH
60646: LD_INT 13
60648: ST_TO_ADDR
// hc_gallery :=  ;
60649: LD_ADDR_OWVAR 33
60653: PUSH
60654: LD_STRING 
60656: ST_TO_ADDR
// end ;
60657: LD_VAR 0 1
60661: RET
// export function PrepareFrog ( ) ; begin
60662: LD_INT 0
60664: PPUSH
// uc_side := 0 ;
60665: LD_ADDR_OWVAR 20
60669: PUSH
60670: LD_INT 0
60672: ST_TO_ADDR
// uc_nation := 0 ;
60673: LD_ADDR_OWVAR 21
60677: PUSH
60678: LD_INT 0
60680: ST_TO_ADDR
// hc_class := class_frog ;
60681: LD_ADDR_OWVAR 28
60685: PUSH
60686: LD_INT 19
60688: ST_TO_ADDR
// hc_gallery :=  ;
60689: LD_ADDR_OWVAR 33
60693: PUSH
60694: LD_STRING 
60696: ST_TO_ADDR
// end ;
60697: LD_VAR 0 1
60701: RET
// export function PrepareFish ( ) ; begin
60702: LD_INT 0
60704: PPUSH
// uc_side := 0 ;
60705: LD_ADDR_OWVAR 20
60709: PUSH
60710: LD_INT 0
60712: ST_TO_ADDR
// uc_nation := 0 ;
60713: LD_ADDR_OWVAR 21
60717: PUSH
60718: LD_INT 0
60720: ST_TO_ADDR
// hc_class := class_fish ;
60721: LD_ADDR_OWVAR 28
60725: PUSH
60726: LD_INT 20
60728: ST_TO_ADDR
// hc_gallery :=  ;
60729: LD_ADDR_OWVAR 33
60733: PUSH
60734: LD_STRING 
60736: ST_TO_ADDR
// end ;
60737: LD_VAR 0 1
60741: RET
// export function PrepareBird ( ) ; begin
60742: LD_INT 0
60744: PPUSH
// uc_side := 0 ;
60745: LD_ADDR_OWVAR 20
60749: PUSH
60750: LD_INT 0
60752: ST_TO_ADDR
// uc_nation := 0 ;
60753: LD_ADDR_OWVAR 21
60757: PUSH
60758: LD_INT 0
60760: ST_TO_ADDR
// hc_class := class_phororhacos ;
60761: LD_ADDR_OWVAR 28
60765: PUSH
60766: LD_INT 18
60768: ST_TO_ADDR
// hc_gallery :=  ;
60769: LD_ADDR_OWVAR 33
60773: PUSH
60774: LD_STRING 
60776: ST_TO_ADDR
// end ;
60777: LD_VAR 0 1
60781: RET
// export function PrepareHorse ( ) ; begin
60782: LD_INT 0
60784: PPUSH
// uc_side := 0 ;
60785: LD_ADDR_OWVAR 20
60789: PUSH
60790: LD_INT 0
60792: ST_TO_ADDR
// uc_nation := 0 ;
60793: LD_ADDR_OWVAR 21
60797: PUSH
60798: LD_INT 0
60800: ST_TO_ADDR
// hc_class := class_horse ;
60801: LD_ADDR_OWVAR 28
60805: PUSH
60806: LD_INT 21
60808: ST_TO_ADDR
// hc_gallery :=  ;
60809: LD_ADDR_OWVAR 33
60813: PUSH
60814: LD_STRING 
60816: ST_TO_ADDR
// end ;
60817: LD_VAR 0 1
60821: RET
// export function PrepareMastodont ( ) ; begin
60822: LD_INT 0
60824: PPUSH
// uc_side := 0 ;
60825: LD_ADDR_OWVAR 20
60829: PUSH
60830: LD_INT 0
60832: ST_TO_ADDR
// uc_nation := 0 ;
60833: LD_ADDR_OWVAR 21
60837: PUSH
60838: LD_INT 0
60840: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60841: LD_ADDR_OWVAR 37
60845: PUSH
60846: LD_INT 31
60848: ST_TO_ADDR
// vc_control := control_rider ;
60849: LD_ADDR_OWVAR 38
60853: PUSH
60854: LD_INT 4
60856: ST_TO_ADDR
// end ;
60857: LD_VAR 0 1
60861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60862: LD_INT 0
60864: PPUSH
60865: PPUSH
60866: PPUSH
// uc_side = 0 ;
60867: LD_ADDR_OWVAR 20
60871: PUSH
60872: LD_INT 0
60874: ST_TO_ADDR
// uc_nation = 0 ;
60875: LD_ADDR_OWVAR 21
60879: PUSH
60880: LD_INT 0
60882: ST_TO_ADDR
// InitHc_All ( ) ;
60883: CALL_OW 584
// InitVc ;
60887: CALL_OW 20
// if mastodonts then
60891: LD_VAR 0 6
60895: IFFALSE 60962
// for i = 1 to mastodonts do
60897: LD_ADDR_VAR 0 11
60901: PUSH
60902: DOUBLE
60903: LD_INT 1
60905: DEC
60906: ST_TO_ADDR
60907: LD_VAR 0 6
60911: PUSH
60912: FOR_TO
60913: IFFALSE 60960
// begin vc_chassis := 31 ;
60915: LD_ADDR_OWVAR 37
60919: PUSH
60920: LD_INT 31
60922: ST_TO_ADDR
// vc_control := control_rider ;
60923: LD_ADDR_OWVAR 38
60927: PUSH
60928: LD_INT 4
60930: ST_TO_ADDR
// animal := CreateVehicle ;
60931: LD_ADDR_VAR 0 12
60935: PUSH
60936: CALL_OW 45
60940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60941: LD_VAR 0 12
60945: PPUSH
60946: LD_VAR 0 8
60950: PPUSH
60951: LD_INT 0
60953: PPUSH
60954: CALL 63097 0 3
// end ;
60958: GO 60912
60960: POP
60961: POP
// if horses then
60962: LD_VAR 0 5
60966: IFFALSE 61033
// for i = 1 to horses do
60968: LD_ADDR_VAR 0 11
60972: PUSH
60973: DOUBLE
60974: LD_INT 1
60976: DEC
60977: ST_TO_ADDR
60978: LD_VAR 0 5
60982: PUSH
60983: FOR_TO
60984: IFFALSE 61031
// begin hc_class := 21 ;
60986: LD_ADDR_OWVAR 28
60990: PUSH
60991: LD_INT 21
60993: ST_TO_ADDR
// hc_gallery :=  ;
60994: LD_ADDR_OWVAR 33
60998: PUSH
60999: LD_STRING 
61001: ST_TO_ADDR
// animal := CreateHuman ;
61002: LD_ADDR_VAR 0 12
61006: PUSH
61007: CALL_OW 44
61011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61012: LD_VAR 0 12
61016: PPUSH
61017: LD_VAR 0 8
61021: PPUSH
61022: LD_INT 0
61024: PPUSH
61025: CALL 63097 0 3
// end ;
61029: GO 60983
61031: POP
61032: POP
// if birds then
61033: LD_VAR 0 1
61037: IFFALSE 61104
// for i = 1 to birds do
61039: LD_ADDR_VAR 0 11
61043: PUSH
61044: DOUBLE
61045: LD_INT 1
61047: DEC
61048: ST_TO_ADDR
61049: LD_VAR 0 1
61053: PUSH
61054: FOR_TO
61055: IFFALSE 61102
// begin hc_class = 18 ;
61057: LD_ADDR_OWVAR 28
61061: PUSH
61062: LD_INT 18
61064: ST_TO_ADDR
// hc_gallery =  ;
61065: LD_ADDR_OWVAR 33
61069: PUSH
61070: LD_STRING 
61072: ST_TO_ADDR
// animal := CreateHuman ;
61073: LD_ADDR_VAR 0 12
61077: PUSH
61078: CALL_OW 44
61082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61083: LD_VAR 0 12
61087: PPUSH
61088: LD_VAR 0 8
61092: PPUSH
61093: LD_INT 0
61095: PPUSH
61096: CALL 63097 0 3
// end ;
61100: GO 61054
61102: POP
61103: POP
// if tigers then
61104: LD_VAR 0 2
61108: IFFALSE 61192
// for i = 1 to tigers do
61110: LD_ADDR_VAR 0 11
61114: PUSH
61115: DOUBLE
61116: LD_INT 1
61118: DEC
61119: ST_TO_ADDR
61120: LD_VAR 0 2
61124: PUSH
61125: FOR_TO
61126: IFFALSE 61190
// begin hc_class = class_tiger ;
61128: LD_ADDR_OWVAR 28
61132: PUSH
61133: LD_INT 14
61135: ST_TO_ADDR
// hc_gallery =  ;
61136: LD_ADDR_OWVAR 33
61140: PUSH
61141: LD_STRING 
61143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61144: LD_ADDR_OWVAR 35
61148: PUSH
61149: LD_INT 7
61151: NEG
61152: PPUSH
61153: LD_INT 7
61155: PPUSH
61156: CALL_OW 12
61160: ST_TO_ADDR
// animal := CreateHuman ;
61161: LD_ADDR_VAR 0 12
61165: PUSH
61166: CALL_OW 44
61170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61171: LD_VAR 0 12
61175: PPUSH
61176: LD_VAR 0 8
61180: PPUSH
61181: LD_INT 0
61183: PPUSH
61184: CALL 63097 0 3
// end ;
61188: GO 61125
61190: POP
61191: POP
// if apemans then
61192: LD_VAR 0 3
61196: IFFALSE 61319
// for i = 1 to apemans do
61198: LD_ADDR_VAR 0 11
61202: PUSH
61203: DOUBLE
61204: LD_INT 1
61206: DEC
61207: ST_TO_ADDR
61208: LD_VAR 0 3
61212: PUSH
61213: FOR_TO
61214: IFFALSE 61317
// begin hc_class = class_apeman ;
61216: LD_ADDR_OWVAR 28
61220: PUSH
61221: LD_INT 12
61223: ST_TO_ADDR
// hc_gallery =  ;
61224: LD_ADDR_OWVAR 33
61228: PUSH
61229: LD_STRING 
61231: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61232: LD_ADDR_OWVAR 35
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PPUSH
61241: LD_INT 2
61243: PPUSH
61244: CALL_OW 12
61248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61249: LD_ADDR_OWVAR 31
61253: PUSH
61254: LD_INT 1
61256: PPUSH
61257: LD_INT 3
61259: PPUSH
61260: CALL_OW 12
61264: PUSH
61265: LD_INT 1
61267: PPUSH
61268: LD_INT 3
61270: PPUSH
61271: CALL_OW 12
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// animal := CreateHuman ;
61288: LD_ADDR_VAR 0 12
61292: PUSH
61293: CALL_OW 44
61297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61298: LD_VAR 0 12
61302: PPUSH
61303: LD_VAR 0 8
61307: PPUSH
61308: LD_INT 0
61310: PPUSH
61311: CALL 63097 0 3
// end ;
61315: GO 61213
61317: POP
61318: POP
// if enchidnas then
61319: LD_VAR 0 4
61323: IFFALSE 61390
// for i = 1 to enchidnas do
61325: LD_ADDR_VAR 0 11
61329: PUSH
61330: DOUBLE
61331: LD_INT 1
61333: DEC
61334: ST_TO_ADDR
61335: LD_VAR 0 4
61339: PUSH
61340: FOR_TO
61341: IFFALSE 61388
// begin hc_class = 13 ;
61343: LD_ADDR_OWVAR 28
61347: PUSH
61348: LD_INT 13
61350: ST_TO_ADDR
// hc_gallery =  ;
61351: LD_ADDR_OWVAR 33
61355: PUSH
61356: LD_STRING 
61358: ST_TO_ADDR
// animal := CreateHuman ;
61359: LD_ADDR_VAR 0 12
61363: PUSH
61364: CALL_OW 44
61368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61369: LD_VAR 0 12
61373: PPUSH
61374: LD_VAR 0 8
61378: PPUSH
61379: LD_INT 0
61381: PPUSH
61382: CALL 63097 0 3
// end ;
61386: GO 61340
61388: POP
61389: POP
// if fishes then
61390: LD_VAR 0 7
61394: IFFALSE 61461
// for i = 1 to fishes do
61396: LD_ADDR_VAR 0 11
61400: PUSH
61401: DOUBLE
61402: LD_INT 1
61404: DEC
61405: ST_TO_ADDR
61406: LD_VAR 0 7
61410: PUSH
61411: FOR_TO
61412: IFFALSE 61459
// begin hc_class = 20 ;
61414: LD_ADDR_OWVAR 28
61418: PUSH
61419: LD_INT 20
61421: ST_TO_ADDR
// hc_gallery =  ;
61422: LD_ADDR_OWVAR 33
61426: PUSH
61427: LD_STRING 
61429: ST_TO_ADDR
// animal := CreateHuman ;
61430: LD_ADDR_VAR 0 12
61434: PUSH
61435: CALL_OW 44
61439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61440: LD_VAR 0 12
61444: PPUSH
61445: LD_VAR 0 9
61449: PPUSH
61450: LD_INT 0
61452: PPUSH
61453: CALL 63097 0 3
// end ;
61457: GO 61411
61459: POP
61460: POP
// end ;
61461: LD_VAR 0 10
61465: RET
// export function WantHeal ( sci , unit ) ; begin
61466: LD_INT 0
61468: PPUSH
// if GetTaskList ( sci ) > 0 then
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 437
61478: PUSH
61479: LD_INT 0
61481: GREATER
61482: IFFALSE 61552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61484: LD_VAR 0 1
61488: PPUSH
61489: CALL_OW 437
61493: PUSH
61494: LD_INT 1
61496: ARRAY
61497: PUSH
61498: LD_INT 1
61500: ARRAY
61501: PUSH
61502: LD_STRING l
61504: EQUAL
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: CALL_OW 437
61515: PUSH
61516: LD_INT 1
61518: ARRAY
61519: PUSH
61520: LD_INT 4
61522: ARRAY
61523: PUSH
61524: LD_VAR 0 2
61528: EQUAL
61529: AND
61530: IFFALSE 61542
// result := true else
61532: LD_ADDR_VAR 0 3
61536: PUSH
61537: LD_INT 1
61539: ST_TO_ADDR
61540: GO 61550
// result := false ;
61542: LD_ADDR_VAR 0 3
61546: PUSH
61547: LD_INT 0
61549: ST_TO_ADDR
// end else
61550: GO 61560
// result := false ;
61552: LD_ADDR_VAR 0 3
61556: PUSH
61557: LD_INT 0
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 3
61564: RET
// export function HealTarget ( sci ) ; begin
61565: LD_INT 0
61567: PPUSH
// if not sci then
61568: LD_VAR 0 1
61572: NOT
61573: IFFALSE 61577
// exit ;
61575: GO 61642
// result := 0 ;
61577: LD_ADDR_VAR 0 2
61581: PUSH
61582: LD_INT 0
61584: ST_TO_ADDR
// if GetTaskList ( sci ) then
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 437
61594: IFFALSE 61642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61596: LD_VAR 0 1
61600: PPUSH
61601: CALL_OW 437
61605: PUSH
61606: LD_INT 1
61608: ARRAY
61609: PUSH
61610: LD_INT 1
61612: ARRAY
61613: PUSH
61614: LD_STRING l
61616: EQUAL
61617: IFFALSE 61642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61619: LD_ADDR_VAR 0 2
61623: PUSH
61624: LD_VAR 0 1
61628: PPUSH
61629: CALL_OW 437
61633: PUSH
61634: LD_INT 1
61636: ARRAY
61637: PUSH
61638: LD_INT 4
61640: ARRAY
61641: ST_TO_ADDR
// end ;
61642: LD_VAR 0 2
61646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61647: LD_INT 0
61649: PPUSH
61650: PPUSH
61651: PPUSH
61652: PPUSH
// if not base_units then
61653: LD_VAR 0 1
61657: NOT
61658: IFFALSE 61662
// exit ;
61660: GO 61749
// result := false ;
61662: LD_ADDR_VAR 0 2
61666: PUSH
61667: LD_INT 0
61669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_INT 21
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PPUSH
61690: CALL_OW 72
61694: ST_TO_ADDR
// if not tmp then
61695: LD_VAR 0 5
61699: NOT
61700: IFFALSE 61704
// exit ;
61702: GO 61749
// for i in tmp do
61704: LD_ADDR_VAR 0 3
61708: PUSH
61709: LD_VAR 0 5
61713: PUSH
61714: FOR_IN
61715: IFFALSE 61747
// begin result := EnemyInRange ( i , 22 ) ;
61717: LD_ADDR_VAR 0 2
61721: PUSH
61722: LD_VAR 0 3
61726: PPUSH
61727: LD_INT 22
61729: PPUSH
61730: CALL 59362 0 2
61734: ST_TO_ADDR
// if result then
61735: LD_VAR 0 2
61739: IFFALSE 61745
// exit ;
61741: POP
61742: POP
61743: GO 61749
// end ;
61745: GO 61714
61747: POP
61748: POP
// end ;
61749: LD_VAR 0 2
61753: RET
// export function FilterByTag ( units , tag ) ; begin
61754: LD_INT 0
61756: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61757: LD_ADDR_VAR 0 3
61761: PUSH
61762: LD_VAR 0 1
61766: PPUSH
61767: LD_INT 120
61769: PUSH
61770: LD_VAR 0 2
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PPUSH
61779: CALL_OW 72
61783: ST_TO_ADDR
// end ;
61784: LD_VAR 0 3
61788: RET
// export function IsDriver ( un ) ; begin
61789: LD_INT 0
61791: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61792: LD_ADDR_VAR 0 2
61796: PUSH
61797: LD_VAR 0 1
61801: PUSH
61802: LD_INT 55
61804: PUSH
61805: EMPTY
61806: LIST
61807: PPUSH
61808: CALL_OW 69
61812: IN
61813: ST_TO_ADDR
// end ;
61814: LD_VAR 0 2
61818: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61819: LD_INT 0
61821: PPUSH
61822: PPUSH
// list := [ ] ;
61823: LD_ADDR_VAR 0 5
61827: PUSH
61828: EMPTY
61829: ST_TO_ADDR
// case d of 0 :
61830: LD_VAR 0 3
61834: PUSH
61835: LD_INT 0
61837: DOUBLE
61838: EQUAL
61839: IFTRUE 61843
61841: GO 61976
61843: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61844: LD_ADDR_VAR 0 5
61848: PUSH
61849: LD_VAR 0 1
61853: PUSH
61854: LD_INT 4
61856: MINUS
61857: PUSH
61858: LD_VAR 0 2
61862: PUSH
61863: LD_INT 4
61865: MINUS
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: PUSH
61875: LD_VAR 0 1
61879: PUSH
61880: LD_INT 3
61882: MINUS
61883: PUSH
61884: LD_VAR 0 2
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: PUSH
61897: LD_VAR 0 1
61901: PUSH
61902: LD_INT 4
61904: PLUS
61905: PUSH
61906: LD_VAR 0 2
61910: PUSH
61911: LD_INT 4
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: PUSH
61919: LD_VAR 0 1
61923: PUSH
61924: LD_INT 3
61926: PLUS
61927: PUSH
61928: LD_VAR 0 2
61932: PUSH
61933: LD_INT 3
61935: PLUS
61936: PUSH
61937: LD_INT 5
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_VAR 0 2
61954: PUSH
61955: LD_INT 4
61957: PLUS
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// end ; 1 :
61974: GO 62674
61976: LD_INT 1
61978: DOUBLE
61979: EQUAL
61980: IFTRUE 61984
61982: GO 62117
61984: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61985: LD_ADDR_VAR 0 5
61989: PUSH
61990: LD_VAR 0 1
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 4
62002: MINUS
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 1
62016: PUSH
62017: LD_INT 3
62019: MINUS
62020: PUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_INT 3
62028: MINUS
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: PUSH
62038: LD_VAR 0 1
62042: PUSH
62043: LD_INT 4
62045: MINUS
62046: PUSH
62047: LD_VAR 0 2
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: PUSH
62060: LD_VAR 0 1
62064: PUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_INT 3
62072: PLUS
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 1
62086: PUSH
62087: LD_INT 4
62089: PLUS
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_INT 4
62098: PLUS
62099: PUSH
62100: LD_INT 5
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: ST_TO_ADDR
// end ; 2 :
62115: GO 62674
62117: LD_INT 2
62119: DOUBLE
62120: EQUAL
62121: IFTRUE 62125
62123: GO 62254
62125: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62126: LD_ADDR_VAR 0 5
62130: PUSH
62131: LD_VAR 0 1
62135: PUSH
62136: LD_VAR 0 2
62140: PUSH
62141: LD_INT 3
62143: MINUS
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: PUSH
62153: LD_VAR 0 1
62157: PUSH
62158: LD_INT 4
62160: PLUS
62161: PUSH
62162: LD_VAR 0 2
62166: PUSH
62167: LD_INT 4
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_INT 4
62187: PLUS
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_VAR 0 1
62201: PUSH
62202: LD_INT 3
62204: MINUS
62205: PUSH
62206: LD_VAR 0 2
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: PUSH
62219: LD_VAR 0 1
62223: PUSH
62224: LD_INT 4
62226: MINUS
62227: PUSH
62228: LD_VAR 0 2
62232: PUSH
62233: LD_INT 4
62235: MINUS
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// end ; 3 :
62252: GO 62674
62254: LD_INT 3
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62262
62260: GO 62395
62262: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62263: LD_ADDR_VAR 0 5
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: LD_INT 3
62275: PLUS
62276: PUSH
62277: LD_VAR 0 2
62281: PUSH
62282: LD_INT 4
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: LD_VAR 0 1
62294: PUSH
62295: LD_INT 4
62297: PLUS
62298: PUSH
62299: LD_VAR 0 2
62303: PUSH
62304: LD_INT 4
62306: PLUS
62307: PUSH
62308: LD_INT 5
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: PUSH
62316: LD_VAR 0 1
62320: PUSH
62321: LD_INT 4
62323: MINUS
62324: PUSH
62325: LD_VAR 0 2
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: LD_VAR 0 1
62342: PUSH
62343: LD_VAR 0 2
62347: PUSH
62348: LD_INT 4
62350: MINUS
62351: PUSH
62352: LD_INT 3
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: PUSH
62360: LD_VAR 0 1
62364: PUSH
62365: LD_INT 3
62367: MINUS
62368: PUSH
62369: LD_VAR 0 2
62373: PUSH
62374: LD_INT 3
62376: MINUS
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: ST_TO_ADDR
// end ; 4 :
62393: GO 62674
62395: LD_INT 4
62397: DOUBLE
62398: EQUAL
62399: IFTRUE 62403
62401: GO 62536
62403: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_INT 4
62421: PLUS
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: PUSH
62431: LD_VAR 0 1
62435: PUSH
62436: LD_INT 3
62438: PLUS
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_INT 3
62447: PLUS
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: PUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_INT 4
62464: PLUS
62465: PUSH
62466: LD_VAR 0 2
62470: PUSH
62471: LD_INT 4
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: LD_VAR 0 1
62483: PUSH
62484: LD_VAR 0 2
62488: PUSH
62489: LD_INT 3
62491: MINUS
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: LIST
62500: PUSH
62501: LD_VAR 0 1
62505: PUSH
62506: LD_INT 4
62508: MINUS
62509: PUSH
62510: LD_VAR 0 2
62514: PUSH
62515: LD_INT 4
62517: MINUS
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// end ; 5 :
62534: GO 62674
62536: LD_INT 5
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62673
62544: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62545: LD_ADDR_VAR 0 5
62549: PUSH
62550: LD_VAR 0 1
62554: PUSH
62555: LD_INT 4
62557: MINUS
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: LD_VAR 0 1
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: LD_INT 4
62584: MINUS
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: PUSH
62594: LD_VAR 0 1
62598: PUSH
62599: LD_INT 4
62601: PLUS
62602: PUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_INT 4
62610: PLUS
62611: PUSH
62612: LD_INT 5
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: LD_VAR 0 1
62624: PUSH
62625: LD_INT 3
62627: PLUS
62628: PUSH
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: PUSH
62642: LD_VAR 0 1
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: LD_INT 3
62654: PLUS
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: ST_TO_ADDR
// end ; end ;
62671: GO 62674
62673: POP
// result := list ;
62674: LD_ADDR_VAR 0 4
62678: PUSH
62679: LD_VAR 0 5
62683: ST_TO_ADDR
// end ;
62684: LD_VAR 0 4
62688: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62689: LD_INT 0
62691: PPUSH
62692: PPUSH
62693: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62694: LD_VAR 0 1
62698: NOT
62699: PUSH
62700: LD_VAR 0 2
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: IN
62723: NOT
62724: OR
62725: IFFALSE 62729
// exit ;
62727: GO 62821
// tmp := [ ] ;
62729: LD_ADDR_VAR 0 5
62733: PUSH
62734: EMPTY
62735: ST_TO_ADDR
// for i in units do
62736: LD_ADDR_VAR 0 4
62740: PUSH
62741: LD_VAR 0 1
62745: PUSH
62746: FOR_IN
62747: IFFALSE 62790
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62749: LD_ADDR_VAR 0 5
62753: PUSH
62754: LD_VAR 0 5
62758: PPUSH
62759: LD_VAR 0 5
62763: PUSH
62764: LD_INT 1
62766: PLUS
62767: PPUSH
62768: LD_VAR 0 4
62772: PPUSH
62773: LD_VAR 0 2
62777: PPUSH
62778: CALL_OW 259
62782: PPUSH
62783: CALL_OW 2
62787: ST_TO_ADDR
62788: GO 62746
62790: POP
62791: POP
// if not tmp then
62792: LD_VAR 0 5
62796: NOT
62797: IFFALSE 62801
// exit ;
62799: GO 62821
// result := SortListByListDesc ( units , tmp ) ;
62801: LD_ADDR_VAR 0 3
62805: PUSH
62806: LD_VAR 0 1
62810: PPUSH
62811: LD_VAR 0 5
62815: PPUSH
62816: CALL_OW 77
62820: ST_TO_ADDR
// end ;
62821: LD_VAR 0 3
62825: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62826: LD_INT 0
62828: PPUSH
62829: PPUSH
62830: PPUSH
// result := false ;
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: LD_INT 0
62838: ST_TO_ADDR
// x := GetX ( building ) ;
62839: LD_ADDR_VAR 0 4
62843: PUSH
62844: LD_VAR 0 2
62848: PPUSH
62849: CALL_OW 250
62853: ST_TO_ADDR
// y := GetY ( building ) ;
62854: LD_ADDR_VAR 0 5
62858: PUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: CALL_OW 251
62868: ST_TO_ADDR
// if not building or not x or not y then
62869: LD_VAR 0 2
62873: NOT
62874: PUSH
62875: LD_VAR 0 4
62879: NOT
62880: OR
62881: PUSH
62882: LD_VAR 0 5
62886: NOT
62887: OR
62888: IFFALSE 62892
// exit ;
62890: GO 62984
// if GetTaskList ( unit ) then
62892: LD_VAR 0 1
62896: PPUSH
62897: CALL_OW 437
62901: IFFALSE 62984
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62903: LD_STRING e
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 437
62915: PUSH
62916: LD_INT 1
62918: ARRAY
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: EQUAL
62924: PUSH
62925: LD_VAR 0 4
62929: PUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: CALL_OW 437
62939: PUSH
62940: LD_INT 1
62942: ARRAY
62943: PUSH
62944: LD_INT 2
62946: ARRAY
62947: EQUAL
62948: AND
62949: PUSH
62950: LD_VAR 0 5
62954: PUSH
62955: LD_VAR 0 1
62959: PPUSH
62960: CALL_OW 437
62964: PUSH
62965: LD_INT 1
62967: ARRAY
62968: PUSH
62969: LD_INT 3
62971: ARRAY
62972: EQUAL
62973: AND
62974: IFFALSE 62984
// result := true end ;
62976: LD_ADDR_VAR 0 3
62980: PUSH
62981: LD_INT 1
62983: ST_TO_ADDR
// end ;
62984: LD_VAR 0 3
62988: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62989: LD_INT 0
62991: PPUSH
// result := false ;
62992: LD_ADDR_VAR 0 4
62996: PUSH
62997: LD_INT 0
62999: ST_TO_ADDR
// if GetTaskList ( unit ) then
63000: LD_VAR 0 1
63004: PPUSH
63005: CALL_OW 437
63009: IFFALSE 63092
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63011: LD_STRING M
63013: PUSH
63014: LD_VAR 0 1
63018: PPUSH
63019: CALL_OW 437
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PUSH
63028: LD_INT 1
63030: ARRAY
63031: EQUAL
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 437
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_INT 2
63054: ARRAY
63055: EQUAL
63056: AND
63057: PUSH
63058: LD_VAR 0 3
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 437
63072: PUSH
63073: LD_INT 1
63075: ARRAY
63076: PUSH
63077: LD_INT 3
63079: ARRAY
63080: EQUAL
63081: AND
63082: IFFALSE 63092
// result := true ;
63084: LD_ADDR_VAR 0 4
63088: PUSH
63089: LD_INT 1
63091: ST_TO_ADDR
// end ; end ;
63092: LD_VAR 0 4
63096: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63097: LD_INT 0
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
// if not unit or not area then
63103: LD_VAR 0 1
63107: NOT
63108: PUSH
63109: LD_VAR 0 2
63113: NOT
63114: OR
63115: IFFALSE 63119
// exit ;
63117: GO 63283
// tmp := AreaToList ( area , i ) ;
63119: LD_ADDR_VAR 0 6
63123: PUSH
63124: LD_VAR 0 2
63128: PPUSH
63129: LD_VAR 0 5
63133: PPUSH
63134: CALL_OW 517
63138: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63139: LD_ADDR_VAR 0 5
63143: PUSH
63144: DOUBLE
63145: LD_INT 1
63147: DEC
63148: ST_TO_ADDR
63149: LD_VAR 0 6
63153: PUSH
63154: LD_INT 1
63156: ARRAY
63157: PUSH
63158: FOR_TO
63159: IFFALSE 63281
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63161: LD_ADDR_VAR 0 7
63165: PUSH
63166: LD_VAR 0 6
63170: PUSH
63171: LD_INT 1
63173: ARRAY
63174: PUSH
63175: LD_VAR 0 5
63179: ARRAY
63180: PUSH
63181: LD_VAR 0 6
63185: PUSH
63186: LD_INT 2
63188: ARRAY
63189: PUSH
63190: LD_VAR 0 5
63194: ARRAY
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63200: LD_VAR 0 7
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PPUSH
63209: LD_VAR 0 7
63213: PUSH
63214: LD_INT 2
63216: ARRAY
63217: PPUSH
63218: CALL_OW 428
63222: PUSH
63223: LD_INT 0
63225: EQUAL
63226: IFFALSE 63279
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63228: LD_VAR 0 1
63232: PPUSH
63233: LD_VAR 0 7
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PPUSH
63242: LD_VAR 0 7
63246: PUSH
63247: LD_INT 2
63249: ARRAY
63250: PPUSH
63251: LD_VAR 0 3
63255: PPUSH
63256: CALL_OW 48
// result := IsPlaced ( unit ) ;
63260: LD_ADDR_VAR 0 4
63264: PUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 305
63274: ST_TO_ADDR
// exit ;
63275: POP
63276: POP
63277: GO 63283
// end ; end ;
63279: GO 63158
63281: POP
63282: POP
// end ;
63283: LD_VAR 0 4
63287: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63288: LD_INT 0
63290: PPUSH
63291: PPUSH
63292: PPUSH
// if not side or side > 8 then
63293: LD_VAR 0 1
63297: NOT
63298: PUSH
63299: LD_VAR 0 1
63303: PUSH
63304: LD_INT 8
63306: GREATER
63307: OR
63308: IFFALSE 63312
// exit ;
63310: GO 63499
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63312: LD_ADDR_VAR 0 4
63316: PUSH
63317: LD_INT 22
63319: PUSH
63320: LD_VAR 0 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 21
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PPUSH
63343: CALL_OW 69
63347: ST_TO_ADDR
// if not tmp then
63348: LD_VAR 0 4
63352: NOT
63353: IFFALSE 63357
// exit ;
63355: GO 63499
// enable_addtolog := true ;
63357: LD_ADDR_OWVAR 81
63361: PUSH
63362: LD_INT 1
63364: ST_TO_ADDR
// AddToLog ( [ ) ;
63365: LD_STRING [
63367: PPUSH
63368: CALL_OW 561
// for i in tmp do
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: LD_VAR 0 4
63381: PUSH
63382: FOR_IN
63383: IFFALSE 63490
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63385: LD_STRING [
63387: PUSH
63388: LD_VAR 0 3
63392: PPUSH
63393: CALL_OW 266
63397: STR
63398: PUSH
63399: LD_STRING , 
63401: STR
63402: PUSH
63403: LD_VAR 0 3
63407: PPUSH
63408: CALL_OW 250
63412: STR
63413: PUSH
63414: LD_STRING , 
63416: STR
63417: PUSH
63418: LD_VAR 0 3
63422: PPUSH
63423: CALL_OW 251
63427: STR
63428: PUSH
63429: LD_STRING , 
63431: STR
63432: PUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: CALL_OW 254
63442: STR
63443: PUSH
63444: LD_STRING , 
63446: STR
63447: PUSH
63448: LD_VAR 0 3
63452: PPUSH
63453: LD_INT 1
63455: PPUSH
63456: CALL_OW 268
63460: STR
63461: PUSH
63462: LD_STRING , 
63464: STR
63465: PUSH
63466: LD_VAR 0 3
63470: PPUSH
63471: LD_INT 2
63473: PPUSH
63474: CALL_OW 268
63478: STR
63479: PUSH
63480: LD_STRING ],
63482: STR
63483: PPUSH
63484: CALL_OW 561
// end ;
63488: GO 63382
63490: POP
63491: POP
// AddToLog ( ]; ) ;
63492: LD_STRING ];
63494: PPUSH
63495: CALL_OW 561
// end ;
63499: LD_VAR 0 2
63503: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63504: LD_INT 0
63506: PPUSH
63507: PPUSH
63508: PPUSH
63509: PPUSH
63510: PPUSH
// if not area or not rate or not max then
63511: LD_VAR 0 1
63515: NOT
63516: PUSH
63517: LD_VAR 0 2
63521: NOT
63522: OR
63523: PUSH
63524: LD_VAR 0 4
63528: NOT
63529: OR
63530: IFFALSE 63534
// exit ;
63532: GO 63723
// while 1 do
63534: LD_INT 1
63536: IFFALSE 63723
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63538: LD_ADDR_VAR 0 9
63542: PUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: LD_INT 1
63550: PPUSH
63551: CALL_OW 287
63555: PUSH
63556: LD_INT 10
63558: MUL
63559: ST_TO_ADDR
// r := rate / 10 ;
63560: LD_ADDR_VAR 0 7
63564: PUSH
63565: LD_VAR 0 2
63569: PUSH
63570: LD_INT 10
63572: DIVREAL
63573: ST_TO_ADDR
// time := 1 1$00 ;
63574: LD_ADDR_VAR 0 8
63578: PUSH
63579: LD_INT 2100
63581: ST_TO_ADDR
// if amount < min then
63582: LD_VAR 0 9
63586: PUSH
63587: LD_VAR 0 3
63591: LESS
63592: IFFALSE 63610
// r := r * 2 else
63594: LD_ADDR_VAR 0 7
63598: PUSH
63599: LD_VAR 0 7
63603: PUSH
63604: LD_INT 2
63606: MUL
63607: ST_TO_ADDR
63608: GO 63636
// if amount > max then
63610: LD_VAR 0 9
63614: PUSH
63615: LD_VAR 0 4
63619: GREATER
63620: IFFALSE 63636
// r := r / 2 ;
63622: LD_ADDR_VAR 0 7
63626: PUSH
63627: LD_VAR 0 7
63631: PUSH
63632: LD_INT 2
63634: DIVREAL
63635: ST_TO_ADDR
// time := time / r ;
63636: LD_ADDR_VAR 0 8
63640: PUSH
63641: LD_VAR 0 8
63645: PUSH
63646: LD_VAR 0 7
63650: DIVREAL
63651: ST_TO_ADDR
// if time < 0 then
63652: LD_VAR 0 8
63656: PUSH
63657: LD_INT 0
63659: LESS
63660: IFFALSE 63677
// time := time * - 1 ;
63662: LD_ADDR_VAR 0 8
63666: PUSH
63667: LD_VAR 0 8
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: MUL
63676: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63677: LD_VAR 0 8
63681: PUSH
63682: LD_INT 35
63684: PPUSH
63685: LD_INT 875
63687: PPUSH
63688: CALL_OW 12
63692: PLUS
63693: PPUSH
63694: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63698: LD_INT 1
63700: PPUSH
63701: LD_INT 5
63703: PPUSH
63704: CALL_OW 12
63708: PPUSH
63709: LD_VAR 0 1
63713: PPUSH
63714: LD_INT 1
63716: PPUSH
63717: CALL_OW 55
// end ;
63721: GO 63534
// end ;
63723: LD_VAR 0 5
63727: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
// if not turrets or not factories then
63738: LD_VAR 0 1
63742: NOT
63743: PUSH
63744: LD_VAR 0 2
63748: NOT
63749: OR
63750: IFFALSE 63754
// exit ;
63752: GO 64061
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63754: LD_ADDR_VAR 0 10
63758: PUSH
63759: LD_INT 5
63761: PUSH
63762: LD_INT 6
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 24
63796: PUSH
63797: LD_INT 25
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 23
63806: PUSH
63807: LD_INT 27
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 42
63820: PUSH
63821: LD_INT 43
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 44
63830: PUSH
63831: LD_INT 46
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 45
63840: PUSH
63841: LD_INT 47
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: ST_TO_ADDR
// result := [ ] ;
63858: LD_ADDR_VAR 0 3
63862: PUSH
63863: EMPTY
63864: ST_TO_ADDR
// for i in turrets do
63865: LD_ADDR_VAR 0 4
63869: PUSH
63870: LD_VAR 0 1
63874: PUSH
63875: FOR_IN
63876: IFFALSE 64059
// begin nat := GetNation ( i ) ;
63878: LD_ADDR_VAR 0 7
63882: PUSH
63883: LD_VAR 0 4
63887: PPUSH
63888: CALL_OW 248
63892: ST_TO_ADDR
// weapon := 0 ;
63893: LD_ADDR_VAR 0 8
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// if not nat then
63901: LD_VAR 0 7
63905: NOT
63906: IFFALSE 63910
// continue ;
63908: GO 63875
// for j in list [ nat ] do
63910: LD_ADDR_VAR 0 5
63914: PUSH
63915: LD_VAR 0 10
63919: PUSH
63920: LD_VAR 0 7
63924: ARRAY
63925: PUSH
63926: FOR_IN
63927: IFFALSE 63968
// if GetBWeapon ( i ) = j [ 1 ] then
63929: LD_VAR 0 4
63933: PPUSH
63934: CALL_OW 269
63938: PUSH
63939: LD_VAR 0 5
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: EQUAL
63948: IFFALSE 63966
// begin weapon := j [ 2 ] ;
63950: LD_ADDR_VAR 0 8
63954: PUSH
63955: LD_VAR 0 5
63959: PUSH
63960: LD_INT 2
63962: ARRAY
63963: ST_TO_ADDR
// break ;
63964: GO 63968
// end ;
63966: GO 63926
63968: POP
63969: POP
// if not weapon then
63970: LD_VAR 0 8
63974: NOT
63975: IFFALSE 63979
// continue ;
63977: GO 63875
// for k in factories do
63979: LD_ADDR_VAR 0 6
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: FOR_IN
63990: IFFALSE 64055
// begin weapons := AvailableWeaponList ( k ) ;
63992: LD_ADDR_VAR 0 9
63996: PUSH
63997: LD_VAR 0 6
64001: PPUSH
64002: CALL_OW 478
64006: ST_TO_ADDR
// if not weapons then
64007: LD_VAR 0 9
64011: NOT
64012: IFFALSE 64016
// continue ;
64014: GO 63989
// if weapon in weapons then
64016: LD_VAR 0 8
64020: PUSH
64021: LD_VAR 0 9
64025: IN
64026: IFFALSE 64053
// begin result := [ i , weapon ] ;
64028: LD_ADDR_VAR 0 3
64032: PUSH
64033: LD_VAR 0 4
64037: PUSH
64038: LD_VAR 0 8
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// exit ;
64047: POP
64048: POP
64049: POP
64050: POP
64051: GO 64061
// end ; end ;
64053: GO 63989
64055: POP
64056: POP
// end ;
64057: GO 63875
64059: POP
64060: POP
// end ;
64061: LD_VAR 0 3
64065: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64066: LD_INT 0
64068: PPUSH
// if not side or side > 8 then
64069: LD_VAR 0 3
64073: NOT
64074: PUSH
64075: LD_VAR 0 3
64079: PUSH
64080: LD_INT 8
64082: GREATER
64083: OR
64084: IFFALSE 64088
// exit ;
64086: GO 64147
// if not range then
64088: LD_VAR 0 4
64092: NOT
64093: IFFALSE 64104
// range := - 12 ;
64095: LD_ADDR_VAR 0 4
64099: PUSH
64100: LD_INT 12
64102: NEG
64103: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: LD_VAR 0 3
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: LD_VAR 0 3
64142: PPUSH
64143: CALL_OW 331
// end ;
64147: LD_VAR 0 5
64151: RET
// export function Video ( mode ) ; begin
64152: LD_INT 0
64154: PPUSH
// ingame_video = mode ;
64155: LD_ADDR_OWVAR 52
64159: PUSH
64160: LD_VAR 0 1
64164: ST_TO_ADDR
// interface_hidden = mode ;
64165: LD_ADDR_OWVAR 54
64169: PUSH
64170: LD_VAR 0 1
64174: ST_TO_ADDR
// end ;
64175: LD_VAR 0 2
64179: RET
// export function Join ( array , element ) ; begin
64180: LD_INT 0
64182: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64183: LD_ADDR_VAR 0 3
64187: PUSH
64188: LD_VAR 0 1
64192: PPUSH
64193: LD_VAR 0 1
64197: PUSH
64198: LD_INT 1
64200: PLUS
64201: PPUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: CALL_OW 1
64211: ST_TO_ADDR
// end ;
64212: LD_VAR 0 3
64216: RET
// export function JoinUnion ( array , element ) ; begin
64217: LD_INT 0
64219: PPUSH
// result := array union element ;
64220: LD_ADDR_VAR 0 3
64224: PUSH
64225: LD_VAR 0 1
64229: PUSH
64230: LD_VAR 0 2
64234: UNION
64235: ST_TO_ADDR
// end ;
64236: LD_VAR 0 3
64240: RET
// export function GetBehemoths ( side ) ; begin
64241: LD_INT 0
64243: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64244: LD_ADDR_VAR 0 2
64248: PUSH
64249: LD_INT 22
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 31
64263: PUSH
64264: LD_INT 25
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PPUSH
64275: CALL_OW 69
64279: ST_TO_ADDR
// end ;
64280: LD_VAR 0 2
64284: RET
// export function Shuffle ( array ) ; var i , index ; begin
64285: LD_INT 0
64287: PPUSH
64288: PPUSH
64289: PPUSH
// result := [ ] ;
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: EMPTY
64296: ST_TO_ADDR
// if not array then
64297: LD_VAR 0 1
64301: NOT
64302: IFFALSE 64306
// exit ;
64304: GO 64405
// Randomize ;
64306: CALL_OW 10
// for i = array downto 1 do
64310: LD_ADDR_VAR 0 3
64314: PUSH
64315: DOUBLE
64316: LD_VAR 0 1
64320: INC
64321: ST_TO_ADDR
64322: LD_INT 1
64324: PUSH
64325: FOR_DOWNTO
64326: IFFALSE 64403
// begin index := rand ( 1 , array ) ;
64328: LD_ADDR_VAR 0 4
64332: PUSH
64333: LD_INT 1
64335: PPUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 12
64345: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64346: LD_ADDR_VAR 0 2
64350: PUSH
64351: LD_VAR 0 2
64355: PPUSH
64356: LD_VAR 0 2
64360: PUSH
64361: LD_INT 1
64363: PLUS
64364: PPUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_VAR 0 4
64374: ARRAY
64375: PPUSH
64376: CALL_OW 2
64380: ST_TO_ADDR
// array := Delete ( array , index ) ;
64381: LD_ADDR_VAR 0 1
64385: PUSH
64386: LD_VAR 0 1
64390: PPUSH
64391: LD_VAR 0 4
64395: PPUSH
64396: CALL_OW 3
64400: ST_TO_ADDR
// end ;
64401: GO 64325
64403: POP
64404: POP
// end ;
64405: LD_VAR 0 2
64409: RET
// export function GetBaseMaterials ( base ) ; begin
64410: LD_INT 0
64412: PPUSH
// result := [ 0 , 0 , 0 ] ;
64413: LD_ADDR_VAR 0 2
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// if not base then
64432: LD_VAR 0 1
64436: NOT
64437: IFFALSE 64441
// exit ;
64439: GO 64490
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_INT 1
64453: PPUSH
64454: CALL_OW 275
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_INT 2
64466: PPUSH
64467: CALL_OW 275
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: LD_INT 3
64479: PPUSH
64480: CALL_OW 275
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// end ;
64490: LD_VAR 0 2
64494: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64495: LD_INT 0
64497: PPUSH
64498: PPUSH
// result := array ;
64499: LD_ADDR_VAR 0 3
64503: PUSH
64504: LD_VAR 0 1
64508: ST_TO_ADDR
// if size >= result then
64509: LD_VAR 0 2
64513: PUSH
64514: LD_VAR 0 3
64518: GREATEREQUAL
64519: IFFALSE 64523
// exit ;
64521: GO 64573
// if size then
64523: LD_VAR 0 2
64527: IFFALSE 64573
// for i := array downto size do
64529: LD_ADDR_VAR 0 4
64533: PUSH
64534: DOUBLE
64535: LD_VAR 0 1
64539: INC
64540: ST_TO_ADDR
64541: LD_VAR 0 2
64545: PUSH
64546: FOR_DOWNTO
64547: IFFALSE 64571
// result := Delete ( result , result ) ;
64549: LD_ADDR_VAR 0 3
64553: PUSH
64554: LD_VAR 0 3
64558: PPUSH
64559: LD_VAR 0 3
64563: PPUSH
64564: CALL_OW 3
64568: ST_TO_ADDR
64569: GO 64546
64571: POP
64572: POP
// end ;
64573: LD_VAR 0 3
64577: RET
// export function ComExit ( unit ) ; var tmp ; begin
64578: LD_INT 0
64580: PPUSH
64581: PPUSH
// if not IsInUnit ( unit ) then
64582: LD_VAR 0 1
64586: PPUSH
64587: CALL_OW 310
64591: NOT
64592: IFFALSE 64596
// exit ;
64594: GO 64656
// tmp := IsInUnit ( unit ) ;
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 310
64610: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64611: LD_VAR 0 3
64615: PPUSH
64616: CALL_OW 247
64620: PUSH
64621: LD_INT 2
64623: EQUAL
64624: IFFALSE 64637
// ComExitVehicle ( unit ) else
64626: LD_VAR 0 1
64630: PPUSH
64631: CALL_OW 121
64635: GO 64646
// ComExitBuilding ( unit ) ;
64637: LD_VAR 0 1
64641: PPUSH
64642: CALL_OW 122
// result := tmp ;
64646: LD_ADDR_VAR 0 2
64650: PUSH
64651: LD_VAR 0 3
64655: ST_TO_ADDR
// end ;
64656: LD_VAR 0 2
64660: RET
// export function ComExitAll ( units ) ; var i ; begin
64661: LD_INT 0
64663: PPUSH
64664: PPUSH
// if not units then
64665: LD_VAR 0 1
64669: NOT
64670: IFFALSE 64674
// exit ;
64672: GO 64700
// for i in units do
64674: LD_ADDR_VAR 0 3
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: FOR_IN
64685: IFFALSE 64698
// ComExit ( i ) ;
64687: LD_VAR 0 3
64691: PPUSH
64692: CALL 64578 0 1
64696: GO 64684
64698: POP
64699: POP
// end ;
64700: LD_VAR 0 2
64704: RET
// export function ResetHc ; begin
64705: LD_INT 0
64707: PPUSH
// InitHc ;
64708: CALL_OW 19
// hc_importance := 0 ;
64712: LD_ADDR_OWVAR 32
64716: PUSH
64717: LD_INT 0
64719: ST_TO_ADDR
// end ;
64720: LD_VAR 0 1
64724: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64725: LD_INT 0
64727: PPUSH
64728: PPUSH
64729: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64730: LD_ADDR_VAR 0 6
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_VAR 0 3
64744: PLUS
64745: PUSH
64746: LD_INT 2
64748: DIV
64749: ST_TO_ADDR
// if _x < 0 then
64750: LD_VAR 0 6
64754: PUSH
64755: LD_INT 0
64757: LESS
64758: IFFALSE 64775
// _x := _x * - 1 ;
64760: LD_ADDR_VAR 0 6
64764: PUSH
64765: LD_VAR 0 6
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: MUL
64774: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64775: LD_ADDR_VAR 0 7
64779: PUSH
64780: LD_VAR 0 2
64784: PUSH
64785: LD_VAR 0 4
64789: PLUS
64790: PUSH
64791: LD_INT 2
64793: DIV
64794: ST_TO_ADDR
// if _y < 0 then
64795: LD_VAR 0 7
64799: PUSH
64800: LD_INT 0
64802: LESS
64803: IFFALSE 64820
// _y := _y * - 1 ;
64805: LD_ADDR_VAR 0 7
64809: PUSH
64810: LD_VAR 0 7
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: MUL
64819: ST_TO_ADDR
// result := [ _x , _y ] ;
64820: LD_ADDR_VAR 0 5
64824: PUSH
64825: LD_VAR 0 6
64829: PUSH
64830: LD_VAR 0 7
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: ST_TO_ADDR
// end ;
64839: LD_VAR 0 5
64843: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64844: LD_INT 0
64846: PPUSH
64847: PPUSH
64848: PPUSH
64849: PPUSH
// task := GetTaskList ( unit ) ;
64850: LD_ADDR_VAR 0 7
64854: PUSH
64855: LD_VAR 0 1
64859: PPUSH
64860: CALL_OW 437
64864: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64865: LD_VAR 0 7
64869: NOT
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: CALL_OW 308
64885: NOT
64886: AND
64887: IFFALSE 64891
// exit ;
64889: GO 65009
// if IsInArea ( unit , area ) then
64891: LD_VAR 0 1
64895: PPUSH
64896: LD_VAR 0 2
64900: PPUSH
64901: CALL_OW 308
64905: IFFALSE 64923
// begin ComMoveToArea ( unit , goAway ) ;
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_VAR 0 3
64916: PPUSH
64917: CALL_OW 113
// exit ;
64921: GO 65009
// end ; if task [ 1 ] [ 1 ] <> M then
64923: LD_VAR 0 7
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_STRING M
64938: NONEQUAL
64939: IFFALSE 64943
// exit ;
64941: GO 65009
// x := task [ 1 ] [ 2 ] ;
64943: LD_ADDR_VAR 0 5
64947: PUSH
64948: LD_VAR 0 7
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PUSH
64957: LD_INT 2
64959: ARRAY
64960: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64961: LD_ADDR_VAR 0 6
64965: PUSH
64966: LD_VAR 0 7
64970: PUSH
64971: LD_INT 1
64973: ARRAY
64974: PUSH
64975: LD_INT 3
64977: ARRAY
64978: ST_TO_ADDR
// if InArea ( x , y , area ) then
64979: LD_VAR 0 5
64983: PPUSH
64984: LD_VAR 0 6
64988: PPUSH
64989: LD_VAR 0 2
64993: PPUSH
64994: CALL_OW 309
64998: IFFALSE 65009
// ComStop ( unit ) ;
65000: LD_VAR 0 1
65004: PPUSH
65005: CALL_OW 141
// end ;
65009: LD_VAR 0 4
65013: RET
// export function Abs ( value ) ; begin
65014: LD_INT 0
65016: PPUSH
// result := value ;
65017: LD_ADDR_VAR 0 2
65021: PUSH
65022: LD_VAR 0 1
65026: ST_TO_ADDR
// if value < 0 then
65027: LD_VAR 0 1
65031: PUSH
65032: LD_INT 0
65034: LESS
65035: IFFALSE 65052
// result := value * - 1 ;
65037: LD_ADDR_VAR 0 2
65041: PUSH
65042: LD_VAR 0 1
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: MUL
65051: ST_TO_ADDR
// end ;
65052: LD_VAR 0 2
65056: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65057: LD_INT 0
65059: PPUSH
65060: PPUSH
65061: PPUSH
65062: PPUSH
65063: PPUSH
65064: PPUSH
65065: PPUSH
65066: PPUSH
// if not unit or not building then
65067: LD_VAR 0 1
65071: NOT
65072: PUSH
65073: LD_VAR 0 2
65077: NOT
65078: OR
65079: IFFALSE 65083
// exit ;
65081: GO 65309
// x := GetX ( building ) ;
65083: LD_ADDR_VAR 0 4
65087: PUSH
65088: LD_VAR 0 2
65092: PPUSH
65093: CALL_OW 250
65097: ST_TO_ADDR
// y := GetY ( building ) ;
65098: LD_ADDR_VAR 0 6
65102: PUSH
65103: LD_VAR 0 2
65107: PPUSH
65108: CALL_OW 251
65112: ST_TO_ADDR
// d := GetDir ( building ) ;
65113: LD_ADDR_VAR 0 8
65117: PUSH
65118: LD_VAR 0 2
65122: PPUSH
65123: CALL_OW 254
65127: ST_TO_ADDR
// r := 4 ;
65128: LD_ADDR_VAR 0 9
65132: PUSH
65133: LD_INT 4
65135: ST_TO_ADDR
// for i := 1 to 5 do
65136: LD_ADDR_VAR 0 10
65140: PUSH
65141: DOUBLE
65142: LD_INT 1
65144: DEC
65145: ST_TO_ADDR
65146: LD_INT 5
65148: PUSH
65149: FOR_TO
65150: IFFALSE 65307
// begin _x := ShiftX ( x , d , r + i ) ;
65152: LD_ADDR_VAR 0 5
65156: PUSH
65157: LD_VAR 0 4
65161: PPUSH
65162: LD_VAR 0 8
65166: PPUSH
65167: LD_VAR 0 9
65171: PUSH
65172: LD_VAR 0 10
65176: PLUS
65177: PPUSH
65178: CALL_OW 272
65182: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65183: LD_ADDR_VAR 0 7
65187: PUSH
65188: LD_VAR 0 6
65192: PPUSH
65193: LD_VAR 0 8
65197: PPUSH
65198: LD_VAR 0 9
65202: PUSH
65203: LD_VAR 0 10
65207: PLUS
65208: PPUSH
65209: CALL_OW 273
65213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65214: LD_VAR 0 5
65218: PPUSH
65219: LD_VAR 0 7
65223: PPUSH
65224: CALL_OW 488
65228: PUSH
65229: LD_VAR 0 5
65233: PPUSH
65234: LD_VAR 0 7
65238: PPUSH
65239: CALL_OW 428
65243: PPUSH
65244: CALL_OW 247
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: IN
65259: NOT
65260: AND
65261: IFFALSE 65305
// begin ComMoveXY ( unit , _x , _y ) ;
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_VAR 0 5
65272: PPUSH
65273: LD_VAR 0 7
65277: PPUSH
65278: CALL_OW 111
// result := [ _x , _y ] ;
65282: LD_ADDR_VAR 0 3
65286: PUSH
65287: LD_VAR 0 5
65291: PUSH
65292: LD_VAR 0 7
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// exit ;
65301: POP
65302: POP
65303: GO 65309
// end ; end ;
65305: GO 65149
65307: POP
65308: POP
// end ;
65309: LD_VAR 0 3
65313: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
// result := 0 ;
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65327: LD_VAR 0 1
65331: PUSH
65332: LD_INT 0
65334: LESS
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: LD_INT 8
65343: GREATER
65344: OR
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: LD_INT 0
65353: LESS
65354: OR
65355: PUSH
65356: LD_VAR 0 2
65360: PUSH
65361: LD_INT 8
65363: GREATER
65364: OR
65365: IFFALSE 65369
// exit ;
65367: GO 65444
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65369: LD_ADDR_VAR 0 4
65373: PUSH
65374: LD_INT 22
65376: PUSH
65377: LD_VAR 0 2
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PPUSH
65386: CALL_OW 69
65390: PUSH
65391: FOR_IN
65392: IFFALSE 65442
// begin un := UnitShoot ( i ) ;
65394: LD_ADDR_VAR 0 5
65398: PUSH
65399: LD_VAR 0 4
65403: PPUSH
65404: CALL_OW 504
65408: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65409: LD_VAR 0 5
65413: PPUSH
65414: CALL_OW 255
65418: PUSH
65419: LD_VAR 0 1
65423: EQUAL
65424: IFFALSE 65440
// begin result := un ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: LD_VAR 0 5
65435: ST_TO_ADDR
// exit ;
65436: POP
65437: POP
65438: GO 65444
// end ; end ;
65440: GO 65391
65442: POP
65443: POP
// end ;
65444: LD_VAR 0 3
65448: RET
// export function GetCargoBay ( units ) ; begin
65449: LD_INT 0
65451: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65452: LD_ADDR_VAR 0 2
65456: PUSH
65457: LD_VAR 0 1
65461: PPUSH
65462: LD_INT 2
65464: PUSH
65465: LD_INT 34
65467: PUSH
65468: LD_INT 12
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 34
65477: PUSH
65478: LD_INT 51
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 34
65487: PUSH
65488: LD_INT 32
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 34
65497: PUSH
65498: LD_INT 89
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: PPUSH
65512: CALL_OW 72
65516: ST_TO_ADDR
// end ;
65517: LD_VAR 0 2
65521: RET
// export function Negate ( value ) ; begin
65522: LD_INT 0
65524: PPUSH
// result := not value ;
65525: LD_ADDR_VAR 0 2
65529: PUSH
65530: LD_VAR 0 1
65534: NOT
65535: ST_TO_ADDR
// end ;
65536: LD_VAR 0 2
65540: RET
// export function Inc ( value ) ; begin
65541: LD_INT 0
65543: PPUSH
// result := value + 1 ;
65544: LD_ADDR_VAR 0 2
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_INT 1
65556: PLUS
65557: ST_TO_ADDR
// end ;
65558: LD_VAR 0 2
65562: RET
// export function Dec ( value ) ; begin
65563: LD_INT 0
65565: PPUSH
// result := value - 1 ;
65566: LD_ADDR_VAR 0 2
65570: PUSH
65571: LD_VAR 0 1
65575: PUSH
65576: LD_INT 1
65578: MINUS
65579: ST_TO_ADDR
// end ;
65580: LD_VAR 0 2
65584: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65585: LD_INT 0
65587: PPUSH
65588: PPUSH
65589: PPUSH
65590: PPUSH
65591: PPUSH
65592: PPUSH
65593: PPUSH
65594: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65595: LD_VAR 0 1
65599: PPUSH
65600: LD_VAR 0 2
65604: PPUSH
65605: CALL_OW 488
65609: NOT
65610: PUSH
65611: LD_VAR 0 3
65615: PPUSH
65616: LD_VAR 0 4
65620: PPUSH
65621: CALL_OW 488
65625: NOT
65626: OR
65627: IFFALSE 65640
// begin result := - 1 ;
65629: LD_ADDR_VAR 0 5
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: ST_TO_ADDR
// exit ;
65638: GO 65875
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65640: LD_ADDR_VAR 0 12
65644: PUSH
65645: LD_VAR 0 1
65649: PPUSH
65650: LD_VAR 0 2
65654: PPUSH
65655: LD_VAR 0 3
65659: PPUSH
65660: LD_VAR 0 4
65664: PPUSH
65665: CALL 64725 0 4
65669: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65670: LD_ADDR_VAR 0 11
65674: PUSH
65675: LD_VAR 0 1
65679: PPUSH
65680: LD_VAR 0 2
65684: PPUSH
65685: LD_VAR 0 12
65689: PUSH
65690: LD_INT 1
65692: ARRAY
65693: PPUSH
65694: LD_VAR 0 12
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: PPUSH
65703: CALL_OW 298
65707: ST_TO_ADDR
// distance := 9999 ;
65708: LD_ADDR_VAR 0 10
65712: PUSH
65713: LD_INT 9999
65715: ST_TO_ADDR
// for i := 0 to 5 do
65716: LD_ADDR_VAR 0 6
65720: PUSH
65721: DOUBLE
65722: LD_INT 0
65724: DEC
65725: ST_TO_ADDR
65726: LD_INT 5
65728: PUSH
65729: FOR_TO
65730: IFFALSE 65873
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65732: LD_ADDR_VAR 0 7
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: LD_VAR 0 6
65746: PPUSH
65747: LD_VAR 0 11
65751: PPUSH
65752: CALL_OW 272
65756: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65757: LD_ADDR_VAR 0 8
65761: PUSH
65762: LD_VAR 0 2
65766: PPUSH
65767: LD_VAR 0 6
65771: PPUSH
65772: LD_VAR 0 11
65776: PPUSH
65777: CALL_OW 273
65781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65782: LD_VAR 0 7
65786: PPUSH
65787: LD_VAR 0 8
65791: PPUSH
65792: CALL_OW 488
65796: NOT
65797: IFFALSE 65801
// continue ;
65799: GO 65729
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65801: LD_ADDR_VAR 0 9
65805: PUSH
65806: LD_VAR 0 12
65810: PUSH
65811: LD_INT 1
65813: ARRAY
65814: PPUSH
65815: LD_VAR 0 12
65819: PUSH
65820: LD_INT 2
65822: ARRAY
65823: PPUSH
65824: LD_VAR 0 7
65828: PPUSH
65829: LD_VAR 0 8
65833: PPUSH
65834: CALL_OW 298
65838: ST_TO_ADDR
// if tmp < distance then
65839: LD_VAR 0 9
65843: PUSH
65844: LD_VAR 0 10
65848: LESS
65849: IFFALSE 65871
// begin result := i ;
65851: LD_ADDR_VAR 0 5
65855: PUSH
65856: LD_VAR 0 6
65860: ST_TO_ADDR
// distance := tmp ;
65861: LD_ADDR_VAR 0 10
65865: PUSH
65866: LD_VAR 0 9
65870: ST_TO_ADDR
// end ; end ;
65871: GO 65729
65873: POP
65874: POP
// end ;
65875: LD_VAR 0 5
65879: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65880: LD_INT 0
65882: PPUSH
65883: PPUSH
// if not driver or not IsInUnit ( driver ) then
65884: LD_VAR 0 1
65888: NOT
65889: PUSH
65890: LD_VAR 0 1
65894: PPUSH
65895: CALL_OW 310
65899: NOT
65900: OR
65901: IFFALSE 65905
// exit ;
65903: GO 65995
// vehicle := IsInUnit ( driver ) ;
65905: LD_ADDR_VAR 0 3
65909: PUSH
65910: LD_VAR 0 1
65914: PPUSH
65915: CALL_OW 310
65919: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65920: LD_VAR 0 1
65924: PPUSH
65925: LD_STRING \
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: PUSH
65955: LD_STRING E
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_VAR 0 3
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PPUSH
65991: CALL_OW 446
// end ;
65995: LD_VAR 0 2
65999: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66000: LD_INT 0
66002: PPUSH
66003: PPUSH
// if not driver or not IsInUnit ( driver ) then
66004: LD_VAR 0 1
66008: NOT
66009: PUSH
66010: LD_VAR 0 1
66014: PPUSH
66015: CALL_OW 310
66019: NOT
66020: OR
66021: IFFALSE 66025
// exit ;
66023: GO 66115
// vehicle := IsInUnit ( driver ) ;
66025: LD_ADDR_VAR 0 3
66029: PUSH
66030: LD_VAR 0 1
66034: PPUSH
66035: CALL_OW 310
66039: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_STRING \
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: PUSH
66075: LD_STRING E
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_VAR 0 3
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PPUSH
66111: CALL_OW 447
// end ;
66115: LD_VAR 0 2
66119: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66120: LD_INT 0
66122: PPUSH
66123: PPUSH
66124: PPUSH
// tmp := [ ] ;
66125: LD_ADDR_VAR 0 5
66129: PUSH
66130: EMPTY
66131: ST_TO_ADDR
// for i in units do
66132: LD_ADDR_VAR 0 4
66136: PUSH
66137: LD_VAR 0 1
66141: PUSH
66142: FOR_IN
66143: IFFALSE 66181
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66145: LD_ADDR_VAR 0 5
66149: PUSH
66150: LD_VAR 0 5
66154: PPUSH
66155: LD_VAR 0 5
66159: PUSH
66160: LD_INT 1
66162: PLUS
66163: PPUSH
66164: LD_VAR 0 4
66168: PPUSH
66169: CALL_OW 256
66173: PPUSH
66174: CALL_OW 2
66178: ST_TO_ADDR
66179: GO 66142
66181: POP
66182: POP
// if not tmp then
66183: LD_VAR 0 5
66187: NOT
66188: IFFALSE 66192
// exit ;
66190: GO 66240
// if asc then
66192: LD_VAR 0 2
66196: IFFALSE 66220
// result := SortListByListAsc ( units , tmp ) else
66198: LD_ADDR_VAR 0 3
66202: PUSH
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_VAR 0 5
66212: PPUSH
66213: CALL_OW 76
66217: ST_TO_ADDR
66218: GO 66240
// result := SortListByListDesc ( units , tmp ) ;
66220: LD_ADDR_VAR 0 3
66224: PUSH
66225: LD_VAR 0 1
66229: PPUSH
66230: LD_VAR 0 5
66234: PPUSH
66235: CALL_OW 77
66239: ST_TO_ADDR
// end ;
66240: LD_VAR 0 3
66244: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66245: LD_INT 0
66247: PPUSH
66248: PPUSH
// task := GetTaskList ( mech ) ;
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_VAR 0 1
66258: PPUSH
66259: CALL_OW 437
66263: ST_TO_ADDR
// if not task then
66264: LD_VAR 0 4
66268: NOT
66269: IFFALSE 66273
// exit ;
66271: GO 66315
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66273: LD_ADDR_VAR 0 3
66277: PUSH
66278: LD_VAR 0 4
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: PUSH
66287: LD_INT 1
66289: ARRAY
66290: PUSH
66291: LD_STRING r
66293: EQUAL
66294: PUSH
66295: LD_VAR 0 4
66299: PUSH
66300: LD_INT 1
66302: ARRAY
66303: PUSH
66304: LD_INT 4
66306: ARRAY
66307: PUSH
66308: LD_VAR 0 2
66312: EQUAL
66313: AND
66314: ST_TO_ADDR
// end ;
66315: LD_VAR 0 3
66319: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66320: LD_INT 0
66322: PPUSH
// SetDir ( unit , d ) ;
66323: LD_VAR 0 1
66327: PPUSH
66328: LD_VAR 0 4
66332: PPUSH
66333: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66337: LD_VAR 0 1
66341: PPUSH
66342: LD_VAR 0 2
66346: PPUSH
66347: LD_VAR 0 3
66351: PPUSH
66352: LD_VAR 0 5
66356: PPUSH
66357: CALL_OW 48
// end ;
66361: LD_VAR 0 6
66365: RET
// export function ToNaturalNumber ( number ) ; begin
66366: LD_INT 0
66368: PPUSH
// result := number div 1 ;
66369: LD_ADDR_VAR 0 2
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 1
66381: DIV
66382: ST_TO_ADDR
// if number < 0 then
66383: LD_VAR 0 1
66387: PUSH
66388: LD_INT 0
66390: LESS
66391: IFFALSE 66401
// result := 0 ;
66393: LD_ADDR_VAR 0 2
66397: PUSH
66398: LD_INT 0
66400: ST_TO_ADDR
// end ;
66401: LD_VAR 0 2
66405: RET
// export function SortByClass ( units , class ) ; var un ; begin
66406: LD_INT 0
66408: PPUSH
66409: PPUSH
// if not units or not class then
66410: LD_VAR 0 1
66414: NOT
66415: PUSH
66416: LD_VAR 0 2
66420: NOT
66421: OR
66422: IFFALSE 66426
// exit ;
66424: GO 66521
// result := [ ] ;
66426: LD_ADDR_VAR 0 3
66430: PUSH
66431: EMPTY
66432: ST_TO_ADDR
// for un in units do
66433: LD_ADDR_VAR 0 4
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: FOR_IN
66444: IFFALSE 66519
// if GetClass ( un ) = class then
66446: LD_VAR 0 4
66450: PPUSH
66451: CALL_OW 257
66455: PUSH
66456: LD_VAR 0 2
66460: EQUAL
66461: IFFALSE 66488
// result := Insert ( result , 1 , un ) else
66463: LD_ADDR_VAR 0 3
66467: PUSH
66468: LD_VAR 0 3
66472: PPUSH
66473: LD_INT 1
66475: PPUSH
66476: LD_VAR 0 4
66480: PPUSH
66481: CALL_OW 2
66485: ST_TO_ADDR
66486: GO 66517
// result := Replace ( result , result + 1 , un ) ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_VAR 0 3
66497: PPUSH
66498: LD_VAR 0 3
66502: PUSH
66503: LD_INT 1
66505: PLUS
66506: PPUSH
66507: LD_VAR 0 4
66511: PPUSH
66512: CALL_OW 1
66516: ST_TO_ADDR
66517: GO 66443
66519: POP
66520: POP
// end ;
66521: LD_VAR 0 3
66525: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66526: LD_INT 0
66528: PPUSH
66529: PPUSH
66530: PPUSH
66531: PPUSH
66532: PPUSH
66533: PPUSH
66534: PPUSH
// result := [ ] ;
66535: LD_ADDR_VAR 0 4
66539: PUSH
66540: EMPTY
66541: ST_TO_ADDR
// if x - r < 0 then
66542: LD_VAR 0 1
66546: PUSH
66547: LD_VAR 0 3
66551: MINUS
66552: PUSH
66553: LD_INT 0
66555: LESS
66556: IFFALSE 66568
// min_x := 0 else
66558: LD_ADDR_VAR 0 8
66562: PUSH
66563: LD_INT 0
66565: ST_TO_ADDR
66566: GO 66584
// min_x := x - r ;
66568: LD_ADDR_VAR 0 8
66572: PUSH
66573: LD_VAR 0 1
66577: PUSH
66578: LD_VAR 0 3
66582: MINUS
66583: ST_TO_ADDR
// if y - r < 0 then
66584: LD_VAR 0 2
66588: PUSH
66589: LD_VAR 0 3
66593: MINUS
66594: PUSH
66595: LD_INT 0
66597: LESS
66598: IFFALSE 66610
// min_y := 0 else
66600: LD_ADDR_VAR 0 7
66604: PUSH
66605: LD_INT 0
66607: ST_TO_ADDR
66608: GO 66626
// min_y := y - r ;
66610: LD_ADDR_VAR 0 7
66614: PUSH
66615: LD_VAR 0 2
66619: PUSH
66620: LD_VAR 0 3
66624: MINUS
66625: ST_TO_ADDR
// max_x := x + r ;
66626: LD_ADDR_VAR 0 9
66630: PUSH
66631: LD_VAR 0 1
66635: PUSH
66636: LD_VAR 0 3
66640: PLUS
66641: ST_TO_ADDR
// max_y := y + r ;
66642: LD_ADDR_VAR 0 10
66646: PUSH
66647: LD_VAR 0 2
66651: PUSH
66652: LD_VAR 0 3
66656: PLUS
66657: ST_TO_ADDR
// for _x = min_x to max_x do
66658: LD_ADDR_VAR 0 5
66662: PUSH
66663: DOUBLE
66664: LD_VAR 0 8
66668: DEC
66669: ST_TO_ADDR
66670: LD_VAR 0 9
66674: PUSH
66675: FOR_TO
66676: IFFALSE 66777
// for _y = min_y to max_y do
66678: LD_ADDR_VAR 0 6
66682: PUSH
66683: DOUBLE
66684: LD_VAR 0 7
66688: DEC
66689: ST_TO_ADDR
66690: LD_VAR 0 10
66694: PUSH
66695: FOR_TO
66696: IFFALSE 66773
// begin if not ValidHex ( _x , _y ) then
66698: LD_VAR 0 5
66702: PPUSH
66703: LD_VAR 0 6
66707: PPUSH
66708: CALL_OW 488
66712: NOT
66713: IFFALSE 66717
// continue ;
66715: GO 66695
// if GetResourceTypeXY ( _x , _y ) then
66717: LD_VAR 0 5
66721: PPUSH
66722: LD_VAR 0 6
66726: PPUSH
66727: CALL_OW 283
66731: IFFALSE 66771
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66733: LD_ADDR_VAR 0 4
66737: PUSH
66738: LD_VAR 0 4
66742: PPUSH
66743: LD_VAR 0 4
66747: PUSH
66748: LD_INT 1
66750: PLUS
66751: PPUSH
66752: LD_VAR 0 5
66756: PUSH
66757: LD_VAR 0 6
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PPUSH
66766: CALL_OW 1
66770: ST_TO_ADDR
// end ;
66771: GO 66695
66773: POP
66774: POP
66775: GO 66675
66777: POP
66778: POP
// end ;
66779: LD_VAR 0 4
66783: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66784: LD_INT 0
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
66792: PPUSH
66793: PPUSH
// if not units then
66794: LD_VAR 0 1
66798: NOT
66799: IFFALSE 66803
// exit ;
66801: GO 67327
// result := UnitFilter ( units , [ f_ok ] ) ;
66803: LD_ADDR_VAR 0 3
66807: PUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_INT 50
66815: PUSH
66816: EMPTY
66817: LIST
66818: PPUSH
66819: CALL_OW 72
66823: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66824: LD_ADDR_VAR 0 8
66828: PUSH
66829: LD_VAR 0 1
66833: PUSH
66834: LD_INT 1
66836: ARRAY
66837: PPUSH
66838: CALL_OW 255
66842: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66843: LD_ADDR_VAR 0 10
66847: PUSH
66848: LD_INT 29
66850: PUSH
66851: LD_INT 91
66853: PUSH
66854: LD_INT 49
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// if not result then
66862: LD_VAR 0 3
66866: NOT
66867: IFFALSE 66871
// exit ;
66869: GO 67327
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_INT 81
66878: PUSH
66879: LD_VAR 0 8
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PPUSH
66888: CALL_OW 69
66892: ST_TO_ADDR
// for i in result do
66893: LD_ADDR_VAR 0 4
66897: PUSH
66898: LD_VAR 0 3
66902: PUSH
66903: FOR_IN
66904: IFFALSE 67325
// begin tag := GetTag ( i ) + 1 ;
66906: LD_ADDR_VAR 0 9
66910: PUSH
66911: LD_VAR 0 4
66915: PPUSH
66916: CALL_OW 110
66920: PUSH
66921: LD_INT 1
66923: PLUS
66924: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66925: LD_ADDR_VAR 0 7
66929: PUSH
66930: LD_VAR 0 4
66934: PPUSH
66935: CALL_OW 250
66939: PPUSH
66940: LD_VAR 0 4
66944: PPUSH
66945: CALL_OW 251
66949: PPUSH
66950: LD_INT 6
66952: PPUSH
66953: CALL 66526 0 3
66957: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66958: LD_VAR 0 4
66962: PPUSH
66963: CALL_OW 247
66967: PUSH
66968: LD_INT 2
66970: EQUAL
66971: PUSH
66972: LD_VAR 0 7
66976: AND
66977: PUSH
66978: LD_VAR 0 4
66982: PPUSH
66983: CALL_OW 264
66987: PUSH
66988: LD_VAR 0 10
66992: IN
66993: NOT
66994: AND
66995: IFFALSE 67034
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66997: LD_VAR 0 4
67001: PPUSH
67002: LD_VAR 0 7
67006: PUSH
67007: LD_INT 1
67009: ARRAY
67010: PUSH
67011: LD_INT 1
67013: ARRAY
67014: PPUSH
67015: LD_VAR 0 7
67019: PUSH
67020: LD_INT 1
67022: ARRAY
67023: PUSH
67024: LD_INT 2
67026: ARRAY
67027: PPUSH
67028: CALL_OW 116
67032: GO 67323
// if path > tag then
67034: LD_VAR 0 2
67038: PUSH
67039: LD_VAR 0 9
67043: GREATER
67044: IFFALSE 67252
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67046: LD_ADDR_VAR 0 6
67050: PUSH
67051: LD_VAR 0 5
67055: PPUSH
67056: LD_INT 91
67058: PUSH
67059: LD_VAR 0 4
67063: PUSH
67064: LD_INT 8
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: PPUSH
67072: CALL_OW 72
67076: ST_TO_ADDR
// if nearEnemy then
67077: LD_VAR 0 6
67081: IFFALSE 67150
// begin if GetWeapon ( i ) = ru_time_lapser then
67083: LD_VAR 0 4
67087: PPUSH
67088: CALL_OW 264
67092: PUSH
67093: LD_INT 49
67095: EQUAL
67096: IFFALSE 67124
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67098: LD_VAR 0 4
67102: PPUSH
67103: LD_VAR 0 6
67107: PPUSH
67108: LD_VAR 0 4
67112: PPUSH
67113: CALL_OW 74
67117: PPUSH
67118: CALL_OW 112
67122: GO 67148
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67124: LD_VAR 0 4
67128: PPUSH
67129: LD_VAR 0 6
67133: PPUSH
67134: LD_VAR 0 4
67138: PPUSH
67139: CALL_OW 74
67143: PPUSH
67144: CALL_OW 115
// end else
67148: GO 67250
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67150: LD_VAR 0 4
67154: PPUSH
67155: LD_VAR 0 2
67159: PUSH
67160: LD_VAR 0 9
67164: ARRAY
67165: PUSH
67166: LD_INT 1
67168: ARRAY
67169: PPUSH
67170: LD_VAR 0 2
67174: PUSH
67175: LD_VAR 0 9
67179: ARRAY
67180: PUSH
67181: LD_INT 2
67183: ARRAY
67184: PPUSH
67185: CALL_OW 297
67189: PUSH
67190: LD_INT 6
67192: GREATER
67193: IFFALSE 67236
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67195: LD_VAR 0 4
67199: PPUSH
67200: LD_VAR 0 2
67204: PUSH
67205: LD_VAR 0 9
67209: ARRAY
67210: PUSH
67211: LD_INT 1
67213: ARRAY
67214: PPUSH
67215: LD_VAR 0 2
67219: PUSH
67220: LD_VAR 0 9
67224: ARRAY
67225: PUSH
67226: LD_INT 2
67228: ARRAY
67229: PPUSH
67230: CALL_OW 114
67234: GO 67250
// SetTag ( i , tag ) ;
67236: LD_VAR 0 4
67240: PPUSH
67241: LD_VAR 0 9
67245: PPUSH
67246: CALL_OW 109
// end else
67250: GO 67323
// if enemy then
67252: LD_VAR 0 5
67256: IFFALSE 67323
// begin if GetWeapon ( i ) = ru_time_lapser then
67258: LD_VAR 0 4
67262: PPUSH
67263: CALL_OW 264
67267: PUSH
67268: LD_INT 49
67270: EQUAL
67271: IFFALSE 67299
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67273: LD_VAR 0 4
67277: PPUSH
67278: LD_VAR 0 5
67282: PPUSH
67283: LD_VAR 0 4
67287: PPUSH
67288: CALL_OW 74
67292: PPUSH
67293: CALL_OW 112
67297: GO 67323
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67299: LD_VAR 0 4
67303: PPUSH
67304: LD_VAR 0 5
67308: PPUSH
67309: LD_VAR 0 4
67313: PPUSH
67314: CALL_OW 74
67318: PPUSH
67319: CALL_OW 115
// end ; end ;
67323: GO 66903
67325: POP
67326: POP
// end ;
67327: LD_VAR 0 3
67331: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67332: LD_INT 0
67334: PPUSH
67335: PPUSH
67336: PPUSH
// if not unit or IsInUnit ( unit ) then
67337: LD_VAR 0 1
67341: NOT
67342: PUSH
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 310
67352: OR
67353: IFFALSE 67357
// exit ;
67355: GO 67448
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67357: LD_ADDR_VAR 0 4
67361: PUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: CALL_OW 250
67371: PPUSH
67372: LD_VAR 0 2
67376: PPUSH
67377: LD_INT 1
67379: PPUSH
67380: CALL_OW 272
67384: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67385: LD_ADDR_VAR 0 5
67389: PUSH
67390: LD_VAR 0 1
67394: PPUSH
67395: CALL_OW 251
67399: PPUSH
67400: LD_VAR 0 2
67404: PPUSH
67405: LD_INT 1
67407: PPUSH
67408: CALL_OW 273
67412: ST_TO_ADDR
// if ValidHex ( x , y ) then
67413: LD_VAR 0 4
67417: PPUSH
67418: LD_VAR 0 5
67422: PPUSH
67423: CALL_OW 488
67427: IFFALSE 67448
// ComTurnXY ( unit , x , y ) ;
67429: LD_VAR 0 1
67433: PPUSH
67434: LD_VAR 0 4
67438: PPUSH
67439: LD_VAR 0 5
67443: PPUSH
67444: CALL_OW 118
// end ;
67448: LD_VAR 0 3
67452: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67453: LD_INT 0
67455: PPUSH
67456: PPUSH
// result := false ;
67457: LD_ADDR_VAR 0 3
67461: PUSH
67462: LD_INT 0
67464: ST_TO_ADDR
// if not units then
67465: LD_VAR 0 2
67469: NOT
67470: IFFALSE 67474
// exit ;
67472: GO 67519
// for i in units do
67474: LD_ADDR_VAR 0 4
67478: PUSH
67479: LD_VAR 0 2
67483: PUSH
67484: FOR_IN
67485: IFFALSE 67517
// if See ( side , i ) then
67487: LD_VAR 0 1
67491: PPUSH
67492: LD_VAR 0 4
67496: PPUSH
67497: CALL_OW 292
67501: IFFALSE 67515
// begin result := true ;
67503: LD_ADDR_VAR 0 3
67507: PUSH
67508: LD_INT 1
67510: ST_TO_ADDR
// exit ;
67511: POP
67512: POP
67513: GO 67519
// end ;
67515: GO 67484
67517: POP
67518: POP
// end ;
67519: LD_VAR 0 3
67523: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
// if not unit or not points then
67530: LD_VAR 0 1
67534: NOT
67535: PUSH
67536: LD_VAR 0 2
67540: NOT
67541: OR
67542: IFFALSE 67546
// exit ;
67544: GO 67636
// dist := 99999 ;
67546: LD_ADDR_VAR 0 5
67550: PUSH
67551: LD_INT 99999
67553: ST_TO_ADDR
// for i in points do
67554: LD_ADDR_VAR 0 4
67558: PUSH
67559: LD_VAR 0 2
67563: PUSH
67564: FOR_IN
67565: IFFALSE 67634
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67567: LD_ADDR_VAR 0 6
67571: PUSH
67572: LD_VAR 0 1
67576: PPUSH
67577: LD_VAR 0 4
67581: PUSH
67582: LD_INT 1
67584: ARRAY
67585: PPUSH
67586: LD_VAR 0 4
67590: PUSH
67591: LD_INT 2
67593: ARRAY
67594: PPUSH
67595: CALL_OW 297
67599: ST_TO_ADDR
// if tmpDist < dist then
67600: LD_VAR 0 6
67604: PUSH
67605: LD_VAR 0 5
67609: LESS
67610: IFFALSE 67632
// begin result := i ;
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_VAR 0 4
67621: ST_TO_ADDR
// dist := tmpDist ;
67622: LD_ADDR_VAR 0 5
67626: PUSH
67627: LD_VAR 0 6
67631: ST_TO_ADDR
// end ; end ;
67632: GO 67564
67634: POP
67635: POP
// end ;
67636: LD_VAR 0 3
67640: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67641: LD_INT 0
67643: PPUSH
// uc_side := side ;
67644: LD_ADDR_OWVAR 20
67648: PUSH
67649: LD_VAR 0 1
67653: ST_TO_ADDR
// uc_nation := 3 ;
67654: LD_ADDR_OWVAR 21
67658: PUSH
67659: LD_INT 3
67661: ST_TO_ADDR
// vc_chassis := 25 ;
67662: LD_ADDR_OWVAR 37
67666: PUSH
67667: LD_INT 25
67669: ST_TO_ADDR
// vc_engine := engine_siberite ;
67670: LD_ADDR_OWVAR 39
67674: PUSH
67675: LD_INT 3
67677: ST_TO_ADDR
// vc_control := control_computer ;
67678: LD_ADDR_OWVAR 38
67682: PUSH
67683: LD_INT 3
67685: ST_TO_ADDR
// vc_weapon := 59 ;
67686: LD_ADDR_OWVAR 40
67690: PUSH
67691: LD_INT 59
67693: ST_TO_ADDR
// result := CreateVehicle ;
67694: LD_ADDR_VAR 0 5
67698: PUSH
67699: CALL_OW 45
67703: ST_TO_ADDR
// SetDir ( result , d ) ;
67704: LD_VAR 0 5
67708: PPUSH
67709: LD_VAR 0 4
67713: PPUSH
67714: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67718: LD_VAR 0 5
67722: PPUSH
67723: LD_VAR 0 2
67727: PPUSH
67728: LD_VAR 0 3
67732: PPUSH
67733: LD_INT 0
67735: PPUSH
67736: CALL_OW 48
// end ;
67740: LD_VAR 0 5
67744: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67745: LD_INT 0
67747: PPUSH
67748: PPUSH
67749: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67750: LD_ADDR_VAR 0 2
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67773: LD_VAR 0 1
67777: NOT
67778: PUSH
67779: LD_VAR 0 1
67783: PPUSH
67784: CALL_OW 264
67788: PUSH
67789: LD_INT 12
67791: PUSH
67792: LD_INT 51
67794: PUSH
67795: LD_INT 32
67797: PUSH
67798: LD_INT 89
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: IN
67807: NOT
67808: OR
67809: IFFALSE 67813
// exit ;
67811: GO 67911
// for i := 1 to 3 do
67813: LD_ADDR_VAR 0 3
67817: PUSH
67818: DOUBLE
67819: LD_INT 1
67821: DEC
67822: ST_TO_ADDR
67823: LD_INT 3
67825: PUSH
67826: FOR_TO
67827: IFFALSE 67909
// begin tmp := GetCargo ( cargo , i ) ;
67829: LD_ADDR_VAR 0 4
67833: PUSH
67834: LD_VAR 0 1
67838: PPUSH
67839: LD_VAR 0 3
67843: PPUSH
67844: CALL_OW 289
67848: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67849: LD_ADDR_VAR 0 2
67853: PUSH
67854: LD_VAR 0 2
67858: PPUSH
67859: LD_VAR 0 3
67863: PPUSH
67864: LD_VAR 0 4
67868: PPUSH
67869: CALL_OW 1
67873: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67874: LD_ADDR_VAR 0 2
67878: PUSH
67879: LD_VAR 0 2
67883: PPUSH
67884: LD_INT 4
67886: PPUSH
67887: LD_VAR 0 2
67891: PUSH
67892: LD_INT 4
67894: ARRAY
67895: PUSH
67896: LD_VAR 0 4
67900: PLUS
67901: PPUSH
67902: CALL_OW 1
67906: ST_TO_ADDR
// end ;
67907: GO 67826
67909: POP
67910: POP
// end ;
67911: LD_VAR 0 2
67915: RET
// export function Length ( array ) ; begin
67916: LD_INT 0
67918: PPUSH
// result := array + 0 ;
67919: LD_ADDR_VAR 0 2
67923: PUSH
67924: LD_VAR 0 1
67928: PUSH
67929: LD_INT 0
67931: PLUS
67932: ST_TO_ADDR
// end ;
67933: LD_VAR 0 2
67937: RET
// export function PrepareArray ( array ) ; begin
67938: LD_INT 0
67940: PPUSH
// result := array diff 0 ;
67941: LD_ADDR_VAR 0 2
67945: PUSH
67946: LD_VAR 0 1
67950: PUSH
67951: LD_INT 0
67953: DIFF
67954: ST_TO_ADDR
// if not result [ 1 ] then
67955: LD_VAR 0 2
67959: PUSH
67960: LD_INT 1
67962: ARRAY
67963: NOT
67964: IFFALSE 67984
// result := Delete ( result , 1 ) ;
67966: LD_ADDR_VAR 0 2
67970: PUSH
67971: LD_VAR 0 2
67975: PPUSH
67976: LD_INT 1
67978: PPUSH
67979: CALL_OW 3
67983: ST_TO_ADDR
// end ;
67984: LD_VAR 0 2
67988: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67989: LD_INT 0
67991: PPUSH
67992: PPUSH
67993: PPUSH
67994: PPUSH
// sibRocketRange := 25 ;
67995: LD_ADDR_VAR 0 6
67999: PUSH
68000: LD_INT 25
68002: ST_TO_ADDR
// result := false ;
68003: LD_ADDR_VAR 0 4
68007: PUSH
68008: LD_INT 0
68010: ST_TO_ADDR
// for i := 0 to 5 do
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: DOUBLE
68017: LD_INT 0
68019: DEC
68020: ST_TO_ADDR
68021: LD_INT 5
68023: PUSH
68024: FOR_TO
68025: IFFALSE 68092
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_VAR 0 5
68036: PPUSH
68037: LD_VAR 0 6
68041: PPUSH
68042: CALL_OW 272
68046: PPUSH
68047: LD_VAR 0 2
68051: PPUSH
68052: LD_VAR 0 5
68056: PPUSH
68057: LD_VAR 0 6
68061: PPUSH
68062: CALL_OW 273
68066: PPUSH
68067: LD_VAR 0 3
68071: PPUSH
68072: CALL_OW 309
68076: IFFALSE 68090
// begin result := true ;
68078: LD_ADDR_VAR 0 4
68082: PUSH
68083: LD_INT 1
68085: ST_TO_ADDR
// exit ;
68086: POP
68087: POP
68088: GO 68094
// end ;
68090: GO 68024
68092: POP
68093: POP
// end ;
68094: LD_VAR 0 4
68098: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68099: LD_INT 0
68101: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68102: LD_VAR 0 1
68106: PPUSH
68107: LD_VAR 0 2
68111: PPUSH
68112: LD_INT 0
68114: PPUSH
68115: LD_INT 0
68117: PPUSH
68118: LD_INT 1
68120: PPUSH
68121: LD_INT 0
68123: PPUSH
68124: CALL_OW 587
// end ; end_of_file
68128: LD_VAR 0 3
68132: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68133: LD_VAR 0 1
68137: PUSH
68138: LD_INT 200
68140: DOUBLE
68141: GREATEREQUAL
68142: IFFALSE 68150
68144: LD_INT 299
68146: DOUBLE
68147: LESSEQUAL
68148: IFTRUE 68152
68150: GO 68184
68152: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68153: LD_VAR 0 1
68157: PPUSH
68158: LD_VAR 0 2
68162: PPUSH
68163: LD_VAR 0 3
68167: PPUSH
68168: LD_VAR 0 4
68172: PPUSH
68173: LD_VAR 0 5
68177: PPUSH
68178: CALL 22818 0 5
68182: GO 68261
68184: LD_INT 300
68186: DOUBLE
68187: GREATEREQUAL
68188: IFFALSE 68196
68190: LD_INT 399
68192: DOUBLE
68193: LESSEQUAL
68194: IFTRUE 68198
68196: GO 68260
68198: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 2
68208: PPUSH
68209: LD_VAR 0 3
68213: PPUSH
68214: LD_VAR 0 4
68218: PPUSH
68219: LD_VAR 0 5
68223: PPUSH
68224: LD_VAR 0 6
68228: PPUSH
68229: LD_VAR 0 7
68233: PPUSH
68234: LD_VAR 0 8
68238: PPUSH
68239: LD_VAR 0 9
68243: PPUSH
68244: LD_VAR 0 10
68248: PPUSH
68249: LD_VAR 0 11
68253: PPUSH
68254: CALL 19151 0 11
68258: GO 68261
68260: POP
// end ;
68261: PPOPN 11
68263: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 2
68273: PPUSH
68274: LD_VAR 0 3
68278: PPUSH
68279: LD_VAR 0 4
68283: PPUSH
68284: LD_VAR 0 5
68288: PPUSH
68289: CALL 22554 0 5
// end ; end_of_file
68293: PPOPN 5
68295: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68296: LD_VAR 0 1
68300: PPUSH
68301: LD_VAR 0 2
68305: PPUSH
68306: LD_VAR 0 3
68310: PPUSH
68311: LD_VAR 0 4
68315: PPUSH
68316: LD_VAR 0 5
68320: PPUSH
68321: LD_VAR 0 6
68325: PPUSH
68326: CALL 6844 0 6
// end ;
68330: PPOPN 6
68332: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68333: LD_INT 0
68335: PPUSH
// begin if not units then
68336: LD_VAR 0 1
68340: NOT
68341: IFFALSE 68345
// exit ;
68343: GO 68345
// end ;
68345: PPOPN 7
68347: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68348: CALL 6815 0 0
// end ;
68352: PPOPN 1
68354: END
