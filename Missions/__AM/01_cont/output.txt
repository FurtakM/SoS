// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 915 0 0
// InitRussian ;
  19: CALL 1154 0 0
// DebugMode ;
  23: CALL 152 0 0
// Action ;
  27: CALL 2638 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// end ;
 147: LD_VAR 0 1
 151: RET
// function DebugMode ; var i ; begin
 152: LD_INT 0
 154: PPUSH
 155: PPUSH
// if not debug then
 156: LD_EXP 1
 160: NOT
 161: IFFALSE 165
// exit ;
 163: GO 184
// Difficulty := 3 ;
 165: LD_ADDR_OWVAR 67
 169: PUSH
 170: LD_INT 3
 172: ST_TO_ADDR
// TurnFogOff ( ) ;
 173: CALL_OW 537
// FogOff ( 1 ) ;
 177: LD_INT 1
 179: PPUSH
 180: CALL_OW 344
// end ; end_of_file
 184: LD_VAR 0 1
 188: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if exist_mode then
 193: LD_VAR 0 2
 197: IFFALSE 216
// unit := CreateCharacter ( ident ) else
 199: LD_ADDR_VAR 0 4
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 34
 213: ST_TO_ADDR
 214: GO 231
// unit := NewCharacter ( ident ) ;
 216: LD_ADDR_VAR 0 4
 220: PUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: CALL_OW 25
 230: ST_TO_ADDR
// result := unit ;
 231: LD_ADDR_VAR 0 3
 235: PUSH
 236: LD_VAR 0 4
 240: ST_TO_ADDR
// end ;
 241: LD_VAR 0 3
 245: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
 250: PPUSH
// uc_side := GetSide ( b ) ;
 251: LD_ADDR_OWVAR 20
 255: PUSH
 256: LD_VAR 0 2
 260: PPUSH
 261: CALL_OW 255
 265: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PPUSH
 276: CALL_OW 248
 280: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 281: LD_INT 0
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 296: LD_ADDR_VAR 0 5
 300: PUSH
 301: LD_VAR 0 2
 305: PPUSH
 306: CALL_OW 254
 310: PUSH
 311: LD_INT 3
 313: MINUS
 314: ST_TO_ADDR
// if dir < 0 then
 315: LD_VAR 0 5
 319: PUSH
 320: LD_INT 0
 322: LESS
 323: IFFALSE 339
// dir := 6 + dir ;
 325: LD_ADDR_VAR 0 5
 329: PUSH
 330: LD_INT 6
 332: PUSH
 333: LD_VAR 0 5
 337: PLUS
 338: ST_TO_ADDR
// un := CreateHuman ;
 339: LD_ADDR_VAR 0 4
 343: PUSH
 344: CALL_OW 44
 348: ST_TO_ADDR
// SetDir ( un , dir ) ;
 349: LD_VAR 0 4
 353: PPUSH
 354: LD_VAR 0 5
 358: PPUSH
 359: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 363: LD_VAR 0 4
 367: PPUSH
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 52
// end ;
 377: LD_VAR 0 3
 381: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 382: LD_INT 0
 384: PPUSH
// uc_side := side ;
 385: LD_ADDR_OWVAR 20
 389: PUSH
 390: LD_VAR 0 1
 394: ST_TO_ADDR
// uc_nation := nation ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_VAR 0 2
 404: ST_TO_ADDR
// vc_chassis := chassis ;
 405: LD_ADDR_OWVAR 37
 409: PUSH
 410: LD_VAR 0 3
 414: ST_TO_ADDR
// vc_engine := engine ;
 415: LD_ADDR_OWVAR 39
 419: PUSH
 420: LD_VAR 0 4
 424: ST_TO_ADDR
// vc_control := control ;
 425: LD_ADDR_OWVAR 38
 429: PUSH
 430: LD_VAR 0 5
 434: ST_TO_ADDR
// vc_weapon := weapon ;
 435: LD_ADDR_OWVAR 40
 439: PUSH
 440: LD_VAR 0 6
 444: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 445: LD_ADDR_OWVAR 41
 449: PUSH
 450: LD_VAR 0 7
 454: ST_TO_ADDR
// result := CreateVehicle ;
 455: LD_ADDR_VAR 0 8
 459: PUSH
 460: CALL_OW 45
 464: ST_TO_ADDR
// end ;
 465: LD_VAR 0 8
 469: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
// while ( active_road_patrol ) do
 474: LD_EXP 8
 478: IFFALSE 832
// begin Wait ( 0 0$01 ) ;
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 67
// if not unit then
 487: LD_VAR 0 1
 491: NOT
 492: IFFALSE 496
// exit ;
 494: GO 832
// if mode = road then
 496: LD_VAR 0 2
 500: PUSH
 501: LD_STRING road
 503: EQUAL
 504: IFFALSE 560
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 261
 515: PUSH
 516: LD_INT 50
 518: LESS
 519: PUSH
 520: LD_INT 1
 522: PPUSH
 523: LD_VAR 0 1
 527: PPUSH
 528: CALL_OW 292
 532: NOT
 533: AND
 534: PUSH
 535: LD_VAR 0 1
 539: PPUSH
 540: CALL_OW 314
 544: NOT
 545: AND
 546: IFFALSE 560
// SetFuel ( unit , 100 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 100
 555: PPUSH
 556: CALL_OW 240
// if mode = forest then
 560: LD_VAR 0 2
 564: PUSH
 565: LD_STRING forest
 567: EQUAL
 568: IFFALSE 648
// if GetLives ( unit ) < 600 then
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 256
 579: PUSH
 580: LD_INT 600
 582: LESS
 583: IFFALSE 648
// begin ComMoveXY ( unit , 42 , 3 ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_INT 42
 592: PPUSH
 593: LD_INT 3
 595: PPUSH
 596: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 600: LD_VAR 0 1
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 619: LD_VAR 0 1
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 251
 633: PPUSH
 634: CALL_OW 232
// send_troops_to_forest := true ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// break ;
 646: GO 832
// end ; if not HasTask ( unit ) then
 648: LD_VAR 0 1
 652: PPUSH
 653: CALL_OW 314
 657: NOT
 658: IFFALSE 830
// begin for i = 1 to coords do
 660: LD_ADDR_VAR 0 6
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 4
 674: PUSH
 675: FOR_TO
 676: IFFALSE 743
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_VAR 0 4
 687: PUSH
 688: LD_VAR 0 6
 692: ARRAY
 693: PPUSH
 694: LD_VAR 0 4
 698: PUSH
 699: LD_VAR 0 6
 703: PUSH
 704: LD_INT 1
 706: PLUS
 707: ARRAY
 708: PPUSH
 709: CALL_OW 174
// AddComWait ( unit , pause ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 3
 722: PPUSH
 723: CALL_OW 202
// i := i + 1 ;
 727: LD_ADDR_VAR 0 6
 731: PUSH
 732: LD_VAR 0 6
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: ST_TO_ADDR
// end ;
 741: GO 675
 743: POP
 744: POP
// for i = coords downto 1 do
 745: LD_ADDR_VAR 0 6
 749: PUSH
 750: DOUBLE
 751: LD_VAR 0 4
 755: INC
 756: ST_TO_ADDR
 757: LD_INT 1
 759: PUSH
 760: FOR_DOWNTO
 761: IFFALSE 828
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_VAR 0 4
 772: PUSH
 773: LD_VAR 0 6
 777: PUSH
 778: LD_INT 1
 780: MINUS
 781: ARRAY
 782: PPUSH
 783: LD_VAR 0 4
 787: PUSH
 788: LD_VAR 0 6
 792: ARRAY
 793: PPUSH
 794: CALL_OW 174
// AddComWait ( unit , pause ) ;
 798: LD_VAR 0 1
 802: PPUSH
 803: LD_VAR 0 3
 807: PPUSH
 808: CALL_OW 202
// i := i - 1 ;
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_VAR 0 6
 821: PUSH
 822: LD_INT 1
 824: MINUS
 825: ST_TO_ADDR
// end ;
 826: GO 760
 828: POP
 829: POP
// end ; end ;
 830: GO 474
// end ;
 832: LD_VAR 0 5
 836: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// uc_nation := 1 ;
 841: LD_ADDR_OWVAR 21
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// uc_side := 0 ;
 849: LD_ADDR_OWVAR 20
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 857: LD_INT 0
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 380
// hc_name := speaker ;
 870: LD_ADDR_OWVAR 26
 874: PUSH
 875: LD_STRING speaker
 877: ST_TO_ADDR
// hc_gallery :=  ;
 878: LD_ADDR_OWVAR 33
 882: PUSH
 883: LD_STRING 
 885: ST_TO_ADDR
// speaker := CreateHuman ;
 886: LD_ADDR_VAR 0 3
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 896: LD_VAR 0 3
 900: PPUSH
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 88
// end ; end_of_file
 910: LD_VAR 0 2
 914: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 915: LD_INT 0
 917: PPUSH
// uc_nation := 1 ;
 918: LD_ADDR_OWVAR 21
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 926: LD_ADDR_EXP 15
 930: PUSH
 931: LD_STRING JMM
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL 189 0 2
 941: ST_TO_ADDR
// uc_side := 4 ;
 942: LD_ADDR_OWVAR 20
 946: PUSH
 947: LD_INT 4
 949: ST_TO_ADDR
// hc_gallery := us ;
 950: LD_ADDR_OWVAR 33
 954: PUSH
 955: LD_STRING us
 957: ST_TO_ADDR
// hc_face_number := 7 ;
 958: LD_ADDR_OWVAR 34
 962: PUSH
 963: LD_INT 7
 965: ST_TO_ADDR
// hc_sex := sex_male ;
 966: LD_ADDR_OWVAR 27
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// hc_name := . ;
 974: LD_ADDR_OWVAR 26
 978: PUSH
 979: LD_STRING .
 981: ST_TO_ADDR
// hc_class := 1 ;
 982: LD_ADDR_OWVAR 28
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// Powell := CreateHuman ;
 990: LD_ADDR_EXP 18
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// hc_name := . ;
1000: LD_ADDR_OWVAR 26
1004: PUSH
1005: LD_STRING .
1007: ST_TO_ADDR
// hc_gallery := ru ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING ru
1015: ST_TO_ADDR
// hc_face_number := 4 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 4
1023: ST_TO_ADDR
// hc_sex := sex_male ;
1024: LD_ADDR_OWVAR 27
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1032: LD_ADDR_EXP 19
1036: PUSH
1037: CALL_OW 44
1041: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1042: LD_ADDR_EXP 16
1046: PUSH
1047: LD_STRING Bobby
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL 189 0 2
1057: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1058: LD_ADDR_EXP 17
1062: PUSH
1063: LD_STRING Cyrus
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL 189 0 2
1073: ST_TO_ADDR
// case Difficulty of 1 :
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: DOUBLE
1082: EQUAL
1083: IFTRUE 1087
1085: GO 1102
1087: POP
// SetLives ( Bobby , 500 ) ; 2 :
1088: LD_EXP 16
1092: PPUSH
1093: LD_INT 500
1095: PPUSH
1096: CALL_OW 234
1100: GO 1149
1102: LD_INT 2
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1125
1110: POP
// SetLives ( Bobby , 460 ) ; 3 :
1111: LD_EXP 16
1115: PPUSH
1116: LD_INT 460
1118: PPUSH
1119: CALL_OW 234
1123: GO 1149
1125: LD_INT 3
1127: DOUBLE
1128: EQUAL
1129: IFTRUE 1133
1131: GO 1148
1133: POP
// SetLives ( Bobby , 420 ) ; end ;
1134: LD_EXP 16
1138: PPUSH
1139: LD_INT 420
1141: PPUSH
1142: CALL_OW 234
1146: GO 1149
1148: POP
// end ; end_of_file
1149: LD_VAR 0 1
1153: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1154: LD_INT 0
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_OWVAR 67
1183: ARRAY
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := 3 ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1201: LD_ADDR_EXP 25
1205: PUSH
1206: LD_STRING Pokryshkin
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL 189 0 2
1216: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1217: LD_EXP 25
1221: PPUSH
1222: LD_INT 44
1224: PPUSH
1225: LD_INT 5
1227: PPUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 48
// hc_importance := 0 ;
1235: LD_ADDR_OWVAR 32
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
// hc_gallery :=  ;
1243: LD_ADDR_OWVAR 33
1247: PUSH
1248: LD_STRING 
1250: ST_TO_ADDR
// hc_name :=  ;
1251: LD_ADDR_OWVAR 26
1255: PUSH
1256: LD_STRING 
1258: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1259: LD_INT 1
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_VAR 0 2
1269: PPUSH
1270: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1274: LD_ADDR_OWVAR 33
1278: PUSH
1279: LD_STRING SecondCharsGal
1281: ST_TO_ADDR
// hc_face_number := 69 ;
1282: LD_ADDR_OWVAR 34
1286: PUSH
1287: LD_INT 69
1289: ST_TO_ADDR
// hc_sex := sex_male ;
1290: LD_ADDR_OWVAR 27
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1298: LD_ADDR_OWVAR 26
1302: PUSH
1303: LD_STRING Ilja Ivanov
1305: ST_TO_ADDR
// un := CreateHuman ;
1306: LD_ADDR_VAR 0 4
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1316: LD_ADDR_EXP 20
1320: PUSH
1321: LD_EXP 20
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 2
1338: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 3
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_VAR 0 2
1364: PPUSH
1365: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1369: LD_ADDR_OWVAR 33
1373: PUSH
1374: LD_STRING SecondCharsGal
1376: ST_TO_ADDR
// hc_face_number := 70 ;
1377: LD_ADDR_OWVAR 34
1381: PUSH
1382: LD_INT 70
1384: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1385: LD_ADDR_OWVAR 26
1389: PUSH
1390: LD_STRING Pavel Starczy
1392: ST_TO_ADDR
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1403: LD_ADDR_EXP 20
1407: PUSH
1408: LD_EXP 20
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: LD_VAR 0 4
1420: PPUSH
1421: CALL_OW 2
1425: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1426: LD_VAR 0 4
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
// InitHc ;
1441: CALL_OW 19
// for i = 1 to 7 do
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 7
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1610
// begin PrepareHuman ( false , 1 , skill ) ;
1461: LD_INT 0
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_VAR 0 2
1471: PPUSH
1472: CALL_OW 380
// un := CreateHuman ;
1476: LD_ADDR_VAR 0 4
1480: PUSH
1481: CALL_OW 44
1485: ST_TO_ADDR
// if i mod 2 = 0 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 2
1493: MOD
1494: PUSH
1495: LD_INT 0
1497: EQUAL
1498: IFFALSE 1555
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1500: LD_ADDR_EXP 20
1504: PUSH
1505: LD_EXP 20
1509: PPUSH
1510: LD_EXP 20
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: PPUSH
1519: LD_VAR 0 4
1523: PPUSH
1524: CALL_OW 2
1528: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1529: LD_VAR 0 4
1533: PPUSH
1534: LD_INT 3
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComHold ( un ) ;
1544: LD_VAR 0 4
1548: PPUSH
1549: CALL_OW 140
// end else
1553: GO 1608
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1555: LD_ADDR_EXP 21
1559: PUSH
1560: LD_EXP 21
1564: PPUSH
1565: LD_EXP 21
1569: PUSH
1570: LD_INT 1
1572: PLUS
1573: PPUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 2
1583: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1584: LD_VAR 0 4
1588: PPUSH
1589: LD_INT 4
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 49
// ComHold ( un ) ;
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL_OW 140
// end ; end ;
1608: GO 1458
1610: POP
1611: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 3
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 30
1629: PUSH
1630: LD_INT 31
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PPUSH
1641: CALL_OW 69
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1665
// PrepareSolBun ( skill , i ) ;
1649: LD_VAR 0 2
1653: PPUSH
1654: LD_VAR 0 3
1658: PPUSH
1659: CALL 246 0 2
1663: GO 1646
1665: POP
1666: POP
// for i = 1 to 2 do
1667: LD_ADDR_VAR 0 3
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 2
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1812
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1683: LD_ADDR_VAR 0 4
1687: PUSH
1688: LD_INT 3
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 22
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_INT 42
1705: PPUSH
1706: LD_INT 100
1708: PPUSH
1709: CALL 382 0 7
1713: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 3
1719: PPUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1729: CALL_OW 44
1733: PPUSH
1734: LD_VAR 0 4
1738: PPUSH
1739: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1743: LD_VAR 0 4
1747: PPUSH
1748: LD_INT 23
1750: PUSH
1751: LD_INT 131
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_VAR 0 3
1762: ARRAY
1763: PPUSH
1764: LD_INT 14
1766: PUSH
1767: LD_INT 87
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_VAR 0 3
1778: ARRAY
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1787: LD_ADDR_EXP 22
1791: PUSH
1792: LD_EXP 22
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_VAR 0 4
1804: PPUSH
1805: CALL_OW 2
1809: ST_TO_ADDR
// end ;
1810: GO 1680
1812: POP
1813: POP
// for i = 1 to 2 do
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 2
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1919
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1830: LD_INT 2
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_VAR 0 3
1848: ARRAY
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL_OW 380
// un := CreateHuman ;
1860: LD_ADDR_VAR 0 4
1864: PUSH
1865: CALL_OW 44
1869: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1870: LD_ADDR_EXP 23
1874: PUSH
1875: LD_EXP 23
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1893: LD_VAR 0 4
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// ComHold ( un ) ;
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL_OW 140
// end ;
1917: GO 1827
1919: POP
1920: POP
// if Difficulty < 3 then
1921: LD_OWVAR 67
1925: PUSH
1926: LD_INT 3
1928: LESS
1929: IFFALSE 1933
// exit ;
1931: GO 1976
// PrepareHuman ( false , 1 , skill ) ;
1933: LD_INT 0
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_VAR 0 2
1943: PPUSH
1944: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1948: LD_ADDR_EXP 24
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1958: LD_EXP 24
1962: PPUSH
1963: LD_INT 82
1965: PPUSH
1966: LD_INT 2
1968: PPUSH
1969: LD_INT 0
1971: PPUSH
1972: CALL_OW 48
// end ;
1976: LD_VAR 0 1
1980: RET
// every 0 0$01 trigger active_road_patrol do
1981: LD_EXP 8
1985: IFFALSE 2051
1987: GO 1989
1989: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1990: LD_EXP 22
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: LD_STRING road
2001: PPUSH
2002: LD_INT 70
2004: PPUSH
2005: LD_INT 131
2007: PUSH
2008: LD_INT 87
2010: PUSH
2011: LD_INT 107
2013: PUSH
2014: LD_INT 75
2016: PUSH
2017: LD_INT 107
2019: PUSH
2020: LD_INT 66
2022: PUSH
2023: LD_INT 114
2025: PUSH
2026: LD_INT 61
2028: PUSH
2029: LD_INT 107
2031: PUSH
2032: LD_INT 34
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PPUSH
2047: CALL 470 0 4
2051: END
// every 0 0$01 trigger active_road_patrol do
2052: LD_EXP 8
2056: IFFALSE 2114
2058: GO 2060
2060: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2061: LD_EXP 22
2065: PUSH
2066: LD_INT 2
2068: ARRAY
2069: PPUSH
2070: LD_STRING road
2072: PPUSH
2073: LD_INT 70
2075: PPUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 12
2081: PUSH
2082: LD_INT 37
2084: PUSH
2085: LD_INT 30
2087: PUSH
2088: LD_INT 65
2090: PUSH
2091: LD_INT 62
2093: PUSH
2094: LD_INT 107
2096: PUSH
2097: LD_INT 76
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PPUSH
2110: CALL 470 0 4
2114: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2115: LD_EXP 24
2119: PPUSH
2120: CALL_OW 302
2124: IFFALSE 2186
2126: GO 2128
2128: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2129: LD_EXP 24
2133: PPUSH
2134: LD_STRING forest
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 52
2142: PUSH
2143: LD_INT 15
2145: PUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: LD_INT 120
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 135
2160: PUSH
2161: LD_INT 80
2163: PUSH
2164: LD_INT 122
2166: PUSH
2167: LD_INT 95
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL 470 0 4
2186: END
// every 0 0$01 trigger macmilan_use_radio do
2187: LD_EXP 6
2191: IFFALSE 2252
2193: GO 2195
2195: DISABLE
// begin active_road_patrol := false ;
2196: LD_ADDR_EXP 8
2200: PUSH
2201: LD_INT 0
2203: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2204: LD_EXP 22
2208: PPUSH
2209: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2213: LD_EXP 22
2217: PPUSH
2218: LD_INT 72
2220: PPUSH
2221: LD_INT 41
2223: PPUSH
2224: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2228: LD_EXP 21
2232: PPUSH
2233: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2237: LD_EXP 21
2241: PPUSH
2242: LD_INT 72
2244: PPUSH
2245: LD_INT 41
2247: PPUSH
2248: CALL_OW 174
// end ;
2252: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2253: LD_INT 9
2255: PPUSH
2256: LD_INT 22
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 70
2270: IFFALSE 2344
2272: GO 2274
2274: DISABLE
2275: LD_INT 0
2277: PPUSH
// begin enable ;
2278: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2279: LD_ADDR_VAR 0 1
2283: PUSH
2284: LD_INT 9
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2306: LD_EXP 21
2310: PPUSH
2311: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2315: LD_EXP 21
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 250
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 251
2339: PPUSH
2340: CALL_OW 174
// end ;
2344: PPOPN 1
2346: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2347: LD_EXP 22
2351: PUSH
2352: LD_INT 1
2354: ARRAY
2355: PPUSH
2356: CALL_OW 256
2360: PUSH
2361: LD_INT 999
2363: LESS
2364: PUSH
2365: LD_EXP 22
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: CALL_OW 256
2378: PUSH
2379: LD_INT 999
2381: LESS
2382: OR
2383: PUSH
2384: LD_INT 3
2386: PPUSH
2387: LD_EXP 15
2391: PPUSH
2392: CALL_OW 292
2396: AND
2397: IFFALSE 2424
2399: GO 2401
2401: DISABLE
// begin active_road_patrol := false ;
2402: LD_ADDR_EXP 8
2406: PUSH
2407: LD_INT 0
2409: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2410: LD_EXP 22
2414: PPUSH
2415: LD_EXP 15
2419: PPUSH
2420: CALL_OW 115
// end ;
2424: END
// every 0 0$01 trigger macmilan_in_trap do
2425: LD_EXP 9
2429: IFFALSE 2475
2431: GO 2433
2433: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2434: LD_EXP 21
2438: PPUSH
2439: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2443: LD_EXP 20
2447: PUSH
2448: LD_EXP 21
2452: ADD
2453: PUSH
2454: LD_EXP 25
2458: ADD
2459: PUSH
2460: LD_EXP 22
2464: ADD
2465: PPUSH
2466: LD_EXP 15
2470: PPUSH
2471: CALL_OW 115
// end ;
2475: END
// every 0 0$01 trigger meta_action do
2476: LD_EXP 10
2480: IFFALSE 2526
2482: GO 2484
2484: DISABLE
// begin active_road_patrol := false ;
2485: LD_ADDR_EXP 8
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2493: LD_EXP 20
2497: PUSH
2498: LD_EXP 21
2502: ADD
2503: PUSH
2504: LD_EXP 25
2508: ADD
2509: PUSH
2510: LD_EXP 22
2514: ADD
2515: PPUSH
2516: LD_INT 93
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL_OW 114
// end ;
2526: END
// every 0 0$20 trigger send_troops_to_forest do
2527: LD_EXP 14
2531: IFFALSE 2585
2533: GO 2535
2535: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2536: LD_EXP 24
2540: PPUSH
2541: CALL_OW 302
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2585
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2550: LD_EXP 20
2554: PUSH
2555: LD_EXP 25
2559: ADD
2560: PPUSH
2561: LD_EXP 24
2565: PPUSH
2566: CALL_OW 252
2570: PPUSH
2571: LD_EXP 24
2575: PPUSH
2576: CALL_OW 253
2580: PPUSH
2581: CALL_OW 114
// end ;
2585: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2586: LD_VAR 0 1
2590: PPUSH
2591: CALL_OW 255
2595: PUSH
2596: LD_INT 3
2598: EQUAL
2599: IFFALSE 2635
// ComMoveUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2601: LD_VAR 0 1
2605: PPUSH
2606: LD_INT 30
2608: PUSH
2609: LD_INT 0
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: PPUSH
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 74
2630: PPUSH
2631: CALL_OW 112
// end ; end_of_file
2635: PPOPN 4
2637: END
// export function Action ; var i ; begin
2638: LD_INT 0
2640: PPUSH
2641: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_INT 22
2649: PUSH
2650: LD_INT 3
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 25
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: PUSH
2676: FOR_IN
2677: IFFALSE 2690
// ComHold ( i ) ;
2679: LD_VAR 0 2
2683: PPUSH
2684: CALL_OW 140
2688: GO 2676
2690: POP
2691: POP
// InGameOn ;
2692: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2696: LD_INT 79
2698: PPUSH
2699: LD_INT 76
2701: PPUSH
2702: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2706: LD_INT 10
2708: PPUSH
2709: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2713: LD_EXP 15
2717: PPUSH
2718: LD_INT 80
2720: PPUSH
2721: LD_INT 79
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 48
// Wait ( 0 0$03 ) ;
2731: LD_INT 105
2733: PPUSH
2734: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2738: LD_EXP 15
2742: PPUSH
2743: LD_INT 80
2745: PPUSH
2746: LD_INT 76
2748: PPUSH
2749: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2753: LD_EXP 15
2757: PPUSH
2758: LD_STRING D1-JMM-1
2760: PPUSH
2761: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2765: LD_INT 10
2767: PPUSH
2768: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2772: LD_EXP 15
2776: PPUSH
2777: LD_INT 76
2779: PPUSH
2780: LD_INT 76
2782: PPUSH
2783: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2787: LD_EXP 15
2791: PPUSH
2792: LD_STRING D1-JMM-1a
2794: PPUSH
2795: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2799: LD_INT 10
2801: PPUSH
2802: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2806: LD_EXP 15
2810: PPUSH
2811: LD_INT 83
2813: PPUSH
2814: LD_INT 66
2816: PPUSH
2817: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2821: LD_EXP 15
2825: PPUSH
2826: LD_STRING D1-JMM-1b
2828: PPUSH
2829: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2833: LD_INT 18
2835: PPUSH
2836: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2840: LD_EXP 15
2844: PPUSH
2845: LD_STRING D1-JMM-1c
2847: PPUSH
2848: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2852: LD_INT 7
2854: PPUSH
2855: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2859: LD_EXP 18
2863: PPUSH
2864: LD_STRING D1-Pow-1
2866: PPUSH
2867: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2871: LD_EXP 15
2875: PPUSH
2876: LD_STRING D1-JMM-2
2878: PPUSH
2879: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2883: LD_EXP 18
2887: PPUSH
2888: LD_STRING D1-Pow-2
2890: PPUSH
2891: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2895: LD_EXP 15
2899: PPUSH
2900: LD_STRING D1-JMM-3
2902: PPUSH
2903: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2907: LD_EXP 18
2911: PPUSH
2912: LD_STRING D1-Pow-3
2914: PPUSH
2915: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2919: LD_EXP 15
2923: PPUSH
2924: LD_STRING D1-JMM-4
2926: PPUSH
2927: CALL_OW 88
// ComFree ( JMM ) ;
2931: LD_EXP 15
2935: PPUSH
2936: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2940: LD_INT 10
2942: PPUSH
2943: CALL_OW 67
// InGameOff ;
2947: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2951: LD_STRING M1
2953: PPUSH
2954: CALL_OW 337
// SaveForQuickRestart ;
2958: CALL_OW 22
// active_russian_dialog := true ;
2962: LD_ADDR_EXP 3
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// active_road_patrol := true ;
2970: LD_ADDR_EXP 8
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// if Difficulty < 3 then
2978: LD_OWVAR 67
2982: PUSH
2983: LD_INT 3
2985: LESS
2986: IFFALSE 3017
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2988: LD_EXP 16
2992: PPUSH
2993: LD_INT 41
2995: PPUSH
2996: LD_INT 71
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComHold ( Bobby ) ;
3006: LD_EXP 16
3010: PPUSH
3011: CALL_OW 140
// end else
3015: GO 3065
// begin SetDir ( Bobby , 5 ) ;
3017: LD_EXP 16
3021: PPUSH
3022: LD_INT 5
3024: PPUSH
3025: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3029: LD_EXP 16
3033: PPUSH
3034: LD_INT 105
3036: PPUSH
3037: LD_INT 98
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 48
// ComCrawl ( Bobby ) ;
3047: LD_EXP 16
3051: PPUSH
3052: CALL_OW 137
// AddComHold ( Bobby ) ;
3056: LD_EXP 16
3060: PPUSH
3061: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3065: LD_EXP 17
3069: PPUSH
3070: LD_INT 90
3072: PPUSH
3073: LD_INT 42
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3083: LD_EXP 17
3087: PPUSH
3088: LD_INT 79
3090: PPUSH
3091: LD_INT 34
3093: PPUSH
3094: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3098: LD_EXP 17
3102: PPUSH
3103: CALL_OW 197
// end ;
3107: LD_VAR 0 1
3111: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3112: LD_EXP 3
3116: IFFALSE 3739
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
// begin wait_points := 0 ;
3124: LD_ADDR_VAR 0 1
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3132: LD_INT 70
3134: PPUSH
3135: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3139: LD_EXP 20
3143: PPUSH
3144: LD_INT 79
3146: PPUSH
3147: LD_INT 83
3149: PPUSH
3150: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3154: LD_EXP 20
3158: PUSH
3159: LD_INT 2
3161: ARRAY
3162: PPUSH
3163: LD_STRING D1R-Rus1-1
3165: PPUSH
3166: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3170: LD_EXP 20
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: LD_STRING D1R-Rus2-1
3181: PPUSH
3182: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3186: LD_EXP 21
3190: PPUSH
3191: LD_INT 91
3193: PPUSH
3194: LD_INT 80
3196: PPUSH
3197: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3201: LD_INT 35
3203: PPUSH
3204: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3208: LD_EXP 20
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: PPUSH
3217: LD_INT 79
3219: PPUSH
3220: LD_INT 82
3222: PPUSH
3223: CALL_OW 297
3227: PUSH
3228: LD_INT 5
3230: LESS
3231: IFFALSE 3201
// if not IsInArea ( JMM , jmm_spot ) then
3233: LD_EXP 15
3237: PPUSH
3238: LD_INT 5
3240: PPUSH
3241: CALL_OW 308
3245: NOT
3246: IFFALSE 3266
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3248: LD_EXP 20
3252: PUSH
3253: LD_INT 1
3255: ARRAY
3256: PPUSH
3257: LD_STRING D1Ra-Rus2-1
3259: PPUSH
3260: CALL_OW 88
3264: GO 3402
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3266: LD_EXP 20
3270: PUSH
3271: LD_INT 2
3273: ARRAY
3274: PPUSH
3275: LD_STRING D1Rb-Rus1-1
3277: PPUSH
3278: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3282: LD_EXP 20
3286: PUSH
3287: LD_INT 1
3289: ARRAY
3290: PPUSH
3291: LD_STRING D1Rb-Rus2-1
3293: PPUSH
3294: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3298: LD_EXP 20
3302: PUSH
3303: LD_EXP 21
3307: ADD
3308: PPUSH
3309: LD_EXP 15
3313: PPUSH
3314: CALL_OW 250
3318: PPUSH
3319: LD_EXP 15
3323: PPUSH
3324: CALL_OW 251
3328: PPUSH
3329: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3333: LD_INT 35
3335: PPUSH
3336: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 5
3347: PPUSH
3348: CALL_OW 308
3352: NOT
3353: PUSH
3354: LD_INT 3
3356: PPUSH
3357: LD_EXP 15
3361: PPUSH
3362: CALL_OW 292
3366: NOT
3367: AND
3368: IFFALSE 3333
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3370: LD_EXP 20
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_STRING D1Rc-Rus1-1
3381: PPUSH
3382: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3386: LD_EXP 20
3390: PUSH
3391: LD_INT 1
3393: ARRAY
3394: PPUSH
3395: LD_STRING D1Ra-Rus2-1a
3397: PPUSH
3398: CALL_OW 88
// end ; wait_points := 10 ;
3402: LD_ADDR_VAR 0 1
3406: PUSH
3407: LD_INT 10
3409: ST_TO_ADDR
// if Difficulty > 1 then
3410: LD_OWVAR 67
3414: PUSH
3415: LD_INT 1
3417: GREATER
3418: IFFALSE 3500
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3420: LD_EXP 20
3424: PPUSH
3425: LD_INT 78
3427: PPUSH
3428: LD_INT 95
3430: PPUSH
3431: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3435: LD_EXP 20
3439: PPUSH
3440: LD_INT 175
3442: PPUSH
3443: CALL_OW 202
// wait_points := wait_points + 15 ;
3447: LD_ADDR_VAR 0 1
3451: PUSH
3452: LD_VAR 0 1
3456: PUSH
3457: LD_INT 15
3459: PLUS
3460: ST_TO_ADDR
// if Difficulty > 2 then
3461: LD_OWVAR 67
3465: PUSH
3466: LD_INT 2
3468: GREATER
3469: IFFALSE 3500
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3471: LD_EXP 20
3475: PPUSH
3476: LD_INT 65
3478: PPUSH
3479: LD_INT 79
3481: PPUSH
3482: CALL_OW 174
// wait_points := wait_points + 5 ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 5
3498: PLUS
3499: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// wait_points := wait_points - 1 ;
3507: LD_ADDR_VAR 0 1
3511: PUSH
3512: LD_VAR 0 1
3516: PUSH
3517: LD_INT 1
3519: MINUS
3520: ST_TO_ADDR
// if See ( 3 , JMM ) then
3521: LD_INT 3
3523: PPUSH
3524: LD_EXP 15
3528: PPUSH
3529: CALL_OW 292
3533: IFFALSE 3587
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3535: LD_EXP 20
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: PPUSH
3544: LD_STRING D1Rb-Rus1-1
3546: PPUSH
3547: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3551: LD_EXP 20
3555: PPUSH
3556: LD_EXP 15
3560: PPUSH
3561: CALL_OW 250
3565: PPUSH
3566: LD_EXP 15
3570: PPUSH
3571: CALL_OW 251
3575: PPUSH
3576: CALL_OW 114
// Wait ( 0 0$03 ) ;
3580: LD_INT 105
3582: PPUSH
3583: CALL_OW 67
// end ; until wait_points = 0 ;
3587: LD_VAR 0 1
3591: PUSH
3592: LD_INT 0
3594: EQUAL
3595: IFFALSE 3500
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3597: LD_EXP 20
3601: PPUSH
3602: LD_INT 45
3604: PPUSH
3605: LD_INT 5
3607: PPUSH
3608: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3612: LD_EXP 21
3616: PPUSH
3617: LD_INT 26
3619: PPUSH
3620: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3624: LD_INT 35
3626: PPUSH
3627: CALL_OW 67
// if See ( 3 , JMM ) then
3631: LD_INT 3
3633: PPUSH
3634: LD_EXP 15
3638: PPUSH
3639: CALL_OW 292
3643: IFFALSE 3699
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3645: LD_EXP 20
3649: PUSH
3650: LD_INT 2
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus1-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 20
3665: PPUSH
3666: LD_EXP 15
3670: PPUSH
3671: CALL_OW 250
3675: PPUSH
3676: LD_EXP 15
3680: PPUSH
3681: CALL_OW 251
3685: PPUSH
3686: CALL_OW 114
// Wait ( 0 0$50 ) ;
3690: LD_INT 1750
3692: PPUSH
3693: CALL_OW 67
// end else
3697: GO 3714
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3699: LD_EXP 20
3703: PPUSH
3704: LD_INT 45
3706: PPUSH
3707: LD_INT 5
3709: PPUSH
3710: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3714: LD_EXP 20
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_INT 45
3725: PPUSH
3726: LD_INT 5
3728: PPUSH
3729: CALL_OW 297
3733: PUSH
3734: LD_INT 10
3736: LESS
3737: IFFALSE 3624
// end ;
3739: PPOPN 1
3741: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3742: LD_INT 22
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 92
3754: PUSH
3755: LD_INT 80
3757: PUSH
3758: LD_INT 83
3760: PUSH
3761: LD_INT 6
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: PUSH
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: EQUAL
3787: AND
3788: IFFALSE 3869
3790: GO 3792
3792: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3793: LD_INT 80
3795: PPUSH
3796: LD_INT 83
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 7
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 92
3829: PUSH
3830: LD_INT 80
3832: PUSH
3833: LD_INT 83
3835: PUSH
3836: LD_INT 10
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: NOT
3854: IFFALSE 3810
// RemoveSeeing ( 80 , 83 , 1 ) ;
3856: LD_INT 80
3858: PPUSH
3859: LD_INT 83
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 331
// end ;
3869: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3870: LD_EXP 15
3874: PPUSH
3875: LD_EXP 16
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 9
3887: LESS
3888: IFFALSE 4339
3890: GO 3892
3892: DISABLE
// begin ComWalk ( Bobby ) ;
3893: LD_EXP 16
3897: PPUSH
3898: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3902: LD_EXP 16
3906: PPUSH
3907: LD_EXP 15
3911: PPUSH
3912: CALL_OW 250
3916: PPUSH
3917: LD_EXP 15
3921: PPUSH
3922: CALL_OW 251
3926: PPUSH
3927: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3931: LD_INT 35
3933: PPUSH
3934: CALL_OW 67
// until See ( 4 , JMM ) ;
3938: LD_INT 4
3940: PPUSH
3941: LD_EXP 15
3945: PPUSH
3946: CALL_OW 292
3950: IFFALSE 3931
// InGameOn ;
3952: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3970: LD_EXP 7
3974: PUSH
3975: LD_EXP 17
3979: PPUSH
3980: CALL_OW 302
3984: AND
3985: PUSH
3986: LD_EXP 15
3990: PPUSH
3991: LD_EXP 17
3995: PPUSH
3996: CALL_OW 296
4000: PUSH
4001: LD_INT 10
4003: LESS
4004: AND
4005: IFFALSE 4050
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4007: LD_EXP 17
4011: PPUSH
4012: LD_EXP 15
4016: PPUSH
4017: CALL_OW 250
4021: PPUSH
4022: LD_EXP 15
4026: PPUSH
4027: CALL_OW 251
4031: PPUSH
4032: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4036: LD_EXP 17
4040: PPUSH
4041: LD_EXP 16
4045: PPUSH
4046: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4050: LD_EXP 15
4054: PPUSH
4055: LD_STRING D2-JMM-1
4057: PPUSH
4058: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4062: LD_INT 10
4064: PPUSH
4065: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4069: LD_EXP 16
4073: PPUSH
4074: LD_EXP 15
4078: PPUSH
4079: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4083: LD_EXP 16
4087: PPUSH
4088: LD_STRING D2-Bobby-1
4090: PPUSH
4091: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4095: LD_EXP 15
4099: PPUSH
4100: LD_STRING D2-JMM-2
4102: PPUSH
4103: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4107: LD_EXP 16
4111: PPUSH
4112: LD_EXP 15
4116: PPUSH
4117: CALL_OW 250
4121: PPUSH
4122: LD_EXP 15
4126: PPUSH
4127: CALL_OW 251
4131: PPUSH
4132: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4136: LD_EXP 16
4140: PPUSH
4141: LD_STRING D2-Bobby-2
4143: PPUSH
4144: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4148: LD_EXP 15
4152: PPUSH
4153: LD_STRING D2-JMM-3
4155: PPUSH
4156: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4160: LD_EXP 16
4164: PPUSH
4165: LD_EXP 15
4169: PPUSH
4170: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4174: LD_EXP 16
4178: PPUSH
4179: LD_STRING D2-Bobby-3
4181: PPUSH
4182: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4186: LD_EXP 15
4190: PPUSH
4191: LD_STRING D2-JMM-4
4193: PPUSH
4194: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4198: LD_EXP 16
4202: PPUSH
4203: LD_STRING D2-Bobby-4
4205: PPUSH
4206: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4210: LD_EXP 15
4214: PPUSH
4215: LD_STRING D2-JMM-5
4217: PPUSH
4218: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4222: LD_EXP 16
4226: PPUSH
4227: LD_STRING D2-Bobby-5
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4234: LD_EXP 15
4238: PPUSH
4239: LD_STRING D2-JMM-6
4241: PPUSH
4242: CALL_OW 88
// if not powell_contact then
4246: LD_EXP 5
4250: NOT
4251: IFFALSE 4277
// begin Say ( Bobby , D2-Bobby-6 ) ;
4253: LD_EXP 16
4257: PPUSH
4258: LD_STRING D2-Bobby-6
4260: PPUSH
4261: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4265: LD_EXP 15
4269: PPUSH
4270: LD_STRING D2-JMM-7
4272: PPUSH
4273: CALL_OW 88
// end ; InGameOff ;
4277: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4281: LD_EXP 16
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4293: LD_EXP 15
4297: PUSH
4298: LD_EXP 16
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 139
// bobby_in_squad := true ;
4311: LD_ADDR_EXP 4
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4319: LD_EXP 5
4323: PUSH
4324: LD_EXP 7
4328: NOT
4329: AND
4330: IFFALSE 4339
// ChangeMissionObjectives ( M2b ) ;
4332: LD_STRING M2b
4334: PPUSH
4335: CALL_OW 337
// end ;
4339: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4340: LD_EXP 3
4344: PUSH
4345: LD_EXP 4
4349: NOT
4350: AND
4351: PUSH
4352: LD_OWVAR 67
4356: PUSH
4357: LD_INT 3
4359: LESS
4360: AND
4361: IFFALSE 4381
4363: GO 4365
4365: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4366: LD_EXP 16
4370: PPUSH
4371: LD_INT 75
4373: PPUSH
4374: LD_INT 83
4376: PPUSH
4377: CALL_OW 111
4381: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4382: LD_EXP 7
4386: PUSH
4387: LD_EXP 4
4391: NOT
4392: AND
4393: IFFALSE 4422
4395: GO 4397
4397: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4398: LD_EXP 16
4402: PPUSH
4403: LD_INT 105
4405: PPUSH
4406: LD_INT 97
4408: PPUSH
4409: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4413: LD_EXP 16
4417: PPUSH
4418: CALL_OW 197
// end ;
4422: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4423: LD_EXP 15
4427: PPUSH
4428: LD_INT 6
4430: PPUSH
4431: CALL_OW 308
4435: PUSH
4436: LD_EXP 15
4440: PPUSH
4441: LD_EXP 16
4445: PPUSH
4446: CALL_OW 296
4450: PUSH
4451: LD_INT 7
4453: LESS
4454: AND
4455: PUSH
4456: LD_EXP 4
4460: AND
4461: IFFALSE 4508
4463: GO 4465
4465: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4466: LD_EXP 15
4470: PUSH
4471: LD_EXP 16
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4484: LD_EXP 15
4488: PPUSH
4489: LD_STRING D2a-JMM-1
4491: PPUSH
4492: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4496: LD_EXP 16
4500: PPUSH
4501: LD_STRING D2a-Bobby-1
4503: PPUSH
4504: CALL_OW 88
// end ;
4508: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4509: LD_EXP 3
4513: PUSH
4514: LD_INT 3
4516: PPUSH
4517: LD_EXP 15
4521: PPUSH
4522: CALL_OW 292
4526: NOT
4527: AND
4528: IFFALSE 4704
4530: GO 4532
4532: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4533: LD_INT 350
4535: PPUSH
4536: LD_INT 700
4538: PPUSH
4539: CALL_OW 12
4543: PPUSH
4544: CALL_OW 67
// InGameOn ;
4548: CALL_OW 8
// DialogueOn ;
4552: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4556: LD_EXP 18
4560: PPUSH
4561: LD_STRING D3-Pow-1
4563: PPUSH
4564: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4568: LD_EXP 15
4572: PPUSH
4573: LD_STRING D3-JMM-1
4575: PPUSH
4576: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4580: LD_EXP 18
4584: PPUSH
4585: LD_STRING D3-Pow-2
4587: PPUSH
4588: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4592: LD_EXP 15
4596: PPUSH
4597: LD_STRING D3-JMM-2
4599: PPUSH
4600: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4604: LD_EXP 18
4608: PPUSH
4609: LD_STRING D3-Pow-3
4611: PPUSH
4612: CALL_OW 94
// DialogueOff ;
4616: CALL_OW 7
// InGameOff ;
4620: CALL_OW 9
// powell_contact := true ;
4624: LD_ADDR_EXP 5
4628: PUSH
4629: LD_INT 1
4631: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4632: LD_INT 10
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 424
// uc_side := 4 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 4
4649: ST_TO_ADDR
// uc_nation := 1 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4658: LD_ADDR_EXP 18
4662: PUSH
4663: LD_STRING Powell
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL 189 0 2
4673: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4674: LD_STRING M2
4676: PPUSH
4677: CALL_OW 337
// if not bobby_in_squad then
4681: LD_EXP 4
4685: NOT
4686: IFFALSE 4697
// ChangeMissionObjectives ( M2a ) else
4688: LD_STRING M2a
4690: PPUSH
4691: CALL_OW 337
4695: GO 4704
// ChangeMissionObjectives ( M2b ) ;
4697: LD_STRING M2b
4699: PPUSH
4700: CALL_OW 337
// end ;
4704: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4705: LD_EXP 15
4709: PPUSH
4710: LD_INT 7
4712: PPUSH
4713: CALL_OW 308
4717: IFFALSE 4852
4719: GO 4721
4721: DISABLE
// begin DialogueOn ;
4722: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4726: LD_EXP 19
4730: PPUSH
4731: LD_STRING D4-Rus3-1
4733: PPUSH
4734: CALL_OW 94
// DialogueOff ;
4738: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4742: LD_STRING M3a
4744: PPUSH
4745: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4749: LD_INT 11
4751: PPUSH
4752: LD_INT 1
4754: PPUSH
4755: CALL_OW 424
// Wait ( 0 0$02 ) ;
4759: LD_INT 70
4761: PPUSH
4762: CALL_OW 67
// DialogueOn ;
4766: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4770: LD_EXP 18
4774: PPUSH
4775: LD_STRING D4-Pow-1
4777: PPUSH
4778: CALL_OW 94
// DialogueOff ;
4782: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4786: LD_STRING M3b
4788: PPUSH
4789: CALL_OW 337
// case Query ( Q1 ) of 1 :
4793: LD_STRING Q1
4795: PPUSH
4796: CALL_OW 97
4800: PUSH
4801: LD_INT 1
4803: DOUBLE
4804: EQUAL
4805: IFTRUE 4809
4807: GO 4840
4809: POP
// begin macmilan_use_radio := true ;
4810: LD_ADDR_EXP 6
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// DialogueOn ;
4818: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4822: LD_EXP 15
4826: PPUSH
4827: LD_STRING D4a-JMM-1
4829: PPUSH
4830: CALL_OW 88
// DialogueOff ;
4834: CALL_OW 7
// end ; 2 :
4838: GO 4852
4840: LD_INT 2
4842: DOUBLE
4843: EQUAL
4844: IFTRUE 4848
4846: GO 4851
4848: POP
// ; end ;
4849: GO 4852
4851: POP
// end ;
4852: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4853: LD_EXP 15
4857: PPUSH
4858: LD_EXP 17
4862: PPUSH
4863: CALL_OW 296
4867: PUSH
4868: LD_INT 8
4870: LESS
4871: IFFALSE 5162
4873: GO 4875
4875: DISABLE
// begin InGameOn ;
4876: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4880: LD_EXP 15
4884: PPUSH
4885: LD_EXP 17
4889: PPUSH
4890: CALL_OW 250
4894: PPUSH
4895: LD_EXP 17
4899: PPUSH
4900: CALL_OW 251
4904: PPUSH
4905: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4909: LD_EXP 16
4913: PPUSH
4914: CALL_OW 302
4918: PUSH
4919: LD_EXP 4
4923: AND
4924: IFFALSE 4955
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4926: LD_EXP 16
4930: PPUSH
4931: LD_EXP 15
4935: PPUSH
4936: CALL_OW 250
4940: PPUSH
4941: LD_EXP 15
4945: PPUSH
4946: CALL_OW 251
4950: PPUSH
4951: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4955: LD_EXP 15
4959: PPUSH
4960: LD_STRING D5-JMM-1
4962: PPUSH
4963: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4967: LD_INT 10
4969: PPUSH
4970: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_EXP 17
4983: PPUSH
4984: CALL_OW 119
// ComWalk ( Cyrus ) ;
4988: LD_EXP 17
4992: PPUSH
4993: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4997: LD_EXP 17
5001: PPUSH
5002: LD_EXP 15
5006: PPUSH
5007: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5011: LD_EXP 17
5015: PPUSH
5016: LD_STRING D5-Cyrus-1
5018: PPUSH
5019: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5023: LD_EXP 16
5027: PPUSH
5028: CALL_OW 302
5032: PUSH
5033: LD_EXP 4
5037: AND
5038: IFFALSE 5078
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5040: LD_EXP 16
5044: PPUSH
5045: LD_EXP 17
5049: PPUSH
5050: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5054: LD_EXP 16
5058: PPUSH
5059: LD_STRING D5-Bobby-1
5061: PPUSH
5062: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5066: LD_EXP 15
5070: PPUSH
5071: LD_STRING D5-JMM-2
5073: PPUSH
5074: CALL_OW 88
// end ; InGameOff ;
5078: CALL_OW 9
// cyrus_in_squad := true ;
5082: LD_ADDR_EXP 7
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5090: LD_EXP 17
5094: PPUSH
5095: LD_INT 1
5097: PPUSH
5098: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5102: LD_EXP 5
5106: PUSH
5107: LD_EXP 4
5111: NOT
5112: AND
5113: IFFALSE 5122
// ChangeMissionObjectives ( M2b ) ;
5115: LD_STRING M2b
5117: PPUSH
5118: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5122: LD_EXP 4
5126: NOT
5127: PUSH
5128: LD_EXP 16
5132: PPUSH
5133: CALL_OW 255
5137: PUSH
5138: LD_INT 4
5140: EQUAL
5141: AND
5142: PUSH
5143: LD_EXP 16
5147: PPUSH
5148: CALL_OW 302
5152: AND
5153: IFFALSE 5162
// SetAchievement ( ACH_CYRUS ) ;
5155: LD_STRING ACH_CYRUS
5157: PPUSH
5158: CALL_OW 543
// end ;
5162: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 7
5172: AND
5173: IFFALSE 5185
5175: GO 5177
5177: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5178: LD_STRING M2c
5180: PPUSH
5181: CALL_OW 337
5185: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5186: LD_EXP 15
5190: PPUSH
5191: LD_INT 8
5193: PPUSH
5194: CALL_OW 308
5198: IFFALSE 5250
5200: GO 5202
5202: DISABLE
// begin macmilan_in_trap := true ;
5203: LD_ADDR_EXP 9
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5211: LD_INT 35
5213: PPUSH
5214: CALL_OW 67
// DialogueOn ;
5218: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5222: LD_EXP 25
5226: PPUSH
5227: LD_STRING D5-Pok-1
5229: PPUSH
5230: CALL_OW 88
// DialogueOff ;
5234: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5238: LD_EXP 15
5242: PPUSH
5243: LD_STRING D4b-JMM-1
5245: PPUSH
5246: CALL_OW 88
// end ;
5250: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5251: LD_EXP 15
5255: PPUSH
5256: LD_EXP 23
5260: PUSH
5261: LD_EXP 23
5265: ARRAY
5266: PPUSH
5267: CALL_OW 296
5271: PUSH
5272: LD_INT 12
5274: LESS
5275: PUSH
5276: LD_EXP 23
5280: PPUSH
5281: LD_INT 3
5283: PUSH
5284: LD_INT 24
5286: PUSH
5287: LD_INT 990
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: OR
5303: IFFALSE 5533
5305: GO 5307
5307: DISABLE
5308: LD_INT 0
5310: PPUSH
5311: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: LD_INT 300
5319: PUSH
5320: LD_INT 250
5322: PUSH
5323: LD_INT 200
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: PUSH
5331: LD_OWVAR 67
5335: ARRAY
5336: ST_TO_ADDR
// for i in russian_meta_guards do
5337: LD_ADDR_VAR 0 1
5341: PUSH
5342: LD_EXP 23
5346: PUSH
5347: FOR_IN
5348: IFFALSE 5388
// if IsOk ( i ) then
5350: LD_VAR 0 1
5354: PPUSH
5355: CALL_OW 302
5359: IFFALSE 5386
// SetLives ( i , GetLives ( i ) - hp ) ;
5361: LD_VAR 0 1
5365: PPUSH
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL_OW 256
5375: PUSH
5376: LD_VAR 0 2
5380: MINUS
5381: PPUSH
5382: CALL_OW 234
5386: GO 5347
5388: POP
5389: POP
// DialogueOn ;
5390: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5394: LD_EXP 23
5398: PUSH
5399: LD_EXP 23
5403: ARRAY
5404: PPUSH
5405: LD_STRING D6-FRus1-1
5407: PPUSH
5408: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5412: LD_EXP 15
5416: PPUSH
5417: LD_STRING D6-JMM-1
5419: PPUSH
5420: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5424: LD_EXP 17
5428: PPUSH
5429: CALL_OW 302
5433: PUSH
5434: LD_EXP 7
5438: AND
5439: IFFALSE 5453
// Say ( Cyrus , D6-Cyrus-1 ) ;
5441: LD_EXP 17
5445: PPUSH
5446: LD_STRING D6-Cyrus-1
5448: PPUSH
5449: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5453: LD_EXP 16
5457: PPUSH
5458: CALL_OW 302
5462: PUSH
5463: LD_EXP 4
5467: AND
5468: IFFALSE 5482
// Say ( Bobby , D6-Bobby-1 ) ;
5470: LD_EXP 16
5474: PPUSH
5475: LD_STRING D6-Bobby-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5486: LD_INT 140
5488: PUSH
5489: LD_INT 105
5491: PUSH
5492: LD_INT 70
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: PUSH
5500: LD_OWVAR 67
5504: ARRAY
5505: PPUSH
5506: CALL_OW 67
// meta_action := true ;
5510: LD_ADDR_EXP 10
5514: PUSH
5515: LD_INT 1
5517: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5518: LD_EXP 23
5522: PPUSH
5523: LD_INT 94
5525: PPUSH
5526: LD_INT 8
5528: PPUSH
5529: CALL_OW 114
// end ;
5533: PPOPN 2
5535: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5536: LD_EXP 15
5540: PPUSH
5541: LD_INT 93
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: CALL_OW 297
5551: PUSH
5552: LD_INT 5
5554: LESS
5555: PUSH
5556: LD_INT 22
5558: PUSH
5559: LD_INT 1
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 69
5570: PUSH
5571: LD_INT 1
5573: GREATER
5574: AND
5575: IFFALSE 5592
5577: GO 5579
5579: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5580: LD_EXP 15
5584: PPUSH
5585: LD_STRING D6a-JMM-1
5587: PPUSH
5588: CALL_OW 88
5592: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5593: LD_VAR 0 1
5597: PUSH
5598: LD_EXP 15
5602: EQUAL
5603: IFFALSE 5612
// YouLost ( JMM ) ;
5605: LD_STRING JMM
5607: PPUSH
5608: CALL_OW 104
// end ;
5612: PPOPN 1
5614: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5615: LD_VAR 0 1
5619: PUSH
5620: LD_EXP 15
5624: EQUAL
5625: IFFALSE 5634
// YouLost ( JMM ) ;
5627: LD_STRING JMM
5629: PPUSH
5630: CALL_OW 104
// end ;
5634: PPOPN 1
5636: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5637: LD_EXP 16
5641: PPUSH
5642: LD_INT 10
5644: PPUSH
5645: CALL_OW 308
5649: IFFALSE 5698
5651: GO 5653
5653: DISABLE
// begin bobby_saved := true ;
5654: LD_ADDR_EXP 12
5658: PUSH
5659: LD_INT 1
5661: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5662: LD_EXP 16
5666: PPUSH
5667: CALL_OW 256
5671: PPUSH
5672: LD_STRING 01_BobbyLifePoints_1
5674: PPUSH
5675: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5679: LD_EXP 16
5683: PPUSH
5684: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5688: LD_STRING Bobby
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 101
// end ;
5698: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5699: LD_EXP 17
5703: PPUSH
5704: LD_INT 10
5706: PPUSH
5707: CALL_OW 308
5711: IFFALSE 5760
5713: GO 5715
5715: DISABLE
// begin cyrus_saved := true ;
5716: LD_ADDR_EXP 13
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5724: LD_EXP 17
5728: PPUSH
5729: CALL_OW 256
5733: PPUSH
5734: LD_STRING 01_CyrusLifePoints_1
5736: PPUSH
5737: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5741: LD_EXP 17
5745: PPUSH
5746: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5750: LD_STRING Cyrus
5752: PPUSH
5753: LD_INT 1
5755: PPUSH
5756: CALL_OW 101
// end ;
5760: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5761: LD_EXP 15
5765: PPUSH
5766: LD_INT 10
5768: PPUSH
5769: CALL_OW 308
5773: IFFALSE 6381
5775: GO 5777
5777: DISABLE
5778: LD_INT 0
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
// begin if macmilan_use_radio then
5786: LD_EXP 6
5790: IFFALSE 5799
// SetAchievement ( ACH_RADIO ) ;
5792: LD_STRING ACH_RADIO
5794: PPUSH
5795: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5799: LD_EXP 13
5803: NOT
5804: PUSH
5805: LD_EXP 7
5809: AND
5810: PUSH
5811: LD_EXP 17
5815: PPUSH
5816: CALL_OW 302
5820: AND
5821: PUSH
5822: LD_EXP 12
5826: NOT
5827: PUSH
5828: LD_EXP 4
5832: AND
5833: PUSH
5834: LD_EXP 16
5838: PPUSH
5839: CALL_OW 302
5843: AND
5844: OR
5845: IFFALSE 5886
// case Query ( Q2 ) of 1 :
5847: LD_STRING Q2
5849: PPUSH
5850: CALL_OW 97
5854: PUSH
5855: LD_INT 1
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5863
5861: GO 5874
5863: POP
// wait_for_them := true ; 2 :
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_INT 1
5871: ST_TO_ADDR
5872: GO 5886
5874: LD_INT 2
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5885
5882: POP
// ; end ;
5883: GO 5886
5885: POP
// if wait_for_them then
5886: LD_VAR 0 3
5890: IFFALSE 6003
// repeat wait ( 0 0$01 ) ;
5892: LD_INT 35
5894: PPUSH
5895: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5899: LD_EXP 13
5903: PUSH
5904: LD_EXP 12
5908: AND
5909: PUSH
5910: LD_EXP 13
5914: PUSH
5915: LD_EXP 4
5919: NOT
5920: PUSH
5921: LD_EXP 16
5925: PPUSH
5926: CALL_OW 303
5930: OR
5931: PUSH
5932: LD_EXP 16
5936: PPUSH
5937: CALL_OW 301
5941: OR
5942: AND
5943: OR
5944: PUSH
5945: LD_EXP 12
5949: PUSH
5950: LD_EXP 7
5954: NOT
5955: PUSH
5956: LD_EXP 17
5960: PPUSH
5961: CALL_OW 303
5965: OR
5966: PUSH
5967: LD_EXP 17
5971: PPUSH
5972: CALL_OW 301
5976: OR
5977: AND
5978: OR
5979: PUSH
5980: LD_EXP 16
5984: PPUSH
5985: CALL_OW 301
5989: PUSH
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 301
5999: AND
6000: OR
6001: IFFALSE 5892
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6003: LD_EXP 15
6007: PPUSH
6008: CALL_OW 256
6012: PPUSH
6013: LD_STRING 01_JMMLifePoints_1
6015: PPUSH
6016: CALL_OW 39
// RemoveUnit ( JMM ) ;
6020: LD_EXP 15
6024: PPUSH
6025: CALL_OW 64
// to_reward := [ JMM ] ;
6029: LD_ADDR_VAR 0 2
6033: PUSH
6034: LD_EXP 15
6038: PUSH
6039: EMPTY
6040: LIST
6041: ST_TO_ADDR
// if bobby_saved then
6042: LD_EXP 12
6046: IFFALSE 6064
// to_reward := to_reward ^ Bobby ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PUSH
6058: LD_EXP 16
6062: ADD
6063: ST_TO_ADDR
// if cyrus_saved then
6064: LD_EXP 13
6068: IFFALSE 6086
// to_reward := to_reward ^ Cyrus ;
6070: LD_ADDR_VAR 0 2
6074: PUSH
6075: LD_VAR 0 2
6079: PUSH
6080: LD_EXP 17
6084: ADD
6085: ST_TO_ADDR
// m1 := true ;
6086: LD_ADDR_VAR 0 4
6090: PUSH
6091: LD_INT 1
6093: ST_TO_ADDR
// m2 := bobby_saved ;
6094: LD_ADDR_VAR 0 5
6098: PUSH
6099: LD_EXP 12
6103: ST_TO_ADDR
// m3 := cyrus_saved ;
6104: LD_ADDR_VAR 0 6
6108: PUSH
6109: LD_EXP 13
6113: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6114: LD_STRING JMM
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 101
// if not bobby_in_squad then
6124: LD_EXP 4
6128: NOT
6129: IFFALSE 6142
// AddMedal ( Bobby , - 1 ) ;
6131: LD_STRING Bobby
6133: PPUSH
6134: LD_INT 1
6136: NEG
6137: PPUSH
6138: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6142: LD_EXP 12
6146: NOT
6147: PUSH
6148: LD_EXP 16
6152: PPUSH
6153: CALL_OW 303
6157: PUSH
6158: LD_EXP 16
6162: PPUSH
6163: CALL_OW 301
6167: OR
6168: AND
6169: IFFALSE 6182
// AddMedal ( Bobby , - 2 ) ;
6171: LD_STRING Bobby
6173: PPUSH
6174: LD_INT 2
6176: NEG
6177: PPUSH
6178: CALL_OW 101
// if not cyrus_in_squad then
6182: LD_EXP 7
6186: NOT
6187: IFFALSE 6200
// AddMedal ( Cyrus , - 1 ) ;
6189: LD_STRING Cyrus
6191: PPUSH
6192: LD_INT 1
6194: NEG
6195: PPUSH
6196: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6200: LD_EXP 13
6204: NOT
6205: PUSH
6206: LD_EXP 17
6210: PPUSH
6211: CALL_OW 303
6215: PUSH
6216: LD_EXP 17
6220: PPUSH
6221: CALL_OW 301
6225: OR
6226: AND
6227: IFFALSE 6240
// AddMedal ( Cyrus , - 2 ) ;
6229: LD_STRING Cyrus
6231: PPUSH
6232: LD_INT 2
6234: NEG
6235: PPUSH
6236: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6240: LD_OWVAR 67
6244: PUSH
6245: LD_INT 3
6247: EQUAL
6248: PUSH
6249: LD_VAR 0 4
6253: AND
6254: PUSH
6255: LD_VAR 0 5
6259: AND
6260: PUSH
6261: LD_VAR 0 6
6265: AND
6266: IFFALSE 6278
// SetAchievementEX ( ACH_AMER , 1 ) ;
6268: LD_STRING ACH_AMER
6270: PPUSH
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 564
// GiveMedals ( MAIN ) ;
6278: LD_STRING MAIN
6280: PPUSH
6281: CALL_OW 102
// RewardPeople ( to_reward ) ;
6285: LD_VAR 0 2
6289: PPUSH
6290: CALL_OW 43
// if bobby_saved then
6294: LD_EXP 12
6298: IFFALSE 6318
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6300: LD_EXP 16
6304: PPUSH
6305: LD_EXP 2
6309: PUSH
6310: LD_STRING Bobby
6312: STR
6313: PPUSH
6314: CALL_OW 38
// if cyrus_saved then
6318: LD_EXP 13
6322: IFFALSE 6342
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6324: LD_EXP 17
6328: PPUSH
6329: LD_EXP 2
6333: PUSH
6334: LD_STRING Cyrus
6336: STR
6337: PPUSH
6338: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6342: LD_EXP 15
6346: PPUSH
6347: LD_EXP 2
6351: PUSH
6352: LD_STRING JMM
6354: STR
6355: PPUSH
6356: CALL_OW 38
// if tick <= 3 3$00 then
6360: LD_OWVAR 1
6364: PUSH
6365: LD_INT 6300
6367: LESSEQUAL
6368: IFFALSE 6377
// SetAchievement ( ACH_ASPEED_1 ) ;
6370: LD_STRING ACH_ASPEED_1
6372: PPUSH
6373: CALL_OW 543
// YouWin ;
6377: CALL_OW 103
// end ; end_of_file end_of_file end_of_file
6381: PPOPN 6
6383: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
6390: LD_VAR 0 1
6394: PPUSH
6395: CALL_OW 264
6399: PUSH
6400: LD_EXP 30
6404: EQUAL
6405: IFFALSE 6477
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
6407: LD_INT 68
6409: PPUSH
6410: LD_VAR 0 1
6414: PPUSH
6415: CALL_OW 255
6419: PPUSH
6420: CALL_OW 321
6424: PUSH
6425: LD_INT 2
6427: EQUAL
6428: IFFALSE 6440
// eff := 70 else
6430: LD_ADDR_VAR 0 6
6434: PUSH
6435: LD_INT 70
6437: ST_TO_ADDR
6438: GO 6448
// eff := 30 ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_INT 30
6447: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: CALL_OW 250
6457: PPUSH
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 251
6467: PPUSH
6468: LD_VAR 0 6
6472: PPUSH
6473: CALL_OW 495
// end ; end ;
6477: LD_VAR 0 4
6481: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
6482: LD_INT 0
6484: PPUSH
6485: PPUSH
6486: PPUSH
6487: PPUSH
6488: PPUSH
6489: PPUSH
// if cmd = 124 then
6490: LD_VAR 0 1
6494: PUSH
6495: LD_INT 124
6497: EQUAL
6498: IFFALSE 6704
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
6500: LD_ADDR_VAR 0 5
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 34
6510: PUSH
6511: LD_INT 53
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 34
6520: PUSH
6521: LD_INT 14
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL_OW 69
6537: ST_TO_ADDR
// if not tmp then
6538: LD_VAR 0 5
6542: NOT
6543: IFFALSE 6547
// exit ;
6545: GO 6704
// for i in tmp do
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_VAR 0 5
6556: PUSH
6557: FOR_IN
6558: IFFALSE 6702
// begin taskList := GetTaskList ( i ) ;
6560: LD_ADDR_VAR 0 6
6564: PUSH
6565: LD_VAR 0 3
6569: PPUSH
6570: CALL_OW 437
6574: ST_TO_ADDR
// if not taskList then
6575: LD_VAR 0 6
6579: NOT
6580: IFFALSE 6584
// continue ;
6582: GO 6557
// for j = 1 to taskList do
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: DOUBLE
6590: LD_INT 1
6592: DEC
6593: ST_TO_ADDR
6594: LD_VAR 0 6
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6698
// if taskList [ j ] [ 1 ] = | then
6602: LD_VAR 0 6
6606: PUSH
6607: LD_VAR 0 4
6611: ARRAY
6612: PUSH
6613: LD_INT 1
6615: ARRAY
6616: PUSH
6617: LD_STRING |
6619: EQUAL
6620: IFFALSE 6696
// begin _taskList := Delete ( taskList , 1 ) ;
6622: LD_ADDR_VAR 0 7
6626: PUSH
6627: LD_VAR 0 6
6631: PPUSH
6632: LD_INT 1
6634: PPUSH
6635: CALL_OW 3
6639: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
6640: LD_VAR 0 3
6644: PPUSH
6645: LD_VAR 0 7
6649: PPUSH
6650: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
6654: LD_VAR 0 3
6658: PPUSH
6659: LD_VAR 0 6
6663: PUSH
6664: LD_VAR 0 4
6668: ARRAY
6669: PUSH
6670: LD_INT 2
6672: ARRAY
6673: PPUSH
6674: LD_VAR 0 6
6678: PUSH
6679: LD_VAR 0 4
6683: ARRAY
6684: PUSH
6685: LD_INT 3
6687: ARRAY
6688: PPUSH
6689: LD_INT 8
6691: PPUSH
6692: CALL 6709 0 4
// end ;
6696: GO 6599
6698: POP
6699: POP
// end ;
6700: GO 6557
6702: POP
6703: POP
// end ; end ;
6704: LD_VAR 0 2
6708: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
6719: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
6720: LD_VAR 0 1
6724: NOT
6725: PUSH
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_VAR 0 3
6735: PPUSH
6736: CALL_OW 488
6740: NOT
6741: OR
6742: PUSH
6743: LD_VAR 0 4
6747: NOT
6748: OR
6749: IFFALSE 6753
// exit ;
6751: GO 7093
// list := [ ] ;
6753: LD_ADDR_VAR 0 13
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// if x - r < 0 then
6760: LD_VAR 0 2
6764: PUSH
6765: LD_VAR 0 4
6769: MINUS
6770: PUSH
6771: LD_INT 0
6773: LESS
6774: IFFALSE 6786
// min_x := 0 else
6776: LD_ADDR_VAR 0 7
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
6784: GO 6802
// min_x := x - r ;
6786: LD_ADDR_VAR 0 7
6790: PUSH
6791: LD_VAR 0 2
6795: PUSH
6796: LD_VAR 0 4
6800: MINUS
6801: ST_TO_ADDR
// if y - r < 0 then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_VAR 0 4
6811: MINUS
6812: PUSH
6813: LD_INT 0
6815: LESS
6816: IFFALSE 6828
// min_y := 0 else
6818: LD_ADDR_VAR 0 8
6822: PUSH
6823: LD_INT 0
6825: ST_TO_ADDR
6826: GO 6844
// min_y := y - r ;
6828: LD_ADDR_VAR 0 8
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_VAR 0 4
6842: MINUS
6843: ST_TO_ADDR
// max_x := x + r ;
6844: LD_ADDR_VAR 0 9
6848: PUSH
6849: LD_VAR 0 2
6853: PUSH
6854: LD_VAR 0 4
6858: PLUS
6859: ST_TO_ADDR
// max_y := y + r ;
6860: LD_ADDR_VAR 0 10
6864: PUSH
6865: LD_VAR 0 3
6869: PUSH
6870: LD_VAR 0 4
6874: PLUS
6875: ST_TO_ADDR
// for _x = min_x to max_x do
6876: LD_ADDR_VAR 0 11
6880: PUSH
6881: DOUBLE
6882: LD_VAR 0 7
6886: DEC
6887: ST_TO_ADDR
6888: LD_VAR 0 9
6892: PUSH
6893: FOR_TO
6894: IFFALSE 7011
// for _y = min_y to max_y do
6896: LD_ADDR_VAR 0 12
6900: PUSH
6901: DOUBLE
6902: LD_VAR 0 8
6906: DEC
6907: ST_TO_ADDR
6908: LD_VAR 0 10
6912: PUSH
6913: FOR_TO
6914: IFFALSE 7007
// begin if not ValidHex ( _x , _y ) then
6916: LD_VAR 0 11
6920: PPUSH
6921: LD_VAR 0 12
6925: PPUSH
6926: CALL_OW 488
6930: NOT
6931: IFFALSE 6935
// continue ;
6933: GO 6913
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
6935: LD_VAR 0 11
6939: PPUSH
6940: LD_VAR 0 12
6944: PPUSH
6945: CALL_OW 351
6949: PUSH
6950: LD_VAR 0 11
6954: PPUSH
6955: LD_VAR 0 12
6959: PPUSH
6960: CALL_OW 554
6964: AND
6965: IFFALSE 7005
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
6967: LD_ADDR_VAR 0 13
6971: PUSH
6972: LD_VAR 0 13
6976: PPUSH
6977: LD_VAR 0 13
6981: PUSH
6982: LD_INT 1
6984: PLUS
6985: PPUSH
6986: LD_VAR 0 11
6990: PUSH
6991: LD_VAR 0 12
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 2
7004: ST_TO_ADDR
// end ;
7005: GO 6913
7007: POP
7008: POP
7009: GO 6893
7011: POP
7012: POP
// if not list then
7013: LD_VAR 0 13
7017: NOT
7018: IFFALSE 7022
// exit ;
7020: GO 7093
// for i in list do
7022: LD_ADDR_VAR 0 6
7026: PUSH
7027: LD_VAR 0 13
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7091
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: LD_STRING M
7042: PUSH
7043: LD_VAR 0 6
7047: PUSH
7048: LD_INT 1
7050: ARRAY
7051: PUSH
7052: LD_VAR 0 6
7056: PUSH
7057: LD_INT 2
7059: ARRAY
7060: PUSH
7061: LD_INT 0
7063: PUSH
7064: LD_INT 0
7066: PUSH
7067: LD_INT 0
7069: PUSH
7070: LD_INT 0
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: PPUSH
7085: CALL_OW 447
7089: GO 7032
7091: POP
7092: POP
// end ; end_of_file
7093: LD_VAR 0 5
7097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
7098: GO 7100
7100: DISABLE
// begin ru_radar := 98 ;
7101: LD_ADDR_EXP 26
7105: PUSH
7106: LD_INT 98
7108: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7109: LD_ADDR_EXP 27
7113: PUSH
7114: LD_INT 89
7116: ST_TO_ADDR
// us_hack := 99 ;
7117: LD_ADDR_EXP 28
7121: PUSH
7122: LD_INT 99
7124: ST_TO_ADDR
// us_artillery := 97 ;
7125: LD_ADDR_EXP 29
7129: PUSH
7130: LD_INT 97
7132: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7133: LD_ADDR_EXP 30
7137: PUSH
7138: LD_INT 91
7140: ST_TO_ADDR
// end ;
7141: END
