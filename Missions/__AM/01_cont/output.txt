// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2631 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := 0 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := . ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING .
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := . ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING .
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 460 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 460
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 420 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 420
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1603
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1548
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// ComHold ( un ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 140
// end else
1546: GO 1601
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_EXP 21
1557: PPUSH
1558: LD_EXP 21
1562: PUSH
1563: LD_INT 1
1565: PLUS
1566: PPUSH
1567: LD_VAR 0 4
1571: PPUSH
1572: CALL_OW 2
1576: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// ComHold ( un ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL_OW 140
// end ; end ;
1601: GO 1451
1603: POP
1604: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 30
1622: PUSH
1623: LD_INT 31
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 69
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1658
// PrepareSolBun ( skill , i ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: CALL 239 0 2
1656: GO 1639
1658: POP
1659: POP
// for i = 1 to 2 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_INT 1
1668: DEC
1669: ST_TO_ADDR
1670: LD_INT 2
1672: PUSH
1673: FOR_TO
1674: IFFALSE 1805
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1676: LD_ADDR_VAR 0 4
1680: PUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 22
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: LD_INT 42
1698: PPUSH
1699: LD_INT 100
1701: PPUSH
1702: CALL 375 0 7
1706: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 131
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_VAR 0 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 14
1759: PUSH
1760: LD_INT 87
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_VAR 0 3
1771: ARRAY
1772: PPUSH
1773: LD_INT 0
1775: PPUSH
1776: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1780: LD_ADDR_EXP 22
1784: PUSH
1785: LD_EXP 22
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 2
1802: ST_TO_ADDR
// end ;
1803: GO 1673
1805: POP
1806: POP
// for i = 1 to 2 do
1807: LD_ADDR_VAR 0 3
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 2
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1912
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1823: LD_INT 2
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: CALL_OW 380
// un := CreateHuman ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: CALL_OW 44
1862: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1863: LD_ADDR_EXP 23
1867: PUSH
1868: LD_EXP 23
1872: PPUSH
1873: LD_INT 1
1875: PPUSH
1876: LD_VAR 0 4
1880: PPUSH
1881: CALL_OW 2
1885: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1886: LD_VAR 0 4
1890: PPUSH
1891: LD_INT 10
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 49
// ComHold ( un ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: CALL_OW 140
// end ;
1910: GO 1820
1912: POP
1913: POP
// if Difficulty < 3 then
1914: LD_OWVAR 67
1918: PUSH
1919: LD_INT 3
1921: LESS
1922: IFFALSE 1926
// exit ;
1924: GO 1969
// PrepareHuman ( false , 1 , skill ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_VAR 0 2
1936: PPUSH
1937: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1941: LD_ADDR_EXP 24
1945: PUSH
1946: CALL_OW 44
1950: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1951: LD_EXP 24
1955: PPUSH
1956: LD_INT 82
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: CALL_OW 48
// end ;
1969: LD_VAR 0 1
1973: RET
// every 0 0$01 trigger active_road_patrol do
1974: LD_EXP 8
1978: IFFALSE 2044
1980: GO 1982
1982: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1983: LD_EXP 22
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: LD_STRING road
1994: PPUSH
1995: LD_INT 70
1997: PPUSH
1998: LD_INT 131
2000: PUSH
2001: LD_INT 87
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 75
2009: PUSH
2010: LD_INT 107
2012: PUSH
2013: LD_INT 66
2015: PUSH
2016: LD_INT 114
2018: PUSH
2019: LD_INT 61
2021: PUSH
2022: LD_INT 107
2024: PUSH
2025: LD_INT 34
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PPUSH
2040: CALL 463 0 4
2044: END
// every 0 0$01 trigger active_road_patrol do
2045: LD_EXP 8
2049: IFFALSE 2107
2051: GO 2053
2053: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2054: LD_EXP 22
2058: PUSH
2059: LD_INT 2
2061: ARRAY
2062: PPUSH
2063: LD_STRING road
2065: PPUSH
2066: LD_INT 70
2068: PPUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 12
2074: PUSH
2075: LD_INT 37
2077: PUSH
2078: LD_INT 30
2080: PUSH
2081: LD_INT 65
2083: PUSH
2084: LD_INT 62
2086: PUSH
2087: LD_INT 107
2089: PUSH
2090: LD_INT 76
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: PPUSH
2103: CALL 463 0 4
2107: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2108: LD_EXP 24
2112: PPUSH
2113: CALL_OW 302
2117: IFFALSE 2179
2119: GO 2121
2121: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2122: LD_EXP 24
2126: PPUSH
2127: LD_STRING forest
2129: PPUSH
2130: LD_INT 35
2132: PPUSH
2133: LD_INT 52
2135: PUSH
2136: LD_INT 15
2138: PUSH
2139: LD_INT 81
2141: PUSH
2142: LD_INT 9
2144: PUSH
2145: LD_INT 120
2147: PUSH
2148: LD_INT 52
2150: PUSH
2151: LD_INT 135
2153: PUSH
2154: LD_INT 80
2156: PUSH
2157: LD_INT 122
2159: PUSH
2160: LD_INT 95
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL 463 0 4
2179: END
// every 0 0$01 trigger macmilan_use_radio do
2180: LD_EXP 6
2184: IFFALSE 2245
2186: GO 2188
2188: DISABLE
// begin active_road_patrol := false ;
2189: LD_ADDR_EXP 8
2193: PUSH
2194: LD_INT 0
2196: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2197: LD_EXP 22
2201: PPUSH
2202: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2206: LD_EXP 22
2210: PPUSH
2211: LD_INT 72
2213: PPUSH
2214: LD_INT 41
2216: PPUSH
2217: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2221: LD_EXP 21
2225: PPUSH
2226: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2230: LD_EXP 21
2234: PPUSH
2235: LD_INT 72
2237: PPUSH
2238: LD_INT 41
2240: PPUSH
2241: CALL_OW 174
// end ;
2245: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2246: LD_INT 9
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 70
2263: IFFALSE 2337
2265: GO 2267
2267: DISABLE
2268: LD_INT 0
2270: PPUSH
// begin enable ;
2271: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2272: LD_ADDR_VAR 0 1
2276: PUSH
2277: LD_INT 9
2279: PPUSH
2280: LD_INT 22
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 70
2294: PUSH
2295: LD_INT 1
2297: ARRAY
2298: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2299: LD_EXP 21
2303: PPUSH
2304: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2308: LD_EXP 21
2312: PPUSH
2313: LD_VAR 0 1
2317: PPUSH
2318: CALL_OW 250
2322: PPUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: CALL_OW 251
2332: PPUSH
2333: CALL_OW 174
// end ;
2337: PPOPN 1
2339: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2340: LD_EXP 22
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 256
2353: PUSH
2354: LD_INT 999
2356: LESS
2357: PUSH
2358: LD_EXP 22
2362: PUSH
2363: LD_INT 2
2365: ARRAY
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 999
2374: LESS
2375: OR
2376: PUSH
2377: LD_INT 3
2379: PPUSH
2380: LD_EXP 15
2384: PPUSH
2385: CALL_OW 292
2389: AND
2390: IFFALSE 2417
2392: GO 2394
2394: DISABLE
// begin active_road_patrol := false ;
2395: LD_ADDR_EXP 8
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2403: LD_EXP 22
2407: PPUSH
2408: LD_EXP 15
2412: PPUSH
2413: CALL_OW 115
// end ;
2417: END
// every 0 0$01 trigger macmilan_in_trap do
2418: LD_EXP 9
2422: IFFALSE 2468
2424: GO 2426
2426: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2427: LD_EXP 21
2431: PPUSH
2432: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2436: LD_EXP 20
2440: PUSH
2441: LD_EXP 21
2445: ADD
2446: PUSH
2447: LD_EXP 25
2451: ADD
2452: PUSH
2453: LD_EXP 22
2457: ADD
2458: PPUSH
2459: LD_EXP 15
2463: PPUSH
2464: CALL_OW 115
// end ;
2468: END
// every 0 0$01 trigger meta_action do
2469: LD_EXP 10
2473: IFFALSE 2519
2475: GO 2477
2477: DISABLE
// begin active_road_patrol := false ;
2478: LD_ADDR_EXP 8
2482: PUSH
2483: LD_INT 0
2485: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2486: LD_EXP 20
2490: PUSH
2491: LD_EXP 21
2495: ADD
2496: PUSH
2497: LD_EXP 25
2501: ADD
2502: PUSH
2503: LD_EXP 22
2507: ADD
2508: PPUSH
2509: LD_INT 93
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 114
// end ;
2519: END
// every 0 0$20 trigger send_troops_to_forest do
2520: LD_EXP 14
2524: IFFALSE 2578
2526: GO 2528
2528: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2529: LD_EXP 24
2533: PPUSH
2534: CALL_OW 302
2538: NOT
2539: IFFALSE 2543
// exit ;
2541: GO 2578
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2543: LD_EXP 20
2547: PUSH
2548: LD_EXP 25
2552: ADD
2553: PPUSH
2554: LD_EXP 24
2558: PPUSH
2559: CALL_OW 252
2563: PPUSH
2564: LD_EXP 24
2568: PPUSH
2569: CALL_OW 253
2573: PPUSH
2574: CALL_OW 114
// end ;
2578: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2579: LD_VAR 0 1
2583: PPUSH
2584: CALL_OW 255
2588: PUSH
2589: LD_INT 3
2591: EQUAL
2592: IFFALSE 2628
// ComMoveUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2594: LD_VAR 0 1
2598: PPUSH
2599: LD_INT 30
2601: PUSH
2602: LD_INT 0
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PPUSH
2609: CALL_OW 69
2613: PPUSH
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 74
2623: PPUSH
2624: CALL_OW 112
// end ; end_of_file
2628: PPOPN 4
2630: END
// export function Action ; var i ; begin
2631: LD_INT 0
2633: PPUSH
2634: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: LD_INT 22
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: LD_INT 25
2652: PUSH
2653: LD_INT 1
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 69
2668: PUSH
2669: FOR_IN
2670: IFFALSE 2683
// ComHold ( i ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: CALL_OW 140
2681: GO 2669
2683: POP
2684: POP
// InGameOn ;
2685: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2689: LD_INT 79
2691: PPUSH
2692: LD_INT 76
2694: PPUSH
2695: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2699: LD_INT 10
2701: PPUSH
2702: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2706: LD_EXP 15
2710: PPUSH
2711: LD_INT 80
2713: PPUSH
2714: LD_INT 79
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: CALL_OW 48
// Wait ( 0 0$03 ) ;
2724: LD_INT 105
2726: PPUSH
2727: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2731: LD_EXP 15
2735: PPUSH
2736: LD_INT 80
2738: PPUSH
2739: LD_INT 76
2741: PPUSH
2742: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2746: LD_EXP 15
2750: PPUSH
2751: LD_STRING D1-JMM-1
2753: PPUSH
2754: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2758: LD_INT 10
2760: PPUSH
2761: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2765: LD_EXP 15
2769: PPUSH
2770: LD_INT 76
2772: PPUSH
2773: LD_INT 76
2775: PPUSH
2776: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2780: LD_EXP 15
2784: PPUSH
2785: LD_STRING D1-JMM-1a
2787: PPUSH
2788: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2792: LD_INT 10
2794: PPUSH
2795: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2799: LD_EXP 15
2803: PPUSH
2804: LD_INT 83
2806: PPUSH
2807: LD_INT 66
2809: PPUSH
2810: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2814: LD_EXP 15
2818: PPUSH
2819: LD_STRING D1-JMM-1b
2821: PPUSH
2822: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2826: LD_INT 18
2828: PPUSH
2829: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2833: LD_EXP 15
2837: PPUSH
2838: LD_STRING D1-JMM-1c
2840: PPUSH
2841: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2845: LD_INT 7
2847: PPUSH
2848: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2852: LD_EXP 18
2856: PPUSH
2857: LD_STRING D1-Pow-1
2859: PPUSH
2860: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2864: LD_EXP 15
2868: PPUSH
2869: LD_STRING D1-JMM-2
2871: PPUSH
2872: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2876: LD_EXP 18
2880: PPUSH
2881: LD_STRING D1-Pow-2
2883: PPUSH
2884: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2888: LD_EXP 15
2892: PPUSH
2893: LD_STRING D1-JMM-3
2895: PPUSH
2896: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2900: LD_EXP 18
2904: PPUSH
2905: LD_STRING D1-Pow-3
2907: PPUSH
2908: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2912: LD_EXP 15
2916: PPUSH
2917: LD_STRING D1-JMM-4
2919: PPUSH
2920: CALL_OW 88
// ComFree ( JMM ) ;
2924: LD_EXP 15
2928: PPUSH
2929: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2933: LD_INT 10
2935: PPUSH
2936: CALL_OW 67
// InGameOff ;
2940: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2944: LD_STRING M1
2946: PPUSH
2947: CALL_OW 337
// SaveForQuickRestart ;
2951: CALL_OW 22
// active_russian_dialog := true ;
2955: LD_ADDR_EXP 3
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// active_road_patrol := true ;
2963: LD_ADDR_EXP 8
2967: PUSH
2968: LD_INT 1
2970: ST_TO_ADDR
// if Difficulty < 3 then
2971: LD_OWVAR 67
2975: PUSH
2976: LD_INT 3
2978: LESS
2979: IFFALSE 3010
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_INT 41
2988: PPUSH
2989: LD_INT 71
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 48
// ComHold ( Bobby ) ;
2999: LD_EXP 16
3003: PPUSH
3004: CALL_OW 140
// end else
3008: GO 3058
// begin SetDir ( Bobby , 5 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3022: LD_EXP 16
3026: PPUSH
3027: LD_INT 105
3029: PPUSH
3030: LD_INT 98
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 48
// ComCrawl ( Bobby ) ;
3040: LD_EXP 16
3044: PPUSH
3045: CALL_OW 137
// AddComHold ( Bobby ) ;
3049: LD_EXP 16
3053: PPUSH
3054: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3058: LD_EXP 17
3062: PPUSH
3063: LD_INT 90
3065: PPUSH
3066: LD_INT 42
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3076: LD_EXP 17
3080: PPUSH
3081: LD_INT 79
3083: PPUSH
3084: LD_INT 34
3086: PPUSH
3087: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 197
// end ;
3100: LD_VAR 0 1
3104: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3105: LD_EXP 3
3109: IFFALSE 3732
3111: GO 3113
3113: DISABLE
3114: LD_INT 0
3116: PPUSH
// begin wait_points := 0 ;
3117: LD_ADDR_VAR 0 1
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3125: LD_INT 70
3127: PPUSH
3128: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3132: LD_EXP 20
3136: PPUSH
3137: LD_INT 79
3139: PPUSH
3140: LD_INT 83
3142: PPUSH
3143: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3147: LD_EXP 20
3151: PUSH
3152: LD_INT 2
3154: ARRAY
3155: PPUSH
3156: LD_STRING D1R-Rus1-1
3158: PPUSH
3159: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3163: LD_EXP 20
3167: PUSH
3168: LD_INT 1
3170: ARRAY
3171: PPUSH
3172: LD_STRING D1R-Rus2-1
3174: PPUSH
3175: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3179: LD_EXP 21
3183: PPUSH
3184: LD_INT 79
3186: PPUSH
3187: LD_INT 83
3189: PPUSH
3190: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3201: LD_EXP 20
3205: PUSH
3206: LD_INT 1
3208: ARRAY
3209: PPUSH
3210: LD_INT 79
3212: PPUSH
3213: LD_INT 82
3215: PPUSH
3216: CALL_OW 297
3220: PUSH
3221: LD_INT 5
3223: LESS
3224: IFFALSE 3194
// if not IsInArea ( JMM , jmm_spot ) then
3226: LD_EXP 15
3230: PPUSH
3231: LD_INT 5
3233: PPUSH
3234: CALL_OW 308
3238: NOT
3239: IFFALSE 3259
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3241: LD_EXP 20
3245: PUSH
3246: LD_INT 1
3248: ARRAY
3249: PPUSH
3250: LD_STRING D1Ra-Rus2-1
3252: PPUSH
3253: CALL_OW 88
3257: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3259: LD_EXP 20
3263: PUSH
3264: LD_INT 2
3266: ARRAY
3267: PPUSH
3268: LD_STRING D1Rb-Rus1-1
3270: PPUSH
3271: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3275: LD_EXP 20
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: LD_STRING D1Rb-Rus2-1
3286: PPUSH
3287: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3291: LD_EXP 20
3295: PUSH
3296: LD_EXP 21
3300: ADD
3301: PPUSH
3302: LD_EXP 15
3306: PPUSH
3307: CALL_OW 250
3311: PPUSH
3312: LD_EXP 15
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3326: LD_INT 35
3328: PPUSH
3329: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3333: LD_EXP 15
3337: PPUSH
3338: LD_INT 5
3340: PPUSH
3341: CALL_OW 308
3345: NOT
3346: PUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_EXP 15
3354: PPUSH
3355: CALL_OW 292
3359: NOT
3360: AND
3361: IFFALSE 3326
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3363: LD_EXP 20
3367: PUSH
3368: LD_INT 2
3370: ARRAY
3371: PPUSH
3372: LD_STRING D1Rc-Rus1-1
3374: PPUSH
3375: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3379: LD_EXP 20
3383: PUSH
3384: LD_INT 1
3386: ARRAY
3387: PPUSH
3388: LD_STRING D1Ra-Rus2-1a
3390: PPUSH
3391: CALL_OW 88
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 20
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 20
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 20
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 15
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 20
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 20
3548: PPUSH
3549: LD_EXP 15
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 15
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3590: LD_EXP 20
3594: PPUSH
3595: LD_INT 45
3597: PPUSH
3598: LD_INT 5
3600: PPUSH
3601: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3605: LD_EXP 21
3609: PPUSH
3610: LD_INT 26
3612: PPUSH
3613: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3617: LD_INT 35
3619: PPUSH
3620: CALL_OW 67
// if See ( 3 , JMM ) then
3624: LD_INT 3
3626: PPUSH
3627: LD_EXP 15
3631: PPUSH
3632: CALL_OW 292
3636: IFFALSE 3692
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3638: LD_EXP 20
3642: PUSH
3643: LD_INT 2
3645: ARRAY
3646: PPUSH
3647: LD_STRING D1Rb-Rus1-1
3649: PPUSH
3650: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3654: LD_EXP 20
3658: PPUSH
3659: LD_EXP 15
3663: PPUSH
3664: CALL_OW 250
3668: PPUSH
3669: LD_EXP 15
3673: PPUSH
3674: CALL_OW 251
3678: PPUSH
3679: CALL_OW 114
// Wait ( 0 0$50 ) ;
3683: LD_INT 1750
3685: PPUSH
3686: CALL_OW 67
// end else
3690: GO 3707
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3692: LD_EXP 20
3696: PPUSH
3697: LD_INT 45
3699: PPUSH
3700: LD_INT 5
3702: PPUSH
3703: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3707: LD_EXP 20
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PPUSH
3716: LD_INT 45
3718: PPUSH
3719: LD_INT 5
3721: PPUSH
3722: CALL_OW 297
3726: PUSH
3727: LD_INT 10
3729: LESS
3730: IFFALSE 3617
// end ;
3732: PPOPN 1
3734: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3735: LD_INT 22
3737: PUSH
3738: LD_INT 3
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 92
3747: PUSH
3748: LD_INT 80
3750: PUSH
3751: LD_INT 83
3753: PUSH
3754: LD_INT 6
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 69
3771: PUSH
3772: LD_OWVAR 67
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: AND
3781: IFFALSE 3862
3783: GO 3785
3785: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3786: LD_INT 80
3788: PPUSH
3789: LD_INT 83
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: LD_INT 7
3797: NEG
3798: PPUSH
3799: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3803: LD_INT 35
3805: PPUSH
3806: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3810: LD_INT 22
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 92
3822: PUSH
3823: LD_INT 80
3825: PUSH
3826: LD_INT 83
3828: PUSH
3829: LD_INT 10
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: NOT
3847: IFFALSE 3803
// RemoveSeeing ( 80 , 83 , 1 ) ;
3849: LD_INT 80
3851: PPUSH
3852: LD_INT 83
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL_OW 331
// end ;
3862: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3863: LD_EXP 15
3867: PPUSH
3868: LD_EXP 16
3872: PPUSH
3873: CALL_OW 296
3877: PUSH
3878: LD_INT 9
3880: LESS
3881: IFFALSE 4332
3883: GO 3885
3885: DISABLE
// begin ComWalk ( Bobby ) ;
3886: LD_EXP 16
3890: PPUSH
3891: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3895: LD_EXP 16
3899: PPUSH
3900: LD_EXP 15
3904: PPUSH
3905: CALL_OW 250
3909: PPUSH
3910: LD_EXP 15
3914: PPUSH
3915: CALL_OW 251
3919: PPUSH
3920: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3924: LD_INT 35
3926: PPUSH
3927: CALL_OW 67
// until See ( 4 , JMM ) ;
3931: LD_INT 4
3933: PPUSH
3934: LD_EXP 15
3938: PPUSH
3939: CALL_OW 292
3943: IFFALSE 3924
// InGameOn ;
3945: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3949: LD_EXP 15
3953: PPUSH
3954: LD_EXP 16
3958: PPUSH
3959: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3963: LD_EXP 7
3967: PUSH
3968: LD_EXP 17
3972: PPUSH
3973: CALL_OW 302
3977: AND
3978: PUSH
3979: LD_EXP 15
3983: PPUSH
3984: LD_EXP 17
3988: PPUSH
3989: CALL_OW 296
3993: PUSH
3994: LD_INT 10
3996: LESS
3997: AND
3998: IFFALSE 4043
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4000: LD_EXP 17
4004: PPUSH
4005: LD_EXP 15
4009: PPUSH
4010: CALL_OW 250
4014: PPUSH
4015: LD_EXP 15
4019: PPUSH
4020: CALL_OW 251
4024: PPUSH
4025: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4029: LD_EXP 17
4033: PPUSH
4034: LD_EXP 16
4038: PPUSH
4039: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4043: LD_EXP 15
4047: PPUSH
4048: LD_STRING D2-JMM-1
4050: PPUSH
4051: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4055: LD_INT 10
4057: PPUSH
4058: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4062: LD_EXP 16
4066: PPUSH
4067: LD_EXP 15
4071: PPUSH
4072: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4076: LD_EXP 16
4080: PPUSH
4081: LD_STRING D2-Bobby-1
4083: PPUSH
4084: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4088: LD_EXP 15
4092: PPUSH
4093: LD_STRING D2-JMM-2
4095: PPUSH
4096: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4100: LD_EXP 16
4104: PPUSH
4105: LD_EXP 15
4109: PPUSH
4110: CALL_OW 250
4114: PPUSH
4115: LD_EXP 15
4119: PPUSH
4120: CALL_OW 251
4124: PPUSH
4125: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4129: LD_EXP 16
4133: PPUSH
4134: LD_STRING D2-Bobby-2
4136: PPUSH
4137: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4141: LD_EXP 15
4145: PPUSH
4146: LD_STRING D2-JMM-3
4148: PPUSH
4149: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4153: LD_EXP 16
4157: PPUSH
4158: LD_EXP 15
4162: PPUSH
4163: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4167: LD_EXP 16
4171: PPUSH
4172: LD_STRING D2-Bobby-3
4174: PPUSH
4175: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4179: LD_EXP 15
4183: PPUSH
4184: LD_STRING D2-JMM-4
4186: PPUSH
4187: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4191: LD_EXP 16
4195: PPUSH
4196: LD_STRING D2-Bobby-4
4198: PPUSH
4199: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4203: LD_EXP 15
4207: PPUSH
4208: LD_STRING D2-JMM-5
4210: PPUSH
4211: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4215: LD_EXP 16
4219: PPUSH
4220: LD_STRING D2-Bobby-5
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4227: LD_EXP 15
4231: PPUSH
4232: LD_STRING D2-JMM-6
4234: PPUSH
4235: CALL_OW 88
// if not powell_contact then
4239: LD_EXP 5
4243: NOT
4244: IFFALSE 4270
// begin Say ( Bobby , D2-Bobby-6 ) ;
4246: LD_EXP 16
4250: PPUSH
4251: LD_STRING D2-Bobby-6
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4258: LD_EXP 15
4262: PPUSH
4263: LD_STRING D2-JMM-7
4265: PPUSH
4266: CALL_OW 88
// end ; InGameOff ;
4270: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4274: LD_EXP 16
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4286: LD_EXP 15
4290: PUSH
4291: LD_EXP 16
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 139
// bobby_in_squad := true ;
4304: LD_ADDR_EXP 4
4308: PUSH
4309: LD_INT 1
4311: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4312: LD_EXP 5
4316: PUSH
4317: LD_EXP 7
4321: NOT
4322: AND
4323: IFFALSE 4332
// ChangeMissionObjectives ( M2b ) ;
4325: LD_STRING M2b
4327: PPUSH
4328: CALL_OW 337
// end ;
4332: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4333: LD_EXP 3
4337: PUSH
4338: LD_EXP 4
4342: NOT
4343: AND
4344: PUSH
4345: LD_OWVAR 67
4349: PUSH
4350: LD_INT 3
4352: LESS
4353: AND
4354: IFFALSE 4374
4356: GO 4358
4358: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4359: LD_EXP 16
4363: PPUSH
4364: LD_INT 75
4366: PPUSH
4367: LD_INT 83
4369: PPUSH
4370: CALL_OW 111
4374: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4375: LD_EXP 7
4379: PUSH
4380: LD_EXP 4
4384: NOT
4385: AND
4386: IFFALSE 4415
4388: GO 4390
4390: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4391: LD_EXP 16
4395: PPUSH
4396: LD_INT 105
4398: PPUSH
4399: LD_INT 97
4401: PPUSH
4402: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4406: LD_EXP 16
4410: PPUSH
4411: CALL_OW 197
// end ;
4415: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4416: LD_EXP 15
4420: PPUSH
4421: LD_INT 6
4423: PPUSH
4424: CALL_OW 308
4428: PUSH
4429: LD_EXP 15
4433: PPUSH
4434: LD_EXP 16
4438: PPUSH
4439: CALL_OW 296
4443: PUSH
4444: LD_INT 7
4446: LESS
4447: AND
4448: PUSH
4449: LD_EXP 4
4453: AND
4454: IFFALSE 4501
4456: GO 4458
4458: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4459: LD_EXP 15
4463: PUSH
4464: LD_EXP 16
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PPUSH
4473: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4477: LD_EXP 15
4481: PPUSH
4482: LD_STRING D2a-JMM-1
4484: PPUSH
4485: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4489: LD_EXP 16
4493: PPUSH
4494: LD_STRING D2a-Bobby-1
4496: PPUSH
4497: CALL_OW 88
// end ;
4501: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4502: LD_EXP 3
4506: PUSH
4507: LD_INT 3
4509: PPUSH
4510: LD_EXP 15
4514: PPUSH
4515: CALL_OW 292
4519: NOT
4520: AND
4521: IFFALSE 4697
4523: GO 4525
4525: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4526: LD_INT 350
4528: PPUSH
4529: LD_INT 700
4531: PPUSH
4532: CALL_OW 12
4536: PPUSH
4537: CALL_OW 67
// InGameOn ;
4541: CALL_OW 8
// DialogueOn ;
4545: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_STRING D3-Pow-1
4556: PPUSH
4557: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4561: LD_EXP 15
4565: PPUSH
4566: LD_STRING D3-JMM-1
4568: PPUSH
4569: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4573: LD_EXP 18
4577: PPUSH
4578: LD_STRING D3-Pow-2
4580: PPUSH
4581: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4585: LD_EXP 15
4589: PPUSH
4590: LD_STRING D3-JMM-2
4592: PPUSH
4593: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4597: LD_EXP 18
4601: PPUSH
4602: LD_STRING D3-Pow-3
4604: PPUSH
4605: CALL_OW 94
// DialogueOff ;
4609: CALL_OW 7
// InGameOff ;
4613: CALL_OW 9
// powell_contact := true ;
4617: LD_ADDR_EXP 5
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4625: LD_INT 10
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 424
// uc_side := 4 ;
4635: LD_ADDR_OWVAR 20
4639: PUSH
4640: LD_INT 4
4642: ST_TO_ADDR
// uc_nation := 1 ;
4643: LD_ADDR_OWVAR 21
4647: PUSH
4648: LD_INT 1
4650: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4651: LD_ADDR_EXP 18
4655: PUSH
4656: LD_STRING Powell
4658: PPUSH
4659: LD_INT 0
4661: PPUSH
4662: CALL 182 0 2
4666: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4667: LD_STRING M2
4669: PPUSH
4670: CALL_OW 337
// if not bobby_in_squad then
4674: LD_EXP 4
4678: NOT
4679: IFFALSE 4690
// ChangeMissionObjectives ( M2a ) else
4681: LD_STRING M2a
4683: PPUSH
4684: CALL_OW 337
4688: GO 4697
// ChangeMissionObjectives ( M2b ) ;
4690: LD_STRING M2b
4692: PPUSH
4693: CALL_OW 337
// end ;
4697: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4698: LD_EXP 15
4702: PPUSH
4703: LD_INT 7
4705: PPUSH
4706: CALL_OW 308
4710: IFFALSE 4845
4712: GO 4714
4714: DISABLE
// begin DialogueOn ;
4715: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4719: LD_EXP 19
4723: PPUSH
4724: LD_STRING D4-Rus3-1
4726: PPUSH
4727: CALL_OW 94
// DialogueOff ;
4731: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4735: LD_STRING M3a
4737: PPUSH
4738: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4742: LD_INT 11
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 424
// Wait ( 0 0$02 ) ;
4752: LD_INT 70
4754: PPUSH
4755: CALL_OW 67
// DialogueOn ;
4759: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_STRING D4-Pow-1
4770: PPUSH
4771: CALL_OW 94
// DialogueOff ;
4775: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4779: LD_STRING M3b
4781: PPUSH
4782: CALL_OW 337
// case Query ( Q1 ) of 1 :
4786: LD_STRING Q1
4788: PPUSH
4789: CALL_OW 97
4793: PUSH
4794: LD_INT 1
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 4833
4802: POP
// begin macmilan_use_radio := true ;
4803: LD_ADDR_EXP 6
4807: PUSH
4808: LD_INT 1
4810: ST_TO_ADDR
// DialogueOn ;
4811: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4815: LD_EXP 15
4819: PPUSH
4820: LD_STRING D4a-JMM-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ; 2 :
4831: GO 4845
4833: LD_INT 2
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4841
4839: GO 4844
4841: POP
// ; end ;
4842: GO 4845
4844: POP
// end ;
4845: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4846: LD_EXP 15
4850: PPUSH
4851: LD_EXP 17
4855: PPUSH
4856: CALL_OW 296
4860: PUSH
4861: LD_INT 8
4863: LESS
4864: IFFALSE 5115
4866: GO 4868
4868: DISABLE
// begin InGameOn ;
4869: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4873: LD_EXP 15
4877: PPUSH
4878: LD_EXP 17
4882: PPUSH
4883: CALL_OW 250
4887: PPUSH
4888: LD_EXP 17
4892: PPUSH
4893: CALL_OW 251
4897: PPUSH
4898: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4902: LD_EXP 16
4906: PPUSH
4907: CALL_OW 302
4911: PUSH
4912: LD_EXP 4
4916: AND
4917: IFFALSE 4948
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4919: LD_EXP 16
4923: PPUSH
4924: LD_EXP 15
4928: PPUSH
4929: CALL_OW 250
4933: PPUSH
4934: LD_EXP 15
4938: PPUSH
4939: CALL_OW 251
4943: PPUSH
4944: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4948: LD_EXP 15
4952: PPUSH
4953: LD_STRING D5-JMM-1
4955: PPUSH
4956: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4960: LD_INT 10
4962: PPUSH
4963: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4967: LD_EXP 15
4971: PPUSH
4972: LD_EXP 17
4976: PPUSH
4977: CALL_OW 119
// ComWalk ( Cyrus ) ;
4981: LD_EXP 17
4985: PPUSH
4986: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4990: LD_EXP 17
4994: PPUSH
4995: LD_EXP 15
4999: PPUSH
5000: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5004: LD_EXP 17
5008: PPUSH
5009: LD_STRING D5-Cyrus-1
5011: PPUSH
5012: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5016: LD_EXP 16
5020: PPUSH
5021: CALL_OW 302
5025: PUSH
5026: LD_EXP 4
5030: AND
5031: IFFALSE 5071
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5033: LD_EXP 16
5037: PPUSH
5038: LD_EXP 17
5042: PPUSH
5043: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5047: LD_EXP 16
5051: PPUSH
5052: LD_STRING D5-Bobby-1
5054: PPUSH
5055: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5059: LD_EXP 15
5063: PPUSH
5064: LD_STRING D5-JMM-2
5066: PPUSH
5067: CALL_OW 88
// end ; InGameOff ;
5071: CALL_OW 9
// cyrus_in_squad := true ;
5075: LD_ADDR_EXP 7
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5083: LD_EXP 17
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5095: LD_EXP 5
5099: PUSH
5100: LD_EXP 4
5104: NOT
5105: AND
5106: IFFALSE 5115
// ChangeMissionObjectives ( M2b ) ;
5108: LD_STRING M2b
5110: PPUSH
5111: CALL_OW 337
// end ;
5115: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5116: LD_EXP 4
5120: PUSH
5121: LD_EXP 7
5125: AND
5126: IFFALSE 5138
5128: GO 5130
5130: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5131: LD_STRING M2c
5133: PPUSH
5134: CALL_OW 337
5138: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5139: LD_EXP 15
5143: PPUSH
5144: LD_INT 8
5146: PPUSH
5147: CALL_OW 308
5151: IFFALSE 5203
5153: GO 5155
5155: DISABLE
// begin macmilan_in_trap := true ;
5156: LD_ADDR_EXP 9
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5164: LD_INT 35
5166: PPUSH
5167: CALL_OW 67
// DialogueOn ;
5171: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5175: LD_EXP 25
5179: PPUSH
5180: LD_STRING D5-Pok-1
5182: PPUSH
5183: CALL_OW 88
// DialogueOff ;
5187: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5191: LD_EXP 15
5195: PPUSH
5196: LD_STRING D4b-JMM-1
5198: PPUSH
5199: CALL_OW 88
// end ;
5203: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5204: LD_EXP 15
5208: PPUSH
5209: LD_EXP 23
5213: PUSH
5214: LD_EXP 23
5218: ARRAY
5219: PPUSH
5220: CALL_OW 296
5224: PUSH
5225: LD_INT 12
5227: LESS
5228: PUSH
5229: LD_EXP 23
5233: PPUSH
5234: LD_INT 3
5236: PUSH
5237: LD_INT 24
5239: PUSH
5240: LD_INT 990
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PPUSH
5251: CALL_OW 72
5255: OR
5256: IFFALSE 5486
5258: GO 5260
5260: DISABLE
5261: LD_INT 0
5263: PPUSH
5264: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5265: LD_ADDR_VAR 0 2
5269: PUSH
5270: LD_INT 300
5272: PUSH
5273: LD_INT 250
5275: PUSH
5276: LD_INT 200
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_OWVAR 67
5288: ARRAY
5289: ST_TO_ADDR
// for i in russian_meta_guards do
5290: LD_ADDR_VAR 0 1
5294: PUSH
5295: LD_EXP 23
5299: PUSH
5300: FOR_IN
5301: IFFALSE 5341
// if IsOk ( i ) then
5303: LD_VAR 0 1
5307: PPUSH
5308: CALL_OW 302
5312: IFFALSE 5339
// SetLives ( i , GetLives ( i ) - hp ) ;
5314: LD_VAR 0 1
5318: PPUSH
5319: LD_VAR 0 1
5323: PPUSH
5324: CALL_OW 256
5328: PUSH
5329: LD_VAR 0 2
5333: MINUS
5334: PPUSH
5335: CALL_OW 234
5339: GO 5300
5341: POP
5342: POP
// DialogueOn ;
5343: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5347: LD_EXP 23
5351: PUSH
5352: LD_EXP 23
5356: ARRAY
5357: PPUSH
5358: LD_STRING D6-FRus1-1
5360: PPUSH
5361: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5365: LD_EXP 15
5369: PPUSH
5370: LD_STRING D6-JMM-1
5372: PPUSH
5373: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5377: LD_EXP 17
5381: PPUSH
5382: CALL_OW 302
5386: PUSH
5387: LD_EXP 7
5391: AND
5392: IFFALSE 5406
// Say ( Cyrus , D6-Cyrus-1 ) ;
5394: LD_EXP 17
5398: PPUSH
5399: LD_STRING D6-Cyrus-1
5401: PPUSH
5402: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5406: LD_EXP 16
5410: PPUSH
5411: CALL_OW 302
5415: PUSH
5416: LD_EXP 4
5420: AND
5421: IFFALSE 5435
// Say ( Bobby , D6-Bobby-1 ) ;
5423: LD_EXP 16
5427: PPUSH
5428: LD_STRING D6-Bobby-1
5430: PPUSH
5431: CALL_OW 88
// DialogueOff ;
5435: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5439: LD_INT 140
5441: PUSH
5442: LD_INT 105
5444: PUSH
5445: LD_INT 70
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_OWVAR 67
5457: ARRAY
5458: PPUSH
5459: CALL_OW 67
// meta_action := true ;
5463: LD_ADDR_EXP 10
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5471: LD_EXP 23
5475: PPUSH
5476: LD_INT 94
5478: PPUSH
5479: LD_INT 8
5481: PPUSH
5482: CALL_OW 114
// end ;
5486: PPOPN 2
5488: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5489: LD_EXP 15
5493: PPUSH
5494: LD_INT 93
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 297
5504: PUSH
5505: LD_INT 5
5507: LESS
5508: PUSH
5509: LD_INT 22
5511: PUSH
5512: LD_INT 1
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL_OW 69
5523: PUSH
5524: LD_INT 1
5526: GREATER
5527: AND
5528: IFFALSE 5545
5530: GO 5532
5532: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5533: LD_EXP 15
5537: PPUSH
5538: LD_STRING D6a-JMM-1
5540: PPUSH
5541: CALL_OW 88
5545: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5546: LD_VAR 0 1
5550: PUSH
5551: LD_EXP 15
5555: EQUAL
5556: IFFALSE 5565
// YouLost ( JMM ) ;
5558: LD_STRING JMM
5560: PPUSH
5561: CALL_OW 104
// end ;
5565: PPOPN 1
5567: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5568: LD_VAR 0 1
5572: PUSH
5573: LD_EXP 15
5577: EQUAL
5578: IFFALSE 5587
// YouLost ( JMM ) ;
5580: LD_STRING JMM
5582: PPUSH
5583: CALL_OW 104
// end ;
5587: PPOPN 1
5589: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5590: LD_EXP 16
5594: PPUSH
5595: LD_INT 10
5597: PPUSH
5598: CALL_OW 308
5602: IFFALSE 5651
5604: GO 5606
5606: DISABLE
// begin bobby_saved := true ;
5607: LD_ADDR_EXP 12
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5615: LD_EXP 16
5619: PPUSH
5620: CALL_OW 256
5624: PPUSH
5625: LD_STRING 01_BobbyLifePoints_1
5627: PPUSH
5628: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5632: LD_EXP 16
5636: PPUSH
5637: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5641: LD_STRING Bobby
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: CALL_OW 101
// end ;
5651: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5652: LD_EXP 17
5656: PPUSH
5657: LD_INT 10
5659: PPUSH
5660: CALL_OW 308
5664: IFFALSE 5713
5666: GO 5668
5668: DISABLE
// begin cyrus_saved := true ;
5669: LD_ADDR_EXP 13
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5677: LD_EXP 17
5681: PPUSH
5682: CALL_OW 256
5686: PPUSH
5687: LD_STRING 01_CyrusLifePoints_1
5689: PPUSH
5690: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5694: LD_EXP 17
5698: PPUSH
5699: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5703: LD_STRING Cyrus
5705: PPUSH
5706: LD_INT 1
5708: PPUSH
5709: CALL_OW 101
// end ;
5713: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5714: LD_EXP 15
5718: PPUSH
5719: LD_INT 10
5721: PPUSH
5722: CALL_OW 308
5726: IFFALSE 6235
5728: GO 5730
5730: DISABLE
5731: LD_INT 0
5733: PPUSH
5734: PPUSH
5735: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5736: LD_EXP 13
5740: NOT
5741: PUSH
5742: LD_EXP 7
5746: AND
5747: PUSH
5748: LD_EXP 17
5752: PPUSH
5753: CALL_OW 302
5757: AND
5758: PUSH
5759: LD_EXP 12
5763: NOT
5764: PUSH
5765: LD_EXP 4
5769: AND
5770: PUSH
5771: LD_EXP 16
5775: PPUSH
5776: CALL_OW 302
5780: AND
5781: OR
5782: IFFALSE 5823
// case Query ( Q2 ) of 1 :
5784: LD_STRING Q2
5786: PPUSH
5787: CALL_OW 97
5791: PUSH
5792: LD_INT 1
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5811
5800: POP
// wait_for_them := true ; 2 :
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: LD_INT 1
5808: ST_TO_ADDR
5809: GO 5823
5811: LD_INT 2
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5819
5817: GO 5822
5819: POP
// ; end ;
5820: GO 5823
5822: POP
// if wait_for_them then
5823: LD_VAR 0 3
5827: IFFALSE 5940
// repeat wait ( 0 0$01 ) ;
5829: LD_INT 35
5831: PPUSH
5832: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5836: LD_EXP 13
5840: PUSH
5841: LD_EXP 12
5845: AND
5846: PUSH
5847: LD_EXP 13
5851: PUSH
5852: LD_EXP 4
5856: NOT
5857: PUSH
5858: LD_EXP 16
5862: PPUSH
5863: CALL_OW 303
5867: OR
5868: PUSH
5869: LD_EXP 16
5873: PPUSH
5874: CALL_OW 301
5878: OR
5879: AND
5880: OR
5881: PUSH
5882: LD_EXP 12
5886: PUSH
5887: LD_EXP 7
5891: NOT
5892: PUSH
5893: LD_EXP 17
5897: PPUSH
5898: CALL_OW 303
5902: OR
5903: PUSH
5904: LD_EXP 17
5908: PPUSH
5909: CALL_OW 301
5913: OR
5914: AND
5915: OR
5916: PUSH
5917: LD_EXP 16
5921: PPUSH
5922: CALL_OW 301
5926: PUSH
5927: LD_EXP 17
5931: PPUSH
5932: CALL_OW 301
5936: AND
5937: OR
5938: IFFALSE 5829
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 256
5949: PPUSH
5950: LD_STRING 01_JMMLifePoints_1
5952: PPUSH
5953: CALL_OW 39
// RemoveUnit ( JMM ) ;
5957: LD_EXP 15
5961: PPUSH
5962: CALL_OW 64
// to_reward := [ JMM ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: LD_EXP 15
5975: PUSH
5976: EMPTY
5977: LIST
5978: ST_TO_ADDR
// if bobby_saved then
5979: LD_EXP 12
5983: IFFALSE 6001
// to_reward := to_reward ^ Bobby ;
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: LD_VAR 0 2
5994: PUSH
5995: LD_EXP 16
5999: ADD
6000: ST_TO_ADDR
// if cyrus_saved then
6001: LD_EXP 13
6005: IFFALSE 6023
// to_reward := to_reward ^ Cyrus ;
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 2
6016: PUSH
6017: LD_EXP 17
6021: ADD
6022: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6023: LD_STRING JMM
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 101
// if not bobby_in_squad then
6033: LD_EXP 4
6037: NOT
6038: IFFALSE 6051
// AddMedal ( Bobby , - 1 ) ;
6040: LD_STRING Bobby
6042: PPUSH
6043: LD_INT 1
6045: NEG
6046: PPUSH
6047: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6051: LD_EXP 12
6055: NOT
6056: PUSH
6057: LD_EXP 16
6061: PPUSH
6062: CALL_OW 303
6066: PUSH
6067: LD_EXP 16
6071: PPUSH
6072: CALL_OW 301
6076: OR
6077: AND
6078: IFFALSE 6091
// AddMedal ( Bobby , - 2 ) ;
6080: LD_STRING Bobby
6082: PPUSH
6083: LD_INT 2
6085: NEG
6086: PPUSH
6087: CALL_OW 101
// if not cyrus_in_squad then
6091: LD_EXP 7
6095: NOT
6096: IFFALSE 6109
// AddMedal ( Cyrus , - 1 ) ;
6098: LD_STRING Cyrus
6100: PPUSH
6101: LD_INT 1
6103: NEG
6104: PPUSH
6105: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6109: LD_EXP 13
6113: NOT
6114: PUSH
6115: LD_EXP 17
6119: PPUSH
6120: CALL_OW 303
6124: PUSH
6125: LD_EXP 17
6129: PPUSH
6130: CALL_OW 301
6134: OR
6135: AND
6136: IFFALSE 6149
// AddMedal ( Cyrus , - 2 ) ;
6138: LD_STRING Cyrus
6140: PPUSH
6141: LD_INT 2
6143: NEG
6144: PPUSH
6145: CALL_OW 101
// GiveMedals ( MAIN ) ;
6149: LD_STRING MAIN
6151: PPUSH
6152: CALL_OW 102
// RewardPeople ( to_reward ) ;
6156: LD_VAR 0 2
6160: PPUSH
6161: CALL_OW 43
// if bobby_saved then
6165: LD_EXP 12
6169: IFFALSE 6189
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6171: LD_EXP 16
6175: PPUSH
6176: LD_EXP 2
6180: PUSH
6181: LD_STRING Bobby
6183: STR
6184: PPUSH
6185: CALL_OW 38
// if cyrus_saved then
6189: LD_EXP 13
6193: IFFALSE 6213
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 2
6204: PUSH
6205: LD_STRING Cyrus
6207: STR
6208: PPUSH
6209: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6213: LD_EXP 15
6217: PPUSH
6218: LD_EXP 2
6222: PUSH
6223: LD_STRING JMM
6225: STR
6226: PPUSH
6227: CALL_OW 38
// YouWin ;
6231: CALL_OW 103
// end ;
6235: PPOPN 3
6237: END
