// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 27358 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 27358 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 27358 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 27358 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 65060 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68979 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68979 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68979 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68979 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68979 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68979 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 27358 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68979 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6016
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6009: LD_STRING enableBioCharacter(BIO_BOBBY)
6011: PPUSH
6012: CALL_OW 559
// end ;
6016: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6017: LD_EXP 18
6021: PPUSH
6022: LD_INT 10
6024: PPUSH
6025: CALL_OW 308
6029: PUSH
6030: LD_EXP 18
6034: PPUSH
6035: LD_INT 12
6037: PPUSH
6038: CALL_OW 308
6042: OR
6043: IFFALSE 6099
6045: GO 6047
6047: DISABLE
// begin cyrus_saved := true ;
6048: LD_ADDR_EXP 13
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6056: LD_EXP 18
6060: PPUSH
6061: CALL_OW 256
6065: PPUSH
6066: LD_STRING 01_CyrusLifePoints_1
6068: PPUSH
6069: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6082: LD_STRING Cyrus
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6092: LD_STRING enableBioCharacter(BIO_CYRUS)
6094: PPUSH
6095: CALL_OW 559
// end ;
6099: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6100: LD_EXP 16
6104: PPUSH
6105: LD_INT 10
6107: PPUSH
6108: CALL_OW 308
6112: PUSH
6113: LD_EXP 16
6117: PPUSH
6118: LD_INT 12
6120: PPUSH
6121: CALL_OW 308
6125: OR
6126: IFFALSE 6755
6128: GO 6130
6130: DISABLE
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// begin if macmilan_use_radio then
6139: LD_EXP 6
6143: IFFALSE 6152
// SetAchievement ( ACH_RADIO ) ;
6145: LD_STRING ACH_RADIO
6147: PPUSH
6148: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6152: LD_EXP 13
6156: NOT
6157: PUSH
6158: LD_EXP 7
6162: AND
6163: PUSH
6164: LD_EXP 18
6168: PPUSH
6169: CALL_OW 302
6173: AND
6174: PUSH
6175: LD_EXP 12
6179: NOT
6180: PUSH
6181: LD_EXP 4
6185: AND
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: AND
6197: OR
6198: IFFALSE 6239
// case Query ( Q2 ) of 1 :
6200: LD_STRING Q2
6202: PPUSH
6203: CALL_OW 97
6207: PUSH
6208: LD_INT 1
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// wait_for_them := true ; 2 :
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
6225: GO 6239
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6238
6235: POP
// ; end ;
6236: GO 6239
6238: POP
// if wait_for_them then
6239: LD_VAR 0 3
6243: IFFALSE 6356
// repeat wait ( 0 0$01 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6252: LD_EXP 13
6256: PUSH
6257: LD_EXP 12
6261: AND
6262: PUSH
6263: LD_EXP 13
6267: PUSH
6268: LD_EXP 4
6272: NOT
6273: PUSH
6274: LD_EXP 17
6278: PPUSH
6279: CALL_OW 303
6283: OR
6284: PUSH
6285: LD_EXP 17
6289: PPUSH
6290: CALL_OW 301
6294: OR
6295: AND
6296: OR
6297: PUSH
6298: LD_EXP 12
6302: PUSH
6303: LD_EXP 7
6307: NOT
6308: PUSH
6309: LD_EXP 18
6313: PPUSH
6314: CALL_OW 303
6318: OR
6319: PUSH
6320: LD_EXP 18
6324: PPUSH
6325: CALL_OW 301
6329: OR
6330: AND
6331: OR
6332: PUSH
6333: LD_EXP 17
6337: PPUSH
6338: CALL_OW 301
6342: PUSH
6343: LD_EXP 18
6347: PPUSH
6348: CALL_OW 301
6352: AND
6353: OR
6354: IFFALSE 6245
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6356: LD_EXP 16
6360: PPUSH
6361: CALL_OW 256
6365: PPUSH
6366: LD_STRING 01_JMMLifePoints_1
6368: PPUSH
6369: CALL_OW 39
// RemoveUnit ( JMM ) ;
6373: LD_EXP 16
6377: PPUSH
6378: CALL_OW 64
// to_reward := [ JMM ] ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_EXP 16
6391: PUSH
6392: EMPTY
6393: LIST
6394: ST_TO_ADDR
// if bobby_saved then
6395: LD_EXP 12
6399: IFFALSE 6417
// to_reward := to_reward ^ Bobby ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: LD_VAR 0 2
6410: PUSH
6411: LD_EXP 17
6415: ADD
6416: ST_TO_ADDR
// if cyrus_saved then
6417: LD_EXP 13
6421: IFFALSE 6439
// to_reward := to_reward ^ Cyrus ;
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: LD_VAR 0 2
6432: PUSH
6433: LD_EXP 18
6437: ADD
6438: ST_TO_ADDR
// m1 := true ;
6439: LD_ADDR_VAR 0 4
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// m2 := bobby_saved ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: LD_EXP 12
6456: ST_TO_ADDR
// m3 := cyrus_saved ;
6457: LD_ADDR_VAR 0 6
6461: PUSH
6462: LD_EXP 13
6466: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6467: LD_STRING JMM
6469: PPUSH
6470: LD_INT 1
6472: PPUSH
6473: CALL_OW 101
// if not bobby_in_squad then
6477: LD_EXP 4
6481: NOT
6482: IFFALSE 6495
// AddMedal ( Bobby , - 1 ) ;
6484: LD_STRING Bobby
6486: PPUSH
6487: LD_INT 1
6489: NEG
6490: PPUSH
6491: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6495: LD_EXP 12
6499: NOT
6500: PUSH
6501: LD_EXP 17
6505: PPUSH
6506: CALL_OW 303
6510: PUSH
6511: LD_EXP 17
6515: PPUSH
6516: CALL_OW 301
6520: OR
6521: AND
6522: IFFALSE 6535
// AddMedal ( Bobby , - 2 ) ;
6524: LD_STRING Bobby
6526: PPUSH
6527: LD_INT 2
6529: NEG
6530: PPUSH
6531: CALL_OW 101
// if not cyrus_in_squad then
6535: LD_EXP 7
6539: NOT
6540: IFFALSE 6553
// AddMedal ( Cyrus , - 1 ) ;
6542: LD_STRING Cyrus
6544: PPUSH
6545: LD_INT 1
6547: NEG
6548: PPUSH
6549: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6553: LD_EXP 13
6557: NOT
6558: PUSH
6559: LD_EXP 18
6563: PPUSH
6564: CALL_OW 303
6568: PUSH
6569: LD_EXP 18
6573: PPUSH
6574: CALL_OW 301
6578: OR
6579: AND
6580: IFFALSE 6593
// AddMedal ( Cyrus , - 2 ) ;
6582: LD_STRING Cyrus
6584: PPUSH
6585: LD_INT 2
6587: NEG
6588: PPUSH
6589: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6593: LD_OWVAR 67
6597: PUSH
6598: LD_INT 3
6600: GREATEREQUAL
6601: PUSH
6602: LD_VAR 0 4
6606: AND
6607: PUSH
6608: LD_VAR 0 5
6612: AND
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6631
// SetAchievementEX ( ACH_AMER , 1 ) ;
6621: LD_STRING ACH_AMER
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 564
// GiveMedals ( MAIN ) ;
6631: LD_STRING MAIN
6633: PPUSH
6634: CALL_OW 102
// RewardPeople ( to_reward ) ;
6638: LD_VAR 0 2
6642: PPUSH
6643: CALL_OW 43
// if bobby_saved then
6647: LD_EXP 12
6651: IFFALSE 6671
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6653: LD_EXP 17
6657: PPUSH
6658: LD_EXP 2
6662: PUSH
6663: LD_STRING Bobby
6665: STR
6666: PPUSH
6667: CALL_OW 38
// if cyrus_saved then
6671: LD_EXP 13
6675: IFFALSE 6695
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6677: LD_EXP 18
6681: PPUSH
6682: LD_EXP 2
6686: PUSH
6687: LD_STRING Cyrus
6689: STR
6690: PPUSH
6691: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6695: LD_EXP 16
6699: PPUSH
6700: LD_EXP 2
6704: PUSH
6705: LD_STRING JMM
6707: STR
6708: PPUSH
6709: CALL_OW 38
// if tick <= 3 3$00 then
6713: LD_OWVAR 1
6717: PUSH
6718: LD_INT 6300
6720: LESSEQUAL
6721: IFFALSE 6730
// SetAchievement ( ACH_ASPEED_1 ) ;
6723: LD_STRING ACH_ASPEED_1
6725: PPUSH
6726: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6730: LD_STRING enableBioCharacter(BIO_JMM)
6732: PPUSH
6733: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6737: LD_STRING enableBioCharacter(BIO_JOAN)
6739: PPUSH
6740: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6744: LD_STRING enableBioCharacter(BIO_BARN)
6746: PPUSH
6747: CALL_OW 559
// YouWin ;
6751: CALL_OW 103
// end ; end_of_file
6755: PPOPN 6
6757: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6758: LD_VAR 0 1
6762: PUSH
6763: LD_EXP 16
6767: EQUAL
6768: IFFALSE 6777
// YouLost ( JMM ) ;
6770: LD_STRING JMM
6772: PPUSH
6773: CALL_OW 104
// end ;
6777: PPOPN 1
6779: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: CALL 22750 0 2
// end ;
6794: PPOPN 2
6796: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL 22630 0 1
// if un = JMM then
6806: LD_VAR 0 1
6810: PUSH
6811: LD_EXP 16
6815: EQUAL
6816: IFFALSE 6825
// YouLost ( JMM ) ;
6818: LD_STRING JMM
6820: PPUSH
6821: CALL_OW 104
// end ; end_of_file end_of_file
6825: PPOPN 1
6827: END
// export globalGameSaveCounter ; every 0 0$1 do
6828: GO 6830
6830: DISABLE
// begin enable ;
6831: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6832: LD_STRING updateTimer(
6834: PUSH
6835: LD_OWVAR 1
6839: STR
6840: PUSH
6841: LD_STRING );
6843: STR
6844: PPUSH
6845: CALL_OW 559
// end ;
6849: END
// every 0 0$1 do
6850: GO 6852
6852: DISABLE
// begin globalGameSaveCounter := 0 ;
6853: LD_ADDR_EXP 28
6857: PUSH
6858: LD_INT 0
6860: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6861: LD_STRING setGameSaveCounter(0)
6863: PPUSH
6864: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6868: LD_STRING initStreamRollete();
6870: PPUSH
6871: CALL_OW 559
// InitStreamMode ;
6875: CALL 8201 0 0
// DefineStreamItems ( false ) ;
6879: LD_INT 0
6881: PPUSH
6882: CALL 8665 0 1
// end ;
6886: END
// export function SOS_MapStart ( ) ; begin
6887: LD_INT 0
6889: PPUSH
// if streamModeActive then
6890: LD_EXP 29
6894: IFFALSE 6903
// DefineStreamItems ( true ) ;
6896: LD_INT 1
6898: PPUSH
6899: CALL 8665 0 1
// UpdateLuaVariables ( ) ;
6903: CALL 6920 0 0
// UpdateFactoryWaypoints ( ) ;
6907: CALL 21534 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6911: CALL 21791 0 0
// end ;
6915: LD_VAR 0 1
6919: RET
// function UpdateLuaVariables ( ) ; begin
6920: LD_INT 0
6922: PPUSH
// if globalGameSaveCounter then
6923: LD_EXP 28
6927: IFFALSE 6961
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6929: LD_ADDR_EXP 28
6933: PUSH
6934: LD_EXP 28
6938: PPUSH
6939: CALL 66421 0 1
6943: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6944: LD_STRING setGameSaveCounter(
6946: PUSH
6947: LD_EXP 28
6951: STR
6952: PUSH
6953: LD_STRING )
6955: STR
6956: PPUSH
6957: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6961: LD_STRING setGameDifficulty(
6963: PUSH
6964: LD_OWVAR 67
6968: STR
6969: PUSH
6970: LD_STRING )
6972: STR
6973: PPUSH
6974: CALL_OW 559
// end ;
6978: LD_VAR 0 1
6982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6983: LD_INT 0
6985: PPUSH
// if p2 = stream_mode then
6986: LD_VAR 0 2
6990: PUSH
6991: LD_INT 100
6993: EQUAL
6994: IFFALSE 7997
// begin if not StreamModeActive then
6996: LD_EXP 29
7000: NOT
7001: IFFALSE 7011
// StreamModeActive := true ;
7003: LD_ADDR_EXP 29
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 0 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 0
7018: EQUAL
7019: IFFALSE 7025
// InitStreamMode ;
7021: CALL 8201 0 0
// if p3 = 1 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: IFFALSE 7043
// sRocket := true ;
7035: LD_ADDR_EXP 34
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7061
// sSpeed := true ;
7053: LD_ADDR_EXP 33
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 3 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 3
7068: EQUAL
7069: IFFALSE 7079
// sEngine := true ;
7071: LD_ADDR_EXP 35
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// if p3 = 4 then
7079: LD_VAR 0 3
7083: PUSH
7084: LD_INT 4
7086: EQUAL
7087: IFFALSE 7097
// sSpec := true ;
7089: LD_ADDR_EXP 32
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// if p3 = 5 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 5
7104: EQUAL
7105: IFFALSE 7115
// sLevel := true ;
7107: LD_ADDR_EXP 36
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 6 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 6
7122: EQUAL
7123: IFFALSE 7133
// sArmoury := true ;
7125: LD_ADDR_EXP 37
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 7 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 7
7140: EQUAL
7141: IFFALSE 7151
// sRadar := true ;
7143: LD_ADDR_EXP 38
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 8 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 8
7158: EQUAL
7159: IFFALSE 7169
// sBunker := true ;
7161: LD_ADDR_EXP 39
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 9 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 9
7176: EQUAL
7177: IFFALSE 7187
// sHack := true ;
7179: LD_ADDR_EXP 40
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 10 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 10
7194: EQUAL
7195: IFFALSE 7205
// sFire := true ;
7197: LD_ADDR_EXP 41
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 11 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 11
7212: EQUAL
7213: IFFALSE 7223
// sRefresh := true ;
7215: LD_ADDR_EXP 42
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 12 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 12
7230: EQUAL
7231: IFFALSE 7241
// sExp := true ;
7233: LD_ADDR_EXP 43
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 13 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 13
7248: EQUAL
7249: IFFALSE 7259
// sDepot := true ;
7251: LD_ADDR_EXP 44
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 14 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 14
7266: EQUAL
7267: IFFALSE 7277
// sFlag := true ;
7269: LD_ADDR_EXP 45
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 15 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 15
7284: EQUAL
7285: IFFALSE 7295
// sKamikadze := true ;
7287: LD_ADDR_EXP 53
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 16 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 16
7302: EQUAL
7303: IFFALSE 7313
// sTroll := true ;
7305: LD_ADDR_EXP 54
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 17 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 17
7320: EQUAL
7321: IFFALSE 7331
// sSlow := true ;
7323: LD_ADDR_EXP 55
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 18 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 18
7338: EQUAL
7339: IFFALSE 7349
// sLack := true ;
7341: LD_ADDR_EXP 56
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 19 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 19
7356: EQUAL
7357: IFFALSE 7367
// sTank := true ;
7359: LD_ADDR_EXP 58
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 20 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 20
7374: EQUAL
7375: IFFALSE 7385
// sRemote := true ;
7377: LD_ADDR_EXP 59
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 21 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 21
7392: EQUAL
7393: IFFALSE 7403
// sPowell := true ;
7395: LD_ADDR_EXP 60
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 22 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 22
7410: EQUAL
7411: IFFALSE 7421
// sTeleport := true ;
7413: LD_ADDR_EXP 63
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 23 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 23
7428: EQUAL
7429: IFFALSE 7439
// sOilTower := true ;
7431: LD_ADDR_EXP 65
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 24 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 24
7446: EQUAL
7447: IFFALSE 7457
// sShovel := true ;
7449: LD_ADDR_EXP 66
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 25 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 25
7464: EQUAL
7465: IFFALSE 7475
// sSheik := true ;
7467: LD_ADDR_EXP 67
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 26 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 26
7482: EQUAL
7483: IFFALSE 7493
// sEarthquake := true ;
7485: LD_ADDR_EXP 69
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 27 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 27
7500: EQUAL
7501: IFFALSE 7511
// sAI := true ;
7503: LD_ADDR_EXP 70
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 28 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 28
7518: EQUAL
7519: IFFALSE 7529
// sCargo := true ;
7521: LD_ADDR_EXP 73
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 29 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 29
7536: EQUAL
7537: IFFALSE 7547
// sDLaser := true ;
7539: LD_ADDR_EXP 74
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 30 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 30
7554: EQUAL
7555: IFFALSE 7565
// sExchange := true ;
7557: LD_ADDR_EXP 75
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 31 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 31
7572: EQUAL
7573: IFFALSE 7583
// sFac := true ;
7575: LD_ADDR_EXP 76
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 32 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 32
7590: EQUAL
7591: IFFALSE 7601
// sPower := true ;
7593: LD_ADDR_EXP 77
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 33 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 33
7608: EQUAL
7609: IFFALSE 7619
// sRandom := true ;
7611: LD_ADDR_EXP 78
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 34 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 34
7626: EQUAL
7627: IFFALSE 7637
// sShield := true ;
7629: LD_ADDR_EXP 79
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 35 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 35
7644: EQUAL
7645: IFFALSE 7655
// sTime := true ;
7647: LD_ADDR_EXP 80
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 36 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 36
7662: EQUAL
7663: IFFALSE 7673
// sTools := true ;
7665: LD_ADDR_EXP 81
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 101 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 101
7680: EQUAL
7681: IFFALSE 7691
// sSold := true ;
7683: LD_ADDR_EXP 46
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 102 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 102
7698: EQUAL
7699: IFFALSE 7709
// sDiff := true ;
7701: LD_ADDR_EXP 47
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 103 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 103
7716: EQUAL
7717: IFFALSE 7727
// sFog := true ;
7719: LD_ADDR_EXP 50
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 104 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 104
7734: EQUAL
7735: IFFALSE 7745
// sReset := true ;
7737: LD_ADDR_EXP 51
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 105 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 105
7752: EQUAL
7753: IFFALSE 7763
// sSun := true ;
7755: LD_ADDR_EXP 52
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 106 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 106
7770: EQUAL
7771: IFFALSE 7781
// sTiger := true ;
7773: LD_ADDR_EXP 48
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 107 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 107
7788: EQUAL
7789: IFFALSE 7799
// sBomb := true ;
7791: LD_ADDR_EXP 49
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 108 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 108
7806: EQUAL
7807: IFFALSE 7817
// sWound := true ;
7809: LD_ADDR_EXP 57
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 109 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 109
7824: EQUAL
7825: IFFALSE 7835
// sBetray := true ;
7827: LD_ADDR_EXP 61
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 110 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 110
7842: EQUAL
7843: IFFALSE 7853
// sContamin := true ;
7845: LD_ADDR_EXP 62
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 111 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 111
7860: EQUAL
7861: IFFALSE 7871
// sOil := true ;
7863: LD_ADDR_EXP 64
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 112 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 112
7878: EQUAL
7879: IFFALSE 7889
// sStu := true ;
7881: LD_ADDR_EXP 68
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 113 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 113
7896: EQUAL
7897: IFFALSE 7907
// sBazooka := true ;
7899: LD_ADDR_EXP 71
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 114 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 114
7914: EQUAL
7915: IFFALSE 7925
// sMortar := true ;
7917: LD_ADDR_EXP 72
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 115 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 115
7932: EQUAL
7933: IFFALSE 7943
// sRanger := true ;
7935: LD_ADDR_EXP 82
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 116 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 116
7950: EQUAL
7951: IFFALSE 7961
// sComputer := true ;
7953: LD_ADDR_EXP 83
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 117 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 117
7968: EQUAL
7969: IFFALSE 7979
// s30 := true ;
7971: LD_ADDR_EXP 84
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 118 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 118
7986: EQUAL
7987: IFFALSE 7997
// s60 := true ;
7989: LD_ADDR_EXP 85
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// end ; if p2 = hack_mode then
7997: LD_VAR 0 2
8001: PUSH
8002: LD_INT 101
8004: EQUAL
8005: IFFALSE 8133
// begin case p3 of 1 :
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 1
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8027
8020: POP
// hHackUnlimitedResources ; 2 :
8021: CALL 20280 0 0
8025: GO 8133
8027: LD_INT 2
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8042
8035: POP
// hHackSetLevel10 ; 3 :
8036: CALL 20413 0 0
8040: GO 8133
8042: LD_INT 3
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8057
8050: POP
// hHackSetLevel10YourUnits ; 4 :
8051: CALL 20498 0 0
8055: GO 8133
8057: LD_INT 4
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8072
8065: POP
// hHackInvincible ; 5 :
8066: CALL 20946 0 0
8070: GO 8133
8072: LD_INT 5
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8087
8080: POP
// hHackInvisible ; 6 :
8081: CALL 21057 0 0
8085: GO 8133
8087: LD_INT 6
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8102
8095: POP
// hHackChangeYourSide ; 7 :
8096: CALL 21114 0 0
8100: GO 8133
8102: LD_INT 7
8104: DOUBLE
8105: EQUAL
8106: IFTRUE 8110
8108: GO 8117
8110: POP
// hHackChangeUnitSide ; 8 :
8111: CALL 21156 0 0
8115: GO 8133
8117: LD_INT 8
8119: DOUBLE
8120: EQUAL
8121: IFTRUE 8125
8123: GO 8132
8125: POP
// hHackFog ; end ;
8126: CALL 21257 0 0
8130: GO 8133
8132: POP
// end ; if p2 = game_save_mode then
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 102
8140: EQUAL
8141: IFFALSE 8196
// begin if p3 = 1 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 1
8150: EQUAL
8151: IFFALSE 8163
// globalGameSaveCounter := p4 ;
8153: LD_ADDR_EXP 28
8157: PUSH
8158: LD_VAR 0 4
8162: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: PUSH
8172: LD_EXP 28
8176: AND
8177: IFFALSE 8196
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8179: LD_STRING setGameSaveCounter(
8181: PUSH
8182: LD_EXP 28
8186: STR
8187: PUSH
8188: LD_STRING )
8190: STR
8191: PPUSH
8192: CALL_OW 559
// end ; end ;
8196: LD_VAR 0 7
8200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8201: LD_INT 0
8203: PPUSH
// streamModeActive := false ;
8204: LD_ADDR_EXP 29
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// normalCounter := 36 ;
8212: LD_ADDR_EXP 30
8216: PUSH
8217: LD_INT 36
8219: ST_TO_ADDR
// hardcoreCounter := 18 ;
8220: LD_ADDR_EXP 31
8224: PUSH
8225: LD_INT 18
8227: ST_TO_ADDR
// sRocket := false ;
8228: LD_ADDR_EXP 34
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// sSpeed := false ;
8236: LD_ADDR_EXP 33
8240: PUSH
8241: LD_INT 0
8243: ST_TO_ADDR
// sEngine := false ;
8244: LD_ADDR_EXP 35
8248: PUSH
8249: LD_INT 0
8251: ST_TO_ADDR
// sSpec := false ;
8252: LD_ADDR_EXP 32
8256: PUSH
8257: LD_INT 0
8259: ST_TO_ADDR
// sLevel := false ;
8260: LD_ADDR_EXP 36
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// sArmoury := false ;
8268: LD_ADDR_EXP 37
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// sRadar := false ;
8276: LD_ADDR_EXP 38
8280: PUSH
8281: LD_INT 0
8283: ST_TO_ADDR
// sBunker := false ;
8284: LD_ADDR_EXP 39
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// sHack := false ;
8292: LD_ADDR_EXP 40
8296: PUSH
8297: LD_INT 0
8299: ST_TO_ADDR
// sFire := false ;
8300: LD_ADDR_EXP 41
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// sRefresh := false ;
8308: LD_ADDR_EXP 42
8312: PUSH
8313: LD_INT 0
8315: ST_TO_ADDR
// sExp := false ;
8316: LD_ADDR_EXP 43
8320: PUSH
8321: LD_INT 0
8323: ST_TO_ADDR
// sDepot := false ;
8324: LD_ADDR_EXP 44
8328: PUSH
8329: LD_INT 0
8331: ST_TO_ADDR
// sFlag := false ;
8332: LD_ADDR_EXP 45
8336: PUSH
8337: LD_INT 0
8339: ST_TO_ADDR
// sKamikadze := false ;
8340: LD_ADDR_EXP 53
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// sTroll := false ;
8348: LD_ADDR_EXP 54
8352: PUSH
8353: LD_INT 0
8355: ST_TO_ADDR
// sSlow := false ;
8356: LD_ADDR_EXP 55
8360: PUSH
8361: LD_INT 0
8363: ST_TO_ADDR
// sLack := false ;
8364: LD_ADDR_EXP 56
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// sTank := false ;
8372: LD_ADDR_EXP 58
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// sRemote := false ;
8380: LD_ADDR_EXP 59
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// sPowell := false ;
8388: LD_ADDR_EXP 60
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// sTeleport := false ;
8396: LD_ADDR_EXP 63
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// sOilTower := false ;
8404: LD_ADDR_EXP 65
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// sShovel := false ;
8412: LD_ADDR_EXP 66
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// sSheik := false ;
8420: LD_ADDR_EXP 67
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
// sEarthquake := false ;
8428: LD_ADDR_EXP 69
8432: PUSH
8433: LD_INT 0
8435: ST_TO_ADDR
// sAI := false ;
8436: LD_ADDR_EXP 70
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// sCargo := false ;
8444: LD_ADDR_EXP 73
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// sDLaser := false ;
8452: LD_ADDR_EXP 74
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// sExchange := false ;
8460: LD_ADDR_EXP 75
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sFac := false ;
8468: LD_ADDR_EXP 76
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sPower := false ;
8476: LD_ADDR_EXP 77
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sRandom := false ;
8484: LD_ADDR_EXP 78
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sShield := false ;
8492: LD_ADDR_EXP 79
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sTime := false ;
8500: LD_ADDR_EXP 80
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sTools := false ;
8508: LD_ADDR_EXP 81
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sSold := false ;
8516: LD_ADDR_EXP 46
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sDiff := false ;
8524: LD_ADDR_EXP 47
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sFog := false ;
8532: LD_ADDR_EXP 50
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sReset := false ;
8540: LD_ADDR_EXP 51
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sSun := false ;
8548: LD_ADDR_EXP 52
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sTiger := false ;
8556: LD_ADDR_EXP 48
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sBomb := false ;
8564: LD_ADDR_EXP 49
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sWound := false ;
8572: LD_ADDR_EXP 57
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sBetray := false ;
8580: LD_ADDR_EXP 61
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sContamin := false ;
8588: LD_ADDR_EXP 62
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sOil := false ;
8596: LD_ADDR_EXP 64
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sStu := false ;
8604: LD_ADDR_EXP 68
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sBazooka := false ;
8612: LD_ADDR_EXP 71
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sMortar := false ;
8620: LD_ADDR_EXP 72
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sRanger := false ;
8628: LD_ADDR_EXP 82
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sComputer := false ;
8636: LD_ADDR_EXP 83
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// s30 := false ;
8644: LD_ADDR_EXP 84
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// s60 := false ;
8652: LD_ADDR_EXP 85
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// end ;
8660: LD_VAR 0 1
8664: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8665: LD_INT 0
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// result := [ ] ;
8674: LD_ADDR_VAR 0 2
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// if campaign_id = 1 then
8681: LD_OWVAR 69
8685: PUSH
8686: LD_INT 1
8688: EQUAL
8689: IFFALSE 11855
// begin case mission_number of 1 :
8691: LD_OWVAR 70
8695: PUSH
8696: LD_INT 1
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8780
8704: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8705: LD_ADDR_VAR 0 2
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: LD_INT 11
8718: PUSH
8719: LD_INT 12
8721: PUSH
8722: LD_INT 15
8724: PUSH
8725: LD_INT 16
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 23
8733: PUSH
8734: LD_INT 26
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 106
8756: PUSH
8757: LD_INT 116
8759: PUSH
8760: LD_INT 117
8762: PUSH
8763: LD_INT 118
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: ST_TO_ADDR
8778: GO 11853
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8872
8788: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8789: LD_ADDR_VAR 0 2
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: LD_INT 4
8799: PUSH
8800: LD_INT 11
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: LD_INT 15
8808: PUSH
8809: LD_INT 16
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_INT 23
8817: PUSH
8818: LD_INT 26
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 101
8834: PUSH
8835: LD_INT 102
8837: PUSH
8838: LD_INT 105
8840: PUSH
8841: LD_INT 106
8843: PUSH
8844: LD_INT 108
8846: PUSH
8847: LD_INT 116
8849: PUSH
8850: LD_INT 117
8852: PUSH
8853: LD_INT 118
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: ST_TO_ADDR
8870: GO 11853
8872: LD_INT 3
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 8968
8880: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: LD_INT 4
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: LD_INT 11
8897: PUSH
8898: LD_INT 12
8900: PUSH
8901: LD_INT 15
8903: PUSH
8904: LD_INT 16
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 26
8912: PUSH
8913: LD_INT 36
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 101
8930: PUSH
8931: LD_INT 102
8933: PUSH
8934: LD_INT 105
8936: PUSH
8937: LD_INT 106
8939: PUSH
8940: LD_INT 108
8942: PUSH
8943: LD_INT 116
8945: PUSH
8946: LD_INT 117
8948: PUSH
8949: LD_INT 118
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 11853
8968: LD_INT 4
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9072
8976: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 4
8987: PUSH
8988: LD_INT 5
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 15
9002: PUSH
9003: LD_INT 16
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_INT 23
9011: PUSH
9012: LD_INT 26
9014: PUSH
9015: LD_INT 36
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 101
9034: PUSH
9035: LD_INT 102
9037: PUSH
9038: LD_INT 105
9040: PUSH
9041: LD_INT 106
9043: PUSH
9044: LD_INT 108
9046: PUSH
9047: LD_INT 116
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 118
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
9070: GO 11853
9072: LD_INT 5
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9192
9080: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: LD_INT 6
9097: PUSH
9098: LD_INT 8
9100: PUSH
9101: LD_INT 11
9103: PUSH
9104: LD_INT 12
9106: PUSH
9107: LD_INT 15
9109: PUSH
9110: LD_INT 16
9112: PUSH
9113: LD_INT 22
9115: PUSH
9116: LD_INT 23
9118: PUSH
9119: LD_INT 25
9121: PUSH
9122: LD_INT 26
9124: PUSH
9125: LD_INT 36
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 101
9146: PUSH
9147: LD_INT 102
9149: PUSH
9150: LD_INT 105
9152: PUSH
9153: LD_INT 106
9155: PUSH
9156: LD_INT 108
9158: PUSH
9159: LD_INT 109
9161: PUSH
9162: LD_INT 112
9164: PUSH
9165: LD_INT 116
9167: PUSH
9168: LD_INT 117
9170: PUSH
9171: LD_INT 118
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: ST_TO_ADDR
9190: GO 11853
9192: LD_INT 6
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9332
9200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9201: LD_ADDR_VAR 0 2
9205: PUSH
9206: LD_INT 2
9208: PUSH
9209: LD_INT 4
9211: PUSH
9212: LD_INT 5
9214: PUSH
9215: LD_INT 6
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 20
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 23
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 26
9250: PUSH
9251: LD_INT 30
9253: PUSH
9254: LD_INT 31
9256: PUSH
9257: LD_INT 32
9259: PUSH
9260: LD_INT 36
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 101
9286: PUSH
9287: LD_INT 102
9289: PUSH
9290: LD_INT 105
9292: PUSH
9293: LD_INT 106
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 112
9304: PUSH
9305: LD_INT 116
9307: PUSH
9308: LD_INT 117
9310: PUSH
9311: LD_INT 118
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 11853
9332: LD_INT 7
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9452
9340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 7
9357: PUSH
9358: LD_INT 11
9360: PUSH
9361: LD_INT 12
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 16
9369: PUSH
9370: LD_INT 20
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 22
9378: PUSH
9379: LD_INT 23
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 26
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 103
9412: PUSH
9413: LD_INT 105
9415: PUSH
9416: LD_INT 106
9418: PUSH
9419: LD_INT 108
9421: PUSH
9422: LD_INT 112
9424: PUSH
9425: LD_INT 116
9427: PUSH
9428: LD_INT 117
9430: PUSH
9431: LD_INT 118
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: ST_TO_ADDR
9450: GO 11853
9452: LD_INT 8
9454: DOUBLE
9455: EQUAL
9456: IFTRUE 9460
9458: GO 9600
9460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 6
9477: PUSH
9478: LD_INT 7
9480: PUSH
9481: LD_INT 8
9483: PUSH
9484: LD_INT 11
9486: PUSH
9487: LD_INT 12
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 20
9498: PUSH
9499: LD_INT 21
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_INT 23
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 30
9516: PUSH
9517: LD_INT 31
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 101
9550: PUSH
9551: LD_INT 102
9553: PUSH
9554: LD_INT 103
9556: PUSH
9557: LD_INT 105
9559: PUSH
9560: LD_INT 106
9562: PUSH
9563: LD_INT 108
9565: PUSH
9566: LD_INT 109
9568: PUSH
9569: LD_INT 112
9571: PUSH
9572: LD_INT 116
9574: PUSH
9575: LD_INT 117
9577: PUSH
9578: LD_INT 118
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: ST_TO_ADDR
9598: GO 11853
9600: LD_INT 9
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9756
9608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9609: LD_ADDR_VAR 0 2
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: LD_INT 4
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 6
9625: PUSH
9626: LD_INT 7
9628: PUSH
9629: LD_INT 8
9631: PUSH
9632: LD_INT 11
9634: PUSH
9635: LD_INT 12
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 26
9661: PUSH
9662: LD_INT 28
9664: PUSH
9665: LD_INT 30
9667: PUSH
9668: LD_INT 31
9670: PUSH
9671: LD_INT 32
9673: PUSH
9674: LD_INT 36
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 101
9702: PUSH
9703: LD_INT 102
9705: PUSH
9706: LD_INT 103
9708: PUSH
9709: LD_INT 105
9711: PUSH
9712: LD_INT 106
9714: PUSH
9715: LD_INT 108
9717: PUSH
9718: LD_INT 109
9720: PUSH
9721: LD_INT 112
9723: PUSH
9724: LD_INT 114
9726: PUSH
9727: LD_INT 116
9729: PUSH
9730: LD_INT 117
9732: PUSH
9733: LD_INT 118
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: ST_TO_ADDR
9754: GO 11853
9756: LD_INT 10
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9960
9764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: LD_INT 9
9790: PUSH
9791: LD_INT 10
9793: PUSH
9794: LD_INT 11
9796: PUSH
9797: LD_INT 12
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 15
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: LD_INT 17
9814: PUSH
9815: LD_INT 18
9817: PUSH
9818: LD_INT 19
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: LD_INT 31
9850: PUSH
9851: LD_INT 32
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 101
9890: PUSH
9891: LD_INT 102
9893: PUSH
9894: LD_INT 103
9896: PUSH
9897: LD_INT 104
9899: PUSH
9900: LD_INT 105
9902: PUSH
9903: LD_INT 106
9905: PUSH
9906: LD_INT 107
9908: PUSH
9909: LD_INT 108
9911: PUSH
9912: LD_INT 109
9914: PUSH
9915: LD_INT 110
9917: PUSH
9918: LD_INT 111
9920: PUSH
9921: LD_INT 112
9923: PUSH
9924: LD_INT 114
9926: PUSH
9927: LD_INT 116
9929: PUSH
9930: LD_INT 117
9932: PUSH
9933: LD_INT 118
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: ST_TO_ADDR
9958: GO 11853
9960: LD_INT 11
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10172
9968: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9969: LD_ADDR_VAR 0 2
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 4
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: LD_INT 6
9988: PUSH
9989: LD_INT 7
9991: PUSH
9992: LD_INT 8
9994: PUSH
9995: LD_INT 9
9997: PUSH
9998: LD_INT 10
10000: PUSH
10001: LD_INT 11
10003: PUSH
10004: LD_INT 12
10006: PUSH
10007: LD_INT 13
10009: PUSH
10010: LD_INT 14
10012: PUSH
10013: LD_INT 15
10015: PUSH
10016: LD_INT 16
10018: PUSH
10019: LD_INT 17
10021: PUSH
10022: LD_INT 18
10024: PUSH
10025: LD_INT 19
10027: PUSH
10028: LD_INT 20
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 23
10039: PUSH
10040: LD_INT 24
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 26
10048: PUSH
10049: LD_INT 28
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 31
10057: PUSH
10058: LD_INT 32
10060: PUSH
10061: LD_INT 34
10063: PUSH
10064: LD_INT 36
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 101
10102: PUSH
10103: LD_INT 102
10105: PUSH
10106: LD_INT 103
10108: PUSH
10109: LD_INT 104
10111: PUSH
10112: LD_INT 105
10114: PUSH
10115: LD_INT 106
10117: PUSH
10118: LD_INT 107
10120: PUSH
10121: LD_INT 108
10123: PUSH
10124: LD_INT 109
10126: PUSH
10127: LD_INT 110
10129: PUSH
10130: LD_INT 111
10132: PUSH
10133: LD_INT 112
10135: PUSH
10136: LD_INT 114
10138: PUSH
10139: LD_INT 116
10141: PUSH
10142: LD_INT 117
10144: PUSH
10145: LD_INT 118
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: ST_TO_ADDR
10170: GO 11853
10172: LD_INT 12
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10400
10180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 3
10194: PUSH
10195: LD_INT 4
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: LD_INT 6
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: LD_INT 8
10209: PUSH
10210: LD_INT 9
10212: PUSH
10213: LD_INT 10
10215: PUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: LD_INT 13
10224: PUSH
10225: LD_INT 14
10227: PUSH
10228: LD_INT 15
10230: PUSH
10231: LD_INT 16
10233: PUSH
10234: LD_INT 17
10236: PUSH
10237: LD_INT 18
10239: PUSH
10240: LD_INT 19
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 21
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 23
10254: PUSH
10255: LD_INT 24
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 26
10263: PUSH
10264: LD_INT 27
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 31
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 33
10281: PUSH
10282: LD_INT 34
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 101
10326: PUSH
10327: LD_INT 102
10329: PUSH
10330: LD_INT 103
10332: PUSH
10333: LD_INT 104
10335: PUSH
10336: LD_INT 105
10338: PUSH
10339: LD_INT 106
10341: PUSH
10342: LD_INT 107
10344: PUSH
10345: LD_INT 108
10347: PUSH
10348: LD_INT 109
10350: PUSH
10351: LD_INT 110
10353: PUSH
10354: LD_INT 111
10356: PUSH
10357: LD_INT 112
10359: PUSH
10360: LD_INT 113
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: ST_TO_ADDR
10398: GO 11853
10400: LD_INT 13
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10616
10408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: LD_INT 4
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 9
10434: PUSH
10435: LD_INT 10
10437: PUSH
10438: LD_INT 11
10440: PUSH
10441: LD_INT 12
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: LD_INT 15
10449: PUSH
10450: LD_INT 16
10452: PUSH
10453: LD_INT 17
10455: PUSH
10456: LD_INT 18
10458: PUSH
10459: LD_INT 19
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 23
10473: PUSH
10474: LD_INT 24
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 26
10482: PUSH
10483: LD_INT 27
10485: PUSH
10486: LD_INT 28
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: LD_INT 32
10497: PUSH
10498: LD_INT 33
10500: PUSH
10501: LD_INT 34
10503: PUSH
10504: LD_INT 36
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 102
10545: PUSH
10546: LD_INT 103
10548: PUSH
10549: LD_INT 104
10551: PUSH
10552: LD_INT 105
10554: PUSH
10555: LD_INT 106
10557: PUSH
10558: LD_INT 107
10560: PUSH
10561: LD_INT 108
10563: PUSH
10564: LD_INT 109
10566: PUSH
10567: LD_INT 110
10569: PUSH
10570: LD_INT 111
10572: PUSH
10573: LD_INT 112
10575: PUSH
10576: LD_INT 113
10578: PUSH
10579: LD_INT 114
10581: PUSH
10582: LD_INT 116
10584: PUSH
10585: LD_INT 117
10587: PUSH
10588: LD_INT 118
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 11853
10616: LD_INT 14
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10848
10624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_INT 1
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: LD_INT 3
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 6
10647: PUSH
10648: LD_INT 7
10650: PUSH
10651: LD_INT 8
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: LD_INT 11
10662: PUSH
10663: LD_INT 12
10665: PUSH
10666: LD_INT 13
10668: PUSH
10669: LD_INT 14
10671: PUSH
10672: LD_INT 15
10674: PUSH
10675: LD_INT 16
10677: PUSH
10678: LD_INT 17
10680: PUSH
10681: LD_INT 18
10683: PUSH
10684: LD_INT 19
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 24
10701: PUSH
10702: LD_INT 25
10704: PUSH
10705: LD_INT 26
10707: PUSH
10708: LD_INT 27
10710: PUSH
10711: LD_INT 28
10713: PUSH
10714: LD_INT 29
10716: PUSH
10717: LD_INT 30
10719: PUSH
10720: LD_INT 31
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 33
10728: PUSH
10729: LD_INT 34
10731: PUSH
10732: LD_INT 36
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 101
10774: PUSH
10775: LD_INT 102
10777: PUSH
10778: LD_INT 103
10780: PUSH
10781: LD_INT 104
10783: PUSH
10784: LD_INT 105
10786: PUSH
10787: LD_INT 106
10789: PUSH
10790: LD_INT 107
10792: PUSH
10793: LD_INT 108
10795: PUSH
10796: LD_INT 109
10798: PUSH
10799: LD_INT 110
10801: PUSH
10802: LD_INT 111
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 113
10810: PUSH
10811: LD_INT 114
10813: PUSH
10814: LD_INT 116
10816: PUSH
10817: LD_INT 117
10819: PUSH
10820: LD_INT 118
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 11853
10848: LD_INT 15
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11080
10856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: LD_INT 6
10879: PUSH
10880: LD_INT 7
10882: PUSH
10883: LD_INT 8
10885: PUSH
10886: LD_INT 9
10888: PUSH
10889: LD_INT 10
10891: PUSH
10892: LD_INT 11
10894: PUSH
10895: LD_INT 12
10897: PUSH
10898: LD_INT 13
10900: PUSH
10901: LD_INT 14
10903: PUSH
10904: LD_INT 15
10906: PUSH
10907: LD_INT 16
10909: PUSH
10910: LD_INT 17
10912: PUSH
10913: LD_INT 18
10915: PUSH
10916: LD_INT 19
10918: PUSH
10919: LD_INT 20
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 23
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 25
10936: PUSH
10937: LD_INT 26
10939: PUSH
10940: LD_INT 27
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: LD_INT 29
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 33
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 36
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 101
11006: PUSH
11007: LD_INT 102
11009: PUSH
11010: LD_INT 103
11012: PUSH
11013: LD_INT 104
11015: PUSH
11016: LD_INT 105
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 107
11024: PUSH
11025: LD_INT 108
11027: PUSH
11028: LD_INT 109
11030: PUSH
11031: LD_INT 110
11033: PUSH
11034: LD_INT 111
11036: PUSH
11037: LD_INT 112
11039: PUSH
11040: LD_INT 113
11042: PUSH
11043: LD_INT 114
11045: PUSH
11046: LD_INT 116
11048: PUSH
11049: LD_INT 117
11051: PUSH
11052: LD_INT 118
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: ST_TO_ADDR
11078: GO 11853
11080: LD_INT 16
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11224
11088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 4
11099: PUSH
11100: LD_INT 5
11102: PUSH
11103: LD_INT 7
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 15
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 22
11126: PUSH
11127: LD_INT 23
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 26
11135: PUSH
11136: LD_INT 30
11138: PUSH
11139: LD_INT 31
11141: PUSH
11142: LD_INT 32
11144: PUSH
11145: LD_INT 33
11147: PUSH
11148: LD_INT 34
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 101
11174: PUSH
11175: LD_INT 102
11177: PUSH
11178: LD_INT 103
11180: PUSH
11181: LD_INT 106
11183: PUSH
11184: LD_INT 108
11186: PUSH
11187: LD_INT 112
11189: PUSH
11190: LD_INT 113
11192: PUSH
11193: LD_INT 114
11195: PUSH
11196: LD_INT 116
11198: PUSH
11199: LD_INT 117
11201: PUSH
11202: LD_INT 118
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: ST_TO_ADDR
11222: GO 11853
11224: LD_INT 17
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11456
11232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_INT 5
11252: PUSH
11253: LD_INT 6
11255: PUSH
11256: LD_INT 7
11258: PUSH
11259: LD_INT 8
11261: PUSH
11262: LD_INT 9
11264: PUSH
11265: LD_INT 10
11267: PUSH
11268: LD_INT 11
11270: PUSH
11271: LD_INT 12
11273: PUSH
11274: LD_INT 13
11276: PUSH
11277: LD_INT 14
11279: PUSH
11280: LD_INT 15
11282: PUSH
11283: LD_INT 16
11285: PUSH
11286: LD_INT 17
11288: PUSH
11289: LD_INT 18
11291: PUSH
11292: LD_INT 19
11294: PUSH
11295: LD_INT 20
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 22
11303: PUSH
11304: LD_INT 23
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 26
11315: PUSH
11316: LD_INT 27
11318: PUSH
11319: LD_INT 28
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 31
11330: PUSH
11331: LD_INT 32
11333: PUSH
11334: LD_INT 33
11336: PUSH
11337: LD_INT 34
11339: PUSH
11340: LD_INT 36
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 101
11382: PUSH
11383: LD_INT 102
11385: PUSH
11386: LD_INT 103
11388: PUSH
11389: LD_INT 104
11391: PUSH
11392: LD_INT 105
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 107
11400: PUSH
11401: LD_INT 108
11403: PUSH
11404: LD_INT 109
11406: PUSH
11407: LD_INT 110
11409: PUSH
11410: LD_INT 111
11412: PUSH
11413: LD_INT 112
11415: PUSH
11416: LD_INT 113
11418: PUSH
11419: LD_INT 114
11421: PUSH
11422: LD_INT 116
11424: PUSH
11425: LD_INT 117
11427: PUSH
11428: LD_INT 118
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 11853
11456: LD_INT 18
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11612
11464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 7
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 20
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 23
11505: PUSH
11506: LD_INT 25
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 31
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 34
11526: PUSH
11527: LD_INT 35
11529: PUSH
11530: LD_INT 36
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 103
11564: PUSH
11565: LD_INT 106
11567: PUSH
11568: LD_INT 108
11570: PUSH
11571: LD_INT 112
11573: PUSH
11574: LD_INT 113
11576: PUSH
11577: LD_INT 114
11579: PUSH
11580: LD_INT 115
11582: PUSH
11583: LD_INT 116
11585: PUSH
11586: LD_INT 117
11588: PUSH
11589: LD_INT 118
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: ST_TO_ADDR
11610: GO 11853
11612: LD_INT 19
11614: DOUBLE
11615: EQUAL
11616: IFTRUE 11620
11618: GO 11852
11620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 1
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: LD_INT 4
11637: PUSH
11638: LD_INT 5
11640: PUSH
11641: LD_INT 6
11643: PUSH
11644: LD_INT 7
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: LD_INT 9
11652: PUSH
11653: LD_INT 10
11655: PUSH
11656: LD_INT 11
11658: PUSH
11659: LD_INT 12
11661: PUSH
11662: LD_INT 13
11664: PUSH
11665: LD_INT 14
11667: PUSH
11668: LD_INT 15
11670: PUSH
11671: LD_INT 16
11673: PUSH
11674: LD_INT 17
11676: PUSH
11677: LD_INT 18
11679: PUSH
11680: LD_INT 19
11682: PUSH
11683: LD_INT 20
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_INT 23
11694: PUSH
11695: LD_INT 24
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 26
11703: PUSH
11704: LD_INT 27
11706: PUSH
11707: LD_INT 28
11709: PUSH
11710: LD_INT 29
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 31
11718: PUSH
11719: LD_INT 32
11721: PUSH
11722: LD_INT 33
11724: PUSH
11725: LD_INT 34
11727: PUSH
11728: LD_INT 35
11730: PUSH
11731: LD_INT 36
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 101
11774: PUSH
11775: LD_INT 102
11777: PUSH
11778: LD_INT 103
11780: PUSH
11781: LD_INT 104
11783: PUSH
11784: LD_INT 105
11786: PUSH
11787: LD_INT 106
11789: PUSH
11790: LD_INT 107
11792: PUSH
11793: LD_INT 108
11795: PUSH
11796: LD_INT 109
11798: PUSH
11799: LD_INT 110
11801: PUSH
11802: LD_INT 111
11804: PUSH
11805: LD_INT 112
11807: PUSH
11808: LD_INT 113
11810: PUSH
11811: LD_INT 114
11813: PUSH
11814: LD_INT 115
11816: PUSH
11817: LD_INT 116
11819: PUSH
11820: LD_INT 117
11822: PUSH
11823: LD_INT 118
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: ST_TO_ADDR
11850: GO 11853
11852: POP
// end else
11853: GO 12084
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11855: LD_ADDR_VAR 0 2
11859: PUSH
11860: LD_INT 1
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: LD_INT 6
11877: PUSH
11878: LD_INT 7
11880: PUSH
11881: LD_INT 8
11883: PUSH
11884: LD_INT 9
11886: PUSH
11887: LD_INT 10
11889: PUSH
11890: LD_INT 11
11892: PUSH
11893: LD_INT 12
11895: PUSH
11896: LD_INT 13
11898: PUSH
11899: LD_INT 14
11901: PUSH
11902: LD_INT 15
11904: PUSH
11905: LD_INT 16
11907: PUSH
11908: LD_INT 17
11910: PUSH
11911: LD_INT 18
11913: PUSH
11914: LD_INT 19
11916: PUSH
11917: LD_INT 20
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 22
11925: PUSH
11926: LD_INT 23
11928: PUSH
11929: LD_INT 24
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 26
11937: PUSH
11938: LD_INT 27
11940: PUSH
11941: LD_INT 28
11943: PUSH
11944: LD_INT 29
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 31
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: LD_INT 33
11958: PUSH
11959: LD_INT 34
11961: PUSH
11962: LD_INT 35
11964: PUSH
11965: LD_INT 36
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 104
12017: PUSH
12018: LD_INT 105
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 107
12026: PUSH
12027: LD_INT 108
12029: PUSH
12030: LD_INT 109
12032: PUSH
12033: LD_INT 110
12035: PUSH
12036: LD_INT 111
12038: PUSH
12039: LD_INT 112
12041: PUSH
12042: LD_INT 113
12044: PUSH
12045: LD_INT 114
12047: PUSH
12048: LD_INT 115
12050: PUSH
12051: LD_INT 116
12053: PUSH
12054: LD_INT 117
12056: PUSH
12057: LD_INT 118
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: ST_TO_ADDR
// if result then
12084: LD_VAR 0 2
12088: IFFALSE 12874
// begin normal :=  ;
12090: LD_ADDR_VAR 0 5
12094: PUSH
12095: LD_STRING 
12097: ST_TO_ADDR
// hardcore :=  ;
12098: LD_ADDR_VAR 0 6
12102: PUSH
12103: LD_STRING 
12105: ST_TO_ADDR
// active :=  ;
12106: LD_ADDR_VAR 0 7
12110: PUSH
12111: LD_STRING 
12113: ST_TO_ADDR
// for i = 1 to normalCounter do
12114: LD_ADDR_VAR 0 8
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_EXP 30
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12231
// begin tmp := 0 ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING 0
12139: ST_TO_ADDR
// if result [ 1 ] then
12140: LD_VAR 0 2
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: IFFALSE 12213
// if result [ 1 ] [ 1 ] = i then
12150: LD_VAR 0 2
12154: PUSH
12155: LD_INT 1
12157: ARRAY
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PUSH
12163: LD_VAR 0 8
12167: EQUAL
12168: IFFALSE 12213
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: LD_VAR 0 2
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 3
12199: PPUSH
12200: CALL_OW 1
12204: ST_TO_ADDR
// tmp := 1 ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_STRING 1
12212: ST_TO_ADDR
// end ; normal := normal & tmp ;
12213: LD_ADDR_VAR 0 5
12217: PUSH
12218: LD_VAR 0 5
12222: PUSH
12223: LD_VAR 0 3
12227: STR
12228: ST_TO_ADDR
// end ;
12229: GO 12129
12231: POP
12232: POP
// for i = 1 to hardcoreCounter do
12233: LD_ADDR_VAR 0 8
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_EXP 31
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12354
// begin tmp := 0 ;
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: LD_STRING 0
12258: ST_TO_ADDR
// if result [ 2 ] then
12259: LD_VAR 0 2
12263: PUSH
12264: LD_INT 2
12266: ARRAY
12267: IFFALSE 12336
// if result [ 2 ] [ 1 ] = 100 + i then
12269: LD_VAR 0 2
12273: PUSH
12274: LD_INT 2
12276: ARRAY
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PUSH
12282: LD_INT 100
12284: PUSH
12285: LD_VAR 0 8
12289: PLUS
12290: EQUAL
12291: IFFALSE 12336
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 2
12313: ARRAY
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 3
12322: PPUSH
12323: CALL_OW 1
12327: ST_TO_ADDR
// tmp := 1 ;
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_STRING 1
12335: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12336: LD_ADDR_VAR 0 6
12340: PUSH
12341: LD_VAR 0 6
12345: PUSH
12346: LD_VAR 0 3
12350: STR
12351: ST_TO_ADDR
// end ;
12352: GO 12248
12354: POP
12355: POP
// if isGameLoad then
12356: LD_VAR 0 1
12360: IFFALSE 12835
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: LD_EXP 34
12371: PUSH
12372: LD_EXP 33
12376: PUSH
12377: LD_EXP 35
12381: PUSH
12382: LD_EXP 32
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_EXP 37
12396: PUSH
12397: LD_EXP 38
12401: PUSH
12402: LD_EXP 39
12406: PUSH
12407: LD_EXP 40
12411: PUSH
12412: LD_EXP 41
12416: PUSH
12417: LD_EXP 42
12421: PUSH
12422: LD_EXP 43
12426: PUSH
12427: LD_EXP 44
12431: PUSH
12432: LD_EXP 45
12436: PUSH
12437: LD_EXP 53
12441: PUSH
12442: LD_EXP 54
12446: PUSH
12447: LD_EXP 55
12451: PUSH
12452: LD_EXP 56
12456: PUSH
12457: LD_EXP 58
12461: PUSH
12462: LD_EXP 59
12466: PUSH
12467: LD_EXP 60
12471: PUSH
12472: LD_EXP 63
12476: PUSH
12477: LD_EXP 65
12481: PUSH
12482: LD_EXP 66
12486: PUSH
12487: LD_EXP 67
12491: PUSH
12492: LD_EXP 69
12496: PUSH
12497: LD_EXP 70
12501: PUSH
12502: LD_EXP 73
12506: PUSH
12507: LD_EXP 74
12511: PUSH
12512: LD_EXP 75
12516: PUSH
12517: LD_EXP 76
12521: PUSH
12522: LD_EXP 77
12526: PUSH
12527: LD_EXP 78
12531: PUSH
12532: LD_EXP 79
12536: PUSH
12537: LD_EXP 80
12541: PUSH
12542: LD_EXP 81
12546: PUSH
12547: LD_EXP 46
12551: PUSH
12552: LD_EXP 47
12556: PUSH
12557: LD_EXP 50
12561: PUSH
12562: LD_EXP 51
12566: PUSH
12567: LD_EXP 52
12571: PUSH
12572: LD_EXP 48
12576: PUSH
12577: LD_EXP 49
12581: PUSH
12582: LD_EXP 57
12586: PUSH
12587: LD_EXP 61
12591: PUSH
12592: LD_EXP 62
12596: PUSH
12597: LD_EXP 64
12601: PUSH
12602: LD_EXP 68
12606: PUSH
12607: LD_EXP 71
12611: PUSH
12612: LD_EXP 72
12616: PUSH
12617: LD_EXP 82
12621: PUSH
12622: LD_EXP 83
12626: PUSH
12627: LD_EXP 84
12631: PUSH
12632: LD_EXP 85
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: ST_TO_ADDR
// tmp :=  ;
12693: LD_ADDR_VAR 0 3
12697: PUSH
12698: LD_STRING 
12700: ST_TO_ADDR
// for i = 1 to normalCounter do
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: DOUBLE
12707: LD_INT 1
12709: DEC
12710: ST_TO_ADDR
12711: LD_EXP 30
12715: PUSH
12716: FOR_TO
12717: IFFALSE 12753
// begin if flags [ i ] then
12719: LD_VAR 0 4
12723: PUSH
12724: LD_VAR 0 8
12728: ARRAY
12729: IFFALSE 12751
// tmp := tmp & i & ; ;
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_VAR 0 3
12740: PUSH
12741: LD_VAR 0 8
12745: STR
12746: PUSH
12747: LD_STRING ;
12749: STR
12750: ST_TO_ADDR
// end ;
12751: GO 12716
12753: POP
12754: POP
// for i = 1 to hardcoreCounter do
12755: LD_ADDR_VAR 0 8
12759: PUSH
12760: DOUBLE
12761: LD_INT 1
12763: DEC
12764: ST_TO_ADDR
12765: LD_EXP 31
12769: PUSH
12770: FOR_TO
12771: IFFALSE 12817
// begin if flags [ normalCounter + i ] then
12773: LD_VAR 0 4
12777: PUSH
12778: LD_EXP 30
12782: PUSH
12783: LD_VAR 0 8
12787: PLUS
12788: ARRAY
12789: IFFALSE 12815
// tmp := tmp & ( 100 + i ) & ; ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_VAR 0 3
12800: PUSH
12801: LD_INT 100
12803: PUSH
12804: LD_VAR 0 8
12808: PLUS
12809: STR
12810: PUSH
12811: LD_STRING ;
12813: STR
12814: ST_TO_ADDR
// end ;
12815: GO 12770
12817: POP
12818: POP
// if tmp then
12819: LD_VAR 0 3
12823: IFFALSE 12835
// active := tmp ;
12825: LD_ADDR_VAR 0 7
12829: PUSH
12830: LD_VAR 0 3
12834: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12835: LD_STRING getStreamItemsFromMission("
12837: PUSH
12838: LD_VAR 0 5
12842: STR
12843: PUSH
12844: LD_STRING ","
12846: STR
12847: PUSH
12848: LD_VAR 0 6
12852: STR
12853: PUSH
12854: LD_STRING ","
12856: STR
12857: PUSH
12858: LD_VAR 0 7
12862: STR
12863: PUSH
12864: LD_STRING ")
12866: STR
12867: PPUSH
12868: CALL_OW 559
// end else
12872: GO 12881
// ToLua ( getStreamItemsFromMission("","","") ) ;
12874: LD_STRING getStreamItemsFromMission("","","")
12876: PPUSH
12877: CALL_OW 559
// end ;
12881: LD_VAR 0 2
12885: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12886: LD_EXP 29
12890: PUSH
12891: LD_EXP 34
12895: AND
12896: IFFALSE 13020
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
// begin enable ;
12905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12906: LD_ADDR_VAR 0 2
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_OWVAR 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 34
12928: PUSH
12929: LD_INT 7
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: LD_INT 45
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 34
12948: PUSH
12949: LD_INT 28
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 47
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// if not tmp then
12982: LD_VAR 0 2
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 13020
// for i in tmp do
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_VAR 0 2
13000: PUSH
13001: FOR_IN
13002: IFFALSE 13018
// begin SetLives ( i , 0 ) ;
13004: LD_VAR 0 1
13008: PPUSH
13009: LD_INT 0
13011: PPUSH
13012: CALL_OW 234
// end ;
13016: GO 13001
13018: POP
13019: POP
// end ;
13020: PPOPN 2
13022: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13023: LD_EXP 29
13027: PUSH
13028: LD_EXP 35
13032: AND
13033: IFFALSE 13117
13035: GO 13037
13037: DISABLE
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
// begin enable ;
13042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_OWVAR 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 32
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: ST_TO_ADDR
// if not tmp then
13079: LD_VAR 0 2
13083: NOT
13084: IFFALSE 13088
// exit ;
13086: GO 13117
// for i in tmp do
13088: LD_ADDR_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: PUSH
13098: FOR_IN
13099: IFFALSE 13115
// begin SetLives ( i , 0 ) ;
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_INT 0
13108: PPUSH
13109: CALL_OW 234
// end ;
13113: GO 13098
13115: POP
13116: POP
// end ;
13117: PPOPN 2
13119: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13120: LD_EXP 29
13124: PUSH
13125: LD_EXP 32
13129: AND
13130: IFFALSE 13223
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin enable ;
13138: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_OWVAR 2
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 9
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 8
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PPUSH
13199: CALL_OW 69
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13221
// begin SetClass ( i , 1 ) ;
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 336
// end ;
13219: GO 13204
13221: POP
13222: POP
// end ;
13223: PPOPN 1
13225: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13226: LD_EXP 29
13230: PUSH
13231: LD_EXP 33
13235: AND
13236: PUSH
13237: LD_OWVAR 65
13241: PUSH
13242: LD_INT 7
13244: LESS
13245: AND
13246: IFFALSE 13260
13248: GO 13250
13250: DISABLE
// begin enable ;
13251: ENABLE
// game_speed := 7 ;
13252: LD_ADDR_OWVAR 65
13256: PUSH
13257: LD_INT 7
13259: ST_TO_ADDR
// end ;
13260: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13261: LD_EXP 29
13265: PUSH
13266: LD_EXP 36
13270: AND
13271: IFFALSE 13473
13273: GO 13275
13275: DISABLE
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
13280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_INT 81
13288: PUSH
13289: LD_OWVAR 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 69
13316: ST_TO_ADDR
// if not tmp then
13317: LD_VAR 0 3
13321: NOT
13322: IFFALSE 13326
// exit ;
13324: GO 13473
// if tmp > 5 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 5
13333: GREATER
13334: IFFALSE 13346
// k := 5 else
13336: LD_ADDR_VAR 0 2
13340: PUSH
13341: LD_INT 5
13343: ST_TO_ADDR
13344: GO 13356
// k := tmp ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 3
13355: ST_TO_ADDR
// for i := 1 to k do
13356: LD_ADDR_VAR 0 1
13360: PUSH
13361: DOUBLE
13362: LD_INT 1
13364: DEC
13365: ST_TO_ADDR
13366: LD_VAR 0 2
13370: PUSH
13371: FOR_TO
13372: IFFALSE 13471
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13374: LD_VAR 0 3
13378: PUSH
13379: LD_VAR 0 1
13383: ARRAY
13384: PPUSH
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 4
13392: MOD
13393: PUSH
13394: LD_INT 1
13396: PLUS
13397: PPUSH
13398: CALL_OW 259
13402: PUSH
13403: LD_INT 10
13405: LESS
13406: IFFALSE 13469
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13408: LD_VAR 0 3
13412: PUSH
13413: LD_VAR 0 1
13417: ARRAY
13418: PPUSH
13419: LD_VAR 0 1
13423: PUSH
13424: LD_INT 4
13426: MOD
13427: PUSH
13428: LD_INT 1
13430: PLUS
13431: PPUSH
13432: LD_VAR 0 3
13436: PUSH
13437: LD_VAR 0 1
13441: ARRAY
13442: PPUSH
13443: LD_VAR 0 1
13447: PUSH
13448: LD_INT 4
13450: MOD
13451: PUSH
13452: LD_INT 1
13454: PLUS
13455: PPUSH
13456: CALL_OW 259
13460: PUSH
13461: LD_INT 1
13463: PLUS
13464: PPUSH
13465: CALL_OW 237
13469: GO 13371
13471: POP
13472: POP
// end ;
13473: PPOPN 3
13475: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13476: LD_EXP 29
13480: PUSH
13481: LD_EXP 37
13485: AND
13486: IFFALSE 13506
13488: GO 13490
13490: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13491: LD_INT 4
13493: PPUSH
13494: LD_OWVAR 2
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 324
13506: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13507: LD_EXP 29
13511: PUSH
13512: LD_EXP 66
13516: AND
13517: IFFALSE 13537
13519: GO 13521
13521: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13522: LD_INT 19
13524: PPUSH
13525: LD_OWVAR 2
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 324
13537: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13538: LD_EXP 29
13542: PUSH
13543: LD_EXP 38
13547: AND
13548: IFFALSE 13650
13550: GO 13552
13552: DISABLE
13553: LD_INT 0
13555: PPUSH
13556: PPUSH
// begin enable ;
13557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 34
13580: PUSH
13581: LD_INT 11
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// if not tmp then
13612: LD_VAR 0 2
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 13650
// for i in tmp do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 2
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// begin SetLives ( i , 0 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 0
13641: PPUSH
13642: CALL_OW 234
// end ;
13646: GO 13631
13648: POP
13649: POP
// end ;
13650: PPOPN 2
13652: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13653: LD_EXP 29
13657: PUSH
13658: LD_EXP 39
13662: AND
13663: IFFALSE 13683
13665: GO 13667
13667: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13668: LD_INT 32
13670: PPUSH
13671: LD_OWVAR 2
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 324
13683: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13684: LD_EXP 29
13688: PUSH
13689: LD_EXP 40
13693: AND
13694: IFFALSE 13875
13696: GO 13698
13698: DISABLE
13699: LD_INT 0
13701: PPUSH
13702: PPUSH
13703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: LD_INT 22
13711: PUSH
13712: LD_OWVAR 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 3
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if not tmp then
13740: LD_VAR 0 2
13744: NOT
13745: IFFALSE 13749
// exit ;
13747: GO 13875
// side := 0 ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// for i := 1 to 8 do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_INT 8
13769: PUSH
13770: FOR_TO
13771: IFFALSE 13819
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13773: LD_OWVAR 2
13777: PUSH
13778: LD_VAR 0 1
13782: NONEQUAL
13783: PUSH
13784: LD_OWVAR 2
13788: PPUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 81
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: AND
13803: IFFALSE 13817
// begin side := i ;
13805: LD_ADDR_VAR 0 3
13809: PUSH
13810: LD_VAR 0 1
13814: ST_TO_ADDR
// break ;
13815: GO 13819
// end ;
13817: GO 13770
13819: POP
13820: POP
// if not side then
13821: LD_VAR 0 3
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13875
// for i := 1 to tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 2
13844: PUSH
13845: FOR_TO
13846: IFFALSE 13873
// if Prob ( 60 ) then
13848: LD_INT 60
13850: PPUSH
13851: CALL_OW 13
13855: IFFALSE 13871
// SetSide ( i , side ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: CALL_OW 235
13871: GO 13845
13873: POP
13874: POP
// end ;
13875: PPOPN 3
13877: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13878: LD_EXP 29
13882: PUSH
13883: LD_EXP 42
13887: AND
13888: IFFALSE 14007
13890: GO 13892
13892: DISABLE
13893: LD_INT 0
13895: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13896: LD_ADDR_VAR 0 1
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_OWVAR 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: PUSH
13950: FOR_IN
13951: IFFALSE 14005
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 257
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: IN
13981: IFFALSE 14003
// SetClass ( un , rand ( 1 , 4 ) ) ;
13983: LD_VAR 0 1
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: LD_INT 4
13993: PPUSH
13994: CALL_OW 12
13998: PPUSH
13999: CALL_OW 336
14003: GO 13950
14005: POP
14006: POP
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14010: LD_EXP 29
14014: PUSH
14015: LD_EXP 41
14019: AND
14020: IFFALSE 14099
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_OWVAR 2
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 3
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: ST_TO_ADDR
// if not tmp then
14064: LD_VAR 0 1
14068: NOT
14069: IFFALSE 14073
// exit ;
14071: GO 14099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 1
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 12
14090: ARRAY
14091: PPUSH
14092: LD_INT 100
14094: PPUSH
14095: CALL_OW 234
// end ;
14099: PPOPN 1
14101: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14102: LD_EXP 29
14106: PUSH
14107: LD_EXP 43
14111: AND
14112: IFFALSE 14210
14114: GO 14116
14116: DISABLE
14117: LD_INT 0
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 1
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14210
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14165: LD_VAR 0 1
14169: PUSH
14170: LD_INT 1
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 12
14182: ARRAY
14183: PPUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_INT 4
14189: PPUSH
14190: CALL_OW 12
14194: PPUSH
14195: LD_INT 3000
14197: PPUSH
14198: LD_INT 9000
14200: PPUSH
14201: CALL_OW 12
14205: PPUSH
14206: CALL_OW 492
// end ;
14210: PPOPN 1
14212: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14213: LD_EXP 29
14217: PUSH
14218: LD_EXP 44
14222: AND
14223: IFFALSE 14243
14225: GO 14227
14227: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14228: LD_INT 1
14230: PPUSH
14231: LD_OWVAR 2
14235: PPUSH
14236: LD_INT 0
14238: PPUSH
14239: CALL_OW 324
14243: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14244: LD_EXP 29
14248: PUSH
14249: LD_EXP 45
14253: AND
14254: IFFALSE 14337
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_OWVAR 2
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// if not tmp then
14299: LD_VAR 0 2
14303: NOT
14304: IFFALSE 14308
// exit ;
14306: GO 14337
// for i in tmp do
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: FOR_IN
14319: IFFALSE 14335
// SetBLevel ( i , 10 ) ;
14321: LD_VAR 0 1
14325: PPUSH
14326: LD_INT 10
14328: PPUSH
14329: CALL_OW 241
14333: GO 14318
14335: POP
14336: POP
// end ;
14337: PPOPN 2
14339: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14340: LD_EXP 29
14344: PUSH
14345: LD_EXP 46
14349: AND
14350: IFFALSE 14461
14352: GO 14354
14354: DISABLE
14355: LD_INT 0
14357: PPUSH
14358: PPUSH
14359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_OWVAR 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 25
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: ST_TO_ADDR
// if not tmp then
14396: LD_VAR 0 3
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14461
// un := tmp [ rand ( 1 , tmp ) ] ;
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_VAR 0 3
14414: PUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_VAR 0 3
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: ST_TO_ADDR
// if Crawls ( un ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 318
14438: IFFALSE 14449
// ComWalk ( un ) ;
14440: LD_VAR 0 2
14444: PPUSH
14445: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14449: LD_VAR 0 2
14453: PPUSH
14454: LD_INT 5
14456: PPUSH
14457: CALL_OW 336
// end ;
14461: PPOPN 3
14463: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14464: LD_EXP 29
14468: PUSH
14469: LD_EXP 47
14473: AND
14474: PUSH
14475: LD_OWVAR 67
14479: PUSH
14480: LD_INT 4
14482: LESS
14483: AND
14484: IFFALSE 14503
14486: GO 14488
14488: DISABLE
// begin Difficulty := Difficulty + 1 ;
14489: LD_ADDR_OWVAR 67
14493: PUSH
14494: LD_OWVAR 67
14498: PUSH
14499: LD_INT 1
14501: PLUS
14502: ST_TO_ADDR
// end ;
14503: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14504: LD_EXP 29
14508: PUSH
14509: LD_EXP 48
14513: AND
14514: IFFALSE 14617
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
// begin for i := 1 to 5 do
14522: LD_ADDR_VAR 0 1
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_INT 5
14534: PUSH
14535: FOR_TO
14536: IFFALSE 14615
// begin uc_nation := nation_nature ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// uc_side := 0 ;
14546: LD_ADDR_OWVAR 20
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14554: LD_ADDR_OWVAR 29
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
// hc_agressivity := 20 ;
14569: LD_ADDR_OWVAR 35
14573: PUSH
14574: LD_INT 20
14576: ST_TO_ADDR
// hc_class := class_tiger ;
14577: LD_ADDR_OWVAR 28
14581: PUSH
14582: LD_INT 14
14584: ST_TO_ADDR
// hc_gallery :=  ;
14585: LD_ADDR_OWVAR 33
14589: PUSH
14590: LD_STRING 
14592: ST_TO_ADDR
// hc_name :=  ;
14593: LD_ADDR_OWVAR 26
14597: PUSH
14598: LD_STRING 
14600: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14601: CALL_OW 44
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL_OW 51
// end ;
14613: GO 14535
14615: POP
14616: POP
// end ;
14617: PPOPN 1
14619: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14620: LD_EXP 29
14624: PUSH
14625: LD_EXP 49
14629: AND
14630: IFFALSE 14639
14632: GO 14634
14634: DISABLE
// StreamSibBomb ;
14635: CALL 14640 0 0
14639: END
// export function StreamSibBomb ; var i , x , y ; begin
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// result := false ;
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// for i := 1 to 16 do
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: DOUBLE
14660: LD_INT 1
14662: DEC
14663: ST_TO_ADDR
14664: LD_INT 16
14666: PUSH
14667: FOR_TO
14668: IFFALSE 14867
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 10
14677: PUSH
14678: LD_INT 20
14680: PUSH
14681: LD_INT 30
14683: PUSH
14684: LD_INT 40
14686: PUSH
14687: LD_INT 50
14689: PUSH
14690: LD_INT 60
14692: PUSH
14693: LD_INT 70
14695: PUSH
14696: LD_INT 80
14698: PUSH
14699: LD_INT 90
14701: PUSH
14702: LD_INT 100
14704: PUSH
14705: LD_INT 110
14707: PUSH
14708: LD_INT 120
14710: PUSH
14711: LD_INT 130
14713: PUSH
14714: LD_INT 140
14716: PUSH
14717: LD_INT 150
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 1
14739: PPUSH
14740: LD_INT 15
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_INT 10
14756: PUSH
14757: LD_INT 20
14759: PUSH
14760: LD_INT 30
14762: PUSH
14763: LD_INT 40
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: LD_INT 60
14771: PUSH
14772: LD_INT 70
14774: PUSH
14775: LD_INT 80
14777: PUSH
14778: LD_INT 90
14780: PUSH
14781: LD_INT 100
14783: PUSH
14784: LD_INT 110
14786: PUSH
14787: LD_INT 120
14789: PUSH
14790: LD_INT 130
14792: PUSH
14793: LD_INT 140
14795: PUSH
14796: LD_INT 150
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 15
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: ST_TO_ADDR
// if ValidHex ( x , y ) then
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_VAR 0 4
14837: PPUSH
14838: CALL_OW 488
14842: IFFALSE 14865
// begin result := [ x , y ] ;
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_VAR 0 3
14853: PUSH
14854: LD_VAR 0 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
// break ;
14863: GO 14867
// end ; end ;
14865: GO 14667
14867: POP
14868: POP
// if result then
14869: LD_VAR 0 1
14873: IFFALSE 14933
// begin ToLua ( playSibBomb() ) ;
14875: LD_STRING playSibBomb()
14877: PPUSH
14878: CALL_OW 559
// wait ( 0 0$14 ) ;
14882: LD_INT 490
14884: PPUSH
14885: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 2
14905: ARRAY
14906: PPUSH
14907: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: PPUSH
14929: CALL_OW 429
// end ; end ;
14933: LD_VAR 0 1
14937: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14938: LD_EXP 29
14942: PUSH
14943: LD_EXP 51
14947: AND
14948: IFFALSE 14960
14950: GO 14952
14952: DISABLE
// YouLost (  ) ;
14953: LD_STRING 
14955: PPUSH
14956: CALL_OW 104
14960: END
// every 0 0$1 trigger StreamModeActive and sFog do
14961: LD_EXP 29
14965: PUSH
14966: LD_EXP 50
14970: AND
14971: IFFALSE 14985
14973: GO 14975
14975: DISABLE
// FogOff ( your_side ) ;
14976: LD_OWVAR 2
14980: PPUSH
14981: CALL_OW 344
14985: END
// every 0 0$1 trigger StreamModeActive and sSun do
14986: LD_EXP 29
14990: PUSH
14991: LD_EXP 52
14995: AND
14996: IFFALSE 15024
14998: GO 15000
15000: DISABLE
// begin solar_recharge_percent := 0 ;
15001: LD_ADDR_OWVAR 79
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15009: LD_INT 10500
15011: PPUSH
15012: CALL_OW 67
// solar_recharge_percent := 100 ;
15016: LD_ADDR_OWVAR 79
15020: PUSH
15021: LD_INT 100
15023: ST_TO_ADDR
// end ;
15024: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15025: LD_EXP 29
15029: PUSH
15030: LD_EXP 53
15034: AND
15035: IFFALSE 15274
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
15044: PPUSH
// begin tmp := [ ] ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: EMPTY
15051: ST_TO_ADDR
// for i := 1 to 6 do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: DOUBLE
15058: LD_INT 1
15060: DEC
15061: ST_TO_ADDR
15062: LD_INT 6
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15171
// begin uc_nation := nation_nature ;
15068: LD_ADDR_OWVAR 21
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// uc_side := 0 ;
15076: LD_ADDR_OWVAR 20
15080: PUSH
15081: LD_INT 0
15083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15084: LD_ADDR_OWVAR 29
15088: PUSH
15089: LD_INT 12
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
// hc_agressivity := 20 ;
15099: LD_ADDR_OWVAR 35
15103: PUSH
15104: LD_INT 20
15106: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15107: LD_ADDR_OWVAR 28
15111: PUSH
15112: LD_INT 17
15114: ST_TO_ADDR
// hc_gallery :=  ;
15115: LD_ADDR_OWVAR 33
15119: PUSH
15120: LD_STRING 
15122: ST_TO_ADDR
// hc_name :=  ;
15123: LD_ADDR_OWVAR 26
15127: PUSH
15128: LD_STRING 
15130: ST_TO_ADDR
// un := CreateHuman ;
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: CALL_OW 44
15140: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 51
// tmp := tmp ^ un ;
15153: LD_ADDR_VAR 0 3
15157: PUSH
15158: LD_VAR 0 3
15162: PUSH
15163: LD_VAR 0 2
15167: ADD
15168: ST_TO_ADDR
// end ;
15169: GO 15065
15171: POP
15172: POP
// repeat wait ( 0 0$1 ) ;
15173: LD_INT 35
15175: PPUSH
15176: CALL_OW 67
// for un in tmp do
15180: LD_ADDR_VAR 0 2
15184: PUSH
15185: LD_VAR 0 3
15189: PUSH
15190: FOR_IN
15191: IFFALSE 15265
// begin if IsDead ( un ) then
15193: LD_VAR 0 2
15197: PPUSH
15198: CALL_OW 301
15202: IFFALSE 15222
// begin tmp := tmp diff un ;
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_VAR 0 2
15218: DIFF
15219: ST_TO_ADDR
// continue ;
15220: GO 15190
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PPUSH
15244: CALL_OW 69
15248: PPUSH
15249: LD_VAR 0 2
15253: PPUSH
15254: CALL_OW 74
15258: PPUSH
15259: CALL_OW 115
// end ;
15263: GO 15190
15265: POP
15266: POP
// until not tmp ;
15267: LD_VAR 0 3
15271: NOT
15272: IFFALSE 15173
// end ;
15274: PPOPN 3
15276: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15277: LD_EXP 29
15281: PUSH
15282: LD_EXP 54
15286: AND
15287: IFFALSE 15341
15289: GO 15291
15291: DISABLE
// begin ToLua ( displayTroll(); ) ;
15292: LD_STRING displayTroll();
15294: PPUSH
15295: CALL_OW 559
// wait ( 3 3$00 ) ;
15299: LD_INT 6300
15301: PPUSH
15302: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15306: LD_STRING hideTroll();
15308: PPUSH
15309: CALL_OW 559
// wait ( 1 1$00 ) ;
15313: LD_INT 2100
15315: PPUSH
15316: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15320: LD_STRING displayTroll();
15322: PPUSH
15323: CALL_OW 559
// wait ( 1 1$00 ) ;
15327: LD_INT 2100
15329: PPUSH
15330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15334: LD_STRING hideTroll();
15336: PPUSH
15337: CALL_OW 559
// end ;
15341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15342: LD_EXP 29
15346: PUSH
15347: LD_EXP 55
15351: AND
15352: IFFALSE 15415
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
// begin p := 0 ;
15360: LD_ADDR_VAR 0 1
15364: PUSH
15365: LD_INT 0
15367: ST_TO_ADDR
// repeat game_speed := 1 ;
15368: LD_ADDR_OWVAR 65
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15376: LD_INT 35
15378: PPUSH
15379: CALL_OW 67
// p := p + 1 ;
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: PLUS
15396: ST_TO_ADDR
// until p >= 60 ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 60
15404: GREATEREQUAL
15405: IFFALSE 15368
// game_speed := 4 ;
15407: LD_ADDR_OWVAR 65
15411: PUSH
15412: LD_INT 4
15414: ST_TO_ADDR
// end ;
15415: PPOPN 1
15417: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15418: LD_EXP 29
15422: PUSH
15423: LD_EXP 56
15427: AND
15428: IFFALSE 15574
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
15436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_INT 22
15444: PUSH
15445: LD_OWVAR 2
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PPUSH
15486: CALL_OW 69
15490: ST_TO_ADDR
// if not depot then
15491: LD_VAR 0 1
15495: NOT
15496: IFFALSE 15500
// exit ;
15498: GO 15574
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: PPUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: CALL_OW 12
15522: ARRAY
15523: PPUSH
15524: CALL_OW 274
15528: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15529: LD_VAR 0 2
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_INT 0
15539: PPUSH
15540: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: LD_INT 2
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15559: LD_VAR 0 2
15563: PPUSH
15564: LD_INT 3
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 277
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15577: LD_EXP 29
15581: PUSH
15582: LD_EXP 57
15586: AND
15587: IFFALSE 15684
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_OWVAR 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 21
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: LD_INT 23
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 1
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15658: LD_VAR 0 1
15662: PUSH
15663: LD_INT 1
15665: PPUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 12
15675: ARRAY
15676: PPUSH
15677: LD_INT 200
15679: PPUSH
15680: CALL_OW 234
// end ;
15684: PPOPN 1
15686: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15687: LD_EXP 29
15691: PUSH
15692: LD_EXP 58
15696: AND
15697: IFFALSE 15776
15699: GO 15701
15701: DISABLE
15702: LD_INT 0
15704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15705: LD_ADDR_VAR 0 1
15709: PUSH
15710: LD_INT 22
15712: PUSH
15713: LD_OWVAR 2
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: ST_TO_ADDR
// if not tmp then
15741: LD_VAR 0 1
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PPUSH
15769: LD_INT 60
15771: PPUSH
15772: CALL_OW 234
// end ;
15776: PPOPN 1
15778: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15779: LD_EXP 29
15783: PUSH
15784: LD_EXP 59
15788: AND
15789: IFFALSE 15888
15791: GO 15793
15793: DISABLE
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
// begin enable ;
15798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 61
15818: PUSH
15819: EMPTY
15820: LIST
15821: PUSH
15822: LD_INT 33
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not tmp then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15888
// for i in tmp do
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: LD_VAR 0 1
15860: PUSH
15861: FOR_IN
15862: IFFALSE 15886
// if IsControledBy ( i ) then
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 312
15873: IFFALSE 15884
// ComUnlink ( i ) ;
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL_OW 136
15884: GO 15861
15886: POP
15887: POP
// end ;
15888: PPOPN 2
15890: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15891: LD_EXP 29
15895: PUSH
15896: LD_EXP 60
15900: AND
15901: IFFALSE 16041
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin ToLua ( displayPowell(); ) ;
15910: LD_STRING displayPowell();
15912: PPUSH
15913: CALL_OW 559
// uc_side := 0 ;
15917: LD_ADDR_OWVAR 20
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// uc_nation := 2 ;
15925: LD_ADDR_OWVAR 21
15929: PUSH
15930: LD_INT 2
15932: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15933: LD_ADDR_OWVAR 37
15937: PUSH
15938: LD_INT 14
15940: ST_TO_ADDR
// vc_engine := engine_siberite ;
15941: LD_ADDR_OWVAR 39
15945: PUSH
15946: LD_INT 3
15948: ST_TO_ADDR
// vc_control := control_apeman ;
15949: LD_ADDR_OWVAR 38
15953: PUSH
15954: LD_INT 5
15956: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15957: LD_ADDR_OWVAR 40
15961: PUSH
15962: LD_INT 29
15964: ST_TO_ADDR
// un := CreateVehicle ;
15965: LD_ADDR_VAR 0 2
15969: PUSH
15970: CALL_OW 45
15974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15994: LD_VAR 0 2
15998: PPUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PPUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: CALL_OW 74
16025: PPUSH
16026: CALL_OW 115
// until IsDead ( un ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: CALL_OW 301
16039: IFFALSE 15987
// end ;
16041: PPOPN 2
16043: END
// every 0 0$1 trigger StreamModeActive and sStu do
16044: LD_EXP 29
16048: PUSH
16049: LD_EXP 68
16053: AND
16054: IFFALSE 16070
16056: GO 16058
16058: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16059: LD_STRING displayStucuk();
16061: PPUSH
16062: CALL_OW 559
// ResetFog ;
16066: CALL_OW 335
// end ;
16070: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16071: LD_EXP 29
16075: PUSH
16076: LD_EXP 61
16080: AND
16081: IFFALSE 16222
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_OWVAR 2
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16222
// un := tmp [ rand ( 1 , tmp ) ] ;
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: CALL_OW 12
16157: ARRAY
16158: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 0
16166: PPUSH
16167: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_OWVAR 3
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 74
16196: PPUSH
16197: CALL_OW 115
// wait ( 0 0$20 ) ;
16201: LD_INT 700
16203: PPUSH
16204: CALL_OW 67
// SetSide ( un , your_side ) ;
16208: LD_VAR 0 1
16212: PPUSH
16213: LD_OWVAR 2
16217: PPUSH
16218: CALL_OW 235
// end ;
16222: PPOPN 2
16224: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16225: LD_EXP 29
16229: PUSH
16230: LD_EXP 62
16234: AND
16235: IFFALSE 16341
16237: GO 16239
16239: DISABLE
16240: LD_INT 0
16242: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_OWVAR 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: ST_TO_ADDR
// if not depot then
16297: LD_VAR 0 1
16301: NOT
16302: IFFALSE 16306
// exit ;
16304: GO 16341
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16306: LD_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PPUSH
16315: CALL_OW 250
16319: PPUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: CALL_OW 251
16333: PPUSH
16334: LD_INT 70
16336: PPUSH
16337: CALL_OW 495
// end ;
16341: PPOPN 1
16343: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16344: LD_EXP 29
16348: PUSH
16349: LD_EXP 63
16353: AND
16354: IFFALSE 16565
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16366: LD_ADDR_VAR 0 5
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_OWVAR 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: ST_TO_ADDR
// if not tmp then
16402: LD_VAR 0 5
16406: NOT
16407: IFFALSE 16411
// exit ;
16409: GO 16565
// for i in tmp do
16411: LD_ADDR_VAR 0 1
16415: PUSH
16416: LD_VAR 0 5
16420: PUSH
16421: FOR_IN
16422: IFFALSE 16563
// begin d := rand ( 0 , 5 ) ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 0
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: CALL_OW 12
16439: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 250
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: LD_INT 12
16465: PPUSH
16466: CALL_OW 12
16470: PPUSH
16471: CALL_OW 272
16475: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 251
16490: PPUSH
16491: LD_VAR 0 4
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 12
16501: PPUSH
16502: CALL_OW 12
16506: PPUSH
16507: CALL_OW 273
16511: ST_TO_ADDR
// if ValidHex ( x , y ) then
16512: LD_VAR 0 2
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: CALL_OW 488
16526: IFFALSE 16561
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 2
16537: PPUSH
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: LD_INT 6
16548: PPUSH
16549: CALL_OW 12
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 483
// end ;
16561: GO 16421
16563: POP
16564: POP
// end ;
16565: PPOPN 5
16567: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16568: LD_EXP 29
16572: PUSH
16573: LD_EXP 64
16577: AND
16578: IFFALSE 16672
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_OWVAR 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 32
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: ST_TO_ADDR
// if not tmp then
16634: LD_VAR 0 2
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 16672
// for i in tmp do
16643: LD_ADDR_VAR 0 1
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16670
// SetFuel ( i , 0 ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_INT 0
16663: PPUSH
16664: CALL_OW 240
16668: GO 16653
16670: POP
16671: POP
// end ;
16672: PPOPN 2
16674: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16675: LD_EXP 29
16679: PUSH
16680: LD_EXP 65
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_OWVAR 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 29
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PPUSH
16724: CALL_OW 69
16728: ST_TO_ADDR
// if not tmp then
16729: LD_VAR 0 1
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 16751
// DestroyUnit ( tmp [ 1 ] ) ;
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: CALL_OW 65
// end ;
16751: PPOPN 1
16753: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16754: LD_EXP 29
16758: PUSH
16759: LD_EXP 67
16763: AND
16764: IFFALSE 16893
16766: GO 16768
16768: DISABLE
16769: LD_INT 0
16771: PPUSH
// begin uc_side := 0 ;
16772: LD_ADDR_OWVAR 20
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// uc_nation := nation_arabian ;
16780: LD_ADDR_OWVAR 21
16784: PUSH
16785: LD_INT 2
16787: ST_TO_ADDR
// hc_gallery :=  ;
16788: LD_ADDR_OWVAR 33
16792: PUSH
16793: LD_STRING 
16795: ST_TO_ADDR
// hc_name :=  ;
16796: LD_ADDR_OWVAR 26
16800: PUSH
16801: LD_STRING 
16803: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16804: LD_INT 1
16806: PPUSH
16807: LD_INT 11
16809: PPUSH
16810: LD_INT 10
16812: PPUSH
16813: CALL_OW 380
// un := CreateHuman ;
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: CALL_OW 44
16826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 1
16834: PPUSH
16835: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16839: LD_INT 35
16841: PPUSH
16842: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 22
16853: PUSH
16854: LD_OWVAR 2
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 74
16877: PPUSH
16878: CALL_OW 115
// until IsDead ( un ) ;
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 301
16891: IFFALSE 16839
// end ;
16893: PPOPN 1
16895: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16896: LD_EXP 29
16900: PUSH
16901: LD_EXP 69
16905: AND
16906: IFFALSE 16918
16908: GO 16910
16910: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16911: LD_STRING earthquake(getX(game), 0, 32)
16913: PPUSH
16914: CALL_OW 559
16918: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16919: LD_EXP 29
16923: PUSH
16924: LD_EXP 70
16928: AND
16929: IFFALSE 17020
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
// begin enable ;
16937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16938: LD_ADDR_VAR 0 1
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 33
16967: PUSH
16968: LD_INT 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 69
16984: ST_TO_ADDR
// if not tmp then
16985: LD_VAR 0 1
16989: NOT
16990: IFFALSE 16994
// exit ;
16992: GO 17020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 1
17001: PPUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 12
17011: ARRAY
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 234
// end ;
17020: PPOPN 1
17022: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17023: LD_EXP 29
17027: PUSH
17028: LD_EXP 71
17032: AND
17033: IFFALSE 17174
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 69
17078: ST_TO_ADDR
// if not tmp then
17079: LD_VAR 0 3
17083: NOT
17084: IFFALSE 17088
// exit ;
17086: GO 17174
// un := tmp [ rand ( 1 , tmp ) ] ;
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: LD_VAR 0 3
17097: PUSH
17098: LD_INT 1
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: CALL_OW 12
17110: ARRAY
17111: ST_TO_ADDR
// if Crawls ( un ) then
17112: LD_VAR 0 2
17116: PPUSH
17117: CALL_OW 318
17121: IFFALSE 17132
// ComWalk ( un ) ;
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_INT 9
17139: PPUSH
17140: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17144: LD_INT 28
17146: PPUSH
17147: LD_OWVAR 2
17151: PPUSH
17152: LD_INT 2
17154: PPUSH
17155: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17159: LD_INT 29
17161: PPUSH
17162: LD_OWVAR 2
17166: PPUSH
17167: LD_INT 2
17169: PPUSH
17170: CALL_OW 322
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17177: LD_EXP 29
17181: PUSH
17182: LD_EXP 72
17186: AND
17187: IFFALSE 17298
17189: GO 17191
17191: DISABLE
17192: LD_INT 0
17194: PPUSH
17195: PPUSH
17196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_OWVAR 2
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if not tmp then
17233: LD_VAR 0 3
17237: NOT
17238: IFFALSE 17242
// exit ;
17240: GO 17298
// un := tmp [ rand ( 1 , tmp ) ] ;
17242: LD_ADDR_VAR 0 2
17246: PUSH
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 1
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 12
17264: ARRAY
17265: ST_TO_ADDR
// if Crawls ( un ) then
17266: LD_VAR 0 2
17270: PPUSH
17271: CALL_OW 318
17275: IFFALSE 17286
// ComWalk ( un ) ;
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17286: LD_VAR 0 2
17290: PPUSH
17291: LD_INT 8
17293: PPUSH
17294: CALL_OW 336
// end ;
17298: PPOPN 3
17300: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17301: LD_EXP 29
17305: PUSH
17306: LD_EXP 73
17310: AND
17311: IFFALSE 17455
17313: GO 17315
17315: DISABLE
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 21
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 34
17352: PUSH
17353: LD_INT 12
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 34
17362: PUSH
17363: LD_INT 51
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 34
17372: PUSH
17373: LD_INT 32
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: ST_TO_ADDR
// if not tmp then
17396: LD_VAR 0 2
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17455
// for i in tmp do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17453
// if GetCargo ( i , mat_artifact ) = 0 then
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_INT 4
17425: PPUSH
17426: CALL_OW 289
17430: PUSH
17431: LD_INT 0
17433: EQUAL
17434: IFFALSE 17451
// SetCargo ( i , mat_siberit , 100 ) ;
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_INT 3
17443: PPUSH
17444: LD_INT 100
17446: PPUSH
17447: CALL_OW 290
17451: GO 17415
17453: POP
17454: POP
// end ;
17455: PPOPN 2
17457: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17458: LD_EXP 29
17462: PUSH
17463: LD_EXP 74
17467: AND
17468: IFFALSE 17651
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_OWVAR 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PPUSH
17494: CALL_OW 69
17498: ST_TO_ADDR
// if not tmp then
17499: LD_VAR 0 2
17503: NOT
17504: IFFALSE 17508
// exit ;
17506: GO 17651
// for i := 1 to 2 do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_INT 2
17520: PUSH
17521: FOR_TO
17522: IFFALSE 17649
// begin uc_side := your_side ;
17524: LD_ADDR_OWVAR 20
17528: PUSH
17529: LD_OWVAR 2
17533: ST_TO_ADDR
// uc_nation := nation_american ;
17534: LD_ADDR_OWVAR 21
17538: PUSH
17539: LD_INT 1
17541: ST_TO_ADDR
// vc_chassis := us_morphling ;
17542: LD_ADDR_OWVAR 37
17546: PUSH
17547: LD_INT 5
17549: ST_TO_ADDR
// vc_engine := engine_siberite ;
17550: LD_ADDR_OWVAR 39
17554: PUSH
17555: LD_INT 3
17557: ST_TO_ADDR
// vc_control := control_computer ;
17558: LD_ADDR_OWVAR 38
17562: PUSH
17563: LD_INT 3
17565: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17566: LD_ADDR_OWVAR 40
17570: PUSH
17571: LD_INT 10
17573: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PPUSH
17583: CALL_OW 310
17587: NOT
17588: IFFALSE 17635
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17590: CALL_OW 45
17594: PPUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 1
17602: ARRAY
17603: PPUSH
17604: CALL_OW 250
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: CALL_OW 251
17622: PPUSH
17623: LD_INT 12
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 50
17633: GO 17647
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17635: CALL_OW 45
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 51
// end ;
17647: GO 17521
17649: POP
17650: POP
// end ;
17651: PPOPN 2
17653: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17654: LD_EXP 29
17658: PUSH
17659: LD_EXP 75
17663: AND
17664: IFFALSE 17886
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17677: LD_ADDR_VAR 0 6
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_OWVAR 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 21
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 23
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 6
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17886
// s1 := rand ( 1 , 4 ) ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 4
17750: PPUSH
17751: CALL_OW 12
17755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17756: LD_ADDR_VAR 0 4
17760: PUSH
17761: LD_VAR 0 6
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 259
17779: ST_TO_ADDR
// if s1 = 1 then
17780: LD_VAR 0 2
17784: PUSH
17785: LD_INT 1
17787: EQUAL
17788: IFFALSE 17808
// s2 := rand ( 2 , 4 ) else
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 2
17797: PPUSH
17798: LD_INT 4
17800: PPUSH
17801: CALL_OW 12
17805: ST_TO_ADDR
17806: GO 17816
// s2 := 1 ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 6
17825: PUSH
17826: LD_INT 1
17828: ARRAY
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: CALL_OW 259
17839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17840: LD_VAR 0 6
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17863: LD_VAR 0 6
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: LD_VAR 0 4
17881: PPUSH
17882: CALL_OW 237
// end ;
17886: PPOPN 6
17888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17889: LD_EXP 29
17893: PUSH
17894: LD_EXP 76
17898: AND
17899: IFFALSE 17978
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17907: LD_ADDR_VAR 0 1
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 1
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 17978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17952: LD_VAR 0 1
17956: PUSH
17957: LD_INT 1
17959: PPUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 12
17969: ARRAY
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 234
// end ;
17978: PPOPN 1
17980: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17981: LD_EXP 29
17985: PUSH
17986: LD_EXP 77
17990: AND
17991: IFFALSE 18103
17993: GO 17995
17995: DISABLE
17996: LD_INT 0
17998: PPUSH
17999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_INT 22
18007: PUSH
18008: LD_OWVAR 2
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 27
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 30
18032: PUSH
18033: LD_INT 26
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 28
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PPUSH
18060: CALL_OW 69
18064: ST_TO_ADDR
// if not tmp then
18065: LD_VAR 0 2
18069: NOT
18070: IFFALSE 18074
// exit ;
18072: GO 18103
// for i in tmp do
18074: LD_ADDR_VAR 0 1
18078: PUSH
18079: LD_VAR 0 2
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18101
// SetLives ( i , 1 ) ;
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 234
18099: GO 18084
18101: POP
18102: POP
// end ;
18103: PPOPN 2
18105: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18106: LD_EXP 29
18110: PUSH
18111: LD_EXP 78
18115: AND
18116: IFFALSE 18403
18118: GO 18120
18120: DISABLE
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
18125: PPUSH
// begin i := rand ( 1 , 7 ) ;
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: LD_INT 1
18133: PPUSH
18134: LD_INT 7
18136: PPUSH
18137: CALL_OW 12
18141: ST_TO_ADDR
// case i of 1 :
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18165
18155: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18156: LD_STRING earthquake(getX(game), 0, 32)
18158: PPUSH
18159: CALL_OW 559
18163: GO 18403
18165: LD_INT 2
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18187
18173: POP
// begin ToLua ( displayStucuk(); ) ;
18174: LD_STRING displayStucuk();
18176: PPUSH
18177: CALL_OW 559
// ResetFog ;
18181: CALL_OW 335
// end ; 3 :
18185: GO 18403
18187: LD_INT 3
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18299
18195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 22
18203: PUSH
18204: LD_OWVAR 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 2
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18403
// un := tmp [ rand ( 1 , tmp ) ] ;
18241: LD_ADDR_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: ST_TO_ADDR
// if Crawls ( un ) then
18265: LD_VAR 0 3
18269: PPUSH
18270: CALL_OW 318
18274: IFFALSE 18285
// ComWalk ( un ) ;
18276: LD_VAR 0 3
18280: PPUSH
18281: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_INT 8
18292: PPUSH
18293: CALL_OW 336
// end ; 4 :
18297: GO 18403
18299: LD_INT 4
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18381
18307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 29
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: ST_TO_ADDR
// if not tmp then
18344: LD_VAR 0 2
18348: NOT
18349: IFFALSE 18353
// exit ;
18351: GO 18403
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18353: LD_VAR 0 2
18357: PUSH
18358: LD_INT 1
18360: ARRAY
18361: PPUSH
18362: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18366: LD_VAR 0 2
18370: PUSH
18371: LD_INT 1
18373: ARRAY
18374: PPUSH
18375: CALL_OW 65
// end ; 5 .. 7 :
18379: GO 18403
18381: LD_INT 5
18383: DOUBLE
18384: GREATEREQUAL
18385: IFFALSE 18393
18387: LD_INT 7
18389: DOUBLE
18390: LESSEQUAL
18391: IFTRUE 18395
18393: GO 18402
18395: POP
// StreamSibBomb ; end ;
18396: CALL 14640 0 0
18400: GO 18403
18402: POP
// end ;
18403: PPOPN 3
18405: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18406: LD_EXP 29
18410: PUSH
18411: LD_EXP 79
18415: AND
18416: IFFALSE 18572
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: LD_INT 81
18433: PUSH
18434: LD_OWVAR 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 21
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18572
// p := 0 ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_INT 0
18496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18497: LD_INT 35
18499: PPUSH
18500: CALL_OW 67
// p := p + 1 ;
18504: LD_ADDR_VAR 0 3
18508: PUSH
18509: LD_VAR 0 3
18513: PUSH
18514: LD_INT 1
18516: PLUS
18517: ST_TO_ADDR
// for i in tmp do
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: FOR_IN
18529: IFFALSE 18560
// if GetLives ( i ) < 1000 then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 256
18540: PUSH
18541: LD_INT 1000
18543: LESS
18544: IFFALSE 18558
// SetLives ( i , 1000 ) ;
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_INT 1000
18553: PPUSH
18554: CALL_OW 234
18558: GO 18528
18560: POP
18561: POP
// until p > 20 ;
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 20
18569: GREATER
18570: IFFALSE 18497
// end ;
18572: PPOPN 3
18574: END
// every 0 0$1 trigger StreamModeActive and sTime do
18575: LD_EXP 29
18579: PUSH
18580: LD_EXP 80
18584: AND
18585: IFFALSE 18620
18587: GO 18589
18589: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18590: LD_INT 28
18592: PPUSH
18593: LD_OWVAR 2
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18605: LD_INT 30
18607: PPUSH
18608: LD_OWVAR 2
18612: PPUSH
18613: LD_INT 2
18615: PPUSH
18616: CALL_OW 322
// end ;
18620: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18621: LD_EXP 29
18625: PUSH
18626: LD_EXP 81
18630: AND
18631: IFFALSE 18752
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 23
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: PPUSH
18689: CALL_OW 69
18693: ST_TO_ADDR
// if not tmp then
18694: LD_VAR 0 2
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18752
// for i in tmp do
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: LD_VAR 0 2
18712: PUSH
18713: FOR_IN
18714: IFFALSE 18750
// begin if Crawls ( i ) then
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 318
18725: IFFALSE 18736
// ComWalk ( i ) ;
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 138
// SetClass ( i , 2 ) ;
18736: LD_VAR 0 1
18740: PPUSH
18741: LD_INT 2
18743: PPUSH
18744: CALL_OW 336
// end ;
18748: GO 18713
18750: POP
18751: POP
// end ;
18752: PPOPN 2
18754: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18755: LD_EXP 29
18759: PUSH
18760: LD_EXP 82
18764: AND
18765: IFFALSE 19053
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18775: LD_OWVAR 2
18779: PPUSH
18780: LD_INT 9
18782: PPUSH
18783: LD_INT 1
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18793: LD_INT 9
18795: PPUSH
18796: LD_OWVAR 2
18800: PPUSH
18801: CALL_OW 343
// uc_side := 9 ;
18805: LD_ADDR_OWVAR 20
18809: PUSH
18810: LD_INT 9
18812: ST_TO_ADDR
// uc_nation := 2 ;
18813: LD_ADDR_OWVAR 21
18817: PUSH
18818: LD_INT 2
18820: ST_TO_ADDR
// hc_name := Dark Warrior ;
18821: LD_ADDR_OWVAR 26
18825: PUSH
18826: LD_STRING Dark Warrior
18828: ST_TO_ADDR
// hc_gallery :=  ;
18829: LD_ADDR_OWVAR 33
18833: PUSH
18834: LD_STRING 
18836: ST_TO_ADDR
// hc_noskilllimit := true ;
18837: LD_ADDR_OWVAR 76
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18845: LD_ADDR_OWVAR 31
18849: PUSH
18850: LD_INT 30
18852: PUSH
18853: LD_INT 30
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// un := CreateHuman ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: CALL_OW 44
18877: ST_TO_ADDR
// hc_noskilllimit := false ;
18878: LD_ADDR_OWVAR 76
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 3
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// ToLua ( playRanger() ) ;
18898: LD_STRING playRanger()
18900: PPUSH
18901: CALL_OW 559
// p := 0 ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18913: LD_INT 35
18915: PPUSH
18916: CALL_OW 67
// p := p + 1 ;
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 2
18929: PUSH
18930: LD_INT 1
18932: PLUS
18933: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18934: LD_VAR 0 3
18938: PPUSH
18939: CALL_OW 256
18943: PUSH
18944: LD_INT 1000
18946: LESS
18947: IFFALSE 18961
// SetLives ( un , 1000 ) ;
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1000
18956: PPUSH
18957: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18961: LD_VAR 0 3
18965: PPUSH
18966: LD_INT 81
18968: PUSH
18969: LD_OWVAR 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 91
18980: PUSH
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 69
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: CALL_OW 74
19012: PPUSH
19013: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19017: LD_VAR 0 2
19021: PUSH
19022: LD_INT 80
19024: GREATER
19025: PUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 301
19035: OR
19036: IFFALSE 18913
// if un then
19038: LD_VAR 0 3
19042: IFFALSE 19053
// RemoveUnit ( un ) ;
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 64
// end ;
19053: PPOPN 3
19055: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19056: LD_EXP 83
19060: IFFALSE 19176
19062: GO 19064
19064: DISABLE
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19070: LD_ADDR_VAR 0 2
19074: PUSH
19075: LD_INT 81
19077: PUSH
19078: LD_OWVAR 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19106: LD_STRING playComputer()
19108: PPUSH
19109: CALL_OW 559
// if not tmp then
19113: LD_VAR 0 2
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19176
// for i in tmp do
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: FOR_IN
19133: IFFALSE 19174
// for j := 1 to 4 do
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: DOUBLE
19141: LD_INT 1
19143: DEC
19144: ST_TO_ADDR
19145: LD_INT 4
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19170
// SetSkill ( i , j , 10 ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_VAR 0 3
19160: PPUSH
19161: LD_INT 10
19163: PPUSH
19164: CALL_OW 237
19168: GO 19148
19170: POP
19171: POP
19172: GO 19132
19174: POP
19175: POP
// end ;
19176: PPOPN 3
19178: END
// every 0 0$1 trigger s30 do var i , tmp ;
19179: LD_EXP 84
19183: IFFALSE 19252
19185: GO 19187
19187: DISABLE
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19192: LD_ADDR_VAR 0 2
19196: PUSH
19197: LD_INT 22
19199: PUSH
19200: LD_OWVAR 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: ST_TO_ADDR
// if not tmp then
19214: LD_VAR 0 2
19218: NOT
19219: IFFALSE 19223
// exit ;
19221: GO 19252
// for i in tmp do
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_VAR 0 2
19232: PUSH
19233: FOR_IN
19234: IFFALSE 19250
// SetLives ( i , 300 ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_INT 300
19243: PPUSH
19244: CALL_OW 234
19248: GO 19233
19250: POP
19251: POP
// end ;
19252: PPOPN 2
19254: END
// every 0 0$1 trigger s60 do var i , tmp ;
19255: LD_EXP 85
19259: IFFALSE 19328
19261: GO 19263
19263: DISABLE
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_OWVAR 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 2
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19328
// for i in tmp do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_VAR 0 2
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19326
// SetLives ( i , 600 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 600
19319: PPUSH
19320: CALL_OW 234
19324: GO 19309
19326: POP
19327: POP
// end ;
19328: PPOPN 2
19330: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19331: LD_INT 0
19333: PPUSH
// case cmd of 301 :
19334: LD_VAR 0 1
19338: PUSH
19339: LD_INT 301
19341: DOUBLE
19342: EQUAL
19343: IFTRUE 19347
19345: GO 19379
19347: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19348: LD_VAR 0 6
19352: PPUSH
19353: LD_VAR 0 7
19357: PPUSH
19358: LD_VAR 0 8
19362: PPUSH
19363: LD_VAR 0 4
19367: PPUSH
19368: LD_VAR 0 5
19372: PPUSH
19373: CALL 20588 0 5
19377: GO 19500
19379: LD_INT 302
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19424
19387: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19388: LD_VAR 0 6
19392: PPUSH
19393: LD_VAR 0 7
19397: PPUSH
19398: LD_VAR 0 8
19402: PPUSH
19403: LD_VAR 0 9
19407: PPUSH
19408: LD_VAR 0 4
19412: PPUSH
19413: LD_VAR 0 5
19417: PPUSH
19418: CALL 20679 0 6
19422: GO 19500
19424: LD_INT 303
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19469
19432: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19433: LD_VAR 0 6
19437: PPUSH
19438: LD_VAR 0 7
19442: PPUSH
19443: LD_VAR 0 8
19447: PPUSH
19448: LD_VAR 0 9
19452: PPUSH
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL 19505 0 6
19467: GO 19500
19469: LD_INT 304
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19499
19477: POP
// hHackTeleport ( unit , x , y ) ; end ;
19478: LD_VAR 0 2
19482: PPUSH
19483: LD_VAR 0 4
19487: PPUSH
19488: LD_VAR 0 5
19492: PPUSH
19493: CALL 21272 0 3
19497: GO 19500
19499: POP
// end ;
19500: LD_VAR 0 12
19504: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19509: LD_VAR 0 1
19513: PUSH
19514: LD_INT 1
19516: LESS
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 3
19525: GREATER
19526: OR
19527: PUSH
19528: LD_VAR 0 5
19532: PPUSH
19533: LD_VAR 0 6
19537: PPUSH
19538: CALL_OW 428
19542: OR
19543: IFFALSE 19547
// exit ;
19545: GO 20275
// uc_side := your_side ;
19547: LD_ADDR_OWVAR 20
19551: PUSH
19552: LD_OWVAR 2
19556: ST_TO_ADDR
// uc_nation := nation ;
19557: LD_ADDR_OWVAR 21
19561: PUSH
19562: LD_VAR 0 1
19566: ST_TO_ADDR
// bc_level = 1 ;
19567: LD_ADDR_OWVAR 43
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// case btype of 1 :
19575: LD_VAR 0 2
19579: PUSH
19580: LD_INT 1
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19599
19588: POP
// bc_type := b_depot ; 2 :
19589: LD_ADDR_OWVAR 42
19593: PUSH
19594: LD_INT 0
19596: ST_TO_ADDR
19597: GO 20219
19599: LD_INT 2
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19618
19607: POP
// bc_type := b_warehouse ; 3 :
19608: LD_ADDR_OWVAR 42
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
19616: GO 20219
19618: LD_INT 3
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19637
19626: POP
// bc_type := b_lab ; 4 .. 9 :
19627: LD_ADDR_OWVAR 42
19631: PUSH
19632: LD_INT 6
19634: ST_TO_ADDR
19635: GO 20219
19637: LD_INT 4
19639: DOUBLE
19640: GREATEREQUAL
19641: IFFALSE 19649
19643: LD_INT 9
19645: DOUBLE
19646: LESSEQUAL
19647: IFTRUE 19651
19649: GO 19711
19651: POP
// begin bc_type := b_lab_half ;
19652: LD_ADDR_OWVAR 42
19656: PUSH
19657: LD_INT 7
19659: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19660: LD_ADDR_OWVAR 44
19664: PUSH
19665: LD_INT 10
19667: PUSH
19668: LD_INT 11
19670: PUSH
19671: LD_INT 12
19673: PUSH
19674: LD_INT 15
19676: PUSH
19677: LD_INT 14
19679: PUSH
19680: LD_INT 13
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: LD_INT 3
19698: MINUS
19699: ARRAY
19700: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19701: LD_ADDR_OWVAR 45
19705: PUSH
19706: LD_INT 9
19708: ST_TO_ADDR
// end ; 10 .. 13 :
19709: GO 20219
19711: LD_INT 10
19713: DOUBLE
19714: GREATEREQUAL
19715: IFFALSE 19723
19717: LD_INT 13
19719: DOUBLE
19720: LESSEQUAL
19721: IFTRUE 19725
19723: GO 19802
19725: POP
// begin bc_type := b_lab_full ;
19726: LD_ADDR_OWVAR 42
19730: PUSH
19731: LD_INT 8
19733: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19734: LD_ADDR_OWVAR 44
19738: PUSH
19739: LD_INT 10
19741: PUSH
19742: LD_INT 12
19744: PUSH
19745: LD_INT 14
19747: PUSH
19748: LD_INT 13
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: PUSH
19757: LD_VAR 0 2
19761: PUSH
19762: LD_INT 9
19764: MINUS
19765: ARRAY
19766: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19767: LD_ADDR_OWVAR 45
19771: PUSH
19772: LD_INT 11
19774: PUSH
19775: LD_INT 15
19777: PUSH
19778: LD_INT 12
19780: PUSH
19781: LD_INT 15
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: LD_INT 9
19797: MINUS
19798: ARRAY
19799: ST_TO_ADDR
// end ; 14 :
19800: GO 20219
19802: LD_INT 14
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// bc_type := b_workshop ; 15 :
19811: LD_ADDR_OWVAR 42
19815: PUSH
19816: LD_INT 2
19818: ST_TO_ADDR
19819: GO 20219
19821: LD_INT 15
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19840
19829: POP
// bc_type := b_factory ; 16 :
19830: LD_ADDR_OWVAR 42
19834: PUSH
19835: LD_INT 3
19837: ST_TO_ADDR
19838: GO 20219
19840: LD_INT 16
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19859
19848: POP
// bc_type := b_ext_gun ; 17 :
19849: LD_ADDR_OWVAR 42
19853: PUSH
19854: LD_INT 17
19856: ST_TO_ADDR
19857: GO 20219
19859: LD_INT 17
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19895
19867: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19868: LD_ADDR_OWVAR 42
19872: PUSH
19873: LD_INT 19
19875: PUSH
19876: LD_INT 23
19878: PUSH
19879: LD_INT 19
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PUSH
19887: LD_VAR 0 1
19891: ARRAY
19892: ST_TO_ADDR
19893: GO 20219
19895: LD_INT 18
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19914
19903: POP
// bc_type := b_ext_radar ; 19 :
19904: LD_ADDR_OWVAR 42
19908: PUSH
19909: LD_INT 20
19911: ST_TO_ADDR
19912: GO 20219
19914: LD_INT 19
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19933
19922: POP
// bc_type := b_ext_radio ; 20 :
19923: LD_ADDR_OWVAR 42
19927: PUSH
19928: LD_INT 22
19930: ST_TO_ADDR
19931: GO 20219
19933: LD_INT 20
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19952
19941: POP
// bc_type := b_ext_siberium ; 21 :
19942: LD_ADDR_OWVAR 42
19946: PUSH
19947: LD_INT 21
19949: ST_TO_ADDR
19950: GO 20219
19952: LD_INT 21
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19971
19960: POP
// bc_type := b_ext_computer ; 22 :
19961: LD_ADDR_OWVAR 42
19965: PUSH
19966: LD_INT 24
19968: ST_TO_ADDR
19969: GO 20219
19971: LD_INT 22
19973: DOUBLE
19974: EQUAL
19975: IFTRUE 19979
19977: GO 19990
19979: POP
// bc_type := b_ext_track ; 23 :
19980: LD_ADDR_OWVAR 42
19984: PUSH
19985: LD_INT 16
19987: ST_TO_ADDR
19988: GO 20219
19990: LD_INT 23
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20009
19998: POP
// bc_type := b_ext_laser ; 24 :
19999: LD_ADDR_OWVAR 42
20003: PUSH
20004: LD_INT 25
20006: ST_TO_ADDR
20007: GO 20219
20009: LD_INT 24
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20028
20017: POP
// bc_type := b_control_tower ; 25 :
20018: LD_ADDR_OWVAR 42
20022: PUSH
20023: LD_INT 36
20025: ST_TO_ADDR
20026: GO 20219
20028: LD_INT 25
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_breastwork ; 26 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 31
20044: ST_TO_ADDR
20045: GO 20219
20047: LD_INT 26
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_bunker ; 27 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 32
20063: ST_TO_ADDR
20064: GO 20219
20066: LD_INT 27
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_turret ; 28 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 33
20082: ST_TO_ADDR
20083: GO 20219
20085: LD_INT 28
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_armoury ; 29 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 4
20101: ST_TO_ADDR
20102: GO 20219
20104: LD_INT 29
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_barracks ; 30 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 5
20120: ST_TO_ADDR
20121: GO 20219
20123: LD_INT 30
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// bc_type := b_solar_power ; 31 :
20132: LD_ADDR_OWVAR 42
20136: PUSH
20137: LD_INT 27
20139: ST_TO_ADDR
20140: GO 20219
20142: LD_INT 31
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// bc_type := b_oil_power ; 32 :
20151: LD_ADDR_OWVAR 42
20155: PUSH
20156: LD_INT 26
20158: ST_TO_ADDR
20159: GO 20219
20161: LD_INT 32
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// bc_type := b_siberite_power ; 33 :
20170: LD_ADDR_OWVAR 42
20174: PUSH
20175: LD_INT 28
20177: ST_TO_ADDR
20178: GO 20219
20180: LD_INT 33
20182: DOUBLE
20183: EQUAL
20184: IFTRUE 20188
20186: GO 20199
20188: POP
// bc_type := b_oil_mine ; 34 :
20189: LD_ADDR_OWVAR 42
20193: PUSH
20194: LD_INT 29
20196: ST_TO_ADDR
20197: GO 20219
20199: LD_INT 34
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20218
20207: POP
// bc_type := b_siberite_mine ; end ;
20208: LD_ADDR_OWVAR 42
20212: PUSH
20213: LD_INT 30
20215: ST_TO_ADDR
20216: GO 20219
20218: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20219: LD_ADDR_VAR 0 8
20223: PUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_VAR 0 6
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: CALL_OW 47
20243: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20244: LD_OWVAR 42
20248: PUSH
20249: LD_INT 32
20251: PUSH
20252: LD_INT 33
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: IN
20259: IFFALSE 20275
// PlaceWeaponTurret ( b , weapon ) ;
20261: LD_VAR 0 8
20265: PPUSH
20266: LD_VAR 0 4
20270: PPUSH
20271: CALL_OW 431
// end ;
20275: LD_VAR 0 7
20279: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20280: LD_INT 0
20282: PPUSH
20283: PPUSH
20284: PPUSH
20285: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20286: LD_ADDR_VAR 0 4
20290: PUSH
20291: LD_INT 22
20293: PUSH
20294: LD_OWVAR 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 30
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: ST_TO_ADDR
// if not tmp then
20340: LD_VAR 0 4
20344: NOT
20345: IFFALSE 20349
// exit ;
20347: GO 20408
// for i in tmp do
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_VAR 0 4
20358: PUSH
20359: FOR_IN
20360: IFFALSE 20406
// for j = 1 to 3 do
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: DOUBLE
20368: LD_INT 1
20370: DEC
20371: ST_TO_ADDR
20372: LD_INT 3
20374: PUSH
20375: FOR_TO
20376: IFFALSE 20402
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20378: LD_VAR 0 2
20382: PPUSH
20383: CALL_OW 274
20387: PPUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: LD_INT 99999
20395: PPUSH
20396: CALL_OW 277
20400: GO 20375
20402: POP
20403: POP
20404: GO 20359
20406: POP
20407: POP
// end ;
20408: LD_VAR 0 1
20412: RET
// export function hHackSetLevel10 ; var i , j ; begin
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
20417: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20418: LD_ADDR_VAR 0 2
20422: PUSH
20423: LD_INT 21
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PPUSH
20433: CALL_OW 69
20437: PUSH
20438: FOR_IN
20439: IFFALSE 20491
// if IsSelected ( i ) then
20441: LD_VAR 0 2
20445: PPUSH
20446: CALL_OW 306
20450: IFFALSE 20489
// begin for j := 1 to 4 do
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: DOUBLE
20458: LD_INT 1
20460: DEC
20461: ST_TO_ADDR
20462: LD_INT 4
20464: PUSH
20465: FOR_TO
20466: IFFALSE 20487
// SetSkill ( i , j , 10 ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: LD_INT 10
20480: PPUSH
20481: CALL_OW 237
20485: GO 20465
20487: POP
20488: POP
// end ;
20489: GO 20438
20491: POP
20492: POP
// end ;
20493: LD_VAR 0 1
20497: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
20502: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20503: LD_ADDR_VAR 0 2
20507: PUSH
20508: LD_INT 22
20510: PUSH
20511: LD_OWVAR 2
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: PUSH
20539: FOR_IN
20540: IFFALSE 20581
// begin for j := 1 to 4 do
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: DOUBLE
20548: LD_INT 1
20550: DEC
20551: ST_TO_ADDR
20552: LD_INT 4
20554: PUSH
20555: FOR_TO
20556: IFFALSE 20577
// SetSkill ( i , j , 10 ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: LD_VAR 0 3
20567: PPUSH
20568: LD_INT 10
20570: PPUSH
20571: CALL_OW 237
20575: GO 20555
20577: POP
20578: POP
// end ;
20579: GO 20539
20581: POP
20582: POP
// end ;
20583: LD_VAR 0 1
20587: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20588: LD_INT 0
20590: PPUSH
// uc_side := your_side ;
20591: LD_ADDR_OWVAR 20
20595: PUSH
20596: LD_OWVAR 2
20600: ST_TO_ADDR
// uc_nation := nation ;
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_VAR 0 1
20610: ST_TO_ADDR
// InitHc ;
20611: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20615: LD_INT 0
20617: PPUSH
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20632: LD_VAR 0 4
20636: PPUSH
20637: LD_VAR 0 5
20641: PPUSH
20642: CALL_OW 428
20646: PUSH
20647: LD_INT 0
20649: EQUAL
20650: IFFALSE 20674
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20652: CALL_OW 44
20656: PPUSH
20657: LD_VAR 0 4
20661: PPUSH
20662: LD_VAR 0 5
20666: PPUSH
20667: LD_INT 1
20669: PPUSH
20670: CALL_OW 48
// end ;
20674: LD_VAR 0 6
20678: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20679: LD_INT 0
20681: PPUSH
20682: PPUSH
// uc_side := your_side ;
20683: LD_ADDR_OWVAR 20
20687: PUSH
20688: LD_OWVAR 2
20692: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20693: LD_VAR 0 1
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: LD_INT 4
20709: PUSH
20710: LD_INT 5
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: IN
20720: IFFALSE 20732
// uc_nation := nation_american else
20722: LD_ADDR_OWVAR 21
20726: PUSH
20727: LD_INT 1
20729: ST_TO_ADDR
20730: GO 20775
// if chassis in [ 11 , 12 , 13 , 14 ] then
20732: LD_VAR 0 1
20736: PUSH
20737: LD_INT 11
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: LD_INT 13
20745: PUSH
20746: LD_INT 14
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: IN
20755: IFFALSE 20767
// uc_nation := nation_arabian else
20757: LD_ADDR_OWVAR 21
20761: PUSH
20762: LD_INT 2
20764: ST_TO_ADDR
20765: GO 20775
// uc_nation := nation_russian ;
20767: LD_ADDR_OWVAR 21
20771: PUSH
20772: LD_INT 3
20774: ST_TO_ADDR
// vc_chassis := chassis ;
20775: LD_ADDR_OWVAR 37
20779: PUSH
20780: LD_VAR 0 1
20784: ST_TO_ADDR
// vc_engine := engine ;
20785: LD_ADDR_OWVAR 39
20789: PUSH
20790: LD_VAR 0 2
20794: ST_TO_ADDR
// vc_control := control ;
20795: LD_ADDR_OWVAR 38
20799: PUSH
20800: LD_VAR 0 3
20804: ST_TO_ADDR
// vc_weapon := weapon ;
20805: LD_ADDR_OWVAR 40
20809: PUSH
20810: LD_VAR 0 4
20814: ST_TO_ADDR
// un := CreateVehicle ;
20815: LD_ADDR_VAR 0 8
20819: PUSH
20820: CALL_OW 45
20824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20825: LD_VAR 0 8
20829: PPUSH
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 5
20835: PPUSH
20836: CALL_OW 12
20840: PPUSH
20841: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20845: LD_VAR 0 8
20849: PPUSH
20850: LD_VAR 0 5
20854: PPUSH
20855: LD_VAR 0 6
20859: PPUSH
20860: LD_INT 1
20862: PPUSH
20863: CALL_OW 48
// end ;
20867: LD_VAR 0 7
20871: RET
// export hInvincible ; every 1 do
20872: GO 20874
20874: DISABLE
// hInvincible := [ ] ;
20875: LD_ADDR_EXP 86
20879: PUSH
20880: EMPTY
20881: ST_TO_ADDR
20882: END
// every 10 do var i ;
20883: GO 20885
20885: DISABLE
20886: LD_INT 0
20888: PPUSH
// begin enable ;
20889: ENABLE
// if not hInvincible then
20890: LD_EXP 86
20894: NOT
20895: IFFALSE 20899
// exit ;
20897: GO 20943
// for i in hInvincible do
20899: LD_ADDR_VAR 0 1
20903: PUSH
20904: LD_EXP 86
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20941
// if GetLives ( i ) < 1000 then
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 256
20921: PUSH
20922: LD_INT 1000
20924: LESS
20925: IFFALSE 20939
// SetLives ( i , 1000 ) ;
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_INT 1000
20934: PPUSH
20935: CALL_OW 234
20939: GO 20909
20941: POP
20942: POP
// end ;
20943: PPOPN 1
20945: END
// export function hHackInvincible ; var i ; begin
20946: LD_INT 0
20948: PPUSH
20949: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20950: LD_ADDR_VAR 0 2
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 21
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: PUSH
20988: FOR_IN
20989: IFFALSE 21050
// if IsSelected ( i ) then
20991: LD_VAR 0 2
20995: PPUSH
20996: CALL_OW 306
21000: IFFALSE 21048
// begin if i in hInvincible then
21002: LD_VAR 0 2
21006: PUSH
21007: LD_EXP 86
21011: IN
21012: IFFALSE 21032
// hInvincible := hInvincible diff i else
21014: LD_ADDR_EXP 86
21018: PUSH
21019: LD_EXP 86
21023: PUSH
21024: LD_VAR 0 2
21028: DIFF
21029: ST_TO_ADDR
21030: GO 21048
// hInvincible := hInvincible union i ;
21032: LD_ADDR_EXP 86
21036: PUSH
21037: LD_EXP 86
21041: PUSH
21042: LD_VAR 0 2
21046: UNION
21047: ST_TO_ADDR
// end ;
21048: GO 20988
21050: POP
21051: POP
// end ;
21052: LD_VAR 0 1
21056: RET
// export function hHackInvisible ; var i , j ; begin
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
21061: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_INT 21
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: PUSH
21082: FOR_IN
21083: IFFALSE 21107
// if IsSelected ( i ) then
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 306
21094: IFFALSE 21105
// ComForceInvisible ( i ) ;
21096: LD_VAR 0 2
21100: PPUSH
21101: CALL_OW 496
21105: GO 21082
21107: POP
21108: POP
// end ;
21109: LD_VAR 0 1
21113: RET
// export function hHackChangeYourSide ; begin
21114: LD_INT 0
21116: PPUSH
// if your_side = 8 then
21117: LD_OWVAR 2
21121: PUSH
21122: LD_INT 8
21124: EQUAL
21125: IFFALSE 21137
// your_side := 0 else
21127: LD_ADDR_OWVAR 2
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
21135: GO 21151
// your_side := your_side + 1 ;
21137: LD_ADDR_OWVAR 2
21141: PUSH
21142: LD_OWVAR 2
21146: PUSH
21147: LD_INT 1
21149: PLUS
21150: ST_TO_ADDR
// end ;
21151: LD_VAR 0 1
21155: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21156: LD_INT 0
21158: PPUSH
21159: PPUSH
21160: PPUSH
// for i in all_units do
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_OWVAR 3
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21250
// if IsSelected ( i ) then
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 306
21183: IFFALSE 21248
// begin j := GetSide ( i ) ;
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: LD_VAR 0 2
21194: PPUSH
21195: CALL_OW 255
21199: ST_TO_ADDR
// if j = 8 then
21200: LD_VAR 0 3
21204: PUSH
21205: LD_INT 8
21207: EQUAL
21208: IFFALSE 21220
// j := 0 else
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
21218: GO 21234
// j := j + 1 ;
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 1
21232: PLUS
21233: ST_TO_ADDR
// SetSide ( i , j ) ;
21234: LD_VAR 0 2
21238: PPUSH
21239: LD_VAR 0 3
21243: PPUSH
21244: CALL_OW 235
// end ;
21248: GO 21171
21250: POP
21251: POP
// end ;
21252: LD_VAR 0 1
21256: RET
// export function hHackFog ; begin
21257: LD_INT 0
21259: PPUSH
// FogOff ( true ) ;
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 344
// end ;
21267: LD_VAR 0 1
21271: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21272: LD_INT 0
21274: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21275: LD_VAR 0 1
21279: PPUSH
21280: LD_VAR 0 2
21284: PPUSH
21285: LD_VAR 0 3
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: LD_INT 1
21295: PPUSH
21296: CALL_OW 483
// CenterOnXY ( x , y ) ;
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: CALL_OW 84
// end ;
21314: LD_VAR 0 4
21318: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21319: LD_INT 0
21321: PPUSH
21322: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21323: LD_VAR 0 1
21327: NOT
21328: PUSH
21329: LD_VAR 0 2
21333: PPUSH
21334: LD_VAR 0 3
21338: PPUSH
21339: CALL_OW 488
21343: NOT
21344: OR
21345: PUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL_OW 266
21355: PUSH
21356: LD_INT 3
21358: NONEQUAL
21359: PUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 247
21369: PUSH
21370: LD_INT 1
21372: EQUAL
21373: NOT
21374: AND
21375: OR
21376: IFFALSE 21380
// exit ;
21378: GO 21529
// if GetType ( factory ) = unit_human then
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 247
21389: PUSH
21390: LD_INT 1
21392: EQUAL
21393: IFFALSE 21410
// factory := IsInUnit ( factory ) ;
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 310
21409: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 266
21419: PUSH
21420: LD_INT 3
21422: NONEQUAL
21423: IFFALSE 21427
// exit ;
21425: GO 21529
// if HexInfo ( x , y ) = factory then
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 428
21441: PUSH
21442: LD_VAR 0 1
21446: EQUAL
21447: IFFALSE 21474
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21449: LD_ADDR_EXP 87
21453: PUSH
21454: LD_EXP 87
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: LD_INT 0
21466: PPUSH
21467: CALL_OW 1
21471: ST_TO_ADDR
21472: GO 21525
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21474: LD_ADDR_EXP 87
21478: PUSH
21479: LD_EXP 87
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 255
21498: PUSH
21499: LD_VAR 0 1
21503: PUSH
21504: LD_VAR 0 2
21508: PUSH
21509: LD_VAR 0 3
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 1
21524: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21525: CALL 21534 0 0
// end ;
21529: LD_VAR 0 4
21533: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21534: LD_INT 0
21536: PPUSH
21537: PPUSH
21538: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21539: LD_STRING resetFactoryWaypoint();
21541: PPUSH
21542: CALL_OW 559
// if factoryWaypoints then
21546: LD_EXP 87
21550: IFFALSE 21676
// begin list := PrepareArray ( factoryWaypoints ) ;
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_EXP 87
21561: PPUSH
21562: CALL 68818 0 1
21566: ST_TO_ADDR
// for i := 1 to list do
21567: LD_ADDR_VAR 0 2
21571: PUSH
21572: DOUBLE
21573: LD_INT 1
21575: DEC
21576: ST_TO_ADDR
21577: LD_VAR 0 3
21581: PUSH
21582: FOR_TO
21583: IFFALSE 21674
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21585: LD_STRING setFactoryWaypointXY(
21587: PUSH
21588: LD_VAR 0 3
21592: PUSH
21593: LD_VAR 0 2
21597: ARRAY
21598: PUSH
21599: LD_INT 1
21601: ARRAY
21602: STR
21603: PUSH
21604: LD_STRING ,
21606: STR
21607: PUSH
21608: LD_VAR 0 3
21612: PUSH
21613: LD_VAR 0 2
21617: ARRAY
21618: PUSH
21619: LD_INT 2
21621: ARRAY
21622: STR
21623: PUSH
21624: LD_STRING ,
21626: STR
21627: PUSH
21628: LD_VAR 0 3
21632: PUSH
21633: LD_VAR 0 2
21637: ARRAY
21638: PUSH
21639: LD_INT 3
21641: ARRAY
21642: STR
21643: PUSH
21644: LD_STRING ,
21646: STR
21647: PUSH
21648: LD_VAR 0 3
21652: PUSH
21653: LD_VAR 0 2
21657: ARRAY
21658: PUSH
21659: LD_INT 4
21661: ARRAY
21662: STR
21663: PUSH
21664: LD_STRING )
21666: STR
21667: PPUSH
21668: CALL_OW 559
21672: GO 21582
21674: POP
21675: POP
// end ; end ;
21676: LD_VAR 0 1
21680: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21681: LD_INT 0
21683: PPUSH
// if HexInfo ( x , y ) = warehouse then
21684: LD_VAR 0 2
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL_OW 428
21698: PUSH
21699: LD_VAR 0 1
21703: EQUAL
21704: IFFALSE 21731
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21706: LD_ADDR_EXP 88
21710: PUSH
21711: LD_EXP 88
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: LD_INT 0
21723: PPUSH
21724: CALL_OW 1
21728: ST_TO_ADDR
21729: GO 21782
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21731: LD_ADDR_EXP 88
21735: PUSH
21736: LD_EXP 88
21740: PPUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 255
21755: PUSH
21756: LD_VAR 0 1
21760: PUSH
21761: LD_VAR 0 2
21765: PUSH
21766: LD_VAR 0 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 1
21781: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21782: CALL 21791 0 0
// end ;
21786: LD_VAR 0 4
21790: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21791: LD_INT 0
21793: PPUSH
21794: PPUSH
21795: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21796: LD_STRING resetWarehouseGatheringPoints();
21798: PPUSH
21799: CALL_OW 559
// if warehouseGatheringPoints then
21803: LD_EXP 88
21807: IFFALSE 21933
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: LD_EXP 88
21818: PPUSH
21819: CALL 68818 0 1
21823: ST_TO_ADDR
// for i := 1 to list do
21824: LD_ADDR_VAR 0 2
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_VAR 0 3
21838: PUSH
21839: FOR_TO
21840: IFFALSE 21931
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21842: LD_STRING setWarehouseGatheringPointXY(
21844: PUSH
21845: LD_VAR 0 3
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 1
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_VAR 0 3
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 2
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING ,
21883: STR
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_VAR 0 2
21894: ARRAY
21895: PUSH
21896: LD_INT 3
21898: ARRAY
21899: STR
21900: PUSH
21901: LD_STRING ,
21903: STR
21904: PUSH
21905: LD_VAR 0 3
21909: PUSH
21910: LD_VAR 0 2
21914: ARRAY
21915: PUSH
21916: LD_INT 4
21918: ARRAY
21919: STR
21920: PUSH
21921: LD_STRING )
21923: STR
21924: PPUSH
21925: CALL_OW 559
21929: GO 21839
21931: POP
21932: POP
// end ; end ;
21933: LD_VAR 0 1
21937: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21938: LD_EXP 88
21942: IFFALSE 22627
21944: GO 21946
21946: DISABLE
21947: LD_INT 0
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
// begin enable ;
21958: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: LD_EXP 88
21968: PPUSH
21969: CALL 68818 0 1
21973: ST_TO_ADDR
// if not list then
21974: LD_VAR 0 3
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22627
// for i := 1 to list do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 3
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22625
// begin depot := list [ i ] [ 2 ] ;
22001: LD_ADDR_VAR 0 8
22005: PUSH
22006: LD_VAR 0 3
22010: PUSH
22011: LD_VAR 0 1
22015: ARRAY
22016: PUSH
22017: LD_INT 2
22019: ARRAY
22020: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22021: LD_ADDR_VAR 0 5
22025: PUSH
22026: LD_VAR 0 3
22030: PUSH
22031: LD_VAR 0 1
22035: ARRAY
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22041: LD_VAR 0 8
22045: PPUSH
22046: CALL_OW 301
22050: PUSH
22051: LD_VAR 0 5
22055: PUSH
22056: LD_VAR 0 8
22060: PPUSH
22061: CALL_OW 255
22065: NONEQUAL
22066: OR
22067: IFFALSE 22096
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22069: LD_ADDR_EXP 88
22073: PUSH
22074: LD_EXP 88
22078: PPUSH
22079: LD_VAR 0 8
22083: PPUSH
22084: LD_INT 0
22086: PPUSH
22087: CALL_OW 1
22091: ST_TO_ADDR
// exit ;
22092: POP
22093: POP
22094: GO 22627
// end ; x := list [ i ] [ 3 ] ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_VAR 0 3
22105: PUSH
22106: LD_VAR 0 1
22110: ARRAY
22111: PUSH
22112: LD_INT 3
22114: ARRAY
22115: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22116: LD_ADDR_VAR 0 7
22120: PUSH
22121: LD_VAR 0 3
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PUSH
22132: LD_INT 4
22134: ARRAY
22135: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22136: LD_ADDR_VAR 0 9
22140: PUSH
22141: LD_VAR 0 6
22145: PPUSH
22146: LD_VAR 0 7
22150: PPUSH
22151: LD_INT 16
22153: PPUSH
22154: CALL 67406 0 3
22158: ST_TO_ADDR
// if not cratesNearbyPoint then
22159: LD_VAR 0 9
22163: NOT
22164: IFFALSE 22170
// exit ;
22166: POP
22167: POP
22168: GO 22627
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_VAR 0 5
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 60
22192: PUSH
22193: EMPTY
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 91
22202: PUSH
22203: LD_VAR 0 8
22207: PUSH
22208: LD_INT 6
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 25
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 25
22231: PUSH
22232: LD_INT 16
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: PPUSH
22250: CALL_OW 69
22254: PUSH
22255: LD_VAR 0 8
22259: PPUSH
22260: CALL_OW 313
22264: PPUSH
22265: LD_INT 3
22267: PUSH
22268: LD_INT 60
22270: PUSH
22271: EMPTY
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 25
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 16
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 72
22314: UNION
22315: ST_TO_ADDR
// if tmp then
22316: LD_VAR 0 4
22320: IFFALSE 22400
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 4
22331: PPUSH
22332: LD_INT 3
22334: PPUSH
22335: CALL 65375 0 2
22339: ST_TO_ADDR
// for j in tmp do
22340: LD_ADDR_VAR 0 2
22344: PUSH
22345: LD_VAR 0 4
22349: PUSH
22350: FOR_IN
22351: IFFALSE 22394
// begin if IsInUnit ( j ) then
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 310
22362: IFFALSE 22373
// ComExit ( j ) ;
22364: LD_VAR 0 2
22368: PPUSH
22369: CALL 65458 0 1
// AddComCollect ( j , x , y ) ;
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 6
22382: PPUSH
22383: LD_VAR 0 7
22387: PPUSH
22388: CALL_OW 177
// end ;
22392: GO 22350
22394: POP
22395: POP
// exit ;
22396: POP
22397: POP
22398: GO 22627
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22400: LD_ADDR_VAR 0 4
22404: PUSH
22405: LD_INT 22
22407: PUSH
22408: LD_VAR 0 5
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 91
22419: PUSH
22420: LD_VAR 0 8
22424: PUSH
22425: LD_INT 8
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 34
22438: PUSH
22439: LD_INT 12
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 34
22448: PUSH
22449: LD_INT 51
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 34
22458: PUSH
22459: LD_INT 32
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 34
22468: PUSH
22469: LD_INT 89
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 69
22492: ST_TO_ADDR
// if tmp then
22493: LD_VAR 0 4
22497: IFFALSE 22623
// begin for j in tmp do
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_VAR 0 4
22508: PUSH
22509: FOR_IN
22510: IFFALSE 22621
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22512: LD_VAR 0 2
22516: PPUSH
22517: CALL_OW 262
22521: PUSH
22522: LD_INT 3
22524: EQUAL
22525: PUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: CALL_OW 261
22535: PUSH
22536: LD_INT 20
22538: GREATER
22539: OR
22540: PUSH
22541: LD_VAR 0 2
22545: PPUSH
22546: CALL_OW 314
22550: NOT
22551: AND
22552: PUSH
22553: LD_VAR 0 2
22557: PPUSH
22558: CALL_OW 263
22562: PUSH
22563: LD_INT 1
22565: NONEQUAL
22566: PUSH
22567: LD_VAR 0 2
22571: PPUSH
22572: CALL_OW 311
22576: OR
22577: AND
22578: IFFALSE 22619
// begin ComCollect ( j , x , y ) ;
22580: LD_VAR 0 2
22584: PPUSH
22585: LD_VAR 0 6
22589: PPUSH
22590: LD_VAR 0 7
22594: PPUSH
22595: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_VAR 0 8
22608: PPUSH
22609: CALL_OW 172
// exit ;
22613: POP
22614: POP
22615: POP
22616: POP
22617: GO 22627
// end ;
22619: GO 22509
22621: POP
22622: POP
// end ; end ;
22623: GO 21998
22625: POP
22626: POP
// end ; end_of_file
22627: PPOPN 9
22629: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22630: LD_INT 0
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 264
22645: PUSH
22646: LD_INT 91
22648: EQUAL
22649: IFFALSE 22721
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22651: LD_INT 68
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 255
22663: PPUSH
22664: CALL_OW 321
22668: PUSH
22669: LD_INT 2
22671: EQUAL
22672: IFFALSE 22684
// eff := 70 else
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_INT 70
22681: ST_TO_ADDR
22682: GO 22692
// eff := 30 ;
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_INT 30
22691: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 250
22701: PPUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 251
22711: PPUSH
22712: LD_VAR 0 4
22716: PPUSH
22717: CALL_OW 495
// end ; end ;
22721: LD_VAR 0 2
22725: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22726: LD_INT 0
22728: PPUSH
// end ;
22729: LD_VAR 0 4
22733: RET
// export function SOS_Command ( cmd ) ; begin
22734: LD_INT 0
22736: PPUSH
// end ;
22737: LD_VAR 0 2
22741: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22742: LD_INT 0
22744: PPUSH
// end ;
22745: LD_VAR 0 6
22749: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22750: LD_INT 0
22752: PPUSH
22753: PPUSH
// if not vehicle or not factory then
22754: LD_VAR 0 1
22758: NOT
22759: PUSH
22760: LD_VAR 0 2
22764: NOT
22765: OR
22766: IFFALSE 22770
// exit ;
22768: GO 23001
// if factoryWaypoints >= factory then
22770: LD_EXP 87
22774: PUSH
22775: LD_VAR 0 2
22779: GREATEREQUAL
22780: IFFALSE 23001
// if factoryWaypoints [ factory ] then
22782: LD_EXP 87
22786: PUSH
22787: LD_VAR 0 2
22791: ARRAY
22792: IFFALSE 23001
// begin if GetControl ( vehicle ) = control_manual then
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 263
22803: PUSH
22804: LD_INT 1
22806: EQUAL
22807: IFFALSE 22888
// begin driver := IsDrivenBy ( vehicle ) ;
22809: LD_ADDR_VAR 0 4
22813: PUSH
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 311
22823: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22824: LD_VAR 0 4
22828: PPUSH
22829: LD_EXP 87
22833: PUSH
22834: LD_VAR 0 2
22838: ARRAY
22839: PUSH
22840: LD_INT 3
22842: ARRAY
22843: PPUSH
22844: LD_EXP 87
22848: PUSH
22849: LD_VAR 0 2
22853: ARRAY
22854: PUSH
22855: LD_INT 4
22857: ARRAY
22858: PPUSH
22859: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22863: LD_VAR 0 4
22867: PPUSH
22868: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22872: LD_VAR 0 4
22876: PPUSH
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 180
// end else
22886: GO 23001
// if GetControl ( vehicle ) = control_remote then
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 263
22897: PUSH
22898: LD_INT 2
22900: EQUAL
22901: IFFALSE 22962
// begin wait ( 0 0$2 ) ;
22903: LD_INT 70
22905: PPUSH
22906: CALL_OW 67
// if Connect ( vehicle ) then
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL 35666 0 1
22919: IFFALSE 22960
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22921: LD_VAR 0 1
22925: PPUSH
22926: LD_EXP 87
22930: PUSH
22931: LD_VAR 0 2
22935: ARRAY
22936: PUSH
22937: LD_INT 3
22939: ARRAY
22940: PPUSH
22941: LD_EXP 87
22945: PUSH
22946: LD_VAR 0 2
22950: ARRAY
22951: PUSH
22952: LD_INT 4
22954: ARRAY
22955: PPUSH
22956: CALL_OW 171
// end else
22960: GO 23001
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22962: LD_VAR 0 1
22966: PPUSH
22967: LD_EXP 87
22971: PUSH
22972: LD_VAR 0 2
22976: ARRAY
22977: PUSH
22978: LD_INT 3
22980: ARRAY
22981: PPUSH
22982: LD_EXP 87
22986: PUSH
22987: LD_VAR 0 2
22991: ARRAY
22992: PUSH
22993: LD_INT 4
22995: ARRAY
22996: PPUSH
22997: CALL_OW 171
// end ; end ;
23001: LD_VAR 0 3
23005: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23006: LD_INT 0
23008: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23009: LD_VAR 0 1
23013: PUSH
23014: LD_INT 250
23016: EQUAL
23017: PUSH
23018: LD_VAR 0 2
23022: PPUSH
23023: CALL_OW 264
23027: PUSH
23028: LD_INT 81
23030: EQUAL
23031: AND
23032: IFFALSE 23053
// MinerPlaceMine ( unit , x , y ) ;
23034: LD_VAR 0 2
23038: PPUSH
23039: LD_VAR 0 4
23043: PPUSH
23044: LD_VAR 0 5
23048: PPUSH
23049: CALL 25877 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23053: LD_VAR 0 1
23057: PUSH
23058: LD_INT 251
23060: EQUAL
23061: PUSH
23062: LD_VAR 0 2
23066: PPUSH
23067: CALL_OW 264
23071: PUSH
23072: LD_INT 81
23074: EQUAL
23075: AND
23076: IFFALSE 23097
// MinerDetonateMine ( unit , x , y ) ;
23078: LD_VAR 0 2
23082: PPUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: LD_VAR 0 5
23092: PPUSH
23093: CALL 26152 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23097: LD_VAR 0 1
23101: PUSH
23102: LD_INT 252
23104: EQUAL
23105: PUSH
23106: LD_VAR 0 2
23110: PPUSH
23111: CALL_OW 264
23115: PUSH
23116: LD_INT 81
23118: EQUAL
23119: AND
23120: IFFALSE 23141
// MinerCreateMinefield ( unit , x , y ) ;
23122: LD_VAR 0 2
23126: PPUSH
23127: LD_VAR 0 4
23131: PPUSH
23132: LD_VAR 0 5
23136: PPUSH
23137: CALL 26569 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_INT 253
23148: EQUAL
23149: PUSH
23150: LD_VAR 0 2
23154: PPUSH
23155: CALL_OW 257
23159: PUSH
23160: LD_INT 5
23162: EQUAL
23163: AND
23164: IFFALSE 23185
// ComBinocular ( unit , x , y ) ;
23166: LD_VAR 0 2
23170: PPUSH
23171: LD_VAR 0 4
23175: PPUSH
23176: LD_VAR 0 5
23180: PPUSH
23181: CALL 26938 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23185: LD_VAR 0 1
23189: PUSH
23190: LD_INT 254
23192: EQUAL
23193: PUSH
23194: LD_VAR 0 2
23198: PPUSH
23199: CALL_OW 264
23203: PUSH
23204: LD_INT 99
23206: EQUAL
23207: AND
23208: PUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: CALL_OW 263
23218: PUSH
23219: LD_INT 3
23221: EQUAL
23222: AND
23223: IFFALSE 23239
// HackDestroyVehicle ( unit , selectedUnit ) ;
23225: LD_VAR 0 2
23229: PPUSH
23230: LD_VAR 0 3
23234: PPUSH
23235: CALL 25241 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23239: LD_VAR 0 1
23243: PUSH
23244: LD_INT 255
23246: EQUAL
23247: PUSH
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL_OW 264
23257: PUSH
23258: LD_INT 14
23260: PUSH
23261: LD_INT 53
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: IN
23268: AND
23269: PUSH
23270: LD_VAR 0 4
23274: PPUSH
23275: LD_VAR 0 5
23279: PPUSH
23280: CALL_OW 488
23284: AND
23285: IFFALSE 23309
// CutTreeXYR ( unit , x , y , 12 ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: LD_VAR 0 4
23296: PPUSH
23297: LD_VAR 0 5
23301: PPUSH
23302: LD_INT 12
23304: PPUSH
23305: CALL 23404 0 4
// if cmd = 256 then
23309: LD_VAR 0 1
23313: PUSH
23314: LD_INT 256
23316: EQUAL
23317: IFFALSE 23338
// SetFactoryWaypoint ( unit , x , y ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: LD_VAR 0 4
23328: PPUSH
23329: LD_VAR 0 5
23333: PPUSH
23334: CALL 21319 0 3
// if cmd = 257 then
23338: LD_VAR 0 1
23342: PUSH
23343: LD_INT 257
23345: EQUAL
23346: IFFALSE 23367
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23348: LD_VAR 0 2
23352: PPUSH
23353: LD_VAR 0 4
23357: PPUSH
23358: LD_VAR 0 5
23362: PPUSH
23363: CALL 21681 0 3
// if cmd = 258 then
23367: LD_VAR 0 1
23371: PUSH
23372: LD_INT 258
23374: EQUAL
23375: IFFALSE 23399
// BurnTreeXYR ( unit , x , y , 8 ) ;
23377: LD_VAR 0 2
23381: PPUSH
23382: LD_VAR 0 4
23386: PPUSH
23387: LD_VAR 0 5
23391: PPUSH
23392: LD_INT 8
23394: PPUSH
23395: CALL 23798 0 4
// end ;
23399: LD_VAR 0 6
23403: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 302
23424: NOT
23425: PUSH
23426: LD_VAR 0 2
23430: PPUSH
23431: LD_VAR 0 3
23435: PPUSH
23436: CALL_OW 488
23440: NOT
23441: OR
23442: PUSH
23443: LD_VAR 0 4
23447: NOT
23448: OR
23449: IFFALSE 23453
// exit ;
23451: GO 23793
// list := [ ] ;
23453: LD_ADDR_VAR 0 13
23457: PUSH
23458: EMPTY
23459: ST_TO_ADDR
// if x - r < 0 then
23460: LD_VAR 0 2
23464: PUSH
23465: LD_VAR 0 4
23469: MINUS
23470: PUSH
23471: LD_INT 0
23473: LESS
23474: IFFALSE 23486
// min_x := 0 else
23476: LD_ADDR_VAR 0 7
23480: PUSH
23481: LD_INT 0
23483: ST_TO_ADDR
23484: GO 23502
// min_x := x - r ;
23486: LD_ADDR_VAR 0 7
23490: PUSH
23491: LD_VAR 0 2
23495: PUSH
23496: LD_VAR 0 4
23500: MINUS
23501: ST_TO_ADDR
// if y - r < 0 then
23502: LD_VAR 0 3
23506: PUSH
23507: LD_VAR 0 4
23511: MINUS
23512: PUSH
23513: LD_INT 0
23515: LESS
23516: IFFALSE 23528
// min_y := 0 else
23518: LD_ADDR_VAR 0 8
23522: PUSH
23523: LD_INT 0
23525: ST_TO_ADDR
23526: GO 23544
// min_y := y - r ;
23528: LD_ADDR_VAR 0 8
23532: PUSH
23533: LD_VAR 0 3
23537: PUSH
23538: LD_VAR 0 4
23542: MINUS
23543: ST_TO_ADDR
// max_x := x + r ;
23544: LD_ADDR_VAR 0 9
23548: PUSH
23549: LD_VAR 0 2
23553: PUSH
23554: LD_VAR 0 4
23558: PLUS
23559: ST_TO_ADDR
// max_y := y + r ;
23560: LD_ADDR_VAR 0 10
23564: PUSH
23565: LD_VAR 0 3
23569: PUSH
23570: LD_VAR 0 4
23574: PLUS
23575: ST_TO_ADDR
// for _x = min_x to max_x do
23576: LD_ADDR_VAR 0 11
23580: PUSH
23581: DOUBLE
23582: LD_VAR 0 7
23586: DEC
23587: ST_TO_ADDR
23588: LD_VAR 0 9
23592: PUSH
23593: FOR_TO
23594: IFFALSE 23711
// for _y = min_y to max_y do
23596: LD_ADDR_VAR 0 12
23600: PUSH
23601: DOUBLE
23602: LD_VAR 0 8
23606: DEC
23607: ST_TO_ADDR
23608: LD_VAR 0 10
23612: PUSH
23613: FOR_TO
23614: IFFALSE 23707
// begin if not ValidHex ( _x , _y ) then
23616: LD_VAR 0 11
23620: PPUSH
23621: LD_VAR 0 12
23625: PPUSH
23626: CALL_OW 488
23630: NOT
23631: IFFALSE 23635
// continue ;
23633: GO 23613
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23635: LD_VAR 0 11
23639: PPUSH
23640: LD_VAR 0 12
23644: PPUSH
23645: CALL_OW 351
23649: PUSH
23650: LD_VAR 0 11
23654: PPUSH
23655: LD_VAR 0 12
23659: PPUSH
23660: CALL_OW 554
23664: AND
23665: IFFALSE 23705
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23667: LD_ADDR_VAR 0 13
23671: PUSH
23672: LD_VAR 0 13
23676: PPUSH
23677: LD_VAR 0 13
23681: PUSH
23682: LD_INT 1
23684: PLUS
23685: PPUSH
23686: LD_VAR 0 11
23690: PUSH
23691: LD_VAR 0 12
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PPUSH
23700: CALL_OW 2
23704: ST_TO_ADDR
// end ;
23705: GO 23613
23707: POP
23708: POP
23709: GO 23593
23711: POP
23712: POP
// if not list then
23713: LD_VAR 0 13
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23793
// for i in list do
23722: LD_ADDR_VAR 0 6
23726: PUSH
23727: LD_VAR 0 13
23731: PUSH
23732: FOR_IN
23733: IFFALSE 23791
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23735: LD_VAR 0 1
23739: PPUSH
23740: LD_STRING M
23742: PUSH
23743: LD_VAR 0 6
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: PUSH
23752: LD_VAR 0 6
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: PPUSH
23785: CALL_OW 447
23789: GO 23732
23791: POP
23792: POP
// end ;
23793: LD_VAR 0 5
23797: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
23802: PPUSH
23803: PPUSH
23804: PPUSH
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 302
23818: NOT
23819: PUSH
23820: LD_VAR 0 2
23824: PPUSH
23825: LD_VAR 0 3
23829: PPUSH
23830: CALL_OW 488
23834: NOT
23835: OR
23836: PUSH
23837: LD_VAR 0 4
23841: NOT
23842: OR
23843: IFFALSE 23847
// exit ;
23845: GO 24195
// list := [ ] ;
23847: LD_ADDR_VAR 0 13
23851: PUSH
23852: EMPTY
23853: ST_TO_ADDR
// if x - r < 0 then
23854: LD_VAR 0 2
23858: PUSH
23859: LD_VAR 0 4
23863: MINUS
23864: PUSH
23865: LD_INT 0
23867: LESS
23868: IFFALSE 23880
// min_x := 0 else
23870: LD_ADDR_VAR 0 7
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
23878: GO 23896
// min_x := x - r ;
23880: LD_ADDR_VAR 0 7
23884: PUSH
23885: LD_VAR 0 2
23889: PUSH
23890: LD_VAR 0 4
23894: MINUS
23895: ST_TO_ADDR
// if y - r < 0 then
23896: LD_VAR 0 3
23900: PUSH
23901: LD_VAR 0 4
23905: MINUS
23906: PUSH
23907: LD_INT 0
23909: LESS
23910: IFFALSE 23922
// min_y := 0 else
23912: LD_ADDR_VAR 0 8
23916: PUSH
23917: LD_INT 0
23919: ST_TO_ADDR
23920: GO 23938
// min_y := y - r ;
23922: LD_ADDR_VAR 0 8
23926: PUSH
23927: LD_VAR 0 3
23931: PUSH
23932: LD_VAR 0 4
23936: MINUS
23937: ST_TO_ADDR
// max_x := x + r ;
23938: LD_ADDR_VAR 0 9
23942: PUSH
23943: LD_VAR 0 2
23947: PUSH
23948: LD_VAR 0 4
23952: PLUS
23953: ST_TO_ADDR
// max_y := y + r ;
23954: LD_ADDR_VAR 0 10
23958: PUSH
23959: LD_VAR 0 3
23963: PUSH
23964: LD_VAR 0 4
23968: PLUS
23969: ST_TO_ADDR
// for _x = min_x to max_x do
23970: LD_ADDR_VAR 0 11
23974: PUSH
23975: DOUBLE
23976: LD_VAR 0 7
23980: DEC
23981: ST_TO_ADDR
23982: LD_VAR 0 9
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24105
// for _y = min_y to max_y do
23990: LD_ADDR_VAR 0 12
23994: PUSH
23995: DOUBLE
23996: LD_VAR 0 8
24000: DEC
24001: ST_TO_ADDR
24002: LD_VAR 0 10
24006: PUSH
24007: FOR_TO
24008: IFFALSE 24101
// begin if not ValidHex ( _x , _y ) then
24010: LD_VAR 0 11
24014: PPUSH
24015: LD_VAR 0 12
24019: PPUSH
24020: CALL_OW 488
24024: NOT
24025: IFFALSE 24029
// continue ;
24027: GO 24007
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24029: LD_VAR 0 11
24033: PPUSH
24034: LD_VAR 0 12
24038: PPUSH
24039: CALL_OW 351
24043: PUSH
24044: LD_VAR 0 11
24048: PPUSH
24049: LD_VAR 0 12
24053: PPUSH
24054: CALL_OW 554
24058: AND
24059: IFFALSE 24099
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24061: LD_ADDR_VAR 0 13
24065: PUSH
24066: LD_VAR 0 13
24070: PPUSH
24071: LD_VAR 0 13
24075: PUSH
24076: LD_INT 1
24078: PLUS
24079: PPUSH
24080: LD_VAR 0 11
24084: PUSH
24085: LD_VAR 0 12
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PPUSH
24094: CALL_OW 2
24098: ST_TO_ADDR
// end ;
24099: GO 24007
24101: POP
24102: POP
24103: GO 23987
24105: POP
24106: POP
// if not list then
24107: LD_VAR 0 13
24111: NOT
24112: IFFALSE 24116
// exit ;
24114: GO 24195
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24116: LD_ADDR_VAR 0 13
24120: PUSH
24121: LD_VAR 0 1
24125: PPUSH
24126: LD_VAR 0 13
24130: PPUSH
24131: LD_INT 1
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: CALL 32808 0 4
24141: ST_TO_ADDR
// ComStop ( flame ) ;
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 141
// for i in list do
24151: LD_ADDR_VAR 0 6
24155: PUSH
24156: LD_VAR 0 13
24160: PUSH
24161: FOR_IN
24162: IFFALSE 24193
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24164: LD_VAR 0 1
24168: PPUSH
24169: LD_VAR 0 6
24173: PUSH
24174: LD_INT 1
24176: ARRAY
24177: PPUSH
24178: LD_VAR 0 6
24182: PUSH
24183: LD_INT 2
24185: ARRAY
24186: PPUSH
24187: CALL_OW 176
24191: GO 24161
24193: POP
24194: POP
// end ;
24195: LD_VAR 0 5
24199: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24200: LD_EXP 90
24204: NOT
24205: IFFALSE 24255
24207: GO 24209
24209: DISABLE
// begin initHack := true ;
24210: LD_ADDR_EXP 90
24214: PUSH
24215: LD_INT 1
24217: ST_TO_ADDR
// hackTanks := [ ] ;
24218: LD_ADDR_EXP 91
24222: PUSH
24223: EMPTY
24224: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24225: LD_ADDR_EXP 92
24229: PUSH
24230: EMPTY
24231: ST_TO_ADDR
// hackLimit := 3 ;
24232: LD_ADDR_EXP 93
24236: PUSH
24237: LD_INT 3
24239: ST_TO_ADDR
// hackDist := 12 ;
24240: LD_ADDR_EXP 94
24244: PUSH
24245: LD_INT 12
24247: ST_TO_ADDR
// hackCounter := [ ] ;
24248: LD_ADDR_EXP 95
24252: PUSH
24253: EMPTY
24254: ST_TO_ADDR
// end ;
24255: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24256: LD_EXP 90
24260: PUSH
24261: LD_INT 34
24263: PUSH
24264: LD_INT 99
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PPUSH
24271: CALL_OW 69
24275: AND
24276: IFFALSE 24529
24278: GO 24280
24280: DISABLE
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
// begin enable ;
24285: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24286: LD_ADDR_VAR 0 1
24290: PUSH
24291: LD_INT 34
24293: PUSH
24294: LD_INT 99
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PPUSH
24301: CALL_OW 69
24305: PUSH
24306: FOR_IN
24307: IFFALSE 24527
// begin if not i in hackTanks then
24309: LD_VAR 0 1
24313: PUSH
24314: LD_EXP 91
24318: IN
24319: NOT
24320: IFFALSE 24403
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24322: LD_ADDR_EXP 91
24326: PUSH
24327: LD_EXP 91
24331: PPUSH
24332: LD_EXP 91
24336: PUSH
24337: LD_INT 1
24339: PLUS
24340: PPUSH
24341: LD_VAR 0 1
24345: PPUSH
24346: CALL_OW 1
24350: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24351: LD_ADDR_EXP 92
24355: PUSH
24356: LD_EXP 92
24360: PPUSH
24361: LD_EXP 92
24365: PUSH
24366: LD_INT 1
24368: PLUS
24369: PPUSH
24370: EMPTY
24371: PPUSH
24372: CALL_OW 1
24376: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24377: LD_ADDR_EXP 95
24381: PUSH
24382: LD_EXP 95
24386: PPUSH
24387: LD_EXP 95
24391: PUSH
24392: LD_INT 1
24394: PLUS
24395: PPUSH
24396: EMPTY
24397: PPUSH
24398: CALL_OW 1
24402: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 302
24412: NOT
24413: IFFALSE 24426
// begin HackUnlinkAll ( i ) ;
24415: LD_VAR 0 1
24419: PPUSH
24420: CALL 24532 0 1
// continue ;
24424: GO 24306
// end ; HackCheckCapturedStatus ( i ) ;
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL 24975 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_INT 81
24442: PUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 255
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 33
24459: PUSH
24460: LD_INT 3
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 91
24469: PUSH
24470: LD_VAR 0 1
24474: PUSH
24475: LD_EXP 94
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 50
24487: PUSH
24488: EMPTY
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 69
24501: ST_TO_ADDR
// if not tmp then
24502: LD_VAR 0 2
24506: NOT
24507: IFFALSE 24511
// continue ;
24509: GO 24306
// HackLink ( i , tmp ) ;
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_VAR 0 2
24520: PPUSH
24521: CALL 24668 0 2
// end ;
24525: GO 24306
24527: POP
24528: POP
// end ;
24529: PPOPN 2
24531: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24532: LD_INT 0
24534: PPUSH
24535: PPUSH
24536: PPUSH
// if not hack in hackTanks then
24537: LD_VAR 0 1
24541: PUSH
24542: LD_EXP 91
24546: IN
24547: NOT
24548: IFFALSE 24552
// exit ;
24550: GO 24663
// index := GetElementIndex ( hackTanks , hack ) ;
24552: LD_ADDR_VAR 0 4
24556: PUSH
24557: LD_EXP 91
24561: PPUSH
24562: LD_VAR 0 1
24566: PPUSH
24567: CALL 32105 0 2
24571: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24572: LD_EXP 92
24576: PUSH
24577: LD_VAR 0 4
24581: ARRAY
24582: IFFALSE 24663
// begin for i in hackTanksCaptured [ index ] do
24584: LD_ADDR_VAR 0 3
24588: PUSH
24589: LD_EXP 92
24593: PUSH
24594: LD_VAR 0 4
24598: ARRAY
24599: PUSH
24600: FOR_IN
24601: IFFALSE 24627
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24603: LD_VAR 0 3
24607: PUSH
24608: LD_INT 1
24610: ARRAY
24611: PPUSH
24612: LD_VAR 0 3
24616: PUSH
24617: LD_INT 2
24619: ARRAY
24620: PPUSH
24621: CALL_OW 235
24625: GO 24600
24627: POP
24628: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24629: LD_ADDR_EXP 92
24633: PUSH
24634: LD_EXP 92
24638: PPUSH
24639: LD_VAR 0 4
24643: PPUSH
24644: EMPTY
24645: PPUSH
24646: CALL_OW 1
24650: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24651: LD_VAR 0 1
24655: PPUSH
24656: LD_INT 0
24658: PPUSH
24659: CALL_OW 505
// end ; end ;
24663: LD_VAR 0 2
24667: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24668: LD_INT 0
24670: PPUSH
24671: PPUSH
24672: PPUSH
// if not hack in hackTanks or not vehicles then
24673: LD_VAR 0 1
24677: PUSH
24678: LD_EXP 91
24682: IN
24683: NOT
24684: PUSH
24685: LD_VAR 0 2
24689: NOT
24690: OR
24691: IFFALSE 24695
// exit ;
24693: GO 24970
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24695: LD_ADDR_VAR 0 2
24699: PUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: LD_INT 1
24715: PPUSH
24716: CALL 32755 0 4
24720: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24721: LD_ADDR_VAR 0 5
24725: PUSH
24726: LD_EXP 91
24730: PPUSH
24731: LD_VAR 0 1
24735: PPUSH
24736: CALL 32105 0 2
24740: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24741: LD_EXP 92
24745: PUSH
24746: LD_VAR 0 5
24750: ARRAY
24751: PUSH
24752: LD_EXP 93
24756: LESS
24757: IFFALSE 24946
// begin for i := 1 to vehicles do
24759: LD_ADDR_VAR 0 4
24763: PUSH
24764: DOUBLE
24765: LD_INT 1
24767: DEC
24768: ST_TO_ADDR
24769: LD_VAR 0 2
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24944
// begin if hackTanksCaptured [ index ] = hackLimit then
24777: LD_EXP 92
24781: PUSH
24782: LD_VAR 0 5
24786: ARRAY
24787: PUSH
24788: LD_EXP 93
24792: EQUAL
24793: IFFALSE 24797
// break ;
24795: GO 24944
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24797: LD_ADDR_EXP 95
24801: PUSH
24802: LD_EXP 95
24806: PPUSH
24807: LD_VAR 0 5
24811: PPUSH
24812: LD_EXP 95
24816: PUSH
24817: LD_VAR 0 5
24821: ARRAY
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: CALL_OW 1
24831: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24832: LD_ADDR_EXP 92
24836: PUSH
24837: LD_EXP 92
24841: PPUSH
24842: LD_VAR 0 5
24846: PUSH
24847: LD_EXP 92
24851: PUSH
24852: LD_VAR 0 5
24856: ARRAY
24857: PUSH
24858: LD_INT 1
24860: PLUS
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PPUSH
24866: LD_VAR 0 2
24870: PUSH
24871: LD_VAR 0 4
24875: ARRAY
24876: PUSH
24877: LD_VAR 0 2
24881: PUSH
24882: LD_VAR 0 4
24886: ARRAY
24887: PPUSH
24888: CALL_OW 255
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL 32320 0 3
24901: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24902: LD_VAR 0 2
24906: PUSH
24907: LD_VAR 0 4
24911: ARRAY
24912: PPUSH
24913: LD_VAR 0 1
24917: PPUSH
24918: CALL_OW 255
24922: PPUSH
24923: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24927: LD_VAR 0 2
24931: PUSH
24932: LD_VAR 0 4
24936: ARRAY
24937: PPUSH
24938: CALL_OW 141
// end ;
24942: GO 24774
24944: POP
24945: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24946: LD_VAR 0 1
24950: PPUSH
24951: LD_EXP 92
24955: PUSH
24956: LD_VAR 0 5
24960: ARRAY
24961: PUSH
24962: LD_INT 0
24964: PLUS
24965: PPUSH
24966: CALL_OW 505
// end ;
24970: LD_VAR 0 3
24974: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
// if not hack in hackTanks then
24981: LD_VAR 0 1
24985: PUSH
24986: LD_EXP 91
24990: IN
24991: NOT
24992: IFFALSE 24996
// exit ;
24994: GO 25236
// index := GetElementIndex ( hackTanks , hack ) ;
24996: LD_ADDR_VAR 0 4
25000: PUSH
25001: LD_EXP 91
25005: PPUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL 32105 0 2
25015: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25016: LD_ADDR_VAR 0 3
25020: PUSH
25021: DOUBLE
25022: LD_EXP 92
25026: PUSH
25027: LD_VAR 0 4
25031: ARRAY
25032: INC
25033: ST_TO_ADDR
25034: LD_INT 1
25036: PUSH
25037: FOR_DOWNTO
25038: IFFALSE 25210
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25040: LD_ADDR_VAR 0 5
25044: PUSH
25045: LD_EXP 92
25049: PUSH
25050: LD_VAR 0 4
25054: ARRAY
25055: PUSH
25056: LD_VAR 0 3
25060: ARRAY
25061: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25062: LD_VAR 0 5
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PPUSH
25071: CALL_OW 302
25075: NOT
25076: PUSH
25077: LD_VAR 0 5
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: CALL_OW 255
25090: PUSH
25091: LD_VAR 0 1
25095: PPUSH
25096: CALL_OW 255
25100: NONEQUAL
25101: OR
25102: IFFALSE 25208
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25104: LD_VAR 0 5
25108: PUSH
25109: LD_INT 1
25111: ARRAY
25112: PPUSH
25113: CALL_OW 305
25117: PUSH
25118: LD_VAR 0 5
25122: PUSH
25123: LD_INT 1
25125: ARRAY
25126: PPUSH
25127: CALL_OW 255
25131: PUSH
25132: LD_VAR 0 1
25136: PPUSH
25137: CALL_OW 255
25141: EQUAL
25142: AND
25143: IFFALSE 25167
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25145: LD_VAR 0 5
25149: PUSH
25150: LD_INT 1
25152: ARRAY
25153: PPUSH
25154: LD_VAR 0 5
25158: PUSH
25159: LD_INT 2
25161: ARRAY
25162: PPUSH
25163: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25167: LD_ADDR_EXP 92
25171: PUSH
25172: LD_EXP 92
25176: PPUSH
25177: LD_VAR 0 4
25181: PPUSH
25182: LD_EXP 92
25186: PUSH
25187: LD_VAR 0 4
25191: ARRAY
25192: PPUSH
25193: LD_VAR 0 3
25197: PPUSH
25198: CALL_OW 3
25202: PPUSH
25203: CALL_OW 1
25207: ST_TO_ADDR
// end ; end ;
25208: GO 25037
25210: POP
25211: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25212: LD_VAR 0 1
25216: PPUSH
25217: LD_EXP 92
25221: PUSH
25222: LD_VAR 0 4
25226: ARRAY
25227: PUSH
25228: LD_INT 0
25230: PLUS
25231: PPUSH
25232: CALL_OW 505
// end ;
25236: LD_VAR 0 2
25240: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
// if not hack in hackTanks then
25247: LD_VAR 0 1
25251: PUSH
25252: LD_EXP 91
25256: IN
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25347
// index := GetElementIndex ( hackTanks , hack ) ;
25262: LD_ADDR_VAR 0 5
25266: PUSH
25267: LD_EXP 91
25271: PPUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL 32105 0 2
25281: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25282: LD_ADDR_VAR 0 4
25286: PUSH
25287: DOUBLE
25288: LD_INT 1
25290: DEC
25291: ST_TO_ADDR
25292: LD_EXP 92
25296: PUSH
25297: LD_VAR 0 5
25301: ARRAY
25302: PUSH
25303: FOR_TO
25304: IFFALSE 25345
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25306: LD_EXP 92
25310: PUSH
25311: LD_VAR 0 5
25315: ARRAY
25316: PUSH
25317: LD_VAR 0 4
25321: ARRAY
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PUSH
25327: LD_VAR 0 2
25331: EQUAL
25332: IFFALSE 25343
// KillUnit ( vehicle ) ;
25334: LD_VAR 0 2
25338: PPUSH
25339: CALL_OW 66
25343: GO 25303
25345: POP
25346: POP
// end ;
25347: LD_VAR 0 3
25351: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25352: LD_EXP 96
25356: NOT
25357: IFFALSE 25392
25359: GO 25361
25361: DISABLE
// begin initMiner := true ;
25362: LD_ADDR_EXP 96
25366: PUSH
25367: LD_INT 1
25369: ST_TO_ADDR
// minersList := [ ] ;
25370: LD_ADDR_EXP 97
25374: PUSH
25375: EMPTY
25376: ST_TO_ADDR
// minerMinesList := [ ] ;
25377: LD_ADDR_EXP 98
25381: PUSH
25382: EMPTY
25383: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25384: LD_ADDR_EXP 99
25388: PUSH
25389: LD_INT 5
25391: ST_TO_ADDR
// end ;
25392: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25393: LD_EXP 96
25397: PUSH
25398: LD_INT 34
25400: PUSH
25401: LD_INT 81
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 69
25412: AND
25413: IFFALSE 25874
25415: GO 25417
25417: DISABLE
25418: LD_INT 0
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
// begin enable ;
25424: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25425: LD_ADDR_VAR 0 1
25429: PUSH
25430: LD_INT 34
25432: PUSH
25433: LD_INT 81
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PPUSH
25440: CALL_OW 69
25444: PUSH
25445: FOR_IN
25446: IFFALSE 25518
// begin if not i in minersList then
25448: LD_VAR 0 1
25452: PUSH
25453: LD_EXP 97
25457: IN
25458: NOT
25459: IFFALSE 25516
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25461: LD_ADDR_EXP 97
25465: PUSH
25466: LD_EXP 97
25470: PPUSH
25471: LD_EXP 97
25475: PUSH
25476: LD_INT 1
25478: PLUS
25479: PPUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25490: LD_ADDR_EXP 98
25494: PUSH
25495: LD_EXP 98
25499: PPUSH
25500: LD_EXP 98
25504: PUSH
25505: LD_INT 1
25507: PLUS
25508: PPUSH
25509: EMPTY
25510: PPUSH
25511: CALL_OW 1
25515: ST_TO_ADDR
// end end ;
25516: GO 25445
25518: POP
25519: POP
// for i := minerMinesList downto 1 do
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: DOUBLE
25526: LD_EXP 98
25530: INC
25531: ST_TO_ADDR
25532: LD_INT 1
25534: PUSH
25535: FOR_DOWNTO
25536: IFFALSE 25872
// begin if IsLive ( minersList [ i ] ) then
25538: LD_EXP 97
25542: PUSH
25543: LD_VAR 0 1
25547: ARRAY
25548: PPUSH
25549: CALL_OW 300
25553: IFFALSE 25581
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25555: LD_EXP 97
25559: PUSH
25560: LD_VAR 0 1
25564: ARRAY
25565: PPUSH
25566: LD_EXP 98
25570: PUSH
25571: LD_VAR 0 1
25575: ARRAY
25576: PPUSH
25577: CALL_OW 505
// if not minerMinesList [ i ] then
25581: LD_EXP 98
25585: PUSH
25586: LD_VAR 0 1
25590: ARRAY
25591: NOT
25592: IFFALSE 25596
// continue ;
25594: GO 25535
// for j := minerMinesList [ i ] downto 1 do
25596: LD_ADDR_VAR 0 2
25600: PUSH
25601: DOUBLE
25602: LD_EXP 98
25606: PUSH
25607: LD_VAR 0 1
25611: ARRAY
25612: INC
25613: ST_TO_ADDR
25614: LD_INT 1
25616: PUSH
25617: FOR_DOWNTO
25618: IFFALSE 25868
// begin side := GetSide ( minersList [ i ] ) ;
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_EXP 97
25629: PUSH
25630: LD_VAR 0 1
25634: ARRAY
25635: PPUSH
25636: CALL_OW 255
25640: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_EXP 98
25650: PUSH
25651: LD_VAR 0 1
25655: ARRAY
25656: PUSH
25657: LD_VAR 0 2
25661: ARRAY
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PPUSH
25667: LD_EXP 98
25671: PUSH
25672: LD_VAR 0 1
25676: ARRAY
25677: PUSH
25678: LD_VAR 0 2
25682: ARRAY
25683: PUSH
25684: LD_INT 2
25686: ARRAY
25687: PPUSH
25688: CALL_OW 428
25692: ST_TO_ADDR
// if not tmp then
25693: LD_VAR 0 4
25697: NOT
25698: IFFALSE 25702
// continue ;
25700: GO 25617
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25702: LD_VAR 0 4
25706: PUSH
25707: LD_INT 81
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: CALL_OW 69
25723: IN
25724: PUSH
25725: LD_EXP 98
25729: PUSH
25730: LD_VAR 0 1
25734: ARRAY
25735: PUSH
25736: LD_VAR 0 2
25740: ARRAY
25741: PUSH
25742: LD_INT 1
25744: ARRAY
25745: PPUSH
25746: LD_EXP 98
25750: PUSH
25751: LD_VAR 0 1
25755: ARRAY
25756: PUSH
25757: LD_VAR 0 2
25761: ARRAY
25762: PUSH
25763: LD_INT 2
25765: ARRAY
25766: PPUSH
25767: CALL_OW 458
25771: AND
25772: IFFALSE 25866
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25774: LD_EXP 98
25778: PUSH
25779: LD_VAR 0 1
25783: ARRAY
25784: PUSH
25785: LD_VAR 0 2
25789: ARRAY
25790: PUSH
25791: LD_INT 1
25793: ARRAY
25794: PPUSH
25795: LD_EXP 98
25799: PUSH
25800: LD_VAR 0 1
25804: ARRAY
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: PUSH
25812: LD_INT 2
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 3
25820: PPUSH
25821: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25825: LD_ADDR_EXP 98
25829: PUSH
25830: LD_EXP 98
25834: PPUSH
25835: LD_VAR 0 1
25839: PPUSH
25840: LD_EXP 98
25844: PUSH
25845: LD_VAR 0 1
25849: ARRAY
25850: PPUSH
25851: LD_VAR 0 2
25855: PPUSH
25856: CALL_OW 3
25860: PPUSH
25861: CALL_OW 1
25865: ST_TO_ADDR
// end ; end ;
25866: GO 25617
25868: POP
25869: POP
// end ;
25870: GO 25535
25872: POP
25873: POP
// end ;
25874: PPOPN 4
25876: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25877: LD_INT 0
25879: PPUSH
25880: PPUSH
// result := false ;
25881: LD_ADDR_VAR 0 4
25885: PUSH
25886: LD_INT 0
25888: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 264
25898: PUSH
25899: LD_INT 81
25901: EQUAL
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 26147
// index := GetElementIndex ( minersList , unit ) ;
25907: LD_ADDR_VAR 0 5
25911: PUSH
25912: LD_EXP 97
25916: PPUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL 32105 0 2
25926: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25927: LD_EXP 98
25931: PUSH
25932: LD_VAR 0 5
25936: ARRAY
25937: PUSH
25938: LD_EXP 99
25942: GREATEREQUAL
25943: IFFALSE 25947
// exit ;
25945: GO 26147
// ComMoveXY ( unit , x , y ) ;
25947: LD_VAR 0 1
25951: PPUSH
25952: LD_VAR 0 2
25956: PPUSH
25957: LD_VAR 0 3
25961: PPUSH
25962: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25966: LD_INT 35
25968: PPUSH
25969: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25973: LD_VAR 0 1
25977: PPUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: LD_VAR 0 3
25987: PPUSH
25988: CALL 63857 0 3
25992: NOT
25993: PUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 314
26003: AND
26004: IFFALSE 26008
// exit ;
26006: GO 26147
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26008: LD_VAR 0 2
26012: PPUSH
26013: LD_VAR 0 3
26017: PPUSH
26018: CALL_OW 428
26022: PUSH
26023: LD_VAR 0 1
26027: EQUAL
26028: PUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 314
26038: NOT
26039: AND
26040: IFFALSE 25966
// PlaySoundXY ( x , y , PlantMine ) ;
26042: LD_VAR 0 2
26046: PPUSH
26047: LD_VAR 0 3
26051: PPUSH
26052: LD_STRING PlantMine
26054: PPUSH
26055: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26059: LD_VAR 0 2
26063: PPUSH
26064: LD_VAR 0 3
26068: PPUSH
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 255
26078: PPUSH
26079: LD_INT 0
26081: PPUSH
26082: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26086: LD_ADDR_EXP 98
26090: PUSH
26091: LD_EXP 98
26095: PPUSH
26096: LD_VAR 0 5
26100: PUSH
26101: LD_EXP 98
26105: PUSH
26106: LD_VAR 0 5
26110: ARRAY
26111: PUSH
26112: LD_INT 1
26114: PLUS
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PPUSH
26120: LD_VAR 0 2
26124: PUSH
26125: LD_VAR 0 3
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL 32320 0 3
26138: ST_TO_ADDR
// result := true ;
26139: LD_ADDR_VAR 0 4
26143: PUSH
26144: LD_INT 1
26146: ST_TO_ADDR
// end ;
26147: LD_VAR 0 4
26151: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
26156: PPUSH
// if not unit in minersList then
26157: LD_VAR 0 1
26161: PUSH
26162: LD_EXP 97
26166: IN
26167: NOT
26168: IFFALSE 26172
// exit ;
26170: GO 26564
// index := GetElementIndex ( minersList , unit ) ;
26172: LD_ADDR_VAR 0 6
26176: PUSH
26177: LD_EXP 97
26181: PPUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL 32105 0 2
26191: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: DOUBLE
26198: LD_EXP 98
26202: PUSH
26203: LD_VAR 0 6
26207: ARRAY
26208: INC
26209: ST_TO_ADDR
26210: LD_INT 1
26212: PUSH
26213: FOR_DOWNTO
26214: IFFALSE 26375
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26216: LD_EXP 98
26220: PUSH
26221: LD_VAR 0 6
26225: ARRAY
26226: PUSH
26227: LD_VAR 0 5
26231: ARRAY
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PUSH
26237: LD_VAR 0 2
26241: EQUAL
26242: PUSH
26243: LD_EXP 98
26247: PUSH
26248: LD_VAR 0 6
26252: ARRAY
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PUSH
26260: LD_INT 2
26262: ARRAY
26263: PUSH
26264: LD_VAR 0 3
26268: EQUAL
26269: AND
26270: IFFALSE 26373
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26272: LD_EXP 98
26276: PUSH
26277: LD_VAR 0 6
26281: ARRAY
26282: PUSH
26283: LD_VAR 0 5
26287: ARRAY
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: PPUSH
26293: LD_EXP 98
26297: PUSH
26298: LD_VAR 0 6
26302: ARRAY
26303: PUSH
26304: LD_VAR 0 5
26308: ARRAY
26309: PUSH
26310: LD_INT 2
26312: ARRAY
26313: PPUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: CALL_OW 255
26323: PPUSH
26324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26328: LD_ADDR_EXP 98
26332: PUSH
26333: LD_EXP 98
26337: PPUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_EXP 98
26347: PUSH
26348: LD_VAR 0 6
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 5
26358: PPUSH
26359: CALL_OW 3
26363: PPUSH
26364: CALL_OW 1
26368: ST_TO_ADDR
// exit ;
26369: POP
26370: POP
26371: GO 26564
// end ; end ;
26373: GO 26213
26375: POP
26376: POP
// for i := minerMinesList [ index ] downto 1 do
26377: LD_ADDR_VAR 0 5
26381: PUSH
26382: DOUBLE
26383: LD_EXP 98
26387: PUSH
26388: LD_VAR 0 6
26392: ARRAY
26393: INC
26394: ST_TO_ADDR
26395: LD_INT 1
26397: PUSH
26398: FOR_DOWNTO
26399: IFFALSE 26562
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26401: LD_EXP 98
26405: PUSH
26406: LD_VAR 0 6
26410: ARRAY
26411: PUSH
26412: LD_VAR 0 5
26416: ARRAY
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_EXP 98
26426: PUSH
26427: LD_VAR 0 6
26431: ARRAY
26432: PUSH
26433: LD_VAR 0 5
26437: ARRAY
26438: PUSH
26439: LD_INT 2
26441: ARRAY
26442: PPUSH
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 298
26457: PUSH
26458: LD_INT 6
26460: LESS
26461: IFFALSE 26560
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26463: LD_EXP 98
26467: PUSH
26468: LD_VAR 0 6
26472: ARRAY
26473: PUSH
26474: LD_VAR 0 5
26478: ARRAY
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: LD_EXP 98
26488: PUSH
26489: LD_VAR 0 6
26493: ARRAY
26494: PUSH
26495: LD_VAR 0 5
26499: ARRAY
26500: PUSH
26501: LD_INT 2
26503: ARRAY
26504: PPUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 255
26514: PPUSH
26515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26519: LD_ADDR_EXP 98
26523: PUSH
26524: LD_EXP 98
26528: PPUSH
26529: LD_VAR 0 6
26533: PPUSH
26534: LD_EXP 98
26538: PUSH
26539: LD_VAR 0 6
26543: ARRAY
26544: PPUSH
26545: LD_VAR 0 5
26549: PPUSH
26550: CALL_OW 3
26554: PPUSH
26555: CALL_OW 1
26559: ST_TO_ADDR
// end ; end ;
26560: GO 26398
26562: POP
26563: POP
// end ;
26564: LD_VAR 0 4
26568: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 264
26589: PUSH
26590: LD_INT 81
26592: EQUAL
26593: NOT
26594: PUSH
26595: LD_VAR 0 1
26599: PUSH
26600: LD_EXP 97
26604: IN
26605: NOT
26606: OR
26607: IFFALSE 26611
// exit ;
26609: GO 26933
// index := GetElementIndex ( minersList , unit ) ;
26611: LD_ADDR_VAR 0 6
26615: PUSH
26616: LD_EXP 97
26620: PPUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL 32105 0 2
26630: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26631: LD_ADDR_VAR 0 8
26635: PUSH
26636: LD_EXP 99
26640: PUSH
26641: LD_EXP 98
26645: PUSH
26646: LD_VAR 0 6
26650: ARRAY
26651: MINUS
26652: ST_TO_ADDR
// if not minesFreeAmount then
26653: LD_VAR 0 8
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 26933
// tmp := [ ] ;
26662: LD_ADDR_VAR 0 7
26666: PUSH
26667: EMPTY
26668: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26669: LD_ADDR_VAR 0 5
26673: PUSH
26674: DOUBLE
26675: LD_INT 1
26677: DEC
26678: ST_TO_ADDR
26679: LD_VAR 0 8
26683: PUSH
26684: FOR_TO
26685: IFFALSE 26880
// begin _d := rand ( 0 , 5 ) ;
26687: LD_ADDR_VAR 0 11
26691: PUSH
26692: LD_INT 0
26694: PPUSH
26695: LD_INT 5
26697: PPUSH
26698: CALL_OW 12
26702: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26703: LD_ADDR_VAR 0 12
26707: PUSH
26708: LD_INT 2
26710: PPUSH
26711: LD_INT 6
26713: PPUSH
26714: CALL_OW 12
26718: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26719: LD_ADDR_VAR 0 9
26723: PUSH
26724: LD_VAR 0 2
26728: PPUSH
26729: LD_VAR 0 11
26733: PPUSH
26734: LD_VAR 0 12
26738: PPUSH
26739: CALL_OW 272
26743: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26744: LD_ADDR_VAR 0 10
26748: PUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: LD_VAR 0 11
26758: PPUSH
26759: LD_VAR 0 12
26763: PPUSH
26764: CALL_OW 273
26768: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26769: LD_VAR 0 9
26773: PPUSH
26774: LD_VAR 0 10
26778: PPUSH
26779: CALL_OW 488
26783: PUSH
26784: LD_VAR 0 9
26788: PUSH
26789: LD_VAR 0 10
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_VAR 0 7
26802: IN
26803: NOT
26804: AND
26805: PUSH
26806: LD_VAR 0 9
26810: PPUSH
26811: LD_VAR 0 10
26815: PPUSH
26816: CALL_OW 458
26820: NOT
26821: AND
26822: IFFALSE 26864
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26824: LD_ADDR_VAR 0 7
26828: PUSH
26829: LD_VAR 0 7
26833: PPUSH
26834: LD_VAR 0 7
26838: PUSH
26839: LD_INT 1
26841: PLUS
26842: PPUSH
26843: LD_VAR 0 9
26847: PUSH
26848: LD_VAR 0 10
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PPUSH
26857: CALL_OW 1
26861: ST_TO_ADDR
26862: GO 26878
// i := i - 1 ;
26864: LD_ADDR_VAR 0 5
26868: PUSH
26869: LD_VAR 0 5
26873: PUSH
26874: LD_INT 1
26876: MINUS
26877: ST_TO_ADDR
// end ;
26878: GO 26684
26880: POP
26881: POP
// for i in tmp do
26882: LD_ADDR_VAR 0 5
26886: PUSH
26887: LD_VAR 0 7
26891: PUSH
26892: FOR_IN
26893: IFFALSE 26931
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 5
26904: PUSH
26905: LD_INT 1
26907: ARRAY
26908: PPUSH
26909: LD_VAR 0 5
26913: PUSH
26914: LD_INT 2
26916: ARRAY
26917: PPUSH
26918: CALL 25877 0 3
26922: NOT
26923: IFFALSE 26929
// exit ;
26925: POP
26926: POP
26927: GO 26933
26929: GO 26892
26931: POP
26932: POP
// end ;
26933: LD_VAR 0 4
26937: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26938: LD_INT 0
26940: PPUSH
26941: PPUSH
26942: PPUSH
26943: PPUSH
26944: PPUSH
26945: PPUSH
26946: PPUSH
// if not GetClass ( unit ) = class_sniper then
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 257
26956: PUSH
26957: LD_INT 5
26959: EQUAL
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27353
// dist := 8 ;
26965: LD_ADDR_VAR 0 5
26969: PUSH
26970: LD_INT 8
26972: ST_TO_ADDR
// viewRange := 12 ;
26973: LD_ADDR_VAR 0 7
26977: PUSH
26978: LD_INT 12
26980: ST_TO_ADDR
// side := GetSide ( unit ) ;
26981: LD_ADDR_VAR 0 6
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 255
26995: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26996: LD_INT 61
26998: PPUSH
26999: LD_VAR 0 6
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27022
// viewRange := 16 ;
27014: LD_ADDR_VAR 0 7
27018: PUSH
27019: LD_INT 16
27021: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27022: LD_VAR 0 1
27026: PPUSH
27027: LD_VAR 0 2
27031: PPUSH
27032: LD_VAR 0 3
27036: PPUSH
27037: CALL_OW 297
27041: PUSH
27042: LD_VAR 0 5
27046: GREATER
27047: IFFALSE 27126
// begin ComMoveXY ( unit , x , y ) ;
27049: LD_VAR 0 1
27053: PPUSH
27054: LD_VAR 0 2
27058: PPUSH
27059: LD_VAR 0 3
27063: PPUSH
27064: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27068: LD_INT 35
27070: PPUSH
27071: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27075: LD_VAR 0 1
27079: PPUSH
27080: LD_VAR 0 2
27084: PPUSH
27085: LD_VAR 0 3
27089: PPUSH
27090: CALL 63857 0 3
27094: NOT
27095: IFFALSE 27099
// exit ;
27097: GO 27353
// until GetDistUnitXY ( unit , x , y ) < dist ;
27099: LD_VAR 0 1
27103: PPUSH
27104: LD_VAR 0 2
27108: PPUSH
27109: LD_VAR 0 3
27113: PPUSH
27114: CALL_OW 297
27118: PUSH
27119: LD_VAR 0 5
27123: LESS
27124: IFFALSE 27068
// end ; ComTurnXY ( unit , x , y ) ;
27126: LD_VAR 0 1
27130: PPUSH
27131: LD_VAR 0 2
27135: PPUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 118
// wait ( 5 ) ;
27145: LD_INT 5
27147: PPUSH
27148: CALL_OW 67
// _d := GetDir ( unit ) ;
27152: LD_ADDR_VAR 0 10
27156: PUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 254
27166: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27167: LD_ADDR_VAR 0 8
27171: PUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 250
27181: PPUSH
27182: LD_VAR 0 10
27186: PPUSH
27187: LD_VAR 0 5
27191: PPUSH
27192: CALL_OW 272
27196: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27197: LD_ADDR_VAR 0 9
27201: PUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: CALL_OW 251
27211: PPUSH
27212: LD_VAR 0 10
27216: PPUSH
27217: LD_VAR 0 5
27221: PPUSH
27222: CALL_OW 273
27226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27227: LD_VAR 0 8
27231: PPUSH
27232: LD_VAR 0 9
27236: PPUSH
27237: CALL_OW 488
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27353
// ComAnimCustom ( unit , 1 ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 1
27253: PPUSH
27254: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27258: LD_VAR 0 8
27262: PPUSH
27263: LD_VAR 0 9
27267: PPUSH
27268: LD_VAR 0 6
27272: PPUSH
27273: LD_VAR 0 7
27277: PPUSH
27278: CALL_OW 330
// repeat wait ( 1 ) ;
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 316
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 314
27308: OR
27309: PUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: CALL_OW 302
27319: NOT
27320: OR
27321: PUSH
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL_OW 301
27331: OR
27332: IFFALSE 27282
// RemoveSeeing ( _x , _y , side ) ;
27334: LD_VAR 0 8
27338: PPUSH
27339: LD_VAR 0 9
27343: PPUSH
27344: LD_VAR 0 6
27348: PPUSH
27349: CALL_OW 331
// end ; end_of_file
27353: LD_VAR 0 4
27357: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27358: LD_INT 0
27360: PPUSH
27361: PPUSH
// if exist_mode then
27362: LD_VAR 0 2
27366: IFFALSE 27391
// unit := CreateCharacter ( prefix & ident ) else
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_VAR 0 3
27377: PUSH
27378: LD_VAR 0 1
27382: STR
27383: PPUSH
27384: CALL_OW 34
27388: ST_TO_ADDR
27389: GO 27406
// unit := NewCharacter ( ident ) ;
27391: LD_ADDR_VAR 0 5
27395: PUSH
27396: LD_VAR 0 1
27400: PPUSH
27401: CALL_OW 25
27405: ST_TO_ADDR
// result := unit ;
27406: LD_ADDR_VAR 0 4
27410: PUSH
27411: LD_VAR 0 5
27415: ST_TO_ADDR
// end ;
27416: LD_VAR 0 4
27420: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
// if not side or not nation then
27425: LD_VAR 0 1
27429: NOT
27430: PUSH
27431: LD_VAR 0 2
27435: NOT
27436: OR
27437: IFFALSE 27441
// exit ;
27439: GO 28209
// case nation of nation_american :
27441: LD_VAR 0 2
27445: PUSH
27446: LD_INT 1
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27668
27454: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27455: LD_ADDR_VAR 0 4
27459: PUSH
27460: LD_INT 35
27462: PUSH
27463: LD_INT 45
27465: PUSH
27466: LD_INT 46
27468: PUSH
27469: LD_INT 47
27471: PUSH
27472: LD_INT 82
27474: PUSH
27475: LD_INT 83
27477: PUSH
27478: LD_INT 84
27480: PUSH
27481: LD_INT 85
27483: PUSH
27484: LD_INT 86
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: LD_INT 6
27495: PUSH
27496: LD_INT 15
27498: PUSH
27499: LD_INT 16
27501: PUSH
27502: LD_INT 7
27504: PUSH
27505: LD_INT 12
27507: PUSH
27508: LD_INT 13
27510: PUSH
27511: LD_INT 10
27513: PUSH
27514: LD_INT 14
27516: PUSH
27517: LD_INT 20
27519: PUSH
27520: LD_INT 21
27522: PUSH
27523: LD_INT 22
27525: PUSH
27526: LD_INT 25
27528: PUSH
27529: LD_INT 32
27531: PUSH
27532: LD_INT 27
27534: PUSH
27535: LD_INT 36
27537: PUSH
27538: LD_INT 69
27540: PUSH
27541: LD_INT 39
27543: PUSH
27544: LD_INT 34
27546: PUSH
27547: LD_INT 40
27549: PUSH
27550: LD_INT 48
27552: PUSH
27553: LD_INT 49
27555: PUSH
27556: LD_INT 50
27558: PUSH
27559: LD_INT 51
27561: PUSH
27562: LD_INT 52
27564: PUSH
27565: LD_INT 53
27567: PUSH
27568: LD_INT 54
27570: PUSH
27571: LD_INT 55
27573: PUSH
27574: LD_INT 56
27576: PUSH
27577: LD_INT 57
27579: PUSH
27580: LD_INT 58
27582: PUSH
27583: LD_INT 59
27585: PUSH
27586: LD_INT 60
27588: PUSH
27589: LD_INT 61
27591: PUSH
27592: LD_INT 62
27594: PUSH
27595: LD_INT 80
27597: PUSH
27598: LD_INT 82
27600: PUSH
27601: LD_INT 83
27603: PUSH
27604: LD_INT 84
27606: PUSH
27607: LD_INT 85
27609: PUSH
27610: LD_INT 86
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
27666: GO 28133
27668: LD_INT 2
27670: DOUBLE
27671: EQUAL
27672: IFTRUE 27676
27674: GO 27902
27676: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27677: LD_ADDR_VAR 0 4
27681: PUSH
27682: LD_INT 35
27684: PUSH
27685: LD_INT 45
27687: PUSH
27688: LD_INT 46
27690: PUSH
27691: LD_INT 47
27693: PUSH
27694: LD_INT 82
27696: PUSH
27697: LD_INT 83
27699: PUSH
27700: LD_INT 84
27702: PUSH
27703: LD_INT 85
27705: PUSH
27706: LD_INT 87
27708: PUSH
27709: LD_INT 70
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 11
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: LD_INT 4
27723: PUSH
27724: LD_INT 5
27726: PUSH
27727: LD_INT 6
27729: PUSH
27730: LD_INT 15
27732: PUSH
27733: LD_INT 18
27735: PUSH
27736: LD_INT 7
27738: PUSH
27739: LD_INT 17
27741: PUSH
27742: LD_INT 8
27744: PUSH
27745: LD_INT 20
27747: PUSH
27748: LD_INT 21
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_INT 72
27756: PUSH
27757: LD_INT 26
27759: PUSH
27760: LD_INT 69
27762: PUSH
27763: LD_INT 39
27765: PUSH
27766: LD_INT 40
27768: PUSH
27769: LD_INT 41
27771: PUSH
27772: LD_INT 42
27774: PUSH
27775: LD_INT 43
27777: PUSH
27778: LD_INT 48
27780: PUSH
27781: LD_INT 49
27783: PUSH
27784: LD_INT 50
27786: PUSH
27787: LD_INT 51
27789: PUSH
27790: LD_INT 52
27792: PUSH
27793: LD_INT 53
27795: PUSH
27796: LD_INT 54
27798: PUSH
27799: LD_INT 55
27801: PUSH
27802: LD_INT 56
27804: PUSH
27805: LD_INT 60
27807: PUSH
27808: LD_INT 61
27810: PUSH
27811: LD_INT 62
27813: PUSH
27814: LD_INT 66
27816: PUSH
27817: LD_INT 67
27819: PUSH
27820: LD_INT 68
27822: PUSH
27823: LD_INT 81
27825: PUSH
27826: LD_INT 82
27828: PUSH
27829: LD_INT 83
27831: PUSH
27832: LD_INT 84
27834: PUSH
27835: LD_INT 85
27837: PUSH
27838: LD_INT 87
27840: PUSH
27841: LD_INT 88
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
27900: GO 28133
27902: LD_INT 3
27904: DOUBLE
27905: EQUAL
27906: IFTRUE 27910
27908: GO 28132
27910: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27911: LD_ADDR_VAR 0 4
27915: PUSH
27916: LD_INT 46
27918: PUSH
27919: LD_INT 47
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 82
27930: PUSH
27931: LD_INT 83
27933: PUSH
27934: LD_INT 84
27936: PUSH
27937: LD_INT 85
27939: PUSH
27940: LD_INT 86
27942: PUSH
27943: LD_INT 11
27945: PUSH
27946: LD_INT 9
27948: PUSH
27949: LD_INT 20
27951: PUSH
27952: LD_INT 19
27954: PUSH
27955: LD_INT 21
27957: PUSH
27958: LD_INT 24
27960: PUSH
27961: LD_INT 22
27963: PUSH
27964: LD_INT 25
27966: PUSH
27967: LD_INT 28
27969: PUSH
27970: LD_INT 29
27972: PUSH
27973: LD_INT 30
27975: PUSH
27976: LD_INT 31
27978: PUSH
27979: LD_INT 37
27981: PUSH
27982: LD_INT 38
27984: PUSH
27985: LD_INT 32
27987: PUSH
27988: LD_INT 27
27990: PUSH
27991: LD_INT 33
27993: PUSH
27994: LD_INT 69
27996: PUSH
27997: LD_INT 39
27999: PUSH
28000: LD_INT 34
28002: PUSH
28003: LD_INT 40
28005: PUSH
28006: LD_INT 71
28008: PUSH
28009: LD_INT 23
28011: PUSH
28012: LD_INT 44
28014: PUSH
28015: LD_INT 48
28017: PUSH
28018: LD_INT 49
28020: PUSH
28021: LD_INT 50
28023: PUSH
28024: LD_INT 51
28026: PUSH
28027: LD_INT 52
28029: PUSH
28030: LD_INT 53
28032: PUSH
28033: LD_INT 54
28035: PUSH
28036: LD_INT 55
28038: PUSH
28039: LD_INT 56
28041: PUSH
28042: LD_INT 57
28044: PUSH
28045: LD_INT 58
28047: PUSH
28048: LD_INT 59
28050: PUSH
28051: LD_INT 63
28053: PUSH
28054: LD_INT 64
28056: PUSH
28057: LD_INT 65
28059: PUSH
28060: LD_INT 82
28062: PUSH
28063: LD_INT 83
28065: PUSH
28066: LD_INT 84
28068: PUSH
28069: LD_INT 85
28071: PUSH
28072: LD_INT 86
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
28130: GO 28133
28132: POP
// if state > - 1 and state < 3 then
28133: LD_VAR 0 3
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: GREATER
28142: PUSH
28143: LD_VAR 0 3
28147: PUSH
28148: LD_INT 3
28150: LESS
28151: AND
28152: IFFALSE 28209
// for i in result do
28154: LD_ADDR_VAR 0 5
28158: PUSH
28159: LD_VAR 0 4
28163: PUSH
28164: FOR_IN
28165: IFFALSE 28207
// if GetTech ( i , side ) <> state then
28167: LD_VAR 0 5
28171: PPUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 321
28181: PUSH
28182: LD_VAR 0 3
28186: NONEQUAL
28187: IFFALSE 28205
// result := result diff i ;
28189: LD_ADDR_VAR 0 4
28193: PUSH
28194: LD_VAR 0 4
28198: PUSH
28199: LD_VAR 0 5
28203: DIFF
28204: ST_TO_ADDR
28205: GO 28164
28207: POP
28208: POP
// end ;
28209: LD_VAR 0 4
28213: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
// result := true ;
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_INT 1
28226: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28227: LD_ADDR_VAR 0 5
28231: PUSH
28232: LD_VAR 0 2
28236: PPUSH
28237: CALL_OW 480
28241: ST_TO_ADDR
// if not tmp then
28242: LD_VAR 0 5
28246: NOT
28247: IFFALSE 28251
// exit ;
28249: GO 28300
// for i in tmp do
28251: LD_ADDR_VAR 0 4
28255: PUSH
28256: LD_VAR 0 5
28260: PUSH
28261: FOR_IN
28262: IFFALSE 28298
// if GetTech ( i , side ) <> state_researched then
28264: LD_VAR 0 4
28268: PPUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 321
28278: PUSH
28279: LD_INT 2
28281: NONEQUAL
28282: IFFALSE 28296
// begin result := false ;
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_INT 0
28291: ST_TO_ADDR
// exit ;
28292: POP
28293: POP
28294: GO 28300
// end ;
28296: GO 28261
28298: POP
28299: POP
// end ;
28300: LD_VAR 0 3
28304: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28305: LD_INT 0
28307: PPUSH
28308: PPUSH
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28320: LD_VAR 0 1
28324: NOT
28325: PUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: CALL_OW 257
28335: PUSH
28336: LD_INT 9
28338: NONEQUAL
28339: OR
28340: IFFALSE 28344
// exit ;
28342: GO 28917
// side := GetSide ( unit ) ;
28344: LD_ADDR_VAR 0 9
28348: PUSH
28349: LD_VAR 0 1
28353: PPUSH
28354: CALL_OW 255
28358: ST_TO_ADDR
// tech_space := tech_spacanom ;
28359: LD_ADDR_VAR 0 12
28363: PUSH
28364: LD_INT 29
28366: ST_TO_ADDR
// tech_time := tech_taurad ;
28367: LD_ADDR_VAR 0 13
28371: PUSH
28372: LD_INT 28
28374: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28375: LD_ADDR_VAR 0 11
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 310
28389: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28390: LD_VAR 0 11
28394: PPUSH
28395: CALL_OW 247
28399: PUSH
28400: LD_INT 2
28402: EQUAL
28403: IFFALSE 28407
// exit ;
28405: GO 28917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28407: LD_ADDR_VAR 0 8
28411: PUSH
28412: LD_INT 81
28414: PUSH
28415: LD_VAR 0 9
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 3
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: ST_TO_ADDR
// if not tmp then
28450: LD_VAR 0 8
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 28917
// if in_unit then
28459: LD_VAR 0 11
28463: IFFALSE 28487
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28465: LD_ADDR_VAR 0 10
28469: PUSH
28470: LD_VAR 0 8
28474: PPUSH
28475: LD_VAR 0 11
28479: PPUSH
28480: CALL_OW 74
28484: ST_TO_ADDR
28485: GO 28507
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28487: LD_ADDR_VAR 0 10
28491: PUSH
28492: LD_VAR 0 8
28496: PPUSH
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 74
28506: ST_TO_ADDR
// if not enemy then
28507: LD_VAR 0 10
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28917
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28516: LD_VAR 0 11
28520: PUSH
28521: LD_VAR 0 11
28525: PPUSH
28526: LD_VAR 0 10
28530: PPUSH
28531: CALL_OW 296
28535: PUSH
28536: LD_INT 13
28538: GREATER
28539: AND
28540: PUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: LD_VAR 0 10
28550: PPUSH
28551: CALL_OW 296
28555: PUSH
28556: LD_INT 12
28558: GREATER
28559: OR
28560: IFFALSE 28564
// exit ;
28562: GO 28917
// missile := [ 1 ] ;
28564: LD_ADDR_VAR 0 14
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28575: LD_VAR 0 9
28579: PPUSH
28580: LD_VAR 0 12
28584: PPUSH
28585: CALL_OW 325
28589: IFFALSE 28618
// missile := Replace ( missile , missile + 1 , 2 ) ;
28591: LD_ADDR_VAR 0 14
28595: PUSH
28596: LD_VAR 0 14
28600: PPUSH
28601: LD_VAR 0 14
28605: PUSH
28606: LD_INT 1
28608: PLUS
28609: PPUSH
28610: LD_INT 2
28612: PPUSH
28613: CALL_OW 1
28617: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28618: LD_VAR 0 9
28622: PPUSH
28623: LD_VAR 0 13
28627: PPUSH
28628: CALL_OW 325
28632: PUSH
28633: LD_VAR 0 10
28637: PPUSH
28638: CALL_OW 255
28642: PPUSH
28643: LD_VAR 0 13
28647: PPUSH
28648: CALL_OW 325
28652: NOT
28653: AND
28654: IFFALSE 28683
// missile := Replace ( missile , missile + 1 , 3 ) ;
28656: LD_ADDR_VAR 0 14
28660: PUSH
28661: LD_VAR 0 14
28665: PPUSH
28666: LD_VAR 0 14
28670: PUSH
28671: LD_INT 1
28673: PLUS
28674: PPUSH
28675: LD_INT 3
28677: PPUSH
28678: CALL_OW 1
28682: ST_TO_ADDR
// if missile < 2 then
28683: LD_VAR 0 14
28687: PUSH
28688: LD_INT 2
28690: LESS
28691: IFFALSE 28695
// exit ;
28693: GO 28917
// x := GetX ( enemy ) ;
28695: LD_ADDR_VAR 0 4
28699: PUSH
28700: LD_VAR 0 10
28704: PPUSH
28705: CALL_OW 250
28709: ST_TO_ADDR
// y := GetY ( enemy ) ;
28710: LD_ADDR_VAR 0 5
28714: PUSH
28715: LD_VAR 0 10
28719: PPUSH
28720: CALL_OW 251
28724: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28725: LD_ADDR_VAR 0 6
28729: PUSH
28730: LD_VAR 0 4
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL_OW 12
28746: PLUS
28747: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28748: LD_ADDR_VAR 0 7
28752: PUSH
28753: LD_VAR 0 5
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PPUSH
28762: LD_INT 1
28764: PPUSH
28765: CALL_OW 12
28769: PLUS
28770: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28771: LD_VAR 0 6
28775: PPUSH
28776: LD_VAR 0 7
28780: PPUSH
28781: CALL_OW 488
28785: NOT
28786: IFFALSE 28808
// begin _x := x ;
28788: LD_ADDR_VAR 0 6
28792: PUSH
28793: LD_VAR 0 4
28797: ST_TO_ADDR
// _y := y ;
28798: LD_ADDR_VAR 0 7
28802: PUSH
28803: LD_VAR 0 5
28807: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 1
28815: PPUSH
28816: LD_VAR 0 14
28820: PPUSH
28821: CALL_OW 12
28825: ST_TO_ADDR
// case i of 1 :
28826: LD_VAR 0 3
28830: PUSH
28831: LD_INT 1
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28856
28839: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28840: LD_VAR 0 1
28844: PPUSH
28845: LD_VAR 0 10
28849: PPUSH
28850: CALL_OW 115
28854: GO 28917
28856: LD_INT 2
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 28886
28864: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28865: LD_VAR 0 1
28869: PPUSH
28870: LD_VAR 0 6
28874: PPUSH
28875: LD_VAR 0 7
28879: PPUSH
28880: CALL_OW 153
28884: GO 28917
28886: LD_INT 3
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28916
28894: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28895: LD_VAR 0 1
28899: PPUSH
28900: LD_VAR 0 6
28904: PPUSH
28905: LD_VAR 0 7
28909: PPUSH
28910: CALL_OW 154
28914: GO 28917
28916: POP
// end ;
28917: LD_VAR 0 2
28921: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28922: LD_INT 0
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// if not unit or not building then
28930: LD_VAR 0 1
28934: NOT
28935: PUSH
28936: LD_VAR 0 2
28940: NOT
28941: OR
28942: IFFALSE 28946
// exit ;
28944: GO 29104
// x := GetX ( building ) ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: LD_VAR 0 2
28955: PPUSH
28956: CALL_OW 250
28960: ST_TO_ADDR
// y := GetY ( building ) ;
28961: LD_ADDR_VAR 0 6
28965: PUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: CALL_OW 251
28975: ST_TO_ADDR
// for i = 0 to 5 do
28976: LD_ADDR_VAR 0 4
28980: PUSH
28981: DOUBLE
28982: LD_INT 0
28984: DEC
28985: ST_TO_ADDR
28986: LD_INT 5
28988: PUSH
28989: FOR_TO
28990: IFFALSE 29102
// begin _x := ShiftX ( x , i , 3 ) ;
28992: LD_ADDR_VAR 0 7
28996: PUSH
28997: LD_VAR 0 5
29001: PPUSH
29002: LD_VAR 0 4
29006: PPUSH
29007: LD_INT 3
29009: PPUSH
29010: CALL_OW 272
29014: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29015: LD_ADDR_VAR 0 8
29019: PUSH
29020: LD_VAR 0 6
29024: PPUSH
29025: LD_VAR 0 4
29029: PPUSH
29030: LD_INT 3
29032: PPUSH
29033: CALL_OW 273
29037: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29038: LD_VAR 0 7
29042: PPUSH
29043: LD_VAR 0 8
29047: PPUSH
29048: CALL_OW 488
29052: NOT
29053: IFFALSE 29057
// continue ;
29055: GO 28989
// if HexInfo ( _x , _y ) = 0 then
29057: LD_VAR 0 7
29061: PPUSH
29062: LD_VAR 0 8
29066: PPUSH
29067: CALL_OW 428
29071: PUSH
29072: LD_INT 0
29074: EQUAL
29075: IFFALSE 29100
// begin ComMoveXY ( unit , _x , _y ) ;
29077: LD_VAR 0 1
29081: PPUSH
29082: LD_VAR 0 7
29086: PPUSH
29087: LD_VAR 0 8
29091: PPUSH
29092: CALL_OW 111
// exit ;
29096: POP
29097: POP
29098: GO 29104
// end ; end ;
29100: GO 28989
29102: POP
29103: POP
// end ;
29104: LD_VAR 0 3
29108: RET
// export function ScanBase ( side , base_area ) ; begin
29109: LD_INT 0
29111: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_VAR 0 2
29121: PPUSH
29122: LD_INT 81
29124: PUSH
29125: LD_VAR 0 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 70
29138: ST_TO_ADDR
// end ;
29139: LD_VAR 0 3
29143: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29144: LD_INT 0
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
// result := false ;
29150: LD_ADDR_VAR 0 2
29154: PUSH
29155: LD_INT 0
29157: ST_TO_ADDR
// side := GetSide ( unit ) ;
29158: LD_ADDR_VAR 0 3
29162: PUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 255
29172: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29173: LD_ADDR_VAR 0 4
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 248
29187: ST_TO_ADDR
// case nat of 1 :
29188: LD_VAR 0 4
29192: PUSH
29193: LD_INT 1
29195: DOUBLE
29196: EQUAL
29197: IFTRUE 29201
29199: GO 29212
29201: POP
// tech := tech_lassight ; 2 :
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: LD_INT 12
29209: ST_TO_ADDR
29210: GO 29251
29212: LD_INT 2
29214: DOUBLE
29215: EQUAL
29216: IFTRUE 29220
29218: GO 29231
29220: POP
// tech := tech_mortar ; 3 :
29221: LD_ADDR_VAR 0 5
29225: PUSH
29226: LD_INT 41
29228: ST_TO_ADDR
29229: GO 29251
29231: LD_INT 3
29233: DOUBLE
29234: EQUAL
29235: IFTRUE 29239
29237: GO 29250
29239: POP
// tech := tech_bazooka ; end ;
29240: LD_ADDR_VAR 0 5
29244: PUSH
29245: LD_INT 44
29247: ST_TO_ADDR
29248: GO 29251
29250: POP
// if Researched ( side , tech ) then
29251: LD_VAR 0 3
29255: PPUSH
29256: LD_VAR 0 5
29260: PPUSH
29261: CALL_OW 325
29265: IFFALSE 29292
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: LD_INT 5
29274: PUSH
29275: LD_INT 8
29277: PUSH
29278: LD_INT 9
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: PUSH
29286: LD_VAR 0 4
29290: ARRAY
29291: ST_TO_ADDR
// end ;
29292: LD_VAR 0 2
29296: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29297: LD_INT 0
29299: PPUSH
29300: PPUSH
29301: PPUSH
// if not mines then
29302: LD_VAR 0 2
29306: NOT
29307: IFFALSE 29311
// exit ;
29309: GO 29455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: LD_INT 81
29318: PUSH
29319: LD_VAR 0 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PPUSH
29349: CALL_OW 69
29353: ST_TO_ADDR
// for i in mines do
29354: LD_ADDR_VAR 0 4
29358: PUSH
29359: LD_VAR 0 2
29363: PUSH
29364: FOR_IN
29365: IFFALSE 29453
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29367: LD_VAR 0 4
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PPUSH
29376: LD_VAR 0 4
29380: PUSH
29381: LD_INT 2
29383: ARRAY
29384: PPUSH
29385: CALL_OW 458
29389: NOT
29390: IFFALSE 29394
// continue ;
29392: GO 29364
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29394: LD_VAR 0 4
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_VAR 0 4
29407: PUSH
29408: LD_INT 2
29410: ARRAY
29411: PPUSH
29412: CALL_OW 428
29416: PUSH
29417: LD_VAR 0 5
29421: IN
29422: IFFALSE 29451
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29424: LD_VAR 0 4
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 4
29437: PUSH
29438: LD_INT 2
29440: ARRAY
29441: PPUSH
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 456
// end ;
29451: GO 29364
29453: POP
29454: POP
// end ;
29455: LD_VAR 0 3
29459: RET
// export function Count ( array ) ; begin
29460: LD_INT 0
29462: PPUSH
// result := array + 0 ;
29463: LD_ADDR_VAR 0 2
29467: PUSH
29468: LD_VAR 0 1
29472: PUSH
29473: LD_INT 0
29475: PLUS
29476: ST_TO_ADDR
// end ;
29477: LD_VAR 0 2
29481: RET
// export function IsEmpty ( building ) ; begin
29482: LD_INT 0
29484: PPUSH
// if not building then
29485: LD_VAR 0 1
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29537
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 255
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 58
29523: PUSH
29524: EMPTY
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PPUSH
29531: CALL_OW 69
29535: IN
29536: ST_TO_ADDR
// end ;
29537: LD_VAR 0 2
29541: RET
// export function IsNotFull ( building ) ; var places ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
// if not building then
29546: LD_VAR 0 1
29550: NOT
29551: IFFALSE 29555
// exit ;
29553: GO 29583
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29555: LD_ADDR_VAR 0 2
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_INT 3
29567: PUSH
29568: LD_INT 62
29570: PUSH
29571: EMPTY
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 72
29582: ST_TO_ADDR
// end ;
29583: LD_VAR 0 2
29587: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29588: LD_INT 0
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// tmp := [ ] ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: EMPTY
29600: ST_TO_ADDR
// list := [ ] ;
29601: LD_ADDR_VAR 0 5
29605: PUSH
29606: EMPTY
29607: ST_TO_ADDR
// for i = 16 to 25 do
29608: LD_ADDR_VAR 0 4
29612: PUSH
29613: DOUBLE
29614: LD_INT 16
29616: DEC
29617: ST_TO_ADDR
29618: LD_INT 25
29620: PUSH
29621: FOR_TO
29622: IFFALSE 29695
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_VAR 0 3
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 255
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 91
29653: PUSH
29654: LD_VAR 0 1
29658: PUSH
29659: LD_INT 6
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_VAR 0 4
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: ADD
29692: ST_TO_ADDR
29693: GO 29621
29695: POP
29696: POP
// for i = 1 to tmp do
29697: LD_ADDR_VAR 0 4
29701: PUSH
29702: DOUBLE
29703: LD_INT 1
29705: DEC
29706: ST_TO_ADDR
29707: LD_VAR 0 3
29711: PUSH
29712: FOR_TO
29713: IFFALSE 29801
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29715: LD_ADDR_VAR 0 5
29719: PUSH
29720: LD_VAR 0 5
29724: PUSH
29725: LD_VAR 0 3
29729: PUSH
29730: LD_VAR 0 4
29734: ARRAY
29735: PPUSH
29736: CALL_OW 266
29740: PUSH
29741: LD_VAR 0 3
29745: PUSH
29746: LD_VAR 0 4
29750: ARRAY
29751: PPUSH
29752: CALL_OW 250
29756: PUSH
29757: LD_VAR 0 3
29761: PUSH
29762: LD_VAR 0 4
29766: ARRAY
29767: PPUSH
29768: CALL_OW 251
29772: PUSH
29773: LD_VAR 0 3
29777: PUSH
29778: LD_VAR 0 4
29782: ARRAY
29783: PPUSH
29784: CALL_OW 254
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: ADD
29798: ST_TO_ADDR
29799: GO 29712
29801: POP
29802: POP
// result := list ;
29803: LD_ADDR_VAR 0 2
29807: PUSH
29808: LD_VAR 0 5
29812: ST_TO_ADDR
// end ;
29813: LD_VAR 0 2
29817: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29818: LD_INT 0
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// if not factory then
29827: LD_VAR 0 1
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 30429
// if control = control_apeman then
29836: LD_VAR 0 4
29840: PUSH
29841: LD_INT 5
29843: EQUAL
29844: IFFALSE 29953
// begin tmp := UnitsInside ( factory ) ;
29846: LD_ADDR_VAR 0 8
29850: PUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 313
29860: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29861: LD_VAR 0 8
29865: PPUSH
29866: LD_INT 25
29868: PUSH
29869: LD_INT 12
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 72
29880: NOT
29881: IFFALSE 29891
// control := control_manual ;
29883: LD_ADDR_VAR 0 4
29887: PUSH
29888: LD_INT 1
29890: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29891: LD_ADDR_VAR 0 8
29895: PUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL 29588 0 1
29905: ST_TO_ADDR
// if tmp then
29906: LD_VAR 0 8
29910: IFFALSE 29953
// begin for i in tmp do
29912: LD_ADDR_VAR 0 7
29916: PUSH
29917: LD_VAR 0 8
29921: PUSH
29922: FOR_IN
29923: IFFALSE 29951
// if i [ 1 ] = b_ext_radio then
29925: LD_VAR 0 7
29929: PUSH
29930: LD_INT 1
29932: ARRAY
29933: PUSH
29934: LD_INT 22
29936: EQUAL
29937: IFFALSE 29949
// begin control := control_remote ;
29939: LD_ADDR_VAR 0 4
29943: PUSH
29944: LD_INT 2
29946: ST_TO_ADDR
// break ;
29947: GO 29951
// end ;
29949: GO 29922
29951: POP
29952: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29953: LD_VAR 0 1
29957: PPUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: LD_VAR 0 4
29972: PPUSH
29973: LD_VAR 0 5
29977: PPUSH
29978: CALL_OW 448
29982: IFFALSE 30017
// begin result := [ chassis , engine , control , weapon ] ;
29984: LD_ADDR_VAR 0 6
29988: PUSH
29989: LD_VAR 0 2
29993: PUSH
29994: LD_VAR 0 3
29998: PUSH
29999: LD_VAR 0 4
30003: PUSH
30004: LD_VAR 0 5
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// exit ;
30015: GO 30429
// end ; _chassis := AvailableChassisList ( factory ) ;
30017: LD_ADDR_VAR 0 9
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 475
30031: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30032: LD_ADDR_VAR 0 11
30036: PUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 476
30046: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30047: LD_ADDR_VAR 0 12
30051: PUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL_OW 477
30061: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30062: LD_ADDR_VAR 0 10
30066: PUSH
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 478
30076: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30077: LD_VAR 0 9
30081: NOT
30082: PUSH
30083: LD_VAR 0 11
30087: NOT
30088: OR
30089: PUSH
30090: LD_VAR 0 12
30094: NOT
30095: OR
30096: PUSH
30097: LD_VAR 0 10
30101: NOT
30102: OR
30103: IFFALSE 30138
// begin result := [ chassis , engine , control , weapon ] ;
30105: LD_ADDR_VAR 0 6
30109: PUSH
30110: LD_VAR 0 2
30114: PUSH
30115: LD_VAR 0 3
30119: PUSH
30120: LD_VAR 0 4
30124: PUSH
30125: LD_VAR 0 5
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// exit ;
30136: GO 30429
// end ; if not chassis in _chassis then
30138: LD_VAR 0 2
30142: PUSH
30143: LD_VAR 0 9
30147: IN
30148: NOT
30149: IFFALSE 30175
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30151: LD_ADDR_VAR 0 2
30155: PUSH
30156: LD_VAR 0 9
30160: PUSH
30161: LD_INT 1
30163: PPUSH
30164: LD_VAR 0 9
30168: PPUSH
30169: CALL_OW 12
30173: ARRAY
30174: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30175: LD_VAR 0 2
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: CALL 30434 0 2
30189: NOT
30190: IFFALSE 30249
// repeat engine := _engine [ 1 ] ;
30192: LD_ADDR_VAR 0 3
30196: PUSH
30197: LD_VAR 0 11
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30206: LD_ADDR_VAR 0 11
30210: PUSH
30211: LD_VAR 0 11
30215: PPUSH
30216: LD_INT 1
30218: PPUSH
30219: CALL_OW 3
30223: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30224: LD_VAR 0 2
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: CALL 30434 0 2
30238: PUSH
30239: LD_VAR 0 11
30243: PUSH
30244: EMPTY
30245: EQUAL
30246: OR
30247: IFFALSE 30192
// if not control in _control then
30249: LD_VAR 0 4
30253: PUSH
30254: LD_VAR 0 12
30258: IN
30259: NOT
30260: IFFALSE 30286
// control := _control [ rand ( 1 , _control ) ] ;
30262: LD_ADDR_VAR 0 4
30266: PUSH
30267: LD_VAR 0 12
30271: PUSH
30272: LD_INT 1
30274: PPUSH
30275: LD_VAR 0 12
30279: PPUSH
30280: CALL_OW 12
30284: ARRAY
30285: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30286: LD_VAR 0 2
30290: PPUSH
30291: LD_VAR 0 5
30295: PPUSH
30296: CALL 30654 0 2
30300: NOT
30301: IFFALSE 30360
// repeat weapon := _weapon [ 1 ] ;
30303: LD_ADDR_VAR 0 5
30307: PUSH
30308: LD_VAR 0 10
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30317: LD_ADDR_VAR 0 10
30321: PUSH
30322: LD_VAR 0 10
30326: PPUSH
30327: LD_INT 1
30329: PPUSH
30330: CALL_OW 3
30334: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30335: LD_VAR 0 2
30339: PPUSH
30340: LD_VAR 0 5
30344: PPUSH
30345: CALL 30654 0 2
30349: PUSH
30350: LD_VAR 0 10
30354: PUSH
30355: EMPTY
30356: EQUAL
30357: OR
30358: IFFALSE 30303
// result := [ ] ;
30360: LD_ADDR_VAR 0 6
30364: PUSH
30365: EMPTY
30366: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_VAR 0 2
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL_OW 448
30396: IFFALSE 30429
// result := [ chassis , engine , control , weapon ] ;
30398: LD_ADDR_VAR 0 6
30402: PUSH
30403: LD_VAR 0 2
30407: PUSH
30408: LD_VAR 0 3
30412: PUSH
30413: LD_VAR 0 4
30417: PUSH
30418: LD_VAR 0 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// end ;
30429: LD_VAR 0 6
30433: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30434: LD_INT 0
30436: PPUSH
// if not chassis or not engine then
30437: LD_VAR 0 1
30441: NOT
30442: PUSH
30443: LD_VAR 0 2
30447: NOT
30448: OR
30449: IFFALSE 30453
// exit ;
30451: GO 30649
// case engine of engine_solar :
30453: LD_VAR 0 2
30457: PUSH
30458: LD_INT 2
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30504
30466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 11
30474: PUSH
30475: LD_INT 12
30477: PUSH
30478: LD_INT 13
30480: PUSH
30481: LD_INT 14
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 30633
30504: LD_INT 1
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30574
30512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 11
30520: PUSH
30521: LD_INT 12
30523: PUSH
30524: LD_INT 13
30526: PUSH
30527: LD_INT 14
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 21
30547: PUSH
30548: LD_INT 23
30550: PUSH
30551: LD_INT 22
30553: PUSH
30554: LD_INT 24
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 30633
30574: LD_INT 3
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30632
30582: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 13
30590: PUSH
30591: LD_INT 14
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 4
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: LD_INT 21
30608: PUSH
30609: LD_INT 22
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 24
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
30630: GO 30633
30632: POP
// result := ( chassis in result ) ;
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_VAR 0 1
30642: PUSH
30643: LD_VAR 0 3
30647: IN
30648: ST_TO_ADDR
// end ;
30649: LD_VAR 0 3
30653: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30654: LD_INT 0
30656: PPUSH
// if not chassis or not weapon then
30657: LD_VAR 0 1
30661: NOT
30662: PUSH
30663: LD_VAR 0 2
30667: NOT
30668: OR
30669: IFFALSE 30673
// exit ;
30671: GO 31733
// case weapon of us_machine_gun :
30673: LD_VAR 0 2
30677: PUSH
30678: LD_INT 2
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30716
30686: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
30714: GO 31717
30716: LD_INT 3
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30754
30724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 4
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 31717
30754: LD_INT 11
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30792
30762: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 3
30776: PUSH
30777: LD_INT 4
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
30790: GO 31717
30792: LD_INT 4
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30826
30800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30801: LD_ADDR_VAR 0 3
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: LD_INT 5
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
30824: GO 31717
30826: LD_INT 5
30828: DOUBLE
30829: EQUAL
30830: IFTRUE 30834
30832: GO 30860
30834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: LD_INT 5
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
30858: GO 31717
30860: LD_INT 9
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30894
30868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: LD_INT 5
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
30892: GO 31717
30894: LD_INT 7
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30928
30902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30903: LD_ADDR_VAR 0 3
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 4
30916: PUSH
30917: LD_INT 5
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: ST_TO_ADDR
30926: GO 31717
30928: LD_INT 12
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30962
30936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: LD_INT 5
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
30960: GO 31717
30962: LD_INT 13
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30970
30968: GO 30996
30970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: LD_INT 4
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
30994: GO 31717
30996: LD_INT 14
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31022
31004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 5
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: ST_TO_ADDR
31020: GO 31717
31022: LD_INT 6
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31048
31030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31031: LD_ADDR_VAR 0 3
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 5
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: ST_TO_ADDR
31046: GO 31717
31048: LD_INT 10
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31074
31056: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 4
31064: PUSH
31065: LD_INT 5
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: ST_TO_ADDR
31072: GO 31717
31074: LD_INT 22
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31108
31082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_INT 11
31090: PUSH
31091: LD_INT 12
31093: PUSH
31094: LD_INT 13
31096: PUSH
31097: LD_INT 14
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
31106: GO 31717
31108: LD_INT 23
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31142
31116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_INT 11
31124: PUSH
31125: LD_INT 12
31127: PUSH
31128: LD_INT 13
31130: PUSH
31131: LD_INT 14
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: ST_TO_ADDR
31140: GO 31717
31142: LD_INT 24
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31176
31150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_INT 11
31158: PUSH
31159: LD_INT 12
31161: PUSH
31162: LD_INT 13
31164: PUSH
31165: LD_INT 14
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: ST_TO_ADDR
31174: GO 31717
31176: LD_INT 30
31178: DOUBLE
31179: EQUAL
31180: IFTRUE 31184
31182: GO 31210
31184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_INT 11
31192: PUSH
31193: LD_INT 12
31195: PUSH
31196: LD_INT 13
31198: PUSH
31199: LD_INT 14
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
31208: GO 31717
31210: LD_INT 25
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31236
31218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_INT 13
31226: PUSH
31227: LD_INT 14
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: ST_TO_ADDR
31234: GO 31717
31236: LD_INT 27
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31244
31242: GO 31262
31244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31245: LD_ADDR_VAR 0 3
31249: PUSH
31250: LD_INT 13
31252: PUSH
31253: LD_INT 14
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: ST_TO_ADDR
31260: GO 31717
31262: LD_INT 92
31264: DOUBLE
31265: EQUAL
31266: IFTRUE 31270
31268: GO 31296
31270: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31271: LD_ADDR_VAR 0 3
31275: PUSH
31276: LD_INT 11
31278: PUSH
31279: LD_INT 12
31281: PUSH
31282: LD_INT 13
31284: PUSH
31285: LD_INT 14
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: ST_TO_ADDR
31294: GO 31717
31296: LD_INT 28
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31322
31304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31305: LD_ADDR_VAR 0 3
31309: PUSH
31310: LD_INT 13
31312: PUSH
31313: LD_INT 14
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: ST_TO_ADDR
31320: GO 31717
31322: LD_INT 29
31324: DOUBLE
31325: EQUAL
31326: IFTRUE 31330
31328: GO 31348
31330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31331: LD_ADDR_VAR 0 3
31335: PUSH
31336: LD_INT 13
31338: PUSH
31339: LD_INT 14
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 31717
31348: LD_INT 31
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31374
31356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 13
31364: PUSH
31365: LD_INT 14
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: ST_TO_ADDR
31372: GO 31717
31374: LD_INT 26
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31400
31382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 13
31390: PUSH
31391: LD_INT 14
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: ST_TO_ADDR
31398: GO 31717
31400: LD_INT 42
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31434
31408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_INT 21
31416: PUSH
31417: LD_INT 22
31419: PUSH
31420: LD_INT 23
31422: PUSH
31423: LD_INT 24
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
31432: GO 31717
31434: LD_INT 43
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31468
31442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 21
31450: PUSH
31451: LD_INT 22
31453: PUSH
31454: LD_INT 23
31456: PUSH
31457: LD_INT 24
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
31466: GO 31717
31468: LD_INT 44
31470: DOUBLE
31471: EQUAL
31472: IFTRUE 31476
31474: GO 31502
31476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31477: LD_ADDR_VAR 0 3
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: LD_INT 22
31487: PUSH
31488: LD_INT 23
31490: PUSH
31491: LD_INT 24
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
31500: GO 31717
31502: LD_INT 45
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31536
31510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_INT 21
31518: PUSH
31519: LD_INT 22
31521: PUSH
31522: LD_INT 23
31524: PUSH
31525: LD_INT 24
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
31534: GO 31717
31536: LD_INT 49
31538: DOUBLE
31539: EQUAL
31540: IFTRUE 31544
31542: GO 31570
31544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31545: LD_ADDR_VAR 0 3
31549: PUSH
31550: LD_INT 21
31552: PUSH
31553: LD_INT 22
31555: PUSH
31556: LD_INT 23
31558: PUSH
31559: LD_INT 24
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: ST_TO_ADDR
31568: GO 31717
31570: LD_INT 51
31572: DOUBLE
31573: EQUAL
31574: IFTRUE 31578
31576: GO 31604
31578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_INT 21
31586: PUSH
31587: LD_INT 22
31589: PUSH
31590: LD_INT 23
31592: PUSH
31593: LD_INT 24
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
31602: GO 31717
31604: LD_INT 52
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31638
31612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 21
31620: PUSH
31621: LD_INT 22
31623: PUSH
31624: LD_INT 23
31626: PUSH
31627: LD_INT 24
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
31636: GO 31717
31638: LD_INT 53
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31664
31646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31647: LD_ADDR_VAR 0 3
31651: PUSH
31652: LD_INT 23
31654: PUSH
31655: LD_INT 24
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: ST_TO_ADDR
31662: GO 31717
31664: LD_INT 46
31666: DOUBLE
31667: EQUAL
31668: IFTRUE 31672
31670: GO 31690
31672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: LD_INT 23
31680: PUSH
31681: LD_INT 24
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: ST_TO_ADDR
31688: GO 31717
31690: LD_INT 47
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31698
31696: GO 31716
31698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 23
31706: PUSH
31707: LD_INT 24
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: ST_TO_ADDR
31714: GO 31717
31716: POP
// result := ( chassis in result ) ;
31717: LD_ADDR_VAR 0 3
31721: PUSH
31722: LD_VAR 0 1
31726: PUSH
31727: LD_VAR 0 3
31731: IN
31732: ST_TO_ADDR
// end ;
31733: LD_VAR 0 3
31737: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31738: LD_INT 0
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
// result := array ;
31747: LD_ADDR_VAR 0 5
31751: PUSH
31752: LD_VAR 0 1
31756: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31757: LD_VAR 0 1
31761: NOT
31762: PUSH
31763: LD_VAR 0 2
31767: NOT
31768: OR
31769: PUSH
31770: LD_VAR 0 3
31774: NOT
31775: OR
31776: PUSH
31777: LD_VAR 0 2
31781: PUSH
31782: LD_VAR 0 1
31786: GREATER
31787: OR
31788: PUSH
31789: LD_VAR 0 3
31793: PUSH
31794: LD_VAR 0 1
31798: GREATER
31799: OR
31800: IFFALSE 31804
// exit ;
31802: GO 32100
// if direction then
31804: LD_VAR 0 4
31808: IFFALSE 31872
// begin d := 1 ;
31810: LD_ADDR_VAR 0 9
31814: PUSH
31815: LD_INT 1
31817: ST_TO_ADDR
// if i_from > i_to then
31818: LD_VAR 0 2
31822: PUSH
31823: LD_VAR 0 3
31827: GREATER
31828: IFFALSE 31854
// length := ( array - i_from ) + i_to else
31830: LD_ADDR_VAR 0 11
31834: PUSH
31835: LD_VAR 0 1
31839: PUSH
31840: LD_VAR 0 2
31844: MINUS
31845: PUSH
31846: LD_VAR 0 3
31850: PLUS
31851: ST_TO_ADDR
31852: GO 31870
// length := i_to - i_from ;
31854: LD_ADDR_VAR 0 11
31858: PUSH
31859: LD_VAR 0 3
31863: PUSH
31864: LD_VAR 0 2
31868: MINUS
31869: ST_TO_ADDR
// end else
31870: GO 31933
// begin d := - 1 ;
31872: LD_ADDR_VAR 0 9
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: ST_TO_ADDR
// if i_from > i_to then
31881: LD_VAR 0 2
31885: PUSH
31886: LD_VAR 0 3
31890: GREATER
31891: IFFALSE 31911
// length := i_from - i_to else
31893: LD_ADDR_VAR 0 11
31897: PUSH
31898: LD_VAR 0 2
31902: PUSH
31903: LD_VAR 0 3
31907: MINUS
31908: ST_TO_ADDR
31909: GO 31933
// length := ( array - i_to ) + i_from ;
31911: LD_ADDR_VAR 0 11
31915: PUSH
31916: LD_VAR 0 1
31920: PUSH
31921: LD_VAR 0 3
31925: MINUS
31926: PUSH
31927: LD_VAR 0 2
31931: PLUS
31932: ST_TO_ADDR
// end ; if not length then
31933: LD_VAR 0 11
31937: NOT
31938: IFFALSE 31942
// exit ;
31940: GO 32100
// tmp := array ;
31942: LD_ADDR_VAR 0 10
31946: PUSH
31947: LD_VAR 0 1
31951: ST_TO_ADDR
// for i = 1 to length do
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: DOUBLE
31958: LD_INT 1
31960: DEC
31961: ST_TO_ADDR
31962: LD_VAR 0 11
31966: PUSH
31967: FOR_TO
31968: IFFALSE 32088
// begin for j = 1 to array do
31970: LD_ADDR_VAR 0 7
31974: PUSH
31975: DOUBLE
31976: LD_INT 1
31978: DEC
31979: ST_TO_ADDR
31980: LD_VAR 0 1
31984: PUSH
31985: FOR_TO
31986: IFFALSE 32074
// begin k := j + d ;
31988: LD_ADDR_VAR 0 8
31992: PUSH
31993: LD_VAR 0 7
31997: PUSH
31998: LD_VAR 0 9
32002: PLUS
32003: ST_TO_ADDR
// if k > array then
32004: LD_VAR 0 8
32008: PUSH
32009: LD_VAR 0 1
32013: GREATER
32014: IFFALSE 32024
// k := 1 ;
32016: LD_ADDR_VAR 0 8
32020: PUSH
32021: LD_INT 1
32023: ST_TO_ADDR
// if not k then
32024: LD_VAR 0 8
32028: NOT
32029: IFFALSE 32041
// k := array ;
32031: LD_ADDR_VAR 0 8
32035: PUSH
32036: LD_VAR 0 1
32040: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32041: LD_ADDR_VAR 0 10
32045: PUSH
32046: LD_VAR 0 10
32050: PPUSH
32051: LD_VAR 0 8
32055: PPUSH
32056: LD_VAR 0 1
32060: PUSH
32061: LD_VAR 0 7
32065: ARRAY
32066: PPUSH
32067: CALL_OW 1
32071: ST_TO_ADDR
// end ;
32072: GO 31985
32074: POP
32075: POP
// array := tmp ;
32076: LD_ADDR_VAR 0 1
32080: PUSH
32081: LD_VAR 0 10
32085: ST_TO_ADDR
// end ;
32086: GO 31967
32088: POP
32089: POP
// result := array ;
32090: LD_ADDR_VAR 0 5
32094: PUSH
32095: LD_VAR 0 1
32099: ST_TO_ADDR
// end ;
32100: LD_VAR 0 5
32104: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32105: LD_INT 0
32107: PPUSH
32108: PPUSH
// result := 0 ;
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_INT 0
32116: ST_TO_ADDR
// if not array or not value in array then
32117: LD_VAR 0 1
32121: NOT
32122: PUSH
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 1
32132: IN
32133: NOT
32134: OR
32135: IFFALSE 32139
// exit ;
32137: GO 32193
// for i = 1 to array do
32139: LD_ADDR_VAR 0 4
32143: PUSH
32144: DOUBLE
32145: LD_INT 1
32147: DEC
32148: ST_TO_ADDR
32149: LD_VAR 0 1
32153: PUSH
32154: FOR_TO
32155: IFFALSE 32191
// if value = array [ i ] then
32157: LD_VAR 0 2
32161: PUSH
32162: LD_VAR 0 1
32166: PUSH
32167: LD_VAR 0 4
32171: ARRAY
32172: EQUAL
32173: IFFALSE 32189
// begin result := i ;
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_VAR 0 4
32184: ST_TO_ADDR
// exit ;
32185: POP
32186: POP
32187: GO 32193
// end ;
32189: GO 32154
32191: POP
32192: POP
// end ;
32193: LD_VAR 0 3
32197: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32198: LD_INT 0
32200: PPUSH
// vc_chassis := chassis ;
32201: LD_ADDR_OWVAR 37
32205: PUSH
32206: LD_VAR 0 1
32210: ST_TO_ADDR
// vc_engine := engine ;
32211: LD_ADDR_OWVAR 39
32215: PUSH
32216: LD_VAR 0 2
32220: ST_TO_ADDR
// vc_control := control ;
32221: LD_ADDR_OWVAR 38
32225: PUSH
32226: LD_VAR 0 3
32230: ST_TO_ADDR
// vc_weapon := weapon ;
32231: LD_ADDR_OWVAR 40
32235: PUSH
32236: LD_VAR 0 4
32240: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32241: LD_ADDR_OWVAR 41
32245: PUSH
32246: LD_VAR 0 5
32250: ST_TO_ADDR
// end ;
32251: LD_VAR 0 6
32255: RET
// export function WantPlant ( unit ) ; var task ; begin
32256: LD_INT 0
32258: PPUSH
32259: PPUSH
// result := false ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: LD_INT 0
32267: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 437
32282: ST_TO_ADDR
// if task then
32283: LD_VAR 0 3
32287: IFFALSE 32315
// if task [ 1 ] [ 1 ] = p then
32289: LD_VAR 0 3
32293: PUSH
32294: LD_INT 1
32296: ARRAY
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PUSH
32302: LD_STRING p
32304: EQUAL
32305: IFFALSE 32315
// result := true ;
32307: LD_ADDR_VAR 0 2
32311: PUSH
32312: LD_INT 1
32314: ST_TO_ADDR
// end ;
32315: LD_VAR 0 2
32319: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32320: LD_INT 0
32322: PPUSH
32323: PPUSH
32324: PPUSH
32325: PPUSH
// if pos < 1 then
32326: LD_VAR 0 2
32330: PUSH
32331: LD_INT 1
32333: LESS
32334: IFFALSE 32338
// exit ;
32336: GO 32641
// if pos = 1 then
32338: LD_VAR 0 2
32342: PUSH
32343: LD_INT 1
32345: EQUAL
32346: IFFALSE 32379
// result := Replace ( arr , pos [ 1 ] , value ) else
32348: LD_ADDR_VAR 0 4
32352: PUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: PPUSH
32367: LD_VAR 0 3
32371: PPUSH
32372: CALL_OW 1
32376: ST_TO_ADDR
32377: GO 32641
// begin tmp := arr ;
32379: LD_ADDR_VAR 0 6
32383: PUSH
32384: LD_VAR 0 1
32388: ST_TO_ADDR
// s_arr := [ tmp ] ;
32389: LD_ADDR_VAR 0 7
32393: PUSH
32394: LD_VAR 0 6
32398: PUSH
32399: EMPTY
32400: LIST
32401: ST_TO_ADDR
// for i = 1 to pos - 1 do
32402: LD_ADDR_VAR 0 5
32406: PUSH
32407: DOUBLE
32408: LD_INT 1
32410: DEC
32411: ST_TO_ADDR
32412: LD_VAR 0 2
32416: PUSH
32417: LD_INT 1
32419: MINUS
32420: PUSH
32421: FOR_TO
32422: IFFALSE 32467
// begin tmp := tmp [ pos [ i ] ] ;
32424: LD_ADDR_VAR 0 6
32428: PUSH
32429: LD_VAR 0 6
32433: PUSH
32434: LD_VAR 0 2
32438: PUSH
32439: LD_VAR 0 5
32443: ARRAY
32444: ARRAY
32445: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32446: LD_ADDR_VAR 0 7
32450: PUSH
32451: LD_VAR 0 7
32455: PUSH
32456: LD_VAR 0 6
32460: PUSH
32461: EMPTY
32462: LIST
32463: ADD
32464: ST_TO_ADDR
// end ;
32465: GO 32421
32467: POP
32468: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32469: LD_ADDR_VAR 0 6
32473: PUSH
32474: LD_VAR 0 6
32478: PPUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 2
32488: ARRAY
32489: PPUSH
32490: LD_VAR 0 3
32494: PPUSH
32495: CALL_OW 1
32499: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32500: LD_ADDR_VAR 0 7
32504: PUSH
32505: LD_VAR 0 7
32509: PPUSH
32510: LD_VAR 0 7
32514: PPUSH
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
// for i = s_arr downto 2 do
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: DOUBLE
32531: LD_VAR 0 7
32535: INC
32536: ST_TO_ADDR
32537: LD_INT 2
32539: PUSH
32540: FOR_DOWNTO
32541: IFFALSE 32625
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32543: LD_ADDR_VAR 0 6
32547: PUSH
32548: LD_VAR 0 7
32552: PUSH
32553: LD_VAR 0 5
32557: PUSH
32558: LD_INT 1
32560: MINUS
32561: ARRAY
32562: PPUSH
32563: LD_VAR 0 2
32567: PUSH
32568: LD_VAR 0 5
32572: PUSH
32573: LD_INT 1
32575: MINUS
32576: ARRAY
32577: PPUSH
32578: LD_VAR 0 7
32582: PUSH
32583: LD_VAR 0 5
32587: ARRAY
32588: PPUSH
32589: CALL_OW 1
32593: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32594: LD_ADDR_VAR 0 7
32598: PUSH
32599: LD_VAR 0 7
32603: PPUSH
32604: LD_VAR 0 5
32608: PUSH
32609: LD_INT 1
32611: MINUS
32612: PPUSH
32613: LD_VAR 0 6
32617: PPUSH
32618: CALL_OW 1
32622: ST_TO_ADDR
// end ;
32623: GO 32540
32625: POP
32626: POP
// result := s_arr [ 1 ] ;
32627: LD_ADDR_VAR 0 4
32631: PUSH
32632: LD_VAR 0 7
32636: PUSH
32637: LD_INT 1
32639: ARRAY
32640: ST_TO_ADDR
// end ; end ;
32641: LD_VAR 0 4
32645: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
// if not list then
32650: LD_VAR 0 1
32654: NOT
32655: IFFALSE 32659
// exit ;
32657: GO 32750
// i := list [ pos1 ] ;
32659: LD_ADDR_VAR 0 5
32663: PUSH
32664: LD_VAR 0 1
32668: PUSH
32669: LD_VAR 0 2
32673: ARRAY
32674: ST_TO_ADDR
// if not i then
32675: LD_VAR 0 5
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 32750
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32684: LD_ADDR_VAR 0 1
32688: PUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: LD_VAR 0 2
32698: PPUSH
32699: LD_VAR 0 1
32703: PUSH
32704: LD_VAR 0 3
32708: ARRAY
32709: PPUSH
32710: CALL_OW 1
32714: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32715: LD_ADDR_VAR 0 1
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: LD_VAR 0 3
32729: PPUSH
32730: LD_VAR 0 5
32734: PPUSH
32735: CALL_OW 1
32739: ST_TO_ADDR
// result := list ;
32740: LD_ADDR_VAR 0 4
32744: PUSH
32745: LD_VAR 0 1
32749: ST_TO_ADDR
// end ;
32750: LD_VAR 0 4
32754: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32755: LD_INT 0
32757: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32758: LD_ADDR_VAR 0 5
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 250
32772: PPUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 251
32782: PPUSH
32783: LD_VAR 0 2
32787: PPUSH
32788: LD_VAR 0 3
32792: PPUSH
32793: LD_VAR 0 4
32797: PPUSH
32798: CALL 33176 0 5
32802: ST_TO_ADDR
// end ;
32803: LD_VAR 0 5
32807: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32808: LD_INT 0
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
// if not list or not unit then
32814: LD_VAR 0 2
32818: NOT
32819: PUSH
32820: LD_VAR 0 1
32824: NOT
32825: OR
32826: IFFALSE 32830
// exit ;
32828: GO 33171
// result := [ ] ;
32830: LD_ADDR_VAR 0 5
32834: PUSH
32835: EMPTY
32836: ST_TO_ADDR
// for i in list do
32837: LD_ADDR_VAR 0 6
32841: PUSH
32842: LD_VAR 0 2
32846: PUSH
32847: FOR_IN
32848: IFFALSE 33066
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32850: LD_ADDR_VAR 0 8
32854: PUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: LD_VAR 0 6
32864: PUSH
32865: LD_INT 1
32867: ARRAY
32868: PPUSH
32869: LD_VAR 0 6
32873: PUSH
32874: LD_INT 2
32876: ARRAY
32877: PPUSH
32878: CALL_OW 297
32882: ST_TO_ADDR
// if not Count ( result ) then
32883: LD_VAR 0 5
32887: PPUSH
32888: CALL 29460 0 1
32892: NOT
32893: IFFALSE 32926
// begin result := Join ( result , [ i , tmp ] ) ;
32895: LD_ADDR_VAR 0 5
32899: PUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: LD_VAR 0 6
32909: PUSH
32910: LD_VAR 0 8
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PPUSH
32919: CALL 65060 0 2
32923: ST_TO_ADDR
// continue ;
32924: GO 32847
// end ; if result [ result ] [ 2 ] <= tmp then
32926: LD_VAR 0 5
32930: PUSH
32931: LD_VAR 0 5
32935: ARRAY
32936: PUSH
32937: LD_INT 2
32939: ARRAY
32940: PUSH
32941: LD_VAR 0 8
32945: LESSEQUAL
32946: IFFALSE 32979
// result := Join ( result , [ i , tmp ] ) else
32948: LD_ADDR_VAR 0 5
32952: PUSH
32953: LD_VAR 0 5
32957: PPUSH
32958: LD_VAR 0 6
32962: PUSH
32963: LD_VAR 0 8
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PPUSH
32972: CALL 65060 0 2
32976: ST_TO_ADDR
32977: GO 33064
// begin for j := 1 to Count ( result ) do
32979: LD_ADDR_VAR 0 7
32983: PUSH
32984: DOUBLE
32985: LD_INT 1
32987: DEC
32988: ST_TO_ADDR
32989: LD_VAR 0 5
32993: PPUSH
32994: CALL 29460 0 1
32998: PUSH
32999: FOR_TO
33000: IFFALSE 33062
// begin if tmp < result [ j ] [ 2 ] then
33002: LD_VAR 0 8
33006: PUSH
33007: LD_VAR 0 5
33011: PUSH
33012: LD_VAR 0 7
33016: ARRAY
33017: PUSH
33018: LD_INT 2
33020: ARRAY
33021: LESS
33022: IFFALSE 33060
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_VAR 0 5
33033: PPUSH
33034: LD_VAR 0 7
33038: PPUSH
33039: LD_VAR 0 6
33043: PUSH
33044: LD_VAR 0 8
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PPUSH
33053: CALL_OW 2
33057: ST_TO_ADDR
// break ;
33058: GO 33062
// end ; end ;
33060: GO 32999
33062: POP
33063: POP
// end ; end ;
33064: GO 32847
33066: POP
33067: POP
// if result and not asc then
33068: LD_VAR 0 5
33072: PUSH
33073: LD_VAR 0 3
33077: NOT
33078: AND
33079: IFFALSE 33096
// result := ReverseArray ( result ) ;
33081: LD_ADDR_VAR 0 5
33085: PUSH
33086: LD_VAR 0 5
33090: PPUSH
33091: CALL 60336 0 1
33095: ST_TO_ADDR
// tmp := [ ] ;
33096: LD_ADDR_VAR 0 8
33100: PUSH
33101: EMPTY
33102: ST_TO_ADDR
// if mode then
33103: LD_VAR 0 4
33107: IFFALSE 33171
// begin for i := 1 to result do
33109: LD_ADDR_VAR 0 6
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_VAR 0 5
33123: PUSH
33124: FOR_TO
33125: IFFALSE 33159
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33127: LD_ADDR_VAR 0 8
33131: PUSH
33132: LD_VAR 0 8
33136: PPUSH
33137: LD_VAR 0 5
33141: PUSH
33142: LD_VAR 0 6
33146: ARRAY
33147: PUSH
33148: LD_INT 1
33150: ARRAY
33151: PPUSH
33152: CALL 65060 0 2
33156: ST_TO_ADDR
33157: GO 33124
33159: POP
33160: POP
// result := tmp ;
33161: LD_ADDR_VAR 0 5
33165: PUSH
33166: LD_VAR 0 8
33170: ST_TO_ADDR
// end ; end ;
33171: LD_VAR 0 5
33175: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
// if not list then
33182: LD_VAR 0 3
33186: NOT
33187: IFFALSE 33191
// exit ;
33189: GO 33579
// result := [ ] ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: EMPTY
33197: ST_TO_ADDR
// for i in list do
33198: LD_ADDR_VAR 0 7
33202: PUSH
33203: LD_VAR 0 3
33207: PUSH
33208: FOR_IN
33209: IFFALSE 33411
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33211: LD_ADDR_VAR 0 9
33215: PUSH
33216: LD_VAR 0 7
33220: PPUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: LD_VAR 0 2
33230: PPUSH
33231: CALL_OW 297
33235: ST_TO_ADDR
// if not result then
33236: LD_VAR 0 6
33240: NOT
33241: IFFALSE 33267
// result := [ [ i , tmp ] ] else
33243: LD_ADDR_VAR 0 6
33247: PUSH
33248: LD_VAR 0 7
33252: PUSH
33253: LD_VAR 0 9
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: ST_TO_ADDR
33265: GO 33409
// begin if result [ result ] [ 2 ] < tmp then
33267: LD_VAR 0 6
33271: PUSH
33272: LD_VAR 0 6
33276: ARRAY
33277: PUSH
33278: LD_INT 2
33280: ARRAY
33281: PUSH
33282: LD_VAR 0 9
33286: LESS
33287: IFFALSE 33329
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33289: LD_ADDR_VAR 0 6
33293: PUSH
33294: LD_VAR 0 6
33298: PPUSH
33299: LD_VAR 0 6
33303: PUSH
33304: LD_INT 1
33306: PLUS
33307: PPUSH
33308: LD_VAR 0 7
33312: PUSH
33313: LD_VAR 0 9
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PPUSH
33322: CALL_OW 2
33326: ST_TO_ADDR
33327: GO 33409
// for j = 1 to result do
33329: LD_ADDR_VAR 0 8
33333: PUSH
33334: DOUBLE
33335: LD_INT 1
33337: DEC
33338: ST_TO_ADDR
33339: LD_VAR 0 6
33343: PUSH
33344: FOR_TO
33345: IFFALSE 33407
// begin if tmp < result [ j ] [ 2 ] then
33347: LD_VAR 0 9
33351: PUSH
33352: LD_VAR 0 6
33356: PUSH
33357: LD_VAR 0 8
33361: ARRAY
33362: PUSH
33363: LD_INT 2
33365: ARRAY
33366: LESS
33367: IFFALSE 33405
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33369: LD_ADDR_VAR 0 6
33373: PUSH
33374: LD_VAR 0 6
33378: PPUSH
33379: LD_VAR 0 8
33383: PPUSH
33384: LD_VAR 0 7
33388: PUSH
33389: LD_VAR 0 9
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PPUSH
33398: CALL_OW 2
33402: ST_TO_ADDR
// break ;
33403: GO 33407
// end ; end ;
33405: GO 33344
33407: POP
33408: POP
// end ; end ;
33409: GO 33208
33411: POP
33412: POP
// if result and not asc then
33413: LD_VAR 0 6
33417: PUSH
33418: LD_VAR 0 4
33422: NOT
33423: AND
33424: IFFALSE 33499
// begin tmp := result ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_VAR 0 6
33435: ST_TO_ADDR
// for i = tmp downto 1 do
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: DOUBLE
33442: LD_VAR 0 9
33446: INC
33447: ST_TO_ADDR
33448: LD_INT 1
33450: PUSH
33451: FOR_DOWNTO
33452: IFFALSE 33497
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33454: LD_ADDR_VAR 0 6
33458: PUSH
33459: LD_VAR 0 6
33463: PPUSH
33464: LD_VAR 0 9
33468: PUSH
33469: LD_VAR 0 7
33473: MINUS
33474: PUSH
33475: LD_INT 1
33477: PLUS
33478: PPUSH
33479: LD_VAR 0 9
33483: PUSH
33484: LD_VAR 0 7
33488: ARRAY
33489: PPUSH
33490: CALL_OW 1
33494: ST_TO_ADDR
33495: GO 33451
33497: POP
33498: POP
// end ; tmp := [ ] ;
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: EMPTY
33505: ST_TO_ADDR
// if mode then
33506: LD_VAR 0 5
33510: IFFALSE 33579
// begin for i = 1 to result do
33512: LD_ADDR_VAR 0 7
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_VAR 0 6
33526: PUSH
33527: FOR_TO
33528: IFFALSE 33567
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33530: LD_ADDR_VAR 0 9
33534: PUSH
33535: LD_VAR 0 9
33539: PPUSH
33540: LD_VAR 0 7
33544: PPUSH
33545: LD_VAR 0 6
33549: PUSH
33550: LD_VAR 0 7
33554: ARRAY
33555: PUSH
33556: LD_INT 1
33558: ARRAY
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
33565: GO 33527
33567: POP
33568: POP
// result := tmp ;
33569: LD_ADDR_VAR 0 6
33573: PUSH
33574: LD_VAR 0 9
33578: ST_TO_ADDR
// end ; end ;
33579: LD_VAR 0 6
33583: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33584: LD_INT 0
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33592: LD_ADDR_VAR 0 5
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: ST_TO_ADDR
// if not x or not y then
33614: LD_VAR 0 2
33618: NOT
33619: PUSH
33620: LD_VAR 0 3
33624: NOT
33625: OR
33626: IFFALSE 33630
// exit ;
33628: GO 35280
// if not range then
33630: LD_VAR 0 4
33634: NOT
33635: IFFALSE 33645
// range := 10 ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 10
33644: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33645: LD_ADDR_VAR 0 8
33649: PUSH
33650: LD_INT 81
33652: PUSH
33653: LD_VAR 0 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 92
33664: PUSH
33665: LD_VAR 0 2
33669: PUSH
33670: LD_VAR 0 3
33674: PUSH
33675: LD_VAR 0 4
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 21
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 69
33712: ST_TO_ADDR
// if not tmp then
33713: LD_VAR 0 8
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 35280
// for i in tmp do
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 8
33731: PUSH
33732: FOR_IN
33733: IFFALSE 35255
// begin points := [ 0 , 0 , 0 ] ;
33735: LD_ADDR_VAR 0 9
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
// bpoints := 1 ;
33754: LD_ADDR_VAR 0 10
33758: PUSH
33759: LD_INT 1
33761: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33762: LD_VAR 0 6
33766: PPUSH
33767: CALL_OW 247
33771: PUSH
33772: LD_INT 1
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 34358
33780: POP
// begin if GetClass ( i ) = 1 then
33781: LD_VAR 0 6
33785: PPUSH
33786: CALL_OW 257
33790: PUSH
33791: LD_INT 1
33793: EQUAL
33794: IFFALSE 33815
// points := [ 10 , 5 , 3 ] ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_INT 10
33803: PUSH
33804: LD_INT 5
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33815: LD_VAR 0 6
33819: PPUSH
33820: CALL_OW 257
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 4
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: IN
33839: IFFALSE 33860
// points := [ 3 , 2 , 1 ] ;
33841: LD_ADDR_VAR 0 9
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33860: LD_VAR 0 6
33864: PPUSH
33865: CALL_OW 257
33869: PUSH
33870: LD_INT 5
33872: EQUAL
33873: IFFALSE 33894
// points := [ 130 , 5 , 2 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 130
33882: PUSH
33883: LD_INT 5
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 257
33903: PUSH
33904: LD_INT 8
33906: EQUAL
33907: IFFALSE 33928
// points := [ 35 , 35 , 30 ] ;
33909: LD_ADDR_VAR 0 9
33913: PUSH
33914: LD_INT 35
33916: PUSH
33917: LD_INT 35
33919: PUSH
33920: LD_INT 30
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33928: LD_VAR 0 6
33932: PPUSH
33933: CALL_OW 257
33937: PUSH
33938: LD_INT 9
33940: EQUAL
33941: IFFALSE 33962
// points := [ 20 , 55 , 40 ] ;
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: LD_INT 20
33950: PUSH
33951: LD_INT 55
33953: PUSH
33954: LD_INT 40
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33962: LD_VAR 0 6
33966: PPUSH
33967: CALL_OW 257
33971: PUSH
33972: LD_INT 12
33974: PUSH
33975: LD_INT 16
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: IN
33982: IFFALSE 34003
// points := [ 5 , 3 , 2 ] ;
33984: LD_ADDR_VAR 0 9
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: LD_INT 3
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34003: LD_VAR 0 6
34007: PPUSH
34008: CALL_OW 257
34012: PUSH
34013: LD_INT 17
34015: EQUAL
34016: IFFALSE 34037
// points := [ 100 , 50 , 75 ] ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_INT 100
34025: PUSH
34026: LD_INT 50
34028: PUSH
34029: LD_INT 75
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34037: LD_VAR 0 6
34041: PPUSH
34042: CALL_OW 257
34046: PUSH
34047: LD_INT 15
34049: EQUAL
34050: IFFALSE 34071
// points := [ 10 , 5 , 3 ] ;
34052: LD_ADDR_VAR 0 9
34056: PUSH
34057: LD_INT 10
34059: PUSH
34060: LD_INT 5
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34071: LD_VAR 0 6
34075: PPUSH
34076: CALL_OW 257
34080: PUSH
34081: LD_INT 14
34083: EQUAL
34084: IFFALSE 34105
// points := [ 10 , 0 , 0 ] ;
34086: LD_ADDR_VAR 0 9
34090: PUSH
34091: LD_INT 10
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34105: LD_VAR 0 6
34109: PPUSH
34110: CALL_OW 257
34114: PUSH
34115: LD_INT 11
34117: EQUAL
34118: IFFALSE 34139
// points := [ 30 , 10 , 5 ] ;
34120: LD_ADDR_VAR 0 9
34124: PUSH
34125: LD_INT 30
34127: PUSH
34128: LD_INT 10
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34139: LD_VAR 0 1
34143: PPUSH
34144: LD_INT 5
34146: PPUSH
34147: CALL_OW 321
34151: PUSH
34152: LD_INT 2
34154: EQUAL
34155: IFFALSE 34172
// bpoints := bpoints * 1.8 ;
34157: LD_ADDR_VAR 0 10
34161: PUSH
34162: LD_VAR 0 10
34166: PUSH
34167: LD_REAL  1.80000000000000E+0000
34170: MUL
34171: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34172: LD_VAR 0 6
34176: PPUSH
34177: CALL_OW 257
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: LD_INT 4
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: IN
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: LD_INT 51
34208: PPUSH
34209: CALL_OW 321
34213: PUSH
34214: LD_INT 2
34216: EQUAL
34217: AND
34218: IFFALSE 34235
// bpoints := bpoints * 1.2 ;
34220: LD_ADDR_VAR 0 10
34224: PUSH
34225: LD_VAR 0 10
34229: PUSH
34230: LD_REAL  1.20000000000000E+0000
34233: MUL
34234: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34235: LD_VAR 0 6
34239: PPUSH
34240: CALL_OW 257
34244: PUSH
34245: LD_INT 5
34247: PUSH
34248: LD_INT 7
34250: PUSH
34251: LD_INT 9
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: IN
34259: PUSH
34260: LD_VAR 0 1
34264: PPUSH
34265: LD_INT 52
34267: PPUSH
34268: CALL_OW 321
34272: PUSH
34273: LD_INT 2
34275: EQUAL
34276: AND
34277: IFFALSE 34294
// bpoints := bpoints * 1.5 ;
34279: LD_ADDR_VAR 0 10
34283: PUSH
34284: LD_VAR 0 10
34288: PUSH
34289: LD_REAL  1.50000000000000E+0000
34292: MUL
34293: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34294: LD_VAR 0 1
34298: PPUSH
34299: LD_INT 66
34301: PPUSH
34302: CALL_OW 321
34306: PUSH
34307: LD_INT 2
34309: EQUAL
34310: IFFALSE 34327
// bpoints := bpoints * 1.1 ;
34312: LD_ADDR_VAR 0 10
34316: PUSH
34317: LD_VAR 0 10
34321: PUSH
34322: LD_REAL  1.10000000000000E+0000
34325: MUL
34326: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34327: LD_ADDR_VAR 0 10
34331: PUSH
34332: LD_VAR 0 10
34336: PUSH
34337: LD_VAR 0 6
34341: PPUSH
34342: LD_INT 1
34344: PPUSH
34345: CALL_OW 259
34349: PUSH
34350: LD_REAL  1.15000000000000E+0000
34353: MUL
34354: MUL
34355: ST_TO_ADDR
// end ; unit_vehicle :
34356: GO 35184
34358: LD_INT 2
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 35172
34366: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34367: LD_VAR 0 6
34371: PPUSH
34372: CALL_OW 264
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 42
34382: PUSH
34383: LD_INT 24
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: IN
34391: IFFALSE 34412
// points := [ 25 , 5 , 3 ] ;
34393: LD_ADDR_VAR 0 9
34397: PUSH
34398: LD_INT 25
34400: PUSH
34401: LD_INT 5
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34412: LD_VAR 0 6
34416: PPUSH
34417: CALL_OW 264
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 43
34427: PUSH
34428: LD_INT 25
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: IN
34436: IFFALSE 34457
// points := [ 40 , 15 , 5 ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: LD_INT 40
34445: PUSH
34446: LD_INT 15
34448: PUSH
34449: LD_INT 5
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 264
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 23
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: IN
34477: IFFALSE 34498
// points := [ 7 , 25 , 8 ] ;
34479: LD_ADDR_VAR 0 9
34483: PUSH
34484: LD_INT 7
34486: PUSH
34487: LD_INT 25
34489: PUSH
34490: LD_INT 8
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34498: LD_VAR 0 6
34502: PPUSH
34503: CALL_OW 264
34507: PUSH
34508: LD_INT 5
34510: PUSH
34511: LD_INT 27
34513: PUSH
34514: LD_INT 44
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: IN
34522: IFFALSE 34543
// points := [ 14 , 50 , 16 ] ;
34524: LD_ADDR_VAR 0 9
34528: PUSH
34529: LD_INT 14
34531: PUSH
34532: LD_INT 50
34534: PUSH
34535: LD_INT 16
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34543: LD_VAR 0 6
34547: PPUSH
34548: CALL_OW 264
34552: PUSH
34553: LD_INT 6
34555: PUSH
34556: LD_INT 46
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: IN
34563: IFFALSE 34584
// points := [ 32 , 120 , 70 ] ;
34565: LD_ADDR_VAR 0 9
34569: PUSH
34570: LD_INT 32
34572: PUSH
34573: LD_INT 120
34575: PUSH
34576: LD_INT 70
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34584: LD_VAR 0 6
34588: PPUSH
34589: CALL_OW 264
34593: PUSH
34594: LD_INT 7
34596: PUSH
34597: LD_INT 28
34599: PUSH
34600: LD_INT 45
34602: PUSH
34603: LD_INT 92
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: IN
34612: IFFALSE 34633
// points := [ 35 , 20 , 45 ] ;
34614: LD_ADDR_VAR 0 9
34618: PUSH
34619: LD_INT 35
34621: PUSH
34622: LD_INT 20
34624: PUSH
34625: LD_INT 45
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34633: LD_VAR 0 6
34637: PPUSH
34638: CALL_OW 264
34642: PUSH
34643: LD_INT 47
34645: PUSH
34646: EMPTY
34647: LIST
34648: IN
34649: IFFALSE 34670
// points := [ 67 , 45 , 75 ] ;
34651: LD_ADDR_VAR 0 9
34655: PUSH
34656: LD_INT 67
34658: PUSH
34659: LD_INT 45
34661: PUSH
34662: LD_INT 75
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34670: LD_VAR 0 6
34674: PPUSH
34675: CALL_OW 264
34679: PUSH
34680: LD_INT 26
34682: PUSH
34683: EMPTY
34684: LIST
34685: IN
34686: IFFALSE 34707
// points := [ 120 , 30 , 80 ] ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_INT 120
34695: PUSH
34696: LD_INT 30
34698: PUSH
34699: LD_INT 80
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34707: LD_VAR 0 6
34711: PPUSH
34712: CALL_OW 264
34716: PUSH
34717: LD_INT 22
34719: PUSH
34720: EMPTY
34721: LIST
34722: IN
34723: IFFALSE 34744
// points := [ 40 , 1 , 1 ] ;
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_INT 40
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34744: LD_VAR 0 6
34748: PPUSH
34749: CALL_OW 264
34753: PUSH
34754: LD_INT 29
34756: PUSH
34757: EMPTY
34758: LIST
34759: IN
34760: IFFALSE 34781
// points := [ 70 , 200 , 400 ] ;
34762: LD_ADDR_VAR 0 9
34766: PUSH
34767: LD_INT 70
34769: PUSH
34770: LD_INT 200
34772: PUSH
34773: LD_INT 400
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34781: LD_VAR 0 6
34785: PPUSH
34786: CALL_OW 264
34790: PUSH
34791: LD_INT 14
34793: PUSH
34794: LD_INT 53
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: IN
34801: IFFALSE 34822
// points := [ 40 , 10 , 20 ] ;
34803: LD_ADDR_VAR 0 9
34807: PUSH
34808: LD_INT 40
34810: PUSH
34811: LD_INT 10
34813: PUSH
34814: LD_INT 20
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34822: LD_VAR 0 6
34826: PPUSH
34827: CALL_OW 264
34831: PUSH
34832: LD_INT 9
34834: PUSH
34835: EMPTY
34836: LIST
34837: IN
34838: IFFALSE 34859
// points := [ 5 , 70 , 20 ] ;
34840: LD_ADDR_VAR 0 9
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 70
34850: PUSH
34851: LD_INT 20
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34859: LD_VAR 0 6
34863: PPUSH
34864: CALL_OW 264
34868: PUSH
34869: LD_INT 10
34871: PUSH
34872: EMPTY
34873: LIST
34874: IN
34875: IFFALSE 34896
// points := [ 35 , 110 , 70 ] ;
34877: LD_ADDR_VAR 0 9
34881: PUSH
34882: LD_INT 35
34884: PUSH
34885: LD_INT 110
34887: PUSH
34888: LD_INT 70
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34896: LD_VAR 0 6
34900: PPUSH
34901: CALL_OW 265
34905: PUSH
34906: LD_INT 25
34908: EQUAL
34909: IFFALSE 34930
// points := [ 80 , 65 , 100 ] ;
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: LD_INT 80
34918: PUSH
34919: LD_INT 65
34921: PUSH
34922: LD_INT 100
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34930: LD_VAR 0 6
34934: PPUSH
34935: CALL_OW 263
34939: PUSH
34940: LD_INT 1
34942: EQUAL
34943: IFFALSE 34978
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34945: LD_ADDR_VAR 0 10
34949: PUSH
34950: LD_VAR 0 10
34954: PUSH
34955: LD_VAR 0 6
34959: PPUSH
34960: CALL_OW 311
34964: PPUSH
34965: LD_INT 3
34967: PPUSH
34968: CALL_OW 259
34972: PUSH
34973: LD_INT 4
34975: MUL
34976: MUL
34977: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34978: LD_VAR 0 6
34982: PPUSH
34983: CALL_OW 263
34987: PUSH
34988: LD_INT 2
34990: EQUAL
34991: IFFALSE 35042
// begin j := IsControledBy ( i ) ;
34993: LD_ADDR_VAR 0 7
34997: PUSH
34998: LD_VAR 0 6
35002: PPUSH
35003: CALL_OW 312
35007: ST_TO_ADDR
// if j then
35008: LD_VAR 0 7
35012: IFFALSE 35042
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35014: LD_ADDR_VAR 0 10
35018: PUSH
35019: LD_VAR 0 10
35023: PUSH
35024: LD_VAR 0 7
35028: PPUSH
35029: LD_INT 3
35031: PPUSH
35032: CALL_OW 259
35036: PUSH
35037: LD_INT 3
35039: MUL
35040: MUL
35041: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35042: LD_VAR 0 6
35046: PPUSH
35047: CALL_OW 264
35051: PUSH
35052: LD_INT 5
35054: PUSH
35055: LD_INT 6
35057: PUSH
35058: LD_INT 46
35060: PUSH
35061: LD_INT 44
35063: PUSH
35064: LD_INT 47
35066: PUSH
35067: LD_INT 45
35069: PUSH
35070: LD_INT 28
35072: PUSH
35073: LD_INT 7
35075: PUSH
35076: LD_INT 27
35078: PUSH
35079: LD_INT 29
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: IN
35094: PUSH
35095: LD_VAR 0 1
35099: PPUSH
35100: LD_INT 52
35102: PPUSH
35103: CALL_OW 321
35107: PUSH
35108: LD_INT 2
35110: EQUAL
35111: AND
35112: IFFALSE 35129
// bpoints := bpoints * 1.2 ;
35114: LD_ADDR_VAR 0 10
35118: PUSH
35119: LD_VAR 0 10
35123: PUSH
35124: LD_REAL  1.20000000000000E+0000
35127: MUL
35128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35129: LD_VAR 0 6
35133: PPUSH
35134: CALL_OW 264
35138: PUSH
35139: LD_INT 6
35141: PUSH
35142: LD_INT 46
35144: PUSH
35145: LD_INT 47
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: IN
35153: IFFALSE 35170
// bpoints := bpoints * 1.2 ;
35155: LD_ADDR_VAR 0 10
35159: PUSH
35160: LD_VAR 0 10
35164: PUSH
35165: LD_REAL  1.20000000000000E+0000
35168: MUL
35169: ST_TO_ADDR
// end ; unit_building :
35170: GO 35184
35172: LD_INT 3
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35183
35180: POP
// ; end ;
35181: GO 35184
35183: POP
// for j = 1 to 3 do
35184: LD_ADDR_VAR 0 7
35188: PUSH
35189: DOUBLE
35190: LD_INT 1
35192: DEC
35193: ST_TO_ADDR
35194: LD_INT 3
35196: PUSH
35197: FOR_TO
35198: IFFALSE 35251
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35200: LD_ADDR_VAR 0 5
35204: PUSH
35205: LD_VAR 0 5
35209: PPUSH
35210: LD_VAR 0 7
35214: PPUSH
35215: LD_VAR 0 5
35219: PUSH
35220: LD_VAR 0 7
35224: ARRAY
35225: PUSH
35226: LD_VAR 0 9
35230: PUSH
35231: LD_VAR 0 7
35235: ARRAY
35236: PUSH
35237: LD_VAR 0 10
35241: MUL
35242: PLUS
35243: PPUSH
35244: CALL_OW 1
35248: ST_TO_ADDR
35249: GO 35197
35251: POP
35252: POP
// end ;
35253: GO 33732
35255: POP
35256: POP
// result := Replace ( result , 4 , tmp ) ;
35257: LD_ADDR_VAR 0 5
35261: PUSH
35262: LD_VAR 0 5
35266: PPUSH
35267: LD_INT 4
35269: PPUSH
35270: LD_VAR 0 8
35274: PPUSH
35275: CALL_OW 1
35279: ST_TO_ADDR
// end ;
35280: LD_VAR 0 5
35284: RET
// export function DangerAtRange ( unit , range ) ; begin
35285: LD_INT 0
35287: PPUSH
// if not unit then
35288: LD_VAR 0 1
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 35342
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35297: LD_ADDR_VAR 0 3
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 255
35311: PPUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 250
35321: PPUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 251
35331: PPUSH
35332: LD_VAR 0 2
35336: PPUSH
35337: CALL 33584 0 4
35341: ST_TO_ADDR
// end ;
35342: LD_VAR 0 3
35346: RET
// export function DangerInArea ( side , area ) ; begin
35347: LD_INT 0
35349: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35350: LD_ADDR_VAR 0 3
35354: PUSH
35355: LD_VAR 0 2
35359: PPUSH
35360: LD_INT 81
35362: PUSH
35363: LD_VAR 0 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PPUSH
35372: CALL_OW 70
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 3
35381: RET
// export function IsExtension ( b ) ; begin
35382: LD_INT 0
35384: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35385: LD_ADDR_VAR 0 2
35389: PUSH
35390: LD_VAR 0 1
35394: PUSH
35395: LD_INT 23
35397: PUSH
35398: LD_INT 20
35400: PUSH
35401: LD_INT 22
35403: PUSH
35404: LD_INT 17
35406: PUSH
35407: LD_INT 24
35409: PUSH
35410: LD_INT 21
35412: PUSH
35413: LD_INT 19
35415: PUSH
35416: LD_INT 16
35418: PUSH
35419: LD_INT 25
35421: PUSH
35422: LD_INT 18
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: IN
35437: ST_TO_ADDR
// end ;
35438: LD_VAR 0 2
35442: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35443: LD_INT 0
35445: PPUSH
35446: PPUSH
35447: PPUSH
// result := [ ] ;
35448: LD_ADDR_VAR 0 4
35452: PUSH
35453: EMPTY
35454: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: LD_VAR 0 2
35464: PPUSH
35465: LD_INT 21
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 70
35479: ST_TO_ADDR
// if not tmp then
35480: LD_VAR 0 5
35484: NOT
35485: IFFALSE 35489
// exit ;
35487: GO 35553
// if checkLink then
35489: LD_VAR 0 3
35493: IFFALSE 35543
// begin for i in tmp do
35495: LD_ADDR_VAR 0 6
35499: PUSH
35500: LD_VAR 0 5
35504: PUSH
35505: FOR_IN
35506: IFFALSE 35541
// if GetBase ( i ) <> base then
35508: LD_VAR 0 6
35512: PPUSH
35513: CALL_OW 274
35517: PUSH
35518: LD_VAR 0 1
35522: NONEQUAL
35523: IFFALSE 35539
// ComLinkToBase ( base , i ) ;
35525: LD_VAR 0 1
35529: PPUSH
35530: LD_VAR 0 6
35534: PPUSH
35535: CALL_OW 169
35539: GO 35505
35541: POP
35542: POP
// end ; result := tmp ;
35543: LD_ADDR_VAR 0 4
35547: PUSH
35548: LD_VAR 0 5
35552: ST_TO_ADDR
// end ;
35553: LD_VAR 0 4
35557: RET
// export function ComComplete ( units , b ) ; var i ; begin
35558: LD_INT 0
35560: PPUSH
35561: PPUSH
// if not units then
35562: LD_VAR 0 1
35566: NOT
35567: IFFALSE 35571
// exit ;
35569: GO 35661
// for i in units do
35571: LD_ADDR_VAR 0 4
35575: PUSH
35576: LD_VAR 0 1
35580: PUSH
35581: FOR_IN
35582: IFFALSE 35659
// if BuildingStatus ( b ) = bs_build then
35584: LD_VAR 0 2
35588: PPUSH
35589: CALL_OW 461
35593: PUSH
35594: LD_INT 1
35596: EQUAL
35597: IFFALSE 35657
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35599: LD_VAR 0 4
35603: PPUSH
35604: LD_STRING h
35606: PUSH
35607: LD_VAR 0 2
35611: PPUSH
35612: CALL_OW 250
35616: PUSH
35617: LD_VAR 0 2
35621: PPUSH
35622: CALL_OW 251
35626: PUSH
35627: LD_VAR 0 2
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: EMPTY
35651: LIST
35652: PPUSH
35653: CALL_OW 446
35657: GO 35581
35659: POP
35660: POP
// end ;
35661: LD_VAR 0 3
35665: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35666: LD_INT 0
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35674: LD_VAR 0 1
35678: NOT
35679: PUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 263
35689: PUSH
35690: LD_INT 2
35692: NONEQUAL
35693: OR
35694: IFFALSE 35698
// exit ;
35696: GO 36014
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35698: LD_ADDR_VAR 0 6
35702: PUSH
35703: LD_INT 22
35705: PUSH
35706: LD_VAR 0 1
35710: PPUSH
35711: CALL_OW 255
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 30
35725: PUSH
35726: LD_INT 36
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 34
35735: PUSH
35736: LD_INT 31
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PPUSH
35752: CALL_OW 69
35756: ST_TO_ADDR
// if not tmp then
35757: LD_VAR 0 6
35761: NOT
35762: IFFALSE 35766
// exit ;
35764: GO 36014
// result := [ ] ;
35766: LD_ADDR_VAR 0 2
35770: PUSH
35771: EMPTY
35772: ST_TO_ADDR
// for i in tmp do
35773: LD_ADDR_VAR 0 3
35777: PUSH
35778: LD_VAR 0 6
35782: PUSH
35783: FOR_IN
35784: IFFALSE 35855
// begin t := UnitsInside ( i ) ;
35786: LD_ADDR_VAR 0 4
35790: PUSH
35791: LD_VAR 0 3
35795: PPUSH
35796: CALL_OW 313
35800: ST_TO_ADDR
// if t then
35801: LD_VAR 0 4
35805: IFFALSE 35853
// for j in t do
35807: LD_ADDR_VAR 0 7
35811: PUSH
35812: LD_VAR 0 4
35816: PUSH
35817: FOR_IN
35818: IFFALSE 35851
// result := Replace ( result , result + 1 , j ) ;
35820: LD_ADDR_VAR 0 2
35824: PUSH
35825: LD_VAR 0 2
35829: PPUSH
35830: LD_VAR 0 2
35834: PUSH
35835: LD_INT 1
35837: PLUS
35838: PPUSH
35839: LD_VAR 0 7
35843: PPUSH
35844: CALL_OW 1
35848: ST_TO_ADDR
35849: GO 35817
35851: POP
35852: POP
// end ;
35853: GO 35783
35855: POP
35856: POP
// if not result then
35857: LD_VAR 0 2
35861: NOT
35862: IFFALSE 35866
// exit ;
35864: GO 36014
// mech := result [ 1 ] ;
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: LD_VAR 0 2
35875: PUSH
35876: LD_INT 1
35878: ARRAY
35879: ST_TO_ADDR
// if result > 1 then
35880: LD_VAR 0 2
35884: PUSH
35885: LD_INT 1
35887: GREATER
35888: IFFALSE 36000
// begin for i = 2 to result do
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: DOUBLE
35896: LD_INT 2
35898: DEC
35899: ST_TO_ADDR
35900: LD_VAR 0 2
35904: PUSH
35905: FOR_TO
35906: IFFALSE 35998
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35908: LD_ADDR_VAR 0 4
35912: PUSH
35913: LD_VAR 0 2
35917: PUSH
35918: LD_VAR 0 3
35922: ARRAY
35923: PPUSH
35924: LD_INT 3
35926: PPUSH
35927: CALL_OW 259
35931: PUSH
35932: LD_VAR 0 2
35936: PUSH
35937: LD_VAR 0 3
35941: ARRAY
35942: PPUSH
35943: CALL_OW 432
35947: MINUS
35948: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35949: LD_VAR 0 4
35953: PUSH
35954: LD_VAR 0 5
35958: PPUSH
35959: LD_INT 3
35961: PPUSH
35962: CALL_OW 259
35966: PUSH
35967: LD_VAR 0 5
35971: PPUSH
35972: CALL_OW 432
35976: MINUS
35977: GREATEREQUAL
35978: IFFALSE 35996
// mech := result [ i ] ;
35980: LD_ADDR_VAR 0 5
35984: PUSH
35985: LD_VAR 0 2
35989: PUSH
35990: LD_VAR 0 3
35994: ARRAY
35995: ST_TO_ADDR
// end ;
35996: GO 35905
35998: POP
35999: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36000: LD_VAR 0 1
36004: PPUSH
36005: LD_VAR 0 5
36009: PPUSH
36010: CALL_OW 135
// end ;
36014: LD_VAR 0 2
36018: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36019: LD_INT 0
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
// result := [ ] ;
36034: LD_ADDR_VAR 0 7
36038: PUSH
36039: EMPTY
36040: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 266
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: IN
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 37700
// if name then
36066: LD_VAR 0 3
36070: IFFALSE 36086
// SetBName ( base_dep , name ) ;
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_VAR 0 3
36081: PPUSH
36082: CALL_OW 500
// base := GetBase ( base_dep ) ;
36086: LD_ADDR_VAR 0 15
36090: PUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 274
36100: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36101: LD_ADDR_VAR 0 16
36105: PUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 255
36115: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36116: LD_ADDR_VAR 0 17
36120: PUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: CALL_OW 248
36130: ST_TO_ADDR
// if sources then
36131: LD_VAR 0 5
36135: IFFALSE 36182
// for i = 1 to 3 do
36137: LD_ADDR_VAR 0 8
36141: PUSH
36142: DOUBLE
36143: LD_INT 1
36145: DEC
36146: ST_TO_ADDR
36147: LD_INT 3
36149: PUSH
36150: FOR_TO
36151: IFFALSE 36180
// AddResourceType ( base , i , sources [ i ] ) ;
36153: LD_VAR 0 15
36157: PPUSH
36158: LD_VAR 0 8
36162: PPUSH
36163: LD_VAR 0 5
36167: PUSH
36168: LD_VAR 0 8
36172: ARRAY
36173: PPUSH
36174: CALL_OW 276
36178: GO 36150
36180: POP
36181: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36182: LD_ADDR_VAR 0 18
36186: PUSH
36187: LD_VAR 0 15
36191: PPUSH
36192: LD_VAR 0 2
36196: PPUSH
36197: LD_INT 1
36199: PPUSH
36200: CALL 35443 0 3
36204: ST_TO_ADDR
// InitHc ;
36205: CALL_OW 19
// InitUc ;
36209: CALL_OW 18
// uc_side := side ;
36213: LD_ADDR_OWVAR 20
36217: PUSH
36218: LD_VAR 0 16
36222: ST_TO_ADDR
// uc_nation := nation ;
36223: LD_ADDR_OWVAR 21
36227: PUSH
36228: LD_VAR 0 17
36232: ST_TO_ADDR
// if buildings then
36233: LD_VAR 0 18
36237: IFFALSE 37559
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36239: LD_ADDR_VAR 0 19
36243: PUSH
36244: LD_VAR 0 18
36248: PPUSH
36249: LD_INT 2
36251: PUSH
36252: LD_INT 30
36254: PUSH
36255: LD_INT 29
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 30
36264: PUSH
36265: LD_INT 30
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: PPUSH
36277: CALL_OW 72
36281: ST_TO_ADDR
// if tmp then
36282: LD_VAR 0 19
36286: IFFALSE 36334
// for i in tmp do
36288: LD_ADDR_VAR 0 8
36292: PUSH
36293: LD_VAR 0 19
36297: PUSH
36298: FOR_IN
36299: IFFALSE 36332
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36301: LD_VAR 0 8
36305: PPUSH
36306: CALL_OW 250
36310: PPUSH
36311: LD_VAR 0 8
36315: PPUSH
36316: CALL_OW 251
36320: PPUSH
36321: LD_VAR 0 16
36325: PPUSH
36326: CALL_OW 441
36330: GO 36298
36332: POP
36333: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36334: LD_VAR 0 18
36338: PPUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 32
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 30
36354: PUSH
36355: LD_INT 33
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: PPUSH
36367: CALL_OW 72
36371: IFFALSE 36459
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36373: LD_ADDR_VAR 0 8
36377: PUSH
36378: LD_VAR 0 18
36382: PPUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 30
36388: PUSH
36389: LD_INT 32
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 30
36398: PUSH
36399: LD_INT 33
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL_OW 72
36415: PUSH
36416: FOR_IN
36417: IFFALSE 36457
// begin if not GetBWeapon ( i ) then
36419: LD_VAR 0 8
36423: PPUSH
36424: CALL_OW 269
36428: NOT
36429: IFFALSE 36455
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36431: LD_VAR 0 8
36435: PPUSH
36436: LD_VAR 0 8
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: CALL 37705 0 2
36450: PPUSH
36451: CALL_OW 431
// end ;
36455: GO 36416
36457: POP
36458: POP
// end ; for i = 1 to personel do
36459: LD_ADDR_VAR 0 8
36463: PUSH
36464: DOUBLE
36465: LD_INT 1
36467: DEC
36468: ST_TO_ADDR
36469: LD_VAR 0 6
36473: PUSH
36474: FOR_TO
36475: IFFALSE 37539
// begin if i > 4 then
36477: LD_VAR 0 8
36481: PUSH
36482: LD_INT 4
36484: GREATER
36485: IFFALSE 36489
// break ;
36487: GO 37539
// case i of 1 :
36489: LD_VAR 0 8
36493: PUSH
36494: LD_INT 1
36496: DOUBLE
36497: EQUAL
36498: IFTRUE 36502
36500: GO 36582
36502: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36503: LD_ADDR_VAR 0 12
36507: PUSH
36508: LD_VAR 0 18
36512: PPUSH
36513: LD_INT 22
36515: PUSH
36516: LD_VAR 0 16
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 58
36527: PUSH
36528: EMPTY
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 30
36536: PUSH
36537: LD_INT 32
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 30
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 30
36556: PUSH
36557: LD_INT 5
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: PPUSH
36575: CALL_OW 72
36579: ST_TO_ADDR
36580: GO 36804
36582: LD_INT 2
36584: DOUBLE
36585: EQUAL
36586: IFTRUE 36590
36588: GO 36652
36590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36591: LD_ADDR_VAR 0 12
36595: PUSH
36596: LD_VAR 0 18
36600: PPUSH
36601: LD_INT 22
36603: PUSH
36604: LD_VAR 0 16
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 30
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 30
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 72
36649: ST_TO_ADDR
36650: GO 36804
36652: LD_INT 3
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36660
36658: GO 36722
36660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36661: LD_ADDR_VAR 0 12
36665: PUSH
36666: LD_VAR 0 18
36670: PPUSH
36671: LD_INT 22
36673: PUSH
36674: LD_VAR 0 16
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: LD_INT 30
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 30
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PPUSH
36715: CALL_OW 72
36719: ST_TO_ADDR
36720: GO 36804
36722: LD_INT 4
36724: DOUBLE
36725: EQUAL
36726: IFTRUE 36730
36728: GO 36803
36730: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36731: LD_ADDR_VAR 0 12
36735: PUSH
36736: LD_VAR 0 18
36740: PPUSH
36741: LD_INT 22
36743: PUSH
36744: LD_VAR 0 16
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 6
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 30
36768: PUSH
36769: LD_INT 7
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 30
36778: PUSH
36779: LD_INT 8
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PPUSH
36796: CALL_OW 72
36800: ST_TO_ADDR
36801: GO 36804
36803: POP
// if i = 1 then
36804: LD_VAR 0 8
36808: PUSH
36809: LD_INT 1
36811: EQUAL
36812: IFFALSE 36923
// begin tmp := [ ] ;
36814: LD_ADDR_VAR 0 19
36818: PUSH
36819: EMPTY
36820: ST_TO_ADDR
// for j in f do
36821: LD_ADDR_VAR 0 9
36825: PUSH
36826: LD_VAR 0 12
36830: PUSH
36831: FOR_IN
36832: IFFALSE 36905
// if GetBType ( j ) = b_bunker then
36834: LD_VAR 0 9
36838: PPUSH
36839: CALL_OW 266
36843: PUSH
36844: LD_INT 32
36846: EQUAL
36847: IFFALSE 36874
// tmp := Insert ( tmp , 1 , j ) else
36849: LD_ADDR_VAR 0 19
36853: PUSH
36854: LD_VAR 0 19
36858: PPUSH
36859: LD_INT 1
36861: PPUSH
36862: LD_VAR 0 9
36866: PPUSH
36867: CALL_OW 2
36871: ST_TO_ADDR
36872: GO 36903
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36874: LD_ADDR_VAR 0 19
36878: PUSH
36879: LD_VAR 0 19
36883: PPUSH
36884: LD_VAR 0 19
36888: PUSH
36889: LD_INT 1
36891: PLUS
36892: PPUSH
36893: LD_VAR 0 9
36897: PPUSH
36898: CALL_OW 2
36902: ST_TO_ADDR
36903: GO 36831
36905: POP
36906: POP
// if tmp then
36907: LD_VAR 0 19
36911: IFFALSE 36923
// f := tmp ;
36913: LD_ADDR_VAR 0 12
36917: PUSH
36918: LD_VAR 0 19
36922: ST_TO_ADDR
// end ; x := personel [ i ] ;
36923: LD_ADDR_VAR 0 13
36927: PUSH
36928: LD_VAR 0 6
36932: PUSH
36933: LD_VAR 0 8
36937: ARRAY
36938: ST_TO_ADDR
// if x = - 1 then
36939: LD_VAR 0 13
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: EQUAL
36948: IFFALSE 37157
// begin for j in f do
36950: LD_ADDR_VAR 0 9
36954: PUSH
36955: LD_VAR 0 12
36959: PUSH
36960: FOR_IN
36961: IFFALSE 37153
// repeat InitHc ;
36963: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36967: LD_VAR 0 9
36971: PPUSH
36972: CALL_OW 266
36976: PUSH
36977: LD_INT 5
36979: EQUAL
36980: IFFALSE 37050
// begin if UnitsInside ( j ) < 3 then
36982: LD_VAR 0 9
36986: PPUSH
36987: CALL_OW 313
36991: PUSH
36992: LD_INT 3
36994: LESS
36995: IFFALSE 37031
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36997: LD_INT 0
36999: PPUSH
37000: LD_INT 5
37002: PUSH
37003: LD_INT 8
37005: PUSH
37006: LD_INT 9
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: PUSH
37014: LD_VAR 0 17
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 4
37024: PPUSH
37025: CALL_OW 380
37029: GO 37048
// PrepareHuman ( false , i , skill ) ;
37031: LD_INT 0
37033: PPUSH
37034: LD_VAR 0 8
37038: PPUSH
37039: LD_VAR 0 4
37043: PPUSH
37044: CALL_OW 380
// end else
37048: GO 37067
// PrepareHuman ( false , i , skill ) ;
37050: LD_INT 0
37052: PPUSH
37053: LD_VAR 0 8
37057: PPUSH
37058: LD_VAR 0 4
37062: PPUSH
37063: CALL_OW 380
// un := CreateHuman ;
37067: LD_ADDR_VAR 0 14
37071: PUSH
37072: CALL_OW 44
37076: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37077: LD_ADDR_VAR 0 7
37081: PUSH
37082: LD_VAR 0 7
37086: PPUSH
37087: LD_INT 1
37089: PPUSH
37090: LD_VAR 0 14
37094: PPUSH
37095: CALL_OW 2
37099: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37100: LD_VAR 0 14
37104: PPUSH
37105: LD_VAR 0 9
37109: PPUSH
37110: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37114: LD_VAR 0 9
37118: PPUSH
37119: CALL_OW 313
37123: PUSH
37124: LD_INT 6
37126: EQUAL
37127: PUSH
37128: LD_VAR 0 9
37132: PPUSH
37133: CALL_OW 266
37137: PUSH
37138: LD_INT 32
37140: PUSH
37141: LD_INT 31
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: IN
37148: OR
37149: IFFALSE 36963
37151: GO 36960
37153: POP
37154: POP
// end else
37155: GO 37537
// for j = 1 to x do
37157: LD_ADDR_VAR 0 9
37161: PUSH
37162: DOUBLE
37163: LD_INT 1
37165: DEC
37166: ST_TO_ADDR
37167: LD_VAR 0 13
37171: PUSH
37172: FOR_TO
37173: IFFALSE 37535
// begin InitHc ;
37175: CALL_OW 19
// if not f then
37179: LD_VAR 0 12
37183: NOT
37184: IFFALSE 37273
// begin PrepareHuman ( false , i , skill ) ;
37186: LD_INT 0
37188: PPUSH
37189: LD_VAR 0 8
37193: PPUSH
37194: LD_VAR 0 4
37198: PPUSH
37199: CALL_OW 380
// un := CreateHuman ;
37203: LD_ADDR_VAR 0 14
37207: PUSH
37208: CALL_OW 44
37212: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37213: LD_ADDR_VAR 0 7
37217: PUSH
37218: LD_VAR 0 7
37222: PPUSH
37223: LD_INT 1
37225: PPUSH
37226: LD_VAR 0 14
37230: PPUSH
37231: CALL_OW 2
37235: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37236: LD_VAR 0 14
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 250
37250: PPUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 251
37260: PPUSH
37261: LD_INT 10
37263: PPUSH
37264: LD_INT 0
37266: PPUSH
37267: CALL_OW 50
// continue ;
37271: GO 37172
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37273: LD_VAR 0 12
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: CALL_OW 313
37286: PUSH
37287: LD_VAR 0 12
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: CALL_OW 266
37300: PUSH
37301: LD_INT 32
37303: PUSH
37304: LD_INT 31
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: IN
37311: AND
37312: PUSH
37313: LD_VAR 0 12
37317: PUSH
37318: LD_INT 1
37320: ARRAY
37321: PPUSH
37322: CALL_OW 313
37326: PUSH
37327: LD_INT 6
37329: EQUAL
37330: OR
37331: IFFALSE 37351
// f := Delete ( f , 1 ) ;
37333: LD_ADDR_VAR 0 12
37337: PUSH
37338: LD_VAR 0 12
37342: PPUSH
37343: LD_INT 1
37345: PPUSH
37346: CALL_OW 3
37350: ST_TO_ADDR
// if not f then
37351: LD_VAR 0 12
37355: NOT
37356: IFFALSE 37374
// begin x := x + 2 ;
37358: LD_ADDR_VAR 0 13
37362: PUSH
37363: LD_VAR 0 13
37367: PUSH
37368: LD_INT 2
37370: PLUS
37371: ST_TO_ADDR
// continue ;
37372: GO 37172
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37374: LD_VAR 0 12
37378: PUSH
37379: LD_INT 1
37381: ARRAY
37382: PPUSH
37383: CALL_OW 266
37387: PUSH
37388: LD_INT 5
37390: EQUAL
37391: IFFALSE 37465
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37393: LD_VAR 0 12
37397: PUSH
37398: LD_INT 1
37400: ARRAY
37401: PPUSH
37402: CALL_OW 313
37406: PUSH
37407: LD_INT 3
37409: LESS
37410: IFFALSE 37446
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37412: LD_INT 0
37414: PPUSH
37415: LD_INT 5
37417: PUSH
37418: LD_INT 8
37420: PUSH
37421: LD_INT 9
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: PUSH
37429: LD_VAR 0 17
37433: ARRAY
37434: PPUSH
37435: LD_VAR 0 4
37439: PPUSH
37440: CALL_OW 380
37444: GO 37463
// PrepareHuman ( false , i , skill ) ;
37446: LD_INT 0
37448: PPUSH
37449: LD_VAR 0 8
37453: PPUSH
37454: LD_VAR 0 4
37458: PPUSH
37459: CALL_OW 380
// end else
37463: GO 37482
// PrepareHuman ( false , i , skill ) ;
37465: LD_INT 0
37467: PPUSH
37468: LD_VAR 0 8
37472: PPUSH
37473: LD_VAR 0 4
37477: PPUSH
37478: CALL_OW 380
// un := CreateHuman ;
37482: LD_ADDR_VAR 0 14
37486: PUSH
37487: CALL_OW 44
37491: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37492: LD_ADDR_VAR 0 7
37496: PUSH
37497: LD_VAR 0 7
37501: PPUSH
37502: LD_INT 1
37504: PPUSH
37505: LD_VAR 0 14
37509: PPUSH
37510: CALL_OW 2
37514: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37515: LD_VAR 0 14
37519: PPUSH
37520: LD_VAR 0 12
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: PPUSH
37529: CALL_OW 52
// end ;
37533: GO 37172
37535: POP
37536: POP
// end ;
37537: GO 36474
37539: POP
37540: POP
// result := result ^ buildings ;
37541: LD_ADDR_VAR 0 7
37545: PUSH
37546: LD_VAR 0 7
37550: PUSH
37551: LD_VAR 0 18
37555: ADD
37556: ST_TO_ADDR
// end else
37557: GO 37700
// begin for i = 1 to personel do
37559: LD_ADDR_VAR 0 8
37563: PUSH
37564: DOUBLE
37565: LD_INT 1
37567: DEC
37568: ST_TO_ADDR
37569: LD_VAR 0 6
37573: PUSH
37574: FOR_TO
37575: IFFALSE 37698
// begin if i > 4 then
37577: LD_VAR 0 8
37581: PUSH
37582: LD_INT 4
37584: GREATER
37585: IFFALSE 37589
// break ;
37587: GO 37698
// x := personel [ i ] ;
37589: LD_ADDR_VAR 0 13
37593: PUSH
37594: LD_VAR 0 6
37598: PUSH
37599: LD_VAR 0 8
37603: ARRAY
37604: ST_TO_ADDR
// if x = - 1 then
37605: LD_VAR 0 13
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: EQUAL
37614: IFFALSE 37618
// continue ;
37616: GO 37574
// PrepareHuman ( false , i , skill ) ;
37618: LD_INT 0
37620: PPUSH
37621: LD_VAR 0 8
37625: PPUSH
37626: LD_VAR 0 4
37630: PPUSH
37631: CALL_OW 380
// un := CreateHuman ;
37635: LD_ADDR_VAR 0 14
37639: PUSH
37640: CALL_OW 44
37644: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37645: LD_VAR 0 14
37649: PPUSH
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL_OW 250
37659: PPUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 251
37669: PPUSH
37670: LD_INT 10
37672: PPUSH
37673: LD_INT 0
37675: PPUSH
37676: CALL_OW 50
// result := result ^ un ;
37680: LD_ADDR_VAR 0 7
37684: PUSH
37685: LD_VAR 0 7
37689: PUSH
37690: LD_VAR 0 14
37694: ADD
37695: ST_TO_ADDR
// end ;
37696: GO 37574
37698: POP
37699: POP
// end ; end ;
37700: LD_VAR 0 7
37704: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37705: LD_INT 0
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
37722: PPUSH
// result := false ;
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_INT 0
37730: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37731: LD_VAR 0 1
37735: NOT
37736: PUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 266
37746: PUSH
37747: LD_INT 32
37749: PUSH
37750: LD_INT 33
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: IN
37757: NOT
37758: OR
37759: IFFALSE 37763
// exit ;
37761: GO 38872
// nat := GetNation ( tower ) ;
37763: LD_ADDR_VAR 0 12
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 248
37777: ST_TO_ADDR
// side := GetSide ( tower ) ;
37778: LD_ADDR_VAR 0 16
37782: PUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 255
37792: ST_TO_ADDR
// x := GetX ( tower ) ;
37793: LD_ADDR_VAR 0 10
37797: PUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 250
37807: ST_TO_ADDR
// y := GetY ( tower ) ;
37808: LD_ADDR_VAR 0 11
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 251
37822: ST_TO_ADDR
// if not x or not y then
37823: LD_VAR 0 10
37827: NOT
37828: PUSH
37829: LD_VAR 0 11
37833: NOT
37834: OR
37835: IFFALSE 37839
// exit ;
37837: GO 38872
// weapon := 0 ;
37839: LD_ADDR_VAR 0 18
37843: PUSH
37844: LD_INT 0
37846: ST_TO_ADDR
// fac_list := [ ] ;
37847: LD_ADDR_VAR 0 17
37851: PUSH
37852: EMPTY
37853: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37854: LD_ADDR_VAR 0 6
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 274
37868: PPUSH
37869: LD_VAR 0 2
37873: PPUSH
37874: LD_INT 0
37876: PPUSH
37877: CALL 35443 0 3
37881: PPUSH
37882: LD_INT 30
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL_OW 72
37896: ST_TO_ADDR
// if not factories then
37897: LD_VAR 0 6
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38872
// for i in factories do
37906: LD_ADDR_VAR 0 8
37910: PUSH
37911: LD_VAR 0 6
37915: PUSH
37916: FOR_IN
37917: IFFALSE 37942
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37919: LD_ADDR_VAR 0 17
37923: PUSH
37924: LD_VAR 0 17
37928: PUSH
37929: LD_VAR 0 8
37933: PPUSH
37934: CALL_OW 478
37938: UNION
37939: ST_TO_ADDR
37940: GO 37916
37942: POP
37943: POP
// if not fac_list then
37944: LD_VAR 0 17
37948: NOT
37949: IFFALSE 37953
// exit ;
37951: GO 38872
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37953: LD_ADDR_VAR 0 5
37957: PUSH
37958: LD_INT 4
37960: PUSH
37961: LD_INT 5
37963: PUSH
37964: LD_INT 9
37966: PUSH
37967: LD_INT 10
37969: PUSH
37970: LD_INT 6
37972: PUSH
37973: LD_INT 7
37975: PUSH
37976: LD_INT 11
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 27
37990: PUSH
37991: LD_INT 28
37993: PUSH
37994: LD_INT 26
37996: PUSH
37997: LD_INT 30
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 43
38008: PUSH
38009: LD_INT 44
38011: PUSH
38012: LD_INT 46
38014: PUSH
38015: LD_INT 45
38017: PUSH
38018: LD_INT 47
38020: PUSH
38021: LD_INT 49
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: PUSH
38037: LD_VAR 0 12
38041: ARRAY
38042: ST_TO_ADDR
// list := list isect fac_list ;
38043: LD_ADDR_VAR 0 5
38047: PUSH
38048: LD_VAR 0 5
38052: PUSH
38053: LD_VAR 0 17
38057: ISECT
38058: ST_TO_ADDR
// if not list then
38059: LD_VAR 0 5
38063: NOT
38064: IFFALSE 38068
// exit ;
38066: GO 38872
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38068: LD_VAR 0 12
38072: PUSH
38073: LD_INT 3
38075: EQUAL
38076: PUSH
38077: LD_INT 49
38079: PUSH
38080: LD_VAR 0 5
38084: IN
38085: AND
38086: PUSH
38087: LD_INT 31
38089: PPUSH
38090: LD_VAR 0 16
38094: PPUSH
38095: CALL_OW 321
38099: PUSH
38100: LD_INT 2
38102: EQUAL
38103: AND
38104: IFFALSE 38164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38106: LD_INT 22
38108: PUSH
38109: LD_VAR 0 16
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 35
38120: PUSH
38121: LD_INT 49
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 91
38130: PUSH
38131: LD_VAR 0 1
38135: PUSH
38136: LD_INT 10
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: PPUSH
38149: CALL_OW 69
38153: NOT
38154: IFFALSE 38164
// weapon := ru_time_lapser ;
38156: LD_ADDR_VAR 0 18
38160: PUSH
38161: LD_INT 49
38163: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38164: LD_VAR 0 12
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: IN
38179: PUSH
38180: LD_INT 11
38182: PUSH
38183: LD_VAR 0 5
38187: IN
38188: PUSH
38189: LD_INT 30
38191: PUSH
38192: LD_VAR 0 5
38196: IN
38197: OR
38198: AND
38199: PUSH
38200: LD_INT 6
38202: PPUSH
38203: LD_VAR 0 16
38207: PPUSH
38208: CALL_OW 321
38212: PUSH
38213: LD_INT 2
38215: EQUAL
38216: AND
38217: IFFALSE 38382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38219: LD_INT 22
38221: PUSH
38222: LD_VAR 0 16
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 35
38236: PUSH
38237: LD_INT 11
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 35
38246: PUSH
38247: LD_INT 30
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 91
38261: PUSH
38262: LD_VAR 0 1
38266: PUSH
38267: LD_INT 18
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PPUSH
38280: CALL_OW 69
38284: NOT
38285: PUSH
38286: LD_INT 22
38288: PUSH
38289: LD_VAR 0 16
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 30
38303: PUSH
38304: LD_INT 32
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 30
38313: PUSH
38314: LD_INT 33
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 91
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: LD_INT 12
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: PPUSH
38350: CALL_OW 69
38354: PUSH
38355: LD_INT 2
38357: GREATER
38358: AND
38359: IFFALSE 38382
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38361: LD_ADDR_VAR 0 18
38365: PUSH
38366: LD_INT 11
38368: PUSH
38369: LD_INT 30
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_VAR 0 12
38380: ARRAY
38381: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38382: LD_VAR 0 18
38386: NOT
38387: PUSH
38388: LD_INT 40
38390: PPUSH
38391: LD_VAR 0 16
38395: PPUSH
38396: CALL_OW 321
38400: PUSH
38401: LD_INT 2
38403: EQUAL
38404: AND
38405: PUSH
38406: LD_INT 7
38408: PUSH
38409: LD_VAR 0 5
38413: IN
38414: PUSH
38415: LD_INT 28
38417: PUSH
38418: LD_VAR 0 5
38422: IN
38423: OR
38424: PUSH
38425: LD_INT 45
38427: PUSH
38428: LD_VAR 0 5
38432: IN
38433: OR
38434: AND
38435: IFFALSE 38689
// begin hex := GetHexInfo ( x , y ) ;
38437: LD_ADDR_VAR 0 4
38441: PUSH
38442: LD_VAR 0 10
38446: PPUSH
38447: LD_VAR 0 11
38451: PPUSH
38452: CALL_OW 546
38456: ST_TO_ADDR
// if hex [ 1 ] then
38457: LD_VAR 0 4
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: IFFALSE 38469
// exit ;
38467: GO 38872
// height := hex [ 2 ] ;
38469: LD_ADDR_VAR 0 15
38473: PUSH
38474: LD_VAR 0 4
38478: PUSH
38479: LD_INT 2
38481: ARRAY
38482: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38483: LD_ADDR_VAR 0 14
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 3
38496: PUSH
38497: LD_INT 5
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: ST_TO_ADDR
// for i in tmp do
38506: LD_ADDR_VAR 0 8
38510: PUSH
38511: LD_VAR 0 14
38515: PUSH
38516: FOR_IN
38517: IFFALSE 38687
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38519: LD_ADDR_VAR 0 9
38523: PUSH
38524: LD_VAR 0 10
38528: PPUSH
38529: LD_VAR 0 8
38533: PPUSH
38534: LD_INT 5
38536: PPUSH
38537: CALL_OW 272
38541: PUSH
38542: LD_VAR 0 11
38546: PPUSH
38547: LD_VAR 0 8
38551: PPUSH
38552: LD_INT 5
38554: PPUSH
38555: CALL_OW 273
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38564: LD_VAR 0 9
38568: PUSH
38569: LD_INT 1
38571: ARRAY
38572: PPUSH
38573: LD_VAR 0 9
38577: PUSH
38578: LD_INT 2
38580: ARRAY
38581: PPUSH
38582: CALL_OW 488
38586: IFFALSE 38685
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38588: LD_ADDR_VAR 0 4
38592: PUSH
38593: LD_VAR 0 9
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PPUSH
38602: LD_VAR 0 9
38606: PUSH
38607: LD_INT 2
38609: ARRAY
38610: PPUSH
38611: CALL_OW 546
38615: ST_TO_ADDR
// if hex [ 1 ] then
38616: LD_VAR 0 4
38620: PUSH
38621: LD_INT 1
38623: ARRAY
38624: IFFALSE 38628
// continue ;
38626: GO 38516
// h := hex [ 2 ] ;
38628: LD_ADDR_VAR 0 13
38632: PUSH
38633: LD_VAR 0 4
38637: PUSH
38638: LD_INT 2
38640: ARRAY
38641: ST_TO_ADDR
// if h + 7 < height then
38642: LD_VAR 0 13
38646: PUSH
38647: LD_INT 7
38649: PLUS
38650: PUSH
38651: LD_VAR 0 15
38655: LESS
38656: IFFALSE 38685
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38658: LD_ADDR_VAR 0 18
38662: PUSH
38663: LD_INT 7
38665: PUSH
38666: LD_INT 28
38668: PUSH
38669: LD_INT 45
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: PUSH
38677: LD_VAR 0 12
38681: ARRAY
38682: ST_TO_ADDR
// break ;
38683: GO 38687
// end ; end ; end ;
38685: GO 38516
38687: POP
38688: POP
// end ; if not weapon then
38689: LD_VAR 0 18
38693: NOT
38694: IFFALSE 38754
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: LD_VAR 0 5
38705: PUSH
38706: LD_INT 11
38708: PUSH
38709: LD_INT 30
38711: PUSH
38712: LD_INT 49
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: DIFF
38720: ST_TO_ADDR
// if not list then
38721: LD_VAR 0 5
38725: NOT
38726: IFFALSE 38730
// exit ;
38728: GO 38872
// weapon := list [ rand ( 1 , list ) ] ;
38730: LD_ADDR_VAR 0 18
38734: PUSH
38735: LD_VAR 0 5
38739: PUSH
38740: LD_INT 1
38742: PPUSH
38743: LD_VAR 0 5
38747: PPUSH
38748: CALL_OW 12
38752: ARRAY
38753: ST_TO_ADDR
// end ; if weapon then
38754: LD_VAR 0 18
38758: IFFALSE 38872
// begin tmp := CostOfWeapon ( weapon ) ;
38760: LD_ADDR_VAR 0 14
38764: PUSH
38765: LD_VAR 0 18
38769: PPUSH
38770: CALL_OW 451
38774: ST_TO_ADDR
// j := GetBase ( tower ) ;
38775: LD_ADDR_VAR 0 9
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 274
38789: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38790: LD_VAR 0 9
38794: PPUSH
38795: LD_INT 1
38797: PPUSH
38798: CALL_OW 275
38802: PUSH
38803: LD_VAR 0 14
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: GREATEREQUAL
38812: PUSH
38813: LD_VAR 0 9
38817: PPUSH
38818: LD_INT 2
38820: PPUSH
38821: CALL_OW 275
38825: PUSH
38826: LD_VAR 0 14
38830: PUSH
38831: LD_INT 2
38833: ARRAY
38834: GREATEREQUAL
38835: AND
38836: PUSH
38837: LD_VAR 0 9
38841: PPUSH
38842: LD_INT 3
38844: PPUSH
38845: CALL_OW 275
38849: PUSH
38850: LD_VAR 0 14
38854: PUSH
38855: LD_INT 3
38857: ARRAY
38858: GREATEREQUAL
38859: AND
38860: IFFALSE 38872
// result := weapon ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_VAR 0 18
38871: ST_TO_ADDR
// end ; end ;
38872: LD_VAR 0 3
38876: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
// result := true ;
38881: LD_ADDR_VAR 0 3
38885: PUSH
38886: LD_INT 1
38888: ST_TO_ADDR
// if array1 = array2 then
38889: LD_VAR 0 1
38893: PUSH
38894: LD_VAR 0 2
38898: EQUAL
38899: IFFALSE 38959
// begin for i = 1 to array1 do
38901: LD_ADDR_VAR 0 4
38905: PUSH
38906: DOUBLE
38907: LD_INT 1
38909: DEC
38910: ST_TO_ADDR
38911: LD_VAR 0 1
38915: PUSH
38916: FOR_TO
38917: IFFALSE 38955
// if array1 [ i ] <> array2 [ i ] then
38919: LD_VAR 0 1
38923: PUSH
38924: LD_VAR 0 4
38928: ARRAY
38929: PUSH
38930: LD_VAR 0 2
38934: PUSH
38935: LD_VAR 0 4
38939: ARRAY
38940: NONEQUAL
38941: IFFALSE 38953
// begin result := false ;
38943: LD_ADDR_VAR 0 3
38947: PUSH
38948: LD_INT 0
38950: ST_TO_ADDR
// break ;
38951: GO 38955
// end ;
38953: GO 38916
38955: POP
38956: POP
// end else
38957: GO 38967
// result := false ;
38959: LD_ADDR_VAR 0 3
38963: PUSH
38964: LD_INT 0
38966: ST_TO_ADDR
// end ;
38967: LD_VAR 0 3
38971: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38972: LD_INT 0
38974: PPUSH
38975: PPUSH
// if not array1 or not array2 then
38976: LD_VAR 0 1
38980: NOT
38981: PUSH
38982: LD_VAR 0 2
38986: NOT
38987: OR
38988: IFFALSE 38992
// exit ;
38990: GO 39056
// result := true ;
38992: LD_ADDR_VAR 0 3
38996: PUSH
38997: LD_INT 1
38999: ST_TO_ADDR
// for i = 1 to array1 do
39000: LD_ADDR_VAR 0 4
39004: PUSH
39005: DOUBLE
39006: LD_INT 1
39008: DEC
39009: ST_TO_ADDR
39010: LD_VAR 0 1
39014: PUSH
39015: FOR_TO
39016: IFFALSE 39054
// if array1 [ i ] <> array2 [ i ] then
39018: LD_VAR 0 1
39022: PUSH
39023: LD_VAR 0 4
39027: ARRAY
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_VAR 0 4
39038: ARRAY
39039: NONEQUAL
39040: IFFALSE 39052
// begin result := false ;
39042: LD_ADDR_VAR 0 3
39046: PUSH
39047: LD_INT 0
39049: ST_TO_ADDR
// break ;
39050: GO 39054
// end ;
39052: GO 39015
39054: POP
39055: POP
// end ;
39056: LD_VAR 0 3
39060: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
39065: PPUSH
// pom := GetBase ( fac ) ;
39066: LD_ADDR_VAR 0 5
39070: PUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 274
39080: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39081: LD_ADDR_VAR 0 4
39085: PUSH
39086: LD_VAR 0 2
39090: PUSH
39091: LD_INT 1
39093: ARRAY
39094: PPUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 2
39102: ARRAY
39103: PPUSH
39104: LD_VAR 0 2
39108: PUSH
39109: LD_INT 3
39111: ARRAY
39112: PPUSH
39113: LD_VAR 0 2
39117: PUSH
39118: LD_INT 4
39120: ARRAY
39121: PPUSH
39122: CALL_OW 449
39126: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39127: LD_ADDR_VAR 0 3
39131: PUSH
39132: LD_VAR 0 5
39136: PPUSH
39137: LD_INT 1
39139: PPUSH
39140: CALL_OW 275
39144: PUSH
39145: LD_VAR 0 4
39149: PUSH
39150: LD_INT 1
39152: ARRAY
39153: GREATEREQUAL
39154: PUSH
39155: LD_VAR 0 5
39159: PPUSH
39160: LD_INT 2
39162: PPUSH
39163: CALL_OW 275
39167: PUSH
39168: LD_VAR 0 4
39172: PUSH
39173: LD_INT 2
39175: ARRAY
39176: GREATEREQUAL
39177: AND
39178: PUSH
39179: LD_VAR 0 5
39183: PPUSH
39184: LD_INT 3
39186: PPUSH
39187: CALL_OW 275
39191: PUSH
39192: LD_VAR 0 4
39196: PUSH
39197: LD_INT 3
39199: ARRAY
39200: GREATEREQUAL
39201: AND
39202: ST_TO_ADDR
// end ;
39203: LD_VAR 0 3
39207: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39208: LD_INT 0
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
// pom := GetBase ( building ) ;
39214: LD_ADDR_VAR 0 3
39218: PUSH
39219: LD_VAR 0 1
39223: PPUSH
39224: CALL_OW 274
39228: ST_TO_ADDR
// if not pom then
39229: LD_VAR 0 3
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39408
// btype := GetBType ( building ) ;
39238: LD_ADDR_VAR 0 5
39242: PUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL_OW 266
39252: ST_TO_ADDR
// if btype = b_armoury then
39253: LD_VAR 0 5
39257: PUSH
39258: LD_INT 4
39260: EQUAL
39261: IFFALSE 39271
// btype := b_barracks ;
39263: LD_ADDR_VAR 0 5
39267: PUSH
39268: LD_INT 5
39270: ST_TO_ADDR
// if btype = b_depot then
39271: LD_VAR 0 5
39275: PUSH
39276: LD_INT 0
39278: EQUAL
39279: IFFALSE 39289
// btype := b_warehouse ;
39281: LD_ADDR_VAR 0 5
39285: PUSH
39286: LD_INT 1
39288: ST_TO_ADDR
// if btype = b_workshop then
39289: LD_VAR 0 5
39293: PUSH
39294: LD_INT 2
39296: EQUAL
39297: IFFALSE 39307
// btype := b_factory ;
39299: LD_ADDR_VAR 0 5
39303: PUSH
39304: LD_INT 3
39306: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 5
39316: PPUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 248
39326: PPUSH
39327: CALL_OW 450
39331: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39332: LD_ADDR_VAR 0 2
39336: PUSH
39337: LD_VAR 0 3
39341: PPUSH
39342: LD_INT 1
39344: PPUSH
39345: CALL_OW 275
39349: PUSH
39350: LD_VAR 0 4
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: GREATEREQUAL
39359: PUSH
39360: LD_VAR 0 3
39364: PPUSH
39365: LD_INT 2
39367: PPUSH
39368: CALL_OW 275
39372: PUSH
39373: LD_VAR 0 4
39377: PUSH
39378: LD_INT 2
39380: ARRAY
39381: GREATEREQUAL
39382: AND
39383: PUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: LD_INT 3
39391: PPUSH
39392: CALL_OW 275
39396: PUSH
39397: LD_VAR 0 4
39401: PUSH
39402: LD_INT 3
39404: ARRAY
39405: GREATEREQUAL
39406: AND
39407: ST_TO_ADDR
// end ;
39408: LD_VAR 0 2
39412: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39413: LD_INT 0
39415: PPUSH
39416: PPUSH
39417: PPUSH
// pom := GetBase ( building ) ;
39418: LD_ADDR_VAR 0 4
39422: PUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 274
39432: ST_TO_ADDR
// if not pom then
39433: LD_VAR 0 4
39437: NOT
39438: IFFALSE 39442
// exit ;
39440: GO 39543
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39442: LD_ADDR_VAR 0 5
39446: PUSH
39447: LD_VAR 0 2
39451: PPUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 248
39461: PPUSH
39462: CALL_OW 450
39466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39467: LD_ADDR_VAR 0 3
39471: PUSH
39472: LD_VAR 0 4
39476: PPUSH
39477: LD_INT 1
39479: PPUSH
39480: CALL_OW 275
39484: PUSH
39485: LD_VAR 0 5
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: GREATEREQUAL
39494: PUSH
39495: LD_VAR 0 4
39499: PPUSH
39500: LD_INT 2
39502: PPUSH
39503: CALL_OW 275
39507: PUSH
39508: LD_VAR 0 5
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: GREATEREQUAL
39517: AND
39518: PUSH
39519: LD_VAR 0 4
39523: PPUSH
39524: LD_INT 3
39526: PPUSH
39527: CALL_OW 275
39531: PUSH
39532: LD_VAR 0 5
39536: PUSH
39537: LD_INT 3
39539: ARRAY
39540: GREATEREQUAL
39541: AND
39542: ST_TO_ADDR
// end ;
39543: LD_VAR 0 3
39547: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39548: LD_INT 0
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
// result := false ;
39561: LD_ADDR_VAR 0 8
39565: PUSH
39566: LD_INT 0
39568: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39569: LD_VAR 0 5
39573: NOT
39574: PUSH
39575: LD_VAR 0 1
39579: NOT
39580: OR
39581: PUSH
39582: LD_VAR 0 2
39586: NOT
39587: OR
39588: PUSH
39589: LD_VAR 0 3
39593: NOT
39594: OR
39595: IFFALSE 39599
// exit ;
39597: GO 40413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39599: LD_ADDR_VAR 0 14
39603: PUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: LD_VAR 0 3
39618: PPUSH
39619: LD_VAR 0 4
39623: PPUSH
39624: LD_VAR 0 5
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: PPUSH
39633: CALL_OW 248
39637: PPUSH
39638: LD_INT 0
39640: PPUSH
39641: CALL 41666 0 6
39645: ST_TO_ADDR
// if not hexes then
39646: LD_VAR 0 14
39650: NOT
39651: IFFALSE 39655
// exit ;
39653: GO 40413
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39655: LD_ADDR_VAR 0 17
39659: PUSH
39660: LD_VAR 0 5
39664: PPUSH
39665: LD_INT 22
39667: PUSH
39668: LD_VAR 0 13
39672: PPUSH
39673: CALL_OW 255
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 30
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 30
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PPUSH
39714: CALL_OW 72
39718: ST_TO_ADDR
// for i = 1 to hexes do
39719: LD_ADDR_VAR 0 9
39723: PUSH
39724: DOUBLE
39725: LD_INT 1
39727: DEC
39728: ST_TO_ADDR
39729: LD_VAR 0 14
39733: PUSH
39734: FOR_TO
39735: IFFALSE 40411
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39737: LD_ADDR_VAR 0 13
39741: PUSH
39742: LD_VAR 0 14
39746: PUSH
39747: LD_VAR 0 9
39751: ARRAY
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PPUSH
39757: LD_VAR 0 14
39761: PUSH
39762: LD_VAR 0 9
39766: ARRAY
39767: PUSH
39768: LD_INT 2
39770: ARRAY
39771: PPUSH
39772: CALL_OW 428
39776: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39777: LD_VAR 0 14
39781: PUSH
39782: LD_VAR 0 9
39786: ARRAY
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: PPUSH
39792: LD_VAR 0 14
39796: PUSH
39797: LD_VAR 0 9
39801: ARRAY
39802: PUSH
39803: LD_INT 2
39805: ARRAY
39806: PPUSH
39807: CALL_OW 351
39811: PUSH
39812: LD_VAR 0 14
39816: PUSH
39817: LD_VAR 0 9
39821: ARRAY
39822: PUSH
39823: LD_INT 1
39825: ARRAY
39826: PPUSH
39827: LD_VAR 0 14
39831: PUSH
39832: LD_VAR 0 9
39836: ARRAY
39837: PUSH
39838: LD_INT 2
39840: ARRAY
39841: PPUSH
39842: CALL_OW 488
39846: NOT
39847: OR
39848: PUSH
39849: LD_VAR 0 13
39853: PPUSH
39854: CALL_OW 247
39858: PUSH
39859: LD_INT 3
39861: EQUAL
39862: OR
39863: IFFALSE 39869
// exit ;
39865: POP
39866: POP
39867: GO 40413
// if not tmp then
39869: LD_VAR 0 13
39873: NOT
39874: IFFALSE 39878
// continue ;
39876: GO 39734
// result := true ;
39878: LD_ADDR_VAR 0 8
39882: PUSH
39883: LD_INT 1
39885: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39886: LD_VAR 0 6
39890: PUSH
39891: LD_VAR 0 13
39895: PPUSH
39896: CALL_OW 247
39900: PUSH
39901: LD_INT 2
39903: EQUAL
39904: AND
39905: PUSH
39906: LD_VAR 0 13
39910: PPUSH
39911: CALL_OW 263
39915: PUSH
39916: LD_INT 1
39918: EQUAL
39919: AND
39920: IFFALSE 40084
// begin if IsDrivenBy ( tmp ) then
39922: LD_VAR 0 13
39926: PPUSH
39927: CALL_OW 311
39931: IFFALSE 39935
// continue ;
39933: GO 39734
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39935: LD_VAR 0 6
39939: PPUSH
39940: LD_INT 3
39942: PUSH
39943: LD_INT 60
39945: PUSH
39946: EMPTY
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 55
39958: PUSH
39959: EMPTY
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PPUSH
39970: CALL_OW 72
39974: IFFALSE 40082
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39976: LD_ADDR_VAR 0 18
39980: PUSH
39981: LD_VAR 0 6
39985: PPUSH
39986: LD_INT 3
39988: PUSH
39989: LD_INT 60
39991: PUSH
39992: EMPTY
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 55
40004: PUSH
40005: EMPTY
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PPUSH
40016: CALL_OW 72
40020: PUSH
40021: LD_INT 1
40023: ARRAY
40024: ST_TO_ADDR
// if IsInUnit ( driver ) then
40025: LD_VAR 0 18
40029: PPUSH
40030: CALL_OW 310
40034: IFFALSE 40045
// ComExit ( driver ) ;
40036: LD_VAR 0 18
40040: PPUSH
40041: CALL 65458 0 1
// AddComEnterUnit ( driver , tmp ) ;
40045: LD_VAR 0 18
40049: PPUSH
40050: LD_VAR 0 13
40054: PPUSH
40055: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40059: LD_VAR 0 18
40063: PPUSH
40064: LD_VAR 0 7
40068: PPUSH
40069: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40073: LD_VAR 0 18
40077: PPUSH
40078: CALL_OW 181
// end ; continue ;
40082: GO 39734
// end ; if not cleaners or not tmp in cleaners then
40084: LD_VAR 0 6
40088: NOT
40089: PUSH
40090: LD_VAR 0 13
40094: PUSH
40095: LD_VAR 0 6
40099: IN
40100: NOT
40101: OR
40102: IFFALSE 40409
// begin if dep then
40104: LD_VAR 0 17
40108: IFFALSE 40244
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40110: LD_ADDR_VAR 0 16
40114: PUSH
40115: LD_VAR 0 17
40119: PUSH
40120: LD_INT 1
40122: ARRAY
40123: PPUSH
40124: CALL_OW 250
40128: PPUSH
40129: LD_VAR 0 17
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PPUSH
40138: CALL_OW 254
40142: PPUSH
40143: LD_INT 5
40145: PPUSH
40146: CALL_OW 272
40150: PUSH
40151: LD_VAR 0 17
40155: PUSH
40156: LD_INT 1
40158: ARRAY
40159: PPUSH
40160: CALL_OW 251
40164: PPUSH
40165: LD_VAR 0 17
40169: PUSH
40170: LD_INT 1
40172: ARRAY
40173: PPUSH
40174: CALL_OW 254
40178: PPUSH
40179: LD_INT 5
40181: PPUSH
40182: CALL_OW 273
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40191: LD_VAR 0 16
40195: PUSH
40196: LD_INT 1
40198: ARRAY
40199: PPUSH
40200: LD_VAR 0 16
40204: PUSH
40205: LD_INT 2
40207: ARRAY
40208: PPUSH
40209: CALL_OW 488
40213: IFFALSE 40244
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40215: LD_VAR 0 13
40219: PPUSH
40220: LD_VAR 0 16
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: LD_VAR 0 16
40233: PUSH
40234: LD_INT 2
40236: ARRAY
40237: PPUSH
40238: CALL_OW 111
// continue ;
40242: GO 39734
// end ; end ; r := GetDir ( tmp ) ;
40244: LD_ADDR_VAR 0 15
40248: PUSH
40249: LD_VAR 0 13
40253: PPUSH
40254: CALL_OW 254
40258: ST_TO_ADDR
// if r = 5 then
40259: LD_VAR 0 15
40263: PUSH
40264: LD_INT 5
40266: EQUAL
40267: IFFALSE 40277
// r := 0 ;
40269: LD_ADDR_VAR 0 15
40273: PUSH
40274: LD_INT 0
40276: ST_TO_ADDR
// for j = r to 5 do
40277: LD_ADDR_VAR 0 10
40281: PUSH
40282: DOUBLE
40283: LD_VAR 0 15
40287: DEC
40288: ST_TO_ADDR
40289: LD_INT 5
40291: PUSH
40292: FOR_TO
40293: IFFALSE 40407
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40295: LD_ADDR_VAR 0 11
40299: PUSH
40300: LD_VAR 0 13
40304: PPUSH
40305: CALL_OW 250
40309: PPUSH
40310: LD_VAR 0 10
40314: PPUSH
40315: LD_INT 2
40317: PPUSH
40318: CALL_OW 272
40322: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40323: LD_ADDR_VAR 0 12
40327: PUSH
40328: LD_VAR 0 13
40332: PPUSH
40333: CALL_OW 251
40337: PPUSH
40338: LD_VAR 0 10
40342: PPUSH
40343: LD_INT 2
40345: PPUSH
40346: CALL_OW 273
40350: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40351: LD_VAR 0 11
40355: PPUSH
40356: LD_VAR 0 12
40360: PPUSH
40361: CALL_OW 488
40365: PUSH
40366: LD_VAR 0 11
40370: PPUSH
40371: LD_VAR 0 12
40375: PPUSH
40376: CALL_OW 428
40380: NOT
40381: AND
40382: IFFALSE 40405
// begin ComMoveXY ( tmp , _x , _y ) ;
40384: LD_VAR 0 13
40388: PPUSH
40389: LD_VAR 0 11
40393: PPUSH
40394: LD_VAR 0 12
40398: PPUSH
40399: CALL_OW 111
// break ;
40403: GO 40407
// end ; end ;
40405: GO 40292
40407: POP
40408: POP
// end ; end ;
40409: GO 39734
40411: POP
40412: POP
// end ;
40413: LD_VAR 0 8
40417: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40418: LD_INT 0
40420: PPUSH
// result := true ;
40421: LD_ADDR_VAR 0 3
40425: PUSH
40426: LD_INT 1
40428: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40429: LD_VAR 0 2
40433: PUSH
40434: LD_INT 24
40436: DOUBLE
40437: EQUAL
40438: IFTRUE 40448
40440: LD_INT 33
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40473
40448: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40449: LD_ADDR_VAR 0 3
40453: PUSH
40454: LD_INT 32
40456: PPUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 321
40466: PUSH
40467: LD_INT 2
40469: EQUAL
40470: ST_TO_ADDR
40471: GO 40789
40473: LD_INT 20
40475: DOUBLE
40476: EQUAL
40477: IFTRUE 40481
40479: GO 40506
40481: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40482: LD_ADDR_VAR 0 3
40486: PUSH
40487: LD_INT 6
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 321
40499: PUSH
40500: LD_INT 2
40502: EQUAL
40503: ST_TO_ADDR
40504: GO 40789
40506: LD_INT 22
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40520
40512: LD_INT 36
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40545
40520: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40521: LD_ADDR_VAR 0 3
40525: PUSH
40526: LD_INT 15
40528: PPUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 321
40538: PUSH
40539: LD_INT 2
40541: EQUAL
40542: ST_TO_ADDR
40543: GO 40789
40545: LD_INT 30
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40578
40553: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_INT 20
40561: PPUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 321
40571: PUSH
40572: LD_INT 2
40574: EQUAL
40575: ST_TO_ADDR
40576: GO 40789
40578: LD_INT 28
40580: DOUBLE
40581: EQUAL
40582: IFTRUE 40592
40584: LD_INT 21
40586: DOUBLE
40587: EQUAL
40588: IFTRUE 40592
40590: GO 40617
40592: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40593: LD_ADDR_VAR 0 3
40597: PUSH
40598: LD_INT 21
40600: PPUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 321
40610: PUSH
40611: LD_INT 2
40613: EQUAL
40614: ST_TO_ADDR
40615: GO 40789
40617: LD_INT 16
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40650
40625: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 84
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 321
40643: PUSH
40644: LD_INT 2
40646: EQUAL
40647: ST_TO_ADDR
40648: GO 40789
40650: LD_INT 19
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40664
40656: LD_INT 23
40658: DOUBLE
40659: EQUAL
40660: IFTRUE 40664
40662: GO 40689
40664: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 83
40672: PPUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 321
40682: PUSH
40683: LD_INT 2
40685: EQUAL
40686: ST_TO_ADDR
40687: GO 40789
40689: LD_INT 17
40691: DOUBLE
40692: EQUAL
40693: IFTRUE 40697
40695: GO 40722
40697: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40698: LD_ADDR_VAR 0 3
40702: PUSH
40703: LD_INT 39
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 321
40715: PUSH
40716: LD_INT 2
40718: EQUAL
40719: ST_TO_ADDR
40720: GO 40789
40722: LD_INT 18
40724: DOUBLE
40725: EQUAL
40726: IFTRUE 40730
40728: GO 40755
40730: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40731: LD_ADDR_VAR 0 3
40735: PUSH
40736: LD_INT 40
40738: PPUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 321
40748: PUSH
40749: LD_INT 2
40751: EQUAL
40752: ST_TO_ADDR
40753: GO 40789
40755: LD_INT 27
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40763
40761: GO 40788
40763: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_INT 35
40771: PPUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 321
40781: PUSH
40782: LD_INT 2
40784: EQUAL
40785: ST_TO_ADDR
40786: GO 40789
40788: POP
// end ;
40789: LD_VAR 0 3
40793: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40794: LD_INT 0
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
// result := false ;
40807: LD_ADDR_VAR 0 6
40811: PUSH
40812: LD_INT 0
40814: ST_TO_ADDR
// if btype = b_depot then
40815: LD_VAR 0 2
40819: PUSH
40820: LD_INT 0
40822: EQUAL
40823: IFFALSE 40835
// begin result := true ;
40825: LD_ADDR_VAR 0 6
40829: PUSH
40830: LD_INT 1
40832: ST_TO_ADDR
// exit ;
40833: GO 41661
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40835: LD_VAR 0 1
40839: NOT
40840: PUSH
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 266
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: IN
40861: NOT
40862: OR
40863: PUSH
40864: LD_VAR 0 2
40868: NOT
40869: OR
40870: PUSH
40871: LD_VAR 0 5
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: LD_INT 4
40890: PUSH
40891: LD_INT 5
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: IN
40902: NOT
40903: OR
40904: PUSH
40905: LD_VAR 0 3
40909: PPUSH
40910: LD_VAR 0 4
40914: PPUSH
40915: CALL_OW 488
40919: NOT
40920: OR
40921: IFFALSE 40925
// exit ;
40923: GO 41661
// side := GetSide ( depot ) ;
40925: LD_ADDR_VAR 0 9
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 255
40939: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40940: LD_VAR 0 9
40944: PPUSH
40945: LD_VAR 0 2
40949: PPUSH
40950: CALL 40418 0 2
40954: NOT
40955: IFFALSE 40959
// exit ;
40957: GO 41661
// pom := GetBase ( depot ) ;
40959: LD_ADDR_VAR 0 10
40963: PUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 274
40973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40974: LD_ADDR_VAR 0 11
40978: PUSH
40979: LD_VAR 0 2
40983: PPUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 248
40993: PPUSH
40994: CALL_OW 450
40998: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40999: LD_VAR 0 10
41003: PPUSH
41004: LD_INT 1
41006: PPUSH
41007: CALL_OW 275
41011: PUSH
41012: LD_VAR 0 11
41016: PUSH
41017: LD_INT 1
41019: ARRAY
41020: GREATEREQUAL
41021: PUSH
41022: LD_VAR 0 10
41026: PPUSH
41027: LD_INT 2
41029: PPUSH
41030: CALL_OW 275
41034: PUSH
41035: LD_VAR 0 11
41039: PUSH
41040: LD_INT 2
41042: ARRAY
41043: GREATEREQUAL
41044: AND
41045: PUSH
41046: LD_VAR 0 10
41050: PPUSH
41051: LD_INT 3
41053: PPUSH
41054: CALL_OW 275
41058: PUSH
41059: LD_VAR 0 11
41063: PUSH
41064: LD_INT 3
41066: ARRAY
41067: GREATEREQUAL
41068: AND
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41661
// if GetBType ( depot ) = b_depot then
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 266
41083: PUSH
41084: LD_INT 0
41086: EQUAL
41087: IFFALSE 41099
// dist := 28 else
41089: LD_ADDR_VAR 0 14
41093: PUSH
41094: LD_INT 28
41096: ST_TO_ADDR
41097: GO 41107
// dist := 36 ;
41099: LD_ADDR_VAR 0 14
41103: PUSH
41104: LD_INT 36
41106: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41107: LD_VAR 0 1
41111: PPUSH
41112: LD_VAR 0 3
41116: PPUSH
41117: LD_VAR 0 4
41121: PPUSH
41122: CALL_OW 297
41126: PUSH
41127: LD_VAR 0 14
41131: GREATER
41132: IFFALSE 41136
// exit ;
41134: GO 41661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41136: LD_ADDR_VAR 0 12
41140: PUSH
41141: LD_VAR 0 2
41145: PPUSH
41146: LD_VAR 0 3
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: LD_VAR 0 5
41160: PPUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 248
41170: PPUSH
41171: LD_INT 0
41173: PPUSH
41174: CALL 41666 0 6
41178: ST_TO_ADDR
// if not hexes then
41179: LD_VAR 0 12
41183: NOT
41184: IFFALSE 41188
// exit ;
41186: GO 41661
// hex := GetHexInfo ( x , y ) ;
41188: LD_ADDR_VAR 0 15
41192: PUSH
41193: LD_VAR 0 3
41197: PPUSH
41198: LD_VAR 0 4
41202: PPUSH
41203: CALL_OW 546
41207: ST_TO_ADDR
// if hex [ 1 ] then
41208: LD_VAR 0 15
41212: PUSH
41213: LD_INT 1
41215: ARRAY
41216: IFFALSE 41220
// exit ;
41218: GO 41661
// height := hex [ 2 ] ;
41220: LD_ADDR_VAR 0 13
41224: PUSH
41225: LD_VAR 0 15
41229: PUSH
41230: LD_INT 2
41232: ARRAY
41233: ST_TO_ADDR
// for i = 1 to hexes do
41234: LD_ADDR_VAR 0 7
41238: PUSH
41239: DOUBLE
41240: LD_INT 1
41242: DEC
41243: ST_TO_ADDR
41244: LD_VAR 0 12
41248: PUSH
41249: FOR_TO
41250: IFFALSE 41580
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41252: LD_VAR 0 12
41256: PUSH
41257: LD_VAR 0 7
41261: ARRAY
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PPUSH
41267: LD_VAR 0 12
41271: PUSH
41272: LD_VAR 0 7
41276: ARRAY
41277: PUSH
41278: LD_INT 2
41280: ARRAY
41281: PPUSH
41282: CALL_OW 488
41286: NOT
41287: PUSH
41288: LD_VAR 0 12
41292: PUSH
41293: LD_VAR 0 7
41297: ARRAY
41298: PUSH
41299: LD_INT 1
41301: ARRAY
41302: PPUSH
41303: LD_VAR 0 12
41307: PUSH
41308: LD_VAR 0 7
41312: ARRAY
41313: PUSH
41314: LD_INT 2
41316: ARRAY
41317: PPUSH
41318: CALL_OW 428
41322: PUSH
41323: LD_INT 0
41325: GREATER
41326: OR
41327: PUSH
41328: LD_VAR 0 12
41332: PUSH
41333: LD_VAR 0 7
41337: ARRAY
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PPUSH
41343: LD_VAR 0 12
41347: PUSH
41348: LD_VAR 0 7
41352: ARRAY
41353: PUSH
41354: LD_INT 2
41356: ARRAY
41357: PPUSH
41358: CALL_OW 351
41362: OR
41363: IFFALSE 41369
// exit ;
41365: POP
41366: POP
41367: GO 41661
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41369: LD_ADDR_VAR 0 8
41373: PUSH
41374: LD_VAR 0 12
41378: PUSH
41379: LD_VAR 0 7
41383: ARRAY
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 12
41393: PUSH
41394: LD_VAR 0 7
41398: ARRAY
41399: PUSH
41400: LD_INT 2
41402: ARRAY
41403: PPUSH
41404: CALL_OW 546
41408: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41409: LD_VAR 0 8
41413: PUSH
41414: LD_INT 1
41416: ARRAY
41417: PUSH
41418: LD_VAR 0 8
41422: PUSH
41423: LD_INT 2
41425: ARRAY
41426: PUSH
41427: LD_VAR 0 13
41431: PUSH
41432: LD_INT 2
41434: PLUS
41435: GREATER
41436: OR
41437: PUSH
41438: LD_VAR 0 8
41442: PUSH
41443: LD_INT 2
41445: ARRAY
41446: PUSH
41447: LD_VAR 0 13
41451: PUSH
41452: LD_INT 2
41454: MINUS
41455: LESS
41456: OR
41457: PUSH
41458: LD_VAR 0 8
41462: PUSH
41463: LD_INT 3
41465: ARRAY
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 8
41472: PUSH
41473: LD_INT 9
41475: PUSH
41476: LD_INT 10
41478: PUSH
41479: LD_INT 11
41481: PUSH
41482: LD_INT 12
41484: PUSH
41485: LD_INT 13
41487: PUSH
41488: LD_INT 16
41490: PUSH
41491: LD_INT 17
41493: PUSH
41494: LD_INT 18
41496: PUSH
41497: LD_INT 19
41499: PUSH
41500: LD_INT 20
41502: PUSH
41503: LD_INT 21
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: IN
41521: NOT
41522: OR
41523: PUSH
41524: LD_VAR 0 8
41528: PUSH
41529: LD_INT 5
41531: ARRAY
41532: NOT
41533: OR
41534: PUSH
41535: LD_VAR 0 8
41539: PUSH
41540: LD_INT 6
41542: ARRAY
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 7
41552: PUSH
41553: LD_INT 9
41555: PUSH
41556: LD_INT 10
41558: PUSH
41559: LD_INT 11
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: IN
41570: NOT
41571: OR
41572: IFFALSE 41578
// exit ;
41574: POP
41575: POP
41576: GO 41661
// end ;
41578: GO 41249
41580: POP
41581: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41582: LD_VAR 0 9
41586: PPUSH
41587: LD_VAR 0 3
41591: PPUSH
41592: LD_VAR 0 4
41596: PPUSH
41597: LD_INT 20
41599: PPUSH
41600: CALL 33584 0 4
41604: PUSH
41605: LD_INT 4
41607: ARRAY
41608: IFFALSE 41612
// exit ;
41610: GO 41661
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41612: LD_VAR 0 2
41616: PUSH
41617: LD_INT 29
41619: PUSH
41620: LD_INT 30
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: IN
41627: PUSH
41628: LD_VAR 0 3
41632: PPUSH
41633: LD_VAR 0 4
41637: PPUSH
41638: LD_VAR 0 9
41642: PPUSH
41643: CALL_OW 440
41647: NOT
41648: AND
41649: IFFALSE 41653
// exit ;
41651: GO 41661
// result := true ;
41653: LD_ADDR_VAR 0 6
41657: PUSH
41658: LD_INT 1
41660: ST_TO_ADDR
// end ;
41661: LD_VAR 0 6
41665: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41666: LD_INT 0
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
// result = [ ] ;
41726: LD_ADDR_VAR 0 7
41730: PUSH
41731: EMPTY
41732: ST_TO_ADDR
// temp_list = [ ] ;
41733: LD_ADDR_VAR 0 9
41737: PUSH
41738: EMPTY
41739: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41740: LD_VAR 0 4
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: LD_INT 4
41759: PUSH
41760: LD_INT 5
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: IN
41771: NOT
41772: PUSH
41773: LD_VAR 0 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: IN
41788: PUSH
41789: LD_VAR 0 5
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: IN
41808: NOT
41809: AND
41810: OR
41811: IFFALSE 41815
// exit ;
41813: GO 60206
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41815: LD_VAR 0 1
41819: PUSH
41820: LD_INT 6
41822: PUSH
41823: LD_INT 7
41825: PUSH
41826: LD_INT 8
41828: PUSH
41829: LD_INT 13
41831: PUSH
41832: LD_INT 12
41834: PUSH
41835: LD_INT 15
41837: PUSH
41838: LD_INT 11
41840: PUSH
41841: LD_INT 14
41843: PUSH
41844: LD_INT 10
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: IN
41858: IFFALSE 41868
// btype = b_lab ;
41860: LD_ADDR_VAR 0 1
41864: PUSH
41865: LD_INT 6
41867: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41868: LD_VAR 0 6
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: IN
41887: NOT
41888: PUSH
41889: LD_VAR 0 1
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: LD_INT 3
41905: PUSH
41906: LD_INT 6
41908: PUSH
41909: LD_INT 36
41911: PUSH
41912: LD_INT 4
41914: PUSH
41915: LD_INT 5
41917: PUSH
41918: LD_INT 31
41920: PUSH
41921: LD_INT 32
41923: PUSH
41924: LD_INT 33
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: IN
41940: NOT
41941: PUSH
41942: LD_VAR 0 6
41946: PUSH
41947: LD_INT 1
41949: EQUAL
41950: AND
41951: OR
41952: PUSH
41953: LD_VAR 0 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: IN
41968: NOT
41969: PUSH
41970: LD_VAR 0 6
41974: PUSH
41975: LD_INT 2
41977: EQUAL
41978: AND
41979: OR
41980: IFFALSE 41990
// mode = 0 ;
41982: LD_ADDR_VAR 0 6
41986: PUSH
41987: LD_INT 0
41989: ST_TO_ADDR
// case mode of 0 :
41990: LD_VAR 0 6
41994: PUSH
41995: LD_INT 0
41997: DOUBLE
41998: EQUAL
41999: IFTRUE 42003
42001: GO 53456
42003: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42004: LD_ADDR_VAR 0 11
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 3
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42197: LD_ADDR_VAR 0 12
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42393: LD_ADDR_VAR 0 13
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 3
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: NEG
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 3
42564: NEG
42565: PUSH
42566: LD_INT 3
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42592: LD_ADDR_VAR 0 14
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 3
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 3
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42788: LD_ADDR_VAR 0 15
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42981: LD_ADDR_VAR 0 16
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43174: LD_ADDR_VAR 0 17
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43404: LD_ADDR_VAR 0 18
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43634: LD_ADDR_VAR 0 19
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43864: LD_ADDR_VAR 0 20
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44094: LD_ADDR_VAR 0 21
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44324: LD_ADDR_VAR 0 22
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44554: LD_ADDR_VAR 0 23
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 3
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44834: LD_ADDR_VAR 0 24
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45110: LD_ADDR_VAR 0 25
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45384: LD_ADDR_VAR 0 26
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45660: LD_ADDR_VAR 0 27
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45940: LD_ADDR_VAR 0 28
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 3
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46222: LD_ADDR_VAR 0 29
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 3
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46501: LD_ADDR_VAR 0 30
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 3
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46779: LD_ADDR_VAR 0 31
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47057: LD_ADDR_VAR 0 32
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47335: LD_ADDR_VAR 0 33
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: LD_INT 3
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47614: LD_ADDR_VAR 0 34
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47894: LD_ADDR_VAR 0 35
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48006: LD_ADDR_VAR 0 36
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48118: LD_ADDR_VAR 0 37
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48230: LD_ADDR_VAR 0 38
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48342: LD_ADDR_VAR 0 39
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48454: LD_ADDR_VAR 0 40
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48566: LD_ADDR_VAR 0 41
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: NEG
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48916: LD_ADDR_VAR 0 42
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49266: LD_ADDR_VAR 0 43
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49614: LD_ADDR_VAR 0 44
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49964: LD_ADDR_VAR 0 45
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 3
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50314: LD_ADDR_VAR 0 46
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: NEG
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50662: LD_ADDR_VAR 0 47
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50813: LD_ADDR_VAR 0 48
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50960: LD_ADDR_VAR 0 49
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51104: LD_ADDR_VAR 0 50
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51248: LD_ADDR_VAR 0 51
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51395: LD_ADDR_VAR 0 52
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51546: LD_ADDR_VAR 0 53
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51776: LD_ADDR_VAR 0 54
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52006: LD_ADDR_VAR 0 55
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52236: LD_ADDR_VAR 0 56
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52466: LD_ADDR_VAR 0 57
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52696: LD_ADDR_VAR 0 58
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52926: LD_ADDR_VAR 0 59
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53014: LD_ADDR_VAR 0 60
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53102: LD_ADDR_VAR 0 61
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53190: LD_ADDR_VAR 0 62
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53278: LD_ADDR_VAR 0 63
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53366: LD_ADDR_VAR 0 64
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: ST_TO_ADDR
// end ; 1 :
53454: GO 59351
53456: LD_INT 1
53458: DOUBLE
53459: EQUAL
53460: IFTRUE 53464
53462: GO 56087
53464: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53465: LD_ADDR_VAR 0 11
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53509: LD_ADDR_VAR 0 12
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53550: LD_ADDR_VAR 0 13
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53590: LD_ADDR_VAR 0 14
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53631: LD_ADDR_VAR 0 15
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53675: LD_ADDR_VAR 0 16
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: LIST
53720: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53721: LD_ADDR_VAR 0 17
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53765: LD_ADDR_VAR 0 18
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53806: LD_ADDR_VAR 0 19
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53846: LD_ADDR_VAR 0 20
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53887: LD_ADDR_VAR 0 21
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53931: LD_ADDR_VAR 0 22
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53977: LD_ADDR_VAR 0 23
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54021: LD_ADDR_VAR 0 24
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 4
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54062: LD_ADDR_VAR 0 25
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 4
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54102: LD_ADDR_VAR 0 26
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54143: LD_ADDR_VAR 0 27
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54187: LD_ADDR_VAR 0 28
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: NEG
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54233: LD_ADDR_VAR 0 29
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 5
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 6
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 6
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 5
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54388: LD_ADDR_VAR 0 30
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 4
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 4
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 5
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 5
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 6
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 6
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54531: LD_ADDR_VAR 0 31
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 4
54578: PUSH
54579: LD_INT 4
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 5
54598: PUSH
54599: LD_INT 4
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 5
54608: PUSH
54609: LD_INT 5
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: LD_INT 5
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 6
54628: PUSH
54629: LD_INT 5
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 6
54638: PUSH
54639: LD_INT 6
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: LD_INT 6
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54670: LD_ADDR_VAR 0 32
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 3
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 4
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 5
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 5
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 6
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 6
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 5
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54813: LD_ADDR_VAR 0 33
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 4
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 4
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 5
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 5
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 5
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 6
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 6
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54968: LD_ADDR_VAR 0 34
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 4
55047: NEG
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 5
55059: NEG
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 5
55071: NEG
55072: PUSH
55073: LD_INT 5
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 5
55083: NEG
55084: PUSH
55085: LD_INT 6
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 6
55095: NEG
55096: PUSH
55097: LD_INT 5
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 6
55107: NEG
55108: PUSH
55109: LD_INT 6
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55131: LD_ADDR_VAR 0 41
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55175: LD_ADDR_VAR 0 42
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55216: LD_ADDR_VAR 0 43
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55256: LD_ADDR_VAR 0 44
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55297: LD_ADDR_VAR 0 45
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55341: LD_ADDR_VAR 0 46
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55387: LD_ADDR_VAR 0 47
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55420: LD_ADDR_VAR 0 48
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55451: LD_ADDR_VAR 0 49
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55480: LD_ADDR_VAR 0 50
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55509: LD_ADDR_VAR 0 51
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55540: LD_ADDR_VAR 0 52
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55573: LD_ADDR_VAR 0 53
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55617: LD_ADDR_VAR 0 54
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55658: LD_ADDR_VAR 0 55
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 3
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55698: LD_ADDR_VAR 0 56
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55739: LD_ADDR_VAR 0 57
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55783: LD_ADDR_VAR 0 58
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55829: LD_ADDR_VAR 0 59
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55873: LD_ADDR_VAR 0 60
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55914: LD_ADDR_VAR 0 61
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55954: LD_ADDR_VAR 0 62
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55995: LD_ADDR_VAR 0 63
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56039: LD_ADDR_VAR 0 64
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// end ; 2 :
56085: GO 59351
56087: LD_INT 2
56089: DOUBLE
56090: EQUAL
56091: IFTRUE 56095
56093: GO 59350
56095: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56096: LD_ADDR_VAR 0 29
56100: PUSH
56101: LD_INT 4
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 4
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 4
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 5
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 5
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 4
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: NEG
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 4
56493: NEG
56494: PUSH
56495: LD_INT 5
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: LD_INT 4
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 4
56529: NEG
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 5
56541: NEG
56542: PUSH
56543: LD_INT 4
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: NEG
56554: PUSH
56555: LD_INT 5
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 5
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 5
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56634: LD_ADDR_VAR 0 30
56638: PUSH
56639: LD_INT 4
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: LD_INT 4
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 5
56671: PUSH
56672: LD_INT 5
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 5
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 5
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 4
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 5
56903: NEG
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 4
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: LD_INT 4
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 5
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 4
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 5
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 5
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57181: LD_ADDR_VAR 0 31
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 4
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 5
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 5
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 4
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 4
57383: NEG
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 4
57395: NEG
57396: PUSH
57397: LD_INT 5
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 4
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 4
57431: NEG
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 5
57443: NEG
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 5
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: LD_INT 5
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 5
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57731: LD_ADDR_VAR 0 32
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 4
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 5
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: NEG
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 3
57840: NEG
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: LD_INT 4
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 4
57900: NEG
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: LD_INT 4
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 5
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 4
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 3
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 5
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 5
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 4
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: LD_INT 4
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: LD_INT 5
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58278: LD_ADDR_VAR 0 33
58282: PUSH
58283: LD_INT 4
58285: NEG
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: LD_INT 5
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: LD_INT 4
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 5
58345: NEG
58346: PUSH
58347: LD_INT 4
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 5
58357: NEG
58358: PUSH
58359: LD_INT 5
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: LD_INT 5
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 5
58381: NEG
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: LD_INT 4
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 4
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 5
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 3
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 4
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 4
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 5
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 5
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 4
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58816: LD_ADDR_VAR 0 34
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 4
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 5
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 4
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 5
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 4
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: LD_INT 4
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 5
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 4
59058: PUSH
59059: LD_INT 5
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: LD_INT 4
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: LD_INT 5
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 4
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 5
59257: NEG
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 5
59268: NEG
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 5
59280: NEG
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// end ; end ;
59348: GO 59351
59350: POP
// case btype of b_depot , b_warehouse :
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 0
59358: DOUBLE
59359: EQUAL
59360: IFTRUE 59370
59362: LD_INT 1
59364: DOUBLE
59365: EQUAL
59366: IFTRUE 59370
59368: GO 59571
59370: POP
// case nation of nation_american :
59371: LD_VAR 0 5
59375: PUSH
59376: LD_INT 1
59378: DOUBLE
59379: EQUAL
59380: IFTRUE 59384
59382: GO 59440
59384: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59385: LD_ADDR_VAR 0 9
59389: PUSH
59390: LD_VAR 0 11
59394: PUSH
59395: LD_VAR 0 12
59399: PUSH
59400: LD_VAR 0 13
59404: PUSH
59405: LD_VAR 0 14
59409: PUSH
59410: LD_VAR 0 15
59414: PUSH
59415: LD_VAR 0 16
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: PUSH
59428: LD_VAR 0 4
59432: PUSH
59433: LD_INT 1
59435: PLUS
59436: ARRAY
59437: ST_TO_ADDR
59438: GO 59569
59440: LD_INT 2
59442: DOUBLE
59443: EQUAL
59444: IFTRUE 59448
59446: GO 59504
59448: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59449: LD_ADDR_VAR 0 9
59453: PUSH
59454: LD_VAR 0 17
59458: PUSH
59459: LD_VAR 0 18
59463: PUSH
59464: LD_VAR 0 19
59468: PUSH
59469: LD_VAR 0 20
59473: PUSH
59474: LD_VAR 0 21
59478: PUSH
59479: LD_VAR 0 22
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 4
59496: PUSH
59497: LD_INT 1
59499: PLUS
59500: ARRAY
59501: ST_TO_ADDR
59502: GO 59569
59504: LD_INT 3
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59512
59510: GO 59568
59512: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59513: LD_ADDR_VAR 0 9
59517: PUSH
59518: LD_VAR 0 23
59522: PUSH
59523: LD_VAR 0 24
59527: PUSH
59528: LD_VAR 0 25
59532: PUSH
59533: LD_VAR 0 26
59537: PUSH
59538: LD_VAR 0 27
59542: PUSH
59543: LD_VAR 0 28
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: PUSH
59556: LD_VAR 0 4
59560: PUSH
59561: LD_INT 1
59563: PLUS
59564: ARRAY
59565: ST_TO_ADDR
59566: GO 59569
59568: POP
59569: GO 60124
59571: LD_INT 2
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59585
59577: LD_INT 3
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59585
59583: GO 59641
59585: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59586: LD_ADDR_VAR 0 9
59590: PUSH
59591: LD_VAR 0 29
59595: PUSH
59596: LD_VAR 0 30
59600: PUSH
59601: LD_VAR 0 31
59605: PUSH
59606: LD_VAR 0 32
59610: PUSH
59611: LD_VAR 0 33
59615: PUSH
59616: LD_VAR 0 34
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: PUSH
59629: LD_VAR 0 4
59633: PUSH
59634: LD_INT 1
59636: PLUS
59637: ARRAY
59638: ST_TO_ADDR
59639: GO 60124
59641: LD_INT 16
59643: DOUBLE
59644: EQUAL
59645: IFTRUE 59703
59647: LD_INT 17
59649: DOUBLE
59650: EQUAL
59651: IFTRUE 59703
59653: LD_INT 18
59655: DOUBLE
59656: EQUAL
59657: IFTRUE 59703
59659: LD_INT 19
59661: DOUBLE
59662: EQUAL
59663: IFTRUE 59703
59665: LD_INT 22
59667: DOUBLE
59668: EQUAL
59669: IFTRUE 59703
59671: LD_INT 20
59673: DOUBLE
59674: EQUAL
59675: IFTRUE 59703
59677: LD_INT 21
59679: DOUBLE
59680: EQUAL
59681: IFTRUE 59703
59683: LD_INT 23
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59703
59689: LD_INT 24
59691: DOUBLE
59692: EQUAL
59693: IFTRUE 59703
59695: LD_INT 25
59697: DOUBLE
59698: EQUAL
59699: IFTRUE 59703
59701: GO 59759
59703: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59704: LD_ADDR_VAR 0 9
59708: PUSH
59709: LD_VAR 0 35
59713: PUSH
59714: LD_VAR 0 36
59718: PUSH
59719: LD_VAR 0 37
59723: PUSH
59724: LD_VAR 0 38
59728: PUSH
59729: LD_VAR 0 39
59733: PUSH
59734: LD_VAR 0 40
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_VAR 0 4
59751: PUSH
59752: LD_INT 1
59754: PLUS
59755: ARRAY
59756: ST_TO_ADDR
59757: GO 60124
59759: LD_INT 6
59761: DOUBLE
59762: EQUAL
59763: IFTRUE 59815
59765: LD_INT 7
59767: DOUBLE
59768: EQUAL
59769: IFTRUE 59815
59771: LD_INT 8
59773: DOUBLE
59774: EQUAL
59775: IFTRUE 59815
59777: LD_INT 13
59779: DOUBLE
59780: EQUAL
59781: IFTRUE 59815
59783: LD_INT 12
59785: DOUBLE
59786: EQUAL
59787: IFTRUE 59815
59789: LD_INT 15
59791: DOUBLE
59792: EQUAL
59793: IFTRUE 59815
59795: LD_INT 11
59797: DOUBLE
59798: EQUAL
59799: IFTRUE 59815
59801: LD_INT 14
59803: DOUBLE
59804: EQUAL
59805: IFTRUE 59815
59807: LD_INT 10
59809: DOUBLE
59810: EQUAL
59811: IFTRUE 59815
59813: GO 59871
59815: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59816: LD_ADDR_VAR 0 9
59820: PUSH
59821: LD_VAR 0 41
59825: PUSH
59826: LD_VAR 0 42
59830: PUSH
59831: LD_VAR 0 43
59835: PUSH
59836: LD_VAR 0 44
59840: PUSH
59841: LD_VAR 0 45
59845: PUSH
59846: LD_VAR 0 46
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: PUSH
59859: LD_VAR 0 4
59863: PUSH
59864: LD_INT 1
59866: PLUS
59867: ARRAY
59868: ST_TO_ADDR
59869: GO 60124
59871: LD_INT 36
59873: DOUBLE
59874: EQUAL
59875: IFTRUE 59879
59877: GO 59935
59879: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59880: LD_ADDR_VAR 0 9
59884: PUSH
59885: LD_VAR 0 47
59889: PUSH
59890: LD_VAR 0 48
59894: PUSH
59895: LD_VAR 0 49
59899: PUSH
59900: LD_VAR 0 50
59904: PUSH
59905: LD_VAR 0 51
59909: PUSH
59910: LD_VAR 0 52
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: PUSH
59923: LD_VAR 0 4
59927: PUSH
59928: LD_INT 1
59930: PLUS
59931: ARRAY
59932: ST_TO_ADDR
59933: GO 60124
59935: LD_INT 4
59937: DOUBLE
59938: EQUAL
59939: IFTRUE 59961
59941: LD_INT 5
59943: DOUBLE
59944: EQUAL
59945: IFTRUE 59961
59947: LD_INT 34
59949: DOUBLE
59950: EQUAL
59951: IFTRUE 59961
59953: LD_INT 37
59955: DOUBLE
59956: EQUAL
59957: IFTRUE 59961
59959: GO 60017
59961: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59962: LD_ADDR_VAR 0 9
59966: PUSH
59967: LD_VAR 0 53
59971: PUSH
59972: LD_VAR 0 54
59976: PUSH
59977: LD_VAR 0 55
59981: PUSH
59982: LD_VAR 0 56
59986: PUSH
59987: LD_VAR 0 57
59991: PUSH
59992: LD_VAR 0 58
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: PUSH
60005: LD_VAR 0 4
60009: PUSH
60010: LD_INT 1
60012: PLUS
60013: ARRAY
60014: ST_TO_ADDR
60015: GO 60124
60017: LD_INT 31
60019: DOUBLE
60020: EQUAL
60021: IFTRUE 60067
60023: LD_INT 32
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60067
60029: LD_INT 33
60031: DOUBLE
60032: EQUAL
60033: IFTRUE 60067
60035: LD_INT 27
60037: DOUBLE
60038: EQUAL
60039: IFTRUE 60067
60041: LD_INT 26
60043: DOUBLE
60044: EQUAL
60045: IFTRUE 60067
60047: LD_INT 28
60049: DOUBLE
60050: EQUAL
60051: IFTRUE 60067
60053: LD_INT 29
60055: DOUBLE
60056: EQUAL
60057: IFTRUE 60067
60059: LD_INT 30
60061: DOUBLE
60062: EQUAL
60063: IFTRUE 60067
60065: GO 60123
60067: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60068: LD_ADDR_VAR 0 9
60072: PUSH
60073: LD_VAR 0 59
60077: PUSH
60078: LD_VAR 0 60
60082: PUSH
60083: LD_VAR 0 61
60087: PUSH
60088: LD_VAR 0 62
60092: PUSH
60093: LD_VAR 0 63
60097: PUSH
60098: LD_VAR 0 64
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 4
60115: PUSH
60116: LD_INT 1
60118: PLUS
60119: ARRAY
60120: ST_TO_ADDR
60121: GO 60124
60123: POP
// temp_list2 = [ ] ;
60124: LD_ADDR_VAR 0 10
60128: PUSH
60129: EMPTY
60130: ST_TO_ADDR
// for i in temp_list do
60131: LD_ADDR_VAR 0 8
60135: PUSH
60136: LD_VAR 0 9
60140: PUSH
60141: FOR_IN
60142: IFFALSE 60194
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60144: LD_ADDR_VAR 0 10
60148: PUSH
60149: LD_VAR 0 10
60153: PUSH
60154: LD_VAR 0 8
60158: PUSH
60159: LD_INT 1
60161: ARRAY
60162: PUSH
60163: LD_VAR 0 2
60167: PLUS
60168: PUSH
60169: LD_VAR 0 8
60173: PUSH
60174: LD_INT 2
60176: ARRAY
60177: PUSH
60178: LD_VAR 0 3
60182: PLUS
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: ADD
60191: ST_TO_ADDR
60192: GO 60141
60194: POP
60195: POP
// result = temp_list2 ;
60196: LD_ADDR_VAR 0 7
60200: PUSH
60201: LD_VAR 0 10
60205: ST_TO_ADDR
// end ;
60206: LD_VAR 0 7
60210: RET
// export function EnemyInRange ( unit , dist ) ; begin
60211: LD_INT 0
60213: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60214: LD_ADDR_VAR 0 3
60218: PUSH
60219: LD_VAR 0 1
60223: PPUSH
60224: CALL_OW 255
60228: PPUSH
60229: LD_VAR 0 1
60233: PPUSH
60234: CALL_OW 250
60238: PPUSH
60239: LD_VAR 0 1
60243: PPUSH
60244: CALL_OW 251
60248: PPUSH
60249: LD_VAR 0 2
60253: PPUSH
60254: CALL 33584 0 4
60258: PUSH
60259: LD_INT 4
60261: ARRAY
60262: ST_TO_ADDR
// end ;
60263: LD_VAR 0 3
60267: RET
// export function PlayerSeeMe ( unit ) ; begin
60268: LD_INT 0
60270: PPUSH
// result := See ( your_side , unit ) ;
60271: LD_ADDR_VAR 0 2
60275: PUSH
60276: LD_OWVAR 2
60280: PPUSH
60281: LD_VAR 0 1
60285: PPUSH
60286: CALL_OW 292
60290: ST_TO_ADDR
// end ;
60291: LD_VAR 0 2
60295: RET
// export function ReverseDir ( unit ) ; begin
60296: LD_INT 0
60298: PPUSH
// if not unit then
60299: LD_VAR 0 1
60303: NOT
60304: IFFALSE 60308
// exit ;
60306: GO 60331
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60308: LD_ADDR_VAR 0 2
60312: PUSH
60313: LD_VAR 0 1
60317: PPUSH
60318: CALL_OW 254
60322: PUSH
60323: LD_INT 3
60325: PLUS
60326: PUSH
60327: LD_INT 6
60329: MOD
60330: ST_TO_ADDR
// end ;
60331: LD_VAR 0 2
60335: RET
// export function ReverseArray ( array ) ; var i ; begin
60336: LD_INT 0
60338: PPUSH
60339: PPUSH
// if not array then
60340: LD_VAR 0 1
60344: NOT
60345: IFFALSE 60349
// exit ;
60347: GO 60404
// result := [ ] ;
60349: LD_ADDR_VAR 0 2
60353: PUSH
60354: EMPTY
60355: ST_TO_ADDR
// for i := array downto 1 do
60356: LD_ADDR_VAR 0 3
60360: PUSH
60361: DOUBLE
60362: LD_VAR 0 1
60366: INC
60367: ST_TO_ADDR
60368: LD_INT 1
60370: PUSH
60371: FOR_DOWNTO
60372: IFFALSE 60402
// result := Join ( result , array [ i ] ) ;
60374: LD_ADDR_VAR 0 2
60378: PUSH
60379: LD_VAR 0 2
60383: PPUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_VAR 0 3
60393: ARRAY
60394: PPUSH
60395: CALL 65060 0 2
60399: ST_TO_ADDR
60400: GO 60371
60402: POP
60403: POP
// end ;
60404: LD_VAR 0 2
60408: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60409: LD_INT 0
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not unit or not hexes then
60417: LD_VAR 0 1
60421: NOT
60422: PUSH
60423: LD_VAR 0 2
60427: NOT
60428: OR
60429: IFFALSE 60433
// exit ;
60431: GO 60556
// dist := 9999 ;
60433: LD_ADDR_VAR 0 5
60437: PUSH
60438: LD_INT 9999
60440: ST_TO_ADDR
// for i = 1 to hexes do
60441: LD_ADDR_VAR 0 4
60445: PUSH
60446: DOUBLE
60447: LD_INT 1
60449: DEC
60450: ST_TO_ADDR
60451: LD_VAR 0 2
60455: PUSH
60456: FOR_TO
60457: IFFALSE 60544
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60459: LD_ADDR_VAR 0 6
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 2
60473: PUSH
60474: LD_VAR 0 4
60478: ARRAY
60479: PUSH
60480: LD_INT 1
60482: ARRAY
60483: PPUSH
60484: LD_VAR 0 2
60488: PUSH
60489: LD_VAR 0 4
60493: ARRAY
60494: PUSH
60495: LD_INT 2
60497: ARRAY
60498: PPUSH
60499: CALL_OW 297
60503: ST_TO_ADDR
// if tdist < dist then
60504: LD_VAR 0 6
60508: PUSH
60509: LD_VAR 0 5
60513: LESS
60514: IFFALSE 60542
// begin hex := hexes [ i ] ;
60516: LD_ADDR_VAR 0 8
60520: PUSH
60521: LD_VAR 0 2
60525: PUSH
60526: LD_VAR 0 4
60530: ARRAY
60531: ST_TO_ADDR
// dist := tdist ;
60532: LD_ADDR_VAR 0 5
60536: PUSH
60537: LD_VAR 0 6
60541: ST_TO_ADDR
// end ; end ;
60542: GO 60456
60544: POP
60545: POP
// result := hex ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_VAR 0 8
60555: ST_TO_ADDR
// end ;
60556: LD_VAR 0 3
60560: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60561: LD_INT 0
60563: PPUSH
60564: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60565: LD_VAR 0 1
60569: NOT
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_INT 21
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 23
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PPUSH
60600: CALL_OW 69
60604: IN
60605: NOT
60606: OR
60607: IFFALSE 60611
// exit ;
60609: GO 60658
// for i = 1 to 3 do
60611: LD_ADDR_VAR 0 3
60615: PUSH
60616: DOUBLE
60617: LD_INT 1
60619: DEC
60620: ST_TO_ADDR
60621: LD_INT 3
60623: PUSH
60624: FOR_TO
60625: IFFALSE 60656
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60627: LD_VAR 0 1
60631: PPUSH
60632: CALL_OW 250
60636: PPUSH
60637: LD_VAR 0 1
60641: PPUSH
60642: CALL_OW 251
60646: PPUSH
60647: LD_INT 1
60649: PPUSH
60650: CALL_OW 453
60654: GO 60624
60656: POP
60657: POP
// end ;
60658: LD_VAR 0 2
60662: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60663: LD_INT 0
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
60670: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60671: LD_VAR 0 1
60675: NOT
60676: PUSH
60677: LD_VAR 0 2
60681: NOT
60682: OR
60683: PUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: CALL_OW 314
60693: OR
60694: IFFALSE 60698
// exit ;
60696: GO 61165
// if GetLives ( i ) < 250 then
60698: LD_VAR 0 4
60702: PPUSH
60703: CALL_OW 256
60707: PUSH
60708: LD_INT 250
60710: LESS
60711: IFFALSE 60724
// begin ComAutodestruct ( i ) ;
60713: LD_VAR 0 4
60717: PPUSH
60718: CALL 60561 0 1
// exit ;
60722: GO 61165
// end ; x := GetX ( enemy_unit ) ;
60724: LD_ADDR_VAR 0 7
60728: PUSH
60729: LD_VAR 0 2
60733: PPUSH
60734: CALL_OW 250
60738: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60739: LD_ADDR_VAR 0 8
60743: PUSH
60744: LD_VAR 0 2
60748: PPUSH
60749: CALL_OW 251
60753: ST_TO_ADDR
// if not x or not y then
60754: LD_VAR 0 7
60758: NOT
60759: PUSH
60760: LD_VAR 0 8
60764: NOT
60765: OR
60766: IFFALSE 60770
// exit ;
60768: GO 61165
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60770: LD_ADDR_VAR 0 6
60774: PUSH
60775: LD_VAR 0 7
60779: PPUSH
60780: LD_INT 0
60782: PPUSH
60783: LD_INT 4
60785: PPUSH
60786: CALL_OW 272
60790: PUSH
60791: LD_VAR 0 8
60795: PPUSH
60796: LD_INT 0
60798: PPUSH
60799: LD_INT 4
60801: PPUSH
60802: CALL_OW 273
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_VAR 0 7
60815: PPUSH
60816: LD_INT 1
60818: PPUSH
60819: LD_INT 4
60821: PPUSH
60822: CALL_OW 272
60826: PUSH
60827: LD_VAR 0 8
60831: PPUSH
60832: LD_INT 1
60834: PPUSH
60835: LD_INT 4
60837: PPUSH
60838: CALL_OW 273
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_VAR 0 7
60851: PPUSH
60852: LD_INT 2
60854: PPUSH
60855: LD_INT 4
60857: PPUSH
60858: CALL_OW 272
60862: PUSH
60863: LD_VAR 0 8
60867: PPUSH
60868: LD_INT 2
60870: PPUSH
60871: LD_INT 4
60873: PPUSH
60874: CALL_OW 273
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_VAR 0 7
60887: PPUSH
60888: LD_INT 3
60890: PPUSH
60891: LD_INT 4
60893: PPUSH
60894: CALL_OW 272
60898: PUSH
60899: LD_VAR 0 8
60903: PPUSH
60904: LD_INT 3
60906: PPUSH
60907: LD_INT 4
60909: PPUSH
60910: CALL_OW 273
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 7
60923: PPUSH
60924: LD_INT 4
60926: PPUSH
60927: LD_INT 4
60929: PPUSH
60930: CALL_OW 272
60934: PUSH
60935: LD_VAR 0 8
60939: PPUSH
60940: LD_INT 4
60942: PPUSH
60943: LD_INT 4
60945: PPUSH
60946: CALL_OW 273
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 7
60959: PPUSH
60960: LD_INT 5
60962: PPUSH
60963: LD_INT 4
60965: PPUSH
60966: CALL_OW 272
60970: PUSH
60971: LD_VAR 0 8
60975: PPUSH
60976: LD_INT 5
60978: PPUSH
60979: LD_INT 4
60981: PPUSH
60982: CALL_OW 273
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: ST_TO_ADDR
// for i = tmp downto 1 do
60999: LD_ADDR_VAR 0 4
61003: PUSH
61004: DOUBLE
61005: LD_VAR 0 6
61009: INC
61010: ST_TO_ADDR
61011: LD_INT 1
61013: PUSH
61014: FOR_DOWNTO
61015: IFFALSE 61116
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61017: LD_VAR 0 6
61021: PUSH
61022: LD_VAR 0 4
61026: ARRAY
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PPUSH
61032: LD_VAR 0 6
61036: PUSH
61037: LD_VAR 0 4
61041: ARRAY
61042: PUSH
61043: LD_INT 2
61045: ARRAY
61046: PPUSH
61047: CALL_OW 488
61051: NOT
61052: PUSH
61053: LD_VAR 0 6
61057: PUSH
61058: LD_VAR 0 4
61062: ARRAY
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PPUSH
61068: LD_VAR 0 6
61072: PUSH
61073: LD_VAR 0 4
61077: ARRAY
61078: PUSH
61079: LD_INT 2
61081: ARRAY
61082: PPUSH
61083: CALL_OW 428
61087: PUSH
61088: LD_INT 0
61090: NONEQUAL
61091: OR
61092: IFFALSE 61114
// tmp := Delete ( tmp , i ) ;
61094: LD_ADDR_VAR 0 6
61098: PUSH
61099: LD_VAR 0 6
61103: PPUSH
61104: LD_VAR 0 4
61108: PPUSH
61109: CALL_OW 3
61113: ST_TO_ADDR
61114: GO 61014
61116: POP
61117: POP
// j := GetClosestHex ( unit , tmp ) ;
61118: LD_ADDR_VAR 0 5
61122: PUSH
61123: LD_VAR 0 1
61127: PPUSH
61128: LD_VAR 0 6
61132: PPUSH
61133: CALL 60409 0 2
61137: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61138: LD_VAR 0 1
61142: PPUSH
61143: LD_VAR 0 5
61147: PUSH
61148: LD_INT 1
61150: ARRAY
61151: PPUSH
61152: LD_VAR 0 5
61156: PUSH
61157: LD_INT 2
61159: ARRAY
61160: PPUSH
61161: CALL_OW 111
// end ;
61165: LD_VAR 0 3
61169: RET
// export function PrepareApemanSoldier ( ) ; begin
61170: LD_INT 0
61172: PPUSH
// uc_nation := 0 ;
61173: LD_ADDR_OWVAR 21
61177: PUSH
61178: LD_INT 0
61180: ST_TO_ADDR
// hc_sex := sex_male ;
61181: LD_ADDR_OWVAR 27
61185: PUSH
61186: LD_INT 1
61188: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61189: LD_ADDR_OWVAR 28
61193: PUSH
61194: LD_INT 15
61196: ST_TO_ADDR
// hc_gallery :=  ;
61197: LD_ADDR_OWVAR 33
61201: PUSH
61202: LD_STRING 
61204: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61205: LD_ADDR_OWVAR 31
61209: PUSH
61210: LD_INT 0
61212: PPUSH
61213: LD_INT 3
61215: PPUSH
61216: CALL_OW 12
61220: PUSH
61221: LD_INT 0
61223: PPUSH
61224: LD_INT 3
61226: PPUSH
61227: CALL_OW 12
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// end ;
61244: LD_VAR 0 1
61248: RET
// export function PrepareApemanEngineer ( ) ; begin
61249: LD_INT 0
61251: PPUSH
// uc_nation := 0 ;
61252: LD_ADDR_OWVAR 21
61256: PUSH
61257: LD_INT 0
61259: ST_TO_ADDR
// hc_sex := sex_male ;
61260: LD_ADDR_OWVAR 27
61264: PUSH
61265: LD_INT 1
61267: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61268: LD_ADDR_OWVAR 28
61272: PUSH
61273: LD_INT 16
61275: ST_TO_ADDR
// hc_gallery :=  ;
61276: LD_ADDR_OWVAR 33
61280: PUSH
61281: LD_STRING 
61283: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61284: LD_ADDR_OWVAR 31
61288: PUSH
61289: LD_INT 0
61291: PPUSH
61292: LD_INT 3
61294: PPUSH
61295: CALL_OW 12
61299: PUSH
61300: LD_INT 0
61302: PPUSH
61303: LD_INT 3
61305: PPUSH
61306: CALL_OW 12
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: ST_TO_ADDR
// end ;
61323: LD_VAR 0 1
61327: RET
// export function PrepareApeman ( agressivity ) ; begin
61328: LD_INT 0
61330: PPUSH
// uc_side := 0 ;
61331: LD_ADDR_OWVAR 20
61335: PUSH
61336: LD_INT 0
61338: ST_TO_ADDR
// uc_nation := 0 ;
61339: LD_ADDR_OWVAR 21
61343: PUSH
61344: LD_INT 0
61346: ST_TO_ADDR
// hc_sex := sex_male ;
61347: LD_ADDR_OWVAR 27
61351: PUSH
61352: LD_INT 1
61354: ST_TO_ADDR
// hc_class := class_apeman ;
61355: LD_ADDR_OWVAR 28
61359: PUSH
61360: LD_INT 12
61362: ST_TO_ADDR
// hc_gallery :=  ;
61363: LD_ADDR_OWVAR 33
61367: PUSH
61368: LD_STRING 
61370: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61371: LD_ADDR_OWVAR 35
61375: PUSH
61376: LD_VAR 0 1
61380: NEG
61381: PPUSH
61382: LD_VAR 0 1
61386: PPUSH
61387: CALL_OW 12
61391: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61392: LD_ADDR_OWVAR 31
61396: PUSH
61397: LD_INT 0
61399: PPUSH
61400: LD_INT 3
61402: PPUSH
61403: CALL_OW 12
61407: PUSH
61408: LD_INT 0
61410: PPUSH
61411: LD_INT 3
61413: PPUSH
61414: CALL_OW 12
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// end ;
61431: LD_VAR 0 2
61435: RET
// export function PrepareTiger ( agressivity ) ; begin
61436: LD_INT 0
61438: PPUSH
// uc_side := 0 ;
61439: LD_ADDR_OWVAR 20
61443: PUSH
61444: LD_INT 0
61446: ST_TO_ADDR
// uc_nation := 0 ;
61447: LD_ADDR_OWVAR 21
61451: PUSH
61452: LD_INT 0
61454: ST_TO_ADDR
// hc_class := class_tiger ;
61455: LD_ADDR_OWVAR 28
61459: PUSH
61460: LD_INT 14
61462: ST_TO_ADDR
// hc_gallery :=  ;
61463: LD_ADDR_OWVAR 33
61467: PUSH
61468: LD_STRING 
61470: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61471: LD_ADDR_OWVAR 35
61475: PUSH
61476: LD_VAR 0 1
61480: NEG
61481: PPUSH
61482: LD_VAR 0 1
61486: PPUSH
61487: CALL_OW 12
61491: ST_TO_ADDR
// end ;
61492: LD_VAR 0 2
61496: RET
// export function PrepareEnchidna ( ) ; begin
61497: LD_INT 0
61499: PPUSH
// uc_side := 0 ;
61500: LD_ADDR_OWVAR 20
61504: PUSH
61505: LD_INT 0
61507: ST_TO_ADDR
// uc_nation := 0 ;
61508: LD_ADDR_OWVAR 21
61512: PUSH
61513: LD_INT 0
61515: ST_TO_ADDR
// hc_class := class_baggie ;
61516: LD_ADDR_OWVAR 28
61520: PUSH
61521: LD_INT 13
61523: ST_TO_ADDR
// hc_gallery :=  ;
61524: LD_ADDR_OWVAR 33
61528: PUSH
61529: LD_STRING 
61531: ST_TO_ADDR
// end ;
61532: LD_VAR 0 1
61536: RET
// export function PrepareFrog ( ) ; begin
61537: LD_INT 0
61539: PPUSH
// uc_side := 0 ;
61540: LD_ADDR_OWVAR 20
61544: PUSH
61545: LD_INT 0
61547: ST_TO_ADDR
// uc_nation := 0 ;
61548: LD_ADDR_OWVAR 21
61552: PUSH
61553: LD_INT 0
61555: ST_TO_ADDR
// hc_class := class_frog ;
61556: LD_ADDR_OWVAR 28
61560: PUSH
61561: LD_INT 19
61563: ST_TO_ADDR
// hc_gallery :=  ;
61564: LD_ADDR_OWVAR 33
61568: PUSH
61569: LD_STRING 
61571: ST_TO_ADDR
// end ;
61572: LD_VAR 0 1
61576: RET
// export function PrepareFish ( ) ; begin
61577: LD_INT 0
61579: PPUSH
// uc_side := 0 ;
61580: LD_ADDR_OWVAR 20
61584: PUSH
61585: LD_INT 0
61587: ST_TO_ADDR
// uc_nation := 0 ;
61588: LD_ADDR_OWVAR 21
61592: PUSH
61593: LD_INT 0
61595: ST_TO_ADDR
// hc_class := class_fish ;
61596: LD_ADDR_OWVAR 28
61600: PUSH
61601: LD_INT 20
61603: ST_TO_ADDR
// hc_gallery :=  ;
61604: LD_ADDR_OWVAR 33
61608: PUSH
61609: LD_STRING 
61611: ST_TO_ADDR
// end ;
61612: LD_VAR 0 1
61616: RET
// export function PrepareBird ( ) ; begin
61617: LD_INT 0
61619: PPUSH
// uc_side := 0 ;
61620: LD_ADDR_OWVAR 20
61624: PUSH
61625: LD_INT 0
61627: ST_TO_ADDR
// uc_nation := 0 ;
61628: LD_ADDR_OWVAR 21
61632: PUSH
61633: LD_INT 0
61635: ST_TO_ADDR
// hc_class := class_phororhacos ;
61636: LD_ADDR_OWVAR 28
61640: PUSH
61641: LD_INT 18
61643: ST_TO_ADDR
// hc_gallery :=  ;
61644: LD_ADDR_OWVAR 33
61648: PUSH
61649: LD_STRING 
61651: ST_TO_ADDR
// end ;
61652: LD_VAR 0 1
61656: RET
// export function PrepareHorse ( ) ; begin
61657: LD_INT 0
61659: PPUSH
// uc_side := 0 ;
61660: LD_ADDR_OWVAR 20
61664: PUSH
61665: LD_INT 0
61667: ST_TO_ADDR
// uc_nation := 0 ;
61668: LD_ADDR_OWVAR 21
61672: PUSH
61673: LD_INT 0
61675: ST_TO_ADDR
// hc_class := class_horse ;
61676: LD_ADDR_OWVAR 28
61680: PUSH
61681: LD_INT 21
61683: ST_TO_ADDR
// hc_gallery :=  ;
61684: LD_ADDR_OWVAR 33
61688: PUSH
61689: LD_STRING 
61691: ST_TO_ADDR
// end ;
61692: LD_VAR 0 1
61696: RET
// export function PrepareMastodont ( ) ; begin
61697: LD_INT 0
61699: PPUSH
// uc_side := 0 ;
61700: LD_ADDR_OWVAR 20
61704: PUSH
61705: LD_INT 0
61707: ST_TO_ADDR
// uc_nation := 0 ;
61708: LD_ADDR_OWVAR 21
61712: PUSH
61713: LD_INT 0
61715: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61716: LD_ADDR_OWVAR 37
61720: PUSH
61721: LD_INT 31
61723: ST_TO_ADDR
// vc_control := control_rider ;
61724: LD_ADDR_OWVAR 38
61728: PUSH
61729: LD_INT 4
61731: ST_TO_ADDR
// end ;
61732: LD_VAR 0 1
61736: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61737: LD_INT 0
61739: PPUSH
61740: PPUSH
61741: PPUSH
// uc_side = 0 ;
61742: LD_ADDR_OWVAR 20
61746: PUSH
61747: LD_INT 0
61749: ST_TO_ADDR
// uc_nation = 0 ;
61750: LD_ADDR_OWVAR 21
61754: PUSH
61755: LD_INT 0
61757: ST_TO_ADDR
// InitHc_All ( ) ;
61758: CALL_OW 584
// InitVc ;
61762: CALL_OW 20
// if mastodonts then
61766: LD_VAR 0 6
61770: IFFALSE 61837
// for i = 1 to mastodonts do
61772: LD_ADDR_VAR 0 11
61776: PUSH
61777: DOUBLE
61778: LD_INT 1
61780: DEC
61781: ST_TO_ADDR
61782: LD_VAR 0 6
61786: PUSH
61787: FOR_TO
61788: IFFALSE 61835
// begin vc_chassis := 31 ;
61790: LD_ADDR_OWVAR 37
61794: PUSH
61795: LD_INT 31
61797: ST_TO_ADDR
// vc_control := control_rider ;
61798: LD_ADDR_OWVAR 38
61802: PUSH
61803: LD_INT 4
61805: ST_TO_ADDR
// animal := CreateVehicle ;
61806: LD_ADDR_VAR 0 12
61810: PUSH
61811: CALL_OW 45
61815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61816: LD_VAR 0 12
61820: PPUSH
61821: LD_VAR 0 8
61825: PPUSH
61826: LD_INT 0
61828: PPUSH
61829: CALL 63965 0 3
// end ;
61833: GO 61787
61835: POP
61836: POP
// if horses then
61837: LD_VAR 0 5
61841: IFFALSE 61908
// for i = 1 to horses do
61843: LD_ADDR_VAR 0 11
61847: PUSH
61848: DOUBLE
61849: LD_INT 1
61851: DEC
61852: ST_TO_ADDR
61853: LD_VAR 0 5
61857: PUSH
61858: FOR_TO
61859: IFFALSE 61906
// begin hc_class := 21 ;
61861: LD_ADDR_OWVAR 28
61865: PUSH
61866: LD_INT 21
61868: ST_TO_ADDR
// hc_gallery :=  ;
61869: LD_ADDR_OWVAR 33
61873: PUSH
61874: LD_STRING 
61876: ST_TO_ADDR
// animal := CreateHuman ;
61877: LD_ADDR_VAR 0 12
61881: PUSH
61882: CALL_OW 44
61886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61887: LD_VAR 0 12
61891: PPUSH
61892: LD_VAR 0 8
61896: PPUSH
61897: LD_INT 0
61899: PPUSH
61900: CALL 63965 0 3
// end ;
61904: GO 61858
61906: POP
61907: POP
// if birds then
61908: LD_VAR 0 1
61912: IFFALSE 61979
// for i = 1 to birds do
61914: LD_ADDR_VAR 0 11
61918: PUSH
61919: DOUBLE
61920: LD_INT 1
61922: DEC
61923: ST_TO_ADDR
61924: LD_VAR 0 1
61928: PUSH
61929: FOR_TO
61930: IFFALSE 61977
// begin hc_class := 18 ;
61932: LD_ADDR_OWVAR 28
61936: PUSH
61937: LD_INT 18
61939: ST_TO_ADDR
// hc_gallery =  ;
61940: LD_ADDR_OWVAR 33
61944: PUSH
61945: LD_STRING 
61947: ST_TO_ADDR
// animal := CreateHuman ;
61948: LD_ADDR_VAR 0 12
61952: PUSH
61953: CALL_OW 44
61957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61958: LD_VAR 0 12
61962: PPUSH
61963: LD_VAR 0 8
61967: PPUSH
61968: LD_INT 0
61970: PPUSH
61971: CALL 63965 0 3
// end ;
61975: GO 61929
61977: POP
61978: POP
// if tigers then
61979: LD_VAR 0 2
61983: IFFALSE 62067
// for i = 1 to tigers do
61985: LD_ADDR_VAR 0 11
61989: PUSH
61990: DOUBLE
61991: LD_INT 1
61993: DEC
61994: ST_TO_ADDR
61995: LD_VAR 0 2
61999: PUSH
62000: FOR_TO
62001: IFFALSE 62065
// begin hc_class = class_tiger ;
62003: LD_ADDR_OWVAR 28
62007: PUSH
62008: LD_INT 14
62010: ST_TO_ADDR
// hc_gallery =  ;
62011: LD_ADDR_OWVAR 33
62015: PUSH
62016: LD_STRING 
62018: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62019: LD_ADDR_OWVAR 35
62023: PUSH
62024: LD_INT 7
62026: NEG
62027: PPUSH
62028: LD_INT 7
62030: PPUSH
62031: CALL_OW 12
62035: ST_TO_ADDR
// animal := CreateHuman ;
62036: LD_ADDR_VAR 0 12
62040: PUSH
62041: CALL_OW 44
62045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62046: LD_VAR 0 12
62050: PPUSH
62051: LD_VAR 0 8
62055: PPUSH
62056: LD_INT 0
62058: PPUSH
62059: CALL 63965 0 3
// end ;
62063: GO 62000
62065: POP
62066: POP
// if apemans then
62067: LD_VAR 0 3
62071: IFFALSE 62194
// for i = 1 to apemans do
62073: LD_ADDR_VAR 0 11
62077: PUSH
62078: DOUBLE
62079: LD_INT 1
62081: DEC
62082: ST_TO_ADDR
62083: LD_VAR 0 3
62087: PUSH
62088: FOR_TO
62089: IFFALSE 62192
// begin hc_class = class_apeman ;
62091: LD_ADDR_OWVAR 28
62095: PUSH
62096: LD_INT 12
62098: ST_TO_ADDR
// hc_gallery =  ;
62099: LD_ADDR_OWVAR 33
62103: PUSH
62104: LD_STRING 
62106: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62107: LD_ADDR_OWVAR 35
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PPUSH
62116: LD_INT 2
62118: PPUSH
62119: CALL_OW 12
62123: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62124: LD_ADDR_OWVAR 31
62128: PUSH
62129: LD_INT 1
62131: PPUSH
62132: LD_INT 3
62134: PPUSH
62135: CALL_OW 12
62139: PUSH
62140: LD_INT 1
62142: PPUSH
62143: LD_INT 3
62145: PPUSH
62146: CALL_OW 12
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// animal := CreateHuman ;
62163: LD_ADDR_VAR 0 12
62167: PUSH
62168: CALL_OW 44
62172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62173: LD_VAR 0 12
62177: PPUSH
62178: LD_VAR 0 8
62182: PPUSH
62183: LD_INT 0
62185: PPUSH
62186: CALL 63965 0 3
// end ;
62190: GO 62088
62192: POP
62193: POP
// if enchidnas then
62194: LD_VAR 0 4
62198: IFFALSE 62265
// for i = 1 to enchidnas do
62200: LD_ADDR_VAR 0 11
62204: PUSH
62205: DOUBLE
62206: LD_INT 1
62208: DEC
62209: ST_TO_ADDR
62210: LD_VAR 0 4
62214: PUSH
62215: FOR_TO
62216: IFFALSE 62263
// begin hc_class = 13 ;
62218: LD_ADDR_OWVAR 28
62222: PUSH
62223: LD_INT 13
62225: ST_TO_ADDR
// hc_gallery =  ;
62226: LD_ADDR_OWVAR 33
62230: PUSH
62231: LD_STRING 
62233: ST_TO_ADDR
// animal := CreateHuman ;
62234: LD_ADDR_VAR 0 12
62238: PUSH
62239: CALL_OW 44
62243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62244: LD_VAR 0 12
62248: PPUSH
62249: LD_VAR 0 8
62253: PPUSH
62254: LD_INT 0
62256: PPUSH
62257: CALL 63965 0 3
// end ;
62261: GO 62215
62263: POP
62264: POP
// if fishes then
62265: LD_VAR 0 7
62269: IFFALSE 62336
// for i = 1 to fishes do
62271: LD_ADDR_VAR 0 11
62275: PUSH
62276: DOUBLE
62277: LD_INT 1
62279: DEC
62280: ST_TO_ADDR
62281: LD_VAR 0 7
62285: PUSH
62286: FOR_TO
62287: IFFALSE 62334
// begin hc_class = 20 ;
62289: LD_ADDR_OWVAR 28
62293: PUSH
62294: LD_INT 20
62296: ST_TO_ADDR
// hc_gallery =  ;
62297: LD_ADDR_OWVAR 33
62301: PUSH
62302: LD_STRING 
62304: ST_TO_ADDR
// animal := CreateHuman ;
62305: LD_ADDR_VAR 0 12
62309: PUSH
62310: CALL_OW 44
62314: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62315: LD_VAR 0 12
62319: PPUSH
62320: LD_VAR 0 9
62324: PPUSH
62325: LD_INT 0
62327: PPUSH
62328: CALL 63965 0 3
// end ;
62332: GO 62286
62334: POP
62335: POP
// end ;
62336: LD_VAR 0 10
62340: RET
// export function WantHeal ( sci , unit ) ; begin
62341: LD_INT 0
62343: PPUSH
// if GetTaskList ( sci ) > 0 then
62344: LD_VAR 0 1
62348: PPUSH
62349: CALL_OW 437
62353: PUSH
62354: LD_INT 0
62356: GREATER
62357: IFFALSE 62427
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62359: LD_VAR 0 1
62363: PPUSH
62364: CALL_OW 437
62368: PUSH
62369: LD_INT 1
62371: ARRAY
62372: PUSH
62373: LD_INT 1
62375: ARRAY
62376: PUSH
62377: LD_STRING l
62379: EQUAL
62380: PUSH
62381: LD_VAR 0 1
62385: PPUSH
62386: CALL_OW 437
62390: PUSH
62391: LD_INT 1
62393: ARRAY
62394: PUSH
62395: LD_INT 4
62397: ARRAY
62398: PUSH
62399: LD_VAR 0 2
62403: EQUAL
62404: AND
62405: IFFALSE 62417
// result := true else
62407: LD_ADDR_VAR 0 3
62411: PUSH
62412: LD_INT 1
62414: ST_TO_ADDR
62415: GO 62425
// result := false ;
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: LD_INT 0
62424: ST_TO_ADDR
// end else
62425: GO 62435
// result := false ;
62427: LD_ADDR_VAR 0 3
62431: PUSH
62432: LD_INT 0
62434: ST_TO_ADDR
// end ;
62435: LD_VAR 0 3
62439: RET
// export function HealTarget ( sci ) ; begin
62440: LD_INT 0
62442: PPUSH
// if not sci then
62443: LD_VAR 0 1
62447: NOT
62448: IFFALSE 62452
// exit ;
62450: GO 62517
// result := 0 ;
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_INT 0
62459: ST_TO_ADDR
// if GetTaskList ( sci ) then
62460: LD_VAR 0 1
62464: PPUSH
62465: CALL_OW 437
62469: IFFALSE 62517
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 437
62480: PUSH
62481: LD_INT 1
62483: ARRAY
62484: PUSH
62485: LD_INT 1
62487: ARRAY
62488: PUSH
62489: LD_STRING l
62491: EQUAL
62492: IFFALSE 62517
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62494: LD_ADDR_VAR 0 2
62498: PUSH
62499: LD_VAR 0 1
62503: PPUSH
62504: CALL_OW 437
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PUSH
62513: LD_INT 4
62515: ARRAY
62516: ST_TO_ADDR
// end ;
62517: LD_VAR 0 2
62521: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62522: LD_INT 0
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
// if not base_units then
62528: LD_VAR 0 1
62532: NOT
62533: IFFALSE 62537
// exit ;
62535: GO 62624
// result := false ;
62537: LD_ADDR_VAR 0 2
62541: PUSH
62542: LD_INT 0
62544: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62545: LD_ADDR_VAR 0 5
62549: PUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: LD_INT 21
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PPUSH
62565: CALL_OW 72
62569: ST_TO_ADDR
// if not tmp then
62570: LD_VAR 0 5
62574: NOT
62575: IFFALSE 62579
// exit ;
62577: GO 62624
// for i in tmp do
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: LD_VAR 0 5
62588: PUSH
62589: FOR_IN
62590: IFFALSE 62622
// begin result := EnemyInRange ( i , 22 ) ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_VAR 0 3
62601: PPUSH
62602: LD_INT 22
62604: PPUSH
62605: CALL 60211 0 2
62609: ST_TO_ADDR
// if result then
62610: LD_VAR 0 2
62614: IFFALSE 62620
// exit ;
62616: POP
62617: POP
62618: GO 62624
// end ;
62620: GO 62589
62622: POP
62623: POP
// end ;
62624: LD_VAR 0 2
62628: RET
// export function FilterByTag ( units , tag ) ; begin
62629: LD_INT 0
62631: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62632: LD_ADDR_VAR 0 3
62636: PUSH
62637: LD_VAR 0 1
62641: PPUSH
62642: LD_INT 120
62644: PUSH
62645: LD_VAR 0 2
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PPUSH
62654: CALL_OW 72
62658: ST_TO_ADDR
// end ;
62659: LD_VAR 0 3
62663: RET
// export function IsDriver ( un ) ; begin
62664: LD_INT 0
62666: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62667: LD_ADDR_VAR 0 2
62671: PUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 55
62679: PUSH
62680: EMPTY
62681: LIST
62682: PPUSH
62683: CALL_OW 69
62687: IN
62688: ST_TO_ADDR
// end ;
62689: LD_VAR 0 2
62693: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62694: LD_INT 0
62696: PPUSH
62697: PPUSH
// list := [ ] ;
62698: LD_ADDR_VAR 0 5
62702: PUSH
62703: EMPTY
62704: ST_TO_ADDR
// case d of 0 :
62705: LD_VAR 0 3
62709: PUSH
62710: LD_INT 0
62712: DOUBLE
62713: EQUAL
62714: IFTRUE 62718
62716: GO 62851
62718: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62719: LD_ADDR_VAR 0 5
62723: PUSH
62724: LD_VAR 0 1
62728: PUSH
62729: LD_INT 4
62731: MINUS
62732: PUSH
62733: LD_VAR 0 2
62737: PUSH
62738: LD_INT 4
62740: MINUS
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: PUSH
62750: LD_VAR 0 1
62754: PUSH
62755: LD_INT 3
62757: MINUS
62758: PUSH
62759: LD_VAR 0 2
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: PUSH
62772: LD_VAR 0 1
62776: PUSH
62777: LD_INT 4
62779: PLUS
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 4
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: LD_VAR 0 1
62798: PUSH
62799: LD_INT 3
62801: PLUS
62802: PUSH
62803: LD_VAR 0 2
62807: PUSH
62808: LD_INT 3
62810: PLUS
62811: PUSH
62812: LD_INT 5
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: LD_VAR 0 1
62824: PUSH
62825: LD_VAR 0 2
62829: PUSH
62830: LD_INT 4
62832: PLUS
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// end ; 1 :
62849: GO 63549
62851: LD_INT 1
62853: DOUBLE
62854: EQUAL
62855: IFTRUE 62859
62857: GO 62992
62859: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62860: LD_ADDR_VAR 0 5
62864: PUSH
62865: LD_VAR 0 1
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 4
62877: MINUS
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: PUSH
62887: LD_VAR 0 1
62891: PUSH
62892: LD_INT 3
62894: MINUS
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_INT 3
62903: MINUS
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: LD_VAR 0 1
62917: PUSH
62918: LD_INT 4
62920: MINUS
62921: PUSH
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_VAR 0 2
62944: PUSH
62945: LD_INT 3
62947: PLUS
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: PUSH
62957: LD_VAR 0 1
62961: PUSH
62962: LD_INT 4
62964: PLUS
62965: PUSH
62966: LD_VAR 0 2
62970: PUSH
62971: LD_INT 4
62973: PLUS
62974: PUSH
62975: LD_INT 5
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: ST_TO_ADDR
// end ; 2 :
62990: GO 63549
62992: LD_INT 2
62994: DOUBLE
62995: EQUAL
62996: IFTRUE 63000
62998: GO 63129
63000: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63001: LD_ADDR_VAR 0 5
63005: PUSH
63006: LD_VAR 0 1
63010: PUSH
63011: LD_VAR 0 2
63015: PUSH
63016: LD_INT 3
63018: MINUS
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: PUSH
63028: LD_VAR 0 1
63032: PUSH
63033: LD_INT 4
63035: PLUS
63036: PUSH
63037: LD_VAR 0 2
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 1
63054: PUSH
63055: LD_VAR 0 2
63059: PUSH
63060: LD_INT 4
63062: PLUS
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: PUSH
63072: LD_VAR 0 1
63076: PUSH
63077: LD_INT 3
63079: MINUS
63080: PUSH
63081: LD_VAR 0 2
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: PUSH
63094: LD_VAR 0 1
63098: PUSH
63099: LD_INT 4
63101: MINUS
63102: PUSH
63103: LD_VAR 0 2
63107: PUSH
63108: LD_INT 4
63110: MINUS
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: ST_TO_ADDR
// end ; 3 :
63127: GO 63549
63129: LD_INT 3
63131: DOUBLE
63132: EQUAL
63133: IFTRUE 63137
63135: GO 63270
63137: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63138: LD_ADDR_VAR 0 5
63142: PUSH
63143: LD_VAR 0 1
63147: PUSH
63148: LD_INT 3
63150: PLUS
63151: PUSH
63152: LD_VAR 0 2
63156: PUSH
63157: LD_INT 4
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: PUSH
63165: LD_VAR 0 1
63169: PUSH
63170: LD_INT 4
63172: PLUS
63173: PUSH
63174: LD_VAR 0 2
63178: PUSH
63179: LD_INT 4
63181: PLUS
63182: PUSH
63183: LD_INT 5
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: PUSH
63191: LD_VAR 0 1
63195: PUSH
63196: LD_INT 4
63198: MINUS
63199: PUSH
63200: LD_VAR 0 2
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: PUSH
63213: LD_VAR 0 1
63217: PUSH
63218: LD_VAR 0 2
63222: PUSH
63223: LD_INT 4
63225: MINUS
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: LD_INT 3
63242: MINUS
63243: PUSH
63244: LD_VAR 0 2
63248: PUSH
63249: LD_INT 3
63251: MINUS
63252: PUSH
63253: LD_INT 2
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: ST_TO_ADDR
// end ; 4 :
63268: GO 63549
63270: LD_INT 4
63272: DOUBLE
63273: EQUAL
63274: IFTRUE 63278
63276: GO 63411
63278: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63279: LD_ADDR_VAR 0 5
63283: PUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_VAR 0 2
63293: PUSH
63294: LD_INT 4
63296: PLUS
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: LD_INT 3
63313: PLUS
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 3
63322: PLUS
63323: PUSH
63324: LD_INT 5
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: PUSH
63332: LD_VAR 0 1
63336: PUSH
63337: LD_INT 4
63339: PLUS
63340: PUSH
63341: LD_VAR 0 2
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_INT 3
63366: MINUS
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: PUSH
63376: LD_VAR 0 1
63380: PUSH
63381: LD_INT 4
63383: MINUS
63384: PUSH
63385: LD_VAR 0 2
63389: PUSH
63390: LD_INT 4
63392: MINUS
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// end ; 5 :
63409: GO 63549
63411: LD_INT 5
63413: DOUBLE
63414: EQUAL
63415: IFTRUE 63419
63417: GO 63548
63419: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63420: LD_ADDR_VAR 0 5
63424: PUSH
63425: LD_VAR 0 1
63429: PUSH
63430: LD_INT 4
63432: MINUS
63433: PUSH
63434: LD_VAR 0 2
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_INT 4
63459: MINUS
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_VAR 0 1
63473: PUSH
63474: LD_INT 4
63476: PLUS
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: LD_INT 4
63485: PLUS
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: PUSH
63495: LD_VAR 0 1
63499: PUSH
63500: LD_INT 3
63502: PLUS
63503: PUSH
63504: LD_VAR 0 2
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: LD_VAR 0 1
63521: PUSH
63522: LD_VAR 0 2
63526: PUSH
63527: LD_INT 3
63529: PLUS
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: ST_TO_ADDR
// end ; end ;
63546: GO 63549
63548: POP
// result := list ;
63549: LD_ADDR_VAR 0 4
63553: PUSH
63554: LD_VAR 0 5
63558: ST_TO_ADDR
// end ;
63559: LD_VAR 0 4
63563: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63564: LD_INT 0
63566: PPUSH
63567: PPUSH
63568: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63569: LD_VAR 0 1
63573: NOT
63574: PUSH
63575: LD_VAR 0 2
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 3
63588: PUSH
63589: LD_INT 4
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: IN
63598: NOT
63599: OR
63600: IFFALSE 63604
// exit ;
63602: GO 63687
// tmp := [ ] ;
63604: LD_ADDR_VAR 0 5
63608: PUSH
63609: EMPTY
63610: ST_TO_ADDR
// for i in units do
63611: LD_ADDR_VAR 0 4
63615: PUSH
63616: LD_VAR 0 1
63620: PUSH
63621: FOR_IN
63622: IFFALSE 63656
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63624: LD_ADDR_VAR 0 5
63628: PUSH
63629: LD_VAR 0 5
63633: PPUSH
63634: LD_VAR 0 4
63638: PPUSH
63639: LD_VAR 0 2
63643: PPUSH
63644: CALL_OW 259
63648: PPUSH
63649: CALL 65060 0 2
63653: ST_TO_ADDR
63654: GO 63621
63656: POP
63657: POP
// if not tmp then
63658: LD_VAR 0 5
63662: NOT
63663: IFFALSE 63667
// exit ;
63665: GO 63687
// result := SortListByListDesc ( units , tmp ) ;
63667: LD_ADDR_VAR 0 3
63671: PUSH
63672: LD_VAR 0 1
63676: PPUSH
63677: LD_VAR 0 5
63681: PPUSH
63682: CALL_OW 77
63686: ST_TO_ADDR
// end ;
63687: LD_VAR 0 3
63691: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
63696: PPUSH
// result := false ;
63697: LD_ADDR_VAR 0 3
63701: PUSH
63702: LD_INT 0
63704: ST_TO_ADDR
// if not building then
63705: LD_VAR 0 2
63709: NOT
63710: IFFALSE 63714
// exit ;
63712: GO 63852
// x := GetX ( building ) ;
63714: LD_ADDR_VAR 0 4
63718: PUSH
63719: LD_VAR 0 2
63723: PPUSH
63724: CALL_OW 250
63728: ST_TO_ADDR
// y := GetY ( building ) ;
63729: LD_ADDR_VAR 0 5
63733: PUSH
63734: LD_VAR 0 2
63738: PPUSH
63739: CALL_OW 251
63743: ST_TO_ADDR
// if not x or not y then
63744: LD_VAR 0 4
63748: NOT
63749: PUSH
63750: LD_VAR 0 5
63754: NOT
63755: OR
63756: IFFALSE 63760
// exit ;
63758: GO 63852
// if GetTaskList ( unit ) then
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 437
63769: IFFALSE 63852
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63771: LD_STRING e
63773: PUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: CALL_OW 437
63783: PUSH
63784: LD_INT 1
63786: ARRAY
63787: PUSH
63788: LD_INT 1
63790: ARRAY
63791: EQUAL
63792: PUSH
63793: LD_VAR 0 4
63797: PUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: CALL_OW 437
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PUSH
63812: LD_INT 2
63814: ARRAY
63815: EQUAL
63816: AND
63817: PUSH
63818: LD_VAR 0 5
63822: PUSH
63823: LD_VAR 0 1
63827: PPUSH
63828: CALL_OW 437
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PUSH
63837: LD_INT 3
63839: ARRAY
63840: EQUAL
63841: AND
63842: IFFALSE 63852
// result := true end ;
63844: LD_ADDR_VAR 0 3
63848: PUSH
63849: LD_INT 1
63851: ST_TO_ADDR
// end ;
63852: LD_VAR 0 3
63856: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63857: LD_INT 0
63859: PPUSH
// result := false ;
63860: LD_ADDR_VAR 0 4
63864: PUSH
63865: LD_INT 0
63867: ST_TO_ADDR
// if GetTaskList ( unit ) then
63868: LD_VAR 0 1
63872: PPUSH
63873: CALL_OW 437
63877: IFFALSE 63960
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63879: LD_STRING M
63881: PUSH
63882: LD_VAR 0 1
63886: PPUSH
63887: CALL_OW 437
63891: PUSH
63892: LD_INT 1
63894: ARRAY
63895: PUSH
63896: LD_INT 1
63898: ARRAY
63899: EQUAL
63900: PUSH
63901: LD_VAR 0 2
63905: PUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: CALL_OW 437
63915: PUSH
63916: LD_INT 1
63918: ARRAY
63919: PUSH
63920: LD_INT 2
63922: ARRAY
63923: EQUAL
63924: AND
63925: PUSH
63926: LD_VAR 0 3
63930: PUSH
63931: LD_VAR 0 1
63935: PPUSH
63936: CALL_OW 437
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: PUSH
63945: LD_INT 3
63947: ARRAY
63948: EQUAL
63949: AND
63950: IFFALSE 63960
// result := true ;
63952: LD_ADDR_VAR 0 4
63956: PUSH
63957: LD_INT 1
63959: ST_TO_ADDR
// end ; end ;
63960: LD_VAR 0 4
63964: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63965: LD_INT 0
63967: PPUSH
63968: PPUSH
63969: PPUSH
63970: PPUSH
// if not unit or not area then
63971: LD_VAR 0 1
63975: NOT
63976: PUSH
63977: LD_VAR 0 2
63981: NOT
63982: OR
63983: IFFALSE 63987
// exit ;
63985: GO 64163
// tmp := AreaToList ( area , i ) ;
63987: LD_ADDR_VAR 0 6
63991: PUSH
63992: LD_VAR 0 2
63996: PPUSH
63997: LD_VAR 0 5
64001: PPUSH
64002: CALL_OW 517
64006: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64007: LD_ADDR_VAR 0 5
64011: PUSH
64012: DOUBLE
64013: LD_INT 1
64015: DEC
64016: ST_TO_ADDR
64017: LD_VAR 0 6
64021: PUSH
64022: LD_INT 1
64024: ARRAY
64025: PUSH
64026: FOR_TO
64027: IFFALSE 64161
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64029: LD_ADDR_VAR 0 7
64033: PUSH
64034: LD_VAR 0 6
64038: PUSH
64039: LD_INT 1
64041: ARRAY
64042: PUSH
64043: LD_VAR 0 5
64047: ARRAY
64048: PUSH
64049: LD_VAR 0 6
64053: PUSH
64054: LD_INT 2
64056: ARRAY
64057: PUSH
64058: LD_VAR 0 5
64062: ARRAY
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64068: LD_INT 92
64070: PUSH
64071: LD_VAR 0 7
64075: PUSH
64076: LD_INT 1
64078: ARRAY
64079: PUSH
64080: LD_VAR 0 7
64084: PUSH
64085: LD_INT 2
64087: ARRAY
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: PPUSH
64098: CALL_OW 69
64102: PUSH
64103: LD_INT 0
64105: EQUAL
64106: IFFALSE 64159
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64108: LD_VAR 0 1
64112: PPUSH
64113: LD_VAR 0 7
64117: PUSH
64118: LD_INT 1
64120: ARRAY
64121: PPUSH
64122: LD_VAR 0 7
64126: PUSH
64127: LD_INT 2
64129: ARRAY
64130: PPUSH
64131: LD_VAR 0 3
64135: PPUSH
64136: CALL_OW 48
// result := IsPlaced ( unit ) ;
64140: LD_ADDR_VAR 0 4
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: CALL_OW 305
64154: ST_TO_ADDR
// exit ;
64155: POP
64156: POP
64157: GO 64163
// end ; end ;
64159: GO 64026
64161: POP
64162: POP
// end ;
64163: LD_VAR 0 4
64167: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
64172: PPUSH
// if not side or side > 8 then
64173: LD_VAR 0 1
64177: NOT
64178: PUSH
64179: LD_VAR 0 1
64183: PUSH
64184: LD_INT 8
64186: GREATER
64187: OR
64188: IFFALSE 64192
// exit ;
64190: GO 64379
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64192: LD_ADDR_VAR 0 4
64196: PUSH
64197: LD_INT 22
64199: PUSH
64200: LD_VAR 0 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 21
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PPUSH
64223: CALL_OW 69
64227: ST_TO_ADDR
// if not tmp then
64228: LD_VAR 0 4
64232: NOT
64233: IFFALSE 64237
// exit ;
64235: GO 64379
// enable_addtolog := true ;
64237: LD_ADDR_OWVAR 81
64241: PUSH
64242: LD_INT 1
64244: ST_TO_ADDR
// AddToLog ( [ ) ;
64245: LD_STRING [
64247: PPUSH
64248: CALL_OW 561
// for i in tmp do
64252: LD_ADDR_VAR 0 3
64256: PUSH
64257: LD_VAR 0 4
64261: PUSH
64262: FOR_IN
64263: IFFALSE 64370
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64265: LD_STRING [
64267: PUSH
64268: LD_VAR 0 3
64272: PPUSH
64273: CALL_OW 266
64277: STR
64278: PUSH
64279: LD_STRING , 
64281: STR
64282: PUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: CALL_OW 250
64292: STR
64293: PUSH
64294: LD_STRING , 
64296: STR
64297: PUSH
64298: LD_VAR 0 3
64302: PPUSH
64303: CALL_OW 251
64307: STR
64308: PUSH
64309: LD_STRING , 
64311: STR
64312: PUSH
64313: LD_VAR 0 3
64317: PPUSH
64318: CALL_OW 254
64322: STR
64323: PUSH
64324: LD_STRING , 
64326: STR
64327: PUSH
64328: LD_VAR 0 3
64332: PPUSH
64333: LD_INT 1
64335: PPUSH
64336: CALL_OW 268
64340: STR
64341: PUSH
64342: LD_STRING , 
64344: STR
64345: PUSH
64346: LD_VAR 0 3
64350: PPUSH
64351: LD_INT 2
64353: PPUSH
64354: CALL_OW 268
64358: STR
64359: PUSH
64360: LD_STRING ],
64362: STR
64363: PPUSH
64364: CALL_OW 561
// end ;
64368: GO 64262
64370: POP
64371: POP
// AddToLog ( ]; ) ;
64372: LD_STRING ];
64374: PPUSH
64375: CALL_OW 561
// end ;
64379: LD_VAR 0 2
64383: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64384: LD_INT 0
64386: PPUSH
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
// if not area or not rate or not max then
64391: LD_VAR 0 1
64395: NOT
64396: PUSH
64397: LD_VAR 0 2
64401: NOT
64402: OR
64403: PUSH
64404: LD_VAR 0 4
64408: NOT
64409: OR
64410: IFFALSE 64414
// exit ;
64412: GO 64603
// while 1 do
64414: LD_INT 1
64416: IFFALSE 64603
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64418: LD_ADDR_VAR 0 9
64422: PUSH
64423: LD_VAR 0 1
64427: PPUSH
64428: LD_INT 1
64430: PPUSH
64431: CALL_OW 287
64435: PUSH
64436: LD_INT 10
64438: MUL
64439: ST_TO_ADDR
// r := rate / 10 ;
64440: LD_ADDR_VAR 0 7
64444: PUSH
64445: LD_VAR 0 2
64449: PUSH
64450: LD_INT 10
64452: DIVREAL
64453: ST_TO_ADDR
// time := 1 1$00 ;
64454: LD_ADDR_VAR 0 8
64458: PUSH
64459: LD_INT 2100
64461: ST_TO_ADDR
// if amount < min then
64462: LD_VAR 0 9
64466: PUSH
64467: LD_VAR 0 3
64471: LESS
64472: IFFALSE 64490
// r := r * 2 else
64474: LD_ADDR_VAR 0 7
64478: PUSH
64479: LD_VAR 0 7
64483: PUSH
64484: LD_INT 2
64486: MUL
64487: ST_TO_ADDR
64488: GO 64516
// if amount > max then
64490: LD_VAR 0 9
64494: PUSH
64495: LD_VAR 0 4
64499: GREATER
64500: IFFALSE 64516
// r := r / 2 ;
64502: LD_ADDR_VAR 0 7
64506: PUSH
64507: LD_VAR 0 7
64511: PUSH
64512: LD_INT 2
64514: DIVREAL
64515: ST_TO_ADDR
// time := time / r ;
64516: LD_ADDR_VAR 0 8
64520: PUSH
64521: LD_VAR 0 8
64525: PUSH
64526: LD_VAR 0 7
64530: DIVREAL
64531: ST_TO_ADDR
// if time < 0 then
64532: LD_VAR 0 8
64536: PUSH
64537: LD_INT 0
64539: LESS
64540: IFFALSE 64557
// time := time * - 1 ;
64542: LD_ADDR_VAR 0 8
64546: PUSH
64547: LD_VAR 0 8
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: MUL
64556: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64557: LD_VAR 0 8
64561: PUSH
64562: LD_INT 35
64564: PPUSH
64565: LD_INT 875
64567: PPUSH
64568: CALL_OW 12
64572: PLUS
64573: PPUSH
64574: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64578: LD_INT 1
64580: PPUSH
64581: LD_INT 5
64583: PPUSH
64584: CALL_OW 12
64588: PPUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_INT 1
64596: PPUSH
64597: CALL_OW 55
// end ;
64601: GO 64414
// end ;
64603: LD_VAR 0 5
64607: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
64612: PPUSH
64613: PPUSH
64614: PPUSH
64615: PPUSH
64616: PPUSH
64617: PPUSH
// if not turrets or not factories then
64618: LD_VAR 0 1
64622: NOT
64623: PUSH
64624: LD_VAR 0 2
64628: NOT
64629: OR
64630: IFFALSE 64634
// exit ;
64632: GO 64941
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64634: LD_ADDR_VAR 0 10
64638: PUSH
64639: LD_INT 5
64641: PUSH
64642: LD_INT 6
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: LD_INT 4
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 5
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 24
64676: PUSH
64677: LD_INT 25
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 23
64686: PUSH
64687: LD_INT 27
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 42
64700: PUSH
64701: LD_INT 43
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 44
64710: PUSH
64711: LD_INT 46
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 45
64720: PUSH
64721: LD_INT 47
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: ST_TO_ADDR
// result := [ ] ;
64738: LD_ADDR_VAR 0 3
64742: PUSH
64743: EMPTY
64744: ST_TO_ADDR
// for i in turrets do
64745: LD_ADDR_VAR 0 4
64749: PUSH
64750: LD_VAR 0 1
64754: PUSH
64755: FOR_IN
64756: IFFALSE 64939
// begin nat := GetNation ( i ) ;
64758: LD_ADDR_VAR 0 7
64762: PUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: CALL_OW 248
64772: ST_TO_ADDR
// weapon := 0 ;
64773: LD_ADDR_VAR 0 8
64777: PUSH
64778: LD_INT 0
64780: ST_TO_ADDR
// if not nat then
64781: LD_VAR 0 7
64785: NOT
64786: IFFALSE 64790
// continue ;
64788: GO 64755
// for j in list [ nat ] do
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: LD_VAR 0 10
64799: PUSH
64800: LD_VAR 0 7
64804: ARRAY
64805: PUSH
64806: FOR_IN
64807: IFFALSE 64848
// if GetBWeapon ( i ) = j [ 1 ] then
64809: LD_VAR 0 4
64813: PPUSH
64814: CALL_OW 269
64818: PUSH
64819: LD_VAR 0 5
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: EQUAL
64828: IFFALSE 64846
// begin weapon := j [ 2 ] ;
64830: LD_ADDR_VAR 0 8
64834: PUSH
64835: LD_VAR 0 5
64839: PUSH
64840: LD_INT 2
64842: ARRAY
64843: ST_TO_ADDR
// break ;
64844: GO 64848
// end ;
64846: GO 64806
64848: POP
64849: POP
// if not weapon then
64850: LD_VAR 0 8
64854: NOT
64855: IFFALSE 64859
// continue ;
64857: GO 64755
// for k in factories do
64859: LD_ADDR_VAR 0 6
64863: PUSH
64864: LD_VAR 0 2
64868: PUSH
64869: FOR_IN
64870: IFFALSE 64935
// begin weapons := AvailableWeaponList ( k ) ;
64872: LD_ADDR_VAR 0 9
64876: PUSH
64877: LD_VAR 0 6
64881: PPUSH
64882: CALL_OW 478
64886: ST_TO_ADDR
// if not weapons then
64887: LD_VAR 0 9
64891: NOT
64892: IFFALSE 64896
// continue ;
64894: GO 64869
// if weapon in weapons then
64896: LD_VAR 0 8
64900: PUSH
64901: LD_VAR 0 9
64905: IN
64906: IFFALSE 64933
// begin result := [ i , weapon ] ;
64908: LD_ADDR_VAR 0 3
64912: PUSH
64913: LD_VAR 0 4
64917: PUSH
64918: LD_VAR 0 8
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// exit ;
64927: POP
64928: POP
64929: POP
64930: POP
64931: GO 64941
// end ; end ;
64933: GO 64869
64935: POP
64936: POP
// end ;
64937: GO 64755
64939: POP
64940: POP
// end ;
64941: LD_VAR 0 3
64945: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64946: LD_INT 0
64948: PPUSH
// if not side or side > 8 then
64949: LD_VAR 0 3
64953: NOT
64954: PUSH
64955: LD_VAR 0 3
64959: PUSH
64960: LD_INT 8
64962: GREATER
64963: OR
64964: IFFALSE 64968
// exit ;
64966: GO 65027
// if not range then
64968: LD_VAR 0 4
64972: NOT
64973: IFFALSE 64984
// range := - 12 ;
64975: LD_ADDR_VAR 0 4
64979: PUSH
64980: LD_INT 12
64982: NEG
64983: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 2
64993: PPUSH
64994: LD_VAR 0 3
64998: PPUSH
64999: LD_VAR 0 4
65003: PPUSH
65004: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65008: LD_VAR 0 1
65012: PPUSH
65013: LD_VAR 0 2
65017: PPUSH
65018: LD_VAR 0 3
65022: PPUSH
65023: CALL_OW 331
// end ;
65027: LD_VAR 0 5
65031: RET
// export function Video ( mode ) ; begin
65032: LD_INT 0
65034: PPUSH
// ingame_video = mode ;
65035: LD_ADDR_OWVAR 52
65039: PUSH
65040: LD_VAR 0 1
65044: ST_TO_ADDR
// interface_hidden = mode ;
65045: LD_ADDR_OWVAR 54
65049: PUSH
65050: LD_VAR 0 1
65054: ST_TO_ADDR
// end ;
65055: LD_VAR 0 2
65059: RET
// export function Join ( array , element ) ; begin
65060: LD_INT 0
65062: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65063: LD_ADDR_VAR 0 3
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: LD_VAR 0 1
65077: PUSH
65078: LD_INT 1
65080: PLUS
65081: PPUSH
65082: LD_VAR 0 2
65086: PPUSH
65087: CALL_OW 1
65091: ST_TO_ADDR
// end ;
65092: LD_VAR 0 3
65096: RET
// export function JoinUnion ( array , element ) ; begin
65097: LD_INT 0
65099: PPUSH
// result := array union element ;
65100: LD_ADDR_VAR 0 3
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_VAR 0 2
65114: UNION
65115: ST_TO_ADDR
// end ;
65116: LD_VAR 0 3
65120: RET
// export function GetBehemoths ( side ) ; begin
65121: LD_INT 0
65123: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65124: LD_ADDR_VAR 0 2
65128: PUSH
65129: LD_INT 22
65131: PUSH
65132: LD_VAR 0 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 31
65143: PUSH
65144: LD_INT 25
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PPUSH
65155: CALL_OW 69
65159: ST_TO_ADDR
// end ;
65160: LD_VAR 0 2
65164: RET
// export function Shuffle ( array ) ; var i , index ; begin
65165: LD_INT 0
65167: PPUSH
65168: PPUSH
65169: PPUSH
// result := [ ] ;
65170: LD_ADDR_VAR 0 2
65174: PUSH
65175: EMPTY
65176: ST_TO_ADDR
// if not array then
65177: LD_VAR 0 1
65181: NOT
65182: IFFALSE 65186
// exit ;
65184: GO 65285
// Randomize ;
65186: CALL_OW 10
// for i = array downto 1 do
65190: LD_ADDR_VAR 0 3
65194: PUSH
65195: DOUBLE
65196: LD_VAR 0 1
65200: INC
65201: ST_TO_ADDR
65202: LD_INT 1
65204: PUSH
65205: FOR_DOWNTO
65206: IFFALSE 65283
// begin index := rand ( 1 , array ) ;
65208: LD_ADDR_VAR 0 4
65212: PUSH
65213: LD_INT 1
65215: PPUSH
65216: LD_VAR 0 1
65220: PPUSH
65221: CALL_OW 12
65225: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65226: LD_ADDR_VAR 0 2
65230: PUSH
65231: LD_VAR 0 2
65235: PPUSH
65236: LD_VAR 0 2
65240: PUSH
65241: LD_INT 1
65243: PLUS
65244: PPUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_VAR 0 4
65254: ARRAY
65255: PPUSH
65256: CALL_OW 2
65260: ST_TO_ADDR
// array := Delete ( array , index ) ;
65261: LD_ADDR_VAR 0 1
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: LD_VAR 0 4
65275: PPUSH
65276: CALL_OW 3
65280: ST_TO_ADDR
// end ;
65281: GO 65205
65283: POP
65284: POP
// end ;
65285: LD_VAR 0 2
65289: RET
// export function GetBaseMaterials ( base ) ; begin
65290: LD_INT 0
65292: PPUSH
// result := [ 0 , 0 , 0 ] ;
65293: LD_ADDR_VAR 0 2
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: LIST
65311: ST_TO_ADDR
// if not base then
65312: LD_VAR 0 1
65316: NOT
65317: IFFALSE 65321
// exit ;
65319: GO 65370
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65321: LD_ADDR_VAR 0 2
65325: PUSH
65326: LD_VAR 0 1
65330: PPUSH
65331: LD_INT 1
65333: PPUSH
65334: CALL_OW 275
65338: PUSH
65339: LD_VAR 0 1
65343: PPUSH
65344: LD_INT 2
65346: PPUSH
65347: CALL_OW 275
65351: PUSH
65352: LD_VAR 0 1
65356: PPUSH
65357: LD_INT 3
65359: PPUSH
65360: CALL_OW 275
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// end ;
65370: LD_VAR 0 2
65374: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65375: LD_INT 0
65377: PPUSH
65378: PPUSH
// result := array ;
65379: LD_ADDR_VAR 0 3
65383: PUSH
65384: LD_VAR 0 1
65388: ST_TO_ADDR
// if size >= result then
65389: LD_VAR 0 2
65393: PUSH
65394: LD_VAR 0 3
65398: GREATEREQUAL
65399: IFFALSE 65403
// exit ;
65401: GO 65453
// if size then
65403: LD_VAR 0 2
65407: IFFALSE 65453
// for i := array downto size do
65409: LD_ADDR_VAR 0 4
65413: PUSH
65414: DOUBLE
65415: LD_VAR 0 1
65419: INC
65420: ST_TO_ADDR
65421: LD_VAR 0 2
65425: PUSH
65426: FOR_DOWNTO
65427: IFFALSE 65451
// result := Delete ( result , result ) ;
65429: LD_ADDR_VAR 0 3
65433: PUSH
65434: LD_VAR 0 3
65438: PPUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: CALL_OW 3
65448: ST_TO_ADDR
65449: GO 65426
65451: POP
65452: POP
// end ;
65453: LD_VAR 0 3
65457: RET
// export function ComExit ( unit ) ; var tmp ; begin
65458: LD_INT 0
65460: PPUSH
65461: PPUSH
// if not IsInUnit ( unit ) then
65462: LD_VAR 0 1
65466: PPUSH
65467: CALL_OW 310
65471: NOT
65472: IFFALSE 65476
// exit ;
65474: GO 65536
// tmp := IsInUnit ( unit ) ;
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: CALL_OW 310
65490: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65491: LD_VAR 0 3
65495: PPUSH
65496: CALL_OW 247
65500: PUSH
65501: LD_INT 2
65503: EQUAL
65504: IFFALSE 65517
// ComExitVehicle ( unit ) else
65506: LD_VAR 0 1
65510: PPUSH
65511: CALL_OW 121
65515: GO 65526
// ComExitBuilding ( unit ) ;
65517: LD_VAR 0 1
65521: PPUSH
65522: CALL_OW 122
// result := tmp ;
65526: LD_ADDR_VAR 0 2
65530: PUSH
65531: LD_VAR 0 3
65535: ST_TO_ADDR
// end ;
65536: LD_VAR 0 2
65540: RET
// export function ComExitAll ( units ) ; var i ; begin
65541: LD_INT 0
65543: PPUSH
65544: PPUSH
// if not units then
65545: LD_VAR 0 1
65549: NOT
65550: IFFALSE 65554
// exit ;
65552: GO 65580
// for i in units do
65554: LD_ADDR_VAR 0 3
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: FOR_IN
65565: IFFALSE 65578
// ComExit ( i ) ;
65567: LD_VAR 0 3
65571: PPUSH
65572: CALL 65458 0 1
65576: GO 65564
65578: POP
65579: POP
// end ;
65580: LD_VAR 0 2
65584: RET
// export function ResetHc ; begin
65585: LD_INT 0
65587: PPUSH
// InitHc ;
65588: CALL_OW 19
// hc_importance := 0 ;
65592: LD_ADDR_OWVAR 32
65596: PUSH
65597: LD_INT 0
65599: ST_TO_ADDR
// end ;
65600: LD_VAR 0 1
65604: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65605: LD_INT 0
65607: PPUSH
65608: PPUSH
65609: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65610: LD_ADDR_VAR 0 6
65614: PUSH
65615: LD_VAR 0 1
65619: PUSH
65620: LD_VAR 0 3
65624: PLUS
65625: PUSH
65626: LD_INT 2
65628: DIV
65629: ST_TO_ADDR
// if _x < 0 then
65630: LD_VAR 0 6
65634: PUSH
65635: LD_INT 0
65637: LESS
65638: IFFALSE 65655
// _x := _x * - 1 ;
65640: LD_ADDR_VAR 0 6
65644: PUSH
65645: LD_VAR 0 6
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: MUL
65654: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65655: LD_ADDR_VAR 0 7
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_VAR 0 4
65669: PLUS
65670: PUSH
65671: LD_INT 2
65673: DIV
65674: ST_TO_ADDR
// if _y < 0 then
65675: LD_VAR 0 7
65679: PUSH
65680: LD_INT 0
65682: LESS
65683: IFFALSE 65700
// _y := _y * - 1 ;
65685: LD_ADDR_VAR 0 7
65689: PUSH
65690: LD_VAR 0 7
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: MUL
65699: ST_TO_ADDR
// result := [ _x , _y ] ;
65700: LD_ADDR_VAR 0 5
65704: PUSH
65705: LD_VAR 0 6
65709: PUSH
65710: LD_VAR 0 7
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// end ;
65719: LD_VAR 0 5
65723: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65724: LD_INT 0
65726: PPUSH
65727: PPUSH
65728: PPUSH
65729: PPUSH
// task := GetTaskList ( unit ) ;
65730: LD_ADDR_VAR 0 7
65734: PUSH
65735: LD_VAR 0 1
65739: PPUSH
65740: CALL_OW 437
65744: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65745: LD_VAR 0 7
65749: NOT
65750: PUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_VAR 0 2
65760: PPUSH
65761: CALL_OW 308
65765: NOT
65766: AND
65767: IFFALSE 65771
// exit ;
65769: GO 65889
// if IsInArea ( unit , area ) then
65771: LD_VAR 0 1
65775: PPUSH
65776: LD_VAR 0 2
65780: PPUSH
65781: CALL_OW 308
65785: IFFALSE 65803
// begin ComMoveToArea ( unit , goAway ) ;
65787: LD_VAR 0 1
65791: PPUSH
65792: LD_VAR 0 3
65796: PPUSH
65797: CALL_OW 113
// exit ;
65801: GO 65889
// end ; if task [ 1 ] [ 1 ] <> M then
65803: LD_VAR 0 7
65807: PUSH
65808: LD_INT 1
65810: ARRAY
65811: PUSH
65812: LD_INT 1
65814: ARRAY
65815: PUSH
65816: LD_STRING M
65818: NONEQUAL
65819: IFFALSE 65823
// exit ;
65821: GO 65889
// x := task [ 1 ] [ 2 ] ;
65823: LD_ADDR_VAR 0 5
65827: PUSH
65828: LD_VAR 0 7
65832: PUSH
65833: LD_INT 1
65835: ARRAY
65836: PUSH
65837: LD_INT 2
65839: ARRAY
65840: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65841: LD_ADDR_VAR 0 6
65845: PUSH
65846: LD_VAR 0 7
65850: PUSH
65851: LD_INT 1
65853: ARRAY
65854: PUSH
65855: LD_INT 3
65857: ARRAY
65858: ST_TO_ADDR
// if InArea ( x , y , area ) then
65859: LD_VAR 0 5
65863: PPUSH
65864: LD_VAR 0 6
65868: PPUSH
65869: LD_VAR 0 2
65873: PPUSH
65874: CALL_OW 309
65878: IFFALSE 65889
// ComStop ( unit ) ;
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 141
// end ;
65889: LD_VAR 0 4
65893: RET
// export function Abs ( value ) ; begin
65894: LD_INT 0
65896: PPUSH
// result := value ;
65897: LD_ADDR_VAR 0 2
65901: PUSH
65902: LD_VAR 0 1
65906: ST_TO_ADDR
// if value < 0 then
65907: LD_VAR 0 1
65911: PUSH
65912: LD_INT 0
65914: LESS
65915: IFFALSE 65932
// result := value * - 1 ;
65917: LD_ADDR_VAR 0 2
65921: PUSH
65922: LD_VAR 0 1
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: MUL
65931: ST_TO_ADDR
// end ;
65932: LD_VAR 0 2
65936: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
65941: PPUSH
65942: PPUSH
65943: PPUSH
65944: PPUSH
65945: PPUSH
65946: PPUSH
// if not unit or not building then
65947: LD_VAR 0 1
65951: NOT
65952: PUSH
65953: LD_VAR 0 2
65957: NOT
65958: OR
65959: IFFALSE 65963
// exit ;
65961: GO 66189
// x := GetX ( building ) ;
65963: LD_ADDR_VAR 0 4
65967: PUSH
65968: LD_VAR 0 2
65972: PPUSH
65973: CALL_OW 250
65977: ST_TO_ADDR
// y := GetY ( building ) ;
65978: LD_ADDR_VAR 0 6
65982: PUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: CALL_OW 251
65992: ST_TO_ADDR
// d := GetDir ( building ) ;
65993: LD_ADDR_VAR 0 8
65997: PUSH
65998: LD_VAR 0 2
66002: PPUSH
66003: CALL_OW 254
66007: ST_TO_ADDR
// r := 4 ;
66008: LD_ADDR_VAR 0 9
66012: PUSH
66013: LD_INT 4
66015: ST_TO_ADDR
// for i := 1 to 5 do
66016: LD_ADDR_VAR 0 10
66020: PUSH
66021: DOUBLE
66022: LD_INT 1
66024: DEC
66025: ST_TO_ADDR
66026: LD_INT 5
66028: PUSH
66029: FOR_TO
66030: IFFALSE 66187
// begin _x := ShiftX ( x , d , r + i ) ;
66032: LD_ADDR_VAR 0 5
66036: PUSH
66037: LD_VAR 0 4
66041: PPUSH
66042: LD_VAR 0 8
66046: PPUSH
66047: LD_VAR 0 9
66051: PUSH
66052: LD_VAR 0 10
66056: PLUS
66057: PPUSH
66058: CALL_OW 272
66062: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66063: LD_ADDR_VAR 0 7
66067: PUSH
66068: LD_VAR 0 6
66072: PPUSH
66073: LD_VAR 0 8
66077: PPUSH
66078: LD_VAR 0 9
66082: PUSH
66083: LD_VAR 0 10
66087: PLUS
66088: PPUSH
66089: CALL_OW 273
66093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66094: LD_VAR 0 5
66098: PPUSH
66099: LD_VAR 0 7
66103: PPUSH
66104: CALL_OW 488
66108: PUSH
66109: LD_VAR 0 5
66113: PPUSH
66114: LD_VAR 0 7
66118: PPUSH
66119: CALL_OW 428
66123: PPUSH
66124: CALL_OW 247
66128: PUSH
66129: LD_INT 3
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: IN
66139: NOT
66140: AND
66141: IFFALSE 66185
// begin ComMoveXY ( unit , _x , _y ) ;
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_VAR 0 5
66152: PPUSH
66153: LD_VAR 0 7
66157: PPUSH
66158: CALL_OW 111
// result := [ _x , _y ] ;
66162: LD_ADDR_VAR 0 3
66166: PUSH
66167: LD_VAR 0 5
66171: PUSH
66172: LD_VAR 0 7
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// exit ;
66181: POP
66182: POP
66183: GO 66189
// end ; end ;
66185: GO 66029
66187: POP
66188: POP
// end ;
66189: LD_VAR 0 3
66193: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66194: LD_INT 0
66196: PPUSH
66197: PPUSH
66198: PPUSH
// result := 0 ;
66199: LD_ADDR_VAR 0 3
66203: PUSH
66204: LD_INT 0
66206: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66207: LD_VAR 0 1
66211: PUSH
66212: LD_INT 0
66214: LESS
66215: PUSH
66216: LD_VAR 0 1
66220: PUSH
66221: LD_INT 8
66223: GREATER
66224: OR
66225: PUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_INT 0
66233: LESS
66234: OR
66235: PUSH
66236: LD_VAR 0 2
66240: PUSH
66241: LD_INT 8
66243: GREATER
66244: OR
66245: IFFALSE 66249
// exit ;
66247: GO 66324
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_INT 22
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PPUSH
66266: CALL_OW 69
66270: PUSH
66271: FOR_IN
66272: IFFALSE 66322
// begin un := UnitShoot ( i ) ;
66274: LD_ADDR_VAR 0 5
66278: PUSH
66279: LD_VAR 0 4
66283: PPUSH
66284: CALL_OW 504
66288: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66289: LD_VAR 0 5
66293: PPUSH
66294: CALL_OW 255
66298: PUSH
66299: LD_VAR 0 1
66303: EQUAL
66304: IFFALSE 66320
// begin result := un ;
66306: LD_ADDR_VAR 0 3
66310: PUSH
66311: LD_VAR 0 5
66315: ST_TO_ADDR
// exit ;
66316: POP
66317: POP
66318: GO 66324
// end ; end ;
66320: GO 66271
66322: POP
66323: POP
// end ;
66324: LD_VAR 0 3
66328: RET
// export function GetCargoBay ( units ) ; begin
66329: LD_INT 0
66331: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66332: LD_ADDR_VAR 0 2
66336: PUSH
66337: LD_VAR 0 1
66341: PPUSH
66342: LD_INT 2
66344: PUSH
66345: LD_INT 34
66347: PUSH
66348: LD_INT 12
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 34
66357: PUSH
66358: LD_INT 51
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 34
66367: PUSH
66368: LD_INT 32
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 34
66377: PUSH
66378: LD_INT 89
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: PPUSH
66392: CALL_OW 72
66396: ST_TO_ADDR
// end ;
66397: LD_VAR 0 2
66401: RET
// export function Negate ( value ) ; begin
66402: LD_INT 0
66404: PPUSH
// result := not value ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_VAR 0 1
66414: NOT
66415: ST_TO_ADDR
// end ;
66416: LD_VAR 0 2
66420: RET
// export function Inc ( value ) ; begin
66421: LD_INT 0
66423: PPUSH
// result := value + 1 ;
66424: LD_ADDR_VAR 0 2
66428: PUSH
66429: LD_VAR 0 1
66433: PUSH
66434: LD_INT 1
66436: PLUS
66437: ST_TO_ADDR
// end ;
66438: LD_VAR 0 2
66442: RET
// export function Dec ( value ) ; begin
66443: LD_INT 0
66445: PPUSH
// result := value - 1 ;
66446: LD_ADDR_VAR 0 2
66450: PUSH
66451: LD_VAR 0 1
66455: PUSH
66456: LD_INT 1
66458: MINUS
66459: ST_TO_ADDR
// end ;
66460: LD_VAR 0 2
66464: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66465: LD_INT 0
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
66471: PPUSH
66472: PPUSH
66473: PPUSH
66474: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 2
66484: PPUSH
66485: CALL_OW 488
66489: NOT
66490: PUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_VAR 0 4
66500: PPUSH
66501: CALL_OW 488
66505: NOT
66506: OR
66507: IFFALSE 66520
// begin result := - 1 ;
66509: LD_ADDR_VAR 0 5
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: ST_TO_ADDR
// exit ;
66518: GO 66755
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66520: LD_ADDR_VAR 0 12
66524: PUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: LD_VAR 0 2
66534: PPUSH
66535: LD_VAR 0 3
66539: PPUSH
66540: LD_VAR 0 4
66544: PPUSH
66545: CALL 65605 0 4
66549: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66550: LD_ADDR_VAR 0 11
66554: PUSH
66555: LD_VAR 0 1
66559: PPUSH
66560: LD_VAR 0 2
66564: PPUSH
66565: LD_VAR 0 12
66569: PUSH
66570: LD_INT 1
66572: ARRAY
66573: PPUSH
66574: LD_VAR 0 12
66578: PUSH
66579: LD_INT 2
66581: ARRAY
66582: PPUSH
66583: CALL_OW 298
66587: ST_TO_ADDR
// distance := 9999 ;
66588: LD_ADDR_VAR 0 10
66592: PUSH
66593: LD_INT 9999
66595: ST_TO_ADDR
// for i := 0 to 5 do
66596: LD_ADDR_VAR 0 6
66600: PUSH
66601: DOUBLE
66602: LD_INT 0
66604: DEC
66605: ST_TO_ADDR
66606: LD_INT 5
66608: PUSH
66609: FOR_TO
66610: IFFALSE 66753
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66612: LD_ADDR_VAR 0 7
66616: PUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: LD_VAR 0 6
66626: PPUSH
66627: LD_VAR 0 11
66631: PPUSH
66632: CALL_OW 272
66636: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66637: LD_ADDR_VAR 0 8
66641: PUSH
66642: LD_VAR 0 2
66646: PPUSH
66647: LD_VAR 0 6
66651: PPUSH
66652: LD_VAR 0 11
66656: PPUSH
66657: CALL_OW 273
66661: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66662: LD_VAR 0 7
66666: PPUSH
66667: LD_VAR 0 8
66671: PPUSH
66672: CALL_OW 488
66676: NOT
66677: IFFALSE 66681
// continue ;
66679: GO 66609
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66681: LD_ADDR_VAR 0 9
66685: PUSH
66686: LD_VAR 0 12
66690: PUSH
66691: LD_INT 1
66693: ARRAY
66694: PPUSH
66695: LD_VAR 0 12
66699: PUSH
66700: LD_INT 2
66702: ARRAY
66703: PPUSH
66704: LD_VAR 0 7
66708: PPUSH
66709: LD_VAR 0 8
66713: PPUSH
66714: CALL_OW 298
66718: ST_TO_ADDR
// if tmp < distance then
66719: LD_VAR 0 9
66723: PUSH
66724: LD_VAR 0 10
66728: LESS
66729: IFFALSE 66751
// begin result := i ;
66731: LD_ADDR_VAR 0 5
66735: PUSH
66736: LD_VAR 0 6
66740: ST_TO_ADDR
// distance := tmp ;
66741: LD_ADDR_VAR 0 10
66745: PUSH
66746: LD_VAR 0 9
66750: ST_TO_ADDR
// end ; end ;
66751: GO 66609
66753: POP
66754: POP
// end ;
66755: LD_VAR 0 5
66759: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66760: LD_INT 0
66762: PPUSH
66763: PPUSH
// if not driver or not IsInUnit ( driver ) then
66764: LD_VAR 0 1
66768: NOT
66769: PUSH
66770: LD_VAR 0 1
66774: PPUSH
66775: CALL_OW 310
66779: NOT
66780: OR
66781: IFFALSE 66785
// exit ;
66783: GO 66875
// vehicle := IsInUnit ( driver ) ;
66785: LD_ADDR_VAR 0 3
66789: PUSH
66790: LD_VAR 0 1
66794: PPUSH
66795: CALL_OW 310
66799: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66800: LD_VAR 0 1
66804: PPUSH
66805: LD_STRING \
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: LD_STRING E
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_VAR 0 3
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PPUSH
66871: CALL_OW 446
// end ;
66875: LD_VAR 0 2
66879: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66880: LD_INT 0
66882: PPUSH
66883: PPUSH
// if not driver or not IsInUnit ( driver ) then
66884: LD_VAR 0 1
66888: NOT
66889: PUSH
66890: LD_VAR 0 1
66894: PPUSH
66895: CALL_OW 310
66899: NOT
66900: OR
66901: IFFALSE 66905
// exit ;
66903: GO 66995
// vehicle := IsInUnit ( driver ) ;
66905: LD_ADDR_VAR 0 3
66909: PUSH
66910: LD_VAR 0 1
66914: PPUSH
66915: CALL_OW 310
66919: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_STRING \
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: PUSH
66955: LD_STRING E
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_VAR 0 3
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PPUSH
66991: CALL_OW 447
// end ;
66995: LD_VAR 0 2
66999: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67000: LD_INT 0
67002: PPUSH
67003: PPUSH
67004: PPUSH
// tmp := [ ] ;
67005: LD_ADDR_VAR 0 5
67009: PUSH
67010: EMPTY
67011: ST_TO_ADDR
// for i in units do
67012: LD_ADDR_VAR 0 4
67016: PUSH
67017: LD_VAR 0 1
67021: PUSH
67022: FOR_IN
67023: IFFALSE 67061
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67025: LD_ADDR_VAR 0 5
67029: PUSH
67030: LD_VAR 0 5
67034: PPUSH
67035: LD_VAR 0 5
67039: PUSH
67040: LD_INT 1
67042: PLUS
67043: PPUSH
67044: LD_VAR 0 4
67048: PPUSH
67049: CALL_OW 256
67053: PPUSH
67054: CALL_OW 2
67058: ST_TO_ADDR
67059: GO 67022
67061: POP
67062: POP
// if not tmp then
67063: LD_VAR 0 5
67067: NOT
67068: IFFALSE 67072
// exit ;
67070: GO 67120
// if asc then
67072: LD_VAR 0 2
67076: IFFALSE 67100
// result := SortListByListAsc ( units , tmp ) else
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_VAR 0 1
67087: PPUSH
67088: LD_VAR 0 5
67092: PPUSH
67093: CALL_OW 76
67097: ST_TO_ADDR
67098: GO 67120
// result := SortListByListDesc ( units , tmp ) ;
67100: LD_ADDR_VAR 0 3
67104: PUSH
67105: LD_VAR 0 1
67109: PPUSH
67110: LD_VAR 0 5
67114: PPUSH
67115: CALL_OW 77
67119: ST_TO_ADDR
// end ;
67120: LD_VAR 0 3
67124: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67125: LD_INT 0
67127: PPUSH
67128: PPUSH
// task := GetTaskList ( mech ) ;
67129: LD_ADDR_VAR 0 4
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 437
67143: ST_TO_ADDR
// if not task then
67144: LD_VAR 0 4
67148: NOT
67149: IFFALSE 67153
// exit ;
67151: GO 67195
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_VAR 0 4
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: PUSH
67167: LD_INT 1
67169: ARRAY
67170: PUSH
67171: LD_STRING r
67173: EQUAL
67174: PUSH
67175: LD_VAR 0 4
67179: PUSH
67180: LD_INT 1
67182: ARRAY
67183: PUSH
67184: LD_INT 4
67186: ARRAY
67187: PUSH
67188: LD_VAR 0 2
67192: EQUAL
67193: AND
67194: ST_TO_ADDR
// end ;
67195: LD_VAR 0 3
67199: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67200: LD_INT 0
67202: PPUSH
// SetDir ( unit , d ) ;
67203: LD_VAR 0 1
67207: PPUSH
67208: LD_VAR 0 4
67212: PPUSH
67213: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67217: LD_VAR 0 1
67221: PPUSH
67222: LD_VAR 0 2
67226: PPUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: LD_VAR 0 5
67236: PPUSH
67237: CALL_OW 48
// end ;
67241: LD_VAR 0 6
67245: RET
// export function ToNaturalNumber ( number ) ; begin
67246: LD_INT 0
67248: PPUSH
// result := number div 1 ;
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: LD_VAR 0 1
67258: PUSH
67259: LD_INT 1
67261: DIV
67262: ST_TO_ADDR
// if number < 0 then
67263: LD_VAR 0 1
67267: PUSH
67268: LD_INT 0
67270: LESS
67271: IFFALSE 67281
// result := 0 ;
67273: LD_ADDR_VAR 0 2
67277: PUSH
67278: LD_INT 0
67280: ST_TO_ADDR
// end ;
67281: LD_VAR 0 2
67285: RET
// export function SortByClass ( units , class ) ; var un ; begin
67286: LD_INT 0
67288: PPUSH
67289: PPUSH
// if not units or not class then
67290: LD_VAR 0 1
67294: NOT
67295: PUSH
67296: LD_VAR 0 2
67300: NOT
67301: OR
67302: IFFALSE 67306
// exit ;
67304: GO 67401
// result := [ ] ;
67306: LD_ADDR_VAR 0 3
67310: PUSH
67311: EMPTY
67312: ST_TO_ADDR
// for un in units do
67313: LD_ADDR_VAR 0 4
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: FOR_IN
67324: IFFALSE 67399
// if GetClass ( un ) = class then
67326: LD_VAR 0 4
67330: PPUSH
67331: CALL_OW 257
67335: PUSH
67336: LD_VAR 0 2
67340: EQUAL
67341: IFFALSE 67368
// result := Insert ( result , 1 , un ) else
67343: LD_ADDR_VAR 0 3
67347: PUSH
67348: LD_VAR 0 3
67352: PPUSH
67353: LD_INT 1
67355: PPUSH
67356: LD_VAR 0 4
67360: PPUSH
67361: CALL_OW 2
67365: ST_TO_ADDR
67366: GO 67397
// result := Replace ( result , result + 1 , un ) ;
67368: LD_ADDR_VAR 0 3
67372: PUSH
67373: LD_VAR 0 3
67377: PPUSH
67378: LD_VAR 0 3
67382: PUSH
67383: LD_INT 1
67385: PLUS
67386: PPUSH
67387: LD_VAR 0 4
67391: PPUSH
67392: CALL_OW 1
67396: ST_TO_ADDR
67397: GO 67323
67399: POP
67400: POP
// end ;
67401: LD_VAR 0 3
67405: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67406: LD_INT 0
67408: PPUSH
67409: PPUSH
67410: PPUSH
67411: PPUSH
67412: PPUSH
67413: PPUSH
67414: PPUSH
// result := [ ] ;
67415: LD_ADDR_VAR 0 4
67419: PUSH
67420: EMPTY
67421: ST_TO_ADDR
// if x - r < 0 then
67422: LD_VAR 0 1
67426: PUSH
67427: LD_VAR 0 3
67431: MINUS
67432: PUSH
67433: LD_INT 0
67435: LESS
67436: IFFALSE 67448
// min_x := 0 else
67438: LD_ADDR_VAR 0 8
67442: PUSH
67443: LD_INT 0
67445: ST_TO_ADDR
67446: GO 67464
// min_x := x - r ;
67448: LD_ADDR_VAR 0 8
67452: PUSH
67453: LD_VAR 0 1
67457: PUSH
67458: LD_VAR 0 3
67462: MINUS
67463: ST_TO_ADDR
// if y - r < 0 then
67464: LD_VAR 0 2
67468: PUSH
67469: LD_VAR 0 3
67473: MINUS
67474: PUSH
67475: LD_INT 0
67477: LESS
67478: IFFALSE 67490
// min_y := 0 else
67480: LD_ADDR_VAR 0 7
67484: PUSH
67485: LD_INT 0
67487: ST_TO_ADDR
67488: GO 67506
// min_y := y - r ;
67490: LD_ADDR_VAR 0 7
67494: PUSH
67495: LD_VAR 0 2
67499: PUSH
67500: LD_VAR 0 3
67504: MINUS
67505: ST_TO_ADDR
// max_x := x + r ;
67506: LD_ADDR_VAR 0 9
67510: PUSH
67511: LD_VAR 0 1
67515: PUSH
67516: LD_VAR 0 3
67520: PLUS
67521: ST_TO_ADDR
// max_y := y + r ;
67522: LD_ADDR_VAR 0 10
67526: PUSH
67527: LD_VAR 0 2
67531: PUSH
67532: LD_VAR 0 3
67536: PLUS
67537: ST_TO_ADDR
// for _x = min_x to max_x do
67538: LD_ADDR_VAR 0 5
67542: PUSH
67543: DOUBLE
67544: LD_VAR 0 8
67548: DEC
67549: ST_TO_ADDR
67550: LD_VAR 0 9
67554: PUSH
67555: FOR_TO
67556: IFFALSE 67657
// for _y = min_y to max_y do
67558: LD_ADDR_VAR 0 6
67562: PUSH
67563: DOUBLE
67564: LD_VAR 0 7
67568: DEC
67569: ST_TO_ADDR
67570: LD_VAR 0 10
67574: PUSH
67575: FOR_TO
67576: IFFALSE 67653
// begin if not ValidHex ( _x , _y ) then
67578: LD_VAR 0 5
67582: PPUSH
67583: LD_VAR 0 6
67587: PPUSH
67588: CALL_OW 488
67592: NOT
67593: IFFALSE 67597
// continue ;
67595: GO 67575
// if GetResourceTypeXY ( _x , _y ) then
67597: LD_VAR 0 5
67601: PPUSH
67602: LD_VAR 0 6
67606: PPUSH
67607: CALL_OW 283
67611: IFFALSE 67651
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67613: LD_ADDR_VAR 0 4
67617: PUSH
67618: LD_VAR 0 4
67622: PPUSH
67623: LD_VAR 0 4
67627: PUSH
67628: LD_INT 1
67630: PLUS
67631: PPUSH
67632: LD_VAR 0 5
67636: PUSH
67637: LD_VAR 0 6
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PPUSH
67646: CALL_OW 1
67650: ST_TO_ADDR
// end ;
67651: GO 67575
67653: POP
67654: POP
67655: GO 67555
67657: POP
67658: POP
// end ;
67659: LD_VAR 0 4
67663: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67664: LD_INT 0
67666: PPUSH
67667: PPUSH
67668: PPUSH
67669: PPUSH
67670: PPUSH
67671: PPUSH
67672: PPUSH
67673: PPUSH
// if not units then
67674: LD_VAR 0 1
67678: NOT
67679: IFFALSE 67683
// exit ;
67681: GO 68207
// result := UnitFilter ( units , [ f_ok ] ) ;
67683: LD_ADDR_VAR 0 3
67687: PUSH
67688: LD_VAR 0 1
67692: PPUSH
67693: LD_INT 50
67695: PUSH
67696: EMPTY
67697: LIST
67698: PPUSH
67699: CALL_OW 72
67703: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67704: LD_ADDR_VAR 0 8
67708: PUSH
67709: LD_VAR 0 1
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PPUSH
67718: CALL_OW 255
67722: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67723: LD_ADDR_VAR 0 10
67727: PUSH
67728: LD_INT 29
67730: PUSH
67731: LD_INT 91
67733: PUSH
67734: LD_INT 49
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: ST_TO_ADDR
// if not result then
67742: LD_VAR 0 3
67746: NOT
67747: IFFALSE 67751
// exit ;
67749: GO 68207
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67751: LD_ADDR_VAR 0 5
67755: PUSH
67756: LD_INT 81
67758: PUSH
67759: LD_VAR 0 8
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PPUSH
67768: CALL_OW 69
67772: ST_TO_ADDR
// for i in result do
67773: LD_ADDR_VAR 0 4
67777: PUSH
67778: LD_VAR 0 3
67782: PUSH
67783: FOR_IN
67784: IFFALSE 68205
// begin tag := GetTag ( i ) + 1 ;
67786: LD_ADDR_VAR 0 9
67790: PUSH
67791: LD_VAR 0 4
67795: PPUSH
67796: CALL_OW 110
67800: PUSH
67801: LD_INT 1
67803: PLUS
67804: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67805: LD_ADDR_VAR 0 7
67809: PUSH
67810: LD_VAR 0 4
67814: PPUSH
67815: CALL_OW 250
67819: PPUSH
67820: LD_VAR 0 4
67824: PPUSH
67825: CALL_OW 251
67829: PPUSH
67830: LD_INT 6
67832: PPUSH
67833: CALL 67406 0 3
67837: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67838: LD_VAR 0 4
67842: PPUSH
67843: CALL_OW 247
67847: PUSH
67848: LD_INT 2
67850: EQUAL
67851: PUSH
67852: LD_VAR 0 7
67856: AND
67857: PUSH
67858: LD_VAR 0 4
67862: PPUSH
67863: CALL_OW 264
67867: PUSH
67868: LD_VAR 0 10
67872: IN
67873: NOT
67874: AND
67875: IFFALSE 67914
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67877: LD_VAR 0 4
67881: PPUSH
67882: LD_VAR 0 7
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: PUSH
67891: LD_INT 1
67893: ARRAY
67894: PPUSH
67895: LD_VAR 0 7
67899: PUSH
67900: LD_INT 1
67902: ARRAY
67903: PUSH
67904: LD_INT 2
67906: ARRAY
67907: PPUSH
67908: CALL_OW 116
67912: GO 68203
// if path > tag then
67914: LD_VAR 0 2
67918: PUSH
67919: LD_VAR 0 9
67923: GREATER
67924: IFFALSE 68132
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67926: LD_ADDR_VAR 0 6
67930: PUSH
67931: LD_VAR 0 5
67935: PPUSH
67936: LD_INT 91
67938: PUSH
67939: LD_VAR 0 4
67943: PUSH
67944: LD_INT 8
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: PPUSH
67952: CALL_OW 72
67956: ST_TO_ADDR
// if nearEnemy then
67957: LD_VAR 0 6
67961: IFFALSE 68030
// begin if GetWeapon ( i ) = ru_time_lapser then
67963: LD_VAR 0 4
67967: PPUSH
67968: CALL_OW 264
67972: PUSH
67973: LD_INT 49
67975: EQUAL
67976: IFFALSE 68004
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67978: LD_VAR 0 4
67982: PPUSH
67983: LD_VAR 0 6
67987: PPUSH
67988: LD_VAR 0 4
67992: PPUSH
67993: CALL_OW 74
67997: PPUSH
67998: CALL_OW 112
68002: GO 68028
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68004: LD_VAR 0 4
68008: PPUSH
68009: LD_VAR 0 6
68013: PPUSH
68014: LD_VAR 0 4
68018: PPUSH
68019: CALL_OW 74
68023: PPUSH
68024: CALL 69132 0 2
// end else
68028: GO 68130
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68030: LD_VAR 0 4
68034: PPUSH
68035: LD_VAR 0 2
68039: PUSH
68040: LD_VAR 0 9
68044: ARRAY
68045: PUSH
68046: LD_INT 1
68048: ARRAY
68049: PPUSH
68050: LD_VAR 0 2
68054: PUSH
68055: LD_VAR 0 9
68059: ARRAY
68060: PUSH
68061: LD_INT 2
68063: ARRAY
68064: PPUSH
68065: CALL_OW 297
68069: PUSH
68070: LD_INT 6
68072: GREATER
68073: IFFALSE 68116
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68075: LD_VAR 0 4
68079: PPUSH
68080: LD_VAR 0 2
68084: PUSH
68085: LD_VAR 0 9
68089: ARRAY
68090: PUSH
68091: LD_INT 1
68093: ARRAY
68094: PPUSH
68095: LD_VAR 0 2
68099: PUSH
68100: LD_VAR 0 9
68104: ARRAY
68105: PUSH
68106: LD_INT 2
68108: ARRAY
68109: PPUSH
68110: CALL_OW 114
68114: GO 68130
// SetTag ( i , tag ) ;
68116: LD_VAR 0 4
68120: PPUSH
68121: LD_VAR 0 9
68125: PPUSH
68126: CALL_OW 109
// end else
68130: GO 68203
// if enemy then
68132: LD_VAR 0 5
68136: IFFALSE 68203
// begin if GetWeapon ( i ) = ru_time_lapser then
68138: LD_VAR 0 4
68142: PPUSH
68143: CALL_OW 264
68147: PUSH
68148: LD_INT 49
68150: EQUAL
68151: IFFALSE 68179
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68153: LD_VAR 0 4
68157: PPUSH
68158: LD_VAR 0 5
68162: PPUSH
68163: LD_VAR 0 4
68167: PPUSH
68168: CALL_OW 74
68172: PPUSH
68173: CALL_OW 112
68177: GO 68203
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68179: LD_VAR 0 4
68183: PPUSH
68184: LD_VAR 0 5
68188: PPUSH
68189: LD_VAR 0 4
68193: PPUSH
68194: CALL_OW 74
68198: PPUSH
68199: CALL 69132 0 2
// end ; end ;
68203: GO 67783
68205: POP
68206: POP
// end ;
68207: LD_VAR 0 3
68211: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68212: LD_INT 0
68214: PPUSH
68215: PPUSH
68216: PPUSH
// if not unit or IsInUnit ( unit ) then
68217: LD_VAR 0 1
68221: NOT
68222: PUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 310
68232: OR
68233: IFFALSE 68237
// exit ;
68235: GO 68328
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68237: LD_ADDR_VAR 0 4
68241: PUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: CALL_OW 250
68251: PPUSH
68252: LD_VAR 0 2
68256: PPUSH
68257: LD_INT 1
68259: PPUSH
68260: CALL_OW 272
68264: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: CALL_OW 251
68279: PPUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: LD_INT 1
68287: PPUSH
68288: CALL_OW 273
68292: ST_TO_ADDR
// if ValidHex ( x , y ) then
68293: LD_VAR 0 4
68297: PPUSH
68298: LD_VAR 0 5
68302: PPUSH
68303: CALL_OW 488
68307: IFFALSE 68328
// ComTurnXY ( unit , x , y ) ;
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_VAR 0 4
68318: PPUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: CALL_OW 118
// end ;
68328: LD_VAR 0 3
68332: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68333: LD_INT 0
68335: PPUSH
68336: PPUSH
// result := false ;
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_INT 0
68344: ST_TO_ADDR
// if not units then
68345: LD_VAR 0 2
68349: NOT
68350: IFFALSE 68354
// exit ;
68352: GO 68399
// for i in units do
68354: LD_ADDR_VAR 0 4
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: FOR_IN
68365: IFFALSE 68397
// if See ( side , i ) then
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_VAR 0 4
68376: PPUSH
68377: CALL_OW 292
68381: IFFALSE 68395
// begin result := true ;
68383: LD_ADDR_VAR 0 3
68387: PUSH
68388: LD_INT 1
68390: ST_TO_ADDR
// exit ;
68391: POP
68392: POP
68393: GO 68399
// end ;
68395: GO 68364
68397: POP
68398: POP
// end ;
68399: LD_VAR 0 3
68403: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68404: LD_INT 0
68406: PPUSH
68407: PPUSH
68408: PPUSH
68409: PPUSH
// if not unit or not points then
68410: LD_VAR 0 1
68414: NOT
68415: PUSH
68416: LD_VAR 0 2
68420: NOT
68421: OR
68422: IFFALSE 68426
// exit ;
68424: GO 68516
// dist := 99999 ;
68426: LD_ADDR_VAR 0 5
68430: PUSH
68431: LD_INT 99999
68433: ST_TO_ADDR
// for i in points do
68434: LD_ADDR_VAR 0 4
68438: PUSH
68439: LD_VAR 0 2
68443: PUSH
68444: FOR_IN
68445: IFFALSE 68514
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68447: LD_ADDR_VAR 0 6
68451: PUSH
68452: LD_VAR 0 1
68456: PPUSH
68457: LD_VAR 0 4
68461: PUSH
68462: LD_INT 1
68464: ARRAY
68465: PPUSH
68466: LD_VAR 0 4
68470: PUSH
68471: LD_INT 2
68473: ARRAY
68474: PPUSH
68475: CALL_OW 297
68479: ST_TO_ADDR
// if tmpDist < dist then
68480: LD_VAR 0 6
68484: PUSH
68485: LD_VAR 0 5
68489: LESS
68490: IFFALSE 68512
// begin result := i ;
68492: LD_ADDR_VAR 0 3
68496: PUSH
68497: LD_VAR 0 4
68501: ST_TO_ADDR
// dist := tmpDist ;
68502: LD_ADDR_VAR 0 5
68506: PUSH
68507: LD_VAR 0 6
68511: ST_TO_ADDR
// end ; end ;
68512: GO 68444
68514: POP
68515: POP
// end ;
68516: LD_VAR 0 3
68520: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68521: LD_INT 0
68523: PPUSH
// uc_side := side ;
68524: LD_ADDR_OWVAR 20
68528: PUSH
68529: LD_VAR 0 1
68533: ST_TO_ADDR
// uc_nation := 3 ;
68534: LD_ADDR_OWVAR 21
68538: PUSH
68539: LD_INT 3
68541: ST_TO_ADDR
// vc_chassis := 25 ;
68542: LD_ADDR_OWVAR 37
68546: PUSH
68547: LD_INT 25
68549: ST_TO_ADDR
// vc_engine := engine_siberite ;
68550: LD_ADDR_OWVAR 39
68554: PUSH
68555: LD_INT 3
68557: ST_TO_ADDR
// vc_control := control_computer ;
68558: LD_ADDR_OWVAR 38
68562: PUSH
68563: LD_INT 3
68565: ST_TO_ADDR
// vc_weapon := 59 ;
68566: LD_ADDR_OWVAR 40
68570: PUSH
68571: LD_INT 59
68573: ST_TO_ADDR
// result := CreateVehicle ;
68574: LD_ADDR_VAR 0 5
68578: PUSH
68579: CALL_OW 45
68583: ST_TO_ADDR
// SetDir ( result , d ) ;
68584: LD_VAR 0 5
68588: PPUSH
68589: LD_VAR 0 4
68593: PPUSH
68594: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68598: LD_VAR 0 5
68602: PPUSH
68603: LD_VAR 0 2
68607: PPUSH
68608: LD_VAR 0 3
68612: PPUSH
68613: LD_INT 0
68615: PPUSH
68616: CALL_OW 48
// end ;
68620: LD_VAR 0 5
68624: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68625: LD_INT 0
68627: PPUSH
68628: PPUSH
68629: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68630: LD_ADDR_VAR 0 2
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68653: LD_VAR 0 1
68657: NOT
68658: PUSH
68659: LD_VAR 0 1
68663: PPUSH
68664: CALL_OW 264
68668: PUSH
68669: LD_INT 12
68671: PUSH
68672: LD_INT 51
68674: PUSH
68675: LD_INT 32
68677: PUSH
68678: LD_INT 89
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: IN
68687: NOT
68688: OR
68689: IFFALSE 68693
// exit ;
68691: GO 68791
// for i := 1 to 3 do
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: DOUBLE
68699: LD_INT 1
68701: DEC
68702: ST_TO_ADDR
68703: LD_INT 3
68705: PUSH
68706: FOR_TO
68707: IFFALSE 68789
// begin tmp := GetCargo ( cargo , i ) ;
68709: LD_ADDR_VAR 0 4
68713: PUSH
68714: LD_VAR 0 1
68718: PPUSH
68719: LD_VAR 0 3
68723: PPUSH
68724: CALL_OW 289
68728: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68729: LD_ADDR_VAR 0 2
68733: PUSH
68734: LD_VAR 0 2
68738: PPUSH
68739: LD_VAR 0 3
68743: PPUSH
68744: LD_VAR 0 4
68748: PPUSH
68749: CALL_OW 1
68753: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68754: LD_ADDR_VAR 0 2
68758: PUSH
68759: LD_VAR 0 2
68763: PPUSH
68764: LD_INT 4
68766: PPUSH
68767: LD_VAR 0 2
68771: PUSH
68772: LD_INT 4
68774: ARRAY
68775: PUSH
68776: LD_VAR 0 4
68780: PLUS
68781: PPUSH
68782: CALL_OW 1
68786: ST_TO_ADDR
// end ;
68787: GO 68706
68789: POP
68790: POP
// end ;
68791: LD_VAR 0 2
68795: RET
// export function Length ( array ) ; begin
68796: LD_INT 0
68798: PPUSH
// result := array + 0 ;
68799: LD_ADDR_VAR 0 2
68803: PUSH
68804: LD_VAR 0 1
68808: PUSH
68809: LD_INT 0
68811: PLUS
68812: ST_TO_ADDR
// end ;
68813: LD_VAR 0 2
68817: RET
// export function PrepareArray ( array ) ; begin
68818: LD_INT 0
68820: PPUSH
// result := array diff 0 ;
68821: LD_ADDR_VAR 0 2
68825: PUSH
68826: LD_VAR 0 1
68830: PUSH
68831: LD_INT 0
68833: DIFF
68834: ST_TO_ADDR
// if not result [ 1 ] then
68835: LD_VAR 0 2
68839: PUSH
68840: LD_INT 1
68842: ARRAY
68843: NOT
68844: IFFALSE 68864
// result := Delete ( result , 1 ) ;
68846: LD_ADDR_VAR 0 2
68850: PUSH
68851: LD_VAR 0 2
68855: PPUSH
68856: LD_INT 1
68858: PPUSH
68859: CALL_OW 3
68863: ST_TO_ADDR
// end ;
68864: LD_VAR 0 2
68868: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68869: LD_INT 0
68871: PPUSH
68872: PPUSH
68873: PPUSH
68874: PPUSH
// sibRocketRange := 25 ;
68875: LD_ADDR_VAR 0 6
68879: PUSH
68880: LD_INT 25
68882: ST_TO_ADDR
// result := false ;
68883: LD_ADDR_VAR 0 4
68887: PUSH
68888: LD_INT 0
68890: ST_TO_ADDR
// for i := 0 to 5 do
68891: LD_ADDR_VAR 0 5
68895: PUSH
68896: DOUBLE
68897: LD_INT 0
68899: DEC
68900: ST_TO_ADDR
68901: LD_INT 5
68903: PUSH
68904: FOR_TO
68905: IFFALSE 68972
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_VAR 0 5
68916: PPUSH
68917: LD_VAR 0 6
68921: PPUSH
68922: CALL_OW 272
68926: PPUSH
68927: LD_VAR 0 2
68931: PPUSH
68932: LD_VAR 0 5
68936: PPUSH
68937: LD_VAR 0 6
68941: PPUSH
68942: CALL_OW 273
68946: PPUSH
68947: LD_VAR 0 3
68951: PPUSH
68952: CALL_OW 309
68956: IFFALSE 68970
// begin result := true ;
68958: LD_ADDR_VAR 0 4
68962: PUSH
68963: LD_INT 1
68965: ST_TO_ADDR
// exit ;
68966: POP
68967: POP
68968: GO 68974
// end ;
68970: GO 68904
68972: POP
68973: POP
// end ;
68974: LD_VAR 0 4
68978: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68979: LD_INT 0
68981: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68982: LD_VAR 0 1
68986: PPUSH
68987: LD_VAR 0 2
68991: PPUSH
68992: LD_INT 0
68994: PPUSH
68995: LD_INT 0
68997: PPUSH
68998: LD_INT 1
69000: PPUSH
69001: LD_INT 0
69003: PPUSH
69004: CALL_OW 587
// end ;
69008: LD_VAR 0 3
69012: RET
// export function CenterOnNow ( unit ) ; begin
69013: LD_INT 0
69015: PPUSH
// result := IsInUnit ( unit ) ;
69016: LD_ADDR_VAR 0 2
69020: PUSH
69021: LD_VAR 0 1
69025: PPUSH
69026: CALL_OW 310
69030: ST_TO_ADDR
// if not result then
69031: LD_VAR 0 2
69035: NOT
69036: IFFALSE 69048
// result := unit ;
69038: LD_ADDR_VAR 0 2
69042: PUSH
69043: LD_VAR 0 1
69047: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69048: LD_VAR 0 1
69052: PPUSH
69053: CALL_OW 87
// end ;
69057: LD_VAR 0 2
69061: RET
// export function ComMoveHex ( unit , hex ) ; begin
69062: LD_INT 0
69064: PPUSH
// if not hex then
69065: LD_VAR 0 2
69069: NOT
69070: IFFALSE 69074
// exit ;
69072: GO 69127
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69074: LD_VAR 0 2
69078: PUSH
69079: LD_INT 1
69081: ARRAY
69082: PPUSH
69083: LD_VAR 0 2
69087: PUSH
69088: LD_INT 2
69090: ARRAY
69091: PPUSH
69092: CALL_OW 428
69096: IFFALSE 69100
// exit ;
69098: GO 69127
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69100: LD_VAR 0 1
69104: PPUSH
69105: LD_VAR 0 2
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PPUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_INT 2
69121: ARRAY
69122: PPUSH
69123: CALL_OW 111
// end ;
69127: LD_VAR 0 3
69131: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69132: LD_INT 0
69134: PPUSH
69135: PPUSH
69136: PPUSH
// if not unit or not enemy then
69137: LD_VAR 0 1
69141: NOT
69142: PUSH
69143: LD_VAR 0 2
69147: NOT
69148: OR
69149: IFFALSE 69153
// exit ;
69151: GO 69277
// x := GetX ( enemy ) ;
69153: LD_ADDR_VAR 0 4
69157: PUSH
69158: LD_VAR 0 2
69162: PPUSH
69163: CALL_OW 250
69167: ST_TO_ADDR
// y := GetY ( enemy ) ;
69168: LD_ADDR_VAR 0 5
69172: PUSH
69173: LD_VAR 0 2
69177: PPUSH
69178: CALL_OW 251
69182: ST_TO_ADDR
// if ValidHex ( x , y ) then
69183: LD_VAR 0 4
69187: PPUSH
69188: LD_VAR 0 5
69192: PPUSH
69193: CALL_OW 488
69197: IFFALSE 69277
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69199: LD_VAR 0 2
69203: PPUSH
69204: CALL_OW 247
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: LD_INT 2
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: IN
69219: PUSH
69220: LD_VAR 0 1
69224: PPUSH
69225: CALL_OW 255
69229: PPUSH
69230: LD_VAR 0 2
69234: PPUSH
69235: CALL_OW 292
69239: AND
69240: IFFALSE 69258
// ComAttackUnit ( unit , enemy ) else
69242: LD_VAR 0 1
69246: PPUSH
69247: LD_VAR 0 2
69251: PPUSH
69252: CALL_OW 115
69256: GO 69277
// ComAgressiveMove ( unit , x , y ) ;
69258: LD_VAR 0 1
69262: PPUSH
69263: LD_VAR 0 4
69267: PPUSH
69268: LD_VAR 0 5
69272: PPUSH
69273: CALL_OW 114
// end ; end_of_file
69277: LD_VAR 0 3
69281: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69282: LD_VAR 0 1
69286: PUSH
69287: LD_INT 200
69289: DOUBLE
69290: GREATEREQUAL
69291: IFFALSE 69299
69293: LD_INT 299
69295: DOUBLE
69296: LESSEQUAL
69297: IFTRUE 69301
69299: GO 69333
69301: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69302: LD_VAR 0 1
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: LD_VAR 0 3
69316: PPUSH
69317: LD_VAR 0 4
69321: PPUSH
69322: LD_VAR 0 5
69326: PPUSH
69327: CALL 23006 0 5
69331: GO 69410
69333: LD_INT 300
69335: DOUBLE
69336: GREATEREQUAL
69337: IFFALSE 69345
69339: LD_INT 399
69341: DOUBLE
69342: LESSEQUAL
69343: IFTRUE 69347
69345: GO 69409
69347: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69348: LD_VAR 0 1
69352: PPUSH
69353: LD_VAR 0 2
69357: PPUSH
69358: LD_VAR 0 3
69362: PPUSH
69363: LD_VAR 0 4
69367: PPUSH
69368: LD_VAR 0 5
69372: PPUSH
69373: LD_VAR 0 6
69377: PPUSH
69378: LD_VAR 0 7
69382: PPUSH
69383: LD_VAR 0 8
69387: PPUSH
69388: LD_VAR 0 9
69392: PPUSH
69393: LD_VAR 0 10
69397: PPUSH
69398: LD_VAR 0 11
69402: PPUSH
69403: CALL 19331 0 11
69407: GO 69410
69409: POP
// end ;
69410: PPOPN 11
69412: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69413: LD_VAR 0 1
69417: PPUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: LD_VAR 0 3
69427: PPUSH
69428: LD_VAR 0 4
69432: PPUSH
69433: LD_VAR 0 5
69437: PPUSH
69438: CALL 22742 0 5
// end ; end_of_file
69442: PPOPN 5
69444: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69445: LD_VAR 0 1
69449: PPUSH
69450: LD_VAR 0 2
69454: PPUSH
69455: LD_VAR 0 3
69459: PPUSH
69460: LD_VAR 0 4
69464: PPUSH
69465: LD_VAR 0 5
69469: PPUSH
69470: LD_VAR 0 6
69474: PPUSH
69475: CALL 6983 0 6
// end ;
69479: PPOPN 6
69481: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69482: LD_INT 0
69484: PPUSH
// begin if not units then
69485: LD_VAR 0 1
69489: NOT
69490: IFFALSE 69494
// exit ;
69492: GO 69494
// end ;
69494: PPOPN 7
69496: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69497: CALL 6887 0 0
// end ;
69501: PPOPN 1
69503: END
