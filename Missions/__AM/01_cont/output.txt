// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 24415 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 24415 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 24415 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 24415 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 24415 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_EXP 16
5675: EQUAL
5676: IFFALSE 5685
// YouLost ( JMM ) ;
5678: LD_STRING JMM
5680: PPUSH
5681: CALL_OW 104
// end ;
5685: PPOPN 1
5687: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_EXP 16
5697: EQUAL
5698: IFFALSE 5707
// YouLost ( JMM ) ;
5700: LD_STRING JMM
5702: PPUSH
5703: CALL_OW 104
// end ;
5707: PPOPN 1
5709: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5710: LD_EXP 17
5714: PPUSH
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 308
5722: IFFALSE 5771
5724: GO 5726
5726: DISABLE
// begin bobby_saved := true ;
5727: LD_ADDR_EXP 12
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5735: LD_EXP 17
5739: PPUSH
5740: CALL_OW 256
5744: PPUSH
5745: LD_STRING 01_BobbyLifePoints_1
5747: PPUSH
5748: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5761: LD_STRING Bobby
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 101
// end ;
5771: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5772: LD_EXP 18
5776: PPUSH
5777: LD_INT 10
5779: PPUSH
5780: CALL_OW 308
5784: IFFALSE 5833
5786: GO 5788
5788: DISABLE
// begin cyrus_saved := true ;
5789: LD_ADDR_EXP 13
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5797: LD_EXP 18
5801: PPUSH
5802: CALL_OW 256
5806: PPUSH
5807: LD_STRING 01_CyrusLifePoints_1
5809: PPUSH
5810: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5814: LD_EXP 18
5818: PPUSH
5819: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5823: LD_STRING Cyrus
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 101
// end ;
5833: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5834: LD_EXP 16
5838: PPUSH
5839: LD_INT 10
5841: PPUSH
5842: CALL_OW 308
5846: IFFALSE 6454
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin if macmilan_use_radio then
5859: LD_EXP 6
5863: IFFALSE 5872
// SetAchievement ( ACH_RADIO ) ;
5865: LD_STRING ACH_RADIO
5867: PPUSH
5868: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5872: LD_EXP 13
5876: NOT
5877: PUSH
5878: LD_EXP 7
5882: AND
5883: PUSH
5884: LD_EXP 18
5888: PPUSH
5889: CALL_OW 302
5893: AND
5894: PUSH
5895: LD_EXP 12
5899: NOT
5900: PUSH
5901: LD_EXP 4
5905: AND
5906: PUSH
5907: LD_EXP 17
5911: PPUSH
5912: CALL_OW 302
5916: AND
5917: OR
5918: IFFALSE 5959
// case Query ( Q2 ) of 1 :
5920: LD_STRING Q2
5922: PPUSH
5923: CALL_OW 97
5927: PUSH
5928: LD_INT 1
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5947
5936: POP
// wait_for_them := true ; 2 :
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5959
5947: LD_INT 2
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5955
5953: GO 5958
5955: POP
// ; end ;
5956: GO 5959
5958: POP
// if wait_for_them then
5959: LD_VAR 0 3
5963: IFFALSE 6076
// repeat wait ( 0 0$01 ) ;
5965: LD_INT 35
5967: PPUSH
5968: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5972: LD_EXP 13
5976: PUSH
5977: LD_EXP 12
5981: AND
5982: PUSH
5983: LD_EXP 13
5987: PUSH
5988: LD_EXP 4
5992: NOT
5993: PUSH
5994: LD_EXP 17
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 17
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 12
6022: PUSH
6023: LD_EXP 7
6027: NOT
6028: PUSH
6029: LD_EXP 18
6033: PPUSH
6034: CALL_OW 303
6038: OR
6039: PUSH
6040: LD_EXP 18
6044: PPUSH
6045: CALL_OW 301
6049: OR
6050: AND
6051: OR
6052: PUSH
6053: LD_EXP 17
6057: PPUSH
6058: CALL_OW 301
6062: PUSH
6063: LD_EXP 18
6067: PPUSH
6068: CALL_OW 301
6072: AND
6073: OR
6074: IFFALSE 5965
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6076: LD_EXP 16
6080: PPUSH
6081: CALL_OW 256
6085: PPUSH
6086: LD_STRING 01_JMMLifePoints_1
6088: PPUSH
6089: CALL_OW 39
// RemoveUnit ( JMM ) ;
6093: LD_EXP 16
6097: PPUSH
6098: CALL_OW 64
// to_reward := [ JMM ] ;
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_EXP 16
6111: PUSH
6112: EMPTY
6113: LIST
6114: ST_TO_ADDR
// if bobby_saved then
6115: LD_EXP 12
6119: IFFALSE 6137
// to_reward := to_reward ^ Bobby ;
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: LD_EXP 17
6135: ADD
6136: ST_TO_ADDR
// if cyrus_saved then
6137: LD_EXP 13
6141: IFFALSE 6159
// to_reward := to_reward ^ Cyrus ;
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_EXP 18
6157: ADD
6158: ST_TO_ADDR
// m1 := true ;
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// m2 := bobby_saved ;
6167: LD_ADDR_VAR 0 5
6171: PUSH
6172: LD_EXP 12
6176: ST_TO_ADDR
// m3 := cyrus_saved ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_EXP 13
6186: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6187: LD_STRING JMM
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: CALL_OW 101
// if not bobby_in_squad then
6197: LD_EXP 4
6201: NOT
6202: IFFALSE 6215
// AddMedal ( Bobby , - 1 ) ;
6204: LD_STRING Bobby
6206: PPUSH
6207: LD_INT 1
6209: NEG
6210: PPUSH
6211: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6215: LD_EXP 12
6219: NOT
6220: PUSH
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 303
6230: PUSH
6231: LD_EXP 17
6235: PPUSH
6236: CALL_OW 301
6240: OR
6241: AND
6242: IFFALSE 6255
// AddMedal ( Bobby , - 2 ) ;
6244: LD_STRING Bobby
6246: PPUSH
6247: LD_INT 2
6249: NEG
6250: PPUSH
6251: CALL_OW 101
// if not cyrus_in_squad then
6255: LD_EXP 7
6259: NOT
6260: IFFALSE 6273
// AddMedal ( Cyrus , - 1 ) ;
6262: LD_STRING Cyrus
6264: PPUSH
6265: LD_INT 1
6267: NEG
6268: PPUSH
6269: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6273: LD_EXP 13
6277: NOT
6278: PUSH
6279: LD_EXP 18
6283: PPUSH
6284: CALL_OW 303
6288: PUSH
6289: LD_EXP 18
6293: PPUSH
6294: CALL_OW 301
6298: OR
6299: AND
6300: IFFALSE 6313
// AddMedal ( Cyrus , - 2 ) ;
6302: LD_STRING Cyrus
6304: PPUSH
6305: LD_INT 2
6307: NEG
6308: PPUSH
6309: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6313: LD_OWVAR 67
6317: PUSH
6318: LD_INT 3
6320: GREATEREQUAL
6321: PUSH
6322: LD_VAR 0 4
6326: AND
6327: PUSH
6328: LD_VAR 0 5
6332: AND
6333: PUSH
6334: LD_VAR 0 6
6338: AND
6339: IFFALSE 6351
// SetAchievementEX ( ACH_AMER , 1 ) ;
6341: LD_STRING ACH_AMER
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 564
// GiveMedals ( MAIN ) ;
6351: LD_STRING MAIN
6353: PPUSH
6354: CALL_OW 102
// RewardPeople ( to_reward ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 43
// if bobby_saved then
6367: LD_EXP 12
6371: IFFALSE 6391
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6373: LD_EXP 17
6377: PPUSH
6378: LD_EXP 2
6382: PUSH
6383: LD_STRING Bobby
6385: STR
6386: PPUSH
6387: CALL_OW 38
// if cyrus_saved then
6391: LD_EXP 13
6395: IFFALSE 6415
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6397: LD_EXP 18
6401: PPUSH
6402: LD_EXP 2
6406: PUSH
6407: LD_STRING Cyrus
6409: STR
6410: PPUSH
6411: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6415: LD_EXP 16
6419: PPUSH
6420: LD_EXP 2
6424: PUSH
6425: LD_STRING JMM
6427: STR
6428: PPUSH
6429: CALL_OW 38
// if tick <= 3 3$00 then
6433: LD_OWVAR 1
6437: PUSH
6438: LD_INT 6300
6440: LESSEQUAL
6441: IFFALSE 6450
// SetAchievement ( ACH_ASPEED_1 ) ;
6443: LD_STRING ACH_ASPEED_1
6445: PPUSH
6446: CALL_OW 543
// YouWin ;
6450: CALL_OW 103
// end ; end_of_file end_of_file
6454: PPOPN 6
6456: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6457: LD_INT 0
6459: PPUSH
// if p2 = 100 then
6460: LD_VAR 0 2
6464: PUSH
6465: LD_INT 100
6467: EQUAL
6468: IFFALSE 7471
// begin if not StreamModeActive then
6470: LD_EXP 27
6474: NOT
6475: IFFALSE 6485
// StreamModeActive := true ;
6477: LD_ADDR_EXP 27
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 0 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 0
6492: EQUAL
6493: IFFALSE 6499
// InitStreamMode ;
6495: CALL 7631 0 0
// if p3 = 1 then
6499: LD_VAR 0 3
6503: PUSH
6504: LD_INT 1
6506: EQUAL
6507: IFFALSE 6517
// sRocket := true ;
6509: LD_ADDR_EXP 32
6513: PUSH
6514: LD_INT 1
6516: ST_TO_ADDR
// if p3 = 2 then
6517: LD_VAR 0 3
6521: PUSH
6522: LD_INT 2
6524: EQUAL
6525: IFFALSE 6535
// sSpeed := true ;
6527: LD_ADDR_EXP 31
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// if p3 = 3 then
6535: LD_VAR 0 3
6539: PUSH
6540: LD_INT 3
6542: EQUAL
6543: IFFALSE 6553
// sEngine := true ;
6545: LD_ADDR_EXP 33
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// if p3 = 4 then
6553: LD_VAR 0 3
6557: PUSH
6558: LD_INT 4
6560: EQUAL
6561: IFFALSE 6571
// sSpec := true ;
6563: LD_ADDR_EXP 30
6567: PUSH
6568: LD_INT 1
6570: ST_TO_ADDR
// if p3 = 5 then
6571: LD_VAR 0 3
6575: PUSH
6576: LD_INT 5
6578: EQUAL
6579: IFFALSE 6589
// sLevel := true ;
6581: LD_ADDR_EXP 34
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// if p3 = 6 then
6589: LD_VAR 0 3
6593: PUSH
6594: LD_INT 6
6596: EQUAL
6597: IFFALSE 6607
// sArmoury := true ;
6599: LD_ADDR_EXP 35
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// if p3 = 7 then
6607: LD_VAR 0 3
6611: PUSH
6612: LD_INT 7
6614: EQUAL
6615: IFFALSE 6625
// sRadar := true ;
6617: LD_ADDR_EXP 36
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// if p3 = 8 then
6625: LD_VAR 0 3
6629: PUSH
6630: LD_INT 8
6632: EQUAL
6633: IFFALSE 6643
// sBunker := true ;
6635: LD_ADDR_EXP 37
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// if p3 = 9 then
6643: LD_VAR 0 3
6647: PUSH
6648: LD_INT 9
6650: EQUAL
6651: IFFALSE 6661
// sHack := true ;
6653: LD_ADDR_EXP 38
6657: PUSH
6658: LD_INT 1
6660: ST_TO_ADDR
// if p3 = 10 then
6661: LD_VAR 0 3
6665: PUSH
6666: LD_INT 10
6668: EQUAL
6669: IFFALSE 6679
// sFire := true ;
6671: LD_ADDR_EXP 39
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// if p3 = 11 then
6679: LD_VAR 0 3
6683: PUSH
6684: LD_INT 11
6686: EQUAL
6687: IFFALSE 6697
// sRefresh := true ;
6689: LD_ADDR_EXP 40
6693: PUSH
6694: LD_INT 1
6696: ST_TO_ADDR
// if p3 = 12 then
6697: LD_VAR 0 3
6701: PUSH
6702: LD_INT 12
6704: EQUAL
6705: IFFALSE 6715
// sExp := true ;
6707: LD_ADDR_EXP 41
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// if p3 = 13 then
6715: LD_VAR 0 3
6719: PUSH
6720: LD_INT 13
6722: EQUAL
6723: IFFALSE 6733
// sDepot := true ;
6725: LD_ADDR_EXP 42
6729: PUSH
6730: LD_INT 1
6732: ST_TO_ADDR
// if p3 = 14 then
6733: LD_VAR 0 3
6737: PUSH
6738: LD_INT 14
6740: EQUAL
6741: IFFALSE 6751
// sFlag := true ;
6743: LD_ADDR_EXP 43
6747: PUSH
6748: LD_INT 1
6750: ST_TO_ADDR
// if p3 = 15 then
6751: LD_VAR 0 3
6755: PUSH
6756: LD_INT 15
6758: EQUAL
6759: IFFALSE 6769
// sKamikadze := true ;
6761: LD_ADDR_EXP 51
6765: PUSH
6766: LD_INT 1
6768: ST_TO_ADDR
// if p3 = 16 then
6769: LD_VAR 0 3
6773: PUSH
6774: LD_INT 16
6776: EQUAL
6777: IFFALSE 6787
// sTroll := true ;
6779: LD_ADDR_EXP 52
6783: PUSH
6784: LD_INT 1
6786: ST_TO_ADDR
// if p3 = 17 then
6787: LD_VAR 0 3
6791: PUSH
6792: LD_INT 17
6794: EQUAL
6795: IFFALSE 6805
// sSlow := true ;
6797: LD_ADDR_EXP 53
6801: PUSH
6802: LD_INT 1
6804: ST_TO_ADDR
// if p3 = 18 then
6805: LD_VAR 0 3
6809: PUSH
6810: LD_INT 18
6812: EQUAL
6813: IFFALSE 6823
// sLack := true ;
6815: LD_ADDR_EXP 54
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// if p3 = 19 then
6823: LD_VAR 0 3
6827: PUSH
6828: LD_INT 19
6830: EQUAL
6831: IFFALSE 6841
// sTank := true ;
6833: LD_ADDR_EXP 56
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// if p3 = 20 then
6841: LD_VAR 0 3
6845: PUSH
6846: LD_INT 20
6848: EQUAL
6849: IFFALSE 6859
// sRemote := true ;
6851: LD_ADDR_EXP 57
6855: PUSH
6856: LD_INT 1
6858: ST_TO_ADDR
// if p3 = 21 then
6859: LD_VAR 0 3
6863: PUSH
6864: LD_INT 21
6866: EQUAL
6867: IFFALSE 6877
// sPowell := true ;
6869: LD_ADDR_EXP 58
6873: PUSH
6874: LD_INT 1
6876: ST_TO_ADDR
// if p3 = 22 then
6877: LD_VAR 0 3
6881: PUSH
6882: LD_INT 22
6884: EQUAL
6885: IFFALSE 6895
// sTeleport := true ;
6887: LD_ADDR_EXP 61
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// if p3 = 23 then
6895: LD_VAR 0 3
6899: PUSH
6900: LD_INT 23
6902: EQUAL
6903: IFFALSE 6913
// sOilTower := true ;
6905: LD_ADDR_EXP 63
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// if p3 = 24 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 24
6920: EQUAL
6921: IFFALSE 6931
// sShovel := true ;
6923: LD_ADDR_EXP 64
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if p3 = 25 then
6931: LD_VAR 0 3
6935: PUSH
6936: LD_INT 25
6938: EQUAL
6939: IFFALSE 6949
// sSheik := true ;
6941: LD_ADDR_EXP 65
6945: PUSH
6946: LD_INT 1
6948: ST_TO_ADDR
// if p3 = 26 then
6949: LD_VAR 0 3
6953: PUSH
6954: LD_INT 26
6956: EQUAL
6957: IFFALSE 6967
// sEarthquake := true ;
6959: LD_ADDR_EXP 67
6963: PUSH
6964: LD_INT 1
6966: ST_TO_ADDR
// if p3 = 27 then
6967: LD_VAR 0 3
6971: PUSH
6972: LD_INT 27
6974: EQUAL
6975: IFFALSE 6985
// sAI := true ;
6977: LD_ADDR_EXP 68
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// if p3 = 28 then
6985: LD_VAR 0 3
6989: PUSH
6990: LD_INT 28
6992: EQUAL
6993: IFFALSE 7003
// sCargo := true ;
6995: LD_ADDR_EXP 71
6999: PUSH
7000: LD_INT 1
7002: ST_TO_ADDR
// if p3 = 29 then
7003: LD_VAR 0 3
7007: PUSH
7008: LD_INT 29
7010: EQUAL
7011: IFFALSE 7021
// sDLaser := true ;
7013: LD_ADDR_EXP 72
7017: PUSH
7018: LD_INT 1
7020: ST_TO_ADDR
// if p3 = 30 then
7021: LD_VAR 0 3
7025: PUSH
7026: LD_INT 30
7028: EQUAL
7029: IFFALSE 7039
// sExchange := true ;
7031: LD_ADDR_EXP 73
7035: PUSH
7036: LD_INT 1
7038: ST_TO_ADDR
// if p3 = 31 then
7039: LD_VAR 0 3
7043: PUSH
7044: LD_INT 31
7046: EQUAL
7047: IFFALSE 7057
// sFac := true ;
7049: LD_ADDR_EXP 74
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// if p3 = 32 then
7057: LD_VAR 0 3
7061: PUSH
7062: LD_INT 32
7064: EQUAL
7065: IFFALSE 7075
// sPower := true ;
7067: LD_ADDR_EXP 75
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// if p3 = 33 then
7075: LD_VAR 0 3
7079: PUSH
7080: LD_INT 33
7082: EQUAL
7083: IFFALSE 7093
// sRandom := true ;
7085: LD_ADDR_EXP 76
7089: PUSH
7090: LD_INT 1
7092: ST_TO_ADDR
// if p3 = 34 then
7093: LD_VAR 0 3
7097: PUSH
7098: LD_INT 34
7100: EQUAL
7101: IFFALSE 7111
// sShield := true ;
7103: LD_ADDR_EXP 77
7107: PUSH
7108: LD_INT 1
7110: ST_TO_ADDR
// if p3 = 35 then
7111: LD_VAR 0 3
7115: PUSH
7116: LD_INT 35
7118: EQUAL
7119: IFFALSE 7129
// sTime := true ;
7121: LD_ADDR_EXP 78
7125: PUSH
7126: LD_INT 1
7128: ST_TO_ADDR
// if p3 = 36 then
7129: LD_VAR 0 3
7133: PUSH
7134: LD_INT 36
7136: EQUAL
7137: IFFALSE 7147
// sTools := true ;
7139: LD_ADDR_EXP 79
7143: PUSH
7144: LD_INT 1
7146: ST_TO_ADDR
// if p3 = 101 then
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 101
7154: EQUAL
7155: IFFALSE 7165
// sSold := true ;
7157: LD_ADDR_EXP 44
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// if p3 = 102 then
7165: LD_VAR 0 3
7169: PUSH
7170: LD_INT 102
7172: EQUAL
7173: IFFALSE 7183
// sDiff := true ;
7175: LD_ADDR_EXP 45
7179: PUSH
7180: LD_INT 1
7182: ST_TO_ADDR
// if p3 = 103 then
7183: LD_VAR 0 3
7187: PUSH
7188: LD_INT 103
7190: EQUAL
7191: IFFALSE 7201
// sFog := true ;
7193: LD_ADDR_EXP 48
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// if p3 = 104 then
7201: LD_VAR 0 3
7205: PUSH
7206: LD_INT 104
7208: EQUAL
7209: IFFALSE 7219
// sReset := true ;
7211: LD_ADDR_EXP 49
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// if p3 = 105 then
7219: LD_VAR 0 3
7223: PUSH
7224: LD_INT 105
7226: EQUAL
7227: IFFALSE 7237
// sSun := true ;
7229: LD_ADDR_EXP 50
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// if p3 = 106 then
7237: LD_VAR 0 3
7241: PUSH
7242: LD_INT 106
7244: EQUAL
7245: IFFALSE 7255
// sTiger := true ;
7247: LD_ADDR_EXP 46
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
// if p3 = 107 then
7255: LD_VAR 0 3
7259: PUSH
7260: LD_INT 107
7262: EQUAL
7263: IFFALSE 7273
// sBomb := true ;
7265: LD_ADDR_EXP 47
7269: PUSH
7270: LD_INT 1
7272: ST_TO_ADDR
// if p3 = 108 then
7273: LD_VAR 0 3
7277: PUSH
7278: LD_INT 108
7280: EQUAL
7281: IFFALSE 7291
// sWound := true ;
7283: LD_ADDR_EXP 55
7287: PUSH
7288: LD_INT 1
7290: ST_TO_ADDR
// if p3 = 109 then
7291: LD_VAR 0 3
7295: PUSH
7296: LD_INT 109
7298: EQUAL
7299: IFFALSE 7309
// sBetray := true ;
7301: LD_ADDR_EXP 59
7305: PUSH
7306: LD_INT 1
7308: ST_TO_ADDR
// if p3 = 110 then
7309: LD_VAR 0 3
7313: PUSH
7314: LD_INT 110
7316: EQUAL
7317: IFFALSE 7327
// sContamin := true ;
7319: LD_ADDR_EXP 60
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// if p3 = 111 then
7327: LD_VAR 0 3
7331: PUSH
7332: LD_INT 111
7334: EQUAL
7335: IFFALSE 7345
// sOil := true ;
7337: LD_ADDR_EXP 62
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// if p3 = 112 then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 112
7352: EQUAL
7353: IFFALSE 7363
// sStu := true ;
7355: LD_ADDR_EXP 66
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if p3 = 113 then
7363: LD_VAR 0 3
7367: PUSH
7368: LD_INT 113
7370: EQUAL
7371: IFFALSE 7381
// sBazooka := true ;
7373: LD_ADDR_EXP 69
7377: PUSH
7378: LD_INT 1
7380: ST_TO_ADDR
// if p3 = 114 then
7381: LD_VAR 0 3
7385: PUSH
7386: LD_INT 114
7388: EQUAL
7389: IFFALSE 7399
// sMortar := true ;
7391: LD_ADDR_EXP 70
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// if p3 = 115 then
7399: LD_VAR 0 3
7403: PUSH
7404: LD_INT 115
7406: EQUAL
7407: IFFALSE 7417
// sRanger := true ;
7409: LD_ADDR_EXP 80
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// if p3 = 116 then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 116
7424: EQUAL
7425: IFFALSE 7435
// sComputer := true ;
7427: LD_ADDR_EXP 81
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// if p3 = 117 then
7435: LD_VAR 0 3
7439: PUSH
7440: LD_INT 117
7442: EQUAL
7443: IFFALSE 7453
// s30 := true ;
7445: LD_ADDR_EXP 82
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// if p3 = 118 then
7453: LD_VAR 0 3
7457: PUSH
7458: LD_INT 118
7460: EQUAL
7461: IFFALSE 7471
// s60 := true ;
7463: LD_ADDR_EXP 83
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// end ; if p2 = 101 then
7471: LD_VAR 0 2
7475: PUSH
7476: LD_INT 101
7478: EQUAL
7479: IFFALSE 7607
// begin case p3 of 1 :
7481: LD_VAR 0 3
7485: PUSH
7486: LD_INT 1
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7501
7494: POP
// hHackUnlimitedResources ; 2 :
7495: CALL 19203 0 0
7499: GO 7607
7501: LD_INT 2
7503: DOUBLE
7504: EQUAL
7505: IFTRUE 7509
7507: GO 7516
7509: POP
// hHackSetLevel10 ; 3 :
7510: CALL 19336 0 0
7514: GO 7607
7516: LD_INT 3
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7531
7524: POP
// hHackSetLevel10YourUnits ; 4 :
7525: CALL 19421 0 0
7529: GO 7607
7531: LD_INT 4
7533: DOUBLE
7534: EQUAL
7535: IFTRUE 7539
7537: GO 7546
7539: POP
// hHackInvincible ; 5 :
7540: CALL 19869 0 0
7544: GO 7607
7546: LD_INT 5
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7561
7554: POP
// hHackInvisible ; 6 :
7555: CALL 19980 0 0
7559: GO 7607
7561: LD_INT 6
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7576
7569: POP
// hHackChangeYourSide ; 7 :
7570: CALL 20037 0 0
7574: GO 7607
7576: LD_INT 7
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7591
7584: POP
// hHackChangeUnitSide ; 8 :
7585: CALL 20079 0 0
7589: GO 7607
7591: LD_INT 8
7593: DOUBLE
7594: EQUAL
7595: IFTRUE 7599
7597: GO 7606
7599: POP
// hHackFog ; end ;
7600: CALL 20180 0 0
7604: GO 7607
7606: POP
// end ; end ;
7607: LD_VAR 0 7
7611: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7612: GO 7614
7614: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7615: LD_STRING initStreamRollete();
7617: PPUSH
7618: CALL_OW 559
// InitStreamMode ;
7622: CALL 7631 0 0
// DefineStreamItems ( ) ;
7626: CALL 8095 0 0
// end ;
7630: END
// function InitStreamMode ; begin
7631: LD_INT 0
7633: PPUSH
// streamModeActive := false ;
7634: LD_ADDR_EXP 27
7638: PUSH
7639: LD_INT 0
7641: ST_TO_ADDR
// normalCounter := 36 ;
7642: LD_ADDR_EXP 28
7646: PUSH
7647: LD_INT 36
7649: ST_TO_ADDR
// hardcoreCounter := 16 ;
7650: LD_ADDR_EXP 29
7654: PUSH
7655: LD_INT 16
7657: ST_TO_ADDR
// sRocket := false ;
7658: LD_ADDR_EXP 32
7662: PUSH
7663: LD_INT 0
7665: ST_TO_ADDR
// sSpeed := false ;
7666: LD_ADDR_EXP 31
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// sEngine := false ;
7674: LD_ADDR_EXP 33
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// sSpec := false ;
7682: LD_ADDR_EXP 30
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// sLevel := false ;
7690: LD_ADDR_EXP 34
7694: PUSH
7695: LD_INT 0
7697: ST_TO_ADDR
// sArmoury := false ;
7698: LD_ADDR_EXP 35
7702: PUSH
7703: LD_INT 0
7705: ST_TO_ADDR
// sRadar := false ;
7706: LD_ADDR_EXP 36
7710: PUSH
7711: LD_INT 0
7713: ST_TO_ADDR
// sBunker := false ;
7714: LD_ADDR_EXP 37
7718: PUSH
7719: LD_INT 0
7721: ST_TO_ADDR
// sHack := false ;
7722: LD_ADDR_EXP 38
7726: PUSH
7727: LD_INT 0
7729: ST_TO_ADDR
// sFire := false ;
7730: LD_ADDR_EXP 39
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// sRefresh := false ;
7738: LD_ADDR_EXP 40
7742: PUSH
7743: LD_INT 0
7745: ST_TO_ADDR
// sExp := false ;
7746: LD_ADDR_EXP 41
7750: PUSH
7751: LD_INT 0
7753: ST_TO_ADDR
// sDepot := false ;
7754: LD_ADDR_EXP 42
7758: PUSH
7759: LD_INT 0
7761: ST_TO_ADDR
// sFlag := false ;
7762: LD_ADDR_EXP 43
7766: PUSH
7767: LD_INT 0
7769: ST_TO_ADDR
// sKamikadze := false ;
7770: LD_ADDR_EXP 51
7774: PUSH
7775: LD_INT 0
7777: ST_TO_ADDR
// sTroll := false ;
7778: LD_ADDR_EXP 52
7782: PUSH
7783: LD_INT 0
7785: ST_TO_ADDR
// sSlow := false ;
7786: LD_ADDR_EXP 53
7790: PUSH
7791: LD_INT 0
7793: ST_TO_ADDR
// sLack := false ;
7794: LD_ADDR_EXP 54
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// sTank := false ;
7802: LD_ADDR_EXP 56
7806: PUSH
7807: LD_INT 0
7809: ST_TO_ADDR
// sRemote := false ;
7810: LD_ADDR_EXP 57
7814: PUSH
7815: LD_INT 0
7817: ST_TO_ADDR
// sPowell := false ;
7818: LD_ADDR_EXP 58
7822: PUSH
7823: LD_INT 0
7825: ST_TO_ADDR
// sTeleport := false ;
7826: LD_ADDR_EXP 61
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// sOilTower := false ;
7834: LD_ADDR_EXP 63
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// sShovel := false ;
7842: LD_ADDR_EXP 64
7846: PUSH
7847: LD_INT 0
7849: ST_TO_ADDR
// sSheik := false ;
7850: LD_ADDR_EXP 65
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// sEarthquake := false ;
7858: LD_ADDR_EXP 67
7862: PUSH
7863: LD_INT 0
7865: ST_TO_ADDR
// sAI := false ;
7866: LD_ADDR_EXP 68
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// sCargo := false ;
7874: LD_ADDR_EXP 71
7878: PUSH
7879: LD_INT 0
7881: ST_TO_ADDR
// sDLaser := false ;
7882: LD_ADDR_EXP 72
7886: PUSH
7887: LD_INT 0
7889: ST_TO_ADDR
// sExchange := false ;
7890: LD_ADDR_EXP 73
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// sFac := false ;
7898: LD_ADDR_EXP 74
7902: PUSH
7903: LD_INT 0
7905: ST_TO_ADDR
// sPower := false ;
7906: LD_ADDR_EXP 75
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// sRandom := false ;
7914: LD_ADDR_EXP 76
7918: PUSH
7919: LD_INT 0
7921: ST_TO_ADDR
// sShield := false ;
7922: LD_ADDR_EXP 77
7926: PUSH
7927: LD_INT 0
7929: ST_TO_ADDR
// sTime := false ;
7930: LD_ADDR_EXP 78
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// sTools := false ;
7938: LD_ADDR_EXP 79
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// sSold := false ;
7946: LD_ADDR_EXP 44
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// sDiff := false ;
7954: LD_ADDR_EXP 45
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// sFog := false ;
7962: LD_ADDR_EXP 48
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// sReset := false ;
7970: LD_ADDR_EXP 49
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// sSun := false ;
7978: LD_ADDR_EXP 50
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// sTiger := false ;
7986: LD_ADDR_EXP 46
7990: PUSH
7991: LD_INT 0
7993: ST_TO_ADDR
// sBomb := false ;
7994: LD_ADDR_EXP 47
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// sWound := false ;
8002: LD_ADDR_EXP 55
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// sBetray := false ;
8010: LD_ADDR_EXP 59
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// sContamin := false ;
8018: LD_ADDR_EXP 60
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// sOil := false ;
8026: LD_ADDR_EXP 62
8030: PUSH
8031: LD_INT 0
8033: ST_TO_ADDR
// sStu := false ;
8034: LD_ADDR_EXP 66
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// sBazooka := false ;
8042: LD_ADDR_EXP 69
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// sMortar := false ;
8050: LD_ADDR_EXP 70
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// sRanger := false ;
8058: LD_ADDR_EXP 80
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// sComputer := false ;
8066: LD_ADDR_EXP 81
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// s30 := false ;
8074: LD_ADDR_EXP 82
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// s60 := false ;
8082: LD_ADDR_EXP 83
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// end ;
8090: LD_VAR 0 1
8094: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
8099: PPUSH
8100: PPUSH
8101: PPUSH
// result := [ ] ;
8102: LD_ADDR_VAR 0 1
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// if campaign_id = 1 then
8109: LD_OWVAR 69
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: IFFALSE 11283
// begin case mission_number of 1 :
8119: LD_OWVAR 70
8123: PUSH
8124: LD_INT 1
8126: DOUBLE
8127: EQUAL
8128: IFTRUE 8132
8130: GO 8208
8132: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8133: LD_ADDR_VAR 0 1
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 4
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 15
8152: PUSH
8153: LD_INT 16
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 26
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 101
8178: PUSH
8179: LD_INT 102
8181: PUSH
8182: LD_INT 106
8184: PUSH
8185: LD_INT 116
8187: PUSH
8188: LD_INT 117
8190: PUSH
8191: LD_INT 118
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: ST_TO_ADDR
8206: GO 11281
8208: LD_INT 2
8210: DOUBLE
8211: EQUAL
8212: IFTRUE 8216
8214: GO 8300
8216: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8217: LD_ADDR_VAR 0 1
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: LD_INT 4
8227: PUSH
8228: LD_INT 11
8230: PUSH
8231: LD_INT 12
8233: PUSH
8234: LD_INT 15
8236: PUSH
8237: LD_INT 16
8239: PUSH
8240: LD_INT 22
8242: PUSH
8243: LD_INT 23
8245: PUSH
8246: LD_INT 26
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 101
8262: PUSH
8263: LD_INT 102
8265: PUSH
8266: LD_INT 105
8268: PUSH
8269: LD_INT 106
8271: PUSH
8272: LD_INT 108
8274: PUSH
8275: LD_INT 116
8277: PUSH
8278: LD_INT 117
8280: PUSH
8281: LD_INT 118
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: ST_TO_ADDR
8298: GO 11281
8300: LD_INT 3
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8396
8308: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8309: LD_ADDR_VAR 0 1
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 4
8319: PUSH
8320: LD_INT 5
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: LD_INT 12
8328: PUSH
8329: LD_INT 15
8331: PUSH
8332: LD_INT 16
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 26
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 101
8358: PUSH
8359: LD_INT 102
8361: PUSH
8362: LD_INT 105
8364: PUSH
8365: LD_INT 106
8367: PUSH
8368: LD_INT 108
8370: PUSH
8371: LD_INT 116
8373: PUSH
8374: LD_INT 117
8376: PUSH
8377: LD_INT 118
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: ST_TO_ADDR
8394: GO 11281
8396: LD_INT 4
8398: DOUBLE
8399: EQUAL
8400: IFTRUE 8404
8402: GO 8500
8404: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8405: LD_ADDR_VAR 0 1
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 4
8415: PUSH
8416: LD_INT 5
8418: PUSH
8419: LD_INT 8
8421: PUSH
8422: LD_INT 11
8424: PUSH
8425: LD_INT 12
8427: PUSH
8428: LD_INT 15
8430: PUSH
8431: LD_INT 16
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_INT 23
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 36
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 105
8468: PUSH
8469: LD_INT 106
8471: PUSH
8472: LD_INT 108
8474: PUSH
8475: LD_INT 116
8477: PUSH
8478: LD_INT 117
8480: PUSH
8481: LD_INT 118
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
8498: GO 11281
8500: LD_INT 5
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8620
8508: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8509: LD_ADDR_VAR 0 1
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: LD_INT 5
8522: PUSH
8523: LD_INT 6
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: LD_INT 11
8531: PUSH
8532: LD_INT 12
8534: PUSH
8535: LD_INT 15
8537: PUSH
8538: LD_INT 16
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 23
8546: PUSH
8547: LD_INT 25
8549: PUSH
8550: LD_INT 26
8552: PUSH
8553: LD_INT 36
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 101
8574: PUSH
8575: LD_INT 102
8577: PUSH
8578: LD_INT 105
8580: PUSH
8581: LD_INT 106
8583: PUSH
8584: LD_INT 108
8586: PUSH
8587: LD_INT 109
8589: PUSH
8590: LD_INT 112
8592: PUSH
8593: LD_INT 116
8595: PUSH
8596: LD_INT 117
8598: PUSH
8599: LD_INT 118
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: ST_TO_ADDR
8618: GO 11281
8620: LD_INT 6
8622: DOUBLE
8623: EQUAL
8624: IFTRUE 8628
8626: GO 8760
8628: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8629: LD_ADDR_VAR 0 1
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: LD_INT 5
8642: PUSH
8643: LD_INT 6
8645: PUSH
8646: LD_INT 8
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 12
8654: PUSH
8655: LD_INT 15
8657: PUSH
8658: LD_INT 16
8660: PUSH
8661: LD_INT 20
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 23
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 26
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: LD_INT 32
8687: PUSH
8688: LD_INT 36
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 101
8714: PUSH
8715: LD_INT 102
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 108
8726: PUSH
8727: LD_INT 109
8729: PUSH
8730: LD_INT 112
8732: PUSH
8733: LD_INT 116
8735: PUSH
8736: LD_INT 117
8738: PUSH
8739: LD_INT 118
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: ST_TO_ADDR
8758: GO 11281
8760: LD_INT 7
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8880
8768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8769: LD_ADDR_VAR 0 1
8773: PUSH
8774: LD_INT 2
8776: PUSH
8777: LD_INT 4
8779: PUSH
8780: LD_INT 5
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 11
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 20
8800: PUSH
8801: LD_INT 21
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 23
8809: PUSH
8810: LD_INT 25
8812: PUSH
8813: LD_INT 26
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 101
8834: PUSH
8835: LD_INT 102
8837: PUSH
8838: LD_INT 103
8840: PUSH
8841: LD_INT 105
8843: PUSH
8844: LD_INT 106
8846: PUSH
8847: LD_INT 108
8849: PUSH
8850: LD_INT 112
8852: PUSH
8853: LD_INT 116
8855: PUSH
8856: LD_INT 117
8858: PUSH
8859: LD_INT 118
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: ST_TO_ADDR
8878: GO 11281
8880: LD_INT 8
8882: DOUBLE
8883: EQUAL
8884: IFTRUE 8888
8886: GO 9028
8888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8889: LD_ADDR_VAR 0 1
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 4
8899: PUSH
8900: LD_INT 5
8902: PUSH
8903: LD_INT 6
8905: PUSH
8906: LD_INT 7
8908: PUSH
8909: LD_INT 8
8911: PUSH
8912: LD_INT 11
8914: PUSH
8915: LD_INT 12
8917: PUSH
8918: LD_INT 15
8920: PUSH
8921: LD_INT 16
8923: PUSH
8924: LD_INT 20
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 26
8941: PUSH
8942: LD_INT 30
8944: PUSH
8945: LD_INT 31
8947: PUSH
8948: LD_INT 32
8950: PUSH
8951: LD_INT 36
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 101
8978: PUSH
8979: LD_INT 102
8981: PUSH
8982: LD_INT 103
8984: PUSH
8985: LD_INT 105
8987: PUSH
8988: LD_INT 106
8990: PUSH
8991: LD_INT 108
8993: PUSH
8994: LD_INT 109
8996: PUSH
8997: LD_INT 112
8999: PUSH
9000: LD_INT 116
9002: PUSH
9003: LD_INT 117
9005: PUSH
9006: LD_INT 118
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: ST_TO_ADDR
9026: GO 11281
9028: LD_INT 9
9030: DOUBLE
9031: EQUAL
9032: IFTRUE 9036
9034: GO 9184
9036: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: LD_INT 6
9053: PUSH
9054: LD_INT 7
9056: PUSH
9057: LD_INT 8
9059: PUSH
9060: LD_INT 11
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: LD_INT 15
9068: PUSH
9069: LD_INT 16
9071: PUSH
9072: LD_INT 20
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 26
9089: PUSH
9090: LD_INT 28
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 31
9098: PUSH
9099: LD_INT 32
9101: PUSH
9102: LD_INT 36
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 101
9130: PUSH
9131: LD_INT 102
9133: PUSH
9134: LD_INT 103
9136: PUSH
9137: LD_INT 105
9139: PUSH
9140: LD_INT 106
9142: PUSH
9143: LD_INT 108
9145: PUSH
9146: LD_INT 109
9148: PUSH
9149: LD_INT 112
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: LD_INT 116
9157: PUSH
9158: LD_INT 117
9160: PUSH
9161: LD_INT 118
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: ST_TO_ADDR
9182: GO 11281
9184: LD_INT 10
9186: DOUBLE
9187: EQUAL
9188: IFTRUE 9192
9190: GO 9388
9192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: LD_INT 5
9206: PUSH
9207: LD_INT 6
9209: PUSH
9210: LD_INT 7
9212: PUSH
9213: LD_INT 8
9215: PUSH
9216: LD_INT 9
9218: PUSH
9219: LD_INT 10
9221: PUSH
9222: LD_INT 11
9224: PUSH
9225: LD_INT 12
9227: PUSH
9228: LD_INT 13
9230: PUSH
9231: LD_INT 14
9233: PUSH
9234: LD_INT 15
9236: PUSH
9237: LD_INT 16
9239: PUSH
9240: LD_INT 17
9242: PUSH
9243: LD_INT 18
9245: PUSH
9246: LD_INT 19
9248: PUSH
9249: LD_INT 20
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_INT 23
9260: PUSH
9261: LD_INT 24
9263: PUSH
9264: LD_INT 25
9266: PUSH
9267: LD_INT 26
9269: PUSH
9270: LD_INT 28
9272: PUSH
9273: LD_INT 30
9275: PUSH
9276: LD_INT 31
9278: PUSH
9279: LD_INT 32
9281: PUSH
9282: LD_INT 36
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 101
9318: PUSH
9319: LD_INT 102
9321: PUSH
9322: LD_INT 103
9324: PUSH
9325: LD_INT 104
9327: PUSH
9328: LD_INT 105
9330: PUSH
9331: LD_INT 106
9333: PUSH
9334: LD_INT 107
9336: PUSH
9337: LD_INT 108
9339: PUSH
9340: LD_INT 109
9342: PUSH
9343: LD_INT 110
9345: PUSH
9346: LD_INT 111
9348: PUSH
9349: LD_INT 112
9351: PUSH
9352: LD_INT 114
9354: PUSH
9355: LD_INT 116
9357: PUSH
9358: LD_INT 117
9360: PUSH
9361: LD_INT 118
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: ST_TO_ADDR
9386: GO 11281
9388: LD_INT 11
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9600
9396: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9397: LD_ADDR_VAR 0 1
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 5
9413: PUSH
9414: LD_INT 6
9416: PUSH
9417: LD_INT 7
9419: PUSH
9420: LD_INT 8
9422: PUSH
9423: LD_INT 9
9425: PUSH
9426: LD_INT 10
9428: PUSH
9429: LD_INT 11
9431: PUSH
9432: LD_INT 12
9434: PUSH
9435: LD_INT 13
9437: PUSH
9438: LD_INT 14
9440: PUSH
9441: LD_INT 15
9443: PUSH
9444: LD_INT 16
9446: PUSH
9447: LD_INT 17
9449: PUSH
9450: LD_INT 18
9452: PUSH
9453: LD_INT 19
9455: PUSH
9456: LD_INT 20
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 23
9467: PUSH
9468: LD_INT 24
9470: PUSH
9471: LD_INT 25
9473: PUSH
9474: LD_INT 26
9476: PUSH
9477: LD_INT 28
9479: PUSH
9480: LD_INT 30
9482: PUSH
9483: LD_INT 31
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: LD_INT 34
9491: PUSH
9492: LD_INT 36
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 101
9530: PUSH
9531: LD_INT 102
9533: PUSH
9534: LD_INT 103
9536: PUSH
9537: LD_INT 104
9539: PUSH
9540: LD_INT 105
9542: PUSH
9543: LD_INT 106
9545: PUSH
9546: LD_INT 107
9548: PUSH
9549: LD_INT 108
9551: PUSH
9552: LD_INT 109
9554: PUSH
9555: LD_INT 110
9557: PUSH
9558: LD_INT 111
9560: PUSH
9561: LD_INT 112
9563: PUSH
9564: LD_INT 114
9566: PUSH
9567: LD_INT 116
9569: PUSH
9570: LD_INT 117
9572: PUSH
9573: LD_INT 118
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: ST_TO_ADDR
9598: GO 11281
9600: LD_INT 12
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9828
9608: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_INT 1
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 3
9622: PUSH
9623: LD_INT 4
9625: PUSH
9626: LD_INT 5
9628: PUSH
9629: LD_INT 6
9631: PUSH
9632: LD_INT 7
9634: PUSH
9635: LD_INT 8
9637: PUSH
9638: LD_INT 9
9640: PUSH
9641: LD_INT 10
9643: PUSH
9644: LD_INT 11
9646: PUSH
9647: LD_INT 12
9649: PUSH
9650: LD_INT 13
9652: PUSH
9653: LD_INT 14
9655: PUSH
9656: LD_INT 15
9658: PUSH
9659: LD_INT 16
9661: PUSH
9662: LD_INT 17
9664: PUSH
9665: LD_INT 18
9667: PUSH
9668: LD_INT 19
9670: PUSH
9671: LD_INT 20
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 22
9679: PUSH
9680: LD_INT 23
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: LD_INT 25
9688: PUSH
9689: LD_INT 26
9691: PUSH
9692: LD_INT 27
9694: PUSH
9695: LD_INT 28
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 31
9703: PUSH
9704: LD_INT 32
9706: PUSH
9707: LD_INT 33
9709: PUSH
9710: LD_INT 34
9712: PUSH
9713: LD_INT 36
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PUSH
9752: LD_INT 101
9754: PUSH
9755: LD_INT 102
9757: PUSH
9758: LD_INT 103
9760: PUSH
9761: LD_INT 104
9763: PUSH
9764: LD_INT 105
9766: PUSH
9767: LD_INT 106
9769: PUSH
9770: LD_INT 107
9772: PUSH
9773: LD_INT 108
9775: PUSH
9776: LD_INT 109
9778: PUSH
9779: LD_INT 110
9781: PUSH
9782: LD_INT 111
9784: PUSH
9785: LD_INT 112
9787: PUSH
9788: LD_INT 113
9790: PUSH
9791: LD_INT 114
9793: PUSH
9794: LD_INT 116
9796: PUSH
9797: LD_INT 117
9799: PUSH
9800: LD_INT 118
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: ST_TO_ADDR
9826: GO 11281
9828: LD_INT 13
9830: DOUBLE
9831: EQUAL
9832: IFTRUE 9836
9834: GO 10044
9836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9837: LD_ADDR_VAR 0 1
9841: PUSH
9842: LD_INT 1
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 4
9853: PUSH
9854: LD_INT 5
9856: PUSH
9857: LD_INT 8
9859: PUSH
9860: LD_INT 9
9862: PUSH
9863: LD_INT 10
9865: PUSH
9866: LD_INT 11
9868: PUSH
9869: LD_INT 12
9871: PUSH
9872: LD_INT 14
9874: PUSH
9875: LD_INT 15
9877: PUSH
9878: LD_INT 16
9880: PUSH
9881: LD_INT 17
9883: PUSH
9884: LD_INT 18
9886: PUSH
9887: LD_INT 19
9889: PUSH
9890: LD_INT 20
9892: PUSH
9893: LD_INT 21
9895: PUSH
9896: LD_INT 22
9898: PUSH
9899: LD_INT 23
9901: PUSH
9902: LD_INT 24
9904: PUSH
9905: LD_INT 25
9907: PUSH
9908: LD_INT 26
9910: PUSH
9911: LD_INT 27
9913: PUSH
9914: LD_INT 28
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 31
9922: PUSH
9923: LD_INT 32
9925: PUSH
9926: LD_INT 33
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: LD_INT 36
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 101
9970: PUSH
9971: LD_INT 102
9973: PUSH
9974: LD_INT 103
9976: PUSH
9977: LD_INT 104
9979: PUSH
9980: LD_INT 105
9982: PUSH
9983: LD_INT 106
9985: PUSH
9986: LD_INT 107
9988: PUSH
9989: LD_INT 108
9991: PUSH
9992: LD_INT 109
9994: PUSH
9995: LD_INT 110
9997: PUSH
9998: LD_INT 111
10000: PUSH
10001: LD_INT 112
10003: PUSH
10004: LD_INT 113
10006: PUSH
10007: LD_INT 114
10009: PUSH
10010: LD_INT 116
10012: PUSH
10013: LD_INT 117
10015: PUSH
10016: LD_INT 118
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: ST_TO_ADDR
10042: GO 11281
10044: LD_INT 14
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10276
10052: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10053: LD_ADDR_VAR 0 1
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: LD_INT 3
10066: PUSH
10067: LD_INT 4
10069: PUSH
10070: LD_INT 5
10072: PUSH
10073: LD_INT 6
10075: PUSH
10076: LD_INT 7
10078: PUSH
10079: LD_INT 8
10081: PUSH
10082: LD_INT 9
10084: PUSH
10085: LD_INT 10
10087: PUSH
10088: LD_INT 11
10090: PUSH
10091: LD_INT 12
10093: PUSH
10094: LD_INT 13
10096: PUSH
10097: LD_INT 14
10099: PUSH
10100: LD_INT 15
10102: PUSH
10103: LD_INT 16
10105: PUSH
10106: LD_INT 17
10108: PUSH
10109: LD_INT 18
10111: PUSH
10112: LD_INT 19
10114: PUSH
10115: LD_INT 20
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 22
10123: PUSH
10124: LD_INT 23
10126: PUSH
10127: LD_INT 24
10129: PUSH
10130: LD_INT 25
10132: PUSH
10133: LD_INT 26
10135: PUSH
10136: LD_INT 27
10138: PUSH
10139: LD_INT 28
10141: PUSH
10142: LD_INT 29
10144: PUSH
10145: LD_INT 30
10147: PUSH
10148: LD_INT 31
10150: PUSH
10151: LD_INT 32
10153: PUSH
10154: LD_INT 33
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 101
10202: PUSH
10203: LD_INT 102
10205: PUSH
10206: LD_INT 103
10208: PUSH
10209: LD_INT 104
10211: PUSH
10212: LD_INT 105
10214: PUSH
10215: LD_INT 106
10217: PUSH
10218: LD_INT 107
10220: PUSH
10221: LD_INT 108
10223: PUSH
10224: LD_INT 109
10226: PUSH
10227: LD_INT 110
10229: PUSH
10230: LD_INT 111
10232: PUSH
10233: LD_INT 112
10235: PUSH
10236: LD_INT 113
10238: PUSH
10239: LD_INT 114
10241: PUSH
10242: LD_INT 116
10244: PUSH
10245: LD_INT 117
10247: PUSH
10248: LD_INT 118
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: ST_TO_ADDR
10274: GO 11281
10276: LD_INT 15
10278: DOUBLE
10279: EQUAL
10280: IFTRUE 10284
10282: GO 10508
10284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10285: LD_ADDR_VAR 0 1
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: LD_INT 2
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 4
10301: PUSH
10302: LD_INT 5
10304: PUSH
10305: LD_INT 6
10307: PUSH
10308: LD_INT 7
10310: PUSH
10311: LD_INT 8
10313: PUSH
10314: LD_INT 9
10316: PUSH
10317: LD_INT 10
10319: PUSH
10320: LD_INT 11
10322: PUSH
10323: LD_INT 12
10325: PUSH
10326: LD_INT 13
10328: PUSH
10329: LD_INT 14
10331: PUSH
10332: LD_INT 15
10334: PUSH
10335: LD_INT 16
10337: PUSH
10338: LD_INT 17
10340: PUSH
10341: LD_INT 18
10343: PUSH
10344: LD_INT 19
10346: PUSH
10347: LD_INT 20
10349: PUSH
10350: LD_INT 21
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_INT 23
10358: PUSH
10359: LD_INT 24
10361: PUSH
10362: LD_INT 25
10364: PUSH
10365: LD_INT 26
10367: PUSH
10368: LD_INT 27
10370: PUSH
10371: LD_INT 28
10373: PUSH
10374: LD_INT 29
10376: PUSH
10377: LD_INT 30
10379: PUSH
10380: LD_INT 31
10382: PUSH
10383: LD_INT 32
10385: PUSH
10386: LD_INT 33
10388: PUSH
10389: LD_INT 34
10391: PUSH
10392: LD_INT 36
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 101
10434: PUSH
10435: LD_INT 102
10437: PUSH
10438: LD_INT 103
10440: PUSH
10441: LD_INT 104
10443: PUSH
10444: LD_INT 105
10446: PUSH
10447: LD_INT 106
10449: PUSH
10450: LD_INT 107
10452: PUSH
10453: LD_INT 108
10455: PUSH
10456: LD_INT 109
10458: PUSH
10459: LD_INT 110
10461: PUSH
10462: LD_INT 111
10464: PUSH
10465: LD_INT 112
10467: PUSH
10468: LD_INT 113
10470: PUSH
10471: LD_INT 114
10473: PUSH
10474: LD_INT 116
10476: PUSH
10477: LD_INT 117
10479: PUSH
10480: LD_INT 118
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: ST_TO_ADDR
10506: GO 11281
10508: LD_INT 16
10510: DOUBLE
10511: EQUAL
10512: IFTRUE 10516
10514: GO 10652
10516: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10517: LD_ADDR_VAR 0 1
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 4
10527: PUSH
10528: LD_INT 5
10530: PUSH
10531: LD_INT 7
10533: PUSH
10534: LD_INT 11
10536: PUSH
10537: LD_INT 12
10539: PUSH
10540: LD_INT 15
10542: PUSH
10543: LD_INT 16
10545: PUSH
10546: LD_INT 20
10548: PUSH
10549: LD_INT 21
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 23
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 26
10563: PUSH
10564: LD_INT 30
10566: PUSH
10567: LD_INT 31
10569: PUSH
10570: LD_INT 32
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 34
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 101
10602: PUSH
10603: LD_INT 102
10605: PUSH
10606: LD_INT 103
10608: PUSH
10609: LD_INT 106
10611: PUSH
10612: LD_INT 108
10614: PUSH
10615: LD_INT 112
10617: PUSH
10618: LD_INT 113
10620: PUSH
10621: LD_INT 114
10623: PUSH
10624: LD_INT 116
10626: PUSH
10627: LD_INT 117
10629: PUSH
10630: LD_INT 118
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: ST_TO_ADDR
10650: GO 11281
10652: LD_INT 17
10654: DOUBLE
10655: EQUAL
10656: IFTRUE 10660
10658: GO 10884
10660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10661: LD_ADDR_VAR 0 1
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: LD_INT 3
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: LD_INT 5
10680: PUSH
10681: LD_INT 6
10683: PUSH
10684: LD_INT 7
10686: PUSH
10687: LD_INT 8
10689: PUSH
10690: LD_INT 9
10692: PUSH
10693: LD_INT 10
10695: PUSH
10696: LD_INT 11
10698: PUSH
10699: LD_INT 12
10701: PUSH
10702: LD_INT 13
10704: PUSH
10705: LD_INT 14
10707: PUSH
10708: LD_INT 15
10710: PUSH
10711: LD_INT 16
10713: PUSH
10714: LD_INT 17
10716: PUSH
10717: LD_INT 18
10719: PUSH
10720: LD_INT 19
10722: PUSH
10723: LD_INT 20
10725: PUSH
10726: LD_INT 21
10728: PUSH
10729: LD_INT 22
10731: PUSH
10732: LD_INT 23
10734: PUSH
10735: LD_INT 24
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 26
10743: PUSH
10744: LD_INT 27
10746: PUSH
10747: LD_INT 28
10749: PUSH
10750: LD_INT 29
10752: PUSH
10753: LD_INT 30
10755: PUSH
10756: LD_INT 31
10758: PUSH
10759: LD_INT 32
10761: PUSH
10762: LD_INT 33
10764: PUSH
10765: LD_INT 34
10767: PUSH
10768: LD_INT 36
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 101
10810: PUSH
10811: LD_INT 102
10813: PUSH
10814: LD_INT 103
10816: PUSH
10817: LD_INT 104
10819: PUSH
10820: LD_INT 105
10822: PUSH
10823: LD_INT 106
10825: PUSH
10826: LD_INT 107
10828: PUSH
10829: LD_INT 108
10831: PUSH
10832: LD_INT 109
10834: PUSH
10835: LD_INT 110
10837: PUSH
10838: LD_INT 111
10840: PUSH
10841: LD_INT 112
10843: PUSH
10844: LD_INT 113
10846: PUSH
10847: LD_INT 114
10849: PUSH
10850: LD_INT 116
10852: PUSH
10853: LD_INT 117
10855: PUSH
10856: LD_INT 118
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: ST_TO_ADDR
10882: GO 11281
10884: LD_INT 18
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 11040
10892: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10893: LD_ADDR_VAR 0 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: LD_INT 4
10903: PUSH
10904: LD_INT 5
10906: PUSH
10907: LD_INT 7
10909: PUSH
10910: LD_INT 11
10912: PUSH
10913: LD_INT 12
10915: PUSH
10916: LD_INT 15
10918: PUSH
10919: LD_INT 16
10921: PUSH
10922: LD_INT 20
10924: PUSH
10925: LD_INT 21
10927: PUSH
10928: LD_INT 22
10930: PUSH
10931: LD_INT 23
10933: PUSH
10934: LD_INT 25
10936: PUSH
10937: LD_INT 26
10939: PUSH
10940: LD_INT 30
10942: PUSH
10943: LD_INT 31
10945: PUSH
10946: LD_INT 32
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 34
10954: PUSH
10955: LD_INT 35
10957: PUSH
10958: LD_INT 36
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 101
10986: PUSH
10987: LD_INT 102
10989: PUSH
10990: LD_INT 103
10992: PUSH
10993: LD_INT 106
10995: PUSH
10996: LD_INT 108
10998: PUSH
10999: LD_INT 112
11001: PUSH
11002: LD_INT 113
11004: PUSH
11005: LD_INT 114
11007: PUSH
11008: LD_INT 115
11010: PUSH
11011: LD_INT 116
11013: PUSH
11014: LD_INT 117
11016: PUSH
11017: LD_INT 118
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: ST_TO_ADDR
11038: GO 11281
11040: LD_INT 19
11042: DOUBLE
11043: EQUAL
11044: IFTRUE 11048
11046: GO 11280
11048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11049: LD_ADDR_VAR 0 1
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 4
11065: PUSH
11066: LD_INT 5
11068: PUSH
11069: LD_INT 6
11071: PUSH
11072: LD_INT 7
11074: PUSH
11075: LD_INT 8
11077: PUSH
11078: LD_INT 9
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 11
11086: PUSH
11087: LD_INT 12
11089: PUSH
11090: LD_INT 13
11092: PUSH
11093: LD_INT 14
11095: PUSH
11096: LD_INT 15
11098: PUSH
11099: LD_INT 16
11101: PUSH
11102: LD_INT 17
11104: PUSH
11105: LD_INT 18
11107: PUSH
11108: LD_INT 19
11110: PUSH
11111: LD_INT 20
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 22
11119: PUSH
11120: LD_INT 23
11122: PUSH
11123: LD_INT 24
11125: PUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 26
11131: PUSH
11132: LD_INT 27
11134: PUSH
11135: LD_INT 28
11137: PUSH
11138: LD_INT 29
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 31
11146: PUSH
11147: LD_INT 32
11149: PUSH
11150: LD_INT 33
11152: PUSH
11153: LD_INT 34
11155: PUSH
11156: LD_INT 35
11158: PUSH
11159: LD_INT 36
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 101
11202: PUSH
11203: LD_INT 102
11205: PUSH
11206: LD_INT 103
11208: PUSH
11209: LD_INT 104
11211: PUSH
11212: LD_INT 105
11214: PUSH
11215: LD_INT 106
11217: PUSH
11218: LD_INT 107
11220: PUSH
11221: LD_INT 108
11223: PUSH
11224: LD_INT 109
11226: PUSH
11227: LD_INT 110
11229: PUSH
11230: LD_INT 111
11232: PUSH
11233: LD_INT 112
11235: PUSH
11236: LD_INT 113
11238: PUSH
11239: LD_INT 114
11241: PUSH
11242: LD_INT 115
11244: PUSH
11245: LD_INT 116
11247: PUSH
11248: LD_INT 117
11250: PUSH
11251: LD_INT 118
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: ST_TO_ADDR
11278: GO 11281
11280: POP
// end else
11281: GO 11512
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 3
11296: PUSH
11297: LD_INT 4
11299: PUSH
11300: LD_INT 5
11302: PUSH
11303: LD_INT 6
11305: PUSH
11306: LD_INT 7
11308: PUSH
11309: LD_INT 8
11311: PUSH
11312: LD_INT 9
11314: PUSH
11315: LD_INT 10
11317: PUSH
11318: LD_INT 11
11320: PUSH
11321: LD_INT 12
11323: PUSH
11324: LD_INT 13
11326: PUSH
11327: LD_INT 14
11329: PUSH
11330: LD_INT 15
11332: PUSH
11333: LD_INT 16
11335: PUSH
11336: LD_INT 17
11338: PUSH
11339: LD_INT 18
11341: PUSH
11342: LD_INT 19
11344: PUSH
11345: LD_INT 20
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 23
11356: PUSH
11357: LD_INT 24
11359: PUSH
11360: LD_INT 25
11362: PUSH
11363: LD_INT 26
11365: PUSH
11366: LD_INT 27
11368: PUSH
11369: LD_INT 28
11371: PUSH
11372: LD_INT 29
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: LD_INT 31
11380: PUSH
11381: LD_INT 32
11383: PUSH
11384: LD_INT 33
11386: PUSH
11387: LD_INT 34
11389: PUSH
11390: LD_INT 35
11392: PUSH
11393: LD_INT 36
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 101
11436: PUSH
11437: LD_INT 102
11439: PUSH
11440: LD_INT 103
11442: PUSH
11443: LD_INT 104
11445: PUSH
11446: LD_INT 105
11448: PUSH
11449: LD_INT 106
11451: PUSH
11452: LD_INT 107
11454: PUSH
11455: LD_INT 108
11457: PUSH
11458: LD_INT 109
11460: PUSH
11461: LD_INT 110
11463: PUSH
11464: LD_INT 111
11466: PUSH
11467: LD_INT 112
11469: PUSH
11470: LD_INT 113
11472: PUSH
11473: LD_INT 114
11475: PUSH
11476: LD_INT 115
11478: PUSH
11479: LD_INT 116
11481: PUSH
11482: LD_INT 117
11484: PUSH
11485: LD_INT 118
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: ST_TO_ADDR
// if result then
11512: LD_VAR 0 1
11516: IFFALSE 11805
// begin normal :=  ;
11518: LD_ADDR_VAR 0 3
11522: PUSH
11523: LD_STRING 
11525: ST_TO_ADDR
// hardcore :=  ;
11526: LD_ADDR_VAR 0 4
11530: PUSH
11531: LD_STRING 
11533: ST_TO_ADDR
// for i = 1 to normalCounter do
11534: LD_ADDR_VAR 0 5
11538: PUSH
11539: DOUBLE
11540: LD_INT 1
11542: DEC
11543: ST_TO_ADDR
11544: LD_EXP 28
11548: PUSH
11549: FOR_TO
11550: IFFALSE 11651
// begin tmp := 0 ;
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: LD_STRING 0
11559: ST_TO_ADDR
// if result [ 1 ] then
11560: LD_VAR 0 1
11564: PUSH
11565: LD_INT 1
11567: ARRAY
11568: IFFALSE 11633
// if result [ 1 ] [ 1 ] = i then
11570: LD_VAR 0 1
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PUSH
11583: LD_VAR 0 5
11587: EQUAL
11588: IFFALSE 11633
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11590: LD_ADDR_VAR 0 1
11594: PUSH
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_INT 1
11602: PPUSH
11603: LD_VAR 0 1
11607: PUSH
11608: LD_INT 1
11610: ARRAY
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 3
11619: PPUSH
11620: CALL_OW 1
11624: ST_TO_ADDR
// tmp := 1 ;
11625: LD_ADDR_VAR 0 2
11629: PUSH
11630: LD_STRING 1
11632: ST_TO_ADDR
// end ; normal := normal & tmp ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_VAR 0 3
11642: PUSH
11643: LD_VAR 0 2
11647: STR
11648: ST_TO_ADDR
// end ;
11649: GO 11549
11651: POP
11652: POP
// for i = 1 to hardcoreCounter do
11653: LD_ADDR_VAR 0 5
11657: PUSH
11658: DOUBLE
11659: LD_INT 1
11661: DEC
11662: ST_TO_ADDR
11663: LD_EXP 29
11667: PUSH
11668: FOR_TO
11669: IFFALSE 11774
// begin tmp := 0 ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: LD_STRING 0
11678: ST_TO_ADDR
// if result [ 2 ] then
11679: LD_VAR 0 1
11683: PUSH
11684: LD_INT 2
11686: ARRAY
11687: IFFALSE 11756
// if result [ 2 ] [ 1 ] = 100 + i then
11689: LD_VAR 0 1
11693: PUSH
11694: LD_INT 2
11696: ARRAY
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PUSH
11702: LD_INT 100
11704: PUSH
11705: LD_VAR 0 5
11709: PLUS
11710: EQUAL
11711: IFFALSE 11756
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11713: LD_ADDR_VAR 0 1
11717: PUSH
11718: LD_VAR 0 1
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 2
11733: ARRAY
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: CALL_OW 3
11742: PPUSH
11743: CALL_OW 1
11747: ST_TO_ADDR
// tmp := 1 ;
11748: LD_ADDR_VAR 0 2
11752: PUSH
11753: LD_STRING 1
11755: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11756: LD_ADDR_VAR 0 4
11760: PUSH
11761: LD_VAR 0 4
11765: PUSH
11766: LD_VAR 0 2
11770: STR
11771: ST_TO_ADDR
// end ;
11772: GO 11668
11774: POP
11775: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11776: LD_STRING getStreamItemsFromMission("
11778: PUSH
11779: LD_VAR 0 3
11783: STR
11784: PUSH
11785: LD_STRING ","
11787: STR
11788: PUSH
11789: LD_VAR 0 4
11793: STR
11794: PUSH
11795: LD_STRING ")
11797: STR
11798: PPUSH
11799: CALL_OW 559
// end else
11803: GO 11812
// ToLua ( getStreamItemsFromMission("","") ) ;
11805: LD_STRING getStreamItemsFromMission("","")
11807: PPUSH
11808: CALL_OW 559
// end ;
11812: LD_VAR 0 1
11816: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11817: LD_EXP 27
11821: PUSH
11822: LD_EXP 32
11826: AND
11827: IFFALSE 11951
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
11835: PPUSH
// begin enable ;
11836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: LD_INT 22
11844: PUSH
11845: LD_OWVAR 2
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 34
11859: PUSH
11860: LD_INT 7
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 34
11869: PUSH
11870: LD_INT 45
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 34
11879: PUSH
11880: LD_INT 28
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 34
11889: PUSH
11890: LD_INT 47
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PPUSH
11908: CALL_OW 69
11912: ST_TO_ADDR
// if not tmp then
11913: LD_VAR 0 2
11917: NOT
11918: IFFALSE 11922
// exit ;
11920: GO 11951
// for i in tmp do
11922: LD_ADDR_VAR 0 1
11926: PUSH
11927: LD_VAR 0 2
11931: PUSH
11932: FOR_IN
11933: IFFALSE 11949
// begin SetLives ( i , 0 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 0
11942: PPUSH
11943: CALL_OW 234
// end ;
11947: GO 11932
11949: POP
11950: POP
// end ;
11951: PPOPN 2
11953: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11954: LD_EXP 27
11958: PUSH
11959: LD_EXP 33
11963: AND
11964: IFFALSE 12048
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
11972: PPUSH
// begin enable ;
11973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_OWVAR 2
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 32
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: ST_TO_ADDR
// if not tmp then
12010: LD_VAR 0 2
12014: NOT
12015: IFFALSE 12019
// exit ;
12017: GO 12048
// for i in tmp do
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: LD_VAR 0 2
12028: PUSH
12029: FOR_IN
12030: IFFALSE 12046
// begin SetLives ( i , 0 ) ;
12032: LD_VAR 0 1
12036: PPUSH
12037: LD_INT 0
12039: PPUSH
12040: CALL_OW 234
// end ;
12044: GO 12029
12046: POP
12047: POP
// end ;
12048: PPOPN 2
12050: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12051: LD_EXP 27
12055: PUSH
12056: LD_EXP 30
12060: AND
12061: IFFALSE 12154
12063: GO 12065
12065: DISABLE
12066: LD_INT 0
12068: PPUSH
// begin enable ;
12069: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12070: LD_ADDR_VAR 0 1
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_OWVAR 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 2
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 5
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 9
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 8
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PPUSH
12130: CALL_OW 69
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12152
// begin SetClass ( i , 1 ) ;
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 336
// end ;
12150: GO 12135
12152: POP
12153: POP
// end ;
12154: PPOPN 1
12156: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12157: LD_EXP 27
12161: PUSH
12162: LD_EXP 31
12166: AND
12167: PUSH
12168: LD_OWVAR 65
12172: PUSH
12173: LD_INT 7
12175: LESS
12176: AND
12177: IFFALSE 12191
12179: GO 12181
12181: DISABLE
// begin enable ;
12182: ENABLE
// game_speed := 7 ;
12183: LD_ADDR_OWVAR 65
12187: PUSH
12188: LD_INT 7
12190: ST_TO_ADDR
// end ;
12191: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12192: LD_EXP 27
12196: PUSH
12197: LD_EXP 34
12201: AND
12202: IFFALSE 12404
12204: GO 12206
12206: DISABLE
12207: LD_INT 0
12209: PPUSH
12210: PPUSH
12211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12212: LD_ADDR_VAR 0 3
12216: PUSH
12217: LD_INT 81
12219: PUSH
12220: LD_OWVAR 2
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 21
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: ST_TO_ADDR
// if not tmp then
12248: LD_VAR 0 3
12252: NOT
12253: IFFALSE 12257
// exit ;
12255: GO 12404
// if tmp > 5 then
12257: LD_VAR 0 3
12261: PUSH
12262: LD_INT 5
12264: GREATER
12265: IFFALSE 12277
// k := 5 else
12267: LD_ADDR_VAR 0 2
12271: PUSH
12272: LD_INT 5
12274: ST_TO_ADDR
12275: GO 12287
// k := tmp ;
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: LD_VAR 0 3
12286: ST_TO_ADDR
// for i := 1 to k do
12287: LD_ADDR_VAR 0 1
12291: PUSH
12292: DOUBLE
12293: LD_INT 1
12295: DEC
12296: ST_TO_ADDR
12297: LD_VAR 0 2
12301: PUSH
12302: FOR_TO
12303: IFFALSE 12402
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_VAR 0 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 1
12320: PUSH
12321: LD_INT 4
12323: MOD
12324: PUSH
12325: LD_INT 1
12327: PLUS
12328: PPUSH
12329: CALL_OW 259
12333: PUSH
12334: LD_INT 10
12336: LESS
12337: IFFALSE 12400
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12339: LD_VAR 0 3
12343: PUSH
12344: LD_VAR 0 1
12348: ARRAY
12349: PPUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 4
12357: MOD
12358: PUSH
12359: LD_INT 1
12361: PLUS
12362: PPUSH
12363: LD_VAR 0 3
12367: PUSH
12368: LD_VAR 0 1
12372: ARRAY
12373: PPUSH
12374: LD_VAR 0 1
12378: PUSH
12379: LD_INT 4
12381: MOD
12382: PUSH
12383: LD_INT 1
12385: PLUS
12386: PPUSH
12387: CALL_OW 259
12391: PUSH
12392: LD_INT 1
12394: PLUS
12395: PPUSH
12396: CALL_OW 237
12400: GO 12302
12402: POP
12403: POP
// end ;
12404: PPOPN 3
12406: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12407: LD_EXP 27
12411: PUSH
12412: LD_EXP 35
12416: AND
12417: IFFALSE 12437
12419: GO 12421
12421: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12422: LD_INT 4
12424: PPUSH
12425: LD_OWVAR 2
12429: PPUSH
12430: LD_INT 0
12432: PPUSH
12433: CALL_OW 324
12437: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12438: LD_EXP 27
12442: PUSH
12443: LD_EXP 64
12447: AND
12448: IFFALSE 12468
12450: GO 12452
12452: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12453: LD_INT 19
12455: PPUSH
12456: LD_OWVAR 2
12460: PPUSH
12461: LD_INT 0
12463: PPUSH
12464: CALL_OW 324
12468: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12469: LD_EXP 27
12473: PUSH
12474: LD_EXP 36
12478: AND
12479: IFFALSE 12581
12481: GO 12483
12483: DISABLE
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
// begin enable ;
12488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: LD_INT 22
12496: PUSH
12497: LD_OWVAR 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 34
12511: PUSH
12512: LD_INT 11
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 34
12521: PUSH
12522: LD_INT 30
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 69
12542: ST_TO_ADDR
// if not tmp then
12543: LD_VAR 0 2
12547: NOT
12548: IFFALSE 12552
// exit ;
12550: GO 12581
// for i in tmp do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: LD_VAR 0 2
12561: PUSH
12562: FOR_IN
12563: IFFALSE 12579
// begin SetLives ( i , 0 ) ;
12565: LD_VAR 0 1
12569: PPUSH
12570: LD_INT 0
12572: PPUSH
12573: CALL_OW 234
// end ;
12577: GO 12562
12579: POP
12580: POP
// end ;
12581: PPOPN 2
12583: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12584: LD_EXP 27
12588: PUSH
12589: LD_EXP 37
12593: AND
12594: IFFALSE 12614
12596: GO 12598
12598: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12599: LD_INT 32
12601: PPUSH
12602: LD_OWVAR 2
12606: PPUSH
12607: LD_INT 0
12609: PPUSH
12610: CALL_OW 324
12614: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12615: LD_EXP 27
12619: PUSH
12620: LD_EXP 38
12624: AND
12625: IFFALSE 12806
12627: GO 12629
12629: DISABLE
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_OWVAR 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 33
12654: PUSH
12655: LD_INT 3
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: ST_TO_ADDR
// if not tmp then
12671: LD_VAR 0 2
12675: NOT
12676: IFFALSE 12680
// exit ;
12678: GO 12806
// side := 0 ;
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// for i := 1 to 8 do
12688: LD_ADDR_VAR 0 1
12692: PUSH
12693: DOUBLE
12694: LD_INT 1
12696: DEC
12697: ST_TO_ADDR
12698: LD_INT 8
12700: PUSH
12701: FOR_TO
12702: IFFALSE 12750
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12704: LD_OWVAR 2
12708: PUSH
12709: LD_VAR 0 1
12713: NONEQUAL
12714: PUSH
12715: LD_OWVAR 2
12719: PPUSH
12720: LD_VAR 0 1
12724: PPUSH
12725: CALL_OW 81
12729: PUSH
12730: LD_INT 2
12732: EQUAL
12733: AND
12734: IFFALSE 12748
// begin side := i ;
12736: LD_ADDR_VAR 0 3
12740: PUSH
12741: LD_VAR 0 1
12745: ST_TO_ADDR
// break ;
12746: GO 12750
// end ;
12748: GO 12701
12750: POP
12751: POP
// if not side then
12752: LD_VAR 0 3
12756: NOT
12757: IFFALSE 12761
// exit ;
12759: GO 12806
// for i := 1 to tmp do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: DOUBLE
12767: LD_INT 1
12769: DEC
12770: ST_TO_ADDR
12771: LD_VAR 0 2
12775: PUSH
12776: FOR_TO
12777: IFFALSE 12804
// if Prob ( 60 ) then
12779: LD_INT 60
12781: PPUSH
12782: CALL_OW 13
12786: IFFALSE 12802
// SetSide ( i , side ) ;
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: CALL_OW 235
12802: GO 12776
12804: POP
12805: POP
// end ;
12806: PPOPN 3
12808: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12809: LD_EXP 27
12813: PUSH
12814: LD_EXP 40
12818: AND
12819: IFFALSE 12938
12821: GO 12823
12823: DISABLE
12824: LD_INT 0
12826: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_OWVAR 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 21
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 3
12856: PUSH
12857: LD_INT 23
12859: PUSH
12860: LD_INT 0
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: PUSH
12881: FOR_IN
12882: IFFALSE 12936
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 257
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: IN
12912: IFFALSE 12934
// SetClass ( un , rand ( 1 , 4 ) ) ;
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: LD_INT 4
12924: PPUSH
12925: CALL_OW 12
12929: PPUSH
12930: CALL_OW 336
12934: GO 12881
12936: POP
12937: POP
// end ;
12938: PPOPN 1
12940: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12941: LD_EXP 27
12945: PUSH
12946: LD_EXP 39
12950: AND
12951: IFFALSE 13030
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12959: LD_ADDR_VAR 0 1
12963: PUSH
12964: LD_INT 22
12966: PUSH
12967: LD_OWVAR 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: ST_TO_ADDR
// if not tmp then
12995: LD_VAR 0 1
12999: NOT
13000: IFFALSE 13004
// exit ;
13002: GO 13030
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13004: LD_VAR 0 1
13008: PUSH
13009: LD_INT 1
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 12
13021: ARRAY
13022: PPUSH
13023: LD_INT 100
13025: PPUSH
13026: CALL_OW 234
// end ;
13030: PPOPN 1
13032: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13033: LD_EXP 27
13037: PUSH
13038: LD_EXP 41
13042: AND
13043: IFFALSE 13141
13045: GO 13047
13047: DISABLE
13048: LD_INT 0
13050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_OWVAR 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// if not tmp then
13087: LD_VAR 0 1
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13141
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: PPUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 12
13113: ARRAY
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 4
13120: PPUSH
13121: CALL_OW 12
13125: PPUSH
13126: LD_INT 3000
13128: PPUSH
13129: LD_INT 9000
13131: PPUSH
13132: CALL_OW 12
13136: PPUSH
13137: CALL_OW 492
// end ;
13141: PPOPN 1
13143: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13144: LD_EXP 27
13148: PUSH
13149: LD_EXP 42
13153: AND
13154: IFFALSE 13174
13156: GO 13158
13158: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13159: LD_INT 1
13161: PPUSH
13162: LD_OWVAR 2
13166: PPUSH
13167: LD_INT 0
13169: PPUSH
13170: CALL_OW 324
13174: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13175: LD_EXP 27
13179: PUSH
13180: LD_EXP 43
13184: AND
13185: IFFALSE 13268
13187: GO 13189
13189: DISABLE
13190: LD_INT 0
13192: PPUSH
13193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: LD_INT 22
13201: PUSH
13202: LD_OWVAR 2
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 3
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: ST_TO_ADDR
// if not tmp then
13230: LD_VAR 0 2
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13268
// for i in tmp do
13239: LD_ADDR_VAR 0 1
13243: PUSH
13244: LD_VAR 0 2
13248: PUSH
13249: FOR_IN
13250: IFFALSE 13266
// SetBLevel ( i , 10 ) ;
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 10
13259: PPUSH
13260: CALL_OW 241
13264: GO 13249
13266: POP
13267: POP
// end ;
13268: PPOPN 2
13270: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13271: LD_EXP 27
13275: PUSH
13276: LD_EXP 44
13280: AND
13281: IFFALSE 13392
13283: GO 13285
13285: DISABLE
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
13290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_OWVAR 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: ST_TO_ADDR
// if not tmp then
13327: LD_VAR 0 3
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13392
// un := tmp [ rand ( 1 , tmp ) ] ;
13336: LD_ADDR_VAR 0 2
13340: PUSH
13341: LD_VAR 0 3
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_VAR 0 3
13353: PPUSH
13354: CALL_OW 12
13358: ARRAY
13359: ST_TO_ADDR
// if Crawls ( un ) then
13360: LD_VAR 0 2
13364: PPUSH
13365: CALL_OW 318
13369: IFFALSE 13380
// ComWalk ( un ) ;
13371: LD_VAR 0 2
13375: PPUSH
13376: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13380: LD_VAR 0 2
13384: PPUSH
13385: LD_INT 5
13387: PPUSH
13388: CALL_OW 336
// end ;
13392: PPOPN 3
13394: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13395: LD_EXP 27
13399: PUSH
13400: LD_EXP 45
13404: AND
13405: PUSH
13406: LD_OWVAR 67
13410: PUSH
13411: LD_INT 4
13413: LESS
13414: AND
13415: IFFALSE 13434
13417: GO 13419
13419: DISABLE
// begin Difficulty := Difficulty + 1 ;
13420: LD_ADDR_OWVAR 67
13424: PUSH
13425: LD_OWVAR 67
13429: PUSH
13430: LD_INT 1
13432: PLUS
13433: ST_TO_ADDR
// end ;
13434: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13435: LD_EXP 27
13439: PUSH
13440: LD_EXP 46
13444: AND
13445: IFFALSE 13548
13447: GO 13449
13449: DISABLE
13450: LD_INT 0
13452: PPUSH
// begin for i := 1 to 5 do
13453: LD_ADDR_VAR 0 1
13457: PUSH
13458: DOUBLE
13459: LD_INT 1
13461: DEC
13462: ST_TO_ADDR
13463: LD_INT 5
13465: PUSH
13466: FOR_TO
13467: IFFALSE 13546
// begin uc_nation := nation_nature ;
13469: LD_ADDR_OWVAR 21
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// uc_side := 0 ;
13477: LD_ADDR_OWVAR 20
13481: PUSH
13482: LD_INT 0
13484: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13485: LD_ADDR_OWVAR 29
13489: PUSH
13490: LD_INT 12
13492: PUSH
13493: LD_INT 12
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: ST_TO_ADDR
// hc_agressivity := 20 ;
13500: LD_ADDR_OWVAR 35
13504: PUSH
13505: LD_INT 20
13507: ST_TO_ADDR
// hc_class := class_tiger ;
13508: LD_ADDR_OWVAR 28
13512: PUSH
13513: LD_INT 14
13515: ST_TO_ADDR
// hc_gallery :=  ;
13516: LD_ADDR_OWVAR 33
13520: PUSH
13521: LD_STRING 
13523: ST_TO_ADDR
// hc_name :=  ;
13524: LD_ADDR_OWVAR 26
13528: PUSH
13529: LD_STRING 
13531: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13532: CALL_OW 44
13536: PPUSH
13537: LD_INT 0
13539: PPUSH
13540: CALL_OW 51
// end ;
13544: GO 13466
13546: POP
13547: POP
// end ;
13548: PPOPN 1
13550: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13551: LD_EXP 27
13555: PUSH
13556: LD_EXP 47
13560: AND
13561: IFFALSE 13570
13563: GO 13565
13565: DISABLE
// StreamSibBomb ;
13566: CALL 13571 0 0
13570: END
// export function StreamSibBomb ; var i , x , y ; begin
13571: LD_INT 0
13573: PPUSH
13574: PPUSH
13575: PPUSH
13576: PPUSH
// result := false ;
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// for i := 1 to 16 do
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: DOUBLE
13591: LD_INT 1
13593: DEC
13594: ST_TO_ADDR
13595: LD_INT 16
13597: PUSH
13598: FOR_TO
13599: IFFALSE 13798
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13601: LD_ADDR_VAR 0 3
13605: PUSH
13606: LD_INT 10
13608: PUSH
13609: LD_INT 20
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: LD_INT 40
13617: PUSH
13618: LD_INT 50
13620: PUSH
13621: LD_INT 60
13623: PUSH
13624: LD_INT 70
13626: PUSH
13627: LD_INT 80
13629: PUSH
13630: LD_INT 90
13632: PUSH
13633: LD_INT 100
13635: PUSH
13636: LD_INT 110
13638: PUSH
13639: LD_INT 120
13641: PUSH
13642: LD_INT 130
13644: PUSH
13645: LD_INT 140
13647: PUSH
13648: LD_INT 150
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 1
13670: PPUSH
13671: LD_INT 15
13673: PPUSH
13674: CALL_OW 12
13678: ARRAY
13679: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13680: LD_ADDR_VAR 0 4
13684: PUSH
13685: LD_INT 10
13687: PUSH
13688: LD_INT 20
13690: PUSH
13691: LD_INT 30
13693: PUSH
13694: LD_INT 40
13696: PUSH
13697: LD_INT 50
13699: PUSH
13700: LD_INT 60
13702: PUSH
13703: LD_INT 70
13705: PUSH
13706: LD_INT 80
13708: PUSH
13709: LD_INT 90
13711: PUSH
13712: LD_INT 100
13714: PUSH
13715: LD_INT 110
13717: PUSH
13718: LD_INT 120
13720: PUSH
13721: LD_INT 130
13723: PUSH
13724: LD_INT 140
13726: PUSH
13727: LD_INT 150
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 1
13749: PPUSH
13750: LD_INT 15
13752: PPUSH
13753: CALL_OW 12
13757: ARRAY
13758: ST_TO_ADDR
// if ValidHex ( x , y ) then
13759: LD_VAR 0 3
13763: PPUSH
13764: LD_VAR 0 4
13768: PPUSH
13769: CALL_OW 488
13773: IFFALSE 13796
// begin result := [ x , y ] ;
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_VAR 0 3
13784: PUSH
13785: LD_VAR 0 4
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: ST_TO_ADDR
// break ;
13794: GO 13798
// end ; end ;
13796: GO 13598
13798: POP
13799: POP
// if result then
13800: LD_VAR 0 1
13804: IFFALSE 13864
// begin ToLua ( playSibBomb() ) ;
13806: LD_STRING playSibBomb()
13808: PPUSH
13809: CALL_OW 559
// wait ( 0 0$14 ) ;
13813: LD_INT 490
13815: PPUSH
13816: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13820: LD_VAR 0 1
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PPUSH
13829: LD_VAR 0 1
13833: PUSH
13834: LD_INT 2
13836: ARRAY
13837: PPUSH
13838: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13842: LD_VAR 0 1
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 2
13858: ARRAY
13859: PPUSH
13860: CALL_OW 429
// end ; end ;
13864: LD_VAR 0 1
13868: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13869: LD_EXP 27
13873: PUSH
13874: LD_EXP 49
13878: AND
13879: IFFALSE 13891
13881: GO 13883
13883: DISABLE
// YouLost (  ) ;
13884: LD_STRING 
13886: PPUSH
13887: CALL_OW 104
13891: END
// every 0 0$1 trigger StreamModeActive and sFog do
13892: LD_EXP 27
13896: PUSH
13897: LD_EXP 48
13901: AND
13902: IFFALSE 13916
13904: GO 13906
13906: DISABLE
// FogOff ( your_side ) ;
13907: LD_OWVAR 2
13911: PPUSH
13912: CALL_OW 344
13916: END
// every 0 0$1 trigger StreamModeActive and sSun do
13917: LD_EXP 27
13921: PUSH
13922: LD_EXP 50
13926: AND
13927: IFFALSE 13955
13929: GO 13931
13931: DISABLE
// begin solar_recharge_percent := 0 ;
13932: LD_ADDR_OWVAR 79
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13940: LD_INT 10500
13942: PPUSH
13943: CALL_OW 67
// solar_recharge_percent := 100 ;
13947: LD_ADDR_OWVAR 79
13951: PUSH
13952: LD_INT 100
13954: ST_TO_ADDR
// end ;
13955: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13956: LD_EXP 27
13960: PUSH
13961: LD_EXP 51
13965: AND
13966: IFFALSE 14205
13968: GO 13970
13970: DISABLE
13971: LD_INT 0
13973: PPUSH
13974: PPUSH
13975: PPUSH
// begin tmp := [ ] ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: EMPTY
13982: ST_TO_ADDR
// for i := 1 to 6 do
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: DOUBLE
13989: LD_INT 1
13991: DEC
13992: ST_TO_ADDR
13993: LD_INT 6
13995: PUSH
13996: FOR_TO
13997: IFFALSE 14102
// begin uc_nation := nation_nature ;
13999: LD_ADDR_OWVAR 21
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// uc_side := 0 ;
14007: LD_ADDR_OWVAR 20
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14015: LD_ADDR_OWVAR 29
14019: PUSH
14020: LD_INT 12
14022: PUSH
14023: LD_INT 12
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: ST_TO_ADDR
// hc_agressivity := 20 ;
14030: LD_ADDR_OWVAR 35
14034: PUSH
14035: LD_INT 20
14037: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14038: LD_ADDR_OWVAR 28
14042: PUSH
14043: LD_INT 17
14045: ST_TO_ADDR
// hc_gallery :=  ;
14046: LD_ADDR_OWVAR 33
14050: PUSH
14051: LD_STRING 
14053: ST_TO_ADDR
// hc_name :=  ;
14054: LD_ADDR_OWVAR 26
14058: PUSH
14059: LD_STRING 
14061: ST_TO_ADDR
// un := CreateHuman ;
14062: LD_ADDR_VAR 0 2
14066: PUSH
14067: CALL_OW 44
14071: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 51
// tmp := tmp ^ un ;
14084: LD_ADDR_VAR 0 3
14088: PUSH
14089: LD_VAR 0 3
14093: PUSH
14094: LD_VAR 0 2
14098: ADD
14099: ST_TO_ADDR
// end ;
14100: GO 13996
14102: POP
14103: POP
// repeat wait ( 0 0$1 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// for un in tmp do
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_VAR 0 3
14120: PUSH
14121: FOR_IN
14122: IFFALSE 14196
// begin if IsDead ( un ) then
14124: LD_VAR 0 2
14128: PPUSH
14129: CALL_OW 301
14133: IFFALSE 14153
// begin tmp := tmp diff un ;
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: LD_VAR 0 3
14144: PUSH
14145: LD_VAR 0 2
14149: DIFF
14150: ST_TO_ADDR
// continue ;
14151: GO 14121
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14153: LD_VAR 0 2
14157: PPUSH
14158: LD_INT 3
14160: PUSH
14161: LD_INT 22
14163: PUSH
14164: LD_INT 0
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PPUSH
14175: CALL_OW 69
14179: PPUSH
14180: LD_VAR 0 2
14184: PPUSH
14185: CALL_OW 74
14189: PPUSH
14190: CALL_OW 115
// end ;
14194: GO 14121
14196: POP
14197: POP
// until not tmp ;
14198: LD_VAR 0 3
14202: NOT
14203: IFFALSE 14104
// end ;
14205: PPOPN 3
14207: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14208: LD_EXP 27
14212: PUSH
14213: LD_EXP 52
14217: AND
14218: IFFALSE 14272
14220: GO 14222
14222: DISABLE
// begin ToLua ( displayTroll(); ) ;
14223: LD_STRING displayTroll();
14225: PPUSH
14226: CALL_OW 559
// wait ( 3 3$00 ) ;
14230: LD_INT 6300
14232: PPUSH
14233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14237: LD_STRING hideTroll();
14239: PPUSH
14240: CALL_OW 559
// wait ( 1 1$00 ) ;
14244: LD_INT 2100
14246: PPUSH
14247: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14251: LD_STRING displayTroll();
14253: PPUSH
14254: CALL_OW 559
// wait ( 1 1$00 ) ;
14258: LD_INT 2100
14260: PPUSH
14261: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14265: LD_STRING hideTroll();
14267: PPUSH
14268: CALL_OW 559
// end ;
14272: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14273: LD_EXP 27
14277: PUSH
14278: LD_EXP 53
14282: AND
14283: IFFALSE 14346
14285: GO 14287
14287: DISABLE
14288: LD_INT 0
14290: PPUSH
// begin p := 0 ;
14291: LD_ADDR_VAR 0 1
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// repeat game_speed := 1 ;
14299: LD_ADDR_OWVAR 65
14303: PUSH
14304: LD_INT 1
14306: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14307: LD_INT 35
14309: PPUSH
14310: CALL_OW 67
// p := p + 1 ;
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_VAR 0 1
14323: PUSH
14324: LD_INT 1
14326: PLUS
14327: ST_TO_ADDR
// until p >= 60 ;
14328: LD_VAR 0 1
14332: PUSH
14333: LD_INT 60
14335: GREATEREQUAL
14336: IFFALSE 14299
// game_speed := 4 ;
14338: LD_ADDR_OWVAR 65
14342: PUSH
14343: LD_INT 4
14345: ST_TO_ADDR
// end ;
14346: PPOPN 1
14348: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14349: LD_EXP 27
14353: PUSH
14354: LD_EXP 54
14358: AND
14359: IFFALSE 14505
14361: GO 14363
14363: DISABLE
14364: LD_INT 0
14366: PPUSH
14367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_OWVAR 2
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 30
14390: PUSH
14391: LD_INT 0
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 1
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if not depot then
14422: LD_VAR 0 1
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14505
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_VAR 0 1
14440: PUSH
14441: LD_INT 1
14443: PPUSH
14444: LD_VAR 0 1
14448: PPUSH
14449: CALL_OW 12
14453: ARRAY
14454: PPUSH
14455: CALL_OW 274
14459: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_INT 1
14467: PPUSH
14468: LD_INT 0
14470: PPUSH
14471: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14475: LD_VAR 0 2
14479: PPUSH
14480: LD_INT 2
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14490: LD_VAR 0 2
14494: PPUSH
14495: LD_INT 3
14497: PPUSH
14498: LD_INT 0
14500: PPUSH
14501: CALL_OW 277
// end ;
14505: PPOPN 2
14507: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14508: LD_EXP 27
14512: PUSH
14513: LD_EXP 55
14517: AND
14518: IFFALSE 14615
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14526: LD_ADDR_VAR 0 1
14530: PUSH
14531: LD_INT 22
14533: PUSH
14534: LD_OWVAR 2
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 21
14545: PUSH
14546: LD_INT 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 3
14555: PUSH
14556: LD_INT 23
14558: PUSH
14559: LD_INT 0
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: ST_TO_ADDR
// if not tmp then
14580: LD_VAR 0 1
14584: NOT
14585: IFFALSE 14589
// exit ;
14587: GO 14615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14589: LD_VAR 0 1
14593: PUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 12
14606: ARRAY
14607: PPUSH
14608: LD_INT 200
14610: PPUSH
14611: CALL_OW 234
// end ;
14615: PPOPN 1
14617: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14618: LD_EXP 27
14622: PUSH
14623: LD_EXP 56
14627: AND
14628: IFFALSE 14707
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14636: LD_ADDR_VAR 0 1
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_OWVAR 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PPUSH
14667: CALL_OW 69
14671: ST_TO_ADDR
// if not tmp then
14672: LD_VAR 0 1
14676: NOT
14677: IFFALSE 14681
// exit ;
14679: GO 14707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14681: LD_VAR 0 1
14685: PUSH
14686: LD_INT 1
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 12
14698: ARRAY
14699: PPUSH
14700: LD_INT 60
14702: PPUSH
14703: CALL_OW 234
// end ;
14707: PPOPN 1
14709: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14710: LD_EXP 27
14714: PUSH
14715: LD_EXP 57
14719: AND
14720: IFFALSE 14819
14722: GO 14724
14724: DISABLE
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
// begin enable ;
14729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14730: LD_ADDR_VAR 0 1
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_OWVAR 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 61
14749: PUSH
14750: EMPTY
14751: LIST
14752: PUSH
14753: LD_INT 33
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 69
14772: ST_TO_ADDR
// if not tmp then
14773: LD_VAR 0 1
14777: NOT
14778: IFFALSE 14782
// exit ;
14780: GO 14819
// for i in tmp do
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_VAR 0 1
14791: PUSH
14792: FOR_IN
14793: IFFALSE 14817
// if IsControledBy ( i ) then
14795: LD_VAR 0 2
14799: PPUSH
14800: CALL_OW 312
14804: IFFALSE 14815
// ComUnlink ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 136
14815: GO 14792
14817: POP
14818: POP
// end ;
14819: PPOPN 2
14821: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14822: LD_EXP 27
14826: PUSH
14827: LD_EXP 58
14831: AND
14832: IFFALSE 14972
14834: GO 14836
14836: DISABLE
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
// begin ToLua ( displayPowell(); ) ;
14841: LD_STRING displayPowell();
14843: PPUSH
14844: CALL_OW 559
// uc_side := 0 ;
14848: LD_ADDR_OWVAR 20
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// uc_nation := 2 ;
14856: LD_ADDR_OWVAR 21
14860: PUSH
14861: LD_INT 2
14863: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14864: LD_ADDR_OWVAR 37
14868: PUSH
14869: LD_INT 14
14871: ST_TO_ADDR
// vc_engine := engine_siberite ;
14872: LD_ADDR_OWVAR 39
14876: PUSH
14877: LD_INT 3
14879: ST_TO_ADDR
// vc_control := control_apeman ;
14880: LD_ADDR_OWVAR 38
14884: PUSH
14885: LD_INT 5
14887: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14888: LD_ADDR_OWVAR 40
14892: PUSH
14893: LD_INT 29
14895: ST_TO_ADDR
// un := CreateVehicle ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: CALL_OW 45
14905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14918: LD_INT 35
14920: PPUSH
14921: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14925: LD_VAR 0 2
14929: PPUSH
14930: LD_INT 22
14932: PUSH
14933: LD_OWVAR 2
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PPUSH
14942: CALL_OW 69
14946: PPUSH
14947: LD_VAR 0 2
14951: PPUSH
14952: CALL_OW 74
14956: PPUSH
14957: CALL_OW 115
// until IsDead ( un ) ;
14961: LD_VAR 0 2
14965: PPUSH
14966: CALL_OW 301
14970: IFFALSE 14918
// end ;
14972: PPOPN 2
14974: END
// every 0 0$1 trigger StreamModeActive and sStu do
14975: LD_EXP 27
14979: PUSH
14980: LD_EXP 66
14984: AND
14985: IFFALSE 15001
14987: GO 14989
14989: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14990: LD_STRING displayStucuk();
14992: PPUSH
14993: CALL_OW 559
// ResetFog ;
14997: CALL_OW 335
// end ;
15001: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15002: LD_EXP 27
15006: PUSH
15007: LD_EXP 59
15011: AND
15012: IFFALSE 15153
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 21
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 2
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15153
// un := tmp [ rand ( 1 , tmp ) ] ;
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_VAR 0 2
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_VAR 0 2
15083: PPUSH
15084: CALL_OW 12
15088: ARRAY
15089: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_INT 0
15097: PPUSH
15098: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15102: LD_VAR 0 1
15106: PPUSH
15107: LD_OWVAR 3
15111: PUSH
15112: LD_VAR 0 1
15116: DIFF
15117: PPUSH
15118: LD_VAR 0 1
15122: PPUSH
15123: CALL_OW 74
15127: PPUSH
15128: CALL_OW 115
// wait ( 0 0$20 ) ;
15132: LD_INT 700
15134: PPUSH
15135: CALL_OW 67
// SetSide ( un , your_side ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_OWVAR 2
15148: PPUSH
15149: CALL_OW 235
// end ;
15153: PPOPN 2
15155: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15156: LD_EXP 27
15160: PUSH
15161: LD_EXP 60
15165: AND
15166: IFFALSE 15272
15168: GO 15170
15170: DISABLE
15171: LD_INT 0
15173: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15174: LD_ADDR_VAR 0 1
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_OWVAR 2
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 30
15196: PUSH
15197: LD_INT 0
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 30
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: ST_TO_ADDR
// if not depot then
15228: LD_VAR 0 1
15232: NOT
15233: IFFALSE 15237
// exit ;
15235: GO 15272
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15237: LD_VAR 0 1
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: PPUSH
15246: CALL_OW 250
15250: PPUSH
15251: LD_VAR 0 1
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: PPUSH
15260: CALL_OW 251
15264: PPUSH
15265: LD_INT 70
15267: PPUSH
15268: CALL_OW 495
// end ;
15272: PPOPN 1
15274: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15275: LD_EXP 27
15279: PUSH
15280: LD_EXP 61
15284: AND
15285: IFFALSE 15496
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15297: LD_ADDR_VAR 0 5
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_OWVAR 2
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: ST_TO_ADDR
// if not tmp then
15333: LD_VAR 0 5
15337: NOT
15338: IFFALSE 15342
// exit ;
15340: GO 15496
// for i in tmp do
15342: LD_ADDR_VAR 0 1
15346: PUSH
15347: LD_VAR 0 5
15351: PUSH
15352: FOR_IN
15353: IFFALSE 15494
// begin d := rand ( 0 , 5 ) ;
15355: LD_ADDR_VAR 0 4
15359: PUSH
15360: LD_INT 0
15362: PPUSH
15363: LD_INT 5
15365: PPUSH
15366: CALL_OW 12
15370: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 250
15385: PPUSH
15386: LD_VAR 0 4
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: CALL_OW 12
15401: PPUSH
15402: CALL_OW 272
15406: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 251
15421: PPUSH
15422: LD_VAR 0 4
15426: PPUSH
15427: LD_INT 3
15429: PPUSH
15430: LD_INT 12
15432: PPUSH
15433: CALL_OW 12
15437: PPUSH
15438: CALL_OW 273
15442: ST_TO_ADDR
// if ValidHex ( x , y ) then
15443: LD_VAR 0 2
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: CALL_OW 488
15457: IFFALSE 15492
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_VAR 0 2
15468: PPUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_INT 3
15476: PPUSH
15477: LD_INT 6
15479: PPUSH
15480: CALL_OW 12
15484: PPUSH
15485: LD_INT 1
15487: PPUSH
15488: CALL_OW 483
// end ;
15492: GO 15352
15494: POP
15495: POP
// end ;
15496: PPOPN 5
15498: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15499: LD_EXP 27
15503: PUSH
15504: LD_EXP 62
15508: AND
15509: IFFALSE 15603
15511: GO 15513
15513: DISABLE
15514: LD_INT 0
15516: PPUSH
15517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15518: LD_ADDR_VAR 0 2
15522: PUSH
15523: LD_INT 22
15525: PUSH
15526: LD_OWVAR 2
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 32
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: ST_TO_ADDR
// if not tmp then
15565: LD_VAR 0 2
15569: NOT
15570: IFFALSE 15574
// exit ;
15572: GO 15603
// for i in tmp do
15574: LD_ADDR_VAR 0 1
15578: PUSH
15579: LD_VAR 0 2
15583: PUSH
15584: FOR_IN
15585: IFFALSE 15601
// SetFuel ( i , 0 ) ;
15587: LD_VAR 0 1
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: CALL_OW 240
15599: GO 15584
15601: POP
15602: POP
// end ;
15603: PPOPN 2
15605: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15606: LD_EXP 27
15610: PUSH
15611: LD_EXP 63
15615: AND
15616: IFFALSE 15682
15618: GO 15620
15620: DISABLE
15621: LD_INT 0
15623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: LD_INT 22
15631: PUSH
15632: LD_OWVAR 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 30
15643: PUSH
15644: LD_INT 29
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: ST_TO_ADDR
// if not tmp then
15660: LD_VAR 0 1
15664: NOT
15665: IFFALSE 15669
// exit ;
15667: GO 15682
// DestroyUnit ( tmp [ 1 ] ) ;
15669: LD_VAR 0 1
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: CALL_OW 65
// end ;
15682: PPOPN 1
15684: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15685: LD_EXP 27
15689: PUSH
15690: LD_EXP 65
15694: AND
15695: IFFALSE 15824
15697: GO 15699
15699: DISABLE
15700: LD_INT 0
15702: PPUSH
// begin uc_side := 0 ;
15703: LD_ADDR_OWVAR 20
15707: PUSH
15708: LD_INT 0
15710: ST_TO_ADDR
// uc_nation := nation_arabian ;
15711: LD_ADDR_OWVAR 21
15715: PUSH
15716: LD_INT 2
15718: ST_TO_ADDR
// hc_gallery :=  ;
15719: LD_ADDR_OWVAR 33
15723: PUSH
15724: LD_STRING 
15726: ST_TO_ADDR
// hc_name :=  ;
15727: LD_ADDR_OWVAR 26
15731: PUSH
15732: LD_STRING 
15734: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15735: LD_INT 1
15737: PPUSH
15738: LD_INT 11
15740: PPUSH
15741: LD_INT 10
15743: PPUSH
15744: CALL_OW 380
// un := CreateHuman ;
15748: LD_ADDR_VAR 0 1
15752: PUSH
15753: CALL_OW 44
15757: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15758: LD_VAR 0 1
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15770: LD_INT 35
15772: PPUSH
15773: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15777: LD_VAR 0 1
15781: PPUSH
15782: LD_INT 22
15784: PUSH
15785: LD_OWVAR 2
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: PPUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 74
15808: PPUSH
15809: CALL_OW 115
// until IsDead ( un ) ;
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 301
15822: IFFALSE 15770
// end ;
15824: PPOPN 1
15826: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15827: LD_EXP 27
15831: PUSH
15832: LD_EXP 67
15836: AND
15837: IFFALSE 15849
15839: GO 15841
15841: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15842: LD_STRING earthquake(getX(game), 0, 32)
15844: PPUSH
15845: CALL_OW 559
15849: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15850: LD_EXP 27
15854: PUSH
15855: LD_EXP 68
15859: AND
15860: IFFALSE 15951
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
// begin enable ;
15868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15869: LD_ADDR_VAR 0 1
15873: PUSH
15874: LD_INT 22
15876: PUSH
15877: LD_OWVAR 2
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 21
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 33
15898: PUSH
15899: LD_INT 3
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 69
15915: ST_TO_ADDR
// if not tmp then
15916: LD_VAR 0 1
15920: NOT
15921: IFFALSE 15925
// exit ;
15923: GO 15951
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15925: LD_VAR 0 1
15929: PUSH
15930: LD_INT 1
15932: PPUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 12
15942: ARRAY
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 234
// end ;
15951: PPOPN 1
15953: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15954: LD_EXP 27
15958: PUSH
15959: LD_EXP 69
15963: AND
15964: IFFALSE 16105
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
15973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 25
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 3
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16105
// un := tmp [ rand ( 1 , tmp ) ] ;
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_VAR 0 3
16028: PUSH
16029: LD_INT 1
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL_OW 12
16041: ARRAY
16042: ST_TO_ADDR
// if Crawls ( un ) then
16043: LD_VAR 0 2
16047: PPUSH
16048: CALL_OW 318
16052: IFFALSE 16063
// ComWalk ( un ) ;
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_INT 9
16070: PPUSH
16071: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16075: LD_INT 28
16077: PPUSH
16078: LD_OWVAR 2
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16090: LD_INT 29
16092: PPUSH
16093: LD_OWVAR 2
16097: PPUSH
16098: LD_INT 2
16100: PPUSH
16101: CALL_OW 322
// end ;
16105: PPOPN 3
16107: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16108: LD_EXP 27
16112: PUSH
16113: LD_EXP 70
16117: AND
16118: IFFALSE 16229
16120: GO 16122
16122: DISABLE
16123: LD_INT 0
16125: PPUSH
16126: PPUSH
16127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16128: LD_ADDR_VAR 0 3
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_OWVAR 2
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// if not tmp then
16164: LD_VAR 0 3
16168: NOT
16169: IFFALSE 16173
// exit ;
16171: GO 16229
// un := tmp [ rand ( 1 , tmp ) ] ;
16173: LD_ADDR_VAR 0 2
16177: PUSH
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 1
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: CALL_OW 12
16195: ARRAY
16196: ST_TO_ADDR
// if Crawls ( un ) then
16197: LD_VAR 0 2
16201: PPUSH
16202: CALL_OW 318
16206: IFFALSE 16217
// ComWalk ( un ) ;
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_INT 8
16224: PPUSH
16225: CALL_OW 336
// end ;
16229: PPOPN 3
16231: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16232: LD_EXP 27
16236: PUSH
16237: LD_EXP 71
16241: AND
16242: IFFALSE 16386
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_OWVAR 2
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 21
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: LD_INT 34
16283: PUSH
16284: LD_INT 12
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 34
16293: PUSH
16294: LD_INT 51
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 34
16303: PUSH
16304: LD_INT 32
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PPUSH
16322: CALL_OW 69
16326: ST_TO_ADDR
// if not tmp then
16327: LD_VAR 0 2
16331: NOT
16332: IFFALSE 16336
// exit ;
16334: GO 16386
// for i in tmp do
16336: LD_ADDR_VAR 0 1
16340: PUSH
16341: LD_VAR 0 2
16345: PUSH
16346: FOR_IN
16347: IFFALSE 16384
// if GetCargo ( i , mat_artifact ) = 0 then
16349: LD_VAR 0 1
16353: PPUSH
16354: LD_INT 4
16356: PPUSH
16357: CALL_OW 289
16361: PUSH
16362: LD_INT 0
16364: EQUAL
16365: IFFALSE 16382
// SetCargo ( i , mat_siberit , 100 ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_INT 3
16374: PPUSH
16375: LD_INT 100
16377: PPUSH
16378: CALL_OW 290
16382: GO 16346
16384: POP
16385: POP
// end ;
16386: PPOPN 2
16388: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16389: LD_EXP 27
16393: PUSH
16394: LD_EXP 72
16398: AND
16399: IFFALSE 16582
16401: GO 16403
16403: DISABLE
16404: LD_INT 0
16406: PPUSH
16407: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16408: LD_ADDR_VAR 0 2
16412: PUSH
16413: LD_INT 22
16415: PUSH
16416: LD_OWVAR 2
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: ST_TO_ADDR
// if not tmp then
16430: LD_VAR 0 2
16434: NOT
16435: IFFALSE 16439
// exit ;
16437: GO 16582
// for i := 1 to 2 do
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: DOUBLE
16445: LD_INT 1
16447: DEC
16448: ST_TO_ADDR
16449: LD_INT 2
16451: PUSH
16452: FOR_TO
16453: IFFALSE 16580
// begin uc_side := your_side ;
16455: LD_ADDR_OWVAR 20
16459: PUSH
16460: LD_OWVAR 2
16464: ST_TO_ADDR
// uc_nation := nation_american ;
16465: LD_ADDR_OWVAR 21
16469: PUSH
16470: LD_INT 1
16472: ST_TO_ADDR
// vc_chassis := us_morphling ;
16473: LD_ADDR_OWVAR 37
16477: PUSH
16478: LD_INT 5
16480: ST_TO_ADDR
// vc_engine := engine_siberite ;
16481: LD_ADDR_OWVAR 39
16485: PUSH
16486: LD_INT 3
16488: ST_TO_ADDR
// vc_control := control_computer ;
16489: LD_ADDR_OWVAR 38
16493: PUSH
16494: LD_INT 3
16496: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16497: LD_ADDR_OWVAR 40
16501: PUSH
16502: LD_INT 10
16504: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16505: LD_VAR 0 2
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 310
16518: NOT
16519: IFFALSE 16566
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16521: CALL_OW 45
16525: PPUSH
16526: LD_VAR 0 2
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: CALL_OW 250
16539: PPUSH
16540: LD_VAR 0 2
16544: PUSH
16545: LD_INT 1
16547: ARRAY
16548: PPUSH
16549: CALL_OW 251
16553: PPUSH
16554: LD_INT 12
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 50
16564: GO 16578
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16566: CALL_OW 45
16570: PPUSH
16571: LD_INT 1
16573: PPUSH
16574: CALL_OW 51
// end ;
16578: GO 16452
16580: POP
16581: POP
// end ;
16582: PPOPN 2
16584: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16585: LD_EXP 27
16589: PUSH
16590: LD_EXP 73
16594: AND
16595: IFFALSE 16817
16597: GO 16599
16599: DISABLE
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
16607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16608: LD_ADDR_VAR 0 6
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_OWVAR 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 21
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// if not tmp then
16662: LD_VAR 0 6
16666: NOT
16667: IFFALSE 16671
// exit ;
16669: GO 16817
// s1 := rand ( 1 , 4 ) ;
16671: LD_ADDR_VAR 0 2
16675: PUSH
16676: LD_INT 1
16678: PPUSH
16679: LD_INT 4
16681: PPUSH
16682: CALL_OW 12
16686: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16687: LD_ADDR_VAR 0 4
16691: PUSH
16692: LD_VAR 0 6
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: LD_VAR 0 2
16705: PPUSH
16706: CALL_OW 259
16710: ST_TO_ADDR
// if s1 = 1 then
16711: LD_VAR 0 2
16715: PUSH
16716: LD_INT 1
16718: EQUAL
16719: IFFALSE 16739
// s2 := rand ( 2 , 4 ) else
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: LD_INT 2
16728: PPUSH
16729: LD_INT 4
16731: PPUSH
16732: CALL_OW 12
16736: ST_TO_ADDR
16737: GO 16747
// s2 := 1 ;
16739: LD_ADDR_VAR 0 3
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16747: LD_ADDR_VAR 0 5
16751: PUSH
16752: LD_VAR 0 6
16756: PUSH
16757: LD_INT 1
16759: ARRAY
16760: PPUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: CALL_OW 259
16770: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16771: LD_VAR 0 6
16775: PUSH
16776: LD_INT 1
16778: ARRAY
16779: PPUSH
16780: LD_VAR 0 2
16784: PPUSH
16785: LD_VAR 0 5
16789: PPUSH
16790: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16794: LD_VAR 0 6
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: PPUSH
16803: LD_VAR 0 3
16807: PPUSH
16808: LD_VAR 0 4
16812: PPUSH
16813: CALL_OW 237
// end ;
16817: PPOPN 6
16819: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16820: LD_EXP 27
16824: PUSH
16825: LD_EXP 74
16829: AND
16830: IFFALSE 16909
16832: GO 16834
16834: DISABLE
16835: LD_INT 0
16837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16838: LD_ADDR_VAR 0 1
16842: PUSH
16843: LD_INT 22
16845: PUSH
16846: LD_OWVAR 2
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 30
16857: PUSH
16858: LD_INT 3
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PPUSH
16869: CALL_OW 69
16873: ST_TO_ADDR
// if not tmp then
16874: LD_VAR 0 1
16878: NOT
16879: IFFALSE 16883
// exit ;
16881: GO 16909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16883: LD_VAR 0 1
16887: PUSH
16888: LD_INT 1
16890: PPUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 12
16900: ARRAY
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 234
// end ;
16909: PPOPN 1
16911: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16912: LD_EXP 27
16916: PUSH
16917: LD_EXP 75
16921: AND
16922: IFFALSE 17034
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16931: LD_ADDR_VAR 0 2
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_OWVAR 2
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 2
16950: PUSH
16951: LD_INT 30
16953: PUSH
16954: LD_INT 27
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 30
16963: PUSH
16964: LD_INT 26
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 30
16973: PUSH
16974: LD_INT 28
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PPUSH
16991: CALL_OW 69
16995: ST_TO_ADDR
// if not tmp then
16996: LD_VAR 0 2
17000: NOT
17001: IFFALSE 17005
// exit ;
17003: GO 17034
// for i in tmp do
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: LD_VAR 0 2
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17032
// SetLives ( i , 1 ) ;
17018: LD_VAR 0 1
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 234
17030: GO 17015
17032: POP
17033: POP
// end ;
17034: PPOPN 2
17036: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17037: LD_EXP 27
17041: PUSH
17042: LD_EXP 76
17046: AND
17047: IFFALSE 17334
17049: GO 17051
17051: DISABLE
17052: LD_INT 0
17054: PPUSH
17055: PPUSH
17056: PPUSH
// begin i := rand ( 1 , 7 ) ;
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: LD_INT 1
17064: PPUSH
17065: LD_INT 7
17067: PPUSH
17068: CALL_OW 12
17072: ST_TO_ADDR
// case i of 1 :
17073: LD_VAR 0 1
17077: PUSH
17078: LD_INT 1
17080: DOUBLE
17081: EQUAL
17082: IFTRUE 17086
17084: GO 17096
17086: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17087: LD_STRING earthquake(getX(game), 0, 32)
17089: PPUSH
17090: CALL_OW 559
17094: GO 17334
17096: LD_INT 2
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17118
17104: POP
// begin ToLua ( displayStucuk(); ) ;
17105: LD_STRING displayStucuk();
17107: PPUSH
17108: CALL_OW 559
// ResetFog ;
17112: CALL_OW 335
// end ; 3 :
17116: GO 17334
17118: LD_INT 3
17120: DOUBLE
17121: EQUAL
17122: IFTRUE 17126
17124: GO 17230
17126: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17127: LD_ADDR_VAR 0 2
17131: PUSH
17132: LD_INT 22
17134: PUSH
17135: LD_OWVAR 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 25
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: ST_TO_ADDR
// if not tmp then
17163: LD_VAR 0 2
17167: NOT
17168: IFFALSE 17172
// exit ;
17170: GO 17334
// un := tmp [ rand ( 1 , tmp ) ] ;
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_VAR 0 2
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_VAR 0 2
17189: PPUSH
17190: CALL_OW 12
17194: ARRAY
17195: ST_TO_ADDR
// if Crawls ( un ) then
17196: LD_VAR 0 3
17200: PPUSH
17201: CALL_OW 318
17205: IFFALSE 17216
// ComWalk ( un ) ;
17207: LD_VAR 0 3
17211: PPUSH
17212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17216: LD_VAR 0 3
17220: PPUSH
17221: LD_INT 8
17223: PPUSH
17224: CALL_OW 336
// end ; 4 :
17228: GO 17334
17230: LD_INT 4
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17312
17238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_OWVAR 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_INT 29
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if not tmp then
17275: LD_VAR 0 2
17279: NOT
17280: IFFALSE 17284
// exit ;
17282: GO 17334
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17284: LD_VAR 0 2
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PPUSH
17293: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17297: LD_VAR 0 2
17301: PUSH
17302: LD_INT 1
17304: ARRAY
17305: PPUSH
17306: CALL_OW 65
// end ; 5 .. 7 :
17310: GO 17334
17312: LD_INT 5
17314: DOUBLE
17315: GREATEREQUAL
17316: IFFALSE 17324
17318: LD_INT 7
17320: DOUBLE
17321: LESSEQUAL
17322: IFTRUE 17326
17324: GO 17333
17326: POP
// StreamSibBomb ; end ;
17327: CALL 13571 0 0
17331: GO 17334
17333: POP
// end ;
17334: PPOPN 3
17336: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17337: LD_EXP 27
17341: PUSH
17342: LD_EXP 77
17346: AND
17347: IFFALSE 17503
17349: GO 17351
17351: DISABLE
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
17356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_INT 81
17364: PUSH
17365: LD_OWVAR 2
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 2
17376: PUSH
17377: LD_INT 21
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 69
17410: ST_TO_ADDR
// if not tmp then
17411: LD_VAR 0 2
17415: NOT
17416: IFFALSE 17420
// exit ;
17418: GO 17503
// p := 0 ;
17420: LD_ADDR_VAR 0 3
17424: PUSH
17425: LD_INT 0
17427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17428: LD_INT 35
17430: PPUSH
17431: CALL_OW 67
// p := p + 1 ;
17435: LD_ADDR_VAR 0 3
17439: PUSH
17440: LD_VAR 0 3
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: ST_TO_ADDR
// for i in tmp do
17449: LD_ADDR_VAR 0 1
17453: PUSH
17454: LD_VAR 0 2
17458: PUSH
17459: FOR_IN
17460: IFFALSE 17491
// if GetLives ( i ) < 1000 then
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 256
17471: PUSH
17472: LD_INT 1000
17474: LESS
17475: IFFALSE 17489
// SetLives ( i , 1000 ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_INT 1000
17484: PPUSH
17485: CALL_OW 234
17489: GO 17459
17491: POP
17492: POP
// until p > 20 ;
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 20
17500: GREATER
17501: IFFALSE 17428
// end ;
17503: PPOPN 3
17505: END
// every 0 0$1 trigger StreamModeActive and sTime do
17506: LD_EXP 27
17510: PUSH
17511: LD_EXP 78
17515: AND
17516: IFFALSE 17551
17518: GO 17520
17520: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17521: LD_INT 28
17523: PPUSH
17524: LD_OWVAR 2
17528: PPUSH
17529: LD_INT 2
17531: PPUSH
17532: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17536: LD_INT 30
17538: PPUSH
17539: LD_OWVAR 2
17543: PPUSH
17544: LD_INT 2
17546: PPUSH
17547: CALL_OW 322
// end ;
17551: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17552: LD_EXP 27
17556: PUSH
17557: LD_EXP 79
17561: AND
17562: IFFALSE 17683
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
17570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_OWVAR 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 21
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 3
17600: PUSH
17601: LD_INT 23
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: PPUSH
17620: CALL_OW 69
17624: ST_TO_ADDR
// if not tmp then
17625: LD_VAR 0 2
17629: NOT
17630: IFFALSE 17634
// exit ;
17632: GO 17683
// for i in tmp do
17634: LD_ADDR_VAR 0 1
17638: PUSH
17639: LD_VAR 0 2
17643: PUSH
17644: FOR_IN
17645: IFFALSE 17681
// begin if Crawls ( i ) then
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 318
17656: IFFALSE 17667
// ComWalk ( i ) ;
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 138
// SetClass ( i , 2 ) ;
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 2
17674: PPUSH
17675: CALL_OW 336
// end ;
17679: GO 17644
17681: POP
17682: POP
// end ;
17683: PPOPN 2
17685: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17686: LD_EXP 27
17690: PUSH
17691: LD_EXP 80
17695: AND
17696: IFFALSE 17984
17698: GO 17700
17700: DISABLE
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17706: LD_OWVAR 2
17710: PPUSH
17711: LD_INT 9
17713: PPUSH
17714: LD_INT 1
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17724: LD_INT 9
17726: PPUSH
17727: LD_OWVAR 2
17731: PPUSH
17732: CALL_OW 343
// uc_side := 9 ;
17736: LD_ADDR_OWVAR 20
17740: PUSH
17741: LD_INT 9
17743: ST_TO_ADDR
// uc_nation := 2 ;
17744: LD_ADDR_OWVAR 21
17748: PUSH
17749: LD_INT 2
17751: ST_TO_ADDR
// hc_name := Dark Warrior ;
17752: LD_ADDR_OWVAR 26
17756: PUSH
17757: LD_STRING Dark Warrior
17759: ST_TO_ADDR
// hc_gallery :=  ;
17760: LD_ADDR_OWVAR 33
17764: PUSH
17765: LD_STRING 
17767: ST_TO_ADDR
// hc_noskilllimit := true ;
17768: LD_ADDR_OWVAR 76
17772: PUSH
17773: LD_INT 1
17775: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17776: LD_ADDR_OWVAR 31
17780: PUSH
17781: LD_INT 30
17783: PUSH
17784: LD_INT 30
17786: PUSH
17787: LD_INT 30
17789: PUSH
17790: LD_INT 30
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: ST_TO_ADDR
// un := CreateHuman ;
17799: LD_ADDR_VAR 0 3
17803: PUSH
17804: CALL_OW 44
17808: ST_TO_ADDR
// hc_noskilllimit := false ;
17809: LD_ADDR_OWVAR 76
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 51
// ToLua ( playRanger() ) ;
17829: LD_STRING playRanger()
17831: PPUSH
17832: CALL_OW 559
// p := 0 ;
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17844: LD_INT 35
17846: PPUSH
17847: CALL_OW 67
// p := p + 1 ;
17851: LD_ADDR_VAR 0 2
17855: PUSH
17856: LD_VAR 0 2
17860: PUSH
17861: LD_INT 1
17863: PLUS
17864: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17865: LD_VAR 0 3
17869: PPUSH
17870: CALL_OW 256
17874: PUSH
17875: LD_INT 1000
17877: LESS
17878: IFFALSE 17892
// SetLives ( un , 1000 ) ;
17880: LD_VAR 0 3
17884: PPUSH
17885: LD_INT 1000
17887: PPUSH
17888: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17892: LD_VAR 0 3
17896: PPUSH
17897: LD_INT 81
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 91
17911: PUSH
17912: LD_VAR 0 3
17916: PUSH
17917: LD_INT 30
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PPUSH
17929: CALL_OW 69
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: CALL_OW 74
17943: PPUSH
17944: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17948: LD_VAR 0 2
17952: PUSH
17953: LD_INT 80
17955: GREATER
17956: PUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: CALL_OW 301
17966: OR
17967: IFFALSE 17844
// if un then
17969: LD_VAR 0 3
17973: IFFALSE 17984
// RemoveUnit ( un ) ;
17975: LD_VAR 0 3
17979: PPUSH
17980: CALL_OW 64
// end ;
17984: PPOPN 3
17986: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17987: LD_EXP 81
17991: IFFALSE 18107
17993: GO 17995
17995: DISABLE
17996: LD_INT 0
17998: PPUSH
17999: PPUSH
18000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18001: LD_ADDR_VAR 0 2
18005: PUSH
18006: LD_INT 81
18008: PUSH
18009: LD_OWVAR 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 21
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: ST_TO_ADDR
// if not tmp then
18037: LD_VAR 0 2
18041: NOT
18042: IFFALSE 18046
// exit ;
18044: GO 18107
// ToLua ( playComputer() ) ;
18046: LD_STRING playComputer()
18048: PPUSH
18049: CALL_OW 559
// for i in tmp do
18053: LD_ADDR_VAR 0 1
18057: PUSH
18058: LD_VAR 0 2
18062: PUSH
18063: FOR_IN
18064: IFFALSE 18105
// for j := 1 to 4 do
18066: LD_ADDR_VAR 0 3
18070: PUSH
18071: DOUBLE
18072: LD_INT 1
18074: DEC
18075: ST_TO_ADDR
18076: LD_INT 4
18078: PUSH
18079: FOR_TO
18080: IFFALSE 18101
// SetSkill ( i , j , 10 ) ;
18082: LD_VAR 0 1
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 10
18094: PPUSH
18095: CALL_OW 237
18099: GO 18079
18101: POP
18102: POP
18103: GO 18063
18105: POP
18106: POP
// end ;
18107: PPOPN 3
18109: END
// every 0 0$1 trigger s30 do var i , tmp ;
18110: LD_EXP 82
18114: IFFALSE 18183
18116: GO 18118
18118: DISABLE
18119: LD_INT 0
18121: PPUSH
18122: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18123: LD_ADDR_VAR 0 2
18127: PUSH
18128: LD_INT 22
18130: PUSH
18131: LD_OWVAR 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: ST_TO_ADDR
// if not tmp then
18145: LD_VAR 0 2
18149: NOT
18150: IFFALSE 18154
// exit ;
18152: GO 18183
// for i in tmp do
18154: LD_ADDR_VAR 0 1
18158: PUSH
18159: LD_VAR 0 2
18163: PUSH
18164: FOR_IN
18165: IFFALSE 18181
// SetLives ( i , 300 ) ;
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_INT 300
18174: PPUSH
18175: CALL_OW 234
18179: GO 18164
18181: POP
18182: POP
// end ;
18183: PPOPN 2
18185: END
// every 0 0$1 trigger s60 do var i , tmp ;
18186: LD_EXP 83
18190: IFFALSE 18259
18192: GO 18194
18194: DISABLE
18195: LD_INT 0
18197: PPUSH
18198: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18199: LD_ADDR_VAR 0 2
18203: PUSH
18204: LD_INT 22
18206: PUSH
18207: LD_OWVAR 2
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: ST_TO_ADDR
// if not tmp then
18221: LD_VAR 0 2
18225: NOT
18226: IFFALSE 18230
// exit ;
18228: GO 18259
// for i in tmp do
18230: LD_ADDR_VAR 0 1
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18257
// SetLives ( i , 600 ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_INT 600
18250: PPUSH
18251: CALL_OW 234
18255: GO 18240
18257: POP
18258: POP
// end ;
18259: PPOPN 2
18261: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18262: LD_INT 0
18264: PPUSH
// case cmd of 301 :
18265: LD_VAR 0 1
18269: PUSH
18270: LD_INT 301
18272: DOUBLE
18273: EQUAL
18274: IFTRUE 18278
18276: GO 18310
18278: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18279: LD_VAR 0 6
18283: PPUSH
18284: LD_VAR 0 7
18288: PPUSH
18289: LD_VAR 0 8
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: CALL 19511 0 5
18308: GO 18431
18310: LD_INT 302
18312: DOUBLE
18313: EQUAL
18314: IFTRUE 18318
18316: GO 18355
18318: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18319: LD_VAR 0 6
18323: PPUSH
18324: LD_VAR 0 7
18328: PPUSH
18329: LD_VAR 0 8
18333: PPUSH
18334: LD_VAR 0 9
18338: PPUSH
18339: LD_VAR 0 4
18343: PPUSH
18344: LD_VAR 0 5
18348: PPUSH
18349: CALL 19602 0 6
18353: GO 18431
18355: LD_INT 303
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18400
18363: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18364: LD_VAR 0 6
18368: PPUSH
18369: LD_VAR 0 7
18373: PPUSH
18374: LD_VAR 0 8
18378: PPUSH
18379: LD_VAR 0 9
18383: PPUSH
18384: LD_VAR 0 4
18388: PPUSH
18389: LD_VAR 0 5
18393: PPUSH
18394: CALL 18436 0 6
18398: GO 18431
18400: LD_INT 304
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18430
18408: POP
// hHackTeleport ( unit , x , y ) ; end ;
18409: LD_VAR 0 2
18413: PPUSH
18414: LD_VAR 0 4
18418: PPUSH
18419: LD_VAR 0 5
18423: PPUSH
18424: CALL 20195 0 3
18428: GO 18431
18430: POP
// end ;
18431: LD_VAR 0 12
18435: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18440: LD_VAR 0 1
18444: PUSH
18445: LD_INT 1
18447: LESS
18448: PUSH
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 3
18456: GREATER
18457: OR
18458: PUSH
18459: LD_VAR 0 5
18463: PPUSH
18464: LD_VAR 0 6
18468: PPUSH
18469: CALL_OW 428
18473: OR
18474: IFFALSE 18478
// exit ;
18476: GO 19198
// uc_side := your_side ;
18478: LD_ADDR_OWVAR 20
18482: PUSH
18483: LD_OWVAR 2
18487: ST_TO_ADDR
// uc_nation := nation ;
18488: LD_ADDR_OWVAR 21
18492: PUSH
18493: LD_VAR 0 1
18497: ST_TO_ADDR
// bc_level = 1 ;
18498: LD_ADDR_OWVAR 43
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// case btype of 1 :
18506: LD_VAR 0 2
18510: PUSH
18511: LD_INT 1
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18530
18519: POP
// bc_type := b_depot ; 2 :
18520: LD_ADDR_OWVAR 42
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
18528: GO 19142
18530: LD_INT 2
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18549
18538: POP
// bc_type := b_warehouse ; 3 :
18539: LD_ADDR_OWVAR 42
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
18547: GO 19142
18549: LD_INT 3
18551: DOUBLE
18552: EQUAL
18553: IFTRUE 18557
18555: GO 18568
18557: POP
// bc_type := b_lab ; 4 .. 9 :
18558: LD_ADDR_OWVAR 42
18562: PUSH
18563: LD_INT 6
18565: ST_TO_ADDR
18566: GO 19142
18568: LD_INT 4
18570: DOUBLE
18571: GREATEREQUAL
18572: IFFALSE 18580
18574: LD_INT 9
18576: DOUBLE
18577: LESSEQUAL
18578: IFTRUE 18582
18580: GO 18634
18582: POP
// begin bc_type := b_lab_half ;
18583: LD_ADDR_OWVAR 42
18587: PUSH
18588: LD_INT 7
18590: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18591: LD_ADDR_OWVAR 44
18595: PUSH
18596: LD_INT 10
18598: PUSH
18599: LD_INT 11
18601: PUSH
18602: LD_INT 12
18604: PUSH
18605: LD_INT 15
18607: PUSH
18608: LD_INT 14
18610: PUSH
18611: LD_INT 13
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: PUSH
18622: LD_VAR 0 2
18626: PUSH
18627: LD_INT 3
18629: MINUS
18630: ARRAY
18631: ST_TO_ADDR
// end ; 10 .. 13 :
18632: GO 19142
18634: LD_INT 10
18636: DOUBLE
18637: GREATEREQUAL
18638: IFFALSE 18646
18640: LD_INT 13
18642: DOUBLE
18643: LESSEQUAL
18644: IFTRUE 18648
18646: GO 18725
18648: POP
// begin bc_type := b_lab_full ;
18649: LD_ADDR_OWVAR 42
18653: PUSH
18654: LD_INT 8
18656: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18657: LD_ADDR_OWVAR 44
18661: PUSH
18662: LD_INT 10
18664: PUSH
18665: LD_INT 12
18667: PUSH
18668: LD_INT 14
18670: PUSH
18671: LD_INT 13
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: PUSH
18680: LD_VAR 0 2
18684: PUSH
18685: LD_INT 9
18687: MINUS
18688: ARRAY
18689: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18690: LD_ADDR_OWVAR 45
18694: PUSH
18695: LD_INT 11
18697: PUSH
18698: LD_INT 15
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: LD_INT 15
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: LD_INT 9
18720: MINUS
18721: ARRAY
18722: ST_TO_ADDR
// end ; 14 :
18723: GO 19142
18725: LD_INT 14
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18744
18733: POP
// bc_type := b_workshop ; 15 :
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 2
18741: ST_TO_ADDR
18742: GO 19142
18744: LD_INT 15
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18763
18752: POP
// bc_type := b_factory ; 16 :
18753: LD_ADDR_OWVAR 42
18757: PUSH
18758: LD_INT 3
18760: ST_TO_ADDR
18761: GO 19142
18763: LD_INT 16
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18782
18771: POP
// bc_type := b_ext_gun ; 17 :
18772: LD_ADDR_OWVAR 42
18776: PUSH
18777: LD_INT 17
18779: ST_TO_ADDR
18780: GO 19142
18782: LD_INT 17
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18818
18790: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 19
18798: PUSH
18799: LD_INT 23
18801: PUSH
18802: LD_INT 19
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: LIST
18809: PUSH
18810: LD_VAR 0 1
18814: ARRAY
18815: ST_TO_ADDR
18816: GO 19142
18818: LD_INT 18
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18837
18826: POP
// bc_type := b_ext_radar ; 19 :
18827: LD_ADDR_OWVAR 42
18831: PUSH
18832: LD_INT 20
18834: ST_TO_ADDR
18835: GO 19142
18837: LD_INT 19
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18856
18845: POP
// bc_type := b_ext_radio ; 20 :
18846: LD_ADDR_OWVAR 42
18850: PUSH
18851: LD_INT 22
18853: ST_TO_ADDR
18854: GO 19142
18856: LD_INT 20
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18875
18864: POP
// bc_type := b_ext_siberium ; 21 :
18865: LD_ADDR_OWVAR 42
18869: PUSH
18870: LD_INT 21
18872: ST_TO_ADDR
18873: GO 19142
18875: LD_INT 21
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 18894
18883: POP
// bc_type := b_ext_computer ; 22 :
18884: LD_ADDR_OWVAR 42
18888: PUSH
18889: LD_INT 24
18891: ST_TO_ADDR
18892: GO 19142
18894: LD_INT 22
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18913
18902: POP
// bc_type := b_ext_track ; 23 :
18903: LD_ADDR_OWVAR 42
18907: PUSH
18908: LD_INT 16
18910: ST_TO_ADDR
18911: GO 19142
18913: LD_INT 23
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18932
18921: POP
// bc_type := b_ext_laser ; 24 :
18922: LD_ADDR_OWVAR 42
18926: PUSH
18927: LD_INT 25
18929: ST_TO_ADDR
18930: GO 19142
18932: LD_INT 24
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 18951
18940: POP
// bc_type := b_control_tower ; 25 :
18941: LD_ADDR_OWVAR 42
18945: PUSH
18946: LD_INT 36
18948: ST_TO_ADDR
18949: GO 19142
18951: LD_INT 25
18953: DOUBLE
18954: EQUAL
18955: IFTRUE 18959
18957: GO 18970
18959: POP
// bc_type := b_breastwork ; 26 :
18960: LD_ADDR_OWVAR 42
18964: PUSH
18965: LD_INT 31
18967: ST_TO_ADDR
18968: GO 19142
18970: LD_INT 26
18972: DOUBLE
18973: EQUAL
18974: IFTRUE 18978
18976: GO 18989
18978: POP
// bc_type := b_bunker ; 27 :
18979: LD_ADDR_OWVAR 42
18983: PUSH
18984: LD_INT 32
18986: ST_TO_ADDR
18987: GO 19142
18989: LD_INT 27
18991: DOUBLE
18992: EQUAL
18993: IFTRUE 18997
18995: GO 19008
18997: POP
// bc_type := b_turret ; 28 :
18998: LD_ADDR_OWVAR 42
19002: PUSH
19003: LD_INT 33
19005: ST_TO_ADDR
19006: GO 19142
19008: LD_INT 28
19010: DOUBLE
19011: EQUAL
19012: IFTRUE 19016
19014: GO 19027
19016: POP
// bc_type := b_armoury ; 29 :
19017: LD_ADDR_OWVAR 42
19021: PUSH
19022: LD_INT 4
19024: ST_TO_ADDR
19025: GO 19142
19027: LD_INT 29
19029: DOUBLE
19030: EQUAL
19031: IFTRUE 19035
19033: GO 19046
19035: POP
// bc_type := b_barracks ; 30 :
19036: LD_ADDR_OWVAR 42
19040: PUSH
19041: LD_INT 5
19043: ST_TO_ADDR
19044: GO 19142
19046: LD_INT 30
19048: DOUBLE
19049: EQUAL
19050: IFTRUE 19054
19052: GO 19065
19054: POP
// bc_type := b_solar_power ; 31 :
19055: LD_ADDR_OWVAR 42
19059: PUSH
19060: LD_INT 27
19062: ST_TO_ADDR
19063: GO 19142
19065: LD_INT 31
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19084
19073: POP
// bc_type := b_oil_power ; 32 :
19074: LD_ADDR_OWVAR 42
19078: PUSH
19079: LD_INT 26
19081: ST_TO_ADDR
19082: GO 19142
19084: LD_INT 32
19086: DOUBLE
19087: EQUAL
19088: IFTRUE 19092
19090: GO 19103
19092: POP
// bc_type := b_siberite_power ; 33 :
19093: LD_ADDR_OWVAR 42
19097: PUSH
19098: LD_INT 28
19100: ST_TO_ADDR
19101: GO 19142
19103: LD_INT 33
19105: DOUBLE
19106: EQUAL
19107: IFTRUE 19111
19109: GO 19122
19111: POP
// bc_type := b_oil_mine ; 34 :
19112: LD_ADDR_OWVAR 42
19116: PUSH
19117: LD_INT 29
19119: ST_TO_ADDR
19120: GO 19142
19122: LD_INT 34
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19141
19130: POP
// bc_type := b_siberite_mine ; end ;
19131: LD_ADDR_OWVAR 42
19135: PUSH
19136: LD_INT 30
19138: ST_TO_ADDR
19139: GO 19142
19141: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19142: LD_ADDR_VAR 0 8
19146: PUSH
19147: LD_VAR 0 5
19151: PPUSH
19152: LD_VAR 0 6
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: CALL_OW 47
19166: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19167: LD_OWVAR 42
19171: PUSH
19172: LD_INT 32
19174: PUSH
19175: LD_INT 33
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: IN
19182: IFFALSE 19198
// PlaceWeaponTurret ( b , weapon ) ;
19184: LD_VAR 0 8
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: CALL_OW 431
// end ;
19198: LD_VAR 0 7
19202: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19209: LD_ADDR_VAR 0 4
19213: PUSH
19214: LD_INT 22
19216: PUSH
19217: LD_OWVAR 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 30
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: ST_TO_ADDR
// if not tmp then
19263: LD_VAR 0 4
19267: NOT
19268: IFFALSE 19272
// exit ;
19270: GO 19331
// for i in tmp do
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_VAR 0 4
19281: PUSH
19282: FOR_IN
19283: IFFALSE 19329
// for j = 1 to 3 do
19285: LD_ADDR_VAR 0 3
19289: PUSH
19290: DOUBLE
19291: LD_INT 1
19293: DEC
19294: ST_TO_ADDR
19295: LD_INT 3
19297: PUSH
19298: FOR_TO
19299: IFFALSE 19325
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19301: LD_VAR 0 2
19305: PPUSH
19306: CALL_OW 274
19310: PPUSH
19311: LD_VAR 0 3
19315: PPUSH
19316: LD_INT 99999
19318: PPUSH
19319: CALL_OW 277
19323: GO 19298
19325: POP
19326: POP
19327: GO 19282
19329: POP
19330: POP
// end ;
19331: LD_VAR 0 1
19335: RET
// export function hHackSetLevel10 ; var i , j ; begin
19336: LD_INT 0
19338: PPUSH
19339: PPUSH
19340: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19341: LD_ADDR_VAR 0 2
19345: PUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PPUSH
19356: CALL_OW 69
19360: PUSH
19361: FOR_IN
19362: IFFALSE 19414
// if IsSelected ( i ) then
19364: LD_VAR 0 2
19368: PPUSH
19369: CALL_OW 306
19373: IFFALSE 19412
// begin for j := 1 to 4 do
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: DOUBLE
19381: LD_INT 1
19383: DEC
19384: ST_TO_ADDR
19385: LD_INT 4
19387: PUSH
19388: FOR_TO
19389: IFFALSE 19410
// SetSkill ( i , j , 10 ) ;
19391: LD_VAR 0 2
19395: PPUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: LD_INT 10
19403: PPUSH
19404: CALL_OW 237
19408: GO 19388
19410: POP
19411: POP
// end ;
19412: GO 19361
19414: POP
19415: POP
// end ;
19416: LD_VAR 0 1
19420: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19421: LD_INT 0
19423: PPUSH
19424: PPUSH
19425: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19426: LD_ADDR_VAR 0 2
19430: PUSH
19431: LD_INT 22
19433: PUSH
19434: LD_OWVAR 2
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 69
19461: PUSH
19462: FOR_IN
19463: IFFALSE 19504
// begin for j := 1 to 4 do
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: DOUBLE
19471: LD_INT 1
19473: DEC
19474: ST_TO_ADDR
19475: LD_INT 4
19477: PUSH
19478: FOR_TO
19479: IFFALSE 19500
// SetSkill ( i , j , 10 ) ;
19481: LD_VAR 0 2
19485: PPUSH
19486: LD_VAR 0 3
19490: PPUSH
19491: LD_INT 10
19493: PPUSH
19494: CALL_OW 237
19498: GO 19478
19500: POP
19501: POP
// end ;
19502: GO 19462
19504: POP
19505: POP
// end ;
19506: LD_VAR 0 1
19510: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19511: LD_INT 0
19513: PPUSH
// uc_side := your_side ;
19514: LD_ADDR_OWVAR 20
19518: PUSH
19519: LD_OWVAR 2
19523: ST_TO_ADDR
// uc_nation := nation ;
19524: LD_ADDR_OWVAR 21
19528: PUSH
19529: LD_VAR 0 1
19533: ST_TO_ADDR
// InitHc ;
19534: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19538: LD_INT 0
19540: PPUSH
19541: LD_VAR 0 2
19545: PPUSH
19546: LD_VAR 0 3
19550: PPUSH
19551: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19555: LD_VAR 0 4
19559: PPUSH
19560: LD_VAR 0 5
19564: PPUSH
19565: CALL_OW 428
19569: PUSH
19570: LD_INT 0
19572: EQUAL
19573: IFFALSE 19597
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19575: CALL_OW 44
19579: PPUSH
19580: LD_VAR 0 4
19584: PPUSH
19585: LD_VAR 0 5
19589: PPUSH
19590: LD_INT 1
19592: PPUSH
19593: CALL_OW 48
// end ;
19597: LD_VAR 0 6
19601: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19602: LD_INT 0
19604: PPUSH
19605: PPUSH
// uc_side := your_side ;
19606: LD_ADDR_OWVAR 20
19610: PUSH
19611: LD_OWVAR 2
19615: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19616: LD_VAR 0 1
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: LD_INT 3
19629: PUSH
19630: LD_INT 4
19632: PUSH
19633: LD_INT 5
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: IN
19643: IFFALSE 19655
// uc_nation := nation_american else
19645: LD_ADDR_OWVAR 21
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
19653: GO 19698
// if chassis in [ 11 , 12 , 13 , 14 ] then
19655: LD_VAR 0 1
19659: PUSH
19660: LD_INT 11
19662: PUSH
19663: LD_INT 12
19665: PUSH
19666: LD_INT 13
19668: PUSH
19669: LD_INT 14
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: IN
19678: IFFALSE 19690
// uc_nation := nation_arabian else
19680: LD_ADDR_OWVAR 21
19684: PUSH
19685: LD_INT 2
19687: ST_TO_ADDR
19688: GO 19698
// uc_nation := nation_russian ;
19690: LD_ADDR_OWVAR 21
19694: PUSH
19695: LD_INT 3
19697: ST_TO_ADDR
// vc_chassis := chassis ;
19698: LD_ADDR_OWVAR 37
19702: PUSH
19703: LD_VAR 0 1
19707: ST_TO_ADDR
// vc_engine := engine ;
19708: LD_ADDR_OWVAR 39
19712: PUSH
19713: LD_VAR 0 2
19717: ST_TO_ADDR
// vc_control := control ;
19718: LD_ADDR_OWVAR 38
19722: PUSH
19723: LD_VAR 0 3
19727: ST_TO_ADDR
// vc_weapon := weapon ;
19728: LD_ADDR_OWVAR 40
19732: PUSH
19733: LD_VAR 0 4
19737: ST_TO_ADDR
// un := CreateVehicle ;
19738: LD_ADDR_VAR 0 8
19742: PUSH
19743: CALL_OW 45
19747: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19748: LD_VAR 0 8
19752: PPUSH
19753: LD_INT 0
19755: PPUSH
19756: LD_INT 5
19758: PPUSH
19759: CALL_OW 12
19763: PPUSH
19764: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19768: LD_VAR 0 8
19772: PPUSH
19773: LD_VAR 0 5
19777: PPUSH
19778: LD_VAR 0 6
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 48
// end ;
19790: LD_VAR 0 7
19794: RET
// export hInvincible ; every 1 do
19795: GO 19797
19797: DISABLE
// hInvincible := [ ] ;
19798: LD_ADDR_EXP 84
19802: PUSH
19803: EMPTY
19804: ST_TO_ADDR
19805: END
// every 10 do var i ;
19806: GO 19808
19808: DISABLE
19809: LD_INT 0
19811: PPUSH
// begin enable ;
19812: ENABLE
// if not hInvincible then
19813: LD_EXP 84
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 19866
// for i in hInvincible do
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: LD_EXP 84
19831: PUSH
19832: FOR_IN
19833: IFFALSE 19864
// if GetLives ( i ) < 1000 then
19835: LD_VAR 0 1
19839: PPUSH
19840: CALL_OW 256
19844: PUSH
19845: LD_INT 1000
19847: LESS
19848: IFFALSE 19862
// SetLives ( i , 1000 ) ;
19850: LD_VAR 0 1
19854: PPUSH
19855: LD_INT 1000
19857: PPUSH
19858: CALL_OW 234
19862: GO 19832
19864: POP
19865: POP
// end ;
19866: PPOPN 1
19868: END
// export function hHackInvincible ; var i ; begin
19869: LD_INT 0
19871: PPUSH
19872: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19873: LD_ADDR_VAR 0 2
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: LD_INT 21
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 21
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: PPUSH
19906: CALL_OW 69
19910: PUSH
19911: FOR_IN
19912: IFFALSE 19973
// if IsSelected ( i ) then
19914: LD_VAR 0 2
19918: PPUSH
19919: CALL_OW 306
19923: IFFALSE 19971
// begin if i in hInvincible then
19925: LD_VAR 0 2
19929: PUSH
19930: LD_EXP 84
19934: IN
19935: IFFALSE 19955
// hInvincible := hInvincible diff i else
19937: LD_ADDR_EXP 84
19941: PUSH
19942: LD_EXP 84
19946: PUSH
19947: LD_VAR 0 2
19951: DIFF
19952: ST_TO_ADDR
19953: GO 19971
// hInvincible := hInvincible union i ;
19955: LD_ADDR_EXP 84
19959: PUSH
19960: LD_EXP 84
19964: PUSH
19965: LD_VAR 0 2
19969: UNION
19970: ST_TO_ADDR
// end ;
19971: GO 19911
19973: POP
19974: POP
// end ;
19975: LD_VAR 0 1
19979: RET
// export function hHackInvisible ; var i , j ; begin
19980: LD_INT 0
19982: PPUSH
19983: PPUSH
19984: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_INT 21
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 69
20004: PUSH
20005: FOR_IN
20006: IFFALSE 20030
// if IsSelected ( i ) then
20008: LD_VAR 0 2
20012: PPUSH
20013: CALL_OW 306
20017: IFFALSE 20028
// ComForceInvisible ( i ) ;
20019: LD_VAR 0 2
20023: PPUSH
20024: CALL_OW 496
20028: GO 20005
20030: POP
20031: POP
// end ;
20032: LD_VAR 0 1
20036: RET
// export function hHackChangeYourSide ; begin
20037: LD_INT 0
20039: PPUSH
// if your_side = 8 then
20040: LD_OWVAR 2
20044: PUSH
20045: LD_INT 8
20047: EQUAL
20048: IFFALSE 20060
// your_side := 0 else
20050: LD_ADDR_OWVAR 2
20054: PUSH
20055: LD_INT 0
20057: ST_TO_ADDR
20058: GO 20074
// your_side := your_side + 1 ;
20060: LD_ADDR_OWVAR 2
20064: PUSH
20065: LD_OWVAR 2
20069: PUSH
20070: LD_INT 1
20072: PLUS
20073: ST_TO_ADDR
// end ;
20074: LD_VAR 0 1
20078: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
20083: PPUSH
// for i in all_units do
20084: LD_ADDR_VAR 0 2
20088: PUSH
20089: LD_OWVAR 3
20093: PUSH
20094: FOR_IN
20095: IFFALSE 20173
// if IsSelected ( i ) then
20097: LD_VAR 0 2
20101: PPUSH
20102: CALL_OW 306
20106: IFFALSE 20171
// begin j := GetSide ( i ) ;
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_VAR 0 2
20117: PPUSH
20118: CALL_OW 255
20122: ST_TO_ADDR
// if j = 8 then
20123: LD_VAR 0 3
20127: PUSH
20128: LD_INT 8
20130: EQUAL
20131: IFFALSE 20143
// j := 0 else
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
20141: GO 20157
// j := j + 1 ;
20143: LD_ADDR_VAR 0 3
20147: PUSH
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 1
20155: PLUS
20156: ST_TO_ADDR
// SetSide ( i , j ) ;
20157: LD_VAR 0 2
20161: PPUSH
20162: LD_VAR 0 3
20166: PPUSH
20167: CALL_OW 235
// end ;
20171: GO 20094
20173: POP
20174: POP
// end ;
20175: LD_VAR 0 1
20179: RET
// export function hHackFog ; begin
20180: LD_INT 0
20182: PPUSH
// FogOff ( true ) ;
20183: LD_INT 1
20185: PPUSH
20186: CALL_OW 344
// end ;
20190: LD_VAR 0 1
20194: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20195: LD_INT 0
20197: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_VAR 0 2
20207: PPUSH
20208: LD_VAR 0 3
20212: PPUSH
20213: LD_INT 1
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 483
// CenterOnXY ( x , y ) ;
20223: LD_VAR 0 2
20227: PPUSH
20228: LD_VAR 0 3
20232: PPUSH
20233: CALL_OW 84
// end ; end_of_file
20237: LD_VAR 0 4
20241: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20242: LD_INT 0
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 264
20257: PUSH
20258: LD_EXP 101
20262: EQUAL
20263: IFFALSE 20335
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20265: LD_INT 68
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 255
20277: PPUSH
20278: CALL_OW 321
20282: PUSH
20283: LD_INT 2
20285: EQUAL
20286: IFFALSE 20298
// eff := 70 else
20288: LD_ADDR_VAR 0 4
20292: PUSH
20293: LD_INT 70
20295: ST_TO_ADDR
20296: GO 20306
// eff := 30 ;
20298: LD_ADDR_VAR 0 4
20302: PUSH
20303: LD_INT 30
20305: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL_OW 250
20315: PPUSH
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 251
20325: PPUSH
20326: LD_VAR 0 4
20330: PPUSH
20331: CALL_OW 495
// end ; end ;
20335: LD_VAR 0 2
20339: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20340: LD_INT 0
20342: PPUSH
// end ;
20343: LD_VAR 0 4
20347: RET
// export function SOS_Command ( cmd ) ; begin
20348: LD_INT 0
20350: PPUSH
// end ;
20351: LD_VAR 0 2
20355: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20356: LD_INT 0
20358: PPUSH
// end ;
20359: LD_VAR 0 6
20363: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20364: LD_INT 0
20366: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20367: LD_VAR 0 1
20371: PUSH
20372: LD_INT 250
20374: EQUAL
20375: PUSH
20376: LD_VAR 0 2
20380: PPUSH
20381: CALL_OW 264
20385: PUSH
20386: LD_EXP 104
20390: EQUAL
20391: AND
20392: IFFALSE 20413
// MinerPlaceMine ( unit , x , y ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: LD_VAR 0 4
20403: PPUSH
20404: LD_VAR 0 5
20408: PPUSH
20409: CALL 22762 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20413: LD_VAR 0 1
20417: PUSH
20418: LD_INT 251
20420: EQUAL
20421: PUSH
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 264
20431: PUSH
20432: LD_EXP 104
20436: EQUAL
20437: AND
20438: IFFALSE 20459
// MinerDetonateMine ( unit , x , y ) ;
20440: LD_VAR 0 2
20444: PPUSH
20445: LD_VAR 0 4
20449: PPUSH
20450: LD_VAR 0 5
20454: PPUSH
20455: CALL 23039 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20459: LD_VAR 0 1
20463: PUSH
20464: LD_INT 252
20466: EQUAL
20467: PUSH
20468: LD_VAR 0 2
20472: PPUSH
20473: CALL_OW 264
20477: PUSH
20478: LD_EXP 104
20482: EQUAL
20483: AND
20484: IFFALSE 20505
// MinerCreateMinefield ( unit , x , y ) ;
20486: LD_VAR 0 2
20490: PPUSH
20491: LD_VAR 0 4
20495: PPUSH
20496: LD_VAR 0 5
20500: PPUSH
20501: CALL 23456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20505: LD_VAR 0 1
20509: PUSH
20510: LD_INT 253
20512: EQUAL
20513: PUSH
20514: LD_VAR 0 2
20518: PPUSH
20519: CALL_OW 257
20523: PUSH
20524: LD_INT 5
20526: EQUAL
20527: AND
20528: IFFALSE 20549
// ComBinocular ( unit , x , y ) ;
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 4
20539: PPUSH
20540: LD_VAR 0 5
20544: PPUSH
20545: CALL 23827 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20549: LD_VAR 0 1
20553: PUSH
20554: LD_INT 254
20556: EQUAL
20557: PUSH
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 264
20567: PUSH
20568: LD_EXP 99
20572: EQUAL
20573: AND
20574: PUSH
20575: LD_VAR 0 3
20579: PPUSH
20580: CALL_OW 263
20584: PUSH
20585: LD_INT 3
20587: EQUAL
20588: AND
20589: IFFALSE 20605
// HackDestroyVehicle ( unit , selectedUnit ) ;
20591: LD_VAR 0 2
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: CALL 22122 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20605: LD_VAR 0 1
20609: PUSH
20610: LD_INT 255
20612: EQUAL
20613: PUSH
20614: LD_VAR 0 2
20618: PPUSH
20619: CALL_OW 264
20623: PUSH
20624: LD_INT 14
20626: PUSH
20627: LD_INT 53
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: IN
20634: AND
20635: PUSH
20636: LD_VAR 0 4
20640: PPUSH
20641: LD_VAR 0 5
20645: PPUSH
20646: CALL_OW 488
20650: AND
20651: IFFALSE 20675
// CutTreeXYR ( unit , x , y , 12 ) ;
20653: LD_VAR 0 2
20657: PPUSH
20658: LD_VAR 0 4
20662: PPUSH
20663: LD_VAR 0 5
20667: PPUSH
20668: LD_INT 12
20670: PPUSH
20671: CALL 20688 0 4
// end ;
20675: LD_VAR 0 6
20679: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20680: LD_INT 0
20682: PPUSH
// end ;
20683: LD_VAR 0 4
20687: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20688: LD_INT 0
20690: PPUSH
20691: PPUSH
20692: PPUSH
20693: PPUSH
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20699: LD_VAR 0 1
20703: NOT
20704: PUSH
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: CALL_OW 488
20719: NOT
20720: OR
20721: PUSH
20722: LD_VAR 0 4
20726: NOT
20727: OR
20728: IFFALSE 20732
// exit ;
20730: GO 21072
// list := [ ] ;
20732: LD_ADDR_VAR 0 13
20736: PUSH
20737: EMPTY
20738: ST_TO_ADDR
// if x - r < 0 then
20739: LD_VAR 0 2
20743: PUSH
20744: LD_VAR 0 4
20748: MINUS
20749: PUSH
20750: LD_INT 0
20752: LESS
20753: IFFALSE 20765
// min_x := 0 else
20755: LD_ADDR_VAR 0 7
20759: PUSH
20760: LD_INT 0
20762: ST_TO_ADDR
20763: GO 20781
// min_x := x - r ;
20765: LD_ADDR_VAR 0 7
20769: PUSH
20770: LD_VAR 0 2
20774: PUSH
20775: LD_VAR 0 4
20779: MINUS
20780: ST_TO_ADDR
// if y - r < 0 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_VAR 0 4
20790: MINUS
20791: PUSH
20792: LD_INT 0
20794: LESS
20795: IFFALSE 20807
// min_y := 0 else
20797: LD_ADDR_VAR 0 8
20801: PUSH
20802: LD_INT 0
20804: ST_TO_ADDR
20805: GO 20823
// min_y := y - r ;
20807: LD_ADDR_VAR 0 8
20811: PUSH
20812: LD_VAR 0 3
20816: PUSH
20817: LD_VAR 0 4
20821: MINUS
20822: ST_TO_ADDR
// max_x := x + r ;
20823: LD_ADDR_VAR 0 9
20827: PUSH
20828: LD_VAR 0 2
20832: PUSH
20833: LD_VAR 0 4
20837: PLUS
20838: ST_TO_ADDR
// max_y := y + r ;
20839: LD_ADDR_VAR 0 10
20843: PUSH
20844: LD_VAR 0 3
20848: PUSH
20849: LD_VAR 0 4
20853: PLUS
20854: ST_TO_ADDR
// for _x = min_x to max_x do
20855: LD_ADDR_VAR 0 11
20859: PUSH
20860: DOUBLE
20861: LD_VAR 0 7
20865: DEC
20866: ST_TO_ADDR
20867: LD_VAR 0 9
20871: PUSH
20872: FOR_TO
20873: IFFALSE 20990
// for _y = min_y to max_y do
20875: LD_ADDR_VAR 0 12
20879: PUSH
20880: DOUBLE
20881: LD_VAR 0 8
20885: DEC
20886: ST_TO_ADDR
20887: LD_VAR 0 10
20891: PUSH
20892: FOR_TO
20893: IFFALSE 20986
// begin if not ValidHex ( _x , _y ) then
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_VAR 0 12
20904: PPUSH
20905: CALL_OW 488
20909: NOT
20910: IFFALSE 20914
// continue ;
20912: GO 20892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20914: LD_VAR 0 11
20918: PPUSH
20919: LD_VAR 0 12
20923: PPUSH
20924: CALL_OW 351
20928: PUSH
20929: LD_VAR 0 11
20933: PPUSH
20934: LD_VAR 0 12
20938: PPUSH
20939: CALL_OW 554
20943: AND
20944: IFFALSE 20984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20946: LD_ADDR_VAR 0 13
20950: PUSH
20951: LD_VAR 0 13
20955: PPUSH
20956: LD_VAR 0 13
20960: PUSH
20961: LD_INT 1
20963: PLUS
20964: PPUSH
20965: LD_VAR 0 11
20969: PUSH
20970: LD_VAR 0 12
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PPUSH
20979: CALL_OW 2
20983: ST_TO_ADDR
// end ;
20984: GO 20892
20986: POP
20987: POP
20988: GO 20872
20990: POP
20991: POP
// if not list then
20992: LD_VAR 0 13
20996: NOT
20997: IFFALSE 21001
// exit ;
20999: GO 21072
// for i in list do
21001: LD_ADDR_VAR 0 6
21005: PUSH
21006: LD_VAR 0 13
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21014: LD_VAR 0 1
21018: PPUSH
21019: LD_STRING M
21021: PUSH
21022: LD_VAR 0 6
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: PUSH
21031: LD_VAR 0 6
21035: PUSH
21036: LD_INT 2
21038: ARRAY
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: PPUSH
21064: CALL_OW 447
21068: GO 21011
21070: POP
21071: POP
// end ;
21072: LD_VAR 0 5
21076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21077: LD_EXP 87
21081: NOT
21082: IFFALSE 21132
21084: GO 21086
21086: DISABLE
// begin initHack := true ;
21087: LD_ADDR_EXP 87
21091: PUSH
21092: LD_INT 1
21094: ST_TO_ADDR
// hackTanks := [ ] ;
21095: LD_ADDR_EXP 88
21099: PUSH
21100: EMPTY
21101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21102: LD_ADDR_EXP 89
21106: PUSH
21107: EMPTY
21108: ST_TO_ADDR
// hackLimit := 3 ;
21109: LD_ADDR_EXP 90
21113: PUSH
21114: LD_INT 3
21116: ST_TO_ADDR
// hackDist := 12 ;
21117: LD_ADDR_EXP 91
21121: PUSH
21122: LD_INT 12
21124: ST_TO_ADDR
// hackCounter := [ ] ;
21125: LD_ADDR_EXP 92
21129: PUSH
21130: EMPTY
21131: ST_TO_ADDR
// end ;
21132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21133: LD_EXP 87
21137: PUSH
21138: LD_INT 34
21140: PUSH
21141: LD_EXP 99
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 69
21154: AND
21155: IFFALSE 21410
21157: GO 21159
21159: DISABLE
21160: LD_INT 0
21162: PPUSH
21163: PPUSH
// begin enable ;
21164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21165: LD_ADDR_VAR 0 1
21169: PUSH
21170: LD_INT 34
21172: PUSH
21173: LD_EXP 99
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21408
// begin if not i in hackTanks then
21190: LD_VAR 0 1
21194: PUSH
21195: LD_EXP 88
21199: IN
21200: NOT
21201: IFFALSE 21284
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21203: LD_ADDR_EXP 88
21207: PUSH
21208: LD_EXP 88
21212: PPUSH
21213: LD_EXP 88
21217: PUSH
21218: LD_INT 1
21220: PLUS
21221: PPUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 1
21231: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21232: LD_ADDR_EXP 89
21236: PUSH
21237: LD_EXP 89
21241: PPUSH
21242: LD_EXP 89
21246: PUSH
21247: LD_INT 1
21249: PLUS
21250: PPUSH
21251: EMPTY
21252: PPUSH
21253: CALL_OW 1
21257: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21258: LD_ADDR_EXP 92
21262: PUSH
21263: LD_EXP 92
21267: PPUSH
21268: LD_EXP 92
21272: PUSH
21273: LD_INT 1
21275: PLUS
21276: PPUSH
21277: EMPTY
21278: PPUSH
21279: CALL_OW 1
21283: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 302
21293: NOT
21294: IFFALSE 21307
// begin HackUnlinkAll ( i ) ;
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL 21413 0 1
// continue ;
21305: GO 21187
// end ; HackCheckCapturedStatus ( i ) ;
21307: LD_VAR 0 1
21311: PPUSH
21312: CALL 21856 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21316: LD_ADDR_VAR 0 2
21320: PUSH
21321: LD_INT 81
21323: PUSH
21324: LD_VAR 0 1
21328: PPUSH
21329: CALL_OW 255
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 33
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 91
21350: PUSH
21351: LD_VAR 0 1
21355: PUSH
21356: LD_EXP 91
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 50
21368: PUSH
21369: EMPTY
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PPUSH
21378: CALL_OW 69
21382: ST_TO_ADDR
// if not tmp then
21383: LD_VAR 0 2
21387: NOT
21388: IFFALSE 21392
// continue ;
21390: GO 21187
// HackLink ( i , tmp ) ;
21392: LD_VAR 0 1
21396: PPUSH
21397: LD_VAR 0 2
21401: PPUSH
21402: CALL 21549 0 2
// end ;
21406: GO 21187
21408: POP
21409: POP
// end ;
21410: PPOPN 2
21412: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
// if not hack in hackTanks then
21418: LD_VAR 0 1
21422: PUSH
21423: LD_EXP 88
21427: IN
21428: NOT
21429: IFFALSE 21433
// exit ;
21431: GO 21544
// index := GetElementIndex ( hackTanks , hack ) ;
21433: LD_ADDR_VAR 0 4
21437: PUSH
21438: LD_EXP 88
21442: PPUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL 29186 0 2
21452: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21453: LD_EXP 89
21457: PUSH
21458: LD_VAR 0 4
21462: ARRAY
21463: IFFALSE 21544
// begin for i in hackTanksCaptured [ index ] do
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_EXP 89
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PUSH
21481: FOR_IN
21482: IFFALSE 21508
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21484: LD_VAR 0 3
21488: PUSH
21489: LD_INT 1
21491: ARRAY
21492: PPUSH
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 2
21500: ARRAY
21501: PPUSH
21502: CALL_OW 235
21506: GO 21481
21508: POP
21509: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21510: LD_ADDR_EXP 89
21514: PUSH
21515: LD_EXP 89
21519: PPUSH
21520: LD_VAR 0 4
21524: PPUSH
21525: EMPTY
21526: PPUSH
21527: CALL_OW 1
21531: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21532: LD_VAR 0 1
21536: PPUSH
21537: LD_INT 0
21539: PPUSH
21540: CALL_OW 505
// end ; end ;
21544: LD_VAR 0 2
21548: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21549: LD_INT 0
21551: PPUSH
21552: PPUSH
21553: PPUSH
// if not hack in hackTanks or not vehicles then
21554: LD_VAR 0 1
21558: PUSH
21559: LD_EXP 88
21563: IN
21564: NOT
21565: PUSH
21566: LD_VAR 0 2
21570: NOT
21571: OR
21572: IFFALSE 21576
// exit ;
21574: GO 21851
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: LD_VAR 0 2
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: LD_INT 1
21596: PPUSH
21597: CALL 29836 0 4
21601: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21602: LD_ADDR_VAR 0 5
21606: PUSH
21607: LD_EXP 88
21611: PPUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: CALL 29186 0 2
21621: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21622: LD_EXP 89
21626: PUSH
21627: LD_VAR 0 5
21631: ARRAY
21632: PUSH
21633: LD_EXP 90
21637: LESS
21638: IFFALSE 21827
// begin for i := 1 to vehicles do
21640: LD_ADDR_VAR 0 4
21644: PUSH
21645: DOUBLE
21646: LD_INT 1
21648: DEC
21649: ST_TO_ADDR
21650: LD_VAR 0 2
21654: PUSH
21655: FOR_TO
21656: IFFALSE 21825
// begin if hackTanksCaptured [ index ] = hackLimit then
21658: LD_EXP 89
21662: PUSH
21663: LD_VAR 0 5
21667: ARRAY
21668: PUSH
21669: LD_EXP 90
21673: EQUAL
21674: IFFALSE 21678
// break ;
21676: GO 21825
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21678: LD_ADDR_EXP 92
21682: PUSH
21683: LD_EXP 92
21687: PPUSH
21688: LD_VAR 0 5
21692: PPUSH
21693: LD_EXP 92
21697: PUSH
21698: LD_VAR 0 5
21702: ARRAY
21703: PUSH
21704: LD_INT 1
21706: PLUS
21707: PPUSH
21708: CALL_OW 1
21712: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21713: LD_ADDR_EXP 89
21717: PUSH
21718: LD_EXP 89
21722: PPUSH
21723: LD_VAR 0 5
21727: PUSH
21728: LD_EXP 89
21732: PUSH
21733: LD_VAR 0 5
21737: ARRAY
21738: PUSH
21739: LD_INT 1
21741: PLUS
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PPUSH
21747: LD_VAR 0 2
21751: PUSH
21752: LD_VAR 0 4
21756: ARRAY
21757: PUSH
21758: LD_VAR 0 2
21762: PUSH
21763: LD_VAR 0 4
21767: ARRAY
21768: PPUSH
21769: CALL_OW 255
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PPUSH
21778: CALL 29401 0 3
21782: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21783: LD_VAR 0 2
21787: PUSH
21788: LD_VAR 0 4
21792: ARRAY
21793: PPUSH
21794: LD_VAR 0 1
21798: PPUSH
21799: CALL_OW 255
21803: PPUSH
21804: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21808: LD_VAR 0 2
21812: PUSH
21813: LD_VAR 0 4
21817: ARRAY
21818: PPUSH
21819: CALL_OW 141
// end ;
21823: GO 21655
21825: POP
21826: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21827: LD_VAR 0 1
21831: PPUSH
21832: LD_EXP 89
21836: PUSH
21837: LD_VAR 0 5
21841: ARRAY
21842: PUSH
21843: LD_INT 0
21845: PLUS
21846: PPUSH
21847: CALL_OW 505
// end ;
21851: LD_VAR 0 3
21855: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
// if not hack in hackTanks then
21862: LD_VAR 0 1
21866: PUSH
21867: LD_EXP 88
21871: IN
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 22117
// index := GetElementIndex ( hackTanks , hack ) ;
21877: LD_ADDR_VAR 0 4
21881: PUSH
21882: LD_EXP 88
21886: PPUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL 29186 0 2
21896: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21897: LD_ADDR_VAR 0 3
21901: PUSH
21902: DOUBLE
21903: LD_EXP 89
21907: PUSH
21908: LD_VAR 0 4
21912: ARRAY
21913: INC
21914: ST_TO_ADDR
21915: LD_INT 1
21917: PUSH
21918: FOR_DOWNTO
21919: IFFALSE 22091
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21921: LD_ADDR_VAR 0 5
21925: PUSH
21926: LD_EXP 89
21930: PUSH
21931: LD_VAR 0 4
21935: ARRAY
21936: PUSH
21937: LD_VAR 0 3
21941: ARRAY
21942: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21943: LD_VAR 0 5
21947: PUSH
21948: LD_INT 1
21950: ARRAY
21951: PPUSH
21952: CALL_OW 302
21956: NOT
21957: PUSH
21958: LD_VAR 0 5
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PPUSH
21967: CALL_OW 255
21971: PUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 255
21981: NONEQUAL
21982: OR
21983: IFFALSE 22089
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21985: LD_VAR 0 5
21989: PUSH
21990: LD_INT 1
21992: ARRAY
21993: PPUSH
21994: CALL_OW 305
21998: PUSH
21999: LD_VAR 0 5
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: CALL_OW 255
22012: PUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 255
22022: EQUAL
22023: AND
22024: IFFALSE 22048
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22026: LD_VAR 0 5
22030: PUSH
22031: LD_INT 1
22033: ARRAY
22034: PPUSH
22035: LD_VAR 0 5
22039: PUSH
22040: LD_INT 2
22042: ARRAY
22043: PPUSH
22044: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22048: LD_ADDR_EXP 89
22052: PUSH
22053: LD_EXP 89
22057: PPUSH
22058: LD_VAR 0 4
22062: PPUSH
22063: LD_EXP 89
22067: PUSH
22068: LD_VAR 0 4
22072: ARRAY
22073: PPUSH
22074: LD_VAR 0 3
22078: PPUSH
22079: CALL_OW 3
22083: PPUSH
22084: CALL_OW 1
22088: ST_TO_ADDR
// end ; end ;
22089: GO 21918
22091: POP
22092: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22093: LD_VAR 0 1
22097: PPUSH
22098: LD_EXP 89
22102: PUSH
22103: LD_VAR 0 4
22107: ARRAY
22108: PUSH
22109: LD_INT 0
22111: PLUS
22112: PPUSH
22113: CALL_OW 505
// end ;
22117: LD_VAR 0 2
22121: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22122: LD_INT 0
22124: PPUSH
22125: PPUSH
22126: PPUSH
22127: PPUSH
// if not hack in hackTanks then
22128: LD_VAR 0 1
22132: PUSH
22133: LD_EXP 88
22137: IN
22138: NOT
22139: IFFALSE 22143
// exit ;
22141: GO 22228
// index := GetElementIndex ( hackTanks , hack ) ;
22143: LD_ADDR_VAR 0 5
22147: PUSH
22148: LD_EXP 88
22152: PPUSH
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL 29186 0 2
22162: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: DOUBLE
22169: LD_INT 1
22171: DEC
22172: ST_TO_ADDR
22173: LD_EXP 89
22177: PUSH
22178: LD_VAR 0 5
22182: ARRAY
22183: PUSH
22184: FOR_TO
22185: IFFALSE 22226
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22187: LD_EXP 89
22191: PUSH
22192: LD_VAR 0 5
22196: ARRAY
22197: PUSH
22198: LD_VAR 0 4
22202: ARRAY
22203: PUSH
22204: LD_INT 1
22206: ARRAY
22207: PUSH
22208: LD_VAR 0 2
22212: EQUAL
22213: IFFALSE 22224
// KillUnit ( vehicle ) ;
22215: LD_VAR 0 2
22219: PPUSH
22220: CALL_OW 66
22224: GO 22184
22226: POP
22227: POP
// end ;
22228: LD_VAR 0 3
22232: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22233: LD_EXP 93
22237: NOT
22238: IFFALSE 22273
22240: GO 22242
22242: DISABLE
// begin initMiner := true ;
22243: LD_ADDR_EXP 93
22247: PUSH
22248: LD_INT 1
22250: ST_TO_ADDR
// minersList := [ ] ;
22251: LD_ADDR_EXP 94
22255: PUSH
22256: EMPTY
22257: ST_TO_ADDR
// minerMinesList := [ ] ;
22258: LD_ADDR_EXP 95
22262: PUSH
22263: EMPTY
22264: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22265: LD_ADDR_EXP 96
22269: PUSH
22270: LD_INT 5
22272: ST_TO_ADDR
// end ;
22273: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22274: LD_EXP 93
22278: PUSH
22279: LD_INT 34
22281: PUSH
22282: LD_EXP 104
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PPUSH
22291: CALL_OW 69
22295: AND
22296: IFFALSE 22759
22298: GO 22300
22300: DISABLE
22301: LD_INT 0
22303: PPUSH
22304: PPUSH
22305: PPUSH
22306: PPUSH
// begin enable ;
22307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22308: LD_ADDR_VAR 0 1
22312: PUSH
22313: LD_INT 34
22315: PUSH
22316: LD_EXP 104
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL_OW 69
22329: PUSH
22330: FOR_IN
22331: IFFALSE 22403
// begin if not i in minersList then
22333: LD_VAR 0 1
22337: PUSH
22338: LD_EXP 94
22342: IN
22343: NOT
22344: IFFALSE 22401
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22346: LD_ADDR_EXP 94
22350: PUSH
22351: LD_EXP 94
22355: PPUSH
22356: LD_EXP 94
22360: PUSH
22361: LD_INT 1
22363: PLUS
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 1
22374: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22375: LD_ADDR_EXP 95
22379: PUSH
22380: LD_EXP 95
22384: PPUSH
22385: LD_EXP 95
22389: PUSH
22390: LD_INT 1
22392: PLUS
22393: PPUSH
22394: EMPTY
22395: PPUSH
22396: CALL_OW 1
22400: ST_TO_ADDR
// end end ;
22401: GO 22330
22403: POP
22404: POP
// for i := minerMinesList downto 1 do
22405: LD_ADDR_VAR 0 1
22409: PUSH
22410: DOUBLE
22411: LD_EXP 95
22415: INC
22416: ST_TO_ADDR
22417: LD_INT 1
22419: PUSH
22420: FOR_DOWNTO
22421: IFFALSE 22757
// begin if IsLive ( minersList [ i ] ) then
22423: LD_EXP 94
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: CALL_OW 300
22438: IFFALSE 22466
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22440: LD_EXP 94
22444: PUSH
22445: LD_VAR 0 1
22449: ARRAY
22450: PPUSH
22451: LD_EXP 95
22455: PUSH
22456: LD_VAR 0 1
22460: ARRAY
22461: PPUSH
22462: CALL_OW 505
// if not minerMinesList [ i ] then
22466: LD_EXP 95
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: NOT
22477: IFFALSE 22481
// continue ;
22479: GO 22420
// for j := minerMinesList [ i ] downto 1 do
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: DOUBLE
22487: LD_EXP 95
22491: PUSH
22492: LD_VAR 0 1
22496: ARRAY
22497: INC
22498: ST_TO_ADDR
22499: LD_INT 1
22501: PUSH
22502: FOR_DOWNTO
22503: IFFALSE 22753
// begin side := GetSide ( minersList [ i ] ) ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_EXP 94
22514: PUSH
22515: LD_VAR 0 1
22519: ARRAY
22520: PPUSH
22521: CALL_OW 255
22525: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22526: LD_ADDR_VAR 0 4
22530: PUSH
22531: LD_EXP 95
22535: PUSH
22536: LD_VAR 0 1
22540: ARRAY
22541: PUSH
22542: LD_VAR 0 2
22546: ARRAY
22547: PUSH
22548: LD_INT 1
22550: ARRAY
22551: PPUSH
22552: LD_EXP 95
22556: PUSH
22557: LD_VAR 0 1
22561: ARRAY
22562: PUSH
22563: LD_VAR 0 2
22567: ARRAY
22568: PUSH
22569: LD_INT 2
22571: ARRAY
22572: PPUSH
22573: CALL_OW 428
22577: ST_TO_ADDR
// if not tmp then
22578: LD_VAR 0 4
22582: NOT
22583: IFFALSE 22587
// continue ;
22585: GO 22502
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22587: LD_VAR 0 4
22591: PUSH
22592: LD_INT 81
22594: PUSH
22595: LD_VAR 0 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: IN
22609: PUSH
22610: LD_EXP 95
22614: PUSH
22615: LD_VAR 0 1
22619: ARRAY
22620: PUSH
22621: LD_VAR 0 2
22625: ARRAY
22626: PUSH
22627: LD_INT 1
22629: ARRAY
22630: PPUSH
22631: LD_EXP 95
22635: PUSH
22636: LD_VAR 0 1
22640: ARRAY
22641: PUSH
22642: LD_VAR 0 2
22646: ARRAY
22647: PUSH
22648: LD_INT 2
22650: ARRAY
22651: PPUSH
22652: CALL_OW 458
22656: AND
22657: IFFALSE 22751
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22659: LD_EXP 95
22663: PUSH
22664: LD_VAR 0 1
22668: ARRAY
22669: PUSH
22670: LD_VAR 0 2
22674: ARRAY
22675: PUSH
22676: LD_INT 1
22678: ARRAY
22679: PPUSH
22680: LD_EXP 95
22684: PUSH
22685: LD_VAR 0 1
22689: ARRAY
22690: PUSH
22691: LD_VAR 0 2
22695: ARRAY
22696: PUSH
22697: LD_INT 2
22699: ARRAY
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22710: LD_ADDR_EXP 95
22714: PUSH
22715: LD_EXP 95
22719: PPUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: LD_EXP 95
22729: PUSH
22730: LD_VAR 0 1
22734: ARRAY
22735: PPUSH
22736: LD_VAR 0 2
22740: PPUSH
22741: CALL_OW 3
22745: PPUSH
22746: CALL_OW 1
22750: ST_TO_ADDR
// end ; end ;
22751: GO 22502
22753: POP
22754: POP
// end ;
22755: GO 22420
22757: POP
22758: POP
// end ;
22759: PPOPN 4
22761: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
// result := false ;
22766: LD_ADDR_VAR 0 4
22770: PUSH
22771: LD_INT 0
22773: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 264
22783: PUSH
22784: LD_EXP 104
22788: EQUAL
22789: NOT
22790: IFFALSE 22794
// exit ;
22792: GO 23034
// index := GetElementIndex ( minersList , unit ) ;
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_EXP 94
22803: PPUSH
22804: LD_VAR 0 1
22808: PPUSH
22809: CALL 29186 0 2
22813: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22814: LD_EXP 95
22818: PUSH
22819: LD_VAR 0 5
22823: ARRAY
22824: PUSH
22825: LD_EXP 96
22829: GREATEREQUAL
22830: IFFALSE 22834
// exit ;
22832: GO 23034
// ComMoveXY ( unit , x , y ) ;
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_VAR 0 2
22843: PPUSH
22844: LD_VAR 0 3
22848: PPUSH
22849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22853: LD_INT 35
22855: PPUSH
22856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_VAR 0 2
22869: PPUSH
22870: LD_VAR 0 3
22874: PPUSH
22875: CALL 59958 0 3
22879: NOT
22880: PUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 314
22890: AND
22891: IFFALSE 22895
// exit ;
22893: GO 23034
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22895: LD_VAR 0 2
22899: PPUSH
22900: LD_VAR 0 3
22904: PPUSH
22905: CALL_OW 428
22909: PUSH
22910: LD_VAR 0 1
22914: EQUAL
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 314
22925: NOT
22926: AND
22927: IFFALSE 22853
// PlaySoundXY ( x , y , PlantMine ) ;
22929: LD_VAR 0 2
22933: PPUSH
22934: LD_VAR 0 3
22938: PPUSH
22939: LD_STRING PlantMine
22941: PPUSH
22942: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22946: LD_VAR 0 2
22950: PPUSH
22951: LD_VAR 0 3
22955: PPUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: PPUSH
22966: LD_INT 0
22968: PPUSH
22969: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22973: LD_ADDR_EXP 95
22977: PUSH
22978: LD_EXP 95
22982: PPUSH
22983: LD_VAR 0 5
22987: PUSH
22988: LD_EXP 95
22992: PUSH
22993: LD_VAR 0 5
22997: ARRAY
22998: PUSH
22999: LD_INT 1
23001: PLUS
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PPUSH
23007: LD_VAR 0 2
23011: PUSH
23012: LD_VAR 0 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PPUSH
23021: CALL 29401 0 3
23025: ST_TO_ADDR
// result := true ;
23026: LD_ADDR_VAR 0 4
23030: PUSH
23031: LD_INT 1
23033: ST_TO_ADDR
// end ;
23034: LD_VAR 0 4
23038: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23039: LD_INT 0
23041: PPUSH
23042: PPUSH
23043: PPUSH
// if not unit in minersList then
23044: LD_VAR 0 1
23048: PUSH
23049: LD_EXP 94
23053: IN
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23451
// index := GetElementIndex ( minersList , unit ) ;
23059: LD_ADDR_VAR 0 6
23063: PUSH
23064: LD_EXP 94
23068: PPUSH
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL 29186 0 2
23078: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23079: LD_ADDR_VAR 0 5
23083: PUSH
23084: DOUBLE
23085: LD_EXP 95
23089: PUSH
23090: LD_VAR 0 6
23094: ARRAY
23095: INC
23096: ST_TO_ADDR
23097: LD_INT 1
23099: PUSH
23100: FOR_DOWNTO
23101: IFFALSE 23262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23103: LD_EXP 95
23107: PUSH
23108: LD_VAR 0 6
23112: ARRAY
23113: PUSH
23114: LD_VAR 0 5
23118: ARRAY
23119: PUSH
23120: LD_INT 1
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 2
23128: EQUAL
23129: PUSH
23130: LD_EXP 95
23134: PUSH
23135: LD_VAR 0 6
23139: ARRAY
23140: PUSH
23141: LD_VAR 0 5
23145: ARRAY
23146: PUSH
23147: LD_INT 2
23149: ARRAY
23150: PUSH
23151: LD_VAR 0 3
23155: EQUAL
23156: AND
23157: IFFALSE 23260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23159: LD_EXP 95
23163: PUSH
23164: LD_VAR 0 6
23168: ARRAY
23169: PUSH
23170: LD_VAR 0 5
23174: ARRAY
23175: PUSH
23176: LD_INT 1
23178: ARRAY
23179: PPUSH
23180: LD_EXP 95
23184: PUSH
23185: LD_VAR 0 6
23189: ARRAY
23190: PUSH
23191: LD_VAR 0 5
23195: ARRAY
23196: PUSH
23197: LD_INT 2
23199: ARRAY
23200: PPUSH
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 255
23210: PPUSH
23211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23215: LD_ADDR_EXP 95
23219: PUSH
23220: LD_EXP 95
23224: PPUSH
23225: LD_VAR 0 6
23229: PPUSH
23230: LD_EXP 95
23234: PUSH
23235: LD_VAR 0 6
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 5
23245: PPUSH
23246: CALL_OW 3
23250: PPUSH
23251: CALL_OW 1
23255: ST_TO_ADDR
// exit ;
23256: POP
23257: POP
23258: GO 23451
// end ; end ;
23260: GO 23100
23262: POP
23263: POP
// for i := minerMinesList [ index ] downto 1 do
23264: LD_ADDR_VAR 0 5
23268: PUSH
23269: DOUBLE
23270: LD_EXP 95
23274: PUSH
23275: LD_VAR 0 6
23279: ARRAY
23280: INC
23281: ST_TO_ADDR
23282: LD_INT 1
23284: PUSH
23285: FOR_DOWNTO
23286: IFFALSE 23449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23288: LD_EXP 95
23292: PUSH
23293: LD_VAR 0 6
23297: ARRAY
23298: PUSH
23299: LD_VAR 0 5
23303: ARRAY
23304: PUSH
23305: LD_INT 1
23307: ARRAY
23308: PPUSH
23309: LD_EXP 95
23313: PUSH
23314: LD_VAR 0 6
23318: ARRAY
23319: PUSH
23320: LD_VAR 0 5
23324: ARRAY
23325: PUSH
23326: LD_INT 2
23328: ARRAY
23329: PPUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: LD_VAR 0 3
23339: PPUSH
23340: CALL_OW 298
23344: PUSH
23345: LD_INT 6
23347: LESS
23348: IFFALSE 23447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23350: LD_EXP 95
23354: PUSH
23355: LD_VAR 0 6
23359: ARRAY
23360: PUSH
23361: LD_VAR 0 5
23365: ARRAY
23366: PUSH
23367: LD_INT 1
23369: ARRAY
23370: PPUSH
23371: LD_EXP 95
23375: PUSH
23376: LD_VAR 0 6
23380: ARRAY
23381: PUSH
23382: LD_VAR 0 5
23386: ARRAY
23387: PUSH
23388: LD_INT 2
23390: ARRAY
23391: PPUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 255
23401: PPUSH
23402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23406: LD_ADDR_EXP 95
23410: PUSH
23411: LD_EXP 95
23415: PPUSH
23416: LD_VAR 0 6
23420: PPUSH
23421: LD_EXP 95
23425: PUSH
23426: LD_VAR 0 6
23430: ARRAY
23431: PPUSH
23432: LD_VAR 0 5
23436: PPUSH
23437: CALL_OW 3
23441: PPUSH
23442: CALL_OW 1
23446: ST_TO_ADDR
// end ; end ;
23447: GO 23285
23449: POP
23450: POP
// end ;
23451: LD_VAR 0 4
23455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL_OW 264
23476: PUSH
23477: LD_EXP 104
23481: EQUAL
23482: NOT
23483: PUSH
23484: LD_VAR 0 1
23488: PUSH
23489: LD_EXP 94
23493: IN
23494: NOT
23495: OR
23496: IFFALSE 23500
// exit ;
23498: GO 23822
// index := GetElementIndex ( minersList , unit ) ;
23500: LD_ADDR_VAR 0 6
23504: PUSH
23505: LD_EXP 94
23509: PPUSH
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL 29186 0 2
23519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23520: LD_ADDR_VAR 0 8
23524: PUSH
23525: LD_EXP 96
23529: PUSH
23530: LD_EXP 95
23534: PUSH
23535: LD_VAR 0 6
23539: ARRAY
23540: MINUS
23541: ST_TO_ADDR
// if not minesFreeAmount then
23542: LD_VAR 0 8
23546: NOT
23547: IFFALSE 23551
// exit ;
23549: GO 23822
// tmp := [ ] ;
23551: LD_ADDR_VAR 0 7
23555: PUSH
23556: EMPTY
23557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: DOUBLE
23564: LD_INT 1
23566: DEC
23567: ST_TO_ADDR
23568: LD_VAR 0 8
23572: PUSH
23573: FOR_TO
23574: IFFALSE 23769
// begin _d := rand ( 0 , 5 ) ;
23576: LD_ADDR_VAR 0 11
23580: PUSH
23581: LD_INT 0
23583: PPUSH
23584: LD_INT 5
23586: PPUSH
23587: CALL_OW 12
23591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23592: LD_ADDR_VAR 0 12
23596: PUSH
23597: LD_INT 2
23599: PPUSH
23600: LD_INT 6
23602: PPUSH
23603: CALL_OW 12
23607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23608: LD_ADDR_VAR 0 9
23612: PUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: LD_VAR 0 11
23622: PPUSH
23623: LD_VAR 0 12
23627: PPUSH
23628: CALL_OW 272
23632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23633: LD_ADDR_VAR 0 10
23637: PUSH
23638: LD_VAR 0 3
23642: PPUSH
23643: LD_VAR 0 11
23647: PPUSH
23648: LD_VAR 0 12
23652: PPUSH
23653: CALL_OW 273
23657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23658: LD_VAR 0 9
23662: PPUSH
23663: LD_VAR 0 10
23667: PPUSH
23668: CALL_OW 488
23672: PUSH
23673: LD_VAR 0 9
23677: PUSH
23678: LD_VAR 0 10
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_VAR 0 7
23691: IN
23692: NOT
23693: AND
23694: PUSH
23695: LD_VAR 0 9
23699: PPUSH
23700: LD_VAR 0 10
23704: PPUSH
23705: CALL_OW 458
23709: NOT
23710: AND
23711: IFFALSE 23753
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23713: LD_ADDR_VAR 0 7
23717: PUSH
23718: LD_VAR 0 7
23722: PPUSH
23723: LD_VAR 0 7
23727: PUSH
23728: LD_INT 1
23730: PLUS
23731: PPUSH
23732: LD_VAR 0 9
23736: PUSH
23737: LD_VAR 0 10
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 1
23750: ST_TO_ADDR
23751: GO 23767
// i := i - 1 ;
23753: LD_ADDR_VAR 0 5
23757: PUSH
23758: LD_VAR 0 5
23762: PUSH
23763: LD_INT 1
23765: MINUS
23766: ST_TO_ADDR
// end ;
23767: GO 23573
23769: POP
23770: POP
// for i in tmp do
23771: LD_ADDR_VAR 0 5
23775: PUSH
23776: LD_VAR 0 7
23780: PUSH
23781: FOR_IN
23782: IFFALSE 23820
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23784: LD_VAR 0 1
23788: PPUSH
23789: LD_VAR 0 5
23793: PUSH
23794: LD_INT 1
23796: ARRAY
23797: PPUSH
23798: LD_VAR 0 5
23802: PUSH
23803: LD_INT 2
23805: ARRAY
23806: PPUSH
23807: CALL 22762 0 3
23811: NOT
23812: IFFALSE 23818
// exit ;
23814: POP
23815: POP
23816: GO 23822
23818: GO 23781
23820: POP
23821: POP
// end ;
23822: LD_VAR 0 4
23826: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
// if not GetClass ( unit ) = class_sniper then
23836: LD_VAR 0 1
23840: PPUSH
23841: CALL_OW 257
23845: PUSH
23846: LD_INT 5
23848: EQUAL
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 24242
// dist := 8 ;
23854: LD_ADDR_VAR 0 5
23858: PUSH
23859: LD_INT 8
23861: ST_TO_ADDR
// viewRange := 12 ;
23862: LD_ADDR_VAR 0 7
23866: PUSH
23867: LD_INT 12
23869: ST_TO_ADDR
// side := GetSide ( unit ) ;
23870: LD_ADDR_VAR 0 6
23874: PUSH
23875: LD_VAR 0 1
23879: PPUSH
23880: CALL_OW 255
23884: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23885: LD_INT 61
23887: PPUSH
23888: LD_VAR 0 6
23892: PPUSH
23893: CALL_OW 321
23897: PUSH
23898: LD_INT 2
23900: EQUAL
23901: IFFALSE 23911
// viewRange := 16 ;
23903: LD_ADDR_VAR 0 7
23907: PUSH
23908: LD_INT 16
23910: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23911: LD_VAR 0 1
23915: PPUSH
23916: LD_VAR 0 2
23920: PPUSH
23921: LD_VAR 0 3
23925: PPUSH
23926: CALL_OW 297
23930: PUSH
23931: LD_VAR 0 5
23935: GREATER
23936: IFFALSE 24015
// begin ComMoveXY ( unit , x , y ) ;
23938: LD_VAR 0 1
23942: PPUSH
23943: LD_VAR 0 2
23947: PPUSH
23948: LD_VAR 0 3
23952: PPUSH
23953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23957: LD_INT 35
23959: PPUSH
23960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23964: LD_VAR 0 1
23968: PPUSH
23969: LD_VAR 0 2
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: CALL 59958 0 3
23983: NOT
23984: IFFALSE 23988
// exit ;
23986: GO 24242
// until GetDistUnitXY ( unit , x , y ) < dist ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_VAR 0 2
23997: PPUSH
23998: LD_VAR 0 3
24002: PPUSH
24003: CALL_OW 297
24007: PUSH
24008: LD_VAR 0 5
24012: LESS
24013: IFFALSE 23957
// end ; ComTurnXY ( unit , x , y ) ;
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_VAR 0 2
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 118
// wait ( 5 ) ;
24034: LD_INT 5
24036: PPUSH
24037: CALL_OW 67
// _d := GetDir ( unit ) ;
24041: LD_ADDR_VAR 0 10
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 254
24055: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24056: LD_ADDR_VAR 0 8
24060: PUSH
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL_OW 250
24070: PPUSH
24071: LD_VAR 0 10
24075: PPUSH
24076: LD_VAR 0 5
24080: PPUSH
24081: CALL_OW 272
24085: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24086: LD_ADDR_VAR 0 9
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 251
24100: PPUSH
24101: LD_VAR 0 10
24105: PPUSH
24106: LD_VAR 0 5
24110: PPUSH
24111: CALL_OW 273
24115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24116: LD_VAR 0 8
24120: PPUSH
24121: LD_VAR 0 9
24125: PPUSH
24126: CALL_OW 488
24130: NOT
24131: IFFALSE 24135
// exit ;
24133: GO 24242
// ComAnimCustom ( unit , 1 ) ;
24135: LD_VAR 0 1
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24147: LD_VAR 0 8
24151: PPUSH
24152: LD_VAR 0 9
24156: PPUSH
24157: LD_VAR 0 6
24161: PPUSH
24162: LD_VAR 0 7
24166: PPUSH
24167: CALL_OW 330
// repeat wait ( 1 ) ;
24171: LD_INT 1
24173: PPUSH
24174: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24178: LD_VAR 0 1
24182: PPUSH
24183: CALL_OW 316
24187: PUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 314
24197: OR
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 302
24208: NOT
24209: OR
24210: PUSH
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 301
24220: OR
24221: IFFALSE 24171
// RemoveSeeing ( _x , _y , side ) ;
24223: LD_VAR 0 8
24227: PPUSH
24228: LD_VAR 0 9
24232: PPUSH
24233: LD_VAR 0 6
24237: PPUSH
24238: CALL_OW 331
// end ; end_of_file
24242: LD_VAR 0 4
24246: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24247: LD_INT 0
24249: PPUSH
// ar_miner := 81 ;
24250: LD_ADDR_EXP 104
24254: PUSH
24255: LD_INT 81
24257: ST_TO_ADDR
// ar_crane := 88 ;
24258: LD_ADDR_EXP 103
24262: PUSH
24263: LD_INT 88
24265: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24266: LD_ADDR_EXP 98
24270: PUSH
24271: LD_INT 89
24273: ST_TO_ADDR
// us_hack := 99 ;
24274: LD_ADDR_EXP 99
24278: PUSH
24279: LD_INT 99
24281: ST_TO_ADDR
// us_artillery := 97 ;
24282: LD_ADDR_EXP 100
24286: PUSH
24287: LD_INT 97
24289: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24290: LD_ADDR_EXP 101
24294: PUSH
24295: LD_INT 91
24297: ST_TO_ADDR
// ar_mortar := 92 ;
24298: LD_ADDR_EXP 102
24302: PUSH
24303: LD_INT 92
24305: ST_TO_ADDR
// ru_radar := 98 ;
24306: LD_ADDR_EXP 97
24310: PUSH
24311: LD_INT 98
24313: ST_TO_ADDR
// tech_Artillery := 80 ;
24314: LD_ADDR_EXP 105
24318: PUSH
24319: LD_INT 80
24321: ST_TO_ADDR
// tech_RadMat := 81 ;
24322: LD_ADDR_EXP 106
24326: PUSH
24327: LD_INT 81
24329: ST_TO_ADDR
// tech_BasicTools := 82 ;
24330: LD_ADDR_EXP 107
24334: PUSH
24335: LD_INT 82
24337: ST_TO_ADDR
// tech_Cargo := 83 ;
24338: LD_ADDR_EXP 108
24342: PUSH
24343: LD_INT 83
24345: ST_TO_ADDR
// tech_Track := 84 ;
24346: LD_ADDR_EXP 109
24350: PUSH
24351: LD_INT 84
24353: ST_TO_ADDR
// tech_Crane := 85 ;
24354: LD_ADDR_EXP 110
24358: PUSH
24359: LD_INT 85
24361: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24362: LD_ADDR_EXP 111
24366: PUSH
24367: LD_INT 86
24369: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24370: LD_ADDR_EXP 112
24374: PUSH
24375: LD_INT 87
24377: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24378: LD_ADDR_EXP 113
24382: PUSH
24383: LD_INT 88
24385: ST_TO_ADDR
// class_mastodont := 31 ;
24386: LD_ADDR_EXP 114
24390: PUSH
24391: LD_INT 31
24393: ST_TO_ADDR
// class_horse := 21 ;
24394: LD_ADDR_EXP 115
24398: PUSH
24399: LD_INT 21
24401: ST_TO_ADDR
// end ;
24402: LD_VAR 0 1
24406: RET
// every 1 do
24407: GO 24409
24409: DISABLE
// InitGlobalVariables ; end_of_file
24410: CALL 24247 0 0
24414: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
// if exist_mode then
24419: LD_VAR 0 2
24423: IFFALSE 24448
// unit := CreateCharacter ( prefix & ident ) else
24425: LD_ADDR_VAR 0 5
24429: PUSH
24430: LD_VAR 0 3
24434: PUSH
24435: LD_VAR 0 1
24439: STR
24440: PPUSH
24441: CALL_OW 34
24445: ST_TO_ADDR
24446: GO 24463
// unit := NewCharacter ( ident ) ;
24448: LD_ADDR_VAR 0 5
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 25
24462: ST_TO_ADDR
// result := unit ;
24463: LD_ADDR_VAR 0 4
24467: PUSH
24468: LD_VAR 0 5
24472: ST_TO_ADDR
// end ;
24473: LD_VAR 0 4
24477: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24478: LD_INT 0
24480: PPUSH
24481: PPUSH
// if not side or not nation then
24482: LD_VAR 0 1
24486: NOT
24487: PUSH
24488: LD_VAR 0 2
24492: NOT
24493: OR
24494: IFFALSE 24498
// exit ;
24496: GO 25266
// case nation of nation_american :
24498: LD_VAR 0 2
24502: PUSH
24503: LD_INT 1
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24725
24511: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24512: LD_ADDR_VAR 0 4
24516: PUSH
24517: LD_INT 35
24519: PUSH
24520: LD_INT 45
24522: PUSH
24523: LD_INT 46
24525: PUSH
24526: LD_INT 47
24528: PUSH
24529: LD_INT 82
24531: PUSH
24532: LD_INT 83
24534: PUSH
24535: LD_INT 84
24537: PUSH
24538: LD_INT 85
24540: PUSH
24541: LD_INT 86
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 6
24552: PUSH
24553: LD_INT 15
24555: PUSH
24556: LD_INT 16
24558: PUSH
24559: LD_INT 7
24561: PUSH
24562: LD_INT 12
24564: PUSH
24565: LD_INT 13
24567: PUSH
24568: LD_INT 10
24570: PUSH
24571: LD_INT 14
24573: PUSH
24574: LD_INT 20
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 22
24582: PUSH
24583: LD_INT 25
24585: PUSH
24586: LD_INT 32
24588: PUSH
24589: LD_INT 27
24591: PUSH
24592: LD_INT 36
24594: PUSH
24595: LD_INT 69
24597: PUSH
24598: LD_INT 39
24600: PUSH
24601: LD_INT 34
24603: PUSH
24604: LD_INT 40
24606: PUSH
24607: LD_INT 48
24609: PUSH
24610: LD_INT 49
24612: PUSH
24613: LD_INT 50
24615: PUSH
24616: LD_INT 51
24618: PUSH
24619: LD_INT 52
24621: PUSH
24622: LD_INT 53
24624: PUSH
24625: LD_INT 54
24627: PUSH
24628: LD_INT 55
24630: PUSH
24631: LD_INT 56
24633: PUSH
24634: LD_INT 57
24636: PUSH
24637: LD_INT 58
24639: PUSH
24640: LD_INT 59
24642: PUSH
24643: LD_INT 60
24645: PUSH
24646: LD_INT 61
24648: PUSH
24649: LD_INT 62
24651: PUSH
24652: LD_INT 80
24654: PUSH
24655: LD_INT 82
24657: PUSH
24658: LD_INT 83
24660: PUSH
24661: LD_INT 84
24663: PUSH
24664: LD_INT 85
24666: PUSH
24667: LD_INT 86
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: ST_TO_ADDR
24723: GO 25190
24725: LD_INT 2
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24959
24733: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24734: LD_ADDR_VAR 0 4
24738: PUSH
24739: LD_INT 35
24741: PUSH
24742: LD_INT 45
24744: PUSH
24745: LD_INT 46
24747: PUSH
24748: LD_INT 47
24750: PUSH
24751: LD_INT 82
24753: PUSH
24754: LD_INT 83
24756: PUSH
24757: LD_INT 84
24759: PUSH
24760: LD_INT 85
24762: PUSH
24763: LD_INT 87
24765: PUSH
24766: LD_INT 70
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 11
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: LD_INT 4
24780: PUSH
24781: LD_INT 5
24783: PUSH
24784: LD_INT 6
24786: PUSH
24787: LD_INT 15
24789: PUSH
24790: LD_INT 18
24792: PUSH
24793: LD_INT 7
24795: PUSH
24796: LD_INT 17
24798: PUSH
24799: LD_INT 8
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 72
24813: PUSH
24814: LD_INT 26
24816: PUSH
24817: LD_INT 69
24819: PUSH
24820: LD_INT 39
24822: PUSH
24823: LD_INT 40
24825: PUSH
24826: LD_INT 41
24828: PUSH
24829: LD_INT 42
24831: PUSH
24832: LD_INT 43
24834: PUSH
24835: LD_INT 48
24837: PUSH
24838: LD_INT 49
24840: PUSH
24841: LD_INT 50
24843: PUSH
24844: LD_INT 51
24846: PUSH
24847: LD_INT 52
24849: PUSH
24850: LD_INT 53
24852: PUSH
24853: LD_INT 54
24855: PUSH
24856: LD_INT 55
24858: PUSH
24859: LD_INT 56
24861: PUSH
24862: LD_INT 60
24864: PUSH
24865: LD_INT 61
24867: PUSH
24868: LD_INT 62
24870: PUSH
24871: LD_INT 66
24873: PUSH
24874: LD_INT 67
24876: PUSH
24877: LD_INT 68
24879: PUSH
24880: LD_INT 81
24882: PUSH
24883: LD_INT 82
24885: PUSH
24886: LD_INT 83
24888: PUSH
24889: LD_INT 84
24891: PUSH
24892: LD_INT 85
24894: PUSH
24895: LD_INT 87
24897: PUSH
24898: LD_INT 88
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
24957: GO 25190
24959: LD_INT 3
24961: DOUBLE
24962: EQUAL
24963: IFTRUE 24967
24965: GO 25189
24967: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24968: LD_ADDR_VAR 0 4
24972: PUSH
24973: LD_INT 46
24975: PUSH
24976: LD_INT 47
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 82
24987: PUSH
24988: LD_INT 83
24990: PUSH
24991: LD_INT 84
24993: PUSH
24994: LD_INT 85
24996: PUSH
24997: LD_INT 86
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 9
25005: PUSH
25006: LD_INT 20
25008: PUSH
25009: LD_INT 19
25011: PUSH
25012: LD_INT 21
25014: PUSH
25015: LD_INT 24
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_INT 25
25023: PUSH
25024: LD_INT 28
25026: PUSH
25027: LD_INT 29
25029: PUSH
25030: LD_INT 30
25032: PUSH
25033: LD_INT 31
25035: PUSH
25036: LD_INT 37
25038: PUSH
25039: LD_INT 38
25041: PUSH
25042: LD_INT 32
25044: PUSH
25045: LD_INT 27
25047: PUSH
25048: LD_INT 33
25050: PUSH
25051: LD_INT 69
25053: PUSH
25054: LD_INT 39
25056: PUSH
25057: LD_INT 34
25059: PUSH
25060: LD_INT 40
25062: PUSH
25063: LD_INT 71
25065: PUSH
25066: LD_INT 23
25068: PUSH
25069: LD_INT 44
25071: PUSH
25072: LD_INT 48
25074: PUSH
25075: LD_INT 49
25077: PUSH
25078: LD_INT 50
25080: PUSH
25081: LD_INT 51
25083: PUSH
25084: LD_INT 52
25086: PUSH
25087: LD_INT 53
25089: PUSH
25090: LD_INT 54
25092: PUSH
25093: LD_INT 55
25095: PUSH
25096: LD_INT 56
25098: PUSH
25099: LD_INT 57
25101: PUSH
25102: LD_INT 58
25104: PUSH
25105: LD_INT 59
25107: PUSH
25108: LD_INT 63
25110: PUSH
25111: LD_INT 64
25113: PUSH
25114: LD_INT 65
25116: PUSH
25117: LD_INT 82
25119: PUSH
25120: LD_INT 83
25122: PUSH
25123: LD_INT 84
25125: PUSH
25126: LD_INT 85
25128: PUSH
25129: LD_INT 86
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: ST_TO_ADDR
25187: GO 25190
25189: POP
// if state > - 1 and state < 3 then
25190: LD_VAR 0 3
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: GREATER
25199: PUSH
25200: LD_VAR 0 3
25204: PUSH
25205: LD_INT 3
25207: LESS
25208: AND
25209: IFFALSE 25266
// for i in result do
25211: LD_ADDR_VAR 0 5
25215: PUSH
25216: LD_VAR 0 4
25220: PUSH
25221: FOR_IN
25222: IFFALSE 25264
// if GetTech ( i , side ) <> state then
25224: LD_VAR 0 5
25228: PPUSH
25229: LD_VAR 0 1
25233: PPUSH
25234: CALL_OW 321
25238: PUSH
25239: LD_VAR 0 3
25243: NONEQUAL
25244: IFFALSE 25262
// result := result diff i ;
25246: LD_ADDR_VAR 0 4
25250: PUSH
25251: LD_VAR 0 4
25255: PUSH
25256: LD_VAR 0 5
25260: DIFF
25261: ST_TO_ADDR
25262: GO 25221
25264: POP
25265: POP
// end ;
25266: LD_VAR 0 4
25270: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
// result := true ;
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 1
25283: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25284: LD_ADDR_VAR 0 5
25288: PUSH
25289: LD_VAR 0 2
25293: PPUSH
25294: CALL_OW 480
25298: ST_TO_ADDR
// if not tmp then
25299: LD_VAR 0 5
25303: NOT
25304: IFFALSE 25308
// exit ;
25306: GO 25357
// for i in tmp do
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_VAR 0 5
25317: PUSH
25318: FOR_IN
25319: IFFALSE 25355
// if GetTech ( i , side ) <> state_researched then
25321: LD_VAR 0 4
25325: PPUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 321
25335: PUSH
25336: LD_INT 2
25338: NONEQUAL
25339: IFFALSE 25353
// begin result := false ;
25341: LD_ADDR_VAR 0 3
25345: PUSH
25346: LD_INT 0
25348: ST_TO_ADDR
// exit ;
25349: POP
25350: POP
25351: GO 25357
// end ;
25353: GO 25318
25355: POP
25356: POP
// end ;
25357: LD_VAR 0 3
25361: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25362: LD_INT 0
25364: PPUSH
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25377: LD_VAR 0 1
25381: NOT
25382: PUSH
25383: LD_VAR 0 1
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 9
25395: NONEQUAL
25396: OR
25397: IFFALSE 25401
// exit ;
25399: GO 25974
// side := GetSide ( unit ) ;
25401: LD_ADDR_VAR 0 9
25405: PUSH
25406: LD_VAR 0 1
25410: PPUSH
25411: CALL_OW 255
25415: ST_TO_ADDR
// tech_space := tech_spacanom ;
25416: LD_ADDR_VAR 0 12
25420: PUSH
25421: LD_INT 29
25423: ST_TO_ADDR
// tech_time := tech_taurad ;
25424: LD_ADDR_VAR 0 13
25428: PUSH
25429: LD_INT 28
25431: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25432: LD_ADDR_VAR 0 11
25436: PUSH
25437: LD_VAR 0 1
25441: PPUSH
25442: CALL_OW 310
25446: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25447: LD_VAR 0 11
25451: PPUSH
25452: CALL_OW 247
25456: PUSH
25457: LD_INT 2
25459: EQUAL
25460: IFFALSE 25464
// exit ;
25462: GO 25974
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25464: LD_ADDR_VAR 0 8
25468: PUSH
25469: LD_INT 81
25471: PUSH
25472: LD_VAR 0 9
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 21
25486: PUSH
25487: LD_INT 3
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PPUSH
25502: CALL_OW 69
25506: ST_TO_ADDR
// if not tmp then
25507: LD_VAR 0 8
25511: NOT
25512: IFFALSE 25516
// exit ;
25514: GO 25974
// if in_unit then
25516: LD_VAR 0 11
25520: IFFALSE 25544
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25522: LD_ADDR_VAR 0 10
25526: PUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: LD_VAR 0 11
25536: PPUSH
25537: CALL_OW 74
25541: ST_TO_ADDR
25542: GO 25564
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25544: LD_ADDR_VAR 0 10
25548: PUSH
25549: LD_VAR 0 8
25553: PPUSH
25554: LD_VAR 0 1
25558: PPUSH
25559: CALL_OW 74
25563: ST_TO_ADDR
// if not enemy then
25564: LD_VAR 0 10
25568: NOT
25569: IFFALSE 25573
// exit ;
25571: GO 25974
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25573: LD_VAR 0 11
25577: PUSH
25578: LD_VAR 0 11
25582: PPUSH
25583: LD_VAR 0 10
25587: PPUSH
25588: CALL_OW 296
25592: PUSH
25593: LD_INT 13
25595: GREATER
25596: AND
25597: PUSH
25598: LD_VAR 0 1
25602: PPUSH
25603: LD_VAR 0 10
25607: PPUSH
25608: CALL_OW 296
25612: PUSH
25613: LD_INT 12
25615: GREATER
25616: OR
25617: IFFALSE 25621
// exit ;
25619: GO 25974
// missile := [ 1 ] ;
25621: LD_ADDR_VAR 0 14
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25632: LD_VAR 0 9
25636: PPUSH
25637: LD_VAR 0 12
25641: PPUSH
25642: CALL_OW 325
25646: IFFALSE 25675
// missile := Insert ( missile , missile + 1 , 2 ) ;
25648: LD_ADDR_VAR 0 14
25652: PUSH
25653: LD_VAR 0 14
25657: PPUSH
25658: LD_VAR 0 14
25662: PUSH
25663: LD_INT 1
25665: PLUS
25666: PPUSH
25667: LD_INT 2
25669: PPUSH
25670: CALL_OW 2
25674: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25675: LD_VAR 0 9
25679: PPUSH
25680: LD_VAR 0 13
25684: PPUSH
25685: CALL_OW 325
25689: PUSH
25690: LD_VAR 0 10
25694: PPUSH
25695: CALL_OW 255
25699: PPUSH
25700: LD_VAR 0 13
25704: PPUSH
25705: CALL_OW 325
25709: NOT
25710: AND
25711: IFFALSE 25740
// missile := Insert ( missile , missile + 1 , 3 ) ;
25713: LD_ADDR_VAR 0 14
25717: PUSH
25718: LD_VAR 0 14
25722: PPUSH
25723: LD_VAR 0 14
25727: PUSH
25728: LD_INT 1
25730: PLUS
25731: PPUSH
25732: LD_INT 3
25734: PPUSH
25735: CALL_OW 2
25739: ST_TO_ADDR
// if missile < 2 then
25740: LD_VAR 0 14
25744: PUSH
25745: LD_INT 2
25747: LESS
25748: IFFALSE 25752
// exit ;
25750: GO 25974
// x := GetX ( enemy ) ;
25752: LD_ADDR_VAR 0 4
25756: PUSH
25757: LD_VAR 0 10
25761: PPUSH
25762: CALL_OW 250
25766: ST_TO_ADDR
// y := GetY ( enemy ) ;
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_VAR 0 10
25776: PPUSH
25777: CALL_OW 251
25781: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25782: LD_ADDR_VAR 0 6
25786: PUSH
25787: LD_VAR 0 4
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PPUSH
25796: LD_INT 1
25798: PPUSH
25799: CALL_OW 12
25803: PLUS
25804: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25805: LD_ADDR_VAR 0 7
25809: PUSH
25810: LD_VAR 0 5
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PPUSH
25819: LD_INT 1
25821: PPUSH
25822: CALL_OW 12
25826: PLUS
25827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25828: LD_VAR 0 6
25832: PPUSH
25833: LD_VAR 0 7
25837: PPUSH
25838: CALL_OW 488
25842: NOT
25843: IFFALSE 25865
// begin _x := x ;
25845: LD_ADDR_VAR 0 6
25849: PUSH
25850: LD_VAR 0 4
25854: ST_TO_ADDR
// _y := y ;
25855: LD_ADDR_VAR 0 7
25859: PUSH
25860: LD_VAR 0 5
25864: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_INT 1
25872: PPUSH
25873: LD_VAR 0 14
25877: PPUSH
25878: CALL_OW 12
25882: ST_TO_ADDR
// case i of 1 :
25883: LD_VAR 0 3
25887: PUSH
25888: LD_INT 1
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25913
25896: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25897: LD_VAR 0 1
25901: PPUSH
25902: LD_VAR 0 10
25906: PPUSH
25907: CALL_OW 115
25911: GO 25974
25913: LD_INT 2
25915: DOUBLE
25916: EQUAL
25917: IFTRUE 25921
25919: GO 25943
25921: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25922: LD_VAR 0 1
25926: PPUSH
25927: LD_VAR 0 6
25931: PPUSH
25932: LD_VAR 0 7
25936: PPUSH
25937: CALL_OW 153
25941: GO 25974
25943: LD_INT 3
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 25973
25951: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25952: LD_VAR 0 1
25956: PPUSH
25957: LD_VAR 0 6
25961: PPUSH
25962: LD_VAR 0 7
25966: PPUSH
25967: CALL_OW 154
25971: GO 25974
25973: POP
// end ;
25974: LD_VAR 0 2
25978: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
// if not unit or not building then
25987: LD_VAR 0 1
25991: NOT
25992: PUSH
25993: LD_VAR 0 2
25997: NOT
25998: OR
25999: IFFALSE 26003
// exit ;
26001: GO 26161
// x := GetX ( building ) ;
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: LD_VAR 0 2
26012: PPUSH
26013: CALL_OW 250
26017: ST_TO_ADDR
// y := GetY ( building ) ;
26018: LD_ADDR_VAR 0 6
26022: PUSH
26023: LD_VAR 0 2
26027: PPUSH
26028: CALL_OW 251
26032: ST_TO_ADDR
// for i = 0 to 5 do
26033: LD_ADDR_VAR 0 4
26037: PUSH
26038: DOUBLE
26039: LD_INT 0
26041: DEC
26042: ST_TO_ADDR
26043: LD_INT 5
26045: PUSH
26046: FOR_TO
26047: IFFALSE 26159
// begin _x := ShiftX ( x , i , 3 ) ;
26049: LD_ADDR_VAR 0 7
26053: PUSH
26054: LD_VAR 0 5
26058: PPUSH
26059: LD_VAR 0 4
26063: PPUSH
26064: LD_INT 3
26066: PPUSH
26067: CALL_OW 272
26071: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26072: LD_ADDR_VAR 0 8
26076: PUSH
26077: LD_VAR 0 6
26081: PPUSH
26082: LD_VAR 0 4
26086: PPUSH
26087: LD_INT 3
26089: PPUSH
26090: CALL_OW 273
26094: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26095: LD_VAR 0 7
26099: PPUSH
26100: LD_VAR 0 8
26104: PPUSH
26105: CALL_OW 488
26109: NOT
26110: IFFALSE 26114
// continue ;
26112: GO 26046
// if HexInfo ( _x , _y ) = 0 then
26114: LD_VAR 0 7
26118: PPUSH
26119: LD_VAR 0 8
26123: PPUSH
26124: CALL_OW 428
26128: PUSH
26129: LD_INT 0
26131: EQUAL
26132: IFFALSE 26157
// begin ComMoveXY ( unit , _x , _y ) ;
26134: LD_VAR 0 1
26138: PPUSH
26139: LD_VAR 0 7
26143: PPUSH
26144: LD_VAR 0 8
26148: PPUSH
26149: CALL_OW 111
// exit ;
26153: POP
26154: POP
26155: GO 26161
// end ; end ;
26157: GO 26046
26159: POP
26160: POP
// end ;
26161: LD_VAR 0 3
26165: RET
// export function ScanBase ( side , base_area ) ; begin
26166: LD_INT 0
26168: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26169: LD_ADDR_VAR 0 3
26173: PUSH
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_INT 81
26181: PUSH
26182: LD_VAR 0 1
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 70
26195: ST_TO_ADDR
// end ;
26196: LD_VAR 0 3
26200: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
// result := false ;
26207: LD_ADDR_VAR 0 2
26211: PUSH
26212: LD_INT 0
26214: ST_TO_ADDR
// side := GetSide ( unit ) ;
26215: LD_ADDR_VAR 0 3
26219: PUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 255
26229: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26230: LD_ADDR_VAR 0 4
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL_OW 248
26244: ST_TO_ADDR
// case nat of 1 :
26245: LD_VAR 0 4
26249: PUSH
26250: LD_INT 1
26252: DOUBLE
26253: EQUAL
26254: IFTRUE 26258
26256: GO 26269
26258: POP
// tech := tech_lassight ; 2 :
26259: LD_ADDR_VAR 0 5
26263: PUSH
26264: LD_INT 12
26266: ST_TO_ADDR
26267: GO 26308
26269: LD_INT 2
26271: DOUBLE
26272: EQUAL
26273: IFTRUE 26277
26275: GO 26288
26277: POP
// tech := tech_mortar ; 3 :
26278: LD_ADDR_VAR 0 5
26282: PUSH
26283: LD_INT 41
26285: ST_TO_ADDR
26286: GO 26308
26288: LD_INT 3
26290: DOUBLE
26291: EQUAL
26292: IFTRUE 26296
26294: GO 26307
26296: POP
// tech := tech_bazooka ; end ;
26297: LD_ADDR_VAR 0 5
26301: PUSH
26302: LD_INT 44
26304: ST_TO_ADDR
26305: GO 26308
26307: POP
// if Researched ( side , tech ) then
26308: LD_VAR 0 3
26312: PPUSH
26313: LD_VAR 0 5
26317: PPUSH
26318: CALL_OW 325
26322: IFFALSE 26349
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_INT 5
26331: PUSH
26332: LD_INT 8
26334: PUSH
26335: LD_INT 9
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: PUSH
26343: LD_VAR 0 4
26347: ARRAY
26348: ST_TO_ADDR
// end ;
26349: LD_VAR 0 2
26353: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26354: LD_INT 0
26356: PPUSH
26357: PPUSH
26358: PPUSH
// if not mines then
26359: LD_VAR 0 2
26363: NOT
26364: IFFALSE 26368
// exit ;
26366: GO 26512
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26368: LD_ADDR_VAR 0 5
26372: PUSH
26373: LD_INT 81
26375: PUSH
26376: LD_VAR 0 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: LD_INT 21
26390: PUSH
26391: LD_INT 3
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PPUSH
26406: CALL_OW 69
26410: ST_TO_ADDR
// for i in mines do
26411: LD_ADDR_VAR 0 4
26415: PUSH
26416: LD_VAR 0 2
26420: PUSH
26421: FOR_IN
26422: IFFALSE 26510
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26424: LD_VAR 0 4
26428: PUSH
26429: LD_INT 1
26431: ARRAY
26432: PPUSH
26433: LD_VAR 0 4
26437: PUSH
26438: LD_INT 2
26440: ARRAY
26441: PPUSH
26442: CALL_OW 458
26446: NOT
26447: IFFALSE 26451
// continue ;
26449: GO 26421
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26451: LD_VAR 0 4
26455: PUSH
26456: LD_INT 1
26458: ARRAY
26459: PPUSH
26460: LD_VAR 0 4
26464: PUSH
26465: LD_INT 2
26467: ARRAY
26468: PPUSH
26469: CALL_OW 428
26473: PUSH
26474: LD_VAR 0 5
26478: IN
26479: IFFALSE 26508
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26481: LD_VAR 0 4
26485: PUSH
26486: LD_INT 1
26488: ARRAY
26489: PPUSH
26490: LD_VAR 0 4
26494: PUSH
26495: LD_INT 2
26497: ARRAY
26498: PPUSH
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL_OW 456
// end ;
26508: GO 26421
26510: POP
26511: POP
// end ;
26512: LD_VAR 0 3
26516: RET
// export function Count ( array ) ; var i ; begin
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
// result := 0 ;
26521: LD_ADDR_VAR 0 2
26525: PUSH
26526: LD_INT 0
26528: ST_TO_ADDR
// for i in array do
26529: LD_ADDR_VAR 0 3
26533: PUSH
26534: LD_VAR 0 1
26538: PUSH
26539: FOR_IN
26540: IFFALSE 26564
// if i then
26542: LD_VAR 0 3
26546: IFFALSE 26562
// result := result + 1 ;
26548: LD_ADDR_VAR 0 2
26552: PUSH
26553: LD_VAR 0 2
26557: PUSH
26558: LD_INT 1
26560: PLUS
26561: ST_TO_ADDR
26562: GO 26539
26564: POP
26565: POP
// end ;
26566: LD_VAR 0 2
26570: RET
// export function IsEmpty ( building ) ; begin
26571: LD_INT 0
26573: PPUSH
// if not building then
26574: LD_VAR 0 1
26578: NOT
26579: IFFALSE 26583
// exit ;
26581: GO 26626
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_VAR 0 1
26592: PUSH
26593: LD_INT 22
26595: PUSH
26596: LD_VAR 0 1
26600: PPUSH
26601: CALL_OW 255
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 58
26612: PUSH
26613: EMPTY
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: IN
26625: ST_TO_ADDR
// end ;
26626: LD_VAR 0 2
26630: RET
// export function IsNotFull ( building ) ; begin
26631: LD_INT 0
26633: PPUSH
// if not building then
26634: LD_VAR 0 1
26638: NOT
26639: IFFALSE 26643
// exit ;
26641: GO 26662
// result := UnitsInside ( building ) < 6 ;
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 313
26657: PUSH
26658: LD_INT 6
26660: LESS
26661: ST_TO_ADDR
// end ;
26662: LD_VAR 0 2
26666: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
// tmp := [ ] ;
26673: LD_ADDR_VAR 0 3
26677: PUSH
26678: EMPTY
26679: ST_TO_ADDR
// list := [ ] ;
26680: LD_ADDR_VAR 0 5
26684: PUSH
26685: EMPTY
26686: ST_TO_ADDR
// for i = 16 to 25 do
26687: LD_ADDR_VAR 0 4
26691: PUSH
26692: DOUBLE
26693: LD_INT 16
26695: DEC
26696: ST_TO_ADDR
26697: LD_INT 25
26699: PUSH
26700: FOR_TO
26701: IFFALSE 26774
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26703: LD_ADDR_VAR 0 3
26707: PUSH
26708: LD_VAR 0 3
26712: PUSH
26713: LD_INT 22
26715: PUSH
26716: LD_VAR 0 1
26720: PPUSH
26721: CALL_OW 255
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 91
26732: PUSH
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 6
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 30
26748: PUSH
26749: LD_VAR 0 4
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: PPUSH
26766: CALL_OW 69
26770: ADD
26771: ST_TO_ADDR
26772: GO 26700
26774: POP
26775: POP
// for i = 1 to tmp do
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: DOUBLE
26782: LD_INT 1
26784: DEC
26785: ST_TO_ADDR
26786: LD_VAR 0 3
26790: PUSH
26791: FOR_TO
26792: IFFALSE 26880
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26794: LD_ADDR_VAR 0 5
26798: PUSH
26799: LD_VAR 0 5
26803: PUSH
26804: LD_VAR 0 3
26808: PUSH
26809: LD_VAR 0 4
26813: ARRAY
26814: PPUSH
26815: CALL_OW 266
26819: PUSH
26820: LD_VAR 0 3
26824: PUSH
26825: LD_VAR 0 4
26829: ARRAY
26830: PPUSH
26831: CALL_OW 250
26835: PUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_VAR 0 4
26845: ARRAY
26846: PPUSH
26847: CALL_OW 251
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: LD_VAR 0 4
26861: ARRAY
26862: PPUSH
26863: CALL_OW 254
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: ADD
26877: ST_TO_ADDR
26878: GO 26791
26880: POP
26881: POP
// result := list ;
26882: LD_ADDR_VAR 0 2
26886: PUSH
26887: LD_VAR 0 5
26891: ST_TO_ADDR
// end ;
26892: LD_VAR 0 2
26896: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26897: LD_INT 0
26899: PPUSH
26900: PPUSH
26901: PPUSH
26902: PPUSH
26903: PPUSH
26904: PPUSH
26905: PPUSH
// if not factory then
26906: LD_VAR 0 1
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27508
// if control = control_apeman then
26915: LD_VAR 0 4
26919: PUSH
26920: LD_INT 5
26922: EQUAL
26923: IFFALSE 27032
// begin tmp := UnitsInside ( factory ) ;
26925: LD_ADDR_VAR 0 8
26929: PUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 313
26939: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26940: LD_VAR 0 8
26944: PPUSH
26945: LD_INT 25
26947: PUSH
26948: LD_INT 12
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PPUSH
26955: CALL_OW 72
26959: NOT
26960: IFFALSE 26970
// control := control_manual ;
26962: LD_ADDR_VAR 0 4
26966: PUSH
26967: LD_INT 1
26969: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26970: LD_ADDR_VAR 0 8
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL 26667 0 1
26984: ST_TO_ADDR
// if tmp then
26985: LD_VAR 0 8
26989: IFFALSE 27032
// begin for i in tmp do
26991: LD_ADDR_VAR 0 7
26995: PUSH
26996: LD_VAR 0 8
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27030
// if i [ 1 ] = b_ext_radio then
27004: LD_VAR 0 7
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PUSH
27013: LD_INT 22
27015: EQUAL
27016: IFFALSE 27028
// begin control := control_remote ;
27018: LD_ADDR_VAR 0 4
27022: PUSH
27023: LD_INT 2
27025: ST_TO_ADDR
// break ;
27026: GO 27030
// end ;
27028: GO 27001
27030: POP
27031: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27032: LD_VAR 0 1
27036: PPUSH
27037: LD_VAR 0 2
27041: PPUSH
27042: LD_VAR 0 3
27046: PPUSH
27047: LD_VAR 0 4
27051: PPUSH
27052: LD_VAR 0 5
27056: PPUSH
27057: CALL_OW 448
27061: IFFALSE 27096
// begin result := [ chassis , engine , control , weapon ] ;
27063: LD_ADDR_VAR 0 6
27067: PUSH
27068: LD_VAR 0 2
27072: PUSH
27073: LD_VAR 0 3
27077: PUSH
27078: LD_VAR 0 4
27082: PUSH
27083: LD_VAR 0 5
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// exit ;
27094: GO 27508
// end ; _chassis := AvailableChassisList ( factory ) ;
27096: LD_ADDR_VAR 0 9
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 475
27110: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27111: LD_ADDR_VAR 0 11
27115: PUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: CALL_OW 476
27125: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27126: LD_ADDR_VAR 0 12
27130: PUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 477
27140: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27141: LD_ADDR_VAR 0 10
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 478
27155: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27156: LD_VAR 0 9
27160: NOT
27161: PUSH
27162: LD_VAR 0 11
27166: NOT
27167: OR
27168: PUSH
27169: LD_VAR 0 12
27173: NOT
27174: OR
27175: PUSH
27176: LD_VAR 0 10
27180: NOT
27181: OR
27182: IFFALSE 27217
// begin result := [ chassis , engine , control , weapon ] ;
27184: LD_ADDR_VAR 0 6
27188: PUSH
27189: LD_VAR 0 2
27193: PUSH
27194: LD_VAR 0 3
27198: PUSH
27199: LD_VAR 0 4
27203: PUSH
27204: LD_VAR 0 5
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// exit ;
27215: GO 27508
// end ; if not chassis in _chassis then
27217: LD_VAR 0 2
27221: PUSH
27222: LD_VAR 0 9
27226: IN
27227: NOT
27228: IFFALSE 27254
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27230: LD_ADDR_VAR 0 2
27234: PUSH
27235: LD_VAR 0 9
27239: PUSH
27240: LD_INT 1
27242: PPUSH
27243: LD_VAR 0 9
27247: PPUSH
27248: CALL_OW 12
27252: ARRAY
27253: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27254: LD_VAR 0 2
27258: PPUSH
27259: LD_VAR 0 3
27263: PPUSH
27264: CALL 27513 0 2
27268: NOT
27269: IFFALSE 27328
// repeat engine := _engine [ 1 ] ;
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_VAR 0 11
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27285: LD_ADDR_VAR 0 11
27289: PUSH
27290: LD_VAR 0 11
27294: PPUSH
27295: LD_INT 1
27297: PPUSH
27298: CALL_OW 3
27302: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27303: LD_VAR 0 2
27307: PPUSH
27308: LD_VAR 0 3
27312: PPUSH
27313: CALL 27513 0 2
27317: PUSH
27318: LD_VAR 0 11
27322: PUSH
27323: EMPTY
27324: EQUAL
27325: OR
27326: IFFALSE 27271
// if not control in _control then
27328: LD_VAR 0 4
27332: PUSH
27333: LD_VAR 0 12
27337: IN
27338: NOT
27339: IFFALSE 27365
// control := _control [ rand ( 1 , _control ) ] ;
27341: LD_ADDR_VAR 0 4
27345: PUSH
27346: LD_VAR 0 12
27350: PUSH
27351: LD_INT 1
27353: PPUSH
27354: LD_VAR 0 12
27358: PPUSH
27359: CALL_OW 12
27363: ARRAY
27364: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27365: LD_VAR 0 2
27369: PPUSH
27370: LD_VAR 0 5
27374: PPUSH
27375: CALL 27733 0 2
27379: NOT
27380: IFFALSE 27439
// repeat weapon := _weapon [ 1 ] ;
27382: LD_ADDR_VAR 0 5
27386: PUSH
27387: LD_VAR 0 10
27391: PUSH
27392: LD_INT 1
27394: ARRAY
27395: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27396: LD_ADDR_VAR 0 10
27400: PUSH
27401: LD_VAR 0 10
27405: PPUSH
27406: LD_INT 1
27408: PPUSH
27409: CALL_OW 3
27413: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 5
27423: PPUSH
27424: CALL 27733 0 2
27428: PUSH
27429: LD_VAR 0 10
27433: PUSH
27434: EMPTY
27435: EQUAL
27436: OR
27437: IFFALSE 27382
// result := [ ] ;
27439: LD_ADDR_VAR 0 6
27443: PUSH
27444: EMPTY
27445: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27446: LD_VAR 0 1
27450: PPUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: LD_VAR 0 3
27460: PPUSH
27461: LD_VAR 0 4
27465: PPUSH
27466: LD_VAR 0 5
27470: PPUSH
27471: CALL_OW 448
27475: IFFALSE 27508
// result := [ chassis , engine , control , weapon ] ;
27477: LD_ADDR_VAR 0 6
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_VAR 0 3
27491: PUSH
27492: LD_VAR 0 4
27496: PUSH
27497: LD_VAR 0 5
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// end ;
27508: LD_VAR 0 6
27512: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27513: LD_INT 0
27515: PPUSH
// if not chassis or not engine then
27516: LD_VAR 0 1
27520: NOT
27521: PUSH
27522: LD_VAR 0 2
27526: NOT
27527: OR
27528: IFFALSE 27532
// exit ;
27530: GO 27728
// case engine of engine_solar :
27532: LD_VAR 0 2
27536: PUSH
27537: LD_INT 2
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27583
27545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: LD_INT 11
27553: PUSH
27554: LD_INT 12
27556: PUSH
27557: LD_INT 13
27559: PUSH
27560: LD_INT 14
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
27581: GO 27712
27583: LD_INT 1
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27653
27591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 11
27599: PUSH
27600: LD_INT 12
27602: PUSH
27603: LD_INT 13
27605: PUSH
27606: LD_INT 14
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: LD_INT 4
27620: PUSH
27621: LD_INT 5
27623: PUSH
27624: LD_INT 21
27626: PUSH
27627: LD_INT 23
27629: PUSH
27630: LD_INT 22
27632: PUSH
27633: LD_INT 24
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
27651: GO 27712
27653: LD_INT 3
27655: DOUBLE
27656: EQUAL
27657: IFTRUE 27661
27659: GO 27711
27661: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_INT 13
27669: PUSH
27670: LD_INT 14
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: LD_INT 4
27681: PUSH
27682: LD_INT 5
27684: PUSH
27685: LD_INT 21
27687: PUSH
27688: LD_INT 22
27690: PUSH
27691: LD_INT 23
27693: PUSH
27694: LD_INT 24
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 27712
27711: POP
// result := ( chassis in result ) ;
27712: LD_ADDR_VAR 0 3
27716: PUSH
27717: LD_VAR 0 1
27721: PUSH
27722: LD_VAR 0 3
27726: IN
27727: ST_TO_ADDR
// end ;
27728: LD_VAR 0 3
27732: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27733: LD_INT 0
27735: PPUSH
// if not chassis or not weapon then
27736: LD_VAR 0 1
27740: NOT
27741: PUSH
27742: LD_VAR 0 2
27746: NOT
27747: OR
27748: IFFALSE 27752
// exit ;
27750: GO 28814
// case weapon of us_machine_gun :
27752: LD_VAR 0 2
27756: PUSH
27757: LD_INT 2
27759: DOUBLE
27760: EQUAL
27761: IFTRUE 27765
27763: GO 27795
27765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27766: LD_ADDR_VAR 0 3
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 4
27782: PUSH
27783: LD_INT 5
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
27793: GO 28798
27795: LD_INT 3
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27803
27801: GO 27833
27803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27804: LD_ADDR_VAR 0 3
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 2
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: LD_INT 4
27820: PUSH
27821: LD_INT 5
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: ST_TO_ADDR
27831: GO 28798
27833: LD_INT 11
27835: DOUBLE
27836: EQUAL
27837: IFTRUE 27841
27839: GO 27871
27841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 3
27855: PUSH
27856: LD_INT 4
27858: PUSH
27859: LD_INT 5
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
27869: GO 28798
27871: LD_INT 4
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27905
27879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 4
27893: PUSH
27894: LD_INT 5
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
27903: GO 28798
27905: LD_INT 5
27907: DOUBLE
27908: EQUAL
27909: IFTRUE 27913
27911: GO 27939
27913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: LD_INT 3
27924: PUSH
27925: LD_INT 4
27927: PUSH
27928: LD_INT 5
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
27937: GO 28798
27939: LD_INT 9
27941: DOUBLE
27942: EQUAL
27943: IFTRUE 27947
27945: GO 27973
27947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: LD_INT 4
27961: PUSH
27962: LD_INT 5
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
27971: GO 28798
27973: LD_INT 7
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 28007
27981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: LD_INT 4
27995: PUSH
27996: LD_INT 5
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
28005: GO 28798
28007: LD_INT 12
28009: DOUBLE
28010: EQUAL
28011: IFTRUE 28015
28013: GO 28041
28015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28016: LD_ADDR_VAR 0 3
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: LD_INT 3
28026: PUSH
28027: LD_INT 4
28029: PUSH
28030: LD_INT 5
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
28039: GO 28798
28041: LD_INT 13
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28075
28049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28050: LD_ADDR_VAR 0 3
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 4
28063: PUSH
28064: LD_INT 5
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
28073: GO 28798
28075: LD_INT 14
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28101
28083: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 4
28091: PUSH
28092: LD_INT 5
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: ST_TO_ADDR
28099: GO 28798
28101: LD_INT 6
28103: DOUBLE
28104: EQUAL
28105: IFTRUE 28109
28107: GO 28127
28109: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28110: LD_ADDR_VAR 0 3
28114: PUSH
28115: LD_INT 4
28117: PUSH
28118: LD_INT 5
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: ST_TO_ADDR
28125: GO 28798
28127: LD_INT 10
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28153
28135: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 4
28143: PUSH
28144: LD_INT 5
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: ST_TO_ADDR
28151: GO 28798
28153: LD_INT 22
28155: DOUBLE
28156: EQUAL
28157: IFTRUE 28161
28159: GO 28187
28161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_INT 11
28169: PUSH
28170: LD_INT 12
28172: PUSH
28173: LD_INT 13
28175: PUSH
28176: LD_INT 14
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 28798
28187: LD_INT 23
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28221
28195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 11
28203: PUSH
28204: LD_INT 12
28206: PUSH
28207: LD_INT 13
28209: PUSH
28210: LD_INT 14
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: ST_TO_ADDR
28219: GO 28798
28221: LD_INT 24
28223: DOUBLE
28224: EQUAL
28225: IFTRUE 28229
28227: GO 28255
28229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28230: LD_ADDR_VAR 0 3
28234: PUSH
28235: LD_INT 11
28237: PUSH
28238: LD_INT 12
28240: PUSH
28241: LD_INT 13
28243: PUSH
28244: LD_INT 14
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: ST_TO_ADDR
28253: GO 28798
28255: LD_INT 30
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28289
28263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_INT 11
28271: PUSH
28272: LD_INT 12
28274: PUSH
28275: LD_INT 13
28277: PUSH
28278: LD_INT 14
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: ST_TO_ADDR
28287: GO 28798
28289: LD_INT 25
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28297
28295: GO 28315
28297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_INT 13
28305: PUSH
28306: LD_INT 14
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: ST_TO_ADDR
28313: GO 28798
28315: LD_INT 27
28317: DOUBLE
28318: EQUAL
28319: IFTRUE 28323
28321: GO 28341
28323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_INT 13
28331: PUSH
28332: LD_INT 14
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: ST_TO_ADDR
28339: GO 28798
28341: LD_EXP 102
28345: DOUBLE
28346: EQUAL
28347: IFTRUE 28351
28349: GO 28377
28351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 11
28359: PUSH
28360: LD_INT 12
28362: PUSH
28363: LD_INT 13
28365: PUSH
28366: LD_INT 14
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
28375: GO 28798
28377: LD_INT 28
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28403
28385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_INT 13
28393: PUSH
28394: LD_INT 14
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: ST_TO_ADDR
28401: GO 28798
28403: LD_INT 29
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28429
28411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_INT 13
28419: PUSH
28420: LD_INT 14
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: ST_TO_ADDR
28427: GO 28798
28429: LD_INT 31
28431: DOUBLE
28432: EQUAL
28433: IFTRUE 28437
28435: GO 28455
28437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 13
28445: PUSH
28446: LD_INT 14
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: ST_TO_ADDR
28453: GO 28798
28455: LD_INT 26
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28481
28463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_INT 13
28471: PUSH
28472: LD_INT 14
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: ST_TO_ADDR
28479: GO 28798
28481: LD_INT 42
28483: DOUBLE
28484: EQUAL
28485: IFTRUE 28489
28487: GO 28515
28489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_INT 21
28497: PUSH
28498: LD_INT 22
28500: PUSH
28501: LD_INT 23
28503: PUSH
28504: LD_INT 24
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: ST_TO_ADDR
28513: GO 28798
28515: LD_INT 43
28517: DOUBLE
28518: EQUAL
28519: IFTRUE 28523
28521: GO 28549
28523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_INT 21
28531: PUSH
28532: LD_INT 22
28534: PUSH
28535: LD_INT 23
28537: PUSH
28538: LD_INT 24
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: ST_TO_ADDR
28547: GO 28798
28549: LD_INT 44
28551: DOUBLE
28552: EQUAL
28553: IFTRUE 28557
28555: GO 28583
28557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 22
28568: PUSH
28569: LD_INT 23
28571: PUSH
28572: LD_INT 24
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
28581: GO 28798
28583: LD_INT 45
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28617
28591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_INT 21
28599: PUSH
28600: LD_INT 22
28602: PUSH
28603: LD_INT 23
28605: PUSH
28606: LD_INT 24
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
28615: GO 28798
28617: LD_INT 49
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28651
28625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 21
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_INT 23
28639: PUSH
28640: LD_INT 24
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
28649: GO 28798
28651: LD_INT 51
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28685
28659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 22
28670: PUSH
28671: LD_INT 23
28673: PUSH
28674: LD_INT 24
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 28798
28685: LD_INT 52
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 24
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 28798
28719: LD_INT 53
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28745
28727: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 23
28735: PUSH
28736: LD_INT 24
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: ST_TO_ADDR
28743: GO 28798
28745: LD_INT 46
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28771
28753: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_INT 23
28761: PUSH
28762: LD_INT 24
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: ST_TO_ADDR
28769: GO 28798
28771: LD_INT 47
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28797
28779: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 23
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: ST_TO_ADDR
28795: GO 28798
28797: POP
// result := ( chassis in result ) ;
28798: LD_ADDR_VAR 0 3
28802: PUSH
28803: LD_VAR 0 1
28807: PUSH
28808: LD_VAR 0 3
28812: IN
28813: ST_TO_ADDR
// end ;
28814: LD_VAR 0 3
28818: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
// result := array ;
28828: LD_ADDR_VAR 0 5
28832: PUSH
28833: LD_VAR 0 1
28837: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28838: LD_VAR 0 1
28842: NOT
28843: PUSH
28844: LD_VAR 0 2
28848: NOT
28849: OR
28850: PUSH
28851: LD_VAR 0 3
28855: NOT
28856: OR
28857: PUSH
28858: LD_VAR 0 2
28862: PUSH
28863: LD_VAR 0 1
28867: GREATER
28868: OR
28869: PUSH
28870: LD_VAR 0 3
28874: PUSH
28875: LD_VAR 0 1
28879: GREATER
28880: OR
28881: IFFALSE 28885
// exit ;
28883: GO 29181
// if direction then
28885: LD_VAR 0 4
28889: IFFALSE 28953
// begin d := 1 ;
28891: LD_ADDR_VAR 0 9
28895: PUSH
28896: LD_INT 1
28898: ST_TO_ADDR
// if i_from > i_to then
28899: LD_VAR 0 2
28903: PUSH
28904: LD_VAR 0 3
28908: GREATER
28909: IFFALSE 28935
// length := ( array - i_from ) + i_to else
28911: LD_ADDR_VAR 0 11
28915: PUSH
28916: LD_VAR 0 1
28920: PUSH
28921: LD_VAR 0 2
28925: MINUS
28926: PUSH
28927: LD_VAR 0 3
28931: PLUS
28932: ST_TO_ADDR
28933: GO 28951
// length := i_to - i_from ;
28935: LD_ADDR_VAR 0 11
28939: PUSH
28940: LD_VAR 0 3
28944: PUSH
28945: LD_VAR 0 2
28949: MINUS
28950: ST_TO_ADDR
// end else
28951: GO 29014
// begin d := - 1 ;
28953: LD_ADDR_VAR 0 9
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: ST_TO_ADDR
// if i_from > i_to then
28962: LD_VAR 0 2
28966: PUSH
28967: LD_VAR 0 3
28971: GREATER
28972: IFFALSE 28992
// length := i_from - i_to else
28974: LD_ADDR_VAR 0 11
28978: PUSH
28979: LD_VAR 0 2
28983: PUSH
28984: LD_VAR 0 3
28988: MINUS
28989: ST_TO_ADDR
28990: GO 29014
// length := ( array - i_to ) + i_from ;
28992: LD_ADDR_VAR 0 11
28996: PUSH
28997: LD_VAR 0 1
29001: PUSH
29002: LD_VAR 0 3
29006: MINUS
29007: PUSH
29008: LD_VAR 0 2
29012: PLUS
29013: ST_TO_ADDR
// end ; if not length then
29014: LD_VAR 0 11
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29181
// tmp := array ;
29023: LD_ADDR_VAR 0 10
29027: PUSH
29028: LD_VAR 0 1
29032: ST_TO_ADDR
// for i = 1 to length do
29033: LD_ADDR_VAR 0 6
29037: PUSH
29038: DOUBLE
29039: LD_INT 1
29041: DEC
29042: ST_TO_ADDR
29043: LD_VAR 0 11
29047: PUSH
29048: FOR_TO
29049: IFFALSE 29169
// begin for j = 1 to array do
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: DOUBLE
29057: LD_INT 1
29059: DEC
29060: ST_TO_ADDR
29061: LD_VAR 0 1
29065: PUSH
29066: FOR_TO
29067: IFFALSE 29155
// begin k := j + d ;
29069: LD_ADDR_VAR 0 8
29073: PUSH
29074: LD_VAR 0 7
29078: PUSH
29079: LD_VAR 0 9
29083: PLUS
29084: ST_TO_ADDR
// if k > array then
29085: LD_VAR 0 8
29089: PUSH
29090: LD_VAR 0 1
29094: GREATER
29095: IFFALSE 29105
// k := 1 ;
29097: LD_ADDR_VAR 0 8
29101: PUSH
29102: LD_INT 1
29104: ST_TO_ADDR
// if not k then
29105: LD_VAR 0 8
29109: NOT
29110: IFFALSE 29122
// k := array ;
29112: LD_ADDR_VAR 0 8
29116: PUSH
29117: LD_VAR 0 1
29121: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29122: LD_ADDR_VAR 0 10
29126: PUSH
29127: LD_VAR 0 10
29131: PPUSH
29132: LD_VAR 0 8
29136: PPUSH
29137: LD_VAR 0 1
29141: PUSH
29142: LD_VAR 0 7
29146: ARRAY
29147: PPUSH
29148: CALL_OW 1
29152: ST_TO_ADDR
// end ;
29153: GO 29066
29155: POP
29156: POP
// array := tmp ;
29157: LD_ADDR_VAR 0 1
29161: PUSH
29162: LD_VAR 0 10
29166: ST_TO_ADDR
// end ;
29167: GO 29048
29169: POP
29170: POP
// result := array ;
29171: LD_ADDR_VAR 0 5
29175: PUSH
29176: LD_VAR 0 1
29180: ST_TO_ADDR
// end ;
29181: LD_VAR 0 5
29185: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29186: LD_INT 0
29188: PPUSH
29189: PPUSH
// result := 0 ;
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_INT 0
29197: ST_TO_ADDR
// if not array or not value in array then
29198: LD_VAR 0 1
29202: NOT
29203: PUSH
29204: LD_VAR 0 2
29208: PUSH
29209: LD_VAR 0 1
29213: IN
29214: NOT
29215: OR
29216: IFFALSE 29220
// exit ;
29218: GO 29274
// for i = 1 to array do
29220: LD_ADDR_VAR 0 4
29224: PUSH
29225: DOUBLE
29226: LD_INT 1
29228: DEC
29229: ST_TO_ADDR
29230: LD_VAR 0 1
29234: PUSH
29235: FOR_TO
29236: IFFALSE 29272
// if value = array [ i ] then
29238: LD_VAR 0 2
29242: PUSH
29243: LD_VAR 0 1
29247: PUSH
29248: LD_VAR 0 4
29252: ARRAY
29253: EQUAL
29254: IFFALSE 29270
// begin result := i ;
29256: LD_ADDR_VAR 0 3
29260: PUSH
29261: LD_VAR 0 4
29265: ST_TO_ADDR
// exit ;
29266: POP
29267: POP
29268: GO 29274
// end ;
29270: GO 29235
29272: POP
29273: POP
// end ;
29274: LD_VAR 0 3
29278: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29279: LD_INT 0
29281: PPUSH
// vc_chassis := chassis ;
29282: LD_ADDR_OWVAR 37
29286: PUSH
29287: LD_VAR 0 1
29291: ST_TO_ADDR
// vc_engine := engine ;
29292: LD_ADDR_OWVAR 39
29296: PUSH
29297: LD_VAR 0 2
29301: ST_TO_ADDR
// vc_control := control ;
29302: LD_ADDR_OWVAR 38
29306: PUSH
29307: LD_VAR 0 3
29311: ST_TO_ADDR
// vc_weapon := weapon ;
29312: LD_ADDR_OWVAR 40
29316: PUSH
29317: LD_VAR 0 4
29321: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29322: LD_ADDR_OWVAR 41
29326: PUSH
29327: LD_VAR 0 5
29331: ST_TO_ADDR
// end ;
29332: LD_VAR 0 6
29336: RET
// export function WantPlant ( unit ) ; var task ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
// result := false ;
29341: LD_ADDR_VAR 0 2
29345: PUSH
29346: LD_INT 0
29348: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 437
29363: ST_TO_ADDR
// if task then
29364: LD_VAR 0 3
29368: IFFALSE 29396
// if task [ 1 ] [ 1 ] = p then
29370: LD_VAR 0 3
29374: PUSH
29375: LD_INT 1
29377: ARRAY
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PUSH
29383: LD_STRING p
29385: EQUAL
29386: IFFALSE 29396
// result := true ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_INT 1
29395: ST_TO_ADDR
// end ;
29396: LD_VAR 0 2
29400: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29401: LD_INT 0
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
// if pos < 1 then
29407: LD_VAR 0 2
29411: PUSH
29412: LD_INT 1
29414: LESS
29415: IFFALSE 29419
// exit ;
29417: GO 29722
// if pos = 1 then
29419: LD_VAR 0 2
29423: PUSH
29424: LD_INT 1
29426: EQUAL
29427: IFFALSE 29460
// result := Replace ( arr , pos [ 1 ] , value ) else
29429: LD_ADDR_VAR 0 4
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: LD_VAR 0 3
29452: PPUSH
29453: CALL_OW 1
29457: ST_TO_ADDR
29458: GO 29722
// begin tmp := arr ;
29460: LD_ADDR_VAR 0 6
29464: PUSH
29465: LD_VAR 0 1
29469: ST_TO_ADDR
// s_arr := [ tmp ] ;
29470: LD_ADDR_VAR 0 7
29474: PUSH
29475: LD_VAR 0 6
29479: PUSH
29480: EMPTY
29481: LIST
29482: ST_TO_ADDR
// for i = 1 to pos - 1 do
29483: LD_ADDR_VAR 0 5
29487: PUSH
29488: DOUBLE
29489: LD_INT 1
29491: DEC
29492: ST_TO_ADDR
29493: LD_VAR 0 2
29497: PUSH
29498: LD_INT 1
29500: MINUS
29501: PUSH
29502: FOR_TO
29503: IFFALSE 29548
// begin tmp := tmp [ pos [ i ] ] ;
29505: LD_ADDR_VAR 0 6
29509: PUSH
29510: LD_VAR 0 6
29514: PUSH
29515: LD_VAR 0 2
29519: PUSH
29520: LD_VAR 0 5
29524: ARRAY
29525: ARRAY
29526: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29527: LD_ADDR_VAR 0 7
29531: PUSH
29532: LD_VAR 0 7
29536: PUSH
29537: LD_VAR 0 6
29541: PUSH
29542: EMPTY
29543: LIST
29544: ADD
29545: ST_TO_ADDR
// end ;
29546: GO 29502
29548: POP
29549: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29550: LD_ADDR_VAR 0 6
29554: PUSH
29555: LD_VAR 0 6
29559: PPUSH
29560: LD_VAR 0 2
29564: PUSH
29565: LD_VAR 0 2
29569: ARRAY
29570: PPUSH
29571: LD_VAR 0 3
29575: PPUSH
29576: CALL_OW 1
29580: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29581: LD_ADDR_VAR 0 7
29585: PUSH
29586: LD_VAR 0 7
29590: PPUSH
29591: LD_VAR 0 7
29595: PPUSH
29596: LD_VAR 0 6
29600: PPUSH
29601: CALL_OW 1
29605: ST_TO_ADDR
// for i = s_arr downto 2 do
29606: LD_ADDR_VAR 0 5
29610: PUSH
29611: DOUBLE
29612: LD_VAR 0 7
29616: INC
29617: ST_TO_ADDR
29618: LD_INT 2
29620: PUSH
29621: FOR_DOWNTO
29622: IFFALSE 29706
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29624: LD_ADDR_VAR 0 6
29628: PUSH
29629: LD_VAR 0 7
29633: PUSH
29634: LD_VAR 0 5
29638: PUSH
29639: LD_INT 1
29641: MINUS
29642: ARRAY
29643: PPUSH
29644: LD_VAR 0 2
29648: PUSH
29649: LD_VAR 0 5
29653: PUSH
29654: LD_INT 1
29656: MINUS
29657: ARRAY
29658: PPUSH
29659: LD_VAR 0 7
29663: PUSH
29664: LD_VAR 0 5
29668: ARRAY
29669: PPUSH
29670: CALL_OW 1
29674: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29675: LD_ADDR_VAR 0 7
29679: PUSH
29680: LD_VAR 0 7
29684: PPUSH
29685: LD_VAR 0 5
29689: PUSH
29690: LD_INT 1
29692: MINUS
29693: PPUSH
29694: LD_VAR 0 6
29698: PPUSH
29699: CALL_OW 1
29703: ST_TO_ADDR
// end ;
29704: GO 29621
29706: POP
29707: POP
// result := s_arr [ 1 ] ;
29708: LD_ADDR_VAR 0 4
29712: PUSH
29713: LD_VAR 0 7
29717: PUSH
29718: LD_INT 1
29720: ARRAY
29721: ST_TO_ADDR
// end ; end ;
29722: LD_VAR 0 4
29726: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29727: LD_INT 0
29729: PPUSH
29730: PPUSH
// if not list then
29731: LD_VAR 0 1
29735: NOT
29736: IFFALSE 29740
// exit ;
29738: GO 29831
// i := list [ pos1 ] ;
29740: LD_ADDR_VAR 0 5
29744: PUSH
29745: LD_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: ARRAY
29755: ST_TO_ADDR
// if not i then
29756: LD_VAR 0 5
29760: NOT
29761: IFFALSE 29765
// exit ;
29763: GO 29831
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29765: LD_ADDR_VAR 0 1
29769: PUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: LD_VAR 0 2
29779: PPUSH
29780: LD_VAR 0 1
29784: PUSH
29785: LD_VAR 0 3
29789: ARRAY
29790: PPUSH
29791: CALL_OW 1
29795: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29796: LD_ADDR_VAR 0 1
29800: PUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_VAR 0 3
29810: PPUSH
29811: LD_VAR 0 5
29815: PPUSH
29816: CALL_OW 1
29820: ST_TO_ADDR
// result := list ;
29821: LD_ADDR_VAR 0 4
29825: PUSH
29826: LD_VAR 0 1
29830: ST_TO_ADDR
// end ;
29831: LD_VAR 0 4
29835: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29836: LD_INT 0
29838: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 250
29853: PPUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 251
29863: PPUSH
29864: LD_VAR 0 2
29868: PPUSH
29869: LD_VAR 0 3
29873: PPUSH
29874: LD_VAR 0 4
29878: PPUSH
29879: CALL 29889 0 5
29883: ST_TO_ADDR
// end ;
29884: LD_VAR 0 5
29888: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
29893: PPUSH
29894: PPUSH
// if not list then
29895: LD_VAR 0 3
29899: NOT
29900: IFFALSE 29904
// exit ;
29902: GO 30292
// result := [ ] ;
29904: LD_ADDR_VAR 0 6
29908: PUSH
29909: EMPTY
29910: ST_TO_ADDR
// for i in list do
29911: LD_ADDR_VAR 0 7
29915: PUSH
29916: LD_VAR 0 3
29920: PUSH
29921: FOR_IN
29922: IFFALSE 30124
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29924: LD_ADDR_VAR 0 9
29928: PUSH
29929: LD_VAR 0 7
29933: PPUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: LD_VAR 0 2
29943: PPUSH
29944: CALL_OW 297
29948: ST_TO_ADDR
// if not result then
29949: LD_VAR 0 6
29953: NOT
29954: IFFALSE 29980
// result := [ [ i , tmp ] ] else
29956: LD_ADDR_VAR 0 6
29960: PUSH
29961: LD_VAR 0 7
29965: PUSH
29966: LD_VAR 0 9
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: ST_TO_ADDR
29978: GO 30122
// begin if result [ result ] [ 2 ] < tmp then
29980: LD_VAR 0 6
29984: PUSH
29985: LD_VAR 0 6
29989: ARRAY
29990: PUSH
29991: LD_INT 2
29993: ARRAY
29994: PUSH
29995: LD_VAR 0 9
29999: LESS
30000: IFFALSE 30042
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30002: LD_ADDR_VAR 0 6
30006: PUSH
30007: LD_VAR 0 6
30011: PPUSH
30012: LD_VAR 0 6
30016: PUSH
30017: LD_INT 1
30019: PLUS
30020: PPUSH
30021: LD_VAR 0 7
30025: PUSH
30026: LD_VAR 0 9
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PPUSH
30035: CALL_OW 2
30039: ST_TO_ADDR
30040: GO 30122
// for j = 1 to result do
30042: LD_ADDR_VAR 0 8
30046: PUSH
30047: DOUBLE
30048: LD_INT 1
30050: DEC
30051: ST_TO_ADDR
30052: LD_VAR 0 6
30056: PUSH
30057: FOR_TO
30058: IFFALSE 30120
// begin if tmp < result [ j ] [ 2 ] then
30060: LD_VAR 0 9
30064: PUSH
30065: LD_VAR 0 6
30069: PUSH
30070: LD_VAR 0 8
30074: ARRAY
30075: PUSH
30076: LD_INT 2
30078: ARRAY
30079: LESS
30080: IFFALSE 30118
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30082: LD_ADDR_VAR 0 6
30086: PUSH
30087: LD_VAR 0 6
30091: PPUSH
30092: LD_VAR 0 8
30096: PPUSH
30097: LD_VAR 0 7
30101: PUSH
30102: LD_VAR 0 9
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 2
30115: ST_TO_ADDR
// break ;
30116: GO 30120
// end ; end ;
30118: GO 30057
30120: POP
30121: POP
// end ; end ;
30122: GO 29921
30124: POP
30125: POP
// if result and not asc then
30126: LD_VAR 0 6
30130: PUSH
30131: LD_VAR 0 4
30135: NOT
30136: AND
30137: IFFALSE 30212
// begin tmp := result ;
30139: LD_ADDR_VAR 0 9
30143: PUSH
30144: LD_VAR 0 6
30148: ST_TO_ADDR
// for i = tmp downto 1 do
30149: LD_ADDR_VAR 0 7
30153: PUSH
30154: DOUBLE
30155: LD_VAR 0 9
30159: INC
30160: ST_TO_ADDR
30161: LD_INT 1
30163: PUSH
30164: FOR_DOWNTO
30165: IFFALSE 30210
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30167: LD_ADDR_VAR 0 6
30171: PUSH
30172: LD_VAR 0 6
30176: PPUSH
30177: LD_VAR 0 9
30181: PUSH
30182: LD_VAR 0 7
30186: MINUS
30187: PUSH
30188: LD_INT 1
30190: PLUS
30191: PPUSH
30192: LD_VAR 0 9
30196: PUSH
30197: LD_VAR 0 7
30201: ARRAY
30202: PPUSH
30203: CALL_OW 1
30207: ST_TO_ADDR
30208: GO 30164
30210: POP
30211: POP
// end ; tmp := [ ] ;
30212: LD_ADDR_VAR 0 9
30216: PUSH
30217: EMPTY
30218: ST_TO_ADDR
// if mode then
30219: LD_VAR 0 5
30223: IFFALSE 30292
// begin for i = 1 to result do
30225: LD_ADDR_VAR 0 7
30229: PUSH
30230: DOUBLE
30231: LD_INT 1
30233: DEC
30234: ST_TO_ADDR
30235: LD_VAR 0 6
30239: PUSH
30240: FOR_TO
30241: IFFALSE 30280
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30243: LD_ADDR_VAR 0 9
30247: PUSH
30248: LD_VAR 0 9
30252: PPUSH
30253: LD_VAR 0 7
30257: PPUSH
30258: LD_VAR 0 6
30262: PUSH
30263: LD_VAR 0 7
30267: ARRAY
30268: PUSH
30269: LD_INT 1
30271: ARRAY
30272: PPUSH
30273: CALL_OW 1
30277: ST_TO_ADDR
30278: GO 30240
30280: POP
30281: POP
// result := tmp ;
30282: LD_ADDR_VAR 0 6
30286: PUSH
30287: LD_VAR 0 9
30291: ST_TO_ADDR
// end ; end ;
30292: LD_VAR 0 6
30296: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30297: LD_INT 0
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30305: LD_ADDR_VAR 0 5
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
// if not x or not y then
30327: LD_VAR 0 2
30331: NOT
30332: PUSH
30333: LD_VAR 0 3
30337: NOT
30338: OR
30339: IFFALSE 30343
// exit ;
30341: GO 31995
// if not range then
30343: LD_VAR 0 4
30347: NOT
30348: IFFALSE 30358
// range := 10 ;
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_INT 10
30357: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30358: LD_ADDR_VAR 0 8
30362: PUSH
30363: LD_INT 81
30365: PUSH
30366: LD_VAR 0 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 92
30377: PUSH
30378: LD_VAR 0 2
30382: PUSH
30383: LD_VAR 0 3
30387: PUSH
30388: LD_VAR 0 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 21
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 69
30425: ST_TO_ADDR
// if not tmp then
30426: LD_VAR 0 8
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 31995
// for i in tmp do
30435: LD_ADDR_VAR 0 6
30439: PUSH
30440: LD_VAR 0 8
30444: PUSH
30445: FOR_IN
30446: IFFALSE 31970
// begin points := [ 0 , 0 , 0 ] ;
30448: LD_ADDR_VAR 0 9
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// bpoints := 1 ;
30467: LD_ADDR_VAR 0 10
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30475: LD_VAR 0 6
30479: PPUSH
30480: CALL_OW 247
30484: PUSH
30485: LD_INT 1
30487: DOUBLE
30488: EQUAL
30489: IFTRUE 30493
30491: GO 31071
30493: POP
// begin if GetClass ( i ) = 1 then
30494: LD_VAR 0 6
30498: PPUSH
30499: CALL_OW 257
30503: PUSH
30504: LD_INT 1
30506: EQUAL
30507: IFFALSE 30528
// points := [ 10 , 5 , 3 ] ;
30509: LD_ADDR_VAR 0 9
30513: PUSH
30514: LD_INT 10
30516: PUSH
30517: LD_INT 5
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30528: LD_VAR 0 6
30532: PPUSH
30533: CALL_OW 257
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: IN
30552: IFFALSE 30573
// points := [ 3 , 2 , 1 ] ;
30554: LD_ADDR_VAR 0 9
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: LIST
30572: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30573: LD_VAR 0 6
30577: PPUSH
30578: CALL_OW 257
30582: PUSH
30583: LD_INT 5
30585: EQUAL
30586: IFFALSE 30607
// points := [ 130 , 5 , 2 ] ;
30588: LD_ADDR_VAR 0 9
30592: PUSH
30593: LD_INT 130
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30607: LD_VAR 0 6
30611: PPUSH
30612: CALL_OW 257
30616: PUSH
30617: LD_INT 8
30619: EQUAL
30620: IFFALSE 30641
// points := [ 35 , 35 , 30 ] ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_INT 35
30629: PUSH
30630: LD_INT 35
30632: PUSH
30633: LD_INT 30
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 257
30650: PUSH
30651: LD_INT 9
30653: EQUAL
30654: IFFALSE 30675
// points := [ 20 , 55 , 40 ] ;
30656: LD_ADDR_VAR 0 9
30660: PUSH
30661: LD_INT 20
30663: PUSH
30664: LD_INT 55
30666: PUSH
30667: LD_INT 40
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30675: LD_VAR 0 6
30679: PPUSH
30680: CALL_OW 257
30684: PUSH
30685: LD_INT 12
30687: PUSH
30688: LD_INT 16
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: IN
30695: IFFALSE 30716
// points := [ 5 , 3 , 2 ] ;
30697: LD_ADDR_VAR 0 9
30701: PUSH
30702: LD_INT 5
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30716: LD_VAR 0 6
30720: PPUSH
30721: CALL_OW 257
30725: PUSH
30726: LD_INT 17
30728: EQUAL
30729: IFFALSE 30750
// points := [ 100 , 50 , 75 ] ;
30731: LD_ADDR_VAR 0 9
30735: PUSH
30736: LD_INT 100
30738: PUSH
30739: LD_INT 50
30741: PUSH
30742: LD_INT 75
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30750: LD_VAR 0 6
30754: PPUSH
30755: CALL_OW 257
30759: PUSH
30760: LD_INT 15
30762: EQUAL
30763: IFFALSE 30784
// points := [ 10 , 5 , 3 ] ;
30765: LD_ADDR_VAR 0 9
30769: PUSH
30770: LD_INT 10
30772: PUSH
30773: LD_INT 5
30775: PUSH
30776: LD_INT 3
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30784: LD_VAR 0 6
30788: PPUSH
30789: CALL_OW 257
30793: PUSH
30794: LD_INT 14
30796: EQUAL
30797: IFFALSE 30818
// points := [ 10 , 0 , 0 ] ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: LD_INT 10
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 257
30827: PUSH
30828: LD_INT 11
30830: EQUAL
30831: IFFALSE 30852
// points := [ 30 , 10 , 5 ] ;
30833: LD_ADDR_VAR 0 9
30837: PUSH
30838: LD_INT 30
30840: PUSH
30841: LD_INT 10
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_INT 5
30859: PPUSH
30860: CALL_OW 321
30864: PUSH
30865: LD_INT 2
30867: EQUAL
30868: IFFALSE 30885
// bpoints := bpoints * 1.8 ;
30870: LD_ADDR_VAR 0 10
30874: PUSH
30875: LD_VAR 0 10
30879: PUSH
30880: LD_REAL  1.80000000000000E+0000
30883: MUL
30884: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30885: LD_VAR 0 6
30889: PPUSH
30890: CALL_OW 257
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 4
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: IN
30913: PUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: LD_INT 51
30921: PPUSH
30922: CALL_OW 321
30926: PUSH
30927: LD_INT 2
30929: EQUAL
30930: AND
30931: IFFALSE 30948
// bpoints := bpoints * 1.2 ;
30933: LD_ADDR_VAR 0 10
30937: PUSH
30938: LD_VAR 0 10
30942: PUSH
30943: LD_REAL  1.20000000000000E+0000
30946: MUL
30947: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30948: LD_VAR 0 6
30952: PPUSH
30953: CALL_OW 257
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: LD_INT 7
30963: PUSH
30964: LD_INT 9
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: IN
30972: PUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: LD_INT 52
30980: PPUSH
30981: CALL_OW 321
30985: PUSH
30986: LD_INT 2
30988: EQUAL
30989: AND
30990: IFFALSE 31007
// bpoints := bpoints * 1.5 ;
30992: LD_ADDR_VAR 0 10
30996: PUSH
30997: LD_VAR 0 10
31001: PUSH
31002: LD_REAL  1.50000000000000E+0000
31005: MUL
31006: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31007: LD_VAR 0 1
31011: PPUSH
31012: LD_INT 66
31014: PPUSH
31015: CALL_OW 321
31019: PUSH
31020: LD_INT 2
31022: EQUAL
31023: IFFALSE 31040
// bpoints := bpoints * 1.1 ;
31025: LD_ADDR_VAR 0 10
31029: PUSH
31030: LD_VAR 0 10
31034: PUSH
31035: LD_REAL  1.10000000000000E+0000
31038: MUL
31039: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31040: LD_ADDR_VAR 0 10
31044: PUSH
31045: LD_VAR 0 10
31049: PUSH
31050: LD_VAR 0 6
31054: PPUSH
31055: LD_INT 1
31057: PPUSH
31058: CALL_OW 259
31062: PUSH
31063: LD_REAL  1.15000000000000E+0000
31066: MUL
31067: MUL
31068: ST_TO_ADDR
// end ; unit_vehicle :
31069: GO 31899
31071: LD_INT 2
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31887
31079: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31080: LD_VAR 0 6
31084: PPUSH
31085: CALL_OW 264
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: LD_INT 42
31095: PUSH
31096: LD_INT 24
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: IN
31104: IFFALSE 31125
// points := [ 25 , 5 , 3 ] ;
31106: LD_ADDR_VAR 0 9
31110: PUSH
31111: LD_INT 25
31113: PUSH
31114: LD_INT 5
31116: PUSH
31117: LD_INT 3
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31125: LD_VAR 0 6
31129: PPUSH
31130: CALL_OW 264
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: LD_INT 43
31140: PUSH
31141: LD_INT 25
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: IN
31149: IFFALSE 31170
// points := [ 40 , 15 , 5 ] ;
31151: LD_ADDR_VAR 0 9
31155: PUSH
31156: LD_INT 40
31158: PUSH
31159: LD_INT 15
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31170: LD_VAR 0 6
31174: PPUSH
31175: CALL_OW 264
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 23
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: IN
31190: IFFALSE 31211
// points := [ 7 , 25 , 8 ] ;
31192: LD_ADDR_VAR 0 9
31196: PUSH
31197: LD_INT 7
31199: PUSH
31200: LD_INT 25
31202: PUSH
31203: LD_INT 8
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31211: LD_VAR 0 6
31215: PPUSH
31216: CALL_OW 264
31220: PUSH
31221: LD_INT 5
31223: PUSH
31224: LD_INT 27
31226: PUSH
31227: LD_INT 44
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: IN
31235: IFFALSE 31256
// points := [ 14 , 50 , 16 ] ;
31237: LD_ADDR_VAR 0 9
31241: PUSH
31242: LD_INT 14
31244: PUSH
31245: LD_INT 50
31247: PUSH
31248: LD_INT 16
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31256: LD_VAR 0 6
31260: PPUSH
31261: CALL_OW 264
31265: PUSH
31266: LD_INT 6
31268: PUSH
31269: LD_INT 46
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: IN
31276: IFFALSE 31297
// points := [ 32 , 120 , 70 ] ;
31278: LD_ADDR_VAR 0 9
31282: PUSH
31283: LD_INT 32
31285: PUSH
31286: LD_INT 120
31288: PUSH
31289: LD_INT 70
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31297: LD_VAR 0 6
31301: PPUSH
31302: CALL_OW 264
31306: PUSH
31307: LD_INT 7
31309: PUSH
31310: LD_INT 28
31312: PUSH
31313: LD_INT 45
31315: PUSH
31316: LD_EXP 102
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: IN
31327: IFFALSE 31348
// points := [ 35 , 20 , 45 ] ;
31329: LD_ADDR_VAR 0 9
31333: PUSH
31334: LD_INT 35
31336: PUSH
31337: LD_INT 20
31339: PUSH
31340: LD_INT 45
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31348: LD_VAR 0 6
31352: PPUSH
31353: CALL_OW 264
31357: PUSH
31358: LD_INT 47
31360: PUSH
31361: EMPTY
31362: LIST
31363: IN
31364: IFFALSE 31385
// points := [ 67 , 45 , 75 ] ;
31366: LD_ADDR_VAR 0 9
31370: PUSH
31371: LD_INT 67
31373: PUSH
31374: LD_INT 45
31376: PUSH
31377: LD_INT 75
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31385: LD_VAR 0 6
31389: PPUSH
31390: CALL_OW 264
31394: PUSH
31395: LD_INT 26
31397: PUSH
31398: EMPTY
31399: LIST
31400: IN
31401: IFFALSE 31422
// points := [ 120 , 30 , 80 ] ;
31403: LD_ADDR_VAR 0 9
31407: PUSH
31408: LD_INT 120
31410: PUSH
31411: LD_INT 30
31413: PUSH
31414: LD_INT 80
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31422: LD_VAR 0 6
31426: PPUSH
31427: CALL_OW 264
31431: PUSH
31432: LD_INT 22
31434: PUSH
31435: EMPTY
31436: LIST
31437: IN
31438: IFFALSE 31459
// points := [ 40 , 1 , 1 ] ;
31440: LD_ADDR_VAR 0 9
31444: PUSH
31445: LD_INT 40
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31459: LD_VAR 0 6
31463: PPUSH
31464: CALL_OW 264
31468: PUSH
31469: LD_INT 29
31471: PUSH
31472: EMPTY
31473: LIST
31474: IN
31475: IFFALSE 31496
// points := [ 70 , 200 , 400 ] ;
31477: LD_ADDR_VAR 0 9
31481: PUSH
31482: LD_INT 70
31484: PUSH
31485: LD_INT 200
31487: PUSH
31488: LD_INT 400
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31496: LD_VAR 0 6
31500: PPUSH
31501: CALL_OW 264
31505: PUSH
31506: LD_INT 14
31508: PUSH
31509: LD_INT 53
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: IN
31516: IFFALSE 31537
// points := [ 40 , 10 , 20 ] ;
31518: LD_ADDR_VAR 0 9
31522: PUSH
31523: LD_INT 40
31525: PUSH
31526: LD_INT 10
31528: PUSH
31529: LD_INT 20
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31537: LD_VAR 0 6
31541: PPUSH
31542: CALL_OW 264
31546: PUSH
31547: LD_INT 9
31549: PUSH
31550: EMPTY
31551: LIST
31552: IN
31553: IFFALSE 31574
// points := [ 5 , 70 , 20 ] ;
31555: LD_ADDR_VAR 0 9
31559: PUSH
31560: LD_INT 5
31562: PUSH
31563: LD_INT 70
31565: PUSH
31566: LD_INT 20
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31574: LD_VAR 0 6
31578: PPUSH
31579: CALL_OW 264
31583: PUSH
31584: LD_INT 10
31586: PUSH
31587: EMPTY
31588: LIST
31589: IN
31590: IFFALSE 31611
// points := [ 35 , 110 , 70 ] ;
31592: LD_ADDR_VAR 0 9
31596: PUSH
31597: LD_INT 35
31599: PUSH
31600: LD_INT 110
31602: PUSH
31603: LD_INT 70
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31611: LD_VAR 0 6
31615: PPUSH
31616: CALL_OW 265
31620: PUSH
31621: LD_INT 25
31623: EQUAL
31624: IFFALSE 31645
// points := [ 80 , 65 , 100 ] ;
31626: LD_ADDR_VAR 0 9
31630: PUSH
31631: LD_INT 80
31633: PUSH
31634: LD_INT 65
31636: PUSH
31637: LD_INT 100
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31645: LD_VAR 0 6
31649: PPUSH
31650: CALL_OW 263
31654: PUSH
31655: LD_INT 1
31657: EQUAL
31658: IFFALSE 31693
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31660: LD_ADDR_VAR 0 10
31664: PUSH
31665: LD_VAR 0 10
31669: PUSH
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 311
31679: PPUSH
31680: LD_INT 3
31682: PPUSH
31683: CALL_OW 259
31687: PUSH
31688: LD_INT 4
31690: MUL
31691: MUL
31692: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31693: LD_VAR 0 6
31697: PPUSH
31698: CALL_OW 263
31702: PUSH
31703: LD_INT 2
31705: EQUAL
31706: IFFALSE 31757
// begin j := IsControledBy ( i ) ;
31708: LD_ADDR_VAR 0 7
31712: PUSH
31713: LD_VAR 0 6
31717: PPUSH
31718: CALL_OW 312
31722: ST_TO_ADDR
// if j then
31723: LD_VAR 0 7
31727: IFFALSE 31757
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31729: LD_ADDR_VAR 0 10
31733: PUSH
31734: LD_VAR 0 10
31738: PUSH
31739: LD_VAR 0 7
31743: PPUSH
31744: LD_INT 3
31746: PPUSH
31747: CALL_OW 259
31751: PUSH
31752: LD_INT 3
31754: MUL
31755: MUL
31756: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31757: LD_VAR 0 6
31761: PPUSH
31762: CALL_OW 264
31766: PUSH
31767: LD_INT 5
31769: PUSH
31770: LD_INT 6
31772: PUSH
31773: LD_INT 46
31775: PUSH
31776: LD_INT 44
31778: PUSH
31779: LD_INT 47
31781: PUSH
31782: LD_INT 45
31784: PUSH
31785: LD_INT 28
31787: PUSH
31788: LD_INT 7
31790: PUSH
31791: LD_INT 27
31793: PUSH
31794: LD_INT 29
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: IN
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: LD_INT 52
31817: PPUSH
31818: CALL_OW 321
31822: PUSH
31823: LD_INT 2
31825: EQUAL
31826: AND
31827: IFFALSE 31844
// bpoints := bpoints * 1.2 ;
31829: LD_ADDR_VAR 0 10
31833: PUSH
31834: LD_VAR 0 10
31838: PUSH
31839: LD_REAL  1.20000000000000E+0000
31842: MUL
31843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31844: LD_VAR 0 6
31848: PPUSH
31849: CALL_OW 264
31853: PUSH
31854: LD_INT 6
31856: PUSH
31857: LD_INT 46
31859: PUSH
31860: LD_INT 47
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: IN
31868: IFFALSE 31885
// bpoints := bpoints * 1.2 ;
31870: LD_ADDR_VAR 0 10
31874: PUSH
31875: LD_VAR 0 10
31879: PUSH
31880: LD_REAL  1.20000000000000E+0000
31883: MUL
31884: ST_TO_ADDR
// end ; unit_building :
31885: GO 31899
31887: LD_INT 3
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31898
31895: POP
// ; end ;
31896: GO 31899
31898: POP
// for j = 1 to 3 do
31899: LD_ADDR_VAR 0 7
31903: PUSH
31904: DOUBLE
31905: LD_INT 1
31907: DEC
31908: ST_TO_ADDR
31909: LD_INT 3
31911: PUSH
31912: FOR_TO
31913: IFFALSE 31966
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: LD_VAR 0 5
31924: PPUSH
31925: LD_VAR 0 7
31929: PPUSH
31930: LD_VAR 0 5
31934: PUSH
31935: LD_VAR 0 7
31939: ARRAY
31940: PUSH
31941: LD_VAR 0 9
31945: PUSH
31946: LD_VAR 0 7
31950: ARRAY
31951: PUSH
31952: LD_VAR 0 10
31956: MUL
31957: PLUS
31958: PPUSH
31959: CALL_OW 1
31963: ST_TO_ADDR
31964: GO 31912
31966: POP
31967: POP
// end ;
31968: GO 30445
31970: POP
31971: POP
// result := Replace ( result , 4 , tmp ) ;
31972: LD_ADDR_VAR 0 5
31976: PUSH
31977: LD_VAR 0 5
31981: PPUSH
31982: LD_INT 4
31984: PPUSH
31985: LD_VAR 0 8
31989: PPUSH
31990: CALL_OW 1
31994: ST_TO_ADDR
// end ;
31995: LD_VAR 0 5
31999: RET
// export function DangerAtRange ( unit , range ) ; begin
32000: LD_INT 0
32002: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 255
32017: PPUSH
32018: LD_VAR 0 1
32022: PPUSH
32023: CALL_OW 250
32027: PPUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 251
32037: PPUSH
32038: LD_VAR 0 2
32042: PPUSH
32043: CALL 30297 0 4
32047: ST_TO_ADDR
// end ;
32048: LD_VAR 0 3
32052: RET
// export function DangerInArea ( side , area ) ; begin
32053: LD_INT 0
32055: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: LD_INT 81
32068: PUSH
32069: LD_VAR 0 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PPUSH
32078: CALL_OW 70
32082: ST_TO_ADDR
// end ;
32083: LD_VAR 0 3
32087: RET
// export function IsExtension ( b ) ; begin
32088: LD_INT 0
32090: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32091: LD_ADDR_VAR 0 2
32095: PUSH
32096: LD_VAR 0 1
32100: PUSH
32101: LD_INT 23
32103: PUSH
32104: LD_INT 20
32106: PUSH
32107: LD_INT 22
32109: PUSH
32110: LD_INT 17
32112: PUSH
32113: LD_INT 24
32115: PUSH
32116: LD_INT 21
32118: PUSH
32119: LD_INT 19
32121: PUSH
32122: LD_INT 16
32124: PUSH
32125: LD_INT 25
32127: PUSH
32128: LD_INT 18
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: IN
32143: ST_TO_ADDR
// end ;
32144: LD_VAR 0 2
32148: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32149: LD_INT 0
32151: PPUSH
32152: PPUSH
32153: PPUSH
// result := [ ] ;
32154: LD_ADDR_VAR 0 4
32158: PUSH
32159: EMPTY
32160: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32161: LD_ADDR_VAR 0 5
32165: PUSH
32166: LD_VAR 0 2
32170: PPUSH
32171: LD_INT 21
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PPUSH
32181: CALL_OW 70
32185: ST_TO_ADDR
// if not tmp then
32186: LD_VAR 0 5
32190: NOT
32191: IFFALSE 32195
// exit ;
32193: GO 32259
// if checkLink then
32195: LD_VAR 0 3
32199: IFFALSE 32249
// begin for i in tmp do
32201: LD_ADDR_VAR 0 6
32205: PUSH
32206: LD_VAR 0 5
32210: PUSH
32211: FOR_IN
32212: IFFALSE 32247
// if GetBase ( i ) <> base then
32214: LD_VAR 0 6
32218: PPUSH
32219: CALL_OW 274
32223: PUSH
32224: LD_VAR 0 1
32228: NONEQUAL
32229: IFFALSE 32245
// ComLinkToBase ( base , i ) ;
32231: LD_VAR 0 1
32235: PPUSH
32236: LD_VAR 0 6
32240: PPUSH
32241: CALL_OW 169
32245: GO 32211
32247: POP
32248: POP
// end ; result := tmp ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 5
32258: ST_TO_ADDR
// end ;
32259: LD_VAR 0 4
32263: RET
// export function ComComplete ( units , b ) ; var i ; begin
32264: LD_INT 0
32266: PPUSH
32267: PPUSH
// if not units then
32268: LD_VAR 0 1
32272: NOT
32273: IFFALSE 32277
// exit ;
32275: GO 32367
// for i in units do
32277: LD_ADDR_VAR 0 4
32281: PUSH
32282: LD_VAR 0 1
32286: PUSH
32287: FOR_IN
32288: IFFALSE 32365
// if BuildingStatus ( b ) = bs_build then
32290: LD_VAR 0 2
32294: PPUSH
32295: CALL_OW 461
32299: PUSH
32300: LD_INT 1
32302: EQUAL
32303: IFFALSE 32363
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32305: LD_VAR 0 4
32309: PPUSH
32310: LD_STRING h
32312: PUSH
32313: LD_VAR 0 2
32317: PPUSH
32318: CALL_OW 250
32322: PUSH
32323: LD_VAR 0 2
32327: PPUSH
32328: CALL_OW 251
32332: PUSH
32333: LD_VAR 0 2
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: PPUSH
32359: CALL_OW 446
32363: GO 32287
32365: POP
32366: POP
// end ;
32367: LD_VAR 0 3
32371: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32372: LD_INT 0
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32380: LD_VAR 0 1
32384: NOT
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 263
32395: PUSH
32396: LD_INT 2
32398: NONEQUAL
32399: OR
32400: IFFALSE 32404
// exit ;
32402: GO 32720
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32404: LD_ADDR_VAR 0 6
32408: PUSH
32409: LD_INT 22
32411: PUSH
32412: LD_VAR 0 1
32416: PPUSH
32417: CALL_OW 255
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: LD_INT 36
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 34
32441: PUSH
32442: LD_INT 31
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PPUSH
32458: CALL_OW 69
32462: ST_TO_ADDR
// if not tmp then
32463: LD_VAR 0 6
32467: NOT
32468: IFFALSE 32472
// exit ;
32470: GO 32720
// result := [ ] ;
32472: LD_ADDR_VAR 0 2
32476: PUSH
32477: EMPTY
32478: ST_TO_ADDR
// for i in tmp do
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_VAR 0 6
32488: PUSH
32489: FOR_IN
32490: IFFALSE 32561
// begin t := UnitsInside ( i ) ;
32492: LD_ADDR_VAR 0 4
32496: PUSH
32497: LD_VAR 0 3
32501: PPUSH
32502: CALL_OW 313
32506: ST_TO_ADDR
// if t then
32507: LD_VAR 0 4
32511: IFFALSE 32559
// for j in t do
32513: LD_ADDR_VAR 0 7
32517: PUSH
32518: LD_VAR 0 4
32522: PUSH
32523: FOR_IN
32524: IFFALSE 32557
// result := Replace ( result , result + 1 , j ) ;
32526: LD_ADDR_VAR 0 2
32530: PUSH
32531: LD_VAR 0 2
32535: PPUSH
32536: LD_VAR 0 2
32540: PUSH
32541: LD_INT 1
32543: PLUS
32544: PPUSH
32545: LD_VAR 0 7
32549: PPUSH
32550: CALL_OW 1
32554: ST_TO_ADDR
32555: GO 32523
32557: POP
32558: POP
// end ;
32559: GO 32489
32561: POP
32562: POP
// if not result then
32563: LD_VAR 0 2
32567: NOT
32568: IFFALSE 32572
// exit ;
32570: GO 32720
// mech := result [ 1 ] ;
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: LD_VAR 0 2
32581: PUSH
32582: LD_INT 1
32584: ARRAY
32585: ST_TO_ADDR
// if result > 1 then
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 1
32593: GREATER
32594: IFFALSE 32706
// begin for i = 2 to result do
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: DOUBLE
32602: LD_INT 2
32604: DEC
32605: ST_TO_ADDR
32606: LD_VAR 0 2
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32704
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32614: LD_ADDR_VAR 0 4
32618: PUSH
32619: LD_VAR 0 2
32623: PUSH
32624: LD_VAR 0 3
32628: ARRAY
32629: PPUSH
32630: LD_INT 3
32632: PPUSH
32633: CALL_OW 259
32637: PUSH
32638: LD_VAR 0 2
32642: PUSH
32643: LD_VAR 0 3
32647: ARRAY
32648: PPUSH
32649: CALL_OW 432
32653: MINUS
32654: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32655: LD_VAR 0 4
32659: PUSH
32660: LD_VAR 0 5
32664: PPUSH
32665: LD_INT 3
32667: PPUSH
32668: CALL_OW 259
32672: PUSH
32673: LD_VAR 0 5
32677: PPUSH
32678: CALL_OW 432
32682: MINUS
32683: GREATEREQUAL
32684: IFFALSE 32702
// mech := result [ i ] ;
32686: LD_ADDR_VAR 0 5
32690: PUSH
32691: LD_VAR 0 2
32695: PUSH
32696: LD_VAR 0 3
32700: ARRAY
32701: ST_TO_ADDR
// end ;
32702: GO 32611
32704: POP
32705: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32706: LD_VAR 0 1
32710: PPUSH
32711: LD_VAR 0 5
32715: PPUSH
32716: CALL_OW 135
// end ;
32720: LD_VAR 0 2
32724: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
32734: PPUSH
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
// result := [ ] ;
32740: LD_ADDR_VAR 0 7
32744: PUSH
32745: EMPTY
32746: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32747: LD_VAR 0 1
32751: PPUSH
32752: CALL_OW 266
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: IN
32767: NOT
32768: IFFALSE 32772
// exit ;
32770: GO 34406
// if name then
32772: LD_VAR 0 3
32776: IFFALSE 32792
// SetBName ( base_dep , name ) ;
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 3
32787: PPUSH
32788: CALL_OW 500
// base := GetBase ( base_dep ) ;
32792: LD_ADDR_VAR 0 15
32796: PUSH
32797: LD_VAR 0 1
32801: PPUSH
32802: CALL_OW 274
32806: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32807: LD_ADDR_VAR 0 16
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 255
32821: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32822: LD_ADDR_VAR 0 17
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 248
32836: ST_TO_ADDR
// if sources then
32837: LD_VAR 0 5
32841: IFFALSE 32888
// for i = 1 to 3 do
32843: LD_ADDR_VAR 0 8
32847: PUSH
32848: DOUBLE
32849: LD_INT 1
32851: DEC
32852: ST_TO_ADDR
32853: LD_INT 3
32855: PUSH
32856: FOR_TO
32857: IFFALSE 32886
// AddResourceType ( base , i , sources [ i ] ) ;
32859: LD_VAR 0 15
32863: PPUSH
32864: LD_VAR 0 8
32868: PPUSH
32869: LD_VAR 0 5
32873: PUSH
32874: LD_VAR 0 8
32878: ARRAY
32879: PPUSH
32880: CALL_OW 276
32884: GO 32856
32886: POP
32887: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32888: LD_ADDR_VAR 0 18
32892: PUSH
32893: LD_VAR 0 15
32897: PPUSH
32898: LD_VAR 0 2
32902: PPUSH
32903: LD_INT 1
32905: PPUSH
32906: CALL 32149 0 3
32910: ST_TO_ADDR
// InitHc ;
32911: CALL_OW 19
// InitUc ;
32915: CALL_OW 18
// uc_side := side ;
32919: LD_ADDR_OWVAR 20
32923: PUSH
32924: LD_VAR 0 16
32928: ST_TO_ADDR
// uc_nation := nation ;
32929: LD_ADDR_OWVAR 21
32933: PUSH
32934: LD_VAR 0 17
32938: ST_TO_ADDR
// if buildings then
32939: LD_VAR 0 18
32943: IFFALSE 34265
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32945: LD_ADDR_VAR 0 19
32949: PUSH
32950: LD_VAR 0 18
32954: PPUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 30
32960: PUSH
32961: LD_INT 29
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 30
32970: PUSH
32971: LD_INT 30
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: PPUSH
32983: CALL_OW 72
32987: ST_TO_ADDR
// if tmp then
32988: LD_VAR 0 19
32992: IFFALSE 33040
// for i in tmp do
32994: LD_ADDR_VAR 0 8
32998: PUSH
32999: LD_VAR 0 19
33003: PUSH
33004: FOR_IN
33005: IFFALSE 33038
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33007: LD_VAR 0 8
33011: PPUSH
33012: CALL_OW 250
33016: PPUSH
33017: LD_VAR 0 8
33021: PPUSH
33022: CALL_OW 251
33026: PPUSH
33027: LD_VAR 0 16
33031: PPUSH
33032: CALL_OW 441
33036: GO 33004
33038: POP
33039: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33040: LD_VAR 0 18
33044: PPUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 30
33050: PUSH
33051: LD_INT 32
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 30
33060: PUSH
33061: LD_INT 33
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: PPUSH
33073: CALL_OW 72
33077: IFFALSE 33165
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33079: LD_ADDR_VAR 0 8
33083: PUSH
33084: LD_VAR 0 18
33088: PPUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 30
33094: PUSH
33095: LD_INT 32
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 30
33104: PUSH
33105: LD_INT 33
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: PPUSH
33117: CALL_OW 72
33121: PUSH
33122: FOR_IN
33123: IFFALSE 33163
// begin if not GetBWeapon ( i ) then
33125: LD_VAR 0 8
33129: PPUSH
33130: CALL_OW 269
33134: NOT
33135: IFFALSE 33161
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33137: LD_VAR 0 8
33141: PPUSH
33142: LD_VAR 0 8
33146: PPUSH
33147: LD_VAR 0 2
33151: PPUSH
33152: CALL 34411 0 2
33156: PPUSH
33157: CALL_OW 431
// end ;
33161: GO 33122
33163: POP
33164: POP
// end ; for i = 1 to personel do
33165: LD_ADDR_VAR 0 8
33169: PUSH
33170: DOUBLE
33171: LD_INT 1
33173: DEC
33174: ST_TO_ADDR
33175: LD_VAR 0 6
33179: PUSH
33180: FOR_TO
33181: IFFALSE 34245
// begin if i > 4 then
33183: LD_VAR 0 8
33187: PUSH
33188: LD_INT 4
33190: GREATER
33191: IFFALSE 33195
// break ;
33193: GO 34245
// case i of 1 :
33195: LD_VAR 0 8
33199: PUSH
33200: LD_INT 1
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33288
33208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33209: LD_ADDR_VAR 0 12
33213: PUSH
33214: LD_VAR 0 18
33218: PPUSH
33219: LD_INT 22
33221: PUSH
33222: LD_VAR 0 16
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 58
33233: PUSH
33234: EMPTY
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 32
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 30
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: PPUSH
33281: CALL_OW 72
33285: ST_TO_ADDR
33286: GO 33510
33288: LD_INT 2
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33358
33296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33297: LD_ADDR_VAR 0 12
33301: PUSH
33302: LD_VAR 0 18
33306: PPUSH
33307: LD_INT 22
33309: PUSH
33310: LD_VAR 0 16
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 30
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 30
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PPUSH
33351: CALL_OW 72
33355: ST_TO_ADDR
33356: GO 33510
33358: LD_INT 3
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33428
33366: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33367: LD_ADDR_VAR 0 12
33371: PUSH
33372: LD_VAR 0 18
33376: PPUSH
33377: LD_INT 22
33379: PUSH
33380: LD_VAR 0 16
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: LD_INT 30
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 30
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PPUSH
33421: CALL_OW 72
33425: ST_TO_ADDR
33426: GO 33510
33428: LD_INT 4
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33509
33436: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33437: LD_ADDR_VAR 0 12
33441: PUSH
33442: LD_VAR 0 18
33446: PPUSH
33447: LD_INT 22
33449: PUSH
33450: LD_VAR 0 16
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 30
33464: PUSH
33465: LD_INT 6
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 30
33474: PUSH
33475: LD_INT 7
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 30
33484: PUSH
33485: LD_INT 8
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PPUSH
33502: CALL_OW 72
33506: ST_TO_ADDR
33507: GO 33510
33509: POP
// if i = 1 then
33510: LD_VAR 0 8
33514: PUSH
33515: LD_INT 1
33517: EQUAL
33518: IFFALSE 33629
// begin tmp := [ ] ;
33520: LD_ADDR_VAR 0 19
33524: PUSH
33525: EMPTY
33526: ST_TO_ADDR
// for j in f do
33527: LD_ADDR_VAR 0 9
33531: PUSH
33532: LD_VAR 0 12
33536: PUSH
33537: FOR_IN
33538: IFFALSE 33611
// if GetBType ( j ) = b_bunker then
33540: LD_VAR 0 9
33544: PPUSH
33545: CALL_OW 266
33549: PUSH
33550: LD_INT 32
33552: EQUAL
33553: IFFALSE 33580
// tmp := Insert ( tmp , 1 , j ) else
33555: LD_ADDR_VAR 0 19
33559: PUSH
33560: LD_VAR 0 19
33564: PPUSH
33565: LD_INT 1
33567: PPUSH
33568: LD_VAR 0 9
33572: PPUSH
33573: CALL_OW 2
33577: ST_TO_ADDR
33578: GO 33609
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33580: LD_ADDR_VAR 0 19
33584: PUSH
33585: LD_VAR 0 19
33589: PPUSH
33590: LD_VAR 0 19
33594: PUSH
33595: LD_INT 1
33597: PLUS
33598: PPUSH
33599: LD_VAR 0 9
33603: PPUSH
33604: CALL_OW 2
33608: ST_TO_ADDR
33609: GO 33537
33611: POP
33612: POP
// if tmp then
33613: LD_VAR 0 19
33617: IFFALSE 33629
// f := tmp ;
33619: LD_ADDR_VAR 0 12
33623: PUSH
33624: LD_VAR 0 19
33628: ST_TO_ADDR
// end ; x := personel [ i ] ;
33629: LD_ADDR_VAR 0 13
33633: PUSH
33634: LD_VAR 0 6
33638: PUSH
33639: LD_VAR 0 8
33643: ARRAY
33644: ST_TO_ADDR
// if x = - 1 then
33645: LD_VAR 0 13
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: EQUAL
33654: IFFALSE 33863
// begin for j in f do
33656: LD_ADDR_VAR 0 9
33660: PUSH
33661: LD_VAR 0 12
33665: PUSH
33666: FOR_IN
33667: IFFALSE 33859
// repeat InitHc ;
33669: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33673: LD_VAR 0 9
33677: PPUSH
33678: CALL_OW 266
33682: PUSH
33683: LD_INT 5
33685: EQUAL
33686: IFFALSE 33756
// begin if UnitsInside ( j ) < 3 then
33688: LD_VAR 0 9
33692: PPUSH
33693: CALL_OW 313
33697: PUSH
33698: LD_INT 3
33700: LESS
33701: IFFALSE 33737
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33703: LD_INT 0
33705: PPUSH
33706: LD_INT 5
33708: PUSH
33709: LD_INT 8
33711: PUSH
33712: LD_INT 9
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: LD_VAR 0 17
33724: ARRAY
33725: PPUSH
33726: LD_VAR 0 4
33730: PPUSH
33731: CALL_OW 380
33735: GO 33754
// PrepareHuman ( false , i , skill ) ;
33737: LD_INT 0
33739: PPUSH
33740: LD_VAR 0 8
33744: PPUSH
33745: LD_VAR 0 4
33749: PPUSH
33750: CALL_OW 380
// end else
33754: GO 33773
// PrepareHuman ( false , i , skill ) ;
33756: LD_INT 0
33758: PPUSH
33759: LD_VAR 0 8
33763: PPUSH
33764: LD_VAR 0 4
33768: PPUSH
33769: CALL_OW 380
// un := CreateHuman ;
33773: LD_ADDR_VAR 0 14
33777: PUSH
33778: CALL_OW 44
33782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33783: LD_ADDR_VAR 0 7
33787: PUSH
33788: LD_VAR 0 7
33792: PPUSH
33793: LD_INT 1
33795: PPUSH
33796: LD_VAR 0 14
33800: PPUSH
33801: CALL_OW 2
33805: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33806: LD_VAR 0 14
33810: PPUSH
33811: LD_VAR 0 9
33815: PPUSH
33816: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33820: LD_VAR 0 9
33824: PPUSH
33825: CALL_OW 313
33829: PUSH
33830: LD_INT 6
33832: EQUAL
33833: PUSH
33834: LD_VAR 0 9
33838: PPUSH
33839: CALL_OW 266
33843: PUSH
33844: LD_INT 32
33846: PUSH
33847: LD_INT 31
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: IN
33854: OR
33855: IFFALSE 33669
33857: GO 33666
33859: POP
33860: POP
// end else
33861: GO 34243
// for j = 1 to x do
33863: LD_ADDR_VAR 0 9
33867: PUSH
33868: DOUBLE
33869: LD_INT 1
33871: DEC
33872: ST_TO_ADDR
33873: LD_VAR 0 13
33877: PUSH
33878: FOR_TO
33879: IFFALSE 34241
// begin InitHc ;
33881: CALL_OW 19
// if not f then
33885: LD_VAR 0 12
33889: NOT
33890: IFFALSE 33979
// begin PrepareHuman ( false , i , skill ) ;
33892: LD_INT 0
33894: PPUSH
33895: LD_VAR 0 8
33899: PPUSH
33900: LD_VAR 0 4
33904: PPUSH
33905: CALL_OW 380
// un := CreateHuman ;
33909: LD_ADDR_VAR 0 14
33913: PUSH
33914: CALL_OW 44
33918: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33919: LD_ADDR_VAR 0 7
33923: PUSH
33924: LD_VAR 0 7
33928: PPUSH
33929: LD_INT 1
33931: PPUSH
33932: LD_VAR 0 14
33936: PPUSH
33937: CALL_OW 2
33941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33942: LD_VAR 0 14
33946: PPUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 250
33956: PPUSH
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 251
33966: PPUSH
33967: LD_INT 10
33969: PPUSH
33970: LD_INT 0
33972: PPUSH
33973: CALL_OW 50
// continue ;
33977: GO 33878
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33979: LD_VAR 0 12
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: PPUSH
33988: CALL_OW 313
33992: PUSH
33993: LD_VAR 0 12
33997: PUSH
33998: LD_INT 1
34000: ARRAY
34001: PPUSH
34002: CALL_OW 266
34006: PUSH
34007: LD_INT 32
34009: PUSH
34010: LD_INT 31
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: IN
34017: AND
34018: PUSH
34019: LD_VAR 0 12
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: PPUSH
34028: CALL_OW 313
34032: PUSH
34033: LD_INT 6
34035: EQUAL
34036: OR
34037: IFFALSE 34057
// f := Delete ( f , 1 ) ;
34039: LD_ADDR_VAR 0 12
34043: PUSH
34044: LD_VAR 0 12
34048: PPUSH
34049: LD_INT 1
34051: PPUSH
34052: CALL_OW 3
34056: ST_TO_ADDR
// if not f then
34057: LD_VAR 0 12
34061: NOT
34062: IFFALSE 34080
// begin x := x + 2 ;
34064: LD_ADDR_VAR 0 13
34068: PUSH
34069: LD_VAR 0 13
34073: PUSH
34074: LD_INT 2
34076: PLUS
34077: ST_TO_ADDR
// continue ;
34078: GO 33878
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34080: LD_VAR 0 12
34084: PUSH
34085: LD_INT 1
34087: ARRAY
34088: PPUSH
34089: CALL_OW 266
34093: PUSH
34094: LD_INT 5
34096: EQUAL
34097: IFFALSE 34171
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34099: LD_VAR 0 12
34103: PUSH
34104: LD_INT 1
34106: ARRAY
34107: PPUSH
34108: CALL_OW 313
34112: PUSH
34113: LD_INT 3
34115: LESS
34116: IFFALSE 34152
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34118: LD_INT 0
34120: PPUSH
34121: LD_INT 5
34123: PUSH
34124: LD_INT 8
34126: PUSH
34127: LD_INT 9
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: LD_VAR 0 17
34139: ARRAY
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: CALL_OW 380
34150: GO 34169
// PrepareHuman ( false , i , skill ) ;
34152: LD_INT 0
34154: PPUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_VAR 0 4
34164: PPUSH
34165: CALL_OW 380
// end else
34169: GO 34188
// PrepareHuman ( false , i , skill ) ;
34171: LD_INT 0
34173: PPUSH
34174: LD_VAR 0 8
34178: PPUSH
34179: LD_VAR 0 4
34183: PPUSH
34184: CALL_OW 380
// un := CreateHuman ;
34188: LD_ADDR_VAR 0 14
34192: PUSH
34193: CALL_OW 44
34197: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34198: LD_ADDR_VAR 0 7
34202: PUSH
34203: LD_VAR 0 7
34207: PPUSH
34208: LD_INT 1
34210: PPUSH
34211: LD_VAR 0 14
34215: PPUSH
34216: CALL_OW 2
34220: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34221: LD_VAR 0 14
34225: PPUSH
34226: LD_VAR 0 12
34230: PUSH
34231: LD_INT 1
34233: ARRAY
34234: PPUSH
34235: CALL_OW 52
// end ;
34239: GO 33878
34241: POP
34242: POP
// end ;
34243: GO 33180
34245: POP
34246: POP
// result := result ^ buildings ;
34247: LD_ADDR_VAR 0 7
34251: PUSH
34252: LD_VAR 0 7
34256: PUSH
34257: LD_VAR 0 18
34261: ADD
34262: ST_TO_ADDR
// end else
34263: GO 34406
// begin for i = 1 to personel do
34265: LD_ADDR_VAR 0 8
34269: PUSH
34270: DOUBLE
34271: LD_INT 1
34273: DEC
34274: ST_TO_ADDR
34275: LD_VAR 0 6
34279: PUSH
34280: FOR_TO
34281: IFFALSE 34404
// begin if i > 4 then
34283: LD_VAR 0 8
34287: PUSH
34288: LD_INT 4
34290: GREATER
34291: IFFALSE 34295
// break ;
34293: GO 34404
// x := personel [ i ] ;
34295: LD_ADDR_VAR 0 13
34299: PUSH
34300: LD_VAR 0 6
34304: PUSH
34305: LD_VAR 0 8
34309: ARRAY
34310: ST_TO_ADDR
// if x = - 1 then
34311: LD_VAR 0 13
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: EQUAL
34320: IFFALSE 34324
// continue ;
34322: GO 34280
// PrepareHuman ( false , i , skill ) ;
34324: LD_INT 0
34326: PPUSH
34327: LD_VAR 0 8
34331: PPUSH
34332: LD_VAR 0 4
34336: PPUSH
34337: CALL_OW 380
// un := CreateHuman ;
34341: LD_ADDR_VAR 0 14
34345: PUSH
34346: CALL_OW 44
34350: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34351: LD_VAR 0 14
34355: PPUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 250
34365: PPUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 251
34375: PPUSH
34376: LD_INT 10
34378: PPUSH
34379: LD_INT 0
34381: PPUSH
34382: CALL_OW 50
// result := result ^ un ;
34386: LD_ADDR_VAR 0 7
34390: PUSH
34391: LD_VAR 0 7
34395: PUSH
34396: LD_VAR 0 14
34400: ADD
34401: ST_TO_ADDR
// end ;
34402: GO 34280
34404: POP
34405: POP
// end ; end ;
34406: LD_VAR 0 7
34410: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34411: LD_INT 0
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
// result := false ;
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_INT 0
34436: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34437: LD_VAR 0 1
34441: NOT
34442: PUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL_OW 266
34452: PUSH
34453: LD_INT 32
34455: PUSH
34456: LD_INT 33
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: IN
34463: NOT
34464: OR
34465: IFFALSE 34469
// exit ;
34467: GO 35578
// nat := GetNation ( tower ) ;
34469: LD_ADDR_VAR 0 12
34473: PUSH
34474: LD_VAR 0 1
34478: PPUSH
34479: CALL_OW 248
34483: ST_TO_ADDR
// side := GetSide ( tower ) ;
34484: LD_ADDR_VAR 0 16
34488: PUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 255
34498: ST_TO_ADDR
// x := GetX ( tower ) ;
34499: LD_ADDR_VAR 0 10
34503: PUSH
34504: LD_VAR 0 1
34508: PPUSH
34509: CALL_OW 250
34513: ST_TO_ADDR
// y := GetY ( tower ) ;
34514: LD_ADDR_VAR 0 11
34518: PUSH
34519: LD_VAR 0 1
34523: PPUSH
34524: CALL_OW 251
34528: ST_TO_ADDR
// if not x or not y then
34529: LD_VAR 0 10
34533: NOT
34534: PUSH
34535: LD_VAR 0 11
34539: NOT
34540: OR
34541: IFFALSE 34545
// exit ;
34543: GO 35578
// weapon := 0 ;
34545: LD_ADDR_VAR 0 18
34549: PUSH
34550: LD_INT 0
34552: ST_TO_ADDR
// fac_list := [ ] ;
34553: LD_ADDR_VAR 0 17
34557: PUSH
34558: EMPTY
34559: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34560: LD_ADDR_VAR 0 6
34564: PUSH
34565: LD_VAR 0 1
34569: PPUSH
34570: CALL_OW 274
34574: PPUSH
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_INT 0
34582: PPUSH
34583: CALL 32149 0 3
34587: PPUSH
34588: LD_INT 30
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PPUSH
34598: CALL_OW 72
34602: ST_TO_ADDR
// if not factories then
34603: LD_VAR 0 6
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 35578
// for i in factories do
34612: LD_ADDR_VAR 0 8
34616: PUSH
34617: LD_VAR 0 6
34621: PUSH
34622: FOR_IN
34623: IFFALSE 34648
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34625: LD_ADDR_VAR 0 17
34629: PUSH
34630: LD_VAR 0 17
34634: PUSH
34635: LD_VAR 0 8
34639: PPUSH
34640: CALL_OW 478
34644: UNION
34645: ST_TO_ADDR
34646: GO 34622
34648: POP
34649: POP
// if not fac_list then
34650: LD_VAR 0 17
34654: NOT
34655: IFFALSE 34659
// exit ;
34657: GO 35578
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34659: LD_ADDR_VAR 0 5
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: LD_INT 9
34672: PUSH
34673: LD_INT 10
34675: PUSH
34676: LD_INT 6
34678: PUSH
34679: LD_INT 7
34681: PUSH
34682: LD_INT 11
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 27
34696: PUSH
34697: LD_INT 28
34699: PUSH
34700: LD_INT 26
34702: PUSH
34703: LD_INT 30
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 43
34714: PUSH
34715: LD_INT 44
34717: PUSH
34718: LD_INT 46
34720: PUSH
34721: LD_INT 45
34723: PUSH
34724: LD_INT 47
34726: PUSH
34727: LD_INT 49
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: PUSH
34743: LD_VAR 0 12
34747: ARRAY
34748: ST_TO_ADDR
// list := list isect fac_list ;
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: LD_VAR 0 5
34758: PUSH
34759: LD_VAR 0 17
34763: ISECT
34764: ST_TO_ADDR
// if not list then
34765: LD_VAR 0 5
34769: NOT
34770: IFFALSE 34774
// exit ;
34772: GO 35578
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34774: LD_VAR 0 12
34778: PUSH
34779: LD_INT 3
34781: EQUAL
34782: PUSH
34783: LD_INT 49
34785: PUSH
34786: LD_VAR 0 5
34790: IN
34791: AND
34792: PUSH
34793: LD_INT 31
34795: PPUSH
34796: LD_VAR 0 16
34800: PPUSH
34801: CALL_OW 321
34805: PUSH
34806: LD_INT 2
34808: EQUAL
34809: AND
34810: IFFALSE 34870
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34812: LD_INT 22
34814: PUSH
34815: LD_VAR 0 16
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 35
34826: PUSH
34827: LD_INT 49
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 91
34836: PUSH
34837: LD_VAR 0 1
34841: PUSH
34842: LD_INT 10
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: PPUSH
34855: CALL_OW 69
34859: NOT
34860: IFFALSE 34870
// weapon := ru_time_lapser ;
34862: LD_ADDR_VAR 0 18
34866: PUSH
34867: LD_INT 49
34869: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34870: LD_VAR 0 12
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: IN
34885: PUSH
34886: LD_INT 11
34888: PUSH
34889: LD_VAR 0 5
34893: IN
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_VAR 0 5
34902: IN
34903: OR
34904: AND
34905: PUSH
34906: LD_INT 6
34908: PPUSH
34909: LD_VAR 0 16
34913: PPUSH
34914: CALL_OW 321
34918: PUSH
34919: LD_INT 2
34921: EQUAL
34922: AND
34923: IFFALSE 35088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34925: LD_INT 22
34927: PUSH
34928: LD_VAR 0 16
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 35
34942: PUSH
34943: LD_INT 11
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 35
34952: PUSH
34953: LD_INT 30
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 91
34967: PUSH
34968: LD_VAR 0 1
34972: PUSH
34973: LD_INT 18
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 69
34990: NOT
34991: PUSH
34992: LD_INT 22
34994: PUSH
34995: LD_VAR 0 16
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 30
35009: PUSH
35010: LD_INT 32
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 30
35019: PUSH
35020: LD_INT 33
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 91
35034: PUSH
35035: LD_VAR 0 1
35039: PUSH
35040: LD_INT 12
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: PPUSH
35056: CALL_OW 69
35060: PUSH
35061: LD_INT 2
35063: GREATER
35064: AND
35065: IFFALSE 35088
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35067: LD_ADDR_VAR 0 18
35071: PUSH
35072: LD_INT 11
35074: PUSH
35075: LD_INT 30
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_VAR 0 12
35086: ARRAY
35087: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35088: LD_VAR 0 18
35092: NOT
35093: PUSH
35094: LD_INT 40
35096: PPUSH
35097: LD_VAR 0 16
35101: PPUSH
35102: CALL_OW 321
35106: PUSH
35107: LD_INT 2
35109: EQUAL
35110: AND
35111: PUSH
35112: LD_INT 7
35114: PUSH
35115: LD_VAR 0 5
35119: IN
35120: PUSH
35121: LD_INT 28
35123: PUSH
35124: LD_VAR 0 5
35128: IN
35129: OR
35130: PUSH
35131: LD_INT 45
35133: PUSH
35134: LD_VAR 0 5
35138: IN
35139: OR
35140: AND
35141: IFFALSE 35395
// begin hex := GetHexInfo ( x , y ) ;
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: LD_VAR 0 10
35152: PPUSH
35153: LD_VAR 0 11
35157: PPUSH
35158: CALL_OW 546
35162: ST_TO_ADDR
// if hex [ 1 ] then
35163: LD_VAR 0 4
35167: PUSH
35168: LD_INT 1
35170: ARRAY
35171: IFFALSE 35175
// exit ;
35173: GO 35578
// height := hex [ 2 ] ;
35175: LD_ADDR_VAR 0 15
35179: PUSH
35180: LD_VAR 0 4
35184: PUSH
35185: LD_INT 2
35187: ARRAY
35188: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35189: LD_ADDR_VAR 0 14
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 5
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// for i in tmp do
35212: LD_ADDR_VAR 0 8
35216: PUSH
35217: LD_VAR 0 14
35221: PUSH
35222: FOR_IN
35223: IFFALSE 35393
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35225: LD_ADDR_VAR 0 9
35229: PUSH
35230: LD_VAR 0 10
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 5
35242: PPUSH
35243: CALL_OW 272
35247: PUSH
35248: LD_VAR 0 11
35252: PPUSH
35253: LD_VAR 0 8
35257: PPUSH
35258: LD_INT 5
35260: PPUSH
35261: CALL_OW 273
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35270: LD_VAR 0 9
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PPUSH
35279: LD_VAR 0 9
35283: PUSH
35284: LD_INT 2
35286: ARRAY
35287: PPUSH
35288: CALL_OW 488
35292: IFFALSE 35391
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35294: LD_ADDR_VAR 0 4
35298: PUSH
35299: LD_VAR 0 9
35303: PUSH
35304: LD_INT 1
35306: ARRAY
35307: PPUSH
35308: LD_VAR 0 9
35312: PUSH
35313: LD_INT 2
35315: ARRAY
35316: PPUSH
35317: CALL_OW 546
35321: ST_TO_ADDR
// if hex [ 1 ] then
35322: LD_VAR 0 4
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: IFFALSE 35334
// continue ;
35332: GO 35222
// h := hex [ 2 ] ;
35334: LD_ADDR_VAR 0 13
35338: PUSH
35339: LD_VAR 0 4
35343: PUSH
35344: LD_INT 2
35346: ARRAY
35347: ST_TO_ADDR
// if h + 7 < height then
35348: LD_VAR 0 13
35352: PUSH
35353: LD_INT 7
35355: PLUS
35356: PUSH
35357: LD_VAR 0 15
35361: LESS
35362: IFFALSE 35391
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35364: LD_ADDR_VAR 0 18
35368: PUSH
35369: LD_INT 7
35371: PUSH
35372: LD_INT 28
35374: PUSH
35375: LD_INT 45
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: LD_VAR 0 12
35387: ARRAY
35388: ST_TO_ADDR
// break ;
35389: GO 35393
// end ; end ; end ;
35391: GO 35222
35393: POP
35394: POP
// end ; if not weapon then
35395: LD_VAR 0 18
35399: NOT
35400: IFFALSE 35460
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35402: LD_ADDR_VAR 0 5
35406: PUSH
35407: LD_VAR 0 5
35411: PUSH
35412: LD_INT 11
35414: PUSH
35415: LD_INT 30
35417: PUSH
35418: LD_INT 49
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: DIFF
35426: ST_TO_ADDR
// if not list then
35427: LD_VAR 0 5
35431: NOT
35432: IFFALSE 35436
// exit ;
35434: GO 35578
// weapon := list [ rand ( 1 , list ) ] ;
35436: LD_ADDR_VAR 0 18
35440: PUSH
35441: LD_VAR 0 5
35445: PUSH
35446: LD_INT 1
35448: PPUSH
35449: LD_VAR 0 5
35453: PPUSH
35454: CALL_OW 12
35458: ARRAY
35459: ST_TO_ADDR
// end ; if weapon then
35460: LD_VAR 0 18
35464: IFFALSE 35578
// begin tmp := CostOfWeapon ( weapon ) ;
35466: LD_ADDR_VAR 0 14
35470: PUSH
35471: LD_VAR 0 18
35475: PPUSH
35476: CALL_OW 451
35480: ST_TO_ADDR
// j := GetBase ( tower ) ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 274
35495: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35496: LD_VAR 0 9
35500: PPUSH
35501: LD_INT 1
35503: PPUSH
35504: CALL_OW 275
35508: PUSH
35509: LD_VAR 0 14
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: GREATEREQUAL
35518: PUSH
35519: LD_VAR 0 9
35523: PPUSH
35524: LD_INT 2
35526: PPUSH
35527: CALL_OW 275
35531: PUSH
35532: LD_VAR 0 14
35536: PUSH
35537: LD_INT 2
35539: ARRAY
35540: GREATEREQUAL
35541: AND
35542: PUSH
35543: LD_VAR 0 9
35547: PPUSH
35548: LD_INT 3
35550: PPUSH
35551: CALL_OW 275
35555: PUSH
35556: LD_VAR 0 14
35560: PUSH
35561: LD_INT 3
35563: ARRAY
35564: GREATEREQUAL
35565: AND
35566: IFFALSE 35578
// result := weapon ;
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_VAR 0 18
35577: ST_TO_ADDR
// end ; end ;
35578: LD_VAR 0 3
35582: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35583: LD_INT 0
35585: PPUSH
35586: PPUSH
// result := true ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 1
35594: ST_TO_ADDR
// if array1 = array2 then
35595: LD_VAR 0 1
35599: PUSH
35600: LD_VAR 0 2
35604: EQUAL
35605: IFFALSE 35665
// begin for i = 1 to array1 do
35607: LD_ADDR_VAR 0 4
35611: PUSH
35612: DOUBLE
35613: LD_INT 1
35615: DEC
35616: ST_TO_ADDR
35617: LD_VAR 0 1
35621: PUSH
35622: FOR_TO
35623: IFFALSE 35661
// if array1 [ i ] <> array2 [ i ] then
35625: LD_VAR 0 1
35629: PUSH
35630: LD_VAR 0 4
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 2
35640: PUSH
35641: LD_VAR 0 4
35645: ARRAY
35646: NONEQUAL
35647: IFFALSE 35659
// begin result := false ;
35649: LD_ADDR_VAR 0 3
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
// break ;
35657: GO 35661
// end ;
35659: GO 35622
35661: POP
35662: POP
// end else
35663: GO 35673
// result := false ;
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// end ;
35673: LD_VAR 0 3
35677: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35678: LD_INT 0
35680: PPUSH
35681: PPUSH
// if not array1 or not array2 then
35682: LD_VAR 0 1
35686: NOT
35687: PUSH
35688: LD_VAR 0 2
35692: NOT
35693: OR
35694: IFFALSE 35698
// exit ;
35696: GO 35762
// result := true ;
35698: LD_ADDR_VAR 0 3
35702: PUSH
35703: LD_INT 1
35705: ST_TO_ADDR
// for i = 1 to array1 do
35706: LD_ADDR_VAR 0 4
35710: PUSH
35711: DOUBLE
35712: LD_INT 1
35714: DEC
35715: ST_TO_ADDR
35716: LD_VAR 0 1
35720: PUSH
35721: FOR_TO
35722: IFFALSE 35760
// if array1 [ i ] <> array2 [ i ] then
35724: LD_VAR 0 1
35728: PUSH
35729: LD_VAR 0 4
35733: ARRAY
35734: PUSH
35735: LD_VAR 0 2
35739: PUSH
35740: LD_VAR 0 4
35744: ARRAY
35745: NONEQUAL
35746: IFFALSE 35758
// begin result := false ;
35748: LD_ADDR_VAR 0 3
35752: PUSH
35753: LD_INT 0
35755: ST_TO_ADDR
// break ;
35756: GO 35760
// end ;
35758: GO 35721
35760: POP
35761: POP
// end ;
35762: LD_VAR 0 3
35766: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35767: LD_INT 0
35769: PPUSH
35770: PPUSH
35771: PPUSH
// pom := GetBase ( fac ) ;
35772: LD_ADDR_VAR 0 5
35776: PUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 274
35786: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35787: LD_ADDR_VAR 0 4
35791: PUSH
35792: LD_VAR 0 2
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: PPUSH
35801: LD_VAR 0 2
35805: PUSH
35806: LD_INT 2
35808: ARRAY
35809: PPUSH
35810: LD_VAR 0 2
35814: PUSH
35815: LD_INT 3
35817: ARRAY
35818: PPUSH
35819: LD_VAR 0 2
35823: PUSH
35824: LD_INT 4
35826: ARRAY
35827: PPUSH
35828: CALL_OW 449
35832: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35833: LD_ADDR_VAR 0 3
35837: PUSH
35838: LD_VAR 0 5
35842: PPUSH
35843: LD_INT 1
35845: PPUSH
35846: CALL_OW 275
35850: PUSH
35851: LD_VAR 0 4
35855: PUSH
35856: LD_INT 1
35858: ARRAY
35859: GREATEREQUAL
35860: PUSH
35861: LD_VAR 0 5
35865: PPUSH
35866: LD_INT 2
35868: PPUSH
35869: CALL_OW 275
35873: PUSH
35874: LD_VAR 0 4
35878: PUSH
35879: LD_INT 2
35881: ARRAY
35882: GREATEREQUAL
35883: AND
35884: PUSH
35885: LD_VAR 0 5
35889: PPUSH
35890: LD_INT 3
35892: PPUSH
35893: CALL_OW 275
35897: PUSH
35898: LD_VAR 0 4
35902: PUSH
35903: LD_INT 3
35905: ARRAY
35906: GREATEREQUAL
35907: AND
35908: ST_TO_ADDR
// end ;
35909: LD_VAR 0 3
35913: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35914: LD_INT 0
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
// pom := GetBase ( building ) ;
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 274
35934: ST_TO_ADDR
// if not pom then
35935: LD_VAR 0 3
35939: NOT
35940: IFFALSE 35944
// exit ;
35942: GO 36114
// btype := GetBType ( building ) ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 1
35953: PPUSH
35954: CALL_OW 266
35958: ST_TO_ADDR
// if btype = b_armoury then
35959: LD_VAR 0 5
35963: PUSH
35964: LD_INT 4
35966: EQUAL
35967: IFFALSE 35977
// btype := b_barracks ;
35969: LD_ADDR_VAR 0 5
35973: PUSH
35974: LD_INT 5
35976: ST_TO_ADDR
// if btype = b_depot then
35977: LD_VAR 0 5
35981: PUSH
35982: LD_INT 0
35984: EQUAL
35985: IFFALSE 35995
// btype := b_warehouse ;
35987: LD_ADDR_VAR 0 5
35991: PUSH
35992: LD_INT 1
35994: ST_TO_ADDR
// if btype = b_workshop then
35995: LD_VAR 0 5
35999: PUSH
36000: LD_INT 2
36002: EQUAL
36003: IFFALSE 36013
// btype := b_factory ;
36005: LD_ADDR_VAR 0 5
36009: PUSH
36010: LD_INT 3
36012: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36013: LD_ADDR_VAR 0 4
36017: PUSH
36018: LD_VAR 0 5
36022: PPUSH
36023: LD_VAR 0 1
36027: PPUSH
36028: CALL_OW 248
36032: PPUSH
36033: CALL_OW 450
36037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36038: LD_ADDR_VAR 0 2
36042: PUSH
36043: LD_VAR 0 3
36047: PPUSH
36048: LD_INT 1
36050: PPUSH
36051: CALL_OW 275
36055: PUSH
36056: LD_VAR 0 4
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: GREATEREQUAL
36065: PUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: LD_INT 2
36073: PPUSH
36074: CALL_OW 275
36078: PUSH
36079: LD_VAR 0 4
36083: PUSH
36084: LD_INT 2
36086: ARRAY
36087: GREATEREQUAL
36088: AND
36089: PUSH
36090: LD_VAR 0 3
36094: PPUSH
36095: LD_INT 3
36097: PPUSH
36098: CALL_OW 275
36102: PUSH
36103: LD_VAR 0 4
36107: PUSH
36108: LD_INT 3
36110: ARRAY
36111: GREATEREQUAL
36112: AND
36113: ST_TO_ADDR
// end ;
36114: LD_VAR 0 2
36118: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36119: LD_INT 0
36121: PPUSH
36122: PPUSH
36123: PPUSH
// pom := GetBase ( building ) ;
36124: LD_ADDR_VAR 0 4
36128: PUSH
36129: LD_VAR 0 1
36133: PPUSH
36134: CALL_OW 274
36138: ST_TO_ADDR
// if not pom then
36139: LD_VAR 0 4
36143: NOT
36144: IFFALSE 36148
// exit ;
36146: GO 36249
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36148: LD_ADDR_VAR 0 5
36152: PUSH
36153: LD_VAR 0 2
36157: PPUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 248
36167: PPUSH
36168: CALL_OW 450
36172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_VAR 0 4
36182: PPUSH
36183: LD_INT 1
36185: PPUSH
36186: CALL_OW 275
36190: PUSH
36191: LD_VAR 0 5
36195: PUSH
36196: LD_INT 1
36198: ARRAY
36199: GREATEREQUAL
36200: PUSH
36201: LD_VAR 0 4
36205: PPUSH
36206: LD_INT 2
36208: PPUSH
36209: CALL_OW 275
36213: PUSH
36214: LD_VAR 0 5
36218: PUSH
36219: LD_INT 2
36221: ARRAY
36222: GREATEREQUAL
36223: AND
36224: PUSH
36225: LD_VAR 0 4
36229: PPUSH
36230: LD_INT 3
36232: PPUSH
36233: CALL_OW 275
36237: PUSH
36238: LD_VAR 0 5
36242: PUSH
36243: LD_INT 3
36245: ARRAY
36246: GREATEREQUAL
36247: AND
36248: ST_TO_ADDR
// end ;
36249: LD_VAR 0 3
36253: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36254: LD_INT 0
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
36265: PPUSH
36266: PPUSH
// result := false ;
36267: LD_ADDR_VAR 0 8
36271: PUSH
36272: LD_INT 0
36274: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36275: LD_VAR 0 5
36279: NOT
36280: PUSH
36281: LD_VAR 0 1
36285: NOT
36286: OR
36287: PUSH
36288: LD_VAR 0 2
36292: NOT
36293: OR
36294: PUSH
36295: LD_VAR 0 3
36299: NOT
36300: OR
36301: IFFALSE 36305
// exit ;
36303: GO 37119
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36305: LD_ADDR_VAR 0 14
36309: PUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 3
36324: PPUSH
36325: LD_VAR 0 4
36329: PPUSH
36330: LD_VAR 0 5
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PPUSH
36339: CALL_OW 248
36343: PPUSH
36344: LD_INT 0
36346: PPUSH
36347: CALL 38356 0 6
36351: ST_TO_ADDR
// if not hexes then
36352: LD_VAR 0 14
36356: NOT
36357: IFFALSE 36361
// exit ;
36359: GO 37119
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36361: LD_ADDR_VAR 0 17
36365: PUSH
36366: LD_VAR 0 5
36370: PPUSH
36371: LD_INT 22
36373: PUSH
36374: LD_VAR 0 13
36378: PPUSH
36379: CALL_OW 255
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: LD_INT 30
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 30
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PPUSH
36420: CALL_OW 72
36424: ST_TO_ADDR
// for i = 1 to hexes do
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: DOUBLE
36431: LD_INT 1
36433: DEC
36434: ST_TO_ADDR
36435: LD_VAR 0 14
36439: PUSH
36440: FOR_TO
36441: IFFALSE 37117
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36443: LD_ADDR_VAR 0 13
36447: PUSH
36448: LD_VAR 0 14
36452: PUSH
36453: LD_VAR 0 9
36457: ARRAY
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: PPUSH
36463: LD_VAR 0 14
36467: PUSH
36468: LD_VAR 0 9
36472: ARRAY
36473: PUSH
36474: LD_INT 2
36476: ARRAY
36477: PPUSH
36478: CALL_OW 428
36482: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36483: LD_VAR 0 14
36487: PUSH
36488: LD_VAR 0 9
36492: ARRAY
36493: PUSH
36494: LD_INT 1
36496: ARRAY
36497: PPUSH
36498: LD_VAR 0 14
36502: PUSH
36503: LD_VAR 0 9
36507: ARRAY
36508: PUSH
36509: LD_INT 2
36511: ARRAY
36512: PPUSH
36513: CALL_OW 351
36517: PUSH
36518: LD_VAR 0 14
36522: PUSH
36523: LD_VAR 0 9
36527: ARRAY
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: PPUSH
36533: LD_VAR 0 14
36537: PUSH
36538: LD_VAR 0 9
36542: ARRAY
36543: PUSH
36544: LD_INT 2
36546: ARRAY
36547: PPUSH
36548: CALL_OW 488
36552: NOT
36553: OR
36554: PUSH
36555: LD_VAR 0 13
36559: PPUSH
36560: CALL_OW 247
36564: PUSH
36565: LD_INT 3
36567: EQUAL
36568: OR
36569: IFFALSE 36575
// exit ;
36571: POP
36572: POP
36573: GO 37119
// if not tmp then
36575: LD_VAR 0 13
36579: NOT
36580: IFFALSE 36584
// continue ;
36582: GO 36440
// result := true ;
36584: LD_ADDR_VAR 0 8
36588: PUSH
36589: LD_INT 1
36591: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36592: LD_VAR 0 6
36596: PUSH
36597: LD_VAR 0 13
36601: PPUSH
36602: CALL_OW 247
36606: PUSH
36607: LD_INT 2
36609: EQUAL
36610: AND
36611: PUSH
36612: LD_VAR 0 13
36616: PPUSH
36617: CALL_OW 263
36621: PUSH
36622: LD_INT 1
36624: EQUAL
36625: AND
36626: IFFALSE 36790
// begin if IsDrivenBy ( tmp ) then
36628: LD_VAR 0 13
36632: PPUSH
36633: CALL_OW 311
36637: IFFALSE 36641
// continue ;
36639: GO 36440
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36641: LD_VAR 0 6
36645: PPUSH
36646: LD_INT 3
36648: PUSH
36649: LD_INT 60
36651: PUSH
36652: EMPTY
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 55
36664: PUSH
36665: EMPTY
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PPUSH
36676: CALL_OW 72
36680: IFFALSE 36788
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36682: LD_ADDR_VAR 0 18
36686: PUSH
36687: LD_VAR 0 6
36691: PPUSH
36692: LD_INT 3
36694: PUSH
36695: LD_INT 60
36697: PUSH
36698: EMPTY
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 3
36707: PUSH
36708: LD_INT 55
36710: PUSH
36711: EMPTY
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PPUSH
36722: CALL_OW 72
36726: PUSH
36727: LD_INT 1
36729: ARRAY
36730: ST_TO_ADDR
// if IsInUnit ( driver ) then
36731: LD_VAR 0 18
36735: PPUSH
36736: CALL_OW 310
36740: IFFALSE 36751
// ComExit ( driver ) ;
36742: LD_VAR 0 18
36746: PPUSH
36747: CALL 61540 0 1
// AddComEnterUnit ( driver , tmp ) ;
36751: LD_VAR 0 18
36755: PPUSH
36756: LD_VAR 0 13
36760: PPUSH
36761: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36765: LD_VAR 0 18
36769: PPUSH
36770: LD_VAR 0 7
36774: PPUSH
36775: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36779: LD_VAR 0 18
36783: PPUSH
36784: CALL_OW 181
// end ; continue ;
36788: GO 36440
// end ; if not cleaners or not tmp in cleaners then
36790: LD_VAR 0 6
36794: NOT
36795: PUSH
36796: LD_VAR 0 13
36800: PUSH
36801: LD_VAR 0 6
36805: IN
36806: NOT
36807: OR
36808: IFFALSE 37115
// begin if dep then
36810: LD_VAR 0 17
36814: IFFALSE 36950
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36816: LD_ADDR_VAR 0 16
36820: PUSH
36821: LD_VAR 0 17
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PPUSH
36830: CALL_OW 250
36834: PPUSH
36835: LD_VAR 0 17
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: CALL_OW 254
36848: PPUSH
36849: LD_INT 5
36851: PPUSH
36852: CALL_OW 272
36856: PUSH
36857: LD_VAR 0 17
36861: PUSH
36862: LD_INT 1
36864: ARRAY
36865: PPUSH
36866: CALL_OW 251
36870: PPUSH
36871: LD_VAR 0 17
36875: PUSH
36876: LD_INT 1
36878: ARRAY
36879: PPUSH
36880: CALL_OW 254
36884: PPUSH
36885: LD_INT 5
36887: PPUSH
36888: CALL_OW 273
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36897: LD_VAR 0 16
36901: PUSH
36902: LD_INT 1
36904: ARRAY
36905: PPUSH
36906: LD_VAR 0 16
36910: PUSH
36911: LD_INT 2
36913: ARRAY
36914: PPUSH
36915: CALL_OW 488
36919: IFFALSE 36950
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36921: LD_VAR 0 13
36925: PPUSH
36926: LD_VAR 0 16
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PPUSH
36935: LD_VAR 0 16
36939: PUSH
36940: LD_INT 2
36942: ARRAY
36943: PPUSH
36944: CALL_OW 111
// continue ;
36948: GO 36440
// end ; end ; r := GetDir ( tmp ) ;
36950: LD_ADDR_VAR 0 15
36954: PUSH
36955: LD_VAR 0 13
36959: PPUSH
36960: CALL_OW 254
36964: ST_TO_ADDR
// if r = 5 then
36965: LD_VAR 0 15
36969: PUSH
36970: LD_INT 5
36972: EQUAL
36973: IFFALSE 36983
// r := 0 ;
36975: LD_ADDR_VAR 0 15
36979: PUSH
36980: LD_INT 0
36982: ST_TO_ADDR
// for j = r to 5 do
36983: LD_ADDR_VAR 0 10
36987: PUSH
36988: DOUBLE
36989: LD_VAR 0 15
36993: DEC
36994: ST_TO_ADDR
36995: LD_INT 5
36997: PUSH
36998: FOR_TO
36999: IFFALSE 37113
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37001: LD_ADDR_VAR 0 11
37005: PUSH
37006: LD_VAR 0 13
37010: PPUSH
37011: CALL_OW 250
37015: PPUSH
37016: LD_VAR 0 10
37020: PPUSH
37021: LD_INT 2
37023: PPUSH
37024: CALL_OW 272
37028: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37029: LD_ADDR_VAR 0 12
37033: PUSH
37034: LD_VAR 0 13
37038: PPUSH
37039: CALL_OW 251
37043: PPUSH
37044: LD_VAR 0 10
37048: PPUSH
37049: LD_INT 2
37051: PPUSH
37052: CALL_OW 273
37056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37057: LD_VAR 0 11
37061: PPUSH
37062: LD_VAR 0 12
37066: PPUSH
37067: CALL_OW 488
37071: PUSH
37072: LD_VAR 0 11
37076: PPUSH
37077: LD_VAR 0 12
37081: PPUSH
37082: CALL_OW 428
37086: NOT
37087: AND
37088: IFFALSE 37111
// begin ComMoveXY ( tmp , _x , _y ) ;
37090: LD_VAR 0 13
37094: PPUSH
37095: LD_VAR 0 11
37099: PPUSH
37100: LD_VAR 0 12
37104: PPUSH
37105: CALL_OW 111
// break ;
37109: GO 37113
// end ; end ;
37111: GO 36998
37113: POP
37114: POP
// end ; end ;
37115: GO 36440
37117: POP
37118: POP
// end ;
37119: LD_VAR 0 8
37123: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37124: LD_INT 0
37126: PPUSH
// result := true ;
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: LD_INT 1
37134: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 24
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37154
37146: LD_INT 33
37148: DOUBLE
37149: EQUAL
37150: IFTRUE 37154
37152: GO 37179
37154: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37155: LD_ADDR_VAR 0 3
37159: PUSH
37160: LD_INT 32
37162: PPUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: CALL_OW 321
37172: PUSH
37173: LD_INT 2
37175: EQUAL
37176: ST_TO_ADDR
37177: GO 37499
37179: LD_INT 20
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37212
37187: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_INT 6
37195: PPUSH
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 321
37205: PUSH
37206: LD_INT 2
37208: EQUAL
37209: ST_TO_ADDR
37210: GO 37499
37212: LD_INT 22
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37226
37218: LD_INT 36
37220: DOUBLE
37221: EQUAL
37222: IFTRUE 37226
37224: GO 37251
37226: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37227: LD_ADDR_VAR 0 3
37231: PUSH
37232: LD_INT 15
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 321
37244: PUSH
37245: LD_INT 2
37247: EQUAL
37248: ST_TO_ADDR
37249: GO 37499
37251: LD_INT 30
37253: DOUBLE
37254: EQUAL
37255: IFTRUE 37259
37257: GO 37284
37259: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37260: LD_ADDR_VAR 0 3
37264: PUSH
37265: LD_INT 20
37267: PPUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 321
37277: PUSH
37278: LD_INT 2
37280: EQUAL
37281: ST_TO_ADDR
37282: GO 37499
37284: LD_INT 28
37286: DOUBLE
37287: EQUAL
37288: IFTRUE 37298
37290: LD_INT 21
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37298
37296: GO 37323
37298: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37299: LD_ADDR_VAR 0 3
37303: PUSH
37304: LD_INT 21
37306: PPUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 321
37316: PUSH
37317: LD_INT 2
37319: EQUAL
37320: ST_TO_ADDR
37321: GO 37499
37323: LD_INT 16
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37358
37331: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_EXP 109
37341: PPUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 321
37351: PUSH
37352: LD_INT 2
37354: EQUAL
37355: ST_TO_ADDR
37356: GO 37499
37358: LD_INT 19
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37372
37364: LD_INT 23
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 37399
37372: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_EXP 108
37382: PPUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 321
37392: PUSH
37393: LD_INT 2
37395: EQUAL
37396: ST_TO_ADDR
37397: GO 37499
37399: LD_INT 17
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37432
37407: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37408: LD_ADDR_VAR 0 3
37412: PUSH
37413: LD_INT 39
37415: PPUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 321
37425: PUSH
37426: LD_INT 2
37428: EQUAL
37429: ST_TO_ADDR
37430: GO 37499
37432: LD_INT 18
37434: DOUBLE
37435: EQUAL
37436: IFTRUE 37440
37438: GO 37465
37440: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37441: LD_ADDR_VAR 0 3
37445: PUSH
37446: LD_INT 40
37448: PPUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: CALL_OW 321
37458: PUSH
37459: LD_INT 2
37461: EQUAL
37462: ST_TO_ADDR
37463: GO 37499
37465: LD_INT 27
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 37498
37473: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_INT 35
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 321
37491: PUSH
37492: LD_INT 2
37494: EQUAL
37495: ST_TO_ADDR
37496: GO 37499
37498: POP
// end ;
37499: LD_VAR 0 3
37503: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37504: LD_INT 0
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
// result := false ;
37517: LD_ADDR_VAR 0 6
37521: PUSH
37522: LD_INT 0
37524: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37525: LD_VAR 0 1
37529: NOT
37530: PUSH
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 266
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: IN
37551: NOT
37552: OR
37553: PUSH
37554: LD_VAR 0 2
37558: NOT
37559: OR
37560: PUSH
37561: LD_VAR 0 5
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: IN
37592: NOT
37593: OR
37594: PUSH
37595: LD_VAR 0 3
37599: PPUSH
37600: LD_VAR 0 4
37604: PPUSH
37605: CALL_OW 488
37609: NOT
37610: OR
37611: IFFALSE 37615
// exit ;
37613: GO 38351
// side := GetSide ( depot ) ;
37615: LD_ADDR_VAR 0 9
37619: PUSH
37620: LD_VAR 0 1
37624: PPUSH
37625: CALL_OW 255
37629: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37630: LD_VAR 0 9
37634: PPUSH
37635: LD_VAR 0 2
37639: PPUSH
37640: CALL 37124 0 2
37644: NOT
37645: IFFALSE 37649
// exit ;
37647: GO 38351
// pom := GetBase ( depot ) ;
37649: LD_ADDR_VAR 0 10
37653: PUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 274
37663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37664: LD_ADDR_VAR 0 11
37668: PUSH
37669: LD_VAR 0 2
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 248
37683: PPUSH
37684: CALL_OW 450
37688: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37689: LD_VAR 0 10
37693: PPUSH
37694: LD_INT 1
37696: PPUSH
37697: CALL_OW 275
37701: PUSH
37702: LD_VAR 0 11
37706: PUSH
37707: LD_INT 1
37709: ARRAY
37710: GREATEREQUAL
37711: PUSH
37712: LD_VAR 0 10
37716: PPUSH
37717: LD_INT 2
37719: PPUSH
37720: CALL_OW 275
37724: PUSH
37725: LD_VAR 0 11
37729: PUSH
37730: LD_INT 2
37732: ARRAY
37733: GREATEREQUAL
37734: AND
37735: PUSH
37736: LD_VAR 0 10
37740: PPUSH
37741: LD_INT 3
37743: PPUSH
37744: CALL_OW 275
37748: PUSH
37749: LD_VAR 0 11
37753: PUSH
37754: LD_INT 3
37756: ARRAY
37757: GREATEREQUAL
37758: AND
37759: NOT
37760: IFFALSE 37764
// exit ;
37762: GO 38351
// if GetBType ( depot ) = b_depot then
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 266
37773: PUSH
37774: LD_INT 0
37776: EQUAL
37777: IFFALSE 37789
// dist := 28 else
37779: LD_ADDR_VAR 0 14
37783: PUSH
37784: LD_INT 28
37786: ST_TO_ADDR
37787: GO 37797
// dist := 36 ;
37789: LD_ADDR_VAR 0 14
37793: PUSH
37794: LD_INT 36
37796: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37797: LD_VAR 0 1
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: LD_VAR 0 4
37811: PPUSH
37812: CALL_OW 297
37816: PUSH
37817: LD_VAR 0 14
37821: GREATER
37822: IFFALSE 37826
// exit ;
37824: GO 38351
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37826: LD_ADDR_VAR 0 12
37830: PUSH
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 3
37840: PPUSH
37841: LD_VAR 0 4
37845: PPUSH
37846: LD_VAR 0 5
37850: PPUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL_OW 248
37860: PPUSH
37861: LD_INT 0
37863: PPUSH
37864: CALL 38356 0 6
37868: ST_TO_ADDR
// if not hexes then
37869: LD_VAR 0 12
37873: NOT
37874: IFFALSE 37878
// exit ;
37876: GO 38351
// hex := GetHexInfo ( x , y ) ;
37878: LD_ADDR_VAR 0 15
37882: PUSH
37883: LD_VAR 0 3
37887: PPUSH
37888: LD_VAR 0 4
37892: PPUSH
37893: CALL_OW 546
37897: ST_TO_ADDR
// if hex [ 1 ] then
37898: LD_VAR 0 15
37902: PUSH
37903: LD_INT 1
37905: ARRAY
37906: IFFALSE 37910
// exit ;
37908: GO 38351
// height := hex [ 2 ] ;
37910: LD_ADDR_VAR 0 13
37914: PUSH
37915: LD_VAR 0 15
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: ST_TO_ADDR
// for i = 1 to hexes do
37924: LD_ADDR_VAR 0 7
37928: PUSH
37929: DOUBLE
37930: LD_INT 1
37932: DEC
37933: ST_TO_ADDR
37934: LD_VAR 0 12
37938: PUSH
37939: FOR_TO
37940: IFFALSE 38270
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37942: LD_VAR 0 12
37946: PUSH
37947: LD_VAR 0 7
37951: ARRAY
37952: PUSH
37953: LD_INT 1
37955: ARRAY
37956: PPUSH
37957: LD_VAR 0 12
37961: PUSH
37962: LD_VAR 0 7
37966: ARRAY
37967: PUSH
37968: LD_INT 2
37970: ARRAY
37971: PPUSH
37972: CALL_OW 488
37976: NOT
37977: PUSH
37978: LD_VAR 0 12
37982: PUSH
37983: LD_VAR 0 7
37987: ARRAY
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PPUSH
37993: LD_VAR 0 12
37997: PUSH
37998: LD_VAR 0 7
38002: ARRAY
38003: PUSH
38004: LD_INT 2
38006: ARRAY
38007: PPUSH
38008: CALL_OW 428
38012: PUSH
38013: LD_INT 0
38015: GREATER
38016: OR
38017: PUSH
38018: LD_VAR 0 12
38022: PUSH
38023: LD_VAR 0 7
38027: ARRAY
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: PPUSH
38033: LD_VAR 0 12
38037: PUSH
38038: LD_VAR 0 7
38042: ARRAY
38043: PUSH
38044: LD_INT 2
38046: ARRAY
38047: PPUSH
38048: CALL_OW 351
38052: OR
38053: IFFALSE 38059
// exit ;
38055: POP
38056: POP
38057: GO 38351
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38059: LD_ADDR_VAR 0 8
38063: PUSH
38064: LD_VAR 0 12
38068: PUSH
38069: LD_VAR 0 7
38073: ARRAY
38074: PUSH
38075: LD_INT 1
38077: ARRAY
38078: PPUSH
38079: LD_VAR 0 12
38083: PUSH
38084: LD_VAR 0 7
38088: ARRAY
38089: PUSH
38090: LD_INT 2
38092: ARRAY
38093: PPUSH
38094: CALL_OW 546
38098: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38099: LD_VAR 0 8
38103: PUSH
38104: LD_INT 1
38106: ARRAY
38107: PUSH
38108: LD_VAR 0 8
38112: PUSH
38113: LD_INT 2
38115: ARRAY
38116: PUSH
38117: LD_VAR 0 13
38121: PUSH
38122: LD_INT 2
38124: PLUS
38125: GREATER
38126: OR
38127: PUSH
38128: LD_VAR 0 8
38132: PUSH
38133: LD_INT 2
38135: ARRAY
38136: PUSH
38137: LD_VAR 0 13
38141: PUSH
38142: LD_INT 2
38144: MINUS
38145: LESS
38146: OR
38147: PUSH
38148: LD_VAR 0 8
38152: PUSH
38153: LD_INT 3
38155: ARRAY
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 8
38162: PUSH
38163: LD_INT 9
38165: PUSH
38166: LD_INT 10
38168: PUSH
38169: LD_INT 11
38171: PUSH
38172: LD_INT 12
38174: PUSH
38175: LD_INT 13
38177: PUSH
38178: LD_INT 16
38180: PUSH
38181: LD_INT 17
38183: PUSH
38184: LD_INT 18
38186: PUSH
38187: LD_INT 19
38189: PUSH
38190: LD_INT 20
38192: PUSH
38193: LD_INT 21
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: IN
38211: NOT
38212: OR
38213: PUSH
38214: LD_VAR 0 8
38218: PUSH
38219: LD_INT 5
38221: ARRAY
38222: NOT
38223: OR
38224: PUSH
38225: LD_VAR 0 8
38229: PUSH
38230: LD_INT 6
38232: ARRAY
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 7
38242: PUSH
38243: LD_INT 9
38245: PUSH
38246: LD_INT 10
38248: PUSH
38249: LD_INT 11
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: IN
38260: NOT
38261: OR
38262: IFFALSE 38268
// exit ;
38264: POP
38265: POP
38266: GO 38351
// end ;
38268: GO 37939
38270: POP
38271: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38272: LD_VAR 0 9
38276: PPUSH
38277: LD_VAR 0 3
38281: PPUSH
38282: LD_VAR 0 4
38286: PPUSH
38287: LD_INT 20
38289: PPUSH
38290: CALL 30297 0 4
38294: PUSH
38295: LD_INT 4
38297: ARRAY
38298: IFFALSE 38302
// exit ;
38300: GO 38351
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38302: LD_VAR 0 2
38306: PUSH
38307: LD_INT 29
38309: PUSH
38310: LD_INT 30
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: IN
38317: PUSH
38318: LD_VAR 0 3
38322: PPUSH
38323: LD_VAR 0 4
38327: PPUSH
38328: LD_VAR 0 9
38332: PPUSH
38333: CALL_OW 440
38337: NOT
38338: AND
38339: IFFALSE 38343
// exit ;
38341: GO 38351
// result := true ;
38343: LD_ADDR_VAR 0 6
38347: PUSH
38348: LD_INT 1
38350: ST_TO_ADDR
// end ;
38351: LD_VAR 0 6
38355: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38356: LD_INT 0
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
// result = [ ] ;
38416: LD_ADDR_VAR 0 7
38420: PUSH
38421: EMPTY
38422: ST_TO_ADDR
// temp_list = [ ] ;
38423: LD_ADDR_VAR 0 9
38427: PUSH
38428: EMPTY
38429: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38430: LD_VAR 0 4
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 3
38446: PUSH
38447: LD_INT 4
38449: PUSH
38450: LD_INT 5
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: IN
38461: NOT
38462: PUSH
38463: LD_VAR 0 1
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: IN
38478: PUSH
38479: LD_VAR 0 5
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: IN
38498: NOT
38499: AND
38500: OR
38501: IFFALSE 38505
// exit ;
38503: GO 56896
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38505: LD_VAR 0 1
38509: PUSH
38510: LD_INT 6
38512: PUSH
38513: LD_INT 7
38515: PUSH
38516: LD_INT 8
38518: PUSH
38519: LD_INT 13
38521: PUSH
38522: LD_INT 12
38524: PUSH
38525: LD_INT 15
38527: PUSH
38528: LD_INT 11
38530: PUSH
38531: LD_INT 14
38533: PUSH
38534: LD_INT 10
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: IN
38548: IFFALSE 38558
// btype = b_lab ;
38550: LD_ADDR_VAR 0 1
38554: PUSH
38555: LD_INT 6
38557: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38558: LD_VAR 0 6
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: IN
38577: NOT
38578: PUSH
38579: LD_VAR 0 1
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: LD_INT 6
38598: PUSH
38599: LD_INT 36
38601: PUSH
38602: LD_INT 4
38604: PUSH
38605: LD_INT 5
38607: PUSH
38608: LD_INT 31
38610: PUSH
38611: LD_INT 32
38613: PUSH
38614: LD_INT 33
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: IN
38630: NOT
38631: PUSH
38632: LD_VAR 0 6
38636: PUSH
38637: LD_INT 1
38639: EQUAL
38640: AND
38641: OR
38642: PUSH
38643: LD_VAR 0 1
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: IN
38658: NOT
38659: PUSH
38660: LD_VAR 0 6
38664: PUSH
38665: LD_INT 2
38667: EQUAL
38668: AND
38669: OR
38670: IFFALSE 38680
// mode = 0 ;
38672: LD_ADDR_VAR 0 6
38676: PUSH
38677: LD_INT 0
38679: ST_TO_ADDR
// case mode of 0 :
38680: LD_VAR 0 6
38684: PUSH
38685: LD_INT 0
38687: DOUBLE
38688: EQUAL
38689: IFTRUE 38693
38691: GO 50146
38693: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38694: LD_ADDR_VAR 0 11
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38887: LD_ADDR_VAR 0 12
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: NEG
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 3
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39083: LD_ADDR_VAR 0 13
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39282: LD_ADDR_VAR 0 14
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39478: LD_ADDR_VAR 0 15
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39671: LD_ADDR_VAR 0 16
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 3
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39864: LD_ADDR_VAR 0 17
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40094: LD_ADDR_VAR 0 18
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40324: LD_ADDR_VAR 0 19
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40554: LD_ADDR_VAR 0 20
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40784: LD_ADDR_VAR 0 21
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41014: LD_ADDR_VAR 0 22
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41244: LD_ADDR_VAR 0 23
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 3
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: LD_INT 3
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41524: LD_ADDR_VAR 0 24
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41800: LD_ADDR_VAR 0 25
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42074: LD_ADDR_VAR 0 26
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42350: LD_ADDR_VAR 0 27
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: NEG
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42630: LD_ADDR_VAR 0 28
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 3
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42912: LD_ADDR_VAR 0 29
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43191: LD_ADDR_VAR 0 30
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43469: LD_ADDR_VAR 0 31
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 3
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43747: LD_ADDR_VAR 0 32
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44025: LD_ADDR_VAR 0 33
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44304: LD_ADDR_VAR 0 34
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44584: LD_ADDR_VAR 0 35
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44696: LD_ADDR_VAR 0 36
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44808: LD_ADDR_VAR 0 37
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44920: LD_ADDR_VAR 0 38
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45032: LD_ADDR_VAR 0 39
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45144: LD_ADDR_VAR 0 40
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45256: LD_ADDR_VAR 0 41
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 3
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 3
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 3
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45606: LD_ADDR_VAR 0 42
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: LD_INT 3
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45956: LD_ADDR_VAR 0 43
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46304: LD_ADDR_VAR 0 44
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46654: LD_ADDR_VAR 0 45
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47004: LD_ADDR_VAR 0 46
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 3
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47352: LD_ADDR_VAR 0 47
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47503: LD_ADDR_VAR 0 48
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47650: LD_ADDR_VAR 0 49
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47794: LD_ADDR_VAR 0 50
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47938: LD_ADDR_VAR 0 51
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48085: LD_ADDR_VAR 0 52
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48236: LD_ADDR_VAR 0 53
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48466: LD_ADDR_VAR 0 54
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48696: LD_ADDR_VAR 0 55
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48926: LD_ADDR_VAR 0 56
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49156: LD_ADDR_VAR 0 57
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49386: LD_ADDR_VAR 0 58
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49616: LD_ADDR_VAR 0 59
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49704: LD_ADDR_VAR 0 60
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49792: LD_ADDR_VAR 0 61
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49880: LD_ADDR_VAR 0 62
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49968: LD_ADDR_VAR 0 63
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50056: LD_ADDR_VAR 0 64
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// end ; 1 :
50144: GO 56041
50146: LD_INT 1
50148: DOUBLE
50149: EQUAL
50150: IFTRUE 50154
50152: GO 52777
50154: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50155: LD_ADDR_VAR 0 11
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50199: LD_ADDR_VAR 0 12
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50240: LD_ADDR_VAR 0 13
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50280: LD_ADDR_VAR 0 14
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50321: LD_ADDR_VAR 0 15
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50365: LD_ADDR_VAR 0 16
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50411: LD_ADDR_VAR 0 17
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50455: LD_ADDR_VAR 0 18
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50496: LD_ADDR_VAR 0 19
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 3
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50536: LD_ADDR_VAR 0 20
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50577: LD_ADDR_VAR 0 21
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50621: LD_ADDR_VAR 0 22
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50667: LD_ADDR_VAR 0 23
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 4
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50711: LD_ADDR_VAR 0 24
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 4
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50752: LD_ADDR_VAR 0 25
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 4
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 4
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50792: LD_ADDR_VAR 0 26
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50833: LD_ADDR_VAR 0 27
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50877: LD_ADDR_VAR 0 28
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: LD_INT 4
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 4
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50923: LD_ADDR_VAR 0 29
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 4
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 5
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 5
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 4
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 6
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 6
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 5
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51078: LD_ADDR_VAR 0 30
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 5
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 6
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 6
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51221: LD_ADDR_VAR 0 31
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: LD_INT 4
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: LD_INT 4
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 5
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 4
51308: PUSH
51309: LD_INT 5
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 6
51318: PUSH
51319: LD_INT 5
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 6
51328: PUSH
51329: LD_INT 6
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 5
51338: PUSH
51339: LD_INT 6
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51360: LD_ADDR_VAR 0 32
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 5
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 4
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 6
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 6
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 5
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51503: LD_ADDR_VAR 0 33
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 4
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 4
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 5
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 5
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 6
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 6
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51658: LD_ADDR_VAR 0 34
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: LD_INT 4
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: LD_INT 4
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: LD_INT 5
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 5
51749: NEG
51750: PUSH
51751: LD_INT 4
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 5
51761: NEG
51762: PUSH
51763: LD_INT 5
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 5
51773: NEG
51774: PUSH
51775: LD_INT 6
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 6
51785: NEG
51786: PUSH
51787: LD_INT 5
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 6
51797: NEG
51798: PUSH
51799: LD_INT 6
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51821: LD_ADDR_VAR 0 41
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51865: LD_ADDR_VAR 0 42
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51906: LD_ADDR_VAR 0 43
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51946: LD_ADDR_VAR 0 44
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51987: LD_ADDR_VAR 0 45
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52031: LD_ADDR_VAR 0 46
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52077: LD_ADDR_VAR 0 47
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52110: LD_ADDR_VAR 0 48
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52141: LD_ADDR_VAR 0 49
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52170: LD_ADDR_VAR 0 50
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52199: LD_ADDR_VAR 0 51
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52230: LD_ADDR_VAR 0 52
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52263: LD_ADDR_VAR 0 53
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52307: LD_ADDR_VAR 0 54
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52348: LD_ADDR_VAR 0 55
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52388: LD_ADDR_VAR 0 56
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52429: LD_ADDR_VAR 0 57
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52473: LD_ADDR_VAR 0 58
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 3
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52519: LD_ADDR_VAR 0 59
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52563: LD_ADDR_VAR 0 60
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52604: LD_ADDR_VAR 0 61
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52644: LD_ADDR_VAR 0 62
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52685: LD_ADDR_VAR 0 63
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52729: LD_ADDR_VAR 0 64
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// end ; 2 :
52775: GO 56041
52777: LD_INT 2
52779: DOUBLE
52780: EQUAL
52781: IFTRUE 52785
52783: GO 56040
52785: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52786: LD_ADDR_VAR 0 29
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 4
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 5
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 5
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 4
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 5
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 4
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: LD_INT 4
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 4
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 4
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 5
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 5
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 4
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 5
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 4
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 4
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 4
53171: NEG
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 4
53183: NEG
53184: PUSH
53185: LD_INT 5
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: NEG
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 5
53231: NEG
53232: PUSH
53233: LD_INT 4
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 5
53243: NEG
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: LD_INT 5
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 5
53267: NEG
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53324: LD_ADDR_VAR 0 30
53328: PUSH
53329: LD_INT 4
53331: PUSH
53332: LD_INT 4
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 4
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 5
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 5
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: LD_INT 5
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 5
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 4
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 4
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 4
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 4
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 4
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 5
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 5
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 5
53593: NEG
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 4
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 4
53676: NEG
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: NEG
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 4
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 5
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 4
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 4
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 5
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 3
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53871: LD_ADDR_VAR 0 31
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 4
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 5
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 4
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 4
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 4
54073: NEG
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: LD_INT 5
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: NEG
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 5
54133: NEG
54134: PUSH
54135: LD_INT 4
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: NEG
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 5
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 5
54169: NEG
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 4
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 4
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 5
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 4
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 5
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54421: LD_ADDR_VAR 0 32
54425: PUSH
54426: LD_INT 4
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 4
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 5
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 5
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 4
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 4
54590: NEG
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 5
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 4
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 4
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 4
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 5
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 5
54863: PUSH
54864: LD_INT 5
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: LD_INT 5
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 5
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: LD_INT 5
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54968: LD_ADDR_VAR 0 33
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: LD_INT 4
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 4
54987: NEG
54988: PUSH
54989: LD_INT 5
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 4
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 5
55035: NEG
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 5
55047: NEG
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 5
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 5
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 4
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 4
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 5
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 5
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 5
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 4
55308: PUSH
55309: LD_INT 4
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 4
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 5
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 4
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 5
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55506: LD_ADDR_VAR 0 34
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 4
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 5
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 4
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 5
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 4
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 4
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: LD_INT 5
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 5
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 4
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 4
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 4
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 5
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 5
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// end ; end ;
56038: GO 56041
56040: POP
// case btype of b_depot , b_warehouse :
56041: LD_VAR 0 1
56045: PUSH
56046: LD_INT 0
56048: DOUBLE
56049: EQUAL
56050: IFTRUE 56060
56052: LD_INT 1
56054: DOUBLE
56055: EQUAL
56056: IFTRUE 56060
56058: GO 56261
56060: POP
// case nation of nation_american :
56061: LD_VAR 0 5
56065: PUSH
56066: LD_INT 1
56068: DOUBLE
56069: EQUAL
56070: IFTRUE 56074
56072: GO 56130
56074: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56075: LD_ADDR_VAR 0 9
56079: PUSH
56080: LD_VAR 0 11
56084: PUSH
56085: LD_VAR 0 12
56089: PUSH
56090: LD_VAR 0 13
56094: PUSH
56095: LD_VAR 0 14
56099: PUSH
56100: LD_VAR 0 15
56104: PUSH
56105: LD_VAR 0 16
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: PUSH
56118: LD_VAR 0 4
56122: PUSH
56123: LD_INT 1
56125: PLUS
56126: ARRAY
56127: ST_TO_ADDR
56128: GO 56259
56130: LD_INT 2
56132: DOUBLE
56133: EQUAL
56134: IFTRUE 56138
56136: GO 56194
56138: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56139: LD_ADDR_VAR 0 9
56143: PUSH
56144: LD_VAR 0 17
56148: PUSH
56149: LD_VAR 0 18
56153: PUSH
56154: LD_VAR 0 19
56158: PUSH
56159: LD_VAR 0 20
56163: PUSH
56164: LD_VAR 0 21
56168: PUSH
56169: LD_VAR 0 22
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: PUSH
56182: LD_VAR 0 4
56186: PUSH
56187: LD_INT 1
56189: PLUS
56190: ARRAY
56191: ST_TO_ADDR
56192: GO 56259
56194: LD_INT 3
56196: DOUBLE
56197: EQUAL
56198: IFTRUE 56202
56200: GO 56258
56202: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56203: LD_ADDR_VAR 0 9
56207: PUSH
56208: LD_VAR 0 23
56212: PUSH
56213: LD_VAR 0 24
56217: PUSH
56218: LD_VAR 0 25
56222: PUSH
56223: LD_VAR 0 26
56227: PUSH
56228: LD_VAR 0 27
56232: PUSH
56233: LD_VAR 0 28
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: PUSH
56246: LD_VAR 0 4
56250: PUSH
56251: LD_INT 1
56253: PLUS
56254: ARRAY
56255: ST_TO_ADDR
56256: GO 56259
56258: POP
56259: GO 56814
56261: LD_INT 2
56263: DOUBLE
56264: EQUAL
56265: IFTRUE 56275
56267: LD_INT 3
56269: DOUBLE
56270: EQUAL
56271: IFTRUE 56275
56273: GO 56331
56275: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56276: LD_ADDR_VAR 0 9
56280: PUSH
56281: LD_VAR 0 29
56285: PUSH
56286: LD_VAR 0 30
56290: PUSH
56291: LD_VAR 0 31
56295: PUSH
56296: LD_VAR 0 32
56300: PUSH
56301: LD_VAR 0 33
56305: PUSH
56306: LD_VAR 0 34
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: PUSH
56319: LD_VAR 0 4
56323: PUSH
56324: LD_INT 1
56326: PLUS
56327: ARRAY
56328: ST_TO_ADDR
56329: GO 56814
56331: LD_INT 16
56333: DOUBLE
56334: EQUAL
56335: IFTRUE 56393
56337: LD_INT 17
56339: DOUBLE
56340: EQUAL
56341: IFTRUE 56393
56343: LD_INT 18
56345: DOUBLE
56346: EQUAL
56347: IFTRUE 56393
56349: LD_INT 19
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56393
56355: LD_INT 22
56357: DOUBLE
56358: EQUAL
56359: IFTRUE 56393
56361: LD_INT 20
56363: DOUBLE
56364: EQUAL
56365: IFTRUE 56393
56367: LD_INT 21
56369: DOUBLE
56370: EQUAL
56371: IFTRUE 56393
56373: LD_INT 23
56375: DOUBLE
56376: EQUAL
56377: IFTRUE 56393
56379: LD_INT 24
56381: DOUBLE
56382: EQUAL
56383: IFTRUE 56393
56385: LD_INT 25
56387: DOUBLE
56388: EQUAL
56389: IFTRUE 56393
56391: GO 56449
56393: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56394: LD_ADDR_VAR 0 9
56398: PUSH
56399: LD_VAR 0 35
56403: PUSH
56404: LD_VAR 0 36
56408: PUSH
56409: LD_VAR 0 37
56413: PUSH
56414: LD_VAR 0 38
56418: PUSH
56419: LD_VAR 0 39
56423: PUSH
56424: LD_VAR 0 40
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: PUSH
56437: LD_VAR 0 4
56441: PUSH
56442: LD_INT 1
56444: PLUS
56445: ARRAY
56446: ST_TO_ADDR
56447: GO 56814
56449: LD_INT 6
56451: DOUBLE
56452: EQUAL
56453: IFTRUE 56505
56455: LD_INT 7
56457: DOUBLE
56458: EQUAL
56459: IFTRUE 56505
56461: LD_INT 8
56463: DOUBLE
56464: EQUAL
56465: IFTRUE 56505
56467: LD_INT 13
56469: DOUBLE
56470: EQUAL
56471: IFTRUE 56505
56473: LD_INT 12
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56505
56479: LD_INT 15
56481: DOUBLE
56482: EQUAL
56483: IFTRUE 56505
56485: LD_INT 11
56487: DOUBLE
56488: EQUAL
56489: IFTRUE 56505
56491: LD_INT 14
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56505
56497: LD_INT 10
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56505
56503: GO 56561
56505: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56506: LD_ADDR_VAR 0 9
56510: PUSH
56511: LD_VAR 0 41
56515: PUSH
56516: LD_VAR 0 42
56520: PUSH
56521: LD_VAR 0 43
56525: PUSH
56526: LD_VAR 0 44
56530: PUSH
56531: LD_VAR 0 45
56535: PUSH
56536: LD_VAR 0 46
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: PUSH
56549: LD_VAR 0 4
56553: PUSH
56554: LD_INT 1
56556: PLUS
56557: ARRAY
56558: ST_TO_ADDR
56559: GO 56814
56561: LD_INT 36
56563: DOUBLE
56564: EQUAL
56565: IFTRUE 56569
56567: GO 56625
56569: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56570: LD_ADDR_VAR 0 9
56574: PUSH
56575: LD_VAR 0 47
56579: PUSH
56580: LD_VAR 0 48
56584: PUSH
56585: LD_VAR 0 49
56589: PUSH
56590: LD_VAR 0 50
56594: PUSH
56595: LD_VAR 0 51
56599: PUSH
56600: LD_VAR 0 52
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: PUSH
56613: LD_VAR 0 4
56617: PUSH
56618: LD_INT 1
56620: PLUS
56621: ARRAY
56622: ST_TO_ADDR
56623: GO 56814
56625: LD_INT 4
56627: DOUBLE
56628: EQUAL
56629: IFTRUE 56651
56631: LD_INT 5
56633: DOUBLE
56634: EQUAL
56635: IFTRUE 56651
56637: LD_INT 34
56639: DOUBLE
56640: EQUAL
56641: IFTRUE 56651
56643: LD_INT 37
56645: DOUBLE
56646: EQUAL
56647: IFTRUE 56651
56649: GO 56707
56651: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56652: LD_ADDR_VAR 0 9
56656: PUSH
56657: LD_VAR 0 53
56661: PUSH
56662: LD_VAR 0 54
56666: PUSH
56667: LD_VAR 0 55
56671: PUSH
56672: LD_VAR 0 56
56676: PUSH
56677: LD_VAR 0 57
56681: PUSH
56682: LD_VAR 0 58
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: LD_VAR 0 4
56699: PUSH
56700: LD_INT 1
56702: PLUS
56703: ARRAY
56704: ST_TO_ADDR
56705: GO 56814
56707: LD_INT 31
56709: DOUBLE
56710: EQUAL
56711: IFTRUE 56757
56713: LD_INT 32
56715: DOUBLE
56716: EQUAL
56717: IFTRUE 56757
56719: LD_INT 33
56721: DOUBLE
56722: EQUAL
56723: IFTRUE 56757
56725: LD_INT 27
56727: DOUBLE
56728: EQUAL
56729: IFTRUE 56757
56731: LD_INT 26
56733: DOUBLE
56734: EQUAL
56735: IFTRUE 56757
56737: LD_INT 28
56739: DOUBLE
56740: EQUAL
56741: IFTRUE 56757
56743: LD_INT 29
56745: DOUBLE
56746: EQUAL
56747: IFTRUE 56757
56749: LD_INT 30
56751: DOUBLE
56752: EQUAL
56753: IFTRUE 56757
56755: GO 56813
56757: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56758: LD_ADDR_VAR 0 9
56762: PUSH
56763: LD_VAR 0 59
56767: PUSH
56768: LD_VAR 0 60
56772: PUSH
56773: LD_VAR 0 61
56777: PUSH
56778: LD_VAR 0 62
56782: PUSH
56783: LD_VAR 0 63
56787: PUSH
56788: LD_VAR 0 64
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: PUSH
56801: LD_VAR 0 4
56805: PUSH
56806: LD_INT 1
56808: PLUS
56809: ARRAY
56810: ST_TO_ADDR
56811: GO 56814
56813: POP
// temp_list2 = [ ] ;
56814: LD_ADDR_VAR 0 10
56818: PUSH
56819: EMPTY
56820: ST_TO_ADDR
// for i in temp_list do
56821: LD_ADDR_VAR 0 8
56825: PUSH
56826: LD_VAR 0 9
56830: PUSH
56831: FOR_IN
56832: IFFALSE 56884
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56834: LD_ADDR_VAR 0 10
56838: PUSH
56839: LD_VAR 0 10
56843: PUSH
56844: LD_VAR 0 8
56848: PUSH
56849: LD_INT 1
56851: ARRAY
56852: PUSH
56853: LD_VAR 0 2
56857: PLUS
56858: PUSH
56859: LD_VAR 0 8
56863: PUSH
56864: LD_INT 2
56866: ARRAY
56867: PUSH
56868: LD_VAR 0 3
56872: PLUS
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: ADD
56881: ST_TO_ADDR
56882: GO 56831
56884: POP
56885: POP
// result = temp_list2 ;
56886: LD_ADDR_VAR 0 7
56890: PUSH
56891: LD_VAR 0 10
56895: ST_TO_ADDR
// end ;
56896: LD_VAR 0 7
56900: RET
// export function EnemyInRange ( unit , dist ) ; begin
56901: LD_INT 0
56903: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56904: LD_ADDR_VAR 0 3
56908: PUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 255
56918: PPUSH
56919: LD_VAR 0 1
56923: PPUSH
56924: CALL_OW 250
56928: PPUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 251
56938: PPUSH
56939: LD_VAR 0 2
56943: PPUSH
56944: CALL 30297 0 4
56948: PUSH
56949: LD_INT 4
56951: ARRAY
56952: ST_TO_ADDR
// end ;
56953: LD_VAR 0 3
56957: RET
// export function PlayerSeeMe ( unit ) ; begin
56958: LD_INT 0
56960: PPUSH
// result := See ( your_side , unit ) ;
56961: LD_ADDR_VAR 0 2
56965: PUSH
56966: LD_OWVAR 2
56970: PPUSH
56971: LD_VAR 0 1
56975: PPUSH
56976: CALL_OW 292
56980: ST_TO_ADDR
// end ;
56981: LD_VAR 0 2
56985: RET
// export function ReverseDir ( unit ) ; begin
56986: LD_INT 0
56988: PPUSH
// if not unit then
56989: LD_VAR 0 1
56993: NOT
56994: IFFALSE 56998
// exit ;
56996: GO 57021
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56998: LD_ADDR_VAR 0 2
57002: PUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 254
57012: PUSH
57013: LD_INT 3
57015: PLUS
57016: PUSH
57017: LD_INT 6
57019: MOD
57020: ST_TO_ADDR
// end ;
57021: LD_VAR 0 2
57025: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57026: LD_INT 0
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
// if not hexes then
57033: LD_VAR 0 2
57037: NOT
57038: IFFALSE 57042
// exit ;
57040: GO 57190
// dist := 9999 ;
57042: LD_ADDR_VAR 0 5
57046: PUSH
57047: LD_INT 9999
57049: ST_TO_ADDR
// for i = 1 to hexes do
57050: LD_ADDR_VAR 0 4
57054: PUSH
57055: DOUBLE
57056: LD_INT 1
57058: DEC
57059: ST_TO_ADDR
57060: LD_VAR 0 2
57064: PUSH
57065: FOR_TO
57066: IFFALSE 57178
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57068: LD_VAR 0 1
57072: PPUSH
57073: LD_VAR 0 2
57077: PUSH
57078: LD_VAR 0 4
57082: ARRAY
57083: PUSH
57084: LD_INT 1
57086: ARRAY
57087: PPUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_VAR 0 4
57097: ARRAY
57098: PUSH
57099: LD_INT 2
57101: ARRAY
57102: PPUSH
57103: CALL_OW 297
57107: PUSH
57108: LD_VAR 0 5
57112: LESS
57113: IFFALSE 57176
// begin hex := hexes [ i ] ;
57115: LD_ADDR_VAR 0 7
57119: PUSH
57120: LD_VAR 0 2
57124: PUSH
57125: LD_VAR 0 4
57129: ARRAY
57130: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57131: LD_ADDR_VAR 0 5
57135: PUSH
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_VAR 0 2
57145: PUSH
57146: LD_VAR 0 4
57150: ARRAY
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: PPUSH
57156: LD_VAR 0 2
57160: PUSH
57161: LD_VAR 0 4
57165: ARRAY
57166: PUSH
57167: LD_INT 2
57169: ARRAY
57170: PPUSH
57171: CALL_OW 297
57175: ST_TO_ADDR
// end ; end ;
57176: GO 57065
57178: POP
57179: POP
// result := hex ;
57180: LD_ADDR_VAR 0 3
57184: PUSH
57185: LD_VAR 0 7
57189: ST_TO_ADDR
// end ;
57190: LD_VAR 0 3
57194: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57195: LD_INT 0
57197: PPUSH
57198: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57199: LD_VAR 0 1
57203: NOT
57204: PUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_INT 21
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 23
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PPUSH
57234: CALL_OW 69
57238: IN
57239: NOT
57240: OR
57241: IFFALSE 57245
// exit ;
57243: GO 57292
// for i = 1 to 3 do
57245: LD_ADDR_VAR 0 3
57249: PUSH
57250: DOUBLE
57251: LD_INT 1
57253: DEC
57254: ST_TO_ADDR
57255: LD_INT 3
57257: PUSH
57258: FOR_TO
57259: IFFALSE 57290
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57261: LD_VAR 0 1
57265: PPUSH
57266: CALL_OW 250
57270: PPUSH
57271: LD_VAR 0 1
57275: PPUSH
57276: CALL_OW 251
57280: PPUSH
57281: LD_INT 1
57283: PPUSH
57284: CALL_OW 453
57288: GO 57258
57290: POP
57291: POP
// end ;
57292: LD_VAR 0 2
57296: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57297: LD_INT 0
57299: PPUSH
57300: PPUSH
57301: PPUSH
57302: PPUSH
57303: PPUSH
57304: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57305: LD_VAR 0 1
57309: NOT
57310: PUSH
57311: LD_VAR 0 2
57315: NOT
57316: OR
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 314
57327: OR
57328: IFFALSE 57332
// exit ;
57330: GO 57773
// x := GetX ( enemy_unit ) ;
57332: LD_ADDR_VAR 0 7
57336: PUSH
57337: LD_VAR 0 2
57341: PPUSH
57342: CALL_OW 250
57346: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57347: LD_ADDR_VAR 0 8
57351: PUSH
57352: LD_VAR 0 2
57356: PPUSH
57357: CALL_OW 251
57361: ST_TO_ADDR
// if not x or not y then
57362: LD_VAR 0 7
57366: NOT
57367: PUSH
57368: LD_VAR 0 8
57372: NOT
57373: OR
57374: IFFALSE 57378
// exit ;
57376: GO 57773
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57378: LD_ADDR_VAR 0 6
57382: PUSH
57383: LD_VAR 0 7
57387: PPUSH
57388: LD_INT 0
57390: PPUSH
57391: LD_INT 4
57393: PPUSH
57394: CALL_OW 272
57398: PUSH
57399: LD_VAR 0 8
57403: PPUSH
57404: LD_INT 0
57406: PPUSH
57407: LD_INT 4
57409: PPUSH
57410: CALL_OW 273
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_VAR 0 7
57423: PPUSH
57424: LD_INT 1
57426: PPUSH
57427: LD_INT 4
57429: PPUSH
57430: CALL_OW 272
57434: PUSH
57435: LD_VAR 0 8
57439: PPUSH
57440: LD_INT 1
57442: PPUSH
57443: LD_INT 4
57445: PPUSH
57446: CALL_OW 273
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_VAR 0 7
57459: PPUSH
57460: LD_INT 2
57462: PPUSH
57463: LD_INT 4
57465: PPUSH
57466: CALL_OW 272
57470: PUSH
57471: LD_VAR 0 8
57475: PPUSH
57476: LD_INT 2
57478: PPUSH
57479: LD_INT 4
57481: PPUSH
57482: CALL_OW 273
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_VAR 0 7
57495: PPUSH
57496: LD_INT 3
57498: PPUSH
57499: LD_INT 4
57501: PPUSH
57502: CALL_OW 272
57506: PUSH
57507: LD_VAR 0 8
57511: PPUSH
57512: LD_INT 3
57514: PPUSH
57515: LD_INT 4
57517: PPUSH
57518: CALL_OW 273
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_VAR 0 7
57531: PPUSH
57532: LD_INT 4
57534: PPUSH
57535: LD_INT 4
57537: PPUSH
57538: CALL_OW 272
57542: PUSH
57543: LD_VAR 0 8
57547: PPUSH
57548: LD_INT 4
57550: PPUSH
57551: LD_INT 4
57553: PPUSH
57554: CALL_OW 273
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_VAR 0 7
57567: PPUSH
57568: LD_INT 5
57570: PPUSH
57571: LD_INT 4
57573: PPUSH
57574: CALL_OW 272
57578: PUSH
57579: LD_VAR 0 8
57583: PPUSH
57584: LD_INT 5
57586: PPUSH
57587: LD_INT 4
57589: PPUSH
57590: CALL_OW 273
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// for i = tmp downto 1 do
57607: LD_ADDR_VAR 0 4
57611: PUSH
57612: DOUBLE
57613: LD_VAR 0 6
57617: INC
57618: ST_TO_ADDR
57619: LD_INT 1
57621: PUSH
57622: FOR_DOWNTO
57623: IFFALSE 57724
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57625: LD_VAR 0 6
57629: PUSH
57630: LD_VAR 0 4
57634: ARRAY
57635: PUSH
57636: LD_INT 1
57638: ARRAY
57639: PPUSH
57640: LD_VAR 0 6
57644: PUSH
57645: LD_VAR 0 4
57649: ARRAY
57650: PUSH
57651: LD_INT 2
57653: ARRAY
57654: PPUSH
57655: CALL_OW 488
57659: NOT
57660: PUSH
57661: LD_VAR 0 6
57665: PUSH
57666: LD_VAR 0 4
57670: ARRAY
57671: PUSH
57672: LD_INT 1
57674: ARRAY
57675: PPUSH
57676: LD_VAR 0 6
57680: PUSH
57681: LD_VAR 0 4
57685: ARRAY
57686: PUSH
57687: LD_INT 2
57689: ARRAY
57690: PPUSH
57691: CALL_OW 428
57695: PUSH
57696: LD_INT 0
57698: NONEQUAL
57699: OR
57700: IFFALSE 57722
// tmp := Delete ( tmp , i ) ;
57702: LD_ADDR_VAR 0 6
57706: PUSH
57707: LD_VAR 0 6
57711: PPUSH
57712: LD_VAR 0 4
57716: PPUSH
57717: CALL_OW 3
57721: ST_TO_ADDR
57722: GO 57622
57724: POP
57725: POP
// j := GetClosestHex ( unit , tmp ) ;
57726: LD_ADDR_VAR 0 5
57730: PUSH
57731: LD_VAR 0 1
57735: PPUSH
57736: LD_VAR 0 6
57740: PPUSH
57741: CALL 57026 0 2
57745: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57746: LD_VAR 0 1
57750: PPUSH
57751: LD_VAR 0 5
57755: PUSH
57756: LD_INT 1
57758: ARRAY
57759: PPUSH
57760: LD_VAR 0 5
57764: PUSH
57765: LD_INT 2
57767: ARRAY
57768: PPUSH
57769: CALL_OW 111
// end ;
57773: LD_VAR 0 3
57777: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57778: LD_INT 0
57780: PPUSH
57781: PPUSH
57782: PPUSH
// uc_side = 0 ;
57783: LD_ADDR_OWVAR 20
57787: PUSH
57788: LD_INT 0
57790: ST_TO_ADDR
// uc_nation = 0 ;
57791: LD_ADDR_OWVAR 21
57795: PUSH
57796: LD_INT 0
57798: ST_TO_ADDR
// InitHc_All ( ) ;
57799: CALL_OW 584
// InitVc ;
57803: CALL_OW 20
// if mastodonts then
57807: LD_VAR 0 6
57811: IFFALSE 57878
// for i = 1 to mastodonts do
57813: LD_ADDR_VAR 0 11
57817: PUSH
57818: DOUBLE
57819: LD_INT 1
57821: DEC
57822: ST_TO_ADDR
57823: LD_VAR 0 6
57827: PUSH
57828: FOR_TO
57829: IFFALSE 57876
// begin vc_chassis := 31 ;
57831: LD_ADDR_OWVAR 37
57835: PUSH
57836: LD_INT 31
57838: ST_TO_ADDR
// vc_control := control_rider ;
57839: LD_ADDR_OWVAR 38
57843: PUSH
57844: LD_INT 4
57846: ST_TO_ADDR
// animal := CreateVehicle ;
57847: LD_ADDR_VAR 0 12
57851: PUSH
57852: CALL_OW 45
57856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57857: LD_VAR 0 12
57861: PPUSH
57862: LD_VAR 0 8
57866: PPUSH
57867: LD_INT 0
57869: PPUSH
57870: CALL 60066 0 3
// end ;
57874: GO 57828
57876: POP
57877: POP
// if horses then
57878: LD_VAR 0 5
57882: IFFALSE 57949
// for i = 1 to horses do
57884: LD_ADDR_VAR 0 11
57888: PUSH
57889: DOUBLE
57890: LD_INT 1
57892: DEC
57893: ST_TO_ADDR
57894: LD_VAR 0 5
57898: PUSH
57899: FOR_TO
57900: IFFALSE 57947
// begin hc_class := 21 ;
57902: LD_ADDR_OWVAR 28
57906: PUSH
57907: LD_INT 21
57909: ST_TO_ADDR
// hc_gallery :=  ;
57910: LD_ADDR_OWVAR 33
57914: PUSH
57915: LD_STRING 
57917: ST_TO_ADDR
// animal := CreateHuman ;
57918: LD_ADDR_VAR 0 12
57922: PUSH
57923: CALL_OW 44
57927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57928: LD_VAR 0 12
57932: PPUSH
57933: LD_VAR 0 8
57937: PPUSH
57938: LD_INT 0
57940: PPUSH
57941: CALL 60066 0 3
// end ;
57945: GO 57899
57947: POP
57948: POP
// if birds then
57949: LD_VAR 0 1
57953: IFFALSE 58020
// for i = 1 to birds do
57955: LD_ADDR_VAR 0 11
57959: PUSH
57960: DOUBLE
57961: LD_INT 1
57963: DEC
57964: ST_TO_ADDR
57965: LD_VAR 0 1
57969: PUSH
57970: FOR_TO
57971: IFFALSE 58018
// begin hc_class = 18 ;
57973: LD_ADDR_OWVAR 28
57977: PUSH
57978: LD_INT 18
57980: ST_TO_ADDR
// hc_gallery =  ;
57981: LD_ADDR_OWVAR 33
57985: PUSH
57986: LD_STRING 
57988: ST_TO_ADDR
// animal := CreateHuman ;
57989: LD_ADDR_VAR 0 12
57993: PUSH
57994: CALL_OW 44
57998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57999: LD_VAR 0 12
58003: PPUSH
58004: LD_VAR 0 8
58008: PPUSH
58009: LD_INT 0
58011: PPUSH
58012: CALL 60066 0 3
// end ;
58016: GO 57970
58018: POP
58019: POP
// if tigers then
58020: LD_VAR 0 2
58024: IFFALSE 58108
// for i = 1 to tigers do
58026: LD_ADDR_VAR 0 11
58030: PUSH
58031: DOUBLE
58032: LD_INT 1
58034: DEC
58035: ST_TO_ADDR
58036: LD_VAR 0 2
58040: PUSH
58041: FOR_TO
58042: IFFALSE 58106
// begin hc_class = class_tiger ;
58044: LD_ADDR_OWVAR 28
58048: PUSH
58049: LD_INT 14
58051: ST_TO_ADDR
// hc_gallery =  ;
58052: LD_ADDR_OWVAR 33
58056: PUSH
58057: LD_STRING 
58059: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58060: LD_ADDR_OWVAR 35
58064: PUSH
58065: LD_INT 7
58067: NEG
58068: PPUSH
58069: LD_INT 7
58071: PPUSH
58072: CALL_OW 12
58076: ST_TO_ADDR
// animal := CreateHuman ;
58077: LD_ADDR_VAR 0 12
58081: PUSH
58082: CALL_OW 44
58086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58087: LD_VAR 0 12
58091: PPUSH
58092: LD_VAR 0 8
58096: PPUSH
58097: LD_INT 0
58099: PPUSH
58100: CALL 60066 0 3
// end ;
58104: GO 58041
58106: POP
58107: POP
// if apemans then
58108: LD_VAR 0 3
58112: IFFALSE 58235
// for i = 1 to apemans do
58114: LD_ADDR_VAR 0 11
58118: PUSH
58119: DOUBLE
58120: LD_INT 1
58122: DEC
58123: ST_TO_ADDR
58124: LD_VAR 0 3
58128: PUSH
58129: FOR_TO
58130: IFFALSE 58233
// begin hc_class = class_apeman ;
58132: LD_ADDR_OWVAR 28
58136: PUSH
58137: LD_INT 12
58139: ST_TO_ADDR
// hc_gallery =  ;
58140: LD_ADDR_OWVAR 33
58144: PUSH
58145: LD_STRING 
58147: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58148: LD_ADDR_OWVAR 35
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PPUSH
58157: LD_INT 2
58159: PPUSH
58160: CALL_OW 12
58164: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58165: LD_ADDR_OWVAR 31
58169: PUSH
58170: LD_INT 1
58172: PPUSH
58173: LD_INT 3
58175: PPUSH
58176: CALL_OW 12
58180: PUSH
58181: LD_INT 1
58183: PPUSH
58184: LD_INT 3
58186: PPUSH
58187: CALL_OW 12
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: ST_TO_ADDR
// animal := CreateHuman ;
58204: LD_ADDR_VAR 0 12
58208: PUSH
58209: CALL_OW 44
58213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58214: LD_VAR 0 12
58218: PPUSH
58219: LD_VAR 0 8
58223: PPUSH
58224: LD_INT 0
58226: PPUSH
58227: CALL 60066 0 3
// end ;
58231: GO 58129
58233: POP
58234: POP
// if enchidnas then
58235: LD_VAR 0 4
58239: IFFALSE 58306
// for i = 1 to enchidnas do
58241: LD_ADDR_VAR 0 11
58245: PUSH
58246: DOUBLE
58247: LD_INT 1
58249: DEC
58250: ST_TO_ADDR
58251: LD_VAR 0 4
58255: PUSH
58256: FOR_TO
58257: IFFALSE 58304
// begin hc_class = 13 ;
58259: LD_ADDR_OWVAR 28
58263: PUSH
58264: LD_INT 13
58266: ST_TO_ADDR
// hc_gallery =  ;
58267: LD_ADDR_OWVAR 33
58271: PUSH
58272: LD_STRING 
58274: ST_TO_ADDR
// animal := CreateHuman ;
58275: LD_ADDR_VAR 0 12
58279: PUSH
58280: CALL_OW 44
58284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58285: LD_VAR 0 12
58289: PPUSH
58290: LD_VAR 0 8
58294: PPUSH
58295: LD_INT 0
58297: PPUSH
58298: CALL 60066 0 3
// end ;
58302: GO 58256
58304: POP
58305: POP
// if fishes then
58306: LD_VAR 0 7
58310: IFFALSE 58377
// for i = 1 to fishes do
58312: LD_ADDR_VAR 0 11
58316: PUSH
58317: DOUBLE
58318: LD_INT 1
58320: DEC
58321: ST_TO_ADDR
58322: LD_VAR 0 7
58326: PUSH
58327: FOR_TO
58328: IFFALSE 58375
// begin hc_class = 20 ;
58330: LD_ADDR_OWVAR 28
58334: PUSH
58335: LD_INT 20
58337: ST_TO_ADDR
// hc_gallery =  ;
58338: LD_ADDR_OWVAR 33
58342: PUSH
58343: LD_STRING 
58345: ST_TO_ADDR
// animal := CreateHuman ;
58346: LD_ADDR_VAR 0 12
58350: PUSH
58351: CALL_OW 44
58355: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58356: LD_VAR 0 12
58360: PPUSH
58361: LD_VAR 0 9
58365: PPUSH
58366: LD_INT 0
58368: PPUSH
58369: CALL 60066 0 3
// end ;
58373: GO 58327
58375: POP
58376: POP
// end ;
58377: LD_VAR 0 10
58381: RET
// export function WantHeal ( sci , unit ) ; begin
58382: LD_INT 0
58384: PPUSH
// if GetTaskList ( sci ) > 0 then
58385: LD_VAR 0 1
58389: PPUSH
58390: CALL_OW 437
58394: PUSH
58395: LD_INT 0
58397: GREATER
58398: IFFALSE 58468
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58400: LD_VAR 0 1
58404: PPUSH
58405: CALL_OW 437
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PUSH
58414: LD_INT 1
58416: ARRAY
58417: PUSH
58418: LD_STRING l
58420: EQUAL
58421: PUSH
58422: LD_VAR 0 1
58426: PPUSH
58427: CALL_OW 437
58431: PUSH
58432: LD_INT 1
58434: ARRAY
58435: PUSH
58436: LD_INT 4
58438: ARRAY
58439: PUSH
58440: LD_VAR 0 2
58444: EQUAL
58445: AND
58446: IFFALSE 58458
// result := true else
58448: LD_ADDR_VAR 0 3
58452: PUSH
58453: LD_INT 1
58455: ST_TO_ADDR
58456: GO 58466
// result := false ;
58458: LD_ADDR_VAR 0 3
58462: PUSH
58463: LD_INT 0
58465: ST_TO_ADDR
// end else
58466: GO 58476
// result := false ;
58468: LD_ADDR_VAR 0 3
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// end ;
58476: LD_VAR 0 3
58480: RET
// export function HealTarget ( sci ) ; begin
58481: LD_INT 0
58483: PPUSH
// if not sci then
58484: LD_VAR 0 1
58488: NOT
58489: IFFALSE 58493
// exit ;
58491: GO 58558
// result := 0 ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_INT 0
58500: ST_TO_ADDR
// if GetTaskList ( sci ) then
58501: LD_VAR 0 1
58505: PPUSH
58506: CALL_OW 437
58510: IFFALSE 58558
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58512: LD_VAR 0 1
58516: PPUSH
58517: CALL_OW 437
58521: PUSH
58522: LD_INT 1
58524: ARRAY
58525: PUSH
58526: LD_INT 1
58528: ARRAY
58529: PUSH
58530: LD_STRING l
58532: EQUAL
58533: IFFALSE 58558
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58535: LD_ADDR_VAR 0 2
58539: PUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 437
58549: PUSH
58550: LD_INT 1
58552: ARRAY
58553: PUSH
58554: LD_INT 4
58556: ARRAY
58557: ST_TO_ADDR
// end ;
58558: LD_VAR 0 2
58562: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58563: LD_INT 0
58565: PPUSH
58566: PPUSH
58567: PPUSH
58568: PPUSH
// if not base_units then
58569: LD_VAR 0 1
58573: NOT
58574: IFFALSE 58578
// exit ;
58576: GO 58665
// result := false ;
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: LD_INT 0
58585: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58586: LD_ADDR_VAR 0 5
58590: PUSH
58591: LD_VAR 0 1
58595: PPUSH
58596: LD_INT 21
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PPUSH
58606: CALL_OW 72
58610: ST_TO_ADDR
// if not tmp then
58611: LD_VAR 0 5
58615: NOT
58616: IFFALSE 58620
// exit ;
58618: GO 58665
// for i in tmp do
58620: LD_ADDR_VAR 0 3
58624: PUSH
58625: LD_VAR 0 5
58629: PUSH
58630: FOR_IN
58631: IFFALSE 58663
// begin result := EnemyInRange ( i , 22 ) ;
58633: LD_ADDR_VAR 0 2
58637: PUSH
58638: LD_VAR 0 3
58642: PPUSH
58643: LD_INT 22
58645: PPUSH
58646: CALL 56901 0 2
58650: ST_TO_ADDR
// if result then
58651: LD_VAR 0 2
58655: IFFALSE 58661
// exit ;
58657: POP
58658: POP
58659: GO 58665
// end ;
58661: GO 58630
58663: POP
58664: POP
// end ;
58665: LD_VAR 0 2
58669: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58670: LD_INT 0
58672: PPUSH
58673: PPUSH
// if not units then
58674: LD_VAR 0 1
58678: NOT
58679: IFFALSE 58683
// exit ;
58681: GO 58753
// result := [ ] ;
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: EMPTY
58689: ST_TO_ADDR
// for i in units do
58690: LD_ADDR_VAR 0 4
58694: PUSH
58695: LD_VAR 0 1
58699: PUSH
58700: FOR_IN
58701: IFFALSE 58751
// if GetTag ( i ) = tag then
58703: LD_VAR 0 4
58707: PPUSH
58708: CALL_OW 110
58712: PUSH
58713: LD_VAR 0 2
58717: EQUAL
58718: IFFALSE 58749
// result := Replace ( result , result + 1 , i ) ;
58720: LD_ADDR_VAR 0 3
58724: PUSH
58725: LD_VAR 0 3
58729: PPUSH
58730: LD_VAR 0 3
58734: PUSH
58735: LD_INT 1
58737: PLUS
58738: PPUSH
58739: LD_VAR 0 4
58743: PPUSH
58744: CALL_OW 1
58748: ST_TO_ADDR
58749: GO 58700
58751: POP
58752: POP
// end ;
58753: LD_VAR 0 3
58757: RET
// export function IsDriver ( un ) ; begin
58758: LD_INT 0
58760: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58761: LD_ADDR_VAR 0 2
58765: PUSH
58766: LD_VAR 0 1
58770: PUSH
58771: LD_INT 55
58773: PUSH
58774: EMPTY
58775: LIST
58776: PPUSH
58777: CALL_OW 69
58781: IN
58782: ST_TO_ADDR
// end ;
58783: LD_VAR 0 2
58787: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58788: LD_INT 0
58790: PPUSH
58791: PPUSH
// list := [ ] ;
58792: LD_ADDR_VAR 0 5
58796: PUSH
58797: EMPTY
58798: ST_TO_ADDR
// case d of 0 :
58799: LD_VAR 0 3
58803: PUSH
58804: LD_INT 0
58806: DOUBLE
58807: EQUAL
58808: IFTRUE 58812
58810: GO 58945
58812: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58813: LD_ADDR_VAR 0 5
58817: PUSH
58818: LD_VAR 0 1
58822: PUSH
58823: LD_INT 4
58825: MINUS
58826: PUSH
58827: LD_VAR 0 2
58831: PUSH
58832: LD_INT 4
58834: MINUS
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: PUSH
58844: LD_VAR 0 1
58848: PUSH
58849: LD_INT 3
58851: MINUS
58852: PUSH
58853: LD_VAR 0 2
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: PUSH
58866: LD_VAR 0 1
58870: PUSH
58871: LD_INT 4
58873: PLUS
58874: PUSH
58875: LD_VAR 0 2
58879: PUSH
58880: LD_INT 4
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: PUSH
58888: LD_VAR 0 1
58892: PUSH
58893: LD_INT 3
58895: PLUS
58896: PUSH
58897: LD_VAR 0 2
58901: PUSH
58902: LD_INT 3
58904: PLUS
58905: PUSH
58906: LD_INT 5
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: PUSH
58914: LD_VAR 0 1
58918: PUSH
58919: LD_VAR 0 2
58923: PUSH
58924: LD_INT 4
58926: PLUS
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// end ; 1 :
58943: GO 59643
58945: LD_INT 1
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58953
58951: GO 59086
58953: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58954: LD_ADDR_VAR 0 5
58958: PUSH
58959: LD_VAR 0 1
58963: PUSH
58964: LD_VAR 0 2
58968: PUSH
58969: LD_INT 4
58971: MINUS
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: LIST
58980: PUSH
58981: LD_VAR 0 1
58985: PUSH
58986: LD_INT 3
58988: MINUS
58989: PUSH
58990: LD_VAR 0 2
58994: PUSH
58995: LD_INT 3
58997: MINUS
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_INT 4
59014: MINUS
59015: PUSH
59016: LD_VAR 0 2
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: PUSH
59029: LD_VAR 0 1
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: LD_INT 3
59041: PLUS
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: PUSH
59051: LD_VAR 0 1
59055: PUSH
59056: LD_INT 4
59058: PLUS
59059: PUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_INT 4
59067: PLUS
59068: PUSH
59069: LD_INT 5
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: ST_TO_ADDR
// end ; 2 :
59084: GO 59643
59086: LD_INT 2
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59094
59092: GO 59223
59094: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59095: LD_ADDR_VAR 0 5
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: LD_VAR 0 2
59109: PUSH
59110: LD_INT 3
59112: MINUS
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 4
59129: PLUS
59130: PUSH
59131: LD_VAR 0 2
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: LD_VAR 0 1
59148: PUSH
59149: LD_VAR 0 2
59153: PUSH
59154: LD_INT 4
59156: PLUS
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_INT 3
59173: MINUS
59174: PUSH
59175: LD_VAR 0 2
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_VAR 0 1
59192: PUSH
59193: LD_INT 4
59195: MINUS
59196: PUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_INT 4
59204: MINUS
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// end ; 3 :
59221: GO 59643
59223: LD_INT 3
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 59364
59231: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59232: LD_ADDR_VAR 0 5
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 3
59244: PLUS
59245: PUSH
59246: LD_VAR 0 2
59250: PUSH
59251: LD_INT 4
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: PUSH
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 4
59266: PLUS
59267: PUSH
59268: LD_VAR 0 2
59272: PUSH
59273: LD_INT 4
59275: PLUS
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: LIST
59284: PUSH
59285: LD_VAR 0 1
59289: PUSH
59290: LD_INT 4
59292: MINUS
59293: PUSH
59294: LD_VAR 0 2
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: PUSH
59307: LD_VAR 0 1
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: LD_INT 4
59319: MINUS
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 1
59333: PUSH
59334: LD_INT 3
59336: MINUS
59337: PUSH
59338: LD_VAR 0 2
59342: PUSH
59343: LD_INT 3
59345: MINUS
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// end ; 4 :
59362: GO 59643
59364: LD_INT 4
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59372
59370: GO 59505
59372: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59373: LD_ADDR_VAR 0 5
59377: PUSH
59378: LD_VAR 0 1
59382: PUSH
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 4
59390: PLUS
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: PUSH
59400: LD_VAR 0 1
59404: PUSH
59405: LD_INT 3
59407: PLUS
59408: PUSH
59409: LD_VAR 0 2
59413: PUSH
59414: LD_INT 3
59416: PLUS
59417: PUSH
59418: LD_INT 5
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: LD_VAR 0 1
59430: PUSH
59431: LD_INT 4
59433: PLUS
59434: PUSH
59435: LD_VAR 0 2
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: PUSH
59448: LD_VAR 0 1
59452: PUSH
59453: LD_VAR 0 2
59457: PUSH
59458: LD_INT 3
59460: MINUS
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: LD_VAR 0 1
59474: PUSH
59475: LD_INT 4
59477: MINUS
59478: PUSH
59479: LD_VAR 0 2
59483: PUSH
59484: LD_INT 4
59486: MINUS
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// end ; 5 :
59503: GO 59643
59505: LD_INT 5
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59513
59511: GO 59642
59513: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59514: LD_ADDR_VAR 0 5
59518: PUSH
59519: LD_VAR 0 1
59523: PUSH
59524: LD_INT 4
59526: MINUS
59527: PUSH
59528: LD_VAR 0 2
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: PUSH
59541: LD_VAR 0 1
59545: PUSH
59546: LD_VAR 0 2
59550: PUSH
59551: LD_INT 4
59553: MINUS
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: LD_VAR 0 1
59567: PUSH
59568: LD_INT 4
59570: PLUS
59571: PUSH
59572: LD_VAR 0 2
59576: PUSH
59577: LD_INT 4
59579: PLUS
59580: PUSH
59581: LD_INT 5
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: PUSH
59589: LD_VAR 0 1
59593: PUSH
59594: LD_INT 3
59596: PLUS
59597: PUSH
59598: LD_VAR 0 2
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: LIST
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_VAR 0 2
59620: PUSH
59621: LD_INT 3
59623: PLUS
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// end ; end ;
59640: GO 59643
59642: POP
// result := list ;
59643: LD_ADDR_VAR 0 4
59647: PUSH
59648: LD_VAR 0 5
59652: ST_TO_ADDR
// end ;
59653: LD_VAR 0 4
59657: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59658: LD_INT 0
59660: PPUSH
59661: PPUSH
59662: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59663: LD_VAR 0 1
59667: NOT
59668: PUSH
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: IN
59692: NOT
59693: OR
59694: IFFALSE 59698
// exit ;
59696: GO 59790
// tmp := [ ] ;
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: EMPTY
59704: ST_TO_ADDR
// for i in units do
59705: LD_ADDR_VAR 0 4
59709: PUSH
59710: LD_VAR 0 1
59714: PUSH
59715: FOR_IN
59716: IFFALSE 59759
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59718: LD_ADDR_VAR 0 5
59722: PUSH
59723: LD_VAR 0 5
59727: PPUSH
59728: LD_VAR 0 5
59732: PUSH
59733: LD_INT 1
59735: PLUS
59736: PPUSH
59737: LD_VAR 0 4
59741: PPUSH
59742: LD_VAR 0 2
59746: PPUSH
59747: CALL_OW 259
59751: PPUSH
59752: CALL_OW 2
59756: ST_TO_ADDR
59757: GO 59715
59759: POP
59760: POP
// if not tmp then
59761: LD_VAR 0 5
59765: NOT
59766: IFFALSE 59770
// exit ;
59768: GO 59790
// result := SortListByListDesc ( units , tmp ) ;
59770: LD_ADDR_VAR 0 3
59774: PUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_VAR 0 5
59784: PPUSH
59785: CALL_OW 77
59789: ST_TO_ADDR
// end ;
59790: LD_VAR 0 3
59794: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59795: LD_INT 0
59797: PPUSH
59798: PPUSH
59799: PPUSH
// result := false ;
59800: LD_ADDR_VAR 0 3
59804: PUSH
59805: LD_INT 0
59807: ST_TO_ADDR
// x := GetX ( building ) ;
59808: LD_ADDR_VAR 0 4
59812: PUSH
59813: LD_VAR 0 2
59817: PPUSH
59818: CALL_OW 250
59822: ST_TO_ADDR
// y := GetY ( building ) ;
59823: LD_ADDR_VAR 0 5
59827: PUSH
59828: LD_VAR 0 2
59832: PPUSH
59833: CALL_OW 251
59837: ST_TO_ADDR
// if not building or not x or not y then
59838: LD_VAR 0 2
59842: NOT
59843: PUSH
59844: LD_VAR 0 4
59848: NOT
59849: OR
59850: PUSH
59851: LD_VAR 0 5
59855: NOT
59856: OR
59857: IFFALSE 59861
// exit ;
59859: GO 59953
// if GetTaskList ( unit ) then
59861: LD_VAR 0 1
59865: PPUSH
59866: CALL_OW 437
59870: IFFALSE 59953
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59872: LD_STRING e
59874: PUSH
59875: LD_VAR 0 1
59879: PPUSH
59880: CALL_OW 437
59884: PUSH
59885: LD_INT 1
59887: ARRAY
59888: PUSH
59889: LD_INT 1
59891: ARRAY
59892: EQUAL
59893: PUSH
59894: LD_VAR 0 4
59898: PUSH
59899: LD_VAR 0 1
59903: PPUSH
59904: CALL_OW 437
59908: PUSH
59909: LD_INT 1
59911: ARRAY
59912: PUSH
59913: LD_INT 2
59915: ARRAY
59916: EQUAL
59917: AND
59918: PUSH
59919: LD_VAR 0 5
59923: PUSH
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL_OW 437
59933: PUSH
59934: LD_INT 1
59936: ARRAY
59937: PUSH
59938: LD_INT 3
59940: ARRAY
59941: EQUAL
59942: AND
59943: IFFALSE 59953
// result := true end ;
59945: LD_ADDR_VAR 0 3
59949: PUSH
59950: LD_INT 1
59952: ST_TO_ADDR
// end ;
59953: LD_VAR 0 3
59957: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59958: LD_INT 0
59960: PPUSH
// result := false ;
59961: LD_ADDR_VAR 0 4
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// if GetTaskList ( unit ) then
59969: LD_VAR 0 1
59973: PPUSH
59974: CALL_OW 437
59978: IFFALSE 60061
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59980: LD_STRING M
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 437
59992: PUSH
59993: LD_INT 1
59995: ARRAY
59996: PUSH
59997: LD_INT 1
59999: ARRAY
60000: EQUAL
60001: PUSH
60002: LD_VAR 0 2
60006: PUSH
60007: LD_VAR 0 1
60011: PPUSH
60012: CALL_OW 437
60016: PUSH
60017: LD_INT 1
60019: ARRAY
60020: PUSH
60021: LD_INT 2
60023: ARRAY
60024: EQUAL
60025: AND
60026: PUSH
60027: LD_VAR 0 3
60031: PUSH
60032: LD_VAR 0 1
60036: PPUSH
60037: CALL_OW 437
60041: PUSH
60042: LD_INT 1
60044: ARRAY
60045: PUSH
60046: LD_INT 3
60048: ARRAY
60049: EQUAL
60050: AND
60051: IFFALSE 60061
// result := true ;
60053: LD_ADDR_VAR 0 4
60057: PUSH
60058: LD_INT 1
60060: ST_TO_ADDR
// end ; end ;
60061: LD_VAR 0 4
60065: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60066: LD_INT 0
60068: PPUSH
60069: PPUSH
60070: PPUSH
60071: PPUSH
// if not unit or not area then
60072: LD_VAR 0 1
60076: NOT
60077: PUSH
60078: LD_VAR 0 2
60082: NOT
60083: OR
60084: IFFALSE 60088
// exit ;
60086: GO 60252
// tmp := AreaToList ( area , i ) ;
60088: LD_ADDR_VAR 0 6
60092: PUSH
60093: LD_VAR 0 2
60097: PPUSH
60098: LD_VAR 0 5
60102: PPUSH
60103: CALL_OW 517
60107: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60108: LD_ADDR_VAR 0 5
60112: PUSH
60113: DOUBLE
60114: LD_INT 1
60116: DEC
60117: ST_TO_ADDR
60118: LD_VAR 0 6
60122: PUSH
60123: LD_INT 1
60125: ARRAY
60126: PUSH
60127: FOR_TO
60128: IFFALSE 60250
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60130: LD_ADDR_VAR 0 7
60134: PUSH
60135: LD_VAR 0 6
60139: PUSH
60140: LD_INT 1
60142: ARRAY
60143: PUSH
60144: LD_VAR 0 5
60148: ARRAY
60149: PUSH
60150: LD_VAR 0 6
60154: PUSH
60155: LD_INT 2
60157: ARRAY
60158: PUSH
60159: LD_VAR 0 5
60163: ARRAY
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60169: LD_VAR 0 7
60173: PUSH
60174: LD_INT 1
60176: ARRAY
60177: PPUSH
60178: LD_VAR 0 7
60182: PUSH
60183: LD_INT 2
60185: ARRAY
60186: PPUSH
60187: CALL_OW 428
60191: PUSH
60192: LD_INT 0
60194: EQUAL
60195: IFFALSE 60248
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60197: LD_VAR 0 1
60201: PPUSH
60202: LD_VAR 0 7
60206: PUSH
60207: LD_INT 1
60209: ARRAY
60210: PPUSH
60211: LD_VAR 0 7
60215: PUSH
60216: LD_INT 2
60218: ARRAY
60219: PPUSH
60220: LD_VAR 0 3
60224: PPUSH
60225: CALL_OW 48
// result := IsPlaced ( unit ) ;
60229: LD_ADDR_VAR 0 4
60233: PUSH
60234: LD_VAR 0 1
60238: PPUSH
60239: CALL_OW 305
60243: ST_TO_ADDR
// exit ;
60244: POP
60245: POP
60246: GO 60252
// end ; end ;
60248: GO 60127
60250: POP
60251: POP
// end ;
60252: LD_VAR 0 4
60256: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60257: LD_INT 0
60259: PPUSH
60260: PPUSH
60261: PPUSH
// if not side or side > 8 then
60262: LD_VAR 0 1
60266: NOT
60267: PUSH
60268: LD_VAR 0 1
60272: PUSH
60273: LD_INT 8
60275: GREATER
60276: OR
60277: IFFALSE 60281
// exit ;
60279: GO 60468
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60281: LD_ADDR_VAR 0 4
60285: PUSH
60286: LD_INT 22
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 21
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PPUSH
60312: CALL_OW 69
60316: ST_TO_ADDR
// if not tmp then
60317: LD_VAR 0 4
60321: NOT
60322: IFFALSE 60326
// exit ;
60324: GO 60468
// enable_addtolog := true ;
60326: LD_ADDR_OWVAR 81
60330: PUSH
60331: LD_INT 1
60333: ST_TO_ADDR
// AddToLog ( [ ) ;
60334: LD_STRING [
60336: PPUSH
60337: CALL_OW 561
// for i in tmp do
60341: LD_ADDR_VAR 0 3
60345: PUSH
60346: LD_VAR 0 4
60350: PUSH
60351: FOR_IN
60352: IFFALSE 60459
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60354: LD_STRING [
60356: PUSH
60357: LD_VAR 0 3
60361: PPUSH
60362: CALL_OW 266
60366: STR
60367: PUSH
60368: LD_STRING , 
60370: STR
60371: PUSH
60372: LD_VAR 0 3
60376: PPUSH
60377: CALL_OW 250
60381: STR
60382: PUSH
60383: LD_STRING , 
60385: STR
60386: PUSH
60387: LD_VAR 0 3
60391: PPUSH
60392: CALL_OW 251
60396: STR
60397: PUSH
60398: LD_STRING , 
60400: STR
60401: PUSH
60402: LD_VAR 0 3
60406: PPUSH
60407: CALL_OW 254
60411: STR
60412: PUSH
60413: LD_STRING , 
60415: STR
60416: PUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: LD_INT 1
60424: PPUSH
60425: CALL_OW 268
60429: STR
60430: PUSH
60431: LD_STRING , 
60433: STR
60434: PUSH
60435: LD_VAR 0 3
60439: PPUSH
60440: LD_INT 2
60442: PPUSH
60443: CALL_OW 268
60447: STR
60448: PUSH
60449: LD_STRING ],
60451: STR
60452: PPUSH
60453: CALL_OW 561
// end ;
60457: GO 60351
60459: POP
60460: POP
// AddToLog ( ]; ) ;
60461: LD_STRING ];
60463: PPUSH
60464: CALL_OW 561
// end ;
60468: LD_VAR 0 2
60472: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60473: LD_INT 0
60475: PPUSH
60476: PPUSH
60477: PPUSH
60478: PPUSH
60479: PPUSH
// if not area or not rate or not max then
60480: LD_VAR 0 1
60484: NOT
60485: PUSH
60486: LD_VAR 0 2
60490: NOT
60491: OR
60492: PUSH
60493: LD_VAR 0 4
60497: NOT
60498: OR
60499: IFFALSE 60503
// exit ;
60501: GO 60695
// while 1 do
60503: LD_INT 1
60505: IFFALSE 60695
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60507: LD_ADDR_VAR 0 9
60511: PUSH
60512: LD_VAR 0 1
60516: PPUSH
60517: LD_INT 1
60519: PPUSH
60520: CALL_OW 287
60524: PUSH
60525: LD_INT 10
60527: MUL
60528: ST_TO_ADDR
// r := rate / 10 ;
60529: LD_ADDR_VAR 0 7
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_INT 10
60541: DIVREAL
60542: ST_TO_ADDR
// time := 1 1$00 ;
60543: LD_ADDR_VAR 0 8
60547: PUSH
60548: LD_INT 2100
60550: ST_TO_ADDR
// if amount < min then
60551: LD_VAR 0 9
60555: PUSH
60556: LD_VAR 0 3
60560: LESS
60561: IFFALSE 60579
// r := r * 2 else
60563: LD_ADDR_VAR 0 7
60567: PUSH
60568: LD_VAR 0 7
60572: PUSH
60573: LD_INT 2
60575: MUL
60576: ST_TO_ADDR
60577: GO 60605
// if amount > max then
60579: LD_VAR 0 9
60583: PUSH
60584: LD_VAR 0 4
60588: GREATER
60589: IFFALSE 60605
// r := r / 2 ;
60591: LD_ADDR_VAR 0 7
60595: PUSH
60596: LD_VAR 0 7
60600: PUSH
60601: LD_INT 2
60603: DIVREAL
60604: ST_TO_ADDR
// time := time / r ;
60605: LD_ADDR_VAR 0 8
60609: PUSH
60610: LD_VAR 0 8
60614: PUSH
60615: LD_VAR 0 7
60619: DIVREAL
60620: ST_TO_ADDR
// if time < 0 then
60621: LD_VAR 0 8
60625: PUSH
60626: LD_INT 0
60628: LESS
60629: IFFALSE 60646
// time := time * - 1 ;
60631: LD_ADDR_VAR 0 8
60635: PUSH
60636: LD_VAR 0 8
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: MUL
60645: ST_TO_ADDR
// wait ( time ) ;
60646: LD_VAR 0 8
60650: PPUSH
60651: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60655: LD_INT 35
60657: PPUSH
60658: LD_INT 875
60660: PPUSH
60661: CALL_OW 12
60665: PPUSH
60666: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60670: LD_INT 1
60672: PPUSH
60673: LD_INT 5
60675: PPUSH
60676: CALL_OW 12
60680: PPUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: LD_INT 1
60688: PPUSH
60689: CALL_OW 55
// end ;
60693: GO 60503
// end ;
60695: LD_VAR 0 5
60699: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60700: LD_INT 0
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
60708: PPUSH
60709: PPUSH
// if not turrets or not factories then
60710: LD_VAR 0 1
60714: NOT
60715: PUSH
60716: LD_VAR 0 2
60720: NOT
60721: OR
60722: IFFALSE 60726
// exit ;
60724: GO 61033
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60726: LD_ADDR_VAR 0 10
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: LD_INT 6
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: LD_INT 5
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 24
60768: PUSH
60769: LD_INT 25
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 23
60778: PUSH
60779: LD_INT 27
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 42
60792: PUSH
60793: LD_INT 43
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 44
60802: PUSH
60803: LD_INT 46
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 45
60812: PUSH
60813: LD_INT 47
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// result := [ ] ;
60830: LD_ADDR_VAR 0 3
60834: PUSH
60835: EMPTY
60836: ST_TO_ADDR
// for i in turrets do
60837: LD_ADDR_VAR 0 4
60841: PUSH
60842: LD_VAR 0 1
60846: PUSH
60847: FOR_IN
60848: IFFALSE 61031
// begin nat := GetNation ( i ) ;
60850: LD_ADDR_VAR 0 7
60854: PUSH
60855: LD_VAR 0 4
60859: PPUSH
60860: CALL_OW 248
60864: ST_TO_ADDR
// weapon := 0 ;
60865: LD_ADDR_VAR 0 8
60869: PUSH
60870: LD_INT 0
60872: ST_TO_ADDR
// if not nat then
60873: LD_VAR 0 7
60877: NOT
60878: IFFALSE 60882
// continue ;
60880: GO 60847
// for j in list [ nat ] do
60882: LD_ADDR_VAR 0 5
60886: PUSH
60887: LD_VAR 0 10
60891: PUSH
60892: LD_VAR 0 7
60896: ARRAY
60897: PUSH
60898: FOR_IN
60899: IFFALSE 60940
// if GetBWeapon ( i ) = j [ 1 ] then
60901: LD_VAR 0 4
60905: PPUSH
60906: CALL_OW 269
60910: PUSH
60911: LD_VAR 0 5
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: EQUAL
60920: IFFALSE 60938
// begin weapon := j [ 2 ] ;
60922: LD_ADDR_VAR 0 8
60926: PUSH
60927: LD_VAR 0 5
60931: PUSH
60932: LD_INT 2
60934: ARRAY
60935: ST_TO_ADDR
// break ;
60936: GO 60940
// end ;
60938: GO 60898
60940: POP
60941: POP
// if not weapon then
60942: LD_VAR 0 8
60946: NOT
60947: IFFALSE 60951
// continue ;
60949: GO 60847
// for k in factories do
60951: LD_ADDR_VAR 0 6
60955: PUSH
60956: LD_VAR 0 2
60960: PUSH
60961: FOR_IN
60962: IFFALSE 61027
// begin weapons := AvailableWeaponList ( k ) ;
60964: LD_ADDR_VAR 0 9
60968: PUSH
60969: LD_VAR 0 6
60973: PPUSH
60974: CALL_OW 478
60978: ST_TO_ADDR
// if not weapons then
60979: LD_VAR 0 9
60983: NOT
60984: IFFALSE 60988
// continue ;
60986: GO 60961
// if weapon in weapons then
60988: LD_VAR 0 8
60992: PUSH
60993: LD_VAR 0 9
60997: IN
60998: IFFALSE 61025
// begin result := [ i , weapon ] ;
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: LD_VAR 0 4
61009: PUSH
61010: LD_VAR 0 8
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: ST_TO_ADDR
// exit ;
61019: POP
61020: POP
61021: POP
61022: POP
61023: GO 61033
// end ; end ;
61025: GO 60961
61027: POP
61028: POP
// end ;
61029: GO 60847
61031: POP
61032: POP
// end ;
61033: LD_VAR 0 3
61037: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61038: LD_INT 0
61040: PPUSH
// if not side or side > 8 then
61041: LD_VAR 0 3
61045: NOT
61046: PUSH
61047: LD_VAR 0 3
61051: PUSH
61052: LD_INT 8
61054: GREATER
61055: OR
61056: IFFALSE 61060
// exit ;
61058: GO 61119
// if not range then
61060: LD_VAR 0 4
61064: NOT
61065: IFFALSE 61076
// range := - 12 ;
61067: LD_ADDR_VAR 0 4
61071: PUSH
61072: LD_INT 12
61074: NEG
61075: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61076: LD_VAR 0 1
61080: PPUSH
61081: LD_VAR 0 2
61085: PPUSH
61086: LD_VAR 0 3
61090: PPUSH
61091: LD_VAR 0 4
61095: PPUSH
61096: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61100: LD_VAR 0 1
61104: PPUSH
61105: LD_VAR 0 2
61109: PPUSH
61110: LD_VAR 0 3
61114: PPUSH
61115: CALL_OW 331
// end ;
61119: LD_VAR 0 5
61123: RET
// export function Video ( mode ) ; begin
61124: LD_INT 0
61126: PPUSH
// ingame_video = mode ;
61127: LD_ADDR_OWVAR 52
61131: PUSH
61132: LD_VAR 0 1
61136: ST_TO_ADDR
// interface_hidden = mode ;
61137: LD_ADDR_OWVAR 54
61141: PUSH
61142: LD_VAR 0 1
61146: ST_TO_ADDR
// end ;
61147: LD_VAR 0 2
61151: RET
// export function Join ( array , element ) ; begin
61152: LD_INT 0
61154: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_VAR 0 1
61169: PUSH
61170: LD_INT 1
61172: PLUS
61173: PPUSH
61174: LD_VAR 0 2
61178: PPUSH
61179: CALL_OW 1
61183: ST_TO_ADDR
// end ;
61184: LD_VAR 0 3
61188: RET
// export function JoinUnion ( array , element ) ; begin
61189: LD_INT 0
61191: PPUSH
// result := array union element ;
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: PUSH
61202: LD_VAR 0 2
61206: UNION
61207: ST_TO_ADDR
// end ;
61208: LD_VAR 0 3
61212: RET
// export function GetBehemoths ( side ) ; begin
61213: LD_INT 0
61215: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61216: LD_ADDR_VAR 0 2
61220: PUSH
61221: LD_INT 22
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 31
61235: PUSH
61236: LD_INT 25
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PPUSH
61247: CALL_OW 69
61251: ST_TO_ADDR
// end ;
61252: LD_VAR 0 2
61256: RET
// export function Shuffle ( array ) ; var i , index ; begin
61257: LD_INT 0
61259: PPUSH
61260: PPUSH
61261: PPUSH
// result := [ ] ;
61262: LD_ADDR_VAR 0 2
61266: PUSH
61267: EMPTY
61268: ST_TO_ADDR
// if not array then
61269: LD_VAR 0 1
61273: NOT
61274: IFFALSE 61278
// exit ;
61276: GO 61377
// Randomize ;
61278: CALL_OW 10
// for i = array downto 1 do
61282: LD_ADDR_VAR 0 3
61286: PUSH
61287: DOUBLE
61288: LD_VAR 0 1
61292: INC
61293: ST_TO_ADDR
61294: LD_INT 1
61296: PUSH
61297: FOR_DOWNTO
61298: IFFALSE 61375
// begin index := rand ( 1 , array ) ;
61300: LD_ADDR_VAR 0 4
61304: PUSH
61305: LD_INT 1
61307: PPUSH
61308: LD_VAR 0 1
61312: PPUSH
61313: CALL_OW 12
61317: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61318: LD_ADDR_VAR 0 2
61322: PUSH
61323: LD_VAR 0 2
61327: PPUSH
61328: LD_VAR 0 2
61332: PUSH
61333: LD_INT 1
61335: PLUS
61336: PPUSH
61337: LD_VAR 0 1
61341: PUSH
61342: LD_VAR 0 4
61346: ARRAY
61347: PPUSH
61348: CALL_OW 2
61352: ST_TO_ADDR
// array := Delete ( array , index ) ;
61353: LD_ADDR_VAR 0 1
61357: PUSH
61358: LD_VAR 0 1
61362: PPUSH
61363: LD_VAR 0 4
61367: PPUSH
61368: CALL_OW 3
61372: ST_TO_ADDR
// end ;
61373: GO 61297
61375: POP
61376: POP
// end ;
61377: LD_VAR 0 2
61381: RET
// export function GetBaseMaterials ( base ) ; begin
61382: LD_INT 0
61384: PPUSH
// result := [ 0 , 0 , 0 ] ;
61385: LD_ADDR_VAR 0 2
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: ST_TO_ADDR
// if not base then
61404: LD_VAR 0 1
61408: NOT
61409: IFFALSE 61413
// exit ;
61411: GO 61462
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61413: LD_ADDR_VAR 0 2
61417: PUSH
61418: LD_VAR 0 1
61422: PPUSH
61423: LD_INT 1
61425: PPUSH
61426: CALL_OW 275
61430: PUSH
61431: LD_VAR 0 1
61435: PPUSH
61436: LD_INT 2
61438: PPUSH
61439: CALL_OW 275
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: LD_INT 3
61451: PPUSH
61452: CALL_OW 275
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: ST_TO_ADDR
// end ;
61462: LD_VAR 0 2
61466: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61467: LD_INT 0
61469: PPUSH
61470: PPUSH
// result := array ;
61471: LD_ADDR_VAR 0 3
61475: PUSH
61476: LD_VAR 0 1
61480: ST_TO_ADDR
// if size > 0 then
61481: LD_VAR 0 2
61485: PUSH
61486: LD_INT 0
61488: GREATER
61489: IFFALSE 61535
// for i := array downto size do
61491: LD_ADDR_VAR 0 4
61495: PUSH
61496: DOUBLE
61497: LD_VAR 0 1
61501: INC
61502: ST_TO_ADDR
61503: LD_VAR 0 2
61507: PUSH
61508: FOR_DOWNTO
61509: IFFALSE 61533
// result := Delete ( result , result ) ;
61511: LD_ADDR_VAR 0 3
61515: PUSH
61516: LD_VAR 0 3
61520: PPUSH
61521: LD_VAR 0 3
61525: PPUSH
61526: CALL_OW 3
61530: ST_TO_ADDR
61531: GO 61508
61533: POP
61534: POP
// end ;
61535: LD_VAR 0 3
61539: RET
// export function ComExit ( unit ) ; var tmp ; begin
61540: LD_INT 0
61542: PPUSH
61543: PPUSH
// if not IsInUnit ( unit ) then
61544: LD_VAR 0 1
61548: PPUSH
61549: CALL_OW 310
61553: NOT
61554: IFFALSE 61558
// exit ;
61556: GO 61618
// tmp := IsInUnit ( unit ) ;
61558: LD_ADDR_VAR 0 3
61562: PUSH
61563: LD_VAR 0 1
61567: PPUSH
61568: CALL_OW 310
61572: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61573: LD_VAR 0 3
61577: PPUSH
61578: CALL_OW 247
61582: PUSH
61583: LD_INT 2
61585: EQUAL
61586: IFFALSE 61599
// ComExitVehicle ( unit ) else
61588: LD_VAR 0 1
61592: PPUSH
61593: CALL_OW 121
61597: GO 61608
// ComExitBuilding ( unit ) ;
61599: LD_VAR 0 1
61603: PPUSH
61604: CALL_OW 122
// result := tmp ;
61608: LD_ADDR_VAR 0 2
61612: PUSH
61613: LD_VAR 0 3
61617: ST_TO_ADDR
// end ;
61618: LD_VAR 0 2
61622: RET
// export function ComExitAll ( units ) ; var i ; begin
61623: LD_INT 0
61625: PPUSH
61626: PPUSH
// if not units then
61627: LD_VAR 0 1
61631: NOT
61632: IFFALSE 61636
// exit ;
61634: GO 61662
// for i in units do
61636: LD_ADDR_VAR 0 3
61640: PUSH
61641: LD_VAR 0 1
61645: PUSH
61646: FOR_IN
61647: IFFALSE 61660
// ComExit ( i ) ;
61649: LD_VAR 0 3
61653: PPUSH
61654: CALL 61540 0 1
61658: GO 61646
61660: POP
61661: POP
// end ;
61662: LD_VAR 0 2
61666: RET
// export function ResetHc ; begin
61667: LD_INT 0
61669: PPUSH
// InitHc ;
61670: CALL_OW 19
// hc_importance := 0 ;
61674: LD_ADDR_OWVAR 32
61678: PUSH
61679: LD_INT 0
61681: ST_TO_ADDR
// end ;
61682: LD_VAR 0 1
61686: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61687: LD_INT 0
61689: PPUSH
61690: PPUSH
61691: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61692: LD_ADDR_VAR 0 6
61696: PUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_VAR 0 3
61706: PLUS
61707: PUSH
61708: LD_INT 2
61710: DIV
61711: ST_TO_ADDR
// if _x < 0 then
61712: LD_VAR 0 6
61716: PUSH
61717: LD_INT 0
61719: LESS
61720: IFFALSE 61737
// _x := _x * - 1 ;
61722: LD_ADDR_VAR 0 6
61726: PUSH
61727: LD_VAR 0 6
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: MUL
61736: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61737: LD_ADDR_VAR 0 7
61741: PUSH
61742: LD_VAR 0 2
61746: PUSH
61747: LD_VAR 0 4
61751: PLUS
61752: PUSH
61753: LD_INT 2
61755: DIV
61756: ST_TO_ADDR
// if _y < 0 then
61757: LD_VAR 0 7
61761: PUSH
61762: LD_INT 0
61764: LESS
61765: IFFALSE 61782
// _y := _y * - 1 ;
61767: LD_ADDR_VAR 0 7
61771: PUSH
61772: LD_VAR 0 7
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: MUL
61781: ST_TO_ADDR
// result := [ _x , _y ] ;
61782: LD_ADDR_VAR 0 5
61786: PUSH
61787: LD_VAR 0 6
61791: PUSH
61792: LD_VAR 0 7
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// end ;
61801: LD_VAR 0 5
61805: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61806: LD_INT 0
61808: PPUSH
61809: PPUSH
61810: PPUSH
61811: PPUSH
// task := GetTaskList ( unit ) ;
61812: LD_ADDR_VAR 0 7
61816: PUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 437
61826: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61827: LD_VAR 0 7
61831: NOT
61832: PUSH
61833: LD_VAR 0 1
61837: PPUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: CALL_OW 308
61847: NOT
61848: AND
61849: IFFALSE 61853
// exit ;
61851: GO 61971
// if IsInArea ( unit , area ) then
61853: LD_VAR 0 1
61857: PPUSH
61858: LD_VAR 0 2
61862: PPUSH
61863: CALL_OW 308
61867: IFFALSE 61885
// begin ComMoveToArea ( unit , goAway ) ;
61869: LD_VAR 0 1
61873: PPUSH
61874: LD_VAR 0 3
61878: PPUSH
61879: CALL_OW 113
// exit ;
61883: GO 61971
// end ; if task [ 1 ] [ 1 ] <> M then
61885: LD_VAR 0 7
61889: PUSH
61890: LD_INT 1
61892: ARRAY
61893: PUSH
61894: LD_INT 1
61896: ARRAY
61897: PUSH
61898: LD_STRING M
61900: NONEQUAL
61901: IFFALSE 61905
// exit ;
61903: GO 61971
// x := task [ 1 ] [ 2 ] ;
61905: LD_ADDR_VAR 0 5
61909: PUSH
61910: LD_VAR 0 7
61914: PUSH
61915: LD_INT 1
61917: ARRAY
61918: PUSH
61919: LD_INT 2
61921: ARRAY
61922: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61923: LD_ADDR_VAR 0 6
61927: PUSH
61928: LD_VAR 0 7
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PUSH
61937: LD_INT 3
61939: ARRAY
61940: ST_TO_ADDR
// if InArea ( x , y , area ) then
61941: LD_VAR 0 5
61945: PPUSH
61946: LD_VAR 0 6
61950: PPUSH
61951: LD_VAR 0 2
61955: PPUSH
61956: CALL_OW 309
61960: IFFALSE 61971
// ComStop ( unit ) ;
61962: LD_VAR 0 1
61966: PPUSH
61967: CALL_OW 141
// end ;
61971: LD_VAR 0 4
61975: RET
// export function Abs ( value ) ; begin
61976: LD_INT 0
61978: PPUSH
// result := value ;
61979: LD_ADDR_VAR 0 2
61983: PUSH
61984: LD_VAR 0 1
61988: ST_TO_ADDR
// if value < 0 then
61989: LD_VAR 0 1
61993: PUSH
61994: LD_INT 0
61996: LESS
61997: IFFALSE 62014
// result := value * - 1 ;
61999: LD_ADDR_VAR 0 2
62003: PUSH
62004: LD_VAR 0 1
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: MUL
62013: ST_TO_ADDR
// end ;
62014: LD_VAR 0 2
62018: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62019: LD_INT 0
62021: PPUSH
62022: PPUSH
62023: PPUSH
62024: PPUSH
62025: PPUSH
62026: PPUSH
62027: PPUSH
62028: PPUSH
// if not unit or not building then
62029: LD_VAR 0 1
62033: NOT
62034: PUSH
62035: LD_VAR 0 2
62039: NOT
62040: OR
62041: IFFALSE 62045
// exit ;
62043: GO 62271
// x := GetX ( building ) ;
62045: LD_ADDR_VAR 0 4
62049: PUSH
62050: LD_VAR 0 2
62054: PPUSH
62055: CALL_OW 250
62059: ST_TO_ADDR
// y := GetY ( building ) ;
62060: LD_ADDR_VAR 0 6
62064: PUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: CALL_OW 251
62074: ST_TO_ADDR
// d := GetDir ( building ) ;
62075: LD_ADDR_VAR 0 8
62079: PUSH
62080: LD_VAR 0 2
62084: PPUSH
62085: CALL_OW 254
62089: ST_TO_ADDR
// r := 4 ;
62090: LD_ADDR_VAR 0 9
62094: PUSH
62095: LD_INT 4
62097: ST_TO_ADDR
// for i := 1 to 5 do
62098: LD_ADDR_VAR 0 10
62102: PUSH
62103: DOUBLE
62104: LD_INT 1
62106: DEC
62107: ST_TO_ADDR
62108: LD_INT 5
62110: PUSH
62111: FOR_TO
62112: IFFALSE 62269
// begin _x := ShiftX ( x , d , r + i ) ;
62114: LD_ADDR_VAR 0 5
62118: PUSH
62119: LD_VAR 0 4
62123: PPUSH
62124: LD_VAR 0 8
62128: PPUSH
62129: LD_VAR 0 9
62133: PUSH
62134: LD_VAR 0 10
62138: PLUS
62139: PPUSH
62140: CALL_OW 272
62144: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62145: LD_ADDR_VAR 0 7
62149: PUSH
62150: LD_VAR 0 6
62154: PPUSH
62155: LD_VAR 0 8
62159: PPUSH
62160: LD_VAR 0 9
62164: PUSH
62165: LD_VAR 0 10
62169: PLUS
62170: PPUSH
62171: CALL_OW 273
62175: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62176: LD_VAR 0 5
62180: PPUSH
62181: LD_VAR 0 7
62185: PPUSH
62186: CALL_OW 488
62190: PUSH
62191: LD_VAR 0 5
62195: PPUSH
62196: LD_VAR 0 7
62200: PPUSH
62201: CALL_OW 428
62205: PPUSH
62206: CALL_OW 247
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: IN
62221: NOT
62222: AND
62223: IFFALSE 62267
// begin ComMoveXY ( unit , _x , _y ) ;
62225: LD_VAR 0 1
62229: PPUSH
62230: LD_VAR 0 5
62234: PPUSH
62235: LD_VAR 0 7
62239: PPUSH
62240: CALL_OW 111
// result := [ _x , _y ] ;
62244: LD_ADDR_VAR 0 3
62248: PUSH
62249: LD_VAR 0 5
62253: PUSH
62254: LD_VAR 0 7
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// exit ;
62263: POP
62264: POP
62265: GO 62271
// end ; end ;
62267: GO 62111
62269: POP
62270: POP
// end ;
62271: LD_VAR 0 3
62275: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62276: LD_INT 0
62278: PPUSH
62279: PPUSH
62280: PPUSH
// result := 0 ;
62281: LD_ADDR_VAR 0 3
62285: PUSH
62286: LD_INT 0
62288: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62289: LD_VAR 0 1
62293: PUSH
62294: LD_INT 0
62296: LESS
62297: PUSH
62298: LD_VAR 0 1
62302: PUSH
62303: LD_INT 8
62305: GREATER
62306: OR
62307: PUSH
62308: LD_VAR 0 2
62312: PUSH
62313: LD_INT 0
62315: LESS
62316: OR
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 8
62325: GREATER
62326: OR
62327: IFFALSE 62331
// exit ;
62329: GO 62406
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62331: LD_ADDR_VAR 0 4
62335: PUSH
62336: LD_INT 22
62338: PUSH
62339: LD_VAR 0 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PPUSH
62348: CALL_OW 69
62352: PUSH
62353: FOR_IN
62354: IFFALSE 62404
// begin un := UnitShoot ( i ) ;
62356: LD_ADDR_VAR 0 5
62360: PUSH
62361: LD_VAR 0 4
62365: PPUSH
62366: CALL_OW 504
62370: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62371: LD_VAR 0 5
62375: PPUSH
62376: CALL_OW 255
62380: PUSH
62381: LD_VAR 0 1
62385: EQUAL
62386: IFFALSE 62402
// begin result := un ;
62388: LD_ADDR_VAR 0 3
62392: PUSH
62393: LD_VAR 0 5
62397: ST_TO_ADDR
// exit ;
62398: POP
62399: POP
62400: GO 62406
// end ; end ;
62402: GO 62353
62404: POP
62405: POP
// end ;
62406: LD_VAR 0 3
62410: RET
// export function GetCargoBay ( units ) ; begin
62411: LD_INT 0
62413: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62414: LD_ADDR_VAR 0 2
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 34
62429: PUSH
62430: LD_INT 12
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 34
62439: PUSH
62440: LD_INT 51
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 34
62449: PUSH
62450: LD_INT 32
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 34
62459: PUSH
62460: LD_EXP 98
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: PPUSH
62476: CALL_OW 72
62480: ST_TO_ADDR
// end ;
62481: LD_VAR 0 2
62485: RET
// export function Negate ( value ) ; begin
62486: LD_INT 0
62488: PPUSH
// result := not value ;
62489: LD_ADDR_VAR 0 2
62493: PUSH
62494: LD_VAR 0 1
62498: NOT
62499: ST_TO_ADDR
// end ;
62500: LD_VAR 0 2
62504: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62505: LD_INT 0
62507: PPUSH
// if x1 = x2 then
62508: LD_VAR 0 1
62512: PUSH
62513: LD_VAR 0 3
62517: EQUAL
62518: IFFALSE 62552
// begin if y1 > y2 then
62520: LD_VAR 0 2
62524: PUSH
62525: LD_VAR 0 4
62529: GREATER
62530: IFFALSE 62542
// result := 0 else
62532: LD_ADDR_VAR 0 5
62536: PUSH
62537: LD_INT 0
62539: ST_TO_ADDR
62540: GO 62550
// result := 3 ;
62542: LD_ADDR_VAR 0 5
62546: PUSH
62547: LD_INT 3
62549: ST_TO_ADDR
// exit ;
62550: GO 62638
// end ; if y1 = y2 then
62552: LD_VAR 0 2
62556: PUSH
62557: LD_VAR 0 4
62561: EQUAL
62562: IFFALSE 62596
// begin if x1 > x2 then
62564: LD_VAR 0 1
62568: PUSH
62569: LD_VAR 0 3
62573: GREATER
62574: IFFALSE 62586
// result := 1 else
62576: LD_ADDR_VAR 0 5
62580: PUSH
62581: LD_INT 1
62583: ST_TO_ADDR
62584: GO 62594
// result := 4 ;
62586: LD_ADDR_VAR 0 5
62590: PUSH
62591: LD_INT 4
62593: ST_TO_ADDR
// exit ;
62594: GO 62638
// end ; if x1 > x2 and y1 > y2 then
62596: LD_VAR 0 1
62600: PUSH
62601: LD_VAR 0 3
62605: GREATER
62606: PUSH
62607: LD_VAR 0 2
62611: PUSH
62612: LD_VAR 0 4
62616: GREATER
62617: AND
62618: IFFALSE 62630
// result := 2 else
62620: LD_ADDR_VAR 0 5
62624: PUSH
62625: LD_INT 2
62627: ST_TO_ADDR
62628: GO 62638
// result := 5 ;
62630: LD_ADDR_VAR 0 5
62634: PUSH
62635: LD_INT 5
62637: ST_TO_ADDR
// end ;
62638: LD_VAR 0 5
62642: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62643: LD_INT 0
62645: PPUSH
62646: PPUSH
// if not driver or not IsInUnit ( driver ) then
62647: LD_VAR 0 1
62651: NOT
62652: PUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: CALL_OW 310
62662: NOT
62663: OR
62664: IFFALSE 62668
// exit ;
62666: GO 62758
// vehicle := IsInUnit ( driver ) ;
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: LD_VAR 0 1
62677: PPUSH
62678: CALL_OW 310
62682: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62683: LD_VAR 0 1
62687: PPUSH
62688: LD_STRING \
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: PUSH
62718: LD_STRING E
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_VAR 0 3
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 446
// end ;
62758: LD_VAR 0 2
62762: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62763: LD_INT 0
62765: PPUSH
62766: PPUSH
// if not driver or not IsInUnit ( driver ) then
62767: LD_VAR 0 1
62771: NOT
62772: PUSH
62773: LD_VAR 0 1
62777: PPUSH
62778: CALL_OW 310
62782: NOT
62783: OR
62784: IFFALSE 62788
// exit ;
62786: GO 62878
// vehicle := IsInUnit ( driver ) ;
62788: LD_ADDR_VAR 0 3
62792: PUSH
62793: LD_VAR 0 1
62797: PPUSH
62798: CALL_OW 310
62802: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62803: LD_VAR 0 1
62807: PPUSH
62808: LD_STRING \
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: PUSH
62838: LD_STRING E
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_VAR 0 3
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PPUSH
62874: CALL_OW 447
// end ;
62878: LD_VAR 0 2
62882: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62883: LD_INT 0
62885: PPUSH
62886: PPUSH
62887: PPUSH
// tmp := [ ] ;
62888: LD_ADDR_VAR 0 5
62892: PUSH
62893: EMPTY
62894: ST_TO_ADDR
// for i in units do
62895: LD_ADDR_VAR 0 4
62899: PUSH
62900: LD_VAR 0 1
62904: PUSH
62905: FOR_IN
62906: IFFALSE 62944
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_VAR 0 5
62917: PPUSH
62918: LD_VAR 0 5
62922: PUSH
62923: LD_INT 1
62925: PLUS
62926: PPUSH
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL_OW 256
62936: PPUSH
62937: CALL_OW 2
62941: ST_TO_ADDR
62942: GO 62905
62944: POP
62945: POP
// if not tmp then
62946: LD_VAR 0 5
62950: NOT
62951: IFFALSE 62955
// exit ;
62953: GO 63003
// if asc then
62955: LD_VAR 0 2
62959: IFFALSE 62983
// result := SortListByListAsc ( units , tmp ) else
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_VAR 0 5
62975: PPUSH
62976: CALL_OW 76
62980: ST_TO_ADDR
62981: GO 63003
// result := SortListByListDesc ( units , tmp ) ;
62983: LD_ADDR_VAR 0 3
62987: PUSH
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_VAR 0 5
62997: PPUSH
62998: CALL_OW 77
63002: ST_TO_ADDR
// end ;
63003: LD_VAR 0 3
63007: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63008: LD_INT 0
63010: PPUSH
63011: PPUSH
// task := GetTaskList ( mech ) ;
63012: LD_ADDR_VAR 0 4
63016: PUSH
63017: LD_VAR 0 1
63021: PPUSH
63022: CALL_OW 437
63026: ST_TO_ADDR
// if not task then
63027: LD_VAR 0 4
63031: NOT
63032: IFFALSE 63036
// exit ;
63034: GO 63078
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63036: LD_ADDR_VAR 0 3
63040: PUSH
63041: LD_VAR 0 4
63045: PUSH
63046: LD_INT 1
63048: ARRAY
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PUSH
63054: LD_STRING r
63056: EQUAL
63057: PUSH
63058: LD_VAR 0 4
63062: PUSH
63063: LD_INT 1
63065: ARRAY
63066: PUSH
63067: LD_INT 4
63069: ARRAY
63070: PUSH
63071: LD_VAR 0 2
63075: EQUAL
63076: AND
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 3
63082: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63083: LD_INT 0
63085: PPUSH
// SetDir ( unit , d ) ;
63086: LD_VAR 0 1
63090: PPUSH
63091: LD_VAR 0 4
63095: PPUSH
63096: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63100: LD_VAR 0 1
63104: PPUSH
63105: LD_VAR 0 2
63109: PPUSH
63110: LD_VAR 0 3
63114: PPUSH
63115: LD_VAR 0 5
63119: PPUSH
63120: CALL_OW 48
// end ;
63124: LD_VAR 0 6
63128: RET
// export function ToNaturalNumber ( number ) ; begin
63129: LD_INT 0
63131: PPUSH
// result := number div 1 ;
63132: LD_ADDR_VAR 0 2
63136: PUSH
63137: LD_VAR 0 1
63141: PUSH
63142: LD_INT 1
63144: DIV
63145: ST_TO_ADDR
// if number < 0 then
63146: LD_VAR 0 1
63150: PUSH
63151: LD_INT 0
63153: LESS
63154: IFFALSE 63164
// result := 0 ;
63156: LD_ADDR_VAR 0 2
63160: PUSH
63161: LD_INT 0
63163: ST_TO_ADDR
// end ;
63164: LD_VAR 0 2
63168: RET
// export function SortByClass ( units , class ) ; var un ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
// if not units or not class then
63173: LD_VAR 0 1
63177: NOT
63178: PUSH
63179: LD_VAR 0 2
63183: NOT
63184: OR
63185: IFFALSE 63189
// exit ;
63187: GO 63284
// result := [ ] ;
63189: LD_ADDR_VAR 0 3
63193: PUSH
63194: EMPTY
63195: ST_TO_ADDR
// for un in units do
63196: LD_ADDR_VAR 0 4
63200: PUSH
63201: LD_VAR 0 1
63205: PUSH
63206: FOR_IN
63207: IFFALSE 63282
// if GetClass ( un ) = class then
63209: LD_VAR 0 4
63213: PPUSH
63214: CALL_OW 257
63218: PUSH
63219: LD_VAR 0 2
63223: EQUAL
63224: IFFALSE 63251
// result := Insert ( result , 1 , un ) else
63226: LD_ADDR_VAR 0 3
63230: PUSH
63231: LD_VAR 0 3
63235: PPUSH
63236: LD_INT 1
63238: PPUSH
63239: LD_VAR 0 4
63243: PPUSH
63244: CALL_OW 2
63248: ST_TO_ADDR
63249: GO 63280
// result := Replace ( result , result + 1 , un ) ;
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 3
63265: PUSH
63266: LD_INT 1
63268: PLUS
63269: PPUSH
63270: LD_VAR 0 4
63274: PPUSH
63275: CALL_OW 1
63279: ST_TO_ADDR
63280: GO 63206
63282: POP
63283: POP
// end ;
63284: LD_VAR 0 3
63288: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
63293: PPUSH
63294: PPUSH
63295: PPUSH
63296: PPUSH
63297: PPUSH
// result := [ ] ;
63298: LD_ADDR_VAR 0 4
63302: PUSH
63303: EMPTY
63304: ST_TO_ADDR
// if x - r < 0 then
63305: LD_VAR 0 1
63309: PUSH
63310: LD_VAR 0 3
63314: MINUS
63315: PUSH
63316: LD_INT 0
63318: LESS
63319: IFFALSE 63331
// min_x := 0 else
63321: LD_ADDR_VAR 0 8
63325: PUSH
63326: LD_INT 0
63328: ST_TO_ADDR
63329: GO 63347
// min_x := x - r ;
63331: LD_ADDR_VAR 0 8
63335: PUSH
63336: LD_VAR 0 1
63340: PUSH
63341: LD_VAR 0 3
63345: MINUS
63346: ST_TO_ADDR
// if y - r < 0 then
63347: LD_VAR 0 2
63351: PUSH
63352: LD_VAR 0 3
63356: MINUS
63357: PUSH
63358: LD_INT 0
63360: LESS
63361: IFFALSE 63373
// min_y := 0 else
63363: LD_ADDR_VAR 0 7
63367: PUSH
63368: LD_INT 0
63370: ST_TO_ADDR
63371: GO 63389
// min_y := y - r ;
63373: LD_ADDR_VAR 0 7
63377: PUSH
63378: LD_VAR 0 2
63382: PUSH
63383: LD_VAR 0 3
63387: MINUS
63388: ST_TO_ADDR
// max_x := x + r ;
63389: LD_ADDR_VAR 0 9
63393: PUSH
63394: LD_VAR 0 1
63398: PUSH
63399: LD_VAR 0 3
63403: PLUS
63404: ST_TO_ADDR
// max_y := y + r ;
63405: LD_ADDR_VAR 0 10
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_VAR 0 3
63419: PLUS
63420: ST_TO_ADDR
// for _x = min_x to max_x do
63421: LD_ADDR_VAR 0 5
63425: PUSH
63426: DOUBLE
63427: LD_VAR 0 8
63431: DEC
63432: ST_TO_ADDR
63433: LD_VAR 0 9
63437: PUSH
63438: FOR_TO
63439: IFFALSE 63540
// for _y = min_y to max_y do
63441: LD_ADDR_VAR 0 6
63445: PUSH
63446: DOUBLE
63447: LD_VAR 0 7
63451: DEC
63452: ST_TO_ADDR
63453: LD_VAR 0 10
63457: PUSH
63458: FOR_TO
63459: IFFALSE 63536
// begin if not ValidHex ( _x , _y ) then
63461: LD_VAR 0 5
63465: PPUSH
63466: LD_VAR 0 6
63470: PPUSH
63471: CALL_OW 488
63475: NOT
63476: IFFALSE 63480
// continue ;
63478: GO 63458
// if GetResourceTypeXY ( _x , _y ) then
63480: LD_VAR 0 5
63484: PPUSH
63485: LD_VAR 0 6
63489: PPUSH
63490: CALL_OW 283
63494: IFFALSE 63534
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63496: LD_ADDR_VAR 0 4
63500: PUSH
63501: LD_VAR 0 4
63505: PPUSH
63506: LD_VAR 0 4
63510: PUSH
63511: LD_INT 1
63513: PLUS
63514: PPUSH
63515: LD_VAR 0 5
63519: PUSH
63520: LD_VAR 0 6
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PPUSH
63529: CALL_OW 1
63533: ST_TO_ADDR
// end ;
63534: GO 63458
63536: POP
63537: POP
63538: GO 63438
63540: POP
63541: POP
// end ;
63542: LD_VAR 0 4
63546: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
63547: LD_INT 0
63549: PPUSH
63550: PPUSH
63551: PPUSH
63552: PPUSH
63553: PPUSH
63554: PPUSH
// if not units then
63555: LD_VAR 0 1
63559: NOT
63560: IFFALSE 63564
// exit ;
63562: GO 63965
// result := UnitFilter ( units , [ f_ok ] ) ;
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: LD_INT 50
63576: PUSH
63577: EMPTY
63578: LIST
63579: PPUSH
63580: CALL_OW 72
63584: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63585: LD_ADDR_VAR 0 7
63589: PUSH
63590: LD_VAR 0 1
63594: PUSH
63595: LD_INT 1
63597: ARRAY
63598: PPUSH
63599: CALL_OW 255
63603: ST_TO_ADDR
// if not result then
63604: LD_VAR 0 3
63608: NOT
63609: IFFALSE 63613
// exit ;
63611: GO 63965
// for i in result do
63613: LD_ADDR_VAR 0 4
63617: PUSH
63618: LD_VAR 0 3
63622: PUSH
63623: FOR_IN
63624: IFFALSE 63963
// begin tag := GetTag ( i ) + 1 ;
63626: LD_ADDR_VAR 0 8
63630: PUSH
63631: LD_VAR 0 4
63635: PPUSH
63636: CALL_OW 110
63640: PUSH
63641: LD_INT 1
63643: PLUS
63644: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63645: LD_ADDR_VAR 0 6
63649: PUSH
63650: LD_VAR 0 4
63654: PPUSH
63655: CALL_OW 250
63659: PPUSH
63660: LD_VAR 0 4
63664: PPUSH
63665: CALL_OW 251
63669: PPUSH
63670: LD_INT 6
63672: PPUSH
63673: CALL 63289 0 3
63677: ST_TO_ADDR
// if cr then
63678: LD_VAR 0 6
63682: IFFALSE 63721
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63684: LD_VAR 0 4
63688: PPUSH
63689: LD_VAR 0 6
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: PPUSH
63702: LD_VAR 0 6
63706: PUSH
63707: LD_INT 1
63709: ARRAY
63710: PUSH
63711: LD_INT 2
63713: ARRAY
63714: PPUSH
63715: CALL_OW 116
63719: GO 63961
// if path > tag then
63721: LD_VAR 0 2
63725: PUSH
63726: LD_VAR 0 8
63730: GREATER
63731: IFFALSE 63909
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
63733: LD_ADDR_VAR 0 5
63737: PUSH
63738: LD_INT 81
63740: PUSH
63741: LD_VAR 0 7
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 91
63752: PUSH
63753: LD_VAR 0 4
63757: PUSH
63758: LD_INT 12
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PPUSH
63770: CALL_OW 69
63774: ST_TO_ADDR
// if enemy then
63775: LD_VAR 0 5
63779: IFFALSE 63807
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63781: LD_VAR 0 4
63785: PPUSH
63786: LD_VAR 0 5
63790: PPUSH
63791: LD_VAR 0 4
63795: PPUSH
63796: CALL_OW 74
63800: PPUSH
63801: CALL_OW 115
63805: GO 63907
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_VAR 0 2
63816: PUSH
63817: LD_VAR 0 8
63821: ARRAY
63822: PUSH
63823: LD_INT 1
63825: ARRAY
63826: PPUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_VAR 0 8
63836: ARRAY
63837: PUSH
63838: LD_INT 2
63840: ARRAY
63841: PPUSH
63842: CALL_OW 297
63846: PUSH
63847: LD_INT 6
63849: GREATER
63850: IFFALSE 63893
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63852: LD_VAR 0 4
63856: PPUSH
63857: LD_VAR 0 2
63861: PUSH
63862: LD_VAR 0 8
63866: ARRAY
63867: PUSH
63868: LD_INT 1
63870: ARRAY
63871: PPUSH
63872: LD_VAR 0 2
63876: PUSH
63877: LD_VAR 0 8
63881: ARRAY
63882: PUSH
63883: LD_INT 2
63885: ARRAY
63886: PPUSH
63887: CALL_OW 114
63891: GO 63907
// SetTag ( i , tag ) ;
63893: LD_VAR 0 4
63897: PPUSH
63898: LD_VAR 0 8
63902: PPUSH
63903: CALL_OW 109
// end else
63907: GO 63961
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63909: LD_ADDR_VAR 0 5
63913: PUSH
63914: LD_INT 81
63916: PUSH
63917: LD_VAR 0 7
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PPUSH
63926: CALL_OW 69
63930: ST_TO_ADDR
// if enemy then
63931: LD_VAR 0 5
63935: IFFALSE 63961
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63937: LD_VAR 0 4
63941: PPUSH
63942: LD_VAR 0 5
63946: PPUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: CALL_OW 74
63956: PPUSH
63957: CALL_OW 115
// end ; end ;
63961: GO 63623
63963: POP
63964: POP
// end ; end_of_file
63965: LD_VAR 0 3
63969: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 200
63977: DOUBLE
63978: GREATEREQUAL
63979: IFFALSE 63987
63981: LD_INT 299
63983: DOUBLE
63984: LESSEQUAL
63985: IFTRUE 63989
63987: GO 64021
63989: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63990: LD_VAR 0 1
63994: PPUSH
63995: LD_VAR 0 2
63999: PPUSH
64000: LD_VAR 0 3
64004: PPUSH
64005: LD_VAR 0 4
64009: PPUSH
64010: LD_VAR 0 5
64014: PPUSH
64015: CALL 20364 0 5
64019: GO 64098
64021: LD_INT 300
64023: DOUBLE
64024: GREATEREQUAL
64025: IFFALSE 64033
64027: LD_INT 399
64029: DOUBLE
64030: LESSEQUAL
64031: IFTRUE 64035
64033: GO 64097
64035: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64036: LD_VAR 0 1
64040: PPUSH
64041: LD_VAR 0 2
64045: PPUSH
64046: LD_VAR 0 3
64050: PPUSH
64051: LD_VAR 0 4
64055: PPUSH
64056: LD_VAR 0 5
64060: PPUSH
64061: LD_VAR 0 6
64065: PPUSH
64066: LD_VAR 0 7
64070: PPUSH
64071: LD_VAR 0 8
64075: PPUSH
64076: LD_VAR 0 9
64080: PPUSH
64081: LD_VAR 0 10
64085: PPUSH
64086: LD_VAR 0 11
64090: PPUSH
64091: CALL 18262 0 11
64095: GO 64098
64097: POP
// end ;
64098: PPOPN 11
64100: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64101: LD_VAR 0 1
64105: PPUSH
64106: LD_VAR 0 2
64110: PPUSH
64111: LD_VAR 0 3
64115: PPUSH
64116: LD_VAR 0 4
64120: PPUSH
64121: LD_VAR 0 5
64125: PPUSH
64126: CALL 20356 0 5
// end ; end_of_file
64130: PPOPN 5
64132: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64133: LD_VAR 0 1
64137: PPUSH
64138: LD_VAR 0 2
64142: PPUSH
64143: LD_VAR 0 3
64147: PPUSH
64148: LD_VAR 0 4
64152: PPUSH
64153: LD_VAR 0 5
64157: PPUSH
64158: LD_VAR 0 6
64162: PPUSH
64163: CALL 6457 0 6
// end ;
64167: PPOPN 6
64169: END
