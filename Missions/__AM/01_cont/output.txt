// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26692 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26692 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26692 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26692 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64141 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68060 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68060 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68060 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3350
// begin PlaceUnitXY ( Cyrus , 125 , 42 , false ) ;
3332: LD_EXP 18
3336: PPUSH
3337: LD_INT 125
3339: PPUSH
3340: LD_INT 42
3342: PPUSH
3343: LD_INT 0
3345: PPUSH
3346: CALL_OW 48
// end ; AddComCrawl ( Cyrus ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 197
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3364: LD_EXP 3
3368: IFFALSE 3962
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin wait_points := 0 ;
3376: LD_ADDR_VAR 0 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3384: LD_INT 70
3386: PPUSH
3387: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3391: LD_EXP 21
3395: PPUSH
3396: LD_INT 79
3398: PPUSH
3399: LD_INT 83
3401: PPUSH
3402: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3406: LD_EXP 21
3410: PUSH
3411: LD_INT 2
3413: ARRAY
3414: PPUSH
3415: LD_STRING D1R-Rus1-1
3417: PPUSH
3418: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3422: LD_EXP 21
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: LD_STRING D1R-Rus2-1
3433: PPUSH
3434: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3438: LD_EXP 22
3442: PPUSH
3443: LD_INT 91
3445: PPUSH
3446: LD_INT 80
3448: PPUSH
3449: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3453: LD_INT 35
3455: PPUSH
3456: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3460: LD_EXP 21
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: PPUSH
3469: LD_INT 79
3471: PPUSH
3472: LD_INT 82
3474: PPUSH
3475: CALL_OW 297
3479: PUSH
3480: LD_INT 6
3482: LESS
3483: IFFALSE 3453
// if not IsInArea ( JMM , jmm_spot ) then
3485: LD_EXP 16
3489: PPUSH
3490: LD_INT 5
3492: PPUSH
3493: CALL_OW 308
3497: NOT
3498: IFFALSE 3518
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3500: LD_EXP 21
3504: PUSH
3505: LD_INT 1
3507: ARRAY
3508: PPUSH
3509: LD_STRING D1Ra-Rus2-1
3511: PPUSH
3512: CALL_OW 88
3516: GO 3585
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3518: LD_EXP 21
3522: PUSH
3523: LD_INT 2
3525: ARRAY
3526: PPUSH
3527: LD_STRING D1Rb-Rus1-1
3529: PPUSH
3530: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3534: LD_EXP 21
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: PPUSH
3543: LD_STRING D1Rb-Rus2-1
3545: PPUSH
3546: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3550: LD_EXP 21
3554: PUSH
3555: LD_EXP 22
3559: ADD
3560: PPUSH
3561: LD_EXP 16
3565: PPUSH
3566: CALL_OW 250
3570: PPUSH
3571: LD_EXP 16
3575: PPUSH
3576: CALL_OW 251
3580: PPUSH
3581: CALL_OW 114
// end ; wait_points := 10 ;
3585: LD_ADDR_VAR 0 1
3589: PUSH
3590: LD_INT 10
3592: ST_TO_ADDR
// if Difficulty > 1 then
3593: LD_OWVAR 67
3597: PUSH
3598: LD_INT 1
3600: GREATER
3601: IFFALSE 3683
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 78
3610: PPUSH
3611: LD_INT 95
3613: PPUSH
3614: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3618: LD_EXP 21
3622: PPUSH
3623: LD_INT 175
3625: PPUSH
3626: CALL_OW 202
// wait_points := wait_points + 15 ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: LD_VAR 0 1
3639: PUSH
3640: LD_INT 15
3642: PLUS
3643: ST_TO_ADDR
// if Difficulty > 2 then
3644: LD_OWVAR 67
3648: PUSH
3649: LD_INT 2
3651: GREATER
3652: IFFALSE 3683
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3654: LD_EXP 21
3658: PPUSH
3659: LD_INT 65
3661: PPUSH
3662: LD_INT 79
3664: PPUSH
3665: CALL_OW 174
// wait_points := wait_points + 5 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 5
3681: PLUS
3682: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3683: LD_INT 35
3685: PPUSH
3686: CALL_OW 67
// wait_points := wait_points - 1 ;
3690: LD_ADDR_VAR 0 1
3694: PUSH
3695: LD_VAR 0 1
3699: PUSH
3700: LD_INT 1
3702: MINUS
3703: ST_TO_ADDR
// if See ( 3 , JMM ) then
3704: LD_INT 3
3706: PPUSH
3707: LD_EXP 16
3711: PPUSH
3712: CALL_OW 292
3716: IFFALSE 3770
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3718: LD_EXP 21
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: PPUSH
3727: LD_STRING D1Rb-Rus1-1
3729: PPUSH
3730: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3734: LD_EXP 21
3738: PPUSH
3739: LD_EXP 16
3743: PPUSH
3744: CALL_OW 250
3748: PPUSH
3749: LD_EXP 16
3753: PPUSH
3754: CALL_OW 251
3758: PPUSH
3759: CALL_OW 114
// Wait ( 0 0$03 ) ;
3763: LD_INT 105
3765: PPUSH
3766: CALL_OW 67
// end ; until wait_points = 0 ;
3770: LD_VAR 0 1
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3683
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3780: LD_EXP 21
3784: PUSH
3785: LD_INT 2
3787: ARRAY
3788: PPUSH
3789: LD_STRING D1Rc-Rus1-1
3791: PPUSH
3792: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3796: LD_EXP 21
3800: PUSH
3801: LD_INT 1
3803: ARRAY
3804: PPUSH
3805: LD_STRING D1Ra-Rus2-1a
3807: PPUSH
3808: CALL_OW 88
// active_powell_dialog := true ;
3812: LD_ADDR_EXP 15
3816: PUSH
3817: LD_INT 1
3819: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3820: LD_EXP 21
3824: PPUSH
3825: LD_INT 45
3827: PPUSH
3828: LD_INT 5
3830: PPUSH
3831: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3835: LD_EXP 22
3839: PPUSH
3840: LD_INT 26
3842: PPUSH
3843: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3847: LD_INT 35
3849: PPUSH
3850: CALL_OW 67
// if See ( 3 , JMM ) then
3854: LD_INT 3
3856: PPUSH
3857: LD_EXP 16
3861: PPUSH
3862: CALL_OW 292
3866: IFFALSE 3922
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3868: LD_EXP 21
3872: PUSH
3873: LD_INT 2
3875: ARRAY
3876: PPUSH
3877: LD_STRING D1Rb-Rus1-1
3879: PPUSH
3880: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3884: LD_EXP 21
3888: PPUSH
3889: LD_EXP 16
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_EXP 16
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 114
// Wait ( 0 0$50 ) ;
3913: LD_INT 1750
3915: PPUSH
3916: CALL_OW 67
// end else
3920: GO 3937
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3922: LD_EXP 21
3926: PPUSH
3927: LD_INT 45
3929: PPUSH
3930: LD_INT 5
3932: PPUSH
3933: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3937: LD_EXP 21
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_INT 45
3948: PPUSH
3949: LD_INT 5
3951: PPUSH
3952: CALL_OW 297
3956: PUSH
3957: LD_INT 10
3959: LESS
3960: IFFALSE 3847
// end ;
3962: PPOPN 1
3964: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 92
3977: PUSH
3978: LD_INT 80
3980: PUSH
3981: LD_INT 83
3983: PUSH
3984: LD_INT 6
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PPUSH
3997: CALL_OW 69
4001: PUSH
4002: LD_OWVAR 67
4006: PUSH
4007: LD_INT 1
4009: EQUAL
4010: AND
4011: IFFALSE 4092
4013: GO 4015
4015: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4016: LD_INT 80
4018: PPUSH
4019: LD_INT 83
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 7
4027: NEG
4028: PPUSH
4029: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4033: LD_INT 35
4035: PPUSH
4036: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4040: LD_INT 22
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 92
4052: PUSH
4053: LD_INT 80
4055: PUSH
4056: LD_INT 83
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: NOT
4077: IFFALSE 4033
// RemoveSeeing ( 80 , 83 , 1 ) ;
4079: LD_INT 80
4081: PPUSH
4082: LD_INT 83
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL_OW 331
// end ;
4092: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4093: LD_EXP 16
4097: PPUSH
4098: LD_EXP 17
4102: PPUSH
4103: CALL_OW 296
4107: PUSH
4108: LD_INT 6
4110: LESS
4111: PUSH
4112: LD_EXP 17
4116: PPUSH
4117: CALL_OW 302
4121: AND
4122: IFFALSE 4581
4124: GO 4126
4126: DISABLE
// begin ComWalk ( Bobby ) ;
4127: LD_EXP 17
4131: PPUSH
4132: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4136: LD_EXP 17
4140: PPUSH
4141: LD_EXP 16
4145: PPUSH
4146: CALL_OW 250
4150: PPUSH
4151: LD_EXP 16
4155: PPUSH
4156: CALL_OW 251
4160: PPUSH
4161: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4165: LD_INT 35
4167: PPUSH
4168: CALL_OW 67
// until See ( 4 , JMM ) ;
4172: LD_INT 4
4174: PPUSH
4175: LD_EXP 16
4179: PPUSH
4180: CALL_OW 292
4184: IFFALSE 4165
// InGameOn ;
4186: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_EXP 17
4199: PPUSH
4200: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4204: LD_EXP 7
4208: PUSH
4209: LD_EXP 18
4213: PPUSH
4214: CALL_OW 302
4218: AND
4219: PUSH
4220: LD_EXP 16
4224: PPUSH
4225: LD_EXP 18
4229: PPUSH
4230: CALL_OW 296
4234: PUSH
4235: LD_INT 10
4237: LESS
4238: AND
4239: IFFALSE 4284
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4241: LD_EXP 18
4245: PPUSH
4246: LD_EXP 16
4250: PPUSH
4251: CALL_OW 250
4255: PPUSH
4256: LD_EXP 16
4260: PPUSH
4261: CALL_OW 251
4265: PPUSH
4266: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4270: LD_EXP 18
4274: PPUSH
4275: LD_EXP 17
4279: PPUSH
4280: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4284: LD_EXP 16
4288: PPUSH
4289: LD_STRING D2-JMM-1
4291: PPUSH
4292: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4296: LD_INT 10
4298: PPUSH
4299: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4303: LD_EXP 17
4307: PPUSH
4308: LD_EXP 16
4312: PPUSH
4313: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4317: LD_EXP 17
4321: PPUSH
4322: LD_STRING D2-Bobby-1
4324: PPUSH
4325: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4329: LD_EXP 16
4333: PPUSH
4334: LD_STRING D2-JMM-2
4336: PPUSH
4337: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4341: LD_EXP 17
4345: PPUSH
4346: LD_EXP 16
4350: PPUSH
4351: CALL_OW 250
4355: PPUSH
4356: LD_EXP 16
4360: PPUSH
4361: CALL_OW 251
4365: PPUSH
4366: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4370: LD_EXP 17
4374: PPUSH
4375: LD_STRING D2-Bobby-2
4377: PPUSH
4378: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4382: LD_EXP 16
4386: PPUSH
4387: LD_STRING D2-JMM-3
4389: PPUSH
4390: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4394: LD_EXP 17
4398: PPUSH
4399: LD_EXP 16
4403: PPUSH
4404: CALL_OW 119
// DialogueOn ;
4408: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4412: LD_EXP 17
4416: PPUSH
4417: LD_STRING D2-Bobby-3
4419: PPUSH
4420: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4424: LD_EXP 16
4428: PPUSH
4429: LD_STRING D2-JMM-4
4431: PPUSH
4432: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4436: LD_EXP 17
4440: PPUSH
4441: LD_STRING D2-Bobby-4
4443: PPUSH
4444: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4448: LD_EXP 16
4452: PPUSH
4453: LD_STRING D2-JMM-5
4455: PPUSH
4456: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4460: LD_EXP 17
4464: PPUSH
4465: LD_STRING D2-Bobby-5
4467: PPUSH
4468: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4472: LD_EXP 16
4476: PPUSH
4477: LD_STRING D2-JMM-6
4479: PPUSH
4480: CALL_OW 88
// if not powell_contact then
4484: LD_EXP 5
4488: NOT
4489: IFFALSE 4515
// begin Say ( Bobby , D2-Bobby-6 ) ;
4491: LD_EXP 17
4495: PPUSH
4496: LD_STRING D2-Bobby-6
4498: PPUSH
4499: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4503: LD_EXP 16
4507: PPUSH
4508: LD_STRING D2-JMM-7
4510: PPUSH
4511: CALL_OW 88
// end ; DialogueOff ;
4515: CALL_OW 7
// InGameOff ;
4519: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_INT 1
4530: PPUSH
4531: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4535: LD_EXP 16
4539: PUSH
4540: LD_EXP 17
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 139
// bobby_in_squad := true ;
4553: LD_ADDR_EXP 4
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4561: LD_EXP 5
4565: PUSH
4566: LD_EXP 7
4570: NOT
4571: AND
4572: IFFALSE 4581
// ChangeMissionObjectives ( M2b ) ;
4574: LD_STRING M2b
4576: PPUSH
4577: CALL_OW 337
// end ;
4581: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4582: LD_EXP 3
4586: PUSH
4587: LD_OWVAR 67
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4630
4598: GO 4600
4600: DISABLE
// begin wait ( 1 1$00 ) ;
4601: LD_INT 2100
4603: PPUSH
4604: CALL_OW 67
// if not bobby_in_squad then
4608: LD_EXP 4
4612: NOT
4613: IFFALSE 4630
// ComMoveXY ( Bobby , 75 , 83 ) ;
4615: LD_EXP 17
4619: PPUSH
4620: LD_INT 75
4622: PPUSH
4623: LD_INT 83
4625: PPUSH
4626: CALL_OW 111
// end ;
4630: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4631: LD_EXP 7
4635: PUSH
4636: LD_EXP 4
4640: NOT
4641: AND
4642: IFFALSE 4671
4644: GO 4646
4646: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4647: LD_EXP 17
4651: PPUSH
4652: LD_INT 105
4654: PPUSH
4655: LD_INT 97
4657: PPUSH
4658: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4662: LD_EXP 17
4666: PPUSH
4667: CALL_OW 197
// end ;
4671: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4672: LD_EXP 16
4676: PPUSH
4677: LD_INT 6
4679: PPUSH
4680: CALL_OW 308
4684: PUSH
4685: LD_EXP 16
4689: PPUSH
4690: LD_EXP 17
4694: PPUSH
4695: CALL_OW 296
4699: PUSH
4700: LD_INT 7
4702: LESS
4703: AND
4704: PUSH
4705: LD_EXP 4
4709: AND
4710: IFFALSE 4757
4712: GO 4714
4714: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4715: LD_EXP 16
4719: PUSH
4720: LD_EXP 17
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PPUSH
4729: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4733: LD_EXP 16
4737: PPUSH
4738: LD_STRING D2a-JMM-1
4740: PPUSH
4741: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4745: LD_EXP 17
4749: PPUSH
4750: LD_STRING D2a-Bobby-1
4752: PPUSH
4753: CALL_OW 88
// end ;
4757: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4758: LD_EXP 15
4762: PUSH
4763: LD_INT 3
4765: PPUSH
4766: LD_EXP 16
4770: PPUSH
4771: CALL_OW 292
4775: NOT
4776: AND
4777: IFFALSE 4948
4779: GO 4781
4781: DISABLE
// begin wait ( 0 0$5 ) ;
4782: LD_INT 175
4784: PPUSH
4785: CALL_OW 67
// InGameOn ;
4789: CALL_OW 8
// DialogueOn ;
4793: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4797: LD_EXP 19
4801: PPUSH
4802: LD_STRING D3-Pow-1
4804: PPUSH
4805: CALL 68060 0 2
// Say ( JMM , D3-JMM-1 ) ;
4809: LD_EXP 16
4813: PPUSH
4814: LD_STRING D3-JMM-1
4816: PPUSH
4817: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4821: LD_EXP 19
4825: PPUSH
4826: LD_STRING D3-Pow-2
4828: PPUSH
4829: CALL 68060 0 2
// Say ( JMM , D3-JMM-2 ) ;
4833: LD_EXP 16
4837: PPUSH
4838: LD_STRING D3-JMM-2
4840: PPUSH
4841: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4845: LD_EXP 19
4849: PPUSH
4850: LD_STRING D3-Pow-3
4852: PPUSH
4853: CALL 68060 0 2
// DialogueOff ;
4857: CALL_OW 7
// InGameOff ;
4861: CALL_OW 9
// powell_contact := true ;
4865: LD_ADDR_EXP 5
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4873: LD_INT 10
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 424
// uc_side := 4 ;
4883: LD_ADDR_OWVAR 20
4887: PUSH
4888: LD_INT 4
4890: ST_TO_ADDR
// uc_nation := 1 ;
4891: LD_ADDR_OWVAR 21
4895: PUSH
4896: LD_INT 1
4898: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4899: LD_ADDR_EXP 19
4903: PUSH
4904: LD_STRING Powell
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: LD_STRING 
4912: PPUSH
4913: CALL 26692 0 3
4917: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4918: LD_STRING M2
4920: PPUSH
4921: CALL_OW 337
// if not bobby_in_squad then
4925: LD_EXP 4
4929: NOT
4930: IFFALSE 4941
// ChangeMissionObjectives ( M2a ) else
4932: LD_STRING M2a
4934: PPUSH
4935: CALL_OW 337
4939: GO 4948
// ChangeMissionObjectives ( M2b ) ;
4941: LD_STRING M2b
4943: PPUSH
4944: CALL_OW 337
// end ;
4948: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4949: LD_EXP 16
4953: PPUSH
4954: LD_INT 7
4956: PPUSH
4957: CALL_OW 308
4961: IFFALSE 5096
4963: GO 4965
4965: DISABLE
// begin DialogueOn ;
4966: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
4970: LD_EXP 20
4974: PPUSH
4975: LD_STRING D4-Rus3-1
4977: PPUSH
4978: CALL 68060 0 2
// DialogueOff ;
4982: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4986: LD_STRING M3a
4988: PPUSH
4989: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4993: LD_INT 11
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 424
// Wait ( 0 0$02 ) ;
5003: LD_INT 70
5005: PPUSH
5006: CALL_OW 67
// DialogueOn ;
5010: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5014: LD_EXP 19
5018: PPUSH
5019: LD_STRING D4-Pow-1
5021: PPUSH
5022: CALL_OW 586
// DialogueOff ;
5026: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5030: LD_STRING M3b
5032: PPUSH
5033: CALL_OW 337
// case Query ( Q1 ) of 1 :
5037: LD_STRING Q1
5039: PPUSH
5040: CALL_OW 97
5044: PUSH
5045: LD_INT 1
5047: DOUBLE
5048: EQUAL
5049: IFTRUE 5053
5051: GO 5084
5053: POP
// begin macmilan_use_radio := true ;
5054: LD_ADDR_EXP 6
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// DialogueOn ;
5062: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5066: LD_EXP 16
5070: PPUSH
5071: LD_STRING D4a-JMM-1
5073: PPUSH
5074: CALL_OW 88
// DialogueOff ;
5078: CALL_OW 7
// end ; 2 :
5082: GO 5096
5084: LD_INT 2
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5095
5092: POP
// ; end ;
5093: GO 5096
5095: POP
// end ;
5096: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5097: LD_EXP 16
5101: PPUSH
5102: LD_EXP 18
5106: PPUSH
5107: CALL_OW 296
5111: PUSH
5112: LD_INT 8
5114: LESS
5115: PUSH
5116: LD_EXP 18
5120: PPUSH
5121: CALL_OW 302
5125: AND
5126: IFFALSE 5417
5128: GO 5130
5130: DISABLE
// begin InGameOn ;
5131: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5135: LD_EXP 16
5139: PPUSH
5140: LD_EXP 18
5144: PPUSH
5145: CALL_OW 250
5149: PPUSH
5150: LD_EXP 18
5154: PPUSH
5155: CALL_OW 251
5159: PPUSH
5160: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5164: LD_EXP 17
5168: PPUSH
5169: CALL_OW 302
5173: PUSH
5174: LD_EXP 4
5178: AND
5179: IFFALSE 5210
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5181: LD_EXP 17
5185: PPUSH
5186: LD_EXP 16
5190: PPUSH
5191: CALL_OW 250
5195: PPUSH
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 251
5205: PPUSH
5206: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5210: LD_EXP 16
5214: PPUSH
5215: LD_STRING D5-JMM-1
5217: PPUSH
5218: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5222: LD_INT 10
5224: PPUSH
5225: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5229: LD_EXP 16
5233: PPUSH
5234: LD_EXP 18
5238: PPUSH
5239: CALL_OW 119
// ComWalk ( Cyrus ) ;
5243: LD_EXP 18
5247: PPUSH
5248: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5252: LD_EXP 18
5256: PPUSH
5257: LD_EXP 16
5261: PPUSH
5262: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5266: LD_EXP 18
5270: PPUSH
5271: LD_STRING D5-Cyrus-1
5273: PPUSH
5274: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5278: LD_EXP 17
5282: PPUSH
5283: CALL_OW 302
5287: PUSH
5288: LD_EXP 4
5292: AND
5293: IFFALSE 5333
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5295: LD_EXP 17
5299: PPUSH
5300: LD_EXP 18
5304: PPUSH
5305: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5309: LD_EXP 17
5313: PPUSH
5314: LD_STRING D5-Bobby-1
5316: PPUSH
5317: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-2
5328: PPUSH
5329: CALL_OW 88
// end ; InGameOff ;
5333: CALL_OW 9
// cyrus_in_squad := true ;
5337: LD_ADDR_EXP 7
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5345: LD_EXP 18
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5357: LD_EXP 5
5361: PUSH
5362: LD_EXP 4
5366: NOT
5367: AND
5368: IFFALSE 5377
// ChangeMissionObjectives ( M2b ) ;
5370: LD_STRING M2b
5372: PPUSH
5373: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5377: LD_EXP 4
5381: NOT
5382: PUSH
5383: LD_EXP 17
5387: PPUSH
5388: CALL_OW 255
5392: PUSH
5393: LD_INT 4
5395: EQUAL
5396: AND
5397: PUSH
5398: LD_EXP 17
5402: PPUSH
5403: CALL_OW 302
5407: AND
5408: IFFALSE 5417
// SetAchievement ( ACH_CYRUS ) ;
5410: LD_STRING ACH_CYRUS
5412: PPUSH
5413: CALL_OW 543
// end ;
5417: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5418: LD_EXP 4
5422: PUSH
5423: LD_EXP 7
5427: AND
5428: IFFALSE 5440
5430: GO 5432
5432: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5433: LD_STRING M2c
5435: PPUSH
5436: CALL_OW 337
5440: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5441: LD_EXP 16
5445: PPUSH
5446: LD_INT 8
5448: PPUSH
5449: CALL_OW 308
5453: IFFALSE 5505
5455: GO 5457
5457: DISABLE
// begin macmilan_in_trap := true ;
5458: LD_ADDR_EXP 9
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5466: LD_INT 35
5468: PPUSH
5469: CALL_OW 67
// DialogueOn ;
5473: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5477: LD_EXP 27
5481: PPUSH
5482: LD_STRING D5-Pok-1
5484: PPUSH
5485: CALL_OW 88
// DialogueOff ;
5489: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5493: LD_EXP 16
5497: PPUSH
5498: LD_STRING D4b-JMM-1
5500: PPUSH
5501: CALL_OW 88
// end ;
5505: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5506: LD_EXP 16
5510: PPUSH
5511: LD_INT 13
5513: PPUSH
5514: CALL_OW 308
5518: PUSH
5519: LD_EXP 16
5523: PPUSH
5524: LD_EXP 24
5528: PUSH
5529: LD_EXP 24
5533: ARRAY
5534: PPUSH
5535: CALL_OW 296
5539: PUSH
5540: LD_INT 12
5542: LESS
5543: AND
5544: PUSH
5545: LD_EXP 24
5549: PPUSH
5550: LD_INT 3
5552: PUSH
5553: LD_INT 24
5555: PUSH
5556: LD_INT 990
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: OR
5572: IFFALSE 5810
5574: GO 5576
5576: DISABLE
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5581: LD_ADDR_VAR 0 2
5585: PUSH
5586: LD_INT 300
5588: PUSH
5589: LD_INT 250
5591: PUSH
5592: LD_INT 200
5594: PUSH
5595: LD_INT 150
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: LD_OWVAR 67
5608: ARRAY
5609: ST_TO_ADDR
// for i in russian_meta_guards do
5610: LD_ADDR_VAR 0 1
5614: PUSH
5615: LD_EXP 24
5619: PUSH
5620: FOR_IN
5621: IFFALSE 5661
// if IsOk ( i ) then
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 302
5632: IFFALSE 5659
// SetLives ( i , GetLives ( i ) - hp ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 256
5648: PUSH
5649: LD_VAR 0 2
5653: MINUS
5654: PPUSH
5655: CALL_OW 234
5659: GO 5620
5661: POP
5662: POP
// DialogueOn ;
5663: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5667: LD_EXP 24
5671: PUSH
5672: LD_EXP 24
5676: ARRAY
5677: PPUSH
5678: LD_STRING D6-FRus1-1
5680: PPUSH
5681: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5685: LD_EXP 16
5689: PPUSH
5690: LD_STRING D6-JMM-1
5692: PPUSH
5693: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5697: LD_EXP 18
5701: PPUSH
5702: CALL_OW 302
5706: PUSH
5707: LD_EXP 7
5711: AND
5712: IFFALSE 5726
// Say ( Cyrus , D6-Cyrus-1 ) ;
5714: LD_EXP 18
5718: PPUSH
5719: LD_STRING D6-Cyrus-1
5721: PPUSH
5722: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5726: LD_EXP 17
5730: PPUSH
5731: CALL_OW 302
5735: PUSH
5736: LD_EXP 4
5740: AND
5741: IFFALSE 5755
// Say ( Bobby , D6-Bobby-1 ) ;
5743: LD_EXP 17
5747: PPUSH
5748: LD_STRING D6-Bobby-1
5750: PPUSH
5751: CALL_OW 88
// DialogueOff ;
5755: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5759: LD_INT 140
5761: PUSH
5762: LD_INT 105
5764: PUSH
5765: LD_INT 70
5767: PUSH
5768: LD_INT 70
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_OWVAR 67
5781: ARRAY
5782: PPUSH
5783: CALL_OW 67
// meta_action := true ;
5787: LD_ADDR_EXP 10
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5795: LD_EXP 24
5799: PPUSH
5800: LD_INT 94
5802: PPUSH
5803: LD_INT 8
5805: PPUSH
5806: CALL_OW 114
// end ;
5810: PPOPN 2
5812: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5813: LD_EXP 16
5817: PPUSH
5818: LD_INT 14
5820: PPUSH
5821: CALL_OW 308
5825: IFFALSE 5837
5827: GO 5829
5829: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5830: LD_STRING ACH_SECRET
5832: PPUSH
5833: CALL_OW 543
5837: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5838: LD_EXP 16
5842: PPUSH
5843: LD_INT 93
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: CALL_OW 297
5853: PUSH
5854: LD_INT 5
5856: LESS
5857: PUSH
5858: LD_INT 22
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: PUSH
5873: LD_INT 1
5875: GREATER
5876: AND
5877: IFFALSE 5894
5879: GO 5881
5881: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5882: LD_EXP 16
5886: PPUSH
5887: LD_STRING D6a-JMM-1
5889: PPUSH
5890: CALL_OW 88
5894: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5895: LD_EXP 17
5899: PPUSH
5900: LD_INT 10
5902: PPUSH
5903: CALL_OW 308
5907: PUSH
5908: LD_EXP 17
5912: PPUSH
5913: LD_INT 12
5915: PPUSH
5916: CALL_OW 308
5920: OR
5921: IFFALSE 5970
5923: GO 5925
5925: DISABLE
// begin bobby_saved := true ;
5926: LD_ADDR_EXP 12
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5934: LD_EXP 17
5938: PPUSH
5939: CALL_OW 256
5943: PPUSH
5944: LD_STRING 01_BobbyLifePoints_1
5946: PPUSH
5947: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5951: LD_EXP 17
5955: PPUSH
5956: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5960: LD_STRING Bobby
5962: PPUSH
5963: LD_INT 1
5965: PPUSH
5966: CALL_OW 101
// end ;
5970: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
5971: LD_EXP 18
5975: PPUSH
5976: LD_INT 10
5978: PPUSH
5979: CALL_OW 308
5983: PUSH
5984: LD_EXP 18
5988: PPUSH
5989: LD_INT 12
5991: PPUSH
5992: CALL_OW 308
5996: OR
5997: IFFALSE 6046
5999: GO 6001
6001: DISABLE
// begin cyrus_saved := true ;
6002: LD_ADDR_EXP 13
6006: PUSH
6007: LD_INT 1
6009: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6010: LD_EXP 18
6014: PPUSH
6015: CALL_OW 256
6019: PPUSH
6020: LD_STRING 01_CyrusLifePoints_1
6022: PPUSH
6023: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6027: LD_EXP 18
6031: PPUSH
6032: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6036: LD_STRING Cyrus
6038: PPUSH
6039: LD_INT 1
6041: PPUSH
6042: CALL_OW 101
// end ;
6046: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6047: LD_EXP 16
6051: PPUSH
6052: LD_INT 10
6054: PPUSH
6055: CALL_OW 308
6059: PUSH
6060: LD_EXP 16
6064: PPUSH
6065: LD_INT 12
6067: PPUSH
6068: CALL_OW 308
6072: OR
6073: IFFALSE 6681
6075: GO 6077
6077: DISABLE
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
6083: PPUSH
6084: PPUSH
6085: PPUSH
// begin if macmilan_use_radio then
6086: LD_EXP 6
6090: IFFALSE 6099
// SetAchievement ( ACH_RADIO ) ;
6092: LD_STRING ACH_RADIO
6094: PPUSH
6095: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6099: LD_EXP 13
6103: NOT
6104: PUSH
6105: LD_EXP 7
6109: AND
6110: PUSH
6111: LD_EXP 18
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_EXP 12
6126: NOT
6127: PUSH
6128: LD_EXP 4
6132: AND
6133: PUSH
6134: LD_EXP 17
6138: PPUSH
6139: CALL_OW 302
6143: AND
6144: OR
6145: IFFALSE 6186
// case Query ( Q2 ) of 1 :
6147: LD_STRING Q2
6149: PPUSH
6150: CALL_OW 97
6154: PUSH
6155: LD_INT 1
6157: DOUBLE
6158: EQUAL
6159: IFTRUE 6163
6161: GO 6174
6163: POP
// wait_for_them := true ; 2 :
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_INT 1
6171: ST_TO_ADDR
6172: GO 6186
6174: LD_INT 2
6176: DOUBLE
6177: EQUAL
6178: IFTRUE 6182
6180: GO 6185
6182: POP
// ; end ;
6183: GO 6186
6185: POP
// if wait_for_them then
6186: LD_VAR 0 3
6190: IFFALSE 6303
// repeat wait ( 0 0$01 ) ;
6192: LD_INT 35
6194: PPUSH
6195: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6199: LD_EXP 13
6203: PUSH
6204: LD_EXP 12
6208: AND
6209: PUSH
6210: LD_EXP 13
6214: PUSH
6215: LD_EXP 4
6219: NOT
6220: PUSH
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 303
6230: OR
6231: PUSH
6232: LD_EXP 17
6236: PPUSH
6237: CALL_OW 301
6241: OR
6242: AND
6243: OR
6244: PUSH
6245: LD_EXP 12
6249: PUSH
6250: LD_EXP 7
6254: NOT
6255: PUSH
6256: LD_EXP 18
6260: PPUSH
6261: CALL_OW 303
6265: OR
6266: PUSH
6267: LD_EXP 18
6271: PPUSH
6272: CALL_OW 301
6276: OR
6277: AND
6278: OR
6279: PUSH
6280: LD_EXP 17
6284: PPUSH
6285: CALL_OW 301
6289: PUSH
6290: LD_EXP 18
6294: PPUSH
6295: CALL_OW 301
6299: AND
6300: OR
6301: IFFALSE 6192
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6303: LD_EXP 16
6307: PPUSH
6308: CALL_OW 256
6312: PPUSH
6313: LD_STRING 01_JMMLifePoints_1
6315: PPUSH
6316: CALL_OW 39
// RemoveUnit ( JMM ) ;
6320: LD_EXP 16
6324: PPUSH
6325: CALL_OW 64
// to_reward := [ JMM ] ;
6329: LD_ADDR_VAR 0 2
6333: PUSH
6334: LD_EXP 16
6338: PUSH
6339: EMPTY
6340: LIST
6341: ST_TO_ADDR
// if bobby_saved then
6342: LD_EXP 12
6346: IFFALSE 6364
// to_reward := to_reward ^ Bobby ;
6348: LD_ADDR_VAR 0 2
6352: PUSH
6353: LD_VAR 0 2
6357: PUSH
6358: LD_EXP 17
6362: ADD
6363: ST_TO_ADDR
// if cyrus_saved then
6364: LD_EXP 13
6368: IFFALSE 6386
// to_reward := to_reward ^ Cyrus ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_VAR 0 2
6379: PUSH
6380: LD_EXP 18
6384: ADD
6385: ST_TO_ADDR
// m1 := true ;
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// m2 := bobby_saved ;
6394: LD_ADDR_VAR 0 5
6398: PUSH
6399: LD_EXP 12
6403: ST_TO_ADDR
// m3 := cyrus_saved ;
6404: LD_ADDR_VAR 0 6
6408: PUSH
6409: LD_EXP 13
6413: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6414: LD_STRING JMM
6416: PPUSH
6417: LD_INT 1
6419: PPUSH
6420: CALL_OW 101
// if not bobby_in_squad then
6424: LD_EXP 4
6428: NOT
6429: IFFALSE 6442
// AddMedal ( Bobby , - 1 ) ;
6431: LD_STRING Bobby
6433: PPUSH
6434: LD_INT 1
6436: NEG
6437: PPUSH
6438: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6442: LD_EXP 12
6446: NOT
6447: PUSH
6448: LD_EXP 17
6452: PPUSH
6453: CALL_OW 303
6457: PUSH
6458: LD_EXP 17
6462: PPUSH
6463: CALL_OW 301
6467: OR
6468: AND
6469: IFFALSE 6482
// AddMedal ( Bobby , - 2 ) ;
6471: LD_STRING Bobby
6473: PPUSH
6474: LD_INT 2
6476: NEG
6477: PPUSH
6478: CALL_OW 101
// if not cyrus_in_squad then
6482: LD_EXP 7
6486: NOT
6487: IFFALSE 6500
// AddMedal ( Cyrus , - 1 ) ;
6489: LD_STRING Cyrus
6491: PPUSH
6492: LD_INT 1
6494: NEG
6495: PPUSH
6496: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6500: LD_EXP 13
6504: NOT
6505: PUSH
6506: LD_EXP 18
6510: PPUSH
6511: CALL_OW 303
6515: PUSH
6516: LD_EXP 18
6520: PPUSH
6521: CALL_OW 301
6525: OR
6526: AND
6527: IFFALSE 6540
// AddMedal ( Cyrus , - 2 ) ;
6529: LD_STRING Cyrus
6531: PPUSH
6532: LD_INT 2
6534: NEG
6535: PPUSH
6536: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6540: LD_OWVAR 67
6544: PUSH
6545: LD_INT 3
6547: GREATEREQUAL
6548: PUSH
6549: LD_VAR 0 4
6553: AND
6554: PUSH
6555: LD_VAR 0 5
6559: AND
6560: PUSH
6561: LD_VAR 0 6
6565: AND
6566: IFFALSE 6578
// SetAchievementEX ( ACH_AMER , 1 ) ;
6568: LD_STRING ACH_AMER
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 564
// GiveMedals ( MAIN ) ;
6578: LD_STRING MAIN
6580: PPUSH
6581: CALL_OW 102
// RewardPeople ( to_reward ) ;
6585: LD_VAR 0 2
6589: PPUSH
6590: CALL_OW 43
// if bobby_saved then
6594: LD_EXP 12
6598: IFFALSE 6618
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6600: LD_EXP 17
6604: PPUSH
6605: LD_EXP 2
6609: PUSH
6610: LD_STRING Bobby
6612: STR
6613: PPUSH
6614: CALL_OW 38
// if cyrus_saved then
6618: LD_EXP 13
6622: IFFALSE 6642
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6624: LD_EXP 18
6628: PPUSH
6629: LD_EXP 2
6633: PUSH
6634: LD_STRING Cyrus
6636: STR
6637: PPUSH
6638: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6642: LD_EXP 16
6646: PPUSH
6647: LD_EXP 2
6651: PUSH
6652: LD_STRING JMM
6654: STR
6655: PPUSH
6656: CALL_OW 38
// if tick <= 3 3$00 then
6660: LD_OWVAR 1
6664: PUSH
6665: LD_INT 6300
6667: LESSEQUAL
6668: IFFALSE 6677
// SetAchievement ( ACH_ASPEED_1 ) ;
6670: LD_STRING ACH_ASPEED_1
6672: PPUSH
6673: CALL_OW 543
// YouWin ;
6677: CALL_OW 103
// end ; end_of_file
6681: PPOPN 6
6683: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6684: LD_VAR 0 1
6688: PUSH
6689: LD_EXP 16
6693: EQUAL
6694: IFFALSE 6703
// YouLost ( JMM ) ;
6696: LD_STRING JMM
6698: PPUSH
6699: CALL_OW 104
// end ;
6703: PPOPN 1
6705: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6706: LD_VAR 0 1
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: CALL 22523 0 2
// end ;
6720: PPOPN 2
6722: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL 22403 0 1
// if un = JMM then
6732: LD_VAR 0 1
6736: PUSH
6737: LD_EXP 16
6741: EQUAL
6742: IFFALSE 6751
// YouLost ( JMM ) ;
6744: LD_STRING JMM
6746: PPUSH
6747: CALL_OW 104
// end ; end_of_file end_of_file
6751: PPOPN 1
6753: END
// every 0 0$1 do
6754: GO 6756
6756: DISABLE
// begin enable ;
6757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6758: LD_STRING updateTimer(
6760: PUSH
6761: LD_OWVAR 1
6765: STR
6766: PUSH
6767: LD_STRING );
6769: STR
6770: PPUSH
6771: CALL_OW 559
// end ;
6775: END
// export function SOS_MapStart ( ) ; begin
6776: LD_INT 0
6778: PPUSH
// if streamModeActive then
6779: LD_EXP 28
6783: IFFALSE 6792
// DefineStreamItems ( true ) ;
6785: LD_INT 1
6787: PPUSH
6788: CALL 8446 0 1
// UpdateFactoryWaypoints ( ) ;
6792: CALL 21307 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6796: CALL 21564 0 0
// end ;
6800: LD_VAR 0 1
6804: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6805: LD_INT 0
6807: PPUSH
// if p2 = hack_mode then
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 100
6815: EQUAL
6816: IFFALSE 7819
// begin if not StreamModeActive then
6818: LD_EXP 28
6822: NOT
6823: IFFALSE 6833
// StreamModeActive := true ;
6825: LD_ADDR_EXP 28
6829: PUSH
6830: LD_INT 1
6832: ST_TO_ADDR
// if p3 = 0 then
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 0
6840: EQUAL
6841: IFFALSE 6847
// InitStreamMode ;
6843: CALL 7982 0 0
// if p3 = 1 then
6847: LD_VAR 0 3
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: IFFALSE 6865
// sRocket := true ;
6857: LD_ADDR_EXP 33
6861: PUSH
6862: LD_INT 1
6864: ST_TO_ADDR
// if p3 = 2 then
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 2
6872: EQUAL
6873: IFFALSE 6883
// sSpeed := true ;
6875: LD_ADDR_EXP 32
6879: PUSH
6880: LD_INT 1
6882: ST_TO_ADDR
// if p3 = 3 then
6883: LD_VAR 0 3
6887: PUSH
6888: LD_INT 3
6890: EQUAL
6891: IFFALSE 6901
// sEngine := true ;
6893: LD_ADDR_EXP 34
6897: PUSH
6898: LD_INT 1
6900: ST_TO_ADDR
// if p3 = 4 then
6901: LD_VAR 0 3
6905: PUSH
6906: LD_INT 4
6908: EQUAL
6909: IFFALSE 6919
// sSpec := true ;
6911: LD_ADDR_EXP 31
6915: PUSH
6916: LD_INT 1
6918: ST_TO_ADDR
// if p3 = 5 then
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 5
6926: EQUAL
6927: IFFALSE 6937
// sLevel := true ;
6929: LD_ADDR_EXP 35
6933: PUSH
6934: LD_INT 1
6936: ST_TO_ADDR
// if p3 = 6 then
6937: LD_VAR 0 3
6941: PUSH
6942: LD_INT 6
6944: EQUAL
6945: IFFALSE 6955
// sArmoury := true ;
6947: LD_ADDR_EXP 36
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// if p3 = 7 then
6955: LD_VAR 0 3
6959: PUSH
6960: LD_INT 7
6962: EQUAL
6963: IFFALSE 6973
// sRadar := true ;
6965: LD_ADDR_EXP 37
6969: PUSH
6970: LD_INT 1
6972: ST_TO_ADDR
// if p3 = 8 then
6973: LD_VAR 0 3
6977: PUSH
6978: LD_INT 8
6980: EQUAL
6981: IFFALSE 6991
// sBunker := true ;
6983: LD_ADDR_EXP 38
6987: PUSH
6988: LD_INT 1
6990: ST_TO_ADDR
// if p3 = 9 then
6991: LD_VAR 0 3
6995: PUSH
6996: LD_INT 9
6998: EQUAL
6999: IFFALSE 7009
// sHack := true ;
7001: LD_ADDR_EXP 39
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// if p3 = 10 then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 10
7016: EQUAL
7017: IFFALSE 7027
// sFire := true ;
7019: LD_ADDR_EXP 40
7023: PUSH
7024: LD_INT 1
7026: ST_TO_ADDR
// if p3 = 11 then
7027: LD_VAR 0 3
7031: PUSH
7032: LD_INT 11
7034: EQUAL
7035: IFFALSE 7045
// sRefresh := true ;
7037: LD_ADDR_EXP 41
7041: PUSH
7042: LD_INT 1
7044: ST_TO_ADDR
// if p3 = 12 then
7045: LD_VAR 0 3
7049: PUSH
7050: LD_INT 12
7052: EQUAL
7053: IFFALSE 7063
// sExp := true ;
7055: LD_ADDR_EXP 42
7059: PUSH
7060: LD_INT 1
7062: ST_TO_ADDR
// if p3 = 13 then
7063: LD_VAR 0 3
7067: PUSH
7068: LD_INT 13
7070: EQUAL
7071: IFFALSE 7081
// sDepot := true ;
7073: LD_ADDR_EXP 43
7077: PUSH
7078: LD_INT 1
7080: ST_TO_ADDR
// if p3 = 14 then
7081: LD_VAR 0 3
7085: PUSH
7086: LD_INT 14
7088: EQUAL
7089: IFFALSE 7099
// sFlag := true ;
7091: LD_ADDR_EXP 44
7095: PUSH
7096: LD_INT 1
7098: ST_TO_ADDR
// if p3 = 15 then
7099: LD_VAR 0 3
7103: PUSH
7104: LD_INT 15
7106: EQUAL
7107: IFFALSE 7117
// sKamikadze := true ;
7109: LD_ADDR_EXP 52
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// if p3 = 16 then
7117: LD_VAR 0 3
7121: PUSH
7122: LD_INT 16
7124: EQUAL
7125: IFFALSE 7135
// sTroll := true ;
7127: LD_ADDR_EXP 53
7131: PUSH
7132: LD_INT 1
7134: ST_TO_ADDR
// if p3 = 17 then
7135: LD_VAR 0 3
7139: PUSH
7140: LD_INT 17
7142: EQUAL
7143: IFFALSE 7153
// sSlow := true ;
7145: LD_ADDR_EXP 54
7149: PUSH
7150: LD_INT 1
7152: ST_TO_ADDR
// if p3 = 18 then
7153: LD_VAR 0 3
7157: PUSH
7158: LD_INT 18
7160: EQUAL
7161: IFFALSE 7171
// sLack := true ;
7163: LD_ADDR_EXP 55
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// if p3 = 19 then
7171: LD_VAR 0 3
7175: PUSH
7176: LD_INT 19
7178: EQUAL
7179: IFFALSE 7189
// sTank := true ;
7181: LD_ADDR_EXP 57
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// if p3 = 20 then
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 20
7196: EQUAL
7197: IFFALSE 7207
// sRemote := true ;
7199: LD_ADDR_EXP 58
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// if p3 = 21 then
7207: LD_VAR 0 3
7211: PUSH
7212: LD_INT 21
7214: EQUAL
7215: IFFALSE 7225
// sPowell := true ;
7217: LD_ADDR_EXP 59
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// if p3 = 22 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 22
7232: EQUAL
7233: IFFALSE 7243
// sTeleport := true ;
7235: LD_ADDR_EXP 62
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// if p3 = 23 then
7243: LD_VAR 0 3
7247: PUSH
7248: LD_INT 23
7250: EQUAL
7251: IFFALSE 7261
// sOilTower := true ;
7253: LD_ADDR_EXP 64
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// if p3 = 24 then
7261: LD_VAR 0 3
7265: PUSH
7266: LD_INT 24
7268: EQUAL
7269: IFFALSE 7279
// sShovel := true ;
7271: LD_ADDR_EXP 65
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// if p3 = 25 then
7279: LD_VAR 0 3
7283: PUSH
7284: LD_INT 25
7286: EQUAL
7287: IFFALSE 7297
// sSheik := true ;
7289: LD_ADDR_EXP 66
7293: PUSH
7294: LD_INT 1
7296: ST_TO_ADDR
// if p3 = 26 then
7297: LD_VAR 0 3
7301: PUSH
7302: LD_INT 26
7304: EQUAL
7305: IFFALSE 7315
// sEarthquake := true ;
7307: LD_ADDR_EXP 68
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// if p3 = 27 then
7315: LD_VAR 0 3
7319: PUSH
7320: LD_INT 27
7322: EQUAL
7323: IFFALSE 7333
// sAI := true ;
7325: LD_ADDR_EXP 69
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// if p3 = 28 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 28
7340: EQUAL
7341: IFFALSE 7351
// sCargo := true ;
7343: LD_ADDR_EXP 72
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// if p3 = 29 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 29
7358: EQUAL
7359: IFFALSE 7369
// sDLaser := true ;
7361: LD_ADDR_EXP 73
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// if p3 = 30 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 30
7376: EQUAL
7377: IFFALSE 7387
// sExchange := true ;
7379: LD_ADDR_EXP 74
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// if p3 = 31 then
7387: LD_VAR 0 3
7391: PUSH
7392: LD_INT 31
7394: EQUAL
7395: IFFALSE 7405
// sFac := true ;
7397: LD_ADDR_EXP 75
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if p3 = 32 then
7405: LD_VAR 0 3
7409: PUSH
7410: LD_INT 32
7412: EQUAL
7413: IFFALSE 7423
// sPower := true ;
7415: LD_ADDR_EXP 76
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if p3 = 33 then
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 33
7430: EQUAL
7431: IFFALSE 7441
// sRandom := true ;
7433: LD_ADDR_EXP 77
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// if p3 = 34 then
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 34
7448: EQUAL
7449: IFFALSE 7459
// sShield := true ;
7451: LD_ADDR_EXP 78
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 35 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 35
7466: EQUAL
7467: IFFALSE 7477
// sTime := true ;
7469: LD_ADDR_EXP 79
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 36 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 36
7484: EQUAL
7485: IFFALSE 7495
// sTools := true ;
7487: LD_ADDR_EXP 80
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if p3 = 101 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 101
7502: EQUAL
7503: IFFALSE 7513
// sSold := true ;
7505: LD_ADDR_EXP 45
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if p3 = 102 then
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 102
7520: EQUAL
7521: IFFALSE 7531
// sDiff := true ;
7523: LD_ADDR_EXP 46
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// if p3 = 103 then
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 103
7538: EQUAL
7539: IFFALSE 7549
// sFog := true ;
7541: LD_ADDR_EXP 49
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if p3 = 104 then
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 104
7556: EQUAL
7557: IFFALSE 7567
// sReset := true ;
7559: LD_ADDR_EXP 50
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// if p3 = 105 then
7567: LD_VAR 0 3
7571: PUSH
7572: LD_INT 105
7574: EQUAL
7575: IFFALSE 7585
// sSun := true ;
7577: LD_ADDR_EXP 51
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// if p3 = 106 then
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 106
7592: EQUAL
7593: IFFALSE 7603
// sTiger := true ;
7595: LD_ADDR_EXP 47
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// if p3 = 107 then
7603: LD_VAR 0 3
7607: PUSH
7608: LD_INT 107
7610: EQUAL
7611: IFFALSE 7621
// sBomb := true ;
7613: LD_ADDR_EXP 48
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// if p3 = 108 then
7621: LD_VAR 0 3
7625: PUSH
7626: LD_INT 108
7628: EQUAL
7629: IFFALSE 7639
// sWound := true ;
7631: LD_ADDR_EXP 56
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if p3 = 109 then
7639: LD_VAR 0 3
7643: PUSH
7644: LD_INT 109
7646: EQUAL
7647: IFFALSE 7657
// sBetray := true ;
7649: LD_ADDR_EXP 60
7653: PUSH
7654: LD_INT 1
7656: ST_TO_ADDR
// if p3 = 110 then
7657: LD_VAR 0 3
7661: PUSH
7662: LD_INT 110
7664: EQUAL
7665: IFFALSE 7675
// sContamin := true ;
7667: LD_ADDR_EXP 61
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// if p3 = 111 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 111
7682: EQUAL
7683: IFFALSE 7693
// sOil := true ;
7685: LD_ADDR_EXP 63
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// if p3 = 112 then
7693: LD_VAR 0 3
7697: PUSH
7698: LD_INT 112
7700: EQUAL
7701: IFFALSE 7711
// sStu := true ;
7703: LD_ADDR_EXP 67
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// if p3 = 113 then
7711: LD_VAR 0 3
7715: PUSH
7716: LD_INT 113
7718: EQUAL
7719: IFFALSE 7729
// sBazooka := true ;
7721: LD_ADDR_EXP 70
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// if p3 = 114 then
7729: LD_VAR 0 3
7733: PUSH
7734: LD_INT 114
7736: EQUAL
7737: IFFALSE 7747
// sMortar := true ;
7739: LD_ADDR_EXP 71
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// if p3 = 115 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 115
7754: EQUAL
7755: IFFALSE 7765
// sRanger := true ;
7757: LD_ADDR_EXP 81
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// if p3 = 116 then
7765: LD_VAR 0 3
7769: PUSH
7770: LD_INT 116
7772: EQUAL
7773: IFFALSE 7783
// sComputer := true ;
7775: LD_ADDR_EXP 82
7779: PUSH
7780: LD_INT 1
7782: ST_TO_ADDR
// if p3 = 117 then
7783: LD_VAR 0 3
7787: PUSH
7788: LD_INT 117
7790: EQUAL
7791: IFFALSE 7801
// s30 := true ;
7793: LD_ADDR_EXP 83
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// if p3 = 118 then
7801: LD_VAR 0 3
7805: PUSH
7806: LD_INT 118
7808: EQUAL
7809: IFFALSE 7819
// s60 := true ;
7811: LD_ADDR_EXP 84
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// end ; if p2 = stream_mode then
7819: LD_VAR 0 2
7823: PUSH
7824: LD_INT 101
7826: EQUAL
7827: IFFALSE 7955
// begin case p3 of 1 :
7829: LD_VAR 0 3
7833: PUSH
7834: LD_INT 1
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7849
7842: POP
// hHackUnlimitedResources ; 2 :
7843: CALL 20053 0 0
7847: GO 7955
7849: LD_INT 2
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7864
7857: POP
// hHackSetLevel10 ; 3 :
7858: CALL 20186 0 0
7862: GO 7955
7864: LD_INT 3
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7879
7872: POP
// hHackSetLevel10YourUnits ; 4 :
7873: CALL 20271 0 0
7877: GO 7955
7879: LD_INT 4
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7894
7887: POP
// hHackInvincible ; 5 :
7888: CALL 20719 0 0
7892: GO 7955
7894: LD_INT 5
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 7909
7902: POP
// hHackInvisible ; 6 :
7903: CALL 20830 0 0
7907: GO 7955
7909: LD_INT 6
7911: DOUBLE
7912: EQUAL
7913: IFTRUE 7917
7915: GO 7924
7917: POP
// hHackChangeYourSide ; 7 :
7918: CALL 20887 0 0
7922: GO 7955
7924: LD_INT 7
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7939
7932: POP
// hHackChangeUnitSide ; 8 :
7933: CALL 20929 0 0
7937: GO 7955
7939: LD_INT 8
7941: DOUBLE
7942: EQUAL
7943: IFTRUE 7947
7945: GO 7954
7947: POP
// hHackFog ; end ;
7948: CALL 21030 0 0
7952: GO 7955
7954: POP
// end ; end ;
7955: LD_VAR 0 7
7959: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7960: GO 7962
7962: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7963: LD_STRING initStreamRollete();
7965: PPUSH
7966: CALL_OW 559
// InitStreamMode ;
7970: CALL 7982 0 0
// DefineStreamItems ( false ) ;
7974: LD_INT 0
7976: PPUSH
7977: CALL 8446 0 1
// end ;
7981: END
// function InitStreamMode ; begin
7982: LD_INT 0
7984: PPUSH
// streamModeActive := false ;
7985: LD_ADDR_EXP 28
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// normalCounter := 36 ;
7993: LD_ADDR_EXP 29
7997: PUSH
7998: LD_INT 36
8000: ST_TO_ADDR
// hardcoreCounter := 18 ;
8001: LD_ADDR_EXP 30
8005: PUSH
8006: LD_INT 18
8008: ST_TO_ADDR
// sRocket := false ;
8009: LD_ADDR_EXP 33
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// sSpeed := false ;
8017: LD_ADDR_EXP 32
8021: PUSH
8022: LD_INT 0
8024: ST_TO_ADDR
// sEngine := false ;
8025: LD_ADDR_EXP 34
8029: PUSH
8030: LD_INT 0
8032: ST_TO_ADDR
// sSpec := false ;
8033: LD_ADDR_EXP 31
8037: PUSH
8038: LD_INT 0
8040: ST_TO_ADDR
// sLevel := false ;
8041: LD_ADDR_EXP 35
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// sArmoury := false ;
8049: LD_ADDR_EXP 36
8053: PUSH
8054: LD_INT 0
8056: ST_TO_ADDR
// sRadar := false ;
8057: LD_ADDR_EXP 37
8061: PUSH
8062: LD_INT 0
8064: ST_TO_ADDR
// sBunker := false ;
8065: LD_ADDR_EXP 38
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// sHack := false ;
8073: LD_ADDR_EXP 39
8077: PUSH
8078: LD_INT 0
8080: ST_TO_ADDR
// sFire := false ;
8081: LD_ADDR_EXP 40
8085: PUSH
8086: LD_INT 0
8088: ST_TO_ADDR
// sRefresh := false ;
8089: LD_ADDR_EXP 41
8093: PUSH
8094: LD_INT 0
8096: ST_TO_ADDR
// sExp := false ;
8097: LD_ADDR_EXP 42
8101: PUSH
8102: LD_INT 0
8104: ST_TO_ADDR
// sDepot := false ;
8105: LD_ADDR_EXP 43
8109: PUSH
8110: LD_INT 0
8112: ST_TO_ADDR
// sFlag := false ;
8113: LD_ADDR_EXP 44
8117: PUSH
8118: LD_INT 0
8120: ST_TO_ADDR
// sKamikadze := false ;
8121: LD_ADDR_EXP 52
8125: PUSH
8126: LD_INT 0
8128: ST_TO_ADDR
// sTroll := false ;
8129: LD_ADDR_EXP 53
8133: PUSH
8134: LD_INT 0
8136: ST_TO_ADDR
// sSlow := false ;
8137: LD_ADDR_EXP 54
8141: PUSH
8142: LD_INT 0
8144: ST_TO_ADDR
// sLack := false ;
8145: LD_ADDR_EXP 55
8149: PUSH
8150: LD_INT 0
8152: ST_TO_ADDR
// sTank := false ;
8153: LD_ADDR_EXP 57
8157: PUSH
8158: LD_INT 0
8160: ST_TO_ADDR
// sRemote := false ;
8161: LD_ADDR_EXP 58
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// sPowell := false ;
8169: LD_ADDR_EXP 59
8173: PUSH
8174: LD_INT 0
8176: ST_TO_ADDR
// sTeleport := false ;
8177: LD_ADDR_EXP 62
8181: PUSH
8182: LD_INT 0
8184: ST_TO_ADDR
// sOilTower := false ;
8185: LD_ADDR_EXP 64
8189: PUSH
8190: LD_INT 0
8192: ST_TO_ADDR
// sShovel := false ;
8193: LD_ADDR_EXP 65
8197: PUSH
8198: LD_INT 0
8200: ST_TO_ADDR
// sSheik := false ;
8201: LD_ADDR_EXP 66
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// sEarthquake := false ;
8209: LD_ADDR_EXP 68
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// sAI := false ;
8217: LD_ADDR_EXP 69
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// sCargo := false ;
8225: LD_ADDR_EXP 72
8229: PUSH
8230: LD_INT 0
8232: ST_TO_ADDR
// sDLaser := false ;
8233: LD_ADDR_EXP 73
8237: PUSH
8238: LD_INT 0
8240: ST_TO_ADDR
// sExchange := false ;
8241: LD_ADDR_EXP 74
8245: PUSH
8246: LD_INT 0
8248: ST_TO_ADDR
// sFac := false ;
8249: LD_ADDR_EXP 75
8253: PUSH
8254: LD_INT 0
8256: ST_TO_ADDR
// sPower := false ;
8257: LD_ADDR_EXP 76
8261: PUSH
8262: LD_INT 0
8264: ST_TO_ADDR
// sRandom := false ;
8265: LD_ADDR_EXP 77
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// sShield := false ;
8273: LD_ADDR_EXP 78
8277: PUSH
8278: LD_INT 0
8280: ST_TO_ADDR
// sTime := false ;
8281: LD_ADDR_EXP 79
8285: PUSH
8286: LD_INT 0
8288: ST_TO_ADDR
// sTools := false ;
8289: LD_ADDR_EXP 80
8293: PUSH
8294: LD_INT 0
8296: ST_TO_ADDR
// sSold := false ;
8297: LD_ADDR_EXP 45
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// sDiff := false ;
8305: LD_ADDR_EXP 46
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// sFog := false ;
8313: LD_ADDR_EXP 49
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// sReset := false ;
8321: LD_ADDR_EXP 50
8325: PUSH
8326: LD_INT 0
8328: ST_TO_ADDR
// sSun := false ;
8329: LD_ADDR_EXP 51
8333: PUSH
8334: LD_INT 0
8336: ST_TO_ADDR
// sTiger := false ;
8337: LD_ADDR_EXP 47
8341: PUSH
8342: LD_INT 0
8344: ST_TO_ADDR
// sBomb := false ;
8345: LD_ADDR_EXP 48
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// sWound := false ;
8353: LD_ADDR_EXP 56
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// sBetray := false ;
8361: LD_ADDR_EXP 60
8365: PUSH
8366: LD_INT 0
8368: ST_TO_ADDR
// sContamin := false ;
8369: LD_ADDR_EXP 61
8373: PUSH
8374: LD_INT 0
8376: ST_TO_ADDR
// sOil := false ;
8377: LD_ADDR_EXP 63
8381: PUSH
8382: LD_INT 0
8384: ST_TO_ADDR
// sStu := false ;
8385: LD_ADDR_EXP 67
8389: PUSH
8390: LD_INT 0
8392: ST_TO_ADDR
// sBazooka := false ;
8393: LD_ADDR_EXP 70
8397: PUSH
8398: LD_INT 0
8400: ST_TO_ADDR
// sMortar := false ;
8401: LD_ADDR_EXP 71
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// sRanger := false ;
8409: LD_ADDR_EXP 81
8413: PUSH
8414: LD_INT 0
8416: ST_TO_ADDR
// sComputer := false ;
8417: LD_ADDR_EXP 82
8421: PUSH
8422: LD_INT 0
8424: ST_TO_ADDR
// s30 := false ;
8425: LD_ADDR_EXP 83
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// s60 := false ;
8433: LD_ADDR_EXP 84
8437: PUSH
8438: LD_INT 0
8440: ST_TO_ADDR
// end ;
8441: LD_VAR 0 1
8445: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
// result := [ ] ;
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: EMPTY
8461: ST_TO_ADDR
// if campaign_id = 1 then
8462: LD_OWVAR 69
8466: PUSH
8467: LD_INT 1
8469: EQUAL
8470: IFFALSE 11636
// begin case mission_number of 1 :
8472: LD_OWVAR 70
8476: PUSH
8477: LD_INT 1
8479: DOUBLE
8480: EQUAL
8481: IFTRUE 8485
8483: GO 8561
8485: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_INT 2
8493: PUSH
8494: LD_INT 4
8496: PUSH
8497: LD_INT 11
8499: PUSH
8500: LD_INT 12
8502: PUSH
8503: LD_INT 15
8505: PUSH
8506: LD_INT 16
8508: PUSH
8509: LD_INT 22
8511: PUSH
8512: LD_INT 23
8514: PUSH
8515: LD_INT 26
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 101
8531: PUSH
8532: LD_INT 102
8534: PUSH
8535: LD_INT 106
8537: PUSH
8538: LD_INT 116
8540: PUSH
8541: LD_INT 117
8543: PUSH
8544: LD_INT 118
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: ST_TO_ADDR
8559: GO 11634
8561: LD_INT 2
8563: DOUBLE
8564: EQUAL
8565: IFTRUE 8569
8567: GO 8653
8569: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_INT 2
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: LD_INT 11
8583: PUSH
8584: LD_INT 12
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 22
8595: PUSH
8596: LD_INT 23
8598: PUSH
8599: LD_INT 26
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 101
8615: PUSH
8616: LD_INT 102
8618: PUSH
8619: LD_INT 105
8621: PUSH
8622: LD_INT 106
8624: PUSH
8625: LD_INT 108
8627: PUSH
8628: LD_INT 116
8630: PUSH
8631: LD_INT 117
8633: PUSH
8634: LD_INT 118
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: ST_TO_ADDR
8651: GO 11634
8653: LD_INT 3
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8749
8661: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8662: LD_ADDR_VAR 0 2
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: LD_INT 4
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: LD_INT 11
8678: PUSH
8679: LD_INT 12
8681: PUSH
8682: LD_INT 15
8684: PUSH
8685: LD_INT 16
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 26
8693: PUSH
8694: LD_INT 36
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 101
8711: PUSH
8712: LD_INT 102
8714: PUSH
8715: LD_INT 105
8717: PUSH
8718: LD_INT 106
8720: PUSH
8721: LD_INT 108
8723: PUSH
8724: LD_INT 116
8726: PUSH
8727: LD_INT 117
8729: PUSH
8730: LD_INT 118
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: ST_TO_ADDR
8747: GO 11634
8749: LD_INT 4
8751: DOUBLE
8752: EQUAL
8753: IFTRUE 8757
8755: GO 8853
8757: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_INT 2
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: LD_INT 5
8771: PUSH
8772: LD_INT 8
8774: PUSH
8775: LD_INT 11
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 22
8789: PUSH
8790: LD_INT 23
8792: PUSH
8793: LD_INT 26
8795: PUSH
8796: LD_INT 36
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 101
8815: PUSH
8816: LD_INT 102
8818: PUSH
8819: LD_INT 105
8821: PUSH
8822: LD_INT 106
8824: PUSH
8825: LD_INT 108
8827: PUSH
8828: LD_INT 116
8830: PUSH
8831: LD_INT 117
8833: PUSH
8834: LD_INT 118
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: ST_TO_ADDR
8851: GO 11634
8853: LD_INT 5
8855: DOUBLE
8856: EQUAL
8857: IFTRUE 8861
8859: GO 8973
8861: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8862: LD_ADDR_VAR 0 2
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: LD_INT 5
8875: PUSH
8876: LD_INT 6
8878: PUSH
8879: LD_INT 8
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_INT 23
8899: PUSH
8900: LD_INT 25
8902: PUSH
8903: LD_INT 26
8905: PUSH
8906: LD_INT 36
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 101
8927: PUSH
8928: LD_INT 102
8930: PUSH
8931: LD_INT 105
8933: PUSH
8934: LD_INT 106
8936: PUSH
8937: LD_INT 108
8939: PUSH
8940: LD_INT 109
8942: PUSH
8943: LD_INT 112
8945: PUSH
8946: LD_INT 116
8948: PUSH
8949: LD_INT 117
8951: PUSH
8952: LD_INT 118
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: ST_TO_ADDR
8971: GO 11634
8973: LD_INT 6
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9113
8981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: LD_INT 4
8992: PUSH
8993: LD_INT 5
8995: PUSH
8996: LD_INT 6
8998: PUSH
8999: LD_INT 8
9001: PUSH
9002: LD_INT 11
9004: PUSH
9005: LD_INT 12
9007: PUSH
9008: LD_INT 15
9010: PUSH
9011: LD_INT 16
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 25
9028: PUSH
9029: LD_INT 26
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 31
9037: PUSH
9038: LD_INT 32
9040: PUSH
9041: LD_INT 36
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 101
9067: PUSH
9068: LD_INT 102
9070: PUSH
9071: LD_INT 105
9073: PUSH
9074: LD_INT 106
9076: PUSH
9077: LD_INT 108
9079: PUSH
9080: LD_INT 109
9082: PUSH
9083: LD_INT 112
9085: PUSH
9086: LD_INT 116
9088: PUSH
9089: LD_INT 117
9091: PUSH
9092: LD_INT 118
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: ST_TO_ADDR
9111: GO 11634
9113: LD_INT 7
9115: DOUBLE
9116: EQUAL
9117: IFTRUE 9121
9119: GO 9233
9121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9122: LD_ADDR_VAR 0 2
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: LD_INT 4
9132: PUSH
9133: LD_INT 5
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 11
9141: PUSH
9142: LD_INT 12
9144: PUSH
9145: LD_INT 15
9147: PUSH
9148: LD_INT 16
9150: PUSH
9151: LD_INT 20
9153: PUSH
9154: LD_INT 21
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: LD_INT 23
9162: PUSH
9163: LD_INT 25
9165: PUSH
9166: LD_INT 26
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 101
9187: PUSH
9188: LD_INT 102
9190: PUSH
9191: LD_INT 103
9193: PUSH
9194: LD_INT 105
9196: PUSH
9197: LD_INT 106
9199: PUSH
9200: LD_INT 108
9202: PUSH
9203: LD_INT 112
9205: PUSH
9206: LD_INT 116
9208: PUSH
9209: LD_INT 117
9211: PUSH
9212: LD_INT 118
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: ST_TO_ADDR
9231: GO 11634
9233: LD_INT 8
9235: DOUBLE
9236: EQUAL
9237: IFTRUE 9241
9239: GO 9381
9241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: LD_INT 4
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 6
9258: PUSH
9259: LD_INT 7
9261: PUSH
9262: LD_INT 8
9264: PUSH
9265: LD_INT 11
9267: PUSH
9268: LD_INT 12
9270: PUSH
9271: LD_INT 15
9273: PUSH
9274: LD_INT 16
9276: PUSH
9277: LD_INT 20
9279: PUSH
9280: LD_INT 21
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_INT 23
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 26
9294: PUSH
9295: LD_INT 30
9297: PUSH
9298: LD_INT 31
9300: PUSH
9301: LD_INT 32
9303: PUSH
9304: LD_INT 36
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 101
9331: PUSH
9332: LD_INT 102
9334: PUSH
9335: LD_INT 103
9337: PUSH
9338: LD_INT 105
9340: PUSH
9341: LD_INT 106
9343: PUSH
9344: LD_INT 108
9346: PUSH
9347: LD_INT 109
9349: PUSH
9350: LD_INT 112
9352: PUSH
9353: LD_INT 116
9355: PUSH
9356: LD_INT 117
9358: PUSH
9359: LD_INT 118
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: ST_TO_ADDR
9379: GO 11634
9381: LD_INT 9
9383: DOUBLE
9384: EQUAL
9385: IFTRUE 9389
9387: GO 9537
9389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: LD_INT 2
9397: PUSH
9398: LD_INT 4
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 6
9406: PUSH
9407: LD_INT 7
9409: PUSH
9410: LD_INT 8
9412: PUSH
9413: LD_INT 11
9415: PUSH
9416: LD_INT 12
9418: PUSH
9419: LD_INT 15
9421: PUSH
9422: LD_INT 16
9424: PUSH
9425: LD_INT 20
9427: PUSH
9428: LD_INT 21
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 23
9436: PUSH
9437: LD_INT 25
9439: PUSH
9440: LD_INT 26
9442: PUSH
9443: LD_INT 28
9445: PUSH
9446: LD_INT 30
9448: PUSH
9449: LD_INT 31
9451: PUSH
9452: LD_INT 32
9454: PUSH
9455: LD_INT 36
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 101
9483: PUSH
9484: LD_INT 102
9486: PUSH
9487: LD_INT 103
9489: PUSH
9490: LD_INT 105
9492: PUSH
9493: LD_INT 106
9495: PUSH
9496: LD_INT 108
9498: PUSH
9499: LD_INT 109
9501: PUSH
9502: LD_INT 112
9504: PUSH
9505: LD_INT 114
9507: PUSH
9508: LD_INT 116
9510: PUSH
9511: LD_INT 117
9513: PUSH
9514: LD_INT 118
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
9535: GO 11634
9537: LD_INT 10
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9741
9545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9546: LD_ADDR_VAR 0 2
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: LD_INT 4
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 6
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: LD_INT 8
9568: PUSH
9569: LD_INT 9
9571: PUSH
9572: LD_INT 10
9574: PUSH
9575: LD_INT 11
9577: PUSH
9578: LD_INT 12
9580: PUSH
9581: LD_INT 13
9583: PUSH
9584: LD_INT 14
9586: PUSH
9587: LD_INT 15
9589: PUSH
9590: LD_INT 16
9592: PUSH
9593: LD_INT 17
9595: PUSH
9596: LD_INT 18
9598: PUSH
9599: LD_INT 19
9601: PUSH
9602: LD_INT 20
9604: PUSH
9605: LD_INT 21
9607: PUSH
9608: LD_INT 22
9610: PUSH
9611: LD_INT 23
9613: PUSH
9614: LD_INT 24
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 26
9622: PUSH
9623: LD_INT 28
9625: PUSH
9626: LD_INT 30
9628: PUSH
9629: LD_INT 31
9631: PUSH
9632: LD_INT 32
9634: PUSH
9635: LD_INT 36
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 101
9671: PUSH
9672: LD_INT 102
9674: PUSH
9675: LD_INT 103
9677: PUSH
9678: LD_INT 104
9680: PUSH
9681: LD_INT 105
9683: PUSH
9684: LD_INT 106
9686: PUSH
9687: LD_INT 107
9689: PUSH
9690: LD_INT 108
9692: PUSH
9693: LD_INT 109
9695: PUSH
9696: LD_INT 110
9698: PUSH
9699: LD_INT 111
9701: PUSH
9702: LD_INT 112
9704: PUSH
9705: LD_INT 114
9707: PUSH
9708: LD_INT 116
9710: PUSH
9711: LD_INT 117
9713: PUSH
9714: LD_INT 118
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: ST_TO_ADDR
9739: GO 11634
9741: LD_INT 11
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9953
9749: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 2
9757: PUSH
9758: LD_INT 3
9760: PUSH
9761: LD_INT 4
9763: PUSH
9764: LD_INT 5
9766: PUSH
9767: LD_INT 6
9769: PUSH
9770: LD_INT 7
9772: PUSH
9773: LD_INT 8
9775: PUSH
9776: LD_INT 9
9778: PUSH
9779: LD_INT 10
9781: PUSH
9782: LD_INT 11
9784: PUSH
9785: LD_INT 12
9787: PUSH
9788: LD_INT 13
9790: PUSH
9791: LD_INT 14
9793: PUSH
9794: LD_INT 15
9796: PUSH
9797: LD_INT 16
9799: PUSH
9800: LD_INT 17
9802: PUSH
9803: LD_INT 18
9805: PUSH
9806: LD_INT 19
9808: PUSH
9809: LD_INT 20
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 22
9817: PUSH
9818: LD_INT 23
9820: PUSH
9821: LD_INT 24
9823: PUSH
9824: LD_INT 25
9826: PUSH
9827: LD_INT 26
9829: PUSH
9830: LD_INT 28
9832: PUSH
9833: LD_INT 30
9835: PUSH
9836: LD_INT 31
9838: PUSH
9839: LD_INT 32
9841: PUSH
9842: LD_INT 34
9844: PUSH
9845: LD_INT 36
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 101
9883: PUSH
9884: LD_INT 102
9886: PUSH
9887: LD_INT 103
9889: PUSH
9890: LD_INT 104
9892: PUSH
9893: LD_INT 105
9895: PUSH
9896: LD_INT 106
9898: PUSH
9899: LD_INT 107
9901: PUSH
9902: LD_INT 108
9904: PUSH
9905: LD_INT 109
9907: PUSH
9908: LD_INT 110
9910: PUSH
9911: LD_INT 111
9913: PUSH
9914: LD_INT 112
9916: PUSH
9917: LD_INT 114
9919: PUSH
9920: LD_INT 116
9922: PUSH
9923: LD_INT 117
9925: PUSH
9926: LD_INT 118
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: ST_TO_ADDR
9951: GO 11634
9953: LD_INT 12
9955: DOUBLE
9956: EQUAL
9957: IFTRUE 9961
9959: GO 10181
9961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_INT 1
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 3
9975: PUSH
9976: LD_INT 4
9978: PUSH
9979: LD_INT 5
9981: PUSH
9982: LD_INT 6
9984: PUSH
9985: LD_INT 7
9987: PUSH
9988: LD_INT 8
9990: PUSH
9991: LD_INT 9
9993: PUSH
9994: LD_INT 10
9996: PUSH
9997: LD_INT 11
9999: PUSH
10000: LD_INT 12
10002: PUSH
10003: LD_INT 13
10005: PUSH
10006: LD_INT 14
10008: PUSH
10009: LD_INT 15
10011: PUSH
10012: LD_INT 16
10014: PUSH
10015: LD_INT 17
10017: PUSH
10018: LD_INT 18
10020: PUSH
10021: LD_INT 19
10023: PUSH
10024: LD_INT 20
10026: PUSH
10027: LD_INT 21
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 23
10035: PUSH
10036: LD_INT 24
10038: PUSH
10039: LD_INT 25
10041: PUSH
10042: LD_INT 26
10044: PUSH
10045: LD_INT 27
10047: PUSH
10048: LD_INT 28
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: LD_INT 31
10056: PUSH
10057: LD_INT 32
10059: PUSH
10060: LD_INT 33
10062: PUSH
10063: LD_INT 34
10065: PUSH
10066: LD_INT 36
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 101
10107: PUSH
10108: LD_INT 102
10110: PUSH
10111: LD_INT 103
10113: PUSH
10114: LD_INT 104
10116: PUSH
10117: LD_INT 105
10119: PUSH
10120: LD_INT 106
10122: PUSH
10123: LD_INT 107
10125: PUSH
10126: LD_INT 108
10128: PUSH
10129: LD_INT 109
10131: PUSH
10132: LD_INT 110
10134: PUSH
10135: LD_INT 111
10137: PUSH
10138: LD_INT 112
10140: PUSH
10141: LD_INT 113
10143: PUSH
10144: LD_INT 114
10146: PUSH
10147: LD_INT 116
10149: PUSH
10150: LD_INT 117
10152: PUSH
10153: LD_INT 118
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: ST_TO_ADDR
10179: GO 11634
10181: LD_INT 13
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10397
10189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: LD_INT 2
10200: PUSH
10201: LD_INT 3
10203: PUSH
10204: LD_INT 4
10206: PUSH
10207: LD_INT 5
10209: PUSH
10210: LD_INT 8
10212: PUSH
10213: LD_INT 9
10215: PUSH
10216: LD_INT 10
10218: PUSH
10219: LD_INT 11
10221: PUSH
10222: LD_INT 12
10224: PUSH
10225: LD_INT 14
10227: PUSH
10228: LD_INT 15
10230: PUSH
10231: LD_INT 16
10233: PUSH
10234: LD_INT 17
10236: PUSH
10237: LD_INT 18
10239: PUSH
10240: LD_INT 19
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 21
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 23
10254: PUSH
10255: LD_INT 24
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 26
10263: PUSH
10264: LD_INT 27
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 31
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 33
10281: PUSH
10282: LD_INT 34
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 101
10323: PUSH
10324: LD_INT 102
10326: PUSH
10327: LD_INT 103
10329: PUSH
10330: LD_INT 104
10332: PUSH
10333: LD_INT 105
10335: PUSH
10336: LD_INT 106
10338: PUSH
10339: LD_INT 107
10341: PUSH
10342: LD_INT 108
10344: PUSH
10345: LD_INT 109
10347: PUSH
10348: LD_INT 110
10350: PUSH
10351: LD_INT 111
10353: PUSH
10354: LD_INT 112
10356: PUSH
10357: LD_INT 113
10359: PUSH
10360: LD_INT 114
10362: PUSH
10363: LD_INT 116
10365: PUSH
10366: LD_INT 117
10368: PUSH
10369: LD_INT 118
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: ST_TO_ADDR
10395: GO 11634
10397: LD_INT 14
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10629
10405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: LD_INT 3
10419: PUSH
10420: LD_INT 4
10422: PUSH
10423: LD_INT 5
10425: PUSH
10426: LD_INT 6
10428: PUSH
10429: LD_INT 7
10431: PUSH
10432: LD_INT 8
10434: PUSH
10435: LD_INT 9
10437: PUSH
10438: LD_INT 10
10440: PUSH
10441: LD_INT 11
10443: PUSH
10444: LD_INT 12
10446: PUSH
10447: LD_INT 13
10449: PUSH
10450: LD_INT 14
10452: PUSH
10453: LD_INT 15
10455: PUSH
10456: LD_INT 16
10458: PUSH
10459: LD_INT 17
10461: PUSH
10462: LD_INT 18
10464: PUSH
10465: LD_INT 19
10467: PUSH
10468: LD_INT 20
10470: PUSH
10471: LD_INT 21
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_INT 23
10479: PUSH
10480: LD_INT 24
10482: PUSH
10483: LD_INT 25
10485: PUSH
10486: LD_INT 26
10488: PUSH
10489: LD_INT 27
10491: PUSH
10492: LD_INT 28
10494: PUSH
10495: LD_INT 29
10497: PUSH
10498: LD_INT 30
10500: PUSH
10501: LD_INT 31
10503: PUSH
10504: LD_INT 32
10506: PUSH
10507: LD_INT 33
10509: PUSH
10510: LD_INT 34
10512: PUSH
10513: LD_INT 36
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 101
10555: PUSH
10556: LD_INT 102
10558: PUSH
10559: LD_INT 103
10561: PUSH
10562: LD_INT 104
10564: PUSH
10565: LD_INT 105
10567: PUSH
10568: LD_INT 106
10570: PUSH
10571: LD_INT 107
10573: PUSH
10574: LD_INT 108
10576: PUSH
10577: LD_INT 109
10579: PUSH
10580: LD_INT 110
10582: PUSH
10583: LD_INT 111
10585: PUSH
10586: LD_INT 112
10588: PUSH
10589: LD_INT 113
10591: PUSH
10592: LD_INT 114
10594: PUSH
10595: LD_INT 116
10597: PUSH
10598: LD_INT 117
10600: PUSH
10601: LD_INT 118
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: ST_TO_ADDR
10627: GO 11634
10629: LD_INT 15
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10861
10637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: LD_INT 4
10654: PUSH
10655: LD_INT 5
10657: PUSH
10658: LD_INT 6
10660: PUSH
10661: LD_INT 7
10663: PUSH
10664: LD_INT 8
10666: PUSH
10667: LD_INT 9
10669: PUSH
10670: LD_INT 10
10672: PUSH
10673: LD_INT 11
10675: PUSH
10676: LD_INT 12
10678: PUSH
10679: LD_INT 13
10681: PUSH
10682: LD_INT 14
10684: PUSH
10685: LD_INT 15
10687: PUSH
10688: LD_INT 16
10690: PUSH
10691: LD_INT 17
10693: PUSH
10694: LD_INT 18
10696: PUSH
10697: LD_INT 19
10699: PUSH
10700: LD_INT 20
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 22
10708: PUSH
10709: LD_INT 23
10711: PUSH
10712: LD_INT 24
10714: PUSH
10715: LD_INT 25
10717: PUSH
10718: LD_INT 26
10720: PUSH
10721: LD_INT 27
10723: PUSH
10724: LD_INT 28
10726: PUSH
10727: LD_INT 29
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 31
10735: PUSH
10736: LD_INT 32
10738: PUSH
10739: LD_INT 33
10741: PUSH
10742: LD_INT 34
10744: PUSH
10745: LD_INT 36
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 101
10787: PUSH
10788: LD_INT 102
10790: PUSH
10791: LD_INT 103
10793: PUSH
10794: LD_INT 104
10796: PUSH
10797: LD_INT 105
10799: PUSH
10800: LD_INT 106
10802: PUSH
10803: LD_INT 107
10805: PUSH
10806: LD_INT 108
10808: PUSH
10809: LD_INT 109
10811: PUSH
10812: LD_INT 110
10814: PUSH
10815: LD_INT 111
10817: PUSH
10818: LD_INT 112
10820: PUSH
10821: LD_INT 113
10823: PUSH
10824: LD_INT 114
10826: PUSH
10827: LD_INT 116
10829: PUSH
10830: LD_INT 117
10832: PUSH
10833: LD_INT 118
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: ST_TO_ADDR
10859: GO 11634
10861: LD_INT 16
10863: DOUBLE
10864: EQUAL
10865: IFTRUE 10869
10867: GO 11005
10869: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10870: LD_ADDR_VAR 0 2
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 4
10880: PUSH
10881: LD_INT 5
10883: PUSH
10884: LD_INT 7
10886: PUSH
10887: LD_INT 11
10889: PUSH
10890: LD_INT 12
10892: PUSH
10893: LD_INT 15
10895: PUSH
10896: LD_INT 16
10898: PUSH
10899: LD_INT 20
10901: PUSH
10902: LD_INT 21
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 23
10910: PUSH
10911: LD_INT 25
10913: PUSH
10914: LD_INT 26
10916: PUSH
10917: LD_INT 30
10919: PUSH
10920: LD_INT 31
10922: PUSH
10923: LD_INT 32
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: LD_INT 34
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 101
10955: PUSH
10956: LD_INT 102
10958: PUSH
10959: LD_INT 103
10961: PUSH
10962: LD_INT 106
10964: PUSH
10965: LD_INT 108
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 113
10973: PUSH
10974: LD_INT 114
10976: PUSH
10977: LD_INT 116
10979: PUSH
10980: LD_INT 117
10982: PUSH
10983: LD_INT 118
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: ST_TO_ADDR
11003: GO 11634
11005: LD_INT 17
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11237
11013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11014: LD_ADDR_VAR 0 2
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: LD_INT 2
11024: PUSH
11025: LD_INT 3
11027: PUSH
11028: LD_INT 4
11030: PUSH
11031: LD_INT 5
11033: PUSH
11034: LD_INT 6
11036: PUSH
11037: LD_INT 7
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: LD_INT 9
11045: PUSH
11046: LD_INT 10
11048: PUSH
11049: LD_INT 11
11051: PUSH
11052: LD_INT 12
11054: PUSH
11055: LD_INT 13
11057: PUSH
11058: LD_INT 14
11060: PUSH
11061: LD_INT 15
11063: PUSH
11064: LD_INT 16
11066: PUSH
11067: LD_INT 17
11069: PUSH
11070: LD_INT 18
11072: PUSH
11073: LD_INT 19
11075: PUSH
11076: LD_INT 20
11078: PUSH
11079: LD_INT 21
11081: PUSH
11082: LD_INT 22
11084: PUSH
11085: LD_INT 23
11087: PUSH
11088: LD_INT 24
11090: PUSH
11091: LD_INT 25
11093: PUSH
11094: LD_INT 26
11096: PUSH
11097: LD_INT 27
11099: PUSH
11100: LD_INT 28
11102: PUSH
11103: LD_INT 29
11105: PUSH
11106: LD_INT 30
11108: PUSH
11109: LD_INT 31
11111: PUSH
11112: LD_INT 32
11114: PUSH
11115: LD_INT 33
11117: PUSH
11118: LD_INT 34
11120: PUSH
11121: LD_INT 36
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 101
11163: PUSH
11164: LD_INT 102
11166: PUSH
11167: LD_INT 103
11169: PUSH
11170: LD_INT 104
11172: PUSH
11173: LD_INT 105
11175: PUSH
11176: LD_INT 106
11178: PUSH
11179: LD_INT 107
11181: PUSH
11182: LD_INT 108
11184: PUSH
11185: LD_INT 109
11187: PUSH
11188: LD_INT 110
11190: PUSH
11191: LD_INT 111
11193: PUSH
11194: LD_INT 112
11196: PUSH
11197: LD_INT 113
11199: PUSH
11200: LD_INT 114
11202: PUSH
11203: LD_INT 116
11205: PUSH
11206: LD_INT 117
11208: PUSH
11209: LD_INT 118
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: ST_TO_ADDR
11235: GO 11634
11237: LD_INT 18
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11393
11245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: LD_INT 4
11256: PUSH
11257: LD_INT 5
11259: PUSH
11260: LD_INT 7
11262: PUSH
11263: LD_INT 11
11265: PUSH
11266: LD_INT 12
11268: PUSH
11269: LD_INT 15
11271: PUSH
11272: LD_INT 16
11274: PUSH
11275: LD_INT 20
11277: PUSH
11278: LD_INT 21
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_INT 23
11286: PUSH
11287: LD_INT 25
11289: PUSH
11290: LD_INT 26
11292: PUSH
11293: LD_INT 30
11295: PUSH
11296: LD_INT 31
11298: PUSH
11299: LD_INT 32
11301: PUSH
11302: LD_INT 33
11304: PUSH
11305: LD_INT 34
11307: PUSH
11308: LD_INT 35
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: PUSH
11337: LD_INT 101
11339: PUSH
11340: LD_INT 102
11342: PUSH
11343: LD_INT 103
11345: PUSH
11346: LD_INT 106
11348: PUSH
11349: LD_INT 108
11351: PUSH
11352: LD_INT 112
11354: PUSH
11355: LD_INT 113
11357: PUSH
11358: LD_INT 114
11360: PUSH
11361: LD_INT 115
11363: PUSH
11364: LD_INT 116
11366: PUSH
11367: LD_INT 117
11369: PUSH
11370: LD_INT 118
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: ST_TO_ADDR
11391: GO 11634
11393: LD_INT 19
11395: DOUBLE
11396: EQUAL
11397: IFTRUE 11401
11399: GO 11633
11401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11402: LD_ADDR_VAR 0 2
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: LD_INT 5
11421: PUSH
11422: LD_INT 6
11424: PUSH
11425: LD_INT 7
11427: PUSH
11428: LD_INT 8
11430: PUSH
11431: LD_INT 9
11433: PUSH
11434: LD_INT 10
11436: PUSH
11437: LD_INT 11
11439: PUSH
11440: LD_INT 12
11442: PUSH
11443: LD_INT 13
11445: PUSH
11446: LD_INT 14
11448: PUSH
11449: LD_INT 15
11451: PUSH
11452: LD_INT 16
11454: PUSH
11455: LD_INT 17
11457: PUSH
11458: LD_INT 18
11460: PUSH
11461: LD_INT 19
11463: PUSH
11464: LD_INT 20
11466: PUSH
11467: LD_INT 21
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 23
11475: PUSH
11476: LD_INT 24
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: LD_INT 26
11484: PUSH
11485: LD_INT 27
11487: PUSH
11488: LD_INT 28
11490: PUSH
11491: LD_INT 29
11493: PUSH
11494: LD_INT 30
11496: PUSH
11497: LD_INT 31
11499: PUSH
11500: LD_INT 32
11502: PUSH
11503: LD_INT 33
11505: PUSH
11506: LD_INT 34
11508: PUSH
11509: LD_INT 35
11511: PUSH
11512: LD_INT 36
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 101
11555: PUSH
11556: LD_INT 102
11558: PUSH
11559: LD_INT 103
11561: PUSH
11562: LD_INT 104
11564: PUSH
11565: LD_INT 105
11567: PUSH
11568: LD_INT 106
11570: PUSH
11571: LD_INT 107
11573: PUSH
11574: LD_INT 108
11576: PUSH
11577: LD_INT 109
11579: PUSH
11580: LD_INT 110
11582: PUSH
11583: LD_INT 111
11585: PUSH
11586: LD_INT 112
11588: PUSH
11589: LD_INT 113
11591: PUSH
11592: LD_INT 114
11594: PUSH
11595: LD_INT 115
11597: PUSH
11598: LD_INT 116
11600: PUSH
11601: LD_INT 117
11603: PUSH
11604: LD_INT 118
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: ST_TO_ADDR
11631: GO 11634
11633: POP
// end else
11634: GO 11865
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: LD_INT 4
11652: PUSH
11653: LD_INT 5
11655: PUSH
11656: LD_INT 6
11658: PUSH
11659: LD_INT 7
11661: PUSH
11662: LD_INT 8
11664: PUSH
11665: LD_INT 9
11667: PUSH
11668: LD_INT 10
11670: PUSH
11671: LD_INT 11
11673: PUSH
11674: LD_INT 12
11676: PUSH
11677: LD_INT 13
11679: PUSH
11680: LD_INT 14
11682: PUSH
11683: LD_INT 15
11685: PUSH
11686: LD_INT 16
11688: PUSH
11689: LD_INT 17
11691: PUSH
11692: LD_INT 18
11694: PUSH
11695: LD_INT 19
11697: PUSH
11698: LD_INT 20
11700: PUSH
11701: LD_INT 21
11703: PUSH
11704: LD_INT 22
11706: PUSH
11707: LD_INT 23
11709: PUSH
11710: LD_INT 24
11712: PUSH
11713: LD_INT 25
11715: PUSH
11716: LD_INT 26
11718: PUSH
11719: LD_INT 27
11721: PUSH
11722: LD_INT 28
11724: PUSH
11725: LD_INT 29
11727: PUSH
11728: LD_INT 30
11730: PUSH
11731: LD_INT 31
11733: PUSH
11734: LD_INT 32
11736: PUSH
11737: LD_INT 33
11739: PUSH
11740: LD_INT 34
11742: PUSH
11743: LD_INT 35
11745: PUSH
11746: LD_INT 36
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 101
11789: PUSH
11790: LD_INT 102
11792: PUSH
11793: LD_INT 103
11795: PUSH
11796: LD_INT 104
11798: PUSH
11799: LD_INT 105
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 107
11807: PUSH
11808: LD_INT 108
11810: PUSH
11811: LD_INT 109
11813: PUSH
11814: LD_INT 110
11816: PUSH
11817: LD_INT 111
11819: PUSH
11820: LD_INT 112
11822: PUSH
11823: LD_INT 113
11825: PUSH
11826: LD_INT 114
11828: PUSH
11829: LD_INT 115
11831: PUSH
11832: LD_INT 116
11834: PUSH
11835: LD_INT 117
11837: PUSH
11838: LD_INT 118
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: ST_TO_ADDR
// if result then
11865: LD_VAR 0 2
11869: IFFALSE 12655
// begin normal :=  ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// hardcore :=  ;
11879: LD_ADDR_VAR 0 6
11883: PUSH
11884: LD_STRING 
11886: ST_TO_ADDR
// active :=  ;
11887: LD_ADDR_VAR 0 7
11891: PUSH
11892: LD_STRING 
11894: ST_TO_ADDR
// for i = 1 to normalCounter do
11895: LD_ADDR_VAR 0 8
11899: PUSH
11900: DOUBLE
11901: LD_INT 1
11903: DEC
11904: ST_TO_ADDR
11905: LD_EXP 29
11909: PUSH
11910: FOR_TO
11911: IFFALSE 12012
// begin tmp := 0 ;
11913: LD_ADDR_VAR 0 3
11917: PUSH
11918: LD_STRING 0
11920: ST_TO_ADDR
// if result [ 1 ] then
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: IFFALSE 11994
// if result [ 1 ] [ 1 ] = i then
11931: LD_VAR 0 2
11935: PUSH
11936: LD_INT 1
11938: ARRAY
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: PUSH
11944: LD_VAR 0 8
11948: EQUAL
11949: IFFALSE 11994
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_VAR 0 2
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_VAR 0 2
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 3
11980: PPUSH
11981: CALL_OW 1
11985: ST_TO_ADDR
// tmp := 1 ;
11986: LD_ADDR_VAR 0 3
11990: PUSH
11991: LD_STRING 1
11993: ST_TO_ADDR
// end ; normal := normal & tmp ;
11994: LD_ADDR_VAR 0 5
11998: PUSH
11999: LD_VAR 0 5
12003: PUSH
12004: LD_VAR 0 3
12008: STR
12009: ST_TO_ADDR
// end ;
12010: GO 11910
12012: POP
12013: POP
// for i = 1 to hardcoreCounter do
12014: LD_ADDR_VAR 0 8
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_EXP 30
12028: PUSH
12029: FOR_TO
12030: IFFALSE 12135
// begin tmp := 0 ;
12032: LD_ADDR_VAR 0 3
12036: PUSH
12037: LD_STRING 0
12039: ST_TO_ADDR
// if result [ 2 ] then
12040: LD_VAR 0 2
12044: PUSH
12045: LD_INT 2
12047: ARRAY
12048: IFFALSE 12117
// if result [ 2 ] [ 1 ] = 100 + i then
12050: LD_VAR 0 2
12054: PUSH
12055: LD_INT 2
12057: ARRAY
12058: PUSH
12059: LD_INT 1
12061: ARRAY
12062: PUSH
12063: LD_INT 100
12065: PUSH
12066: LD_VAR 0 8
12070: PLUS
12071: EQUAL
12072: IFFALSE 12117
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12074: LD_ADDR_VAR 0 2
12078: PUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_INT 2
12086: PPUSH
12087: LD_VAR 0 2
12091: PUSH
12092: LD_INT 2
12094: ARRAY
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 3
12103: PPUSH
12104: CALL_OW 1
12108: ST_TO_ADDR
// tmp := 1 ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_STRING 1
12116: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 6
12126: PUSH
12127: LD_VAR 0 3
12131: STR
12132: ST_TO_ADDR
// end ;
12133: GO 12029
12135: POP
12136: POP
// if isGameLoad then
12137: LD_VAR 0 1
12141: IFFALSE 12616
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12143: LD_ADDR_VAR 0 4
12147: PUSH
12148: LD_EXP 33
12152: PUSH
12153: LD_EXP 32
12157: PUSH
12158: LD_EXP 34
12162: PUSH
12163: LD_EXP 31
12167: PUSH
12168: LD_EXP 35
12172: PUSH
12173: LD_EXP 36
12177: PUSH
12178: LD_EXP 37
12182: PUSH
12183: LD_EXP 38
12187: PUSH
12188: LD_EXP 39
12192: PUSH
12193: LD_EXP 40
12197: PUSH
12198: LD_EXP 41
12202: PUSH
12203: LD_EXP 42
12207: PUSH
12208: LD_EXP 43
12212: PUSH
12213: LD_EXP 44
12217: PUSH
12218: LD_EXP 52
12222: PUSH
12223: LD_EXP 53
12227: PUSH
12228: LD_EXP 54
12232: PUSH
12233: LD_EXP 55
12237: PUSH
12238: LD_EXP 57
12242: PUSH
12243: LD_EXP 58
12247: PUSH
12248: LD_EXP 59
12252: PUSH
12253: LD_EXP 62
12257: PUSH
12258: LD_EXP 64
12262: PUSH
12263: LD_EXP 65
12267: PUSH
12268: LD_EXP 66
12272: PUSH
12273: LD_EXP 68
12277: PUSH
12278: LD_EXP 69
12282: PUSH
12283: LD_EXP 72
12287: PUSH
12288: LD_EXP 73
12292: PUSH
12293: LD_EXP 74
12297: PUSH
12298: LD_EXP 75
12302: PUSH
12303: LD_EXP 76
12307: PUSH
12308: LD_EXP 77
12312: PUSH
12313: LD_EXP 78
12317: PUSH
12318: LD_EXP 79
12322: PUSH
12323: LD_EXP 80
12327: PUSH
12328: LD_EXP 45
12332: PUSH
12333: LD_EXP 46
12337: PUSH
12338: LD_EXP 49
12342: PUSH
12343: LD_EXP 50
12347: PUSH
12348: LD_EXP 51
12352: PUSH
12353: LD_EXP 47
12357: PUSH
12358: LD_EXP 48
12362: PUSH
12363: LD_EXP 56
12367: PUSH
12368: LD_EXP 60
12372: PUSH
12373: LD_EXP 61
12377: PUSH
12378: LD_EXP 63
12382: PUSH
12383: LD_EXP 67
12387: PUSH
12388: LD_EXP 70
12392: PUSH
12393: LD_EXP 71
12397: PUSH
12398: LD_EXP 81
12402: PUSH
12403: LD_EXP 82
12407: PUSH
12408: LD_EXP 83
12412: PUSH
12413: LD_EXP 84
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: ST_TO_ADDR
// tmp :=  ;
12474: LD_ADDR_VAR 0 3
12478: PUSH
12479: LD_STRING 
12481: ST_TO_ADDR
// for i = 1 to normalCounter do
12482: LD_ADDR_VAR 0 8
12486: PUSH
12487: DOUBLE
12488: LD_INT 1
12490: DEC
12491: ST_TO_ADDR
12492: LD_EXP 29
12496: PUSH
12497: FOR_TO
12498: IFFALSE 12534
// begin if flags [ i ] then
12500: LD_VAR 0 4
12504: PUSH
12505: LD_VAR 0 8
12509: ARRAY
12510: IFFALSE 12532
// tmp := tmp & i & ; ;
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_VAR 0 3
12521: PUSH
12522: LD_VAR 0 8
12526: STR
12527: PUSH
12528: LD_STRING ;
12530: STR
12531: ST_TO_ADDR
// end ;
12532: GO 12497
12534: POP
12535: POP
// for i = 1 to hardcoreCounter do
12536: LD_ADDR_VAR 0 8
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_EXP 30
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12598
// begin if flags [ normalCounter + i ] then
12554: LD_VAR 0 4
12558: PUSH
12559: LD_EXP 29
12563: PUSH
12564: LD_VAR 0 8
12568: PLUS
12569: ARRAY
12570: IFFALSE 12596
// tmp := tmp & ( 100 + i ) & ; ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 100
12584: PUSH
12585: LD_VAR 0 8
12589: PLUS
12590: STR
12591: PUSH
12592: LD_STRING ;
12594: STR
12595: ST_TO_ADDR
// end ;
12596: GO 12551
12598: POP
12599: POP
// if tmp then
12600: LD_VAR 0 3
12604: IFFALSE 12616
// active := tmp ;
12606: LD_ADDR_VAR 0 7
12610: PUSH
12611: LD_VAR 0 3
12615: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12616: LD_STRING getStreamItemsFromMission("
12618: PUSH
12619: LD_VAR 0 5
12623: STR
12624: PUSH
12625: LD_STRING ","
12627: STR
12628: PUSH
12629: LD_VAR 0 6
12633: STR
12634: PUSH
12635: LD_STRING ","
12637: STR
12638: PUSH
12639: LD_VAR 0 7
12643: STR
12644: PUSH
12645: LD_STRING ")
12647: STR
12648: PPUSH
12649: CALL_OW 559
// end else
12653: GO 12662
// ToLua ( getStreamItemsFromMission("","","") ) ;
12655: LD_STRING getStreamItemsFromMission("","","")
12657: PPUSH
12658: CALL_OW 559
// end ;
12662: LD_VAR 0 2
12666: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12667: LD_EXP 28
12671: PUSH
12672: LD_EXP 33
12676: AND
12677: IFFALSE 12801
12679: GO 12681
12681: DISABLE
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
// begin enable ;
12686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12687: LD_ADDR_VAR 0 2
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_OWVAR 2
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 2
12706: PUSH
12707: LD_INT 34
12709: PUSH
12710: LD_INT 7
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 34
12719: PUSH
12720: LD_INT 45
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 34
12729: PUSH
12730: LD_INT 28
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 34
12739: PUSH
12740: LD_INT 47
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 2
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12801
// for i in tmp do
12772: LD_ADDR_VAR 0 1
12776: PUSH
12777: LD_VAR 0 2
12781: PUSH
12782: FOR_IN
12783: IFFALSE 12799
// begin SetLives ( i , 0 ) ;
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_INT 0
12792: PPUSH
12793: CALL_OW 234
// end ;
12797: GO 12782
12799: POP
12800: POP
// end ;
12801: PPOPN 2
12803: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12804: LD_EXP 28
12808: PUSH
12809: LD_EXP 34
12813: AND
12814: IFFALSE 12898
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
// begin enable ;
12823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_OWVAR 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 32
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: ST_TO_ADDR
// if not tmp then
12860: LD_VAR 0 2
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 12898
// for i in tmp do
12869: LD_ADDR_VAR 0 1
12873: PUSH
12874: LD_VAR 0 2
12878: PUSH
12879: FOR_IN
12880: IFFALSE 12896
// begin SetLives ( i , 0 ) ;
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 234
// end ;
12894: GO 12879
12896: POP
12897: POP
// end ;
12898: PPOPN 2
12900: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12901: LD_EXP 28
12905: PUSH
12906: LD_EXP 31
12910: AND
12911: IFFALSE 13004
12913: GO 12915
12915: DISABLE
12916: LD_INT 0
12918: PPUSH
// begin enable ;
12919: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12920: LD_ADDR_VAR 0 1
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_OWVAR 2
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: LD_INT 25
12942: PUSH
12943: LD_INT 5
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 9
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 25
12962: PUSH
12963: LD_INT 8
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PPUSH
12980: CALL_OW 69
12984: PUSH
12985: FOR_IN
12986: IFFALSE 13002
// begin SetClass ( i , 1 ) ;
12988: LD_VAR 0 1
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 336
// end ;
13000: GO 12985
13002: POP
13003: POP
// end ;
13004: PPOPN 1
13006: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13007: LD_EXP 28
13011: PUSH
13012: LD_EXP 32
13016: AND
13017: PUSH
13018: LD_OWVAR 65
13022: PUSH
13023: LD_INT 7
13025: LESS
13026: AND
13027: IFFALSE 13041
13029: GO 13031
13031: DISABLE
// begin enable ;
13032: ENABLE
// game_speed := 7 ;
13033: LD_ADDR_OWVAR 65
13037: PUSH
13038: LD_INT 7
13040: ST_TO_ADDR
// end ;
13041: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13042: LD_EXP 28
13046: PUSH
13047: LD_EXP 35
13051: AND
13052: IFFALSE 13254
13054: GO 13056
13056: DISABLE
13057: LD_INT 0
13059: PPUSH
13060: PPUSH
13061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13062: LD_ADDR_VAR 0 3
13066: PUSH
13067: LD_INT 81
13069: PUSH
13070: LD_OWVAR 2
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 21
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: ST_TO_ADDR
// if not tmp then
13098: LD_VAR 0 3
13102: NOT
13103: IFFALSE 13107
// exit ;
13105: GO 13254
// if tmp > 5 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 5
13114: GREATER
13115: IFFALSE 13127
// k := 5 else
13117: LD_ADDR_VAR 0 2
13121: PUSH
13122: LD_INT 5
13124: ST_TO_ADDR
13125: GO 13137
// k := tmp ;
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: LD_VAR 0 3
13136: ST_TO_ADDR
// for i := 1 to k do
13137: LD_ADDR_VAR 0 1
13141: PUSH
13142: DOUBLE
13143: LD_INT 1
13145: DEC
13146: ST_TO_ADDR
13147: LD_VAR 0 2
13151: PUSH
13152: FOR_TO
13153: IFFALSE 13252
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13155: LD_VAR 0 3
13159: PUSH
13160: LD_VAR 0 1
13164: ARRAY
13165: PPUSH
13166: LD_VAR 0 1
13170: PUSH
13171: LD_INT 4
13173: MOD
13174: PUSH
13175: LD_INT 1
13177: PLUS
13178: PPUSH
13179: CALL_OW 259
13183: PUSH
13184: LD_INT 10
13186: LESS
13187: IFFALSE 13250
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13189: LD_VAR 0 3
13193: PUSH
13194: LD_VAR 0 1
13198: ARRAY
13199: PPUSH
13200: LD_VAR 0 1
13204: PUSH
13205: LD_INT 4
13207: MOD
13208: PUSH
13209: LD_INT 1
13211: PLUS
13212: PPUSH
13213: LD_VAR 0 3
13217: PUSH
13218: LD_VAR 0 1
13222: ARRAY
13223: PPUSH
13224: LD_VAR 0 1
13228: PUSH
13229: LD_INT 4
13231: MOD
13232: PUSH
13233: LD_INT 1
13235: PLUS
13236: PPUSH
13237: CALL_OW 259
13241: PUSH
13242: LD_INT 1
13244: PLUS
13245: PPUSH
13246: CALL_OW 237
13250: GO 13152
13252: POP
13253: POP
// end ;
13254: PPOPN 3
13256: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13257: LD_EXP 28
13261: PUSH
13262: LD_EXP 36
13266: AND
13267: IFFALSE 13287
13269: GO 13271
13271: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13272: LD_INT 4
13274: PPUSH
13275: LD_OWVAR 2
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 324
13287: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13288: LD_EXP 28
13292: PUSH
13293: LD_EXP 65
13297: AND
13298: IFFALSE 13318
13300: GO 13302
13302: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13303: LD_INT 19
13305: PPUSH
13306: LD_OWVAR 2
13310: PPUSH
13311: LD_INT 0
13313: PPUSH
13314: CALL_OW 324
13318: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13319: LD_EXP 28
13323: PUSH
13324: LD_EXP 37
13328: AND
13329: IFFALSE 13431
13331: GO 13333
13333: DISABLE
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
// begin enable ;
13338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13339: LD_ADDR_VAR 0 2
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 2
13358: PUSH
13359: LD_INT 34
13361: PUSH
13362: LD_INT 11
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 34
13371: PUSH
13372: LD_INT 30
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: ST_TO_ADDR
// if not tmp then
13393: LD_VAR 0 2
13397: NOT
13398: IFFALSE 13402
// exit ;
13400: GO 13431
// for i in tmp do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_VAR 0 2
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13429
// begin SetLives ( i , 0 ) ;
13415: LD_VAR 0 1
13419: PPUSH
13420: LD_INT 0
13422: PPUSH
13423: CALL_OW 234
// end ;
13427: GO 13412
13429: POP
13430: POP
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13434: LD_EXP 28
13438: PUSH
13439: LD_EXP 38
13443: AND
13444: IFFALSE 13464
13446: GO 13448
13448: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13449: LD_INT 32
13451: PPUSH
13452: LD_OWVAR 2
13456: PPUSH
13457: LD_INT 0
13459: PPUSH
13460: CALL_OW 324
13464: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13465: LD_EXP 28
13469: PUSH
13470: LD_EXP 39
13474: AND
13475: IFFALSE 13656
13477: GO 13479
13479: DISABLE
13480: LD_INT 0
13482: PPUSH
13483: PPUSH
13484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13485: LD_ADDR_VAR 0 2
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_OWVAR 2
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: ST_TO_ADDR
// if not tmp then
13521: LD_VAR 0 2
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 13656
// side := 0 ;
13530: LD_ADDR_VAR 0 3
13534: PUSH
13535: LD_INT 0
13537: ST_TO_ADDR
// for i := 1 to 8 do
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: DOUBLE
13544: LD_INT 1
13546: DEC
13547: ST_TO_ADDR
13548: LD_INT 8
13550: PUSH
13551: FOR_TO
13552: IFFALSE 13600
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13554: LD_OWVAR 2
13558: PUSH
13559: LD_VAR 0 1
13563: NONEQUAL
13564: PUSH
13565: LD_OWVAR 2
13569: PPUSH
13570: LD_VAR 0 1
13574: PPUSH
13575: CALL_OW 81
13579: PUSH
13580: LD_INT 2
13582: EQUAL
13583: AND
13584: IFFALSE 13598
// begin side := i ;
13586: LD_ADDR_VAR 0 3
13590: PUSH
13591: LD_VAR 0 1
13595: ST_TO_ADDR
// break ;
13596: GO 13600
// end ;
13598: GO 13551
13600: POP
13601: POP
// if not side then
13602: LD_VAR 0 3
13606: NOT
13607: IFFALSE 13611
// exit ;
13609: GO 13656
// for i := 1 to tmp do
13611: LD_ADDR_VAR 0 1
13615: PUSH
13616: DOUBLE
13617: LD_INT 1
13619: DEC
13620: ST_TO_ADDR
13621: LD_VAR 0 2
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13654
// if Prob ( 60 ) then
13629: LD_INT 60
13631: PPUSH
13632: CALL_OW 13
13636: IFFALSE 13652
// SetSide ( i , side ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: LD_VAR 0 3
13647: PPUSH
13648: CALL_OW 235
13652: GO 13626
13654: POP
13655: POP
// end ;
13656: PPOPN 3
13658: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13659: LD_EXP 28
13663: PUSH
13664: LD_EXP 41
13668: AND
13669: IFFALSE 13788
13671: GO 13673
13673: DISABLE
13674: LD_INT 0
13676: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13677: LD_ADDR_VAR 0 1
13681: PUSH
13682: LD_INT 22
13684: PUSH
13685: LD_OWVAR 2
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 21
13696: PUSH
13697: LD_INT 1
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 3
13706: PUSH
13707: LD_INT 23
13709: PUSH
13710: LD_INT 0
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: FOR_IN
13732: IFFALSE 13786
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 257
13743: PUSH
13744: LD_INT 1
13746: PUSH
13747: LD_INT 2
13749: PUSH
13750: LD_INT 3
13752: PUSH
13753: LD_INT 4
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: IN
13762: IFFALSE 13784
// SetClass ( un , rand ( 1 , 4 ) ) ;
13764: LD_VAR 0 1
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 4
13774: PPUSH
13775: CALL_OW 12
13779: PPUSH
13780: CALL_OW 336
13784: GO 13731
13786: POP
13787: POP
// end ;
13788: PPOPN 1
13790: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13791: LD_EXP 28
13795: PUSH
13796: LD_EXP 40
13800: AND
13801: IFFALSE 13880
13803: GO 13805
13805: DISABLE
13806: LD_INT 0
13808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13809: LD_ADDR_VAR 0 1
13813: PUSH
13814: LD_INT 22
13816: PUSH
13817: LD_OWVAR 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 3
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: ST_TO_ADDR
// if not tmp then
13845: LD_VAR 0 1
13849: NOT
13850: IFFALSE 13854
// exit ;
13852: GO 13880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13854: LD_VAR 0 1
13858: PUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: CALL_OW 12
13871: ARRAY
13872: PPUSH
13873: LD_INT 100
13875: PPUSH
13876: CALL_OW 234
// end ;
13880: PPOPN 1
13882: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13883: LD_EXP 28
13887: PUSH
13888: LD_EXP 42
13892: AND
13893: IFFALSE 13991
13895: GO 13897
13897: DISABLE
13898: LD_INT 0
13900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13901: LD_ADDR_VAR 0 1
13905: PUSH
13906: LD_INT 22
13908: PUSH
13909: LD_OWVAR 2
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 21
13920: PUSH
13921: LD_INT 1
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if not tmp then
13937: LD_VAR 0 1
13941: NOT
13942: IFFALSE 13946
// exit ;
13944: GO 13991
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13946: LD_VAR 0 1
13950: PUSH
13951: LD_INT 1
13953: PPUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 12
13963: ARRAY
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 4
13970: PPUSH
13971: CALL_OW 12
13975: PPUSH
13976: LD_INT 3000
13978: PPUSH
13979: LD_INT 9000
13981: PPUSH
13982: CALL_OW 12
13986: PPUSH
13987: CALL_OW 492
// end ;
13991: PPOPN 1
13993: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13994: LD_EXP 28
13998: PUSH
13999: LD_EXP 43
14003: AND
14004: IFFALSE 14024
14006: GO 14008
14008: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14009: LD_INT 1
14011: PPUSH
14012: LD_OWVAR 2
14016: PPUSH
14017: LD_INT 0
14019: PPUSH
14020: CALL_OW 324
14024: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14025: LD_EXP 28
14029: PUSH
14030: LD_EXP 44
14034: AND
14035: IFFALSE 14118
14037: GO 14039
14039: DISABLE
14040: LD_INT 0
14042: PPUSH
14043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_OWVAR 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 3
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 69
14079: ST_TO_ADDR
// if not tmp then
14080: LD_VAR 0 2
14084: NOT
14085: IFFALSE 14089
// exit ;
14087: GO 14118
// for i in tmp do
14089: LD_ADDR_VAR 0 1
14093: PUSH
14094: LD_VAR 0 2
14098: PUSH
14099: FOR_IN
14100: IFFALSE 14116
// SetBLevel ( i , 10 ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_INT 10
14109: PPUSH
14110: CALL_OW 241
14114: GO 14099
14116: POP
14117: POP
// end ;
14118: PPOPN 2
14120: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14121: LD_EXP 28
14125: PUSH
14126: LD_EXP 45
14130: AND
14131: IFFALSE 14242
14133: GO 14135
14135: DISABLE
14136: LD_INT 0
14138: PPUSH
14139: PPUSH
14140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_OWVAR 2
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 25
14160: PUSH
14161: LD_INT 1
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: ST_TO_ADDR
// if not tmp then
14177: LD_VAR 0 3
14181: NOT
14182: IFFALSE 14186
// exit ;
14184: GO 14242
// un := tmp [ rand ( 1 , tmp ) ] ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_VAR 0 3
14195: PUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: CALL_OW 12
14208: ARRAY
14209: ST_TO_ADDR
// if Crawls ( un ) then
14210: LD_VAR 0 2
14214: PPUSH
14215: CALL_OW 318
14219: IFFALSE 14230
// ComWalk ( un ) ;
14221: LD_VAR 0 2
14225: PPUSH
14226: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14230: LD_VAR 0 2
14234: PPUSH
14235: LD_INT 5
14237: PPUSH
14238: CALL_OW 336
// end ;
14242: PPOPN 3
14244: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14245: LD_EXP 28
14249: PUSH
14250: LD_EXP 46
14254: AND
14255: PUSH
14256: LD_OWVAR 67
14260: PUSH
14261: LD_INT 4
14263: LESS
14264: AND
14265: IFFALSE 14284
14267: GO 14269
14269: DISABLE
// begin Difficulty := Difficulty + 1 ;
14270: LD_ADDR_OWVAR 67
14274: PUSH
14275: LD_OWVAR 67
14279: PUSH
14280: LD_INT 1
14282: PLUS
14283: ST_TO_ADDR
// end ;
14284: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14285: LD_EXP 28
14289: PUSH
14290: LD_EXP 47
14294: AND
14295: IFFALSE 14398
14297: GO 14299
14299: DISABLE
14300: LD_INT 0
14302: PPUSH
// begin for i := 1 to 5 do
14303: LD_ADDR_VAR 0 1
14307: PUSH
14308: DOUBLE
14309: LD_INT 1
14311: DEC
14312: ST_TO_ADDR
14313: LD_INT 5
14315: PUSH
14316: FOR_TO
14317: IFFALSE 14396
// begin uc_nation := nation_nature ;
14319: LD_ADDR_OWVAR 21
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// uc_side := 0 ;
14327: LD_ADDR_OWVAR 20
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14335: LD_ADDR_OWVAR 29
14339: PUSH
14340: LD_INT 12
14342: PUSH
14343: LD_INT 12
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: ST_TO_ADDR
// hc_agressivity := 20 ;
14350: LD_ADDR_OWVAR 35
14354: PUSH
14355: LD_INT 20
14357: ST_TO_ADDR
// hc_class := class_tiger ;
14358: LD_ADDR_OWVAR 28
14362: PUSH
14363: LD_INT 14
14365: ST_TO_ADDR
// hc_gallery :=  ;
14366: LD_ADDR_OWVAR 33
14370: PUSH
14371: LD_STRING 
14373: ST_TO_ADDR
// hc_name :=  ;
14374: LD_ADDR_OWVAR 26
14378: PUSH
14379: LD_STRING 
14381: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14382: CALL_OW 44
14386: PPUSH
14387: LD_INT 0
14389: PPUSH
14390: CALL_OW 51
// end ;
14394: GO 14316
14396: POP
14397: POP
// end ;
14398: PPOPN 1
14400: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14401: LD_EXP 28
14405: PUSH
14406: LD_EXP 48
14410: AND
14411: IFFALSE 14420
14413: GO 14415
14415: DISABLE
// StreamSibBomb ;
14416: CALL 14421 0 0
14420: END
// export function StreamSibBomb ; var i , x , y ; begin
14421: LD_INT 0
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
// result := false ;
14427: LD_ADDR_VAR 0 1
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
// for i := 1 to 16 do
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: DOUBLE
14441: LD_INT 1
14443: DEC
14444: ST_TO_ADDR
14445: LD_INT 16
14447: PUSH
14448: FOR_TO
14449: IFFALSE 14648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 10
14458: PUSH
14459: LD_INT 20
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 40
14467: PUSH
14468: LD_INT 50
14470: PUSH
14471: LD_INT 60
14473: PUSH
14474: LD_INT 70
14476: PUSH
14477: LD_INT 80
14479: PUSH
14480: LD_INT 90
14482: PUSH
14483: LD_INT 100
14485: PUSH
14486: LD_INT 110
14488: PUSH
14489: LD_INT 120
14491: PUSH
14492: LD_INT 130
14494: PUSH
14495: LD_INT 140
14497: PUSH
14498: LD_INT 150
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 1
14520: PPUSH
14521: LD_INT 15
14523: PPUSH
14524: CALL_OW 12
14528: ARRAY
14529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14530: LD_ADDR_VAR 0 4
14534: PUSH
14535: LD_INT 10
14537: PUSH
14538: LD_INT 20
14540: PUSH
14541: LD_INT 30
14543: PUSH
14544: LD_INT 40
14546: PUSH
14547: LD_INT 50
14549: PUSH
14550: LD_INT 60
14552: PUSH
14553: LD_INT 70
14555: PUSH
14556: LD_INT 80
14558: PUSH
14559: LD_INT 90
14561: PUSH
14562: LD_INT 100
14564: PUSH
14565: LD_INT 110
14567: PUSH
14568: LD_INT 120
14570: PUSH
14571: LD_INT 130
14573: PUSH
14574: LD_INT 140
14576: PUSH
14577: LD_INT 150
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 1
14599: PPUSH
14600: LD_INT 15
14602: PPUSH
14603: CALL_OW 12
14607: ARRAY
14608: ST_TO_ADDR
// if ValidHex ( x , y ) then
14609: LD_VAR 0 3
14613: PPUSH
14614: LD_VAR 0 4
14618: PPUSH
14619: CALL_OW 488
14623: IFFALSE 14646
// begin result := [ x , y ] ;
14625: LD_ADDR_VAR 0 1
14629: PUSH
14630: LD_VAR 0 3
14634: PUSH
14635: LD_VAR 0 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
// break ;
14644: GO 14648
// end ; end ;
14646: GO 14448
14648: POP
14649: POP
// if result then
14650: LD_VAR 0 1
14654: IFFALSE 14714
// begin ToLua ( playSibBomb() ) ;
14656: LD_STRING playSibBomb()
14658: PPUSH
14659: CALL_OW 559
// wait ( 0 0$14 ) ;
14663: LD_INT 490
14665: PPUSH
14666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: LD_VAR 0 1
14683: PUSH
14684: LD_INT 2
14686: ARRAY
14687: PPUSH
14688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14692: LD_VAR 0 1
14696: PUSH
14697: LD_INT 1
14699: ARRAY
14700: PPUSH
14701: LD_VAR 0 1
14705: PUSH
14706: LD_INT 2
14708: ARRAY
14709: PPUSH
14710: CALL_OW 429
// end ; end ;
14714: LD_VAR 0 1
14718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14719: LD_EXP 28
14723: PUSH
14724: LD_EXP 50
14728: AND
14729: IFFALSE 14741
14731: GO 14733
14733: DISABLE
// YouLost (  ) ;
14734: LD_STRING 
14736: PPUSH
14737: CALL_OW 104
14741: END
// every 0 0$1 trigger StreamModeActive and sFog do
14742: LD_EXP 28
14746: PUSH
14747: LD_EXP 49
14751: AND
14752: IFFALSE 14766
14754: GO 14756
14756: DISABLE
// FogOff ( your_side ) ;
14757: LD_OWVAR 2
14761: PPUSH
14762: CALL_OW 344
14766: END
// every 0 0$1 trigger StreamModeActive and sSun do
14767: LD_EXP 28
14771: PUSH
14772: LD_EXP 51
14776: AND
14777: IFFALSE 14805
14779: GO 14781
14781: DISABLE
// begin solar_recharge_percent := 0 ;
14782: LD_ADDR_OWVAR 79
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14790: LD_INT 10500
14792: PPUSH
14793: CALL_OW 67
// solar_recharge_percent := 100 ;
14797: LD_ADDR_OWVAR 79
14801: PUSH
14802: LD_INT 100
14804: ST_TO_ADDR
// end ;
14805: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14806: LD_EXP 28
14810: PUSH
14811: LD_EXP 52
14815: AND
14816: IFFALSE 15055
14818: GO 14820
14820: DISABLE
14821: LD_INT 0
14823: PPUSH
14824: PPUSH
14825: PPUSH
// begin tmp := [ ] ;
14826: LD_ADDR_VAR 0 3
14830: PUSH
14831: EMPTY
14832: ST_TO_ADDR
// for i := 1 to 6 do
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: DOUBLE
14839: LD_INT 1
14841: DEC
14842: ST_TO_ADDR
14843: LD_INT 6
14845: PUSH
14846: FOR_TO
14847: IFFALSE 14952
// begin uc_nation := nation_nature ;
14849: LD_ADDR_OWVAR 21
14853: PUSH
14854: LD_INT 0
14856: ST_TO_ADDR
// uc_side := 0 ;
14857: LD_ADDR_OWVAR 20
14861: PUSH
14862: LD_INT 0
14864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14865: LD_ADDR_OWVAR 29
14869: PUSH
14870: LD_INT 12
14872: PUSH
14873: LD_INT 12
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: ST_TO_ADDR
// hc_agressivity := 20 ;
14880: LD_ADDR_OWVAR 35
14884: PUSH
14885: LD_INT 20
14887: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14888: LD_ADDR_OWVAR 28
14892: PUSH
14893: LD_INT 17
14895: ST_TO_ADDR
// hc_gallery :=  ;
14896: LD_ADDR_OWVAR 33
14900: PUSH
14901: LD_STRING 
14903: ST_TO_ADDR
// hc_name :=  ;
14904: LD_ADDR_OWVAR 26
14908: PUSH
14909: LD_STRING 
14911: ST_TO_ADDR
// un := CreateHuman ;
14912: LD_ADDR_VAR 0 2
14916: PUSH
14917: CALL_OW 44
14921: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14922: LD_VAR 0 2
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: CALL_OW 51
// tmp := tmp ^ un ;
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_VAR 0 3
14943: PUSH
14944: LD_VAR 0 2
14948: ADD
14949: ST_TO_ADDR
// end ;
14950: GO 14846
14952: POP
14953: POP
// repeat wait ( 0 0$1 ) ;
14954: LD_INT 35
14956: PPUSH
14957: CALL_OW 67
// for un in tmp do
14961: LD_ADDR_VAR 0 2
14965: PUSH
14966: LD_VAR 0 3
14970: PUSH
14971: FOR_IN
14972: IFFALSE 15046
// begin if IsDead ( un ) then
14974: LD_VAR 0 2
14978: PPUSH
14979: CALL_OW 301
14983: IFFALSE 15003
// begin tmp := tmp diff un ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_VAR 0 3
14994: PUSH
14995: LD_VAR 0 2
14999: DIFF
15000: ST_TO_ADDR
// continue ;
15001: GO 14971
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15003: LD_VAR 0 2
15007: PPUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 22
15013: PUSH
15014: LD_INT 0
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PPUSH
15025: CALL_OW 69
15029: PPUSH
15030: LD_VAR 0 2
15034: PPUSH
15035: CALL_OW 74
15039: PPUSH
15040: CALL_OW 115
// end ;
15044: GO 14971
15046: POP
15047: POP
// until not tmp ;
15048: LD_VAR 0 3
15052: NOT
15053: IFFALSE 14954
// end ;
15055: PPOPN 3
15057: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15058: LD_EXP 28
15062: PUSH
15063: LD_EXP 53
15067: AND
15068: IFFALSE 15122
15070: GO 15072
15072: DISABLE
// begin ToLua ( displayTroll(); ) ;
15073: LD_STRING displayTroll();
15075: PPUSH
15076: CALL_OW 559
// wait ( 3 3$00 ) ;
15080: LD_INT 6300
15082: PPUSH
15083: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15087: LD_STRING hideTroll();
15089: PPUSH
15090: CALL_OW 559
// wait ( 1 1$00 ) ;
15094: LD_INT 2100
15096: PPUSH
15097: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15101: LD_STRING displayTroll();
15103: PPUSH
15104: CALL_OW 559
// wait ( 1 1$00 ) ;
15108: LD_INT 2100
15110: PPUSH
15111: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15115: LD_STRING hideTroll();
15117: PPUSH
15118: CALL_OW 559
// end ;
15122: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15123: LD_EXP 28
15127: PUSH
15128: LD_EXP 54
15132: AND
15133: IFFALSE 15196
15135: GO 15137
15137: DISABLE
15138: LD_INT 0
15140: PPUSH
// begin p := 0 ;
15141: LD_ADDR_VAR 0 1
15145: PUSH
15146: LD_INT 0
15148: ST_TO_ADDR
// repeat game_speed := 1 ;
15149: LD_ADDR_OWVAR 65
15153: PUSH
15154: LD_INT 1
15156: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15157: LD_INT 35
15159: PPUSH
15160: CALL_OW 67
// p := p + 1 ;
15164: LD_ADDR_VAR 0 1
15168: PUSH
15169: LD_VAR 0 1
15173: PUSH
15174: LD_INT 1
15176: PLUS
15177: ST_TO_ADDR
// until p >= 60 ;
15178: LD_VAR 0 1
15182: PUSH
15183: LD_INT 60
15185: GREATEREQUAL
15186: IFFALSE 15149
// game_speed := 4 ;
15188: LD_ADDR_OWVAR 65
15192: PUSH
15193: LD_INT 4
15195: ST_TO_ADDR
// end ;
15196: PPOPN 1
15198: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15199: LD_EXP 28
15203: PUSH
15204: LD_EXP 55
15208: AND
15209: IFFALSE 15355
15211: GO 15213
15213: DISABLE
15214: LD_INT 0
15216: PPUSH
15217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_OWVAR 2
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: LD_INT 30
15240: PUSH
15241: LD_INT 0
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 30
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PPUSH
15267: CALL_OW 69
15271: ST_TO_ADDR
// if not depot then
15272: LD_VAR 0 1
15276: NOT
15277: IFFALSE 15281
// exit ;
15279: GO 15355
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15281: LD_ADDR_VAR 0 2
15285: PUSH
15286: LD_VAR 0 1
15290: PUSH
15291: LD_INT 1
15293: PPUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 12
15303: ARRAY
15304: PPUSH
15305: CALL_OW 274
15309: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15310: LD_VAR 0 2
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: LD_INT 0
15320: PPUSH
15321: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15325: LD_VAR 0 2
15329: PPUSH
15330: LD_INT 2
15332: PPUSH
15333: LD_INT 0
15335: PPUSH
15336: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15340: LD_VAR 0 2
15344: PPUSH
15345: LD_INT 3
15347: PPUSH
15348: LD_INT 0
15350: PPUSH
15351: CALL_OW 277
// end ;
15355: PPOPN 2
15357: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15358: LD_EXP 28
15362: PUSH
15363: LD_EXP 56
15367: AND
15368: IFFALSE 15465
15370: GO 15372
15372: DISABLE
15373: LD_INT 0
15375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15376: LD_ADDR_VAR 0 1
15380: PUSH
15381: LD_INT 22
15383: PUSH
15384: LD_OWVAR 2
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 21
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 23
15408: PUSH
15409: LD_INT 0
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 69
15429: ST_TO_ADDR
// if not tmp then
15430: LD_VAR 0 1
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 15465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15439: LD_VAR 0 1
15443: PUSH
15444: LD_INT 1
15446: PPUSH
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 12
15456: ARRAY
15457: PPUSH
15458: LD_INT 200
15460: PPUSH
15461: CALL_OW 234
// end ;
15465: PPOPN 1
15467: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15468: LD_EXP 28
15472: PUSH
15473: LD_EXP 57
15477: AND
15478: IFFALSE 15557
15480: GO 15482
15482: DISABLE
15483: LD_INT 0
15485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15486: LD_ADDR_VAR 0 1
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_OWVAR 2
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: ST_TO_ADDR
// if not tmp then
15522: LD_VAR 0 1
15526: NOT
15527: IFFALSE 15531
// exit ;
15529: GO 15557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 1
15538: PPUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 12
15548: ARRAY
15549: PPUSH
15550: LD_INT 60
15552: PPUSH
15553: CALL_OW 234
// end ;
15557: PPOPN 1
15559: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15560: LD_EXP 28
15564: PUSH
15565: LD_EXP 58
15569: AND
15570: IFFALSE 15669
15572: GO 15574
15574: DISABLE
15575: LD_INT 0
15577: PPUSH
15578: PPUSH
// begin enable ;
15579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_OWVAR 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 61
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: LD_INT 33
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 1
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15669
// for i in tmp do
15632: LD_ADDR_VAR 0 2
15636: PUSH
15637: LD_VAR 0 1
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15667
// if IsControledBy ( i ) then
15645: LD_VAR 0 2
15649: PPUSH
15650: CALL_OW 312
15654: IFFALSE 15665
// ComUnlink ( i ) ;
15656: LD_VAR 0 2
15660: PPUSH
15661: CALL_OW 136
15665: GO 15642
15667: POP
15668: POP
// end ;
15669: PPOPN 2
15671: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15672: LD_EXP 28
15676: PUSH
15677: LD_EXP 59
15681: AND
15682: IFFALSE 15822
15684: GO 15686
15686: DISABLE
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
// begin ToLua ( displayPowell(); ) ;
15691: LD_STRING displayPowell();
15693: PPUSH
15694: CALL_OW 559
// uc_side := 0 ;
15698: LD_ADDR_OWVAR 20
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// uc_nation := 2 ;
15706: LD_ADDR_OWVAR 21
15710: PUSH
15711: LD_INT 2
15713: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15714: LD_ADDR_OWVAR 37
15718: PUSH
15719: LD_INT 14
15721: ST_TO_ADDR
// vc_engine := engine_siberite ;
15722: LD_ADDR_OWVAR 39
15726: PUSH
15727: LD_INT 3
15729: ST_TO_ADDR
// vc_control := control_apeman ;
15730: LD_ADDR_OWVAR 38
15734: PUSH
15735: LD_INT 5
15737: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15738: LD_ADDR_OWVAR 40
15742: PUSH
15743: LD_INT 29
15745: ST_TO_ADDR
// un := CreateVehicle ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: CALL_OW 45
15755: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15768: LD_INT 35
15770: PPUSH
15771: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15775: LD_VAR 0 2
15779: PPUSH
15780: LD_INT 22
15782: PUSH
15783: LD_OWVAR 2
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PPUSH
15792: CALL_OW 69
15796: PPUSH
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 74
15806: PPUSH
15807: CALL_OW 115
// until IsDead ( un ) ;
15811: LD_VAR 0 2
15815: PPUSH
15816: CALL_OW 301
15820: IFFALSE 15768
// end ;
15822: PPOPN 2
15824: END
// every 0 0$1 trigger StreamModeActive and sStu do
15825: LD_EXP 28
15829: PUSH
15830: LD_EXP 67
15834: AND
15835: IFFALSE 15851
15837: GO 15839
15839: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15840: LD_STRING displayStucuk();
15842: PPUSH
15843: CALL_OW 559
// ResetFog ;
15847: CALL_OW 335
// end ;
15851: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15852: LD_EXP 28
15856: PUSH
15857: LD_EXP 60
15861: AND
15862: IFFALSE 16003
15864: GO 15866
15866: DISABLE
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15871: LD_ADDR_VAR 0 2
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_OWVAR 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PPUSH
15902: CALL_OW 69
15906: ST_TO_ADDR
// if not tmp then
15907: LD_VAR 0 2
15911: NOT
15912: IFFALSE 15916
// exit ;
15914: GO 16003
// un := tmp [ rand ( 1 , tmp ) ] ;
15916: LD_ADDR_VAR 0 1
15920: PUSH
15921: LD_VAR 0 2
15925: PUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_VAR 0 2
15933: PPUSH
15934: CALL_OW 12
15938: ARRAY
15939: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15940: LD_VAR 0 1
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_OWVAR 3
15961: PUSH
15962: LD_VAR 0 1
15966: DIFF
15967: PPUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 74
15977: PPUSH
15978: CALL_OW 115
// wait ( 0 0$20 ) ;
15982: LD_INT 700
15984: PPUSH
15985: CALL_OW 67
// SetSide ( un , your_side ) ;
15989: LD_VAR 0 1
15993: PPUSH
15994: LD_OWVAR 2
15998: PPUSH
15999: CALL_OW 235
// end ;
16003: PPOPN 2
16005: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16006: LD_EXP 28
16010: PUSH
16011: LD_EXP 61
16015: AND
16016: IFFALSE 16122
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16024: LD_ADDR_VAR 0 1
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_OWVAR 2
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 30
16046: PUSH
16047: LD_INT 0
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 30
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not depot then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16122
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: ARRAY
16095: PPUSH
16096: CALL_OW 250
16100: PPUSH
16101: LD_VAR 0 1
16105: PUSH
16106: LD_INT 1
16108: ARRAY
16109: PPUSH
16110: CALL_OW 251
16114: PPUSH
16115: LD_INT 70
16117: PPUSH
16118: CALL_OW 495
// end ;
16122: PPOPN 1
16124: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16125: LD_EXP 28
16129: PUSH
16130: LD_EXP 62
16134: AND
16135: IFFALSE 16346
16137: GO 16139
16139: DISABLE
16140: LD_INT 0
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16147: LD_ADDR_VAR 0 5
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: LD_OWVAR 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 21
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: ST_TO_ADDR
// if not tmp then
16183: LD_VAR 0 5
16187: NOT
16188: IFFALSE 16192
// exit ;
16190: GO 16346
// for i in tmp do
16192: LD_ADDR_VAR 0 1
16196: PUSH
16197: LD_VAR 0 5
16201: PUSH
16202: FOR_IN
16203: IFFALSE 16344
// begin d := rand ( 0 , 5 ) ;
16205: LD_ADDR_VAR 0 4
16209: PUSH
16210: LD_INT 0
16212: PPUSH
16213: LD_INT 5
16215: PPUSH
16216: CALL_OW 12
16220: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 250
16235: PPUSH
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 3
16243: PPUSH
16244: LD_INT 12
16246: PPUSH
16247: CALL_OW 12
16251: PPUSH
16252: CALL_OW 272
16256: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 251
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_INT 3
16279: PPUSH
16280: LD_INT 12
16282: PPUSH
16283: CALL_OW 12
16287: PPUSH
16288: CALL_OW 273
16292: ST_TO_ADDR
// if ValidHex ( x , y ) then
16293: LD_VAR 0 2
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 488
16307: IFFALSE 16342
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16309: LD_VAR 0 1
16313: PPUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 3
16326: PPUSH
16327: LD_INT 6
16329: PPUSH
16330: CALL_OW 12
16334: PPUSH
16335: LD_INT 1
16337: PPUSH
16338: CALL_OW 483
// end ;
16342: GO 16202
16344: POP
16345: POP
// end ;
16346: PPOPN 5
16348: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16349: LD_EXP 28
16353: PUSH
16354: LD_EXP 63
16358: AND
16359: IFFALSE 16453
16361: GO 16363
16363: DISABLE
16364: LD_INT 0
16366: PPUSH
16367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16368: LD_ADDR_VAR 0 2
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_OWVAR 2
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 32
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 21
16397: PUSH
16398: LD_INT 2
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: ST_TO_ADDR
// if not tmp then
16415: LD_VAR 0 2
16419: NOT
16420: IFFALSE 16424
// exit ;
16422: GO 16453
// for i in tmp do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16451
// SetFuel ( i , 0 ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 240
16449: GO 16434
16451: POP
16452: POP
// end ;
16453: PPOPN 2
16455: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16456: LD_EXP 28
16460: PUSH
16461: LD_EXP 64
16465: AND
16466: IFFALSE 16532
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16474: LD_ADDR_VAR 0 1
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_OWVAR 2
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 29
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: ST_TO_ADDR
// if not tmp then
16510: LD_VAR 0 1
16514: NOT
16515: IFFALSE 16519
// exit ;
16517: GO 16532
// DestroyUnit ( tmp [ 1 ] ) ;
16519: LD_VAR 0 1
16523: PUSH
16524: LD_INT 1
16526: ARRAY
16527: PPUSH
16528: CALL_OW 65
// end ;
16532: PPOPN 1
16534: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16535: LD_EXP 28
16539: PUSH
16540: LD_EXP 66
16544: AND
16545: IFFALSE 16674
16547: GO 16549
16549: DISABLE
16550: LD_INT 0
16552: PPUSH
// begin uc_side := 0 ;
16553: LD_ADDR_OWVAR 20
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// uc_nation := nation_arabian ;
16561: LD_ADDR_OWVAR 21
16565: PUSH
16566: LD_INT 2
16568: ST_TO_ADDR
// hc_gallery :=  ;
16569: LD_ADDR_OWVAR 33
16573: PUSH
16574: LD_STRING 
16576: ST_TO_ADDR
// hc_name :=  ;
16577: LD_ADDR_OWVAR 26
16581: PUSH
16582: LD_STRING 
16584: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: LD_INT 10
16593: PPUSH
16594: CALL_OW 380
// un := CreateHuman ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: CALL_OW 44
16607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16608: LD_VAR 0 1
16612: PPUSH
16613: LD_INT 1
16615: PPUSH
16616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16620: LD_INT 35
16622: PPUSH
16623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16627: LD_VAR 0 1
16631: PPUSH
16632: LD_INT 22
16634: PUSH
16635: LD_OWVAR 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 69
16648: PPUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 74
16658: PPUSH
16659: CALL_OW 115
// until IsDead ( un ) ;
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 301
16672: IFFALSE 16620
// end ;
16674: PPOPN 1
16676: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16677: LD_EXP 28
16681: PUSH
16682: LD_EXP 68
16686: AND
16687: IFFALSE 16699
16689: GO 16691
16691: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16692: LD_STRING earthquake(getX(game), 0, 32)
16694: PPUSH
16695: CALL_OW 559
16699: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16700: LD_EXP 28
16704: PUSH
16705: LD_EXP 69
16709: AND
16710: IFFALSE 16801
16712: GO 16714
16714: DISABLE
16715: LD_INT 0
16717: PPUSH
// begin enable ;
16718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16719: LD_ADDR_VAR 0 1
16723: PUSH
16724: LD_INT 22
16726: PUSH
16727: LD_OWVAR 2
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 21
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 33
16748: PUSH
16749: LD_INT 3
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: PPUSH
16761: CALL_OW 69
16765: ST_TO_ADDR
// if not tmp then
16766: LD_VAR 0 1
16770: NOT
16771: IFFALSE 16775
// exit ;
16773: GO 16801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 1
16782: PPUSH
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 12
16792: ARRAY
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: CALL_OW 234
// end ;
16801: PPOPN 1
16803: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16804: LD_EXP 28
16808: PUSH
16809: LD_EXP 70
16813: AND
16814: IFFALSE 16955
16816: GO 16818
16818: DISABLE
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16824: LD_ADDR_VAR 0 3
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 25
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: ST_TO_ADDR
// if not tmp then
16860: LD_VAR 0 3
16864: NOT
16865: IFFALSE 16869
// exit ;
16867: GO 16955
// un := tmp [ rand ( 1 , tmp ) ] ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: LD_VAR 0 3
16878: PUSH
16879: LD_INT 1
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: CALL_OW 12
16891: ARRAY
16892: ST_TO_ADDR
// if Crawls ( un ) then
16893: LD_VAR 0 2
16897: PPUSH
16898: CALL_OW 318
16902: IFFALSE 16913
// ComWalk ( un ) ;
16904: LD_VAR 0 2
16908: PPUSH
16909: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16913: LD_VAR 0 2
16917: PPUSH
16918: LD_INT 9
16920: PPUSH
16921: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16925: LD_INT 28
16927: PPUSH
16928: LD_OWVAR 2
16932: PPUSH
16933: LD_INT 2
16935: PPUSH
16936: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16940: LD_INT 29
16942: PPUSH
16943: LD_OWVAR 2
16947: PPUSH
16948: LD_INT 2
16950: PPUSH
16951: CALL_OW 322
// end ;
16955: PPOPN 3
16957: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16958: LD_EXP 28
16962: PUSH
16963: LD_EXP 71
16967: AND
16968: IFFALSE 17079
16970: GO 16972
16972: DISABLE
16973: LD_INT 0
16975: PPUSH
16976: PPUSH
16977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_INT 22
16985: PUSH
16986: LD_OWVAR 2
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 25
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: ST_TO_ADDR
// if not tmp then
17014: LD_VAR 0 3
17018: NOT
17019: IFFALSE 17023
// exit ;
17021: GO 17079
// un := tmp [ rand ( 1 , tmp ) ] ;
17023: LD_ADDR_VAR 0 2
17027: PUSH
17028: LD_VAR 0 3
17032: PUSH
17033: LD_INT 1
17035: PPUSH
17036: LD_VAR 0 3
17040: PPUSH
17041: CALL_OW 12
17045: ARRAY
17046: ST_TO_ADDR
// if Crawls ( un ) then
17047: LD_VAR 0 2
17051: PPUSH
17052: CALL_OW 318
17056: IFFALSE 17067
// ComWalk ( un ) ;
17058: LD_VAR 0 2
17062: PPUSH
17063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17067: LD_VAR 0 2
17071: PPUSH
17072: LD_INT 8
17074: PPUSH
17075: CALL_OW 336
// end ;
17079: PPOPN 3
17081: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17082: LD_EXP 28
17086: PUSH
17087: LD_EXP 72
17091: AND
17092: IFFALSE 17236
17094: GO 17096
17096: DISABLE
17097: LD_INT 0
17099: PPUSH
17100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17101: LD_ADDR_VAR 0 2
17105: PUSH
17106: LD_INT 22
17108: PUSH
17109: LD_OWVAR 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 21
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: LD_INT 34
17133: PUSH
17134: LD_INT 12
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: LD_INT 51
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 34
17153: PUSH
17154: LD_INT 32
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 2
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17236
// for i in tmp do
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_VAR 0 2
17195: PUSH
17196: FOR_IN
17197: IFFALSE 17234
// if GetCargo ( i , mat_artifact ) = 0 then
17199: LD_VAR 0 1
17203: PPUSH
17204: LD_INT 4
17206: PPUSH
17207: CALL_OW 289
17211: PUSH
17212: LD_INT 0
17214: EQUAL
17215: IFFALSE 17232
// SetCargo ( i , mat_siberit , 100 ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_INT 3
17224: PPUSH
17225: LD_INT 100
17227: PPUSH
17228: CALL_OW 290
17232: GO 17196
17234: POP
17235: POP
// end ;
17236: PPOPN 2
17238: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17239: LD_EXP 28
17243: PUSH
17244: LD_EXP 73
17248: AND
17249: IFFALSE 17432
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 22
17265: PUSH
17266: LD_OWVAR 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: ST_TO_ADDR
// if not tmp then
17280: LD_VAR 0 2
17284: NOT
17285: IFFALSE 17289
// exit ;
17287: GO 17432
// for i := 1 to 2 do
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: DOUBLE
17295: LD_INT 1
17297: DEC
17298: ST_TO_ADDR
17299: LD_INT 2
17301: PUSH
17302: FOR_TO
17303: IFFALSE 17430
// begin uc_side := your_side ;
17305: LD_ADDR_OWVAR 20
17309: PUSH
17310: LD_OWVAR 2
17314: ST_TO_ADDR
// uc_nation := nation_american ;
17315: LD_ADDR_OWVAR 21
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
// vc_chassis := us_morphling ;
17323: LD_ADDR_OWVAR 37
17327: PUSH
17328: LD_INT 5
17330: ST_TO_ADDR
// vc_engine := engine_siberite ;
17331: LD_ADDR_OWVAR 39
17335: PUSH
17336: LD_INT 3
17338: ST_TO_ADDR
// vc_control := control_computer ;
17339: LD_ADDR_OWVAR 38
17343: PUSH
17344: LD_INT 3
17346: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17347: LD_ADDR_OWVAR 40
17351: PUSH
17352: LD_INT 10
17354: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17355: LD_VAR 0 2
17359: PUSH
17360: LD_INT 1
17362: ARRAY
17363: PPUSH
17364: CALL_OW 310
17368: NOT
17369: IFFALSE 17416
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17371: CALL_OW 45
17375: PPUSH
17376: LD_VAR 0 2
17380: PUSH
17381: LD_INT 1
17383: ARRAY
17384: PPUSH
17385: CALL_OW 250
17389: PPUSH
17390: LD_VAR 0 2
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: CALL_OW 251
17403: PPUSH
17404: LD_INT 12
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: CALL_OW 50
17414: GO 17428
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17416: CALL_OW 45
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 51
// end ;
17428: GO 17302
17430: POP
17431: POP
// end ;
17432: PPOPN 2
17434: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17435: LD_EXP 28
17439: PUSH
17440: LD_EXP 74
17444: AND
17445: IFFALSE 17667
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17458: LD_ADDR_VAR 0 6
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_OWVAR 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 21
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: LD_INT 23
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: ST_TO_ADDR
// if not tmp then
17512: LD_VAR 0 6
17516: NOT
17517: IFFALSE 17521
// exit ;
17519: GO 17667
// s1 := rand ( 1 , 4 ) ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_INT 4
17531: PPUSH
17532: CALL_OW 12
17536: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17537: LD_ADDR_VAR 0 4
17541: PUSH
17542: LD_VAR 0 6
17546: PUSH
17547: LD_INT 1
17549: ARRAY
17550: PPUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: CALL_OW 259
17560: ST_TO_ADDR
// if s1 = 1 then
17561: LD_VAR 0 2
17565: PUSH
17566: LD_INT 1
17568: EQUAL
17569: IFFALSE 17589
// s2 := rand ( 2 , 4 ) else
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_INT 2
17578: PPUSH
17579: LD_INT 4
17581: PPUSH
17582: CALL_OW 12
17586: ST_TO_ADDR
17587: GO 17597
// s2 := 1 ;
17589: LD_ADDR_VAR 0 3
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17597: LD_ADDR_VAR 0 5
17601: PUSH
17602: LD_VAR 0 6
17606: PUSH
17607: LD_INT 1
17609: ARRAY
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 259
17620: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17621: LD_VAR 0 6
17625: PUSH
17626: LD_INT 1
17628: ARRAY
17629: PPUSH
17630: LD_VAR 0 2
17634: PPUSH
17635: LD_VAR 0 5
17639: PPUSH
17640: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17644: LD_VAR 0 6
17648: PUSH
17649: LD_INT 1
17651: ARRAY
17652: PPUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_VAR 0 4
17662: PPUSH
17663: CALL_OW 237
// end ;
17667: PPOPN 6
17669: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17670: LD_EXP 28
17674: PUSH
17675: LD_EXP 75
17679: AND
17680: IFFALSE 17759
17682: GO 17684
17684: DISABLE
17685: LD_INT 0
17687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 30
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PPUSH
17719: CALL_OW 69
17723: ST_TO_ADDR
// if not tmp then
17724: LD_VAR 0 1
17728: NOT
17729: IFFALSE 17733
// exit ;
17731: GO 17759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17733: LD_VAR 0 1
17737: PUSH
17738: LD_INT 1
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 12
17750: ARRAY
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 234
// end ;
17759: PPOPN 1
17761: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17762: LD_EXP 28
17766: PUSH
17767: LD_EXP 76
17771: AND
17772: IFFALSE 17884
17774: GO 17776
17776: DISABLE
17777: LD_INT 0
17779: PPUSH
17780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 22
17788: PUSH
17789: LD_OWVAR 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 30
17803: PUSH
17804: LD_INT 27
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 30
17813: PUSH
17814: LD_INT 26
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 30
17823: PUSH
17824: LD_INT 28
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PPUSH
17841: CALL_OW 69
17845: ST_TO_ADDR
// if not tmp then
17846: LD_VAR 0 2
17850: NOT
17851: IFFALSE 17855
// exit ;
17853: GO 17884
// for i in tmp do
17855: LD_ADDR_VAR 0 1
17859: PUSH
17860: LD_VAR 0 2
17864: PUSH
17865: FOR_IN
17866: IFFALSE 17882
// SetLives ( i , 1 ) ;
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 234
17880: GO 17865
17882: POP
17883: POP
// end ;
17884: PPOPN 2
17886: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17887: LD_EXP 28
17891: PUSH
17892: LD_EXP 77
17896: AND
17897: IFFALSE 18184
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
17906: PPUSH
// begin i := rand ( 1 , 7 ) ;
17907: LD_ADDR_VAR 0 1
17911: PUSH
17912: LD_INT 1
17914: PPUSH
17915: LD_INT 7
17917: PPUSH
17918: CALL_OW 12
17922: ST_TO_ADDR
// case i of 1 :
17923: LD_VAR 0 1
17927: PUSH
17928: LD_INT 1
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17946
17936: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17937: LD_STRING earthquake(getX(game), 0, 32)
17939: PPUSH
17940: CALL_OW 559
17944: GO 18184
17946: LD_INT 2
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 17968
17954: POP
// begin ToLua ( displayStucuk(); ) ;
17955: LD_STRING displayStucuk();
17957: PPUSH
17958: CALL_OW 559
// ResetFog ;
17962: CALL_OW 335
// end ; 3 :
17966: GO 18184
17968: LD_INT 3
17970: DOUBLE
17971: EQUAL
17972: IFTRUE 17976
17974: GO 18080
17976: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_INT 22
17984: PUSH
17985: LD_OWVAR 2
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 25
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 69
18012: ST_TO_ADDR
// if not tmp then
18013: LD_VAR 0 2
18017: NOT
18018: IFFALSE 18022
// exit ;
18020: GO 18184
// un := tmp [ rand ( 1 , tmp ) ] ;
18022: LD_ADDR_VAR 0 3
18026: PUSH
18027: LD_VAR 0 2
18031: PUSH
18032: LD_INT 1
18034: PPUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 12
18044: ARRAY
18045: ST_TO_ADDR
// if Crawls ( un ) then
18046: LD_VAR 0 3
18050: PPUSH
18051: CALL_OW 318
18055: IFFALSE 18066
// ComWalk ( un ) ;
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 8
18073: PPUSH
18074: CALL_OW 336
// end ; 4 :
18078: GO 18184
18080: LD_INT 4
18082: DOUBLE
18083: EQUAL
18084: IFTRUE 18088
18086: GO 18162
18088: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18089: LD_ADDR_VAR 0 2
18093: PUSH
18094: LD_INT 22
18096: PUSH
18097: LD_OWVAR 2
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 30
18108: PUSH
18109: LD_INT 29
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: ST_TO_ADDR
// if not tmp then
18125: LD_VAR 0 2
18129: NOT
18130: IFFALSE 18134
// exit ;
18132: GO 18184
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18134: LD_VAR 0 2
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PPUSH
18143: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18147: LD_VAR 0 2
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PPUSH
18156: CALL_OW 65
// end ; 5 .. 7 :
18160: GO 18184
18162: LD_INT 5
18164: DOUBLE
18165: GREATEREQUAL
18166: IFFALSE 18174
18168: LD_INT 7
18170: DOUBLE
18171: LESSEQUAL
18172: IFTRUE 18176
18174: GO 18183
18176: POP
// StreamSibBomb ; end ;
18177: CALL 14421 0 0
18181: GO 18184
18183: POP
// end ;
18184: PPOPN 3
18186: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18187: LD_EXP 28
18191: PUSH
18192: LD_EXP 78
18196: AND
18197: IFFALSE 18353
18199: GO 18201
18201: DISABLE
18202: LD_INT 0
18204: PPUSH
18205: PPUSH
18206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18207: LD_ADDR_VAR 0 2
18211: PUSH
18212: LD_INT 81
18214: PUSH
18215: LD_OWVAR 2
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PPUSH
18256: CALL_OW 69
18260: ST_TO_ADDR
// if not tmp then
18261: LD_VAR 0 2
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18353
// p := 0 ;
18270: LD_ADDR_VAR 0 3
18274: PUSH
18275: LD_INT 0
18277: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18278: LD_INT 35
18280: PPUSH
18281: CALL_OW 67
// p := p + 1 ;
18285: LD_ADDR_VAR 0 3
18289: PUSH
18290: LD_VAR 0 3
18294: PUSH
18295: LD_INT 1
18297: PLUS
18298: ST_TO_ADDR
// for i in tmp do
18299: LD_ADDR_VAR 0 1
18303: PUSH
18304: LD_VAR 0 2
18308: PUSH
18309: FOR_IN
18310: IFFALSE 18341
// if GetLives ( i ) < 1000 then
18312: LD_VAR 0 1
18316: PPUSH
18317: CALL_OW 256
18321: PUSH
18322: LD_INT 1000
18324: LESS
18325: IFFALSE 18339
// SetLives ( i , 1000 ) ;
18327: LD_VAR 0 1
18331: PPUSH
18332: LD_INT 1000
18334: PPUSH
18335: CALL_OW 234
18339: GO 18309
18341: POP
18342: POP
// until p > 20 ;
18343: LD_VAR 0 3
18347: PUSH
18348: LD_INT 20
18350: GREATER
18351: IFFALSE 18278
// end ;
18353: PPOPN 3
18355: END
// every 0 0$1 trigger StreamModeActive and sTime do
18356: LD_EXP 28
18360: PUSH
18361: LD_EXP 79
18365: AND
18366: IFFALSE 18401
18368: GO 18370
18370: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18371: LD_INT 28
18373: PPUSH
18374: LD_OWVAR 2
18378: PPUSH
18379: LD_INT 2
18381: PPUSH
18382: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18386: LD_INT 30
18388: PPUSH
18389: LD_OWVAR 2
18393: PPUSH
18394: LD_INT 2
18396: PPUSH
18397: CALL_OW 322
// end ;
18401: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18402: LD_EXP 28
18406: PUSH
18407: LD_EXP 80
18411: AND
18412: IFFALSE 18533
18414: GO 18416
18416: DISABLE
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18421: LD_ADDR_VAR 0 2
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_OWVAR 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: LD_INT 23
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: ST_TO_ADDR
// if not tmp then
18475: LD_VAR 0 2
18479: NOT
18480: IFFALSE 18484
// exit ;
18482: GO 18533
// for i in tmp do
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_VAR 0 2
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18531
// begin if Crawls ( i ) then
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 318
18506: IFFALSE 18517
// ComWalk ( i ) ;
18508: LD_VAR 0 1
18512: PPUSH
18513: CALL_OW 138
// SetClass ( i , 2 ) ;
18517: LD_VAR 0 1
18521: PPUSH
18522: LD_INT 2
18524: PPUSH
18525: CALL_OW 336
// end ;
18529: GO 18494
18531: POP
18532: POP
// end ;
18533: PPOPN 2
18535: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18536: LD_EXP 28
18540: PUSH
18541: LD_EXP 81
18545: AND
18546: IFFALSE 18834
18548: GO 18550
18550: DISABLE
18551: LD_INT 0
18553: PPUSH
18554: PPUSH
18555: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18556: LD_OWVAR 2
18560: PPUSH
18561: LD_INT 9
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: LD_INT 1
18569: PPUSH
18570: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18574: LD_INT 9
18576: PPUSH
18577: LD_OWVAR 2
18581: PPUSH
18582: CALL_OW 343
// uc_side := 9 ;
18586: LD_ADDR_OWVAR 20
18590: PUSH
18591: LD_INT 9
18593: ST_TO_ADDR
// uc_nation := 2 ;
18594: LD_ADDR_OWVAR 21
18598: PUSH
18599: LD_INT 2
18601: ST_TO_ADDR
// hc_name := Dark Warrior ;
18602: LD_ADDR_OWVAR 26
18606: PUSH
18607: LD_STRING Dark Warrior
18609: ST_TO_ADDR
// hc_gallery :=  ;
18610: LD_ADDR_OWVAR 33
18614: PUSH
18615: LD_STRING 
18617: ST_TO_ADDR
// hc_noskilllimit := true ;
18618: LD_ADDR_OWVAR 76
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18626: LD_ADDR_OWVAR 31
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: LD_INT 30
18639: PUSH
18640: LD_INT 30
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// un := CreateHuman ;
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: CALL_OW 44
18658: ST_TO_ADDR
// hc_noskilllimit := false ;
18659: LD_ADDR_OWVAR 76
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 51
// ToLua ( playRanger() ) ;
18679: LD_STRING playRanger()
18681: PPUSH
18682: CALL_OW 559
// p := 0 ;
18686: LD_ADDR_VAR 0 2
18690: PUSH
18691: LD_INT 0
18693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18694: LD_INT 35
18696: PPUSH
18697: CALL_OW 67
// p := p + 1 ;
18701: LD_ADDR_VAR 0 2
18705: PUSH
18706: LD_VAR 0 2
18710: PUSH
18711: LD_INT 1
18713: PLUS
18714: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18715: LD_VAR 0 3
18719: PPUSH
18720: CALL_OW 256
18724: PUSH
18725: LD_INT 1000
18727: LESS
18728: IFFALSE 18742
// SetLives ( un , 1000 ) ;
18730: LD_VAR 0 3
18734: PPUSH
18735: LD_INT 1000
18737: PPUSH
18738: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18742: LD_VAR 0 3
18746: PPUSH
18747: LD_INT 81
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 91
18761: PUSH
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 30
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PPUSH
18779: CALL_OW 69
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: CALL_OW 74
18793: PPUSH
18794: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18798: LD_VAR 0 2
18802: PUSH
18803: LD_INT 80
18805: GREATER
18806: PUSH
18807: LD_VAR 0 3
18811: PPUSH
18812: CALL_OW 301
18816: OR
18817: IFFALSE 18694
// if un then
18819: LD_VAR 0 3
18823: IFFALSE 18834
// RemoveUnit ( un ) ;
18825: LD_VAR 0 3
18829: PPUSH
18830: CALL_OW 64
// end ;
18834: PPOPN 3
18836: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18837: LD_EXP 82
18841: IFFALSE 18957
18843: GO 18845
18845: DISABLE
18846: LD_INT 0
18848: PPUSH
18849: PPUSH
18850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18851: LD_ADDR_VAR 0 2
18855: PUSH
18856: LD_INT 81
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18887: LD_STRING playComputer()
18889: PPUSH
18890: CALL_OW 559
// if not tmp then
18894: LD_VAR 0 2
18898: NOT
18899: IFFALSE 18903
// exit ;
18901: GO 18957
// for i in tmp do
18903: LD_ADDR_VAR 0 1
18907: PUSH
18908: LD_VAR 0 2
18912: PUSH
18913: FOR_IN
18914: IFFALSE 18955
// for j := 1 to 4 do
18916: LD_ADDR_VAR 0 3
18920: PUSH
18921: DOUBLE
18922: LD_INT 1
18924: DEC
18925: ST_TO_ADDR
18926: LD_INT 4
18928: PUSH
18929: FOR_TO
18930: IFFALSE 18951
// SetSkill ( i , j , 10 ) ;
18932: LD_VAR 0 1
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_INT 10
18944: PPUSH
18945: CALL_OW 237
18949: GO 18929
18951: POP
18952: POP
18953: GO 18913
18955: POP
18956: POP
// end ;
18957: PPOPN 3
18959: END
// every 0 0$1 trigger s30 do var i , tmp ;
18960: LD_EXP 83
18964: IFFALSE 19033
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
18972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18973: LD_ADDR_VAR 0 2
18977: PUSH
18978: LD_INT 22
18980: PUSH
18981: LD_OWVAR 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 69
18994: ST_TO_ADDR
// if not tmp then
18995: LD_VAR 0 2
18999: NOT
19000: IFFALSE 19004
// exit ;
19002: GO 19033
// for i in tmp do
19004: LD_ADDR_VAR 0 1
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: FOR_IN
19015: IFFALSE 19031
// SetLives ( i , 300 ) ;
19017: LD_VAR 0 1
19021: PPUSH
19022: LD_INT 300
19024: PPUSH
19025: CALL_OW 234
19029: GO 19014
19031: POP
19032: POP
// end ;
19033: PPOPN 2
19035: END
// every 0 0$1 trigger s60 do var i , tmp ;
19036: LD_EXP 84
19040: IFFALSE 19109
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// if not tmp then
19071: LD_VAR 0 2
19075: NOT
19076: IFFALSE 19080
// exit ;
19078: GO 19109
// for i in tmp do
19080: LD_ADDR_VAR 0 1
19084: PUSH
19085: LD_VAR 0 2
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19107
// SetLives ( i , 600 ) ;
19093: LD_VAR 0 1
19097: PPUSH
19098: LD_INT 600
19100: PPUSH
19101: CALL_OW 234
19105: GO 19090
19107: POP
19108: POP
// end ;
19109: PPOPN 2
19111: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19112: LD_INT 0
19114: PPUSH
// case cmd of 301 :
19115: LD_VAR 0 1
19119: PUSH
19120: LD_INT 301
19122: DOUBLE
19123: EQUAL
19124: IFTRUE 19128
19126: GO 19160
19128: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19129: LD_VAR 0 6
19133: PPUSH
19134: LD_VAR 0 7
19138: PPUSH
19139: LD_VAR 0 8
19143: PPUSH
19144: LD_VAR 0 4
19148: PPUSH
19149: LD_VAR 0 5
19153: PPUSH
19154: CALL 20361 0 5
19158: GO 19281
19160: LD_INT 302
19162: DOUBLE
19163: EQUAL
19164: IFTRUE 19168
19166: GO 19205
19168: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19169: LD_VAR 0 6
19173: PPUSH
19174: LD_VAR 0 7
19178: PPUSH
19179: LD_VAR 0 8
19183: PPUSH
19184: LD_VAR 0 9
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: LD_VAR 0 5
19198: PPUSH
19199: CALL 20452 0 6
19203: GO 19281
19205: LD_INT 303
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19250
19213: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19214: LD_VAR 0 6
19218: PPUSH
19219: LD_VAR 0 7
19223: PPUSH
19224: LD_VAR 0 8
19228: PPUSH
19229: LD_VAR 0 9
19233: PPUSH
19234: LD_VAR 0 4
19238: PPUSH
19239: LD_VAR 0 5
19243: PPUSH
19244: CALL 19286 0 6
19248: GO 19281
19250: LD_INT 304
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19280
19258: POP
// hHackTeleport ( unit , x , y ) ; end ;
19259: LD_VAR 0 2
19263: PPUSH
19264: LD_VAR 0 4
19268: PPUSH
19269: LD_VAR 0 5
19273: PPUSH
19274: CALL 21045 0 3
19278: GO 19281
19280: POP
// end ;
19281: LD_VAR 0 12
19285: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19290: LD_VAR 0 1
19294: PUSH
19295: LD_INT 1
19297: LESS
19298: PUSH
19299: LD_VAR 0 1
19303: PUSH
19304: LD_INT 3
19306: GREATER
19307: OR
19308: PUSH
19309: LD_VAR 0 5
19313: PPUSH
19314: LD_VAR 0 6
19318: PPUSH
19319: CALL_OW 428
19323: OR
19324: IFFALSE 19328
// exit ;
19326: GO 20048
// uc_side := your_side ;
19328: LD_ADDR_OWVAR 20
19332: PUSH
19333: LD_OWVAR 2
19337: ST_TO_ADDR
// uc_nation := nation ;
19338: LD_ADDR_OWVAR 21
19342: PUSH
19343: LD_VAR 0 1
19347: ST_TO_ADDR
// bc_level = 1 ;
19348: LD_ADDR_OWVAR 43
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// case btype of 1 :
19356: LD_VAR 0 2
19360: PUSH
19361: LD_INT 1
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19380
19369: POP
// bc_type := b_depot ; 2 :
19370: LD_ADDR_OWVAR 42
19374: PUSH
19375: LD_INT 0
19377: ST_TO_ADDR
19378: GO 19992
19380: LD_INT 2
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19399
19388: POP
// bc_type := b_warehouse ; 3 :
19389: LD_ADDR_OWVAR 42
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
19397: GO 19992
19399: LD_INT 3
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19407
19405: GO 19418
19407: POP
// bc_type := b_lab ; 4 .. 9 :
19408: LD_ADDR_OWVAR 42
19412: PUSH
19413: LD_INT 6
19415: ST_TO_ADDR
19416: GO 19992
19418: LD_INT 4
19420: DOUBLE
19421: GREATEREQUAL
19422: IFFALSE 19430
19424: LD_INT 9
19426: DOUBLE
19427: LESSEQUAL
19428: IFTRUE 19432
19430: GO 19484
19432: POP
// begin bc_type := b_lab_half ;
19433: LD_ADDR_OWVAR 42
19437: PUSH
19438: LD_INT 7
19440: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19441: LD_ADDR_OWVAR 44
19445: PUSH
19446: LD_INT 10
19448: PUSH
19449: LD_INT 11
19451: PUSH
19452: LD_INT 12
19454: PUSH
19455: LD_INT 15
19457: PUSH
19458: LD_INT 14
19460: PUSH
19461: LD_INT 13
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_VAR 0 2
19476: PUSH
19477: LD_INT 3
19479: MINUS
19480: ARRAY
19481: ST_TO_ADDR
// end ; 10 .. 13 :
19482: GO 19992
19484: LD_INT 10
19486: DOUBLE
19487: GREATEREQUAL
19488: IFFALSE 19496
19490: LD_INT 13
19492: DOUBLE
19493: LESSEQUAL
19494: IFTRUE 19498
19496: GO 19575
19498: POP
// begin bc_type := b_lab_full ;
19499: LD_ADDR_OWVAR 42
19503: PUSH
19504: LD_INT 8
19506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19507: LD_ADDR_OWVAR 44
19511: PUSH
19512: LD_INT 10
19514: PUSH
19515: LD_INT 12
19517: PUSH
19518: LD_INT 14
19520: PUSH
19521: LD_INT 13
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: LD_VAR 0 2
19534: PUSH
19535: LD_INT 9
19537: MINUS
19538: ARRAY
19539: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19540: LD_ADDR_OWVAR 45
19544: PUSH
19545: LD_INT 11
19547: PUSH
19548: LD_INT 15
19550: PUSH
19551: LD_INT 12
19553: PUSH
19554: LD_INT 15
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: LD_INT 9
19570: MINUS
19571: ARRAY
19572: ST_TO_ADDR
// end ; 14 :
19573: GO 19992
19575: LD_INT 14
19577: DOUBLE
19578: EQUAL
19579: IFTRUE 19583
19581: GO 19594
19583: POP
// bc_type := b_workshop ; 15 :
19584: LD_ADDR_OWVAR 42
19588: PUSH
19589: LD_INT 2
19591: ST_TO_ADDR
19592: GO 19992
19594: LD_INT 15
19596: DOUBLE
19597: EQUAL
19598: IFTRUE 19602
19600: GO 19613
19602: POP
// bc_type := b_factory ; 16 :
19603: LD_ADDR_OWVAR 42
19607: PUSH
19608: LD_INT 3
19610: ST_TO_ADDR
19611: GO 19992
19613: LD_INT 16
19615: DOUBLE
19616: EQUAL
19617: IFTRUE 19621
19619: GO 19632
19621: POP
// bc_type := b_ext_gun ; 17 :
19622: LD_ADDR_OWVAR 42
19626: PUSH
19627: LD_INT 17
19629: ST_TO_ADDR
19630: GO 19992
19632: LD_INT 17
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19668
19640: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19641: LD_ADDR_OWVAR 42
19645: PUSH
19646: LD_INT 19
19648: PUSH
19649: LD_INT 23
19651: PUSH
19652: LD_INT 19
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: PUSH
19660: LD_VAR 0 1
19664: ARRAY
19665: ST_TO_ADDR
19666: GO 19992
19668: LD_INT 18
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19687
19676: POP
// bc_type := b_ext_radar ; 19 :
19677: LD_ADDR_OWVAR 42
19681: PUSH
19682: LD_INT 20
19684: ST_TO_ADDR
19685: GO 19992
19687: LD_INT 19
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19706
19695: POP
// bc_type := b_ext_radio ; 20 :
19696: LD_ADDR_OWVAR 42
19700: PUSH
19701: LD_INT 22
19703: ST_TO_ADDR
19704: GO 19992
19706: LD_INT 20
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19725
19714: POP
// bc_type := b_ext_siberium ; 21 :
19715: LD_ADDR_OWVAR 42
19719: PUSH
19720: LD_INT 21
19722: ST_TO_ADDR
19723: GO 19992
19725: LD_INT 21
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19744
19733: POP
// bc_type := b_ext_computer ; 22 :
19734: LD_ADDR_OWVAR 42
19738: PUSH
19739: LD_INT 24
19741: ST_TO_ADDR
19742: GO 19992
19744: LD_INT 22
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19763
19752: POP
// bc_type := b_ext_track ; 23 :
19753: LD_ADDR_OWVAR 42
19757: PUSH
19758: LD_INT 16
19760: ST_TO_ADDR
19761: GO 19992
19763: LD_INT 23
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19782
19771: POP
// bc_type := b_ext_laser ; 24 :
19772: LD_ADDR_OWVAR 42
19776: PUSH
19777: LD_INT 25
19779: ST_TO_ADDR
19780: GO 19992
19782: LD_INT 24
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19801
19790: POP
// bc_type := b_control_tower ; 25 :
19791: LD_ADDR_OWVAR 42
19795: PUSH
19796: LD_INT 36
19798: ST_TO_ADDR
19799: GO 19992
19801: LD_INT 25
19803: DOUBLE
19804: EQUAL
19805: IFTRUE 19809
19807: GO 19820
19809: POP
// bc_type := b_breastwork ; 26 :
19810: LD_ADDR_OWVAR 42
19814: PUSH
19815: LD_INT 31
19817: ST_TO_ADDR
19818: GO 19992
19820: LD_INT 26
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19839
19828: POP
// bc_type := b_bunker ; 27 :
19829: LD_ADDR_OWVAR 42
19833: PUSH
19834: LD_INT 32
19836: ST_TO_ADDR
19837: GO 19992
19839: LD_INT 27
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19858
19847: POP
// bc_type := b_turret ; 28 :
19848: LD_ADDR_OWVAR 42
19852: PUSH
19853: LD_INT 33
19855: ST_TO_ADDR
19856: GO 19992
19858: LD_INT 28
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19877
19866: POP
// bc_type := b_armoury ; 29 :
19867: LD_ADDR_OWVAR 42
19871: PUSH
19872: LD_INT 4
19874: ST_TO_ADDR
19875: GO 19992
19877: LD_INT 29
19879: DOUBLE
19880: EQUAL
19881: IFTRUE 19885
19883: GO 19896
19885: POP
// bc_type := b_barracks ; 30 :
19886: LD_ADDR_OWVAR 42
19890: PUSH
19891: LD_INT 5
19893: ST_TO_ADDR
19894: GO 19992
19896: LD_INT 30
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19915
19904: POP
// bc_type := b_solar_power ; 31 :
19905: LD_ADDR_OWVAR 42
19909: PUSH
19910: LD_INT 27
19912: ST_TO_ADDR
19913: GO 19992
19915: LD_INT 31
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19934
19923: POP
// bc_type := b_oil_power ; 32 :
19924: LD_ADDR_OWVAR 42
19928: PUSH
19929: LD_INT 26
19931: ST_TO_ADDR
19932: GO 19992
19934: LD_INT 32
19936: DOUBLE
19937: EQUAL
19938: IFTRUE 19942
19940: GO 19953
19942: POP
// bc_type := b_siberite_power ; 33 :
19943: LD_ADDR_OWVAR 42
19947: PUSH
19948: LD_INT 28
19950: ST_TO_ADDR
19951: GO 19992
19953: LD_INT 33
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19972
19961: POP
// bc_type := b_oil_mine ; 34 :
19962: LD_ADDR_OWVAR 42
19966: PUSH
19967: LD_INT 29
19969: ST_TO_ADDR
19970: GO 19992
19972: LD_INT 34
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19991
19980: POP
// bc_type := b_siberite_mine ; end ;
19981: LD_ADDR_OWVAR 42
19985: PUSH
19986: LD_INT 30
19988: ST_TO_ADDR
19989: GO 19992
19991: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19992: LD_ADDR_VAR 0 8
19996: PUSH
19997: LD_VAR 0 5
20001: PPUSH
20002: LD_VAR 0 6
20006: PPUSH
20007: LD_VAR 0 3
20011: PPUSH
20012: CALL_OW 47
20016: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20017: LD_OWVAR 42
20021: PUSH
20022: LD_INT 32
20024: PUSH
20025: LD_INT 33
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: IN
20032: IFFALSE 20048
// PlaceWeaponTurret ( b , weapon ) ;
20034: LD_VAR 0 8
20038: PPUSH
20039: LD_VAR 0 4
20043: PPUSH
20044: CALL_OW 431
// end ;
20048: LD_VAR 0 7
20052: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20053: LD_INT 0
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20059: LD_ADDR_VAR 0 4
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_OWVAR 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 69
20112: ST_TO_ADDR
// if not tmp then
20113: LD_VAR 0 4
20117: NOT
20118: IFFALSE 20122
// exit ;
20120: GO 20181
// for i in tmp do
20122: LD_ADDR_VAR 0 2
20126: PUSH
20127: LD_VAR 0 4
20131: PUSH
20132: FOR_IN
20133: IFFALSE 20179
// for j = 1 to 3 do
20135: LD_ADDR_VAR 0 3
20139: PUSH
20140: DOUBLE
20141: LD_INT 1
20143: DEC
20144: ST_TO_ADDR
20145: LD_INT 3
20147: PUSH
20148: FOR_TO
20149: IFFALSE 20175
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20151: LD_VAR 0 2
20155: PPUSH
20156: CALL_OW 274
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 99999
20168: PPUSH
20169: CALL_OW 277
20173: GO 20148
20175: POP
20176: POP
20177: GO 20132
20179: POP
20180: POP
// end ;
20181: LD_VAR 0 1
20185: RET
// export function hHackSetLevel10 ; var i , j ; begin
20186: LD_INT 0
20188: PPUSH
20189: PPUSH
20190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20191: LD_ADDR_VAR 0 2
20195: PUSH
20196: LD_INT 21
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 69
20210: PUSH
20211: FOR_IN
20212: IFFALSE 20264
// if IsSelected ( i ) then
20214: LD_VAR 0 2
20218: PPUSH
20219: CALL_OW 306
20223: IFFALSE 20262
// begin for j := 1 to 4 do
20225: LD_ADDR_VAR 0 3
20229: PUSH
20230: DOUBLE
20231: LD_INT 1
20233: DEC
20234: ST_TO_ADDR
20235: LD_INT 4
20237: PUSH
20238: FOR_TO
20239: IFFALSE 20260
// SetSkill ( i , j , 10 ) ;
20241: LD_VAR 0 2
20245: PPUSH
20246: LD_VAR 0 3
20250: PPUSH
20251: LD_INT 10
20253: PPUSH
20254: CALL_OW 237
20258: GO 20238
20260: POP
20261: POP
// end ;
20262: GO 20211
20264: POP
20265: POP
// end ;
20266: LD_VAR 0 1
20270: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
20275: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: LD_INT 22
20283: PUSH
20284: LD_OWVAR 2
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 21
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PPUSH
20307: CALL_OW 69
20311: PUSH
20312: FOR_IN
20313: IFFALSE 20354
// begin for j := 1 to 4 do
20315: LD_ADDR_VAR 0 3
20319: PUSH
20320: DOUBLE
20321: LD_INT 1
20323: DEC
20324: ST_TO_ADDR
20325: LD_INT 4
20327: PUSH
20328: FOR_TO
20329: IFFALSE 20350
// SetSkill ( i , j , 10 ) ;
20331: LD_VAR 0 2
20335: PPUSH
20336: LD_VAR 0 3
20340: PPUSH
20341: LD_INT 10
20343: PPUSH
20344: CALL_OW 237
20348: GO 20328
20350: POP
20351: POP
// end ;
20352: GO 20312
20354: POP
20355: POP
// end ;
20356: LD_VAR 0 1
20360: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20361: LD_INT 0
20363: PPUSH
// uc_side := your_side ;
20364: LD_ADDR_OWVAR 20
20368: PUSH
20369: LD_OWVAR 2
20373: ST_TO_ADDR
// uc_nation := nation ;
20374: LD_ADDR_OWVAR 21
20378: PUSH
20379: LD_VAR 0 1
20383: ST_TO_ADDR
// InitHc ;
20384: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20388: LD_INT 0
20390: PPUSH
20391: LD_VAR 0 2
20395: PPUSH
20396: LD_VAR 0 3
20400: PPUSH
20401: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20405: LD_VAR 0 4
20409: PPUSH
20410: LD_VAR 0 5
20414: PPUSH
20415: CALL_OW 428
20419: PUSH
20420: LD_INT 0
20422: EQUAL
20423: IFFALSE 20447
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20425: CALL_OW 44
20429: PPUSH
20430: LD_VAR 0 4
20434: PPUSH
20435: LD_VAR 0 5
20439: PPUSH
20440: LD_INT 1
20442: PPUSH
20443: CALL_OW 48
// end ;
20447: LD_VAR 0 6
20451: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20452: LD_INT 0
20454: PPUSH
20455: PPUSH
// uc_side := your_side ;
20456: LD_ADDR_OWVAR 20
20460: PUSH
20461: LD_OWVAR 2
20465: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20466: LD_VAR 0 1
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 4
20482: PUSH
20483: LD_INT 5
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: IN
20493: IFFALSE 20505
// uc_nation := nation_american else
20495: LD_ADDR_OWVAR 21
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
20503: GO 20548
// if chassis in [ 11 , 12 , 13 , 14 ] then
20505: LD_VAR 0 1
20509: PUSH
20510: LD_INT 11
20512: PUSH
20513: LD_INT 12
20515: PUSH
20516: LD_INT 13
20518: PUSH
20519: LD_INT 14
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: IN
20528: IFFALSE 20540
// uc_nation := nation_arabian else
20530: LD_ADDR_OWVAR 21
20534: PUSH
20535: LD_INT 2
20537: ST_TO_ADDR
20538: GO 20548
// uc_nation := nation_russian ;
20540: LD_ADDR_OWVAR 21
20544: PUSH
20545: LD_INT 3
20547: ST_TO_ADDR
// vc_chassis := chassis ;
20548: LD_ADDR_OWVAR 37
20552: PUSH
20553: LD_VAR 0 1
20557: ST_TO_ADDR
// vc_engine := engine ;
20558: LD_ADDR_OWVAR 39
20562: PUSH
20563: LD_VAR 0 2
20567: ST_TO_ADDR
// vc_control := control ;
20568: LD_ADDR_OWVAR 38
20572: PUSH
20573: LD_VAR 0 3
20577: ST_TO_ADDR
// vc_weapon := weapon ;
20578: LD_ADDR_OWVAR 40
20582: PUSH
20583: LD_VAR 0 4
20587: ST_TO_ADDR
// un := CreateVehicle ;
20588: LD_ADDR_VAR 0 8
20592: PUSH
20593: CALL_OW 45
20597: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20598: LD_VAR 0 8
20602: PPUSH
20603: LD_INT 0
20605: PPUSH
20606: LD_INT 5
20608: PPUSH
20609: CALL_OW 12
20613: PPUSH
20614: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20618: LD_VAR 0 8
20622: PPUSH
20623: LD_VAR 0 5
20627: PPUSH
20628: LD_VAR 0 6
20632: PPUSH
20633: LD_INT 1
20635: PPUSH
20636: CALL_OW 48
// end ;
20640: LD_VAR 0 7
20644: RET
// export hInvincible ; every 1 do
20645: GO 20647
20647: DISABLE
// hInvincible := [ ] ;
20648: LD_ADDR_EXP 85
20652: PUSH
20653: EMPTY
20654: ST_TO_ADDR
20655: END
// every 10 do var i ;
20656: GO 20658
20658: DISABLE
20659: LD_INT 0
20661: PPUSH
// begin enable ;
20662: ENABLE
// if not hInvincible then
20663: LD_EXP 85
20667: NOT
20668: IFFALSE 20672
// exit ;
20670: GO 20716
// for i in hInvincible do
20672: LD_ADDR_VAR 0 1
20676: PUSH
20677: LD_EXP 85
20681: PUSH
20682: FOR_IN
20683: IFFALSE 20714
// if GetLives ( i ) < 1000 then
20685: LD_VAR 0 1
20689: PPUSH
20690: CALL_OW 256
20694: PUSH
20695: LD_INT 1000
20697: LESS
20698: IFFALSE 20712
// SetLives ( i , 1000 ) ;
20700: LD_VAR 0 1
20704: PPUSH
20705: LD_INT 1000
20707: PPUSH
20708: CALL_OW 234
20712: GO 20682
20714: POP
20715: POP
// end ;
20716: PPOPN 1
20718: END
// export function hHackInvincible ; var i ; begin
20719: LD_INT 0
20721: PPUSH
20722: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 21
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: PPUSH
20756: CALL_OW 69
20760: PUSH
20761: FOR_IN
20762: IFFALSE 20823
// if IsSelected ( i ) then
20764: LD_VAR 0 2
20768: PPUSH
20769: CALL_OW 306
20773: IFFALSE 20821
// begin if i in hInvincible then
20775: LD_VAR 0 2
20779: PUSH
20780: LD_EXP 85
20784: IN
20785: IFFALSE 20805
// hInvincible := hInvincible diff i else
20787: LD_ADDR_EXP 85
20791: PUSH
20792: LD_EXP 85
20796: PUSH
20797: LD_VAR 0 2
20801: DIFF
20802: ST_TO_ADDR
20803: GO 20821
// hInvincible := hInvincible union i ;
20805: LD_ADDR_EXP 85
20809: PUSH
20810: LD_EXP 85
20814: PUSH
20815: LD_VAR 0 2
20819: UNION
20820: ST_TO_ADDR
// end ;
20821: GO 20761
20823: POP
20824: POP
// end ;
20825: LD_VAR 0 1
20829: RET
// export function hHackInvisible ; var i , j ; begin
20830: LD_INT 0
20832: PPUSH
20833: PPUSH
20834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PPUSH
20850: CALL_OW 69
20854: PUSH
20855: FOR_IN
20856: IFFALSE 20880
// if IsSelected ( i ) then
20858: LD_VAR 0 2
20862: PPUSH
20863: CALL_OW 306
20867: IFFALSE 20878
// ComForceInvisible ( i ) ;
20869: LD_VAR 0 2
20873: PPUSH
20874: CALL_OW 496
20878: GO 20855
20880: POP
20881: POP
// end ;
20882: LD_VAR 0 1
20886: RET
// export function hHackChangeYourSide ; begin
20887: LD_INT 0
20889: PPUSH
// if your_side = 8 then
20890: LD_OWVAR 2
20894: PUSH
20895: LD_INT 8
20897: EQUAL
20898: IFFALSE 20910
// your_side := 0 else
20900: LD_ADDR_OWVAR 2
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
20908: GO 20924
// your_side := your_side + 1 ;
20910: LD_ADDR_OWVAR 2
20914: PUSH
20915: LD_OWVAR 2
20919: PUSH
20920: LD_INT 1
20922: PLUS
20923: ST_TO_ADDR
// end ;
20924: LD_VAR 0 1
20928: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20929: LD_INT 0
20931: PPUSH
20932: PPUSH
20933: PPUSH
// for i in all_units do
20934: LD_ADDR_VAR 0 2
20938: PUSH
20939: LD_OWVAR 3
20943: PUSH
20944: FOR_IN
20945: IFFALSE 21023
// if IsSelected ( i ) then
20947: LD_VAR 0 2
20951: PPUSH
20952: CALL_OW 306
20956: IFFALSE 21021
// begin j := GetSide ( i ) ;
20958: LD_ADDR_VAR 0 3
20962: PUSH
20963: LD_VAR 0 2
20967: PPUSH
20968: CALL_OW 255
20972: ST_TO_ADDR
// if j = 8 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 8
20980: EQUAL
20981: IFFALSE 20993
// j := 0 else
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 0
20990: ST_TO_ADDR
20991: GO 21007
// j := j + 1 ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_VAR 0 3
21002: PUSH
21003: LD_INT 1
21005: PLUS
21006: ST_TO_ADDR
// SetSide ( i , j ) ;
21007: LD_VAR 0 2
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: CALL_OW 235
// end ;
21021: GO 20944
21023: POP
21024: POP
// end ;
21025: LD_VAR 0 1
21029: RET
// export function hHackFog ; begin
21030: LD_INT 0
21032: PPUSH
// FogOff ( true ) ;
21033: LD_INT 1
21035: PPUSH
21036: CALL_OW 344
// end ;
21040: LD_VAR 0 1
21044: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21045: LD_INT 0
21047: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21048: LD_VAR 0 1
21052: PPUSH
21053: LD_VAR 0 2
21057: PPUSH
21058: LD_VAR 0 3
21062: PPUSH
21063: LD_INT 1
21065: PPUSH
21066: LD_INT 1
21068: PPUSH
21069: CALL_OW 483
// CenterOnXY ( x , y ) ;
21073: LD_VAR 0 2
21077: PPUSH
21078: LD_VAR 0 3
21082: PPUSH
21083: CALL_OW 84
// end ;
21087: LD_VAR 0 4
21091: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21092: LD_INT 0
21094: PPUSH
21095: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21096: LD_VAR 0 1
21100: NOT
21101: PUSH
21102: LD_VAR 0 2
21106: PPUSH
21107: LD_VAR 0 3
21111: PPUSH
21112: CALL_OW 488
21116: NOT
21117: OR
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 266
21128: PUSH
21129: LD_INT 3
21131: NONEQUAL
21132: PUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 247
21142: PUSH
21143: LD_INT 1
21145: EQUAL
21146: NOT
21147: AND
21148: OR
21149: IFFALSE 21153
// exit ;
21151: GO 21302
// if GetType ( factory ) = unit_human then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 247
21162: PUSH
21163: LD_INT 1
21165: EQUAL
21166: IFFALSE 21183
// factory := IsInUnit ( factory ) ;
21168: LD_ADDR_VAR 0 1
21172: PUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 310
21182: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21183: LD_VAR 0 1
21187: PPUSH
21188: CALL_OW 266
21192: PUSH
21193: LD_INT 3
21195: NONEQUAL
21196: IFFALSE 21200
// exit ;
21198: GO 21302
// if HexInfo ( x , y ) = factory then
21200: LD_VAR 0 2
21204: PPUSH
21205: LD_VAR 0 3
21209: PPUSH
21210: CALL_OW 428
21214: PUSH
21215: LD_VAR 0 1
21219: EQUAL
21220: IFFALSE 21247
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21222: LD_ADDR_EXP 86
21226: PUSH
21227: LD_EXP 86
21231: PPUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 1
21244: ST_TO_ADDR
21245: GO 21298
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21247: LD_ADDR_EXP 86
21251: PUSH
21252: LD_EXP 86
21256: PPUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 255
21271: PUSH
21272: LD_VAR 0 1
21276: PUSH
21277: LD_VAR 0 2
21281: PUSH
21282: LD_VAR 0 3
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 1
21297: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21298: CALL 21307 0 0
// end ;
21302: LD_VAR 0 4
21306: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21307: LD_INT 0
21309: PPUSH
21310: PPUSH
21311: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21312: LD_STRING resetFactoryWaypoint();
21314: PPUSH
21315: CALL_OW 559
// if factoryWaypoints then
21319: LD_EXP 86
21323: IFFALSE 21449
// begin list := PrepareArray ( factoryWaypoints ) ;
21325: LD_ADDR_VAR 0 3
21329: PUSH
21330: LD_EXP 86
21334: PPUSH
21335: CALL 67899 0 1
21339: ST_TO_ADDR
// for i := 1 to list do
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: DOUBLE
21346: LD_INT 1
21348: DEC
21349: ST_TO_ADDR
21350: LD_VAR 0 3
21354: PUSH
21355: FOR_TO
21356: IFFALSE 21447
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21358: LD_STRING setFactoryWaypointXY(
21360: PUSH
21361: LD_VAR 0 3
21365: PUSH
21366: LD_VAR 0 2
21370: ARRAY
21371: PUSH
21372: LD_INT 1
21374: ARRAY
21375: STR
21376: PUSH
21377: LD_STRING ,
21379: STR
21380: PUSH
21381: LD_VAR 0 3
21385: PUSH
21386: LD_VAR 0 2
21390: ARRAY
21391: PUSH
21392: LD_INT 2
21394: ARRAY
21395: STR
21396: PUSH
21397: LD_STRING ,
21399: STR
21400: PUSH
21401: LD_VAR 0 3
21405: PUSH
21406: LD_VAR 0 2
21410: ARRAY
21411: PUSH
21412: LD_INT 3
21414: ARRAY
21415: STR
21416: PUSH
21417: LD_STRING ,
21419: STR
21420: PUSH
21421: LD_VAR 0 3
21425: PUSH
21426: LD_VAR 0 2
21430: ARRAY
21431: PUSH
21432: LD_INT 4
21434: ARRAY
21435: STR
21436: PUSH
21437: LD_STRING )
21439: STR
21440: PPUSH
21441: CALL_OW 559
21445: GO 21355
21447: POP
21448: POP
// end ; end ;
21449: LD_VAR 0 1
21453: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21454: LD_INT 0
21456: PPUSH
// if HexInfo ( x , y ) = warehouse then
21457: LD_VAR 0 2
21461: PPUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: CALL_OW 428
21471: PUSH
21472: LD_VAR 0 1
21476: EQUAL
21477: IFFALSE 21504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21479: LD_ADDR_EXP 87
21483: PUSH
21484: LD_EXP 87
21488: PPUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: LD_INT 0
21496: PPUSH
21497: CALL_OW 1
21501: ST_TO_ADDR
21502: GO 21555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21504: LD_ADDR_EXP 87
21508: PUSH
21509: LD_EXP 87
21513: PPUSH
21514: LD_VAR 0 1
21518: PPUSH
21519: LD_VAR 0 1
21523: PPUSH
21524: CALL_OW 255
21528: PUSH
21529: LD_VAR 0 1
21533: PUSH
21534: LD_VAR 0 2
21538: PUSH
21539: LD_VAR 0 3
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PPUSH
21550: CALL_OW 1
21554: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21555: CALL 21564 0 0
// end ;
21559: LD_VAR 0 4
21563: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21569: LD_STRING resetWarehouseGatheringPoints();
21571: PPUSH
21572: CALL_OW 559
// if warehouseGatheringPoints then
21576: LD_EXP 87
21580: IFFALSE 21706
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21582: LD_ADDR_VAR 0 3
21586: PUSH
21587: LD_EXP 87
21591: PPUSH
21592: CALL 67899 0 1
21596: ST_TO_ADDR
// for i := 1 to list do
21597: LD_ADDR_VAR 0 2
21601: PUSH
21602: DOUBLE
21603: LD_INT 1
21605: DEC
21606: ST_TO_ADDR
21607: LD_VAR 0 3
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21704
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21615: LD_STRING setWarehouseGatheringPointXY(
21617: PUSH
21618: LD_VAR 0 3
21622: PUSH
21623: LD_VAR 0 2
21627: ARRAY
21628: PUSH
21629: LD_INT 1
21631: ARRAY
21632: STR
21633: PUSH
21634: LD_STRING ,
21636: STR
21637: PUSH
21638: LD_VAR 0 3
21642: PUSH
21643: LD_VAR 0 2
21647: ARRAY
21648: PUSH
21649: LD_INT 2
21651: ARRAY
21652: STR
21653: PUSH
21654: LD_STRING ,
21656: STR
21657: PUSH
21658: LD_VAR 0 3
21662: PUSH
21663: LD_VAR 0 2
21667: ARRAY
21668: PUSH
21669: LD_INT 3
21671: ARRAY
21672: STR
21673: PUSH
21674: LD_STRING ,
21676: STR
21677: PUSH
21678: LD_VAR 0 3
21682: PUSH
21683: LD_VAR 0 2
21687: ARRAY
21688: PUSH
21689: LD_INT 4
21691: ARRAY
21692: STR
21693: PUSH
21694: LD_STRING )
21696: STR
21697: PPUSH
21698: CALL_OW 559
21702: GO 21612
21704: POP
21705: POP
// end ; end ;
21706: LD_VAR 0 1
21710: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21711: LD_EXP 87
21715: IFFALSE 22400
21717: GO 21719
21719: DISABLE
21720: LD_INT 0
21722: PPUSH
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
21728: PPUSH
21729: PPUSH
21730: PPUSH
// begin enable ;
21731: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_EXP 87
21741: PPUSH
21742: CALL 67899 0 1
21746: ST_TO_ADDR
// if not list then
21747: LD_VAR 0 3
21751: NOT
21752: IFFALSE 21756
// exit ;
21754: GO 22400
// for i := 1 to list do
21756: LD_ADDR_VAR 0 1
21760: PUSH
21761: DOUBLE
21762: LD_INT 1
21764: DEC
21765: ST_TO_ADDR
21766: LD_VAR 0 3
21770: PUSH
21771: FOR_TO
21772: IFFALSE 22398
// begin depot := list [ i ] [ 2 ] ;
21774: LD_ADDR_VAR 0 8
21778: PUSH
21779: LD_VAR 0 3
21783: PUSH
21784: LD_VAR 0 1
21788: ARRAY
21789: PUSH
21790: LD_INT 2
21792: ARRAY
21793: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21794: LD_ADDR_VAR 0 5
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_VAR 0 1
21808: ARRAY
21809: PUSH
21810: LD_INT 1
21812: ARRAY
21813: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21814: LD_VAR 0 8
21818: PPUSH
21819: CALL_OW 301
21823: PUSH
21824: LD_VAR 0 5
21828: PUSH
21829: LD_VAR 0 8
21833: PPUSH
21834: CALL_OW 255
21838: NONEQUAL
21839: OR
21840: IFFALSE 21869
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21842: LD_ADDR_EXP 87
21846: PUSH
21847: LD_EXP 87
21851: PPUSH
21852: LD_VAR 0 8
21856: PPUSH
21857: LD_INT 0
21859: PPUSH
21860: CALL_OW 1
21864: ST_TO_ADDR
// exit ;
21865: POP
21866: POP
21867: GO 22400
// end ; x := list [ i ] [ 3 ] ;
21869: LD_ADDR_VAR 0 6
21873: PUSH
21874: LD_VAR 0 3
21878: PUSH
21879: LD_VAR 0 1
21883: ARRAY
21884: PUSH
21885: LD_INT 3
21887: ARRAY
21888: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21889: LD_ADDR_VAR 0 7
21893: PUSH
21894: LD_VAR 0 3
21898: PUSH
21899: LD_VAR 0 1
21903: ARRAY
21904: PUSH
21905: LD_INT 4
21907: ARRAY
21908: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21909: LD_ADDR_VAR 0 9
21913: PUSH
21914: LD_VAR 0 6
21918: PPUSH
21919: LD_VAR 0 7
21923: PPUSH
21924: LD_INT 16
21926: PPUSH
21927: CALL 66487 0 3
21931: ST_TO_ADDR
// if not cratesNearbyPoint then
21932: LD_VAR 0 9
21936: NOT
21937: IFFALSE 21943
// exit ;
21939: POP
21940: POP
21941: GO 22400
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21943: LD_ADDR_VAR 0 4
21947: PUSH
21948: LD_INT 22
21950: PUSH
21951: LD_VAR 0 5
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: LD_INT 60
21965: PUSH
21966: EMPTY
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 91
21975: PUSH
21976: LD_VAR 0 8
21980: PUSH
21981: LD_INT 6
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 25
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 25
22004: PUSH
22005: LD_INT 16
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PUSH
22028: LD_VAR 0 8
22032: PPUSH
22033: CALL_OW 313
22037: PPUSH
22038: LD_INT 3
22040: PUSH
22041: LD_INT 60
22043: PUSH
22044: EMPTY
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 16
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PPUSH
22083: CALL_OW 72
22087: UNION
22088: ST_TO_ADDR
// if tmp then
22089: LD_VAR 0 4
22093: IFFALSE 22173
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_VAR 0 4
22104: PPUSH
22105: LD_INT 3
22107: PPUSH
22108: CALL 64456 0 2
22112: ST_TO_ADDR
// for j in tmp do
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_VAR 0 4
22122: PUSH
22123: FOR_IN
22124: IFFALSE 22167
// begin if IsInUnit ( j ) then
22126: LD_VAR 0 2
22130: PPUSH
22131: CALL_OW 310
22135: IFFALSE 22146
// ComExit ( j ) ;
22137: LD_VAR 0 2
22141: PPUSH
22142: CALL 64539 0 1
// AddComCollect ( j , x , y ) ;
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_VAR 0 6
22155: PPUSH
22156: LD_VAR 0 7
22160: PPUSH
22161: CALL_OW 177
// end ;
22165: GO 22123
22167: POP
22168: POP
// exit ;
22169: POP
22170: POP
22171: GO 22400
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22173: LD_ADDR_VAR 0 4
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_VAR 0 5
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 91
22192: PUSH
22193: LD_VAR 0 8
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 12
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 34
22221: PUSH
22222: LD_INT 51
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 34
22231: PUSH
22232: LD_INT 32
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 34
22241: PUSH
22242: LD_INT 89
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: PPUSH
22261: CALL_OW 69
22265: ST_TO_ADDR
// if tmp then
22266: LD_VAR 0 4
22270: IFFALSE 22396
// begin for j in tmp do
22272: LD_ADDR_VAR 0 2
22276: PUSH
22277: LD_VAR 0 4
22281: PUSH
22282: FOR_IN
22283: IFFALSE 22394
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22285: LD_VAR 0 2
22289: PPUSH
22290: CALL_OW 262
22294: PUSH
22295: LD_INT 3
22297: EQUAL
22298: PUSH
22299: LD_VAR 0 2
22303: PPUSH
22304: CALL_OW 261
22308: PUSH
22309: LD_INT 20
22311: GREATER
22312: OR
22313: PUSH
22314: LD_VAR 0 2
22318: PPUSH
22319: CALL_OW 314
22323: NOT
22324: AND
22325: PUSH
22326: LD_VAR 0 2
22330: PPUSH
22331: CALL_OW 263
22335: PUSH
22336: LD_INT 1
22338: NONEQUAL
22339: PUSH
22340: LD_VAR 0 2
22344: PPUSH
22345: CALL_OW 311
22349: OR
22350: AND
22351: IFFALSE 22392
// begin ComCollect ( j , x , y ) ;
22353: LD_VAR 0 2
22357: PPUSH
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 7
22367: PPUSH
22368: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22372: LD_VAR 0 2
22376: PPUSH
22377: LD_VAR 0 8
22381: PPUSH
22382: CALL_OW 172
// exit ;
22386: POP
22387: POP
22388: POP
22389: POP
22390: GO 22400
// end ;
22392: GO 22282
22394: POP
22395: POP
// end ; end ;
22396: GO 21771
22398: POP
22399: POP
// end ; end_of_file
22400: PPOPN 9
22402: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 264
22418: PUSH
22419: LD_INT 91
22421: EQUAL
22422: IFFALSE 22494
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22424: LD_INT 68
22426: PPUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: CALL_OW 255
22436: PPUSH
22437: CALL_OW 321
22441: PUSH
22442: LD_INT 2
22444: EQUAL
22445: IFFALSE 22457
// eff := 70 else
22447: LD_ADDR_VAR 0 4
22451: PUSH
22452: LD_INT 70
22454: ST_TO_ADDR
22455: GO 22465
// eff := 30 ;
22457: LD_ADDR_VAR 0 4
22461: PUSH
22462: LD_INT 30
22464: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: CALL_OW 250
22474: PPUSH
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 251
22484: PPUSH
22485: LD_VAR 0 4
22489: PPUSH
22490: CALL_OW 495
// end ; end ;
22494: LD_VAR 0 2
22498: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22499: LD_INT 0
22501: PPUSH
// end ;
22502: LD_VAR 0 4
22506: RET
// export function SOS_Command ( cmd ) ; begin
22507: LD_INT 0
22509: PPUSH
// end ;
22510: LD_VAR 0 2
22514: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22515: LD_INT 0
22517: PPUSH
// end ;
22518: LD_VAR 0 6
22522: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22523: LD_INT 0
22525: PPUSH
22526: PPUSH
// if not vehicle or not factory then
22527: LD_VAR 0 1
22531: NOT
22532: PUSH
22533: LD_VAR 0 2
22537: NOT
22538: OR
22539: IFFALSE 22543
// exit ;
22541: GO 22774
// if factoryWaypoints >= factory then
22543: LD_EXP 86
22547: PUSH
22548: LD_VAR 0 2
22552: GREATEREQUAL
22553: IFFALSE 22774
// if factoryWaypoints [ factory ] then
22555: LD_EXP 86
22559: PUSH
22560: LD_VAR 0 2
22564: ARRAY
22565: IFFALSE 22774
// begin if GetControl ( vehicle ) = control_manual then
22567: LD_VAR 0 1
22571: PPUSH
22572: CALL_OW 263
22576: PUSH
22577: LD_INT 1
22579: EQUAL
22580: IFFALSE 22661
// begin driver := IsDrivenBy ( vehicle ) ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_VAR 0 1
22591: PPUSH
22592: CALL_OW 311
22596: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22597: LD_VAR 0 4
22601: PPUSH
22602: LD_EXP 86
22606: PUSH
22607: LD_VAR 0 2
22611: ARRAY
22612: PUSH
22613: LD_INT 3
22615: ARRAY
22616: PPUSH
22617: LD_EXP 86
22621: PUSH
22622: LD_VAR 0 2
22626: ARRAY
22627: PUSH
22628: LD_INT 4
22630: ARRAY
22631: PPUSH
22632: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22636: LD_VAR 0 4
22640: PPUSH
22641: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22645: LD_VAR 0 4
22649: PPUSH
22650: LD_VAR 0 2
22654: PPUSH
22655: CALL_OW 180
// end else
22659: GO 22774
// if GetControl ( vehicle ) = control_remote then
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 263
22670: PUSH
22671: LD_INT 2
22673: EQUAL
22674: IFFALSE 22735
// begin wait ( 0 0$2 ) ;
22676: LD_INT 70
22678: PPUSH
22679: CALL_OW 67
// if Connect ( vehicle ) then
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL 34798 0 1
22692: IFFALSE 22733
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22694: LD_VAR 0 1
22698: PPUSH
22699: LD_EXP 86
22703: PUSH
22704: LD_VAR 0 2
22708: ARRAY
22709: PUSH
22710: LD_INT 3
22712: ARRAY
22713: PPUSH
22714: LD_EXP 86
22718: PUSH
22719: LD_VAR 0 2
22723: ARRAY
22724: PUSH
22725: LD_INT 4
22727: ARRAY
22728: PPUSH
22729: CALL_OW 171
// end else
22733: GO 22774
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22735: LD_VAR 0 1
22739: PPUSH
22740: LD_EXP 86
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 3
22753: ARRAY
22754: PPUSH
22755: LD_EXP 86
22759: PUSH
22760: LD_VAR 0 2
22764: ARRAY
22765: PUSH
22766: LD_INT 4
22768: ARRAY
22769: PPUSH
22770: CALL_OW 171
// end ; end ;
22774: LD_VAR 0 3
22778: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22779: LD_INT 0
22781: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22782: LD_VAR 0 1
22786: PUSH
22787: LD_INT 250
22789: EQUAL
22790: PUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: CALL_OW 264
22800: PUSH
22801: LD_INT 81
22803: EQUAL
22804: AND
22805: IFFALSE 22826
// MinerPlaceMine ( unit , x , y ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 4
22816: PPUSH
22817: LD_VAR 0 5
22821: PPUSH
22822: CALL 25211 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22826: LD_VAR 0 1
22830: PUSH
22831: LD_INT 251
22833: EQUAL
22834: PUSH
22835: LD_VAR 0 2
22839: PPUSH
22840: CALL_OW 264
22844: PUSH
22845: LD_INT 81
22847: EQUAL
22848: AND
22849: IFFALSE 22870
// MinerDetonateMine ( unit , x , y ) ;
22851: LD_VAR 0 2
22855: PPUSH
22856: LD_VAR 0 4
22860: PPUSH
22861: LD_VAR 0 5
22865: PPUSH
22866: CALL 25486 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22870: LD_VAR 0 1
22874: PUSH
22875: LD_INT 252
22877: EQUAL
22878: PUSH
22879: LD_VAR 0 2
22883: PPUSH
22884: CALL_OW 264
22888: PUSH
22889: LD_INT 81
22891: EQUAL
22892: AND
22893: IFFALSE 22914
// MinerCreateMinefield ( unit , x , y ) ;
22895: LD_VAR 0 2
22899: PPUSH
22900: LD_VAR 0 4
22904: PPUSH
22905: LD_VAR 0 5
22909: PPUSH
22910: CALL 25903 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22914: LD_VAR 0 1
22918: PUSH
22919: LD_INT 253
22921: EQUAL
22922: PUSH
22923: LD_VAR 0 2
22927: PPUSH
22928: CALL_OW 257
22932: PUSH
22933: LD_INT 5
22935: EQUAL
22936: AND
22937: IFFALSE 22958
// ComBinocular ( unit , x , y ) ;
22939: LD_VAR 0 2
22943: PPUSH
22944: LD_VAR 0 4
22948: PPUSH
22949: LD_VAR 0 5
22953: PPUSH
22954: CALL 26272 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22958: LD_VAR 0 1
22962: PUSH
22963: LD_INT 254
22965: EQUAL
22966: PUSH
22967: LD_VAR 0 2
22971: PPUSH
22972: CALL_OW 264
22976: PUSH
22977: LD_INT 99
22979: EQUAL
22980: AND
22981: PUSH
22982: LD_VAR 0 3
22986: PPUSH
22987: CALL_OW 263
22991: PUSH
22992: LD_INT 3
22994: EQUAL
22995: AND
22996: IFFALSE 23012
// HackDestroyVehicle ( unit , selectedUnit ) ;
22998: LD_VAR 0 2
23002: PPUSH
23003: LD_VAR 0 3
23007: PPUSH
23008: CALL 24575 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23012: LD_VAR 0 1
23016: PUSH
23017: LD_INT 255
23019: EQUAL
23020: PUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: CALL_OW 264
23030: PUSH
23031: LD_INT 14
23033: PUSH
23034: LD_INT 53
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: IN
23041: AND
23042: PUSH
23043: LD_VAR 0 4
23047: PPUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: CALL_OW 488
23057: AND
23058: IFFALSE 23082
// CutTreeXYR ( unit , x , y , 12 ) ;
23060: LD_VAR 0 2
23064: PPUSH
23065: LD_VAR 0 4
23069: PPUSH
23070: LD_VAR 0 5
23074: PPUSH
23075: LD_INT 12
23077: PPUSH
23078: CALL 23145 0 4
// if cmd = 256 then
23082: LD_VAR 0 1
23086: PUSH
23087: LD_INT 256
23089: EQUAL
23090: IFFALSE 23111
// SetFactoryWaypoint ( unit , x , y ) ;
23092: LD_VAR 0 2
23096: PPUSH
23097: LD_VAR 0 4
23101: PPUSH
23102: LD_VAR 0 5
23106: PPUSH
23107: CALL 21092 0 3
// if cmd = 257 then
23111: LD_VAR 0 1
23115: PUSH
23116: LD_INT 257
23118: EQUAL
23119: IFFALSE 23140
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23121: LD_VAR 0 2
23125: PPUSH
23126: LD_VAR 0 4
23130: PPUSH
23131: LD_VAR 0 5
23135: PPUSH
23136: CALL 21454 0 3
// end ;
23140: LD_VAR 0 6
23144: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23145: LD_INT 0
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23156: LD_VAR 0 1
23160: NOT
23161: PUSH
23162: LD_VAR 0 2
23166: PPUSH
23167: LD_VAR 0 3
23171: PPUSH
23172: CALL_OW 488
23176: NOT
23177: OR
23178: PUSH
23179: LD_VAR 0 4
23183: NOT
23184: OR
23185: IFFALSE 23189
// exit ;
23187: GO 23529
// list := [ ] ;
23189: LD_ADDR_VAR 0 13
23193: PUSH
23194: EMPTY
23195: ST_TO_ADDR
// if x - r < 0 then
23196: LD_VAR 0 2
23200: PUSH
23201: LD_VAR 0 4
23205: MINUS
23206: PUSH
23207: LD_INT 0
23209: LESS
23210: IFFALSE 23222
// min_x := 0 else
23212: LD_ADDR_VAR 0 7
23216: PUSH
23217: LD_INT 0
23219: ST_TO_ADDR
23220: GO 23238
// min_x := x - r ;
23222: LD_ADDR_VAR 0 7
23226: PUSH
23227: LD_VAR 0 2
23231: PUSH
23232: LD_VAR 0 4
23236: MINUS
23237: ST_TO_ADDR
// if y - r < 0 then
23238: LD_VAR 0 3
23242: PUSH
23243: LD_VAR 0 4
23247: MINUS
23248: PUSH
23249: LD_INT 0
23251: LESS
23252: IFFALSE 23264
// min_y := 0 else
23254: LD_ADDR_VAR 0 8
23258: PUSH
23259: LD_INT 0
23261: ST_TO_ADDR
23262: GO 23280
// min_y := y - r ;
23264: LD_ADDR_VAR 0 8
23268: PUSH
23269: LD_VAR 0 3
23273: PUSH
23274: LD_VAR 0 4
23278: MINUS
23279: ST_TO_ADDR
// max_x := x + r ;
23280: LD_ADDR_VAR 0 9
23284: PUSH
23285: LD_VAR 0 2
23289: PUSH
23290: LD_VAR 0 4
23294: PLUS
23295: ST_TO_ADDR
// max_y := y + r ;
23296: LD_ADDR_VAR 0 10
23300: PUSH
23301: LD_VAR 0 3
23305: PUSH
23306: LD_VAR 0 4
23310: PLUS
23311: ST_TO_ADDR
// for _x = min_x to max_x do
23312: LD_ADDR_VAR 0 11
23316: PUSH
23317: DOUBLE
23318: LD_VAR 0 7
23322: DEC
23323: ST_TO_ADDR
23324: LD_VAR 0 9
23328: PUSH
23329: FOR_TO
23330: IFFALSE 23447
// for _y = min_y to max_y do
23332: LD_ADDR_VAR 0 12
23336: PUSH
23337: DOUBLE
23338: LD_VAR 0 8
23342: DEC
23343: ST_TO_ADDR
23344: LD_VAR 0 10
23348: PUSH
23349: FOR_TO
23350: IFFALSE 23443
// begin if not ValidHex ( _x , _y ) then
23352: LD_VAR 0 11
23356: PPUSH
23357: LD_VAR 0 12
23361: PPUSH
23362: CALL_OW 488
23366: NOT
23367: IFFALSE 23371
// continue ;
23369: GO 23349
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23371: LD_VAR 0 11
23375: PPUSH
23376: LD_VAR 0 12
23380: PPUSH
23381: CALL_OW 351
23385: PUSH
23386: LD_VAR 0 11
23390: PPUSH
23391: LD_VAR 0 12
23395: PPUSH
23396: CALL_OW 554
23400: AND
23401: IFFALSE 23441
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23403: LD_ADDR_VAR 0 13
23407: PUSH
23408: LD_VAR 0 13
23412: PPUSH
23413: LD_VAR 0 13
23417: PUSH
23418: LD_INT 1
23420: PLUS
23421: PPUSH
23422: LD_VAR 0 11
23426: PUSH
23427: LD_VAR 0 12
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 2
23440: ST_TO_ADDR
// end ;
23441: GO 23349
23443: POP
23444: POP
23445: GO 23329
23447: POP
23448: POP
// if not list then
23449: LD_VAR 0 13
23453: NOT
23454: IFFALSE 23458
// exit ;
23456: GO 23529
// for i in list do
23458: LD_ADDR_VAR 0 6
23462: PUSH
23463: LD_VAR 0 13
23467: PUSH
23468: FOR_IN
23469: IFFALSE 23527
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23471: LD_VAR 0 1
23475: PPUSH
23476: LD_STRING M
23478: PUSH
23479: LD_VAR 0 6
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PUSH
23488: LD_VAR 0 6
23492: PUSH
23493: LD_INT 2
23495: ARRAY
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: PPUSH
23521: CALL_OW 447
23525: GO 23468
23527: POP
23528: POP
// end ;
23529: LD_VAR 0 5
23533: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23534: LD_EXP 89
23538: NOT
23539: IFFALSE 23589
23541: GO 23543
23543: DISABLE
// begin initHack := true ;
23544: LD_ADDR_EXP 89
23548: PUSH
23549: LD_INT 1
23551: ST_TO_ADDR
// hackTanks := [ ] ;
23552: LD_ADDR_EXP 90
23556: PUSH
23557: EMPTY
23558: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23559: LD_ADDR_EXP 91
23563: PUSH
23564: EMPTY
23565: ST_TO_ADDR
// hackLimit := 3 ;
23566: LD_ADDR_EXP 92
23570: PUSH
23571: LD_INT 3
23573: ST_TO_ADDR
// hackDist := 12 ;
23574: LD_ADDR_EXP 93
23578: PUSH
23579: LD_INT 12
23581: ST_TO_ADDR
// hackCounter := [ ] ;
23582: LD_ADDR_EXP 94
23586: PUSH
23587: EMPTY
23588: ST_TO_ADDR
// end ;
23589: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23590: LD_EXP 89
23594: PUSH
23595: LD_INT 34
23597: PUSH
23598: LD_INT 99
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: AND
23610: IFFALSE 23863
23612: GO 23614
23614: DISABLE
23615: LD_INT 0
23617: PPUSH
23618: PPUSH
// begin enable ;
23619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23620: LD_ADDR_VAR 0 1
23624: PUSH
23625: LD_INT 34
23627: PUSH
23628: LD_INT 99
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PPUSH
23635: CALL_OW 69
23639: PUSH
23640: FOR_IN
23641: IFFALSE 23861
// begin if not i in hackTanks then
23643: LD_VAR 0 1
23647: PUSH
23648: LD_EXP 90
23652: IN
23653: NOT
23654: IFFALSE 23737
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23656: LD_ADDR_EXP 90
23660: PUSH
23661: LD_EXP 90
23665: PPUSH
23666: LD_EXP 90
23670: PUSH
23671: LD_INT 1
23673: PLUS
23674: PPUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL_OW 1
23684: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23685: LD_ADDR_EXP 91
23689: PUSH
23690: LD_EXP 91
23694: PPUSH
23695: LD_EXP 91
23699: PUSH
23700: LD_INT 1
23702: PLUS
23703: PPUSH
23704: EMPTY
23705: PPUSH
23706: CALL_OW 1
23710: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23711: LD_ADDR_EXP 94
23715: PUSH
23716: LD_EXP 94
23720: PPUSH
23721: LD_EXP 94
23725: PUSH
23726: LD_INT 1
23728: PLUS
23729: PPUSH
23730: EMPTY
23731: PPUSH
23732: CALL_OW 1
23736: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL_OW 302
23746: NOT
23747: IFFALSE 23760
// begin HackUnlinkAll ( i ) ;
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL 23866 0 1
// continue ;
23758: GO 23640
// end ; HackCheckCapturedStatus ( i ) ;
23760: LD_VAR 0 1
23764: PPUSH
23765: CALL 24309 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23769: LD_ADDR_VAR 0 2
23773: PUSH
23774: LD_INT 81
23776: PUSH
23777: LD_VAR 0 1
23781: PPUSH
23782: CALL_OW 255
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 33
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 91
23803: PUSH
23804: LD_VAR 0 1
23808: PUSH
23809: LD_EXP 93
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 50
23821: PUSH
23822: EMPTY
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: ST_TO_ADDR
// if not tmp then
23836: LD_VAR 0 2
23840: NOT
23841: IFFALSE 23845
// continue ;
23843: GO 23640
// HackLink ( i , tmp ) ;
23845: LD_VAR 0 1
23849: PPUSH
23850: LD_VAR 0 2
23854: PPUSH
23855: CALL 24002 0 2
// end ;
23859: GO 23640
23861: POP
23862: POP
// end ;
23863: PPOPN 2
23865: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23866: LD_INT 0
23868: PPUSH
23869: PPUSH
23870: PPUSH
// if not hack in hackTanks then
23871: LD_VAR 0 1
23875: PUSH
23876: LD_EXP 90
23880: IN
23881: NOT
23882: IFFALSE 23886
// exit ;
23884: GO 23997
// index := GetElementIndex ( hackTanks , hack ) ;
23886: LD_ADDR_VAR 0 4
23890: PUSH
23891: LD_EXP 90
23895: PPUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL 31614 0 2
23905: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23906: LD_EXP 91
23910: PUSH
23911: LD_VAR 0 4
23915: ARRAY
23916: IFFALSE 23997
// begin for i in hackTanksCaptured [ index ] do
23918: LD_ADDR_VAR 0 3
23922: PUSH
23923: LD_EXP 91
23927: PUSH
23928: LD_VAR 0 4
23932: ARRAY
23933: PUSH
23934: FOR_IN
23935: IFFALSE 23961
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23937: LD_VAR 0 3
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: PPUSH
23946: LD_VAR 0 3
23950: PUSH
23951: LD_INT 2
23953: ARRAY
23954: PPUSH
23955: CALL_OW 235
23959: GO 23934
23961: POP
23962: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23963: LD_ADDR_EXP 91
23967: PUSH
23968: LD_EXP 91
23972: PPUSH
23973: LD_VAR 0 4
23977: PPUSH
23978: EMPTY
23979: PPUSH
23980: CALL_OW 1
23984: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23985: LD_VAR 0 1
23989: PPUSH
23990: LD_INT 0
23992: PPUSH
23993: CALL_OW 505
// end ; end ;
23997: LD_VAR 0 2
24001: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
24006: PPUSH
// if not hack in hackTanks or not vehicles then
24007: LD_VAR 0 1
24011: PUSH
24012: LD_EXP 90
24016: IN
24017: NOT
24018: PUSH
24019: LD_VAR 0 2
24023: NOT
24024: OR
24025: IFFALSE 24029
// exit ;
24027: GO 24304
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_VAR 0 1
24038: PPUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: LD_INT 1
24046: PPUSH
24047: LD_INT 1
24049: PPUSH
24050: CALL 32264 0 4
24054: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24055: LD_ADDR_VAR 0 5
24059: PUSH
24060: LD_EXP 90
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL 31614 0 2
24074: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24075: LD_EXP 91
24079: PUSH
24080: LD_VAR 0 5
24084: ARRAY
24085: PUSH
24086: LD_EXP 92
24090: LESS
24091: IFFALSE 24280
// begin for i := 1 to vehicles do
24093: LD_ADDR_VAR 0 4
24097: PUSH
24098: DOUBLE
24099: LD_INT 1
24101: DEC
24102: ST_TO_ADDR
24103: LD_VAR 0 2
24107: PUSH
24108: FOR_TO
24109: IFFALSE 24278
// begin if hackTanksCaptured [ index ] = hackLimit then
24111: LD_EXP 91
24115: PUSH
24116: LD_VAR 0 5
24120: ARRAY
24121: PUSH
24122: LD_EXP 92
24126: EQUAL
24127: IFFALSE 24131
// break ;
24129: GO 24278
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24131: LD_ADDR_EXP 94
24135: PUSH
24136: LD_EXP 94
24140: PPUSH
24141: LD_VAR 0 5
24145: PPUSH
24146: LD_EXP 94
24150: PUSH
24151: LD_VAR 0 5
24155: ARRAY
24156: PUSH
24157: LD_INT 1
24159: PLUS
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24166: LD_ADDR_EXP 91
24170: PUSH
24171: LD_EXP 91
24175: PPUSH
24176: LD_VAR 0 5
24180: PUSH
24181: LD_EXP 91
24185: PUSH
24186: LD_VAR 0 5
24190: ARRAY
24191: PUSH
24192: LD_INT 1
24194: PLUS
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PPUSH
24200: LD_VAR 0 2
24204: PUSH
24205: LD_VAR 0 4
24209: ARRAY
24210: PUSH
24211: LD_VAR 0 2
24215: PUSH
24216: LD_VAR 0 4
24220: ARRAY
24221: PPUSH
24222: CALL_OW 255
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PPUSH
24231: CALL 31829 0 3
24235: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24236: LD_VAR 0 2
24240: PUSH
24241: LD_VAR 0 4
24245: ARRAY
24246: PPUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 255
24256: PPUSH
24257: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24261: LD_VAR 0 2
24265: PUSH
24266: LD_VAR 0 4
24270: ARRAY
24271: PPUSH
24272: CALL_OW 141
// end ;
24276: GO 24108
24278: POP
24279: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24280: LD_VAR 0 1
24284: PPUSH
24285: LD_EXP 91
24289: PUSH
24290: LD_VAR 0 5
24294: ARRAY
24295: PUSH
24296: LD_INT 0
24298: PLUS
24299: PPUSH
24300: CALL_OW 505
// end ;
24304: LD_VAR 0 3
24308: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24309: LD_INT 0
24311: PPUSH
24312: PPUSH
24313: PPUSH
24314: PPUSH
// if not hack in hackTanks then
24315: LD_VAR 0 1
24319: PUSH
24320: LD_EXP 90
24324: IN
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24570
// index := GetElementIndex ( hackTanks , hack ) ;
24330: LD_ADDR_VAR 0 4
24334: PUSH
24335: LD_EXP 90
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL 31614 0 2
24349: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24350: LD_ADDR_VAR 0 3
24354: PUSH
24355: DOUBLE
24356: LD_EXP 91
24360: PUSH
24361: LD_VAR 0 4
24365: ARRAY
24366: INC
24367: ST_TO_ADDR
24368: LD_INT 1
24370: PUSH
24371: FOR_DOWNTO
24372: IFFALSE 24544
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24374: LD_ADDR_VAR 0 5
24378: PUSH
24379: LD_EXP 91
24383: PUSH
24384: LD_VAR 0 4
24388: ARRAY
24389: PUSH
24390: LD_VAR 0 3
24394: ARRAY
24395: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24396: LD_VAR 0 5
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 302
24409: NOT
24410: PUSH
24411: LD_VAR 0 5
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PPUSH
24420: CALL_OW 255
24424: PUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 255
24434: NONEQUAL
24435: OR
24436: IFFALSE 24542
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24438: LD_VAR 0 5
24442: PUSH
24443: LD_INT 1
24445: ARRAY
24446: PPUSH
24447: CALL_OW 305
24451: PUSH
24452: LD_VAR 0 5
24456: PUSH
24457: LD_INT 1
24459: ARRAY
24460: PPUSH
24461: CALL_OW 255
24465: PUSH
24466: LD_VAR 0 1
24470: PPUSH
24471: CALL_OW 255
24475: EQUAL
24476: AND
24477: IFFALSE 24501
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24479: LD_VAR 0 5
24483: PUSH
24484: LD_INT 1
24486: ARRAY
24487: PPUSH
24488: LD_VAR 0 5
24492: PUSH
24493: LD_INT 2
24495: ARRAY
24496: PPUSH
24497: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24501: LD_ADDR_EXP 91
24505: PUSH
24506: LD_EXP 91
24510: PPUSH
24511: LD_VAR 0 4
24515: PPUSH
24516: LD_EXP 91
24520: PUSH
24521: LD_VAR 0 4
24525: ARRAY
24526: PPUSH
24527: LD_VAR 0 3
24531: PPUSH
24532: CALL_OW 3
24536: PPUSH
24537: CALL_OW 1
24541: ST_TO_ADDR
// end ; end ;
24542: GO 24371
24544: POP
24545: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_EXP 91
24555: PUSH
24556: LD_VAR 0 4
24560: ARRAY
24561: PUSH
24562: LD_INT 0
24564: PLUS
24565: PPUSH
24566: CALL_OW 505
// end ;
24570: LD_VAR 0 2
24574: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
// if not hack in hackTanks then
24581: LD_VAR 0 1
24585: PUSH
24586: LD_EXP 90
24590: IN
24591: NOT
24592: IFFALSE 24596
// exit ;
24594: GO 24681
// index := GetElementIndex ( hackTanks , hack ) ;
24596: LD_ADDR_VAR 0 5
24600: PUSH
24601: LD_EXP 90
24605: PPUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL 31614 0 2
24615: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24616: LD_ADDR_VAR 0 4
24620: PUSH
24621: DOUBLE
24622: LD_INT 1
24624: DEC
24625: ST_TO_ADDR
24626: LD_EXP 91
24630: PUSH
24631: LD_VAR 0 5
24635: ARRAY
24636: PUSH
24637: FOR_TO
24638: IFFALSE 24679
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24640: LD_EXP 91
24644: PUSH
24645: LD_VAR 0 5
24649: ARRAY
24650: PUSH
24651: LD_VAR 0 4
24655: ARRAY
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PUSH
24661: LD_VAR 0 2
24665: EQUAL
24666: IFFALSE 24677
// KillUnit ( vehicle ) ;
24668: LD_VAR 0 2
24672: PPUSH
24673: CALL_OW 66
24677: GO 24637
24679: POP
24680: POP
// end ;
24681: LD_VAR 0 3
24685: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24686: LD_EXP 95
24690: NOT
24691: IFFALSE 24726
24693: GO 24695
24695: DISABLE
// begin initMiner := true ;
24696: LD_ADDR_EXP 95
24700: PUSH
24701: LD_INT 1
24703: ST_TO_ADDR
// minersList := [ ] ;
24704: LD_ADDR_EXP 96
24708: PUSH
24709: EMPTY
24710: ST_TO_ADDR
// minerMinesList := [ ] ;
24711: LD_ADDR_EXP 97
24715: PUSH
24716: EMPTY
24717: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24718: LD_ADDR_EXP 98
24722: PUSH
24723: LD_INT 5
24725: ST_TO_ADDR
// end ;
24726: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24727: LD_EXP 95
24731: PUSH
24732: LD_INT 34
24734: PUSH
24735: LD_INT 81
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL_OW 69
24746: AND
24747: IFFALSE 25208
24749: GO 24751
24751: DISABLE
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
// begin enable ;
24758: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24759: LD_ADDR_VAR 0 1
24763: PUSH
24764: LD_INT 34
24766: PUSH
24767: LD_INT 81
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: PUSH
24779: FOR_IN
24780: IFFALSE 24852
// begin if not i in minersList then
24782: LD_VAR 0 1
24786: PUSH
24787: LD_EXP 96
24791: IN
24792: NOT
24793: IFFALSE 24850
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24795: LD_ADDR_EXP 96
24799: PUSH
24800: LD_EXP 96
24804: PPUSH
24805: LD_EXP 96
24809: PUSH
24810: LD_INT 1
24812: PLUS
24813: PPUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 1
24823: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24824: LD_ADDR_EXP 97
24828: PUSH
24829: LD_EXP 97
24833: PPUSH
24834: LD_EXP 97
24838: PUSH
24839: LD_INT 1
24841: PLUS
24842: PPUSH
24843: EMPTY
24844: PPUSH
24845: CALL_OW 1
24849: ST_TO_ADDR
// end end ;
24850: GO 24779
24852: POP
24853: POP
// for i := minerMinesList downto 1 do
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: DOUBLE
24860: LD_EXP 97
24864: INC
24865: ST_TO_ADDR
24866: LD_INT 1
24868: PUSH
24869: FOR_DOWNTO
24870: IFFALSE 25206
// begin if IsLive ( minersList [ i ] ) then
24872: LD_EXP 96
24876: PUSH
24877: LD_VAR 0 1
24881: ARRAY
24882: PPUSH
24883: CALL_OW 300
24887: IFFALSE 24915
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24889: LD_EXP 96
24893: PUSH
24894: LD_VAR 0 1
24898: ARRAY
24899: PPUSH
24900: LD_EXP 97
24904: PUSH
24905: LD_VAR 0 1
24909: ARRAY
24910: PPUSH
24911: CALL_OW 505
// if not minerMinesList [ i ] then
24915: LD_EXP 97
24919: PUSH
24920: LD_VAR 0 1
24924: ARRAY
24925: NOT
24926: IFFALSE 24930
// continue ;
24928: GO 24869
// for j := minerMinesList [ i ] downto 1 do
24930: LD_ADDR_VAR 0 2
24934: PUSH
24935: DOUBLE
24936: LD_EXP 97
24940: PUSH
24941: LD_VAR 0 1
24945: ARRAY
24946: INC
24947: ST_TO_ADDR
24948: LD_INT 1
24950: PUSH
24951: FOR_DOWNTO
24952: IFFALSE 25202
// begin side := GetSide ( minersList [ i ] ) ;
24954: LD_ADDR_VAR 0 3
24958: PUSH
24959: LD_EXP 96
24963: PUSH
24964: LD_VAR 0 1
24968: ARRAY
24969: PPUSH
24970: CALL_OW 255
24974: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_EXP 97
24984: PUSH
24985: LD_VAR 0 1
24989: ARRAY
24990: PUSH
24991: LD_VAR 0 2
24995: ARRAY
24996: PUSH
24997: LD_INT 1
24999: ARRAY
25000: PPUSH
25001: LD_EXP 97
25005: PUSH
25006: LD_VAR 0 1
25010: ARRAY
25011: PUSH
25012: LD_VAR 0 2
25016: ARRAY
25017: PUSH
25018: LD_INT 2
25020: ARRAY
25021: PPUSH
25022: CALL_OW 428
25026: ST_TO_ADDR
// if not tmp then
25027: LD_VAR 0 4
25031: NOT
25032: IFFALSE 25036
// continue ;
25034: GO 24951
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25036: LD_VAR 0 4
25040: PUSH
25041: LD_INT 81
25043: PUSH
25044: LD_VAR 0 3
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 69
25057: IN
25058: PUSH
25059: LD_EXP 97
25063: PUSH
25064: LD_VAR 0 1
25068: ARRAY
25069: PUSH
25070: LD_VAR 0 2
25074: ARRAY
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PPUSH
25080: LD_EXP 97
25084: PUSH
25085: LD_VAR 0 1
25089: ARRAY
25090: PUSH
25091: LD_VAR 0 2
25095: ARRAY
25096: PUSH
25097: LD_INT 2
25099: ARRAY
25100: PPUSH
25101: CALL_OW 458
25105: AND
25106: IFFALSE 25200
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25108: LD_EXP 97
25112: PUSH
25113: LD_VAR 0 1
25117: ARRAY
25118: PUSH
25119: LD_VAR 0 2
25123: ARRAY
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PPUSH
25129: LD_EXP 97
25133: PUSH
25134: LD_VAR 0 1
25138: ARRAY
25139: PUSH
25140: LD_VAR 0 2
25144: ARRAY
25145: PUSH
25146: LD_INT 2
25148: ARRAY
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25159: LD_ADDR_EXP 97
25163: PUSH
25164: LD_EXP 97
25168: PPUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: LD_EXP 97
25178: PUSH
25179: LD_VAR 0 1
25183: ARRAY
25184: PPUSH
25185: LD_VAR 0 2
25189: PPUSH
25190: CALL_OW 3
25194: PPUSH
25195: CALL_OW 1
25199: ST_TO_ADDR
// end ; end ;
25200: GO 24951
25202: POP
25203: POP
// end ;
25204: GO 24869
25206: POP
25207: POP
// end ;
25208: PPOPN 4
25210: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
// result := false ;
25215: LD_ADDR_VAR 0 4
25219: PUSH
25220: LD_INT 0
25222: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25223: LD_VAR 0 1
25227: PPUSH
25228: CALL_OW 264
25232: PUSH
25233: LD_INT 81
25235: EQUAL
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25481
// index := GetElementIndex ( minersList , unit ) ;
25241: LD_ADDR_VAR 0 5
25245: PUSH
25246: LD_EXP 96
25250: PPUSH
25251: LD_VAR 0 1
25255: PPUSH
25256: CALL 31614 0 2
25260: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25261: LD_EXP 97
25265: PUSH
25266: LD_VAR 0 5
25270: ARRAY
25271: PUSH
25272: LD_EXP 98
25276: GREATEREQUAL
25277: IFFALSE 25281
// exit ;
25279: GO 25481
// ComMoveXY ( unit , x , y ) ;
25281: LD_VAR 0 1
25285: PPUSH
25286: LD_VAR 0 2
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25300: LD_INT 35
25302: PPUSH
25303: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25307: LD_VAR 0 1
25311: PPUSH
25312: LD_VAR 0 2
25316: PPUSH
25317: LD_VAR 0 3
25321: PPUSH
25322: CALL 62950 0 3
25326: NOT
25327: PUSH
25328: LD_VAR 0 1
25332: PPUSH
25333: CALL_OW 314
25337: AND
25338: IFFALSE 25342
// exit ;
25340: GO 25481
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25342: LD_VAR 0 2
25346: PPUSH
25347: LD_VAR 0 3
25351: PPUSH
25352: CALL_OW 428
25356: PUSH
25357: LD_VAR 0 1
25361: EQUAL
25362: PUSH
25363: LD_VAR 0 1
25367: PPUSH
25368: CALL_OW 314
25372: NOT
25373: AND
25374: IFFALSE 25300
// PlaySoundXY ( x , y , PlantMine ) ;
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_VAR 0 3
25385: PPUSH
25386: LD_STRING PlantMine
25388: PPUSH
25389: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25393: LD_VAR 0 2
25397: PPUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 255
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25420: LD_ADDR_EXP 97
25424: PUSH
25425: LD_EXP 97
25429: PPUSH
25430: LD_VAR 0 5
25434: PUSH
25435: LD_EXP 97
25439: PUSH
25440: LD_VAR 0 5
25444: ARRAY
25445: PUSH
25446: LD_INT 1
25448: PLUS
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PPUSH
25454: LD_VAR 0 2
25458: PUSH
25459: LD_VAR 0 3
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PPUSH
25468: CALL 31829 0 3
25472: ST_TO_ADDR
// result := true ;
25473: LD_ADDR_VAR 0 4
25477: PUSH
25478: LD_INT 1
25480: ST_TO_ADDR
// end ;
25481: LD_VAR 0 4
25485: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25486: LD_INT 0
25488: PPUSH
25489: PPUSH
25490: PPUSH
// if not unit in minersList then
25491: LD_VAR 0 1
25495: PUSH
25496: LD_EXP 96
25500: IN
25501: NOT
25502: IFFALSE 25506
// exit ;
25504: GO 25898
// index := GetElementIndex ( minersList , unit ) ;
25506: LD_ADDR_VAR 0 6
25510: PUSH
25511: LD_EXP 96
25515: PPUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL 31614 0 2
25525: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25526: LD_ADDR_VAR 0 5
25530: PUSH
25531: DOUBLE
25532: LD_EXP 97
25536: PUSH
25537: LD_VAR 0 6
25541: ARRAY
25542: INC
25543: ST_TO_ADDR
25544: LD_INT 1
25546: PUSH
25547: FOR_DOWNTO
25548: IFFALSE 25709
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25550: LD_EXP 97
25554: PUSH
25555: LD_VAR 0 6
25559: ARRAY
25560: PUSH
25561: LD_VAR 0 5
25565: ARRAY
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PUSH
25571: LD_VAR 0 2
25575: EQUAL
25576: PUSH
25577: LD_EXP 97
25581: PUSH
25582: LD_VAR 0 6
25586: ARRAY
25587: PUSH
25588: LD_VAR 0 5
25592: ARRAY
25593: PUSH
25594: LD_INT 2
25596: ARRAY
25597: PUSH
25598: LD_VAR 0 3
25602: EQUAL
25603: AND
25604: IFFALSE 25707
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25606: LD_EXP 97
25610: PUSH
25611: LD_VAR 0 6
25615: ARRAY
25616: PUSH
25617: LD_VAR 0 5
25621: ARRAY
25622: PUSH
25623: LD_INT 1
25625: ARRAY
25626: PPUSH
25627: LD_EXP 97
25631: PUSH
25632: LD_VAR 0 6
25636: ARRAY
25637: PUSH
25638: LD_VAR 0 5
25642: ARRAY
25643: PUSH
25644: LD_INT 2
25646: ARRAY
25647: PPUSH
25648: LD_VAR 0 1
25652: PPUSH
25653: CALL_OW 255
25657: PPUSH
25658: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25662: LD_ADDR_EXP 97
25666: PUSH
25667: LD_EXP 97
25671: PPUSH
25672: LD_VAR 0 6
25676: PPUSH
25677: LD_EXP 97
25681: PUSH
25682: LD_VAR 0 6
25686: ARRAY
25687: PPUSH
25688: LD_VAR 0 5
25692: PPUSH
25693: CALL_OW 3
25697: PPUSH
25698: CALL_OW 1
25702: ST_TO_ADDR
// exit ;
25703: POP
25704: POP
25705: GO 25898
// end ; end ;
25707: GO 25547
25709: POP
25710: POP
// for i := minerMinesList [ index ] downto 1 do
25711: LD_ADDR_VAR 0 5
25715: PUSH
25716: DOUBLE
25717: LD_EXP 97
25721: PUSH
25722: LD_VAR 0 6
25726: ARRAY
25727: INC
25728: ST_TO_ADDR
25729: LD_INT 1
25731: PUSH
25732: FOR_DOWNTO
25733: IFFALSE 25896
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25735: LD_EXP 97
25739: PUSH
25740: LD_VAR 0 6
25744: ARRAY
25745: PUSH
25746: LD_VAR 0 5
25750: ARRAY
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: LD_EXP 97
25760: PUSH
25761: LD_VAR 0 6
25765: ARRAY
25766: PUSH
25767: LD_VAR 0 5
25771: ARRAY
25772: PUSH
25773: LD_INT 2
25775: ARRAY
25776: PPUSH
25777: LD_VAR 0 2
25781: PPUSH
25782: LD_VAR 0 3
25786: PPUSH
25787: CALL_OW 298
25791: PUSH
25792: LD_INT 6
25794: LESS
25795: IFFALSE 25894
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25797: LD_EXP 97
25801: PUSH
25802: LD_VAR 0 6
25806: ARRAY
25807: PUSH
25808: LD_VAR 0 5
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PPUSH
25818: LD_EXP 97
25822: PUSH
25823: LD_VAR 0 6
25827: ARRAY
25828: PUSH
25829: LD_VAR 0 5
25833: ARRAY
25834: PUSH
25835: LD_INT 2
25837: ARRAY
25838: PPUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 255
25848: PPUSH
25849: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25853: LD_ADDR_EXP 97
25857: PUSH
25858: LD_EXP 97
25862: PPUSH
25863: LD_VAR 0 6
25867: PPUSH
25868: LD_EXP 97
25872: PUSH
25873: LD_VAR 0 6
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: CALL_OW 3
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// end ; end ;
25894: GO 25732
25896: POP
25897: POP
// end ;
25898: LD_VAR 0 4
25902: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
25913: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 264
25923: PUSH
25924: LD_INT 81
25926: EQUAL
25927: NOT
25928: PUSH
25929: LD_VAR 0 1
25933: PUSH
25934: LD_EXP 96
25938: IN
25939: NOT
25940: OR
25941: IFFALSE 25945
// exit ;
25943: GO 26267
// index := GetElementIndex ( minersList , unit ) ;
25945: LD_ADDR_VAR 0 6
25949: PUSH
25950: LD_EXP 96
25954: PPUSH
25955: LD_VAR 0 1
25959: PPUSH
25960: CALL 31614 0 2
25964: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: LD_EXP 98
25974: PUSH
25975: LD_EXP 97
25979: PUSH
25980: LD_VAR 0 6
25984: ARRAY
25985: MINUS
25986: ST_TO_ADDR
// if not minesFreeAmount then
25987: LD_VAR 0 8
25991: NOT
25992: IFFALSE 25996
// exit ;
25994: GO 26267
// tmp := [ ] ;
25996: LD_ADDR_VAR 0 7
26000: PUSH
26001: EMPTY
26002: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: DOUBLE
26009: LD_INT 1
26011: DEC
26012: ST_TO_ADDR
26013: LD_VAR 0 8
26017: PUSH
26018: FOR_TO
26019: IFFALSE 26214
// begin _d := rand ( 0 , 5 ) ;
26021: LD_ADDR_VAR 0 11
26025: PUSH
26026: LD_INT 0
26028: PPUSH
26029: LD_INT 5
26031: PPUSH
26032: CALL_OW 12
26036: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26037: LD_ADDR_VAR 0 12
26041: PUSH
26042: LD_INT 2
26044: PPUSH
26045: LD_INT 6
26047: PPUSH
26048: CALL_OW 12
26052: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26053: LD_ADDR_VAR 0 9
26057: PUSH
26058: LD_VAR 0 2
26062: PPUSH
26063: LD_VAR 0 11
26067: PPUSH
26068: LD_VAR 0 12
26072: PPUSH
26073: CALL_OW 272
26077: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26078: LD_ADDR_VAR 0 10
26082: PUSH
26083: LD_VAR 0 3
26087: PPUSH
26088: LD_VAR 0 11
26092: PPUSH
26093: LD_VAR 0 12
26097: PPUSH
26098: CALL_OW 273
26102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26103: LD_VAR 0 9
26107: PPUSH
26108: LD_VAR 0 10
26112: PPUSH
26113: CALL_OW 488
26117: PUSH
26118: LD_VAR 0 9
26122: PUSH
26123: LD_VAR 0 10
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_VAR 0 7
26136: IN
26137: NOT
26138: AND
26139: PUSH
26140: LD_VAR 0 9
26144: PPUSH
26145: LD_VAR 0 10
26149: PPUSH
26150: CALL_OW 458
26154: NOT
26155: AND
26156: IFFALSE 26198
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26158: LD_ADDR_VAR 0 7
26162: PUSH
26163: LD_VAR 0 7
26167: PPUSH
26168: LD_VAR 0 7
26172: PUSH
26173: LD_INT 1
26175: PLUS
26176: PPUSH
26177: LD_VAR 0 9
26181: PUSH
26182: LD_VAR 0 10
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 1
26195: ST_TO_ADDR
26196: GO 26212
// i := i - 1 ;
26198: LD_ADDR_VAR 0 5
26202: PUSH
26203: LD_VAR 0 5
26207: PUSH
26208: LD_INT 1
26210: MINUS
26211: ST_TO_ADDR
// end ;
26212: GO 26018
26214: POP
26215: POP
// for i in tmp do
26216: LD_ADDR_VAR 0 5
26220: PUSH
26221: LD_VAR 0 7
26225: PUSH
26226: FOR_IN
26227: IFFALSE 26265
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26229: LD_VAR 0 1
26233: PPUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_INT 1
26241: ARRAY
26242: PPUSH
26243: LD_VAR 0 5
26247: PUSH
26248: LD_INT 2
26250: ARRAY
26251: PPUSH
26252: CALL 25211 0 3
26256: NOT
26257: IFFALSE 26263
// exit ;
26259: POP
26260: POP
26261: GO 26267
26263: GO 26226
26265: POP
26266: POP
// end ;
26267: LD_VAR 0 4
26271: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
// if not GetClass ( unit ) = class_sniper then
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 257
26290: PUSH
26291: LD_INT 5
26293: EQUAL
26294: NOT
26295: IFFALSE 26299
// exit ;
26297: GO 26687
// dist := 8 ;
26299: LD_ADDR_VAR 0 5
26303: PUSH
26304: LD_INT 8
26306: ST_TO_ADDR
// viewRange := 12 ;
26307: LD_ADDR_VAR 0 7
26311: PUSH
26312: LD_INT 12
26314: ST_TO_ADDR
// side := GetSide ( unit ) ;
26315: LD_ADDR_VAR 0 6
26319: PUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 255
26329: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26330: LD_INT 61
26332: PPUSH
26333: LD_VAR 0 6
26337: PPUSH
26338: CALL_OW 321
26342: PUSH
26343: LD_INT 2
26345: EQUAL
26346: IFFALSE 26356
// viewRange := 16 ;
26348: LD_ADDR_VAR 0 7
26352: PUSH
26353: LD_INT 16
26355: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26356: LD_VAR 0 1
26360: PPUSH
26361: LD_VAR 0 2
26365: PPUSH
26366: LD_VAR 0 3
26370: PPUSH
26371: CALL_OW 297
26375: PUSH
26376: LD_VAR 0 5
26380: GREATER
26381: IFFALSE 26460
// begin ComMoveXY ( unit , x , y ) ;
26383: LD_VAR 0 1
26387: PPUSH
26388: LD_VAR 0 2
26392: PPUSH
26393: LD_VAR 0 3
26397: PPUSH
26398: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26402: LD_INT 35
26404: PPUSH
26405: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26409: LD_VAR 0 1
26413: PPUSH
26414: LD_VAR 0 2
26418: PPUSH
26419: LD_VAR 0 3
26423: PPUSH
26424: CALL 62950 0 3
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26687
// until GetDistUnitXY ( unit , x , y ) < dist ;
26433: LD_VAR 0 1
26437: PPUSH
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 297
26452: PUSH
26453: LD_VAR 0 5
26457: LESS
26458: IFFALSE 26402
// end ; ComTurnXY ( unit , x , y ) ;
26460: LD_VAR 0 1
26464: PPUSH
26465: LD_VAR 0 2
26469: PPUSH
26470: LD_VAR 0 3
26474: PPUSH
26475: CALL_OW 118
// wait ( 5 ) ;
26479: LD_INT 5
26481: PPUSH
26482: CALL_OW 67
// _d := GetDir ( unit ) ;
26486: LD_ADDR_VAR 0 10
26490: PUSH
26491: LD_VAR 0 1
26495: PPUSH
26496: CALL_OW 254
26500: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26501: LD_ADDR_VAR 0 8
26505: PUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 250
26515: PPUSH
26516: LD_VAR 0 10
26520: PPUSH
26521: LD_VAR 0 5
26525: PPUSH
26526: CALL_OW 272
26530: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26531: LD_ADDR_VAR 0 9
26535: PUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 251
26545: PPUSH
26546: LD_VAR 0 10
26550: PPUSH
26551: LD_VAR 0 5
26555: PPUSH
26556: CALL_OW 273
26560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26561: LD_VAR 0 8
26565: PPUSH
26566: LD_VAR 0 9
26570: PPUSH
26571: CALL_OW 488
26575: NOT
26576: IFFALSE 26580
// exit ;
26578: GO 26687
// ComAnimCustom ( unit , 1 ) ;
26580: LD_VAR 0 1
26584: PPUSH
26585: LD_INT 1
26587: PPUSH
26588: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26592: LD_VAR 0 8
26596: PPUSH
26597: LD_VAR 0 9
26601: PPUSH
26602: LD_VAR 0 6
26606: PPUSH
26607: LD_VAR 0 7
26611: PPUSH
26612: CALL_OW 330
// repeat wait ( 1 ) ;
26616: LD_INT 1
26618: PPUSH
26619: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL_OW 316
26632: PUSH
26633: LD_VAR 0 1
26637: PPUSH
26638: CALL_OW 314
26642: OR
26643: PUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 302
26653: NOT
26654: OR
26655: PUSH
26656: LD_VAR 0 1
26660: PPUSH
26661: CALL_OW 301
26665: OR
26666: IFFALSE 26616
// RemoveSeeing ( _x , _y , side ) ;
26668: LD_VAR 0 8
26672: PPUSH
26673: LD_VAR 0 9
26677: PPUSH
26678: LD_VAR 0 6
26682: PPUSH
26683: CALL_OW 331
// end ; end_of_file
26687: LD_VAR 0 4
26691: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26692: LD_INT 0
26694: PPUSH
26695: PPUSH
// if exist_mode then
26696: LD_VAR 0 2
26700: IFFALSE 26725
// unit := CreateCharacter ( prefix & ident ) else
26702: LD_ADDR_VAR 0 5
26706: PUSH
26707: LD_VAR 0 3
26711: PUSH
26712: LD_VAR 0 1
26716: STR
26717: PPUSH
26718: CALL_OW 34
26722: ST_TO_ADDR
26723: GO 26740
// unit := NewCharacter ( ident ) ;
26725: LD_ADDR_VAR 0 5
26729: PUSH
26730: LD_VAR 0 1
26734: PPUSH
26735: CALL_OW 25
26739: ST_TO_ADDR
// result := unit ;
26740: LD_ADDR_VAR 0 4
26744: PUSH
26745: LD_VAR 0 5
26749: ST_TO_ADDR
// end ;
26750: LD_VAR 0 4
26754: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// if not side or not nation then
26759: LD_VAR 0 1
26763: NOT
26764: PUSH
26765: LD_VAR 0 2
26769: NOT
26770: OR
26771: IFFALSE 26775
// exit ;
26773: GO 27543
// case nation of nation_american :
26775: LD_VAR 0 2
26779: PUSH
26780: LD_INT 1
26782: DOUBLE
26783: EQUAL
26784: IFTRUE 26788
26786: GO 27002
26788: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26789: LD_ADDR_VAR 0 4
26793: PUSH
26794: LD_INT 35
26796: PUSH
26797: LD_INT 45
26799: PUSH
26800: LD_INT 46
26802: PUSH
26803: LD_INT 47
26805: PUSH
26806: LD_INT 82
26808: PUSH
26809: LD_INT 83
26811: PUSH
26812: LD_INT 84
26814: PUSH
26815: LD_INT 85
26817: PUSH
26818: LD_INT 86
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 6
26829: PUSH
26830: LD_INT 15
26832: PUSH
26833: LD_INT 16
26835: PUSH
26836: LD_INT 7
26838: PUSH
26839: LD_INT 12
26841: PUSH
26842: LD_INT 13
26844: PUSH
26845: LD_INT 10
26847: PUSH
26848: LD_INT 14
26850: PUSH
26851: LD_INT 20
26853: PUSH
26854: LD_INT 21
26856: PUSH
26857: LD_INT 22
26859: PUSH
26860: LD_INT 25
26862: PUSH
26863: LD_INT 32
26865: PUSH
26866: LD_INT 27
26868: PUSH
26869: LD_INT 36
26871: PUSH
26872: LD_INT 69
26874: PUSH
26875: LD_INT 39
26877: PUSH
26878: LD_INT 34
26880: PUSH
26881: LD_INT 40
26883: PUSH
26884: LD_INT 48
26886: PUSH
26887: LD_INT 49
26889: PUSH
26890: LD_INT 50
26892: PUSH
26893: LD_INT 51
26895: PUSH
26896: LD_INT 52
26898: PUSH
26899: LD_INT 53
26901: PUSH
26902: LD_INT 54
26904: PUSH
26905: LD_INT 55
26907: PUSH
26908: LD_INT 56
26910: PUSH
26911: LD_INT 57
26913: PUSH
26914: LD_INT 58
26916: PUSH
26917: LD_INT 59
26919: PUSH
26920: LD_INT 60
26922: PUSH
26923: LD_INT 61
26925: PUSH
26926: LD_INT 62
26928: PUSH
26929: LD_INT 80
26931: PUSH
26932: LD_INT 82
26934: PUSH
26935: LD_INT 83
26937: PUSH
26938: LD_INT 84
26940: PUSH
26941: LD_INT 85
26943: PUSH
26944: LD_INT 86
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
27000: GO 27467
27002: LD_INT 2
27004: DOUBLE
27005: EQUAL
27006: IFTRUE 27010
27008: GO 27236
27010: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: LD_INT 35
27018: PUSH
27019: LD_INT 45
27021: PUSH
27022: LD_INT 46
27024: PUSH
27025: LD_INT 47
27027: PUSH
27028: LD_INT 82
27030: PUSH
27031: LD_INT 83
27033: PUSH
27034: LD_INT 84
27036: PUSH
27037: LD_INT 85
27039: PUSH
27040: LD_INT 87
27042: PUSH
27043: LD_INT 70
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 11
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: LD_INT 4
27057: PUSH
27058: LD_INT 5
27060: PUSH
27061: LD_INT 6
27063: PUSH
27064: LD_INT 15
27066: PUSH
27067: LD_INT 18
27069: PUSH
27070: LD_INT 7
27072: PUSH
27073: LD_INT 17
27075: PUSH
27076: LD_INT 8
27078: PUSH
27079: LD_INT 20
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_INT 72
27090: PUSH
27091: LD_INT 26
27093: PUSH
27094: LD_INT 69
27096: PUSH
27097: LD_INT 39
27099: PUSH
27100: LD_INT 40
27102: PUSH
27103: LD_INT 41
27105: PUSH
27106: LD_INT 42
27108: PUSH
27109: LD_INT 43
27111: PUSH
27112: LD_INT 48
27114: PUSH
27115: LD_INT 49
27117: PUSH
27118: LD_INT 50
27120: PUSH
27121: LD_INT 51
27123: PUSH
27124: LD_INT 52
27126: PUSH
27127: LD_INT 53
27129: PUSH
27130: LD_INT 54
27132: PUSH
27133: LD_INT 55
27135: PUSH
27136: LD_INT 56
27138: PUSH
27139: LD_INT 60
27141: PUSH
27142: LD_INT 61
27144: PUSH
27145: LD_INT 62
27147: PUSH
27148: LD_INT 66
27150: PUSH
27151: LD_INT 67
27153: PUSH
27154: LD_INT 68
27156: PUSH
27157: LD_INT 81
27159: PUSH
27160: LD_INT 82
27162: PUSH
27163: LD_INT 83
27165: PUSH
27166: LD_INT 84
27168: PUSH
27169: LD_INT 85
27171: PUSH
27172: LD_INT 87
27174: PUSH
27175: LD_INT 88
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
27234: GO 27467
27236: LD_INT 3
27238: DOUBLE
27239: EQUAL
27240: IFTRUE 27244
27242: GO 27466
27244: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27245: LD_ADDR_VAR 0 4
27249: PUSH
27250: LD_INT 46
27252: PUSH
27253: LD_INT 47
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 82
27264: PUSH
27265: LD_INT 83
27267: PUSH
27268: LD_INT 84
27270: PUSH
27271: LD_INT 85
27273: PUSH
27274: LD_INT 86
27276: PUSH
27277: LD_INT 11
27279: PUSH
27280: LD_INT 9
27282: PUSH
27283: LD_INT 20
27285: PUSH
27286: LD_INT 19
27288: PUSH
27289: LD_INT 21
27291: PUSH
27292: LD_INT 24
27294: PUSH
27295: LD_INT 22
27297: PUSH
27298: LD_INT 25
27300: PUSH
27301: LD_INT 28
27303: PUSH
27304: LD_INT 29
27306: PUSH
27307: LD_INT 30
27309: PUSH
27310: LD_INT 31
27312: PUSH
27313: LD_INT 37
27315: PUSH
27316: LD_INT 38
27318: PUSH
27319: LD_INT 32
27321: PUSH
27322: LD_INT 27
27324: PUSH
27325: LD_INT 33
27327: PUSH
27328: LD_INT 69
27330: PUSH
27331: LD_INT 39
27333: PUSH
27334: LD_INT 34
27336: PUSH
27337: LD_INT 40
27339: PUSH
27340: LD_INT 71
27342: PUSH
27343: LD_INT 23
27345: PUSH
27346: LD_INT 44
27348: PUSH
27349: LD_INT 48
27351: PUSH
27352: LD_INT 49
27354: PUSH
27355: LD_INT 50
27357: PUSH
27358: LD_INT 51
27360: PUSH
27361: LD_INT 52
27363: PUSH
27364: LD_INT 53
27366: PUSH
27367: LD_INT 54
27369: PUSH
27370: LD_INT 55
27372: PUSH
27373: LD_INT 56
27375: PUSH
27376: LD_INT 57
27378: PUSH
27379: LD_INT 58
27381: PUSH
27382: LD_INT 59
27384: PUSH
27385: LD_INT 63
27387: PUSH
27388: LD_INT 64
27390: PUSH
27391: LD_INT 65
27393: PUSH
27394: LD_INT 82
27396: PUSH
27397: LD_INT 83
27399: PUSH
27400: LD_INT 84
27402: PUSH
27403: LD_INT 85
27405: PUSH
27406: LD_INT 86
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
27464: GO 27467
27466: POP
// if state > - 1 and state < 3 then
27467: LD_VAR 0 3
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: GREATER
27476: PUSH
27477: LD_VAR 0 3
27481: PUSH
27482: LD_INT 3
27484: LESS
27485: AND
27486: IFFALSE 27543
// for i in result do
27488: LD_ADDR_VAR 0 5
27492: PUSH
27493: LD_VAR 0 4
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27541
// if GetTech ( i , side ) <> state then
27501: LD_VAR 0 5
27505: PPUSH
27506: LD_VAR 0 1
27510: PPUSH
27511: CALL_OW 321
27515: PUSH
27516: LD_VAR 0 3
27520: NONEQUAL
27521: IFFALSE 27539
// result := result diff i ;
27523: LD_ADDR_VAR 0 4
27527: PUSH
27528: LD_VAR 0 4
27532: PUSH
27533: LD_VAR 0 5
27537: DIFF
27538: ST_TO_ADDR
27539: GO 27498
27541: POP
27542: POP
// end ;
27543: LD_VAR 0 4
27547: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
// result := true ;
27553: LD_ADDR_VAR 0 3
27557: PUSH
27558: LD_INT 1
27560: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27561: LD_ADDR_VAR 0 5
27565: PUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: CALL_OW 480
27575: ST_TO_ADDR
// if not tmp then
27576: LD_VAR 0 5
27580: NOT
27581: IFFALSE 27585
// exit ;
27583: GO 27634
// for i in tmp do
27585: LD_ADDR_VAR 0 4
27589: PUSH
27590: LD_VAR 0 5
27594: PUSH
27595: FOR_IN
27596: IFFALSE 27632
// if GetTech ( i , side ) <> state_researched then
27598: LD_VAR 0 4
27602: PPUSH
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 321
27612: PUSH
27613: LD_INT 2
27615: NONEQUAL
27616: IFFALSE 27630
// begin result := false ;
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: LD_INT 0
27625: ST_TO_ADDR
// exit ;
27626: POP
27627: POP
27628: GO 27634
// end ;
27630: GO 27595
27632: POP
27633: POP
// end ;
27634: LD_VAR 0 3
27638: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27639: LD_INT 0
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
27653: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27654: LD_VAR 0 1
27658: NOT
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 257
27669: PUSH
27670: LD_INT 9
27672: NONEQUAL
27673: OR
27674: IFFALSE 27678
// exit ;
27676: GO 28251
// side := GetSide ( unit ) ;
27678: LD_ADDR_VAR 0 9
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 255
27692: ST_TO_ADDR
// tech_space := tech_spacanom ;
27693: LD_ADDR_VAR 0 12
27697: PUSH
27698: LD_INT 29
27700: ST_TO_ADDR
// tech_time := tech_taurad ;
27701: LD_ADDR_VAR 0 13
27705: PUSH
27706: LD_INT 28
27708: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27709: LD_ADDR_VAR 0 11
27713: PUSH
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 310
27723: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27724: LD_VAR 0 11
27728: PPUSH
27729: CALL_OW 247
27733: PUSH
27734: LD_INT 2
27736: EQUAL
27737: IFFALSE 27741
// exit ;
27739: GO 28251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27741: LD_ADDR_VAR 0 8
27745: PUSH
27746: LD_INT 81
27748: PUSH
27749: LD_VAR 0 9
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 3
27760: PUSH
27761: LD_INT 21
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PPUSH
27779: CALL_OW 69
27783: ST_TO_ADDR
// if not tmp then
27784: LD_VAR 0 8
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 28251
// if in_unit then
27793: LD_VAR 0 11
27797: IFFALSE 27821
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27799: LD_ADDR_VAR 0 10
27803: PUSH
27804: LD_VAR 0 8
27808: PPUSH
27809: LD_VAR 0 11
27813: PPUSH
27814: CALL_OW 74
27818: ST_TO_ADDR
27819: GO 27841
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27821: LD_ADDR_VAR 0 10
27825: PUSH
27826: LD_VAR 0 8
27830: PPUSH
27831: LD_VAR 0 1
27835: PPUSH
27836: CALL_OW 74
27840: ST_TO_ADDR
// if not enemy then
27841: LD_VAR 0 10
27845: NOT
27846: IFFALSE 27850
// exit ;
27848: GO 28251
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27850: LD_VAR 0 11
27854: PUSH
27855: LD_VAR 0 11
27859: PPUSH
27860: LD_VAR 0 10
27864: PPUSH
27865: CALL_OW 296
27869: PUSH
27870: LD_INT 13
27872: GREATER
27873: AND
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: LD_VAR 0 10
27884: PPUSH
27885: CALL_OW 296
27889: PUSH
27890: LD_INT 12
27892: GREATER
27893: OR
27894: IFFALSE 27898
// exit ;
27896: GO 28251
// missile := [ 1 ] ;
27898: LD_ADDR_VAR 0 14
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27909: LD_VAR 0 9
27913: PPUSH
27914: LD_VAR 0 12
27918: PPUSH
27919: CALL_OW 325
27923: IFFALSE 27952
// missile := Replace ( missile , missile + 1 , 2 ) ;
27925: LD_ADDR_VAR 0 14
27929: PUSH
27930: LD_VAR 0 14
27934: PPUSH
27935: LD_VAR 0 14
27939: PUSH
27940: LD_INT 1
27942: PLUS
27943: PPUSH
27944: LD_INT 2
27946: PPUSH
27947: CALL_OW 1
27951: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27952: LD_VAR 0 9
27956: PPUSH
27957: LD_VAR 0 13
27961: PPUSH
27962: CALL_OW 325
27966: PUSH
27967: LD_VAR 0 10
27971: PPUSH
27972: CALL_OW 255
27976: PPUSH
27977: LD_VAR 0 13
27981: PPUSH
27982: CALL_OW 325
27986: NOT
27987: AND
27988: IFFALSE 28017
// missile := Replace ( missile , missile + 1 , 3 ) ;
27990: LD_ADDR_VAR 0 14
27994: PUSH
27995: LD_VAR 0 14
27999: PPUSH
28000: LD_VAR 0 14
28004: PUSH
28005: LD_INT 1
28007: PLUS
28008: PPUSH
28009: LD_INT 3
28011: PPUSH
28012: CALL_OW 1
28016: ST_TO_ADDR
// if missile < 2 then
28017: LD_VAR 0 14
28021: PUSH
28022: LD_INT 2
28024: LESS
28025: IFFALSE 28029
// exit ;
28027: GO 28251
// x := GetX ( enemy ) ;
28029: LD_ADDR_VAR 0 4
28033: PUSH
28034: LD_VAR 0 10
28038: PPUSH
28039: CALL_OW 250
28043: ST_TO_ADDR
// y := GetY ( enemy ) ;
28044: LD_ADDR_VAR 0 5
28048: PUSH
28049: LD_VAR 0 10
28053: PPUSH
28054: CALL_OW 251
28058: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28059: LD_ADDR_VAR 0 6
28063: PUSH
28064: LD_VAR 0 4
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PPUSH
28073: LD_INT 1
28075: PPUSH
28076: CALL_OW 12
28080: PLUS
28081: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28082: LD_ADDR_VAR 0 7
28086: PUSH
28087: LD_VAR 0 5
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 12
28103: PLUS
28104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28105: LD_VAR 0 6
28109: PPUSH
28110: LD_VAR 0 7
28114: PPUSH
28115: CALL_OW 488
28119: NOT
28120: IFFALSE 28142
// begin _x := x ;
28122: LD_ADDR_VAR 0 6
28126: PUSH
28127: LD_VAR 0 4
28131: ST_TO_ADDR
// _y := y ;
28132: LD_ADDR_VAR 0 7
28136: PUSH
28137: LD_VAR 0 5
28141: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_INT 1
28149: PPUSH
28150: LD_VAR 0 14
28154: PPUSH
28155: CALL_OW 12
28159: ST_TO_ADDR
// case i of 1 :
28160: LD_VAR 0 3
28164: PUSH
28165: LD_INT 1
28167: DOUBLE
28168: EQUAL
28169: IFTRUE 28173
28171: GO 28190
28173: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28174: LD_VAR 0 1
28178: PPUSH
28179: LD_VAR 0 10
28183: PPUSH
28184: CALL_OW 115
28188: GO 28251
28190: LD_INT 2
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28220
28198: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28199: LD_VAR 0 1
28203: PPUSH
28204: LD_VAR 0 6
28208: PPUSH
28209: LD_VAR 0 7
28213: PPUSH
28214: CALL_OW 153
28218: GO 28251
28220: LD_INT 3
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28250
28228: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_VAR 0 6
28238: PPUSH
28239: LD_VAR 0 7
28243: PPUSH
28244: CALL_OW 154
28248: GO 28251
28250: POP
// end ;
28251: LD_VAR 0 2
28255: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28256: LD_INT 0
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
28263: PPUSH
// if not unit or not building then
28264: LD_VAR 0 1
28268: NOT
28269: PUSH
28270: LD_VAR 0 2
28274: NOT
28275: OR
28276: IFFALSE 28280
// exit ;
28278: GO 28438
// x := GetX ( building ) ;
28280: LD_ADDR_VAR 0 5
28284: PUSH
28285: LD_VAR 0 2
28289: PPUSH
28290: CALL_OW 250
28294: ST_TO_ADDR
// y := GetY ( building ) ;
28295: LD_ADDR_VAR 0 6
28299: PUSH
28300: LD_VAR 0 2
28304: PPUSH
28305: CALL_OW 251
28309: ST_TO_ADDR
// for i = 0 to 5 do
28310: LD_ADDR_VAR 0 4
28314: PUSH
28315: DOUBLE
28316: LD_INT 0
28318: DEC
28319: ST_TO_ADDR
28320: LD_INT 5
28322: PUSH
28323: FOR_TO
28324: IFFALSE 28436
// begin _x := ShiftX ( x , i , 3 ) ;
28326: LD_ADDR_VAR 0 7
28330: PUSH
28331: LD_VAR 0 5
28335: PPUSH
28336: LD_VAR 0 4
28340: PPUSH
28341: LD_INT 3
28343: PPUSH
28344: CALL_OW 272
28348: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28349: LD_ADDR_VAR 0 8
28353: PUSH
28354: LD_VAR 0 6
28358: PPUSH
28359: LD_VAR 0 4
28363: PPUSH
28364: LD_INT 3
28366: PPUSH
28367: CALL_OW 273
28371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28372: LD_VAR 0 7
28376: PPUSH
28377: LD_VAR 0 8
28381: PPUSH
28382: CALL_OW 488
28386: NOT
28387: IFFALSE 28391
// continue ;
28389: GO 28323
// if HexInfo ( _x , _y ) = 0 then
28391: LD_VAR 0 7
28395: PPUSH
28396: LD_VAR 0 8
28400: PPUSH
28401: CALL_OW 428
28405: PUSH
28406: LD_INT 0
28408: EQUAL
28409: IFFALSE 28434
// begin ComMoveXY ( unit , _x , _y ) ;
28411: LD_VAR 0 1
28415: PPUSH
28416: LD_VAR 0 7
28420: PPUSH
28421: LD_VAR 0 8
28425: PPUSH
28426: CALL_OW 111
// exit ;
28430: POP
28431: POP
28432: GO 28438
// end ; end ;
28434: GO 28323
28436: POP
28437: POP
// end ;
28438: LD_VAR 0 3
28442: RET
// export function ScanBase ( side , base_area ) ; begin
28443: LD_INT 0
28445: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_VAR 0 2
28455: PPUSH
28456: LD_INT 81
28458: PUSH
28459: LD_VAR 0 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PPUSH
28468: CALL_OW 70
28472: ST_TO_ADDR
// end ;
28473: LD_VAR 0 3
28477: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28478: LD_INT 0
28480: PPUSH
28481: PPUSH
28482: PPUSH
28483: PPUSH
// result := false ;
28484: LD_ADDR_VAR 0 2
28488: PUSH
28489: LD_INT 0
28491: ST_TO_ADDR
// side := GetSide ( unit ) ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 255
28506: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28507: LD_ADDR_VAR 0 4
28511: PUSH
28512: LD_VAR 0 1
28516: PPUSH
28517: CALL_OW 248
28521: ST_TO_ADDR
// case nat of 1 :
28522: LD_VAR 0 4
28526: PUSH
28527: LD_INT 1
28529: DOUBLE
28530: EQUAL
28531: IFTRUE 28535
28533: GO 28546
28535: POP
// tech := tech_lassight ; 2 :
28536: LD_ADDR_VAR 0 5
28540: PUSH
28541: LD_INT 12
28543: ST_TO_ADDR
28544: GO 28585
28546: LD_INT 2
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28565
28554: POP
// tech := tech_mortar ; 3 :
28555: LD_ADDR_VAR 0 5
28559: PUSH
28560: LD_INT 41
28562: ST_TO_ADDR
28563: GO 28585
28565: LD_INT 3
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28584
28573: POP
// tech := tech_bazooka ; end ;
28574: LD_ADDR_VAR 0 5
28578: PUSH
28579: LD_INT 44
28581: ST_TO_ADDR
28582: GO 28585
28584: POP
// if Researched ( side , tech ) then
28585: LD_VAR 0 3
28589: PPUSH
28590: LD_VAR 0 5
28594: PPUSH
28595: CALL_OW 325
28599: IFFALSE 28626
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28601: LD_ADDR_VAR 0 2
28605: PUSH
28606: LD_INT 5
28608: PUSH
28609: LD_INT 8
28611: PUSH
28612: LD_INT 9
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: PUSH
28620: LD_VAR 0 4
28624: ARRAY
28625: ST_TO_ADDR
// end ;
28626: LD_VAR 0 2
28630: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28631: LD_INT 0
28633: PPUSH
28634: PPUSH
28635: PPUSH
// if not mines then
28636: LD_VAR 0 2
28640: NOT
28641: IFFALSE 28645
// exit ;
28643: GO 28789
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28645: LD_ADDR_VAR 0 5
28649: PUSH
28650: LD_INT 81
28652: PUSH
28653: LD_VAR 0 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 3
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PPUSH
28683: CALL_OW 69
28687: ST_TO_ADDR
// for i in mines do
28688: LD_ADDR_VAR 0 4
28692: PUSH
28693: LD_VAR 0 2
28697: PUSH
28698: FOR_IN
28699: IFFALSE 28787
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28701: LD_VAR 0 4
28705: PUSH
28706: LD_INT 1
28708: ARRAY
28709: PPUSH
28710: LD_VAR 0 4
28714: PUSH
28715: LD_INT 2
28717: ARRAY
28718: PPUSH
28719: CALL_OW 458
28723: NOT
28724: IFFALSE 28728
// continue ;
28726: GO 28698
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28728: LD_VAR 0 4
28732: PUSH
28733: LD_INT 1
28735: ARRAY
28736: PPUSH
28737: LD_VAR 0 4
28741: PUSH
28742: LD_INT 2
28744: ARRAY
28745: PPUSH
28746: CALL_OW 428
28750: PUSH
28751: LD_VAR 0 5
28755: IN
28756: IFFALSE 28785
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28758: LD_VAR 0 4
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: PPUSH
28767: LD_VAR 0 4
28771: PUSH
28772: LD_INT 2
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 456
// end ;
28785: GO 28698
28787: POP
28788: POP
// end ;
28789: LD_VAR 0 3
28793: RET
// export function Count ( array ) ; var i ; begin
28794: LD_INT 0
28796: PPUSH
28797: PPUSH
// result := 0 ;
28798: LD_ADDR_VAR 0 2
28802: PUSH
28803: LD_INT 0
28805: ST_TO_ADDR
// for i in array do
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_VAR 0 1
28815: PUSH
28816: FOR_IN
28817: IFFALSE 28841
// if i then
28819: LD_VAR 0 3
28823: IFFALSE 28839
// result := result + 1 ;
28825: LD_ADDR_VAR 0 2
28829: PUSH
28830: LD_VAR 0 2
28834: PUSH
28835: LD_INT 1
28837: PLUS
28838: ST_TO_ADDR
28839: GO 28816
28841: POP
28842: POP
// end ;
28843: LD_VAR 0 2
28847: RET
// export function IsEmpty ( building ) ; begin
28848: LD_INT 0
28850: PPUSH
// if not building then
28851: LD_VAR 0 1
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28903
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: LD_VAR 0 1
28869: PUSH
28870: LD_INT 22
28872: PUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: CALL_OW 255
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 58
28889: PUSH
28890: EMPTY
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: IN
28902: ST_TO_ADDR
// end ;
28903: LD_VAR 0 2
28907: RET
// export function IsNotFull ( building ) ; var places ; begin
28908: LD_INT 0
28910: PPUSH
28911: PPUSH
// if not building then
28912: LD_VAR 0 1
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 29092
// result := false ;
28921: LD_ADDR_VAR 0 2
28925: PUSH
28926: LD_INT 0
28928: ST_TO_ADDR
// places := 0 ;
28929: LD_ADDR_VAR 0 3
28933: PUSH
28934: LD_INT 0
28936: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 0
28949: DOUBLE
28950: EQUAL
28951: IFTRUE 29009
28953: LD_INT 1
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 29009
28959: LD_INT 6
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 29009
28965: LD_INT 7
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 29009
28971: LD_INT 8
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 29009
28977: LD_INT 4
28979: DOUBLE
28980: EQUAL
28981: IFTRUE 29009
28983: LD_INT 5
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 29009
28989: LD_INT 2
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 29009
28995: LD_INT 3
28997: DOUBLE
28998: EQUAL
28999: IFTRUE 29009
29001: LD_INT 35
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29020
29009: POP
// places := 6 ; b_bunker , b_breastwork :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 6
29017: ST_TO_ADDR
29018: GO 29065
29020: LD_INT 32
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29034
29026: LD_INT 31
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29045
29034: POP
// places := 1 ; b_control_tower :
29035: LD_ADDR_VAR 0 3
29039: PUSH
29040: LD_INT 1
29042: ST_TO_ADDR
29043: GO 29065
29045: LD_INT 36
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29064
29053: POP
// places := 3 ; end ;
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_INT 3
29061: ST_TO_ADDR
29062: GO 29065
29064: POP
// if places then
29065: LD_VAR 0 3
29069: IFFALSE 29092
// result := UnitsInside ( building ) < places ;
29071: LD_ADDR_VAR 0 2
29075: PUSH
29076: LD_VAR 0 1
29080: PPUSH
29081: CALL_OW 313
29085: PUSH
29086: LD_VAR 0 3
29090: LESS
29091: ST_TO_ADDR
// end ;
29092: LD_VAR 0 2
29096: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
// tmp := [ ] ;
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: EMPTY
29109: ST_TO_ADDR
// list := [ ] ;
29110: LD_ADDR_VAR 0 5
29114: PUSH
29115: EMPTY
29116: ST_TO_ADDR
// for i = 16 to 25 do
29117: LD_ADDR_VAR 0 4
29121: PUSH
29122: DOUBLE
29123: LD_INT 16
29125: DEC
29126: ST_TO_ADDR
29127: LD_INT 25
29129: PUSH
29130: FOR_TO
29131: IFFALSE 29204
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_VAR 0 3
29142: PUSH
29143: LD_INT 22
29145: PUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 255
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 91
29162: PUSH
29163: LD_VAR 0 1
29167: PUSH
29168: LD_INT 6
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 30
29178: PUSH
29179: LD_VAR 0 4
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: PPUSH
29196: CALL_OW 69
29200: ADD
29201: ST_TO_ADDR
29202: GO 29130
29204: POP
29205: POP
// for i = 1 to tmp do
29206: LD_ADDR_VAR 0 4
29210: PUSH
29211: DOUBLE
29212: LD_INT 1
29214: DEC
29215: ST_TO_ADDR
29216: LD_VAR 0 3
29220: PUSH
29221: FOR_TO
29222: IFFALSE 29310
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29224: LD_ADDR_VAR 0 5
29228: PUSH
29229: LD_VAR 0 5
29233: PUSH
29234: LD_VAR 0 3
29238: PUSH
29239: LD_VAR 0 4
29243: ARRAY
29244: PPUSH
29245: CALL_OW 266
29249: PUSH
29250: LD_VAR 0 3
29254: PUSH
29255: LD_VAR 0 4
29259: ARRAY
29260: PPUSH
29261: CALL_OW 250
29265: PUSH
29266: LD_VAR 0 3
29270: PUSH
29271: LD_VAR 0 4
29275: ARRAY
29276: PPUSH
29277: CALL_OW 251
29281: PUSH
29282: LD_VAR 0 3
29286: PUSH
29287: LD_VAR 0 4
29291: ARRAY
29292: PPUSH
29293: CALL_OW 254
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: ADD
29307: ST_TO_ADDR
29308: GO 29221
29310: POP
29311: POP
// result := list ;
29312: LD_ADDR_VAR 0 2
29316: PUSH
29317: LD_VAR 0 5
29321: ST_TO_ADDR
// end ;
29322: LD_VAR 0 2
29326: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29327: LD_INT 0
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// if not factory then
29336: LD_VAR 0 1
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29938
// if control = control_apeman then
29345: LD_VAR 0 4
29349: PUSH
29350: LD_INT 5
29352: EQUAL
29353: IFFALSE 29462
// begin tmp := UnitsInside ( factory ) ;
29355: LD_ADDR_VAR 0 8
29359: PUSH
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 313
29369: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29370: LD_VAR 0 8
29374: PPUSH
29375: LD_INT 25
29377: PUSH
29378: LD_INT 12
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PPUSH
29385: CALL_OW 72
29389: NOT
29390: IFFALSE 29400
// control := control_manual ;
29392: LD_ADDR_VAR 0 4
29396: PUSH
29397: LD_INT 1
29399: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29400: LD_ADDR_VAR 0 8
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL 29097 0 1
29414: ST_TO_ADDR
// if tmp then
29415: LD_VAR 0 8
29419: IFFALSE 29462
// begin for i in tmp do
29421: LD_ADDR_VAR 0 7
29425: PUSH
29426: LD_VAR 0 8
29430: PUSH
29431: FOR_IN
29432: IFFALSE 29460
// if i [ 1 ] = b_ext_radio then
29434: LD_VAR 0 7
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PUSH
29443: LD_INT 22
29445: EQUAL
29446: IFFALSE 29458
// begin control := control_remote ;
29448: LD_ADDR_VAR 0 4
29452: PUSH
29453: LD_INT 2
29455: ST_TO_ADDR
// break ;
29456: GO 29460
// end ;
29458: GO 29431
29460: POP
29461: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29462: LD_VAR 0 1
29466: PPUSH
29467: LD_VAR 0 2
29471: PPUSH
29472: LD_VAR 0 3
29476: PPUSH
29477: LD_VAR 0 4
29481: PPUSH
29482: LD_VAR 0 5
29486: PPUSH
29487: CALL_OW 448
29491: IFFALSE 29526
// begin result := [ chassis , engine , control , weapon ] ;
29493: LD_ADDR_VAR 0 6
29497: PUSH
29498: LD_VAR 0 2
29502: PUSH
29503: LD_VAR 0 3
29507: PUSH
29508: LD_VAR 0 4
29512: PUSH
29513: LD_VAR 0 5
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
// exit ;
29524: GO 29938
// end ; _chassis := AvailableChassisList ( factory ) ;
29526: LD_ADDR_VAR 0 9
29530: PUSH
29531: LD_VAR 0 1
29535: PPUSH
29536: CALL_OW 475
29540: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29541: LD_ADDR_VAR 0 11
29545: PUSH
29546: LD_VAR 0 1
29550: PPUSH
29551: CALL_OW 476
29555: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29556: LD_ADDR_VAR 0 12
29560: PUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: CALL_OW 477
29570: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29571: LD_ADDR_VAR 0 10
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 478
29585: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29586: LD_VAR 0 9
29590: NOT
29591: PUSH
29592: LD_VAR 0 11
29596: NOT
29597: OR
29598: PUSH
29599: LD_VAR 0 12
29603: NOT
29604: OR
29605: PUSH
29606: LD_VAR 0 10
29610: NOT
29611: OR
29612: IFFALSE 29647
// begin result := [ chassis , engine , control , weapon ] ;
29614: LD_ADDR_VAR 0 6
29618: PUSH
29619: LD_VAR 0 2
29623: PUSH
29624: LD_VAR 0 3
29628: PUSH
29629: LD_VAR 0 4
29633: PUSH
29634: LD_VAR 0 5
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// exit ;
29645: GO 29938
// end ; if not chassis in _chassis then
29647: LD_VAR 0 2
29651: PUSH
29652: LD_VAR 0 9
29656: IN
29657: NOT
29658: IFFALSE 29684
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_VAR 0 9
29669: PUSH
29670: LD_INT 1
29672: PPUSH
29673: LD_VAR 0 9
29677: PPUSH
29678: CALL_OW 12
29682: ARRAY
29683: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29684: LD_VAR 0 2
29688: PPUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: CALL 29943 0 2
29698: NOT
29699: IFFALSE 29758
// repeat engine := _engine [ 1 ] ;
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_VAR 0 11
29710: PUSH
29711: LD_INT 1
29713: ARRAY
29714: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29715: LD_ADDR_VAR 0 11
29719: PUSH
29720: LD_VAR 0 11
29724: PPUSH
29725: LD_INT 1
29727: PPUSH
29728: CALL_OW 3
29732: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29733: LD_VAR 0 2
29737: PPUSH
29738: LD_VAR 0 3
29742: PPUSH
29743: CALL 29943 0 2
29747: PUSH
29748: LD_VAR 0 11
29752: PUSH
29753: EMPTY
29754: EQUAL
29755: OR
29756: IFFALSE 29701
// if not control in _control then
29758: LD_VAR 0 4
29762: PUSH
29763: LD_VAR 0 12
29767: IN
29768: NOT
29769: IFFALSE 29795
// control := _control [ rand ( 1 , _control ) ] ;
29771: LD_ADDR_VAR 0 4
29775: PUSH
29776: LD_VAR 0 12
29780: PUSH
29781: LD_INT 1
29783: PPUSH
29784: LD_VAR 0 12
29788: PPUSH
29789: CALL_OW 12
29793: ARRAY
29794: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29795: LD_VAR 0 2
29799: PPUSH
29800: LD_VAR 0 5
29804: PPUSH
29805: CALL 30163 0 2
29809: NOT
29810: IFFALSE 29869
// repeat weapon := _weapon [ 1 ] ;
29812: LD_ADDR_VAR 0 5
29816: PUSH
29817: LD_VAR 0 10
29821: PUSH
29822: LD_INT 1
29824: ARRAY
29825: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29826: LD_ADDR_VAR 0 10
29830: PUSH
29831: LD_VAR 0 10
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 3
29843: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 5
29853: PPUSH
29854: CALL 30163 0 2
29858: PUSH
29859: LD_VAR 0 10
29863: PUSH
29864: EMPTY
29865: EQUAL
29866: OR
29867: IFFALSE 29812
// result := [ ] ;
29869: LD_ADDR_VAR 0 6
29873: PUSH
29874: EMPTY
29875: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29876: LD_VAR 0 1
29880: PPUSH
29881: LD_VAR 0 2
29885: PPUSH
29886: LD_VAR 0 3
29890: PPUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL_OW 448
29905: IFFALSE 29938
// result := [ chassis , engine , control , weapon ] ;
29907: LD_ADDR_VAR 0 6
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_VAR 0 3
29921: PUSH
29922: LD_VAR 0 4
29926: PUSH
29927: LD_VAR 0 5
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// end ;
29938: LD_VAR 0 6
29942: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29943: LD_INT 0
29945: PPUSH
// if not chassis or not engine then
29946: LD_VAR 0 1
29950: NOT
29951: PUSH
29952: LD_VAR 0 2
29956: NOT
29957: OR
29958: IFFALSE 29962
// exit ;
29960: GO 30158
// case engine of engine_solar :
29962: LD_VAR 0 2
29966: PUSH
29967: LD_INT 2
29969: DOUBLE
29970: EQUAL
29971: IFTRUE 29975
29973: GO 30013
29975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29976: LD_ADDR_VAR 0 3
29980: PUSH
29981: LD_INT 11
29983: PUSH
29984: LD_INT 12
29986: PUSH
29987: LD_INT 13
29989: PUSH
29990: LD_INT 14
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
30011: GO 30142
30013: LD_INT 1
30015: DOUBLE
30016: EQUAL
30017: IFTRUE 30021
30019: GO 30083
30021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_INT 11
30029: PUSH
30030: LD_INT 12
30032: PUSH
30033: LD_INT 13
30035: PUSH
30036: LD_INT 14
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: LD_INT 4
30050: PUSH
30051: LD_INT 5
30053: PUSH
30054: LD_INT 21
30056: PUSH
30057: LD_INT 23
30059: PUSH
30060: LD_INT 22
30062: PUSH
30063: LD_INT 24
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: ST_TO_ADDR
30081: GO 30142
30083: LD_INT 3
30085: DOUBLE
30086: EQUAL
30087: IFTRUE 30091
30089: GO 30141
30091: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30092: LD_ADDR_VAR 0 3
30096: PUSH
30097: LD_INT 13
30099: PUSH
30100: LD_INT 14
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: LD_INT 4
30111: PUSH
30112: LD_INT 5
30114: PUSH
30115: LD_INT 21
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_INT 23
30123: PUSH
30124: LD_INT 24
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
30139: GO 30142
30141: POP
// result := ( chassis in result ) ;
30142: LD_ADDR_VAR 0 3
30146: PUSH
30147: LD_VAR 0 1
30151: PUSH
30152: LD_VAR 0 3
30156: IN
30157: ST_TO_ADDR
// end ;
30158: LD_VAR 0 3
30162: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30163: LD_INT 0
30165: PPUSH
// if not chassis or not weapon then
30166: LD_VAR 0 1
30170: NOT
30171: PUSH
30172: LD_VAR 0 2
30176: NOT
30177: OR
30178: IFFALSE 30182
// exit ;
30180: GO 31242
// case weapon of us_machine_gun :
30182: LD_VAR 0 2
30186: PUSH
30187: LD_INT 2
30189: DOUBLE
30190: EQUAL
30191: IFTRUE 30195
30193: GO 30225
30195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30196: LD_ADDR_VAR 0 3
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: LD_INT 4
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: ST_TO_ADDR
30223: GO 31226
30225: LD_INT 3
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30263
30233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 4
30250: PUSH
30251: LD_INT 5
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: ST_TO_ADDR
30261: GO 31226
30263: LD_INT 11
30265: DOUBLE
30266: EQUAL
30267: IFTRUE 30271
30269: GO 30301
30271: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: LD_INT 4
30288: PUSH
30289: LD_INT 5
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
30299: GO 31226
30301: LD_INT 4
30303: DOUBLE
30304: EQUAL
30305: IFTRUE 30309
30307: GO 30335
30309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
30333: GO 31226
30335: LD_INT 5
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30343
30341: GO 30369
30343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30344: LD_ADDR_VAR 0 3
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: LD_INT 5
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
30367: GO 31226
30369: LD_INT 9
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30377
30375: GO 30403
30377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
30401: GO 31226
30403: LD_INT 7
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 30437
30411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30412: LD_ADDR_VAR 0 3
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 31226
30437: LD_INT 12
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30471
30445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 4
30459: PUSH
30460: LD_INT 5
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: ST_TO_ADDR
30469: GO 31226
30471: LD_INT 13
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30505
30479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30480: LD_ADDR_VAR 0 3
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 4
30493: PUSH
30494: LD_INT 5
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
30503: GO 31226
30505: LD_INT 14
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30531
30513: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30514: LD_ADDR_VAR 0 3
30518: PUSH
30519: LD_INT 4
30521: PUSH
30522: LD_INT 5
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: ST_TO_ADDR
30529: GO 31226
30531: LD_INT 6
30533: DOUBLE
30534: EQUAL
30535: IFTRUE 30539
30537: GO 30557
30539: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30540: LD_ADDR_VAR 0 3
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: LD_INT 5
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: ST_TO_ADDR
30555: GO 31226
30557: LD_INT 10
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30583
30565: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 4
30573: PUSH
30574: LD_INT 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: ST_TO_ADDR
30581: GO 31226
30583: LD_INT 22
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30617
30591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 11
30599: PUSH
30600: LD_INT 12
30602: PUSH
30603: LD_INT 13
30605: PUSH
30606: LD_INT 14
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
30615: GO 31226
30617: LD_INT 23
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30651
30625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 11
30633: PUSH
30634: LD_INT 12
30636: PUSH
30637: LD_INT 13
30639: PUSH
30640: LD_INT 14
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 31226
30651: LD_INT 24
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30685
30659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 11
30667: PUSH
30668: LD_INT 12
30670: PUSH
30671: LD_INT 13
30673: PUSH
30674: LD_INT 14
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 31226
30685: LD_INT 30
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30719
30693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 11
30701: PUSH
30702: LD_INT 12
30704: PUSH
30705: LD_INT 13
30707: PUSH
30708: LD_INT 14
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
30717: GO 31226
30719: LD_INT 25
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30745
30727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_INT 13
30735: PUSH
30736: LD_INT 14
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: ST_TO_ADDR
30743: GO 31226
30745: LD_INT 27
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30753
30751: GO 30771
30753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30754: LD_ADDR_VAR 0 3
30758: PUSH
30759: LD_INT 13
30761: PUSH
30762: LD_INT 14
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: ST_TO_ADDR
30769: GO 31226
30771: LD_INT 92
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30805
30779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 11
30787: PUSH
30788: LD_INT 12
30790: PUSH
30791: LD_INT 13
30793: PUSH
30794: LD_INT 14
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 31226
30805: LD_INT 28
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30831
30813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 13
30821: PUSH
30822: LD_INT 14
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: ST_TO_ADDR
30829: GO 31226
30831: LD_INT 29
30833: DOUBLE
30834: EQUAL
30835: IFTRUE 30839
30837: GO 30857
30839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30840: LD_ADDR_VAR 0 3
30844: PUSH
30845: LD_INT 13
30847: PUSH
30848: LD_INT 14
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: ST_TO_ADDR
30855: GO 31226
30857: LD_INT 31
30859: DOUBLE
30860: EQUAL
30861: IFTRUE 30865
30863: GO 30883
30865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30866: LD_ADDR_VAR 0 3
30870: PUSH
30871: LD_INT 13
30873: PUSH
30874: LD_INT 14
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: ST_TO_ADDR
30881: GO 31226
30883: LD_INT 26
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30909
30891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 13
30899: PUSH
30900: LD_INT 14
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: ST_TO_ADDR
30907: GO 31226
30909: LD_INT 42
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30943
30917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 22
30928: PUSH
30929: LD_INT 23
30931: PUSH
30932: LD_INT 24
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
30941: GO 31226
30943: LD_INT 43
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30951
30949: GO 30977
30951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30952: LD_ADDR_VAR 0 3
30956: PUSH
30957: LD_INT 21
30959: PUSH
30960: LD_INT 22
30962: PUSH
30963: LD_INT 23
30965: PUSH
30966: LD_INT 24
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: ST_TO_ADDR
30975: GO 31226
30977: LD_INT 44
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31011
30985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 21
30993: PUSH
30994: LD_INT 22
30996: PUSH
30997: LD_INT 23
30999: PUSH
31000: LD_INT 24
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: ST_TO_ADDR
31009: GO 31226
31011: LD_INT 45
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31045
31019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_INT 21
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_INT 23
31033: PUSH
31034: LD_INT 24
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: ST_TO_ADDR
31043: GO 31226
31045: LD_INT 49
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31079
31053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_INT 21
31061: PUSH
31062: LD_INT 22
31064: PUSH
31065: LD_INT 23
31067: PUSH
31068: LD_INT 24
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
31077: GO 31226
31079: LD_INT 51
31081: DOUBLE
31082: EQUAL
31083: IFTRUE 31087
31085: GO 31113
31087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31088: LD_ADDR_VAR 0 3
31092: PUSH
31093: LD_INT 21
31095: PUSH
31096: LD_INT 22
31098: PUSH
31099: LD_INT 23
31101: PUSH
31102: LD_INT 24
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
31111: GO 31226
31113: LD_INT 52
31115: DOUBLE
31116: EQUAL
31117: IFTRUE 31121
31119: GO 31147
31121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_INT 21
31129: PUSH
31130: LD_INT 22
31132: PUSH
31133: LD_INT 23
31135: PUSH
31136: LD_INT 24
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
31145: GO 31226
31147: LD_INT 53
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31173
31155: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 23
31163: PUSH
31164: LD_INT 24
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: ST_TO_ADDR
31171: GO 31226
31173: LD_INT 46
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31181
31179: GO 31199
31181: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31182: LD_ADDR_VAR 0 3
31186: PUSH
31187: LD_INT 23
31189: PUSH
31190: LD_INT 24
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: ST_TO_ADDR
31197: GO 31226
31199: LD_INT 47
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31225
31207: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_INT 23
31215: PUSH
31216: LD_INT 24
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: ST_TO_ADDR
31223: GO 31226
31225: POP
// result := ( chassis in result ) ;
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_VAR 0 1
31235: PUSH
31236: LD_VAR 0 3
31240: IN
31241: ST_TO_ADDR
// end ;
31242: LD_VAR 0 3
31246: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
// result := array ;
31256: LD_ADDR_VAR 0 5
31260: PUSH
31261: LD_VAR 0 1
31265: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31266: LD_VAR 0 1
31270: NOT
31271: PUSH
31272: LD_VAR 0 2
31276: NOT
31277: OR
31278: PUSH
31279: LD_VAR 0 3
31283: NOT
31284: OR
31285: PUSH
31286: LD_VAR 0 2
31290: PUSH
31291: LD_VAR 0 1
31295: GREATER
31296: OR
31297: PUSH
31298: LD_VAR 0 3
31302: PUSH
31303: LD_VAR 0 1
31307: GREATER
31308: OR
31309: IFFALSE 31313
// exit ;
31311: GO 31609
// if direction then
31313: LD_VAR 0 4
31317: IFFALSE 31381
// begin d := 1 ;
31319: LD_ADDR_VAR 0 9
31323: PUSH
31324: LD_INT 1
31326: ST_TO_ADDR
// if i_from > i_to then
31327: LD_VAR 0 2
31331: PUSH
31332: LD_VAR 0 3
31336: GREATER
31337: IFFALSE 31363
// length := ( array - i_from ) + i_to else
31339: LD_ADDR_VAR 0 11
31343: PUSH
31344: LD_VAR 0 1
31348: PUSH
31349: LD_VAR 0 2
31353: MINUS
31354: PUSH
31355: LD_VAR 0 3
31359: PLUS
31360: ST_TO_ADDR
31361: GO 31379
// length := i_to - i_from ;
31363: LD_ADDR_VAR 0 11
31367: PUSH
31368: LD_VAR 0 3
31372: PUSH
31373: LD_VAR 0 2
31377: MINUS
31378: ST_TO_ADDR
// end else
31379: GO 31442
// begin d := - 1 ;
31381: LD_ADDR_VAR 0 9
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: ST_TO_ADDR
// if i_from > i_to then
31390: LD_VAR 0 2
31394: PUSH
31395: LD_VAR 0 3
31399: GREATER
31400: IFFALSE 31420
// length := i_from - i_to else
31402: LD_ADDR_VAR 0 11
31406: PUSH
31407: LD_VAR 0 2
31411: PUSH
31412: LD_VAR 0 3
31416: MINUS
31417: ST_TO_ADDR
31418: GO 31442
// length := ( array - i_to ) + i_from ;
31420: LD_ADDR_VAR 0 11
31424: PUSH
31425: LD_VAR 0 1
31429: PUSH
31430: LD_VAR 0 3
31434: MINUS
31435: PUSH
31436: LD_VAR 0 2
31440: PLUS
31441: ST_TO_ADDR
// end ; if not length then
31442: LD_VAR 0 11
31446: NOT
31447: IFFALSE 31451
// exit ;
31449: GO 31609
// tmp := array ;
31451: LD_ADDR_VAR 0 10
31455: PUSH
31456: LD_VAR 0 1
31460: ST_TO_ADDR
// for i = 1 to length do
31461: LD_ADDR_VAR 0 6
31465: PUSH
31466: DOUBLE
31467: LD_INT 1
31469: DEC
31470: ST_TO_ADDR
31471: LD_VAR 0 11
31475: PUSH
31476: FOR_TO
31477: IFFALSE 31597
// begin for j = 1 to array do
31479: LD_ADDR_VAR 0 7
31483: PUSH
31484: DOUBLE
31485: LD_INT 1
31487: DEC
31488: ST_TO_ADDR
31489: LD_VAR 0 1
31493: PUSH
31494: FOR_TO
31495: IFFALSE 31583
// begin k := j + d ;
31497: LD_ADDR_VAR 0 8
31501: PUSH
31502: LD_VAR 0 7
31506: PUSH
31507: LD_VAR 0 9
31511: PLUS
31512: ST_TO_ADDR
// if k > array then
31513: LD_VAR 0 8
31517: PUSH
31518: LD_VAR 0 1
31522: GREATER
31523: IFFALSE 31533
// k := 1 ;
31525: LD_ADDR_VAR 0 8
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
// if not k then
31533: LD_VAR 0 8
31537: NOT
31538: IFFALSE 31550
// k := array ;
31540: LD_ADDR_VAR 0 8
31544: PUSH
31545: LD_VAR 0 1
31549: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31550: LD_ADDR_VAR 0 10
31554: PUSH
31555: LD_VAR 0 10
31559: PPUSH
31560: LD_VAR 0 8
31564: PPUSH
31565: LD_VAR 0 1
31569: PUSH
31570: LD_VAR 0 7
31574: ARRAY
31575: PPUSH
31576: CALL_OW 1
31580: ST_TO_ADDR
// end ;
31581: GO 31494
31583: POP
31584: POP
// array := tmp ;
31585: LD_ADDR_VAR 0 1
31589: PUSH
31590: LD_VAR 0 10
31594: ST_TO_ADDR
// end ;
31595: GO 31476
31597: POP
31598: POP
// result := array ;
31599: LD_ADDR_VAR 0 5
31603: PUSH
31604: LD_VAR 0 1
31608: ST_TO_ADDR
// end ;
31609: LD_VAR 0 5
31613: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
// result := 0 ;
31618: LD_ADDR_VAR 0 3
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// if not array or not value in array then
31626: LD_VAR 0 1
31630: NOT
31631: PUSH
31632: LD_VAR 0 2
31636: PUSH
31637: LD_VAR 0 1
31641: IN
31642: NOT
31643: OR
31644: IFFALSE 31648
// exit ;
31646: GO 31702
// for i = 1 to array do
31648: LD_ADDR_VAR 0 4
31652: PUSH
31653: DOUBLE
31654: LD_INT 1
31656: DEC
31657: ST_TO_ADDR
31658: LD_VAR 0 1
31662: PUSH
31663: FOR_TO
31664: IFFALSE 31700
// if value = array [ i ] then
31666: LD_VAR 0 2
31670: PUSH
31671: LD_VAR 0 1
31675: PUSH
31676: LD_VAR 0 4
31680: ARRAY
31681: EQUAL
31682: IFFALSE 31698
// begin result := i ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_VAR 0 4
31693: ST_TO_ADDR
// exit ;
31694: POP
31695: POP
31696: GO 31702
// end ;
31698: GO 31663
31700: POP
31701: POP
// end ;
31702: LD_VAR 0 3
31706: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31707: LD_INT 0
31709: PPUSH
// vc_chassis := chassis ;
31710: LD_ADDR_OWVAR 37
31714: PUSH
31715: LD_VAR 0 1
31719: ST_TO_ADDR
// vc_engine := engine ;
31720: LD_ADDR_OWVAR 39
31724: PUSH
31725: LD_VAR 0 2
31729: ST_TO_ADDR
// vc_control := control ;
31730: LD_ADDR_OWVAR 38
31734: PUSH
31735: LD_VAR 0 3
31739: ST_TO_ADDR
// vc_weapon := weapon ;
31740: LD_ADDR_OWVAR 40
31744: PUSH
31745: LD_VAR 0 4
31749: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31750: LD_ADDR_OWVAR 41
31754: PUSH
31755: LD_VAR 0 5
31759: ST_TO_ADDR
// end ;
31760: LD_VAR 0 6
31764: RET
// export function WantPlant ( unit ) ; var task ; begin
31765: LD_INT 0
31767: PPUSH
31768: PPUSH
// result := false ;
31769: LD_ADDR_VAR 0 2
31773: PUSH
31774: LD_INT 0
31776: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_VAR 0 1
31786: PPUSH
31787: CALL_OW 437
31791: ST_TO_ADDR
// if task then
31792: LD_VAR 0 3
31796: IFFALSE 31824
// if task [ 1 ] [ 1 ] = p then
31798: LD_VAR 0 3
31802: PUSH
31803: LD_INT 1
31805: ARRAY
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PUSH
31811: LD_STRING p
31813: EQUAL
31814: IFFALSE 31824
// result := true ;
31816: LD_ADDR_VAR 0 2
31820: PUSH
31821: LD_INT 1
31823: ST_TO_ADDR
// end ;
31824: LD_VAR 0 2
31828: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31829: LD_INT 0
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
// if pos < 1 then
31835: LD_VAR 0 2
31839: PUSH
31840: LD_INT 1
31842: LESS
31843: IFFALSE 31847
// exit ;
31845: GO 32150
// if pos = 1 then
31847: LD_VAR 0 2
31851: PUSH
31852: LD_INT 1
31854: EQUAL
31855: IFFALSE 31888
// result := Replace ( arr , pos [ 1 ] , value ) else
31857: LD_ADDR_VAR 0 4
31861: PUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 1
31874: ARRAY
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 1
31885: ST_TO_ADDR
31886: GO 32150
// begin tmp := arr ;
31888: LD_ADDR_VAR 0 6
31892: PUSH
31893: LD_VAR 0 1
31897: ST_TO_ADDR
// s_arr := [ tmp ] ;
31898: LD_ADDR_VAR 0 7
31902: PUSH
31903: LD_VAR 0 6
31907: PUSH
31908: EMPTY
31909: LIST
31910: ST_TO_ADDR
// for i = 1 to pos - 1 do
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: DOUBLE
31917: LD_INT 1
31919: DEC
31920: ST_TO_ADDR
31921: LD_VAR 0 2
31925: PUSH
31926: LD_INT 1
31928: MINUS
31929: PUSH
31930: FOR_TO
31931: IFFALSE 31976
// begin tmp := tmp [ pos [ i ] ] ;
31933: LD_ADDR_VAR 0 6
31937: PUSH
31938: LD_VAR 0 6
31942: PUSH
31943: LD_VAR 0 2
31947: PUSH
31948: LD_VAR 0 5
31952: ARRAY
31953: ARRAY
31954: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31955: LD_ADDR_VAR 0 7
31959: PUSH
31960: LD_VAR 0 7
31964: PUSH
31965: LD_VAR 0 6
31969: PUSH
31970: EMPTY
31971: LIST
31972: ADD
31973: ST_TO_ADDR
// end ;
31974: GO 31930
31976: POP
31977: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31978: LD_ADDR_VAR 0 6
31982: PUSH
31983: LD_VAR 0 6
31987: PPUSH
31988: LD_VAR 0 2
31992: PUSH
31993: LD_VAR 0 2
31997: ARRAY
31998: PPUSH
31999: LD_VAR 0 3
32003: PPUSH
32004: CALL_OW 1
32008: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32009: LD_ADDR_VAR 0 7
32013: PUSH
32014: LD_VAR 0 7
32018: PPUSH
32019: LD_VAR 0 7
32023: PPUSH
32024: LD_VAR 0 6
32028: PPUSH
32029: CALL_OW 1
32033: ST_TO_ADDR
// for i = s_arr downto 2 do
32034: LD_ADDR_VAR 0 5
32038: PUSH
32039: DOUBLE
32040: LD_VAR 0 7
32044: INC
32045: ST_TO_ADDR
32046: LD_INT 2
32048: PUSH
32049: FOR_DOWNTO
32050: IFFALSE 32134
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32052: LD_ADDR_VAR 0 6
32056: PUSH
32057: LD_VAR 0 7
32061: PUSH
32062: LD_VAR 0 5
32066: PUSH
32067: LD_INT 1
32069: MINUS
32070: ARRAY
32071: PPUSH
32072: LD_VAR 0 2
32076: PUSH
32077: LD_VAR 0 5
32081: PUSH
32082: LD_INT 1
32084: MINUS
32085: ARRAY
32086: PPUSH
32087: LD_VAR 0 7
32091: PUSH
32092: LD_VAR 0 5
32096: ARRAY
32097: PPUSH
32098: CALL_OW 1
32102: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32103: LD_ADDR_VAR 0 7
32107: PUSH
32108: LD_VAR 0 7
32112: PPUSH
32113: LD_VAR 0 5
32117: PUSH
32118: LD_INT 1
32120: MINUS
32121: PPUSH
32122: LD_VAR 0 6
32126: PPUSH
32127: CALL_OW 1
32131: ST_TO_ADDR
// end ;
32132: GO 32049
32134: POP
32135: POP
// result := s_arr [ 1 ] ;
32136: LD_ADDR_VAR 0 4
32140: PUSH
32141: LD_VAR 0 7
32145: PUSH
32146: LD_INT 1
32148: ARRAY
32149: ST_TO_ADDR
// end ; end ;
32150: LD_VAR 0 4
32154: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32155: LD_INT 0
32157: PPUSH
32158: PPUSH
// if not list then
32159: LD_VAR 0 1
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32259
// i := list [ pos1 ] ;
32168: LD_ADDR_VAR 0 5
32172: PUSH
32173: LD_VAR 0 1
32177: PUSH
32178: LD_VAR 0 2
32182: ARRAY
32183: ST_TO_ADDR
// if not i then
32184: LD_VAR 0 5
32188: NOT
32189: IFFALSE 32193
// exit ;
32191: GO 32259
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32193: LD_ADDR_VAR 0 1
32197: PUSH
32198: LD_VAR 0 1
32202: PPUSH
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_VAR 0 1
32212: PUSH
32213: LD_VAR 0 3
32217: ARRAY
32218: PPUSH
32219: CALL_OW 1
32223: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32224: LD_ADDR_VAR 0 1
32228: PUSH
32229: LD_VAR 0 1
32233: PPUSH
32234: LD_VAR 0 3
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: CALL_OW 1
32248: ST_TO_ADDR
// result := list ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 1
32258: ST_TO_ADDR
// end ;
32259: LD_VAR 0 4
32263: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32264: LD_INT 0
32266: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32267: LD_ADDR_VAR 0 5
32271: PUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 250
32281: PPUSH
32282: LD_VAR 0 1
32286: PPUSH
32287: CALL_OW 251
32291: PPUSH
32292: LD_VAR 0 2
32296: PPUSH
32297: LD_VAR 0 3
32301: PPUSH
32302: LD_VAR 0 4
32306: PPUSH
32307: CALL 32317 0 5
32311: ST_TO_ADDR
// end ;
32312: LD_VAR 0 5
32316: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32317: LD_INT 0
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
// if not list then
32323: LD_VAR 0 3
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32720
// result := [ ] ;
32332: LD_ADDR_VAR 0 6
32336: PUSH
32337: EMPTY
32338: ST_TO_ADDR
// for i in list do
32339: LD_ADDR_VAR 0 7
32343: PUSH
32344: LD_VAR 0 3
32348: PUSH
32349: FOR_IN
32350: IFFALSE 32552
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32352: LD_ADDR_VAR 0 9
32356: PUSH
32357: LD_VAR 0 7
32361: PPUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: LD_VAR 0 2
32371: PPUSH
32372: CALL_OW 297
32376: ST_TO_ADDR
// if not result then
32377: LD_VAR 0 6
32381: NOT
32382: IFFALSE 32408
// result := [ [ i , tmp ] ] else
32384: LD_ADDR_VAR 0 6
32388: PUSH
32389: LD_VAR 0 7
32393: PUSH
32394: LD_VAR 0 9
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: ST_TO_ADDR
32406: GO 32550
// begin if result [ result ] [ 2 ] < tmp then
32408: LD_VAR 0 6
32412: PUSH
32413: LD_VAR 0 6
32417: ARRAY
32418: PUSH
32419: LD_INT 2
32421: ARRAY
32422: PUSH
32423: LD_VAR 0 9
32427: LESS
32428: IFFALSE 32470
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32430: LD_ADDR_VAR 0 6
32434: PUSH
32435: LD_VAR 0 6
32439: PPUSH
32440: LD_VAR 0 6
32444: PUSH
32445: LD_INT 1
32447: PLUS
32448: PPUSH
32449: LD_VAR 0 7
32453: PUSH
32454: LD_VAR 0 9
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PPUSH
32463: CALL_OW 2
32467: ST_TO_ADDR
32468: GO 32550
// for j = 1 to result do
32470: LD_ADDR_VAR 0 8
32474: PUSH
32475: DOUBLE
32476: LD_INT 1
32478: DEC
32479: ST_TO_ADDR
32480: LD_VAR 0 6
32484: PUSH
32485: FOR_TO
32486: IFFALSE 32548
// begin if tmp < result [ j ] [ 2 ] then
32488: LD_VAR 0 9
32492: PUSH
32493: LD_VAR 0 6
32497: PUSH
32498: LD_VAR 0 8
32502: ARRAY
32503: PUSH
32504: LD_INT 2
32506: ARRAY
32507: LESS
32508: IFFALSE 32546
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32510: LD_ADDR_VAR 0 6
32514: PUSH
32515: LD_VAR 0 6
32519: PPUSH
32520: LD_VAR 0 8
32524: PPUSH
32525: LD_VAR 0 7
32529: PUSH
32530: LD_VAR 0 9
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PPUSH
32539: CALL_OW 2
32543: ST_TO_ADDR
// break ;
32544: GO 32548
// end ; end ;
32546: GO 32485
32548: POP
32549: POP
// end ; end ;
32550: GO 32349
32552: POP
32553: POP
// if result and not asc then
32554: LD_VAR 0 6
32558: PUSH
32559: LD_VAR 0 4
32563: NOT
32564: AND
32565: IFFALSE 32640
// begin tmp := result ;
32567: LD_ADDR_VAR 0 9
32571: PUSH
32572: LD_VAR 0 6
32576: ST_TO_ADDR
// for i = tmp downto 1 do
32577: LD_ADDR_VAR 0 7
32581: PUSH
32582: DOUBLE
32583: LD_VAR 0 9
32587: INC
32588: ST_TO_ADDR
32589: LD_INT 1
32591: PUSH
32592: FOR_DOWNTO
32593: IFFALSE 32638
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32595: LD_ADDR_VAR 0 6
32599: PUSH
32600: LD_VAR 0 6
32604: PPUSH
32605: LD_VAR 0 9
32609: PUSH
32610: LD_VAR 0 7
32614: MINUS
32615: PUSH
32616: LD_INT 1
32618: PLUS
32619: PPUSH
32620: LD_VAR 0 9
32624: PUSH
32625: LD_VAR 0 7
32629: ARRAY
32630: PPUSH
32631: CALL_OW 1
32635: ST_TO_ADDR
32636: GO 32592
32638: POP
32639: POP
// end ; tmp := [ ] ;
32640: LD_ADDR_VAR 0 9
32644: PUSH
32645: EMPTY
32646: ST_TO_ADDR
// if mode then
32647: LD_VAR 0 5
32651: IFFALSE 32720
// begin for i = 1 to result do
32653: LD_ADDR_VAR 0 7
32657: PUSH
32658: DOUBLE
32659: LD_INT 1
32661: DEC
32662: ST_TO_ADDR
32663: LD_VAR 0 6
32667: PUSH
32668: FOR_TO
32669: IFFALSE 32708
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32671: LD_ADDR_VAR 0 9
32675: PUSH
32676: LD_VAR 0 9
32680: PPUSH
32681: LD_VAR 0 7
32685: PPUSH
32686: LD_VAR 0 6
32690: PUSH
32691: LD_VAR 0 7
32695: ARRAY
32696: PUSH
32697: LD_INT 1
32699: ARRAY
32700: PPUSH
32701: CALL_OW 1
32705: ST_TO_ADDR
32706: GO 32668
32708: POP
32709: POP
// result := tmp ;
32710: LD_ADDR_VAR 0 6
32714: PUSH
32715: LD_VAR 0 9
32719: ST_TO_ADDR
// end ; end ;
32720: LD_VAR 0 6
32724: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if not x or not y then
32755: LD_VAR 0 2
32759: NOT
32760: PUSH
32761: LD_VAR 0 3
32765: NOT
32766: OR
32767: IFFALSE 32771
// exit ;
32769: GO 34421
// if not range then
32771: LD_VAR 0 4
32775: NOT
32776: IFFALSE 32786
// range := 10 ;
32778: LD_ADDR_VAR 0 4
32782: PUSH
32783: LD_INT 10
32785: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32786: LD_ADDR_VAR 0 8
32790: PUSH
32791: LD_INT 81
32793: PUSH
32794: LD_VAR 0 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 92
32805: PUSH
32806: LD_VAR 0 2
32810: PUSH
32811: LD_VAR 0 3
32815: PUSH
32816: LD_VAR 0 4
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 3
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: PPUSH
32849: CALL_OW 69
32853: ST_TO_ADDR
// if not tmp then
32854: LD_VAR 0 8
32858: NOT
32859: IFFALSE 32863
// exit ;
32861: GO 34421
// for i in tmp do
32863: LD_ADDR_VAR 0 6
32867: PUSH
32868: LD_VAR 0 8
32872: PUSH
32873: FOR_IN
32874: IFFALSE 34396
// begin points := [ 0 , 0 , 0 ] ;
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// bpoints := 1 ;
32895: LD_ADDR_VAR 0 10
32899: PUSH
32900: LD_INT 1
32902: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32903: LD_VAR 0 6
32907: PPUSH
32908: CALL_OW 247
32912: PUSH
32913: LD_INT 1
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 33499
32921: POP
// begin if GetClass ( i ) = 1 then
32922: LD_VAR 0 6
32926: PPUSH
32927: CALL_OW 257
32931: PUSH
32932: LD_INT 1
32934: EQUAL
32935: IFFALSE 32956
// points := [ 10 , 5 , 3 ] ;
32937: LD_ADDR_VAR 0 9
32941: PUSH
32942: LD_INT 10
32944: PUSH
32945: LD_INT 5
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32956: LD_VAR 0 6
32960: PPUSH
32961: CALL_OW 257
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 3
32971: PUSH
32972: LD_INT 4
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: IN
32980: IFFALSE 33001
// points := [ 3 , 2 , 1 ] ;
32982: LD_ADDR_VAR 0 9
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 257
33010: PUSH
33011: LD_INT 5
33013: EQUAL
33014: IFFALSE 33035
// points := [ 130 , 5 , 2 ] ;
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_INT 130
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33035: LD_VAR 0 6
33039: PPUSH
33040: CALL_OW 257
33044: PUSH
33045: LD_INT 8
33047: EQUAL
33048: IFFALSE 33069
// points := [ 35 , 35 , 30 ] ;
33050: LD_ADDR_VAR 0 9
33054: PUSH
33055: LD_INT 35
33057: PUSH
33058: LD_INT 35
33060: PUSH
33061: LD_INT 30
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33069: LD_VAR 0 6
33073: PPUSH
33074: CALL_OW 257
33078: PUSH
33079: LD_INT 9
33081: EQUAL
33082: IFFALSE 33103
// points := [ 20 , 55 , 40 ] ;
33084: LD_ADDR_VAR 0 9
33088: PUSH
33089: LD_INT 20
33091: PUSH
33092: LD_INT 55
33094: PUSH
33095: LD_INT 40
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33103: LD_VAR 0 6
33107: PPUSH
33108: CALL_OW 257
33112: PUSH
33113: LD_INT 12
33115: PUSH
33116: LD_INT 16
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: IN
33123: IFFALSE 33144
// points := [ 5 , 3 , 2 ] ;
33125: LD_ADDR_VAR 0 9
33129: PUSH
33130: LD_INT 5
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33144: LD_VAR 0 6
33148: PPUSH
33149: CALL_OW 257
33153: PUSH
33154: LD_INT 17
33156: EQUAL
33157: IFFALSE 33178
// points := [ 100 , 50 , 75 ] ;
33159: LD_ADDR_VAR 0 9
33163: PUSH
33164: LD_INT 100
33166: PUSH
33167: LD_INT 50
33169: PUSH
33170: LD_INT 75
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33178: LD_VAR 0 6
33182: PPUSH
33183: CALL_OW 257
33187: PUSH
33188: LD_INT 15
33190: EQUAL
33191: IFFALSE 33212
// points := [ 10 , 5 , 3 ] ;
33193: LD_ADDR_VAR 0 9
33197: PUSH
33198: LD_INT 10
33200: PUSH
33201: LD_INT 5
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33212: LD_VAR 0 6
33216: PPUSH
33217: CALL_OW 257
33221: PUSH
33222: LD_INT 14
33224: EQUAL
33225: IFFALSE 33246
// points := [ 10 , 0 , 0 ] ;
33227: LD_ADDR_VAR 0 9
33231: PUSH
33232: LD_INT 10
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33246: LD_VAR 0 6
33250: PPUSH
33251: CALL_OW 257
33255: PUSH
33256: LD_INT 11
33258: EQUAL
33259: IFFALSE 33280
// points := [ 30 , 10 , 5 ] ;
33261: LD_ADDR_VAR 0 9
33265: PUSH
33266: LD_INT 30
33268: PUSH
33269: LD_INT 10
33271: PUSH
33272: LD_INT 5
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_INT 5
33287: PPUSH
33288: CALL_OW 321
33292: PUSH
33293: LD_INT 2
33295: EQUAL
33296: IFFALSE 33313
// bpoints := bpoints * 1.8 ;
33298: LD_ADDR_VAR 0 10
33302: PUSH
33303: LD_VAR 0 10
33307: PUSH
33308: LD_REAL  1.80000000000000E+0000
33311: MUL
33312: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33313: LD_VAR 0 6
33317: PPUSH
33318: CALL_OW 257
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: IN
33341: PUSH
33342: LD_VAR 0 1
33346: PPUSH
33347: LD_INT 51
33349: PPUSH
33350: CALL_OW 321
33354: PUSH
33355: LD_INT 2
33357: EQUAL
33358: AND
33359: IFFALSE 33376
// bpoints := bpoints * 1.2 ;
33361: LD_ADDR_VAR 0 10
33365: PUSH
33366: LD_VAR 0 10
33370: PUSH
33371: LD_REAL  1.20000000000000E+0000
33374: MUL
33375: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33376: LD_VAR 0 6
33380: PPUSH
33381: CALL_OW 257
33385: PUSH
33386: LD_INT 5
33388: PUSH
33389: LD_INT 7
33391: PUSH
33392: LD_INT 9
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: IN
33400: PUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_INT 52
33408: PPUSH
33409: CALL_OW 321
33413: PUSH
33414: LD_INT 2
33416: EQUAL
33417: AND
33418: IFFALSE 33435
// bpoints := bpoints * 1.5 ;
33420: LD_ADDR_VAR 0 10
33424: PUSH
33425: LD_VAR 0 10
33429: PUSH
33430: LD_REAL  1.50000000000000E+0000
33433: MUL
33434: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33435: LD_VAR 0 1
33439: PPUSH
33440: LD_INT 66
33442: PPUSH
33443: CALL_OW 321
33447: PUSH
33448: LD_INT 2
33450: EQUAL
33451: IFFALSE 33468
// bpoints := bpoints * 1.1 ;
33453: LD_ADDR_VAR 0 10
33457: PUSH
33458: LD_VAR 0 10
33462: PUSH
33463: LD_REAL  1.10000000000000E+0000
33466: MUL
33467: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33468: LD_ADDR_VAR 0 10
33472: PUSH
33473: LD_VAR 0 10
33477: PUSH
33478: LD_VAR 0 6
33482: PPUSH
33483: LD_INT 1
33485: PPUSH
33486: CALL_OW 259
33490: PUSH
33491: LD_REAL  1.15000000000000E+0000
33494: MUL
33495: MUL
33496: ST_TO_ADDR
// end ; unit_vehicle :
33497: GO 34325
33499: LD_INT 2
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33507
33505: GO 34313
33507: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33508: LD_VAR 0 6
33512: PPUSH
33513: CALL_OW 264
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 42
33523: PUSH
33524: LD_INT 24
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: IN
33532: IFFALSE 33553
// points := [ 25 , 5 , 3 ] ;
33534: LD_ADDR_VAR 0 9
33538: PUSH
33539: LD_INT 25
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33553: LD_VAR 0 6
33557: PPUSH
33558: CALL_OW 264
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 43
33568: PUSH
33569: LD_INT 25
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: IN
33577: IFFALSE 33598
// points := [ 40 , 15 , 5 ] ;
33579: LD_ADDR_VAR 0 9
33583: PUSH
33584: LD_INT 40
33586: PUSH
33587: LD_INT 15
33589: PUSH
33590: LD_INT 5
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33598: LD_VAR 0 6
33602: PPUSH
33603: CALL_OW 264
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: LD_INT 23
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: IN
33618: IFFALSE 33639
// points := [ 7 , 25 , 8 ] ;
33620: LD_ADDR_VAR 0 9
33624: PUSH
33625: LD_INT 7
33627: PUSH
33628: LD_INT 25
33630: PUSH
33631: LD_INT 8
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33639: LD_VAR 0 6
33643: PPUSH
33644: CALL_OW 264
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: LD_INT 27
33654: PUSH
33655: LD_INT 44
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: IN
33663: IFFALSE 33684
// points := [ 14 , 50 , 16 ] ;
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_INT 14
33672: PUSH
33673: LD_INT 50
33675: PUSH
33676: LD_INT 16
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 264
33693: PUSH
33694: LD_INT 6
33696: PUSH
33697: LD_INT 46
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: IN
33704: IFFALSE 33725
// points := [ 32 , 120 , 70 ] ;
33706: LD_ADDR_VAR 0 9
33710: PUSH
33711: LD_INT 32
33713: PUSH
33714: LD_INT 120
33716: PUSH
33717: LD_INT 70
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33725: LD_VAR 0 6
33729: PPUSH
33730: CALL_OW 264
33734: PUSH
33735: LD_INT 7
33737: PUSH
33738: LD_INT 28
33740: PUSH
33741: LD_INT 45
33743: PUSH
33744: LD_INT 92
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: IN
33753: IFFALSE 33774
// points := [ 35 , 20 , 45 ] ;
33755: LD_ADDR_VAR 0 9
33759: PUSH
33760: LD_INT 35
33762: PUSH
33763: LD_INT 20
33765: PUSH
33766: LD_INT 45
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33774: LD_VAR 0 6
33778: PPUSH
33779: CALL_OW 264
33783: PUSH
33784: LD_INT 47
33786: PUSH
33787: EMPTY
33788: LIST
33789: IN
33790: IFFALSE 33811
// points := [ 67 , 45 , 75 ] ;
33792: LD_ADDR_VAR 0 9
33796: PUSH
33797: LD_INT 67
33799: PUSH
33800: LD_INT 45
33802: PUSH
33803: LD_INT 75
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33811: LD_VAR 0 6
33815: PPUSH
33816: CALL_OW 264
33820: PUSH
33821: LD_INT 26
33823: PUSH
33824: EMPTY
33825: LIST
33826: IN
33827: IFFALSE 33848
// points := [ 120 , 30 , 80 ] ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_INT 120
33836: PUSH
33837: LD_INT 30
33839: PUSH
33840: LD_INT 80
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 264
33857: PUSH
33858: LD_INT 22
33860: PUSH
33861: EMPTY
33862: LIST
33863: IN
33864: IFFALSE 33885
// points := [ 40 , 1 , 1 ] ;
33866: LD_ADDR_VAR 0 9
33870: PUSH
33871: LD_INT 40
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33885: LD_VAR 0 6
33889: PPUSH
33890: CALL_OW 264
33894: PUSH
33895: LD_INT 29
33897: PUSH
33898: EMPTY
33899: LIST
33900: IN
33901: IFFALSE 33922
// points := [ 70 , 200 , 400 ] ;
33903: LD_ADDR_VAR 0 9
33907: PUSH
33908: LD_INT 70
33910: PUSH
33911: LD_INT 200
33913: PUSH
33914: LD_INT 400
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33922: LD_VAR 0 6
33926: PPUSH
33927: CALL_OW 264
33931: PUSH
33932: LD_INT 14
33934: PUSH
33935: LD_INT 53
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: IN
33942: IFFALSE 33963
// points := [ 40 , 10 , 20 ] ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_INT 40
33951: PUSH
33952: LD_INT 10
33954: PUSH
33955: LD_INT 20
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33963: LD_VAR 0 6
33967: PPUSH
33968: CALL_OW 264
33972: PUSH
33973: LD_INT 9
33975: PUSH
33976: EMPTY
33977: LIST
33978: IN
33979: IFFALSE 34000
// points := [ 5 , 70 , 20 ] ;
33981: LD_ADDR_VAR 0 9
33985: PUSH
33986: LD_INT 5
33988: PUSH
33989: LD_INT 70
33991: PUSH
33992: LD_INT 20
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 264
34009: PUSH
34010: LD_INT 10
34012: PUSH
34013: EMPTY
34014: LIST
34015: IN
34016: IFFALSE 34037
// points := [ 35 , 110 , 70 ] ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_INT 35
34025: PUSH
34026: LD_INT 110
34028: PUSH
34029: LD_INT 70
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34037: LD_VAR 0 6
34041: PPUSH
34042: CALL_OW 265
34046: PUSH
34047: LD_INT 25
34049: EQUAL
34050: IFFALSE 34071
// points := [ 80 , 65 , 100 ] ;
34052: LD_ADDR_VAR 0 9
34056: PUSH
34057: LD_INT 80
34059: PUSH
34060: LD_INT 65
34062: PUSH
34063: LD_INT 100
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34071: LD_VAR 0 6
34075: PPUSH
34076: CALL_OW 263
34080: PUSH
34081: LD_INT 1
34083: EQUAL
34084: IFFALSE 34119
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34086: LD_ADDR_VAR 0 10
34090: PUSH
34091: LD_VAR 0 10
34095: PUSH
34096: LD_VAR 0 6
34100: PPUSH
34101: CALL_OW 311
34105: PPUSH
34106: LD_INT 3
34108: PPUSH
34109: CALL_OW 259
34113: PUSH
34114: LD_INT 4
34116: MUL
34117: MUL
34118: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34119: LD_VAR 0 6
34123: PPUSH
34124: CALL_OW 263
34128: PUSH
34129: LD_INT 2
34131: EQUAL
34132: IFFALSE 34183
// begin j := IsControledBy ( i ) ;
34134: LD_ADDR_VAR 0 7
34138: PUSH
34139: LD_VAR 0 6
34143: PPUSH
34144: CALL_OW 312
34148: ST_TO_ADDR
// if j then
34149: LD_VAR 0 7
34153: IFFALSE 34183
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34155: LD_ADDR_VAR 0 10
34159: PUSH
34160: LD_VAR 0 10
34164: PUSH
34165: LD_VAR 0 7
34169: PPUSH
34170: LD_INT 3
34172: PPUSH
34173: CALL_OW 259
34177: PUSH
34178: LD_INT 3
34180: MUL
34181: MUL
34182: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34183: LD_VAR 0 6
34187: PPUSH
34188: CALL_OW 264
34192: PUSH
34193: LD_INT 5
34195: PUSH
34196: LD_INT 6
34198: PUSH
34199: LD_INT 46
34201: PUSH
34202: LD_INT 44
34204: PUSH
34205: LD_INT 47
34207: PUSH
34208: LD_INT 45
34210: PUSH
34211: LD_INT 28
34213: PUSH
34214: LD_INT 7
34216: PUSH
34217: LD_INT 27
34219: PUSH
34220: LD_INT 29
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: IN
34235: PUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: LD_INT 52
34243: PPUSH
34244: CALL_OW 321
34248: PUSH
34249: LD_INT 2
34251: EQUAL
34252: AND
34253: IFFALSE 34270
// bpoints := bpoints * 1.2 ;
34255: LD_ADDR_VAR 0 10
34259: PUSH
34260: LD_VAR 0 10
34264: PUSH
34265: LD_REAL  1.20000000000000E+0000
34268: MUL
34269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34270: LD_VAR 0 6
34274: PPUSH
34275: CALL_OW 264
34279: PUSH
34280: LD_INT 6
34282: PUSH
34283: LD_INT 46
34285: PUSH
34286: LD_INT 47
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: IN
34294: IFFALSE 34311
// bpoints := bpoints * 1.2 ;
34296: LD_ADDR_VAR 0 10
34300: PUSH
34301: LD_VAR 0 10
34305: PUSH
34306: LD_REAL  1.20000000000000E+0000
34309: MUL
34310: ST_TO_ADDR
// end ; unit_building :
34311: GO 34325
34313: LD_INT 3
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34324
34321: POP
// ; end ;
34322: GO 34325
34324: POP
// for j = 1 to 3 do
34325: LD_ADDR_VAR 0 7
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_INT 3
34337: PUSH
34338: FOR_TO
34339: IFFALSE 34392
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34341: LD_ADDR_VAR 0 5
34345: PUSH
34346: LD_VAR 0 5
34350: PPUSH
34351: LD_VAR 0 7
34355: PPUSH
34356: LD_VAR 0 5
34360: PUSH
34361: LD_VAR 0 7
34365: ARRAY
34366: PUSH
34367: LD_VAR 0 9
34371: PUSH
34372: LD_VAR 0 7
34376: ARRAY
34377: PUSH
34378: LD_VAR 0 10
34382: MUL
34383: PLUS
34384: PPUSH
34385: CALL_OW 1
34389: ST_TO_ADDR
34390: GO 34338
34392: POP
34393: POP
// end ;
34394: GO 32873
34396: POP
34397: POP
// result := Replace ( result , 4 , tmp ) ;
34398: LD_ADDR_VAR 0 5
34402: PUSH
34403: LD_VAR 0 5
34407: PPUSH
34408: LD_INT 4
34410: PPUSH
34411: LD_VAR 0 8
34415: PPUSH
34416: CALL_OW 1
34420: ST_TO_ADDR
// end ;
34421: LD_VAR 0 5
34425: RET
// export function DangerAtRange ( unit , range ) ; begin
34426: LD_INT 0
34428: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 255
34443: PPUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 250
34453: PPUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 251
34463: PPUSH
34464: LD_VAR 0 2
34468: PPUSH
34469: CALL 32725 0 4
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 3
34478: RET
// export function DangerInArea ( side , area ) ; begin
34479: LD_INT 0
34481: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: LD_VAR 0 2
34491: PPUSH
34492: LD_INT 81
34494: PUSH
34495: LD_VAR 0 1
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PPUSH
34504: CALL_OW 70
34508: ST_TO_ADDR
// end ;
34509: LD_VAR 0 3
34513: RET
// export function IsExtension ( b ) ; begin
34514: LD_INT 0
34516: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34517: LD_ADDR_VAR 0 2
34521: PUSH
34522: LD_VAR 0 1
34526: PUSH
34527: LD_INT 23
34529: PUSH
34530: LD_INT 20
34532: PUSH
34533: LD_INT 22
34535: PUSH
34536: LD_INT 17
34538: PUSH
34539: LD_INT 24
34541: PUSH
34542: LD_INT 21
34544: PUSH
34545: LD_INT 19
34547: PUSH
34548: LD_INT 16
34550: PUSH
34551: LD_INT 25
34553: PUSH
34554: LD_INT 18
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: IN
34569: ST_TO_ADDR
// end ;
34570: LD_VAR 0 2
34574: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34575: LD_INT 0
34577: PPUSH
34578: PPUSH
34579: PPUSH
// result := [ ] ;
34580: LD_ADDR_VAR 0 4
34584: PUSH
34585: EMPTY
34586: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34587: LD_ADDR_VAR 0 5
34591: PUSH
34592: LD_VAR 0 2
34596: PPUSH
34597: LD_INT 21
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PPUSH
34607: CALL_OW 70
34611: ST_TO_ADDR
// if not tmp then
34612: LD_VAR 0 5
34616: NOT
34617: IFFALSE 34621
// exit ;
34619: GO 34685
// if checkLink then
34621: LD_VAR 0 3
34625: IFFALSE 34675
// begin for i in tmp do
34627: LD_ADDR_VAR 0 6
34631: PUSH
34632: LD_VAR 0 5
34636: PUSH
34637: FOR_IN
34638: IFFALSE 34673
// if GetBase ( i ) <> base then
34640: LD_VAR 0 6
34644: PPUSH
34645: CALL_OW 274
34649: PUSH
34650: LD_VAR 0 1
34654: NONEQUAL
34655: IFFALSE 34671
// ComLinkToBase ( base , i ) ;
34657: LD_VAR 0 1
34661: PPUSH
34662: LD_VAR 0 6
34666: PPUSH
34667: CALL_OW 169
34671: GO 34637
34673: POP
34674: POP
// end ; result := tmp ;
34675: LD_ADDR_VAR 0 4
34679: PUSH
34680: LD_VAR 0 5
34684: ST_TO_ADDR
// end ;
34685: LD_VAR 0 4
34689: RET
// export function ComComplete ( units , b ) ; var i ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
// if not units then
34694: LD_VAR 0 1
34698: NOT
34699: IFFALSE 34703
// exit ;
34701: GO 34793
// for i in units do
34703: LD_ADDR_VAR 0 4
34707: PUSH
34708: LD_VAR 0 1
34712: PUSH
34713: FOR_IN
34714: IFFALSE 34791
// if BuildingStatus ( b ) = bs_build then
34716: LD_VAR 0 2
34720: PPUSH
34721: CALL_OW 461
34725: PUSH
34726: LD_INT 1
34728: EQUAL
34729: IFFALSE 34789
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34731: LD_VAR 0 4
34735: PPUSH
34736: LD_STRING h
34738: PUSH
34739: LD_VAR 0 2
34743: PPUSH
34744: CALL_OW 250
34748: PUSH
34749: LD_VAR 0 2
34753: PPUSH
34754: CALL_OW 251
34758: PUSH
34759: LD_VAR 0 2
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: PPUSH
34785: CALL_OW 446
34789: GO 34713
34791: POP
34792: POP
// end ;
34793: LD_VAR 0 3
34797: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34798: LD_INT 0
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34806: LD_VAR 0 1
34810: NOT
34811: PUSH
34812: LD_VAR 0 1
34816: PPUSH
34817: CALL_OW 263
34821: PUSH
34822: LD_INT 2
34824: NONEQUAL
34825: OR
34826: IFFALSE 34830
// exit ;
34828: GO 35146
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34830: LD_ADDR_VAR 0 6
34834: PUSH
34835: LD_INT 22
34837: PUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 255
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 30
34857: PUSH
34858: LD_INT 36
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 34
34867: PUSH
34868: LD_INT 31
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 69
34888: ST_TO_ADDR
// if not tmp then
34889: LD_VAR 0 6
34893: NOT
34894: IFFALSE 34898
// exit ;
34896: GO 35146
// result := [ ] ;
34898: LD_ADDR_VAR 0 2
34902: PUSH
34903: EMPTY
34904: ST_TO_ADDR
// for i in tmp do
34905: LD_ADDR_VAR 0 3
34909: PUSH
34910: LD_VAR 0 6
34914: PUSH
34915: FOR_IN
34916: IFFALSE 34987
// begin t := UnitsInside ( i ) ;
34918: LD_ADDR_VAR 0 4
34922: PUSH
34923: LD_VAR 0 3
34927: PPUSH
34928: CALL_OW 313
34932: ST_TO_ADDR
// if t then
34933: LD_VAR 0 4
34937: IFFALSE 34985
// for j in t do
34939: LD_ADDR_VAR 0 7
34943: PUSH
34944: LD_VAR 0 4
34948: PUSH
34949: FOR_IN
34950: IFFALSE 34983
// result := Replace ( result , result + 1 , j ) ;
34952: LD_ADDR_VAR 0 2
34956: PUSH
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 2
34966: PUSH
34967: LD_INT 1
34969: PLUS
34970: PPUSH
34971: LD_VAR 0 7
34975: PPUSH
34976: CALL_OW 1
34980: ST_TO_ADDR
34981: GO 34949
34983: POP
34984: POP
// end ;
34985: GO 34915
34987: POP
34988: POP
// if not result then
34989: LD_VAR 0 2
34993: NOT
34994: IFFALSE 34998
// exit ;
34996: GO 35146
// mech := result [ 1 ] ;
34998: LD_ADDR_VAR 0 5
35002: PUSH
35003: LD_VAR 0 2
35007: PUSH
35008: LD_INT 1
35010: ARRAY
35011: ST_TO_ADDR
// if result > 1 then
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 1
35019: GREATER
35020: IFFALSE 35132
// begin for i = 2 to result do
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: DOUBLE
35028: LD_INT 2
35030: DEC
35031: ST_TO_ADDR
35032: LD_VAR 0 2
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35130
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35040: LD_ADDR_VAR 0 4
35044: PUSH
35045: LD_VAR 0 2
35049: PUSH
35050: LD_VAR 0 3
35054: ARRAY
35055: PPUSH
35056: LD_INT 3
35058: PPUSH
35059: CALL_OW 259
35063: PUSH
35064: LD_VAR 0 2
35068: PUSH
35069: LD_VAR 0 3
35073: ARRAY
35074: PPUSH
35075: CALL_OW 432
35079: MINUS
35080: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35081: LD_VAR 0 4
35085: PUSH
35086: LD_VAR 0 5
35090: PPUSH
35091: LD_INT 3
35093: PPUSH
35094: CALL_OW 259
35098: PUSH
35099: LD_VAR 0 5
35103: PPUSH
35104: CALL_OW 432
35108: MINUS
35109: GREATEREQUAL
35110: IFFALSE 35128
// mech := result [ i ] ;
35112: LD_ADDR_VAR 0 5
35116: PUSH
35117: LD_VAR 0 2
35121: PUSH
35122: LD_VAR 0 3
35126: ARRAY
35127: ST_TO_ADDR
// end ;
35128: GO 35037
35130: POP
35131: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35132: LD_VAR 0 1
35136: PPUSH
35137: LD_VAR 0 5
35141: PPUSH
35142: CALL_OW 135
// end ;
35146: LD_VAR 0 2
35150: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35151: LD_INT 0
35153: PPUSH
35154: PPUSH
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
// result := [ ] ;
35166: LD_ADDR_VAR 0 7
35170: PUSH
35171: EMPTY
35172: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 266
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: IN
35193: NOT
35194: IFFALSE 35198
// exit ;
35196: GO 36832
// if name then
35198: LD_VAR 0 3
35202: IFFALSE 35218
// SetBName ( base_dep , name ) ;
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_VAR 0 3
35213: PPUSH
35214: CALL_OW 500
// base := GetBase ( base_dep ) ;
35218: LD_ADDR_VAR 0 15
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 274
35232: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35233: LD_ADDR_VAR 0 16
35237: PUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 255
35247: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35248: LD_ADDR_VAR 0 17
35252: PUSH
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 248
35262: ST_TO_ADDR
// if sources then
35263: LD_VAR 0 5
35267: IFFALSE 35314
// for i = 1 to 3 do
35269: LD_ADDR_VAR 0 8
35273: PUSH
35274: DOUBLE
35275: LD_INT 1
35277: DEC
35278: ST_TO_ADDR
35279: LD_INT 3
35281: PUSH
35282: FOR_TO
35283: IFFALSE 35312
// AddResourceType ( base , i , sources [ i ] ) ;
35285: LD_VAR 0 15
35289: PPUSH
35290: LD_VAR 0 8
35294: PPUSH
35295: LD_VAR 0 5
35299: PUSH
35300: LD_VAR 0 8
35304: ARRAY
35305: PPUSH
35306: CALL_OW 276
35310: GO 35282
35312: POP
35313: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35314: LD_ADDR_VAR 0 18
35318: PUSH
35319: LD_VAR 0 15
35323: PPUSH
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_INT 1
35331: PPUSH
35332: CALL 34575 0 3
35336: ST_TO_ADDR
// InitHc ;
35337: CALL_OW 19
// InitUc ;
35341: CALL_OW 18
// uc_side := side ;
35345: LD_ADDR_OWVAR 20
35349: PUSH
35350: LD_VAR 0 16
35354: ST_TO_ADDR
// uc_nation := nation ;
35355: LD_ADDR_OWVAR 21
35359: PUSH
35360: LD_VAR 0 17
35364: ST_TO_ADDR
// if buildings then
35365: LD_VAR 0 18
35369: IFFALSE 36691
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35371: LD_ADDR_VAR 0 19
35375: PUSH
35376: LD_VAR 0 18
35380: PPUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 30
35386: PUSH
35387: LD_INT 29
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 30
35396: PUSH
35397: LD_INT 30
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: PPUSH
35409: CALL_OW 72
35413: ST_TO_ADDR
// if tmp then
35414: LD_VAR 0 19
35418: IFFALSE 35466
// for i in tmp do
35420: LD_ADDR_VAR 0 8
35424: PUSH
35425: LD_VAR 0 19
35429: PUSH
35430: FOR_IN
35431: IFFALSE 35464
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35433: LD_VAR 0 8
35437: PPUSH
35438: CALL_OW 250
35442: PPUSH
35443: LD_VAR 0 8
35447: PPUSH
35448: CALL_OW 251
35452: PPUSH
35453: LD_VAR 0 16
35457: PPUSH
35458: CALL_OW 441
35462: GO 35430
35464: POP
35465: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35466: LD_VAR 0 18
35470: PPUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 30
35476: PUSH
35477: LD_INT 32
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 30
35486: PUSH
35487: LD_INT 33
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: IFFALSE 35591
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35505: LD_ADDR_VAR 0 8
35509: PUSH
35510: LD_VAR 0 18
35514: PPUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 30
35520: PUSH
35521: LD_INT 32
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 30
35530: PUSH
35531: LD_INT 33
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: PPUSH
35543: CALL_OW 72
35547: PUSH
35548: FOR_IN
35549: IFFALSE 35589
// begin if not GetBWeapon ( i ) then
35551: LD_VAR 0 8
35555: PPUSH
35556: CALL_OW 269
35560: NOT
35561: IFFALSE 35587
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35563: LD_VAR 0 8
35567: PPUSH
35568: LD_VAR 0 8
35572: PPUSH
35573: LD_VAR 0 2
35577: PPUSH
35578: CALL 36837 0 2
35582: PPUSH
35583: CALL_OW 431
// end ;
35587: GO 35548
35589: POP
35590: POP
// end ; for i = 1 to personel do
35591: LD_ADDR_VAR 0 8
35595: PUSH
35596: DOUBLE
35597: LD_INT 1
35599: DEC
35600: ST_TO_ADDR
35601: LD_VAR 0 6
35605: PUSH
35606: FOR_TO
35607: IFFALSE 36671
// begin if i > 4 then
35609: LD_VAR 0 8
35613: PUSH
35614: LD_INT 4
35616: GREATER
35617: IFFALSE 35621
// break ;
35619: GO 36671
// case i of 1 :
35621: LD_VAR 0 8
35625: PUSH
35626: LD_INT 1
35628: DOUBLE
35629: EQUAL
35630: IFTRUE 35634
35632: GO 35714
35634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35635: LD_ADDR_VAR 0 12
35639: PUSH
35640: LD_VAR 0 18
35644: PPUSH
35645: LD_INT 22
35647: PUSH
35648: LD_VAR 0 16
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 58
35659: PUSH
35660: EMPTY
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 30
35668: PUSH
35669: LD_INT 32
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 30
35678: PUSH
35679: LD_INT 4
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 30
35688: PUSH
35689: LD_INT 5
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: PPUSH
35707: CALL_OW 72
35711: ST_TO_ADDR
35712: GO 35936
35714: LD_INT 2
35716: DOUBLE
35717: EQUAL
35718: IFTRUE 35722
35720: GO 35784
35722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35723: LD_ADDR_VAR 0 12
35727: PUSH
35728: LD_VAR 0 18
35732: PPUSH
35733: LD_INT 22
35735: PUSH
35736: LD_VAR 0 16
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 30
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 30
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 72
35781: ST_TO_ADDR
35782: GO 35936
35784: LD_INT 3
35786: DOUBLE
35787: EQUAL
35788: IFTRUE 35792
35790: GO 35854
35792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35793: LD_ADDR_VAR 0 12
35797: PUSH
35798: LD_VAR 0 18
35802: PPUSH
35803: LD_INT 22
35805: PUSH
35806: LD_VAR 0 16
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 30
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 30
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PPUSH
35847: CALL_OW 72
35851: ST_TO_ADDR
35852: GO 35936
35854: LD_INT 4
35856: DOUBLE
35857: EQUAL
35858: IFTRUE 35862
35860: GO 35935
35862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35863: LD_ADDR_VAR 0 12
35867: PUSH
35868: LD_VAR 0 18
35872: PPUSH
35873: LD_INT 22
35875: PUSH
35876: LD_VAR 0 16
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 30
35890: PUSH
35891: LD_INT 6
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 30
35900: PUSH
35901: LD_INT 7
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 30
35910: PUSH
35911: LD_INT 8
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PPUSH
35928: CALL_OW 72
35932: ST_TO_ADDR
35933: GO 35936
35935: POP
// if i = 1 then
35936: LD_VAR 0 8
35940: PUSH
35941: LD_INT 1
35943: EQUAL
35944: IFFALSE 36055
// begin tmp := [ ] ;
35946: LD_ADDR_VAR 0 19
35950: PUSH
35951: EMPTY
35952: ST_TO_ADDR
// for j in f do
35953: LD_ADDR_VAR 0 9
35957: PUSH
35958: LD_VAR 0 12
35962: PUSH
35963: FOR_IN
35964: IFFALSE 36037
// if GetBType ( j ) = b_bunker then
35966: LD_VAR 0 9
35970: PPUSH
35971: CALL_OW 266
35975: PUSH
35976: LD_INT 32
35978: EQUAL
35979: IFFALSE 36006
// tmp := Insert ( tmp , 1 , j ) else
35981: LD_ADDR_VAR 0 19
35985: PUSH
35986: LD_VAR 0 19
35990: PPUSH
35991: LD_INT 1
35993: PPUSH
35994: LD_VAR 0 9
35998: PPUSH
35999: CALL_OW 2
36003: ST_TO_ADDR
36004: GO 36035
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36006: LD_ADDR_VAR 0 19
36010: PUSH
36011: LD_VAR 0 19
36015: PPUSH
36016: LD_VAR 0 19
36020: PUSH
36021: LD_INT 1
36023: PLUS
36024: PPUSH
36025: LD_VAR 0 9
36029: PPUSH
36030: CALL_OW 2
36034: ST_TO_ADDR
36035: GO 35963
36037: POP
36038: POP
// if tmp then
36039: LD_VAR 0 19
36043: IFFALSE 36055
// f := tmp ;
36045: LD_ADDR_VAR 0 12
36049: PUSH
36050: LD_VAR 0 19
36054: ST_TO_ADDR
// end ; x := personel [ i ] ;
36055: LD_ADDR_VAR 0 13
36059: PUSH
36060: LD_VAR 0 6
36064: PUSH
36065: LD_VAR 0 8
36069: ARRAY
36070: ST_TO_ADDR
// if x = - 1 then
36071: LD_VAR 0 13
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: EQUAL
36080: IFFALSE 36289
// begin for j in f do
36082: LD_ADDR_VAR 0 9
36086: PUSH
36087: LD_VAR 0 12
36091: PUSH
36092: FOR_IN
36093: IFFALSE 36285
// repeat InitHc ;
36095: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36099: LD_VAR 0 9
36103: PPUSH
36104: CALL_OW 266
36108: PUSH
36109: LD_INT 5
36111: EQUAL
36112: IFFALSE 36182
// begin if UnitsInside ( j ) < 3 then
36114: LD_VAR 0 9
36118: PPUSH
36119: CALL_OW 313
36123: PUSH
36124: LD_INT 3
36126: LESS
36127: IFFALSE 36163
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36129: LD_INT 0
36131: PPUSH
36132: LD_INT 5
36134: PUSH
36135: LD_INT 8
36137: PUSH
36138: LD_INT 9
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: PUSH
36146: LD_VAR 0 17
36150: ARRAY
36151: PPUSH
36152: LD_VAR 0 4
36156: PPUSH
36157: CALL_OW 380
36161: GO 36180
// PrepareHuman ( false , i , skill ) ;
36163: LD_INT 0
36165: PPUSH
36166: LD_VAR 0 8
36170: PPUSH
36171: LD_VAR 0 4
36175: PPUSH
36176: CALL_OW 380
// end else
36180: GO 36199
// PrepareHuman ( false , i , skill ) ;
36182: LD_INT 0
36184: PPUSH
36185: LD_VAR 0 8
36189: PPUSH
36190: LD_VAR 0 4
36194: PPUSH
36195: CALL_OW 380
// un := CreateHuman ;
36199: LD_ADDR_VAR 0 14
36203: PUSH
36204: CALL_OW 44
36208: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36209: LD_ADDR_VAR 0 7
36213: PUSH
36214: LD_VAR 0 7
36218: PPUSH
36219: LD_INT 1
36221: PPUSH
36222: LD_VAR 0 14
36226: PPUSH
36227: CALL_OW 2
36231: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36232: LD_VAR 0 14
36236: PPUSH
36237: LD_VAR 0 9
36241: PPUSH
36242: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36246: LD_VAR 0 9
36250: PPUSH
36251: CALL_OW 313
36255: PUSH
36256: LD_INT 6
36258: EQUAL
36259: PUSH
36260: LD_VAR 0 9
36264: PPUSH
36265: CALL_OW 266
36269: PUSH
36270: LD_INT 32
36272: PUSH
36273: LD_INT 31
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: IN
36280: OR
36281: IFFALSE 36095
36283: GO 36092
36285: POP
36286: POP
// end else
36287: GO 36669
// for j = 1 to x do
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: DOUBLE
36295: LD_INT 1
36297: DEC
36298: ST_TO_ADDR
36299: LD_VAR 0 13
36303: PUSH
36304: FOR_TO
36305: IFFALSE 36667
// begin InitHc ;
36307: CALL_OW 19
// if not f then
36311: LD_VAR 0 12
36315: NOT
36316: IFFALSE 36405
// begin PrepareHuman ( false , i , skill ) ;
36318: LD_INT 0
36320: PPUSH
36321: LD_VAR 0 8
36325: PPUSH
36326: LD_VAR 0 4
36330: PPUSH
36331: CALL_OW 380
// un := CreateHuman ;
36335: LD_ADDR_VAR 0 14
36339: PUSH
36340: CALL_OW 44
36344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36345: LD_ADDR_VAR 0 7
36349: PUSH
36350: LD_VAR 0 7
36354: PPUSH
36355: LD_INT 1
36357: PPUSH
36358: LD_VAR 0 14
36362: PPUSH
36363: CALL_OW 2
36367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36368: LD_VAR 0 14
36372: PPUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 250
36382: PPUSH
36383: LD_VAR 0 1
36387: PPUSH
36388: CALL_OW 251
36392: PPUSH
36393: LD_INT 10
36395: PPUSH
36396: LD_INT 0
36398: PPUSH
36399: CALL_OW 50
// continue ;
36403: GO 36304
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36405: LD_VAR 0 12
36409: PUSH
36410: LD_INT 1
36412: ARRAY
36413: PPUSH
36414: CALL_OW 313
36418: PUSH
36419: LD_VAR 0 12
36423: PUSH
36424: LD_INT 1
36426: ARRAY
36427: PPUSH
36428: CALL_OW 266
36432: PUSH
36433: LD_INT 32
36435: PUSH
36436: LD_INT 31
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: IN
36443: AND
36444: PUSH
36445: LD_VAR 0 12
36449: PUSH
36450: LD_INT 1
36452: ARRAY
36453: PPUSH
36454: CALL_OW 313
36458: PUSH
36459: LD_INT 6
36461: EQUAL
36462: OR
36463: IFFALSE 36483
// f := Delete ( f , 1 ) ;
36465: LD_ADDR_VAR 0 12
36469: PUSH
36470: LD_VAR 0 12
36474: PPUSH
36475: LD_INT 1
36477: PPUSH
36478: CALL_OW 3
36482: ST_TO_ADDR
// if not f then
36483: LD_VAR 0 12
36487: NOT
36488: IFFALSE 36506
// begin x := x + 2 ;
36490: LD_ADDR_VAR 0 13
36494: PUSH
36495: LD_VAR 0 13
36499: PUSH
36500: LD_INT 2
36502: PLUS
36503: ST_TO_ADDR
// continue ;
36504: GO 36304
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36506: LD_VAR 0 12
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PPUSH
36515: CALL_OW 266
36519: PUSH
36520: LD_INT 5
36522: EQUAL
36523: IFFALSE 36597
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36525: LD_VAR 0 12
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: PPUSH
36534: CALL_OW 313
36538: PUSH
36539: LD_INT 3
36541: LESS
36542: IFFALSE 36578
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36544: LD_INT 0
36546: PPUSH
36547: LD_INT 5
36549: PUSH
36550: LD_INT 8
36552: PUSH
36553: LD_INT 9
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: PUSH
36561: LD_VAR 0 17
36565: ARRAY
36566: PPUSH
36567: LD_VAR 0 4
36571: PPUSH
36572: CALL_OW 380
36576: GO 36595
// PrepareHuman ( false , i , skill ) ;
36578: LD_INT 0
36580: PPUSH
36581: LD_VAR 0 8
36585: PPUSH
36586: LD_VAR 0 4
36590: PPUSH
36591: CALL_OW 380
// end else
36595: GO 36614
// PrepareHuman ( false , i , skill ) ;
36597: LD_INT 0
36599: PPUSH
36600: LD_VAR 0 8
36604: PPUSH
36605: LD_VAR 0 4
36609: PPUSH
36610: CALL_OW 380
// un := CreateHuman ;
36614: LD_ADDR_VAR 0 14
36618: PUSH
36619: CALL_OW 44
36623: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36624: LD_ADDR_VAR 0 7
36628: PUSH
36629: LD_VAR 0 7
36633: PPUSH
36634: LD_INT 1
36636: PPUSH
36637: LD_VAR 0 14
36641: PPUSH
36642: CALL_OW 2
36646: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36647: LD_VAR 0 14
36651: PPUSH
36652: LD_VAR 0 12
36656: PUSH
36657: LD_INT 1
36659: ARRAY
36660: PPUSH
36661: CALL_OW 52
// end ;
36665: GO 36304
36667: POP
36668: POP
// end ;
36669: GO 35606
36671: POP
36672: POP
// result := result ^ buildings ;
36673: LD_ADDR_VAR 0 7
36677: PUSH
36678: LD_VAR 0 7
36682: PUSH
36683: LD_VAR 0 18
36687: ADD
36688: ST_TO_ADDR
// end else
36689: GO 36832
// begin for i = 1 to personel do
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: DOUBLE
36697: LD_INT 1
36699: DEC
36700: ST_TO_ADDR
36701: LD_VAR 0 6
36705: PUSH
36706: FOR_TO
36707: IFFALSE 36830
// begin if i > 4 then
36709: LD_VAR 0 8
36713: PUSH
36714: LD_INT 4
36716: GREATER
36717: IFFALSE 36721
// break ;
36719: GO 36830
// x := personel [ i ] ;
36721: LD_ADDR_VAR 0 13
36725: PUSH
36726: LD_VAR 0 6
36730: PUSH
36731: LD_VAR 0 8
36735: ARRAY
36736: ST_TO_ADDR
// if x = - 1 then
36737: LD_VAR 0 13
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: EQUAL
36746: IFFALSE 36750
// continue ;
36748: GO 36706
// PrepareHuman ( false , i , skill ) ;
36750: LD_INT 0
36752: PPUSH
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_VAR 0 4
36762: PPUSH
36763: CALL_OW 380
// un := CreateHuman ;
36767: LD_ADDR_VAR 0 14
36771: PUSH
36772: CALL_OW 44
36776: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36777: LD_VAR 0 14
36781: PPUSH
36782: LD_VAR 0 1
36786: PPUSH
36787: CALL_OW 250
36791: PPUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 251
36801: PPUSH
36802: LD_INT 10
36804: PPUSH
36805: LD_INT 0
36807: PPUSH
36808: CALL_OW 50
// result := result ^ un ;
36812: LD_ADDR_VAR 0 7
36816: PUSH
36817: LD_VAR 0 7
36821: PUSH
36822: LD_VAR 0 14
36826: ADD
36827: ST_TO_ADDR
// end ;
36828: GO 36706
36830: POP
36831: POP
// end ; end ;
36832: LD_VAR 0 7
36836: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36837: LD_INT 0
36839: PPUSH
36840: PPUSH
36841: PPUSH
36842: PPUSH
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
// result := false ;
36855: LD_ADDR_VAR 0 3
36859: PUSH
36860: LD_INT 0
36862: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36863: LD_VAR 0 1
36867: NOT
36868: PUSH
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 266
36878: PUSH
36879: LD_INT 32
36881: PUSH
36882: LD_INT 33
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: IN
36889: NOT
36890: OR
36891: IFFALSE 36895
// exit ;
36893: GO 38004
// nat := GetNation ( tower ) ;
36895: LD_ADDR_VAR 0 12
36899: PUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 248
36909: ST_TO_ADDR
// side := GetSide ( tower ) ;
36910: LD_ADDR_VAR 0 16
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 255
36924: ST_TO_ADDR
// x := GetX ( tower ) ;
36925: LD_ADDR_VAR 0 10
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 250
36939: ST_TO_ADDR
// y := GetY ( tower ) ;
36940: LD_ADDR_VAR 0 11
36944: PUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 251
36954: ST_TO_ADDR
// if not x or not y then
36955: LD_VAR 0 10
36959: NOT
36960: PUSH
36961: LD_VAR 0 11
36965: NOT
36966: OR
36967: IFFALSE 36971
// exit ;
36969: GO 38004
// weapon := 0 ;
36971: LD_ADDR_VAR 0 18
36975: PUSH
36976: LD_INT 0
36978: ST_TO_ADDR
// fac_list := [ ] ;
36979: LD_ADDR_VAR 0 17
36983: PUSH
36984: EMPTY
36985: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36986: LD_ADDR_VAR 0 6
36990: PUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL_OW 274
37000: PPUSH
37001: LD_VAR 0 2
37005: PPUSH
37006: LD_INT 0
37008: PPUSH
37009: CALL 34575 0 3
37013: PPUSH
37014: LD_INT 30
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PPUSH
37024: CALL_OW 72
37028: ST_TO_ADDR
// if not factories then
37029: LD_VAR 0 6
37033: NOT
37034: IFFALSE 37038
// exit ;
37036: GO 38004
// for i in factories do
37038: LD_ADDR_VAR 0 8
37042: PUSH
37043: LD_VAR 0 6
37047: PUSH
37048: FOR_IN
37049: IFFALSE 37074
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37051: LD_ADDR_VAR 0 17
37055: PUSH
37056: LD_VAR 0 17
37060: PUSH
37061: LD_VAR 0 8
37065: PPUSH
37066: CALL_OW 478
37070: UNION
37071: ST_TO_ADDR
37072: GO 37048
37074: POP
37075: POP
// if not fac_list then
37076: LD_VAR 0 17
37080: NOT
37081: IFFALSE 37085
// exit ;
37083: GO 38004
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37085: LD_ADDR_VAR 0 5
37089: PUSH
37090: LD_INT 4
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: LD_INT 9
37098: PUSH
37099: LD_INT 10
37101: PUSH
37102: LD_INT 6
37104: PUSH
37105: LD_INT 7
37107: PUSH
37108: LD_INT 11
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 27
37122: PUSH
37123: LD_INT 28
37125: PUSH
37126: LD_INT 26
37128: PUSH
37129: LD_INT 30
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 43
37140: PUSH
37141: LD_INT 44
37143: PUSH
37144: LD_INT 46
37146: PUSH
37147: LD_INT 45
37149: PUSH
37150: LD_INT 47
37152: PUSH
37153: LD_INT 49
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: LD_VAR 0 12
37173: ARRAY
37174: ST_TO_ADDR
// list := list isect fac_list ;
37175: LD_ADDR_VAR 0 5
37179: PUSH
37180: LD_VAR 0 5
37184: PUSH
37185: LD_VAR 0 17
37189: ISECT
37190: ST_TO_ADDR
// if not list then
37191: LD_VAR 0 5
37195: NOT
37196: IFFALSE 37200
// exit ;
37198: GO 38004
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37200: LD_VAR 0 12
37204: PUSH
37205: LD_INT 3
37207: EQUAL
37208: PUSH
37209: LD_INT 49
37211: PUSH
37212: LD_VAR 0 5
37216: IN
37217: AND
37218: PUSH
37219: LD_INT 31
37221: PPUSH
37222: LD_VAR 0 16
37226: PPUSH
37227: CALL_OW 321
37231: PUSH
37232: LD_INT 2
37234: EQUAL
37235: AND
37236: IFFALSE 37296
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37238: LD_INT 22
37240: PUSH
37241: LD_VAR 0 16
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 35
37252: PUSH
37253: LD_INT 49
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 91
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_INT 10
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 69
37285: NOT
37286: IFFALSE 37296
// weapon := ru_time_lapser ;
37288: LD_ADDR_VAR 0 18
37292: PUSH
37293: LD_INT 49
37295: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37296: LD_VAR 0 12
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: IN
37311: PUSH
37312: LD_INT 11
37314: PUSH
37315: LD_VAR 0 5
37319: IN
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_VAR 0 5
37328: IN
37329: OR
37330: AND
37331: PUSH
37332: LD_INT 6
37334: PPUSH
37335: LD_VAR 0 16
37339: PPUSH
37340: CALL_OW 321
37344: PUSH
37345: LD_INT 2
37347: EQUAL
37348: AND
37349: IFFALSE 37514
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37351: LD_INT 22
37353: PUSH
37354: LD_VAR 0 16
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: LD_INT 35
37368: PUSH
37369: LD_INT 11
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 35
37378: PUSH
37379: LD_INT 30
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 91
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: LD_INT 18
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: PPUSH
37412: CALL_OW 69
37416: NOT
37417: PUSH
37418: LD_INT 22
37420: PUSH
37421: LD_VAR 0 16
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 30
37435: PUSH
37436: LD_INT 32
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: LD_INT 33
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 91
37460: PUSH
37461: LD_VAR 0 1
37465: PUSH
37466: LD_INT 12
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: PPUSH
37482: CALL_OW 69
37486: PUSH
37487: LD_INT 2
37489: GREATER
37490: AND
37491: IFFALSE 37514
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37493: LD_ADDR_VAR 0 18
37497: PUSH
37498: LD_INT 11
37500: PUSH
37501: LD_INT 30
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_VAR 0 12
37512: ARRAY
37513: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37514: LD_VAR 0 18
37518: NOT
37519: PUSH
37520: LD_INT 40
37522: PPUSH
37523: LD_VAR 0 16
37527: PPUSH
37528: CALL_OW 321
37532: PUSH
37533: LD_INT 2
37535: EQUAL
37536: AND
37537: PUSH
37538: LD_INT 7
37540: PUSH
37541: LD_VAR 0 5
37545: IN
37546: PUSH
37547: LD_INT 28
37549: PUSH
37550: LD_VAR 0 5
37554: IN
37555: OR
37556: PUSH
37557: LD_INT 45
37559: PUSH
37560: LD_VAR 0 5
37564: IN
37565: OR
37566: AND
37567: IFFALSE 37821
// begin hex := GetHexInfo ( x , y ) ;
37569: LD_ADDR_VAR 0 4
37573: PUSH
37574: LD_VAR 0 10
37578: PPUSH
37579: LD_VAR 0 11
37583: PPUSH
37584: CALL_OW 546
37588: ST_TO_ADDR
// if hex [ 1 ] then
37589: LD_VAR 0 4
37593: PUSH
37594: LD_INT 1
37596: ARRAY
37597: IFFALSE 37601
// exit ;
37599: GO 38004
// height := hex [ 2 ] ;
37601: LD_ADDR_VAR 0 15
37605: PUSH
37606: LD_VAR 0 4
37610: PUSH
37611: LD_INT 2
37613: ARRAY
37614: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37615: LD_ADDR_VAR 0 14
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: LD_INT 5
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// for i in tmp do
37638: LD_ADDR_VAR 0 8
37642: PUSH
37643: LD_VAR 0 14
37647: PUSH
37648: FOR_IN
37649: IFFALSE 37819
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_VAR 0 10
37660: PPUSH
37661: LD_VAR 0 8
37665: PPUSH
37666: LD_INT 5
37668: PPUSH
37669: CALL_OW 272
37673: PUSH
37674: LD_VAR 0 11
37678: PPUSH
37679: LD_VAR 0 8
37683: PPUSH
37684: LD_INT 5
37686: PPUSH
37687: CALL_OW 273
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37696: LD_VAR 0 9
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: PPUSH
37705: LD_VAR 0 9
37709: PUSH
37710: LD_INT 2
37712: ARRAY
37713: PPUSH
37714: CALL_OW 488
37718: IFFALSE 37817
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37720: LD_ADDR_VAR 0 4
37724: PUSH
37725: LD_VAR 0 9
37729: PUSH
37730: LD_INT 1
37732: ARRAY
37733: PPUSH
37734: LD_VAR 0 9
37738: PUSH
37739: LD_INT 2
37741: ARRAY
37742: PPUSH
37743: CALL_OW 546
37747: ST_TO_ADDR
// if hex [ 1 ] then
37748: LD_VAR 0 4
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: IFFALSE 37760
// continue ;
37758: GO 37648
// h := hex [ 2 ] ;
37760: LD_ADDR_VAR 0 13
37764: PUSH
37765: LD_VAR 0 4
37769: PUSH
37770: LD_INT 2
37772: ARRAY
37773: ST_TO_ADDR
// if h + 7 < height then
37774: LD_VAR 0 13
37778: PUSH
37779: LD_INT 7
37781: PLUS
37782: PUSH
37783: LD_VAR 0 15
37787: LESS
37788: IFFALSE 37817
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37790: LD_ADDR_VAR 0 18
37794: PUSH
37795: LD_INT 7
37797: PUSH
37798: LD_INT 28
37800: PUSH
37801: LD_INT 45
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: PUSH
37809: LD_VAR 0 12
37813: ARRAY
37814: ST_TO_ADDR
// break ;
37815: GO 37819
// end ; end ; end ;
37817: GO 37648
37819: POP
37820: POP
// end ; if not weapon then
37821: LD_VAR 0 18
37825: NOT
37826: IFFALSE 37886
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37828: LD_ADDR_VAR 0 5
37832: PUSH
37833: LD_VAR 0 5
37837: PUSH
37838: LD_INT 11
37840: PUSH
37841: LD_INT 30
37843: PUSH
37844: LD_INT 49
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: DIFF
37852: ST_TO_ADDR
// if not list then
37853: LD_VAR 0 5
37857: NOT
37858: IFFALSE 37862
// exit ;
37860: GO 38004
// weapon := list [ rand ( 1 , list ) ] ;
37862: LD_ADDR_VAR 0 18
37866: PUSH
37867: LD_VAR 0 5
37871: PUSH
37872: LD_INT 1
37874: PPUSH
37875: LD_VAR 0 5
37879: PPUSH
37880: CALL_OW 12
37884: ARRAY
37885: ST_TO_ADDR
// end ; if weapon then
37886: LD_VAR 0 18
37890: IFFALSE 38004
// begin tmp := CostOfWeapon ( weapon ) ;
37892: LD_ADDR_VAR 0 14
37896: PUSH
37897: LD_VAR 0 18
37901: PPUSH
37902: CALL_OW 451
37906: ST_TO_ADDR
// j := GetBase ( tower ) ;
37907: LD_ADDR_VAR 0 9
37911: PUSH
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 274
37921: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37922: LD_VAR 0 9
37926: PPUSH
37927: LD_INT 1
37929: PPUSH
37930: CALL_OW 275
37934: PUSH
37935: LD_VAR 0 14
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: GREATEREQUAL
37944: PUSH
37945: LD_VAR 0 9
37949: PPUSH
37950: LD_INT 2
37952: PPUSH
37953: CALL_OW 275
37957: PUSH
37958: LD_VAR 0 14
37962: PUSH
37963: LD_INT 2
37965: ARRAY
37966: GREATEREQUAL
37967: AND
37968: PUSH
37969: LD_VAR 0 9
37973: PPUSH
37974: LD_INT 3
37976: PPUSH
37977: CALL_OW 275
37981: PUSH
37982: LD_VAR 0 14
37986: PUSH
37987: LD_INT 3
37989: ARRAY
37990: GREATEREQUAL
37991: AND
37992: IFFALSE 38004
// result := weapon ;
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_VAR 0 18
38003: ST_TO_ADDR
// end ; end ;
38004: LD_VAR 0 3
38008: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38009: LD_INT 0
38011: PPUSH
38012: PPUSH
// result := true ;
38013: LD_ADDR_VAR 0 3
38017: PUSH
38018: LD_INT 1
38020: ST_TO_ADDR
// if array1 = array2 then
38021: LD_VAR 0 1
38025: PUSH
38026: LD_VAR 0 2
38030: EQUAL
38031: IFFALSE 38091
// begin for i = 1 to array1 do
38033: LD_ADDR_VAR 0 4
38037: PUSH
38038: DOUBLE
38039: LD_INT 1
38041: DEC
38042: ST_TO_ADDR
38043: LD_VAR 0 1
38047: PUSH
38048: FOR_TO
38049: IFFALSE 38087
// if array1 [ i ] <> array2 [ i ] then
38051: LD_VAR 0 1
38055: PUSH
38056: LD_VAR 0 4
38060: ARRAY
38061: PUSH
38062: LD_VAR 0 2
38066: PUSH
38067: LD_VAR 0 4
38071: ARRAY
38072: NONEQUAL
38073: IFFALSE 38085
// begin result := false ;
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_INT 0
38082: ST_TO_ADDR
// break ;
38083: GO 38087
// end ;
38085: GO 38048
38087: POP
38088: POP
// end else
38089: GO 38099
// result := false ;
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_INT 0
38098: ST_TO_ADDR
// end ;
38099: LD_VAR 0 3
38103: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38104: LD_INT 0
38106: PPUSH
38107: PPUSH
// if not array1 or not array2 then
38108: LD_VAR 0 1
38112: NOT
38113: PUSH
38114: LD_VAR 0 2
38118: NOT
38119: OR
38120: IFFALSE 38124
// exit ;
38122: GO 38188
// result := true ;
38124: LD_ADDR_VAR 0 3
38128: PUSH
38129: LD_INT 1
38131: ST_TO_ADDR
// for i = 1 to array1 do
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: DOUBLE
38138: LD_INT 1
38140: DEC
38141: ST_TO_ADDR
38142: LD_VAR 0 1
38146: PUSH
38147: FOR_TO
38148: IFFALSE 38186
// if array1 [ i ] <> array2 [ i ] then
38150: LD_VAR 0 1
38154: PUSH
38155: LD_VAR 0 4
38159: ARRAY
38160: PUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_VAR 0 4
38170: ARRAY
38171: NONEQUAL
38172: IFFALSE 38184
// begin result := false ;
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// break ;
38182: GO 38186
// end ;
38184: GO 38147
38186: POP
38187: POP
// end ;
38188: LD_VAR 0 3
38192: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38193: LD_INT 0
38195: PPUSH
38196: PPUSH
38197: PPUSH
// pom := GetBase ( fac ) ;
38198: LD_ADDR_VAR 0 5
38202: PUSH
38203: LD_VAR 0 1
38207: PPUSH
38208: CALL_OW 274
38212: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38213: LD_ADDR_VAR 0 4
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_INT 1
38225: ARRAY
38226: PPUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_INT 2
38234: ARRAY
38235: PPUSH
38236: LD_VAR 0 2
38240: PUSH
38241: LD_INT 3
38243: ARRAY
38244: PPUSH
38245: LD_VAR 0 2
38249: PUSH
38250: LD_INT 4
38252: ARRAY
38253: PPUSH
38254: CALL_OW 449
38258: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38259: LD_ADDR_VAR 0 3
38263: PUSH
38264: LD_VAR 0 5
38268: PPUSH
38269: LD_INT 1
38271: PPUSH
38272: CALL_OW 275
38276: PUSH
38277: LD_VAR 0 4
38281: PUSH
38282: LD_INT 1
38284: ARRAY
38285: GREATEREQUAL
38286: PUSH
38287: LD_VAR 0 5
38291: PPUSH
38292: LD_INT 2
38294: PPUSH
38295: CALL_OW 275
38299: PUSH
38300: LD_VAR 0 4
38304: PUSH
38305: LD_INT 2
38307: ARRAY
38308: GREATEREQUAL
38309: AND
38310: PUSH
38311: LD_VAR 0 5
38315: PPUSH
38316: LD_INT 3
38318: PPUSH
38319: CALL_OW 275
38323: PUSH
38324: LD_VAR 0 4
38328: PUSH
38329: LD_INT 3
38331: ARRAY
38332: GREATEREQUAL
38333: AND
38334: ST_TO_ADDR
// end ;
38335: LD_VAR 0 3
38339: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38340: LD_INT 0
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
// pom := GetBase ( building ) ;
38346: LD_ADDR_VAR 0 3
38350: PUSH
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 274
38360: ST_TO_ADDR
// if not pom then
38361: LD_VAR 0 3
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38540
// btype := GetBType ( building ) ;
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 266
38384: ST_TO_ADDR
// if btype = b_armoury then
38385: LD_VAR 0 5
38389: PUSH
38390: LD_INT 4
38392: EQUAL
38393: IFFALSE 38403
// btype := b_barracks ;
38395: LD_ADDR_VAR 0 5
38399: PUSH
38400: LD_INT 5
38402: ST_TO_ADDR
// if btype = b_depot then
38403: LD_VAR 0 5
38407: PUSH
38408: LD_INT 0
38410: EQUAL
38411: IFFALSE 38421
// btype := b_warehouse ;
38413: LD_ADDR_VAR 0 5
38417: PUSH
38418: LD_INT 1
38420: ST_TO_ADDR
// if btype = b_workshop then
38421: LD_VAR 0 5
38425: PUSH
38426: LD_INT 2
38428: EQUAL
38429: IFFALSE 38439
// btype := b_factory ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_INT 3
38438: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38439: LD_ADDR_VAR 0 4
38443: PUSH
38444: LD_VAR 0 5
38448: PPUSH
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 248
38458: PPUSH
38459: CALL_OW 450
38463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38464: LD_ADDR_VAR 0 2
38468: PUSH
38469: LD_VAR 0 3
38473: PPUSH
38474: LD_INT 1
38476: PPUSH
38477: CALL_OW 275
38481: PUSH
38482: LD_VAR 0 4
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: GREATEREQUAL
38491: PUSH
38492: LD_VAR 0 3
38496: PPUSH
38497: LD_INT 2
38499: PPUSH
38500: CALL_OW 275
38504: PUSH
38505: LD_VAR 0 4
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: GREATEREQUAL
38514: AND
38515: PUSH
38516: LD_VAR 0 3
38520: PPUSH
38521: LD_INT 3
38523: PPUSH
38524: CALL_OW 275
38528: PUSH
38529: LD_VAR 0 4
38533: PUSH
38534: LD_INT 3
38536: ARRAY
38537: GREATEREQUAL
38538: AND
38539: ST_TO_ADDR
// end ;
38540: LD_VAR 0 2
38544: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38545: LD_INT 0
38547: PPUSH
38548: PPUSH
38549: PPUSH
// pom := GetBase ( building ) ;
38550: LD_ADDR_VAR 0 4
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL_OW 274
38564: ST_TO_ADDR
// if not pom then
38565: LD_VAR 0 4
38569: NOT
38570: IFFALSE 38574
// exit ;
38572: GO 38675
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 1
38588: PPUSH
38589: CALL_OW 248
38593: PPUSH
38594: CALL_OW 450
38598: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38599: LD_ADDR_VAR 0 3
38603: PUSH
38604: LD_VAR 0 4
38608: PPUSH
38609: LD_INT 1
38611: PPUSH
38612: CALL_OW 275
38616: PUSH
38617: LD_VAR 0 5
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: GREATEREQUAL
38626: PUSH
38627: LD_VAR 0 4
38631: PPUSH
38632: LD_INT 2
38634: PPUSH
38635: CALL_OW 275
38639: PUSH
38640: LD_VAR 0 5
38644: PUSH
38645: LD_INT 2
38647: ARRAY
38648: GREATEREQUAL
38649: AND
38650: PUSH
38651: LD_VAR 0 4
38655: PPUSH
38656: LD_INT 3
38658: PPUSH
38659: CALL_OW 275
38663: PUSH
38664: LD_VAR 0 5
38668: PUSH
38669: LD_INT 3
38671: ARRAY
38672: GREATEREQUAL
38673: AND
38674: ST_TO_ADDR
// end ;
38675: LD_VAR 0 3
38679: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38680: LD_INT 0
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
// result := false ;
38693: LD_ADDR_VAR 0 8
38697: PUSH
38698: LD_INT 0
38700: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38701: LD_VAR 0 5
38705: NOT
38706: PUSH
38707: LD_VAR 0 1
38711: NOT
38712: OR
38713: PUSH
38714: LD_VAR 0 2
38718: NOT
38719: OR
38720: PUSH
38721: LD_VAR 0 3
38725: NOT
38726: OR
38727: IFFALSE 38731
// exit ;
38729: GO 39545
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38731: LD_ADDR_VAR 0 14
38735: PUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_VAR 0 2
38745: PPUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: LD_VAR 0 4
38755: PPUSH
38756: LD_VAR 0 5
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PPUSH
38765: CALL_OW 248
38769: PPUSH
38770: LD_INT 0
38772: PPUSH
38773: CALL 40778 0 6
38777: ST_TO_ADDR
// if not hexes then
38778: LD_VAR 0 14
38782: NOT
38783: IFFALSE 38787
// exit ;
38785: GO 39545
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38787: LD_ADDR_VAR 0 17
38791: PUSH
38792: LD_VAR 0 5
38796: PPUSH
38797: LD_INT 22
38799: PUSH
38800: LD_VAR 0 13
38804: PPUSH
38805: CALL_OW 255
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 30
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 30
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 72
38850: ST_TO_ADDR
// for i = 1 to hexes do
38851: LD_ADDR_VAR 0 9
38855: PUSH
38856: DOUBLE
38857: LD_INT 1
38859: DEC
38860: ST_TO_ADDR
38861: LD_VAR 0 14
38865: PUSH
38866: FOR_TO
38867: IFFALSE 39543
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38869: LD_ADDR_VAR 0 13
38873: PUSH
38874: LD_VAR 0 14
38878: PUSH
38879: LD_VAR 0 9
38883: ARRAY
38884: PUSH
38885: LD_INT 1
38887: ARRAY
38888: PPUSH
38889: LD_VAR 0 14
38893: PUSH
38894: LD_VAR 0 9
38898: ARRAY
38899: PUSH
38900: LD_INT 2
38902: ARRAY
38903: PPUSH
38904: CALL_OW 428
38908: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38909: LD_VAR 0 14
38913: PUSH
38914: LD_VAR 0 9
38918: ARRAY
38919: PUSH
38920: LD_INT 1
38922: ARRAY
38923: PPUSH
38924: LD_VAR 0 14
38928: PUSH
38929: LD_VAR 0 9
38933: ARRAY
38934: PUSH
38935: LD_INT 2
38937: ARRAY
38938: PPUSH
38939: CALL_OW 351
38943: PUSH
38944: LD_VAR 0 14
38948: PUSH
38949: LD_VAR 0 9
38953: ARRAY
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PPUSH
38959: LD_VAR 0 14
38963: PUSH
38964: LD_VAR 0 9
38968: ARRAY
38969: PUSH
38970: LD_INT 2
38972: ARRAY
38973: PPUSH
38974: CALL_OW 488
38978: NOT
38979: OR
38980: PUSH
38981: LD_VAR 0 13
38985: PPUSH
38986: CALL_OW 247
38990: PUSH
38991: LD_INT 3
38993: EQUAL
38994: OR
38995: IFFALSE 39001
// exit ;
38997: POP
38998: POP
38999: GO 39545
// if not tmp then
39001: LD_VAR 0 13
39005: NOT
39006: IFFALSE 39010
// continue ;
39008: GO 38866
// result := true ;
39010: LD_ADDR_VAR 0 8
39014: PUSH
39015: LD_INT 1
39017: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39018: LD_VAR 0 6
39022: PUSH
39023: LD_VAR 0 13
39027: PPUSH
39028: CALL_OW 247
39032: PUSH
39033: LD_INT 2
39035: EQUAL
39036: AND
39037: PUSH
39038: LD_VAR 0 13
39042: PPUSH
39043: CALL_OW 263
39047: PUSH
39048: LD_INT 1
39050: EQUAL
39051: AND
39052: IFFALSE 39216
// begin if IsDrivenBy ( tmp ) then
39054: LD_VAR 0 13
39058: PPUSH
39059: CALL_OW 311
39063: IFFALSE 39067
// continue ;
39065: GO 38866
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39067: LD_VAR 0 6
39071: PPUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 60
39077: PUSH
39078: EMPTY
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: LD_INT 55
39090: PUSH
39091: EMPTY
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PPUSH
39102: CALL_OW 72
39106: IFFALSE 39214
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39108: LD_ADDR_VAR 0 18
39112: PUSH
39113: LD_VAR 0 6
39117: PPUSH
39118: LD_INT 3
39120: PUSH
39121: LD_INT 60
39123: PUSH
39124: EMPTY
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: LD_INT 55
39136: PUSH
39137: EMPTY
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PPUSH
39148: CALL_OW 72
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: ST_TO_ADDR
// if IsInUnit ( driver ) then
39157: LD_VAR 0 18
39161: PPUSH
39162: CALL_OW 310
39166: IFFALSE 39177
// ComExit ( driver ) ;
39168: LD_VAR 0 18
39172: PPUSH
39173: CALL 64539 0 1
// AddComEnterUnit ( driver , tmp ) ;
39177: LD_VAR 0 18
39181: PPUSH
39182: LD_VAR 0 13
39186: PPUSH
39187: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39191: LD_VAR 0 18
39195: PPUSH
39196: LD_VAR 0 7
39200: PPUSH
39201: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39205: LD_VAR 0 18
39209: PPUSH
39210: CALL_OW 181
// end ; continue ;
39214: GO 38866
// end ; if not cleaners or not tmp in cleaners then
39216: LD_VAR 0 6
39220: NOT
39221: PUSH
39222: LD_VAR 0 13
39226: PUSH
39227: LD_VAR 0 6
39231: IN
39232: NOT
39233: OR
39234: IFFALSE 39541
// begin if dep then
39236: LD_VAR 0 17
39240: IFFALSE 39376
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39242: LD_ADDR_VAR 0 16
39246: PUSH
39247: LD_VAR 0 17
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: PPUSH
39256: CALL_OW 250
39260: PPUSH
39261: LD_VAR 0 17
39265: PUSH
39266: LD_INT 1
39268: ARRAY
39269: PPUSH
39270: CALL_OW 254
39274: PPUSH
39275: LD_INT 5
39277: PPUSH
39278: CALL_OW 272
39282: PUSH
39283: LD_VAR 0 17
39287: PUSH
39288: LD_INT 1
39290: ARRAY
39291: PPUSH
39292: CALL_OW 251
39296: PPUSH
39297: LD_VAR 0 17
39301: PUSH
39302: LD_INT 1
39304: ARRAY
39305: PPUSH
39306: CALL_OW 254
39310: PPUSH
39311: LD_INT 5
39313: PPUSH
39314: CALL_OW 273
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39323: LD_VAR 0 16
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PPUSH
39332: LD_VAR 0 16
39336: PUSH
39337: LD_INT 2
39339: ARRAY
39340: PPUSH
39341: CALL_OW 488
39345: IFFALSE 39376
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39347: LD_VAR 0 13
39351: PPUSH
39352: LD_VAR 0 16
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: PPUSH
39361: LD_VAR 0 16
39365: PUSH
39366: LD_INT 2
39368: ARRAY
39369: PPUSH
39370: CALL_OW 111
// continue ;
39374: GO 38866
// end ; end ; r := GetDir ( tmp ) ;
39376: LD_ADDR_VAR 0 15
39380: PUSH
39381: LD_VAR 0 13
39385: PPUSH
39386: CALL_OW 254
39390: ST_TO_ADDR
// if r = 5 then
39391: LD_VAR 0 15
39395: PUSH
39396: LD_INT 5
39398: EQUAL
39399: IFFALSE 39409
// r := 0 ;
39401: LD_ADDR_VAR 0 15
39405: PUSH
39406: LD_INT 0
39408: ST_TO_ADDR
// for j = r to 5 do
39409: LD_ADDR_VAR 0 10
39413: PUSH
39414: DOUBLE
39415: LD_VAR 0 15
39419: DEC
39420: ST_TO_ADDR
39421: LD_INT 5
39423: PUSH
39424: FOR_TO
39425: IFFALSE 39539
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39427: LD_ADDR_VAR 0 11
39431: PUSH
39432: LD_VAR 0 13
39436: PPUSH
39437: CALL_OW 250
39441: PPUSH
39442: LD_VAR 0 10
39446: PPUSH
39447: LD_INT 2
39449: PPUSH
39450: CALL_OW 272
39454: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39455: LD_ADDR_VAR 0 12
39459: PUSH
39460: LD_VAR 0 13
39464: PPUSH
39465: CALL_OW 251
39469: PPUSH
39470: LD_VAR 0 10
39474: PPUSH
39475: LD_INT 2
39477: PPUSH
39478: CALL_OW 273
39482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39483: LD_VAR 0 11
39487: PPUSH
39488: LD_VAR 0 12
39492: PPUSH
39493: CALL_OW 488
39497: PUSH
39498: LD_VAR 0 11
39502: PPUSH
39503: LD_VAR 0 12
39507: PPUSH
39508: CALL_OW 428
39512: NOT
39513: AND
39514: IFFALSE 39537
// begin ComMoveXY ( tmp , _x , _y ) ;
39516: LD_VAR 0 13
39520: PPUSH
39521: LD_VAR 0 11
39525: PPUSH
39526: LD_VAR 0 12
39530: PPUSH
39531: CALL_OW 111
// break ;
39535: GO 39539
// end ; end ;
39537: GO 39424
39539: POP
39540: POP
// end ; end ;
39541: GO 38866
39543: POP
39544: POP
// end ;
39545: LD_VAR 0 8
39549: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39550: LD_INT 0
39552: PPUSH
// result := true ;
39553: LD_ADDR_VAR 0 3
39557: PUSH
39558: LD_INT 1
39560: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39561: LD_VAR 0 2
39565: PUSH
39566: LD_INT 24
39568: DOUBLE
39569: EQUAL
39570: IFTRUE 39580
39572: LD_INT 33
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39605
39580: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_INT 32
39588: PPUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 321
39598: PUSH
39599: LD_INT 2
39601: EQUAL
39602: ST_TO_ADDR
39603: GO 39921
39605: LD_INT 20
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39613
39611: GO 39638
39613: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 6
39621: PPUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 321
39631: PUSH
39632: LD_INT 2
39634: EQUAL
39635: ST_TO_ADDR
39636: GO 39921
39638: LD_INT 22
39640: DOUBLE
39641: EQUAL
39642: IFTRUE 39652
39644: LD_INT 36
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39677
39652: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 15
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 321
39670: PUSH
39671: LD_INT 2
39673: EQUAL
39674: ST_TO_ADDR
39675: GO 39921
39677: LD_INT 30
39679: DOUBLE
39680: EQUAL
39681: IFTRUE 39685
39683: GO 39710
39685: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39686: LD_ADDR_VAR 0 3
39690: PUSH
39691: LD_INT 20
39693: PPUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 321
39703: PUSH
39704: LD_INT 2
39706: EQUAL
39707: ST_TO_ADDR
39708: GO 39921
39710: LD_INT 28
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39724
39716: LD_INT 21
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 39749
39724: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_INT 21
39732: PPUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 321
39742: PUSH
39743: LD_INT 2
39745: EQUAL
39746: ST_TO_ADDR
39747: GO 39921
39749: LD_INT 16
39751: DOUBLE
39752: EQUAL
39753: IFTRUE 39757
39755: GO 39782
39757: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39758: LD_ADDR_VAR 0 3
39762: PUSH
39763: LD_INT 84
39765: PPUSH
39766: LD_VAR 0 1
39770: PPUSH
39771: CALL_OW 321
39775: PUSH
39776: LD_INT 2
39778: EQUAL
39779: ST_TO_ADDR
39780: GO 39921
39782: LD_INT 19
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39796
39788: LD_INT 23
39790: DOUBLE
39791: EQUAL
39792: IFTRUE 39796
39794: GO 39821
39796: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39797: LD_ADDR_VAR 0 3
39801: PUSH
39802: LD_INT 83
39804: PPUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 321
39814: PUSH
39815: LD_INT 2
39817: EQUAL
39818: ST_TO_ADDR
39819: GO 39921
39821: LD_INT 17
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39829
39827: GO 39854
39829: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39830: LD_ADDR_VAR 0 3
39834: PUSH
39835: LD_INT 39
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 321
39847: PUSH
39848: LD_INT 2
39850: EQUAL
39851: ST_TO_ADDR
39852: GO 39921
39854: LD_INT 18
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39862
39860: GO 39887
39862: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_INT 40
39870: PPUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 321
39880: PUSH
39881: LD_INT 2
39883: EQUAL
39884: ST_TO_ADDR
39885: GO 39921
39887: LD_INT 27
39889: DOUBLE
39890: EQUAL
39891: IFTRUE 39895
39893: GO 39920
39895: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39896: LD_ADDR_VAR 0 3
39900: PUSH
39901: LD_INT 35
39903: PPUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 321
39913: PUSH
39914: LD_INT 2
39916: EQUAL
39917: ST_TO_ADDR
39918: GO 39921
39920: POP
// end ;
39921: LD_VAR 0 3
39925: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39926: LD_INT 0
39928: PPUSH
39929: PPUSH
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
// result := false ;
39939: LD_ADDR_VAR 0 6
39943: PUSH
39944: LD_INT 0
39946: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39947: LD_VAR 0 1
39951: NOT
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL_OW 266
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: IN
39973: NOT
39974: OR
39975: PUSH
39976: LD_VAR 0 2
39980: NOT
39981: OR
39982: PUSH
39983: LD_VAR 0 5
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 3
39999: PUSH
40000: LD_INT 4
40002: PUSH
40003: LD_INT 5
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: IN
40014: NOT
40015: OR
40016: PUSH
40017: LD_VAR 0 3
40021: PPUSH
40022: LD_VAR 0 4
40026: PPUSH
40027: CALL_OW 488
40031: NOT
40032: OR
40033: IFFALSE 40037
// exit ;
40035: GO 40773
// side := GetSide ( depot ) ;
40037: LD_ADDR_VAR 0 9
40041: PUSH
40042: LD_VAR 0 1
40046: PPUSH
40047: CALL_OW 255
40051: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40052: LD_VAR 0 9
40056: PPUSH
40057: LD_VAR 0 2
40061: PPUSH
40062: CALL 39550 0 2
40066: NOT
40067: IFFALSE 40071
// exit ;
40069: GO 40773
// pom := GetBase ( depot ) ;
40071: LD_ADDR_VAR 0 10
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 274
40085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40086: LD_ADDR_VAR 0 11
40090: PUSH
40091: LD_VAR 0 2
40095: PPUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 248
40105: PPUSH
40106: CALL_OW 450
40110: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40111: LD_VAR 0 10
40115: PPUSH
40116: LD_INT 1
40118: PPUSH
40119: CALL_OW 275
40123: PUSH
40124: LD_VAR 0 11
40128: PUSH
40129: LD_INT 1
40131: ARRAY
40132: GREATEREQUAL
40133: PUSH
40134: LD_VAR 0 10
40138: PPUSH
40139: LD_INT 2
40141: PPUSH
40142: CALL_OW 275
40146: PUSH
40147: LD_VAR 0 11
40151: PUSH
40152: LD_INT 2
40154: ARRAY
40155: GREATEREQUAL
40156: AND
40157: PUSH
40158: LD_VAR 0 10
40162: PPUSH
40163: LD_INT 3
40165: PPUSH
40166: CALL_OW 275
40170: PUSH
40171: LD_VAR 0 11
40175: PUSH
40176: LD_INT 3
40178: ARRAY
40179: GREATEREQUAL
40180: AND
40181: NOT
40182: IFFALSE 40186
// exit ;
40184: GO 40773
// if GetBType ( depot ) = b_depot then
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 266
40195: PUSH
40196: LD_INT 0
40198: EQUAL
40199: IFFALSE 40211
// dist := 28 else
40201: LD_ADDR_VAR 0 14
40205: PUSH
40206: LD_INT 28
40208: ST_TO_ADDR
40209: GO 40219
// dist := 36 ;
40211: LD_ADDR_VAR 0 14
40215: PUSH
40216: LD_INT 36
40218: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40219: LD_VAR 0 1
40223: PPUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: LD_VAR 0 4
40233: PPUSH
40234: CALL_OW 297
40238: PUSH
40239: LD_VAR 0 14
40243: GREATER
40244: IFFALSE 40248
// exit ;
40246: GO 40773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40248: LD_ADDR_VAR 0 12
40252: PUSH
40253: LD_VAR 0 2
40257: PPUSH
40258: LD_VAR 0 3
40262: PPUSH
40263: LD_VAR 0 4
40267: PPUSH
40268: LD_VAR 0 5
40272: PPUSH
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 248
40282: PPUSH
40283: LD_INT 0
40285: PPUSH
40286: CALL 40778 0 6
40290: ST_TO_ADDR
// if not hexes then
40291: LD_VAR 0 12
40295: NOT
40296: IFFALSE 40300
// exit ;
40298: GO 40773
// hex := GetHexInfo ( x , y ) ;
40300: LD_ADDR_VAR 0 15
40304: PUSH
40305: LD_VAR 0 3
40309: PPUSH
40310: LD_VAR 0 4
40314: PPUSH
40315: CALL_OW 546
40319: ST_TO_ADDR
// if hex [ 1 ] then
40320: LD_VAR 0 15
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: IFFALSE 40332
// exit ;
40330: GO 40773
// height := hex [ 2 ] ;
40332: LD_ADDR_VAR 0 13
40336: PUSH
40337: LD_VAR 0 15
40341: PUSH
40342: LD_INT 2
40344: ARRAY
40345: ST_TO_ADDR
// for i = 1 to hexes do
40346: LD_ADDR_VAR 0 7
40350: PUSH
40351: DOUBLE
40352: LD_INT 1
40354: DEC
40355: ST_TO_ADDR
40356: LD_VAR 0 12
40360: PUSH
40361: FOR_TO
40362: IFFALSE 40692
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40364: LD_VAR 0 12
40368: PUSH
40369: LD_VAR 0 7
40373: ARRAY
40374: PUSH
40375: LD_INT 1
40377: ARRAY
40378: PPUSH
40379: LD_VAR 0 12
40383: PUSH
40384: LD_VAR 0 7
40388: ARRAY
40389: PUSH
40390: LD_INT 2
40392: ARRAY
40393: PPUSH
40394: CALL_OW 488
40398: NOT
40399: PUSH
40400: LD_VAR 0 12
40404: PUSH
40405: LD_VAR 0 7
40409: ARRAY
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: PPUSH
40415: LD_VAR 0 12
40419: PUSH
40420: LD_VAR 0 7
40424: ARRAY
40425: PUSH
40426: LD_INT 2
40428: ARRAY
40429: PPUSH
40430: CALL_OW 428
40434: PUSH
40435: LD_INT 0
40437: GREATER
40438: OR
40439: PUSH
40440: LD_VAR 0 12
40444: PUSH
40445: LD_VAR 0 7
40449: ARRAY
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: PPUSH
40455: LD_VAR 0 12
40459: PUSH
40460: LD_VAR 0 7
40464: ARRAY
40465: PUSH
40466: LD_INT 2
40468: ARRAY
40469: PPUSH
40470: CALL_OW 351
40474: OR
40475: IFFALSE 40481
// exit ;
40477: POP
40478: POP
40479: GO 40773
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40481: LD_ADDR_VAR 0 8
40485: PUSH
40486: LD_VAR 0 12
40490: PUSH
40491: LD_VAR 0 7
40495: ARRAY
40496: PUSH
40497: LD_INT 1
40499: ARRAY
40500: PPUSH
40501: LD_VAR 0 12
40505: PUSH
40506: LD_VAR 0 7
40510: ARRAY
40511: PUSH
40512: LD_INT 2
40514: ARRAY
40515: PPUSH
40516: CALL_OW 546
40520: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40521: LD_VAR 0 8
40525: PUSH
40526: LD_INT 1
40528: ARRAY
40529: PUSH
40530: LD_VAR 0 8
40534: PUSH
40535: LD_INT 2
40537: ARRAY
40538: PUSH
40539: LD_VAR 0 13
40543: PUSH
40544: LD_INT 2
40546: PLUS
40547: GREATER
40548: OR
40549: PUSH
40550: LD_VAR 0 8
40554: PUSH
40555: LD_INT 2
40557: ARRAY
40558: PUSH
40559: LD_VAR 0 13
40563: PUSH
40564: LD_INT 2
40566: MINUS
40567: LESS
40568: OR
40569: PUSH
40570: LD_VAR 0 8
40574: PUSH
40575: LD_INT 3
40577: ARRAY
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 8
40584: PUSH
40585: LD_INT 9
40587: PUSH
40588: LD_INT 10
40590: PUSH
40591: LD_INT 11
40593: PUSH
40594: LD_INT 12
40596: PUSH
40597: LD_INT 13
40599: PUSH
40600: LD_INT 16
40602: PUSH
40603: LD_INT 17
40605: PUSH
40606: LD_INT 18
40608: PUSH
40609: LD_INT 19
40611: PUSH
40612: LD_INT 20
40614: PUSH
40615: LD_INT 21
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: IN
40633: NOT
40634: OR
40635: PUSH
40636: LD_VAR 0 8
40640: PUSH
40641: LD_INT 5
40643: ARRAY
40644: NOT
40645: OR
40646: PUSH
40647: LD_VAR 0 8
40651: PUSH
40652: LD_INT 6
40654: ARRAY
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 7
40664: PUSH
40665: LD_INT 9
40667: PUSH
40668: LD_INT 10
40670: PUSH
40671: LD_INT 11
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: IN
40682: NOT
40683: OR
40684: IFFALSE 40690
// exit ;
40686: POP
40687: POP
40688: GO 40773
// end ;
40690: GO 40361
40692: POP
40693: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40694: LD_VAR 0 9
40698: PPUSH
40699: LD_VAR 0 3
40703: PPUSH
40704: LD_VAR 0 4
40708: PPUSH
40709: LD_INT 20
40711: PPUSH
40712: CALL 32725 0 4
40716: PUSH
40717: LD_INT 4
40719: ARRAY
40720: IFFALSE 40724
// exit ;
40722: GO 40773
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40724: LD_VAR 0 2
40728: PUSH
40729: LD_INT 29
40731: PUSH
40732: LD_INT 30
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: IN
40739: PUSH
40740: LD_VAR 0 3
40744: PPUSH
40745: LD_VAR 0 4
40749: PPUSH
40750: LD_VAR 0 9
40754: PPUSH
40755: CALL_OW 440
40759: NOT
40760: AND
40761: IFFALSE 40765
// exit ;
40763: GO 40773
// result := true ;
40765: LD_ADDR_VAR 0 6
40769: PUSH
40770: LD_INT 1
40772: ST_TO_ADDR
// end ;
40773: LD_VAR 0 6
40777: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40778: LD_INT 0
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
// result = [ ] ;
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: EMPTY
40844: ST_TO_ADDR
// temp_list = [ ] ;
40845: LD_ADDR_VAR 0 9
40849: PUSH
40850: EMPTY
40851: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40852: LD_VAR 0 4
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: LD_INT 5
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: IN
40883: NOT
40884: PUSH
40885: LD_VAR 0 1
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: IN
40900: PUSH
40901: LD_VAR 0 5
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: IN
40920: NOT
40921: AND
40922: OR
40923: IFFALSE 40927
// exit ;
40925: GO 59318
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40927: LD_VAR 0 1
40931: PUSH
40932: LD_INT 6
40934: PUSH
40935: LD_INT 7
40937: PUSH
40938: LD_INT 8
40940: PUSH
40941: LD_INT 13
40943: PUSH
40944: LD_INT 12
40946: PUSH
40947: LD_INT 15
40949: PUSH
40950: LD_INT 11
40952: PUSH
40953: LD_INT 14
40955: PUSH
40956: LD_INT 10
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: IN
40970: IFFALSE 40980
// btype = b_lab ;
40972: LD_ADDR_VAR 0 1
40976: PUSH
40977: LD_INT 6
40979: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40980: LD_VAR 0 6
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: IN
40999: NOT
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: LD_INT 6
41020: PUSH
41021: LD_INT 36
41023: PUSH
41024: LD_INT 4
41026: PUSH
41027: LD_INT 5
41029: PUSH
41030: LD_INT 31
41032: PUSH
41033: LD_INT 32
41035: PUSH
41036: LD_INT 33
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: IN
41052: NOT
41053: PUSH
41054: LD_VAR 0 6
41058: PUSH
41059: LD_INT 1
41061: EQUAL
41062: AND
41063: OR
41064: PUSH
41065: LD_VAR 0 1
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: IN
41080: NOT
41081: PUSH
41082: LD_VAR 0 6
41086: PUSH
41087: LD_INT 2
41089: EQUAL
41090: AND
41091: OR
41092: IFFALSE 41102
// mode = 0 ;
41094: LD_ADDR_VAR 0 6
41098: PUSH
41099: LD_INT 0
41101: ST_TO_ADDR
// case mode of 0 :
41102: LD_VAR 0 6
41106: PUSH
41107: LD_INT 0
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 52568
41115: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41116: LD_ADDR_VAR 0 11
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 3
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41309: LD_ADDR_VAR 0 12
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41505: LD_ADDR_VAR 0 13
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 3
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: LD_INT 3
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41704: LD_ADDR_VAR 0 14
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 3
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41900: LD_ADDR_VAR 0 15
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 3
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42093: LD_ADDR_VAR 0 16
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42286: LD_ADDR_VAR 0 17
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42516: LD_ADDR_VAR 0 18
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42746: LD_ADDR_VAR 0 19
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42976: LD_ADDR_VAR 0 20
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43206: LD_ADDR_VAR 0 21
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43436: LD_ADDR_VAR 0 22
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43666: LD_ADDR_VAR 0 23
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 3
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43946: LD_ADDR_VAR 0 24
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44222: LD_ADDR_VAR 0 25
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44496: LD_ADDR_VAR 0 26
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44772: LD_ADDR_VAR 0 27
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45052: LD_ADDR_VAR 0 28
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 3
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45334: LD_ADDR_VAR 0 29
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45613: LD_ADDR_VAR 0 30
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45891: LD_ADDR_VAR 0 31
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46169: LD_ADDR_VAR 0 32
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46447: LD_ADDR_VAR 0 33
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 3
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46726: LD_ADDR_VAR 0 34
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47006: LD_ADDR_VAR 0 35
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47118: LD_ADDR_VAR 0 36
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47230: LD_ADDR_VAR 0 37
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47342: LD_ADDR_VAR 0 38
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47454: LD_ADDR_VAR 0 39
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47566: LD_ADDR_VAR 0 40
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47678: LD_ADDR_VAR 0 41
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48028: LD_ADDR_VAR 0 42
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: NEG
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48378: LD_ADDR_VAR 0 43
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 3
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 3
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48726: LD_ADDR_VAR 0 44
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 3
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49076: LD_ADDR_VAR 0 45
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49426: LD_ADDR_VAR 0 46
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 3
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49774: LD_ADDR_VAR 0 47
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49925: LD_ADDR_VAR 0 48
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50072: LD_ADDR_VAR 0 49
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50216: LD_ADDR_VAR 0 50
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 51
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50507: LD_ADDR_VAR 0 52
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50658: LD_ADDR_VAR 0 53
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50888: LD_ADDR_VAR 0 54
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51118: LD_ADDR_VAR 0 55
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51348: LD_ADDR_VAR 0 56
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51578: LD_ADDR_VAR 0 57
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51808: LD_ADDR_VAR 0 58
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52038: LD_ADDR_VAR 0 59
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52126: LD_ADDR_VAR 0 60
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52214: LD_ADDR_VAR 0 61
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52302: LD_ADDR_VAR 0 62
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52390: LD_ADDR_VAR 0 63
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52478: LD_ADDR_VAR 0 64
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// end ; 1 :
52566: GO 58463
52568: LD_INT 1
52570: DOUBLE
52571: EQUAL
52572: IFTRUE 52576
52574: GO 55199
52576: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52577: LD_ADDR_VAR 0 11
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52621: LD_ADDR_VAR 0 12
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52662: LD_ADDR_VAR 0 13
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52702: LD_ADDR_VAR 0 14
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52743: LD_ADDR_VAR 0 15
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52787: LD_ADDR_VAR 0 16
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 3
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52833: LD_ADDR_VAR 0 17
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 3
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52877: LD_ADDR_VAR 0 18
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52918: LD_ADDR_VAR 0 19
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52958: LD_ADDR_VAR 0 20
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52999: LD_ADDR_VAR 0 21
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53043: LD_ADDR_VAR 0 22
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53089: LD_ADDR_VAR 0 23
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 4
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53133: LD_ADDR_VAR 0 24
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 4
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53174: LD_ADDR_VAR 0 25
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 4
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 4
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53214: LD_ADDR_VAR 0 26
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53255: LD_ADDR_VAR 0 27
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 4
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53299: LD_ADDR_VAR 0 28
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: LD_INT 4
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: LD_INT 3
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53345: LD_ADDR_VAR 0 29
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 5
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 5
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 4
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 6
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 6
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 5
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53500: LD_ADDR_VAR 0 30
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 4
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 4
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 5
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 5
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 6
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 6
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53643: LD_ADDR_VAR 0 31
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 4
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 5
53720: PUSH
53721: LD_INT 5
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 5
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 6
53740: PUSH
53741: LD_INT 5
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 6
53750: PUSH
53751: LD_INT 6
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 6
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53782: LD_ADDR_VAR 0 32
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 4
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 4
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 5
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 5
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 6
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 6
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 5
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53925: LD_ADDR_VAR 0 33
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 4
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 5
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 5
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 5
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 6
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 6
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54080: LD_ADDR_VAR 0 34
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: LD_INT 4
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 4
54147: NEG
54148: PUSH
54149: LD_INT 4
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 4
54159: NEG
54160: PUSH
54161: LD_INT 5
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 5
54171: NEG
54172: PUSH
54173: LD_INT 4
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 5
54183: NEG
54184: PUSH
54185: LD_INT 5
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 5
54195: NEG
54196: PUSH
54197: LD_INT 6
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 6
54207: NEG
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 6
54219: NEG
54220: PUSH
54221: LD_INT 6
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54243: LD_ADDR_VAR 0 41
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54287: LD_ADDR_VAR 0 42
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54328: LD_ADDR_VAR 0 43
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54368: LD_ADDR_VAR 0 44
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54409: LD_ADDR_VAR 0 45
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54453: LD_ADDR_VAR 0 46
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54499: LD_ADDR_VAR 0 47
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54532: LD_ADDR_VAR 0 48
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54563: LD_ADDR_VAR 0 49
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54592: LD_ADDR_VAR 0 50
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 3
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54621: LD_ADDR_VAR 0 51
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54652: LD_ADDR_VAR 0 52
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54685: LD_ADDR_VAR 0 53
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54729: LD_ADDR_VAR 0 54
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54770: LD_ADDR_VAR 0 55
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54810: LD_ADDR_VAR 0 56
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54851: LD_ADDR_VAR 0 57
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54895: LD_ADDR_VAR 0 58
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 3
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54941: LD_ADDR_VAR 0 59
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54985: LD_ADDR_VAR 0 60
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55026: LD_ADDR_VAR 0 61
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55066: LD_ADDR_VAR 0 62
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55107: LD_ADDR_VAR 0 63
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55151: LD_ADDR_VAR 0 64
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// end ; 2 :
55197: GO 58463
55199: LD_INT 2
55201: DOUBLE
55202: EQUAL
55203: IFTRUE 55207
55205: GO 58462
55207: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55208: LD_ADDR_VAR 0 29
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 5
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 4
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 5
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: LD_INT 4
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 4
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 4
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 5
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 5
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 4
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 5
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 4
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 4
55593: NEG
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 4
55605: NEG
55606: PUSH
55607: LD_INT 5
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 5
55653: NEG
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 5
55665: NEG
55666: PUSH
55667: LD_INT 5
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: LD_INT 5
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 5
55689: NEG
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55746: LD_ADDR_VAR 0 30
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: LD_INT 4
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 4
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 5
55773: PUSH
55774: LD_INT 4
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 5
55783: PUSH
55784: LD_INT 5
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: LD_INT 5
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 4
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 5
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 5
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 5
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 4
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 5
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 4
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 4
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 5
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 5
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56293: LD_ADDR_VAR 0 31
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 4
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 4
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 5
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 5
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 4
56449: NEG
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 4
56495: NEG
56496: PUSH
56497: LD_INT 4
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 4
56507: NEG
56508: PUSH
56509: LD_INT 5
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 4
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: LD_INT 4
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 5
56567: NEG
56568: PUSH
56569: LD_INT 5
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: LD_INT 5
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 5
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 4
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 5
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 4
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 5
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56843: LD_ADDR_VAR 0 32
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 5
56906: NEG
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 5
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: LD_INT 4
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 3
57000: NEG
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: NEG
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 5
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 4
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 4
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 5
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: PUSH
57256: LD_INT 4
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 4
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 5
57275: PUSH
57276: LD_INT 4
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 5
57285: PUSH
57286: LD_INT 5
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 5
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57390: LD_ADDR_VAR 0 33
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: LD_INT 4
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: NEG
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: NEG
57422: PUSH
57423: LD_INT 4
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: LD_INT 4
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: NEG
57470: PUSH
57471: LD_INT 5
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 5
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: NEG
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 4
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 4
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 5
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 5
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 4
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 5
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 4
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 4
57730: PUSH
57731: LD_INT 4
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 4
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 4
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 5
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 5
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57928: LD_ADDR_VAR 0 34
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 4
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 5
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 4
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 5
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 5
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 5
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 4
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 4
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 3
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 5
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 5
58392: NEG
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// end ; end ;
58460: GO 58463
58462: POP
// case btype of b_depot , b_warehouse :
58463: LD_VAR 0 1
58467: PUSH
58468: LD_INT 0
58470: DOUBLE
58471: EQUAL
58472: IFTRUE 58482
58474: LD_INT 1
58476: DOUBLE
58477: EQUAL
58478: IFTRUE 58482
58480: GO 58683
58482: POP
// case nation of nation_american :
58483: LD_VAR 0 5
58487: PUSH
58488: LD_INT 1
58490: DOUBLE
58491: EQUAL
58492: IFTRUE 58496
58494: GO 58552
58496: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58497: LD_ADDR_VAR 0 9
58501: PUSH
58502: LD_VAR 0 11
58506: PUSH
58507: LD_VAR 0 12
58511: PUSH
58512: LD_VAR 0 13
58516: PUSH
58517: LD_VAR 0 14
58521: PUSH
58522: LD_VAR 0 15
58526: PUSH
58527: LD_VAR 0 16
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: PUSH
58540: LD_VAR 0 4
58544: PUSH
58545: LD_INT 1
58547: PLUS
58548: ARRAY
58549: ST_TO_ADDR
58550: GO 58681
58552: LD_INT 2
58554: DOUBLE
58555: EQUAL
58556: IFTRUE 58560
58558: GO 58616
58560: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58561: LD_ADDR_VAR 0 9
58565: PUSH
58566: LD_VAR 0 17
58570: PUSH
58571: LD_VAR 0 18
58575: PUSH
58576: LD_VAR 0 19
58580: PUSH
58581: LD_VAR 0 20
58585: PUSH
58586: LD_VAR 0 21
58590: PUSH
58591: LD_VAR 0 22
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: PUSH
58604: LD_VAR 0 4
58608: PUSH
58609: LD_INT 1
58611: PLUS
58612: ARRAY
58613: ST_TO_ADDR
58614: GO 58681
58616: LD_INT 3
58618: DOUBLE
58619: EQUAL
58620: IFTRUE 58624
58622: GO 58680
58624: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58625: LD_ADDR_VAR 0 9
58629: PUSH
58630: LD_VAR 0 23
58634: PUSH
58635: LD_VAR 0 24
58639: PUSH
58640: LD_VAR 0 25
58644: PUSH
58645: LD_VAR 0 26
58649: PUSH
58650: LD_VAR 0 27
58654: PUSH
58655: LD_VAR 0 28
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: LD_VAR 0 4
58672: PUSH
58673: LD_INT 1
58675: PLUS
58676: ARRAY
58677: ST_TO_ADDR
58678: GO 58681
58680: POP
58681: GO 59236
58683: LD_INT 2
58685: DOUBLE
58686: EQUAL
58687: IFTRUE 58697
58689: LD_INT 3
58691: DOUBLE
58692: EQUAL
58693: IFTRUE 58697
58695: GO 58753
58697: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58698: LD_ADDR_VAR 0 9
58702: PUSH
58703: LD_VAR 0 29
58707: PUSH
58708: LD_VAR 0 30
58712: PUSH
58713: LD_VAR 0 31
58717: PUSH
58718: LD_VAR 0 32
58722: PUSH
58723: LD_VAR 0 33
58727: PUSH
58728: LD_VAR 0 34
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: PUSH
58741: LD_VAR 0 4
58745: PUSH
58746: LD_INT 1
58748: PLUS
58749: ARRAY
58750: ST_TO_ADDR
58751: GO 59236
58753: LD_INT 16
58755: DOUBLE
58756: EQUAL
58757: IFTRUE 58815
58759: LD_INT 17
58761: DOUBLE
58762: EQUAL
58763: IFTRUE 58815
58765: LD_INT 18
58767: DOUBLE
58768: EQUAL
58769: IFTRUE 58815
58771: LD_INT 19
58773: DOUBLE
58774: EQUAL
58775: IFTRUE 58815
58777: LD_INT 22
58779: DOUBLE
58780: EQUAL
58781: IFTRUE 58815
58783: LD_INT 20
58785: DOUBLE
58786: EQUAL
58787: IFTRUE 58815
58789: LD_INT 21
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58815
58795: LD_INT 23
58797: DOUBLE
58798: EQUAL
58799: IFTRUE 58815
58801: LD_INT 24
58803: DOUBLE
58804: EQUAL
58805: IFTRUE 58815
58807: LD_INT 25
58809: DOUBLE
58810: EQUAL
58811: IFTRUE 58815
58813: GO 58871
58815: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58816: LD_ADDR_VAR 0 9
58820: PUSH
58821: LD_VAR 0 35
58825: PUSH
58826: LD_VAR 0 36
58830: PUSH
58831: LD_VAR 0 37
58835: PUSH
58836: LD_VAR 0 38
58840: PUSH
58841: LD_VAR 0 39
58845: PUSH
58846: LD_VAR 0 40
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: PUSH
58859: LD_VAR 0 4
58863: PUSH
58864: LD_INT 1
58866: PLUS
58867: ARRAY
58868: ST_TO_ADDR
58869: GO 59236
58871: LD_INT 6
58873: DOUBLE
58874: EQUAL
58875: IFTRUE 58927
58877: LD_INT 7
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58927
58883: LD_INT 8
58885: DOUBLE
58886: EQUAL
58887: IFTRUE 58927
58889: LD_INT 13
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58927
58895: LD_INT 12
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58927
58901: LD_INT 15
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58927
58907: LD_INT 11
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58927
58913: LD_INT 14
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58927
58919: LD_INT 10
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58927
58925: GO 58983
58927: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58928: LD_ADDR_VAR 0 9
58932: PUSH
58933: LD_VAR 0 41
58937: PUSH
58938: LD_VAR 0 42
58942: PUSH
58943: LD_VAR 0 43
58947: PUSH
58948: LD_VAR 0 44
58952: PUSH
58953: LD_VAR 0 45
58957: PUSH
58958: LD_VAR 0 46
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: PUSH
58971: LD_VAR 0 4
58975: PUSH
58976: LD_INT 1
58978: PLUS
58979: ARRAY
58980: ST_TO_ADDR
58981: GO 59236
58983: LD_INT 36
58985: DOUBLE
58986: EQUAL
58987: IFTRUE 58991
58989: GO 59047
58991: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58992: LD_ADDR_VAR 0 9
58996: PUSH
58997: LD_VAR 0 47
59001: PUSH
59002: LD_VAR 0 48
59006: PUSH
59007: LD_VAR 0 49
59011: PUSH
59012: LD_VAR 0 50
59016: PUSH
59017: LD_VAR 0 51
59021: PUSH
59022: LD_VAR 0 52
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: PUSH
59035: LD_VAR 0 4
59039: PUSH
59040: LD_INT 1
59042: PLUS
59043: ARRAY
59044: ST_TO_ADDR
59045: GO 59236
59047: LD_INT 4
59049: DOUBLE
59050: EQUAL
59051: IFTRUE 59073
59053: LD_INT 5
59055: DOUBLE
59056: EQUAL
59057: IFTRUE 59073
59059: LD_INT 34
59061: DOUBLE
59062: EQUAL
59063: IFTRUE 59073
59065: LD_INT 37
59067: DOUBLE
59068: EQUAL
59069: IFTRUE 59073
59071: GO 59129
59073: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59074: LD_ADDR_VAR 0 9
59078: PUSH
59079: LD_VAR 0 53
59083: PUSH
59084: LD_VAR 0 54
59088: PUSH
59089: LD_VAR 0 55
59093: PUSH
59094: LD_VAR 0 56
59098: PUSH
59099: LD_VAR 0 57
59103: PUSH
59104: LD_VAR 0 58
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: PUSH
59117: LD_VAR 0 4
59121: PUSH
59122: LD_INT 1
59124: PLUS
59125: ARRAY
59126: ST_TO_ADDR
59127: GO 59236
59129: LD_INT 31
59131: DOUBLE
59132: EQUAL
59133: IFTRUE 59179
59135: LD_INT 32
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59179
59141: LD_INT 33
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59179
59147: LD_INT 27
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59179
59153: LD_INT 26
59155: DOUBLE
59156: EQUAL
59157: IFTRUE 59179
59159: LD_INT 28
59161: DOUBLE
59162: EQUAL
59163: IFTRUE 59179
59165: LD_INT 29
59167: DOUBLE
59168: EQUAL
59169: IFTRUE 59179
59171: LD_INT 30
59173: DOUBLE
59174: EQUAL
59175: IFTRUE 59179
59177: GO 59235
59179: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59180: LD_ADDR_VAR 0 9
59184: PUSH
59185: LD_VAR 0 59
59189: PUSH
59190: LD_VAR 0 60
59194: PUSH
59195: LD_VAR 0 61
59199: PUSH
59200: LD_VAR 0 62
59204: PUSH
59205: LD_VAR 0 63
59209: PUSH
59210: LD_VAR 0 64
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: LD_VAR 0 4
59227: PUSH
59228: LD_INT 1
59230: PLUS
59231: ARRAY
59232: ST_TO_ADDR
59233: GO 59236
59235: POP
// temp_list2 = [ ] ;
59236: LD_ADDR_VAR 0 10
59240: PUSH
59241: EMPTY
59242: ST_TO_ADDR
// for i in temp_list do
59243: LD_ADDR_VAR 0 8
59247: PUSH
59248: LD_VAR 0 9
59252: PUSH
59253: FOR_IN
59254: IFFALSE 59306
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59256: LD_ADDR_VAR 0 10
59260: PUSH
59261: LD_VAR 0 10
59265: PUSH
59266: LD_VAR 0 8
59270: PUSH
59271: LD_INT 1
59273: ARRAY
59274: PUSH
59275: LD_VAR 0 2
59279: PLUS
59280: PUSH
59281: LD_VAR 0 8
59285: PUSH
59286: LD_INT 2
59288: ARRAY
59289: PUSH
59290: LD_VAR 0 3
59294: PLUS
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: ADD
59303: ST_TO_ADDR
59304: GO 59253
59306: POP
59307: POP
// result = temp_list2 ;
59308: LD_ADDR_VAR 0 7
59312: PUSH
59313: LD_VAR 0 10
59317: ST_TO_ADDR
// end ;
59318: LD_VAR 0 7
59322: RET
// export function EnemyInRange ( unit , dist ) ; begin
59323: LD_INT 0
59325: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59326: LD_ADDR_VAR 0 3
59330: PUSH
59331: LD_VAR 0 1
59335: PPUSH
59336: CALL_OW 255
59340: PPUSH
59341: LD_VAR 0 1
59345: PPUSH
59346: CALL_OW 250
59350: PPUSH
59351: LD_VAR 0 1
59355: PPUSH
59356: CALL_OW 251
59360: PPUSH
59361: LD_VAR 0 2
59365: PPUSH
59366: CALL 32725 0 4
59370: PUSH
59371: LD_INT 4
59373: ARRAY
59374: ST_TO_ADDR
// end ;
59375: LD_VAR 0 3
59379: RET
// export function PlayerSeeMe ( unit ) ; begin
59380: LD_INT 0
59382: PPUSH
// result := See ( your_side , unit ) ;
59383: LD_ADDR_VAR 0 2
59387: PUSH
59388: LD_OWVAR 2
59392: PPUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 292
59402: ST_TO_ADDR
// end ;
59403: LD_VAR 0 2
59407: RET
// export function ReverseDir ( unit ) ; begin
59408: LD_INT 0
59410: PPUSH
// if not unit then
59411: LD_VAR 0 1
59415: NOT
59416: IFFALSE 59420
// exit ;
59418: GO 59443
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59420: LD_ADDR_VAR 0 2
59424: PUSH
59425: LD_VAR 0 1
59429: PPUSH
59430: CALL_OW 254
59434: PUSH
59435: LD_INT 3
59437: PLUS
59438: PUSH
59439: LD_INT 6
59441: MOD
59442: ST_TO_ADDR
// end ;
59443: LD_VAR 0 2
59447: RET
// export function ReverseArray ( array ) ; var i ; begin
59448: LD_INT 0
59450: PPUSH
59451: PPUSH
// if not array then
59452: LD_VAR 0 1
59456: NOT
59457: IFFALSE 59461
// exit ;
59459: GO 59516
// result := [ ] ;
59461: LD_ADDR_VAR 0 2
59465: PUSH
59466: EMPTY
59467: ST_TO_ADDR
// for i := array downto 1 do
59468: LD_ADDR_VAR 0 3
59472: PUSH
59473: DOUBLE
59474: LD_VAR 0 1
59478: INC
59479: ST_TO_ADDR
59480: LD_INT 1
59482: PUSH
59483: FOR_DOWNTO
59484: IFFALSE 59514
// result := Join ( result , array [ i ] ) ;
59486: LD_ADDR_VAR 0 2
59490: PUSH
59491: LD_VAR 0 2
59495: PPUSH
59496: LD_VAR 0 1
59500: PUSH
59501: LD_VAR 0 3
59505: ARRAY
59506: PPUSH
59507: CALL 64141 0 2
59511: ST_TO_ADDR
59512: GO 59483
59514: POP
59515: POP
// end ;
59516: LD_VAR 0 2
59520: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59521: LD_INT 0
59523: PPUSH
59524: PPUSH
59525: PPUSH
59526: PPUSH
59527: PPUSH
59528: PPUSH
// if not unit or not hexes then
59529: LD_VAR 0 1
59533: NOT
59534: PUSH
59535: LD_VAR 0 2
59539: NOT
59540: OR
59541: IFFALSE 59545
// exit ;
59543: GO 59668
// dist := 9999 ;
59545: LD_ADDR_VAR 0 5
59549: PUSH
59550: LD_INT 9999
59552: ST_TO_ADDR
// for i = 1 to hexes do
59553: LD_ADDR_VAR 0 4
59557: PUSH
59558: DOUBLE
59559: LD_INT 1
59561: DEC
59562: ST_TO_ADDR
59563: LD_VAR 0 2
59567: PUSH
59568: FOR_TO
59569: IFFALSE 59656
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59571: LD_ADDR_VAR 0 6
59575: PUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: LD_VAR 0 2
59585: PUSH
59586: LD_VAR 0 4
59590: ARRAY
59591: PUSH
59592: LD_INT 1
59594: ARRAY
59595: PPUSH
59596: LD_VAR 0 2
59600: PUSH
59601: LD_VAR 0 4
59605: ARRAY
59606: PUSH
59607: LD_INT 2
59609: ARRAY
59610: PPUSH
59611: CALL_OW 297
59615: ST_TO_ADDR
// if tdist < dist then
59616: LD_VAR 0 6
59620: PUSH
59621: LD_VAR 0 5
59625: LESS
59626: IFFALSE 59654
// begin hex := hexes [ i ] ;
59628: LD_ADDR_VAR 0 8
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_VAR 0 4
59642: ARRAY
59643: ST_TO_ADDR
// dist := tdist ;
59644: LD_ADDR_VAR 0 5
59648: PUSH
59649: LD_VAR 0 6
59653: ST_TO_ADDR
// end ; end ;
59654: GO 59568
59656: POP
59657: POP
// result := hex ;
59658: LD_ADDR_VAR 0 3
59662: PUSH
59663: LD_VAR 0 8
59667: ST_TO_ADDR
// end ;
59668: LD_VAR 0 3
59672: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59673: LD_INT 0
59675: PPUSH
59676: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59677: LD_VAR 0 1
59681: NOT
59682: PUSH
59683: LD_VAR 0 1
59687: PUSH
59688: LD_INT 21
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 23
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PPUSH
59712: CALL_OW 69
59716: IN
59717: NOT
59718: OR
59719: IFFALSE 59723
// exit ;
59721: GO 59770
// for i = 1 to 3 do
59723: LD_ADDR_VAR 0 3
59727: PUSH
59728: DOUBLE
59729: LD_INT 1
59731: DEC
59732: ST_TO_ADDR
59733: LD_INT 3
59735: PUSH
59736: FOR_TO
59737: IFFALSE 59768
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59739: LD_VAR 0 1
59743: PPUSH
59744: CALL_OW 250
59748: PPUSH
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 251
59758: PPUSH
59759: LD_INT 1
59761: PPUSH
59762: CALL_OW 453
59766: GO 59736
59768: POP
59769: POP
// end ;
59770: LD_VAR 0 2
59774: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59775: LD_INT 0
59777: PPUSH
59778: PPUSH
59779: PPUSH
59780: PPUSH
59781: PPUSH
59782: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59783: LD_VAR 0 1
59787: NOT
59788: PUSH
59789: LD_VAR 0 2
59793: NOT
59794: OR
59795: PUSH
59796: LD_VAR 0 1
59800: PPUSH
59801: CALL_OW 314
59805: OR
59806: IFFALSE 59810
// exit ;
59808: GO 60251
// x := GetX ( enemy_unit ) ;
59810: LD_ADDR_VAR 0 7
59814: PUSH
59815: LD_VAR 0 2
59819: PPUSH
59820: CALL_OW 250
59824: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59825: LD_ADDR_VAR 0 8
59829: PUSH
59830: LD_VAR 0 2
59834: PPUSH
59835: CALL_OW 251
59839: ST_TO_ADDR
// if not x or not y then
59840: LD_VAR 0 7
59844: NOT
59845: PUSH
59846: LD_VAR 0 8
59850: NOT
59851: OR
59852: IFFALSE 59856
// exit ;
59854: GO 60251
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59856: LD_ADDR_VAR 0 6
59860: PUSH
59861: LD_VAR 0 7
59865: PPUSH
59866: LD_INT 0
59868: PPUSH
59869: LD_INT 4
59871: PPUSH
59872: CALL_OW 272
59876: PUSH
59877: LD_VAR 0 8
59881: PPUSH
59882: LD_INT 0
59884: PPUSH
59885: LD_INT 4
59887: PPUSH
59888: CALL_OW 273
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_VAR 0 7
59901: PPUSH
59902: LD_INT 1
59904: PPUSH
59905: LD_INT 4
59907: PPUSH
59908: CALL_OW 272
59912: PUSH
59913: LD_VAR 0 8
59917: PPUSH
59918: LD_INT 1
59920: PPUSH
59921: LD_INT 4
59923: PPUSH
59924: CALL_OW 273
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_VAR 0 7
59937: PPUSH
59938: LD_INT 2
59940: PPUSH
59941: LD_INT 4
59943: PPUSH
59944: CALL_OW 272
59948: PUSH
59949: LD_VAR 0 8
59953: PPUSH
59954: LD_INT 2
59956: PPUSH
59957: LD_INT 4
59959: PPUSH
59960: CALL_OW 273
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_VAR 0 7
59973: PPUSH
59974: LD_INT 3
59976: PPUSH
59977: LD_INT 4
59979: PPUSH
59980: CALL_OW 272
59984: PUSH
59985: LD_VAR 0 8
59989: PPUSH
59990: LD_INT 3
59992: PPUSH
59993: LD_INT 4
59995: PPUSH
59996: CALL_OW 273
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_VAR 0 7
60009: PPUSH
60010: LD_INT 4
60012: PPUSH
60013: LD_INT 4
60015: PPUSH
60016: CALL_OW 272
60020: PUSH
60021: LD_VAR 0 8
60025: PPUSH
60026: LD_INT 4
60028: PPUSH
60029: LD_INT 4
60031: PPUSH
60032: CALL_OW 273
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_VAR 0 7
60045: PPUSH
60046: LD_INT 5
60048: PPUSH
60049: LD_INT 4
60051: PPUSH
60052: CALL_OW 272
60056: PUSH
60057: LD_VAR 0 8
60061: PPUSH
60062: LD_INT 5
60064: PPUSH
60065: LD_INT 4
60067: PPUSH
60068: CALL_OW 273
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// for i = tmp downto 1 do
60085: LD_ADDR_VAR 0 4
60089: PUSH
60090: DOUBLE
60091: LD_VAR 0 6
60095: INC
60096: ST_TO_ADDR
60097: LD_INT 1
60099: PUSH
60100: FOR_DOWNTO
60101: IFFALSE 60202
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60103: LD_VAR 0 6
60107: PUSH
60108: LD_VAR 0 4
60112: ARRAY
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PPUSH
60118: LD_VAR 0 6
60122: PUSH
60123: LD_VAR 0 4
60127: ARRAY
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: PPUSH
60133: CALL_OW 488
60137: NOT
60138: PUSH
60139: LD_VAR 0 6
60143: PUSH
60144: LD_VAR 0 4
60148: ARRAY
60149: PUSH
60150: LD_INT 1
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 6
60158: PUSH
60159: LD_VAR 0 4
60163: ARRAY
60164: PUSH
60165: LD_INT 2
60167: ARRAY
60168: PPUSH
60169: CALL_OW 428
60173: PUSH
60174: LD_INT 0
60176: NONEQUAL
60177: OR
60178: IFFALSE 60200
// tmp := Delete ( tmp , i ) ;
60180: LD_ADDR_VAR 0 6
60184: PUSH
60185: LD_VAR 0 6
60189: PPUSH
60190: LD_VAR 0 4
60194: PPUSH
60195: CALL_OW 3
60199: ST_TO_ADDR
60200: GO 60100
60202: POP
60203: POP
// j := GetClosestHex ( unit , tmp ) ;
60204: LD_ADDR_VAR 0 5
60208: PUSH
60209: LD_VAR 0 1
60213: PPUSH
60214: LD_VAR 0 6
60218: PPUSH
60219: CALL 59521 0 2
60223: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60224: LD_VAR 0 1
60228: PPUSH
60229: LD_VAR 0 5
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: PPUSH
60238: LD_VAR 0 5
60242: PUSH
60243: LD_INT 2
60245: ARRAY
60246: PPUSH
60247: CALL_OW 111
// end ;
60251: LD_VAR 0 3
60255: RET
// export function PrepareApemanSoldier ( ) ; begin
60256: LD_INT 0
60258: PPUSH
// uc_nation := 0 ;
60259: LD_ADDR_OWVAR 21
60263: PUSH
60264: LD_INT 0
60266: ST_TO_ADDR
// hc_sex := sex_male ;
60267: LD_ADDR_OWVAR 27
60271: PUSH
60272: LD_INT 1
60274: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60275: LD_ADDR_OWVAR 28
60279: PUSH
60280: LD_INT 15
60282: ST_TO_ADDR
// hc_gallery :=  ;
60283: LD_ADDR_OWVAR 33
60287: PUSH
60288: LD_STRING 
60290: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60291: LD_ADDR_OWVAR 31
60295: PUSH
60296: LD_INT 0
60298: PPUSH
60299: LD_INT 3
60301: PPUSH
60302: CALL_OW 12
60306: PUSH
60307: LD_INT 0
60309: PPUSH
60310: LD_INT 3
60312: PPUSH
60313: CALL_OW 12
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 1
60334: RET
// export function PrepareApemanEngineer ( ) ; begin
60335: LD_INT 0
60337: PPUSH
// uc_nation := 0 ;
60338: LD_ADDR_OWVAR 21
60342: PUSH
60343: LD_INT 0
60345: ST_TO_ADDR
// hc_sex := sex_male ;
60346: LD_ADDR_OWVAR 27
60350: PUSH
60351: LD_INT 1
60353: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60354: LD_ADDR_OWVAR 28
60358: PUSH
60359: LD_INT 16
60361: ST_TO_ADDR
// hc_gallery :=  ;
60362: LD_ADDR_OWVAR 33
60366: PUSH
60367: LD_STRING 
60369: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60370: LD_ADDR_OWVAR 31
60374: PUSH
60375: LD_INT 0
60377: PPUSH
60378: LD_INT 3
60380: PPUSH
60381: CALL_OW 12
60385: PUSH
60386: LD_INT 0
60388: PPUSH
60389: LD_INT 3
60391: PPUSH
60392: CALL_OW 12
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// end ;
60409: LD_VAR 0 1
60413: RET
// export function PrepareApeman ( agressivity ) ; begin
60414: LD_INT 0
60416: PPUSH
// uc_side := 0 ;
60417: LD_ADDR_OWVAR 20
60421: PUSH
60422: LD_INT 0
60424: ST_TO_ADDR
// uc_nation := 0 ;
60425: LD_ADDR_OWVAR 21
60429: PUSH
60430: LD_INT 0
60432: ST_TO_ADDR
// hc_sex := sex_male ;
60433: LD_ADDR_OWVAR 27
60437: PUSH
60438: LD_INT 1
60440: ST_TO_ADDR
// hc_class := class_apeman ;
60441: LD_ADDR_OWVAR 28
60445: PUSH
60446: LD_INT 12
60448: ST_TO_ADDR
// hc_gallery :=  ;
60449: LD_ADDR_OWVAR 33
60453: PUSH
60454: LD_STRING 
60456: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60457: LD_ADDR_OWVAR 35
60461: PUSH
60462: LD_VAR 0 1
60466: NEG
60467: PPUSH
60468: LD_VAR 0 1
60472: PPUSH
60473: CALL_OW 12
60477: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60478: LD_ADDR_OWVAR 31
60482: PUSH
60483: LD_INT 0
60485: PPUSH
60486: LD_INT 3
60488: PPUSH
60489: CALL_OW 12
60493: PUSH
60494: LD_INT 0
60496: PPUSH
60497: LD_INT 3
60499: PPUSH
60500: CALL_OW 12
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 2
60521: RET
// export function PrepareTiger ( agressivity ) ; begin
60522: LD_INT 0
60524: PPUSH
// uc_side := 0 ;
60525: LD_ADDR_OWVAR 20
60529: PUSH
60530: LD_INT 0
60532: ST_TO_ADDR
// uc_nation := 0 ;
60533: LD_ADDR_OWVAR 21
60537: PUSH
60538: LD_INT 0
60540: ST_TO_ADDR
// hc_class := class_tiger ;
60541: LD_ADDR_OWVAR 28
60545: PUSH
60546: LD_INT 14
60548: ST_TO_ADDR
// hc_gallery :=  ;
60549: LD_ADDR_OWVAR 33
60553: PUSH
60554: LD_STRING 
60556: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60557: LD_ADDR_OWVAR 35
60561: PUSH
60562: LD_VAR 0 1
60566: NEG
60567: PPUSH
60568: LD_VAR 0 1
60572: PPUSH
60573: CALL_OW 12
60577: ST_TO_ADDR
// end ;
60578: LD_VAR 0 2
60582: RET
// export function PrepareEnchidna ( ) ; begin
60583: LD_INT 0
60585: PPUSH
// uc_side := 0 ;
60586: LD_ADDR_OWVAR 20
60590: PUSH
60591: LD_INT 0
60593: ST_TO_ADDR
// uc_nation := 0 ;
60594: LD_ADDR_OWVAR 21
60598: PUSH
60599: LD_INT 0
60601: ST_TO_ADDR
// hc_class := class_baggie ;
60602: LD_ADDR_OWVAR 28
60606: PUSH
60607: LD_INT 13
60609: ST_TO_ADDR
// hc_gallery :=  ;
60610: LD_ADDR_OWVAR 33
60614: PUSH
60615: LD_STRING 
60617: ST_TO_ADDR
// end ;
60618: LD_VAR 0 1
60622: RET
// export function PrepareFrog ( ) ; begin
60623: LD_INT 0
60625: PPUSH
// uc_side := 0 ;
60626: LD_ADDR_OWVAR 20
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// uc_nation := 0 ;
60634: LD_ADDR_OWVAR 21
60638: PUSH
60639: LD_INT 0
60641: ST_TO_ADDR
// hc_class := class_frog ;
60642: LD_ADDR_OWVAR 28
60646: PUSH
60647: LD_INT 19
60649: ST_TO_ADDR
// hc_gallery :=  ;
60650: LD_ADDR_OWVAR 33
60654: PUSH
60655: LD_STRING 
60657: ST_TO_ADDR
// end ;
60658: LD_VAR 0 1
60662: RET
// export function PrepareFish ( ) ; begin
60663: LD_INT 0
60665: PPUSH
// uc_side := 0 ;
60666: LD_ADDR_OWVAR 20
60670: PUSH
60671: LD_INT 0
60673: ST_TO_ADDR
// uc_nation := 0 ;
60674: LD_ADDR_OWVAR 21
60678: PUSH
60679: LD_INT 0
60681: ST_TO_ADDR
// hc_class := class_fish ;
60682: LD_ADDR_OWVAR 28
60686: PUSH
60687: LD_INT 20
60689: ST_TO_ADDR
// hc_gallery :=  ;
60690: LD_ADDR_OWVAR 33
60694: PUSH
60695: LD_STRING 
60697: ST_TO_ADDR
// end ;
60698: LD_VAR 0 1
60702: RET
// export function PrepareBird ( ) ; begin
60703: LD_INT 0
60705: PPUSH
// uc_side := 0 ;
60706: LD_ADDR_OWVAR 20
60710: PUSH
60711: LD_INT 0
60713: ST_TO_ADDR
// uc_nation := 0 ;
60714: LD_ADDR_OWVAR 21
60718: PUSH
60719: LD_INT 0
60721: ST_TO_ADDR
// hc_class := class_phororhacos ;
60722: LD_ADDR_OWVAR 28
60726: PUSH
60727: LD_INT 18
60729: ST_TO_ADDR
// hc_gallery :=  ;
60730: LD_ADDR_OWVAR 33
60734: PUSH
60735: LD_STRING 
60737: ST_TO_ADDR
// end ;
60738: LD_VAR 0 1
60742: RET
// export function PrepareHorse ( ) ; begin
60743: LD_INT 0
60745: PPUSH
// uc_side := 0 ;
60746: LD_ADDR_OWVAR 20
60750: PUSH
60751: LD_INT 0
60753: ST_TO_ADDR
// uc_nation := 0 ;
60754: LD_ADDR_OWVAR 21
60758: PUSH
60759: LD_INT 0
60761: ST_TO_ADDR
// hc_class := class_horse ;
60762: LD_ADDR_OWVAR 28
60766: PUSH
60767: LD_INT 21
60769: ST_TO_ADDR
// hc_gallery :=  ;
60770: LD_ADDR_OWVAR 33
60774: PUSH
60775: LD_STRING 
60777: ST_TO_ADDR
// end ;
60778: LD_VAR 0 1
60782: RET
// export function PrepareMastodont ( ) ; begin
60783: LD_INT 0
60785: PPUSH
// uc_side := 0 ;
60786: LD_ADDR_OWVAR 20
60790: PUSH
60791: LD_INT 0
60793: ST_TO_ADDR
// uc_nation := 0 ;
60794: LD_ADDR_OWVAR 21
60798: PUSH
60799: LD_INT 0
60801: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60802: LD_ADDR_OWVAR 37
60806: PUSH
60807: LD_INT 31
60809: ST_TO_ADDR
// vc_control := control_rider ;
60810: LD_ADDR_OWVAR 38
60814: PUSH
60815: LD_INT 4
60817: ST_TO_ADDR
// end ;
60818: LD_VAR 0 1
60822: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60823: LD_INT 0
60825: PPUSH
60826: PPUSH
60827: PPUSH
// uc_side = 0 ;
60828: LD_ADDR_OWVAR 20
60832: PUSH
60833: LD_INT 0
60835: ST_TO_ADDR
// uc_nation = 0 ;
60836: LD_ADDR_OWVAR 21
60840: PUSH
60841: LD_INT 0
60843: ST_TO_ADDR
// InitHc_All ( ) ;
60844: CALL_OW 584
// InitVc ;
60848: CALL_OW 20
// if mastodonts then
60852: LD_VAR 0 6
60856: IFFALSE 60923
// for i = 1 to mastodonts do
60858: LD_ADDR_VAR 0 11
60862: PUSH
60863: DOUBLE
60864: LD_INT 1
60866: DEC
60867: ST_TO_ADDR
60868: LD_VAR 0 6
60872: PUSH
60873: FOR_TO
60874: IFFALSE 60921
// begin vc_chassis := 31 ;
60876: LD_ADDR_OWVAR 37
60880: PUSH
60881: LD_INT 31
60883: ST_TO_ADDR
// vc_control := control_rider ;
60884: LD_ADDR_OWVAR 38
60888: PUSH
60889: LD_INT 4
60891: ST_TO_ADDR
// animal := CreateVehicle ;
60892: LD_ADDR_VAR 0 12
60896: PUSH
60897: CALL_OW 45
60901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60902: LD_VAR 0 12
60906: PPUSH
60907: LD_VAR 0 8
60911: PPUSH
60912: LD_INT 0
60914: PPUSH
60915: CALL 63058 0 3
// end ;
60919: GO 60873
60921: POP
60922: POP
// if horses then
60923: LD_VAR 0 5
60927: IFFALSE 60994
// for i = 1 to horses do
60929: LD_ADDR_VAR 0 11
60933: PUSH
60934: DOUBLE
60935: LD_INT 1
60937: DEC
60938: ST_TO_ADDR
60939: LD_VAR 0 5
60943: PUSH
60944: FOR_TO
60945: IFFALSE 60992
// begin hc_class := 21 ;
60947: LD_ADDR_OWVAR 28
60951: PUSH
60952: LD_INT 21
60954: ST_TO_ADDR
// hc_gallery :=  ;
60955: LD_ADDR_OWVAR 33
60959: PUSH
60960: LD_STRING 
60962: ST_TO_ADDR
// animal := CreateHuman ;
60963: LD_ADDR_VAR 0 12
60967: PUSH
60968: CALL_OW 44
60972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60973: LD_VAR 0 12
60977: PPUSH
60978: LD_VAR 0 8
60982: PPUSH
60983: LD_INT 0
60985: PPUSH
60986: CALL 63058 0 3
// end ;
60990: GO 60944
60992: POP
60993: POP
// if birds then
60994: LD_VAR 0 1
60998: IFFALSE 61065
// for i = 1 to birds do
61000: LD_ADDR_VAR 0 11
61004: PUSH
61005: DOUBLE
61006: LD_INT 1
61008: DEC
61009: ST_TO_ADDR
61010: LD_VAR 0 1
61014: PUSH
61015: FOR_TO
61016: IFFALSE 61063
// begin hc_class = 18 ;
61018: LD_ADDR_OWVAR 28
61022: PUSH
61023: LD_INT 18
61025: ST_TO_ADDR
// hc_gallery =  ;
61026: LD_ADDR_OWVAR 33
61030: PUSH
61031: LD_STRING 
61033: ST_TO_ADDR
// animal := CreateHuman ;
61034: LD_ADDR_VAR 0 12
61038: PUSH
61039: CALL_OW 44
61043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61044: LD_VAR 0 12
61048: PPUSH
61049: LD_VAR 0 8
61053: PPUSH
61054: LD_INT 0
61056: PPUSH
61057: CALL 63058 0 3
// end ;
61061: GO 61015
61063: POP
61064: POP
// if tigers then
61065: LD_VAR 0 2
61069: IFFALSE 61153
// for i = 1 to tigers do
61071: LD_ADDR_VAR 0 11
61075: PUSH
61076: DOUBLE
61077: LD_INT 1
61079: DEC
61080: ST_TO_ADDR
61081: LD_VAR 0 2
61085: PUSH
61086: FOR_TO
61087: IFFALSE 61151
// begin hc_class = class_tiger ;
61089: LD_ADDR_OWVAR 28
61093: PUSH
61094: LD_INT 14
61096: ST_TO_ADDR
// hc_gallery =  ;
61097: LD_ADDR_OWVAR 33
61101: PUSH
61102: LD_STRING 
61104: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61105: LD_ADDR_OWVAR 35
61109: PUSH
61110: LD_INT 7
61112: NEG
61113: PPUSH
61114: LD_INT 7
61116: PPUSH
61117: CALL_OW 12
61121: ST_TO_ADDR
// animal := CreateHuman ;
61122: LD_ADDR_VAR 0 12
61126: PUSH
61127: CALL_OW 44
61131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61132: LD_VAR 0 12
61136: PPUSH
61137: LD_VAR 0 8
61141: PPUSH
61142: LD_INT 0
61144: PPUSH
61145: CALL 63058 0 3
// end ;
61149: GO 61086
61151: POP
61152: POP
// if apemans then
61153: LD_VAR 0 3
61157: IFFALSE 61280
// for i = 1 to apemans do
61159: LD_ADDR_VAR 0 11
61163: PUSH
61164: DOUBLE
61165: LD_INT 1
61167: DEC
61168: ST_TO_ADDR
61169: LD_VAR 0 3
61173: PUSH
61174: FOR_TO
61175: IFFALSE 61278
// begin hc_class = class_apeman ;
61177: LD_ADDR_OWVAR 28
61181: PUSH
61182: LD_INT 12
61184: ST_TO_ADDR
// hc_gallery =  ;
61185: LD_ADDR_OWVAR 33
61189: PUSH
61190: LD_STRING 
61192: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61193: LD_ADDR_OWVAR 35
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PPUSH
61202: LD_INT 2
61204: PPUSH
61205: CALL_OW 12
61209: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61210: LD_ADDR_OWVAR 31
61214: PUSH
61215: LD_INT 1
61217: PPUSH
61218: LD_INT 3
61220: PPUSH
61221: CALL_OW 12
61225: PUSH
61226: LD_INT 1
61228: PPUSH
61229: LD_INT 3
61231: PPUSH
61232: CALL_OW 12
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: ST_TO_ADDR
// animal := CreateHuman ;
61249: LD_ADDR_VAR 0 12
61253: PUSH
61254: CALL_OW 44
61258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61259: LD_VAR 0 12
61263: PPUSH
61264: LD_VAR 0 8
61268: PPUSH
61269: LD_INT 0
61271: PPUSH
61272: CALL 63058 0 3
// end ;
61276: GO 61174
61278: POP
61279: POP
// if enchidnas then
61280: LD_VAR 0 4
61284: IFFALSE 61351
// for i = 1 to enchidnas do
61286: LD_ADDR_VAR 0 11
61290: PUSH
61291: DOUBLE
61292: LD_INT 1
61294: DEC
61295: ST_TO_ADDR
61296: LD_VAR 0 4
61300: PUSH
61301: FOR_TO
61302: IFFALSE 61349
// begin hc_class = 13 ;
61304: LD_ADDR_OWVAR 28
61308: PUSH
61309: LD_INT 13
61311: ST_TO_ADDR
// hc_gallery =  ;
61312: LD_ADDR_OWVAR 33
61316: PUSH
61317: LD_STRING 
61319: ST_TO_ADDR
// animal := CreateHuman ;
61320: LD_ADDR_VAR 0 12
61324: PUSH
61325: CALL_OW 44
61329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61330: LD_VAR 0 12
61334: PPUSH
61335: LD_VAR 0 8
61339: PPUSH
61340: LD_INT 0
61342: PPUSH
61343: CALL 63058 0 3
// end ;
61347: GO 61301
61349: POP
61350: POP
// if fishes then
61351: LD_VAR 0 7
61355: IFFALSE 61422
// for i = 1 to fishes do
61357: LD_ADDR_VAR 0 11
61361: PUSH
61362: DOUBLE
61363: LD_INT 1
61365: DEC
61366: ST_TO_ADDR
61367: LD_VAR 0 7
61371: PUSH
61372: FOR_TO
61373: IFFALSE 61420
// begin hc_class = 20 ;
61375: LD_ADDR_OWVAR 28
61379: PUSH
61380: LD_INT 20
61382: ST_TO_ADDR
// hc_gallery =  ;
61383: LD_ADDR_OWVAR 33
61387: PUSH
61388: LD_STRING 
61390: ST_TO_ADDR
// animal := CreateHuman ;
61391: LD_ADDR_VAR 0 12
61395: PUSH
61396: CALL_OW 44
61400: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61401: LD_VAR 0 12
61405: PPUSH
61406: LD_VAR 0 9
61410: PPUSH
61411: LD_INT 0
61413: PPUSH
61414: CALL 63058 0 3
// end ;
61418: GO 61372
61420: POP
61421: POP
// end ;
61422: LD_VAR 0 10
61426: RET
// export function WantHeal ( sci , unit ) ; begin
61427: LD_INT 0
61429: PPUSH
// if GetTaskList ( sci ) > 0 then
61430: LD_VAR 0 1
61434: PPUSH
61435: CALL_OW 437
61439: PUSH
61440: LD_INT 0
61442: GREATER
61443: IFFALSE 61513
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61445: LD_VAR 0 1
61449: PPUSH
61450: CALL_OW 437
61454: PUSH
61455: LD_INT 1
61457: ARRAY
61458: PUSH
61459: LD_INT 1
61461: ARRAY
61462: PUSH
61463: LD_STRING l
61465: EQUAL
61466: PUSH
61467: LD_VAR 0 1
61471: PPUSH
61472: CALL_OW 437
61476: PUSH
61477: LD_INT 1
61479: ARRAY
61480: PUSH
61481: LD_INT 4
61483: ARRAY
61484: PUSH
61485: LD_VAR 0 2
61489: EQUAL
61490: AND
61491: IFFALSE 61503
// result := true else
61493: LD_ADDR_VAR 0 3
61497: PUSH
61498: LD_INT 1
61500: ST_TO_ADDR
61501: GO 61511
// result := false ;
61503: LD_ADDR_VAR 0 3
61507: PUSH
61508: LD_INT 0
61510: ST_TO_ADDR
// end else
61511: GO 61521
// result := false ;
61513: LD_ADDR_VAR 0 3
61517: PUSH
61518: LD_INT 0
61520: ST_TO_ADDR
// end ;
61521: LD_VAR 0 3
61525: RET
// export function HealTarget ( sci ) ; begin
61526: LD_INT 0
61528: PPUSH
// if not sci then
61529: LD_VAR 0 1
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61603
// result := 0 ;
61538: LD_ADDR_VAR 0 2
61542: PUSH
61543: LD_INT 0
61545: ST_TO_ADDR
// if GetTaskList ( sci ) then
61546: LD_VAR 0 1
61550: PPUSH
61551: CALL_OW 437
61555: IFFALSE 61603
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61557: LD_VAR 0 1
61561: PPUSH
61562: CALL_OW 437
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PUSH
61571: LD_INT 1
61573: ARRAY
61574: PUSH
61575: LD_STRING l
61577: EQUAL
61578: IFFALSE 61603
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 437
61594: PUSH
61595: LD_INT 1
61597: ARRAY
61598: PUSH
61599: LD_INT 4
61601: ARRAY
61602: ST_TO_ADDR
// end ;
61603: LD_VAR 0 2
61607: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61608: LD_INT 0
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if not base_units then
61614: LD_VAR 0 1
61618: NOT
61619: IFFALSE 61623
// exit ;
61621: GO 61710
// result := false ;
61623: LD_ADDR_VAR 0 2
61627: PUSH
61628: LD_INT 0
61630: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61631: LD_ADDR_VAR 0 5
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_INT 21
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PPUSH
61651: CALL_OW 72
61655: ST_TO_ADDR
// if not tmp then
61656: LD_VAR 0 5
61660: NOT
61661: IFFALSE 61665
// exit ;
61663: GO 61710
// for i in tmp do
61665: LD_ADDR_VAR 0 3
61669: PUSH
61670: LD_VAR 0 5
61674: PUSH
61675: FOR_IN
61676: IFFALSE 61708
// begin result := EnemyInRange ( i , 22 ) ;
61678: LD_ADDR_VAR 0 2
61682: PUSH
61683: LD_VAR 0 3
61687: PPUSH
61688: LD_INT 22
61690: PPUSH
61691: CALL 59323 0 2
61695: ST_TO_ADDR
// if result then
61696: LD_VAR 0 2
61700: IFFALSE 61706
// exit ;
61702: POP
61703: POP
61704: GO 61710
// end ;
61706: GO 61675
61708: POP
61709: POP
// end ;
61710: LD_VAR 0 2
61714: RET
// export function FilterByTag ( units , tag ) ; begin
61715: LD_INT 0
61717: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61718: LD_ADDR_VAR 0 3
61722: PUSH
61723: LD_VAR 0 1
61727: PPUSH
61728: LD_INT 120
61730: PUSH
61731: LD_VAR 0 2
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PPUSH
61740: CALL_OW 72
61744: ST_TO_ADDR
// end ;
61745: LD_VAR 0 3
61749: RET
// export function IsDriver ( un ) ; begin
61750: LD_INT 0
61752: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61753: LD_ADDR_VAR 0 2
61757: PUSH
61758: LD_VAR 0 1
61762: PUSH
61763: LD_INT 55
61765: PUSH
61766: EMPTY
61767: LIST
61768: PPUSH
61769: CALL_OW 69
61773: IN
61774: ST_TO_ADDR
// end ;
61775: LD_VAR 0 2
61779: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61780: LD_INT 0
61782: PPUSH
61783: PPUSH
// list := [ ] ;
61784: LD_ADDR_VAR 0 5
61788: PUSH
61789: EMPTY
61790: ST_TO_ADDR
// case d of 0 :
61791: LD_VAR 0 3
61795: PUSH
61796: LD_INT 0
61798: DOUBLE
61799: EQUAL
61800: IFTRUE 61804
61802: GO 61937
61804: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61805: LD_ADDR_VAR 0 5
61809: PUSH
61810: LD_VAR 0 1
61814: PUSH
61815: LD_INT 4
61817: MINUS
61818: PUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_INT 4
61826: MINUS
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 1
61840: PUSH
61841: LD_INT 3
61843: MINUS
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: PUSH
61858: LD_VAR 0 1
61862: PUSH
61863: LD_INT 4
61865: PLUS
61866: PUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: PUSH
61880: LD_VAR 0 1
61884: PUSH
61885: LD_INT 3
61887: PLUS
61888: PUSH
61889: LD_VAR 0 2
61893: PUSH
61894: LD_INT 3
61896: PLUS
61897: PUSH
61898: LD_INT 5
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: PUSH
61906: LD_VAR 0 1
61910: PUSH
61911: LD_VAR 0 2
61915: PUSH
61916: LD_INT 4
61918: PLUS
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: ST_TO_ADDR
// end ; 1 :
61935: GO 62635
61937: LD_INT 1
61939: DOUBLE
61940: EQUAL
61941: IFTRUE 61945
61943: GO 62078
61945: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61946: LD_ADDR_VAR 0 5
61950: PUSH
61951: LD_VAR 0 1
61955: PUSH
61956: LD_VAR 0 2
61960: PUSH
61961: LD_INT 4
61963: MINUS
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: PUSH
61973: LD_VAR 0 1
61977: PUSH
61978: LD_INT 3
61980: MINUS
61981: PUSH
61982: LD_VAR 0 2
61986: PUSH
61987: LD_INT 3
61989: MINUS
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: PUSH
61999: LD_VAR 0 1
62003: PUSH
62004: LD_INT 4
62006: MINUS
62007: PUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 1
62025: PUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 3
62033: PLUS
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: PUSH
62043: LD_VAR 0 1
62047: PUSH
62048: LD_INT 4
62050: PLUS
62051: PUSH
62052: LD_VAR 0 2
62056: PUSH
62057: LD_INT 4
62059: PLUS
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// end ; 2 :
62076: GO 62635
62078: LD_INT 2
62080: DOUBLE
62081: EQUAL
62082: IFTRUE 62086
62084: GO 62215
62086: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62087: LD_ADDR_VAR 0 5
62091: PUSH
62092: LD_VAR 0 1
62096: PUSH
62097: LD_VAR 0 2
62101: PUSH
62102: LD_INT 3
62104: MINUS
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: PUSH
62114: LD_VAR 0 1
62118: PUSH
62119: LD_INT 4
62121: PLUS
62122: PUSH
62123: LD_VAR 0 2
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: PUSH
62136: LD_VAR 0 1
62140: PUSH
62141: LD_VAR 0 2
62145: PUSH
62146: LD_INT 4
62148: PLUS
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: PUSH
62158: LD_VAR 0 1
62162: PUSH
62163: LD_INT 3
62165: MINUS
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: PUSH
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 4
62187: MINUS
62188: PUSH
62189: LD_VAR 0 2
62193: PUSH
62194: LD_INT 4
62196: MINUS
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// end ; 3 :
62213: GO 62635
62215: LD_INT 3
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62223
62221: GO 62356
62223: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62224: LD_ADDR_VAR 0 5
62228: PUSH
62229: LD_VAR 0 1
62233: PUSH
62234: LD_INT 3
62236: PLUS
62237: PUSH
62238: LD_VAR 0 2
62242: PUSH
62243: LD_INT 4
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: PUSH
62251: LD_VAR 0 1
62255: PUSH
62256: LD_INT 4
62258: PLUS
62259: PUSH
62260: LD_VAR 0 2
62264: PUSH
62265: LD_INT 4
62267: PLUS
62268: PUSH
62269: LD_INT 5
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: PUSH
62277: LD_VAR 0 1
62281: PUSH
62282: LD_INT 4
62284: MINUS
62285: PUSH
62286: LD_VAR 0 2
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: PUSH
62299: LD_VAR 0 1
62303: PUSH
62304: LD_VAR 0 2
62308: PUSH
62309: LD_INT 4
62311: MINUS
62312: PUSH
62313: LD_INT 3
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: PUSH
62321: LD_VAR 0 1
62325: PUSH
62326: LD_INT 3
62328: MINUS
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 3
62337: MINUS
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: ST_TO_ADDR
// end ; 4 :
62354: GO 62635
62356: LD_INT 4
62358: DOUBLE
62359: EQUAL
62360: IFTRUE 62364
62362: GO 62497
62364: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62365: LD_ADDR_VAR 0 5
62369: PUSH
62370: LD_VAR 0 1
62374: PUSH
62375: LD_VAR 0 2
62379: PUSH
62380: LD_INT 4
62382: PLUS
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: LIST
62391: PUSH
62392: LD_VAR 0 1
62396: PUSH
62397: LD_INT 3
62399: PLUS
62400: PUSH
62401: LD_VAR 0 2
62405: PUSH
62406: LD_INT 3
62408: PLUS
62409: PUSH
62410: LD_INT 5
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: PUSH
62418: LD_VAR 0 1
62422: PUSH
62423: LD_INT 4
62425: PLUS
62426: PUSH
62427: LD_VAR 0 2
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: PUSH
62440: LD_VAR 0 1
62444: PUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 3
62452: MINUS
62453: PUSH
62454: LD_INT 3
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: PUSH
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 4
62469: MINUS
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_INT 4
62478: MINUS
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: ST_TO_ADDR
// end ; 5 :
62495: GO 62635
62497: LD_INT 5
62499: DOUBLE
62500: EQUAL
62501: IFTRUE 62505
62503: GO 62634
62505: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62506: LD_ADDR_VAR 0 5
62510: PUSH
62511: LD_VAR 0 1
62515: PUSH
62516: LD_INT 4
62518: MINUS
62519: PUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: PUSH
62533: LD_VAR 0 1
62537: PUSH
62538: LD_VAR 0 2
62542: PUSH
62543: LD_INT 4
62545: MINUS
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: LIST
62554: PUSH
62555: LD_VAR 0 1
62559: PUSH
62560: LD_INT 4
62562: PLUS
62563: PUSH
62564: LD_VAR 0 2
62568: PUSH
62569: LD_INT 4
62571: PLUS
62572: PUSH
62573: LD_INT 5
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: PUSH
62581: LD_VAR 0 1
62585: PUSH
62586: LD_INT 3
62588: PLUS
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 4
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: PUSH
62603: LD_VAR 0 1
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_INT 3
62615: PLUS
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// end ; end ;
62632: GO 62635
62634: POP
// result := list ;
62635: LD_ADDR_VAR 0 4
62639: PUSH
62640: LD_VAR 0 5
62644: ST_TO_ADDR
// end ;
62645: LD_VAR 0 4
62649: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62650: LD_INT 0
62652: PPUSH
62653: PPUSH
62654: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62655: LD_VAR 0 1
62659: NOT
62660: PUSH
62661: LD_VAR 0 2
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 4
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: IN
62684: NOT
62685: OR
62686: IFFALSE 62690
// exit ;
62688: GO 62782
// tmp := [ ] ;
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: EMPTY
62696: ST_TO_ADDR
// for i in units do
62697: LD_ADDR_VAR 0 4
62701: PUSH
62702: LD_VAR 0 1
62706: PUSH
62707: FOR_IN
62708: IFFALSE 62751
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62710: LD_ADDR_VAR 0 5
62714: PUSH
62715: LD_VAR 0 5
62719: PPUSH
62720: LD_VAR 0 5
62724: PUSH
62725: LD_INT 1
62727: PLUS
62728: PPUSH
62729: LD_VAR 0 4
62733: PPUSH
62734: LD_VAR 0 2
62738: PPUSH
62739: CALL_OW 259
62743: PPUSH
62744: CALL_OW 2
62748: ST_TO_ADDR
62749: GO 62707
62751: POP
62752: POP
// if not tmp then
62753: LD_VAR 0 5
62757: NOT
62758: IFFALSE 62762
// exit ;
62760: GO 62782
// result := SortListByListDesc ( units , tmp ) ;
62762: LD_ADDR_VAR 0 3
62766: PUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: LD_VAR 0 5
62776: PPUSH
62777: CALL_OW 77
62781: ST_TO_ADDR
// end ;
62782: LD_VAR 0 3
62786: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
62791: PPUSH
// result := false ;
62792: LD_ADDR_VAR 0 3
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// x := GetX ( building ) ;
62800: LD_ADDR_VAR 0 4
62804: PUSH
62805: LD_VAR 0 2
62809: PPUSH
62810: CALL_OW 250
62814: ST_TO_ADDR
// y := GetY ( building ) ;
62815: LD_ADDR_VAR 0 5
62819: PUSH
62820: LD_VAR 0 2
62824: PPUSH
62825: CALL_OW 251
62829: ST_TO_ADDR
// if not building or not x or not y then
62830: LD_VAR 0 2
62834: NOT
62835: PUSH
62836: LD_VAR 0 4
62840: NOT
62841: OR
62842: PUSH
62843: LD_VAR 0 5
62847: NOT
62848: OR
62849: IFFALSE 62853
// exit ;
62851: GO 62945
// if GetTaskList ( unit ) then
62853: LD_VAR 0 1
62857: PPUSH
62858: CALL_OW 437
62862: IFFALSE 62945
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62864: LD_STRING e
62866: PUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 437
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: LD_INT 1
62883: ARRAY
62884: EQUAL
62885: PUSH
62886: LD_VAR 0 4
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 437
62900: PUSH
62901: LD_INT 1
62903: ARRAY
62904: PUSH
62905: LD_INT 2
62907: ARRAY
62908: EQUAL
62909: AND
62910: PUSH
62911: LD_VAR 0 5
62915: PUSH
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL_OW 437
62925: PUSH
62926: LD_INT 1
62928: ARRAY
62929: PUSH
62930: LD_INT 3
62932: ARRAY
62933: EQUAL
62934: AND
62935: IFFALSE 62945
// result := true end ;
62937: LD_ADDR_VAR 0 3
62941: PUSH
62942: LD_INT 1
62944: ST_TO_ADDR
// end ;
62945: LD_VAR 0 3
62949: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62950: LD_INT 0
62952: PPUSH
// result := false ;
62953: LD_ADDR_VAR 0 4
62957: PUSH
62958: LD_INT 0
62960: ST_TO_ADDR
// if GetTaskList ( unit ) then
62961: LD_VAR 0 1
62965: PPUSH
62966: CALL_OW 437
62970: IFFALSE 63053
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62972: LD_STRING M
62974: PUSH
62975: LD_VAR 0 1
62979: PPUSH
62980: CALL_OW 437
62984: PUSH
62985: LD_INT 1
62987: ARRAY
62988: PUSH
62989: LD_INT 1
62991: ARRAY
62992: EQUAL
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 437
63008: PUSH
63009: LD_INT 1
63011: ARRAY
63012: PUSH
63013: LD_INT 2
63015: ARRAY
63016: EQUAL
63017: AND
63018: PUSH
63019: LD_VAR 0 3
63023: PUSH
63024: LD_VAR 0 1
63028: PPUSH
63029: CALL_OW 437
63033: PUSH
63034: LD_INT 1
63036: ARRAY
63037: PUSH
63038: LD_INT 3
63040: ARRAY
63041: EQUAL
63042: AND
63043: IFFALSE 63053
// result := true ;
63045: LD_ADDR_VAR 0 4
63049: PUSH
63050: LD_INT 1
63052: ST_TO_ADDR
// end ; end ;
63053: LD_VAR 0 4
63057: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63058: LD_INT 0
63060: PPUSH
63061: PPUSH
63062: PPUSH
63063: PPUSH
// if not unit or not area then
63064: LD_VAR 0 1
63068: NOT
63069: PUSH
63070: LD_VAR 0 2
63074: NOT
63075: OR
63076: IFFALSE 63080
// exit ;
63078: GO 63244
// tmp := AreaToList ( area , i ) ;
63080: LD_ADDR_VAR 0 6
63084: PUSH
63085: LD_VAR 0 2
63089: PPUSH
63090: LD_VAR 0 5
63094: PPUSH
63095: CALL_OW 517
63099: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63100: LD_ADDR_VAR 0 5
63104: PUSH
63105: DOUBLE
63106: LD_INT 1
63108: DEC
63109: ST_TO_ADDR
63110: LD_VAR 0 6
63114: PUSH
63115: LD_INT 1
63117: ARRAY
63118: PUSH
63119: FOR_TO
63120: IFFALSE 63242
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63122: LD_ADDR_VAR 0 7
63126: PUSH
63127: LD_VAR 0 6
63131: PUSH
63132: LD_INT 1
63134: ARRAY
63135: PUSH
63136: LD_VAR 0 5
63140: ARRAY
63141: PUSH
63142: LD_VAR 0 6
63146: PUSH
63147: LD_INT 2
63149: ARRAY
63150: PUSH
63151: LD_VAR 0 5
63155: ARRAY
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63161: LD_VAR 0 7
63165: PUSH
63166: LD_INT 1
63168: ARRAY
63169: PPUSH
63170: LD_VAR 0 7
63174: PUSH
63175: LD_INT 2
63177: ARRAY
63178: PPUSH
63179: CALL_OW 428
63183: PUSH
63184: LD_INT 0
63186: EQUAL
63187: IFFALSE 63240
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63189: LD_VAR 0 1
63193: PPUSH
63194: LD_VAR 0 7
63198: PUSH
63199: LD_INT 1
63201: ARRAY
63202: PPUSH
63203: LD_VAR 0 7
63207: PUSH
63208: LD_INT 2
63210: ARRAY
63211: PPUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: CALL_OW 48
// result := IsPlaced ( unit ) ;
63221: LD_ADDR_VAR 0 4
63225: PUSH
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 305
63235: ST_TO_ADDR
// exit ;
63236: POP
63237: POP
63238: GO 63244
// end ; end ;
63240: GO 63119
63242: POP
63243: POP
// end ;
63244: LD_VAR 0 4
63248: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63249: LD_INT 0
63251: PPUSH
63252: PPUSH
63253: PPUSH
// if not side or side > 8 then
63254: LD_VAR 0 1
63258: NOT
63259: PUSH
63260: LD_VAR 0 1
63264: PUSH
63265: LD_INT 8
63267: GREATER
63268: OR
63269: IFFALSE 63273
// exit ;
63271: GO 63460
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63273: LD_ADDR_VAR 0 4
63277: PUSH
63278: LD_INT 22
63280: PUSH
63281: LD_VAR 0 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 21
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PPUSH
63304: CALL_OW 69
63308: ST_TO_ADDR
// if not tmp then
63309: LD_VAR 0 4
63313: NOT
63314: IFFALSE 63318
// exit ;
63316: GO 63460
// enable_addtolog := true ;
63318: LD_ADDR_OWVAR 81
63322: PUSH
63323: LD_INT 1
63325: ST_TO_ADDR
// AddToLog ( [ ) ;
63326: LD_STRING [
63328: PPUSH
63329: CALL_OW 561
// for i in tmp do
63333: LD_ADDR_VAR 0 3
63337: PUSH
63338: LD_VAR 0 4
63342: PUSH
63343: FOR_IN
63344: IFFALSE 63451
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63346: LD_STRING [
63348: PUSH
63349: LD_VAR 0 3
63353: PPUSH
63354: CALL_OW 266
63358: STR
63359: PUSH
63360: LD_STRING , 
63362: STR
63363: PUSH
63364: LD_VAR 0 3
63368: PPUSH
63369: CALL_OW 250
63373: STR
63374: PUSH
63375: LD_STRING , 
63377: STR
63378: PUSH
63379: LD_VAR 0 3
63383: PPUSH
63384: CALL_OW 251
63388: STR
63389: PUSH
63390: LD_STRING , 
63392: STR
63393: PUSH
63394: LD_VAR 0 3
63398: PPUSH
63399: CALL_OW 254
63403: STR
63404: PUSH
63405: LD_STRING , 
63407: STR
63408: PUSH
63409: LD_VAR 0 3
63413: PPUSH
63414: LD_INT 1
63416: PPUSH
63417: CALL_OW 268
63421: STR
63422: PUSH
63423: LD_STRING , 
63425: STR
63426: PUSH
63427: LD_VAR 0 3
63431: PPUSH
63432: LD_INT 2
63434: PPUSH
63435: CALL_OW 268
63439: STR
63440: PUSH
63441: LD_STRING ],
63443: STR
63444: PPUSH
63445: CALL_OW 561
// end ;
63449: GO 63343
63451: POP
63452: POP
// AddToLog ( ]; ) ;
63453: LD_STRING ];
63455: PPUSH
63456: CALL_OW 561
// end ;
63460: LD_VAR 0 2
63464: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63465: LD_INT 0
63467: PPUSH
63468: PPUSH
63469: PPUSH
63470: PPUSH
63471: PPUSH
// if not area or not rate or not max then
63472: LD_VAR 0 1
63476: NOT
63477: PUSH
63478: LD_VAR 0 2
63482: NOT
63483: OR
63484: PUSH
63485: LD_VAR 0 4
63489: NOT
63490: OR
63491: IFFALSE 63495
// exit ;
63493: GO 63684
// while 1 do
63495: LD_INT 1
63497: IFFALSE 63684
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63499: LD_ADDR_VAR 0 9
63503: PUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: LD_INT 1
63511: PPUSH
63512: CALL_OW 287
63516: PUSH
63517: LD_INT 10
63519: MUL
63520: ST_TO_ADDR
// r := rate / 10 ;
63521: LD_ADDR_VAR 0 7
63525: PUSH
63526: LD_VAR 0 2
63530: PUSH
63531: LD_INT 10
63533: DIVREAL
63534: ST_TO_ADDR
// time := 1 1$00 ;
63535: LD_ADDR_VAR 0 8
63539: PUSH
63540: LD_INT 2100
63542: ST_TO_ADDR
// if amount < min then
63543: LD_VAR 0 9
63547: PUSH
63548: LD_VAR 0 3
63552: LESS
63553: IFFALSE 63571
// r := r * 2 else
63555: LD_ADDR_VAR 0 7
63559: PUSH
63560: LD_VAR 0 7
63564: PUSH
63565: LD_INT 2
63567: MUL
63568: ST_TO_ADDR
63569: GO 63597
// if amount > max then
63571: LD_VAR 0 9
63575: PUSH
63576: LD_VAR 0 4
63580: GREATER
63581: IFFALSE 63597
// r := r / 2 ;
63583: LD_ADDR_VAR 0 7
63587: PUSH
63588: LD_VAR 0 7
63592: PUSH
63593: LD_INT 2
63595: DIVREAL
63596: ST_TO_ADDR
// time := time / r ;
63597: LD_ADDR_VAR 0 8
63601: PUSH
63602: LD_VAR 0 8
63606: PUSH
63607: LD_VAR 0 7
63611: DIVREAL
63612: ST_TO_ADDR
// if time < 0 then
63613: LD_VAR 0 8
63617: PUSH
63618: LD_INT 0
63620: LESS
63621: IFFALSE 63638
// time := time * - 1 ;
63623: LD_ADDR_VAR 0 8
63627: PUSH
63628: LD_VAR 0 8
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: MUL
63637: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63638: LD_VAR 0 8
63642: PUSH
63643: LD_INT 35
63645: PPUSH
63646: LD_INT 875
63648: PPUSH
63649: CALL_OW 12
63653: PLUS
63654: PPUSH
63655: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63659: LD_INT 1
63661: PPUSH
63662: LD_INT 5
63664: PPUSH
63665: CALL_OW 12
63669: PPUSH
63670: LD_VAR 0 1
63674: PPUSH
63675: LD_INT 1
63677: PPUSH
63678: CALL_OW 55
// end ;
63682: GO 63495
// end ;
63684: LD_VAR 0 5
63688: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63689: LD_INT 0
63691: PPUSH
63692: PPUSH
63693: PPUSH
63694: PPUSH
63695: PPUSH
63696: PPUSH
63697: PPUSH
63698: PPUSH
// if not turrets or not factories then
63699: LD_VAR 0 1
63703: NOT
63704: PUSH
63705: LD_VAR 0 2
63709: NOT
63710: OR
63711: IFFALSE 63715
// exit ;
63713: GO 64022
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63715: LD_ADDR_VAR 0 10
63719: PUSH
63720: LD_INT 5
63722: PUSH
63723: LD_INT 6
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: LD_INT 4
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: LD_INT 5
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 24
63757: PUSH
63758: LD_INT 25
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 23
63767: PUSH
63768: LD_INT 27
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 42
63781: PUSH
63782: LD_INT 43
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 44
63791: PUSH
63792: LD_INT 46
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 45
63801: PUSH
63802: LD_INT 47
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: ST_TO_ADDR
// result := [ ] ;
63819: LD_ADDR_VAR 0 3
63823: PUSH
63824: EMPTY
63825: ST_TO_ADDR
// for i in turrets do
63826: LD_ADDR_VAR 0 4
63830: PUSH
63831: LD_VAR 0 1
63835: PUSH
63836: FOR_IN
63837: IFFALSE 64020
// begin nat := GetNation ( i ) ;
63839: LD_ADDR_VAR 0 7
63843: PUSH
63844: LD_VAR 0 4
63848: PPUSH
63849: CALL_OW 248
63853: ST_TO_ADDR
// weapon := 0 ;
63854: LD_ADDR_VAR 0 8
63858: PUSH
63859: LD_INT 0
63861: ST_TO_ADDR
// if not nat then
63862: LD_VAR 0 7
63866: NOT
63867: IFFALSE 63871
// continue ;
63869: GO 63836
// for j in list [ nat ] do
63871: LD_ADDR_VAR 0 5
63875: PUSH
63876: LD_VAR 0 10
63880: PUSH
63881: LD_VAR 0 7
63885: ARRAY
63886: PUSH
63887: FOR_IN
63888: IFFALSE 63929
// if GetBWeapon ( i ) = j [ 1 ] then
63890: LD_VAR 0 4
63894: PPUSH
63895: CALL_OW 269
63899: PUSH
63900: LD_VAR 0 5
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: EQUAL
63909: IFFALSE 63927
// begin weapon := j [ 2 ] ;
63911: LD_ADDR_VAR 0 8
63915: PUSH
63916: LD_VAR 0 5
63920: PUSH
63921: LD_INT 2
63923: ARRAY
63924: ST_TO_ADDR
// break ;
63925: GO 63929
// end ;
63927: GO 63887
63929: POP
63930: POP
// if not weapon then
63931: LD_VAR 0 8
63935: NOT
63936: IFFALSE 63940
// continue ;
63938: GO 63836
// for k in factories do
63940: LD_ADDR_VAR 0 6
63944: PUSH
63945: LD_VAR 0 2
63949: PUSH
63950: FOR_IN
63951: IFFALSE 64016
// begin weapons := AvailableWeaponList ( k ) ;
63953: LD_ADDR_VAR 0 9
63957: PUSH
63958: LD_VAR 0 6
63962: PPUSH
63963: CALL_OW 478
63967: ST_TO_ADDR
// if not weapons then
63968: LD_VAR 0 9
63972: NOT
63973: IFFALSE 63977
// continue ;
63975: GO 63950
// if weapon in weapons then
63977: LD_VAR 0 8
63981: PUSH
63982: LD_VAR 0 9
63986: IN
63987: IFFALSE 64014
// begin result := [ i , weapon ] ;
63989: LD_ADDR_VAR 0 3
63993: PUSH
63994: LD_VAR 0 4
63998: PUSH
63999: LD_VAR 0 8
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// exit ;
64008: POP
64009: POP
64010: POP
64011: POP
64012: GO 64022
// end ; end ;
64014: GO 63950
64016: POP
64017: POP
// end ;
64018: GO 63836
64020: POP
64021: POP
// end ;
64022: LD_VAR 0 3
64026: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64027: LD_INT 0
64029: PPUSH
// if not side or side > 8 then
64030: LD_VAR 0 3
64034: NOT
64035: PUSH
64036: LD_VAR 0 3
64040: PUSH
64041: LD_INT 8
64043: GREATER
64044: OR
64045: IFFALSE 64049
// exit ;
64047: GO 64108
// if not range then
64049: LD_VAR 0 4
64053: NOT
64054: IFFALSE 64065
// range := - 12 ;
64056: LD_ADDR_VAR 0 4
64060: PUSH
64061: LD_INT 12
64063: NEG
64064: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64065: LD_VAR 0 1
64069: PPUSH
64070: LD_VAR 0 2
64074: PPUSH
64075: LD_VAR 0 3
64079: PPUSH
64080: LD_VAR 0 4
64084: PPUSH
64085: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64089: LD_VAR 0 1
64093: PPUSH
64094: LD_VAR 0 2
64098: PPUSH
64099: LD_VAR 0 3
64103: PPUSH
64104: CALL_OW 331
// end ;
64108: LD_VAR 0 5
64112: RET
// export function Video ( mode ) ; begin
64113: LD_INT 0
64115: PPUSH
// ingame_video = mode ;
64116: LD_ADDR_OWVAR 52
64120: PUSH
64121: LD_VAR 0 1
64125: ST_TO_ADDR
// interface_hidden = mode ;
64126: LD_ADDR_OWVAR 54
64130: PUSH
64131: LD_VAR 0 1
64135: ST_TO_ADDR
// end ;
64136: LD_VAR 0 2
64140: RET
// export function Join ( array , element ) ; begin
64141: LD_INT 0
64143: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64144: LD_ADDR_VAR 0 3
64148: PUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_INT 1
64161: PLUS
64162: PPUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: CALL_OW 1
64172: ST_TO_ADDR
// end ;
64173: LD_VAR 0 3
64177: RET
// export function JoinUnion ( array , element ) ; begin
64178: LD_INT 0
64180: PPUSH
// result := array union element ;
64181: LD_ADDR_VAR 0 3
64185: PUSH
64186: LD_VAR 0 1
64190: PUSH
64191: LD_VAR 0 2
64195: UNION
64196: ST_TO_ADDR
// end ;
64197: LD_VAR 0 3
64201: RET
// export function GetBehemoths ( side ) ; begin
64202: LD_INT 0
64204: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64205: LD_ADDR_VAR 0 2
64209: PUSH
64210: LD_INT 22
64212: PUSH
64213: LD_VAR 0 1
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 31
64224: PUSH
64225: LD_INT 25
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PPUSH
64236: CALL_OW 69
64240: ST_TO_ADDR
// end ;
64241: LD_VAR 0 2
64245: RET
// export function Shuffle ( array ) ; var i , index ; begin
64246: LD_INT 0
64248: PPUSH
64249: PPUSH
64250: PPUSH
// result := [ ] ;
64251: LD_ADDR_VAR 0 2
64255: PUSH
64256: EMPTY
64257: ST_TO_ADDR
// if not array then
64258: LD_VAR 0 1
64262: NOT
64263: IFFALSE 64267
// exit ;
64265: GO 64366
// Randomize ;
64267: CALL_OW 10
// for i = array downto 1 do
64271: LD_ADDR_VAR 0 3
64275: PUSH
64276: DOUBLE
64277: LD_VAR 0 1
64281: INC
64282: ST_TO_ADDR
64283: LD_INT 1
64285: PUSH
64286: FOR_DOWNTO
64287: IFFALSE 64364
// begin index := rand ( 1 , array ) ;
64289: LD_ADDR_VAR 0 4
64293: PUSH
64294: LD_INT 1
64296: PPUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: CALL_OW 12
64306: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64307: LD_ADDR_VAR 0 2
64311: PUSH
64312: LD_VAR 0 2
64316: PPUSH
64317: LD_VAR 0 2
64321: PUSH
64322: LD_INT 1
64324: PLUS
64325: PPUSH
64326: LD_VAR 0 1
64330: PUSH
64331: LD_VAR 0 4
64335: ARRAY
64336: PPUSH
64337: CALL_OW 2
64341: ST_TO_ADDR
// array := Delete ( array , index ) ;
64342: LD_ADDR_VAR 0 1
64346: PUSH
64347: LD_VAR 0 1
64351: PPUSH
64352: LD_VAR 0 4
64356: PPUSH
64357: CALL_OW 3
64361: ST_TO_ADDR
// end ;
64362: GO 64286
64364: POP
64365: POP
// end ;
64366: LD_VAR 0 2
64370: RET
// export function GetBaseMaterials ( base ) ; begin
64371: LD_INT 0
64373: PPUSH
// result := [ 0 , 0 , 0 ] ;
64374: LD_ADDR_VAR 0 2
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// if not base then
64393: LD_VAR 0 1
64397: NOT
64398: IFFALSE 64402
// exit ;
64400: GO 64451
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64402: LD_ADDR_VAR 0 2
64406: PUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: LD_INT 1
64414: PPUSH
64415: CALL_OW 275
64419: PUSH
64420: LD_VAR 0 1
64424: PPUSH
64425: LD_INT 2
64427: PPUSH
64428: CALL_OW 275
64432: PUSH
64433: LD_VAR 0 1
64437: PPUSH
64438: LD_INT 3
64440: PPUSH
64441: CALL_OW 275
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: ST_TO_ADDR
// end ;
64451: LD_VAR 0 2
64455: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64456: LD_INT 0
64458: PPUSH
64459: PPUSH
// result := array ;
64460: LD_ADDR_VAR 0 3
64464: PUSH
64465: LD_VAR 0 1
64469: ST_TO_ADDR
// if size >= result then
64470: LD_VAR 0 2
64474: PUSH
64475: LD_VAR 0 3
64479: GREATEREQUAL
64480: IFFALSE 64484
// exit ;
64482: GO 64534
// if size then
64484: LD_VAR 0 2
64488: IFFALSE 64534
// for i := array downto size do
64490: LD_ADDR_VAR 0 4
64494: PUSH
64495: DOUBLE
64496: LD_VAR 0 1
64500: INC
64501: ST_TO_ADDR
64502: LD_VAR 0 2
64506: PUSH
64507: FOR_DOWNTO
64508: IFFALSE 64532
// result := Delete ( result , result ) ;
64510: LD_ADDR_VAR 0 3
64514: PUSH
64515: LD_VAR 0 3
64519: PPUSH
64520: LD_VAR 0 3
64524: PPUSH
64525: CALL_OW 3
64529: ST_TO_ADDR
64530: GO 64507
64532: POP
64533: POP
// end ;
64534: LD_VAR 0 3
64538: RET
// export function ComExit ( unit ) ; var tmp ; begin
64539: LD_INT 0
64541: PPUSH
64542: PPUSH
// if not IsInUnit ( unit ) then
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 310
64552: NOT
64553: IFFALSE 64557
// exit ;
64555: GO 64617
// tmp := IsInUnit ( unit ) ;
64557: LD_ADDR_VAR 0 3
64561: PUSH
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 310
64571: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64572: LD_VAR 0 3
64576: PPUSH
64577: CALL_OW 247
64581: PUSH
64582: LD_INT 2
64584: EQUAL
64585: IFFALSE 64598
// ComExitVehicle ( unit ) else
64587: LD_VAR 0 1
64591: PPUSH
64592: CALL_OW 121
64596: GO 64607
// ComExitBuilding ( unit ) ;
64598: LD_VAR 0 1
64602: PPUSH
64603: CALL_OW 122
// result := tmp ;
64607: LD_ADDR_VAR 0 2
64611: PUSH
64612: LD_VAR 0 3
64616: ST_TO_ADDR
// end ;
64617: LD_VAR 0 2
64621: RET
// export function ComExitAll ( units ) ; var i ; begin
64622: LD_INT 0
64624: PPUSH
64625: PPUSH
// if not units then
64626: LD_VAR 0 1
64630: NOT
64631: IFFALSE 64635
// exit ;
64633: GO 64661
// for i in units do
64635: LD_ADDR_VAR 0 3
64639: PUSH
64640: LD_VAR 0 1
64644: PUSH
64645: FOR_IN
64646: IFFALSE 64659
// ComExit ( i ) ;
64648: LD_VAR 0 3
64652: PPUSH
64653: CALL 64539 0 1
64657: GO 64645
64659: POP
64660: POP
// end ;
64661: LD_VAR 0 2
64665: RET
// export function ResetHc ; begin
64666: LD_INT 0
64668: PPUSH
// InitHc ;
64669: CALL_OW 19
// hc_importance := 0 ;
64673: LD_ADDR_OWVAR 32
64677: PUSH
64678: LD_INT 0
64680: ST_TO_ADDR
// end ;
64681: LD_VAR 0 1
64685: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64686: LD_INT 0
64688: PPUSH
64689: PPUSH
64690: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64691: LD_ADDR_VAR 0 6
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_VAR 0 3
64705: PLUS
64706: PUSH
64707: LD_INT 2
64709: DIV
64710: ST_TO_ADDR
// if _x < 0 then
64711: LD_VAR 0 6
64715: PUSH
64716: LD_INT 0
64718: LESS
64719: IFFALSE 64736
// _x := _x * - 1 ;
64721: LD_ADDR_VAR 0 6
64725: PUSH
64726: LD_VAR 0 6
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: MUL
64735: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64736: LD_ADDR_VAR 0 7
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_VAR 0 4
64750: PLUS
64751: PUSH
64752: LD_INT 2
64754: DIV
64755: ST_TO_ADDR
// if _y < 0 then
64756: LD_VAR 0 7
64760: PUSH
64761: LD_INT 0
64763: LESS
64764: IFFALSE 64781
// _y := _y * - 1 ;
64766: LD_ADDR_VAR 0 7
64770: PUSH
64771: LD_VAR 0 7
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: MUL
64780: ST_TO_ADDR
// result := [ _x , _y ] ;
64781: LD_ADDR_VAR 0 5
64785: PUSH
64786: LD_VAR 0 6
64790: PUSH
64791: LD_VAR 0 7
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// end ;
64800: LD_VAR 0 5
64804: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64805: LD_INT 0
64807: PPUSH
64808: PPUSH
64809: PPUSH
64810: PPUSH
// task := GetTaskList ( unit ) ;
64811: LD_ADDR_VAR 0 7
64815: PUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: CALL_OW 437
64825: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64826: LD_VAR 0 7
64830: NOT
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: LD_VAR 0 2
64841: PPUSH
64842: CALL_OW 308
64846: NOT
64847: AND
64848: IFFALSE 64852
// exit ;
64850: GO 64970
// if IsInArea ( unit , area ) then
64852: LD_VAR 0 1
64856: PPUSH
64857: LD_VAR 0 2
64861: PPUSH
64862: CALL_OW 308
64866: IFFALSE 64884
// begin ComMoveToArea ( unit , goAway ) ;
64868: LD_VAR 0 1
64872: PPUSH
64873: LD_VAR 0 3
64877: PPUSH
64878: CALL_OW 113
// exit ;
64882: GO 64970
// end ; if task [ 1 ] [ 1 ] <> M then
64884: LD_VAR 0 7
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PUSH
64893: LD_INT 1
64895: ARRAY
64896: PUSH
64897: LD_STRING M
64899: NONEQUAL
64900: IFFALSE 64904
// exit ;
64902: GO 64970
// x := task [ 1 ] [ 2 ] ;
64904: LD_ADDR_VAR 0 5
64908: PUSH
64909: LD_VAR 0 7
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PUSH
64918: LD_INT 2
64920: ARRAY
64921: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64922: LD_ADDR_VAR 0 6
64926: PUSH
64927: LD_VAR 0 7
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_INT 3
64938: ARRAY
64939: ST_TO_ADDR
// if InArea ( x , y , area ) then
64940: LD_VAR 0 5
64944: PPUSH
64945: LD_VAR 0 6
64949: PPUSH
64950: LD_VAR 0 2
64954: PPUSH
64955: CALL_OW 309
64959: IFFALSE 64970
// ComStop ( unit ) ;
64961: LD_VAR 0 1
64965: PPUSH
64966: CALL_OW 141
// end ;
64970: LD_VAR 0 4
64974: RET
// export function Abs ( value ) ; begin
64975: LD_INT 0
64977: PPUSH
// result := value ;
64978: LD_ADDR_VAR 0 2
64982: PUSH
64983: LD_VAR 0 1
64987: ST_TO_ADDR
// if value < 0 then
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 0
64995: LESS
64996: IFFALSE 65013
// result := value * - 1 ;
64998: LD_ADDR_VAR 0 2
65002: PUSH
65003: LD_VAR 0 1
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: MUL
65012: ST_TO_ADDR
// end ;
65013: LD_VAR 0 2
65017: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65018: LD_INT 0
65020: PPUSH
65021: PPUSH
65022: PPUSH
65023: PPUSH
65024: PPUSH
65025: PPUSH
65026: PPUSH
65027: PPUSH
// if not unit or not building then
65028: LD_VAR 0 1
65032: NOT
65033: PUSH
65034: LD_VAR 0 2
65038: NOT
65039: OR
65040: IFFALSE 65044
// exit ;
65042: GO 65270
// x := GetX ( building ) ;
65044: LD_ADDR_VAR 0 4
65048: PUSH
65049: LD_VAR 0 2
65053: PPUSH
65054: CALL_OW 250
65058: ST_TO_ADDR
// y := GetY ( building ) ;
65059: LD_ADDR_VAR 0 6
65063: PUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: CALL_OW 251
65073: ST_TO_ADDR
// d := GetDir ( building ) ;
65074: LD_ADDR_VAR 0 8
65078: PUSH
65079: LD_VAR 0 2
65083: PPUSH
65084: CALL_OW 254
65088: ST_TO_ADDR
// r := 4 ;
65089: LD_ADDR_VAR 0 9
65093: PUSH
65094: LD_INT 4
65096: ST_TO_ADDR
// for i := 1 to 5 do
65097: LD_ADDR_VAR 0 10
65101: PUSH
65102: DOUBLE
65103: LD_INT 1
65105: DEC
65106: ST_TO_ADDR
65107: LD_INT 5
65109: PUSH
65110: FOR_TO
65111: IFFALSE 65268
// begin _x := ShiftX ( x , d , r + i ) ;
65113: LD_ADDR_VAR 0 5
65117: PUSH
65118: LD_VAR 0 4
65122: PPUSH
65123: LD_VAR 0 8
65127: PPUSH
65128: LD_VAR 0 9
65132: PUSH
65133: LD_VAR 0 10
65137: PLUS
65138: PPUSH
65139: CALL_OW 272
65143: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65144: LD_ADDR_VAR 0 7
65148: PUSH
65149: LD_VAR 0 6
65153: PPUSH
65154: LD_VAR 0 8
65158: PPUSH
65159: LD_VAR 0 9
65163: PUSH
65164: LD_VAR 0 10
65168: PLUS
65169: PPUSH
65170: CALL_OW 273
65174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65175: LD_VAR 0 5
65179: PPUSH
65180: LD_VAR 0 7
65184: PPUSH
65185: CALL_OW 488
65189: PUSH
65190: LD_VAR 0 5
65194: PPUSH
65195: LD_VAR 0 7
65199: PPUSH
65200: CALL_OW 428
65204: PPUSH
65205: CALL_OW 247
65209: PUSH
65210: LD_INT 3
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: IN
65220: NOT
65221: AND
65222: IFFALSE 65266
// begin ComMoveXY ( unit , _x , _y ) ;
65224: LD_VAR 0 1
65228: PPUSH
65229: LD_VAR 0 5
65233: PPUSH
65234: LD_VAR 0 7
65238: PPUSH
65239: CALL_OW 111
// result := [ _x , _y ] ;
65243: LD_ADDR_VAR 0 3
65247: PUSH
65248: LD_VAR 0 5
65252: PUSH
65253: LD_VAR 0 7
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: ST_TO_ADDR
// exit ;
65262: POP
65263: POP
65264: GO 65270
// end ; end ;
65266: GO 65110
65268: POP
65269: POP
// end ;
65270: LD_VAR 0 3
65274: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
// result := 0 ;
65280: LD_ADDR_VAR 0 3
65284: PUSH
65285: LD_INT 0
65287: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65288: LD_VAR 0 1
65292: PUSH
65293: LD_INT 0
65295: LESS
65296: PUSH
65297: LD_VAR 0 1
65301: PUSH
65302: LD_INT 8
65304: GREATER
65305: OR
65306: PUSH
65307: LD_VAR 0 2
65311: PUSH
65312: LD_INT 0
65314: LESS
65315: OR
65316: PUSH
65317: LD_VAR 0 2
65321: PUSH
65322: LD_INT 8
65324: GREATER
65325: OR
65326: IFFALSE 65330
// exit ;
65328: GO 65405
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65330: LD_ADDR_VAR 0 4
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_VAR 0 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PPUSH
65347: CALL_OW 69
65351: PUSH
65352: FOR_IN
65353: IFFALSE 65403
// begin un := UnitShoot ( i ) ;
65355: LD_ADDR_VAR 0 5
65359: PUSH
65360: LD_VAR 0 4
65364: PPUSH
65365: CALL_OW 504
65369: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65370: LD_VAR 0 5
65374: PPUSH
65375: CALL_OW 255
65379: PUSH
65380: LD_VAR 0 1
65384: EQUAL
65385: IFFALSE 65401
// begin result := un ;
65387: LD_ADDR_VAR 0 3
65391: PUSH
65392: LD_VAR 0 5
65396: ST_TO_ADDR
// exit ;
65397: POP
65398: POP
65399: GO 65405
// end ; end ;
65401: GO 65352
65403: POP
65404: POP
// end ;
65405: LD_VAR 0 3
65409: RET
// export function GetCargoBay ( units ) ; begin
65410: LD_INT 0
65412: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65413: LD_ADDR_VAR 0 2
65417: PUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 34
65428: PUSH
65429: LD_INT 12
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 34
65438: PUSH
65439: LD_INT 51
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 34
65448: PUSH
65449: LD_INT 32
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 34
65458: PUSH
65459: LD_INT 89
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: PPUSH
65473: CALL_OW 72
65477: ST_TO_ADDR
// end ;
65478: LD_VAR 0 2
65482: RET
// export function Negate ( value ) ; begin
65483: LD_INT 0
65485: PPUSH
// result := not value ;
65486: LD_ADDR_VAR 0 2
65490: PUSH
65491: LD_VAR 0 1
65495: NOT
65496: ST_TO_ADDR
// end ;
65497: LD_VAR 0 2
65501: RET
// export function Inc ( value ) ; begin
65502: LD_INT 0
65504: PPUSH
// result := value + 1 ;
65505: LD_ADDR_VAR 0 2
65509: PUSH
65510: LD_VAR 0 1
65514: PUSH
65515: LD_INT 1
65517: PLUS
65518: ST_TO_ADDR
// end ;
65519: LD_VAR 0 2
65523: RET
// export function Dec ( value ) ; begin
65524: LD_INT 0
65526: PPUSH
// result := value - 1 ;
65527: LD_ADDR_VAR 0 2
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: LD_INT 1
65539: MINUS
65540: ST_TO_ADDR
// end ;
65541: LD_VAR 0 2
65545: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65546: LD_INT 0
65548: PPUSH
65549: PPUSH
65550: PPUSH
65551: PPUSH
65552: PPUSH
65553: PPUSH
65554: PPUSH
65555: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65556: LD_VAR 0 1
65560: PPUSH
65561: LD_VAR 0 2
65565: PPUSH
65566: CALL_OW 488
65570: NOT
65571: PUSH
65572: LD_VAR 0 3
65576: PPUSH
65577: LD_VAR 0 4
65581: PPUSH
65582: CALL_OW 488
65586: NOT
65587: OR
65588: IFFALSE 65601
// begin result := - 1 ;
65590: LD_ADDR_VAR 0 5
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: ST_TO_ADDR
// exit ;
65599: GO 65836
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65601: LD_ADDR_VAR 0 12
65605: PUSH
65606: LD_VAR 0 1
65610: PPUSH
65611: LD_VAR 0 2
65615: PPUSH
65616: LD_VAR 0 3
65620: PPUSH
65621: LD_VAR 0 4
65625: PPUSH
65626: CALL 64686 0 4
65630: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65631: LD_ADDR_VAR 0 11
65635: PUSH
65636: LD_VAR 0 1
65640: PPUSH
65641: LD_VAR 0 2
65645: PPUSH
65646: LD_VAR 0 12
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: PPUSH
65655: LD_VAR 0 12
65659: PUSH
65660: LD_INT 2
65662: ARRAY
65663: PPUSH
65664: CALL_OW 298
65668: ST_TO_ADDR
// distance := 9999 ;
65669: LD_ADDR_VAR 0 10
65673: PUSH
65674: LD_INT 9999
65676: ST_TO_ADDR
// for i := 0 to 5 do
65677: LD_ADDR_VAR 0 6
65681: PUSH
65682: DOUBLE
65683: LD_INT 0
65685: DEC
65686: ST_TO_ADDR
65687: LD_INT 5
65689: PUSH
65690: FOR_TO
65691: IFFALSE 65834
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65693: LD_ADDR_VAR 0 7
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: LD_VAR 0 6
65707: PPUSH
65708: LD_VAR 0 11
65712: PPUSH
65713: CALL_OW 272
65717: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65718: LD_ADDR_VAR 0 8
65722: PUSH
65723: LD_VAR 0 2
65727: PPUSH
65728: LD_VAR 0 6
65732: PPUSH
65733: LD_VAR 0 11
65737: PPUSH
65738: CALL_OW 273
65742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65743: LD_VAR 0 7
65747: PPUSH
65748: LD_VAR 0 8
65752: PPUSH
65753: CALL_OW 488
65757: NOT
65758: IFFALSE 65762
// continue ;
65760: GO 65690
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65762: LD_ADDR_VAR 0 9
65766: PUSH
65767: LD_VAR 0 12
65771: PUSH
65772: LD_INT 1
65774: ARRAY
65775: PPUSH
65776: LD_VAR 0 12
65780: PUSH
65781: LD_INT 2
65783: ARRAY
65784: PPUSH
65785: LD_VAR 0 7
65789: PPUSH
65790: LD_VAR 0 8
65794: PPUSH
65795: CALL_OW 298
65799: ST_TO_ADDR
// if tmp < distance then
65800: LD_VAR 0 9
65804: PUSH
65805: LD_VAR 0 10
65809: LESS
65810: IFFALSE 65832
// begin result := i ;
65812: LD_ADDR_VAR 0 5
65816: PUSH
65817: LD_VAR 0 6
65821: ST_TO_ADDR
// distance := tmp ;
65822: LD_ADDR_VAR 0 10
65826: PUSH
65827: LD_VAR 0 9
65831: ST_TO_ADDR
// end ; end ;
65832: GO 65690
65834: POP
65835: POP
// end ;
65836: LD_VAR 0 5
65840: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65841: LD_INT 0
65843: PPUSH
65844: PPUSH
// if not driver or not IsInUnit ( driver ) then
65845: LD_VAR 0 1
65849: NOT
65850: PUSH
65851: LD_VAR 0 1
65855: PPUSH
65856: CALL_OW 310
65860: NOT
65861: OR
65862: IFFALSE 65866
// exit ;
65864: GO 65956
// vehicle := IsInUnit ( driver ) ;
65866: LD_ADDR_VAR 0 3
65870: PUSH
65871: LD_VAR 0 1
65875: PPUSH
65876: CALL_OW 310
65880: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_STRING \
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: LD_STRING E
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_VAR 0 3
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PPUSH
65952: CALL_OW 446
// end ;
65956: LD_VAR 0 2
65960: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65961: LD_INT 0
65963: PPUSH
65964: PPUSH
// if not driver or not IsInUnit ( driver ) then
65965: LD_VAR 0 1
65969: NOT
65970: PUSH
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 310
65980: NOT
65981: OR
65982: IFFALSE 65986
// exit ;
65984: GO 66076
// vehicle := IsInUnit ( driver ) ;
65986: LD_ADDR_VAR 0 3
65990: PUSH
65991: LD_VAR 0 1
65995: PPUSH
65996: CALL_OW 310
66000: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66001: LD_VAR 0 1
66005: PPUSH
66006: LD_STRING \
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: PUSH
66036: LD_STRING E
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_VAR 0 3
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PPUSH
66072: CALL_OW 447
// end ;
66076: LD_VAR 0 2
66080: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
// tmp := [ ] ;
66086: LD_ADDR_VAR 0 5
66090: PUSH
66091: EMPTY
66092: ST_TO_ADDR
// for i in units do
66093: LD_ADDR_VAR 0 4
66097: PUSH
66098: LD_VAR 0 1
66102: PUSH
66103: FOR_IN
66104: IFFALSE 66142
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66106: LD_ADDR_VAR 0 5
66110: PUSH
66111: LD_VAR 0 5
66115: PPUSH
66116: LD_VAR 0 5
66120: PUSH
66121: LD_INT 1
66123: PLUS
66124: PPUSH
66125: LD_VAR 0 4
66129: PPUSH
66130: CALL_OW 256
66134: PPUSH
66135: CALL_OW 2
66139: ST_TO_ADDR
66140: GO 66103
66142: POP
66143: POP
// if not tmp then
66144: LD_VAR 0 5
66148: NOT
66149: IFFALSE 66153
// exit ;
66151: GO 66201
// if asc then
66153: LD_VAR 0 2
66157: IFFALSE 66181
// result := SortListByListAsc ( units , tmp ) else
66159: LD_ADDR_VAR 0 3
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: LD_VAR 0 5
66173: PPUSH
66174: CALL_OW 76
66178: ST_TO_ADDR
66179: GO 66201
// result := SortListByListDesc ( units , tmp ) ;
66181: LD_ADDR_VAR 0 3
66185: PUSH
66186: LD_VAR 0 1
66190: PPUSH
66191: LD_VAR 0 5
66195: PPUSH
66196: CALL_OW 77
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 3
66205: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66206: LD_INT 0
66208: PPUSH
66209: PPUSH
// task := GetTaskList ( mech ) ;
66210: LD_ADDR_VAR 0 4
66214: PUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: CALL_OW 437
66224: ST_TO_ADDR
// if not task then
66225: LD_VAR 0 4
66229: NOT
66230: IFFALSE 66234
// exit ;
66232: GO 66276
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66234: LD_ADDR_VAR 0 3
66238: PUSH
66239: LD_VAR 0 4
66243: PUSH
66244: LD_INT 1
66246: ARRAY
66247: PUSH
66248: LD_INT 1
66250: ARRAY
66251: PUSH
66252: LD_STRING r
66254: EQUAL
66255: PUSH
66256: LD_VAR 0 4
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PUSH
66265: LD_INT 4
66267: ARRAY
66268: PUSH
66269: LD_VAR 0 2
66273: EQUAL
66274: AND
66275: ST_TO_ADDR
// end ;
66276: LD_VAR 0 3
66280: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66281: LD_INT 0
66283: PPUSH
// SetDir ( unit , d ) ;
66284: LD_VAR 0 1
66288: PPUSH
66289: LD_VAR 0 4
66293: PPUSH
66294: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66298: LD_VAR 0 1
66302: PPUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: LD_VAR 0 3
66312: PPUSH
66313: LD_VAR 0 5
66317: PPUSH
66318: CALL_OW 48
// end ;
66322: LD_VAR 0 6
66326: RET
// export function ToNaturalNumber ( number ) ; begin
66327: LD_INT 0
66329: PPUSH
// result := number div 1 ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 1
66339: PUSH
66340: LD_INT 1
66342: DIV
66343: ST_TO_ADDR
// if number < 0 then
66344: LD_VAR 0 1
66348: PUSH
66349: LD_INT 0
66351: LESS
66352: IFFALSE 66362
// result := 0 ;
66354: LD_ADDR_VAR 0 2
66358: PUSH
66359: LD_INT 0
66361: ST_TO_ADDR
// end ;
66362: LD_VAR 0 2
66366: RET
// export function SortByClass ( units , class ) ; var un ; begin
66367: LD_INT 0
66369: PPUSH
66370: PPUSH
// if not units or not class then
66371: LD_VAR 0 1
66375: NOT
66376: PUSH
66377: LD_VAR 0 2
66381: NOT
66382: OR
66383: IFFALSE 66387
// exit ;
66385: GO 66482
// result := [ ] ;
66387: LD_ADDR_VAR 0 3
66391: PUSH
66392: EMPTY
66393: ST_TO_ADDR
// for un in units do
66394: LD_ADDR_VAR 0 4
66398: PUSH
66399: LD_VAR 0 1
66403: PUSH
66404: FOR_IN
66405: IFFALSE 66480
// if GetClass ( un ) = class then
66407: LD_VAR 0 4
66411: PPUSH
66412: CALL_OW 257
66416: PUSH
66417: LD_VAR 0 2
66421: EQUAL
66422: IFFALSE 66449
// result := Insert ( result , 1 , un ) else
66424: LD_ADDR_VAR 0 3
66428: PUSH
66429: LD_VAR 0 3
66433: PPUSH
66434: LD_INT 1
66436: PPUSH
66437: LD_VAR 0 4
66441: PPUSH
66442: CALL_OW 2
66446: ST_TO_ADDR
66447: GO 66478
// result := Replace ( result , result + 1 , un ) ;
66449: LD_ADDR_VAR 0 3
66453: PUSH
66454: LD_VAR 0 3
66458: PPUSH
66459: LD_VAR 0 3
66463: PUSH
66464: LD_INT 1
66466: PLUS
66467: PPUSH
66468: LD_VAR 0 4
66472: PPUSH
66473: CALL_OW 1
66477: ST_TO_ADDR
66478: GO 66404
66480: POP
66481: POP
// end ;
66482: LD_VAR 0 3
66486: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66487: LD_INT 0
66489: PPUSH
66490: PPUSH
66491: PPUSH
66492: PPUSH
66493: PPUSH
66494: PPUSH
66495: PPUSH
// result := [ ] ;
66496: LD_ADDR_VAR 0 4
66500: PUSH
66501: EMPTY
66502: ST_TO_ADDR
// if x - r < 0 then
66503: LD_VAR 0 1
66507: PUSH
66508: LD_VAR 0 3
66512: MINUS
66513: PUSH
66514: LD_INT 0
66516: LESS
66517: IFFALSE 66529
// min_x := 0 else
66519: LD_ADDR_VAR 0 8
66523: PUSH
66524: LD_INT 0
66526: ST_TO_ADDR
66527: GO 66545
// min_x := x - r ;
66529: LD_ADDR_VAR 0 8
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: LD_VAR 0 3
66543: MINUS
66544: ST_TO_ADDR
// if y - r < 0 then
66545: LD_VAR 0 2
66549: PUSH
66550: LD_VAR 0 3
66554: MINUS
66555: PUSH
66556: LD_INT 0
66558: LESS
66559: IFFALSE 66571
// min_y := 0 else
66561: LD_ADDR_VAR 0 7
66565: PUSH
66566: LD_INT 0
66568: ST_TO_ADDR
66569: GO 66587
// min_y := y - r ;
66571: LD_ADDR_VAR 0 7
66575: PUSH
66576: LD_VAR 0 2
66580: PUSH
66581: LD_VAR 0 3
66585: MINUS
66586: ST_TO_ADDR
// max_x := x + r ;
66587: LD_ADDR_VAR 0 9
66591: PUSH
66592: LD_VAR 0 1
66596: PUSH
66597: LD_VAR 0 3
66601: PLUS
66602: ST_TO_ADDR
// max_y := y + r ;
66603: LD_ADDR_VAR 0 10
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_VAR 0 3
66617: PLUS
66618: ST_TO_ADDR
// for _x = min_x to max_x do
66619: LD_ADDR_VAR 0 5
66623: PUSH
66624: DOUBLE
66625: LD_VAR 0 8
66629: DEC
66630: ST_TO_ADDR
66631: LD_VAR 0 9
66635: PUSH
66636: FOR_TO
66637: IFFALSE 66738
// for _y = min_y to max_y do
66639: LD_ADDR_VAR 0 6
66643: PUSH
66644: DOUBLE
66645: LD_VAR 0 7
66649: DEC
66650: ST_TO_ADDR
66651: LD_VAR 0 10
66655: PUSH
66656: FOR_TO
66657: IFFALSE 66734
// begin if not ValidHex ( _x , _y ) then
66659: LD_VAR 0 5
66663: PPUSH
66664: LD_VAR 0 6
66668: PPUSH
66669: CALL_OW 488
66673: NOT
66674: IFFALSE 66678
// continue ;
66676: GO 66656
// if GetResourceTypeXY ( _x , _y ) then
66678: LD_VAR 0 5
66682: PPUSH
66683: LD_VAR 0 6
66687: PPUSH
66688: CALL_OW 283
66692: IFFALSE 66732
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66694: LD_ADDR_VAR 0 4
66698: PUSH
66699: LD_VAR 0 4
66703: PPUSH
66704: LD_VAR 0 4
66708: PUSH
66709: LD_INT 1
66711: PLUS
66712: PPUSH
66713: LD_VAR 0 5
66717: PUSH
66718: LD_VAR 0 6
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PPUSH
66727: CALL_OW 1
66731: ST_TO_ADDR
// end ;
66732: GO 66656
66734: POP
66735: POP
66736: GO 66636
66738: POP
66739: POP
// end ;
66740: LD_VAR 0 4
66744: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66745: LD_INT 0
66747: PPUSH
66748: PPUSH
66749: PPUSH
66750: PPUSH
66751: PPUSH
66752: PPUSH
66753: PPUSH
66754: PPUSH
// if not units then
66755: LD_VAR 0 1
66759: NOT
66760: IFFALSE 66764
// exit ;
66762: GO 67288
// result := UnitFilter ( units , [ f_ok ] ) ;
66764: LD_ADDR_VAR 0 3
66768: PUSH
66769: LD_VAR 0 1
66773: PPUSH
66774: LD_INT 50
66776: PUSH
66777: EMPTY
66778: LIST
66779: PPUSH
66780: CALL_OW 72
66784: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66785: LD_ADDR_VAR 0 8
66789: PUSH
66790: LD_VAR 0 1
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PPUSH
66799: CALL_OW 255
66803: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66804: LD_ADDR_VAR 0 10
66808: PUSH
66809: LD_INT 29
66811: PUSH
66812: LD_INT 91
66814: PUSH
66815: LD_INT 49
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// if not result then
66823: LD_VAR 0 3
66827: NOT
66828: IFFALSE 66832
// exit ;
66830: GO 67288
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66832: LD_ADDR_VAR 0 5
66836: PUSH
66837: LD_INT 81
66839: PUSH
66840: LD_VAR 0 8
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PPUSH
66849: CALL_OW 69
66853: ST_TO_ADDR
// for i in result do
66854: LD_ADDR_VAR 0 4
66858: PUSH
66859: LD_VAR 0 3
66863: PUSH
66864: FOR_IN
66865: IFFALSE 67286
// begin tag := GetTag ( i ) + 1 ;
66867: LD_ADDR_VAR 0 9
66871: PUSH
66872: LD_VAR 0 4
66876: PPUSH
66877: CALL_OW 110
66881: PUSH
66882: LD_INT 1
66884: PLUS
66885: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66886: LD_ADDR_VAR 0 7
66890: PUSH
66891: LD_VAR 0 4
66895: PPUSH
66896: CALL_OW 250
66900: PPUSH
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 251
66910: PPUSH
66911: LD_INT 6
66913: PPUSH
66914: CALL 66487 0 3
66918: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66919: LD_VAR 0 4
66923: PPUSH
66924: CALL_OW 247
66928: PUSH
66929: LD_INT 2
66931: EQUAL
66932: PUSH
66933: LD_VAR 0 7
66937: AND
66938: PUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: CALL_OW 264
66948: PUSH
66949: LD_VAR 0 10
66953: IN
66954: NOT
66955: AND
66956: IFFALSE 66995
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66958: LD_VAR 0 4
66962: PPUSH
66963: LD_VAR 0 7
66967: PUSH
66968: LD_INT 1
66970: ARRAY
66971: PUSH
66972: LD_INT 1
66974: ARRAY
66975: PPUSH
66976: LD_VAR 0 7
66980: PUSH
66981: LD_INT 1
66983: ARRAY
66984: PUSH
66985: LD_INT 2
66987: ARRAY
66988: PPUSH
66989: CALL_OW 116
66993: GO 67284
// if path > tag then
66995: LD_VAR 0 2
66999: PUSH
67000: LD_VAR 0 9
67004: GREATER
67005: IFFALSE 67213
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67007: LD_ADDR_VAR 0 6
67011: PUSH
67012: LD_VAR 0 5
67016: PPUSH
67017: LD_INT 91
67019: PUSH
67020: LD_VAR 0 4
67024: PUSH
67025: LD_INT 8
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: PPUSH
67033: CALL_OW 72
67037: ST_TO_ADDR
// if nearEnemy then
67038: LD_VAR 0 6
67042: IFFALSE 67111
// begin if GetWeapon ( i ) = ru_time_lapser then
67044: LD_VAR 0 4
67048: PPUSH
67049: CALL_OW 264
67053: PUSH
67054: LD_INT 49
67056: EQUAL
67057: IFFALSE 67085
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67059: LD_VAR 0 4
67063: PPUSH
67064: LD_VAR 0 6
67068: PPUSH
67069: LD_VAR 0 4
67073: PPUSH
67074: CALL_OW 74
67078: PPUSH
67079: CALL_OW 112
67083: GO 67109
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67085: LD_VAR 0 4
67089: PPUSH
67090: LD_VAR 0 6
67094: PPUSH
67095: LD_VAR 0 4
67099: PPUSH
67100: CALL_OW 74
67104: PPUSH
67105: CALL_OW 115
// end else
67109: GO 67211
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67111: LD_VAR 0 4
67115: PPUSH
67116: LD_VAR 0 2
67120: PUSH
67121: LD_VAR 0 9
67125: ARRAY
67126: PUSH
67127: LD_INT 1
67129: ARRAY
67130: PPUSH
67131: LD_VAR 0 2
67135: PUSH
67136: LD_VAR 0 9
67140: ARRAY
67141: PUSH
67142: LD_INT 2
67144: ARRAY
67145: PPUSH
67146: CALL_OW 297
67150: PUSH
67151: LD_INT 6
67153: GREATER
67154: IFFALSE 67197
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67156: LD_VAR 0 4
67160: PPUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_VAR 0 9
67170: ARRAY
67171: PUSH
67172: LD_INT 1
67174: ARRAY
67175: PPUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_VAR 0 9
67185: ARRAY
67186: PUSH
67187: LD_INT 2
67189: ARRAY
67190: PPUSH
67191: CALL_OW 114
67195: GO 67211
// SetTag ( i , tag ) ;
67197: LD_VAR 0 4
67201: PPUSH
67202: LD_VAR 0 9
67206: PPUSH
67207: CALL_OW 109
// end else
67211: GO 67284
// if enemy then
67213: LD_VAR 0 5
67217: IFFALSE 67284
// begin if GetWeapon ( i ) = ru_time_lapser then
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 264
67228: PUSH
67229: LD_INT 49
67231: EQUAL
67232: IFFALSE 67260
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67234: LD_VAR 0 4
67238: PPUSH
67239: LD_VAR 0 5
67243: PPUSH
67244: LD_VAR 0 4
67248: PPUSH
67249: CALL_OW 74
67253: PPUSH
67254: CALL_OW 112
67258: GO 67284
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67260: LD_VAR 0 4
67264: PPUSH
67265: LD_VAR 0 5
67269: PPUSH
67270: LD_VAR 0 4
67274: PPUSH
67275: CALL_OW 74
67279: PPUSH
67280: CALL_OW 115
// end ; end ;
67284: GO 66864
67286: POP
67287: POP
// end ;
67288: LD_VAR 0 3
67292: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67293: LD_INT 0
67295: PPUSH
67296: PPUSH
67297: PPUSH
// if not unit or IsInUnit ( unit ) then
67298: LD_VAR 0 1
67302: NOT
67303: PUSH
67304: LD_VAR 0 1
67308: PPUSH
67309: CALL_OW 310
67313: OR
67314: IFFALSE 67318
// exit ;
67316: GO 67409
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67318: LD_ADDR_VAR 0 4
67322: PUSH
67323: LD_VAR 0 1
67327: PPUSH
67328: CALL_OW 250
67332: PPUSH
67333: LD_VAR 0 2
67337: PPUSH
67338: LD_INT 1
67340: PPUSH
67341: CALL_OW 272
67345: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67346: LD_ADDR_VAR 0 5
67350: PUSH
67351: LD_VAR 0 1
67355: PPUSH
67356: CALL_OW 251
67360: PPUSH
67361: LD_VAR 0 2
67365: PPUSH
67366: LD_INT 1
67368: PPUSH
67369: CALL_OW 273
67373: ST_TO_ADDR
// if ValidHex ( x , y ) then
67374: LD_VAR 0 4
67378: PPUSH
67379: LD_VAR 0 5
67383: PPUSH
67384: CALL_OW 488
67388: IFFALSE 67409
// ComTurnXY ( unit , x , y ) ;
67390: LD_VAR 0 1
67394: PPUSH
67395: LD_VAR 0 4
67399: PPUSH
67400: LD_VAR 0 5
67404: PPUSH
67405: CALL_OW 118
// end ;
67409: LD_VAR 0 3
67413: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67414: LD_INT 0
67416: PPUSH
67417: PPUSH
// result := false ;
67418: LD_ADDR_VAR 0 3
67422: PUSH
67423: LD_INT 0
67425: ST_TO_ADDR
// if not units then
67426: LD_VAR 0 2
67430: NOT
67431: IFFALSE 67435
// exit ;
67433: GO 67480
// for i in units do
67435: LD_ADDR_VAR 0 4
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: FOR_IN
67446: IFFALSE 67478
// if See ( side , i ) then
67448: LD_VAR 0 1
67452: PPUSH
67453: LD_VAR 0 4
67457: PPUSH
67458: CALL_OW 292
67462: IFFALSE 67476
// begin result := true ;
67464: LD_ADDR_VAR 0 3
67468: PUSH
67469: LD_INT 1
67471: ST_TO_ADDR
// exit ;
67472: POP
67473: POP
67474: GO 67480
// end ;
67476: GO 67445
67478: POP
67479: POP
// end ;
67480: LD_VAR 0 3
67484: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67485: LD_INT 0
67487: PPUSH
67488: PPUSH
67489: PPUSH
67490: PPUSH
// if not unit or not points then
67491: LD_VAR 0 1
67495: NOT
67496: PUSH
67497: LD_VAR 0 2
67501: NOT
67502: OR
67503: IFFALSE 67507
// exit ;
67505: GO 67597
// dist := 99999 ;
67507: LD_ADDR_VAR 0 5
67511: PUSH
67512: LD_INT 99999
67514: ST_TO_ADDR
// for i in points do
67515: LD_ADDR_VAR 0 4
67519: PUSH
67520: LD_VAR 0 2
67524: PUSH
67525: FOR_IN
67526: IFFALSE 67595
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67528: LD_ADDR_VAR 0 6
67532: PUSH
67533: LD_VAR 0 1
67537: PPUSH
67538: LD_VAR 0 4
67542: PUSH
67543: LD_INT 1
67545: ARRAY
67546: PPUSH
67547: LD_VAR 0 4
67551: PUSH
67552: LD_INT 2
67554: ARRAY
67555: PPUSH
67556: CALL_OW 297
67560: ST_TO_ADDR
// if tmpDist < dist then
67561: LD_VAR 0 6
67565: PUSH
67566: LD_VAR 0 5
67570: LESS
67571: IFFALSE 67593
// begin result := i ;
67573: LD_ADDR_VAR 0 3
67577: PUSH
67578: LD_VAR 0 4
67582: ST_TO_ADDR
// dist := tmpDist ;
67583: LD_ADDR_VAR 0 5
67587: PUSH
67588: LD_VAR 0 6
67592: ST_TO_ADDR
// end ; end ;
67593: GO 67525
67595: POP
67596: POP
// end ;
67597: LD_VAR 0 3
67601: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67602: LD_INT 0
67604: PPUSH
// uc_side := side ;
67605: LD_ADDR_OWVAR 20
67609: PUSH
67610: LD_VAR 0 1
67614: ST_TO_ADDR
// uc_nation := 3 ;
67615: LD_ADDR_OWVAR 21
67619: PUSH
67620: LD_INT 3
67622: ST_TO_ADDR
// vc_chassis := 25 ;
67623: LD_ADDR_OWVAR 37
67627: PUSH
67628: LD_INT 25
67630: ST_TO_ADDR
// vc_engine := engine_siberite ;
67631: LD_ADDR_OWVAR 39
67635: PUSH
67636: LD_INT 3
67638: ST_TO_ADDR
// vc_control := control_computer ;
67639: LD_ADDR_OWVAR 38
67643: PUSH
67644: LD_INT 3
67646: ST_TO_ADDR
// vc_weapon := 59 ;
67647: LD_ADDR_OWVAR 40
67651: PUSH
67652: LD_INT 59
67654: ST_TO_ADDR
// result := CreateVehicle ;
67655: LD_ADDR_VAR 0 5
67659: PUSH
67660: CALL_OW 45
67664: ST_TO_ADDR
// SetDir ( result , d ) ;
67665: LD_VAR 0 5
67669: PPUSH
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67679: LD_VAR 0 5
67683: PPUSH
67684: LD_VAR 0 2
67688: PPUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: LD_INT 0
67696: PPUSH
67697: CALL_OW 48
// end ;
67701: LD_VAR 0 5
67705: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67706: LD_INT 0
67708: PPUSH
67709: PPUSH
67710: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67711: LD_ADDR_VAR 0 2
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67734: LD_VAR 0 1
67738: NOT
67739: PUSH
67740: LD_VAR 0 1
67744: PPUSH
67745: CALL_OW 264
67749: PUSH
67750: LD_INT 12
67752: PUSH
67753: LD_INT 51
67755: PUSH
67756: LD_INT 32
67758: PUSH
67759: LD_INT 89
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: IN
67768: NOT
67769: OR
67770: IFFALSE 67774
// exit ;
67772: GO 67872
// for i := 1 to 3 do
67774: LD_ADDR_VAR 0 3
67778: PUSH
67779: DOUBLE
67780: LD_INT 1
67782: DEC
67783: ST_TO_ADDR
67784: LD_INT 3
67786: PUSH
67787: FOR_TO
67788: IFFALSE 67870
// begin tmp := GetCargo ( cargo , i ) ;
67790: LD_ADDR_VAR 0 4
67794: PUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: LD_VAR 0 3
67804: PPUSH
67805: CALL_OW 289
67809: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 2
67819: PPUSH
67820: LD_VAR 0 3
67824: PPUSH
67825: LD_VAR 0 4
67829: PPUSH
67830: CALL_OW 1
67834: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67835: LD_ADDR_VAR 0 2
67839: PUSH
67840: LD_VAR 0 2
67844: PPUSH
67845: LD_INT 4
67847: PPUSH
67848: LD_VAR 0 2
67852: PUSH
67853: LD_INT 4
67855: ARRAY
67856: PUSH
67857: LD_VAR 0 4
67861: PLUS
67862: PPUSH
67863: CALL_OW 1
67867: ST_TO_ADDR
// end ;
67868: GO 67787
67870: POP
67871: POP
// end ;
67872: LD_VAR 0 2
67876: RET
// export function Length ( array ) ; begin
67877: LD_INT 0
67879: PPUSH
// result := array + 0 ;
67880: LD_ADDR_VAR 0 2
67884: PUSH
67885: LD_VAR 0 1
67889: PUSH
67890: LD_INT 0
67892: PLUS
67893: ST_TO_ADDR
// end ;
67894: LD_VAR 0 2
67898: RET
// export function PrepareArray ( array ) ; begin
67899: LD_INT 0
67901: PPUSH
// result := array diff 0 ;
67902: LD_ADDR_VAR 0 2
67906: PUSH
67907: LD_VAR 0 1
67911: PUSH
67912: LD_INT 0
67914: DIFF
67915: ST_TO_ADDR
// if not result [ 1 ] then
67916: LD_VAR 0 2
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: NOT
67925: IFFALSE 67945
// result := Delete ( result , 1 ) ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_VAR 0 2
67936: PPUSH
67937: LD_INT 1
67939: PPUSH
67940: CALL_OW 3
67944: ST_TO_ADDR
// end ;
67945: LD_VAR 0 2
67949: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67950: LD_INT 0
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
// sibRocketRange := 25 ;
67956: LD_ADDR_VAR 0 6
67960: PUSH
67961: LD_INT 25
67963: ST_TO_ADDR
// result := false ;
67964: LD_ADDR_VAR 0 4
67968: PUSH
67969: LD_INT 0
67971: ST_TO_ADDR
// for i := 0 to 5 do
67972: LD_ADDR_VAR 0 5
67976: PUSH
67977: DOUBLE
67978: LD_INT 0
67980: DEC
67981: ST_TO_ADDR
67982: LD_INT 5
67984: PUSH
67985: FOR_TO
67986: IFFALSE 68053
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67988: LD_VAR 0 1
67992: PPUSH
67993: LD_VAR 0 5
67997: PPUSH
67998: LD_VAR 0 6
68002: PPUSH
68003: CALL_OW 272
68007: PPUSH
68008: LD_VAR 0 2
68012: PPUSH
68013: LD_VAR 0 5
68017: PPUSH
68018: LD_VAR 0 6
68022: PPUSH
68023: CALL_OW 273
68027: PPUSH
68028: LD_VAR 0 3
68032: PPUSH
68033: CALL_OW 309
68037: IFFALSE 68051
// begin result := true ;
68039: LD_ADDR_VAR 0 4
68043: PUSH
68044: LD_INT 1
68046: ST_TO_ADDR
// exit ;
68047: POP
68048: POP
68049: GO 68055
// end ;
68051: GO 67985
68053: POP
68054: POP
// end ;
68055: LD_VAR 0 4
68059: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68060: LD_INT 0
68062: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: LD_INT 0
68075: PPUSH
68076: LD_INT 0
68078: PPUSH
68079: LD_INT 1
68081: PPUSH
68082: LD_INT 0
68084: PPUSH
68085: CALL_OW 587
// end ; end_of_file
68089: LD_VAR 0 3
68093: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68094: LD_VAR 0 1
68098: PUSH
68099: LD_INT 200
68101: DOUBLE
68102: GREATEREQUAL
68103: IFFALSE 68111
68105: LD_INT 299
68107: DOUBLE
68108: LESSEQUAL
68109: IFTRUE 68113
68111: GO 68145
68113: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68114: LD_VAR 0 1
68118: PPUSH
68119: LD_VAR 0 2
68123: PPUSH
68124: LD_VAR 0 3
68128: PPUSH
68129: LD_VAR 0 4
68133: PPUSH
68134: LD_VAR 0 5
68138: PPUSH
68139: CALL 22779 0 5
68143: GO 68222
68145: LD_INT 300
68147: DOUBLE
68148: GREATEREQUAL
68149: IFFALSE 68157
68151: LD_INT 399
68153: DOUBLE
68154: LESSEQUAL
68155: IFTRUE 68159
68157: GO 68221
68159: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68160: LD_VAR 0 1
68164: PPUSH
68165: LD_VAR 0 2
68169: PPUSH
68170: LD_VAR 0 3
68174: PPUSH
68175: LD_VAR 0 4
68179: PPUSH
68180: LD_VAR 0 5
68184: PPUSH
68185: LD_VAR 0 6
68189: PPUSH
68190: LD_VAR 0 7
68194: PPUSH
68195: LD_VAR 0 8
68199: PPUSH
68200: LD_VAR 0 9
68204: PPUSH
68205: LD_VAR 0 10
68209: PPUSH
68210: LD_VAR 0 11
68214: PPUSH
68215: CALL 19112 0 11
68219: GO 68222
68221: POP
// end ;
68222: PPOPN 11
68224: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68225: LD_VAR 0 1
68229: PPUSH
68230: LD_VAR 0 2
68234: PPUSH
68235: LD_VAR 0 3
68239: PPUSH
68240: LD_VAR 0 4
68244: PPUSH
68245: LD_VAR 0 5
68249: PPUSH
68250: CALL 22515 0 5
// end ; end_of_file
68254: PPOPN 5
68256: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68257: LD_VAR 0 1
68261: PPUSH
68262: LD_VAR 0 2
68266: PPUSH
68267: LD_VAR 0 3
68271: PPUSH
68272: LD_VAR 0 4
68276: PPUSH
68277: LD_VAR 0 5
68281: PPUSH
68282: LD_VAR 0 6
68286: PPUSH
68287: CALL 6805 0 6
// end ;
68291: PPOPN 6
68293: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68294: LD_INT 0
68296: PPUSH
// begin if not units then
68297: LD_VAR 0 1
68301: NOT
68302: IFFALSE 68306
// exit ;
68304: GO 68306
// end ;
68306: PPOPN 7
68308: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68309: CALL 6776 0 0
// end ;
68313: PPOPN 1
68315: END
