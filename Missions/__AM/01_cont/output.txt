// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 870 0 0
// InitRussian ;
  19: CALL 1141 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 3021 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 787
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 787
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 515
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: IFFALSE 487
 472: PUSH
 473: LD_INT 1
 475: PPUSH
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL_OW 292
 485: NOT
 486: AND
 487: IFFALSE 501
 489: PUSH
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 314
 499: NOT
 500: AND
 501: IFFALSE 515
// SetFuel ( unit , 100 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: LD_INT 100
 510: PPUSH
 511: CALL_OW 240
// if mode = forest then
 515: LD_VAR 0 2
 519: PUSH
 520: LD_STRING forest
 522: EQUAL
 523: IFFALSE 603
// if GetLives ( unit ) < 600 then
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 256
 534: PUSH
 535: LD_INT 600
 537: LESS
 538: IFFALSE 603
// begin ComMoveXY ( unit , 42 , 3 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_INT 42
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 250
 569: PPUSH
 570: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 574: LD_VAR 0 1
 578: PPUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: CALL_OW 251
 588: PPUSH
 589: CALL_OW 232
// send_troops_to_forest := true ;
 593: LD_ADDR_EXP 14
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// break ;
 601: GO 787
// end ; if not HasTask ( unit ) then
 603: LD_VAR 0 1
 607: PPUSH
 608: CALL_OW 314
 612: NOT
 613: IFFALSE 785
// begin for i = 1 to coords do
 615: LD_ADDR_VAR 0 6
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_VAR 0 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 698
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 633: LD_VAR 0 1
 637: PPUSH
 638: LD_VAR 0 4
 642: PUSH
 643: LD_VAR 0 6
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 6
 658: PUSH
 659: LD_INT 1
 661: PLUS
 662: ARRAY
 663: PPUSH
 664: CALL_OW 174
// AddComWait ( unit , pause ) ;
 668: LD_VAR 0 1
 672: PPUSH
 673: LD_VAR 0 3
 677: PPUSH
 678: CALL_OW 202
// i := i + 1 ;
 682: LD_ADDR_VAR 0 6
 686: PUSH
 687: LD_VAR 0 6
 691: PUSH
 692: LD_INT 1
 694: PLUS
 695: ST_TO_ADDR
// end ;
 696: GO 630
 698: POP
 699: POP
// for i = coords downto 1 do
 700: LD_ADDR_VAR 0 6
 704: PUSH
 705: DOUBLE
 706: LD_VAR 0 4
 710: INC
 711: ST_TO_ADDR
 712: LD_INT 1
 714: PUSH
 715: FOR_DOWNTO
 716: IFFALSE 783
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 718: LD_VAR 0 1
 722: PPUSH
 723: LD_VAR 0 4
 727: PUSH
 728: LD_VAR 0 6
 732: PUSH
 733: LD_INT 1
 735: MINUS
 736: ARRAY
 737: PPUSH
 738: LD_VAR 0 4
 742: PUSH
 743: LD_VAR 0 6
 747: ARRAY
 748: PPUSH
 749: CALL_OW 174
// AddComWait ( unit , pause ) ;
 753: LD_VAR 0 1
 757: PPUSH
 758: LD_VAR 0 3
 762: PPUSH
 763: CALL_OW 202
// i := i - 1 ;
 767: LD_ADDR_VAR 0 6
 771: PUSH
 772: LD_VAR 0 6
 776: PUSH
 777: LD_INT 1
 779: MINUS
 780: ST_TO_ADDR
// end ;
 781: GO 715
 783: POP
 784: POP
// end ; end ;
 785: GO 425
// end ;
 787: LD_VAR 0 5
 791: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
// uc_nation := 1 ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// uc_side := 0 ;
 804: LD_ADDR_OWVAR 20
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 380
// hc_name := speaker ;
 825: LD_ADDR_OWVAR 26
 829: PUSH
 830: LD_STRING speaker
 832: ST_TO_ADDR
// hc_gallery :=  ;
 833: LD_ADDR_OWVAR 33
 837: PUSH
 838: LD_STRING 
 840: ST_TO_ADDR
// speaker := CreateHuman ;
 841: LD_ADDR_VAR 0 3
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 851: LD_VAR 0 3
 855: PPUSH
 856: LD_VAR 0 1
 860: PPUSH
 861: CALL_OW 88
// end ; end_of_file
 865: LD_VAR 0 2
 869: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 870: LD_INT 0
 872: PPUSH
// uc_nation := 1 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 881: LD_ADDR_EXP 16
 885: PUSH
 886: LD_STRING JMM
 888: PPUSH
 889: LD_INT 0
 891: PPUSH
 892: LD_STRING 
 894: PPUSH
 895: CALL 29963 0 3
 899: ST_TO_ADDR
// uc_side := 4 ;
 900: LD_ADDR_OWVAR 20
 904: PUSH
 905: LD_INT 4
 907: ST_TO_ADDR
// hc_gallery := us ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING us
 915: ST_TO_ADDR
// hc_face_number := 7 ;
 916: LD_ADDR_OWVAR 34
 920: PUSH
 921: LD_INT 7
 923: ST_TO_ADDR
// hc_sex := sex_male ;
 924: LD_ADDR_OWVAR 27
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// hc_name := . ;
 932: LD_ADDR_OWVAR 26
 936: PUSH
 937: LD_STRING .
 939: ST_TO_ADDR
// hc_class := 1 ;
 940: LD_ADDR_OWVAR 28
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// Powell := CreateHuman ;
 948: LD_ADDR_EXP 19
 952: PUSH
 953: CALL_OW 44
 957: ST_TO_ADDR
// hc_name := . ;
 958: LD_ADDR_OWVAR 26
 962: PUSH
 963: LD_STRING .
 965: ST_TO_ADDR
// hc_gallery := ru ;
 966: LD_ADDR_OWVAR 33
 970: PUSH
 971: LD_STRING ru
 973: ST_TO_ADDR
// hc_face_number := 4 ;
 974: LD_ADDR_OWVAR 34
 978: PUSH
 979: LD_INT 4
 981: ST_TO_ADDR
// hc_sex := sex_male ;
 982: LD_ADDR_OWVAR 27
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 990: LD_ADDR_EXP 20
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
1000: LD_ADDR_EXP 17
1004: PUSH
1005: LD_STRING Bobby
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: LD_STRING 
1013: PPUSH
1014: CALL 29963 0 3
1018: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1019: LD_ADDR_EXP 18
1023: PUSH
1024: LD_STRING Cyrus
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: LD_STRING 
1032: PPUSH
1033: CALL 29963 0 3
1037: ST_TO_ADDR
// case Difficulty of 1 :
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 1
1045: DOUBLE
1046: EQUAL
1047: IFTRUE 1051
1049: GO 1066
1051: POP
// SetLives ( Bobby , 500 ) ; 2 :
1052: LD_EXP 17
1056: PPUSH
1057: LD_INT 500
1059: PPUSH
1060: CALL_OW 234
1064: GO 1136
1066: LD_INT 2
1068: DOUBLE
1069: EQUAL
1070: IFTRUE 1074
1072: GO 1089
1074: POP
// SetLives ( Bobby , 460 ) ; 3 :
1075: LD_EXP 17
1079: PPUSH
1080: LD_INT 460
1082: PPUSH
1083: CALL_OW 234
1087: GO 1136
1089: LD_INT 3
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1112
1097: POP
// SetLives ( Bobby , 420 ) ; 4 :
1098: LD_EXP 17
1102: PPUSH
1103: LD_INT 420
1105: PPUSH
1106: CALL_OW 234
1110: GO 1136
1112: LD_INT 4
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1135
1120: POP
// SetLives ( Bobby , 400 ) ; end ;
1121: LD_EXP 17
1125: PPUSH
1126: LD_INT 400
1128: PPUSH
1129: CALL_OW 234
1133: GO 1136
1135: POP
// end ; end_of_file
1136: LD_VAR 0 1
1140: RET
// export russian_troops_1 , russian_troops_2 , russian_troops_3 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// uc_side := 3 ;
1176: LD_ADDR_OWVAR 20
1180: PUSH
1181: LD_INT 3
1183: ST_TO_ADDR
// uc_nation := 3 ;
1184: LD_ADDR_OWVAR 21
1188: PUSH
1189: LD_INT 3
1191: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1192: LD_ADDR_EXP 28
1196: PUSH
1197: LD_STRING Pokryshkin
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_STRING 
1205: PPUSH
1206: CALL 29963 0 3
1210: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1211: LD_EXP 28
1215: PPUSH
1216: LD_INT 44
1218: PPUSH
1219: LD_INT 5
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 48
// hc_importance := 0 ;
1229: LD_ADDR_OWVAR 32
1233: PUSH
1234: LD_INT 0
1236: ST_TO_ADDR
// hc_gallery :=  ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING 
1244: ST_TO_ADDR
// hc_name :=  ;
1245: LD_ADDR_OWVAR 26
1249: PUSH
1250: LD_STRING 
1252: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 1
1258: PPUSH
1259: LD_VAR 0 2
1263: PPUSH
1264: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1268: LD_ADDR_OWVAR 33
1272: PUSH
1273: LD_STRING SecondCharsGal
1275: ST_TO_ADDR
// hc_face_number := 69 ;
1276: LD_ADDR_OWVAR 34
1280: PUSH
1281: LD_INT 69
1283: ST_TO_ADDR
// hc_sex := sex_male ;
1284: LD_ADDR_OWVAR 27
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1292: LD_ADDR_OWVAR 26
1296: PUSH
1297: LD_STRING Ilja Ivanov
1299: ST_TO_ADDR
// un := CreateHuman ;
1300: LD_ADDR_VAR 0 4
1304: PUSH
1305: CALL_OW 44
1309: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1310: LD_ADDR_EXP 21
1314: PUSH
1315: LD_EXP 21
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 4
1327: PPUSH
1328: CALL_OW 2
1332: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1348: LD_INT 1
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1363: LD_ADDR_OWVAR 33
1367: PUSH
1368: LD_STRING SecondCharsGal
1370: ST_TO_ADDR
// hc_face_number := 68 ;
1371: LD_ADDR_OWVAR 34
1375: PUSH
1376: LD_INT 68
1378: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1379: LD_ADDR_OWVAR 26
1383: PUSH
1384: LD_STRING Pavel Starczy
1386: ST_TO_ADDR
// un := CreateHuman ;
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: CALL_OW 44
1396: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1397: LD_ADDR_EXP 21
1401: PUSH
1402: LD_EXP 21
1406: PPUSH
1407: LD_INT 2
1409: PPUSH
1410: LD_VAR 0 4
1414: PPUSH
1415: CALL_OW 2
1419: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1420: LD_VAR 0 4
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// InitHc ;
1435: CALL_OW 19
// for i = 1 to 7 do
1439: LD_ADDR_VAR 0 3
1443: PUSH
1444: DOUBLE
1445: LD_INT 1
1447: DEC
1448: ST_TO_ADDR
1449: LD_INT 7
1451: PUSH
1452: FOR_TO
1453: IFFALSE 1604
// begin PrepareHuman ( false , 1 , skill ) ;
1455: LD_INT 0
1457: PPUSH
1458: LD_INT 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: CALL_OW 380
// un := CreateHuman ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: CALL_OW 44
1479: ST_TO_ADDR
// if i mod 2 = 0 then
1480: LD_VAR 0 3
1484: PUSH
1485: LD_INT 2
1487: MOD
1488: PUSH
1489: LD_INT 0
1491: EQUAL
1492: IFFALSE 1549
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_EXP 21
1508: PUSH
1509: LD_INT 1
1511: PLUS
1512: PPUSH
1513: LD_VAR 0 4
1517: PPUSH
1518: CALL_OW 2
1522: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_INT 3
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 49
// ComHold ( un ) ;
1538: LD_VAR 0 4
1542: PPUSH
1543: CALL_OW 140
// end else
1547: GO 1602
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1549: LD_ADDR_EXP 22
1553: PUSH
1554: LD_EXP 22
1558: PPUSH
1559: LD_EXP 22
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL_OW 2
1577: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1578: LD_VAR 0 4
1582: PPUSH
1583: LD_INT 4
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// ComHold ( un ) ;
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL_OW 140
// end ; end ;
1602: GO 1452
1604: POP
1605: POP
// for i := 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1685
// begin PrepareSoldier ( false , 3 ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// russian_troops_3 := Join ( russian_troops_3 , un ) ;
1642: LD_ADDR_EXP 23
1646: PUSH
1647: LD_EXP 23
1651: PPUSH
1652: LD_VAR 0 4
1656: PPUSH
1657: CALL 68153 0 2
1661: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 5 , 3 , false ) ;
1662: LD_VAR 0 4
1666: PPUSH
1667: LD_INT 9
1669: PPUSH
1670: LD_INT 5
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 50
// end ;
1683: GO 1619
1685: POP
1686: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 3
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 31
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1740
// PrepareSolBun ( skill , i ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_VAR 0 3
1733: PPUSH
1734: CALL 197 0 2
1738: GO 1721
1740: POP
1741: POP
// for i = 1 to 3 do
1742: LD_ADDR_VAR 0 3
1746: PUSH
1747: DOUBLE
1748: LD_INT 1
1750: DEC
1751: ST_TO_ADDR
1752: LD_INT 3
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1892
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1758: LD_ADDR_VAR 0 4
1762: PUSH
1763: LD_INT 3
1765: PPUSH
1766: LD_INT 3
1768: PPUSH
1769: LD_INT 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 42
1780: PPUSH
1781: LD_INT 100
1783: PPUSH
1784: CALL 333 0 7
1788: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1789: LD_INT 0
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1804: CALL_OW 44
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_INT 131
1825: PUSH
1826: LD_INT 23
1828: PUSH
1829: LD_INT 167
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 87
1845: PUSH
1846: LD_INT 14
1848: PUSH
1849: LD_INT 95
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_VAR 0 3
1861: ARRAY
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1870: LD_ADDR_EXP 24
1874: PUSH
1875: LD_EXP 24
1879: PPUSH
1880: LD_VAR 0 4
1884: PPUSH
1885: CALL 68153 0 2
1889: ST_TO_ADDR
// end ;
1890: GO 1755
1892: POP
1893: POP
// for i = 1 to 2 do
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 2
1906: PUSH
1907: FOR_TO
1908: IFFALSE 1999
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 380
// un := CreateHuman ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1950: LD_ADDR_EXP 25
1954: PUSH
1955: LD_EXP 25
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_VAR 0 4
1967: PPUSH
1968: CALL_OW 2
1972: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 10
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// ComHold ( un ) ;
1988: LD_VAR 0 4
1992: PPUSH
1993: CALL_OW 140
// end ;
1997: GO 1907
1999: POP
2000: POP
// if Difficulty < 3 then
2001: LD_OWVAR 67
2005: PUSH
2006: LD_INT 3
2008: LESS
2009: IFFALSE 2013
// exit ;
2011: GO 2084
// PrepareHuman ( false , 1 , skill ) ;
2013: LD_INT 0
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
2028: LD_ADDR_EXP 26
2032: PUSH
2033: CALL_OW 44
2037: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
2038: LD_EXP 26
2042: PPUSH
2043: LD_INT 82
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: CALL_OW 44
2065: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
2066: LD_EXP 27
2070: PPUSH
2071: LD_INT 136
2073: PPUSH
2074: LD_INT 30
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 48
// end ;
2084: LD_VAR 0 1
2088: RET
// every 0 0$01 trigger active_road_patrol do
2089: LD_EXP 8
2093: IFFALSE 2159
2095: GO 2097
2097: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2098: LD_EXP 24
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_STRING road
2109: PPUSH
2110: LD_INT 70
2112: PPUSH
2113: LD_INT 131
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 107
2121: PUSH
2122: LD_INT 75
2124: PUSH
2125: LD_INT 107
2127: PUSH
2128: LD_INT 66
2130: PUSH
2131: LD_INT 114
2133: PUSH
2134: LD_INT 61
2136: PUSH
2137: LD_INT 107
2139: PUSH
2140: LD_INT 34
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PPUSH
2155: CALL 421 0 4
2159: END
// every 0 0$01 trigger active_road_patrol do
2160: LD_EXP 8
2164: IFFALSE 2222
2166: GO 2168
2168: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2169: LD_EXP 24
2173: PUSH
2174: LD_INT 2
2176: ARRAY
2177: PPUSH
2178: LD_STRING road
2180: PPUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 12
2189: PUSH
2190: LD_INT 37
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 65
2198: PUSH
2199: LD_INT 62
2201: PUSH
2202: LD_INT 107
2204: PUSH
2205: LD_INT 76
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL 421 0 4
2222: END
// every 0 0$01 trigger active_road_patrol do
2223: LD_EXP 8
2227: IFFALSE 2285
2229: GO 2231
2231: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2232: LD_EXP 24
2236: PUSH
2237: LD_INT 3
2239: ARRAY
2240: PPUSH
2241: LD_STRING road
2243: PPUSH
2244: LD_INT 70
2246: PPUSH
2247: LD_INT 167
2249: PUSH
2250: LD_INT 95
2252: PUSH
2253: LD_INT 147
2255: PUSH
2256: LD_INT 81
2258: PUSH
2259: LD_INT 144
2261: PUSH
2262: LD_INT 66
2264: PUSH
2265: LD_INT 149
2267: PUSH
2268: LD_INT 55
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL 421 0 4
2285: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2286: LD_EXP 26
2290: PPUSH
2291: CALL_OW 302
2295: IFFALSE 2357
2297: GO 2299
2299: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2300: LD_EXP 26
2304: PPUSH
2305: LD_STRING forest
2307: PPUSH
2308: LD_INT 35
2310: PPUSH
2311: LD_INT 52
2313: PUSH
2314: LD_INT 15
2316: PUSH
2317: LD_INT 81
2319: PUSH
2320: LD_INT 9
2322: PUSH
2323: LD_INT 120
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 135
2331: PUSH
2332: LD_INT 80
2334: PUSH
2335: LD_INT 122
2337: PUSH
2338: LD_INT 95
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL 421 0 4
2357: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2358: LD_EXP 27
2362: PPUSH
2363: CALL_OW 302
2367: IFFALSE 2421
2369: GO 2371
2371: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2372: LD_EXP 27
2376: PPUSH
2377: LD_STRING forest
2379: PPUSH
2380: LD_INT 70
2382: PPUSH
2383: LD_INT 137
2385: PUSH
2386: LD_INT 30
2388: PUSH
2389: LD_INT 127
2391: PUSH
2392: LD_INT 23
2394: PUSH
2395: LD_INT 122
2397: PUSH
2398: LD_INT 16
2400: PUSH
2401: LD_INT 114
2403: PUSH
2404: LD_INT 3
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL 421 0 4
2421: END
// every 0 0$01 trigger macmilan_use_radio do
2422: LD_EXP 6
2426: IFFALSE 2487
2428: GO 2430
2430: DISABLE
// begin active_road_patrol := false ;
2431: LD_ADDR_EXP 8
2435: PUSH
2436: LD_INT 0
2438: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2439: LD_EXP 24
2443: PPUSH
2444: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2448: LD_EXP 24
2452: PPUSH
2453: LD_INT 72
2455: PPUSH
2456: LD_INT 41
2458: PPUSH
2459: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2463: LD_EXP 22
2467: PPUSH
2468: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2472: LD_EXP 22
2476: PPUSH
2477: LD_INT 72
2479: PPUSH
2480: LD_INT 41
2482: PPUSH
2483: CALL_OW 174
// end ;
2487: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2488: LD_INT 9
2490: PPUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 1
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 70
2505: IFFALSE 2579
2507: GO 2509
2509: DISABLE
2510: LD_INT 0
2512: PPUSH
// begin enable ;
2513: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2514: LD_ADDR_VAR 0 1
2518: PUSH
2519: LD_INT 9
2521: PPUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PPUSH
2532: CALL_OW 70
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2541: LD_EXP 22
2545: PPUSH
2546: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2550: LD_EXP 22
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: PPUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 251
2574: PPUSH
2575: CALL_OW 174
// end ;
2579: PPOPN 1
2581: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2582: LD_EXP 24
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 256
2595: PUSH
2596: LD_INT 999
2598: LESS
2599: IFTRUE 2620
2601: PUSH
2602: LD_EXP 24
2606: PUSH
2607: LD_INT 2
2609: ARRAY
2610: PPUSH
2611: CALL_OW 256
2615: PUSH
2616: LD_INT 999
2618: LESS
2619: OR
2620: IFFALSE 2636
2622: PUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 16
2630: PPUSH
2631: CALL_OW 292
2635: AND
2636: IFFALSE 2663
2638: GO 2640
2640: DISABLE
// begin active_road_patrol := false ;
2641: LD_ADDR_EXP 8
2645: PUSH
2646: LD_INT 0
2648: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2649: LD_EXP 24
2653: PPUSH
2654: LD_EXP 16
2658: PPUSH
2659: CALL_OW 115
// end ;
2663: END
// every 0 0$01 trigger macmilan_in_trap do
2664: LD_EXP 9
2668: IFFALSE 2714
2670: GO 2672
2672: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2673: LD_EXP 22
2677: PPUSH
2678: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2682: LD_EXP 21
2686: PUSH
2687: LD_EXP 22
2691: ADD
2692: PUSH
2693: LD_EXP 28
2697: ADD
2698: PUSH
2699: LD_EXP 24
2703: ADD
2704: PPUSH
2705: LD_EXP 16
2709: PPUSH
2710: CALL_OW 115
// end ;
2714: END
// every 0 0$01 trigger meta_action do
2715: LD_EXP 10
2719: IFFALSE 2837
2721: GO 2723
2723: DISABLE
// begin active_road_patrol := false ;
2724: LD_ADDR_EXP 8
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2732: LD_INT 15
2734: PPUSH
2735: LD_INT 22
2737: PUSH
2738: LD_INT 1
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 70
2749: IFFALSE 2804
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2751: LD_EXP 21
2755: PUSH
2756: LD_EXP 22
2760: ADD
2761: PPUSH
2762: LD_INT 104
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2772: LD_EXP 24
2776: PPUSH
2777: LD_INT 96
2779: PPUSH
2780: LD_INT 14
2782: PPUSH
2783: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2787: LD_EXP 28
2791: PPUSH
2792: LD_INT 85
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 114
// end else
2802: GO 2837
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2804: LD_EXP 21
2808: PUSH
2809: LD_EXP 22
2813: ADD
2814: PUSH
2815: LD_EXP 28
2819: ADD
2820: PUSH
2821: LD_EXP 24
2825: ADD
2826: PPUSH
2827: LD_INT 93
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: CALL_OW 114
// end ;
2837: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2838: LD_EXP 28
2842: PPUSH
2843: CALL_OW 256
2847: PUSH
2848: LD_INT 1000
2850: LESS
2851: IFFALSE 2902
2853: GO 2855
2855: DISABLE
// begin enable ;
2856: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2857: LD_INT 18
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: CALL_OW 428
2867: PUSH
2868: LD_EXP 28
2872: EQUAL
2873: IFFALSE 2887
// begin RemoveUnit ( Pokryshkin ) ;
2875: LD_EXP 28
2879: PPUSH
2880: CALL_OW 64
// disable ;
2884: DISABLE
// end else
2885: GO 2902
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2887: LD_EXP 28
2891: PPUSH
2892: LD_INT 18
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: CALL_OW 111
// end ;
2902: END
// every 0 0$20 trigger send_troops_to_forest do
2903: LD_EXP 14
2907: IFFALSE 2961
2909: GO 2911
2911: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2912: LD_EXP 26
2916: PPUSH
2917: CALL_OW 302
2921: NOT
2922: IFFALSE 2926
// exit ;
2924: GO 2961
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2926: LD_EXP 21
2930: PUSH
2931: LD_EXP 28
2935: ADD
2936: PPUSH
2937: LD_EXP 26
2941: PPUSH
2942: CALL_OW 252
2946: PPUSH
2947: LD_EXP 26
2951: PPUSH
2952: CALL_OW 253
2956: PPUSH
2957: CALL_OW 114
// end ;
2961: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2962: LD_VAR 0 1
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 3
2974: EQUAL
2975: IFFALSE 3018
// begin wait ( 11 ) ;
2977: LD_INT 11
2979: PPUSH
2980: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2984: LD_VAR 0 1
2988: PPUSH
2989: LD_INT 30
2991: PUSH
2992: LD_INT 0
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 69
3003: PPUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 74
3013: PPUSH
3014: CALL_OW 120
// end ; end ; end_of_file
3018: PPOPN 4
3020: END
// export function Action ; var i ; begin
3021: LD_INT 0
3023: PPUSH
3024: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: LD_INT 22
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 25
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 69
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3073
// ComHold ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL_OW 140
3071: GO 3059
3073: POP
3074: POP
// InGameOn ;
3075: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
3079: LD_INT 79
3081: PPUSH
3082: LD_INT 76
3084: PPUSH
3085: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3089: LD_INT 10
3091: PPUSH
3092: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3096: LD_EXP 16
3100: PPUSH
3101: LD_INT 80
3103: PPUSH
3104: LD_INT 79
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: CALL_OW 48
// wait ( 0 0$03 ) ;
3114: LD_INT 105
3116: PPUSH
3117: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3121: LD_EXP 16
3125: PPUSH
3126: LD_INT 80
3128: PPUSH
3129: LD_INT 76
3131: PPUSH
3132: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3136: LD_EXP 16
3140: PPUSH
3141: LD_STRING D1-JMM-1
3143: PPUSH
3144: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3148: LD_INT 10
3150: PPUSH
3151: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3155: LD_EXP 16
3159: PPUSH
3160: LD_INT 76
3162: PPUSH
3163: LD_INT 76
3165: PPUSH
3166: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3170: LD_EXP 16
3174: PPUSH
3175: LD_STRING D1-JMM-1a
3177: PPUSH
3178: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3182: LD_INT 10
3184: PPUSH
3185: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_INT 83
3196: PPUSH
3197: LD_INT 66
3199: PPUSH
3200: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3204: LD_EXP 16
3208: PPUSH
3209: LD_STRING D1-JMM-1b
3211: PPUSH
3212: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3216: LD_INT 18
3218: PPUSH
3219: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3223: LD_EXP 16
3227: PPUSH
3228: LD_STRING D1-JMM-1c
3230: PPUSH
3231: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3235: LD_INT 7
3237: PPUSH
3238: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3242: LD_EXP 19
3246: PPUSH
3247: LD_STRING D1-Pow-1
3249: PPUSH
3250: CALL 72398 0 2
// Say ( JMM , D1-JMM-2 ) ;
3254: LD_EXP 16
3258: PPUSH
3259: LD_STRING D1-JMM-2
3261: PPUSH
3262: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3266: LD_EXP 19
3270: PPUSH
3271: LD_STRING D1-Pow-2
3273: PPUSH
3274: CALL 72398 0 2
// Say ( JMM , D1-JMM-3 ) ;
3278: LD_EXP 16
3282: PPUSH
3283: LD_STRING D1-JMM-3
3285: PPUSH
3286: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3290: LD_EXP 19
3294: PPUSH
3295: LD_STRING D1-Pow-3
3297: PPUSH
3298: CALL 72398 0 2
// Say ( JMM , D1-JMM-4 ) ;
3302: LD_EXP 16
3306: PPUSH
3307: LD_STRING D1-JMM-4
3309: PPUSH
3310: CALL_OW 88
// ComFree ( JMM ) ;
3314: LD_EXP 16
3318: PPUSH
3319: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3323: LD_INT 10
3325: PPUSH
3326: CALL_OW 67
// InGameOff ;
3330: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3334: LD_STRING M1
3336: PPUSH
3337: CALL_OW 337
// SaveForQuickRestart ;
3341: CALL_OW 22
// active_russian_dialog := true ;
3345: LD_ADDR_EXP 3
3349: PUSH
3350: LD_INT 1
3352: ST_TO_ADDR
// active_road_patrol := true ;
3353: LD_ADDR_EXP 8
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
// if Difficulty < 3 then
3361: LD_OWVAR 67
3365: PUSH
3366: LD_INT 3
3368: LESS
3369: IFFALSE 3400
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3371: LD_EXP 17
3375: PPUSH
3376: LD_INT 41
3378: PPUSH
3379: LD_INT 71
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 48
// ComHold ( Bobby ) ;
3389: LD_EXP 17
3393: PPUSH
3394: CALL_OW 140
// end else
3398: GO 3448
// begin SetDir ( Bobby , 5 ) ;
3400: LD_EXP 17
3404: PPUSH
3405: LD_INT 5
3407: PPUSH
3408: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3412: LD_EXP 17
3416: PPUSH
3417: LD_INT 105
3419: PPUSH
3420: LD_INT 98
3422: PPUSH
3423: LD_INT 0
3425: PPUSH
3426: CALL_OW 48
// ComCrawl ( Bobby ) ;
3430: LD_EXP 17
3434: PPUSH
3435: CALL_OW 137
// AddComHold ( Bobby ) ;
3439: LD_EXP 17
3443: PPUSH
3444: CALL_OW 200
// end ; if Difficulty < 3 then
3448: LD_OWVAR 67
3452: PUSH
3453: LD_INT 3
3455: LESS
3456: IFFALSE 3493
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3458: LD_EXP 18
3462: PPUSH
3463: LD_INT 90
3465: PPUSH
3466: LD_INT 42
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3476: LD_EXP 18
3480: PPUSH
3481: LD_INT 79
3483: PPUSH
3484: LD_INT 34
3486: PPUSH
3487: CALL_OW 111
// end else
3491: GO 3541
// if Difficulty = 3 then
3493: LD_OWVAR 67
3497: PUSH
3498: LD_INT 3
3500: EQUAL
3501: IFFALSE 3523
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3503: LD_EXP 18
3507: PPUSH
3508: LD_INT 125
3510: PPUSH
3511: LD_INT 42
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: CALL_OW 48
3521: GO 3541
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3523: LD_EXP 18
3527: PPUSH
3528: LD_INT 154
3530: PPUSH
3531: LD_INT 97
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3541: LD_EXP 18
3545: PPUSH
3546: CALL_OW 197
// AddComHold ( Cyrus ) ;
3550: LD_EXP 18
3554: PPUSH
3555: CALL_OW 200
// end ;
3559: LD_VAR 0 1
3563: RET
// every 0 0$01 trigger active_russian_dialog do var i , wait_points , tmp ;
3564: LD_EXP 3
3568: IFFALSE 4314
3570: GO 3572
3572: DISABLE
3573: LD_INT 0
3575: PPUSH
3576: PPUSH
3577: PPUSH
// begin wait_points := 0 ;
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3586: LD_INT 70
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3593: LD_EXP 21
3597: PPUSH
3598: LD_INT 79
3600: PPUSH
3601: LD_INT 83
3603: PPUSH
3604: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3608: LD_EXP 21
3612: PUSH
3613: LD_INT 2
3615: ARRAY
3616: PPUSH
3617: LD_STRING D1R-Rus1-1
3619: PPUSH
3620: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3624: LD_EXP 21
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: LD_STRING D1R-Rus2-1
3635: PPUSH
3636: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3640: LD_EXP 22
3644: PPUSH
3645: LD_INT 91
3647: PPUSH
3648: LD_INT 80
3650: PPUSH
3651: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3662: LD_EXP 21
3666: PUSH
3667: LD_INT 1
3669: ARRAY
3670: PPUSH
3671: LD_INT 79
3673: PPUSH
3674: LD_INT 82
3676: PPUSH
3677: CALL_OW 297
3681: PUSH
3682: LD_INT 6
3684: LESS
3685: IFFALSE 3655
// if not IsInArea ( JMM , jmm_spot ) then
3687: LD_EXP 16
3691: PPUSH
3692: LD_INT 5
3694: PPUSH
3695: CALL_OW 308
3699: NOT
3700: IFFALSE 3720
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3702: LD_EXP 21
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: PPUSH
3711: LD_STRING D1Ra-Rus2-1
3713: PPUSH
3714: CALL_OW 88
3718: GO 3787
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 2
3727: ARRAY
3728: PPUSH
3729: LD_STRING D1Rb-Rus1-1
3731: PPUSH
3732: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3736: LD_EXP 21
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: PPUSH
3745: LD_STRING D1Rb-Rus2-1
3747: PPUSH
3748: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3752: LD_EXP 21
3756: PUSH
3757: LD_EXP 22
3761: ADD
3762: PPUSH
3763: LD_EXP 16
3767: PPUSH
3768: CALL_OW 250
3772: PPUSH
3773: LD_EXP 16
3777: PPUSH
3778: CALL_OW 251
3782: PPUSH
3783: CALL_OW 114
// end ; wait_points := 10 ;
3787: LD_ADDR_VAR 0 2
3791: PUSH
3792: LD_INT 10
3794: ST_TO_ADDR
// if Difficulty > 1 then
3795: LD_OWVAR 67
3799: PUSH
3800: LD_INT 1
3802: GREATER
3803: IFFALSE 3962
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3805: LD_EXP 21
3809: PPUSH
3810: LD_INT 78
3812: PPUSH
3813: LD_INT 95
3815: PPUSH
3816: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3820: LD_EXP 21
3824: PPUSH
3825: LD_INT 175
3827: PPUSH
3828: CALL_OW 202
// wait_points := wait_points + 15 ;
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: LD_VAR 0 2
3841: PUSH
3842: LD_INT 15
3844: PLUS
3845: ST_TO_ADDR
// if Difficulty > 2 then
3846: LD_OWVAR 67
3850: PUSH
3851: LD_INT 2
3853: GREATER
3854: IFFALSE 3885
// begin AddComAgressiveMove ( russian_troops_1 , 63 , 81 ) ;
3856: LD_EXP 21
3860: PPUSH
3861: LD_INT 63
3863: PPUSH
3864: LD_INT 81
3866: PPUSH
3867: CALL_OW 174
// wait_points := wait_points + 7 ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 2
3880: PUSH
3881: LD_INT 7
3883: PLUS
3884: ST_TO_ADDR
// end ; if Difficulty > 3 then
3885: LD_OWVAR 67
3889: PUSH
3890: LD_INT 3
3892: GREATER
3893: IFFALSE 3962
// begin AddComAgressiveMove ( russian_troops_1 [ 1 ] , 56 , 73 ) ;
3895: LD_EXP 21
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: PPUSH
3904: LD_INT 56
3906: PPUSH
3907: LD_INT 73
3909: PPUSH
3910: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 [ 2 ] , 89 , 96 ) ;
3914: LD_EXP 21
3918: PUSH
3919: LD_INT 2
3921: ARRAY
3922: PPUSH
3923: LD_INT 89
3925: PPUSH
3926: LD_INT 96
3928: PPUSH
3929: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 , 67 , 95 ) ;
3933: LD_EXP 21
3937: PPUSH
3938: LD_INT 67
3940: PPUSH
3941: LD_INT 95
3943: PPUSH
3944: CALL_OW 174
// wait_points := wait_points + 12 ;
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: LD_VAR 0 2
3957: PUSH
3958: LD_INT 12
3960: PLUS
3961: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3962: LD_INT 35
3964: PPUSH
3965: CALL_OW 67
// wait_points := wait_points - 1 ;
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: MINUS
3982: ST_TO_ADDR
// if See ( 3 , JMM ) then
3983: LD_INT 3
3985: PPUSH
3986: LD_EXP 16
3990: PPUSH
3991: CALL_OW 292
3995: IFFALSE 4049
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3997: LD_EXP 21
4001: PUSH
4002: LD_INT 2
4004: ARRAY
4005: PPUSH
4006: LD_STRING D1Rb-Rus1-1
4008: PPUSH
4009: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4013: LD_EXP 21
4017: PPUSH
4018: LD_EXP 16
4022: PPUSH
4023: CALL_OW 250
4027: PPUSH
4028: LD_EXP 16
4032: PPUSH
4033: CALL_OW 251
4037: PPUSH
4038: CALL_OW 114
// wait ( 0 0$03 ) ;
4042: LD_INT 105
4044: PPUSH
4045: CALL_OW 67
// end ; until wait_points = 0 ;
4049: LD_VAR 0 2
4053: PUSH
4054: LD_INT 0
4056: EQUAL
4057: IFFALSE 3962
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
4059: LD_EXP 21
4063: PUSH
4064: LD_INT 2
4066: ARRAY
4067: PPUSH
4068: LD_STRING D1Rc-Rus1-1
4070: PPUSH
4071: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
4075: LD_EXP 21
4079: PUSH
4080: LD_INT 1
4082: ARRAY
4083: PPUSH
4084: LD_STRING D1Ra-Rus2-1a
4086: PPUSH
4087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_distxy , 70 , 89 , 9 ] ] ) ;
4091: LD_ADDR_VAR 0 3
4095: PUSH
4096: LD_INT 22
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 92
4108: PUSH
4109: LD_INT 70
4111: PUSH
4112: LD_INT 89
4114: PUSH
4115: LD_INT 9
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 69
4132: ST_TO_ADDR
// if tmp then
4133: LD_VAR 0 3
4137: IFFALSE 4164
// begin ComAttackUnit ( russian_troops_1 , tmp [ 1 ] ) ;
4139: LD_EXP 21
4143: PPUSH
4144: LD_VAR 0 3
4148: PUSH
4149: LD_INT 1
4151: ARRAY
4152: PPUSH
4153: CALL_OW 115
// wait ( 0 0$4 ) ;
4157: LD_INT 140
4159: PPUSH
4160: CALL_OW 67
// end ; active_powell_dialog := true ;
4164: LD_ADDR_EXP 15
4168: PUSH
4169: LD_INT 1
4171: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4172: LD_EXP 21
4176: PPUSH
4177: LD_INT 45
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
4187: LD_EXP 22
4191: PPUSH
4192: LD_INT 26
4194: PPUSH
4195: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
4199: LD_INT 35
4201: PPUSH
4202: CALL_OW 67
// if See ( 3 , JMM ) then
4206: LD_INT 3
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 292
4218: IFFALSE 4274
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4220: LD_EXP 21
4224: PUSH
4225: LD_INT 2
4227: ARRAY
4228: PPUSH
4229: LD_STRING D1Rb-Rus1-1
4231: PPUSH
4232: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4236: LD_EXP 21
4240: PPUSH
4241: LD_EXP 16
4245: PPUSH
4246: CALL_OW 250
4250: PPUSH
4251: LD_EXP 16
4255: PPUSH
4256: CALL_OW 251
4260: PPUSH
4261: CALL_OW 114
// Wait ( 0 0$50 ) ;
4265: LD_INT 1750
4267: PPUSH
4268: CALL_OW 67
// end else
4272: GO 4289
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4274: LD_EXP 21
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: LD_INT 5
4284: PPUSH
4285: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4289: LD_EXP 21
4293: PUSH
4294: LD_INT 1
4296: ARRAY
4297: PPUSH
4298: LD_INT 45
4300: PPUSH
4301: LD_INT 5
4303: PPUSH
4304: CALL_OW 297
4308: PUSH
4309: LD_INT 10
4311: LESS
4312: IFFALSE 4199
// end ;
4314: PPOPN 3
4316: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4317: LD_INT 22
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 92
4329: PUSH
4330: LD_INT 80
4332: PUSH
4333: LD_INT 83
4335: PUSH
4336: LD_INT 6
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: IFFALSE 4365
4355: PUSH
4356: LD_OWVAR 67
4360: PUSH
4361: LD_INT 1
4363: EQUAL
4364: AND
4365: IFFALSE 4446
4367: GO 4369
4369: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4370: LD_INT 80
4372: PPUSH
4373: LD_INT 83
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: LD_INT 7
4381: NEG
4382: PPUSH
4383: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4387: LD_INT 35
4389: PPUSH
4390: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4394: LD_INT 22
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 92
4406: PUSH
4407: LD_INT 80
4409: PUSH
4410: LD_INT 83
4412: PUSH
4413: LD_INT 10
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 69
4430: NOT
4431: IFFALSE 4387
// RemoveSeeing ( 80 , 83 , 1 ) ;
4433: LD_INT 80
4435: PPUSH
4436: LD_INT 83
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: CALL_OW 331
// end ;
4446: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4447: LD_EXP 16
4451: PPUSH
4452: LD_EXP 17
4456: PPUSH
4457: CALL_OW 296
4461: PUSH
4462: LD_INT 6
4464: LESS
4465: IFFALSE 4478
4467: PUSH
4468: LD_EXP 17
4472: PPUSH
4473: CALL_OW 302
4477: AND
4478: IFFALSE 4976
4480: GO 4482
4482: DISABLE
// begin ComWalk ( Bobby ) ;
4483: LD_EXP 17
4487: PPUSH
4488: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4492: LD_EXP 17
4496: PPUSH
4497: LD_EXP 16
4501: PPUSH
4502: CALL_OW 250
4506: PPUSH
4507: LD_EXP 16
4511: PPUSH
4512: CALL_OW 251
4516: PPUSH
4517: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4521: LD_INT 35
4523: PPUSH
4524: CALL_OW 67
// until See ( 4 , JMM ) ;
4528: LD_INT 4
4530: PPUSH
4531: LD_EXP 16
4535: PPUSH
4536: CALL_OW 292
4540: IFFALSE 4521
// InGameOn ;
4542: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4546: LD_EXP 16
4550: PPUSH
4551: LD_EXP 17
4555: PPUSH
4556: CALL_OW 119
// if not cyrus_in_squad then
4560: LD_EXP 7
4564: NOT
4565: IFFALSE 4593
// begin AddComAnim ( JMM , 6 ) ;
4567: LD_EXP 16
4571: PPUSH
4572: LD_INT 6
4574: PPUSH
4575: CALL_OW 209
// AddComTurnUnit ( JMM , Bobby ) ;
4579: LD_EXP 16
4583: PPUSH
4584: LD_EXP 17
4588: PPUSH
4589: CALL_OW 179
// end ; if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4593: LD_EXP 7
4597: IFFALSE 4610
4599: PUSH
4600: LD_EXP 18
4604: PPUSH
4605: CALL_OW 302
4609: AND
4610: IFFALSE 4632
4612: PUSH
4613: LD_EXP 16
4617: PPUSH
4618: LD_EXP 18
4622: PPUSH
4623: CALL_OW 296
4627: PUSH
4628: LD_INT 10
4630: LESS
4631: AND
4632: IFFALSE 4677
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4634: LD_EXP 18
4638: PPUSH
4639: LD_EXP 16
4643: PPUSH
4644: CALL_OW 250
4648: PPUSH
4649: LD_EXP 16
4653: PPUSH
4654: CALL_OW 251
4658: PPUSH
4659: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4663: LD_EXP 18
4667: PPUSH
4668: LD_EXP 17
4672: PPUSH
4673: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4677: LD_EXP 16
4681: PPUSH
4682: LD_STRING D2-JMM-1
4684: PPUSH
4685: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4689: LD_EXP 17
4693: PPUSH
4694: LD_EXP 16
4698: PPUSH
4699: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4703: LD_INT 10
4705: PPUSH
4706: CALL_OW 67
// Say ( Bobby , D2-Bobby-1 ) ;
4710: LD_EXP 17
4714: PPUSH
4715: LD_STRING D2-Bobby-1
4717: PPUSH
4718: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4722: LD_EXP 16
4726: PPUSH
4727: LD_STRING D2-JMM-2
4729: PPUSH
4730: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4734: LD_EXP 17
4738: PPUSH
4739: LD_EXP 16
4743: PPUSH
4744: CALL_OW 250
4748: PPUSH
4749: LD_EXP 16
4753: PPUSH
4754: CALL_OW 251
4758: PPUSH
4759: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4763: LD_EXP 17
4767: PPUSH
4768: LD_STRING D2-Bobby-2
4770: PPUSH
4771: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4775: LD_EXP 16
4779: PPUSH
4780: LD_STRING D2-JMM-3
4782: PPUSH
4783: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4787: LD_EXP 17
4791: PPUSH
4792: LD_EXP 16
4796: PPUSH
4797: CALL_OW 119
// DialogueOn ;
4801: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4805: LD_EXP 17
4809: PPUSH
4810: LD_STRING D2-Bobby-3
4812: PPUSH
4813: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4817: LD_EXP 16
4821: PPUSH
4822: LD_STRING D2-JMM-4
4824: PPUSH
4825: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4829: LD_EXP 17
4833: PPUSH
4834: LD_STRING D2-Bobby-4
4836: PPUSH
4837: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4841: LD_EXP 16
4845: PPUSH
4846: LD_STRING D2-JMM-5
4848: PPUSH
4849: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4853: LD_EXP 17
4857: PPUSH
4858: LD_STRING D2-Bobby-5
4860: PPUSH
4861: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4865: LD_EXP 16
4869: PPUSH
4870: LD_STRING D2-JMM-6
4872: PPUSH
4873: CALL_OW 88
// if not powell_contact then
4877: LD_EXP 5
4881: NOT
4882: IFFALSE 4908
// begin Say ( Bobby , D2-Bobby-6 ) ;
4884: LD_EXP 17
4888: PPUSH
4889: LD_STRING D2-Bobby-6
4891: PPUSH
4892: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4896: LD_EXP 16
4900: PPUSH
4901: LD_STRING D2-JMM-7
4903: PPUSH
4904: CALL_OW 88
// end ; DialogueOff ;
4908: CALL_OW 7
// InGameOff ;
4912: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4916: LD_EXP 17
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4928: LD_EXP 16
4932: PUSH
4933: LD_EXP 17
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 139
// bobby_in_squad := true ;
4946: LD_ADDR_EXP 4
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4954: LD_EXP 5
4958: IFFALSE 4967
4960: PUSH
4961: LD_EXP 7
4965: NOT
4966: AND
4967: IFFALSE 4976
// ChangeMissionObjectives ( M2b ) ;
4969: LD_STRING M2b
4971: PPUSH
4972: CALL_OW 337
// end ;
4976: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4977: LD_EXP 3
4981: IFFALSE 4993
4983: PUSH
4984: LD_OWVAR 67
4988: PUSH
4989: LD_INT 3
4991: LESS
4992: AND
4993: IFFALSE 5027
4995: GO 4997
4997: DISABLE
// begin wait ( 1 1$00 ) ;
4998: LD_INT 2100
5000: PPUSH
5001: CALL_OW 67
// if not bobby_in_squad then
5005: LD_EXP 4
5009: NOT
5010: IFFALSE 5027
// ComMoveXY ( Bobby , 75 , 83 ) ;
5012: LD_EXP 17
5016: PPUSH
5017: LD_INT 75
5019: PPUSH
5020: LD_INT 83
5022: PPUSH
5023: CALL_OW 111
// end ;
5027: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
5028: LD_EXP 7
5032: IFFALSE 5041
5034: PUSH
5035: LD_EXP 4
5039: NOT
5040: AND
5041: IFFALSE 5070
5043: GO 5045
5045: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
5046: LD_EXP 17
5050: PPUSH
5051: LD_INT 105
5053: PPUSH
5054: LD_INT 97
5056: PPUSH
5057: CALL_OW 111
// AddComCrawl ( Bobby ) ;
5061: LD_EXP 17
5065: PPUSH
5066: CALL_OW 197
// end ;
5070: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
5071: LD_EXP 16
5075: PPUSH
5076: LD_INT 6
5078: PPUSH
5079: CALL_OW 308
5083: IFFALSE 5105
5085: PUSH
5086: LD_EXP 16
5090: PPUSH
5091: LD_EXP 17
5095: PPUSH
5096: CALL_OW 296
5100: PUSH
5101: LD_INT 7
5103: LESS
5104: AND
5105: IFFALSE 5113
5107: PUSH
5108: LD_EXP 4
5112: AND
5113: IFFALSE 5160
5115: GO 5117
5117: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
5118: LD_EXP 16
5122: PUSH
5123: LD_EXP 17
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
5136: LD_EXP 16
5140: PPUSH
5141: LD_STRING D2a-JMM-1
5143: PPUSH
5144: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
5148: LD_EXP 17
5152: PPUSH
5153: LD_STRING D2a-Bobby-1
5155: PPUSH
5156: CALL_OW 88
// end ;
5160: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
5161: LD_EXP 15
5165: IFFALSE 5182
5167: PUSH
5168: LD_INT 3
5170: PPUSH
5171: LD_EXP 16
5175: PPUSH
5176: CALL_OW 292
5180: NOT
5181: AND
5182: IFFALSE 5353
5184: GO 5186
5186: DISABLE
// begin wait ( 0 0$5 ) ;
5187: LD_INT 175
5189: PPUSH
5190: CALL_OW 67
// InGameOn ;
5194: CALL_OW 8
// DialogueOn ;
5198: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
5202: LD_EXP 19
5206: PPUSH
5207: LD_STRING D3-Pow-1
5209: PPUSH
5210: CALL 72398 0 2
// Say ( JMM , D3-JMM-1 ) ;
5214: LD_EXP 16
5218: PPUSH
5219: LD_STRING D3-JMM-1
5221: PPUSH
5222: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
5226: LD_EXP 19
5230: PPUSH
5231: LD_STRING D3-Pow-2
5233: PPUSH
5234: CALL 72398 0 2
// Say ( JMM , D3-JMM-2 ) ;
5238: LD_EXP 16
5242: PPUSH
5243: LD_STRING D3-JMM-2
5245: PPUSH
5246: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
5250: LD_EXP 19
5254: PPUSH
5255: LD_STRING D3-Pow-3
5257: PPUSH
5258: CALL 72398 0 2
// DialogueOff ;
5262: CALL_OW 7
// InGameOff ;
5266: CALL_OW 9
// powell_contact := true ;
5270: LD_ADDR_EXP 5
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
5278: LD_INT 10
5280: PPUSH
5281: LD_INT 1
5283: PPUSH
5284: CALL_OW 424
// uc_side := 4 ;
5288: LD_ADDR_OWVAR 20
5292: PUSH
5293: LD_INT 4
5295: ST_TO_ADDR
// uc_nation := 1 ;
5296: LD_ADDR_OWVAR 21
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5304: LD_ADDR_EXP 19
5308: PUSH
5309: LD_STRING Powell
5311: PPUSH
5312: LD_INT 0
5314: PPUSH
5315: LD_STRING 
5317: PPUSH
5318: CALL 29963 0 3
5322: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5323: LD_STRING M2
5325: PPUSH
5326: CALL_OW 337
// if not bobby_in_squad then
5330: LD_EXP 4
5334: NOT
5335: IFFALSE 5346
// ChangeMissionObjectives ( M2a ) else
5337: LD_STRING M2a
5339: PPUSH
5340: CALL_OW 337
5344: GO 5353
// ChangeMissionObjectives ( M2b ) ;
5346: LD_STRING M2b
5348: PPUSH
5349: CALL_OW 337
// end ;
5353: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5354: LD_EXP 16
5358: PPUSH
5359: LD_INT 7
5361: PPUSH
5362: CALL_OW 308
5366: IFFALSE 5501
5368: GO 5370
5370: DISABLE
// begin DialogueOn ;
5371: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5375: LD_EXP 20
5379: PPUSH
5380: LD_STRING D4-Rus3-1
5382: PPUSH
5383: CALL 72398 0 2
// DialogueOff ;
5387: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5391: LD_STRING M3a
5393: PPUSH
5394: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5398: LD_INT 11
5400: PPUSH
5401: LD_INT 1
5403: PPUSH
5404: CALL_OW 424
// Wait ( 0 0$02 ) ;
5408: LD_INT 70
5410: PPUSH
5411: CALL_OW 67
// DialogueOn ;
5415: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5419: LD_EXP 19
5423: PPUSH
5424: LD_STRING D4-Pow-1
5426: PPUSH
5427: CALL_OW 586
// DialogueOff ;
5431: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5435: LD_STRING M3b
5437: PPUSH
5438: CALL_OW 337
// case Query ( Q1 ) of 1 :
5442: LD_STRING Q1
5444: PPUSH
5445: CALL_OW 97
5449: PUSH
5450: LD_INT 1
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5489
5458: POP
// begin macmilan_use_radio := true ;
5459: LD_ADDR_EXP 6
5463: PUSH
5464: LD_INT 1
5466: ST_TO_ADDR
// DialogueOn ;
5467: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5471: LD_EXP 16
5475: PPUSH
5476: LD_STRING D4a-JMM-1
5478: PPUSH
5479: CALL_OW 88
// DialogueOff ;
5483: CALL_OW 7
// end ; 2 :
5487: GO 5501
5489: LD_INT 2
5491: DOUBLE
5492: EQUAL
5493: IFTRUE 5497
5495: GO 5500
5497: POP
// ; end ;
5498: GO 5501
5500: POP
// end ;
5501: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5502: LD_EXP 16
5506: PPUSH
5507: LD_EXP 18
5511: PPUSH
5512: CALL_OW 296
5516: PUSH
5517: LD_INT 8
5519: LESS
5520: IFFALSE 5533
5522: PUSH
5523: LD_EXP 18
5527: PPUSH
5528: CALL_OW 302
5532: AND
5533: IFFALSE 5834
5535: GO 5537
5537: DISABLE
// begin InGameOn ;
5538: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5542: LD_EXP 16
5546: PPUSH
5547: LD_EXP 18
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_EXP 18
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5571: LD_EXP 17
5575: PPUSH
5576: CALL_OW 302
5580: IFFALSE 5588
5582: PUSH
5583: LD_EXP 4
5587: AND
5588: IFFALSE 5619
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5590: LD_EXP 17
5594: PPUSH
5595: LD_EXP 16
5599: PPUSH
5600: CALL_OW 250
5604: PPUSH
5605: LD_EXP 16
5609: PPUSH
5610: CALL_OW 251
5614: PPUSH
5615: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5619: LD_EXP 16
5623: PPUSH
5624: LD_STRING D5-JMM-1
5626: PPUSH
5627: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5631: LD_INT 10
5633: PPUSH
5634: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5638: LD_EXP 16
5642: PPUSH
5643: LD_EXP 18
5647: PPUSH
5648: CALL_OW 119
// ComWalk ( Cyrus ) ;
5652: LD_EXP 18
5656: PPUSH
5657: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5661: LD_EXP 18
5665: PPUSH
5666: LD_EXP 16
5670: PPUSH
5671: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5675: LD_EXP 18
5679: PPUSH
5680: LD_STRING D5-Cyrus-1
5682: PPUSH
5683: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5687: LD_EXP 17
5691: PPUSH
5692: CALL_OW 302
5696: IFFALSE 5704
5698: PUSH
5699: LD_EXP 4
5703: AND
5704: IFFALSE 5744
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_EXP 18
5715: PPUSH
5716: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5720: LD_EXP 17
5724: PPUSH
5725: LD_STRING D5-Bobby-1
5727: PPUSH
5728: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5732: LD_EXP 16
5736: PPUSH
5737: LD_STRING D5-JMM-2
5739: PPUSH
5740: CALL_OW 88
// end ; InGameOff ;
5744: CALL_OW 9
// cyrus_in_squad := true ;
5748: LD_ADDR_EXP 7
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5756: LD_EXP 18
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5768: LD_EXP 5
5772: IFFALSE 5781
5774: PUSH
5775: LD_EXP 4
5779: NOT
5780: AND
5781: IFFALSE 5790
// ChangeMissionObjectives ( M2b ) ;
5783: LD_STRING M2b
5785: PPUSH
5786: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5790: LD_EXP 4
5794: NOT
5795: IFFALSE 5812
5797: PUSH
5798: LD_EXP 17
5802: PPUSH
5803: CALL_OW 255
5807: PUSH
5808: LD_INT 4
5810: EQUAL
5811: AND
5812: IFFALSE 5825
5814: PUSH
5815: LD_EXP 17
5819: PPUSH
5820: CALL_OW 302
5824: AND
5825: IFFALSE 5834
// SetAchievement ( ACH_CYRUS ) ;
5827: LD_STRING ACH_CYRUS
5829: PPUSH
5830: CALL_OW 543
// end ;
5834: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5835: LD_EXP 4
5839: IFFALSE 5847
5841: PUSH
5842: LD_EXP 7
5846: AND
5847: IFFALSE 5859
5849: GO 5851
5851: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5852: LD_STRING M2c
5854: PPUSH
5855: CALL_OW 337
5859: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5860: LD_EXP 16
5864: PPUSH
5865: LD_INT 8
5867: PPUSH
5868: CALL_OW 308
5872: IFFALSE 5924
5874: GO 5876
5876: DISABLE
// begin macmilan_in_trap := true ;
5877: LD_ADDR_EXP 9
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5885: LD_INT 35
5887: PPUSH
5888: CALL_OW 67
// DialogueOn ;
5892: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5896: LD_EXP 28
5900: PPUSH
5901: LD_STRING D5-Pok-1
5903: PPUSH
5904: CALL_OW 88
// DialogueOff ;
5908: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5912: LD_EXP 16
5916: PPUSH
5917: LD_STRING D4b-JMM-1
5919: PPUSH
5920: CALL_OW 88
// end ;
5924: END
// every 0 0$1 trigger IsInArea ( JMM , ruBaseArea ) do
5925: LD_EXP 16
5929: PPUSH
5930: LD_INT 16
5932: PPUSH
5933: CALL_OW 308
5937: IFFALSE 6014
5939: GO 5941
5941: DISABLE
// begin macmilan_in_trap := true ;
5942: LD_ADDR_EXP 9
5946: PUSH
5947: LD_INT 1
5949: ST_TO_ADDR
// ComAttackUnit ( russian_troops_3 , JMM ) ;
5950: LD_EXP 23
5954: PPUSH
5955: LD_EXP 16
5959: PPUSH
5960: CALL_OW 115
// repeat wait ( 0 0$0.3 ) ;
5964: LD_INT 10
5966: PPUSH
5967: CALL_OW 67
// until GetLives ( JMM ) < 1000 and See ( 3 , JMM ) ;
5971: LD_EXP 16
5975: PPUSH
5976: CALL_OW 256
5980: PUSH
5981: LD_INT 1000
5983: LESS
5984: IFFALSE 6000
5986: PUSH
5987: LD_INT 3
5989: PPUSH
5990: LD_EXP 16
5994: PPUSH
5995: CALL_OW 292
5999: AND
6000: IFFALSE 5964
// Say ( JMM , D4b-JMM-1 ) ;
6002: LD_EXP 16
6006: PPUSH
6007: LD_STRING D4b-JMM-1
6009: PPUSH
6010: CALL_OW 88
// end ;
6014: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
6015: LD_EXP 16
6019: PPUSH
6020: LD_INT 13
6022: PPUSH
6023: CALL_OW 308
6027: IFFALSE 6055
6029: PUSH
6030: LD_EXP 16
6034: PPUSH
6035: LD_EXP 25
6039: PUSH
6040: LD_EXP 25
6044: ARRAY
6045: PPUSH
6046: CALL_OW 296
6050: PUSH
6051: LD_INT 12
6053: LESS
6054: AND
6055: IFTRUE 6085
6057: PUSH
6058: LD_EXP 25
6062: PPUSH
6063: LD_INT 3
6065: PUSH
6066: LD_INT 24
6068: PUSH
6069: LD_INT 990
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 72
6084: OR
6085: IFFALSE 6357
6087: GO 6089
6089: DISABLE
6090: LD_INT 0
6092: PPUSH
6093: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 300
6101: PUSH
6102: LD_INT 250
6104: PUSH
6105: LD_INT 200
6107: PUSH
6108: LD_INT 150
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: LD_OWVAR 67
6121: ARRAY
6122: ST_TO_ADDR
// for i in russian_meta_guards do
6123: LD_ADDR_VAR 0 1
6127: PUSH
6128: LD_EXP 25
6132: PUSH
6133: FOR_IN
6134: IFFALSE 6174
// if IsOk ( i ) then
6136: LD_VAR 0 1
6140: PPUSH
6141: CALL_OW 302
6145: IFFALSE 6172
// SetLives ( i , GetLives ( i ) - hp ) ;
6147: LD_VAR 0 1
6151: PPUSH
6152: LD_VAR 0 1
6156: PPUSH
6157: CALL_OW 256
6161: PUSH
6162: LD_VAR 0 2
6166: MINUS
6167: PPUSH
6168: CALL_OW 234
6172: GO 6133
6174: POP
6175: POP
// DialogueOn ;
6176: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
6180: LD_EXP 25
6184: PUSH
6185: LD_EXP 25
6189: ARRAY
6190: PPUSH
6191: LD_STRING D6-FRus1-1
6193: PPUSH
6194: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
6198: LD_INT 22
6200: PUSH
6201: LD_INT 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 50
6210: PUSH
6211: EMPTY
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: LD_INT 1
6225: GREATER
6226: IFFALSE 6240
// Say ( JMM , D6-JMM-1 ) ;
6228: LD_EXP 16
6232: PPUSH
6233: LD_STRING D6-JMM-1
6235: PPUSH
6236: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
6240: LD_EXP 18
6244: PPUSH
6245: CALL_OW 302
6249: IFFALSE 6257
6251: PUSH
6252: LD_EXP 7
6256: AND
6257: IFFALSE 6271
// Say ( Cyrus , D6-Cyrus-1 ) ;
6259: LD_EXP 18
6263: PPUSH
6264: LD_STRING D6-Cyrus-1
6266: PPUSH
6267: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
6271: LD_EXP 17
6275: PPUSH
6276: CALL_OW 302
6280: IFFALSE 6288
6282: PUSH
6283: LD_EXP 4
6287: AND
6288: IFFALSE 6302
// Say ( Bobby , D6-Bobby-1 ) ;
6290: LD_EXP 17
6294: PPUSH
6295: LD_STRING D6-Bobby-1
6297: PPUSH
6298: CALL_OW 88
// DialogueOff ;
6302: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
6306: LD_INT 140
6308: PUSH
6309: LD_INT 105
6311: PUSH
6312: LD_INT 70
6314: PUSH
6315: LD_INT 70
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_OWVAR 67
6328: ARRAY
6329: PPUSH
6330: CALL_OW 67
// meta_action := true ;
6334: LD_ADDR_EXP 10
6338: PUSH
6339: LD_INT 1
6341: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
6342: LD_EXP 25
6346: PPUSH
6347: LD_INT 94
6349: PPUSH
6350: LD_INT 8
6352: PPUSH
6353: CALL_OW 114
// end ;
6357: PPOPN 2
6359: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
6360: LD_EXP 16
6364: PPUSH
6365: LD_INT 14
6367: PPUSH
6368: CALL_OW 308
6372: IFFALSE 6384
6374: GO 6376
6376: DISABLE
// SetAchievement ( ACH_SECRET ) ;
6377: LD_STRING ACH_SECRET
6379: PPUSH
6380: CALL_OW 543
6384: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
6385: LD_EXP 16
6389: PPUSH
6390: LD_INT 93
6392: PPUSH
6393: LD_INT 1
6395: PPUSH
6396: CALL_OW 297
6400: PUSH
6401: LD_INT 5
6403: LESS
6404: IFFALSE 6426
6406: PUSH
6407: LD_INT 22
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 69
6421: PUSH
6422: LD_INT 1
6424: GREATER
6425: AND
6426: IFFALSE 6443
6428: GO 6430
6430: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6431: LD_EXP 16
6435: PPUSH
6436: LD_STRING D6a-JMM-1
6438: PPUSH
6439: CALL_OW 88
6443: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6444: LD_EXP 17
6448: PPUSH
6449: LD_INT 10
6451: PPUSH
6452: CALL_OW 308
6456: IFTRUE 6472
6458: PUSH
6459: LD_EXP 17
6463: PPUSH
6464: LD_INT 12
6466: PPUSH
6467: CALL_OW 308
6471: OR
6472: IFFALSE 6528
6474: GO 6476
6476: DISABLE
// begin bobby_saved := true ;
6477: LD_ADDR_EXP 12
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6485: LD_EXP 17
6489: PPUSH
6490: CALL_OW 256
6494: PPUSH
6495: LD_STRING 01_BobbyLifePoints_1
6497: PPUSH
6498: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6502: LD_EXP 17
6506: PPUSH
6507: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6511: LD_STRING Bobby
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6521: LD_STRING enableBioCharacter(BIO_BOBBY)
6523: PPUSH
6524: CALL_OW 559
// end ;
6528: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6529: LD_EXP 18
6533: PPUSH
6534: LD_INT 10
6536: PPUSH
6537: CALL_OW 308
6541: IFTRUE 6557
6543: PUSH
6544: LD_EXP 18
6548: PPUSH
6549: LD_INT 12
6551: PPUSH
6552: CALL_OW 308
6556: OR
6557: IFFALSE 6613
6559: GO 6561
6561: DISABLE
// begin cyrus_saved := true ;
6562: LD_ADDR_EXP 13
6566: PUSH
6567: LD_INT 1
6569: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6570: LD_EXP 18
6574: PPUSH
6575: CALL_OW 256
6579: PPUSH
6580: LD_STRING 01_CyrusLifePoints_1
6582: PPUSH
6583: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6587: LD_EXP 18
6591: PPUSH
6592: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6596: LD_STRING Cyrus
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6606: LD_STRING enableBioCharacter(BIO_CYRUS)
6608: PPUSH
6609: CALL_OW 559
// end ;
6613: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6614: LD_EXP 16
6618: PPUSH
6619: LD_INT 10
6621: PPUSH
6622: CALL_OW 308
6626: IFTRUE 6642
6628: PUSH
6629: LD_EXP 16
6633: PPUSH
6634: LD_INT 12
6636: PPUSH
6637: CALL_OW 308
6641: OR
6642: IFFALSE 7317
6644: GO 6646
6646: DISABLE
6647: LD_INT 0
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
// begin if macmilan_use_radio then
6655: LD_EXP 6
6659: IFFALSE 6668
// SetAchievement ( ACH_RADIO ) ;
6661: LD_STRING ACH_RADIO
6663: PPUSH
6664: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6668: LD_EXP 13
6672: NOT
6673: IFFALSE 6681
6675: PUSH
6676: LD_EXP 7
6680: AND
6681: IFFALSE 6694
6683: PUSH
6684: LD_EXP 18
6688: PPUSH
6689: CALL_OW 302
6693: AND
6694: IFTRUE 6724
6696: PUSH
6697: LD_EXP 12
6701: NOT
6702: IFFALSE 6710
6704: PUSH
6705: LD_EXP 4
6709: AND
6710: IFFALSE 6723
6712: PUSH
6713: LD_EXP 17
6717: PPUSH
6718: CALL_OW 302
6722: AND
6723: OR
6724: IFFALSE 6765
// case Query ( Q2 ) of 1 :
6726: LD_STRING Q2
6728: PPUSH
6729: CALL_OW 97
6733: PUSH
6734: LD_INT 1
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6753
6742: POP
// wait_for_them := true ; 2 :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 1
6750: ST_TO_ADDR
6751: GO 6765
6753: LD_INT 2
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6764
6761: POP
// ; end ;
6762: GO 6765
6764: POP
// if wait_for_them then
6765: LD_VAR 0 3
6769: IFFALSE 6904
// repeat wait ( 0 0$01 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6778: LD_EXP 13
6782: IFFALSE 6790
6784: PUSH
6785: LD_EXP 12
6789: AND
6790: IFTRUE 6833
6792: PUSH
6793: LD_EXP 13
6797: IFFALSE 6832
6799: PUSH
6800: LD_EXP 4
6804: NOT
6805: IFTRUE 6818
6807: PUSH
6808: LD_EXP 17
6812: PPUSH
6813: CALL_OW 303
6817: OR
6818: IFTRUE 6831
6820: PUSH
6821: LD_EXP 17
6825: PPUSH
6826: CALL_OW 301
6830: OR
6831: AND
6832: OR
6833: IFTRUE 6876
6835: PUSH
6836: LD_EXP 12
6840: IFFALSE 6875
6842: PUSH
6843: LD_EXP 7
6847: NOT
6848: IFTRUE 6861
6850: PUSH
6851: LD_EXP 18
6855: PPUSH
6856: CALL_OW 303
6860: OR
6861: IFTRUE 6874
6863: PUSH
6864: LD_EXP 18
6868: PPUSH
6869: CALL_OW 301
6873: OR
6874: AND
6875: OR
6876: IFTRUE 6902
6878: PUSH
6879: LD_EXP 17
6883: PPUSH
6884: CALL_OW 301
6888: IFFALSE 6901
6890: PUSH
6891: LD_EXP 18
6895: PPUSH
6896: CALL_OW 301
6900: AND
6901: OR
6902: IFFALSE 6771
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6904: LD_EXP 16
6908: PPUSH
6909: CALL_OW 256
6913: PPUSH
6914: LD_STRING 01_JMMLifePoints_1
6916: PPUSH
6917: CALL_OW 39
// RemoveUnit ( JMM ) ;
6921: LD_EXP 16
6925: PPUSH
6926: CALL_OW 64
// to_reward := [ JMM ] ;
6930: LD_ADDR_VAR 0 2
6934: PUSH
6935: LD_EXP 16
6939: PUSH
6940: EMPTY
6941: LIST
6942: ST_TO_ADDR
// if bobby_saved then
6943: LD_EXP 12
6947: IFFALSE 6965
// to_reward := to_reward ^ Bobby ;
6949: LD_ADDR_VAR 0 2
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_EXP 17
6963: ADD
6964: ST_TO_ADDR
// if cyrus_saved then
6965: LD_EXP 13
6969: IFFALSE 6987
// to_reward := to_reward ^ Cyrus ;
6971: LD_ADDR_VAR 0 2
6975: PUSH
6976: LD_VAR 0 2
6980: PUSH
6981: LD_EXP 18
6985: ADD
6986: ST_TO_ADDR
// m1 := true ;
6987: LD_ADDR_VAR 0 4
6991: PUSH
6992: LD_INT 1
6994: ST_TO_ADDR
// m2 := bobby_saved ;
6995: LD_ADDR_VAR 0 5
6999: PUSH
7000: LD_EXP 12
7004: ST_TO_ADDR
// m3 := cyrus_saved ;
7005: LD_ADDR_VAR 0 6
7009: PUSH
7010: LD_EXP 13
7014: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
7015: LD_STRING JMM
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: CALL_OW 101
// if not bobby_in_squad then
7025: LD_EXP 4
7029: NOT
7030: IFFALSE 7043
// AddMedal ( Bobby , - 1 ) ;
7032: LD_STRING Bobby
7034: PPUSH
7035: LD_INT 1
7037: NEG
7038: PPUSH
7039: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
7043: LD_EXP 12
7047: NOT
7048: IFFALSE 7074
7050: PUSH
7051: LD_EXP 17
7055: PPUSH
7056: CALL_OW 303
7060: IFTRUE 7073
7062: PUSH
7063: LD_EXP 17
7067: PPUSH
7068: CALL_OW 301
7072: OR
7073: AND
7074: IFFALSE 7087
// AddMedal ( Bobby , - 2 ) ;
7076: LD_STRING Bobby
7078: PPUSH
7079: LD_INT 2
7081: NEG
7082: PPUSH
7083: CALL_OW 101
// if not cyrus_in_squad then
7087: LD_EXP 7
7091: NOT
7092: IFFALSE 7105
// AddMedal ( Cyrus , - 1 ) ;
7094: LD_STRING Cyrus
7096: PPUSH
7097: LD_INT 1
7099: NEG
7100: PPUSH
7101: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
7105: LD_EXP 13
7109: NOT
7110: IFFALSE 7136
7112: PUSH
7113: LD_EXP 18
7117: PPUSH
7118: CALL_OW 303
7122: IFTRUE 7135
7124: PUSH
7125: LD_EXP 18
7129: PPUSH
7130: CALL_OW 301
7134: OR
7135: AND
7136: IFFALSE 7149
// AddMedal ( Cyrus , - 2 ) ;
7138: LD_STRING Cyrus
7140: PPUSH
7141: LD_INT 2
7143: NEG
7144: PPUSH
7145: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
7149: LD_OWVAR 67
7153: PUSH
7154: LD_INT 3
7156: GREATEREQUAL
7157: IFFALSE 7165
7159: PUSH
7160: LD_VAR 0 4
7164: AND
7165: IFFALSE 7173
7167: PUSH
7168: LD_VAR 0 5
7172: AND
7173: IFFALSE 7181
7175: PUSH
7176: LD_VAR 0 6
7180: AND
7181: IFFALSE 7193
// SetAchievementEX ( ACH_AMER , 1 ) ;
7183: LD_STRING ACH_AMER
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 564
// GiveMedals ( MAIN ) ;
7193: LD_STRING MAIN
7195: PPUSH
7196: CALL_OW 102
// RewardPeople ( to_reward ) ;
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL_OW 43
// if bobby_saved then
7209: LD_EXP 12
7213: IFFALSE 7233
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
7215: LD_EXP 17
7219: PPUSH
7220: LD_EXP 2
7224: PUSH
7225: LD_STRING Bobby
7227: STR
7228: PPUSH
7229: CALL_OW 38
// if cyrus_saved then
7233: LD_EXP 13
7237: IFFALSE 7257
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
7239: LD_EXP 18
7243: PPUSH
7244: LD_EXP 2
7248: PUSH
7249: LD_STRING Cyrus
7251: STR
7252: PPUSH
7253: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
7257: LD_EXP 16
7261: PPUSH
7262: LD_EXP 2
7266: PUSH
7267: LD_STRING JMM
7269: STR
7270: PPUSH
7271: CALL_OW 38
// if tick <= 3 3$00 then
7275: LD_OWVAR 1
7279: PUSH
7280: LD_INT 6300
7282: LESSEQUAL
7283: IFFALSE 7292
// SetAchievement ( ACH_ASPEED_1 ) ;
7285: LD_STRING ACH_ASPEED_1
7287: PPUSH
7288: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
7292: LD_STRING enableBioCharacter(BIO_JMM)
7294: PPUSH
7295: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
7299: LD_STRING enableBioCharacter(BIO_JOAN)
7301: PPUSH
7302: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
7306: LD_STRING enableBioCharacter(BIO_BARN)
7308: PPUSH
7309: CALL_OW 559
// YouWin ;
7313: CALL_OW 103
// end ; end_of_file
7317: PPOPN 6
7319: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
7320: LD_VAR 0 1
7324: PUSH
7325: LD_EXP 16
7329: EQUAL
7330: IFFALSE 7339
// YouLost ( JMM ) ;
7332: LD_STRING JMM
7334: PPUSH
7335: CALL_OW 104
// end ;
7339: PPOPN 1
7341: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7342: LD_VAR 0 1
7346: PPUSH
7347: LD_VAR 0 2
7351: PPUSH
7352: CALL 23647 0 2
// end ;
7356: PPOPN 2
7358: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
7359: LD_INT 0
7361: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
7362: LD_VAR 0 1
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 1
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 21
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: PPUSH
7402: CALL_OW 69
7406: IN
7407: IFFALSE 7419
7409: PUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: EQUAL
7418: AND
7419: IFFALSE 7476
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 25
7438: PUSH
7439: LD_INT 1
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: PUSH
7455: FOR_IN
7456: IFFALSE 7474
// ComAttackUnit ( i , JMM ) ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_EXP 16
7467: PPUSH
7468: CALL_OW 115
7472: GO 7455
7474: POP
7475: POP
// end ;
7476: PPOPN 4
7478: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: CALL 23589 0 1
// if un = JMM then
7488: LD_VAR 0 1
7492: PUSH
7493: LD_EXP 16
7497: EQUAL
7498: IFFALSE 7507
// YouLost ( JMM ) ;
7500: LD_STRING JMM
7502: PPUSH
7503: CALL_OW 104
// end ; end_of_file end_of_file
7507: PPOPN 1
7509: END
// export globalGameSaveCounter ; every 0 0$1 do
7510: GO 7512
7512: DISABLE
// begin enable ;
7513: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7514: LD_STRING updateTimer(
7516: PUSH
7517: LD_OWVAR 1
7521: STR
7522: PUSH
7523: LD_STRING );
7525: STR
7526: PPUSH
7527: CALL_OW 559
// end ;
7531: END
// every 0 0$1 do
7532: GO 7534
7534: DISABLE
// begin globalGameSaveCounter := 0 ;
7535: LD_ADDR_EXP 29
7539: PUSH
7540: LD_INT 0
7542: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7543: LD_STRING setGameSaveCounter(0)
7545: PPUSH
7546: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7550: LD_STRING initStreamRollete();
7552: PPUSH
7553: CALL_OW 559
// InitStreamMode ;
7557: CALL 8902 0 0
// DefineStreamItems ( false ) ;
7561: LD_INT 0
7563: PPUSH
7564: CALL 9366 0 1
// end ;
7568: END
// export function SOS_MapStart ( ) ; begin
7569: LD_INT 0
7571: PPUSH
// if streamModeActive then
7572: LD_EXP 30
7576: IFFALSE 7585
// DefineStreamItems ( true ) ;
7578: LD_INT 1
7580: PPUSH
7581: CALL 9366 0 1
// UpdateLuaVariables ( ) ;
7585: CALL 7602 0 0
// UpdateFactoryWaypoints ( ) ;
7589: CALL 22488 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7593: CALL 22740 0 0
// end ;
7597: LD_VAR 0 1
7601: RET
// function UpdateLuaVariables ( ) ; begin
7602: LD_INT 0
7604: PPUSH
// if globalGameSaveCounter then
7605: LD_EXP 29
7609: IFFALSE 7643
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7611: LD_ADDR_EXP 29
7615: PUSH
7616: LD_EXP 29
7620: PPUSH
7621: CALL 69526 0 1
7625: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7626: LD_STRING setGameSaveCounter(
7628: PUSH
7629: LD_EXP 29
7633: STR
7634: PUSH
7635: LD_STRING )
7637: STR
7638: PPUSH
7639: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7643: LD_STRING setGameDifficulty(
7645: PUSH
7646: LD_OWVAR 67
7650: STR
7651: PUSH
7652: LD_STRING )
7654: STR
7655: PPUSH
7656: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7660: LD_STRING displayDifficulty(
7662: PUSH
7663: LD_OWVAR 67
7667: STR
7668: PUSH
7669: LD_STRING )
7671: STR
7672: PPUSH
7673: CALL_OW 559
// end ;
7677: LD_VAR 0 1
7681: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7682: LD_INT 0
7684: PPUSH
// if p2 = stream_mode then
7685: LD_VAR 0 2
7689: PUSH
7690: LD_INT 100
7692: EQUAL
7693: IFFALSE 8696
// begin if not StreamModeActive then
7695: LD_EXP 30
7699: NOT
7700: IFFALSE 7710
// StreamModeActive := true ;
7702: LD_ADDR_EXP 30
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// if p3 = 0 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 0
7717: EQUAL
7718: IFFALSE 7724
// InitStreamMode ;
7720: CALL 8902 0 0
// if p3 = 1 then
7724: LD_VAR 0 3
7728: PUSH
7729: LD_INT 1
7731: EQUAL
7732: IFFALSE 7742
// sRocket := true ;
7734: LD_ADDR_EXP 35
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// if p3 = 2 then
7742: LD_VAR 0 3
7746: PUSH
7747: LD_INT 2
7749: EQUAL
7750: IFFALSE 7760
// sSpeed := true ;
7752: LD_ADDR_EXP 34
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// if p3 = 3 then
7760: LD_VAR 0 3
7764: PUSH
7765: LD_INT 3
7767: EQUAL
7768: IFFALSE 7778
// sEngine := true ;
7770: LD_ADDR_EXP 36
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// if p3 = 4 then
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 4
7785: EQUAL
7786: IFFALSE 7796
// sSpec := true ;
7788: LD_ADDR_EXP 33
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
// if p3 = 5 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 5
7803: EQUAL
7804: IFFALSE 7814
// sLevel := true ;
7806: LD_ADDR_EXP 37
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 6 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 6
7821: EQUAL
7822: IFFALSE 7832
// sArmoury := true ;
7824: LD_ADDR_EXP 38
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 7 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 7
7839: EQUAL
7840: IFFALSE 7850
// sRadar := true ;
7842: LD_ADDR_EXP 39
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 8 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 8
7857: EQUAL
7858: IFFALSE 7868
// sBunker := true ;
7860: LD_ADDR_EXP 40
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 9 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 9
7875: EQUAL
7876: IFFALSE 7886
// sHack := true ;
7878: LD_ADDR_EXP 41
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 10 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 10
7893: EQUAL
7894: IFFALSE 7904
// sFire := true ;
7896: LD_ADDR_EXP 42
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 11 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 11
7911: EQUAL
7912: IFFALSE 7922
// sRefresh := true ;
7914: LD_ADDR_EXP 43
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 12 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 12
7929: EQUAL
7930: IFFALSE 7940
// sExp := true ;
7932: LD_ADDR_EXP 44
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 13 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 13
7947: EQUAL
7948: IFFALSE 7958
// sDepot := true ;
7950: LD_ADDR_EXP 45
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 14 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 14
7965: EQUAL
7966: IFFALSE 7976
// sFlag := true ;
7968: LD_ADDR_EXP 46
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 15 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 15
7983: EQUAL
7984: IFFALSE 7994
// sKamikadze := true ;
7986: LD_ADDR_EXP 54
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 16 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 16
8001: EQUAL
8002: IFFALSE 8012
// sTroll := true ;
8004: LD_ADDR_EXP 55
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 17 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 17
8019: EQUAL
8020: IFFALSE 8030
// sSlow := true ;
8022: LD_ADDR_EXP 56
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 18 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 18
8037: EQUAL
8038: IFFALSE 8048
// sLack := true ;
8040: LD_ADDR_EXP 57
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 19 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 19
8055: EQUAL
8056: IFFALSE 8066
// sTank := true ;
8058: LD_ADDR_EXP 59
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 20 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 20
8073: EQUAL
8074: IFFALSE 8084
// sRemote := true ;
8076: LD_ADDR_EXP 60
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 21 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 21
8091: EQUAL
8092: IFFALSE 8102
// sPowell := true ;
8094: LD_ADDR_EXP 61
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 22 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 22
8109: EQUAL
8110: IFFALSE 8120
// sTeleport := true ;
8112: LD_ADDR_EXP 64
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// if p3 = 23 then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 23
8127: EQUAL
8128: IFFALSE 8138
// sOilTower := true ;
8130: LD_ADDR_EXP 66
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 24 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 24
8145: EQUAL
8146: IFFALSE 8156
// sShovel := true ;
8148: LD_ADDR_EXP 67
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 25 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 25
8163: EQUAL
8164: IFFALSE 8174
// sSheik := true ;
8166: LD_ADDR_EXP 68
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if p3 = 26 then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 26
8181: EQUAL
8182: IFFALSE 8192
// sEarthquake := true ;
8184: LD_ADDR_EXP 70
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// if p3 = 27 then
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 27
8199: EQUAL
8200: IFFALSE 8210
// sAI := true ;
8202: LD_ADDR_EXP 71
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// if p3 = 28 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 28
8217: EQUAL
8218: IFFALSE 8228
// sCargo := true ;
8220: LD_ADDR_EXP 74
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if p3 = 29 then
8228: LD_VAR 0 3
8232: PUSH
8233: LD_INT 29
8235: EQUAL
8236: IFFALSE 8246
// sDLaser := true ;
8238: LD_ADDR_EXP 75
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// if p3 = 30 then
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 30
8253: EQUAL
8254: IFFALSE 8264
// sExchange := true ;
8256: LD_ADDR_EXP 76
8260: PUSH
8261: LD_INT 1
8263: ST_TO_ADDR
// if p3 = 31 then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 31
8271: EQUAL
8272: IFFALSE 8282
// sFac := true ;
8274: LD_ADDR_EXP 77
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// if p3 = 32 then
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 32
8289: EQUAL
8290: IFFALSE 8300
// sPower := true ;
8292: LD_ADDR_EXP 78
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// if p3 = 33 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 33
8307: EQUAL
8308: IFFALSE 8318
// sRandom := true ;
8310: LD_ADDR_EXP 79
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 34 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 34
8325: EQUAL
8326: IFFALSE 8336
// sShield := true ;
8328: LD_ADDR_EXP 80
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 35 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 35
8343: EQUAL
8344: IFFALSE 8354
// sTime := true ;
8346: LD_ADDR_EXP 81
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 36 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 36
8361: EQUAL
8362: IFFALSE 8372
// sTools := true ;
8364: LD_ADDR_EXP 82
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 101 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 101
8379: EQUAL
8380: IFFALSE 8390
// sSold := true ;
8382: LD_ADDR_EXP 47
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 102 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 102
8397: EQUAL
8398: IFFALSE 8408
// sDiff := true ;
8400: LD_ADDR_EXP 48
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 103 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 103
8415: EQUAL
8416: IFFALSE 8426
// sFog := true ;
8418: LD_ADDR_EXP 51
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 104 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 104
8433: EQUAL
8434: IFFALSE 8444
// sReset := true ;
8436: LD_ADDR_EXP 52
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 105 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 105
8451: EQUAL
8452: IFFALSE 8462
// sSun := true ;
8454: LD_ADDR_EXP 53
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 106 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 106
8469: EQUAL
8470: IFFALSE 8480
// sTiger := true ;
8472: LD_ADDR_EXP 49
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 107 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 107
8487: EQUAL
8488: IFFALSE 8498
// sBomb := true ;
8490: LD_ADDR_EXP 50
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 108 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 108
8505: EQUAL
8506: IFFALSE 8516
// sWound := true ;
8508: LD_ADDR_EXP 58
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 109 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 109
8523: EQUAL
8524: IFFALSE 8534
// sBetray := true ;
8526: LD_ADDR_EXP 62
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 110 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 110
8541: EQUAL
8542: IFFALSE 8552
// sContamin := true ;
8544: LD_ADDR_EXP 63
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 111 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 111
8559: EQUAL
8560: IFFALSE 8570
// sOil := true ;
8562: LD_ADDR_EXP 65
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 112 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 112
8577: EQUAL
8578: IFFALSE 8588
// sStu := true ;
8580: LD_ADDR_EXP 69
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 113 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 113
8595: EQUAL
8596: IFFALSE 8606
// sBazooka := true ;
8598: LD_ADDR_EXP 72
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 114 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 114
8613: EQUAL
8614: IFFALSE 8624
// sMortar := true ;
8616: LD_ADDR_EXP 73
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 115 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 115
8631: EQUAL
8632: IFFALSE 8642
// sRanger := true ;
8634: LD_ADDR_EXP 83
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 116 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 116
8649: EQUAL
8650: IFFALSE 8660
// sComputer := true ;
8652: LD_ADDR_EXP 84
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 117 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 117
8667: EQUAL
8668: IFFALSE 8678
// s30 := true ;
8670: LD_ADDR_EXP 85
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 118 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 118
8685: EQUAL
8686: IFFALSE 8696
// s60 := true ;
8688: LD_ADDR_EXP 86
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// end ; if p2 = hack_mode then
8696: LD_VAR 0 2
8700: PUSH
8701: LD_INT 101
8703: EQUAL
8704: IFFALSE 8832
// begin case p3 of 1 :
8706: LD_VAR 0 3
8710: PUSH
8711: LD_INT 1
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8719
8717: GO 8726
8719: POP
// hHackUnlimitedResources ; 2 :
8720: CALL 21095 0 0
8724: GO 8832
8726: LD_INT 2
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8741
8734: POP
// hHackSetLevel10 ; 3 :
8735: CALL 21228 0 0
8739: GO 8832
8741: LD_INT 3
8743: DOUBLE
8744: EQUAL
8745: IFTRUE 8749
8747: GO 8756
8749: POP
// hHackSetLevel10YourUnits ; 4 :
8750: CALL 21313 0 0
8754: GO 8832
8756: LD_INT 4
8758: DOUBLE
8759: EQUAL
8760: IFTRUE 8764
8762: GO 8771
8764: POP
// hHackInvincible ; 5 :
8765: CALL 21761 0 0
8769: GO 8832
8771: LD_INT 5
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8786
8779: POP
// hHackInvisible ; 6 :
8780: CALL 21872 0 0
8784: GO 8832
8786: LD_INT 6
8788: DOUBLE
8789: EQUAL
8790: IFTRUE 8794
8792: GO 8801
8794: POP
// hHackChangeYourSide ; 7 :
8795: CALL 21929 0 0
8799: GO 8832
8801: LD_INT 7
8803: DOUBLE
8804: EQUAL
8805: IFTRUE 8809
8807: GO 8816
8809: POP
// hHackChangeUnitSide ; 8 :
8810: CALL 21971 0 0
8814: GO 8832
8816: LD_INT 8
8818: DOUBLE
8819: EQUAL
8820: IFTRUE 8824
8822: GO 8831
8824: POP
// hHackFog ; end ;
8825: CALL 22072 0 0
8829: GO 8832
8831: POP
// end ; if p2 = game_save_mode then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 102
8839: EQUAL
8840: IFFALSE 8897
// begin if p3 = 1 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 1
8849: EQUAL
8850: IFFALSE 8862
// globalGameSaveCounter := p4 ;
8852: LD_ADDR_EXP 29
8856: PUSH
8857: LD_VAR 0 4
8861: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8862: LD_VAR 0 3
8866: PUSH
8867: LD_INT 2
8869: EQUAL
8870: IFFALSE 8878
8872: PUSH
8873: LD_EXP 29
8877: AND
8878: IFFALSE 8897
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8880: LD_STRING setGameSaveCounter(
8882: PUSH
8883: LD_EXP 29
8887: STR
8888: PUSH
8889: LD_STRING )
8891: STR
8892: PPUSH
8893: CALL_OW 559
// end ; end ;
8897: LD_VAR 0 7
8901: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8902: LD_INT 0
8904: PPUSH
// streamModeActive := false ;
8905: LD_ADDR_EXP 30
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// normalCounter := 36 ;
8913: LD_ADDR_EXP 31
8917: PUSH
8918: LD_INT 36
8920: ST_TO_ADDR
// hardcoreCounter := 18 ;
8921: LD_ADDR_EXP 32
8925: PUSH
8926: LD_INT 18
8928: ST_TO_ADDR
// sRocket := false ;
8929: LD_ADDR_EXP 35
8933: PUSH
8934: LD_INT 0
8936: ST_TO_ADDR
// sSpeed := false ;
8937: LD_ADDR_EXP 34
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// sEngine := false ;
8945: LD_ADDR_EXP 36
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// sSpec := false ;
8953: LD_ADDR_EXP 33
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// sLevel := false ;
8961: LD_ADDR_EXP 37
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// sArmoury := false ;
8969: LD_ADDR_EXP 38
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sRadar := false ;
8977: LD_ADDR_EXP 39
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sBunker := false ;
8985: LD_ADDR_EXP 40
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sHack := false ;
8993: LD_ADDR_EXP 41
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sFire := false ;
9001: LD_ADDR_EXP 42
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sRefresh := false ;
9009: LD_ADDR_EXP 43
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sExp := false ;
9017: LD_ADDR_EXP 44
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sDepot := false ;
9025: LD_ADDR_EXP 45
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sFlag := false ;
9033: LD_ADDR_EXP 46
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sKamikadze := false ;
9041: LD_ADDR_EXP 54
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sTroll := false ;
9049: LD_ADDR_EXP 55
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sSlow := false ;
9057: LD_ADDR_EXP 56
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sLack := false ;
9065: LD_ADDR_EXP 57
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sTank := false ;
9073: LD_ADDR_EXP 59
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// sRemote := false ;
9081: LD_ADDR_EXP 60
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// sPowell := false ;
9089: LD_ADDR_EXP 61
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// sTeleport := false ;
9097: LD_ADDR_EXP 64
9101: PUSH
9102: LD_INT 0
9104: ST_TO_ADDR
// sOilTower := false ;
9105: LD_ADDR_EXP 66
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// sShovel := false ;
9113: LD_ADDR_EXP 67
9117: PUSH
9118: LD_INT 0
9120: ST_TO_ADDR
// sSheik := false ;
9121: LD_ADDR_EXP 68
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// sEarthquake := false ;
9129: LD_ADDR_EXP 70
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// sAI := false ;
9137: LD_ADDR_EXP 71
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// sCargo := false ;
9145: LD_ADDR_EXP 74
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// sDLaser := false ;
9153: LD_ADDR_EXP 75
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// sExchange := false ;
9161: LD_ADDR_EXP 76
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// sFac := false ;
9169: LD_ADDR_EXP 77
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// sPower := false ;
9177: LD_ADDR_EXP 78
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// sRandom := false ;
9185: LD_ADDR_EXP 79
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// sShield := false ;
9193: LD_ADDR_EXP 80
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// sTime := false ;
9201: LD_ADDR_EXP 81
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// sTools := false ;
9209: LD_ADDR_EXP 82
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// sSold := false ;
9217: LD_ADDR_EXP 47
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// sDiff := false ;
9225: LD_ADDR_EXP 48
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// sFog := false ;
9233: LD_ADDR_EXP 51
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// sReset := false ;
9241: LD_ADDR_EXP 52
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// sSun := false ;
9249: LD_ADDR_EXP 53
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// sTiger := false ;
9257: LD_ADDR_EXP 49
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// sBomb := false ;
9265: LD_ADDR_EXP 50
9269: PUSH
9270: LD_INT 0
9272: ST_TO_ADDR
// sWound := false ;
9273: LD_ADDR_EXP 58
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// sBetray := false ;
9281: LD_ADDR_EXP 62
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// sContamin := false ;
9289: LD_ADDR_EXP 63
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// sOil := false ;
9297: LD_ADDR_EXP 65
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// sStu := false ;
9305: LD_ADDR_EXP 69
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// sBazooka := false ;
9313: LD_ADDR_EXP 72
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// sMortar := false ;
9321: LD_ADDR_EXP 73
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// sRanger := false ;
9329: LD_ADDR_EXP 83
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// sComputer := false ;
9337: LD_ADDR_EXP 84
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// s30 := false ;
9345: LD_ADDR_EXP 85
9349: PUSH
9350: LD_INT 0
9352: ST_TO_ADDR
// s60 := false ;
9353: LD_ADDR_EXP 86
9357: PUSH
9358: LD_INT 0
9360: ST_TO_ADDR
// end ;
9361: LD_VAR 0 1
9365: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9366: LD_INT 0
9368: PPUSH
9369: PPUSH
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// result := [ ] ;
9375: LD_ADDR_VAR 0 2
9379: PUSH
9380: EMPTY
9381: ST_TO_ADDR
// if campaign_id = 1 then
9382: LD_OWVAR 69
9386: PUSH
9387: LD_INT 1
9389: EQUAL
9390: IFFALSE 12556
// begin case mission_number of 1 :
9392: LD_OWVAR 70
9396: PUSH
9397: LD_INT 1
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9481
9405: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: LD_INT 4
9416: PUSH
9417: LD_INT 11
9419: PUSH
9420: LD_INT 12
9422: PUSH
9423: LD_INT 15
9425: PUSH
9426: LD_INT 16
9428: PUSH
9429: LD_INT 22
9431: PUSH
9432: LD_INT 23
9434: PUSH
9435: LD_INT 26
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 101
9451: PUSH
9452: LD_INT 102
9454: PUSH
9455: LD_INT 106
9457: PUSH
9458: LD_INT 116
9460: PUSH
9461: LD_INT 117
9463: PUSH
9464: LD_INT 118
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: ST_TO_ADDR
9479: GO 12554
9481: LD_INT 2
9483: DOUBLE
9484: EQUAL
9485: IFTRUE 9489
9487: GO 9573
9489: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9490: LD_ADDR_VAR 0 2
9494: PUSH
9495: LD_INT 2
9497: PUSH
9498: LD_INT 4
9500: PUSH
9501: LD_INT 11
9503: PUSH
9504: LD_INT 12
9506: PUSH
9507: LD_INT 15
9509: PUSH
9510: LD_INT 16
9512: PUSH
9513: LD_INT 22
9515: PUSH
9516: LD_INT 23
9518: PUSH
9519: LD_INT 26
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 101
9535: PUSH
9536: LD_INT 102
9538: PUSH
9539: LD_INT 105
9541: PUSH
9542: LD_INT 106
9544: PUSH
9545: LD_INT 108
9547: PUSH
9548: LD_INT 116
9550: PUSH
9551: LD_INT 117
9553: PUSH
9554: LD_INT 118
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: ST_TO_ADDR
9571: GO 12554
9573: LD_INT 3
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9669
9581: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 4
9592: PUSH
9593: LD_INT 5
9595: PUSH
9596: LD_INT 11
9598: PUSH
9599: LD_INT 12
9601: PUSH
9602: LD_INT 15
9604: PUSH
9605: LD_INT 16
9607: PUSH
9608: LD_INT 22
9610: PUSH
9611: LD_INT 26
9613: PUSH
9614: LD_INT 36
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 105
9637: PUSH
9638: LD_INT 106
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 116
9646: PUSH
9647: LD_INT 117
9649: PUSH
9650: LD_INT 118
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: ST_TO_ADDR
9667: GO 12554
9669: LD_INT 4
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9773
9677: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9678: LD_ADDR_VAR 0 2
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: LD_INT 8
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 15
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: LD_INT 36
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 101
9735: PUSH
9736: LD_INT 102
9738: PUSH
9739: LD_INT 105
9741: PUSH
9742: LD_INT 106
9744: PUSH
9745: LD_INT 108
9747: PUSH
9748: LD_INT 116
9750: PUSH
9751: LD_INT 117
9753: PUSH
9754: LD_INT 118
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: ST_TO_ADDR
9771: GO 12554
9773: LD_INT 5
9775: DOUBLE
9776: EQUAL
9777: IFTRUE 9781
9779: GO 9893
9781: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9782: LD_ADDR_VAR 0 2
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: LD_INT 4
9792: PUSH
9793: LD_INT 5
9795: PUSH
9796: LD_INT 6
9798: PUSH
9799: LD_INT 8
9801: PUSH
9802: LD_INT 11
9804: PUSH
9805: LD_INT 12
9807: PUSH
9808: LD_INT 15
9810: PUSH
9811: LD_INT 16
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 23
9819: PUSH
9820: LD_INT 25
9822: PUSH
9823: LD_INT 26
9825: PUSH
9826: LD_INT 36
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 101
9847: PUSH
9848: LD_INT 102
9850: PUSH
9851: LD_INT 105
9853: PUSH
9854: LD_INT 106
9856: PUSH
9857: LD_INT 108
9859: PUSH
9860: LD_INT 109
9862: PUSH
9863: LD_INT 112
9865: PUSH
9866: LD_INT 116
9868: PUSH
9869: LD_INT 117
9871: PUSH
9872: LD_INT 118
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 12554
9893: LD_INT 6
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 10033
9901: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9902: LD_ADDR_VAR 0 2
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 4
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 6
9918: PUSH
9919: LD_INT 8
9921: PUSH
9922: LD_INT 11
9924: PUSH
9925: LD_INT 12
9927: PUSH
9928: LD_INT 15
9930: PUSH
9931: LD_INT 16
9933: PUSH
9934: LD_INT 20
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 22
9942: PUSH
9943: LD_INT 23
9945: PUSH
9946: LD_INT 25
9948: PUSH
9949: LD_INT 26
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 31
9957: PUSH
9958: LD_INT 32
9960: PUSH
9961: LD_INT 36
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 101
9987: PUSH
9988: LD_INT 102
9990: PUSH
9991: LD_INT 105
9993: PUSH
9994: LD_INT 106
9996: PUSH
9997: LD_INT 108
9999: PUSH
10000: LD_INT 109
10002: PUSH
10003: LD_INT 112
10005: PUSH
10006: LD_INT 116
10008: PUSH
10009: LD_INT 117
10011: PUSH
10012: LD_INT 118
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: ST_TO_ADDR
10031: GO 12554
10033: LD_INT 7
10035: DOUBLE
10036: EQUAL
10037: IFTRUE 10041
10039: GO 10153
10041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10042: LD_ADDR_VAR 0 2
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 4
10052: PUSH
10053: LD_INT 5
10055: PUSH
10056: LD_INT 7
10058: PUSH
10059: LD_INT 11
10061: PUSH
10062: LD_INT 12
10064: PUSH
10065: LD_INT 15
10067: PUSH
10068: LD_INT 16
10070: PUSH
10071: LD_INT 20
10073: PUSH
10074: LD_INT 21
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 23
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 26
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 101
10107: PUSH
10108: LD_INT 102
10110: PUSH
10111: LD_INT 103
10113: PUSH
10114: LD_INT 105
10116: PUSH
10117: LD_INT 106
10119: PUSH
10120: LD_INT 108
10122: PUSH
10123: LD_INT 112
10125: PUSH
10126: LD_INT 116
10128: PUSH
10129: LD_INT 117
10131: PUSH
10132: LD_INT 118
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: ST_TO_ADDR
10151: GO 12554
10153: LD_INT 8
10155: DOUBLE
10156: EQUAL
10157: IFTRUE 10161
10159: GO 10301
10161: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 5
10175: PUSH
10176: LD_INT 6
10178: PUSH
10179: LD_INT 7
10181: PUSH
10182: LD_INT 8
10184: PUSH
10185: LD_INT 11
10187: PUSH
10188: LD_INT 12
10190: PUSH
10191: LD_INT 15
10193: PUSH
10194: LD_INT 16
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: LD_INT 23
10208: PUSH
10209: LD_INT 25
10211: PUSH
10212: LD_INT 26
10214: PUSH
10215: LD_INT 30
10217: PUSH
10218: LD_INT 31
10220: PUSH
10221: LD_INT 32
10223: PUSH
10224: LD_INT 36
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 101
10251: PUSH
10252: LD_INT 102
10254: PUSH
10255: LD_INT 103
10257: PUSH
10258: LD_INT 105
10260: PUSH
10261: LD_INT 106
10263: PUSH
10264: LD_INT 108
10266: PUSH
10267: LD_INT 109
10269: PUSH
10270: LD_INT 112
10272: PUSH
10273: LD_INT 116
10275: PUSH
10276: LD_INT 117
10278: PUSH
10279: LD_INT 118
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: ST_TO_ADDR
10299: GO 12554
10301: LD_INT 9
10303: DOUBLE
10304: EQUAL
10305: IFTRUE 10309
10307: GO 10457
10309: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10310: LD_ADDR_VAR 0 2
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: LD_INT 4
10320: PUSH
10321: LD_INT 5
10323: PUSH
10324: LD_INT 6
10326: PUSH
10327: LD_INT 7
10329: PUSH
10330: LD_INT 8
10332: PUSH
10333: LD_INT 11
10335: PUSH
10336: LD_INT 12
10338: PUSH
10339: LD_INT 15
10341: PUSH
10342: LD_INT 16
10344: PUSH
10345: LD_INT 20
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 22
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 25
10359: PUSH
10360: LD_INT 26
10362: PUSH
10363: LD_INT 28
10365: PUSH
10366: LD_INT 30
10368: PUSH
10369: LD_INT 31
10371: PUSH
10372: LD_INT 32
10374: PUSH
10375: LD_INT 36
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 101
10403: PUSH
10404: LD_INT 102
10406: PUSH
10407: LD_INT 103
10409: PUSH
10410: LD_INT 105
10412: PUSH
10413: LD_INT 106
10415: PUSH
10416: LD_INT 108
10418: PUSH
10419: LD_INT 109
10421: PUSH
10422: LD_INT 112
10424: PUSH
10425: LD_INT 114
10427: PUSH
10428: LD_INT 116
10430: PUSH
10431: LD_INT 117
10433: PUSH
10434: LD_INT 118
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: ST_TO_ADDR
10455: GO 12554
10457: LD_INT 10
10459: DOUBLE
10460: EQUAL
10461: IFTRUE 10465
10463: GO 10661
10465: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_INT 2
10473: PUSH
10474: LD_INT 4
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: LD_INT 6
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: LD_INT 8
10488: PUSH
10489: LD_INT 9
10491: PUSH
10492: LD_INT 10
10494: PUSH
10495: LD_INT 11
10497: PUSH
10498: LD_INT 12
10500: PUSH
10501: LD_INT 13
10503: PUSH
10504: LD_INT 14
10506: PUSH
10507: LD_INT 15
10509: PUSH
10510: LD_INT 16
10512: PUSH
10513: LD_INT 17
10515: PUSH
10516: LD_INT 18
10518: PUSH
10519: LD_INT 19
10521: PUSH
10522: LD_INT 20
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_INT 23
10533: PUSH
10534: LD_INT 24
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 26
10542: PUSH
10543: LD_INT 28
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 31
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: LD_INT 36
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 101
10591: PUSH
10592: LD_INT 102
10594: PUSH
10595: LD_INT 103
10597: PUSH
10598: LD_INT 104
10600: PUSH
10601: LD_INT 105
10603: PUSH
10604: LD_INT 106
10606: PUSH
10607: LD_INT 107
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 109
10615: PUSH
10616: LD_INT 110
10618: PUSH
10619: LD_INT 111
10621: PUSH
10622: LD_INT 112
10624: PUSH
10625: LD_INT 114
10627: PUSH
10628: LD_INT 116
10630: PUSH
10631: LD_INT 117
10633: PUSH
10634: LD_INT 118
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: ST_TO_ADDR
10659: GO 12554
10661: LD_INT 11
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10873
10669: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10670: LD_ADDR_VAR 0 2
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: LD_INT 4
10683: PUSH
10684: LD_INT 5
10686: PUSH
10687: LD_INT 6
10689: PUSH
10690: LD_INT 7
10692: PUSH
10693: LD_INT 8
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: LD_INT 10
10701: PUSH
10702: LD_INT 11
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: LD_INT 13
10710: PUSH
10711: LD_INT 14
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 17
10722: PUSH
10723: LD_INT 18
10725: PUSH
10726: LD_INT 19
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 23
10740: PUSH
10741: LD_INT 24
10743: PUSH
10744: LD_INT 25
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 30
10755: PUSH
10756: LD_INT 31
10758: PUSH
10759: LD_INT 32
10761: PUSH
10762: LD_INT 34
10764: PUSH
10765: LD_INT 36
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 101
10803: PUSH
10804: LD_INT 102
10806: PUSH
10807: LD_INT 103
10809: PUSH
10810: LD_INT 104
10812: PUSH
10813: LD_INT 105
10815: PUSH
10816: LD_INT 106
10818: PUSH
10819: LD_INT 107
10821: PUSH
10822: LD_INT 108
10824: PUSH
10825: LD_INT 109
10827: PUSH
10828: LD_INT 110
10830: PUSH
10831: LD_INT 111
10833: PUSH
10834: LD_INT 112
10836: PUSH
10837: LD_INT 114
10839: PUSH
10840: LD_INT 116
10842: PUSH
10843: LD_INT 117
10845: PUSH
10846: LD_INT 118
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: ST_TO_ADDR
10871: GO 12554
10873: LD_INT 12
10875: DOUBLE
10876: EQUAL
10877: IFTRUE 10881
10879: GO 11101
10881: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 3
10895: PUSH
10896: LD_INT 4
10898: PUSH
10899: LD_INT 5
10901: PUSH
10902: LD_INT 6
10904: PUSH
10905: LD_INT 7
10907: PUSH
10908: LD_INT 8
10910: PUSH
10911: LD_INT 9
10913: PUSH
10914: LD_INT 10
10916: PUSH
10917: LD_INT 11
10919: PUSH
10920: LD_INT 12
10922: PUSH
10923: LD_INT 13
10925: PUSH
10926: LD_INT 14
10928: PUSH
10929: LD_INT 15
10931: PUSH
10932: LD_INT 16
10934: PUSH
10935: LD_INT 17
10937: PUSH
10938: LD_INT 18
10940: PUSH
10941: LD_INT 19
10943: PUSH
10944: LD_INT 20
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: LD_INT 23
10955: PUSH
10956: LD_INT 24
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 26
10964: PUSH
10965: LD_INT 27
10967: PUSH
10968: LD_INT 28
10970: PUSH
10971: LD_INT 30
10973: PUSH
10974: LD_INT 31
10976: PUSH
10977: LD_INT 32
10979: PUSH
10980: LD_INT 33
10982: PUSH
10983: LD_INT 34
10985: PUSH
10986: LD_INT 36
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 101
11027: PUSH
11028: LD_INT 102
11030: PUSH
11031: LD_INT 103
11033: PUSH
11034: LD_INT 104
11036: PUSH
11037: LD_INT 105
11039: PUSH
11040: LD_INT 106
11042: PUSH
11043: LD_INT 107
11045: PUSH
11046: LD_INT 108
11048: PUSH
11049: LD_INT 109
11051: PUSH
11052: LD_INT 110
11054: PUSH
11055: LD_INT 111
11057: PUSH
11058: LD_INT 112
11060: PUSH
11061: LD_INT 113
11063: PUSH
11064: LD_INT 114
11066: PUSH
11067: LD_INT 116
11069: PUSH
11070: LD_INT 117
11072: PUSH
11073: LD_INT 118
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: ST_TO_ADDR
11099: GO 12554
11101: LD_INT 13
11103: DOUBLE
11104: EQUAL
11105: IFTRUE 11109
11107: GO 11317
11109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: LD_INT 5
11129: PUSH
11130: LD_INT 8
11132: PUSH
11133: LD_INT 9
11135: PUSH
11136: LD_INT 10
11138: PUSH
11139: LD_INT 11
11141: PUSH
11142: LD_INT 12
11144: PUSH
11145: LD_INT 14
11147: PUSH
11148: LD_INT 15
11150: PUSH
11151: LD_INT 16
11153: PUSH
11154: LD_INT 17
11156: PUSH
11157: LD_INT 18
11159: PUSH
11160: LD_INT 19
11162: PUSH
11163: LD_INT 20
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 24
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 27
11186: PUSH
11187: LD_INT 28
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 31
11195: PUSH
11196: LD_INT 32
11198: PUSH
11199: LD_INT 33
11201: PUSH
11202: LD_INT 34
11204: PUSH
11205: LD_INT 36
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 104
11252: PUSH
11253: LD_INT 105
11255: PUSH
11256: LD_INT 106
11258: PUSH
11259: LD_INT 107
11261: PUSH
11262: LD_INT 108
11264: PUSH
11265: LD_INT 109
11267: PUSH
11268: LD_INT 110
11270: PUSH
11271: LD_INT 111
11273: PUSH
11274: LD_INT 112
11276: PUSH
11277: LD_INT 113
11279: PUSH
11280: LD_INT 114
11282: PUSH
11283: LD_INT 116
11285: PUSH
11286: LD_INT 117
11288: PUSH
11289: LD_INT 118
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
11315: GO 12554
11317: LD_INT 14
11319: DOUBLE
11320: EQUAL
11321: IFTRUE 11325
11323: GO 11549
11325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: LD_INT 3
11339: PUSH
11340: LD_INT 4
11342: PUSH
11343: LD_INT 5
11345: PUSH
11346: LD_INT 6
11348: PUSH
11349: LD_INT 7
11351: PUSH
11352: LD_INT 8
11354: PUSH
11355: LD_INT 9
11357: PUSH
11358: LD_INT 10
11360: PUSH
11361: LD_INT 11
11363: PUSH
11364: LD_INT 12
11366: PUSH
11367: LD_INT 13
11369: PUSH
11370: LD_INT 14
11372: PUSH
11373: LD_INT 15
11375: PUSH
11376: LD_INT 16
11378: PUSH
11379: LD_INT 17
11381: PUSH
11382: LD_INT 18
11384: PUSH
11385: LD_INT 19
11387: PUSH
11388: LD_INT 20
11390: PUSH
11391: LD_INT 21
11393: PUSH
11394: LD_INT 22
11396: PUSH
11397: LD_INT 23
11399: PUSH
11400: LD_INT 24
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: LD_INT 26
11408: PUSH
11409: LD_INT 27
11411: PUSH
11412: LD_INT 28
11414: PUSH
11415: LD_INT 29
11417: PUSH
11418: LD_INT 30
11420: PUSH
11421: LD_INT 31
11423: PUSH
11424: LD_INT 32
11426: PUSH
11427: LD_INT 33
11429: PUSH
11430: LD_INT 34
11432: PUSH
11433: LD_INT 36
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 103
11481: PUSH
11482: LD_INT 104
11484: PUSH
11485: LD_INT 105
11487: PUSH
11488: LD_INT 106
11490: PUSH
11491: LD_INT 107
11493: PUSH
11494: LD_INT 108
11496: PUSH
11497: LD_INT 109
11499: PUSH
11500: LD_INT 110
11502: PUSH
11503: LD_INT 111
11505: PUSH
11506: LD_INT 112
11508: PUSH
11509: LD_INT 113
11511: PUSH
11512: LD_INT 114
11514: PUSH
11515: LD_INT 116
11517: PUSH
11518: LD_INT 117
11520: PUSH
11521: LD_INT 118
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: ST_TO_ADDR
11547: GO 12554
11549: LD_INT 15
11551: DOUBLE
11552: EQUAL
11553: IFTRUE 11557
11555: GO 11781
11557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: LD_INT 3
11571: PUSH
11572: LD_INT 4
11574: PUSH
11575: LD_INT 5
11577: PUSH
11578: LD_INT 6
11580: PUSH
11581: LD_INT 7
11583: PUSH
11584: LD_INT 8
11586: PUSH
11587: LD_INT 9
11589: PUSH
11590: LD_INT 10
11592: PUSH
11593: LD_INT 11
11595: PUSH
11596: LD_INT 12
11598: PUSH
11599: LD_INT 13
11601: PUSH
11602: LD_INT 14
11604: PUSH
11605: LD_INT 15
11607: PUSH
11608: LD_INT 16
11610: PUSH
11611: LD_INT 17
11613: PUSH
11614: LD_INT 18
11616: PUSH
11617: LD_INT 19
11619: PUSH
11620: LD_INT 20
11622: PUSH
11623: LD_INT 21
11625: PUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 23
11631: PUSH
11632: LD_INT 24
11634: PUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 26
11640: PUSH
11641: LD_INT 27
11643: PUSH
11644: LD_INT 28
11646: PUSH
11647: LD_INT 29
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 31
11655: PUSH
11656: LD_INT 32
11658: PUSH
11659: LD_INT 33
11661: PUSH
11662: LD_INT 34
11664: PUSH
11665: LD_INT 36
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 101
11707: PUSH
11708: LD_INT 102
11710: PUSH
11711: LD_INT 103
11713: PUSH
11714: LD_INT 104
11716: PUSH
11717: LD_INT 105
11719: PUSH
11720: LD_INT 106
11722: PUSH
11723: LD_INT 107
11725: PUSH
11726: LD_INT 108
11728: PUSH
11729: LD_INT 109
11731: PUSH
11732: LD_INT 110
11734: PUSH
11735: LD_INT 111
11737: PUSH
11738: LD_INT 112
11740: PUSH
11741: LD_INT 113
11743: PUSH
11744: LD_INT 114
11746: PUSH
11747: LD_INT 116
11749: PUSH
11750: LD_INT 117
11752: PUSH
11753: LD_INT 118
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: ST_TO_ADDR
11779: GO 12554
11781: LD_INT 16
11783: DOUBLE
11784: EQUAL
11785: IFTRUE 11789
11787: GO 11925
11789: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11790: LD_ADDR_VAR 0 2
11794: PUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 4
11800: PUSH
11801: LD_INT 5
11803: PUSH
11804: LD_INT 7
11806: PUSH
11807: LD_INT 11
11809: PUSH
11810: LD_INT 12
11812: PUSH
11813: LD_INT 15
11815: PUSH
11816: LD_INT 16
11818: PUSH
11819: LD_INT 20
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_INT 23
11830: PUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 26
11836: PUSH
11837: LD_INT 30
11839: PUSH
11840: LD_INT 31
11842: PUSH
11843: LD_INT 32
11845: PUSH
11846: LD_INT 33
11848: PUSH
11849: LD_INT 34
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 101
11875: PUSH
11876: LD_INT 102
11878: PUSH
11879: LD_INT 103
11881: PUSH
11882: LD_INT 106
11884: PUSH
11885: LD_INT 108
11887: PUSH
11888: LD_INT 112
11890: PUSH
11891: LD_INT 113
11893: PUSH
11894: LD_INT 114
11896: PUSH
11897: LD_INT 116
11899: PUSH
11900: LD_INT 117
11902: PUSH
11903: LD_INT 118
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: ST_TO_ADDR
11923: GO 12554
11925: LD_INT 17
11927: DOUBLE
11928: EQUAL
11929: IFTRUE 11933
11931: GO 12157
11933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11934: LD_ADDR_VAR 0 2
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 3
11947: PUSH
11948: LD_INT 4
11950: PUSH
11951: LD_INT 5
11953: PUSH
11954: LD_INT 6
11956: PUSH
11957: LD_INT 7
11959: PUSH
11960: LD_INT 8
11962: PUSH
11963: LD_INT 9
11965: PUSH
11966: LD_INT 10
11968: PUSH
11969: LD_INT 11
11971: PUSH
11972: LD_INT 12
11974: PUSH
11975: LD_INT 13
11977: PUSH
11978: LD_INT 14
11980: PUSH
11981: LD_INT 15
11983: PUSH
11984: LD_INT 16
11986: PUSH
11987: LD_INT 17
11989: PUSH
11990: LD_INT 18
11992: PUSH
11993: LD_INT 19
11995: PUSH
11996: LD_INT 20
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 22
12004: PUSH
12005: LD_INT 23
12007: PUSH
12008: LD_INT 24
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 26
12016: PUSH
12017: LD_INT 27
12019: PUSH
12020: LD_INT 28
12022: PUSH
12023: LD_INT 29
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: LD_INT 31
12031: PUSH
12032: LD_INT 32
12034: PUSH
12035: LD_INT 33
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 36
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 101
12083: PUSH
12084: LD_INT 102
12086: PUSH
12087: LD_INT 103
12089: PUSH
12090: LD_INT 104
12092: PUSH
12093: LD_INT 105
12095: PUSH
12096: LD_INT 106
12098: PUSH
12099: LD_INT 107
12101: PUSH
12102: LD_INT 108
12104: PUSH
12105: LD_INT 109
12107: PUSH
12108: LD_INT 110
12110: PUSH
12111: LD_INT 111
12113: PUSH
12114: LD_INT 112
12116: PUSH
12117: LD_INT 113
12119: PUSH
12120: LD_INT 114
12122: PUSH
12123: LD_INT 116
12125: PUSH
12126: LD_INT 117
12128: PUSH
12129: LD_INT 118
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: ST_TO_ADDR
12155: GO 12554
12157: LD_INT 18
12159: DOUBLE
12160: EQUAL
12161: IFTRUE 12165
12163: GO 12313
12165: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: LD_INT 7
12182: PUSH
12183: LD_INT 11
12185: PUSH
12186: LD_INT 12
12188: PUSH
12189: LD_INT 15
12191: PUSH
12192: LD_INT 16
12194: PUSH
12195: LD_INT 20
12197: PUSH
12198: LD_INT 21
12200: PUSH
12201: LD_INT 22
12203: PUSH
12204: LD_INT 23
12206: PUSH
12207: LD_INT 25
12209: PUSH
12210: LD_INT 26
12212: PUSH
12213: LD_INT 30
12215: PUSH
12216: LD_INT 31
12218: PUSH
12219: LD_INT 32
12221: PUSH
12222: LD_INT 33
12224: PUSH
12225: LD_INT 34
12227: PUSH
12228: LD_INT 35
12230: PUSH
12231: LD_INT 36
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 101
12259: PUSH
12260: LD_INT 102
12262: PUSH
12263: LD_INT 103
12265: PUSH
12266: LD_INT 106
12268: PUSH
12269: LD_INT 108
12271: PUSH
12272: LD_INT 112
12274: PUSH
12275: LD_INT 113
12277: PUSH
12278: LD_INT 114
12280: PUSH
12281: LD_INT 115
12283: PUSH
12284: LD_INT 116
12286: PUSH
12287: LD_INT 117
12289: PUSH
12290: LD_INT 118
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 12554
12313: LD_INT 19
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12553
12321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 4
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: LD_INT 6
12344: PUSH
12345: LD_INT 7
12347: PUSH
12348: LD_INT 8
12350: PUSH
12351: LD_INT 9
12353: PUSH
12354: LD_INT 10
12356: PUSH
12357: LD_INT 11
12359: PUSH
12360: LD_INT 12
12362: PUSH
12363: LD_INT 13
12365: PUSH
12366: LD_INT 14
12368: PUSH
12369: LD_INT 15
12371: PUSH
12372: LD_INT 16
12374: PUSH
12375: LD_INT 17
12377: PUSH
12378: LD_INT 18
12380: PUSH
12381: LD_INT 19
12383: PUSH
12384: LD_INT 20
12386: PUSH
12387: LD_INT 21
12389: PUSH
12390: LD_INT 22
12392: PUSH
12393: LD_INT 23
12395: PUSH
12396: LD_INT 24
12398: PUSH
12399: LD_INT 25
12401: PUSH
12402: LD_INT 26
12404: PUSH
12405: LD_INT 27
12407: PUSH
12408: LD_INT 28
12410: PUSH
12411: LD_INT 29
12413: PUSH
12414: LD_INT 30
12416: PUSH
12417: LD_INT 31
12419: PUSH
12420: LD_INT 32
12422: PUSH
12423: LD_INT 33
12425: PUSH
12426: LD_INT 34
12428: PUSH
12429: LD_INT 35
12431: PUSH
12432: LD_INT 36
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 101
12475: PUSH
12476: LD_INT 102
12478: PUSH
12479: LD_INT 103
12481: PUSH
12482: LD_INT 104
12484: PUSH
12485: LD_INT 105
12487: PUSH
12488: LD_INT 106
12490: PUSH
12491: LD_INT 107
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 110
12502: PUSH
12503: LD_INT 111
12505: PUSH
12506: LD_INT 112
12508: PUSH
12509: LD_INT 113
12511: PUSH
12512: LD_INT 114
12514: PUSH
12515: LD_INT 115
12517: PUSH
12518: LD_INT 116
12520: PUSH
12521: LD_INT 117
12523: PUSH
12524: LD_INT 118
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: ST_TO_ADDR
12551: GO 12554
12553: POP
// end else
12554: GO 12785
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: LD_INT 3
12569: PUSH
12570: LD_INT 4
12572: PUSH
12573: LD_INT 5
12575: PUSH
12576: LD_INT 6
12578: PUSH
12579: LD_INT 7
12581: PUSH
12582: LD_INT 8
12584: PUSH
12585: LD_INT 9
12587: PUSH
12588: LD_INT 10
12590: PUSH
12591: LD_INT 11
12593: PUSH
12594: LD_INT 12
12596: PUSH
12597: LD_INT 13
12599: PUSH
12600: LD_INT 14
12602: PUSH
12603: LD_INT 15
12605: PUSH
12606: LD_INT 16
12608: PUSH
12609: LD_INT 17
12611: PUSH
12612: LD_INT 18
12614: PUSH
12615: LD_INT 19
12617: PUSH
12618: LD_INT 20
12620: PUSH
12621: LD_INT 21
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_INT 23
12629: PUSH
12630: LD_INT 24
12632: PUSH
12633: LD_INT 25
12635: PUSH
12636: LD_INT 26
12638: PUSH
12639: LD_INT 27
12641: PUSH
12642: LD_INT 28
12644: PUSH
12645: LD_INT 29
12647: PUSH
12648: LD_INT 30
12650: PUSH
12651: LD_INT 31
12653: PUSH
12654: LD_INT 32
12656: PUSH
12657: LD_INT 33
12659: PUSH
12660: LD_INT 34
12662: PUSH
12663: LD_INT 35
12665: PUSH
12666: LD_INT 36
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 101
12709: PUSH
12710: LD_INT 102
12712: PUSH
12713: LD_INT 103
12715: PUSH
12716: LD_INT 104
12718: PUSH
12719: LD_INT 105
12721: PUSH
12722: LD_INT 106
12724: PUSH
12725: LD_INT 107
12727: PUSH
12728: LD_INT 108
12730: PUSH
12731: LD_INT 109
12733: PUSH
12734: LD_INT 110
12736: PUSH
12737: LD_INT 111
12739: PUSH
12740: LD_INT 112
12742: PUSH
12743: LD_INT 113
12745: PUSH
12746: LD_INT 114
12748: PUSH
12749: LD_INT 115
12751: PUSH
12752: LD_INT 116
12754: PUSH
12755: LD_INT 117
12757: PUSH
12758: LD_INT 118
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: ST_TO_ADDR
// if result then
12785: LD_VAR 0 2
12789: IFFALSE 13575
// begin normal :=  ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: LD_STRING 
12798: ST_TO_ADDR
// hardcore :=  ;
12799: LD_ADDR_VAR 0 6
12803: PUSH
12804: LD_STRING 
12806: ST_TO_ADDR
// active :=  ;
12807: LD_ADDR_VAR 0 7
12811: PUSH
12812: LD_STRING 
12814: ST_TO_ADDR
// for i = 1 to normalCounter do
12815: LD_ADDR_VAR 0 8
12819: PUSH
12820: DOUBLE
12821: LD_INT 1
12823: DEC
12824: ST_TO_ADDR
12825: LD_EXP 31
12829: PUSH
12830: FOR_TO
12831: IFFALSE 12932
// begin tmp := 0 ;
12833: LD_ADDR_VAR 0 3
12837: PUSH
12838: LD_STRING 0
12840: ST_TO_ADDR
// if result [ 1 ] then
12841: LD_VAR 0 2
12845: PUSH
12846: LD_INT 1
12848: ARRAY
12849: IFFALSE 12914
// if result [ 1 ] [ 1 ] = i then
12851: LD_VAR 0 2
12855: PUSH
12856: LD_INT 1
12858: ARRAY
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PUSH
12864: LD_VAR 0 8
12868: EQUAL
12869: IFFALSE 12914
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 2
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: LD_VAR 0 2
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 3
12900: PPUSH
12901: CALL_OW 1
12905: ST_TO_ADDR
// tmp := 1 ;
12906: LD_ADDR_VAR 0 3
12910: PUSH
12911: LD_STRING 1
12913: ST_TO_ADDR
// end ; normal := normal & tmp ;
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: LD_VAR 0 5
12923: PUSH
12924: LD_VAR 0 3
12928: STR
12929: ST_TO_ADDR
// end ;
12930: GO 12830
12932: POP
12933: POP
// for i = 1 to hardcoreCounter do
12934: LD_ADDR_VAR 0 8
12938: PUSH
12939: DOUBLE
12940: LD_INT 1
12942: DEC
12943: ST_TO_ADDR
12944: LD_EXP 32
12948: PUSH
12949: FOR_TO
12950: IFFALSE 13055
// begin tmp := 0 ;
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_STRING 0
12959: ST_TO_ADDR
// if result [ 2 ] then
12960: LD_VAR 0 2
12964: PUSH
12965: LD_INT 2
12967: ARRAY
12968: IFFALSE 13037
// if result [ 2 ] [ 1 ] = 100 + i then
12970: LD_VAR 0 2
12974: PUSH
12975: LD_INT 2
12977: ARRAY
12978: PUSH
12979: LD_INT 1
12981: ARRAY
12982: PUSH
12983: LD_INT 100
12985: PUSH
12986: LD_VAR 0 8
12990: PLUS
12991: EQUAL
12992: IFFALSE 13037
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 2
13003: PPUSH
13004: LD_INT 2
13006: PPUSH
13007: LD_VAR 0 2
13011: PUSH
13012: LD_INT 2
13014: ARRAY
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 3
13023: PPUSH
13024: CALL_OW 1
13028: ST_TO_ADDR
// tmp := 1 ;
13029: LD_ADDR_VAR 0 3
13033: PUSH
13034: LD_STRING 1
13036: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13037: LD_ADDR_VAR 0 6
13041: PUSH
13042: LD_VAR 0 6
13046: PUSH
13047: LD_VAR 0 3
13051: STR
13052: ST_TO_ADDR
// end ;
13053: GO 12949
13055: POP
13056: POP
// if isGameLoad then
13057: LD_VAR 0 1
13061: IFFALSE 13536
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13063: LD_ADDR_VAR 0 4
13067: PUSH
13068: LD_EXP 35
13072: PUSH
13073: LD_EXP 34
13077: PUSH
13078: LD_EXP 36
13082: PUSH
13083: LD_EXP 33
13087: PUSH
13088: LD_EXP 37
13092: PUSH
13093: LD_EXP 38
13097: PUSH
13098: LD_EXP 39
13102: PUSH
13103: LD_EXP 40
13107: PUSH
13108: LD_EXP 41
13112: PUSH
13113: LD_EXP 42
13117: PUSH
13118: LD_EXP 43
13122: PUSH
13123: LD_EXP 44
13127: PUSH
13128: LD_EXP 45
13132: PUSH
13133: LD_EXP 46
13137: PUSH
13138: LD_EXP 54
13142: PUSH
13143: LD_EXP 55
13147: PUSH
13148: LD_EXP 56
13152: PUSH
13153: LD_EXP 57
13157: PUSH
13158: LD_EXP 59
13162: PUSH
13163: LD_EXP 60
13167: PUSH
13168: LD_EXP 61
13172: PUSH
13173: LD_EXP 64
13177: PUSH
13178: LD_EXP 66
13182: PUSH
13183: LD_EXP 67
13187: PUSH
13188: LD_EXP 68
13192: PUSH
13193: LD_EXP 70
13197: PUSH
13198: LD_EXP 71
13202: PUSH
13203: LD_EXP 74
13207: PUSH
13208: LD_EXP 75
13212: PUSH
13213: LD_EXP 76
13217: PUSH
13218: LD_EXP 77
13222: PUSH
13223: LD_EXP 78
13227: PUSH
13228: LD_EXP 79
13232: PUSH
13233: LD_EXP 80
13237: PUSH
13238: LD_EXP 81
13242: PUSH
13243: LD_EXP 82
13247: PUSH
13248: LD_EXP 47
13252: PUSH
13253: LD_EXP 48
13257: PUSH
13258: LD_EXP 51
13262: PUSH
13263: LD_EXP 52
13267: PUSH
13268: LD_EXP 53
13272: PUSH
13273: LD_EXP 49
13277: PUSH
13278: LD_EXP 50
13282: PUSH
13283: LD_EXP 58
13287: PUSH
13288: LD_EXP 62
13292: PUSH
13293: LD_EXP 63
13297: PUSH
13298: LD_EXP 65
13302: PUSH
13303: LD_EXP 69
13307: PUSH
13308: LD_EXP 72
13312: PUSH
13313: LD_EXP 73
13317: PUSH
13318: LD_EXP 83
13322: PUSH
13323: LD_EXP 84
13327: PUSH
13328: LD_EXP 85
13332: PUSH
13333: LD_EXP 86
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: ST_TO_ADDR
// tmp :=  ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_STRING 
13401: ST_TO_ADDR
// for i = 1 to normalCounter do
13402: LD_ADDR_VAR 0 8
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_EXP 31
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13454
// begin if flags [ i ] then
13420: LD_VAR 0 4
13424: PUSH
13425: LD_VAR 0 8
13429: ARRAY
13430: IFFALSE 13452
// tmp := tmp & i & ; ;
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_VAR 0 3
13441: PUSH
13442: LD_VAR 0 8
13446: STR
13447: PUSH
13448: LD_STRING ;
13450: STR
13451: ST_TO_ADDR
// end ;
13452: GO 13417
13454: POP
13455: POP
// for i = 1 to hardcoreCounter do
13456: LD_ADDR_VAR 0 8
13460: PUSH
13461: DOUBLE
13462: LD_INT 1
13464: DEC
13465: ST_TO_ADDR
13466: LD_EXP 32
13470: PUSH
13471: FOR_TO
13472: IFFALSE 13518
// begin if flags [ normalCounter + i ] then
13474: LD_VAR 0 4
13478: PUSH
13479: LD_EXP 31
13483: PUSH
13484: LD_VAR 0 8
13488: PLUS
13489: ARRAY
13490: IFFALSE 13516
// tmp := tmp & ( 100 + i ) & ; ;
13492: LD_ADDR_VAR 0 3
13496: PUSH
13497: LD_VAR 0 3
13501: PUSH
13502: LD_INT 100
13504: PUSH
13505: LD_VAR 0 8
13509: PLUS
13510: STR
13511: PUSH
13512: LD_STRING ;
13514: STR
13515: ST_TO_ADDR
// end ;
13516: GO 13471
13518: POP
13519: POP
// if tmp then
13520: LD_VAR 0 3
13524: IFFALSE 13536
// active := tmp ;
13526: LD_ADDR_VAR 0 7
13530: PUSH
13531: LD_VAR 0 3
13535: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13536: LD_STRING getStreamItemsFromMission("
13538: PUSH
13539: LD_VAR 0 5
13543: STR
13544: PUSH
13545: LD_STRING ","
13547: STR
13548: PUSH
13549: LD_VAR 0 6
13553: STR
13554: PUSH
13555: LD_STRING ","
13557: STR
13558: PUSH
13559: LD_VAR 0 7
13563: STR
13564: PUSH
13565: LD_STRING ")
13567: STR
13568: PPUSH
13569: CALL_OW 559
// end else
13573: GO 13582
// ToLua ( getStreamItemsFromMission("","","") ) ;
13575: LD_STRING getStreamItemsFromMission("","","")
13577: PPUSH
13578: CALL_OW 559
// end ;
13582: LD_VAR 0 2
13586: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13587: LD_EXP 30
13591: IFFALSE 13599
13593: PUSH
13594: LD_EXP 35
13598: AND
13599: IFFALSE 13723
13601: GO 13603
13603: DISABLE
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
// begin enable ;
13608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: LD_INT 34
13631: PUSH
13632: LD_INT 7
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 34
13641: PUSH
13642: LD_INT 45
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 34
13651: PUSH
13652: LD_INT 28
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 34
13661: PUSH
13662: LD_INT 47
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// if not tmp then
13685: LD_VAR 0 2
13689: NOT
13690: IFFALSE 13694
// exit ;
13692: GO 13723
// for i in tmp do
13694: LD_ADDR_VAR 0 1
13698: PUSH
13699: LD_VAR 0 2
13703: PUSH
13704: FOR_IN
13705: IFFALSE 13721
// begin SetLives ( i , 0 ) ;
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_INT 0
13714: PPUSH
13715: CALL_OW 234
// end ;
13719: GO 13704
13721: POP
13722: POP
// end ;
13723: PPOPN 2
13725: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13726: LD_EXP 30
13730: IFFALSE 13738
13732: PUSH
13733: LD_EXP 36
13737: AND
13738: IFFALSE 13822
13740: GO 13742
13742: DISABLE
13743: LD_INT 0
13745: PPUSH
13746: PPUSH
// begin enable ;
13747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 3
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: ST_TO_ADDR
// if not tmp then
13784: LD_VAR 0 2
13788: NOT
13789: IFFALSE 13793
// exit ;
13791: GO 13822
// for i in tmp do
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_VAR 0 2
13802: PUSH
13803: FOR_IN
13804: IFFALSE 13820
// begin SetLives ( i , 0 ) ;
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 0
13813: PPUSH
13814: CALL_OW 234
// end ;
13818: GO 13803
13820: POP
13821: POP
// end ;
13822: PPOPN 2
13824: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13825: LD_EXP 30
13829: IFFALSE 13837
13831: PUSH
13832: LD_EXP 33
13836: AND
13837: IFFALSE 13930
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
// begin enable ;
13845: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_INT 22
13853: PUSH
13854: LD_OWVAR 2
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 2
13865: PUSH
13866: LD_INT 25
13868: PUSH
13869: LD_INT 5
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 25
13878: PUSH
13879: LD_INT 9
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 8
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: PUSH
13911: FOR_IN
13912: IFFALSE 13928
// begin SetClass ( i , 1 ) ;
13914: LD_VAR 0 1
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 336
// end ;
13926: GO 13911
13928: POP
13929: POP
// end ;
13930: PPOPN 1
13932: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13933: LD_EXP 30
13937: IFFALSE 13945
13939: PUSH
13940: LD_EXP 34
13944: AND
13945: IFFALSE 13957
13947: PUSH
13948: LD_OWVAR 65
13952: PUSH
13953: LD_INT 7
13955: LESS
13956: AND
13957: IFFALSE 13971
13959: GO 13961
13961: DISABLE
// begin enable ;
13962: ENABLE
// game_speed := 7 ;
13963: LD_ADDR_OWVAR 65
13967: PUSH
13968: LD_INT 7
13970: ST_TO_ADDR
// end ;
13971: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13972: LD_EXP 30
13976: IFFALSE 13984
13978: PUSH
13979: LD_EXP 37
13983: AND
13984: IFFALSE 14186
13986: GO 13988
13988: DISABLE
13989: LD_INT 0
13991: PPUSH
13992: PPUSH
13993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13994: LD_ADDR_VAR 0 3
13998: PUSH
13999: LD_INT 81
14001: PUSH
14002: LD_OWVAR 2
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 1
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: ST_TO_ADDR
// if not tmp then
14030: LD_VAR 0 3
14034: NOT
14035: IFFALSE 14039
// exit ;
14037: GO 14186
// if tmp > 5 then
14039: LD_VAR 0 3
14043: PUSH
14044: LD_INT 5
14046: GREATER
14047: IFFALSE 14059
// k := 5 else
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_INT 5
14056: ST_TO_ADDR
14057: GO 14069
// k := tmp ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_VAR 0 3
14068: ST_TO_ADDR
// for i := 1 to k do
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: DOUBLE
14075: LD_INT 1
14077: DEC
14078: ST_TO_ADDR
14079: LD_VAR 0 2
14083: PUSH
14084: FOR_TO
14085: IFFALSE 14184
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14087: LD_VAR 0 3
14091: PUSH
14092: LD_VAR 0 1
14096: ARRAY
14097: PPUSH
14098: LD_VAR 0 1
14102: PUSH
14103: LD_INT 4
14105: MOD
14106: PUSH
14107: LD_INT 1
14109: PLUS
14110: PPUSH
14111: CALL_OW 259
14115: PUSH
14116: LD_INT 10
14118: LESS
14119: IFFALSE 14182
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14121: LD_VAR 0 3
14125: PUSH
14126: LD_VAR 0 1
14130: ARRAY
14131: PPUSH
14132: LD_VAR 0 1
14136: PUSH
14137: LD_INT 4
14139: MOD
14140: PUSH
14141: LD_INT 1
14143: PLUS
14144: PPUSH
14145: LD_VAR 0 3
14149: PUSH
14150: LD_VAR 0 1
14154: ARRAY
14155: PPUSH
14156: LD_VAR 0 1
14160: PUSH
14161: LD_INT 4
14163: MOD
14164: PUSH
14165: LD_INT 1
14167: PLUS
14168: PPUSH
14169: CALL_OW 259
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: PPUSH
14178: CALL_OW 237
14182: GO 14084
14184: POP
14185: POP
// end ;
14186: PPOPN 3
14188: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14189: LD_EXP 30
14193: IFFALSE 14201
14195: PUSH
14196: LD_EXP 38
14200: AND
14201: IFFALSE 14221
14203: GO 14205
14205: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14206: LD_INT 4
14208: PPUSH
14209: LD_OWVAR 2
14213: PPUSH
14214: LD_INT 0
14216: PPUSH
14217: CALL_OW 324
14221: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14222: LD_EXP 30
14226: IFFALSE 14234
14228: PUSH
14229: LD_EXP 67
14233: AND
14234: IFFALSE 14254
14236: GO 14238
14238: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14239: LD_INT 19
14241: PPUSH
14242: LD_OWVAR 2
14246: PPUSH
14247: LD_INT 0
14249: PPUSH
14250: CALL_OW 324
14254: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14255: LD_EXP 30
14259: IFFALSE 14267
14261: PUSH
14262: LD_EXP 39
14266: AND
14267: IFFALSE 14369
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
// begin enable ;
14276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 22
14284: PUSH
14285: LD_OWVAR 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: LD_INT 34
14299: PUSH
14300: LD_INT 11
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 34
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: ST_TO_ADDR
// if not tmp then
14331: LD_VAR 0 2
14335: NOT
14336: IFFALSE 14340
// exit ;
14338: GO 14369
// for i in tmp do
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: LD_VAR 0 2
14349: PUSH
14350: FOR_IN
14351: IFFALSE 14367
// begin SetLives ( i , 0 ) ;
14353: LD_VAR 0 1
14357: PPUSH
14358: LD_INT 0
14360: PPUSH
14361: CALL_OW 234
// end ;
14365: GO 14350
14367: POP
14368: POP
// end ;
14369: PPOPN 2
14371: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14372: LD_EXP 30
14376: IFFALSE 14384
14378: PUSH
14379: LD_EXP 40
14383: AND
14384: IFFALSE 14404
14386: GO 14388
14388: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14389: LD_INT 32
14391: PPUSH
14392: LD_OWVAR 2
14396: PPUSH
14397: LD_INT 0
14399: PPUSH
14400: CALL_OW 324
14404: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14405: LD_EXP 30
14409: IFFALSE 14417
14411: PUSH
14412: LD_EXP 41
14416: AND
14417: IFFALSE 14600
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
14426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_OWVAR 2
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 33
14446: PUSH
14447: LD_INT 3
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PPUSH
14458: CALL_OW 69
14462: ST_TO_ADDR
// if not tmp then
14463: LD_VAR 0 2
14467: NOT
14468: IFFALSE 14472
// exit ;
14470: GO 14600
// side := 0 ;
14472: LD_ADDR_VAR 0 3
14476: PUSH
14477: LD_INT 0
14479: ST_TO_ADDR
// for i := 1 to 8 do
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: DOUBLE
14486: LD_INT 1
14488: DEC
14489: ST_TO_ADDR
14490: LD_INT 8
14492: PUSH
14493: FOR_TO
14494: IFFALSE 14544
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14496: LD_OWVAR 2
14500: PUSH
14501: LD_VAR 0 1
14505: NONEQUAL
14506: IFFALSE 14528
14508: PUSH
14509: LD_OWVAR 2
14513: PPUSH
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 81
14523: PUSH
14524: LD_INT 2
14526: EQUAL
14527: AND
14528: IFFALSE 14542
// begin side := i ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: LD_VAR 0 1
14539: ST_TO_ADDR
// break ;
14540: GO 14544
// end ;
14542: GO 14493
14544: POP
14545: POP
// if not side then
14546: LD_VAR 0 3
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 14600
// for i := 1 to tmp do
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: DOUBLE
14561: LD_INT 1
14563: DEC
14564: ST_TO_ADDR
14565: LD_VAR 0 2
14569: PUSH
14570: FOR_TO
14571: IFFALSE 14598
// if Prob ( 60 ) then
14573: LD_INT 60
14575: PPUSH
14576: CALL_OW 13
14580: IFFALSE 14596
// SetSide ( i , side ) ;
14582: LD_VAR 0 1
14586: PPUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: CALL_OW 235
14596: GO 14570
14598: POP
14599: POP
// end ;
14600: PPOPN 3
14602: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14603: LD_EXP 30
14607: IFFALSE 14615
14609: PUSH
14610: LD_EXP 43
14614: AND
14615: IFFALSE 14734
14617: GO 14619
14619: DISABLE
14620: LD_INT 0
14622: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14623: LD_ADDR_VAR 0 1
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_OWVAR 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 3
14652: PUSH
14653: LD_INT 23
14655: PUSH
14656: LD_INT 0
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: PUSH
14677: FOR_IN
14678: IFFALSE 14732
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 257
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: LD_INT 3
14698: PUSH
14699: LD_INT 4
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: IN
14708: IFFALSE 14730
// SetClass ( un , rand ( 1 , 4 ) ) ;
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: LD_INT 4
14720: PPUSH
14721: CALL_OW 12
14725: PPUSH
14726: CALL_OW 336
14730: GO 14677
14732: POP
14733: POP
// end ;
14734: PPOPN 1
14736: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14737: LD_EXP 30
14741: IFFALSE 14749
14743: PUSH
14744: LD_EXP 42
14748: AND
14749: IFFALSE 14828
14751: GO 14753
14753: DISABLE
14754: LD_INT 0
14756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14757: LD_ADDR_VAR 0 1
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_OWVAR 2
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 3
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: ST_TO_ADDR
// if not tmp then
14793: LD_VAR 0 1
14797: NOT
14798: IFFALSE 14802
// exit ;
14800: GO 14828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 1
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 12
14819: ARRAY
14820: PPUSH
14821: LD_INT 100
14823: PPUSH
14824: CALL_OW 234
// end ;
14828: PPOPN 1
14830: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14831: LD_EXP 30
14835: IFFALSE 14843
14837: PUSH
14838: LD_EXP 44
14842: AND
14843: IFFALSE 14941
14845: GO 14847
14847: DISABLE
14848: LD_INT 0
14850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14851: LD_ADDR_VAR 0 1
14855: PUSH
14856: LD_INT 22
14858: PUSH
14859: LD_OWVAR 2
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if not tmp then
14887: LD_VAR 0 1
14891: NOT
14892: IFFALSE 14896
// exit ;
14894: GO 14941
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14896: LD_VAR 0 1
14900: PUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 12
14913: ARRAY
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: LD_INT 4
14920: PPUSH
14921: CALL_OW 12
14925: PPUSH
14926: LD_INT 3000
14928: PPUSH
14929: LD_INT 9000
14931: PPUSH
14932: CALL_OW 12
14936: PPUSH
14937: CALL_OW 492
// end ;
14941: PPOPN 1
14943: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14944: LD_EXP 30
14948: IFFALSE 14956
14950: PUSH
14951: LD_EXP 45
14955: AND
14956: IFFALSE 14976
14958: GO 14960
14960: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14961: LD_INT 1
14963: PPUSH
14964: LD_OWVAR 2
14968: PPUSH
14969: LD_INT 0
14971: PPUSH
14972: CALL_OW 324
14976: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14977: LD_EXP 30
14981: IFFALSE 14989
14983: PUSH
14984: LD_EXP 46
14988: AND
14989: IFFALSE 15072
14991: GO 14993
14993: DISABLE
14994: LD_INT 0
14996: PPUSH
14997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14998: LD_ADDR_VAR 0 2
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_OWVAR 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 3
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: ST_TO_ADDR
// if not tmp then
15034: LD_VAR 0 2
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15072
// for i in tmp do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_VAR 0 2
15052: PUSH
15053: FOR_IN
15054: IFFALSE 15070
// SetBLevel ( i , 10 ) ;
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 10
15063: PPUSH
15064: CALL_OW 241
15068: GO 15053
15070: POP
15071: POP
// end ;
15072: PPOPN 2
15074: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15075: LD_EXP 30
15079: IFFALSE 15087
15081: PUSH
15082: LD_EXP 47
15086: AND
15087: IFFALSE 15198
15089: GO 15091
15091: DISABLE
15092: LD_INT 0
15094: PPUSH
15095: PPUSH
15096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: LD_INT 22
15104: PUSH
15105: LD_OWVAR 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PPUSH
15128: CALL_OW 69
15132: ST_TO_ADDR
// if not tmp then
15133: LD_VAR 0 3
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15198
// un := tmp [ rand ( 1 , tmp ) ] ;
15142: LD_ADDR_VAR 0 2
15146: PUSH
15147: LD_VAR 0 3
15151: PUSH
15152: LD_INT 1
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: CALL_OW 12
15164: ARRAY
15165: ST_TO_ADDR
// if Crawls ( un ) then
15166: LD_VAR 0 2
15170: PPUSH
15171: CALL_OW 318
15175: IFFALSE 15186
// ComWalk ( un ) ;
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15186: LD_VAR 0 2
15190: PPUSH
15191: LD_INT 5
15193: PPUSH
15194: CALL_OW 336
// end ;
15198: PPOPN 3
15200: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15201: LD_EXP 30
15205: IFFALSE 15213
15207: PUSH
15208: LD_EXP 48
15212: AND
15213: IFFALSE 15225
15215: PUSH
15216: LD_OWVAR 67
15220: PUSH
15221: LD_INT 4
15223: LESS
15224: AND
15225: IFFALSE 15244
15227: GO 15229
15229: DISABLE
// begin Difficulty := Difficulty + 1 ;
15230: LD_ADDR_OWVAR 67
15234: PUSH
15235: LD_OWVAR 67
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: ST_TO_ADDR
// end ;
15244: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15245: LD_EXP 30
15249: IFFALSE 15257
15251: PUSH
15252: LD_EXP 49
15256: AND
15257: IFFALSE 15360
15259: GO 15261
15261: DISABLE
15262: LD_INT 0
15264: PPUSH
// begin for i := 1 to 5 do
15265: LD_ADDR_VAR 0 1
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 5
15277: PUSH
15278: FOR_TO
15279: IFFALSE 15358
// begin uc_nation := nation_nature ;
15281: LD_ADDR_OWVAR 21
15285: PUSH
15286: LD_INT 0
15288: ST_TO_ADDR
// uc_side := 0 ;
15289: LD_ADDR_OWVAR 20
15293: PUSH
15294: LD_INT 0
15296: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15297: LD_ADDR_OWVAR 29
15301: PUSH
15302: LD_INT 12
15304: PUSH
15305: LD_INT 12
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: ST_TO_ADDR
// hc_agressivity := 20 ;
15312: LD_ADDR_OWVAR 35
15316: PUSH
15317: LD_INT 20
15319: ST_TO_ADDR
// hc_class := class_tiger ;
15320: LD_ADDR_OWVAR 28
15324: PUSH
15325: LD_INT 14
15327: ST_TO_ADDR
// hc_gallery :=  ;
15328: LD_ADDR_OWVAR 33
15332: PUSH
15333: LD_STRING 
15335: ST_TO_ADDR
// hc_name :=  ;
15336: LD_ADDR_OWVAR 26
15340: PUSH
15341: LD_STRING 
15343: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15344: CALL_OW 44
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL_OW 51
// end ;
15356: GO 15278
15358: POP
15359: POP
// end ;
15360: PPOPN 1
15362: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15363: LD_EXP 30
15367: IFFALSE 15375
15369: PUSH
15370: LD_EXP 50
15374: AND
15375: IFFALSE 15384
15377: GO 15379
15379: DISABLE
// StreamSibBomb ;
15380: CALL 15385 0 0
15384: END
// export function StreamSibBomb ; var i , x , y ; begin
15385: LD_INT 0
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
// result := false ;
15391: LD_ADDR_VAR 0 1
15395: PUSH
15396: LD_INT 0
15398: ST_TO_ADDR
// for i := 1 to 16 do
15399: LD_ADDR_VAR 0 2
15403: PUSH
15404: DOUBLE
15405: LD_INT 1
15407: DEC
15408: ST_TO_ADDR
15409: LD_INT 16
15411: PUSH
15412: FOR_TO
15413: IFFALSE 15612
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15415: LD_ADDR_VAR 0 3
15419: PUSH
15420: LD_INT 10
15422: PUSH
15423: LD_INT 20
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: LD_INT 40
15431: PUSH
15432: LD_INT 50
15434: PUSH
15435: LD_INT 60
15437: PUSH
15438: LD_INT 70
15440: PUSH
15441: LD_INT 80
15443: PUSH
15444: LD_INT 90
15446: PUSH
15447: LD_INT 100
15449: PUSH
15450: LD_INT 110
15452: PUSH
15453: LD_INT 120
15455: PUSH
15456: LD_INT 130
15458: PUSH
15459: LD_INT 140
15461: PUSH
15462: LD_INT 150
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 1
15484: PPUSH
15485: LD_INT 15
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15494: LD_ADDR_VAR 0 4
15498: PUSH
15499: LD_INT 10
15501: PUSH
15502: LD_INT 20
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: LD_INT 40
15510: PUSH
15511: LD_INT 50
15513: PUSH
15514: LD_INT 60
15516: PUSH
15517: LD_INT 70
15519: PUSH
15520: LD_INT 80
15522: PUSH
15523: LD_INT 90
15525: PUSH
15526: LD_INT 100
15528: PUSH
15529: LD_INT 110
15531: PUSH
15532: LD_INT 120
15534: PUSH
15535: LD_INT 130
15537: PUSH
15538: LD_INT 140
15540: PUSH
15541: LD_INT 150
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 1
15563: PPUSH
15564: LD_INT 15
15566: PPUSH
15567: CALL_OW 12
15571: ARRAY
15572: ST_TO_ADDR
// if ValidHex ( x , y ) then
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_VAR 0 4
15582: PPUSH
15583: CALL_OW 488
15587: IFFALSE 15610
// begin result := [ x , y ] ;
15589: LD_ADDR_VAR 0 1
15593: PUSH
15594: LD_VAR 0 3
15598: PUSH
15599: LD_VAR 0 4
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: ST_TO_ADDR
// break ;
15608: GO 15612
// end ; end ;
15610: GO 15412
15612: POP
15613: POP
// if result then
15614: LD_VAR 0 1
15618: IFFALSE 15678
// begin ToLua ( playSibBomb() ) ;
15620: LD_STRING playSibBomb()
15622: PPUSH
15623: CALL_OW 559
// wait ( 0 0$14 ) ;
15627: LD_INT 490
15629: PPUSH
15630: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 1
15641: ARRAY
15642: PPUSH
15643: LD_VAR 0 1
15647: PUSH
15648: LD_INT 2
15650: ARRAY
15651: PPUSH
15652: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15656: LD_VAR 0 1
15660: PUSH
15661: LD_INT 1
15663: ARRAY
15664: PPUSH
15665: LD_VAR 0 1
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: PPUSH
15674: CALL_OW 429
// end ; end ;
15678: LD_VAR 0 1
15682: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15683: LD_EXP 30
15687: IFFALSE 15695
15689: PUSH
15690: LD_EXP 52
15694: AND
15695: IFFALSE 15707
15697: GO 15699
15699: DISABLE
// YouLost (  ) ;
15700: LD_STRING 
15702: PPUSH
15703: CALL_OW 104
15707: END
// every 0 0$1 trigger StreamModeActive and sFog do
15708: LD_EXP 30
15712: IFFALSE 15720
15714: PUSH
15715: LD_EXP 51
15719: AND
15720: IFFALSE 15734
15722: GO 15724
15724: DISABLE
// FogOff ( your_side ) ;
15725: LD_OWVAR 2
15729: PPUSH
15730: CALL_OW 344
15734: END
// every 0 0$1 trigger StreamModeActive and sSun do
15735: LD_EXP 30
15739: IFFALSE 15747
15741: PUSH
15742: LD_EXP 53
15746: AND
15747: IFFALSE 15775
15749: GO 15751
15751: DISABLE
// begin solar_recharge_percent := 0 ;
15752: LD_ADDR_OWVAR 79
15756: PUSH
15757: LD_INT 0
15759: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15760: LD_INT 10500
15762: PPUSH
15763: CALL_OW 67
// solar_recharge_percent := 100 ;
15767: LD_ADDR_OWVAR 79
15771: PUSH
15772: LD_INT 100
15774: ST_TO_ADDR
// end ;
15775: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15776: LD_EXP 30
15780: IFFALSE 15788
15782: PUSH
15783: LD_EXP 54
15787: AND
15788: IFFALSE 16027
15790: GO 15792
15792: DISABLE
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
15797: PPUSH
// begin tmp := [ ] ;
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: EMPTY
15804: ST_TO_ADDR
// for i := 1 to 6 do
15805: LD_ADDR_VAR 0 1
15809: PUSH
15810: DOUBLE
15811: LD_INT 1
15813: DEC
15814: ST_TO_ADDR
15815: LD_INT 6
15817: PUSH
15818: FOR_TO
15819: IFFALSE 15924
// begin uc_nation := nation_nature ;
15821: LD_ADDR_OWVAR 21
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
// uc_side := 0 ;
15829: LD_ADDR_OWVAR 20
15833: PUSH
15834: LD_INT 0
15836: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15837: LD_ADDR_OWVAR 29
15841: PUSH
15842: LD_INT 12
15844: PUSH
15845: LD_INT 12
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: ST_TO_ADDR
// hc_agressivity := 20 ;
15852: LD_ADDR_OWVAR 35
15856: PUSH
15857: LD_INT 20
15859: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15860: LD_ADDR_OWVAR 28
15864: PUSH
15865: LD_INT 17
15867: ST_TO_ADDR
// hc_gallery :=  ;
15868: LD_ADDR_OWVAR 33
15872: PUSH
15873: LD_STRING 
15875: ST_TO_ADDR
// hc_name :=  ;
15876: LD_ADDR_OWVAR 26
15880: PUSH
15881: LD_STRING 
15883: ST_TO_ADDR
// un := CreateHuman ;
15884: LD_ADDR_VAR 0 2
15888: PUSH
15889: CALL_OW 44
15893: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15894: LD_VAR 0 2
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 51
// tmp := tmp ^ un ;
15906: LD_ADDR_VAR 0 3
15910: PUSH
15911: LD_VAR 0 3
15915: PUSH
15916: LD_VAR 0 2
15920: ADD
15921: ST_TO_ADDR
// end ;
15922: GO 15818
15924: POP
15925: POP
// repeat wait ( 0 0$1 ) ;
15926: LD_INT 35
15928: PPUSH
15929: CALL_OW 67
// for un in tmp do
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_VAR 0 3
15942: PUSH
15943: FOR_IN
15944: IFFALSE 16018
// begin if IsDead ( un ) then
15946: LD_VAR 0 2
15950: PPUSH
15951: CALL_OW 301
15955: IFFALSE 15975
// begin tmp := tmp diff un ;
15957: LD_ADDR_VAR 0 3
15961: PUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_VAR 0 2
15971: DIFF
15972: ST_TO_ADDR
// continue ;
15973: GO 15943
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_INT 0
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: PPUSH
16002: LD_VAR 0 2
16006: PPUSH
16007: CALL_OW 74
16011: PPUSH
16012: CALL_OW 115
// end ;
16016: GO 15943
16018: POP
16019: POP
// until not tmp ;
16020: LD_VAR 0 3
16024: NOT
16025: IFFALSE 15926
// end ;
16027: PPOPN 3
16029: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16030: LD_EXP 30
16034: IFFALSE 16042
16036: PUSH
16037: LD_EXP 55
16041: AND
16042: IFFALSE 16096
16044: GO 16046
16046: DISABLE
// begin ToLua ( displayTroll(); ) ;
16047: LD_STRING displayTroll();
16049: PPUSH
16050: CALL_OW 559
// wait ( 3 3$00 ) ;
16054: LD_INT 6300
16056: PPUSH
16057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16061: LD_STRING hideTroll();
16063: PPUSH
16064: CALL_OW 559
// wait ( 1 1$00 ) ;
16068: LD_INT 2100
16070: PPUSH
16071: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16075: LD_STRING displayTroll();
16077: PPUSH
16078: CALL_OW 559
// wait ( 1 1$00 ) ;
16082: LD_INT 2100
16084: PPUSH
16085: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16089: LD_STRING hideTroll();
16091: PPUSH
16092: CALL_OW 559
// end ;
16096: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16097: LD_EXP 30
16101: IFFALSE 16109
16103: PUSH
16104: LD_EXP 56
16108: AND
16109: IFFALSE 16172
16111: GO 16113
16113: DISABLE
16114: LD_INT 0
16116: PPUSH
// begin p := 0 ;
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: LD_INT 0
16124: ST_TO_ADDR
// repeat game_speed := 1 ;
16125: LD_ADDR_OWVAR 65
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16133: LD_INT 35
16135: PPUSH
16136: CALL_OW 67
// p := p + 1 ;
16140: LD_ADDR_VAR 0 1
16144: PUSH
16145: LD_VAR 0 1
16149: PUSH
16150: LD_INT 1
16152: PLUS
16153: ST_TO_ADDR
// until p >= 60 ;
16154: LD_VAR 0 1
16158: PUSH
16159: LD_INT 60
16161: GREATEREQUAL
16162: IFFALSE 16125
// game_speed := 4 ;
16164: LD_ADDR_OWVAR 65
16168: PUSH
16169: LD_INT 4
16171: ST_TO_ADDR
// end ;
16172: PPOPN 1
16174: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16175: LD_EXP 30
16179: IFFALSE 16187
16181: PUSH
16182: LD_EXP 57
16186: AND
16187: IFFALSE 16333
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
16195: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16196: LD_ADDR_VAR 0 1
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_OWVAR 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 0
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL_OW 69
16249: ST_TO_ADDR
// if not depot then
16250: LD_VAR 0 1
16254: NOT
16255: IFFALSE 16259
// exit ;
16257: GO 16333
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16259: LD_ADDR_VAR 0 2
16263: PUSH
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 1
16271: PPUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 12
16281: ARRAY
16282: PPUSH
16283: CALL_OW 274
16287: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16288: LD_VAR 0 2
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: LD_INT 0
16298: PPUSH
16299: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16303: LD_VAR 0 2
16307: PPUSH
16308: LD_INT 2
16310: PPUSH
16311: LD_INT 0
16313: PPUSH
16314: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16318: LD_VAR 0 2
16322: PPUSH
16323: LD_INT 3
16325: PPUSH
16326: LD_INT 0
16328: PPUSH
16329: CALL_OW 277
// end ;
16333: PPOPN 2
16335: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16336: LD_EXP 30
16340: IFFALSE 16348
16342: PUSH
16343: LD_EXP 58
16347: AND
16348: IFFALSE 16445
16350: GO 16352
16352: DISABLE
16353: LD_INT 0
16355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 21
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: LD_INT 23
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: PPUSH
16405: CALL_OW 69
16409: ST_TO_ADDR
// if not tmp then
16410: LD_VAR 0 1
16414: NOT
16415: IFFALSE 16419
// exit ;
16417: GO 16445
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16419: LD_VAR 0 1
16423: PUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 12
16436: ARRAY
16437: PPUSH
16438: LD_INT 200
16440: PPUSH
16441: CALL_OW 234
// end ;
16445: PPOPN 1
16447: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16448: LD_EXP 30
16452: IFFALSE 16460
16454: PUSH
16455: LD_EXP 59
16459: AND
16460: IFFALSE 16539
16462: GO 16464
16464: DISABLE
16465: LD_INT 0
16467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 22
16475: PUSH
16476: LD_OWVAR 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
// if not tmp then
16504: LD_VAR 0 1
16508: NOT
16509: IFFALSE 16513
// exit ;
16511: GO 16539
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16513: LD_VAR 0 1
16517: PUSH
16518: LD_INT 1
16520: PPUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PPUSH
16532: LD_INT 60
16534: PPUSH
16535: CALL_OW 234
// end ;
16539: PPOPN 1
16541: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16542: LD_EXP 30
16546: IFFALSE 16554
16548: PUSH
16549: LD_EXP 60
16553: AND
16554: IFFALSE 16653
16556: GO 16558
16558: DISABLE
16559: LD_INT 0
16561: PPUSH
16562: PPUSH
// begin enable ;
16563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_INT 22
16571: PUSH
16572: LD_OWVAR 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 61
16583: PUSH
16584: EMPTY
16585: LIST
16586: PUSH
16587: LD_INT 33
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PPUSH
16602: CALL_OW 69
16606: ST_TO_ADDR
// if not tmp then
16607: LD_VAR 0 1
16611: NOT
16612: IFFALSE 16616
// exit ;
16614: GO 16653
// for i in tmp do
16616: LD_ADDR_VAR 0 2
16620: PUSH
16621: LD_VAR 0 1
16625: PUSH
16626: FOR_IN
16627: IFFALSE 16651
// if IsControledBy ( i ) then
16629: LD_VAR 0 2
16633: PPUSH
16634: CALL_OW 312
16638: IFFALSE 16649
// ComUnlink ( i ) ;
16640: LD_VAR 0 2
16644: PPUSH
16645: CALL_OW 136
16649: GO 16626
16651: POP
16652: POP
// end ;
16653: PPOPN 2
16655: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16656: LD_EXP 30
16660: IFFALSE 16668
16662: PUSH
16663: LD_EXP 61
16667: AND
16668: IFFALSE 16808
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
// begin ToLua ( displayPowell(); ) ;
16677: LD_STRING displayPowell();
16679: PPUSH
16680: CALL_OW 559
// uc_side := 0 ;
16684: LD_ADDR_OWVAR 20
16688: PUSH
16689: LD_INT 0
16691: ST_TO_ADDR
// uc_nation := 2 ;
16692: LD_ADDR_OWVAR 21
16696: PUSH
16697: LD_INT 2
16699: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16700: LD_ADDR_OWVAR 37
16704: PUSH
16705: LD_INT 14
16707: ST_TO_ADDR
// vc_engine := engine_siberite ;
16708: LD_ADDR_OWVAR 39
16712: PUSH
16713: LD_INT 3
16715: ST_TO_ADDR
// vc_control := control_apeman ;
16716: LD_ADDR_OWVAR 38
16720: PUSH
16721: LD_INT 5
16723: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16724: LD_ADDR_OWVAR 40
16728: PUSH
16729: LD_INT 29
16731: ST_TO_ADDR
// un := CreateVehicle ;
16732: LD_ADDR_VAR 0 2
16736: PUSH
16737: CALL_OW 45
16741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16754: LD_INT 35
16756: PPUSH
16757: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16761: LD_VAR 0 2
16765: PPUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: CALL_OW 74
16792: PPUSH
16793: CALL_OW 115
// until IsDead ( un ) ;
16797: LD_VAR 0 2
16801: PPUSH
16802: CALL_OW 301
16806: IFFALSE 16754
// end ;
16808: PPOPN 2
16810: END
// every 0 0$1 trigger StreamModeActive and sStu do
16811: LD_EXP 30
16815: IFFALSE 16823
16817: PUSH
16818: LD_EXP 69
16822: AND
16823: IFFALSE 16839
16825: GO 16827
16827: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16828: LD_STRING displayStucuk();
16830: PPUSH
16831: CALL_OW 559
// ResetFog ;
16835: CALL_OW 335
// end ;
16839: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16840: LD_EXP 30
16844: IFFALSE 16852
16846: PUSH
16847: LD_EXP 62
16851: AND
16852: IFFALSE 16993
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_INT 22
16868: PUSH
16869: LD_OWVAR 2
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 21
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PPUSH
16892: CALL_OW 69
16896: ST_TO_ADDR
// if not tmp then
16897: LD_VAR 0 2
16901: NOT
16902: IFFALSE 16906
// exit ;
16904: GO 16993
// un := tmp [ rand ( 1 , tmp ) ] ;
16906: LD_ADDR_VAR 0 1
16910: PUSH
16911: LD_VAR 0 2
16915: PUSH
16916: LD_INT 1
16918: PPUSH
16919: LD_VAR 0 2
16923: PPUSH
16924: CALL_OW 12
16928: ARRAY
16929: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 0
16937: PPUSH
16938: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_OWVAR 3
16951: PUSH
16952: LD_VAR 0 1
16956: DIFF
16957: PPUSH
16958: LD_VAR 0 1
16962: PPUSH
16963: CALL_OW 74
16967: PPUSH
16968: CALL_OW 115
// wait ( 0 0$20 ) ;
16972: LD_INT 700
16974: PPUSH
16975: CALL_OW 67
// SetSide ( un , your_side ) ;
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_OWVAR 2
16988: PPUSH
16989: CALL_OW 235
// end ;
16993: PPOPN 2
16995: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16996: LD_EXP 30
17000: IFFALSE 17008
17002: PUSH
17003: LD_EXP 63
17007: AND
17008: IFFALSE 17114
17010: GO 17012
17012: DISABLE
17013: LD_INT 0
17015: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17016: LD_ADDR_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 30
17038: PUSH
17039: LD_INT 0
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PPUSH
17065: CALL_OW 69
17069: ST_TO_ADDR
// if not depot then
17070: LD_VAR 0 1
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17114
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17079: LD_VAR 0 1
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PPUSH
17088: CALL_OW 250
17092: PPUSH
17093: LD_VAR 0 1
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PPUSH
17102: CALL_OW 251
17106: PPUSH
17107: LD_INT 70
17109: PPUSH
17110: CALL_OW 495
// end ;
17114: PPOPN 1
17116: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17117: LD_EXP 30
17121: IFFALSE 17129
17123: PUSH
17124: LD_EXP 64
17128: AND
17129: IFFALSE 17340
17131: GO 17133
17133: DISABLE
17134: LD_INT 0
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17141: LD_ADDR_VAR 0 5
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 21
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 5
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17340
// for i in tmp do
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_VAR 0 5
17195: PUSH
17196: FOR_IN
17197: IFFALSE 17338
// begin d := rand ( 0 , 5 ) ;
17199: LD_ADDR_VAR 0 4
17203: PUSH
17204: LD_INT 0
17206: PPUSH
17207: LD_INT 5
17209: PPUSH
17210: CALL_OW 12
17214: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17215: LD_ADDR_VAR 0 2
17219: PUSH
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 250
17229: PPUSH
17230: LD_VAR 0 4
17234: PPUSH
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 12
17240: PPUSH
17241: CALL_OW 12
17245: PPUSH
17246: CALL_OW 272
17250: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 251
17265: PPUSH
17266: LD_VAR 0 4
17270: PPUSH
17271: LD_INT 3
17273: PPUSH
17274: LD_INT 12
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: CALL_OW 273
17286: ST_TO_ADDR
// if ValidHex ( x , y ) then
17287: LD_VAR 0 2
17291: PPUSH
17292: LD_VAR 0 3
17296: PPUSH
17297: CALL_OW 488
17301: IFFALSE 17336
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: LD_VAR 0 3
17317: PPUSH
17318: LD_INT 3
17320: PPUSH
17321: LD_INT 6
17323: PPUSH
17324: CALL_OW 12
17328: PPUSH
17329: LD_INT 1
17331: PPUSH
17332: CALL_OW 483
// end ;
17336: GO 17196
17338: POP
17339: POP
// end ;
17340: PPOPN 5
17342: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17343: LD_EXP 30
17347: IFFALSE 17355
17349: PUSH
17350: LD_EXP 65
17354: AND
17355: IFFALSE 17449
17357: GO 17359
17359: DISABLE
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_INT 22
17371: PUSH
17372: LD_OWVAR 2
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 32
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 21
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 69
17410: ST_TO_ADDR
// if not tmp then
17411: LD_VAR 0 2
17415: NOT
17416: IFFALSE 17420
// exit ;
17418: GO 17449
// for i in tmp do
17420: LD_ADDR_VAR 0 1
17424: PUSH
17425: LD_VAR 0 2
17429: PUSH
17430: FOR_IN
17431: IFFALSE 17447
// SetFuel ( i , 0 ) ;
17433: LD_VAR 0 1
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: CALL_OW 240
17445: GO 17430
17447: POP
17448: POP
// end ;
17449: PPOPN 2
17451: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17452: LD_EXP 30
17456: IFFALSE 17464
17458: PUSH
17459: LD_EXP 66
17463: AND
17464: IFFALSE 17530
17466: GO 17468
17468: DISABLE
17469: LD_INT 0
17471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17472: LD_ADDR_VAR 0 1
17476: PUSH
17477: LD_INT 22
17479: PUSH
17480: LD_OWVAR 2
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 30
17491: PUSH
17492: LD_INT 29
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PPUSH
17503: CALL_OW 69
17507: ST_TO_ADDR
// if not tmp then
17508: LD_VAR 0 1
17512: NOT
17513: IFFALSE 17517
// exit ;
17515: GO 17530
// DestroyUnit ( tmp [ 1 ] ) ;
17517: LD_VAR 0 1
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: PPUSH
17526: CALL_OW 65
// end ;
17530: PPOPN 1
17532: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17533: LD_EXP 30
17537: IFFALSE 17545
17539: PUSH
17540: LD_EXP 68
17544: AND
17545: IFFALSE 17674
17547: GO 17549
17549: DISABLE
17550: LD_INT 0
17552: PPUSH
// begin uc_side := 0 ;
17553: LD_ADDR_OWVAR 20
17557: PUSH
17558: LD_INT 0
17560: ST_TO_ADDR
// uc_nation := nation_arabian ;
17561: LD_ADDR_OWVAR 21
17565: PUSH
17566: LD_INT 2
17568: ST_TO_ADDR
// hc_gallery :=  ;
17569: LD_ADDR_OWVAR 33
17573: PUSH
17574: LD_STRING 
17576: ST_TO_ADDR
// hc_name :=  ;
17577: LD_ADDR_OWVAR 26
17581: PUSH
17582: LD_STRING 
17584: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17585: LD_INT 1
17587: PPUSH
17588: LD_INT 11
17590: PPUSH
17591: LD_INT 10
17593: PPUSH
17594: CALL_OW 380
// un := CreateHuman ;
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: CALL_OW 44
17607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17620: LD_INT 35
17622: PPUSH
17623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17627: LD_VAR 0 1
17631: PPUSH
17632: LD_INT 22
17634: PUSH
17635: LD_OWVAR 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PPUSH
17644: CALL_OW 69
17648: PPUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 74
17658: PPUSH
17659: CALL_OW 115
// until IsDead ( un ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: CALL_OW 301
17672: IFFALSE 17620
// end ;
17674: PPOPN 1
17676: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17677: LD_EXP 30
17681: IFFALSE 17689
17683: PUSH
17684: LD_EXP 70
17688: AND
17689: IFFALSE 17701
17691: GO 17693
17693: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17694: LD_STRING earthquake(getX(game), 0, 32)
17696: PPUSH
17697: CALL_OW 559
17701: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17702: LD_EXP 30
17706: IFFALSE 17714
17708: PUSH
17709: LD_EXP 71
17713: AND
17714: IFFALSE 17805
17716: GO 17718
17718: DISABLE
17719: LD_INT 0
17721: PPUSH
// begin enable ;
17722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: LD_INT 22
17730: PUSH
17731: LD_OWVAR 2
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 21
17742: PUSH
17743: LD_INT 2
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 33
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL_OW 69
17769: ST_TO_ADDR
// if not tmp then
17770: LD_VAR 0 1
17774: NOT
17775: IFFALSE 17779
// exit ;
17777: GO 17805
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17779: LD_VAR 0 1
17783: PUSH
17784: LD_INT 1
17786: PPUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 12
17796: ARRAY
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 234
// end ;
17805: PPOPN 1
17807: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17808: LD_EXP 30
17812: IFFALSE 17820
17814: PUSH
17815: LD_EXP 72
17819: AND
17820: IFFALSE 17961
17822: GO 17824
17824: DISABLE
17825: LD_INT 0
17827: PPUSH
17828: PPUSH
17829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17830: LD_ADDR_VAR 0 3
17834: PUSH
17835: LD_INT 22
17837: PUSH
17838: LD_OWVAR 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 25
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 3
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 17961
// un := tmp [ rand ( 1 , tmp ) ] ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: LD_VAR 0 3
17884: PUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: CALL_OW 12
17897: ARRAY
17898: ST_TO_ADDR
// if Crawls ( un ) then
17899: LD_VAR 0 2
17903: PPUSH
17904: CALL_OW 318
17908: IFFALSE 17919
// ComWalk ( un ) ;
17910: LD_VAR 0 2
17914: PPUSH
17915: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17919: LD_VAR 0 2
17923: PPUSH
17924: LD_INT 9
17926: PPUSH
17927: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17931: LD_INT 28
17933: PPUSH
17934: LD_OWVAR 2
17938: PPUSH
17939: LD_INT 2
17941: PPUSH
17942: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17946: LD_INT 29
17948: PPUSH
17949: LD_OWVAR 2
17953: PPUSH
17954: LD_INT 2
17956: PPUSH
17957: CALL_OW 322
// end ;
17961: PPOPN 3
17963: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17964: LD_EXP 30
17968: IFFALSE 17976
17970: PUSH
17971: LD_EXP 73
17975: AND
17976: IFFALSE 18087
17978: GO 17980
17980: DISABLE
17981: LD_INT 0
17983: PPUSH
17984: PPUSH
17985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_INT 22
17993: PUSH
17994: LD_OWVAR 2
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PPUSH
18017: CALL_OW 69
18021: ST_TO_ADDR
// if not tmp then
18022: LD_VAR 0 3
18026: NOT
18027: IFFALSE 18031
// exit ;
18029: GO 18087
// un := tmp [ rand ( 1 , tmp ) ] ;
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PPUSH
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 12
18053: ARRAY
18054: ST_TO_ADDR
// if Crawls ( un ) then
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 318
18064: IFFALSE 18075
// ComWalk ( un ) ;
18066: LD_VAR 0 2
18070: PPUSH
18071: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18075: LD_VAR 0 2
18079: PPUSH
18080: LD_INT 8
18082: PPUSH
18083: CALL_OW 336
// end ;
18087: PPOPN 3
18089: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18090: LD_EXP 30
18094: IFFALSE 18102
18096: PUSH
18097: LD_EXP 74
18101: AND
18102: IFFALSE 18246
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_OWVAR 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 21
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: LD_INT 34
18143: PUSH
18144: LD_INT 12
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 34
18153: PUSH
18154: LD_INT 51
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 34
18163: PUSH
18164: LD_INT 32
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: ST_TO_ADDR
// if not tmp then
18187: LD_VAR 0 2
18191: NOT
18192: IFFALSE 18196
// exit ;
18194: GO 18246
// for i in tmp do
18196: LD_ADDR_VAR 0 1
18200: PUSH
18201: LD_VAR 0 2
18205: PUSH
18206: FOR_IN
18207: IFFALSE 18244
// if GetCargo ( i , mat_artifact ) = 0 then
18209: LD_VAR 0 1
18213: PPUSH
18214: LD_INT 4
18216: PPUSH
18217: CALL_OW 289
18221: PUSH
18222: LD_INT 0
18224: EQUAL
18225: IFFALSE 18242
// SetCargo ( i , mat_siberit , 100 ) ;
18227: LD_VAR 0 1
18231: PPUSH
18232: LD_INT 3
18234: PPUSH
18235: LD_INT 100
18237: PPUSH
18238: CALL_OW 290
18242: GO 18206
18244: POP
18245: POP
// end ;
18246: PPOPN 2
18248: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18249: LD_EXP 30
18253: IFFALSE 18261
18255: PUSH
18256: LD_EXP 75
18260: AND
18261: IFFALSE 18444
18263: GO 18265
18265: DISABLE
18266: LD_INT 0
18268: PPUSH
18269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18270: LD_ADDR_VAR 0 2
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_OWVAR 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 69
18291: ST_TO_ADDR
// if not tmp then
18292: LD_VAR 0 2
18296: NOT
18297: IFFALSE 18301
// exit ;
18299: GO 18444
// for i := 1 to 2 do
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: DOUBLE
18307: LD_INT 1
18309: DEC
18310: ST_TO_ADDR
18311: LD_INT 2
18313: PUSH
18314: FOR_TO
18315: IFFALSE 18442
// begin uc_side := your_side ;
18317: LD_ADDR_OWVAR 20
18321: PUSH
18322: LD_OWVAR 2
18326: ST_TO_ADDR
// uc_nation := nation_american ;
18327: LD_ADDR_OWVAR 21
18331: PUSH
18332: LD_INT 1
18334: ST_TO_ADDR
// vc_chassis := us_morphling ;
18335: LD_ADDR_OWVAR 37
18339: PUSH
18340: LD_INT 5
18342: ST_TO_ADDR
// vc_engine := engine_siberite ;
18343: LD_ADDR_OWVAR 39
18347: PUSH
18348: LD_INT 3
18350: ST_TO_ADDR
// vc_control := control_computer ;
18351: LD_ADDR_OWVAR 38
18355: PUSH
18356: LD_INT 3
18358: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18359: LD_ADDR_OWVAR 40
18363: PUSH
18364: LD_INT 10
18366: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18367: LD_VAR 0 2
18371: PUSH
18372: LD_INT 1
18374: ARRAY
18375: PPUSH
18376: CALL_OW 310
18380: NOT
18381: IFFALSE 18428
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18383: CALL_OW 45
18387: PPUSH
18388: LD_VAR 0 2
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: PPUSH
18397: CALL_OW 250
18401: PPUSH
18402: LD_VAR 0 2
18406: PUSH
18407: LD_INT 1
18409: ARRAY
18410: PPUSH
18411: CALL_OW 251
18415: PPUSH
18416: LD_INT 12
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 50
18426: GO 18440
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18428: CALL_OW 45
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 51
// end ;
18440: GO 18314
18442: POP
18443: POP
// end ;
18444: PPOPN 2
18446: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18447: LD_EXP 30
18451: IFFALSE 18459
18453: PUSH
18454: LD_EXP 76
18458: AND
18459: IFFALSE 18681
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18472: LD_ADDR_VAR 0 6
18476: PUSH
18477: LD_INT 22
18479: PUSH
18480: LD_OWVAR 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 21
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 3
18501: PUSH
18502: LD_INT 23
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: ST_TO_ADDR
// if not tmp then
18526: LD_VAR 0 6
18530: NOT
18531: IFFALSE 18535
// exit ;
18533: GO 18681
// s1 := rand ( 1 , 4 ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 1
18542: PPUSH
18543: LD_INT 4
18545: PPUSH
18546: CALL_OW 12
18550: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18551: LD_ADDR_VAR 0 4
18555: PUSH
18556: LD_VAR 0 6
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 259
18574: ST_TO_ADDR
// if s1 = 1 then
18575: LD_VAR 0 2
18579: PUSH
18580: LD_INT 1
18582: EQUAL
18583: IFFALSE 18603
// s2 := rand ( 2 , 4 ) else
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_INT 2
18592: PPUSH
18593: LD_INT 4
18595: PPUSH
18596: CALL_OW 12
18600: ST_TO_ADDR
18601: GO 18611
// s2 := 1 ;
18603: LD_ADDR_VAR 0 3
18607: PUSH
18608: LD_INT 1
18610: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18611: LD_ADDR_VAR 0 5
18615: PUSH
18616: LD_VAR 0 6
18620: PUSH
18621: LD_INT 1
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 3
18629: PPUSH
18630: CALL_OW 259
18634: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18635: LD_VAR 0 6
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_VAR 0 5
18653: PPUSH
18654: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18658: LD_VAR 0 6
18662: PUSH
18663: LD_INT 1
18665: ARRAY
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_VAR 0 4
18676: PPUSH
18677: CALL_OW 237
// end ;
18681: PPOPN 6
18683: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18684: LD_EXP 30
18688: IFFALSE 18696
18690: PUSH
18691: LD_EXP 77
18695: AND
18696: IFFALSE 18775
18698: GO 18700
18700: DISABLE
18701: LD_INT 0
18703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18704: LD_ADDR_VAR 0 1
18708: PUSH
18709: LD_INT 22
18711: PUSH
18712: LD_OWVAR 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 30
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PPUSH
18735: CALL_OW 69
18739: ST_TO_ADDR
// if not tmp then
18740: LD_VAR 0 1
18744: NOT
18745: IFFALSE 18749
// exit ;
18747: GO 18775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 12
18766: ARRAY
18767: PPUSH
18768: LD_INT 1
18770: PPUSH
18771: CALL_OW 234
// end ;
18775: PPOPN 1
18777: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18778: LD_EXP 30
18782: IFFALSE 18790
18784: PUSH
18785: LD_EXP 78
18789: AND
18790: IFFALSE 18902
18792: GO 18794
18794: DISABLE
18795: LD_INT 0
18797: PPUSH
18798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18799: LD_ADDR_VAR 0 2
18803: PUSH
18804: LD_INT 22
18806: PUSH
18807: LD_OWVAR 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: LD_INT 27
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 30
18831: PUSH
18832: LD_INT 26
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: LD_INT 28
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PPUSH
18859: CALL_OW 69
18863: ST_TO_ADDR
// if not tmp then
18864: LD_VAR 0 2
18868: NOT
18869: IFFALSE 18873
// exit ;
18871: GO 18902
// for i in tmp do
18873: LD_ADDR_VAR 0 1
18877: PUSH
18878: LD_VAR 0 2
18882: PUSH
18883: FOR_IN
18884: IFFALSE 18900
// SetLives ( i , 1 ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 234
18898: GO 18883
18900: POP
18901: POP
// end ;
18902: PPOPN 2
18904: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18905: LD_EXP 30
18909: IFFALSE 18917
18911: PUSH
18912: LD_EXP 79
18916: AND
18917: IFFALSE 19204
18919: GO 18921
18921: DISABLE
18922: LD_INT 0
18924: PPUSH
18925: PPUSH
18926: PPUSH
// begin i := rand ( 1 , 7 ) ;
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_INT 1
18934: PPUSH
18935: LD_INT 7
18937: PPUSH
18938: CALL_OW 12
18942: ST_TO_ADDR
// case i of 1 :
18943: LD_VAR 0 1
18947: PUSH
18948: LD_INT 1
18950: DOUBLE
18951: EQUAL
18952: IFTRUE 18956
18954: GO 18966
18956: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18957: LD_STRING earthquake(getX(game), 0, 32)
18959: PPUSH
18960: CALL_OW 559
18964: GO 19204
18966: LD_INT 2
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 18988
18974: POP
// begin ToLua ( displayStucuk(); ) ;
18975: LD_STRING displayStucuk();
18977: PPUSH
18978: CALL_OW 559
// ResetFog ;
18982: CALL_OW 335
// end ; 3 :
18986: GO 19204
18988: LD_INT 3
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19100
18996: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18997: LD_ADDR_VAR 0 2
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 25
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: CALL_OW 69
19032: ST_TO_ADDR
// if not tmp then
19033: LD_VAR 0 2
19037: NOT
19038: IFFALSE 19042
// exit ;
19040: GO 19204
// un := tmp [ rand ( 1 , tmp ) ] ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_VAR 0 2
19051: PUSH
19052: LD_INT 1
19054: PPUSH
19055: LD_VAR 0 2
19059: PPUSH
19060: CALL_OW 12
19064: ARRAY
19065: ST_TO_ADDR
// if Crawls ( un ) then
19066: LD_VAR 0 3
19070: PPUSH
19071: CALL_OW 318
19075: IFFALSE 19086
// ComWalk ( un ) ;
19077: LD_VAR 0 3
19081: PPUSH
19082: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19086: LD_VAR 0 3
19090: PPUSH
19091: LD_INT 8
19093: PPUSH
19094: CALL_OW 336
// end ; 4 :
19098: GO 19204
19100: LD_INT 4
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19182
19108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: LD_INT 22
19116: PUSH
19117: LD_OWVAR 2
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 30
19128: PUSH
19129: LD_INT 29
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 69
19144: ST_TO_ADDR
// if not tmp then
19145: LD_VAR 0 2
19149: NOT
19150: IFFALSE 19154
// exit ;
19152: GO 19204
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19154: LD_VAR 0 2
19158: PUSH
19159: LD_INT 1
19161: ARRAY
19162: PPUSH
19163: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19167: LD_VAR 0 2
19171: PUSH
19172: LD_INT 1
19174: ARRAY
19175: PPUSH
19176: CALL_OW 65
// end ; 5 .. 7 :
19180: GO 19204
19182: LD_INT 5
19184: DOUBLE
19185: GREATEREQUAL
19186: IFFALSE 19194
19188: LD_INT 7
19190: DOUBLE
19191: LESSEQUAL
19192: IFTRUE 19196
19194: GO 19203
19196: POP
// StreamSibBomb ; end ;
19197: CALL 15385 0 0
19201: GO 19204
19203: POP
// end ;
19204: PPOPN 3
19206: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19207: LD_EXP 30
19211: IFFALSE 19219
19213: PUSH
19214: LD_EXP 80
19218: AND
19219: IFFALSE 19375
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
19228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: LD_INT 81
19236: PUSH
19237: LD_OWVAR 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ST_TO_ADDR
// if not tmp then
19283: LD_VAR 0 2
19287: NOT
19288: IFFALSE 19292
// exit ;
19290: GO 19375
// p := 0 ;
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19300: LD_INT 35
19302: PPUSH
19303: CALL_OW 67
// p := p + 1 ;
19307: LD_ADDR_VAR 0 3
19311: PUSH
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: PLUS
19320: ST_TO_ADDR
// for i in tmp do
19321: LD_ADDR_VAR 0 1
19325: PUSH
19326: LD_VAR 0 2
19330: PUSH
19331: FOR_IN
19332: IFFALSE 19363
// if GetLives ( i ) < 1000 then
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL_OW 256
19343: PUSH
19344: LD_INT 1000
19346: LESS
19347: IFFALSE 19361
// SetLives ( i , 1000 ) ;
19349: LD_VAR 0 1
19353: PPUSH
19354: LD_INT 1000
19356: PPUSH
19357: CALL_OW 234
19361: GO 19331
19363: POP
19364: POP
// until p > 20 ;
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 20
19372: GREATER
19373: IFFALSE 19300
// end ;
19375: PPOPN 3
19377: END
// every 0 0$1 trigger StreamModeActive and sTime do
19378: LD_EXP 30
19382: IFFALSE 19390
19384: PUSH
19385: LD_EXP 81
19389: AND
19390: IFFALSE 19425
19392: GO 19394
19394: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19395: LD_INT 28
19397: PPUSH
19398: LD_OWVAR 2
19402: PPUSH
19403: LD_INT 2
19405: PPUSH
19406: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19410: LD_INT 30
19412: PPUSH
19413: LD_OWVAR 2
19417: PPUSH
19418: LD_INT 2
19420: PPUSH
19421: CALL_OW 322
// end ;
19425: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19426: LD_EXP 30
19430: IFFALSE 19438
19432: PUSH
19433: LD_EXP 82
19437: AND
19438: IFFALSE 19559
19440: GO 19442
19442: DISABLE
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19447: LD_ADDR_VAR 0 2
19451: PUSH
19452: LD_INT 22
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: LD_INT 23
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 69
19500: ST_TO_ADDR
// if not tmp then
19501: LD_VAR 0 2
19505: NOT
19506: IFFALSE 19510
// exit ;
19508: GO 19559
// for i in tmp do
19510: LD_ADDR_VAR 0 1
19514: PUSH
19515: LD_VAR 0 2
19519: PUSH
19520: FOR_IN
19521: IFFALSE 19557
// begin if Crawls ( i ) then
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 318
19532: IFFALSE 19543
// ComWalk ( i ) ;
19534: LD_VAR 0 1
19538: PPUSH
19539: CALL_OW 138
// SetClass ( i , 2 ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 2
19550: PPUSH
19551: CALL_OW 336
// end ;
19555: GO 19520
19557: POP
19558: POP
// end ;
19559: PPOPN 2
19561: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19562: LD_EXP 30
19566: IFFALSE 19574
19568: PUSH
19569: LD_EXP 83
19573: AND
19574: IFFALSE 19864
19576: GO 19578
19578: DISABLE
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19584: LD_OWVAR 2
19588: PPUSH
19589: LD_INT 9
19591: PPUSH
19592: LD_INT 1
19594: PPUSH
19595: LD_INT 1
19597: PPUSH
19598: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19602: LD_INT 9
19604: PPUSH
19605: LD_OWVAR 2
19609: PPUSH
19610: CALL_OW 343
// uc_side := 9 ;
19614: LD_ADDR_OWVAR 20
19618: PUSH
19619: LD_INT 9
19621: ST_TO_ADDR
// uc_nation := 2 ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 2
19629: ST_TO_ADDR
// hc_name := Dark Warrior ;
19630: LD_ADDR_OWVAR 26
19634: PUSH
19635: LD_STRING Dark Warrior
19637: ST_TO_ADDR
// hc_gallery :=  ;
19638: LD_ADDR_OWVAR 33
19642: PUSH
19643: LD_STRING 
19645: ST_TO_ADDR
// hc_noskilllimit := true ;
19646: LD_ADDR_OWVAR 76
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19654: LD_ADDR_OWVAR 31
19658: PUSH
19659: LD_INT 30
19661: PUSH
19662: LD_INT 30
19664: PUSH
19665: LD_INT 30
19667: PUSH
19668: LD_INT 30
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
// un := CreateHuman ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: CALL_OW 44
19686: ST_TO_ADDR
// hc_noskilllimit := false ;
19687: LD_ADDR_OWVAR 76
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 51
// ToLua ( playRanger() ) ;
19707: LD_STRING playRanger()
19709: PPUSH
19710: CALL_OW 559
// p := 0 ;
19714: LD_ADDR_VAR 0 2
19718: PUSH
19719: LD_INT 0
19721: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19722: LD_INT 35
19724: PPUSH
19725: CALL_OW 67
// p := p + 1 ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 2
19738: PUSH
19739: LD_INT 1
19741: PLUS
19742: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 256
19752: PUSH
19753: LD_INT 1000
19755: LESS
19756: IFFALSE 19770
// SetLives ( un , 1000 ) ;
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_INT 1000
19765: PPUSH
19766: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_INT 81
19777: PUSH
19778: LD_OWVAR 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 91
19789: PUSH
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 30
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: PPUSH
19812: LD_VAR 0 3
19816: PPUSH
19817: CALL_OW 74
19821: PPUSH
19822: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19826: LD_VAR 0 2
19830: PUSH
19831: LD_INT 80
19833: GREATER
19834: IFTRUE 19847
19836: PUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: CALL_OW 301
19846: OR
19847: IFFALSE 19722
// if un then
19849: LD_VAR 0 3
19853: IFFALSE 19864
// RemoveUnit ( un ) ;
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 64
// end ;
19864: PPOPN 3
19866: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19867: LD_EXP 84
19871: IFFALSE 19987
19873: GO 19875
19875: DISABLE
19876: LD_INT 0
19878: PPUSH
19879: PPUSH
19880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_INT 81
19888: PUSH
19889: LD_OWVAR 2
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 21
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 69
19916: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19917: LD_STRING playComputer()
19919: PPUSH
19920: CALL_OW 559
// if not tmp then
19924: LD_VAR 0 2
19928: NOT
19929: IFFALSE 19933
// exit ;
19931: GO 19987
// for i in tmp do
19933: LD_ADDR_VAR 0 1
19937: PUSH
19938: LD_VAR 0 2
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19985
// for j := 1 to 4 do
19946: LD_ADDR_VAR 0 3
19950: PUSH
19951: DOUBLE
19952: LD_INT 1
19954: DEC
19955: ST_TO_ADDR
19956: LD_INT 4
19958: PUSH
19959: FOR_TO
19960: IFFALSE 19981
// SetSkill ( i , j , 10 ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_VAR 0 3
19971: PPUSH
19972: LD_INT 10
19974: PPUSH
19975: CALL_OW 237
19979: GO 19959
19981: POP
19982: POP
19983: GO 19943
19985: POP
19986: POP
// end ;
19987: PPOPN 3
19989: END
// every 0 0$1 trigger s30 do var i , tmp ;
19990: LD_EXP 85
19994: IFFALSE 20063
19996: GO 19998
19998: DISABLE
19999: LD_INT 0
20001: PPUSH
20002: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20003: LD_ADDR_VAR 0 2
20007: PUSH
20008: LD_INT 22
20010: PUSH
20011: LD_OWVAR 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: ST_TO_ADDR
// if not tmp then
20025: LD_VAR 0 2
20029: NOT
20030: IFFALSE 20034
// exit ;
20032: GO 20063
// for i in tmp do
20034: LD_ADDR_VAR 0 1
20038: PUSH
20039: LD_VAR 0 2
20043: PUSH
20044: FOR_IN
20045: IFFALSE 20061
// SetLives ( i , 300 ) ;
20047: LD_VAR 0 1
20051: PPUSH
20052: LD_INT 300
20054: PPUSH
20055: CALL_OW 234
20059: GO 20044
20061: POP
20062: POP
// end ;
20063: PPOPN 2
20065: END
// every 0 0$1 trigger s60 do var i , tmp ;
20066: LD_EXP 86
20070: IFFALSE 20139
20072: GO 20074
20074: DISABLE
20075: LD_INT 0
20077: PPUSH
20078: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_OWVAR 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: ST_TO_ADDR
// if not tmp then
20101: LD_VAR 0 2
20105: NOT
20106: IFFALSE 20110
// exit ;
20108: GO 20139
// for i in tmp do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_VAR 0 2
20119: PUSH
20120: FOR_IN
20121: IFFALSE 20137
// SetLives ( i , 600 ) ;
20123: LD_VAR 0 1
20127: PPUSH
20128: LD_INT 600
20130: PPUSH
20131: CALL_OW 234
20135: GO 20120
20137: POP
20138: POP
// end ;
20139: PPOPN 2
20141: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20142: LD_INT 0
20144: PPUSH
// case cmd of 301 :
20145: LD_VAR 0 1
20149: PUSH
20150: LD_INT 301
20152: DOUBLE
20153: EQUAL
20154: IFTRUE 20158
20156: GO 20190
20158: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20159: LD_VAR 0 6
20163: PPUSH
20164: LD_VAR 0 7
20168: PPUSH
20169: LD_VAR 0 8
20173: PPUSH
20174: LD_VAR 0 4
20178: PPUSH
20179: LD_VAR 0 5
20183: PPUSH
20184: CALL 21403 0 5
20188: GO 20311
20190: LD_INT 302
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20235
20198: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20199: LD_VAR 0 6
20203: PPUSH
20204: LD_VAR 0 7
20208: PPUSH
20209: LD_VAR 0 8
20213: PPUSH
20214: LD_VAR 0 9
20218: PPUSH
20219: LD_VAR 0 4
20223: PPUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: CALL 21494 0 6
20233: GO 20311
20235: LD_INT 303
20237: DOUBLE
20238: EQUAL
20239: IFTRUE 20243
20241: GO 20280
20243: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20244: LD_VAR 0 6
20248: PPUSH
20249: LD_VAR 0 7
20253: PPUSH
20254: LD_VAR 0 8
20258: PPUSH
20259: LD_VAR 0 9
20263: PPUSH
20264: LD_VAR 0 4
20268: PPUSH
20269: LD_VAR 0 5
20273: PPUSH
20274: CALL 20316 0 6
20278: GO 20311
20280: LD_INT 304
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20310
20288: POP
// hHackTeleport ( unit , x , y ) ; end ;
20289: LD_VAR 0 2
20293: PPUSH
20294: LD_VAR 0 4
20298: PPUSH
20299: LD_VAR 0 5
20303: PPUSH
20304: CALL 22087 0 3
20308: GO 20311
20310: POP
// end ;
20311: LD_VAR 0 12
20315: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20316: LD_INT 0
20318: PPUSH
20319: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20320: LD_VAR 0 1
20324: PUSH
20325: LD_INT 1
20327: LESS
20328: IFTRUE 20340
20330: PUSH
20331: LD_VAR 0 1
20335: PUSH
20336: LD_INT 3
20338: GREATER
20339: OR
20340: IFTRUE 20358
20342: PUSH
20343: LD_VAR 0 5
20347: PPUSH
20348: LD_VAR 0 6
20352: PPUSH
20353: CALL_OW 428
20357: OR
20358: IFFALSE 20362
// exit ;
20360: GO 21090
// uc_side := your_side ;
20362: LD_ADDR_OWVAR 20
20366: PUSH
20367: LD_OWVAR 2
20371: ST_TO_ADDR
// uc_nation := nation ;
20372: LD_ADDR_OWVAR 21
20376: PUSH
20377: LD_VAR 0 1
20381: ST_TO_ADDR
// bc_level = 1 ;
20382: LD_ADDR_OWVAR 43
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// case btype of 1 :
20390: LD_VAR 0 2
20394: PUSH
20395: LD_INT 1
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20414
20403: POP
// bc_type := b_depot ; 2 :
20404: LD_ADDR_OWVAR 42
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
20412: GO 21034
20414: LD_INT 2
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20433
20422: POP
// bc_type := b_warehouse ; 3 :
20423: LD_ADDR_OWVAR 42
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
20431: GO 21034
20433: LD_INT 3
20435: DOUBLE
20436: EQUAL
20437: IFTRUE 20441
20439: GO 20452
20441: POP
// bc_type := b_lab ; 4 .. 9 :
20442: LD_ADDR_OWVAR 42
20446: PUSH
20447: LD_INT 6
20449: ST_TO_ADDR
20450: GO 21034
20452: LD_INT 4
20454: DOUBLE
20455: GREATEREQUAL
20456: IFFALSE 20464
20458: LD_INT 9
20460: DOUBLE
20461: LESSEQUAL
20462: IFTRUE 20466
20464: GO 20526
20466: POP
// begin bc_type := b_lab_half ;
20467: LD_ADDR_OWVAR 42
20471: PUSH
20472: LD_INT 7
20474: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20475: LD_ADDR_OWVAR 44
20479: PUSH
20480: LD_INT 10
20482: PUSH
20483: LD_INT 11
20485: PUSH
20486: LD_INT 12
20488: PUSH
20489: LD_INT 15
20491: PUSH
20492: LD_INT 14
20494: PUSH
20495: LD_INT 13
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: LD_VAR 0 2
20510: PUSH
20511: LD_INT 3
20513: MINUS
20514: ARRAY
20515: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20516: LD_ADDR_OWVAR 45
20520: PUSH
20521: LD_INT 9
20523: ST_TO_ADDR
// end ; 10 .. 13 :
20524: GO 21034
20526: LD_INT 10
20528: DOUBLE
20529: GREATEREQUAL
20530: IFFALSE 20538
20532: LD_INT 13
20534: DOUBLE
20535: LESSEQUAL
20536: IFTRUE 20540
20538: GO 20617
20540: POP
// begin bc_type := b_lab_full ;
20541: LD_ADDR_OWVAR 42
20545: PUSH
20546: LD_INT 8
20548: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20549: LD_ADDR_OWVAR 44
20553: PUSH
20554: LD_INT 10
20556: PUSH
20557: LD_INT 12
20559: PUSH
20560: LD_INT 14
20562: PUSH
20563: LD_INT 13
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: PUSH
20572: LD_VAR 0 2
20576: PUSH
20577: LD_INT 9
20579: MINUS
20580: ARRAY
20581: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20582: LD_ADDR_OWVAR 45
20586: PUSH
20587: LD_INT 11
20589: PUSH
20590: LD_INT 15
20592: PUSH
20593: LD_INT 12
20595: PUSH
20596: LD_INT 15
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: PUSH
20605: LD_VAR 0 2
20609: PUSH
20610: LD_INT 9
20612: MINUS
20613: ARRAY
20614: ST_TO_ADDR
// end ; 14 :
20615: GO 21034
20617: LD_INT 14
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20636
20625: POP
// bc_type := b_workshop ; 15 :
20626: LD_ADDR_OWVAR 42
20630: PUSH
20631: LD_INT 2
20633: ST_TO_ADDR
20634: GO 21034
20636: LD_INT 15
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20655
20644: POP
// bc_type := b_factory ; 16 :
20645: LD_ADDR_OWVAR 42
20649: PUSH
20650: LD_INT 3
20652: ST_TO_ADDR
20653: GO 21034
20655: LD_INT 16
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20674
20663: POP
// bc_type := b_ext_gun ; 17 :
20664: LD_ADDR_OWVAR 42
20668: PUSH
20669: LD_INT 17
20671: ST_TO_ADDR
20672: GO 21034
20674: LD_INT 17
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20710
20682: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20683: LD_ADDR_OWVAR 42
20687: PUSH
20688: LD_INT 19
20690: PUSH
20691: LD_INT 23
20693: PUSH
20694: LD_INT 19
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: LD_VAR 0 1
20706: ARRAY
20707: ST_TO_ADDR
20708: GO 21034
20710: LD_INT 18
20712: DOUBLE
20713: EQUAL
20714: IFTRUE 20718
20716: GO 20729
20718: POP
// bc_type := b_ext_radar ; 19 :
20719: LD_ADDR_OWVAR 42
20723: PUSH
20724: LD_INT 20
20726: ST_TO_ADDR
20727: GO 21034
20729: LD_INT 19
20731: DOUBLE
20732: EQUAL
20733: IFTRUE 20737
20735: GO 20748
20737: POP
// bc_type := b_ext_radio ; 20 :
20738: LD_ADDR_OWVAR 42
20742: PUSH
20743: LD_INT 22
20745: ST_TO_ADDR
20746: GO 21034
20748: LD_INT 20
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20767
20756: POP
// bc_type := b_ext_siberium ; 21 :
20757: LD_ADDR_OWVAR 42
20761: PUSH
20762: LD_INT 21
20764: ST_TO_ADDR
20765: GO 21034
20767: LD_INT 21
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20786
20775: POP
// bc_type := b_ext_computer ; 22 :
20776: LD_ADDR_OWVAR 42
20780: PUSH
20781: LD_INT 24
20783: ST_TO_ADDR
20784: GO 21034
20786: LD_INT 22
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20805
20794: POP
// bc_type := b_ext_track ; 23 :
20795: LD_ADDR_OWVAR 42
20799: PUSH
20800: LD_INT 16
20802: ST_TO_ADDR
20803: GO 21034
20805: LD_INT 23
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20824
20813: POP
// bc_type := b_ext_laser ; 24 :
20814: LD_ADDR_OWVAR 42
20818: PUSH
20819: LD_INT 25
20821: ST_TO_ADDR
20822: GO 21034
20824: LD_INT 24
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20843
20832: POP
// bc_type := b_control_tower ; 25 :
20833: LD_ADDR_OWVAR 42
20837: PUSH
20838: LD_INT 36
20840: ST_TO_ADDR
20841: GO 21034
20843: LD_INT 25
20845: DOUBLE
20846: EQUAL
20847: IFTRUE 20851
20849: GO 20862
20851: POP
// bc_type := b_breastwork ; 26 :
20852: LD_ADDR_OWVAR 42
20856: PUSH
20857: LD_INT 31
20859: ST_TO_ADDR
20860: GO 21034
20862: LD_INT 26
20864: DOUBLE
20865: EQUAL
20866: IFTRUE 20870
20868: GO 20881
20870: POP
// bc_type := b_bunker ; 27 :
20871: LD_ADDR_OWVAR 42
20875: PUSH
20876: LD_INT 32
20878: ST_TO_ADDR
20879: GO 21034
20881: LD_INT 27
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 20900
20889: POP
// bc_type := b_turret ; 28 :
20890: LD_ADDR_OWVAR 42
20894: PUSH
20895: LD_INT 33
20897: ST_TO_ADDR
20898: GO 21034
20900: LD_INT 28
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20919
20908: POP
// bc_type := b_armoury ; 29 :
20909: LD_ADDR_OWVAR 42
20913: PUSH
20914: LD_INT 4
20916: ST_TO_ADDR
20917: GO 21034
20919: LD_INT 29
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20938
20927: POP
// bc_type := b_barracks ; 30 :
20928: LD_ADDR_OWVAR 42
20932: PUSH
20933: LD_INT 5
20935: ST_TO_ADDR
20936: GO 21034
20938: LD_INT 30
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 20957
20946: POP
// bc_type := b_solar_power ; 31 :
20947: LD_ADDR_OWVAR 42
20951: PUSH
20952: LD_INT 27
20954: ST_TO_ADDR
20955: GO 21034
20957: LD_INT 31
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20976
20965: POP
// bc_type := b_oil_power ; 32 :
20966: LD_ADDR_OWVAR 42
20970: PUSH
20971: LD_INT 26
20973: ST_TO_ADDR
20974: GO 21034
20976: LD_INT 32
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 20995
20984: POP
// bc_type := b_siberite_power ; 33 :
20985: LD_ADDR_OWVAR 42
20989: PUSH
20990: LD_INT 28
20992: ST_TO_ADDR
20993: GO 21034
20995: LD_INT 33
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21014
21003: POP
// bc_type := b_oil_mine ; 34 :
21004: LD_ADDR_OWVAR 42
21008: PUSH
21009: LD_INT 29
21011: ST_TO_ADDR
21012: GO 21034
21014: LD_INT 34
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21033
21022: POP
// bc_type := b_siberite_mine ; end ;
21023: LD_ADDR_OWVAR 42
21027: PUSH
21028: LD_INT 30
21030: ST_TO_ADDR
21031: GO 21034
21033: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21034: LD_ADDR_VAR 0 8
21038: PUSH
21039: LD_VAR 0 5
21043: PPUSH
21044: LD_VAR 0 6
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: CALL_OW 47
21058: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21059: LD_OWVAR 42
21063: PUSH
21064: LD_INT 32
21066: PUSH
21067: LD_INT 33
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: IN
21074: IFFALSE 21090
// PlaceWeaponTurret ( b , weapon ) ;
21076: LD_VAR 0 8
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: CALL_OW 431
// end ;
21090: LD_VAR 0 7
21094: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21101: LD_ADDR_VAR 0 4
21105: PUSH
21106: LD_INT 22
21108: PUSH
21109: LD_OWVAR 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 30
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 30
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 69
21154: ST_TO_ADDR
// if not tmp then
21155: LD_VAR 0 4
21159: NOT
21160: IFFALSE 21164
// exit ;
21162: GO 21223
// for i in tmp do
21164: LD_ADDR_VAR 0 2
21168: PUSH
21169: LD_VAR 0 4
21173: PUSH
21174: FOR_IN
21175: IFFALSE 21221
// for j = 1 to 3 do
21177: LD_ADDR_VAR 0 3
21181: PUSH
21182: DOUBLE
21183: LD_INT 1
21185: DEC
21186: ST_TO_ADDR
21187: LD_INT 3
21189: PUSH
21190: FOR_TO
21191: IFFALSE 21217
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21193: LD_VAR 0 2
21197: PPUSH
21198: CALL_OW 274
21202: PPUSH
21203: LD_VAR 0 3
21207: PPUSH
21208: LD_INT 99999
21210: PPUSH
21211: CALL_OW 277
21215: GO 21190
21217: POP
21218: POP
21219: GO 21174
21221: POP
21222: POP
// end ;
21223: LD_VAR 0 1
21227: RET
// export function hHackSetLevel10 ; var i , j ; begin
21228: LD_INT 0
21230: PPUSH
21231: PPUSH
21232: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_INT 21
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: PUSH
21253: FOR_IN
21254: IFFALSE 21306
// if IsSelected ( i ) then
21256: LD_VAR 0 2
21260: PPUSH
21261: CALL_OW 306
21265: IFFALSE 21304
// begin for j := 1 to 4 do
21267: LD_ADDR_VAR 0 3
21271: PUSH
21272: DOUBLE
21273: LD_INT 1
21275: DEC
21276: ST_TO_ADDR
21277: LD_INT 4
21279: PUSH
21280: FOR_TO
21281: IFFALSE 21302
// SetSkill ( i , j , 10 ) ;
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_INT 10
21295: PPUSH
21296: CALL_OW 237
21300: GO 21280
21302: POP
21303: POP
// end ;
21304: GO 21253
21306: POP
21307: POP
// end ;
21308: LD_VAR 0 1
21312: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21396
// begin for j := 1 to 4 do
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: DOUBLE
21363: LD_INT 1
21365: DEC
21366: ST_TO_ADDR
21367: LD_INT 4
21369: PUSH
21370: FOR_TO
21371: IFFALSE 21392
// SetSkill ( i , j , 10 ) ;
21373: LD_VAR 0 2
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 10
21385: PPUSH
21386: CALL_OW 237
21390: GO 21370
21392: POP
21393: POP
// end ;
21394: GO 21354
21396: POP
21397: POP
// end ;
21398: LD_VAR 0 1
21402: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21403: LD_INT 0
21405: PPUSH
// uc_side := your_side ;
21406: LD_ADDR_OWVAR 20
21410: PUSH
21411: LD_OWVAR 2
21415: ST_TO_ADDR
// uc_nation := nation ;
21416: LD_ADDR_OWVAR 21
21420: PUSH
21421: LD_VAR 0 1
21425: ST_TO_ADDR
// InitHc ;
21426: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21430: LD_INT 0
21432: PPUSH
21433: LD_VAR 0 2
21437: PPUSH
21438: LD_VAR 0 3
21442: PPUSH
21443: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21447: LD_VAR 0 4
21451: PPUSH
21452: LD_VAR 0 5
21456: PPUSH
21457: CALL_OW 428
21461: PUSH
21462: LD_INT 0
21464: EQUAL
21465: IFFALSE 21489
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21467: CALL_OW 44
21471: PPUSH
21472: LD_VAR 0 4
21476: PPUSH
21477: LD_VAR 0 5
21481: PPUSH
21482: LD_INT 1
21484: PPUSH
21485: CALL_OW 48
// end ;
21489: LD_VAR 0 6
21493: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21494: LD_INT 0
21496: PPUSH
21497: PPUSH
// uc_side := your_side ;
21498: LD_ADDR_OWVAR 20
21502: PUSH
21503: LD_OWVAR 2
21507: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21508: LD_VAR 0 1
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: LD_INT 3
21521: PUSH
21522: LD_INT 4
21524: PUSH
21525: LD_INT 5
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: IN
21535: IFFALSE 21547
// uc_nation := nation_american else
21537: LD_ADDR_OWVAR 21
21541: PUSH
21542: LD_INT 1
21544: ST_TO_ADDR
21545: GO 21590
// if chassis in [ 11 , 12 , 13 , 14 ] then
21547: LD_VAR 0 1
21551: PUSH
21552: LD_INT 11
21554: PUSH
21555: LD_INT 12
21557: PUSH
21558: LD_INT 13
21560: PUSH
21561: LD_INT 14
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: IN
21570: IFFALSE 21582
// uc_nation := nation_arabian else
21572: LD_ADDR_OWVAR 21
21576: PUSH
21577: LD_INT 2
21579: ST_TO_ADDR
21580: GO 21590
// uc_nation := nation_russian ;
21582: LD_ADDR_OWVAR 21
21586: PUSH
21587: LD_INT 3
21589: ST_TO_ADDR
// vc_chassis := chassis ;
21590: LD_ADDR_OWVAR 37
21594: PUSH
21595: LD_VAR 0 1
21599: ST_TO_ADDR
// vc_engine := engine ;
21600: LD_ADDR_OWVAR 39
21604: PUSH
21605: LD_VAR 0 2
21609: ST_TO_ADDR
// vc_control := control ;
21610: LD_ADDR_OWVAR 38
21614: PUSH
21615: LD_VAR 0 3
21619: ST_TO_ADDR
// vc_weapon := weapon ;
21620: LD_ADDR_OWVAR 40
21624: PUSH
21625: LD_VAR 0 4
21629: ST_TO_ADDR
// un := CreateVehicle ;
21630: LD_ADDR_VAR 0 8
21634: PUSH
21635: CALL_OW 45
21639: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21640: LD_VAR 0 8
21644: PPUSH
21645: LD_INT 0
21647: PPUSH
21648: LD_INT 5
21650: PPUSH
21651: CALL_OW 12
21655: PPUSH
21656: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21660: LD_VAR 0 8
21664: PPUSH
21665: LD_VAR 0 5
21669: PPUSH
21670: LD_VAR 0 6
21674: PPUSH
21675: LD_INT 1
21677: PPUSH
21678: CALL_OW 48
// end ;
21682: LD_VAR 0 7
21686: RET
// export hInvincible ; every 1 do
21687: GO 21689
21689: DISABLE
// hInvincible := [ ] ;
21690: LD_ADDR_EXP 87
21694: PUSH
21695: EMPTY
21696: ST_TO_ADDR
21697: END
// every 10 do var i ;
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
// begin enable ;
21704: ENABLE
// if not hInvincible then
21705: LD_EXP 87
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21758
// for i in hInvincible do
21714: LD_ADDR_VAR 0 1
21718: PUSH
21719: LD_EXP 87
21723: PUSH
21724: FOR_IN
21725: IFFALSE 21756
// if GetLives ( i ) < 1000 then
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 256
21736: PUSH
21737: LD_INT 1000
21739: LESS
21740: IFFALSE 21754
// SetLives ( i , 1000 ) ;
21742: LD_VAR 0 1
21746: PPUSH
21747: LD_INT 1000
21749: PPUSH
21750: CALL_OW 234
21754: GO 21724
21756: POP
21757: POP
// end ;
21758: PPOPN 1
21760: END
// export function hHackInvincible ; var i ; begin
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 21
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 21
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 69
21802: PUSH
21803: FOR_IN
21804: IFFALSE 21865
// if IsSelected ( i ) then
21806: LD_VAR 0 2
21810: PPUSH
21811: CALL_OW 306
21815: IFFALSE 21863
// begin if i in hInvincible then
21817: LD_VAR 0 2
21821: PUSH
21822: LD_EXP 87
21826: IN
21827: IFFALSE 21847
// hInvincible := hInvincible diff i else
21829: LD_ADDR_EXP 87
21833: PUSH
21834: LD_EXP 87
21838: PUSH
21839: LD_VAR 0 2
21843: DIFF
21844: ST_TO_ADDR
21845: GO 21863
// hInvincible := hInvincible union i ;
21847: LD_ADDR_EXP 87
21851: PUSH
21852: LD_EXP 87
21856: PUSH
21857: LD_VAR 0 2
21861: UNION
21862: ST_TO_ADDR
// end ;
21863: GO 21803
21865: POP
21866: POP
// end ;
21867: LD_VAR 0 1
21871: RET
// export function hHackInvisible ; var i , j ; begin
21872: LD_INT 0
21874: PPUSH
21875: PPUSH
21876: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: LD_INT 21
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PPUSH
21892: CALL_OW 69
21896: PUSH
21897: FOR_IN
21898: IFFALSE 21922
// if IsSelected ( i ) then
21900: LD_VAR 0 2
21904: PPUSH
21905: CALL_OW 306
21909: IFFALSE 21920
// ComForceInvisible ( i ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: CALL_OW 496
21920: GO 21897
21922: POP
21923: POP
// end ;
21924: LD_VAR 0 1
21928: RET
// export function hHackChangeYourSide ; begin
21929: LD_INT 0
21931: PPUSH
// if your_side = 8 then
21932: LD_OWVAR 2
21936: PUSH
21937: LD_INT 8
21939: EQUAL
21940: IFFALSE 21952
// your_side := 0 else
21942: LD_ADDR_OWVAR 2
21946: PUSH
21947: LD_INT 0
21949: ST_TO_ADDR
21950: GO 21966
// your_side := your_side + 1 ;
21952: LD_ADDR_OWVAR 2
21956: PUSH
21957: LD_OWVAR 2
21961: PUSH
21962: LD_INT 1
21964: PLUS
21965: ST_TO_ADDR
// end ;
21966: LD_VAR 0 1
21970: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21971: LD_INT 0
21973: PPUSH
21974: PPUSH
21975: PPUSH
// for i in all_units do
21976: LD_ADDR_VAR 0 2
21980: PUSH
21981: LD_OWVAR 3
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22065
// if IsSelected ( i ) then
21989: LD_VAR 0 2
21993: PPUSH
21994: CALL_OW 306
21998: IFFALSE 22063
// begin j := GetSide ( i ) ;
22000: LD_ADDR_VAR 0 3
22004: PUSH
22005: LD_VAR 0 2
22009: PPUSH
22010: CALL_OW 255
22014: ST_TO_ADDR
// if j = 8 then
22015: LD_VAR 0 3
22019: PUSH
22020: LD_INT 8
22022: EQUAL
22023: IFFALSE 22035
// j := 0 else
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: LD_INT 0
22032: ST_TO_ADDR
22033: GO 22049
// j := j + 1 ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_VAR 0 3
22044: PUSH
22045: LD_INT 1
22047: PLUS
22048: ST_TO_ADDR
// SetSide ( i , j ) ;
22049: LD_VAR 0 2
22053: PPUSH
22054: LD_VAR 0 3
22058: PPUSH
22059: CALL_OW 235
// end ;
22063: GO 21986
22065: POP
22066: POP
// end ;
22067: LD_VAR 0 1
22071: RET
// export function hHackFog ; begin
22072: LD_INT 0
22074: PPUSH
// FogOff ( true ) ;
22075: LD_INT 1
22077: PPUSH
22078: CALL_OW 344
// end ;
22082: LD_VAR 0 1
22086: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22087: LD_INT 0
22089: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22090: LD_VAR 0 1
22094: PPUSH
22095: LD_VAR 0 2
22099: PPUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: LD_INT 1
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 483
// CenterOnXY ( x , y ) ;
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: CALL_OW 84
// end ;
22129: LD_VAR 0 4
22133: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22134: LD_INT 0
22136: PPUSH
22137: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22138: LD_VAR 0 1
22142: NOT
22143: IFTRUE 22162
22145: PUSH
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_VAR 0 3
22155: PPUSH
22156: CALL_OW 488
22160: NOT
22161: OR
22162: IFTRUE 22197
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 266
22174: PUSH
22175: LD_INT 3
22177: NONEQUAL
22178: IFFALSE 22196
22180: PUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL_OW 247
22190: PUSH
22191: LD_INT 1
22193: EQUAL
22194: NOT
22195: AND
22196: OR
22197: IFFALSE 22201
// exit ;
22199: GO 22483
// if GetType ( factory ) = unit_human then
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 247
22210: PUSH
22211: LD_INT 1
22213: EQUAL
22214: IFFALSE 22231
// factory := IsInUnit ( factory ) ;
22216: LD_ADDR_VAR 0 1
22220: PUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 310
22230: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 266
22240: PUSH
22241: LD_INT 3
22243: NONEQUAL
22244: IFFALSE 22248
// exit ;
22246: GO 22483
// for i := 1 to Count ( factoryWaypoints ) do
22248: LD_ADDR_VAR 0 5
22252: PUSH
22253: DOUBLE
22254: LD_INT 1
22256: DEC
22257: ST_TO_ADDR
22258: LD_EXP 88
22262: PPUSH
22263: CALL 32187 0 1
22267: PUSH
22268: FOR_TO
22269: IFFALSE 22431
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22271: LD_VAR 0 2
22275: PPUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: CALL_OW 428
22285: PUSH
22286: LD_EXP 88
22290: PUSH
22291: LD_VAR 0 5
22295: ARRAY
22296: PUSH
22297: LD_INT 2
22299: ARRAY
22300: EQUAL
22301: IFFALSE 22333
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22303: LD_ADDR_EXP 88
22307: PUSH
22308: LD_EXP 88
22312: PPUSH
22313: LD_VAR 0 5
22317: PPUSH
22318: CALL_OW 3
22322: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22323: CALL 22488 0 0
// exit ;
22327: POP
22328: POP
22329: GO 22483
// end else
22331: GO 22429
// if factory = factoryWaypoints [ i ] [ 2 ] then
22333: LD_VAR 0 1
22337: PUSH
22338: LD_EXP 88
22342: PUSH
22343: LD_VAR 0 5
22347: ARRAY
22348: PUSH
22349: LD_INT 2
22351: ARRAY
22352: EQUAL
22353: IFFALSE 22429
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22355: LD_ADDR_EXP 88
22359: PUSH
22360: LD_EXP 88
22364: PPUSH
22365: LD_VAR 0 5
22369: PPUSH
22370: CALL_OW 3
22374: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22375: LD_ADDR_EXP 88
22379: PUSH
22380: LD_EXP 88
22384: PPUSH
22385: LD_VAR 0 1
22389: PPUSH
22390: CALL_OW 255
22394: PUSH
22395: LD_VAR 0 1
22399: PUSH
22400: LD_VAR 0 2
22404: PUSH
22405: LD_VAR 0 3
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: PPUSH
22416: CALL 68153 0 2
22420: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22421: CALL 22488 0 0
// exit ;
22425: POP
22426: POP
22427: GO 22483
// end ; end ;
22429: GO 22268
22431: POP
22432: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22433: LD_ADDR_EXP 88
22437: PUSH
22438: LD_EXP 88
22442: PPUSH
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 255
22452: PUSH
22453: LD_VAR 0 1
22457: PUSH
22458: LD_VAR 0 2
22462: PUSH
22463: LD_VAR 0 3
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL 68153 0 2
22478: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22479: CALL 22488 0 0
// end ;
22483: LD_VAR 0 4
22487: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
22492: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22493: LD_STRING resetFactoryWaypoint();
22495: PPUSH
22496: CALL_OW 559
// if factoryWaypoints then
22500: LD_EXP 88
22504: IFFALSE 22625
// begin list := factoryWaypoints ;
22506: LD_ADDR_VAR 0 3
22510: PUSH
22511: LD_EXP 88
22515: ST_TO_ADDR
// for i := 1 to list do
22516: LD_ADDR_VAR 0 2
22520: PUSH
22521: DOUBLE
22522: LD_INT 1
22524: DEC
22525: ST_TO_ADDR
22526: LD_VAR 0 3
22530: PUSH
22531: FOR_TO
22532: IFFALSE 22623
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22534: LD_STRING setFactoryWaypointXY(
22536: PUSH
22537: LD_VAR 0 3
22541: PUSH
22542: LD_VAR 0 2
22546: ARRAY
22547: PUSH
22548: LD_INT 1
22550: ARRAY
22551: STR
22552: PUSH
22553: LD_STRING ,
22555: STR
22556: PUSH
22557: LD_VAR 0 3
22561: PUSH
22562: LD_VAR 0 2
22566: ARRAY
22567: PUSH
22568: LD_INT 2
22570: ARRAY
22571: STR
22572: PUSH
22573: LD_STRING ,
22575: STR
22576: PUSH
22577: LD_VAR 0 3
22581: PUSH
22582: LD_VAR 0 2
22586: ARRAY
22587: PUSH
22588: LD_INT 3
22590: ARRAY
22591: STR
22592: PUSH
22593: LD_STRING ,
22595: STR
22596: PUSH
22597: LD_VAR 0 3
22601: PUSH
22602: LD_VAR 0 2
22606: ARRAY
22607: PUSH
22608: LD_INT 4
22610: ARRAY
22611: STR
22612: PUSH
22613: LD_STRING )
22615: STR
22616: PPUSH
22617: CALL_OW 559
22621: GO 22531
22623: POP
22624: POP
// end ; end ;
22625: LD_VAR 0 1
22629: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22630: LD_INT 0
22632: PPUSH
// if HexInfo ( x , y ) = warehouse then
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: CALL_OW 428
22647: PUSH
22648: LD_VAR 0 1
22652: EQUAL
22653: IFFALSE 22680
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22655: LD_ADDR_EXP 90
22659: PUSH
22660: LD_EXP 90
22664: PPUSH
22665: LD_VAR 0 1
22669: PPUSH
22670: LD_INT 0
22672: PPUSH
22673: CALL_OW 1
22677: ST_TO_ADDR
22678: GO 22731
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22680: LD_ADDR_EXP 90
22684: PUSH
22685: LD_EXP 90
22689: PPUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 255
22704: PUSH
22705: LD_VAR 0 1
22709: PUSH
22710: LD_VAR 0 2
22714: PUSH
22715: LD_VAR 0 3
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 1
22730: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22731: CALL 22740 0 0
// end ;
22735: LD_VAR 0 4
22739: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22740: LD_INT 0
22742: PPUSH
22743: PPUSH
22744: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22745: LD_STRING resetWarehouseGatheringPoints();
22747: PPUSH
22748: CALL_OW 559
// if warehouseGatheringPoints then
22752: LD_EXP 90
22756: IFFALSE 22882
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_EXP 90
22767: PPUSH
22768: CALL 72087 0 1
22772: ST_TO_ADDR
// for i := 1 to list do
22773: LD_ADDR_VAR 0 2
22777: PUSH
22778: DOUBLE
22779: LD_INT 1
22781: DEC
22782: ST_TO_ADDR
22783: LD_VAR 0 3
22787: PUSH
22788: FOR_TO
22789: IFFALSE 22880
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22791: LD_STRING setWarehouseGatheringPointXY(
22793: PUSH
22794: LD_VAR 0 3
22798: PUSH
22799: LD_VAR 0 2
22803: ARRAY
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: STR
22809: PUSH
22810: LD_STRING ,
22812: STR
22813: PUSH
22814: LD_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: ARRAY
22824: PUSH
22825: LD_INT 2
22827: ARRAY
22828: STR
22829: PUSH
22830: LD_STRING ,
22832: STR
22833: PUSH
22834: LD_VAR 0 3
22838: PUSH
22839: LD_VAR 0 2
22843: ARRAY
22844: PUSH
22845: LD_INT 3
22847: ARRAY
22848: STR
22849: PUSH
22850: LD_STRING ,
22852: STR
22853: PUSH
22854: LD_VAR 0 3
22858: PUSH
22859: LD_VAR 0 2
22863: ARRAY
22864: PUSH
22865: LD_INT 4
22867: ARRAY
22868: STR
22869: PUSH
22870: LD_STRING )
22872: STR
22873: PPUSH
22874: CALL_OW 559
22878: GO 22788
22880: POP
22881: POP
// end ; end ;
22882: LD_VAR 0 1
22886: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22887: LD_EXP 90
22891: IFFALSE 23586
22893: GO 22895
22895: DISABLE
22896: LD_INT 0
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
22904: PPUSH
22905: PPUSH
22906: PPUSH
// begin enable ;
22907: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22908: LD_ADDR_VAR 0 3
22912: PUSH
22913: LD_EXP 90
22917: PPUSH
22918: CALL 72087 0 1
22922: ST_TO_ADDR
// if not list then
22923: LD_VAR 0 3
22927: NOT
22928: IFFALSE 22932
// exit ;
22930: GO 23586
// for i := 1 to list do
22932: LD_ADDR_VAR 0 1
22936: PUSH
22937: DOUBLE
22938: LD_INT 1
22940: DEC
22941: ST_TO_ADDR
22942: LD_VAR 0 3
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23584
// begin depot := list [ i ] [ 2 ] ;
22950: LD_ADDR_VAR 0 8
22954: PUSH
22955: LD_VAR 0 3
22959: PUSH
22960: LD_VAR 0 1
22964: ARRAY
22965: PUSH
22966: LD_INT 2
22968: ARRAY
22969: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22970: LD_ADDR_VAR 0 5
22974: PUSH
22975: LD_VAR 0 3
22979: PUSH
22980: LD_VAR 0 1
22984: ARRAY
22985: PUSH
22986: LD_INT 1
22988: ARRAY
22989: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22990: LD_VAR 0 8
22994: PPUSH
22995: CALL_OW 301
22999: IFTRUE 23018
23001: PUSH
23002: LD_VAR 0 5
23006: PUSH
23007: LD_VAR 0 8
23011: PPUSH
23012: CALL_OW 255
23016: NONEQUAL
23017: OR
23018: IFFALSE 23047
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23020: LD_ADDR_EXP 90
23024: PUSH
23025: LD_EXP 90
23029: PPUSH
23030: LD_VAR 0 8
23034: PPUSH
23035: LD_INT 0
23037: PPUSH
23038: CALL_OW 1
23042: ST_TO_ADDR
// exit ;
23043: POP
23044: POP
23045: GO 23586
// end ; x := list [ i ] [ 3 ] ;
23047: LD_ADDR_VAR 0 6
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_VAR 0 1
23061: ARRAY
23062: PUSH
23063: LD_INT 3
23065: ARRAY
23066: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23067: LD_ADDR_VAR 0 7
23071: PUSH
23072: LD_VAR 0 3
23076: PUSH
23077: LD_VAR 0 1
23081: ARRAY
23082: PUSH
23083: LD_INT 4
23085: ARRAY
23086: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23087: LD_ADDR_VAR 0 9
23091: PUSH
23092: LD_VAR 0 6
23096: PPUSH
23097: LD_VAR 0 7
23101: PPUSH
23102: LD_INT 16
23104: PPUSH
23105: CALL 70661 0 3
23109: ST_TO_ADDR
// if not cratesNearbyPoint then
23110: LD_VAR 0 9
23114: NOT
23115: IFFALSE 23121
// exit ;
23117: POP
23118: POP
23119: GO 23586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23121: LD_ADDR_VAR 0 4
23125: PUSH
23126: LD_INT 22
23128: PUSH
23129: LD_VAR 0 5
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: LD_INT 60
23143: PUSH
23144: EMPTY
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 8
23158: PUSH
23159: LD_INT 6
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 25
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 25
23182: PUSH
23183: LD_INT 16
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL_OW 69
23205: PUSH
23206: LD_VAR 0 8
23210: PPUSH
23211: CALL_OW 313
23215: PPUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 60
23221: PUSH
23222: EMPTY
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 25
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 25
23244: PUSH
23245: LD_INT 16
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PPUSH
23261: CALL_OW 72
23265: UNION
23266: ST_TO_ADDR
// if tmp then
23267: LD_VAR 0 4
23271: IFFALSE 23351
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23273: LD_ADDR_VAR 0 4
23277: PUSH
23278: LD_VAR 0 4
23282: PPUSH
23283: LD_INT 3
23285: PPUSH
23286: CALL 68468 0 2
23290: ST_TO_ADDR
// for j in tmp do
23291: LD_ADDR_VAR 0 2
23295: PUSH
23296: LD_VAR 0 4
23300: PUSH
23301: FOR_IN
23302: IFFALSE 23345
// begin if IsInUnit ( j ) then
23304: LD_VAR 0 2
23308: PPUSH
23309: CALL_OW 310
23313: IFFALSE 23324
// ComExit ( j ) ;
23315: LD_VAR 0 2
23319: PPUSH
23320: CALL 68551 0 1
// AddComCollect ( j , x , y ) ;
23324: LD_VAR 0 2
23328: PPUSH
23329: LD_VAR 0 6
23333: PPUSH
23334: LD_VAR 0 7
23338: PPUSH
23339: CALL_OW 177
// end ;
23343: GO 23301
23345: POP
23346: POP
// exit ;
23347: POP
23348: POP
23349: GO 23586
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23351: LD_ADDR_VAR 0 4
23355: PUSH
23356: LD_INT 22
23358: PUSH
23359: LD_VAR 0 5
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 91
23370: PUSH
23371: LD_VAR 0 8
23375: PUSH
23376: LD_INT 8
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 34
23389: PUSH
23390: LD_INT 12
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 34
23399: PUSH
23400: LD_INT 51
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 34
23409: PUSH
23410: LD_INT 32
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 89
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: PPUSH
23439: CALL_OW 69
23443: ST_TO_ADDR
// if tmp then
23444: LD_VAR 0 4
23448: IFFALSE 23582
// begin for j in tmp do
23450: LD_ADDR_VAR 0 2
23454: PUSH
23455: LD_VAR 0 4
23459: PUSH
23460: FOR_IN
23461: IFFALSE 23580
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23463: LD_VAR 0 2
23467: PPUSH
23468: CALL_OW 262
23472: PUSH
23473: LD_INT 3
23475: EQUAL
23476: IFTRUE 23493
23478: PUSH
23479: LD_VAR 0 2
23483: PPUSH
23484: CALL_OW 261
23488: PUSH
23489: LD_INT 20
23491: GREATER
23492: OR
23493: IFFALSE 23507
23495: PUSH
23496: LD_VAR 0 2
23500: PPUSH
23501: CALL_OW 314
23505: NOT
23506: AND
23507: IFFALSE 23537
23509: PUSH
23510: LD_VAR 0 2
23514: PPUSH
23515: CALL_OW 263
23519: PUSH
23520: LD_INT 1
23522: NONEQUAL
23523: IFTRUE 23536
23525: PUSH
23526: LD_VAR 0 2
23530: PPUSH
23531: CALL_OW 311
23535: OR
23536: AND
23537: IFFALSE 23578
// begin ComCollect ( j , x , y ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: LD_VAR 0 6
23548: PPUSH
23549: LD_VAR 0 7
23553: PPUSH
23554: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23558: LD_VAR 0 2
23562: PPUSH
23563: LD_VAR 0 8
23567: PPUSH
23568: CALL_OW 172
// exit ;
23572: POP
23573: POP
23574: POP
23575: POP
23576: GO 23586
// end ;
23578: GO 23460
23580: POP
23581: POP
// end ; end ;
23582: GO 22947
23584: POP
23585: POP
// end ; end_of_file
23586: PPOPN 9
23588: END
// export function SOS_UnitDestroyed ( un ) ; begin
23589: LD_INT 0
23591: PPUSH
// ComRadiation ( un ) ;
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL 24759 0 1
// end ;
23601: LD_VAR 0 2
23605: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23606: LD_INT 0
23608: PPUSH
// ComRadiation ( un ) ;
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL 24759 0 1
// end ;
23618: LD_VAR 0 2
23622: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23623: LD_INT 0
23625: PPUSH
// end ;
23626: LD_VAR 0 4
23630: RET
// export function SOS_Command ( cmd ) ; begin
23631: LD_INT 0
23633: PPUSH
// end ;
23634: LD_VAR 0 2
23638: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23639: LD_INT 0
23641: PPUSH
// end ;
23642: LD_VAR 0 6
23646: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23647: LD_INT 0
23649: PPUSH
23650: PPUSH
23651: PPUSH
23652: PPUSH
23653: PPUSH
// if not vehicle or not factory then
23654: LD_VAR 0 1
23658: NOT
23659: IFTRUE 23668
23661: PUSH
23662: LD_VAR 0 2
23666: NOT
23667: OR
23668: IFFALSE 23672
// exit ;
23670: GO 24334
// weapon := GetWeapon ( vehicle ) ;
23672: LD_ADDR_VAR 0 7
23676: PUSH
23677: LD_VAR 0 1
23681: PPUSH
23682: CALL_OW 264
23686: ST_TO_ADDR
// if weapon = ar_miner then
23687: LD_VAR 0 7
23691: PUSH
23692: LD_INT 81
23694: EQUAL
23695: IFFALSE 23752
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23697: LD_ADDR_EXP 99
23701: PUSH
23702: LD_EXP 99
23706: PPUSH
23707: LD_EXP 99
23711: PUSH
23712: LD_INT 1
23714: PLUS
23715: PPUSH
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 1
23725: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23726: LD_ADDR_EXP 100
23730: PUSH
23731: LD_EXP 100
23735: PPUSH
23736: LD_EXP 100
23740: PUSH
23741: LD_INT 1
23743: PLUS
23744: PPUSH
23745: EMPTY
23746: PPUSH
23747: CALL_OW 1
23751: ST_TO_ADDR
// end ; if not factoryWaypoints then
23752: LD_EXP 88
23756: NOT
23757: IFFALSE 23761
// exit ;
23759: GO 24334
// for i := 1 to Count ( factoryWaypoints ) do
23761: LD_ADDR_VAR 0 4
23765: PUSH
23766: DOUBLE
23767: LD_INT 1
23769: DEC
23770: ST_TO_ADDR
23771: LD_EXP 88
23775: PPUSH
23776: CALL 32187 0 1
23780: PUSH
23781: FOR_TO
23782: IFFALSE 24332
// if factoryWaypoints [ i ] [ 2 ] = factory then
23784: LD_EXP 88
23788: PUSH
23789: LD_VAR 0 4
23793: ARRAY
23794: PUSH
23795: LD_INT 2
23797: ARRAY
23798: PUSH
23799: LD_VAR 0 2
23803: EQUAL
23804: IFFALSE 24330
// begin if GetControl ( vehicle ) = control_manual then
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 263
23815: PUSH
23816: LD_INT 1
23818: EQUAL
23819: IFFALSE 24183
// begin driver := IsDrivenBy ( vehicle ) ;
23821: LD_ADDR_VAR 0 5
23825: PUSH
23826: LD_VAR 0 1
23830: PPUSH
23831: CALL_OW 311
23835: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23836: LD_VAR 0 5
23840: PUSH
23841: LD_EXP 89
23845: IN
23846: IFTRUE 23860
23848: PUSH
23849: LD_VAR 0 1
23853: PUSH
23854: LD_EXP 89
23858: IN
23859: OR
23860: IFFALSE 23866
// exit ;
23862: POP
23863: POP
23864: GO 24334
// if not HasTask ( driver ) then
23866: LD_VAR 0 5
23870: PPUSH
23871: CALL_OW 314
23875: NOT
23876: IFFALSE 24181
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23878: LD_ADDR_EXP 89
23882: PUSH
23883: LD_EXP 89
23887: PPUSH
23888: LD_VAR 0 5
23892: PPUSH
23893: CALL 68153 0 2
23897: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23898: LD_ADDR_EXP 89
23902: PUSH
23903: LD_EXP 89
23907: PPUSH
23908: LD_VAR 0 1
23912: PPUSH
23913: CALL 68153 0 2
23917: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23918: LD_ADDR_VAR 0 6
23922: PUSH
23923: LD_EXP 88
23927: PUSH
23928: LD_VAR 0 4
23932: ARRAY
23933: PUSH
23934: LD_INT 3
23936: ARRAY
23937: PPUSH
23938: LD_EXP 88
23942: PUSH
23943: LD_VAR 0 4
23947: ARRAY
23948: PUSH
23949: LD_INT 4
23951: ARRAY
23952: PPUSH
23953: CALL_OW 428
23957: ST_TO_ADDR
// if hex then
23958: LD_VAR 0 6
23962: IFFALSE 23980
// ComMoveUnit ( driver , hex ) else
23964: LD_VAR 0 5
23968: PPUSH
23969: LD_VAR 0 6
23973: PPUSH
23974: CALL_OW 112
23978: GO 24064
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23980: LD_VAR 0 1
23984: PPUSH
23985: LD_EXP 88
23989: PUSH
23990: LD_VAR 0 4
23994: ARRAY
23995: PUSH
23996: LD_INT 3
23998: ARRAY
23999: PPUSH
24000: LD_EXP 88
24004: PUSH
24005: LD_VAR 0 4
24009: ARRAY
24010: PUSH
24011: LD_INT 4
24013: ARRAY
24014: PPUSH
24015: CALL_OW 297
24019: PUSH
24020: LD_INT 0
24022: GREATER
24023: IFFALSE 24064
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24025: LD_VAR 0 5
24029: PPUSH
24030: LD_EXP 88
24034: PUSH
24035: LD_VAR 0 4
24039: ARRAY
24040: PUSH
24041: LD_INT 3
24043: ARRAY
24044: PPUSH
24045: LD_EXP 88
24049: PUSH
24050: LD_VAR 0 4
24054: ARRAY
24055: PUSH
24056: LD_INT 4
24058: ARRAY
24059: PPUSH
24060: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24064: LD_VAR 0 5
24068: PPUSH
24069: CALL_OW 181
// if Multiplayer then
24073: LD_OWVAR 4
24077: IFFALSE 24126
// begin repeat wait ( 10 ) ;
24079: LD_INT 10
24081: PPUSH
24082: CALL_OW 67
// until not IsInUnit ( driver ) ;
24086: LD_VAR 0 5
24090: PPUSH
24091: CALL_OW 310
24095: NOT
24096: IFFALSE 24079
// if not HasTask ( driver ) then
24098: LD_VAR 0 5
24102: PPUSH
24103: CALL_OW 314
24107: NOT
24108: IFFALSE 24124
// ComEnterUnit ( driver , factory ) ;
24110: LD_VAR 0 5
24114: PPUSH
24115: LD_VAR 0 2
24119: PPUSH
24120: CALL_OW 120
// end else
24124: GO 24140
// AddComEnterUnit ( driver , factory ) ;
24126: LD_VAR 0 5
24130: PPUSH
24131: LD_VAR 0 2
24135: PPUSH
24136: CALL_OW 180
// wait ( 0 0$1 ) ;
24140: LD_INT 35
24142: PPUSH
24143: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24147: LD_ADDR_EXP 89
24151: PUSH
24152: LD_EXP 89
24156: PUSH
24157: LD_VAR 0 5
24161: DIFF
24162: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24163: LD_ADDR_EXP 89
24167: PUSH
24168: LD_EXP 89
24172: PUSH
24173: LD_VAR 0 1
24177: DIFF
24178: ST_TO_ADDR
// break ;
24179: GO 24332
// end ; end else
24181: GO 24330
// if GetControl ( vehicle ) = control_remote then
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 263
24192: PUSH
24193: LD_INT 2
24195: EQUAL
24196: IFFALSE 24282
// begin wait ( 0 0$2 ) ;
24198: LD_INT 70
24200: PPUSH
24201: CALL_OW 67
// repeat wait ( 10 ) ;
24205: LD_INT 10
24207: PPUSH
24208: CALL_OW 67
// Connect ( vehicle ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL 38465 0 1
// until IsControledBy ( vehicle ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 312
24230: IFFALSE 24205
// wait ( 10 ) ;
24232: LD_INT 10
24234: PPUSH
24235: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24239: LD_VAR 0 1
24243: PPUSH
24244: LD_EXP 88
24248: PUSH
24249: LD_VAR 0 4
24253: ARRAY
24254: PUSH
24255: LD_INT 3
24257: ARRAY
24258: PPUSH
24259: LD_EXP 88
24263: PUSH
24264: LD_VAR 0 4
24268: ARRAY
24269: PUSH
24270: LD_INT 4
24272: ARRAY
24273: PPUSH
24274: CALL_OW 111
// break ;
24278: GO 24332
// end else
24280: GO 24330
// begin wait ( 0 0$3 ) ;
24282: LD_INT 105
24284: PPUSH
24285: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24289: LD_VAR 0 1
24293: PPUSH
24294: LD_EXP 88
24298: PUSH
24299: LD_VAR 0 4
24303: ARRAY
24304: PUSH
24305: LD_INT 3
24307: ARRAY
24308: PPUSH
24309: LD_EXP 88
24313: PUSH
24314: LD_VAR 0 4
24318: ARRAY
24319: PUSH
24320: LD_INT 4
24322: ARRAY
24323: PPUSH
24324: CALL_OW 111
// break ;
24328: GO 24332
// end ; end ;
24330: GO 23781
24332: POP
24333: POP
// end ;
24334: LD_VAR 0 3
24338: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24339: LD_INT 0
24341: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24342: LD_VAR 0 1
24346: PUSH
24347: LD_INT 250
24349: EQUAL
24350: IFFALSE 24367
24352: PUSH
24353: LD_VAR 0 2
24357: PPUSH
24358: CALL_OW 264
24362: PUSH
24363: LD_INT 81
24365: EQUAL
24366: AND
24367: IFFALSE 24388
// MinerPlaceMine ( unit , x , y ) ;
24369: LD_VAR 0 2
24373: PPUSH
24374: LD_VAR 0 4
24378: PPUSH
24379: LD_VAR 0 5
24383: PPUSH
24384: CALL 27669 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24388: LD_VAR 0 1
24392: PUSH
24393: LD_INT 251
24395: EQUAL
24396: IFFALSE 24413
24398: PUSH
24399: LD_VAR 0 2
24403: PPUSH
24404: CALL_OW 264
24408: PUSH
24409: LD_INT 81
24411: EQUAL
24412: AND
24413: IFFALSE 24434
// MinerDetonateMine ( unit , x , y ) ;
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_VAR 0 4
24424: PPUSH
24425: LD_VAR 0 5
24429: PPUSH
24430: CALL 28076 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24434: LD_VAR 0 1
24438: PUSH
24439: LD_INT 252
24441: EQUAL
24442: IFFALSE 24459
24444: PUSH
24445: LD_VAR 0 2
24449: PPUSH
24450: CALL_OW 264
24454: PUSH
24455: LD_INT 81
24457: EQUAL
24458: AND
24459: IFFALSE 24480
// MinerCreateMinefield ( unit , x , y ) ;
24461: LD_VAR 0 2
24465: PPUSH
24466: LD_VAR 0 4
24470: PPUSH
24471: LD_VAR 0 5
24475: PPUSH
24476: CALL 28308 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24480: LD_VAR 0 1
24484: PUSH
24485: LD_INT 253
24487: EQUAL
24488: IFFALSE 24505
24490: PUSH
24491: LD_VAR 0 2
24495: PPUSH
24496: CALL_OW 257
24500: PUSH
24501: LD_INT 5
24503: EQUAL
24504: AND
24505: IFFALSE 24526
// ComBinocular ( unit , x , y ) ;
24507: LD_VAR 0 2
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: LD_VAR 0 5
24521: PPUSH
24522: CALL 28683 0 3
// if selectedUnit then
24526: LD_VAR 0 3
24530: IFFALSE 24590
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24532: LD_VAR 0 1
24536: PUSH
24537: LD_INT 254
24539: EQUAL
24540: IFFALSE 24557
24542: PUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 264
24552: PUSH
24553: LD_INT 99
24555: EQUAL
24556: AND
24557: IFFALSE 24574
24559: PUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: CALL_OW 263
24569: PUSH
24570: LD_INT 3
24572: EQUAL
24573: AND
24574: IFFALSE 24590
// HackDestroyVehicle ( unit , selectedUnit ) ;
24576: LD_VAR 0 2
24580: PPUSH
24581: LD_VAR 0 3
24585: PPUSH
24586: CALL 26880 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24590: LD_VAR 0 1
24594: PUSH
24595: LD_INT 255
24597: EQUAL
24598: IFFALSE 24622
24600: PUSH
24601: LD_VAR 0 2
24605: PPUSH
24606: CALL_OW 264
24610: PUSH
24611: LD_INT 14
24613: PUSH
24614: LD_INT 53
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: IN
24621: AND
24622: IFFALSE 24640
24624: PUSH
24625: LD_VAR 0 4
24629: PPUSH
24630: LD_VAR 0 5
24634: PPUSH
24635: CALL_OW 488
24639: AND
24640: IFFALSE 24664
// CutTreeXYR ( unit , x , y , 12 ) ;
24642: LD_VAR 0 2
24646: PPUSH
24647: LD_VAR 0 4
24651: PPUSH
24652: LD_VAR 0 5
24656: PPUSH
24657: LD_INT 12
24659: PPUSH
24660: CALL 24855 0 4
// if cmd = 256 then
24664: LD_VAR 0 1
24668: PUSH
24669: LD_INT 256
24671: EQUAL
24672: IFFALSE 24693
// SetFactoryWaypoint ( unit , x , y ) ;
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_VAR 0 4
24683: PPUSH
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL 22134 0 3
// if cmd = 257 then
24693: LD_VAR 0 1
24697: PUSH
24698: LD_INT 257
24700: EQUAL
24701: IFFALSE 24722
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24703: LD_VAR 0 2
24707: PPUSH
24708: LD_VAR 0 4
24712: PPUSH
24713: LD_VAR 0 5
24717: PPUSH
24718: CALL 22630 0 3
// if cmd = 258 then
24722: LD_VAR 0 1
24726: PUSH
24727: LD_INT 258
24729: EQUAL
24730: IFFALSE 24754
// BurnTreeXYR ( unit , x , y , 8 ) ;
24732: LD_VAR 0 2
24736: PPUSH
24737: LD_VAR 0 4
24741: PPUSH
24742: LD_VAR 0 5
24746: PPUSH
24747: LD_INT 8
24749: PPUSH
24750: CALL 25255 0 4
// end ;
24754: LD_VAR 0 6
24758: RET
// export function ComRadiation ( un ) ; var eff ; begin
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 264
24772: PUSH
24773: LD_INT 91
24775: NONEQUAL
24776: IFFALSE 24780
// exit ;
24778: GO 24850
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24780: LD_INT 68
24782: PPUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 255
24792: PPUSH
24793: CALL_OW 321
24797: PUSH
24798: LD_INT 2
24800: EQUAL
24801: IFFALSE 24813
// eff := 50 else
24803: LD_ADDR_VAR 0 3
24807: PUSH
24808: LD_INT 50
24810: ST_TO_ADDR
24811: GO 24821
// eff := 25 ;
24813: LD_ADDR_VAR 0 3
24817: PUSH
24818: LD_INT 25
24820: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL_OW 250
24830: PPUSH
24831: LD_VAR 0 1
24835: PPUSH
24836: CALL_OW 251
24840: PPUSH
24841: LD_VAR 0 3
24845: PPUSH
24846: CALL_OW 495
// end ;
24850: LD_VAR 0 2
24854: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24855: LD_INT 0
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
24864: PPUSH
24865: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 302
24875: NOT
24876: IFTRUE 24895
24878: PUSH
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: CALL_OW 488
24893: NOT
24894: OR
24895: IFTRUE 24904
24897: PUSH
24898: LD_VAR 0 4
24902: NOT
24903: OR
24904: IFFALSE 24908
// exit ;
24906: GO 25250
// list := [ ] ;
24908: LD_ADDR_VAR 0 13
24912: PUSH
24913: EMPTY
24914: ST_TO_ADDR
// if x - r < 0 then
24915: LD_VAR 0 2
24919: PUSH
24920: LD_VAR 0 4
24924: MINUS
24925: PUSH
24926: LD_INT 0
24928: LESS
24929: IFFALSE 24941
// min_x := 0 else
24931: LD_ADDR_VAR 0 7
24935: PUSH
24936: LD_INT 0
24938: ST_TO_ADDR
24939: GO 24957
// min_x := x - r ;
24941: LD_ADDR_VAR 0 7
24945: PUSH
24946: LD_VAR 0 2
24950: PUSH
24951: LD_VAR 0 4
24955: MINUS
24956: ST_TO_ADDR
// if y - r < 0 then
24957: LD_VAR 0 3
24961: PUSH
24962: LD_VAR 0 4
24966: MINUS
24967: PUSH
24968: LD_INT 0
24970: LESS
24971: IFFALSE 24983
// min_y := 0 else
24973: LD_ADDR_VAR 0 8
24977: PUSH
24978: LD_INT 0
24980: ST_TO_ADDR
24981: GO 24999
// min_y := y - r ;
24983: LD_ADDR_VAR 0 8
24987: PUSH
24988: LD_VAR 0 3
24992: PUSH
24993: LD_VAR 0 4
24997: MINUS
24998: ST_TO_ADDR
// max_x := x + r ;
24999: LD_ADDR_VAR 0 9
25003: PUSH
25004: LD_VAR 0 2
25008: PUSH
25009: LD_VAR 0 4
25013: PLUS
25014: ST_TO_ADDR
// max_y := y + r ;
25015: LD_ADDR_VAR 0 10
25019: PUSH
25020: LD_VAR 0 3
25024: PUSH
25025: LD_VAR 0 4
25029: PLUS
25030: ST_TO_ADDR
// for _x = min_x to max_x do
25031: LD_ADDR_VAR 0 11
25035: PUSH
25036: DOUBLE
25037: LD_VAR 0 7
25041: DEC
25042: ST_TO_ADDR
25043: LD_VAR 0 9
25047: PUSH
25048: FOR_TO
25049: IFFALSE 25168
// for _y = min_y to max_y do
25051: LD_ADDR_VAR 0 12
25055: PUSH
25056: DOUBLE
25057: LD_VAR 0 8
25061: DEC
25062: ST_TO_ADDR
25063: LD_VAR 0 10
25067: PUSH
25068: FOR_TO
25069: IFFALSE 25164
// begin if not ValidHex ( _x , _y ) then
25071: LD_VAR 0 11
25075: PPUSH
25076: LD_VAR 0 12
25080: PPUSH
25081: CALL_OW 488
25085: NOT
25086: IFFALSE 25090
// continue ;
25088: GO 25068
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25090: LD_VAR 0 11
25094: PPUSH
25095: LD_VAR 0 12
25099: PPUSH
25100: CALL_OW 351
25104: IFFALSE 25122
25106: PUSH
25107: LD_VAR 0 11
25111: PPUSH
25112: LD_VAR 0 12
25116: PPUSH
25117: CALL_OW 554
25121: AND
25122: IFFALSE 25162
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25124: LD_ADDR_VAR 0 13
25128: PUSH
25129: LD_VAR 0 13
25133: PPUSH
25134: LD_VAR 0 13
25138: PUSH
25139: LD_INT 1
25141: PLUS
25142: PPUSH
25143: LD_VAR 0 11
25147: PUSH
25148: LD_VAR 0 12
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PPUSH
25157: CALL_OW 2
25161: ST_TO_ADDR
// end ;
25162: GO 25068
25164: POP
25165: POP
25166: GO 25048
25168: POP
25169: POP
// if not list then
25170: LD_VAR 0 13
25174: NOT
25175: IFFALSE 25179
// exit ;
25177: GO 25250
// for i in list do
25179: LD_ADDR_VAR 0 6
25183: PUSH
25184: LD_VAR 0 13
25188: PUSH
25189: FOR_IN
25190: IFFALSE 25248
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25192: LD_VAR 0 1
25196: PPUSH
25197: LD_STRING M
25199: PUSH
25200: LD_VAR 0 6
25204: PUSH
25205: LD_INT 1
25207: ARRAY
25208: PUSH
25209: LD_VAR 0 6
25213: PUSH
25214: LD_INT 2
25216: ARRAY
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: PPUSH
25242: CALL_OW 447
25246: GO 25189
25248: POP
25249: POP
// end ;
25250: LD_VAR 0 5
25254: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25255: LD_INT 0
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
25266: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL_OW 302
25276: NOT
25277: IFTRUE 25296
25279: PUSH
25280: LD_VAR 0 2
25284: PPUSH
25285: LD_VAR 0 3
25289: PPUSH
25290: CALL_OW 488
25294: NOT
25295: OR
25296: IFTRUE 25305
25298: PUSH
25299: LD_VAR 0 4
25303: NOT
25304: OR
25305: IFFALSE 25309
// exit ;
25307: GO 25826
// list := [ ] ;
25309: LD_ADDR_VAR 0 13
25313: PUSH
25314: EMPTY
25315: ST_TO_ADDR
// if x - r < 0 then
25316: LD_VAR 0 2
25320: PUSH
25321: LD_VAR 0 4
25325: MINUS
25326: PUSH
25327: LD_INT 0
25329: LESS
25330: IFFALSE 25342
// min_x := 0 else
25332: LD_ADDR_VAR 0 7
25336: PUSH
25337: LD_INT 0
25339: ST_TO_ADDR
25340: GO 25358
// min_x := x - r ;
25342: LD_ADDR_VAR 0 7
25346: PUSH
25347: LD_VAR 0 2
25351: PUSH
25352: LD_VAR 0 4
25356: MINUS
25357: ST_TO_ADDR
// if y - r < 0 then
25358: LD_VAR 0 3
25362: PUSH
25363: LD_VAR 0 4
25367: MINUS
25368: PUSH
25369: LD_INT 0
25371: LESS
25372: IFFALSE 25384
// min_y := 0 else
25374: LD_ADDR_VAR 0 8
25378: PUSH
25379: LD_INT 0
25381: ST_TO_ADDR
25382: GO 25400
// min_y := y - r ;
25384: LD_ADDR_VAR 0 8
25388: PUSH
25389: LD_VAR 0 3
25393: PUSH
25394: LD_VAR 0 4
25398: MINUS
25399: ST_TO_ADDR
// max_x := x + r ;
25400: LD_ADDR_VAR 0 9
25404: PUSH
25405: LD_VAR 0 2
25409: PUSH
25410: LD_VAR 0 4
25414: PLUS
25415: ST_TO_ADDR
// max_y := y + r ;
25416: LD_ADDR_VAR 0 10
25420: PUSH
25421: LD_VAR 0 3
25425: PUSH
25426: LD_VAR 0 4
25430: PLUS
25431: ST_TO_ADDR
// for _x = min_x to max_x do
25432: LD_ADDR_VAR 0 11
25436: PUSH
25437: DOUBLE
25438: LD_VAR 0 7
25442: DEC
25443: ST_TO_ADDR
25444: LD_VAR 0 9
25448: PUSH
25449: FOR_TO
25450: IFFALSE 25569
// for _y = min_y to max_y do
25452: LD_ADDR_VAR 0 12
25456: PUSH
25457: DOUBLE
25458: LD_VAR 0 8
25462: DEC
25463: ST_TO_ADDR
25464: LD_VAR 0 10
25468: PUSH
25469: FOR_TO
25470: IFFALSE 25565
// begin if not ValidHex ( _x , _y ) then
25472: LD_VAR 0 11
25476: PPUSH
25477: LD_VAR 0 12
25481: PPUSH
25482: CALL_OW 488
25486: NOT
25487: IFFALSE 25491
// continue ;
25489: GO 25469
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25491: LD_VAR 0 11
25495: PPUSH
25496: LD_VAR 0 12
25500: PPUSH
25501: CALL_OW 351
25505: IFFALSE 25523
25507: PUSH
25508: LD_VAR 0 11
25512: PPUSH
25513: LD_VAR 0 12
25517: PPUSH
25518: CALL_OW 554
25522: AND
25523: IFFALSE 25563
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25525: LD_ADDR_VAR 0 13
25529: PUSH
25530: LD_VAR 0 13
25534: PPUSH
25535: LD_VAR 0 13
25539: PUSH
25540: LD_INT 1
25542: PLUS
25543: PPUSH
25544: LD_VAR 0 11
25548: PUSH
25549: LD_VAR 0 12
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL_OW 2
25562: ST_TO_ADDR
// end ;
25563: GO 25469
25565: POP
25566: POP
25567: GO 25449
25569: POP
25570: POP
// if not list then
25571: LD_VAR 0 13
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25826
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25580: LD_ADDR_VAR 0 13
25584: PUSH
25585: LD_VAR 0 1
25589: PPUSH
25590: LD_VAR 0 13
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: LD_INT 1
25600: PPUSH
25601: CALL 35593 0 4
25605: ST_TO_ADDR
// ComStop ( flame ) ;
25606: LD_VAR 0 1
25610: PPUSH
25611: CALL_OW 141
// for i in list do
25615: LD_ADDR_VAR 0 6
25619: PUSH
25620: LD_VAR 0 13
25624: PUSH
25625: FOR_IN
25626: IFFALSE 25657
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25628: LD_VAR 0 1
25632: PPUSH
25633: LD_VAR 0 6
25637: PUSH
25638: LD_INT 1
25640: ARRAY
25641: PPUSH
25642: LD_VAR 0 6
25646: PUSH
25647: LD_INT 2
25649: ARRAY
25650: PPUSH
25651: CALL_OW 176
25655: GO 25625
25657: POP
25658: POP
// repeat wait ( 0 0$1 ) ;
25659: LD_INT 35
25661: PPUSH
25662: CALL_OW 67
// task := GetTaskList ( flame ) ;
25666: LD_ADDR_VAR 0 14
25670: PUSH
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL_OW 437
25680: ST_TO_ADDR
// if not task then
25681: LD_VAR 0 14
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 25826
// if task [ 1 ] [ 1 ] <> | then
25690: LD_VAR 0 14
25694: PUSH
25695: LD_INT 1
25697: ARRAY
25698: PUSH
25699: LD_INT 1
25701: ARRAY
25702: PUSH
25703: LD_STRING |
25705: NONEQUAL
25706: IFFALSE 25710
// exit ;
25708: GO 25826
// _x := task [ 1 ] [ 2 ] ;
25710: LD_ADDR_VAR 0 11
25714: PUSH
25715: LD_VAR 0 14
25719: PUSH
25720: LD_INT 1
25722: ARRAY
25723: PUSH
25724: LD_INT 2
25726: ARRAY
25727: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25728: LD_ADDR_VAR 0 12
25732: PUSH
25733: LD_VAR 0 14
25737: PUSH
25738: LD_INT 1
25740: ARRAY
25741: PUSH
25742: LD_INT 3
25744: ARRAY
25745: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25746: LD_VAR 0 11
25750: PPUSH
25751: LD_VAR 0 12
25755: PPUSH
25756: CALL_OW 351
25760: NOT
25761: IFTRUE 25780
25763: PUSH
25764: LD_VAR 0 11
25768: PPUSH
25769: LD_VAR 0 12
25773: PPUSH
25774: CALL_OW 554
25778: NOT
25779: OR
25780: IFFALSE 25814
// begin task := Delete ( task , 1 ) ;
25782: LD_ADDR_VAR 0 14
25786: PUSH
25787: LD_VAR 0 14
25791: PPUSH
25792: LD_INT 1
25794: PPUSH
25795: CALL_OW 3
25799: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 14
25809: PPUSH
25810: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 314
25823: NOT
25824: IFFALSE 25659
// end ;
25826: LD_VAR 0 5
25830: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25831: LD_EXP 92
25835: NOT
25836: IFFALSE 25886
25838: GO 25840
25840: DISABLE
// begin initHack := true ;
25841: LD_ADDR_EXP 92
25845: PUSH
25846: LD_INT 1
25848: ST_TO_ADDR
// hackTanks := [ ] ;
25849: LD_ADDR_EXP 93
25853: PUSH
25854: EMPTY
25855: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25856: LD_ADDR_EXP 94
25860: PUSH
25861: EMPTY
25862: ST_TO_ADDR
// hackLimit := 3 ;
25863: LD_ADDR_EXP 95
25867: PUSH
25868: LD_INT 3
25870: ST_TO_ADDR
// hackDist := 12 ;
25871: LD_ADDR_EXP 96
25875: PUSH
25876: LD_INT 12
25878: ST_TO_ADDR
// hackCounter := [ ] ;
25879: LD_ADDR_EXP 97
25883: PUSH
25884: EMPTY
25885: ST_TO_ADDR
// end ;
25886: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25887: LD_EXP 92
25891: IFFALSE 25909
25893: PUSH
25894: LD_INT 34
25896: PUSH
25897: LD_INT 99
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PPUSH
25904: CALL_OW 69
25908: AND
25909: IFFALSE 26162
25911: GO 25913
25913: DISABLE
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// begin enable ;
25918: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25919: LD_ADDR_VAR 0 1
25923: PUSH
25924: LD_INT 34
25926: PUSH
25927: LD_INT 99
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: PUSH
25939: FOR_IN
25940: IFFALSE 26160
// begin if not i in hackTanks then
25942: LD_VAR 0 1
25946: PUSH
25947: LD_EXP 93
25951: IN
25952: NOT
25953: IFFALSE 26036
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25955: LD_ADDR_EXP 93
25959: PUSH
25960: LD_EXP 93
25964: PPUSH
25965: LD_EXP 93
25969: PUSH
25970: LD_INT 1
25972: PLUS
25973: PPUSH
25974: LD_VAR 0 1
25978: PPUSH
25979: CALL_OW 1
25983: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25984: LD_ADDR_EXP 94
25988: PUSH
25989: LD_EXP 94
25993: PPUSH
25994: LD_EXP 94
25998: PUSH
25999: LD_INT 1
26001: PLUS
26002: PPUSH
26003: EMPTY
26004: PPUSH
26005: CALL_OW 1
26009: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26010: LD_ADDR_EXP 97
26014: PUSH
26015: LD_EXP 97
26019: PPUSH
26020: LD_EXP 97
26024: PUSH
26025: LD_INT 1
26027: PLUS
26028: PPUSH
26029: EMPTY
26030: PPUSH
26031: CALL_OW 1
26035: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 302
26045: NOT
26046: IFFALSE 26059
// begin HackUnlinkAll ( i ) ;
26048: LD_VAR 0 1
26052: PPUSH
26053: CALL 26165 0 1
// continue ;
26057: GO 25939
// end ; HackCheckCapturedStatus ( i ) ;
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL 26610 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: LD_INT 81
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL_OW 255
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 33
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 91
26102: PUSH
26103: LD_VAR 0 1
26107: PUSH
26108: LD_EXP 96
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 50
26120: PUSH
26121: EMPTY
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: PPUSH
26130: CALL_OW 69
26134: ST_TO_ADDR
// if not tmp then
26135: LD_VAR 0 2
26139: NOT
26140: IFFALSE 26144
// continue ;
26142: GO 25939
// HackLink ( i , tmp ) ;
26144: LD_VAR 0 1
26148: PPUSH
26149: LD_VAR 0 2
26153: PPUSH
26154: CALL 26301 0 2
// end ;
26158: GO 25939
26160: POP
26161: POP
// end ;
26162: PPOPN 2
26164: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26165: LD_INT 0
26167: PPUSH
26168: PPUSH
26169: PPUSH
// if not hack in hackTanks then
26170: LD_VAR 0 1
26174: PUSH
26175: LD_EXP 93
26179: IN
26180: NOT
26181: IFFALSE 26185
// exit ;
26183: GO 26296
// index := GetElementIndex ( hackTanks , hack ) ;
26185: LD_ADDR_VAR 0 4
26189: PUSH
26190: LD_EXP 93
26194: PPUSH
26195: LD_VAR 0 1
26199: PPUSH
26200: CALL 34888 0 2
26204: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26205: LD_EXP 94
26209: PUSH
26210: LD_VAR 0 4
26214: ARRAY
26215: IFFALSE 26296
// begin for i in hackTanksCaptured [ index ] do
26217: LD_ADDR_VAR 0 3
26221: PUSH
26222: LD_EXP 94
26226: PUSH
26227: LD_VAR 0 4
26231: ARRAY
26232: PUSH
26233: FOR_IN
26234: IFFALSE 26260
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26236: LD_VAR 0 3
26240: PUSH
26241: LD_INT 1
26243: ARRAY
26244: PPUSH
26245: LD_VAR 0 3
26249: PUSH
26250: LD_INT 2
26252: ARRAY
26253: PPUSH
26254: CALL_OW 235
26258: GO 26233
26260: POP
26261: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26262: LD_ADDR_EXP 94
26266: PUSH
26267: LD_EXP 94
26271: PPUSH
26272: LD_VAR 0 4
26276: PPUSH
26277: EMPTY
26278: PPUSH
26279: CALL_OW 1
26283: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26284: LD_VAR 0 1
26288: PPUSH
26289: LD_INT 0
26291: PPUSH
26292: CALL_OW 505
// end ; end ;
26296: LD_VAR 0 2
26300: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26301: LD_INT 0
26303: PPUSH
26304: PPUSH
26305: PPUSH
// if not hack in hackTanks or not vehicles then
26306: LD_VAR 0 1
26310: PUSH
26311: LD_EXP 93
26315: IN
26316: NOT
26317: IFTRUE 26326
26319: PUSH
26320: LD_VAR 0 2
26324: NOT
26325: OR
26326: IFFALSE 26330
// exit ;
26328: GO 26605
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26330: LD_ADDR_VAR 0 2
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: LD_VAR 0 2
26344: PPUSH
26345: LD_INT 1
26347: PPUSH
26348: LD_INT 1
26350: PPUSH
26351: CALL 35540 0 4
26355: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26356: LD_ADDR_VAR 0 5
26360: PUSH
26361: LD_EXP 93
26365: PPUSH
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL 34888 0 2
26375: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26376: LD_EXP 94
26380: PUSH
26381: LD_VAR 0 5
26385: ARRAY
26386: PUSH
26387: LD_EXP 95
26391: LESS
26392: IFFALSE 26581
// begin for i := 1 to vehicles do
26394: LD_ADDR_VAR 0 4
26398: PUSH
26399: DOUBLE
26400: LD_INT 1
26402: DEC
26403: ST_TO_ADDR
26404: LD_VAR 0 2
26408: PUSH
26409: FOR_TO
26410: IFFALSE 26579
// begin if hackTanksCaptured [ index ] = hackLimit then
26412: LD_EXP 94
26416: PUSH
26417: LD_VAR 0 5
26421: ARRAY
26422: PUSH
26423: LD_EXP 95
26427: EQUAL
26428: IFFALSE 26432
// break ;
26430: GO 26579
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26432: LD_ADDR_EXP 97
26436: PUSH
26437: LD_EXP 97
26441: PPUSH
26442: LD_VAR 0 5
26446: PPUSH
26447: LD_EXP 97
26451: PUSH
26452: LD_VAR 0 5
26456: ARRAY
26457: PUSH
26458: LD_INT 1
26460: PLUS
26461: PPUSH
26462: CALL_OW 1
26466: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26467: LD_ADDR_EXP 94
26471: PUSH
26472: LD_EXP 94
26476: PPUSH
26477: LD_VAR 0 5
26481: PUSH
26482: LD_EXP 94
26486: PUSH
26487: LD_VAR 0 5
26491: ARRAY
26492: PUSH
26493: LD_INT 1
26495: PLUS
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PPUSH
26501: LD_VAR 0 2
26505: PUSH
26506: LD_VAR 0 4
26510: ARRAY
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_VAR 0 4
26521: ARRAY
26522: PPUSH
26523: CALL_OW 255
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL 35105 0 3
26536: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26537: LD_VAR 0 2
26541: PUSH
26542: LD_VAR 0 4
26546: ARRAY
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 255
26557: PPUSH
26558: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26562: LD_VAR 0 2
26566: PUSH
26567: LD_VAR 0 4
26571: ARRAY
26572: PPUSH
26573: CALL_OW 141
// end ;
26577: GO 26409
26579: POP
26580: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_EXP 94
26590: PUSH
26591: LD_VAR 0 5
26595: ARRAY
26596: PUSH
26597: LD_INT 0
26599: PLUS
26600: PPUSH
26601: CALL_OW 505
// end ;
26605: LD_VAR 0 3
26609: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26610: LD_INT 0
26612: PPUSH
26613: PPUSH
26614: PPUSH
26615: PPUSH
// if not hack in hackTanks then
26616: LD_VAR 0 1
26620: PUSH
26621: LD_EXP 93
26625: IN
26626: NOT
26627: IFFALSE 26631
// exit ;
26629: GO 26875
// index := GetElementIndex ( hackTanks , hack ) ;
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: LD_EXP 93
26640: PPUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL 34888 0 2
26650: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: DOUBLE
26657: LD_EXP 94
26661: PUSH
26662: LD_VAR 0 4
26666: ARRAY
26667: INC
26668: ST_TO_ADDR
26669: LD_INT 1
26671: PUSH
26672: FOR_DOWNTO
26673: IFFALSE 26849
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26675: LD_ADDR_VAR 0 5
26679: PUSH
26680: LD_EXP 94
26684: PUSH
26685: LD_VAR 0 4
26689: ARRAY
26690: PUSH
26691: LD_VAR 0 3
26695: ARRAY
26696: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26697: LD_VAR 0 5
26701: PUSH
26702: LD_INT 1
26704: ARRAY
26705: PPUSH
26706: CALL_OW 302
26710: NOT
26711: IFTRUE 26739
26713: PUSH
26714: LD_VAR 0 5
26718: PUSH
26719: LD_INT 1
26721: ARRAY
26722: PPUSH
26723: CALL_OW 255
26727: PUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: CALL_OW 255
26737: NONEQUAL
26738: OR
26739: IFFALSE 26847
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26741: LD_VAR 0 5
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: PPUSH
26750: CALL_OW 305
26754: IFFALSE 26782
26756: PUSH
26757: LD_VAR 0 5
26761: PUSH
26762: LD_INT 1
26764: ARRAY
26765: PPUSH
26766: CALL_OW 255
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 255
26780: EQUAL
26781: AND
26782: IFFALSE 26806
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26784: LD_VAR 0 5
26788: PUSH
26789: LD_INT 1
26791: ARRAY
26792: PPUSH
26793: LD_VAR 0 5
26797: PUSH
26798: LD_INT 2
26800: ARRAY
26801: PPUSH
26802: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26806: LD_ADDR_EXP 94
26810: PUSH
26811: LD_EXP 94
26815: PPUSH
26816: LD_VAR 0 4
26820: PPUSH
26821: LD_EXP 94
26825: PUSH
26826: LD_VAR 0 4
26830: ARRAY
26831: PPUSH
26832: LD_VAR 0 3
26836: PPUSH
26837: CALL_OW 3
26841: PPUSH
26842: CALL_OW 1
26846: ST_TO_ADDR
// end ; end ;
26847: GO 26672
26849: POP
26850: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26851: LD_VAR 0 1
26855: PPUSH
26856: LD_EXP 94
26860: PUSH
26861: LD_VAR 0 4
26865: ARRAY
26866: PUSH
26867: LD_INT 0
26869: PLUS
26870: PPUSH
26871: CALL_OW 505
// end ;
26875: LD_VAR 0 2
26879: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
// if not hack in hackTanks then
26886: LD_VAR 0 1
26890: PUSH
26891: LD_EXP 93
26895: IN
26896: NOT
26897: IFFALSE 26901
// exit ;
26899: GO 26986
// index := GetElementIndex ( hackTanks , hack ) ;
26901: LD_ADDR_VAR 0 5
26905: PUSH
26906: LD_EXP 93
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL 34888 0 2
26920: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26921: LD_ADDR_VAR 0 4
26925: PUSH
26926: DOUBLE
26927: LD_INT 1
26929: DEC
26930: ST_TO_ADDR
26931: LD_EXP 94
26935: PUSH
26936: LD_VAR 0 5
26940: ARRAY
26941: PUSH
26942: FOR_TO
26943: IFFALSE 26984
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26945: LD_EXP 94
26949: PUSH
26950: LD_VAR 0 5
26954: ARRAY
26955: PUSH
26956: LD_VAR 0 4
26960: ARRAY
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PUSH
26966: LD_VAR 0 2
26970: EQUAL
26971: IFFALSE 26982
// KillUnit ( vehicle ) ;
26973: LD_VAR 0 2
26977: PPUSH
26978: CALL_OW 66
26982: GO 26942
26984: POP
26985: POP
// end ;
26986: LD_VAR 0 3
26990: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
26991: LD_EXP 98
26995: NOT
26996: IFFALSE 27129
26998: GO 27000
27000: DISABLE
27001: LD_INT 0
27003: PPUSH
// begin initMiner := true ;
27004: LD_ADDR_EXP 98
27008: PUSH
27009: LD_INT 1
27011: ST_TO_ADDR
// minersList := [ ] ;
27012: LD_ADDR_EXP 99
27016: PUSH
27017: EMPTY
27018: ST_TO_ADDR
// minerMinesList := [ ] ;
27019: LD_ADDR_EXP 100
27023: PUSH
27024: EMPTY
27025: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
27026: LD_ADDR_EXP 101
27030: PUSH
27031: LD_INT 6
27033: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27034: LD_ADDR_VAR 0 1
27038: PUSH
27039: LD_INT 34
27041: PUSH
27042: LD_INT 81
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: PUSH
27054: FOR_IN
27055: IFFALSE 27127
// begin if not i in minersList then
27057: LD_VAR 0 1
27061: PUSH
27062: LD_EXP 99
27066: IN
27067: NOT
27068: IFFALSE 27125
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27070: LD_ADDR_EXP 99
27074: PUSH
27075: LD_EXP 99
27079: PPUSH
27080: LD_EXP 99
27084: PUSH
27085: LD_INT 1
27087: PLUS
27088: PPUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 1
27098: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27099: LD_ADDR_EXP 100
27103: PUSH
27104: LD_EXP 100
27108: PPUSH
27109: LD_EXP 100
27113: PUSH
27114: LD_INT 1
27116: PLUS
27117: PPUSH
27118: EMPTY
27119: PPUSH
27120: CALL_OW 1
27124: ST_TO_ADDR
// end end ;
27125: GO 27054
27127: POP
27128: POP
// end ;
27129: PPOPN 1
27131: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27132: LD_EXP 98
27136: IFFALSE 27167
27138: PUSH
27139: LD_EXP 100
27143: PPUSH
27144: CALL 32187 0 1
27148: IFTRUE 27166
27150: PUSH
27151: LD_INT 34
27153: PUSH
27154: LD_INT 81
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: OR
27166: AND
27167: IFFALSE 27666
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
27176: PPUSH
27177: PPUSH
// begin enable ;
27178: ENABLE
// for i := minerMinesList downto 1 do
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: DOUBLE
27185: LD_EXP 100
27189: INC
27190: ST_TO_ADDR
27191: LD_INT 1
27193: PUSH
27194: FOR_DOWNTO
27195: IFFALSE 27664
// begin if IsLive ( minersList [ i ] ) then
27197: LD_EXP 99
27201: PUSH
27202: LD_VAR 0 1
27206: ARRAY
27207: PPUSH
27208: CALL_OW 300
27212: IFFALSE 27245
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27214: LD_EXP 99
27218: PUSH
27219: LD_VAR 0 1
27223: ARRAY
27224: PPUSH
27225: LD_EXP 100
27229: PUSH
27230: LD_VAR 0 1
27234: ARRAY
27235: PPUSH
27236: CALL 32187 0 1
27240: PPUSH
27241: CALL_OW 505
// if not minerMinesList [ i ] then
27245: LD_EXP 100
27249: PUSH
27250: LD_VAR 0 1
27254: ARRAY
27255: NOT
27256: IFFALSE 27260
// continue ;
27258: GO 27194
// for j := minerMinesList [ i ] downto 1 do
27260: LD_ADDR_VAR 0 2
27264: PUSH
27265: DOUBLE
27266: LD_EXP 100
27270: PUSH
27271: LD_VAR 0 1
27275: ARRAY
27276: INC
27277: ST_TO_ADDR
27278: LD_INT 1
27280: PUSH
27281: FOR_DOWNTO
27282: IFFALSE 27660
// begin side := GetSide ( minersList [ i ] ) ;
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_EXP 99
27293: PUSH
27294: LD_VAR 0 1
27298: ARRAY
27299: PPUSH
27300: CALL_OW 255
27304: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27305: LD_EXP 99
27309: PUSH
27310: LD_VAR 0 1
27314: ARRAY
27315: PPUSH
27316: CALL_OW 301
27320: IFTRUE 27340
27322: PUSH
27323: LD_EXP 99
27327: PUSH
27328: LD_VAR 0 1
27332: ARRAY
27333: PPUSH
27334: CALL_OW 305
27338: NOT
27339: OR
27340: IFFALSE 27431
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27342: LD_EXP 100
27346: PUSH
27347: LD_VAR 0 1
27351: ARRAY
27352: PUSH
27353: LD_VAR 0 2
27357: ARRAY
27358: PUSH
27359: LD_INT 1
27361: ARRAY
27362: PPUSH
27363: LD_EXP 100
27367: PUSH
27368: LD_VAR 0 1
27372: ARRAY
27373: PUSH
27374: LD_VAR 0 2
27378: ARRAY
27379: PUSH
27380: LD_INT 2
27382: ARRAY
27383: PPUSH
27384: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27388: LD_ADDR_EXP 100
27392: PUSH
27393: LD_EXP 100
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: LD_EXP 100
27407: PUSH
27408: LD_VAR 0 1
27412: ARRAY
27413: PPUSH
27414: LD_VAR 0 2
27418: PPUSH
27419: CALL_OW 3
27423: PPUSH
27424: CALL_OW 1
27428: ST_TO_ADDR
// continue ;
27429: GO 27281
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27431: LD_ADDR_VAR 0 4
27435: PUSH
27436: LD_EXP 100
27440: PUSH
27441: LD_VAR 0 1
27445: ARRAY
27446: PUSH
27447: LD_VAR 0 2
27451: ARRAY
27452: PUSH
27453: LD_INT 1
27455: ARRAY
27456: PPUSH
27457: LD_EXP 100
27461: PUSH
27462: LD_VAR 0 1
27466: ARRAY
27467: PUSH
27468: LD_VAR 0 2
27472: ARRAY
27473: PUSH
27474: LD_INT 2
27476: ARRAY
27477: PPUSH
27478: CALL_OW 428
27482: ST_TO_ADDR
// if not tmp then
27483: LD_VAR 0 4
27487: NOT
27488: IFFALSE 27492
// continue ;
27490: GO 27281
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27492: LD_VAR 0 4
27496: PUSH
27497: LD_INT 81
27499: PUSH
27500: LD_VAR 0 3
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PPUSH
27509: CALL_OW 69
27513: IN
27514: IFFALSE 27564
27516: PUSH
27517: LD_EXP 100
27521: PUSH
27522: LD_VAR 0 1
27526: ARRAY
27527: PUSH
27528: LD_VAR 0 2
27532: ARRAY
27533: PUSH
27534: LD_INT 1
27536: ARRAY
27537: PPUSH
27538: LD_EXP 100
27542: PUSH
27543: LD_VAR 0 1
27547: ARRAY
27548: PUSH
27549: LD_VAR 0 2
27553: ARRAY
27554: PUSH
27555: LD_INT 2
27557: ARRAY
27558: PPUSH
27559: CALL_OW 458
27563: AND
27564: IFFALSE 27658
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27566: LD_EXP 100
27570: PUSH
27571: LD_VAR 0 1
27575: ARRAY
27576: PUSH
27577: LD_VAR 0 2
27581: ARRAY
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: LD_EXP 100
27591: PUSH
27592: LD_VAR 0 1
27596: ARRAY
27597: PUSH
27598: LD_VAR 0 2
27602: ARRAY
27603: PUSH
27604: LD_INT 2
27606: ARRAY
27607: PPUSH
27608: LD_VAR 0 3
27612: PPUSH
27613: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27617: LD_ADDR_EXP 100
27621: PUSH
27622: LD_EXP 100
27626: PPUSH
27627: LD_VAR 0 1
27631: PPUSH
27632: LD_EXP 100
27636: PUSH
27637: LD_VAR 0 1
27641: ARRAY
27642: PPUSH
27643: LD_VAR 0 2
27647: PPUSH
27648: CALL_OW 3
27652: PPUSH
27653: CALL_OW 1
27657: ST_TO_ADDR
// end ; end ;
27658: GO 27281
27660: POP
27661: POP
// end ;
27662: GO 27194
27664: POP
27665: POP
// end ;
27666: PPOPN 4
27668: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27669: LD_INT 0
27671: PPUSH
27672: PPUSH
27673: PPUSH
27674: PPUSH
// result := false ;
27675: LD_ADDR_VAR 0 4
27679: PUSH
27680: LD_INT 0
27682: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 264
27692: PUSH
27693: LD_INT 81
27695: EQUAL
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 28071
// side := GetSide ( unit ) ;
27701: LD_ADDR_VAR 0 6
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 255
27715: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27716: LD_ADDR_VAR 0 5
27720: PUSH
27721: LD_EXP 99
27725: PPUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL 34888 0 2
27735: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27736: LD_EXP 100
27740: PUSH
27741: LD_VAR 0 5
27745: ARRAY
27746: PUSH
27747: LD_EXP 101
27751: GREATEREQUAL
27752: IFFALSE 27756
// exit ;
27754: GO 28071
// ComMoveXY ( unit , x , y ) ;
27756: LD_VAR 0 1
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: LD_VAR 0 3
27770: PPUSH
27771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27775: LD_INT 35
27777: PPUSH
27778: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27782: LD_VAR 0 1
27786: PPUSH
27787: LD_VAR 0 2
27791: PPUSH
27792: LD_VAR 0 3
27796: PPUSH
27797: CALL 66934 0 3
27801: NOT
27802: IFFALSE 27815
27804: PUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 314
27814: AND
27815: IFFALSE 27819
// exit ;
27817: GO 28071
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27819: LD_VAR 0 2
27823: PPUSH
27824: LD_VAR 0 3
27828: PPUSH
27829: CALL_OW 428
27833: PUSH
27834: LD_VAR 0 1
27838: EQUAL
27839: IFFALSE 27853
27841: PUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 314
27851: NOT
27852: AND
27853: IFFALSE 27775
// if MineAtPos ( x , y ) then
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_VAR 0 3
27864: PPUSH
27865: CALL_OW 458
27869: IFFALSE 27873
// exit ;
27871: GO 28071
// if your_side = side then
27873: LD_OWVAR 2
27877: PUSH
27878: LD_VAR 0 6
27882: EQUAL
27883: IFFALSE 27902
// PlaySoundXY ( x , y , PlantMine ) ;
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: LD_STRING PlantMine
27897: PPUSH
27898: CALL_OW 366
// repeat wait ( 1 ) ;
27902: LD_INT 1
27904: PPUSH
27905: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 3
27918: PPUSH
27919: LD_VAR 0 6
27923: PPUSH
27924: LD_INT 0
27926: PPUSH
27927: CALL_OW 454
27931: IFFALSE 27902
// if MineAtPos ( x , y ) then
27933: LD_VAR 0 2
27937: PPUSH
27938: LD_VAR 0 3
27942: PPUSH
27943: CALL_OW 458
27947: IFFALSE 28063
// begin for i in minerMinesList [ index ] do
27949: LD_ADDR_VAR 0 7
27953: PUSH
27954: LD_EXP 100
27958: PUSH
27959: LD_VAR 0 5
27963: ARRAY
27964: PUSH
27965: FOR_IN
27966: IFFALSE 28008
// if i [ 1 ] = x and i [ 2 ] = y then
27968: LD_VAR 0 7
27972: PUSH
27973: LD_INT 1
27975: ARRAY
27976: PUSH
27977: LD_VAR 0 2
27981: EQUAL
27982: IFFALSE 28000
27984: PUSH
27985: LD_VAR 0 7
27989: PUSH
27990: LD_INT 2
27992: ARRAY
27993: PUSH
27994: LD_VAR 0 3
27998: EQUAL
27999: AND
28000: IFFALSE 28006
// exit ;
28002: POP
28003: POP
28004: GO 28071
28006: GO 27965
28008: POP
28009: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28010: LD_ADDR_EXP 100
28014: PUSH
28015: LD_EXP 100
28019: PPUSH
28020: LD_VAR 0 5
28024: PUSH
28025: LD_EXP 100
28029: PUSH
28030: LD_VAR 0 5
28034: ARRAY
28035: PUSH
28036: LD_INT 1
28038: PLUS
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: LD_VAR 0 2
28048: PUSH
28049: LD_VAR 0 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PPUSH
28058: CALL 35105 0 3
28062: ST_TO_ADDR
// end ; result := true ;
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_INT 1
28070: ST_TO_ADDR
// end ;
28071: LD_VAR 0 4
28075: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28076: LD_INT 0
28078: PPUSH
28079: PPUSH
28080: PPUSH
// if not unit in minersList then
28081: LD_VAR 0 1
28085: PUSH
28086: LD_EXP 99
28090: IN
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28303
// index := GetElementIndex ( minersList , unit ) ;
28096: LD_ADDR_VAR 0 6
28100: PUSH
28101: LD_EXP 99
28105: PPUSH
28106: LD_VAR 0 1
28110: PPUSH
28111: CALL 34888 0 2
28115: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28116: LD_ADDR_VAR 0 5
28120: PUSH
28121: DOUBLE
28122: LD_EXP 100
28126: PUSH
28127: LD_VAR 0 6
28131: ARRAY
28132: INC
28133: ST_TO_ADDR
28134: LD_INT 1
28136: PUSH
28137: FOR_DOWNTO
28138: IFFALSE 28301
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28140: LD_EXP 100
28144: PUSH
28145: LD_VAR 0 6
28149: ARRAY
28150: PUSH
28151: LD_VAR 0 5
28155: ARRAY
28156: PUSH
28157: LD_INT 1
28159: ARRAY
28160: PPUSH
28161: LD_EXP 100
28165: PUSH
28166: LD_VAR 0 6
28170: ARRAY
28171: PUSH
28172: LD_VAR 0 5
28176: ARRAY
28177: PUSH
28178: LD_INT 2
28180: ARRAY
28181: PPUSH
28182: LD_VAR 0 2
28186: PPUSH
28187: LD_VAR 0 3
28191: PPUSH
28192: CALL_OW 298
28196: PUSH
28197: LD_INT 6
28199: LESS
28200: IFFALSE 28299
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28202: LD_EXP 100
28206: PUSH
28207: LD_VAR 0 6
28211: ARRAY
28212: PUSH
28213: LD_VAR 0 5
28217: ARRAY
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: PPUSH
28223: LD_EXP 100
28227: PUSH
28228: LD_VAR 0 6
28232: ARRAY
28233: PUSH
28234: LD_VAR 0 5
28238: ARRAY
28239: PUSH
28240: LD_INT 2
28242: ARRAY
28243: PPUSH
28244: LD_VAR 0 1
28248: PPUSH
28249: CALL_OW 255
28253: PPUSH
28254: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28258: LD_ADDR_EXP 100
28262: PUSH
28263: LD_EXP 100
28267: PPUSH
28268: LD_VAR 0 6
28272: PPUSH
28273: LD_EXP 100
28277: PUSH
28278: LD_VAR 0 6
28282: ARRAY
28283: PPUSH
28284: LD_VAR 0 5
28288: PPUSH
28289: CALL_OW 3
28293: PPUSH
28294: CALL_OW 1
28298: ST_TO_ADDR
// end ; end ;
28299: GO 28137
28301: POP
28302: POP
// end ;
28303: LD_VAR 0 4
28307: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28319: LD_VAR 0 1
28323: PPUSH
28324: CALL_OW 264
28328: PUSH
28329: LD_INT 81
28331: EQUAL
28332: NOT
28333: IFTRUE 28348
28335: PUSH
28336: LD_VAR 0 1
28340: PUSH
28341: LD_EXP 99
28345: IN
28346: NOT
28347: OR
28348: IFFALSE 28352
// exit ;
28350: GO 28678
// index := GetElementIndex ( minersList , unit ) ;
28352: LD_ADDR_VAR 0 6
28356: PUSH
28357: LD_EXP 99
28361: PPUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL 34888 0 2
28371: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28372: LD_ADDR_VAR 0 8
28376: PUSH
28377: LD_EXP 101
28381: PUSH
28382: LD_EXP 100
28386: PUSH
28387: LD_VAR 0 6
28391: ARRAY
28392: MINUS
28393: ST_TO_ADDR
// if not minesFreeAmount then
28394: LD_VAR 0 8
28398: NOT
28399: IFFALSE 28403
// exit ;
28401: GO 28678
// tmp := [ ] ;
28403: LD_ADDR_VAR 0 7
28407: PUSH
28408: EMPTY
28409: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28410: LD_ADDR_VAR 0 5
28414: PUSH
28415: DOUBLE
28416: LD_INT 1
28418: DEC
28419: ST_TO_ADDR
28420: LD_VAR 0 8
28424: PUSH
28425: FOR_TO
28426: IFFALSE 28625
// begin _d := rand ( 0 , 5 ) ;
28428: LD_ADDR_VAR 0 11
28432: PUSH
28433: LD_INT 0
28435: PPUSH
28436: LD_INT 5
28438: PPUSH
28439: CALL_OW 12
28443: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28444: LD_ADDR_VAR 0 12
28448: PUSH
28449: LD_INT 2
28451: PPUSH
28452: LD_INT 6
28454: PPUSH
28455: CALL_OW 12
28459: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28460: LD_ADDR_VAR 0 9
28464: PUSH
28465: LD_VAR 0 2
28469: PPUSH
28470: LD_VAR 0 11
28474: PPUSH
28475: LD_VAR 0 12
28479: PPUSH
28480: CALL_OW 272
28484: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28485: LD_ADDR_VAR 0 10
28489: PUSH
28490: LD_VAR 0 3
28494: PPUSH
28495: LD_VAR 0 11
28499: PPUSH
28500: LD_VAR 0 12
28504: PPUSH
28505: CALL_OW 273
28509: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28510: LD_VAR 0 9
28514: PPUSH
28515: LD_VAR 0 10
28519: PPUSH
28520: CALL_OW 488
28524: IFFALSE 28548
28526: PUSH
28527: LD_VAR 0 9
28531: PUSH
28532: LD_VAR 0 10
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_VAR 0 7
28545: IN
28546: NOT
28547: AND
28548: IFFALSE 28567
28550: PUSH
28551: LD_VAR 0 9
28555: PPUSH
28556: LD_VAR 0 10
28560: PPUSH
28561: CALL_OW 458
28565: NOT
28566: AND
28567: IFFALSE 28609
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28569: LD_ADDR_VAR 0 7
28573: PUSH
28574: LD_VAR 0 7
28578: PPUSH
28579: LD_VAR 0 7
28583: PUSH
28584: LD_INT 1
28586: PLUS
28587: PPUSH
28588: LD_VAR 0 9
28592: PUSH
28593: LD_VAR 0 10
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 1
28606: ST_TO_ADDR
28607: GO 28623
// i := i - 1 ;
28609: LD_ADDR_VAR 0 5
28613: PUSH
28614: LD_VAR 0 5
28618: PUSH
28619: LD_INT 1
28621: MINUS
28622: ST_TO_ADDR
// end ;
28623: GO 28425
28625: POP
28626: POP
// for i in tmp do
28627: LD_ADDR_VAR 0 5
28631: PUSH
28632: LD_VAR 0 7
28636: PUSH
28637: FOR_IN
28638: IFFALSE 28676
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28640: LD_VAR 0 1
28644: PPUSH
28645: LD_VAR 0 5
28649: PUSH
28650: LD_INT 1
28652: ARRAY
28653: PPUSH
28654: LD_VAR 0 5
28658: PUSH
28659: LD_INT 2
28661: ARRAY
28662: PPUSH
28663: CALL 27669 0 3
28667: NOT
28668: IFFALSE 28674
// exit ;
28670: POP
28671: POP
28672: GO 28678
28674: GO 28637
28676: POP
28677: POP
// end ;
28678: LD_VAR 0 4
28682: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28683: LD_INT 0
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
28692: PPUSH
28693: PPUSH
// if GetClass ( unit ) <> class_sniper then
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 257
28703: PUSH
28704: LD_INT 5
28706: NONEQUAL
28707: IFFALSE 28711
// exit ;
28709: GO 29181
// dist := 8 ;
28711: LD_ADDR_VAR 0 5
28715: PUSH
28716: LD_INT 8
28718: ST_TO_ADDR
// viewRange := 12 ;
28719: LD_ADDR_VAR 0 8
28723: PUSH
28724: LD_INT 12
28726: ST_TO_ADDR
// side := GetSide ( unit ) ;
28727: LD_ADDR_VAR 0 6
28731: PUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 255
28741: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28742: LD_INT 61
28744: PPUSH
28745: LD_VAR 0 6
28749: PPUSH
28750: CALL_OW 321
28754: PUSH
28755: LD_INT 2
28757: EQUAL
28758: IFFALSE 28768
// viewRange := 16 ;
28760: LD_ADDR_VAR 0 8
28764: PUSH
28765: LD_INT 16
28767: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_VAR 0 2
28777: PPUSH
28778: LD_VAR 0 3
28782: PPUSH
28783: CALL_OW 297
28787: PUSH
28788: LD_VAR 0 5
28792: GREATER
28793: IFFALSE 28872
// begin ComMoveXY ( unit , x , y ) ;
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_VAR 0 3
28809: PPUSH
28810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28814: LD_INT 35
28816: PPUSH
28817: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28821: LD_VAR 0 1
28825: PPUSH
28826: LD_VAR 0 2
28830: PPUSH
28831: LD_VAR 0 3
28835: PPUSH
28836: CALL 66934 0 3
28840: NOT
28841: IFFALSE 28845
// exit ;
28843: GO 29181
// until GetDistUnitXY ( unit , x , y ) < dist ;
28845: LD_VAR 0 1
28849: PPUSH
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_VAR 0 3
28859: PPUSH
28860: CALL_OW 297
28864: PUSH
28865: LD_VAR 0 5
28869: LESS
28870: IFFALSE 28814
// end ; ComTurnXY ( unit , x , y ) ;
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_VAR 0 2
28881: PPUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 118
// repeat if Multiplayer then
28891: LD_OWVAR 4
28895: IFFALSE 28906
// wait ( 35 ) else
28897: LD_INT 35
28899: PPUSH
28900: CALL_OW 67
28904: GO 28913
// wait ( 5 ) ;
28906: LD_INT 5
28908: PPUSH
28909: CALL_OW 67
// _d := GetDir ( unit ) ;
28913: LD_ADDR_VAR 0 11
28917: PUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 254
28927: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28928: LD_ADDR_VAR 0 7
28932: PUSH
28933: LD_VAR 0 1
28937: PPUSH
28938: CALL_OW 250
28942: PPUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 251
28952: PPUSH
28953: LD_VAR 0 2
28957: PPUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: CALL 69570 0 4
28967: ST_TO_ADDR
// until dir = _d ;
28968: LD_VAR 0 7
28972: PUSH
28973: LD_VAR 0 11
28977: EQUAL
28978: IFFALSE 28891
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28980: LD_ADDR_VAR 0 9
28984: PUSH
28985: LD_VAR 0 1
28989: PPUSH
28990: CALL_OW 250
28994: PPUSH
28995: LD_VAR 0 7
28999: PPUSH
29000: LD_VAR 0 5
29004: PPUSH
29005: CALL_OW 272
29009: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29010: LD_ADDR_VAR 0 10
29014: PUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL_OW 251
29024: PPUSH
29025: LD_VAR 0 7
29029: PPUSH
29030: LD_VAR 0 5
29034: PPUSH
29035: CALL_OW 273
29039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29040: LD_VAR 0 9
29044: PPUSH
29045: LD_VAR 0 10
29049: PPUSH
29050: CALL_OW 488
29054: NOT
29055: IFFALSE 29059
// exit ;
29057: GO 29181
// ComAnimCustom ( unit , 1 ) ;
29059: LD_VAR 0 1
29063: PPUSH
29064: LD_INT 1
29066: PPUSH
29067: CALL_OW 592
// p := 0 ;
29071: LD_ADDR_VAR 0 12
29075: PUSH
29076: LD_INT 0
29078: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29079: LD_VAR 0 9
29083: PPUSH
29084: LD_VAR 0 10
29088: PPUSH
29089: LD_VAR 0 6
29093: PPUSH
29094: LD_VAR 0 8
29098: PPUSH
29099: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29103: LD_INT 35
29105: PPUSH
29106: CALL_OW 67
// p := Inc ( p ) ;
29110: LD_ADDR_VAR 0 12
29114: PUSH
29115: LD_VAR 0 12
29119: PPUSH
29120: CALL 69526 0 1
29124: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29125: LD_VAR 0 12
29129: PUSH
29130: LD_INT 3
29132: EQUAL
29133: IFTRUE 29147
29135: PUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 302
29145: NOT
29146: OR
29147: IFTRUE 29160
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 301
29159: OR
29160: IFFALSE 29103
// RemoveSeeing ( _x , _y , side ) ;
29162: LD_VAR 0 9
29166: PPUSH
29167: LD_VAR 0 10
29171: PPUSH
29172: LD_VAR 0 6
29176: PPUSH
29177: CALL_OW 331
// end ;
29181: LD_VAR 0 4
29185: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29186: LD_INT 0
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
// if not unit then
29199: LD_VAR 0 1
29203: NOT
29204: IFFALSE 29208
// exit ;
29206: GO 29479
// side := GetSide ( unit ) ;
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 255
29222: ST_TO_ADDR
// x := GetX ( unit ) ;
29223: LD_ADDR_VAR 0 5
29227: PUSH
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 250
29237: ST_TO_ADDR
// y := GetY ( unit ) ;
29238: LD_ADDR_VAR 0 6
29242: PUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 251
29252: ST_TO_ADDR
// r := 8 ;
29253: LD_ADDR_VAR 0 4
29257: PUSH
29258: LD_INT 8
29260: ST_TO_ADDR
// if x - r < 0 then
29261: LD_VAR 0 5
29265: PUSH
29266: LD_VAR 0 4
29270: MINUS
29271: PUSH
29272: LD_INT 0
29274: LESS
29275: IFFALSE 29287
// min_x := 0 else
29277: LD_ADDR_VAR 0 7
29281: PUSH
29282: LD_INT 0
29284: ST_TO_ADDR
29285: GO 29303
// min_x := x - r ;
29287: LD_ADDR_VAR 0 7
29291: PUSH
29292: LD_VAR 0 5
29296: PUSH
29297: LD_VAR 0 4
29301: MINUS
29302: ST_TO_ADDR
// if y - r < 0 then
29303: LD_VAR 0 6
29307: PUSH
29308: LD_VAR 0 4
29312: MINUS
29313: PUSH
29314: LD_INT 0
29316: LESS
29317: IFFALSE 29329
// min_y := 0 else
29319: LD_ADDR_VAR 0 8
29323: PUSH
29324: LD_INT 0
29326: ST_TO_ADDR
29327: GO 29345
// min_y := y - r ;
29329: LD_ADDR_VAR 0 8
29333: PUSH
29334: LD_VAR 0 6
29338: PUSH
29339: LD_VAR 0 4
29343: MINUS
29344: ST_TO_ADDR
// max_x := x + r ;
29345: LD_ADDR_VAR 0 9
29349: PUSH
29350: LD_VAR 0 5
29354: PUSH
29355: LD_VAR 0 4
29359: PLUS
29360: ST_TO_ADDR
// max_y := y + r ;
29361: LD_ADDR_VAR 0 10
29365: PUSH
29366: LD_VAR 0 6
29370: PUSH
29371: LD_VAR 0 4
29375: PLUS
29376: ST_TO_ADDR
// for _x = min_x to max_x do
29377: LD_ADDR_VAR 0 11
29381: PUSH
29382: DOUBLE
29383: LD_VAR 0 7
29387: DEC
29388: ST_TO_ADDR
29389: LD_VAR 0 9
29393: PUSH
29394: FOR_TO
29395: IFFALSE 29477
// for _y = min_y to max_y do
29397: LD_ADDR_VAR 0 12
29401: PUSH
29402: DOUBLE
29403: LD_VAR 0 8
29407: DEC
29408: ST_TO_ADDR
29409: LD_VAR 0 10
29413: PUSH
29414: FOR_TO
29415: IFFALSE 29473
// begin if not ValidHex ( _x , _y ) then
29417: LD_VAR 0 11
29421: PPUSH
29422: LD_VAR 0 12
29426: PPUSH
29427: CALL_OW 488
29431: NOT
29432: IFFALSE 29436
// continue ;
29434: GO 29414
// if MineAtPos ( _x , _y ) then
29436: LD_VAR 0 11
29440: PPUSH
29441: LD_VAR 0 12
29445: PPUSH
29446: CALL_OW 458
29450: IFFALSE 29471
// ViewMineAtPos ( _x , _y , side ) ;
29452: LD_VAR 0 11
29456: PPUSH
29457: LD_VAR 0 12
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: CALL_OW 457
// end ;
29471: GO 29414
29473: POP
29474: POP
29475: GO 29394
29477: POP
29478: POP
// end ;
29479: LD_VAR 0 2
29483: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
29484: LD_INT 0
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// if not units then
29492: LD_VAR 0 1
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 29931
// scaners := [ ] ;
29501: LD_ADDR_VAR 0 6
29505: PUSH
29506: EMPTY
29507: ST_TO_ADDR
// for i in units do
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_VAR 0 1
29517: PUSH
29518: FOR_IN
29519: IFFALSE 29676
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29521: LD_VAR 0 3
29525: PPUSH
29526: CALL_OW 264
29530: PUSH
29531: LD_INT 11
29533: NONEQUAL
29534: IFTRUE 29548
29536: PUSH
29537: LD_VAR 0 3
29541: PPUSH
29542: CALL_OW 302
29546: NOT
29547: OR
29548: IFTRUE 29565
29550: PUSH
29551: LD_VAR 0 3
29555: PPUSH
29556: CALL_OW 110
29560: PUSH
29561: LD_INT 502
29563: EQUAL
29564: OR
29565: IFFALSE 29569
// continue ;
29567: GO 29518
// ComStop ( i ) ;
29569: LD_VAR 0 3
29573: PPUSH
29574: CALL_OW 141
// x := GetX ( i ) ;
29578: LD_ADDR_VAR 0 4
29582: PUSH
29583: LD_VAR 0 3
29587: PPUSH
29588: CALL_OW 250
29592: ST_TO_ADDR
// y := GetY ( i ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_VAR 0 3
29602: PPUSH
29603: CALL_OW 251
29607: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29608: LD_VAR 0 3
29612: PPUSH
29613: CALL_OW 255
29617: PUSH
29618: LD_OWVAR 2
29622: EQUAL
29623: IFFALSE 29642
// PlaySoundXY ( x , y , mineDetector ) ;
29625: LD_VAR 0 4
29629: PPUSH
29630: LD_VAR 0 5
29634: PPUSH
29635: LD_STRING mineDetector
29637: PPUSH
29638: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29642: LD_ADDR_VAR 0 6
29646: PUSH
29647: LD_VAR 0 6
29651: PPUSH
29652: LD_VAR 0 3
29656: PPUSH
29657: CALL 68153 0 2
29661: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29662: LD_VAR 0 3
29666: PPUSH
29667: LD_INT 502
29669: PPUSH
29670: CALL_OW 109
// end ;
29674: GO 29518
29676: POP
29677: POP
// if not scaners then
29678: LD_VAR 0 6
29682: NOT
29683: IFFALSE 29687
// exit ;
29685: GO 29931
// wait ( 3 ) ;
29687: LD_INT 3
29689: PPUSH
29690: CALL_OW 67
// timer := 6 ;
29694: LD_ADDR_VAR 0 7
29698: PUSH
29699: LD_INT 6
29701: ST_TO_ADDR
// repeat for i in scaners do
29702: LD_ADDR_VAR 0 3
29706: PUSH
29707: LD_VAR 0 6
29711: PUSH
29712: FOR_IN
29713: IFFALSE 29829
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29715: LD_VAR 0 3
29719: PPUSH
29720: CALL_OW 302
29724: NOT
29725: IFTRUE 29738
29727: PUSH
29728: LD_VAR 0 3
29732: PPUSH
29733: CALL_OW 314
29737: OR
29738: IFTRUE 29769
29740: PUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 263
29750: PUSH
29751: LD_INT 1
29753: EQUAL
29754: IFFALSE 29768
29756: PUSH
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 311
29766: NOT
29767: AND
29768: OR
29769: IFFALSE 29813
// begin SetUnitDisplayNumber ( i , 0 ) ;
29771: LD_VAR 0 3
29775: PPUSH
29776: LD_INT 0
29778: PPUSH
29779: CALL_OW 505
// SetTag ( i , 0 ) ;
29783: LD_VAR 0 3
29787: PPUSH
29788: LD_INT 0
29790: PPUSH
29791: CALL_OW 109
// scaners := scaners diff i ;
29795: LD_ADDR_VAR 0 6
29799: PUSH
29800: LD_VAR 0 6
29804: PUSH
29805: LD_VAR 0 3
29809: DIFF
29810: ST_TO_ADDR
// continue ;
29811: GO 29712
// end ; SetUnitDisplayNumber ( i , timer ) ;
29813: LD_VAR 0 3
29817: PPUSH
29818: LD_VAR 0 7
29822: PPUSH
29823: CALL_OW 505
// end ;
29827: GO 29712
29829: POP
29830: POP
// if not scaners then
29831: LD_VAR 0 6
29835: NOT
29836: IFFALSE 29840
// exit ;
29838: GO 29931
// timer := Dec ( timer ) ;
29840: LD_ADDR_VAR 0 7
29844: PUSH
29845: LD_VAR 0 7
29849: PPUSH
29850: CALL 69548 0 1
29854: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29855: LD_INT 35
29857: PPUSH
29858: CALL_OW 67
// until timer = 0 ;
29862: LD_VAR 0 7
29866: PUSH
29867: LD_INT 0
29869: EQUAL
29870: IFFALSE 29702
// if not scaners then
29872: LD_VAR 0 6
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 29931
// for i in scaners do
29881: LD_ADDR_VAR 0 3
29885: PUSH
29886: LD_VAR 0 6
29890: PUSH
29891: FOR_IN
29892: IFFALSE 29929
// begin SetUnitDisplayNumber ( i , 0 ) ;
29894: LD_VAR 0 3
29898: PPUSH
29899: LD_INT 0
29901: PPUSH
29902: CALL_OW 505
// SetTag ( i , 0 ) ;
29906: LD_VAR 0 3
29910: PPUSH
29911: LD_INT 0
29913: PPUSH
29914: CALL_OW 109
// RevealDetectorMine ( i ) ;
29918: LD_VAR 0 3
29922: PPUSH
29923: CALL 29186 0 1
// end ;
29927: GO 29891
29929: POP
29930: POP
// end ;
29931: LD_VAR 0 2
29935: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
29936: LD_INT 0
29938: PPUSH
// if p1 = mine_detector_mode then
29939: LD_VAR 0 2
29943: PUSH
29944: LD_INT 103
29946: EQUAL
29947: IFFALSE 29958
// DetectMine ( units ) ;
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL 29484 0 1
// end ; end_of_file
29958: LD_VAR 0 7
29962: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29963: LD_INT 0
29965: PPUSH
29966: PPUSH
// if exist_mode then
29967: LD_VAR 0 2
29971: IFFALSE 30017
// begin unit := CreateCharacter ( prefix & ident ) ;
29973: LD_ADDR_VAR 0 5
29977: PUSH
29978: LD_VAR 0 3
29982: PUSH
29983: LD_VAR 0 1
29987: STR
29988: PPUSH
29989: CALL_OW 34
29993: ST_TO_ADDR
// if unit then
29994: LD_VAR 0 5
29998: IFFALSE 30015
// DeleteCharacters ( prefix & ident ) ;
30000: LD_VAR 0 3
30004: PUSH
30005: LD_VAR 0 1
30009: STR
30010: PPUSH
30011: CALL_OW 40
// end else
30015: GO 30032
// unit := NewCharacter ( ident ) ;
30017: LD_ADDR_VAR 0 5
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 25
30031: ST_TO_ADDR
// result := unit ;
30032: LD_ADDR_VAR 0 4
30036: PUSH
30037: LD_VAR 0 5
30041: ST_TO_ADDR
// end ;
30042: LD_VAR 0 4
30046: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30047: LD_INT 0
30049: PPUSH
30050: PPUSH
// if exist_mode then
30051: LD_VAR 0 2
30055: IFFALSE 30080
// unit := CreateCharacter ( prefix & ident ) else
30057: LD_ADDR_VAR 0 5
30061: PUSH
30062: LD_VAR 0 3
30066: PUSH
30067: LD_VAR 0 1
30071: STR
30072: PPUSH
30073: CALL_OW 34
30077: ST_TO_ADDR
30078: GO 30095
// unit := NewCharacter ( ident ) ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 25
30094: ST_TO_ADDR
// result := unit ;
30095: LD_ADDR_VAR 0 4
30099: PUSH
30100: LD_VAR 0 5
30104: ST_TO_ADDR
// end ;
30105: LD_VAR 0 4
30109: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30110: LD_INT 0
30112: PPUSH
30113: PPUSH
// if not side or not nation then
30114: LD_VAR 0 1
30118: NOT
30119: IFTRUE 30128
30121: PUSH
30122: LD_VAR 0 2
30126: NOT
30127: OR
30128: IFFALSE 30132
// exit ;
30130: GO 30926
// case nation of nation_american :
30132: LD_VAR 0 2
30136: PUSH
30137: LD_INT 1
30139: DOUBLE
30140: EQUAL
30141: IFTRUE 30145
30143: GO 30367
30145: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30146: LD_ADDR_VAR 0 4
30150: PUSH
30151: LD_INT 35
30153: PUSH
30154: LD_INT 45
30156: PUSH
30157: LD_INT 46
30159: PUSH
30160: LD_INT 47
30162: PUSH
30163: LD_INT 82
30165: PUSH
30166: LD_INT 83
30168: PUSH
30169: LD_INT 84
30171: PUSH
30172: LD_INT 85
30174: PUSH
30175: LD_INT 86
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 6
30186: PUSH
30187: LD_INT 15
30189: PUSH
30190: LD_INT 16
30192: PUSH
30193: LD_INT 7
30195: PUSH
30196: LD_INT 12
30198: PUSH
30199: LD_INT 13
30201: PUSH
30202: LD_INT 10
30204: PUSH
30205: LD_INT 14
30207: PUSH
30208: LD_INT 20
30210: PUSH
30211: LD_INT 21
30213: PUSH
30214: LD_INT 22
30216: PUSH
30217: LD_INT 25
30219: PUSH
30220: LD_INT 32
30222: PUSH
30223: LD_INT 27
30225: PUSH
30226: LD_INT 36
30228: PUSH
30229: LD_INT 69
30231: PUSH
30232: LD_INT 39
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 40
30240: PUSH
30241: LD_INT 48
30243: PUSH
30244: LD_INT 49
30246: PUSH
30247: LD_INT 50
30249: PUSH
30250: LD_INT 51
30252: PUSH
30253: LD_INT 52
30255: PUSH
30256: LD_INT 53
30258: PUSH
30259: LD_INT 54
30261: PUSH
30262: LD_INT 55
30264: PUSH
30265: LD_INT 56
30267: PUSH
30268: LD_INT 57
30270: PUSH
30271: LD_INT 58
30273: PUSH
30274: LD_INT 59
30276: PUSH
30277: LD_INT 60
30279: PUSH
30280: LD_INT 61
30282: PUSH
30283: LD_INT 62
30285: PUSH
30286: LD_INT 80
30288: PUSH
30289: LD_INT 82
30291: PUSH
30292: LD_INT 83
30294: PUSH
30295: LD_INT 84
30297: PUSH
30298: LD_INT 85
30300: PUSH
30301: LD_INT 86
30303: PUSH
30304: LD_INT 90
30306: PUSH
30307: LD_INT 93
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
30365: GO 30848
30367: LD_INT 2
30369: DOUBLE
30370: EQUAL
30371: IFTRUE 30375
30373: GO 30609
30375: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30376: LD_ADDR_VAR 0 4
30380: PUSH
30381: LD_INT 35
30383: PUSH
30384: LD_INT 45
30386: PUSH
30387: LD_INT 46
30389: PUSH
30390: LD_INT 47
30392: PUSH
30393: LD_INT 82
30395: PUSH
30396: LD_INT 83
30398: PUSH
30399: LD_INT 84
30401: PUSH
30402: LD_INT 85
30404: PUSH
30405: LD_INT 87
30407: PUSH
30408: LD_INT 70
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 11
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 4
30422: PUSH
30423: LD_INT 5
30425: PUSH
30426: LD_INT 6
30428: PUSH
30429: LD_INT 15
30431: PUSH
30432: LD_INT 18
30434: PUSH
30435: LD_INT 7
30437: PUSH
30438: LD_INT 17
30440: PUSH
30441: LD_INT 8
30443: PUSH
30444: LD_INT 20
30446: PUSH
30447: LD_INT 21
30449: PUSH
30450: LD_INT 22
30452: PUSH
30453: LD_INT 72
30455: PUSH
30456: LD_INT 26
30458: PUSH
30459: LD_INT 69
30461: PUSH
30462: LD_INT 39
30464: PUSH
30465: LD_INT 40
30467: PUSH
30468: LD_INT 41
30470: PUSH
30471: LD_INT 42
30473: PUSH
30474: LD_INT 43
30476: PUSH
30477: LD_INT 48
30479: PUSH
30480: LD_INT 49
30482: PUSH
30483: LD_INT 50
30485: PUSH
30486: LD_INT 51
30488: PUSH
30489: LD_INT 52
30491: PUSH
30492: LD_INT 53
30494: PUSH
30495: LD_INT 54
30497: PUSH
30498: LD_INT 55
30500: PUSH
30501: LD_INT 56
30503: PUSH
30504: LD_INT 60
30506: PUSH
30507: LD_INT 61
30509: PUSH
30510: LD_INT 62
30512: PUSH
30513: LD_INT 66
30515: PUSH
30516: LD_INT 67
30518: PUSH
30519: LD_INT 68
30521: PUSH
30522: LD_INT 81
30524: PUSH
30525: LD_INT 82
30527: PUSH
30528: LD_INT 83
30530: PUSH
30531: LD_INT 84
30533: PUSH
30534: LD_INT 85
30536: PUSH
30537: LD_INT 87
30539: PUSH
30540: LD_INT 88
30542: PUSH
30543: LD_INT 92
30545: PUSH
30546: LD_INT 94
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
30607: GO 30848
30609: LD_INT 3
30611: DOUBLE
30612: EQUAL
30613: IFTRUE 30617
30615: GO 30847
30617: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30618: LD_ADDR_VAR 0 4
30622: PUSH
30623: LD_INT 46
30625: PUSH
30626: LD_INT 47
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 82
30637: PUSH
30638: LD_INT 83
30640: PUSH
30641: LD_INT 84
30643: PUSH
30644: LD_INT 85
30646: PUSH
30647: LD_INT 86
30649: PUSH
30650: LD_INT 11
30652: PUSH
30653: LD_INT 9
30655: PUSH
30656: LD_INT 20
30658: PUSH
30659: LD_INT 19
30661: PUSH
30662: LD_INT 21
30664: PUSH
30665: LD_INT 24
30667: PUSH
30668: LD_INT 22
30670: PUSH
30671: LD_INT 25
30673: PUSH
30674: LD_INT 28
30676: PUSH
30677: LD_INT 29
30679: PUSH
30680: LD_INT 30
30682: PUSH
30683: LD_INT 31
30685: PUSH
30686: LD_INT 37
30688: PUSH
30689: LD_INT 38
30691: PUSH
30692: LD_INT 32
30694: PUSH
30695: LD_INT 27
30697: PUSH
30698: LD_INT 33
30700: PUSH
30701: LD_INT 69
30703: PUSH
30704: LD_INT 39
30706: PUSH
30707: LD_INT 34
30709: PUSH
30710: LD_INT 40
30712: PUSH
30713: LD_INT 71
30715: PUSH
30716: LD_INT 23
30718: PUSH
30719: LD_INT 44
30721: PUSH
30722: LD_INT 48
30724: PUSH
30725: LD_INT 49
30727: PUSH
30728: LD_INT 50
30730: PUSH
30731: LD_INT 51
30733: PUSH
30734: LD_INT 52
30736: PUSH
30737: LD_INT 53
30739: PUSH
30740: LD_INT 54
30742: PUSH
30743: LD_INT 55
30745: PUSH
30746: LD_INT 56
30748: PUSH
30749: LD_INT 57
30751: PUSH
30752: LD_INT 58
30754: PUSH
30755: LD_INT 59
30757: PUSH
30758: LD_INT 63
30760: PUSH
30761: LD_INT 64
30763: PUSH
30764: LD_INT 65
30766: PUSH
30767: LD_INT 82
30769: PUSH
30770: LD_INT 83
30772: PUSH
30773: LD_INT 84
30775: PUSH
30776: LD_INT 85
30778: PUSH
30779: LD_INT 86
30781: PUSH
30782: LD_INT 89
30784: PUSH
30785: LD_INT 91
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
30845: GO 30848
30847: POP
// if state > - 1 and state < 3 then
30848: LD_VAR 0 3
30852: PUSH
30853: LD_INT 1
30855: NEG
30856: GREATER
30857: IFFALSE 30869
30859: PUSH
30860: LD_VAR 0 3
30864: PUSH
30865: LD_INT 3
30867: LESS
30868: AND
30869: IFFALSE 30926
// for i in result do
30871: LD_ADDR_VAR 0 5
30875: PUSH
30876: LD_VAR 0 4
30880: PUSH
30881: FOR_IN
30882: IFFALSE 30924
// if GetTech ( i , side ) <> state then
30884: LD_VAR 0 5
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 321
30898: PUSH
30899: LD_VAR 0 3
30903: NONEQUAL
30904: IFFALSE 30922
// result := result diff i ;
30906: LD_ADDR_VAR 0 4
30910: PUSH
30911: LD_VAR 0 4
30915: PUSH
30916: LD_VAR 0 5
30920: DIFF
30921: ST_TO_ADDR
30922: GO 30881
30924: POP
30925: POP
// end ;
30926: LD_VAR 0 4
30930: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
30935: PPUSH
// result := true ;
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 1
30943: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_VAR 0 2
30953: PPUSH
30954: CALL_OW 480
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 5
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31017
// for i in tmp do
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_VAR 0 5
30977: PUSH
30978: FOR_IN
30979: IFFALSE 31015
// if GetTech ( i , side ) <> state_researched then
30981: LD_VAR 0 4
30985: PPUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 321
30995: PUSH
30996: LD_INT 2
30998: NONEQUAL
30999: IFFALSE 31013
// begin result := false ;
31001: LD_ADDR_VAR 0 3
31005: PUSH
31006: LD_INT 0
31008: ST_TO_ADDR
// exit ;
31009: POP
31010: POP
31011: GO 31017
// end ;
31013: GO 30978
31015: POP
31016: POP
// end ;
31017: LD_VAR 0 3
31021: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31022: LD_INT 0
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31037: LD_VAR 0 1
31041: NOT
31042: IFTRUE 31059
31044: PUSH
31045: LD_VAR 0 1
31049: PPUSH
31050: CALL_OW 257
31054: PUSH
31055: LD_INT 9
31057: NONEQUAL
31058: OR
31059: IFFALSE 31063
// exit ;
31061: GO 31642
// side := GetSide ( unit ) ;
31063: LD_ADDR_VAR 0 9
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 255
31077: ST_TO_ADDR
// tech_space := tech_spacanom ;
31078: LD_ADDR_VAR 0 12
31082: PUSH
31083: LD_INT 29
31085: ST_TO_ADDR
// tech_time := tech_taurad ;
31086: LD_ADDR_VAR 0 13
31090: PUSH
31091: LD_INT 28
31093: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31094: LD_ADDR_VAR 0 11
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 310
31108: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31109: LD_VAR 0 11
31113: PPUSH
31114: CALL_OW 247
31118: PUSH
31119: LD_INT 2
31121: EQUAL
31122: IFFALSE 31126
// exit ;
31124: GO 31642
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31126: LD_ADDR_VAR 0 8
31130: PUSH
31131: LD_INT 81
31133: PUSH
31134: LD_VAR 0 9
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 21
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PPUSH
31164: CALL_OW 69
31168: ST_TO_ADDR
// if not tmp then
31169: LD_VAR 0 8
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31642
// if in_unit then
31178: LD_VAR 0 11
31182: IFFALSE 31206
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31184: LD_ADDR_VAR 0 10
31188: PUSH
31189: LD_VAR 0 8
31193: PPUSH
31194: LD_VAR 0 11
31198: PPUSH
31199: CALL_OW 74
31203: ST_TO_ADDR
31204: GO 31226
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31206: LD_ADDR_VAR 0 10
31210: PUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 74
31225: ST_TO_ADDR
// if not enemy then
31226: LD_VAR 0 10
31230: NOT
31231: IFFALSE 31235
// exit ;
31233: GO 31642
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31235: LD_VAR 0 11
31239: IFFALSE 31261
31241: PUSH
31242: LD_VAR 0 11
31246: PPUSH
31247: LD_VAR 0 10
31251: PPUSH
31252: CALL_OW 296
31256: PUSH
31257: LD_INT 13
31259: GREATER
31260: AND
31261: IFTRUE 31283
31263: PUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_VAR 0 10
31273: PPUSH
31274: CALL_OW 296
31278: PUSH
31279: LD_INT 12
31281: GREATER
31282: OR
31283: IFFALSE 31287
// exit ;
31285: GO 31642
// missile := [ 1 ] ;
31287: LD_ADDR_VAR 0 14
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31298: LD_VAR 0 9
31302: PPUSH
31303: LD_VAR 0 12
31307: PPUSH
31308: CALL_OW 325
31312: IFFALSE 31341
// missile := Replace ( missile , missile + 1 , 2 ) ;
31314: LD_ADDR_VAR 0 14
31318: PUSH
31319: LD_VAR 0 14
31323: PPUSH
31324: LD_VAR 0 14
31328: PUSH
31329: LD_INT 1
31331: PLUS
31332: PPUSH
31333: LD_INT 2
31335: PPUSH
31336: CALL_OW 1
31340: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31341: LD_VAR 0 9
31345: PPUSH
31346: LD_VAR 0 13
31350: PPUSH
31351: CALL_OW 325
31355: IFFALSE 31379
31357: PUSH
31358: LD_VAR 0 10
31362: PPUSH
31363: CALL_OW 255
31367: PPUSH
31368: LD_VAR 0 13
31372: PPUSH
31373: CALL_OW 325
31377: NOT
31378: AND
31379: IFFALSE 31408
// missile := Replace ( missile , missile + 1 , 3 ) ;
31381: LD_ADDR_VAR 0 14
31385: PUSH
31386: LD_VAR 0 14
31390: PPUSH
31391: LD_VAR 0 14
31395: PUSH
31396: LD_INT 1
31398: PLUS
31399: PPUSH
31400: LD_INT 3
31402: PPUSH
31403: CALL_OW 1
31407: ST_TO_ADDR
// if missile < 2 then
31408: LD_VAR 0 14
31412: PUSH
31413: LD_INT 2
31415: LESS
31416: IFFALSE 31420
// exit ;
31418: GO 31642
// x := GetX ( enemy ) ;
31420: LD_ADDR_VAR 0 4
31424: PUSH
31425: LD_VAR 0 10
31429: PPUSH
31430: CALL_OW 250
31434: ST_TO_ADDR
// y := GetY ( enemy ) ;
31435: LD_ADDR_VAR 0 5
31439: PUSH
31440: LD_VAR 0 10
31444: PPUSH
31445: CALL_OW 251
31449: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31450: LD_ADDR_VAR 0 6
31454: PUSH
31455: LD_VAR 0 4
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PPUSH
31464: LD_INT 1
31466: PPUSH
31467: CALL_OW 12
31471: PLUS
31472: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31473: LD_ADDR_VAR 0 7
31477: PUSH
31478: LD_VAR 0 5
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PPUSH
31487: LD_INT 1
31489: PPUSH
31490: CALL_OW 12
31494: PLUS
31495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31496: LD_VAR 0 6
31500: PPUSH
31501: LD_VAR 0 7
31505: PPUSH
31506: CALL_OW 488
31510: NOT
31511: IFFALSE 31533
// begin _x := x ;
31513: LD_ADDR_VAR 0 6
31517: PUSH
31518: LD_VAR 0 4
31522: ST_TO_ADDR
// _y := y ;
31523: LD_ADDR_VAR 0 7
31527: PUSH
31528: LD_VAR 0 5
31532: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 1
31540: PPUSH
31541: LD_VAR 0 14
31545: PPUSH
31546: CALL_OW 12
31550: ST_TO_ADDR
// case i of 1 :
31551: LD_VAR 0 3
31555: PUSH
31556: LD_INT 1
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31581
31564: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31565: LD_VAR 0 1
31569: PPUSH
31570: LD_VAR 0 10
31574: PPUSH
31575: CALL_OW 115
31579: GO 31642
31581: LD_INT 2
31583: DOUBLE
31584: EQUAL
31585: IFTRUE 31589
31587: GO 31611
31589: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31590: LD_VAR 0 1
31594: PPUSH
31595: LD_VAR 0 6
31599: PPUSH
31600: LD_VAR 0 7
31604: PPUSH
31605: CALL_OW 153
31609: GO 31642
31611: LD_INT 3
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 31641
31619: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31620: LD_VAR 0 1
31624: PPUSH
31625: LD_VAR 0 6
31629: PPUSH
31630: LD_VAR 0 7
31634: PPUSH
31635: CALL_OW 154
31639: GO 31642
31641: POP
// end ;
31642: LD_VAR 0 2
31646: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
// if not unit or not building then
31655: LD_VAR 0 1
31659: NOT
31660: IFTRUE 31669
31662: PUSH
31663: LD_VAR 0 2
31667: NOT
31668: OR
31669: IFFALSE 31673
// exit ;
31671: GO 31831
// x := GetX ( building ) ;
31673: LD_ADDR_VAR 0 5
31677: PUSH
31678: LD_VAR 0 2
31682: PPUSH
31683: CALL_OW 250
31687: ST_TO_ADDR
// y := GetY ( building ) ;
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: LD_VAR 0 2
31697: PPUSH
31698: CALL_OW 251
31702: ST_TO_ADDR
// for i := 0 to 5 do
31703: LD_ADDR_VAR 0 4
31707: PUSH
31708: DOUBLE
31709: LD_INT 0
31711: DEC
31712: ST_TO_ADDR
31713: LD_INT 5
31715: PUSH
31716: FOR_TO
31717: IFFALSE 31829
// begin _x := ShiftX ( x , i , 3 ) ;
31719: LD_ADDR_VAR 0 7
31723: PUSH
31724: LD_VAR 0 5
31728: PPUSH
31729: LD_VAR 0 4
31733: PPUSH
31734: LD_INT 3
31736: PPUSH
31737: CALL_OW 272
31741: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31742: LD_ADDR_VAR 0 8
31746: PUSH
31747: LD_VAR 0 6
31751: PPUSH
31752: LD_VAR 0 4
31756: PPUSH
31757: LD_INT 3
31759: PPUSH
31760: CALL_OW 273
31764: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31765: LD_VAR 0 7
31769: PPUSH
31770: LD_VAR 0 8
31774: PPUSH
31775: CALL_OW 488
31779: NOT
31780: IFFALSE 31784
// continue ;
31782: GO 31716
// if HexInfo ( _x , _y ) = 0 then
31784: LD_VAR 0 7
31788: PPUSH
31789: LD_VAR 0 8
31793: PPUSH
31794: CALL_OW 428
31798: PUSH
31799: LD_INT 0
31801: EQUAL
31802: IFFALSE 31827
// begin ComMoveXY ( unit , _x , _y ) ;
31804: LD_VAR 0 1
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: CALL_OW 111
// exit ;
31823: POP
31824: POP
31825: GO 31831
// end ; end ;
31827: GO 31716
31829: POP
31830: POP
// end ;
31831: LD_VAR 0 3
31835: RET
// export function ScanBase ( side , base_area ) ; begin
31836: LD_INT 0
31838: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_VAR 0 2
31848: PPUSH
31849: LD_INT 81
31851: PUSH
31852: LD_VAR 0 1
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PPUSH
31861: CALL_OW 70
31865: ST_TO_ADDR
// end ;
31866: LD_VAR 0 3
31870: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31871: LD_INT 0
31873: PPUSH
31874: PPUSH
31875: PPUSH
31876: PPUSH
// result := false ;
31877: LD_ADDR_VAR 0 2
31881: PUSH
31882: LD_INT 0
31884: ST_TO_ADDR
// side := GetSide ( unit ) ;
31885: LD_ADDR_VAR 0 3
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 255
31899: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31900: LD_ADDR_VAR 0 4
31904: PUSH
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 248
31914: ST_TO_ADDR
// case nat of 1 :
31915: LD_VAR 0 4
31919: PUSH
31920: LD_INT 1
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// tech := tech_lassight ; 2 :
31929: LD_ADDR_VAR 0 5
31933: PUSH
31934: LD_INT 12
31936: ST_TO_ADDR
31937: GO 31978
31939: LD_INT 2
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// tech := tech_mortar ; 3 :
31948: LD_ADDR_VAR 0 5
31952: PUSH
31953: LD_INT 41
31955: ST_TO_ADDR
31956: GO 31978
31958: LD_INT 3
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31977
31966: POP
// tech := tech_bazooka ; end ;
31967: LD_ADDR_VAR 0 5
31971: PUSH
31972: LD_INT 44
31974: ST_TO_ADDR
31975: GO 31978
31977: POP
// if Researched ( side , tech ) then
31978: LD_VAR 0 3
31982: PPUSH
31983: LD_VAR 0 5
31987: PPUSH
31988: CALL_OW 325
31992: IFFALSE 32019
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31994: LD_ADDR_VAR 0 2
31998: PUSH
31999: LD_INT 5
32001: PUSH
32002: LD_INT 8
32004: PUSH
32005: LD_INT 9
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: LD_VAR 0 4
32017: ARRAY
32018: ST_TO_ADDR
// end ;
32019: LD_VAR 0 2
32023: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32024: LD_INT 0
32026: PPUSH
32027: PPUSH
32028: PPUSH
// if not mines then
32029: LD_VAR 0 2
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32182
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32038: LD_ADDR_VAR 0 5
32042: PUSH
32043: LD_INT 81
32045: PUSH
32046: LD_VAR 0 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 69
32080: ST_TO_ADDR
// for i in mines do
32081: LD_ADDR_VAR 0 4
32085: PUSH
32086: LD_VAR 0 2
32090: PUSH
32091: FOR_IN
32092: IFFALSE 32180
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32094: LD_VAR 0 4
32098: PUSH
32099: LD_INT 1
32101: ARRAY
32102: PPUSH
32103: LD_VAR 0 4
32107: PUSH
32108: LD_INT 2
32110: ARRAY
32111: PPUSH
32112: CALL_OW 458
32116: NOT
32117: IFFALSE 32121
// continue ;
32119: GO 32091
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32121: LD_VAR 0 4
32125: PUSH
32126: LD_INT 1
32128: ARRAY
32129: PPUSH
32130: LD_VAR 0 4
32134: PUSH
32135: LD_INT 2
32137: ARRAY
32138: PPUSH
32139: CALL_OW 428
32143: PUSH
32144: LD_VAR 0 5
32148: IN
32149: IFFALSE 32178
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32151: LD_VAR 0 4
32155: PUSH
32156: LD_INT 1
32158: ARRAY
32159: PPUSH
32160: LD_VAR 0 4
32164: PUSH
32165: LD_INT 2
32167: ARRAY
32168: PPUSH
32169: LD_VAR 0 1
32173: PPUSH
32174: CALL_OW 456
// end ;
32178: GO 32091
32180: POP
32181: POP
// end ;
32182: LD_VAR 0 3
32186: RET
// export function Count ( array ) ; begin
32187: LD_INT 0
32189: PPUSH
// result := array + 0 ;
32190: LD_ADDR_VAR 0 2
32194: PUSH
32195: LD_VAR 0 1
32199: PUSH
32200: LD_INT 0
32202: PLUS
32203: ST_TO_ADDR
// end ;
32204: LD_VAR 0 2
32208: RET
// export function IsEmpty ( building ) ; begin
32209: LD_INT 0
32211: PPUSH
// if not building then
32212: LD_VAR 0 1
32216: NOT
32217: IFFALSE 32221
// exit ;
32219: GO 32264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32221: LD_ADDR_VAR 0 2
32225: PUSH
32226: LD_VAR 0 1
32230: PUSH
32231: LD_INT 22
32233: PUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 255
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 58
32250: PUSH
32251: EMPTY
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PPUSH
32258: CALL_OW 69
32262: IN
32263: ST_TO_ADDR
// end ;
32264: LD_VAR 0 2
32268: RET
// export function IsNotFull ( building ) ; var places ; begin
32269: LD_INT 0
32271: PPUSH
32272: PPUSH
// if not building then
32273: LD_VAR 0 1
32277: NOT
32278: IFFALSE 32282
// exit ;
32280: GO 32310
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32282: LD_ADDR_VAR 0 2
32286: PUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: LD_INT 3
32294: PUSH
32295: LD_INT 62
32297: PUSH
32298: EMPTY
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 72
32309: ST_TO_ADDR
// end ;
32310: LD_VAR 0 2
32314: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32315: LD_INT 0
32317: PPUSH
32318: PPUSH
32319: PPUSH
32320: PPUSH
// tmp := [ ] ;
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: EMPTY
32327: ST_TO_ADDR
// list := [ ] ;
32328: LD_ADDR_VAR 0 5
32332: PUSH
32333: EMPTY
32334: ST_TO_ADDR
// for i = 16 to 25 do
32335: LD_ADDR_VAR 0 4
32339: PUSH
32340: DOUBLE
32341: LD_INT 16
32343: DEC
32344: ST_TO_ADDR
32345: LD_INT 25
32347: PUSH
32348: FOR_TO
32349: IFFALSE 32422
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_INT 22
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 255
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 91
32380: PUSH
32381: LD_VAR 0 1
32385: PUSH
32386: LD_INT 6
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 30
32396: PUSH
32397: LD_VAR 0 4
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: PPUSH
32414: CALL_OW 69
32418: ADD
32419: ST_TO_ADDR
32420: GO 32348
32422: POP
32423: POP
// for i = 1 to tmp do
32424: LD_ADDR_VAR 0 4
32428: PUSH
32429: DOUBLE
32430: LD_INT 1
32432: DEC
32433: ST_TO_ADDR
32434: LD_VAR 0 3
32438: PUSH
32439: FOR_TO
32440: IFFALSE 32528
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32442: LD_ADDR_VAR 0 5
32446: PUSH
32447: LD_VAR 0 5
32451: PUSH
32452: LD_VAR 0 3
32456: PUSH
32457: LD_VAR 0 4
32461: ARRAY
32462: PPUSH
32463: CALL_OW 266
32467: PUSH
32468: LD_VAR 0 3
32472: PUSH
32473: LD_VAR 0 4
32477: ARRAY
32478: PPUSH
32479: CALL_OW 250
32483: PUSH
32484: LD_VAR 0 3
32488: PUSH
32489: LD_VAR 0 4
32493: ARRAY
32494: PPUSH
32495: CALL_OW 251
32499: PUSH
32500: LD_VAR 0 3
32504: PUSH
32505: LD_VAR 0 4
32509: ARRAY
32510: PPUSH
32511: CALL_OW 254
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: ADD
32525: ST_TO_ADDR
32526: GO 32439
32528: POP
32529: POP
// result := list ;
32530: LD_ADDR_VAR 0 2
32534: PUSH
32535: LD_VAR 0 5
32539: ST_TO_ADDR
// end ;
32540: LD_VAR 0 2
32544: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
// if not factory then
32554: LD_VAR 0 1
32558: NOT
32559: IFFALSE 32563
// exit ;
32561: GO 33166
// if control = control_apeman then
32563: LD_VAR 0 4
32567: PUSH
32568: LD_INT 5
32570: EQUAL
32571: IFFALSE 32680
// begin tmp := UnitsInside ( factory ) ;
32573: LD_ADDR_VAR 0 8
32577: PUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 313
32587: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32588: LD_VAR 0 8
32592: PPUSH
32593: LD_INT 25
32595: PUSH
32596: LD_INT 12
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PPUSH
32603: CALL_OW 72
32607: NOT
32608: IFFALSE 32618
// control := control_manual ;
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_INT 1
32617: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32618: LD_ADDR_VAR 0 8
32622: PUSH
32623: LD_VAR 0 1
32627: PPUSH
32628: CALL 32315 0 1
32632: ST_TO_ADDR
// if tmp then
32633: LD_VAR 0 8
32637: IFFALSE 32680
// begin for i in tmp do
32639: LD_ADDR_VAR 0 7
32643: PUSH
32644: LD_VAR 0 8
32648: PUSH
32649: FOR_IN
32650: IFFALSE 32678
// if i [ 1 ] = b_ext_radio then
32652: LD_VAR 0 7
32656: PUSH
32657: LD_INT 1
32659: ARRAY
32660: PUSH
32661: LD_INT 22
32663: EQUAL
32664: IFFALSE 32676
// begin control := control_remote ;
32666: LD_ADDR_VAR 0 4
32670: PUSH
32671: LD_INT 2
32673: ST_TO_ADDR
// break ;
32674: GO 32678
// end ;
32676: GO 32649
32678: POP
32679: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32680: LD_VAR 0 1
32684: PPUSH
32685: LD_VAR 0 2
32689: PPUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: LD_VAR 0 4
32699: PPUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: CALL_OW 448
32709: IFFALSE 32744
// begin result := [ chassis , engine , control , weapon ] ;
32711: LD_ADDR_VAR 0 6
32715: PUSH
32716: LD_VAR 0 2
32720: PUSH
32721: LD_VAR 0 3
32725: PUSH
32726: LD_VAR 0 4
32730: PUSH
32731: LD_VAR 0 5
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
// exit ;
32742: GO 33166
// end ; _chassis := AvailableChassisList ( factory ) ;
32744: LD_ADDR_VAR 0 9
32748: PUSH
32749: LD_VAR 0 1
32753: PPUSH
32754: CALL_OW 475
32758: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32759: LD_ADDR_VAR 0 11
32763: PUSH
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 476
32773: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32774: LD_ADDR_VAR 0 12
32778: PUSH
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 477
32788: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32789: LD_ADDR_VAR 0 10
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 478
32803: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32804: LD_VAR 0 9
32808: NOT
32809: IFTRUE 32818
32811: PUSH
32812: LD_VAR 0 11
32816: NOT
32817: OR
32818: IFTRUE 32827
32820: PUSH
32821: LD_VAR 0 12
32825: NOT
32826: OR
32827: IFTRUE 32836
32829: PUSH
32830: LD_VAR 0 10
32834: NOT
32835: OR
32836: IFFALSE 32871
// begin result := [ chassis , engine , control , weapon ] ;
32838: LD_ADDR_VAR 0 6
32842: PUSH
32843: LD_VAR 0 2
32847: PUSH
32848: LD_VAR 0 3
32852: PUSH
32853: LD_VAR 0 4
32857: PUSH
32858: LD_VAR 0 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
// exit ;
32869: GO 33166
// end ; if not chassis in _chassis then
32871: LD_VAR 0 2
32875: PUSH
32876: LD_VAR 0 9
32880: IN
32881: NOT
32882: IFFALSE 32908
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32884: LD_ADDR_VAR 0 2
32888: PUSH
32889: LD_VAR 0 9
32893: PUSH
32894: LD_INT 1
32896: PPUSH
32897: LD_VAR 0 9
32901: PPUSH
32902: CALL_OW 12
32906: ARRAY
32907: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32908: LD_VAR 0 2
32912: PPUSH
32913: LD_VAR 0 3
32917: PPUSH
32918: CALL 33171 0 2
32922: NOT
32923: IFFALSE 32984
// repeat engine := _engine [ 1 ] ;
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_VAR 0 11
32934: PUSH
32935: LD_INT 1
32937: ARRAY
32938: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32939: LD_ADDR_VAR 0 11
32943: PUSH
32944: LD_VAR 0 11
32948: PPUSH
32949: LD_INT 1
32951: PPUSH
32952: CALL_OW 3
32956: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32957: LD_VAR 0 2
32961: PPUSH
32962: LD_VAR 0 3
32966: PPUSH
32967: CALL 33171 0 2
32971: IFTRUE 32982
32973: PUSH
32974: LD_VAR 0 11
32978: PUSH
32979: EMPTY
32980: EQUAL
32981: OR
32982: IFFALSE 32925
// if not control in _control then
32984: LD_VAR 0 4
32988: PUSH
32989: LD_VAR 0 12
32993: IN
32994: NOT
32995: IFFALSE 33021
// control := _control [ rand ( 1 , _control ) ] ;
32997: LD_ADDR_VAR 0 4
33001: PUSH
33002: LD_VAR 0 12
33006: PUSH
33007: LD_INT 1
33009: PPUSH
33010: LD_VAR 0 12
33014: PPUSH
33015: CALL_OW 12
33019: ARRAY
33020: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33021: LD_VAR 0 2
33025: PPUSH
33026: LD_VAR 0 5
33030: PPUSH
33031: CALL 33393 0 2
33035: NOT
33036: IFFALSE 33097
// repeat weapon := _weapon [ 1 ] ;
33038: LD_ADDR_VAR 0 5
33042: PUSH
33043: LD_VAR 0 10
33047: PUSH
33048: LD_INT 1
33050: ARRAY
33051: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33052: LD_ADDR_VAR 0 10
33056: PUSH
33057: LD_VAR 0 10
33061: PPUSH
33062: LD_INT 1
33064: PPUSH
33065: CALL_OW 3
33069: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33070: LD_VAR 0 2
33074: PPUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: CALL 33393 0 2
33084: IFTRUE 33095
33086: PUSH
33087: LD_VAR 0 10
33091: PUSH
33092: EMPTY
33093: EQUAL
33094: OR
33095: IFFALSE 33038
// result := [ ] ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: EMPTY
33103: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33104: LD_VAR 0 1
33108: PPUSH
33109: LD_VAR 0 2
33113: PPUSH
33114: LD_VAR 0 3
33118: PPUSH
33119: LD_VAR 0 4
33123: PPUSH
33124: LD_VAR 0 5
33128: PPUSH
33129: CALL_OW 448
33133: IFFALSE 33166
// result := [ chassis , engine , control , weapon ] ;
33135: LD_ADDR_VAR 0 6
33139: PUSH
33140: LD_VAR 0 2
33144: PUSH
33145: LD_VAR 0 3
33149: PUSH
33150: LD_VAR 0 4
33154: PUSH
33155: LD_VAR 0 5
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
// end ;
33166: LD_VAR 0 6
33170: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33171: LD_INT 0
33173: PPUSH
// if not chassis or not engine then
33174: LD_VAR 0 1
33178: NOT
33179: IFTRUE 33188
33181: PUSH
33182: LD_VAR 0 2
33186: NOT
33187: OR
33188: IFFALSE 33192
// exit ;
33190: GO 33388
// case engine of engine_solar :
33192: LD_VAR 0 2
33196: PUSH
33197: LD_INT 2
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33243
33205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 11
33213: PUSH
33214: LD_INT 12
33216: PUSH
33217: LD_INT 13
33219: PUSH
33220: LD_INT 14
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: LD_INT 3
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: ST_TO_ADDR
33241: GO 33372
33243: LD_INT 1
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33313
33251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_INT 11
33259: PUSH
33260: LD_INT 12
33262: PUSH
33263: LD_INT 13
33265: PUSH
33266: LD_INT 14
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: LD_INT 4
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: LD_INT 21
33286: PUSH
33287: LD_INT 23
33289: PUSH
33290: LD_INT 22
33292: PUSH
33293: LD_INT 24
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: ST_TO_ADDR
33311: GO 33372
33313: LD_INT 3
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33371
33321: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 13
33329: PUSH
33330: LD_INT 14
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: LD_INT 3
33338: PUSH
33339: LD_INT 4
33341: PUSH
33342: LD_INT 5
33344: PUSH
33345: LD_INT 21
33347: PUSH
33348: LD_INT 22
33350: PUSH
33351: LD_INT 23
33353: PUSH
33354: LD_INT 24
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
33369: GO 33372
33371: POP
// result := ( chassis in result ) ;
33372: LD_ADDR_VAR 0 3
33376: PUSH
33377: LD_VAR 0 1
33381: PUSH
33382: LD_VAR 0 3
33386: IN
33387: ST_TO_ADDR
// end ;
33388: LD_VAR 0 3
33392: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33393: LD_INT 0
33395: PPUSH
// if not chassis or not weapon then
33396: LD_VAR 0 1
33400: NOT
33401: IFTRUE 33410
33403: PUSH
33404: LD_VAR 0 2
33408: NOT
33409: OR
33410: IFFALSE 33414
// exit ;
33412: GO 34508
// case weapon of us_machine_gun :
33414: LD_VAR 0 2
33418: PUSH
33419: LD_INT 2
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33457
33427: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: LD_INT 3
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: LD_INT 5
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
33455: GO 34492
33457: LD_INT 3
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33465
33463: GO 33495
33465: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33466: LD_ADDR_VAR 0 3
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: LD_INT 4
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: ST_TO_ADDR
33493: GO 34492
33495: LD_INT 11
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33503
33501: GO 33533
33503: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33504: LD_ADDR_VAR 0 3
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: LD_INT 4
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: ST_TO_ADDR
33531: GO 34492
33533: LD_INT 4
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33567
33541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 3
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
33565: GO 34492
33567: LD_INT 5
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33575
33573: GO 33601
33575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33576: LD_ADDR_VAR 0 3
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: LD_INT 5
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
33599: GO 34492
33601: LD_INT 9
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33609
33607: GO 33635
33609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: LD_INT 4
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 34492
33635: LD_INT 7
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33669
33643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
33667: GO 34492
33669: LD_INT 12
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33703
33677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 4
33691: PUSH
33692: LD_INT 5
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
33701: GO 34492
33703: LD_INT 13
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33737
33711: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33712: LD_ADDR_VAR 0 3
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: LD_INT 4
33725: PUSH
33726: LD_INT 5
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
33735: GO 34492
33737: LD_INT 14
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33763
33745: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_INT 4
33753: PUSH
33754: LD_INT 5
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 34492
33763: LD_INT 6
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33789
33771: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_INT 4
33779: PUSH
33780: LD_INT 5
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: ST_TO_ADDR
33787: GO 34492
33789: LD_INT 10
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33815
33797: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: ST_TO_ADDR
33813: GO 34492
33815: LD_INT 22
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33823
33821: GO 33849
33823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33824: LD_ADDR_VAR 0 3
33828: PUSH
33829: LD_INT 11
33831: PUSH
33832: LD_INT 12
33834: PUSH
33835: LD_INT 13
33837: PUSH
33838: LD_INT 14
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: ST_TO_ADDR
33847: GO 34492
33849: LD_INT 23
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33883
33857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 11
33865: PUSH
33866: LD_INT 12
33868: PUSH
33869: LD_INT 13
33871: PUSH
33872: LD_INT 14
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: ST_TO_ADDR
33881: GO 34492
33883: LD_INT 24
33885: DOUBLE
33886: EQUAL
33887: IFTRUE 33891
33889: GO 33917
33891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_INT 11
33899: PUSH
33900: LD_INT 12
33902: PUSH
33903: LD_INT 13
33905: PUSH
33906: LD_INT 14
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
33915: GO 34492
33917: LD_INT 30
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 33951
33925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: LD_INT 11
33933: PUSH
33934: LD_INT 12
33936: PUSH
33937: LD_INT 13
33939: PUSH
33940: LD_INT 14
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
33949: GO 34492
33951: LD_INT 25
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33959
33957: GO 33977
33959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_INT 13
33967: PUSH
33968: LD_INT 14
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: ST_TO_ADDR
33975: GO 34492
33977: LD_INT 27
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33985
33983: GO 34003
33985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_INT 13
33993: PUSH
33994: LD_INT 14
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: ST_TO_ADDR
34001: GO 34492
34003: LD_INT 92
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34037
34011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_INT 11
34019: PUSH
34020: LD_INT 12
34022: PUSH
34023: LD_INT 13
34025: PUSH
34026: LD_INT 14
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
34035: GO 34492
34037: LD_INT 28
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34063
34045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: LD_INT 13
34053: PUSH
34054: LD_INT 14
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: ST_TO_ADDR
34061: GO 34492
34063: LD_INT 29
34065: DOUBLE
34066: EQUAL
34067: IFTRUE 34071
34069: GO 34089
34071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_INT 13
34079: PUSH
34080: LD_INT 14
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 34492
34089: LD_INT 31
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34115
34097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 13
34105: PUSH
34106: LD_INT 14
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: ST_TO_ADDR
34113: GO 34492
34115: LD_INT 26
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34123
34121: GO 34141
34123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34124: LD_ADDR_VAR 0 3
34128: PUSH
34129: LD_INT 13
34131: PUSH
34132: LD_INT 14
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: ST_TO_ADDR
34139: GO 34492
34141: LD_INT 42
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34149
34147: GO 34175
34149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_INT 21
34157: PUSH
34158: LD_INT 22
34160: PUSH
34161: LD_INT 23
34163: PUSH
34164: LD_INT 24
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: ST_TO_ADDR
34173: GO 34492
34175: LD_INT 43
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34183
34181: GO 34209
34183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34184: LD_ADDR_VAR 0 3
34188: PUSH
34189: LD_INT 21
34191: PUSH
34192: LD_INT 22
34194: PUSH
34195: LD_INT 23
34197: PUSH
34198: LD_INT 24
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
34207: GO 34492
34209: LD_INT 44
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34217
34215: GO 34243
34217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_INT 21
34225: PUSH
34226: LD_INT 22
34228: PUSH
34229: LD_INT 23
34231: PUSH
34232: LD_INT 24
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 34492
34243: LD_INT 45
34245: DOUBLE
34246: EQUAL
34247: IFTRUE 34251
34249: GO 34277
34251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34252: LD_ADDR_VAR 0 3
34256: PUSH
34257: LD_INT 21
34259: PUSH
34260: LD_INT 22
34262: PUSH
34263: LD_INT 23
34265: PUSH
34266: LD_INT 24
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: ST_TO_ADDR
34275: GO 34492
34277: LD_INT 49
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34311
34285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34286: LD_ADDR_VAR 0 3
34290: PUSH
34291: LD_INT 21
34293: PUSH
34294: LD_INT 22
34296: PUSH
34297: LD_INT 23
34299: PUSH
34300: LD_INT 24
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
34309: GO 34492
34311: LD_INT 51
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34345
34319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34320: LD_ADDR_VAR 0 3
34324: PUSH
34325: LD_INT 21
34327: PUSH
34328: LD_INT 22
34330: PUSH
34331: LD_INT 23
34333: PUSH
34334: LD_INT 24
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
34343: GO 34492
34345: LD_INT 52
34347: DOUBLE
34348: EQUAL
34349: IFTRUE 34353
34351: GO 34379
34353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 21
34361: PUSH
34362: LD_INT 22
34364: PUSH
34365: LD_INT 23
34367: PUSH
34368: LD_INT 24
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
34377: GO 34492
34379: LD_INT 53
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 34405
34387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 23
34395: PUSH
34396: LD_INT 24
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: ST_TO_ADDR
34403: GO 34492
34405: LD_INT 46
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34431
34413: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 23
34421: PUSH
34422: LD_INT 24
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: ST_TO_ADDR
34429: GO 34492
34431: LD_INT 47
34433: DOUBLE
34434: EQUAL
34435: IFTRUE 34439
34437: GO 34457
34439: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34440: LD_ADDR_VAR 0 3
34444: PUSH
34445: LD_INT 23
34447: PUSH
34448: LD_INT 24
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: ST_TO_ADDR
34455: GO 34492
34457: LD_INT 98
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34491
34465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_INT 21
34473: PUSH
34474: LD_INT 22
34476: PUSH
34477: LD_INT 23
34479: PUSH
34480: LD_INT 24
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
34489: GO 34492
34491: POP
// result := ( chassis in result ) ;
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_VAR 0 1
34501: PUSH
34502: LD_VAR 0 3
34506: IN
34507: ST_TO_ADDR
// end ;
34508: LD_VAR 0 3
34512: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34513: LD_INT 0
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
// result := array ;
34522: LD_ADDR_VAR 0 5
34526: PUSH
34527: LD_VAR 0 1
34531: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34532: LD_VAR 0 1
34536: NOT
34537: IFTRUE 34546
34539: PUSH
34540: LD_VAR 0 2
34544: NOT
34545: OR
34546: IFTRUE 34555
34548: PUSH
34549: LD_VAR 0 3
34553: NOT
34554: OR
34555: IFTRUE 34569
34557: PUSH
34558: LD_VAR 0 2
34562: PUSH
34563: LD_VAR 0 1
34567: GREATER
34568: OR
34569: IFTRUE 34583
34571: PUSH
34572: LD_VAR 0 3
34576: PUSH
34577: LD_VAR 0 1
34581: GREATER
34582: OR
34583: IFFALSE 34587
// exit ;
34585: GO 34883
// if direction then
34587: LD_VAR 0 4
34591: IFFALSE 34655
// begin d := 1 ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_INT 1
34600: ST_TO_ADDR
// if i_from > i_to then
34601: LD_VAR 0 2
34605: PUSH
34606: LD_VAR 0 3
34610: GREATER
34611: IFFALSE 34637
// length := ( array - i_from ) + i_to else
34613: LD_ADDR_VAR 0 11
34617: PUSH
34618: LD_VAR 0 1
34622: PUSH
34623: LD_VAR 0 2
34627: MINUS
34628: PUSH
34629: LD_VAR 0 3
34633: PLUS
34634: ST_TO_ADDR
34635: GO 34653
// length := i_to - i_from ;
34637: LD_ADDR_VAR 0 11
34641: PUSH
34642: LD_VAR 0 3
34646: PUSH
34647: LD_VAR 0 2
34651: MINUS
34652: ST_TO_ADDR
// end else
34653: GO 34716
// begin d := - 1 ;
34655: LD_ADDR_VAR 0 9
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: ST_TO_ADDR
// if i_from > i_to then
34664: LD_VAR 0 2
34668: PUSH
34669: LD_VAR 0 3
34673: GREATER
34674: IFFALSE 34694
// length := i_from - i_to else
34676: LD_ADDR_VAR 0 11
34680: PUSH
34681: LD_VAR 0 2
34685: PUSH
34686: LD_VAR 0 3
34690: MINUS
34691: ST_TO_ADDR
34692: GO 34716
// length := ( array - i_to ) + i_from ;
34694: LD_ADDR_VAR 0 11
34698: PUSH
34699: LD_VAR 0 1
34703: PUSH
34704: LD_VAR 0 3
34708: MINUS
34709: PUSH
34710: LD_VAR 0 2
34714: PLUS
34715: ST_TO_ADDR
// end ; if not length then
34716: LD_VAR 0 11
34720: NOT
34721: IFFALSE 34725
// exit ;
34723: GO 34883
// tmp := array ;
34725: LD_ADDR_VAR 0 10
34729: PUSH
34730: LD_VAR 0 1
34734: ST_TO_ADDR
// for i = 1 to length do
34735: LD_ADDR_VAR 0 6
34739: PUSH
34740: DOUBLE
34741: LD_INT 1
34743: DEC
34744: ST_TO_ADDR
34745: LD_VAR 0 11
34749: PUSH
34750: FOR_TO
34751: IFFALSE 34871
// begin for j = 1 to array do
34753: LD_ADDR_VAR 0 7
34757: PUSH
34758: DOUBLE
34759: LD_INT 1
34761: DEC
34762: ST_TO_ADDR
34763: LD_VAR 0 1
34767: PUSH
34768: FOR_TO
34769: IFFALSE 34857
// begin k := j + d ;
34771: LD_ADDR_VAR 0 8
34775: PUSH
34776: LD_VAR 0 7
34780: PUSH
34781: LD_VAR 0 9
34785: PLUS
34786: ST_TO_ADDR
// if k > array then
34787: LD_VAR 0 8
34791: PUSH
34792: LD_VAR 0 1
34796: GREATER
34797: IFFALSE 34807
// k := 1 ;
34799: LD_ADDR_VAR 0 8
34803: PUSH
34804: LD_INT 1
34806: ST_TO_ADDR
// if not k then
34807: LD_VAR 0 8
34811: NOT
34812: IFFALSE 34824
// k := array ;
34814: LD_ADDR_VAR 0 8
34818: PUSH
34819: LD_VAR 0 1
34823: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34824: LD_ADDR_VAR 0 10
34828: PUSH
34829: LD_VAR 0 10
34833: PPUSH
34834: LD_VAR 0 8
34838: PPUSH
34839: LD_VAR 0 1
34843: PUSH
34844: LD_VAR 0 7
34848: ARRAY
34849: PPUSH
34850: CALL_OW 1
34854: ST_TO_ADDR
// end ;
34855: GO 34768
34857: POP
34858: POP
// array := tmp ;
34859: LD_ADDR_VAR 0 1
34863: PUSH
34864: LD_VAR 0 10
34868: ST_TO_ADDR
// end ;
34869: GO 34750
34871: POP
34872: POP
// result := array ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_VAR 0 1
34882: ST_TO_ADDR
// end ;
34883: LD_VAR 0 5
34887: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34888: LD_INT 0
34890: PPUSH
34891: PPUSH
// result := 0 ;
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_INT 0
34899: ST_TO_ADDR
// if not array or not value in array then
34900: LD_VAR 0 1
34904: NOT
34905: IFTRUE 34920
34907: PUSH
34908: LD_VAR 0 2
34912: PUSH
34913: LD_VAR 0 1
34917: IN
34918: NOT
34919: OR
34920: IFFALSE 34924
// exit ;
34922: GO 34978
// for i = 1 to array do
34924: LD_ADDR_VAR 0 4
34928: PUSH
34929: DOUBLE
34930: LD_INT 1
34932: DEC
34933: ST_TO_ADDR
34934: LD_VAR 0 1
34938: PUSH
34939: FOR_TO
34940: IFFALSE 34976
// if value = array [ i ] then
34942: LD_VAR 0 2
34946: PUSH
34947: LD_VAR 0 1
34951: PUSH
34952: LD_VAR 0 4
34956: ARRAY
34957: EQUAL
34958: IFFALSE 34974
// begin result := i ;
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_VAR 0 4
34969: ST_TO_ADDR
// exit ;
34970: POP
34971: POP
34972: GO 34978
// end ;
34974: GO 34939
34976: POP
34977: POP
// end ;
34978: LD_VAR 0 3
34982: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34983: LD_INT 0
34985: PPUSH
// vc_chassis := chassis ;
34986: LD_ADDR_OWVAR 37
34990: PUSH
34991: LD_VAR 0 1
34995: ST_TO_ADDR
// vc_engine := engine ;
34996: LD_ADDR_OWVAR 39
35000: PUSH
35001: LD_VAR 0 2
35005: ST_TO_ADDR
// vc_control := control ;
35006: LD_ADDR_OWVAR 38
35010: PUSH
35011: LD_VAR 0 3
35015: ST_TO_ADDR
// vc_weapon := weapon ;
35016: LD_ADDR_OWVAR 40
35020: PUSH
35021: LD_VAR 0 4
35025: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35026: LD_ADDR_OWVAR 41
35030: PUSH
35031: LD_VAR 0 5
35035: ST_TO_ADDR
// end ;
35036: LD_VAR 0 6
35040: RET
// export function WantPlant ( unit ) ; var task ; begin
35041: LD_INT 0
35043: PPUSH
35044: PPUSH
// result := false ;
35045: LD_ADDR_VAR 0 2
35049: PUSH
35050: LD_INT 0
35052: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_VAR 0 1
35062: PPUSH
35063: CALL_OW 437
35067: ST_TO_ADDR
// if task then
35068: LD_VAR 0 3
35072: IFFALSE 35100
// if task [ 1 ] [ 1 ] = p then
35074: LD_VAR 0 3
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PUSH
35083: LD_INT 1
35085: ARRAY
35086: PUSH
35087: LD_STRING p
35089: EQUAL
35090: IFFALSE 35100
// result := true ;
35092: LD_ADDR_VAR 0 2
35096: PUSH
35097: LD_INT 1
35099: ST_TO_ADDR
// end ;
35100: LD_VAR 0 2
35104: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35105: LD_INT 0
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
// if pos < 1 then
35111: LD_VAR 0 2
35115: PUSH
35116: LD_INT 1
35118: LESS
35119: IFFALSE 35123
// exit ;
35121: GO 35426
// if pos = 1 then
35123: LD_VAR 0 2
35127: PUSH
35128: LD_INT 1
35130: EQUAL
35131: IFFALSE 35164
// result := Replace ( arr , pos [ 1 ] , value ) else
35133: LD_ADDR_VAR 0 4
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: LD_VAR 0 2
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: PPUSH
35152: LD_VAR 0 3
35156: PPUSH
35157: CALL_OW 1
35161: ST_TO_ADDR
35162: GO 35426
// begin tmp := arr ;
35164: LD_ADDR_VAR 0 6
35168: PUSH
35169: LD_VAR 0 1
35173: ST_TO_ADDR
// s_arr := [ tmp ] ;
35174: LD_ADDR_VAR 0 7
35178: PUSH
35179: LD_VAR 0 6
35183: PUSH
35184: EMPTY
35185: LIST
35186: ST_TO_ADDR
// for i = 1 to pos - 1 do
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: DOUBLE
35193: LD_INT 1
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 2
35201: PUSH
35202: LD_INT 1
35204: MINUS
35205: PUSH
35206: FOR_TO
35207: IFFALSE 35252
// begin tmp := tmp [ pos [ i ] ] ;
35209: LD_ADDR_VAR 0 6
35213: PUSH
35214: LD_VAR 0 6
35218: PUSH
35219: LD_VAR 0 2
35223: PUSH
35224: LD_VAR 0 5
35228: ARRAY
35229: ARRAY
35230: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35231: LD_ADDR_VAR 0 7
35235: PUSH
35236: LD_VAR 0 7
35240: PUSH
35241: LD_VAR 0 6
35245: PUSH
35246: EMPTY
35247: LIST
35248: ADD
35249: ST_TO_ADDR
// end ;
35250: GO 35206
35252: POP
35253: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35254: LD_ADDR_VAR 0 6
35258: PUSH
35259: LD_VAR 0 6
35263: PPUSH
35264: LD_VAR 0 2
35268: PUSH
35269: LD_VAR 0 2
35273: ARRAY
35274: PPUSH
35275: LD_VAR 0 3
35279: PPUSH
35280: CALL_OW 1
35284: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35285: LD_ADDR_VAR 0 7
35289: PUSH
35290: LD_VAR 0 7
35294: PPUSH
35295: LD_VAR 0 7
35299: PPUSH
35300: LD_VAR 0 6
35304: PPUSH
35305: CALL_OW 1
35309: ST_TO_ADDR
// for i = s_arr downto 2 do
35310: LD_ADDR_VAR 0 5
35314: PUSH
35315: DOUBLE
35316: LD_VAR 0 7
35320: INC
35321: ST_TO_ADDR
35322: LD_INT 2
35324: PUSH
35325: FOR_DOWNTO
35326: IFFALSE 35410
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35328: LD_ADDR_VAR 0 6
35332: PUSH
35333: LD_VAR 0 7
35337: PUSH
35338: LD_VAR 0 5
35342: PUSH
35343: LD_INT 1
35345: MINUS
35346: ARRAY
35347: PPUSH
35348: LD_VAR 0 2
35352: PUSH
35353: LD_VAR 0 5
35357: PUSH
35358: LD_INT 1
35360: MINUS
35361: ARRAY
35362: PPUSH
35363: LD_VAR 0 7
35367: PUSH
35368: LD_VAR 0 5
35372: ARRAY
35373: PPUSH
35374: CALL_OW 1
35378: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35379: LD_ADDR_VAR 0 7
35383: PUSH
35384: LD_VAR 0 7
35388: PPUSH
35389: LD_VAR 0 5
35393: PUSH
35394: LD_INT 1
35396: MINUS
35397: PPUSH
35398: LD_VAR 0 6
35402: PPUSH
35403: CALL_OW 1
35407: ST_TO_ADDR
// end ;
35408: GO 35325
35410: POP
35411: POP
// result := s_arr [ 1 ] ;
35412: LD_ADDR_VAR 0 4
35416: PUSH
35417: LD_VAR 0 7
35421: PUSH
35422: LD_INT 1
35424: ARRAY
35425: ST_TO_ADDR
// end ; end ;
35426: LD_VAR 0 4
35430: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
// if not list then
35435: LD_VAR 0 1
35439: NOT
35440: IFFALSE 35444
// exit ;
35442: GO 35535
// i := list [ pos1 ] ;
35444: LD_ADDR_VAR 0 5
35448: PUSH
35449: LD_VAR 0 1
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: ST_TO_ADDR
// if not i then
35460: LD_VAR 0 5
35464: NOT
35465: IFFALSE 35469
// exit ;
35467: GO 35535
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35469: LD_ADDR_VAR 0 1
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: LD_VAR 0 2
35483: PPUSH
35484: LD_VAR 0 1
35488: PUSH
35489: LD_VAR 0 3
35493: ARRAY
35494: PPUSH
35495: CALL_OW 1
35499: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35500: LD_ADDR_VAR 0 1
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: LD_VAR 0 3
35514: PPUSH
35515: LD_VAR 0 5
35519: PPUSH
35520: CALL_OW 1
35524: ST_TO_ADDR
// result := list ;
35525: LD_ADDR_VAR 0 4
35529: PUSH
35530: LD_VAR 0 1
35534: ST_TO_ADDR
// end ;
35535: LD_VAR 0 4
35539: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35540: LD_INT 0
35542: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35543: LD_ADDR_VAR 0 5
35547: PUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 250
35557: PPUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL_OW 251
35567: PPUSH
35568: LD_VAR 0 2
35572: PPUSH
35573: LD_VAR 0 3
35577: PPUSH
35578: LD_VAR 0 4
35582: PPUSH
35583: CALL 35965 0 5
35587: ST_TO_ADDR
// end ;
35588: LD_VAR 0 5
35592: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35593: LD_INT 0
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
// if not list or not unit then
35599: LD_VAR 0 2
35603: NOT
35604: IFTRUE 35613
35606: PUSH
35607: LD_VAR 0 1
35611: NOT
35612: OR
35613: IFFALSE 35617
// exit ;
35615: GO 35960
// result := [ ] ;
35617: LD_ADDR_VAR 0 5
35621: PUSH
35622: EMPTY
35623: ST_TO_ADDR
// for i in list do
35624: LD_ADDR_VAR 0 6
35628: PUSH
35629: LD_VAR 0 2
35633: PUSH
35634: FOR_IN
35635: IFFALSE 35853
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35637: LD_ADDR_VAR 0 8
35641: PUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: LD_VAR 0 6
35651: PUSH
35652: LD_INT 1
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 6
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PPUSH
35665: CALL_OW 297
35669: ST_TO_ADDR
// if not Count ( result ) then
35670: LD_VAR 0 5
35674: PPUSH
35675: CALL 32187 0 1
35679: NOT
35680: IFFALSE 35713
// begin result := Join ( result , [ i , tmp ] ) ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_VAR 0 5
35691: PPUSH
35692: LD_VAR 0 6
35696: PUSH
35697: LD_VAR 0 8
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PPUSH
35706: CALL 68153 0 2
35710: ST_TO_ADDR
// continue ;
35711: GO 35634
// end ; if result [ result ] [ 2 ] <= tmp then
35713: LD_VAR 0 5
35717: PUSH
35718: LD_VAR 0 5
35722: ARRAY
35723: PUSH
35724: LD_INT 2
35726: ARRAY
35727: PUSH
35728: LD_VAR 0 8
35732: LESSEQUAL
35733: IFFALSE 35766
// result := Join ( result , [ i , tmp ] ) else
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 5
35744: PPUSH
35745: LD_VAR 0 6
35749: PUSH
35750: LD_VAR 0 8
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PPUSH
35759: CALL 68153 0 2
35763: ST_TO_ADDR
35764: GO 35851
// begin for j := 1 to Count ( result ) do
35766: LD_ADDR_VAR 0 7
35770: PUSH
35771: DOUBLE
35772: LD_INT 1
35774: DEC
35775: ST_TO_ADDR
35776: LD_VAR 0 5
35780: PPUSH
35781: CALL 32187 0 1
35785: PUSH
35786: FOR_TO
35787: IFFALSE 35849
// begin if tmp < result [ j ] [ 2 ] then
35789: LD_VAR 0 8
35793: PUSH
35794: LD_VAR 0 5
35798: PUSH
35799: LD_VAR 0 7
35803: ARRAY
35804: PUSH
35805: LD_INT 2
35807: ARRAY
35808: LESS
35809: IFFALSE 35847
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35811: LD_ADDR_VAR 0 5
35815: PUSH
35816: LD_VAR 0 5
35820: PPUSH
35821: LD_VAR 0 7
35825: PPUSH
35826: LD_VAR 0 6
35830: PUSH
35831: LD_VAR 0 8
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PPUSH
35840: CALL_OW 2
35844: ST_TO_ADDR
// break ;
35845: GO 35849
// end ; end ;
35847: GO 35786
35849: POP
35850: POP
// end ; end ;
35851: GO 35634
35853: POP
35854: POP
// if result and not asc then
35855: LD_VAR 0 5
35859: IFFALSE 35868
35861: PUSH
35862: LD_VAR 0 3
35866: NOT
35867: AND
35868: IFFALSE 35885
// result := ReverseArray ( result ) ;
35870: LD_ADDR_VAR 0 5
35874: PUSH
35875: LD_VAR 0 5
35879: PPUSH
35880: CALL 63243 0 1
35884: ST_TO_ADDR
// tmp := [ ] ;
35885: LD_ADDR_VAR 0 8
35889: PUSH
35890: EMPTY
35891: ST_TO_ADDR
// if mode then
35892: LD_VAR 0 4
35896: IFFALSE 35960
// begin for i := 1 to result do
35898: LD_ADDR_VAR 0 6
35902: PUSH
35903: DOUBLE
35904: LD_INT 1
35906: DEC
35907: ST_TO_ADDR
35908: LD_VAR 0 5
35912: PUSH
35913: FOR_TO
35914: IFFALSE 35948
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35916: LD_ADDR_VAR 0 8
35920: PUSH
35921: LD_VAR 0 8
35925: PPUSH
35926: LD_VAR 0 5
35930: PUSH
35931: LD_VAR 0 6
35935: ARRAY
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PPUSH
35941: CALL 68153 0 2
35945: ST_TO_ADDR
35946: GO 35913
35948: POP
35949: POP
// result := tmp ;
35950: LD_ADDR_VAR 0 5
35954: PUSH
35955: LD_VAR 0 8
35959: ST_TO_ADDR
// end ; end ;
35960: LD_VAR 0 5
35964: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35965: LD_INT 0
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
// if not list then
35971: LD_VAR 0 3
35975: NOT
35976: IFFALSE 35980
// exit ;
35978: GO 36370
// result := [ ] ;
35980: LD_ADDR_VAR 0 6
35984: PUSH
35985: EMPTY
35986: ST_TO_ADDR
// for i in list do
35987: LD_ADDR_VAR 0 7
35991: PUSH
35992: LD_VAR 0 3
35996: PUSH
35997: FOR_IN
35998: IFFALSE 36200
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_VAR 0 7
36009: PPUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: LD_VAR 0 2
36019: PPUSH
36020: CALL_OW 297
36024: ST_TO_ADDR
// if not result then
36025: LD_VAR 0 6
36029: NOT
36030: IFFALSE 36056
// result := [ [ i , tmp ] ] else
36032: LD_ADDR_VAR 0 6
36036: PUSH
36037: LD_VAR 0 7
36041: PUSH
36042: LD_VAR 0 9
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: ST_TO_ADDR
36054: GO 36198
// begin if result [ result ] [ 2 ] <= tmp then
36056: LD_VAR 0 6
36060: PUSH
36061: LD_VAR 0 6
36065: ARRAY
36066: PUSH
36067: LD_INT 2
36069: ARRAY
36070: PUSH
36071: LD_VAR 0 9
36075: LESSEQUAL
36076: IFFALSE 36118
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36078: LD_ADDR_VAR 0 6
36082: PUSH
36083: LD_VAR 0 6
36087: PPUSH
36088: LD_VAR 0 6
36092: PUSH
36093: LD_INT 1
36095: PLUS
36096: PPUSH
36097: LD_VAR 0 7
36101: PUSH
36102: LD_VAR 0 9
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PPUSH
36111: CALL_OW 2
36115: ST_TO_ADDR
36116: GO 36198
// for j := 1 to result do
36118: LD_ADDR_VAR 0 8
36122: PUSH
36123: DOUBLE
36124: LD_INT 1
36126: DEC
36127: ST_TO_ADDR
36128: LD_VAR 0 6
36132: PUSH
36133: FOR_TO
36134: IFFALSE 36196
// begin if tmp < result [ j ] [ 2 ] then
36136: LD_VAR 0 9
36140: PUSH
36141: LD_VAR 0 6
36145: PUSH
36146: LD_VAR 0 8
36150: ARRAY
36151: PUSH
36152: LD_INT 2
36154: ARRAY
36155: LESS
36156: IFFALSE 36194
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36158: LD_ADDR_VAR 0 6
36162: PUSH
36163: LD_VAR 0 6
36167: PPUSH
36168: LD_VAR 0 8
36172: PPUSH
36173: LD_VAR 0 7
36177: PUSH
36178: LD_VAR 0 9
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PPUSH
36187: CALL_OW 2
36191: ST_TO_ADDR
// break ;
36192: GO 36196
// end ; end ;
36194: GO 36133
36196: POP
36197: POP
// end ; end ;
36198: GO 35997
36200: POP
36201: POP
// if result and not asc then
36202: LD_VAR 0 6
36206: IFFALSE 36215
36208: PUSH
36209: LD_VAR 0 4
36213: NOT
36214: AND
36215: IFFALSE 36290
// begin tmp := result ;
36217: LD_ADDR_VAR 0 9
36221: PUSH
36222: LD_VAR 0 6
36226: ST_TO_ADDR
// for i = tmp downto 1 do
36227: LD_ADDR_VAR 0 7
36231: PUSH
36232: DOUBLE
36233: LD_VAR 0 9
36237: INC
36238: ST_TO_ADDR
36239: LD_INT 1
36241: PUSH
36242: FOR_DOWNTO
36243: IFFALSE 36288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36245: LD_ADDR_VAR 0 6
36249: PUSH
36250: LD_VAR 0 6
36254: PPUSH
36255: LD_VAR 0 9
36259: PUSH
36260: LD_VAR 0 7
36264: MINUS
36265: PUSH
36266: LD_INT 1
36268: PLUS
36269: PPUSH
36270: LD_VAR 0 9
36274: PUSH
36275: LD_VAR 0 7
36279: ARRAY
36280: PPUSH
36281: CALL_OW 1
36285: ST_TO_ADDR
36286: GO 36242
36288: POP
36289: POP
// end ; tmp := [ ] ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: EMPTY
36296: ST_TO_ADDR
// if mode then
36297: LD_VAR 0 5
36301: IFFALSE 36370
// begin for i = 1 to result do
36303: LD_ADDR_VAR 0 7
36307: PUSH
36308: DOUBLE
36309: LD_INT 1
36311: DEC
36312: ST_TO_ADDR
36313: LD_VAR 0 6
36317: PUSH
36318: FOR_TO
36319: IFFALSE 36358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36321: LD_ADDR_VAR 0 9
36325: PUSH
36326: LD_VAR 0 9
36330: PPUSH
36331: LD_VAR 0 7
36335: PPUSH
36336: LD_VAR 0 6
36340: PUSH
36341: LD_VAR 0 7
36345: ARRAY
36346: PUSH
36347: LD_INT 1
36349: ARRAY
36350: PPUSH
36351: CALL_OW 1
36355: ST_TO_ADDR
36356: GO 36318
36358: POP
36359: POP
// result := tmp ;
36360: LD_ADDR_VAR 0 6
36364: PUSH
36365: LD_VAR 0 9
36369: ST_TO_ADDR
// end ; end ;
36370: LD_VAR 0 6
36374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36383: LD_ADDR_VAR 0 5
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
// if not x or not y then
36405: LD_VAR 0 2
36409: NOT
36410: IFTRUE 36419
36412: PUSH
36413: LD_VAR 0 3
36417: NOT
36418: OR
36419: IFFALSE 36423
// exit ;
36421: GO 38079
// if not range then
36423: LD_VAR 0 4
36427: NOT
36428: IFFALSE 36438
// range := 10 ;
36430: LD_ADDR_VAR 0 4
36434: PUSH
36435: LD_INT 10
36437: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36438: LD_ADDR_VAR 0 8
36442: PUSH
36443: LD_INT 81
36445: PUSH
36446: LD_VAR 0 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 92
36457: PUSH
36458: LD_VAR 0 2
36462: PUSH
36463: LD_VAR 0 3
36467: PUSH
36468: LD_VAR 0 4
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 21
36484: PUSH
36485: LD_INT 3
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PPUSH
36501: CALL_OW 69
36505: ST_TO_ADDR
// if not tmp then
36506: LD_VAR 0 8
36510: NOT
36511: IFFALSE 36515
// exit ;
36513: GO 38079
// for i in tmp do
36515: LD_ADDR_VAR 0 6
36519: PUSH
36520: LD_VAR 0 8
36524: PUSH
36525: FOR_IN
36526: IFFALSE 38054
// begin points := [ 0 , 0 , 0 ] ;
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
// bpoints := 1 ;
36547: LD_ADDR_VAR 0 10
36551: PUSH
36552: LD_INT 1
36554: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36555: LD_VAR 0 6
36559: PPUSH
36560: CALL_OW 247
36564: PUSH
36565: LD_INT 1
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36573
36571: GO 37155
36573: POP
// begin if GetClass ( i ) = 1 then
36574: LD_VAR 0 6
36578: PPUSH
36579: CALL_OW 257
36583: PUSH
36584: LD_INT 1
36586: EQUAL
36587: IFFALSE 36608
// points := [ 10 , 5 , 3 ] ;
36589: LD_ADDR_VAR 0 9
36593: PUSH
36594: LD_INT 10
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36608: LD_VAR 0 6
36612: PPUSH
36613: CALL_OW 257
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: LD_INT 4
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: IN
36632: IFFALSE 36653
// points := [ 3 , 2 , 1 ] ;
36634: LD_ADDR_VAR 0 9
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36653: LD_VAR 0 6
36657: PPUSH
36658: CALL_OW 257
36662: PUSH
36663: LD_INT 5
36665: EQUAL
36666: IFFALSE 36687
// points := [ 130 , 5 , 2 ] ;
36668: LD_ADDR_VAR 0 9
36672: PUSH
36673: LD_INT 130
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36687: LD_VAR 0 6
36691: PPUSH
36692: CALL_OW 257
36696: PUSH
36697: LD_INT 8
36699: EQUAL
36700: IFFALSE 36721
// points := [ 35 , 35 , 30 ] ;
36702: LD_ADDR_VAR 0 9
36706: PUSH
36707: LD_INT 35
36709: PUSH
36710: LD_INT 35
36712: PUSH
36713: LD_INT 30
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36721: LD_VAR 0 6
36725: PPUSH
36726: CALL_OW 257
36730: PUSH
36731: LD_INT 9
36733: EQUAL
36734: IFFALSE 36755
// points := [ 20 , 55 , 40 ] ;
36736: LD_ADDR_VAR 0 9
36740: PUSH
36741: LD_INT 20
36743: PUSH
36744: LD_INT 55
36746: PUSH
36747: LD_INT 40
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36755: LD_VAR 0 6
36759: PPUSH
36760: CALL_OW 257
36764: PUSH
36765: LD_INT 12
36767: PUSH
36768: LD_INT 16
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: IN
36775: IFFALSE 36796
// points := [ 5 , 3 , 2 ] ;
36777: LD_ADDR_VAR 0 9
36781: PUSH
36782: LD_INT 5
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 257
36805: PUSH
36806: LD_INT 17
36808: EQUAL
36809: IFFALSE 36830
// points := [ 100 , 50 , 75 ] ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_INT 100
36818: PUSH
36819: LD_INT 50
36821: PUSH
36822: LD_INT 75
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36830: LD_VAR 0 6
36834: PPUSH
36835: CALL_OW 257
36839: PUSH
36840: LD_INT 15
36842: EQUAL
36843: IFFALSE 36864
// points := [ 10 , 5 , 3 ] ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_INT 10
36852: PUSH
36853: LD_INT 5
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36864: LD_VAR 0 6
36868: PPUSH
36869: CALL_OW 257
36873: PUSH
36874: LD_INT 14
36876: EQUAL
36877: IFFALSE 36898
// points := [ 10 , 0 , 0 ] ;
36879: LD_ADDR_VAR 0 9
36883: PUSH
36884: LD_INT 10
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36898: LD_VAR 0 6
36902: PPUSH
36903: CALL_OW 257
36907: PUSH
36908: LD_INT 11
36910: EQUAL
36911: IFFALSE 36932
// points := [ 30 , 10 , 5 ] ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_INT 30
36920: PUSH
36921: LD_INT 10
36923: PUSH
36924: LD_INT 5
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36932: LD_VAR 0 1
36936: PPUSH
36937: LD_INT 5
36939: PPUSH
36940: CALL_OW 321
36944: PUSH
36945: LD_INT 2
36947: EQUAL
36948: IFFALSE 36965
// bpoints := bpoints * 1.8 ;
36950: LD_ADDR_VAR 0 10
36954: PUSH
36955: LD_VAR 0 10
36959: PUSH
36960: LD_REAL  1.80000000000000E+0000
36963: MUL
36964: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36965: LD_VAR 0 6
36969: PPUSH
36970: CALL_OW 257
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: LD_INT 4
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: IN
36993: IFFALSE 37013
36995: PUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: LD_INT 51
37003: PPUSH
37004: CALL_OW 321
37008: PUSH
37009: LD_INT 2
37011: EQUAL
37012: AND
37013: IFFALSE 37030
// bpoints := bpoints * 1.2 ;
37015: LD_ADDR_VAR 0 10
37019: PUSH
37020: LD_VAR 0 10
37024: PUSH
37025: LD_REAL  1.20000000000000E+0000
37028: MUL
37029: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37030: LD_VAR 0 6
37034: PPUSH
37035: CALL_OW 257
37039: PUSH
37040: LD_INT 5
37042: PUSH
37043: LD_INT 7
37045: PUSH
37046: LD_INT 9
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: IN
37054: IFFALSE 37074
37056: PUSH
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_INT 52
37064: PPUSH
37065: CALL_OW 321
37069: PUSH
37070: LD_INT 2
37072: EQUAL
37073: AND
37074: IFFALSE 37091
// bpoints := bpoints * 1.5 ;
37076: LD_ADDR_VAR 0 10
37080: PUSH
37081: LD_VAR 0 10
37085: PUSH
37086: LD_REAL  1.50000000000000E+0000
37089: MUL
37090: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37091: LD_VAR 0 1
37095: PPUSH
37096: LD_INT 66
37098: PPUSH
37099: CALL_OW 321
37103: PUSH
37104: LD_INT 2
37106: EQUAL
37107: IFFALSE 37124
// bpoints := bpoints * 1.1 ;
37109: LD_ADDR_VAR 0 10
37113: PUSH
37114: LD_VAR 0 10
37118: PUSH
37119: LD_REAL  1.10000000000000E+0000
37122: MUL
37123: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37124: LD_ADDR_VAR 0 10
37128: PUSH
37129: LD_VAR 0 10
37133: PUSH
37134: LD_VAR 0 6
37138: PPUSH
37139: LD_INT 1
37141: PPUSH
37142: CALL_OW 259
37146: PUSH
37147: LD_REAL  1.15000000000000E+0000
37150: MUL
37151: MUL
37152: ST_TO_ADDR
// end ; unit_vehicle :
37153: GO 37983
37155: LD_INT 2
37157: DOUBLE
37158: EQUAL
37159: IFTRUE 37163
37161: GO 37971
37163: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37164: LD_VAR 0 6
37168: PPUSH
37169: CALL_OW 264
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 42
37179: PUSH
37180: LD_INT 24
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: IN
37188: IFFALSE 37209
// points := [ 25 , 5 , 3 ] ;
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: LD_INT 25
37197: PUSH
37198: LD_INT 5
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37209: LD_VAR 0 6
37213: PPUSH
37214: CALL_OW 264
37218: PUSH
37219: LD_INT 4
37221: PUSH
37222: LD_INT 43
37224: PUSH
37225: LD_INT 25
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: IN
37233: IFFALSE 37254
// points := [ 40 , 15 , 5 ] ;
37235: LD_ADDR_VAR 0 9
37239: PUSH
37240: LD_INT 40
37242: PUSH
37243: LD_INT 15
37245: PUSH
37246: LD_INT 5
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37254: LD_VAR 0 6
37258: PPUSH
37259: CALL_OW 264
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 23
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: IN
37274: IFFALSE 37295
// points := [ 7 , 25 , 8 ] ;
37276: LD_ADDR_VAR 0 9
37280: PUSH
37281: LD_INT 7
37283: PUSH
37284: LD_INT 25
37286: PUSH
37287: LD_INT 8
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37295: LD_VAR 0 6
37299: PPUSH
37300: CALL_OW 264
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: LD_INT 27
37310: PUSH
37311: LD_INT 44
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: IN
37319: IFFALSE 37340
// points := [ 14 , 50 , 16 ] ;
37321: LD_ADDR_VAR 0 9
37325: PUSH
37326: LD_INT 14
37328: PUSH
37329: LD_INT 50
37331: PUSH
37332: LD_INT 16
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 264
37349: PUSH
37350: LD_INT 6
37352: PUSH
37353: LD_INT 46
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: IN
37360: IFFALSE 37381
// points := [ 32 , 120 , 70 ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: LD_INT 120
37372: PUSH
37373: LD_INT 70
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 264
37390: PUSH
37391: LD_INT 7
37393: PUSH
37394: LD_INT 28
37396: PUSH
37397: LD_INT 45
37399: PUSH
37400: LD_INT 92
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: IN
37409: IFFALSE 37430
// points := [ 35 , 20 , 45 ] ;
37411: LD_ADDR_VAR 0 9
37415: PUSH
37416: LD_INT 35
37418: PUSH
37419: LD_INT 20
37421: PUSH
37422: LD_INT 45
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37430: LD_VAR 0 6
37434: PPUSH
37435: CALL_OW 264
37439: PUSH
37440: LD_INT 47
37442: PUSH
37443: EMPTY
37444: LIST
37445: IN
37446: IFFALSE 37467
// points := [ 67 , 45 , 75 ] ;
37448: LD_ADDR_VAR 0 9
37452: PUSH
37453: LD_INT 67
37455: PUSH
37456: LD_INT 45
37458: PUSH
37459: LD_INT 75
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37467: LD_VAR 0 6
37471: PPUSH
37472: CALL_OW 264
37476: PUSH
37477: LD_INT 26
37479: PUSH
37480: EMPTY
37481: LIST
37482: IN
37483: IFFALSE 37504
// points := [ 120 , 30 , 80 ] ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_INT 120
37492: PUSH
37493: LD_INT 30
37495: PUSH
37496: LD_INT 80
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 264
37513: PUSH
37514: LD_INT 22
37516: PUSH
37517: EMPTY
37518: LIST
37519: IN
37520: IFFALSE 37541
// points := [ 40 , 1 , 1 ] ;
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_INT 40
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37541: LD_VAR 0 6
37545: PPUSH
37546: CALL_OW 264
37550: PUSH
37551: LD_INT 29
37553: PUSH
37554: EMPTY
37555: LIST
37556: IN
37557: IFFALSE 37578
// points := [ 70 , 200 , 400 ] ;
37559: LD_ADDR_VAR 0 9
37563: PUSH
37564: LD_INT 70
37566: PUSH
37567: LD_INT 200
37569: PUSH
37570: LD_INT 400
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37578: LD_VAR 0 6
37582: PPUSH
37583: CALL_OW 264
37587: PUSH
37588: LD_INT 14
37590: PUSH
37591: LD_INT 53
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: IN
37598: IFFALSE 37619
// points := [ 40 , 10 , 20 ] ;
37600: LD_ADDR_VAR 0 9
37604: PUSH
37605: LD_INT 40
37607: PUSH
37608: LD_INT 10
37610: PUSH
37611: LD_INT 20
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 264
37628: PUSH
37629: LD_INT 9
37631: PUSH
37632: EMPTY
37633: LIST
37634: IN
37635: IFFALSE 37656
// points := [ 5 , 70 , 20 ] ;
37637: LD_ADDR_VAR 0 9
37641: PUSH
37642: LD_INT 5
37644: PUSH
37645: LD_INT 70
37647: PUSH
37648: LD_INT 20
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37656: LD_VAR 0 6
37660: PPUSH
37661: CALL_OW 264
37665: PUSH
37666: LD_INT 10
37668: PUSH
37669: EMPTY
37670: LIST
37671: IN
37672: IFFALSE 37693
// points := [ 35 , 110 , 70 ] ;
37674: LD_ADDR_VAR 0 9
37678: PUSH
37679: LD_INT 35
37681: PUSH
37682: LD_INT 110
37684: PUSH
37685: LD_INT 70
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37693: LD_VAR 0 6
37697: PPUSH
37698: CALL_OW 265
37702: PUSH
37703: LD_INT 25
37705: EQUAL
37706: IFFALSE 37727
// points := [ 80 , 65 , 100 ] ;
37708: LD_ADDR_VAR 0 9
37712: PUSH
37713: LD_INT 80
37715: PUSH
37716: LD_INT 65
37718: PUSH
37719: LD_INT 100
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37727: LD_VAR 0 6
37731: PPUSH
37732: CALL_OW 263
37736: PUSH
37737: LD_INT 1
37739: EQUAL
37740: IFFALSE 37775
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37742: LD_ADDR_VAR 0 10
37746: PUSH
37747: LD_VAR 0 10
37751: PUSH
37752: LD_VAR 0 6
37756: PPUSH
37757: CALL_OW 311
37761: PPUSH
37762: LD_INT 3
37764: PPUSH
37765: CALL_OW 259
37769: PUSH
37770: LD_INT 4
37772: MUL
37773: MUL
37774: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37775: LD_VAR 0 6
37779: PPUSH
37780: CALL_OW 263
37784: PUSH
37785: LD_INT 2
37787: EQUAL
37788: IFFALSE 37839
// begin j := IsControledBy ( i ) ;
37790: LD_ADDR_VAR 0 7
37794: PUSH
37795: LD_VAR 0 6
37799: PPUSH
37800: CALL_OW 312
37804: ST_TO_ADDR
// if j then
37805: LD_VAR 0 7
37809: IFFALSE 37839
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37811: LD_ADDR_VAR 0 10
37815: PUSH
37816: LD_VAR 0 10
37820: PUSH
37821: LD_VAR 0 7
37825: PPUSH
37826: LD_INT 3
37828: PPUSH
37829: CALL_OW 259
37833: PUSH
37834: LD_INT 3
37836: MUL
37837: MUL
37838: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37839: LD_VAR 0 6
37843: PPUSH
37844: CALL_OW 264
37848: PUSH
37849: LD_INT 5
37851: PUSH
37852: LD_INT 6
37854: PUSH
37855: LD_INT 46
37857: PUSH
37858: LD_INT 44
37860: PUSH
37861: LD_INT 47
37863: PUSH
37864: LD_INT 45
37866: PUSH
37867: LD_INT 28
37869: PUSH
37870: LD_INT 7
37872: PUSH
37873: LD_INT 27
37875: PUSH
37876: LD_INT 29
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: IN
37891: IFFALSE 37911
37893: PUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: LD_INT 52
37901: PPUSH
37902: CALL_OW 321
37906: PUSH
37907: LD_INT 2
37909: EQUAL
37910: AND
37911: IFFALSE 37928
// bpoints := bpoints * 1.2 ;
37913: LD_ADDR_VAR 0 10
37917: PUSH
37918: LD_VAR 0 10
37922: PUSH
37923: LD_REAL  1.20000000000000E+0000
37926: MUL
37927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37928: LD_VAR 0 6
37932: PPUSH
37933: CALL_OW 264
37937: PUSH
37938: LD_INT 6
37940: PUSH
37941: LD_INT 46
37943: PUSH
37944: LD_INT 47
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: IN
37952: IFFALSE 37969
// bpoints := bpoints * 1.2 ;
37954: LD_ADDR_VAR 0 10
37958: PUSH
37959: LD_VAR 0 10
37963: PUSH
37964: LD_REAL  1.20000000000000E+0000
37967: MUL
37968: ST_TO_ADDR
// end ; unit_building :
37969: GO 37983
37971: LD_INT 3
37973: DOUBLE
37974: EQUAL
37975: IFTRUE 37979
37977: GO 37982
37979: POP
// ; end ;
37980: GO 37983
37982: POP
// for j = 1 to 3 do
37983: LD_ADDR_VAR 0 7
37987: PUSH
37988: DOUBLE
37989: LD_INT 1
37991: DEC
37992: ST_TO_ADDR
37993: LD_INT 3
37995: PUSH
37996: FOR_TO
37997: IFFALSE 38050
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: LD_VAR 0 5
38008: PPUSH
38009: LD_VAR 0 7
38013: PPUSH
38014: LD_VAR 0 5
38018: PUSH
38019: LD_VAR 0 7
38023: ARRAY
38024: PUSH
38025: LD_VAR 0 9
38029: PUSH
38030: LD_VAR 0 7
38034: ARRAY
38035: PUSH
38036: LD_VAR 0 10
38040: MUL
38041: PLUS
38042: PPUSH
38043: CALL_OW 1
38047: ST_TO_ADDR
38048: GO 37996
38050: POP
38051: POP
// end ;
38052: GO 36525
38054: POP
38055: POP
// result := Replace ( result , 4 , tmp ) ;
38056: LD_ADDR_VAR 0 5
38060: PUSH
38061: LD_VAR 0 5
38065: PPUSH
38066: LD_INT 4
38068: PPUSH
38069: LD_VAR 0 8
38073: PPUSH
38074: CALL_OW 1
38078: ST_TO_ADDR
// end ;
38079: LD_VAR 0 5
38083: RET
// export function DangerAtRange ( unit , range ) ; begin
38084: LD_INT 0
38086: PPUSH
// if not unit then
38087: LD_VAR 0 1
38091: NOT
38092: IFFALSE 38096
// exit ;
38094: GO 38141
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_VAR 0 1
38105: PPUSH
38106: CALL_OW 255
38110: PPUSH
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 250
38120: PPUSH
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL_OW 251
38130: PPUSH
38131: LD_VAR 0 2
38135: PPUSH
38136: CALL 36375 0 4
38140: ST_TO_ADDR
// end ;
38141: LD_VAR 0 3
38145: RET
// export function DangerInArea ( side , area ) ; begin
38146: LD_INT 0
38148: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38149: LD_ADDR_VAR 0 3
38153: PUSH
38154: LD_VAR 0 2
38158: PPUSH
38159: LD_INT 81
38161: PUSH
38162: LD_VAR 0 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PPUSH
38171: CALL_OW 70
38175: ST_TO_ADDR
// end ;
38176: LD_VAR 0 3
38180: RET
// export function IsExtension ( b ) ; begin
38181: LD_INT 0
38183: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38184: LD_ADDR_VAR 0 2
38188: PUSH
38189: LD_VAR 0 1
38193: PUSH
38194: LD_INT 23
38196: PUSH
38197: LD_INT 20
38199: PUSH
38200: LD_INT 22
38202: PUSH
38203: LD_INT 17
38205: PUSH
38206: LD_INT 24
38208: PUSH
38209: LD_INT 21
38211: PUSH
38212: LD_INT 19
38214: PUSH
38215: LD_INT 16
38217: PUSH
38218: LD_INT 25
38220: PUSH
38221: LD_INT 18
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: IN
38236: ST_TO_ADDR
// end ;
38237: LD_VAR 0 2
38241: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
38246: PPUSH
// result := [ ] ;
38247: LD_ADDR_VAR 0 4
38251: PUSH
38252: EMPTY
38253: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38254: LD_ADDR_VAR 0 5
38258: PUSH
38259: LD_VAR 0 2
38263: PPUSH
38264: LD_INT 21
38266: PUSH
38267: LD_INT 3
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 70
38278: ST_TO_ADDR
// if not tmp then
38279: LD_VAR 0 5
38283: NOT
38284: IFFALSE 38288
// exit ;
38286: GO 38352
// if checkLink then
38288: LD_VAR 0 3
38292: IFFALSE 38342
// begin for i in tmp do
38294: LD_ADDR_VAR 0 6
38298: PUSH
38299: LD_VAR 0 5
38303: PUSH
38304: FOR_IN
38305: IFFALSE 38340
// if GetBase ( i ) <> base then
38307: LD_VAR 0 6
38311: PPUSH
38312: CALL_OW 274
38316: PUSH
38317: LD_VAR 0 1
38321: NONEQUAL
38322: IFFALSE 38338
// ComLinkToBase ( base , i ) ;
38324: LD_VAR 0 1
38328: PPUSH
38329: LD_VAR 0 6
38333: PPUSH
38334: CALL_OW 169
38338: GO 38304
38340: POP
38341: POP
// end ; result := tmp ;
38342: LD_ADDR_VAR 0 4
38346: PUSH
38347: LD_VAR 0 5
38351: ST_TO_ADDR
// end ;
38352: LD_VAR 0 4
38356: RET
// export function ComComplete ( units , b ) ; var i ; begin
38357: LD_INT 0
38359: PPUSH
38360: PPUSH
// if not units then
38361: LD_VAR 0 1
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38460
// for i in units do
38370: LD_ADDR_VAR 0 4
38374: PUSH
38375: LD_VAR 0 1
38379: PUSH
38380: FOR_IN
38381: IFFALSE 38458
// if BuildingStatus ( b ) = bs_build then
38383: LD_VAR 0 2
38387: PPUSH
38388: CALL_OW 461
38392: PUSH
38393: LD_INT 1
38395: EQUAL
38396: IFFALSE 38456
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38398: LD_VAR 0 4
38402: PPUSH
38403: LD_STRING h
38405: PUSH
38406: LD_VAR 0 2
38410: PPUSH
38411: CALL_OW 250
38415: PUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: CALL_OW 251
38425: PUSH
38426: LD_VAR 0 2
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: PPUSH
38452: CALL_OW 446
38456: GO 38380
38458: POP
38459: POP
// end ;
38460: LD_VAR 0 3
38464: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38465: LD_INT 0
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38473: LD_VAR 0 1
38477: NOT
38478: IFTRUE 38495
38480: PUSH
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL_OW 263
38490: PUSH
38491: LD_INT 2
38493: NONEQUAL
38494: OR
38495: IFFALSE 38499
// exit ;
38497: GO 38815
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38499: LD_ADDR_VAR 0 6
38503: PUSH
38504: LD_INT 22
38506: PUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 255
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 30
38526: PUSH
38527: LD_INT 36
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 34
38536: PUSH
38537: LD_INT 31
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PPUSH
38553: CALL_OW 69
38557: ST_TO_ADDR
// if not tmp then
38558: LD_VAR 0 6
38562: NOT
38563: IFFALSE 38567
// exit ;
38565: GO 38815
// result := [ ] ;
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: EMPTY
38573: ST_TO_ADDR
// for i in tmp do
38574: LD_ADDR_VAR 0 3
38578: PUSH
38579: LD_VAR 0 6
38583: PUSH
38584: FOR_IN
38585: IFFALSE 38656
// begin t := UnitsInside ( i ) ;
38587: LD_ADDR_VAR 0 4
38591: PUSH
38592: LD_VAR 0 3
38596: PPUSH
38597: CALL_OW 313
38601: ST_TO_ADDR
// if t then
38602: LD_VAR 0 4
38606: IFFALSE 38654
// for j in t do
38608: LD_ADDR_VAR 0 7
38612: PUSH
38613: LD_VAR 0 4
38617: PUSH
38618: FOR_IN
38619: IFFALSE 38652
// result := Replace ( result , result + 1 , j ) ;
38621: LD_ADDR_VAR 0 2
38625: PUSH
38626: LD_VAR 0 2
38630: PPUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_INT 1
38638: PLUS
38639: PPUSH
38640: LD_VAR 0 7
38644: PPUSH
38645: CALL_OW 1
38649: ST_TO_ADDR
38650: GO 38618
38652: POP
38653: POP
// end ;
38654: GO 38584
38656: POP
38657: POP
// if not result then
38658: LD_VAR 0 2
38662: NOT
38663: IFFALSE 38667
// exit ;
38665: GO 38815
// mech := result [ 1 ] ;
38667: LD_ADDR_VAR 0 5
38671: PUSH
38672: LD_VAR 0 2
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: ST_TO_ADDR
// if result > 1 then
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 1
38688: GREATER
38689: IFFALSE 38801
// begin for i = 2 to result do
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: DOUBLE
38697: LD_INT 2
38699: DEC
38700: ST_TO_ADDR
38701: LD_VAR 0 2
38705: PUSH
38706: FOR_TO
38707: IFFALSE 38799
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38709: LD_ADDR_VAR 0 4
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 3
38723: ARRAY
38724: PPUSH
38725: LD_INT 3
38727: PPUSH
38728: CALL_OW 259
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_VAR 0 3
38742: ARRAY
38743: PPUSH
38744: CALL_OW 432
38748: MINUS
38749: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38750: LD_VAR 0 4
38754: PUSH
38755: LD_VAR 0 5
38759: PPUSH
38760: LD_INT 3
38762: PPUSH
38763: CALL_OW 259
38767: PUSH
38768: LD_VAR 0 5
38772: PPUSH
38773: CALL_OW 432
38777: MINUS
38778: GREATEREQUAL
38779: IFFALSE 38797
// mech := result [ i ] ;
38781: LD_ADDR_VAR 0 5
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_VAR 0 3
38795: ARRAY
38796: ST_TO_ADDR
// end ;
38797: GO 38706
38799: POP
38800: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38801: LD_VAR 0 1
38805: PPUSH
38806: LD_VAR 0 5
38810: PPUSH
38811: CALL_OW 135
// end ;
38815: LD_VAR 0 2
38819: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38820: LD_INT 0
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
// result := [ ] ;
38835: LD_ADDR_VAR 0 7
38839: PUSH
38840: EMPTY
38841: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 266
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: IN
38862: NOT
38863: IFFALSE 38867
// exit ;
38865: GO 40507
// if name then
38867: LD_VAR 0 3
38871: IFFALSE 38887
// SetBName ( base_dep , name ) ;
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_VAR 0 3
38882: PPUSH
38883: CALL_OW 500
// base := GetBase ( base_dep ) ;
38887: LD_ADDR_VAR 0 15
38891: PUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL_OW 274
38901: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38902: LD_ADDR_VAR 0 16
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 255
38916: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38917: LD_ADDR_VAR 0 17
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 248
38931: ST_TO_ADDR
// if sources then
38932: LD_VAR 0 5
38936: IFFALSE 38983
// for i = 1 to 3 do
38938: LD_ADDR_VAR 0 8
38942: PUSH
38943: DOUBLE
38944: LD_INT 1
38946: DEC
38947: ST_TO_ADDR
38948: LD_INT 3
38950: PUSH
38951: FOR_TO
38952: IFFALSE 38981
// AddResourceType ( base , i , sources [ i ] ) ;
38954: LD_VAR 0 15
38958: PPUSH
38959: LD_VAR 0 8
38963: PPUSH
38964: LD_VAR 0 5
38968: PUSH
38969: LD_VAR 0 8
38973: ARRAY
38974: PPUSH
38975: CALL_OW 276
38979: GO 38951
38981: POP
38982: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38983: LD_ADDR_VAR 0 18
38987: PUSH
38988: LD_VAR 0 15
38992: PPUSH
38993: LD_VAR 0 2
38997: PPUSH
38998: LD_INT 1
39000: PPUSH
39001: CALL 38242 0 3
39005: ST_TO_ADDR
// InitHc ;
39006: CALL_OW 19
// InitUc ;
39010: CALL_OW 18
// uc_side := side ;
39014: LD_ADDR_OWVAR 20
39018: PUSH
39019: LD_VAR 0 16
39023: ST_TO_ADDR
// uc_nation := nation ;
39024: LD_ADDR_OWVAR 21
39028: PUSH
39029: LD_VAR 0 17
39033: ST_TO_ADDR
// if buildings then
39034: LD_VAR 0 18
39038: IFFALSE 40366
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39040: LD_ADDR_VAR 0 19
39044: PUSH
39045: LD_VAR 0 18
39049: PPUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 30
39055: PUSH
39056: LD_INT 29
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 30
39065: PUSH
39066: LD_INT 30
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: PPUSH
39078: CALL_OW 72
39082: ST_TO_ADDR
// if tmp then
39083: LD_VAR 0 19
39087: IFFALSE 39135
// for i in tmp do
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: LD_VAR 0 19
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39133
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39102: LD_VAR 0 8
39106: PPUSH
39107: CALL_OW 250
39111: PPUSH
39112: LD_VAR 0 8
39116: PPUSH
39117: CALL_OW 251
39121: PPUSH
39122: LD_VAR 0 16
39126: PPUSH
39127: CALL_OW 441
39131: GO 39099
39133: POP
39134: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39135: LD_VAR 0 18
39139: PPUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 30
39145: PUSH
39146: LD_INT 32
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 30
39155: PUSH
39156: LD_INT 33
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: PPUSH
39168: CALL_OW 72
39172: IFFALSE 39260
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39174: LD_ADDR_VAR 0 8
39178: PUSH
39179: LD_VAR 0 18
39183: PPUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 30
39189: PUSH
39190: LD_INT 32
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 30
39199: PUSH
39200: LD_INT 33
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PPUSH
39212: CALL_OW 72
39216: PUSH
39217: FOR_IN
39218: IFFALSE 39258
// begin if not GetBWeapon ( i ) then
39220: LD_VAR 0 8
39224: PPUSH
39225: CALL_OW 269
39229: NOT
39230: IFFALSE 39256
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39232: LD_VAR 0 8
39236: PPUSH
39237: LD_VAR 0 8
39241: PPUSH
39242: LD_VAR 0 2
39246: PPUSH
39247: CALL 40512 0 2
39251: PPUSH
39252: CALL_OW 431
// end ;
39256: GO 39217
39258: POP
39259: POP
// end ; for i = 1 to personel do
39260: LD_ADDR_VAR 0 8
39264: PUSH
39265: DOUBLE
39266: LD_INT 1
39268: DEC
39269: ST_TO_ADDR
39270: LD_VAR 0 6
39274: PUSH
39275: FOR_TO
39276: IFFALSE 40346
// begin if i > 4 then
39278: LD_VAR 0 8
39282: PUSH
39283: LD_INT 4
39285: GREATER
39286: IFFALSE 39290
// break ;
39288: GO 40346
// case i of 1 :
39290: LD_VAR 0 8
39294: PUSH
39295: LD_INT 1
39297: DOUBLE
39298: EQUAL
39299: IFTRUE 39303
39301: GO 39383
39303: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39304: LD_ADDR_VAR 0 12
39308: PUSH
39309: LD_VAR 0 18
39313: PPUSH
39314: LD_INT 22
39316: PUSH
39317: LD_VAR 0 16
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 58
39328: PUSH
39329: EMPTY
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 30
39337: PUSH
39338: LD_INT 32
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 30
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 30
39357: PUSH
39358: LD_INT 5
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PPUSH
39376: CALL_OW 72
39380: ST_TO_ADDR
39381: GO 39605
39383: LD_INT 2
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39453
39391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39392: LD_ADDR_VAR 0 12
39396: PUSH
39397: LD_VAR 0 18
39401: PPUSH
39402: LD_INT 22
39404: PUSH
39405: LD_VAR 0 16
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 30
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 30
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PPUSH
39446: CALL_OW 72
39450: ST_TO_ADDR
39451: GO 39605
39453: LD_INT 3
39455: DOUBLE
39456: EQUAL
39457: IFTRUE 39461
39459: GO 39523
39461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39462: LD_ADDR_VAR 0 12
39466: PUSH
39467: LD_VAR 0 18
39471: PPUSH
39472: LD_INT 22
39474: PUSH
39475: LD_VAR 0 16
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 30
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 30
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PPUSH
39516: CALL_OW 72
39520: ST_TO_ADDR
39521: GO 39605
39523: LD_INT 4
39525: DOUBLE
39526: EQUAL
39527: IFTRUE 39531
39529: GO 39604
39531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39532: LD_ADDR_VAR 0 12
39536: PUSH
39537: LD_VAR 0 18
39541: PPUSH
39542: LD_INT 22
39544: PUSH
39545: LD_VAR 0 16
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 30
39559: PUSH
39560: LD_INT 6
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 30
39569: PUSH
39570: LD_INT 7
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 30
39579: PUSH
39580: LD_INT 8
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PPUSH
39597: CALL_OW 72
39601: ST_TO_ADDR
39602: GO 39605
39604: POP
// if i = 1 then
39605: LD_VAR 0 8
39609: PUSH
39610: LD_INT 1
39612: EQUAL
39613: IFFALSE 39724
// begin tmp := [ ] ;
39615: LD_ADDR_VAR 0 19
39619: PUSH
39620: EMPTY
39621: ST_TO_ADDR
// for j in f do
39622: LD_ADDR_VAR 0 9
39626: PUSH
39627: LD_VAR 0 12
39631: PUSH
39632: FOR_IN
39633: IFFALSE 39706
// if GetBType ( j ) = b_bunker then
39635: LD_VAR 0 9
39639: PPUSH
39640: CALL_OW 266
39644: PUSH
39645: LD_INT 32
39647: EQUAL
39648: IFFALSE 39675
// tmp := Insert ( tmp , 1 , j ) else
39650: LD_ADDR_VAR 0 19
39654: PUSH
39655: LD_VAR 0 19
39659: PPUSH
39660: LD_INT 1
39662: PPUSH
39663: LD_VAR 0 9
39667: PPUSH
39668: CALL_OW 2
39672: ST_TO_ADDR
39673: GO 39704
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39675: LD_ADDR_VAR 0 19
39679: PUSH
39680: LD_VAR 0 19
39684: PPUSH
39685: LD_VAR 0 19
39689: PUSH
39690: LD_INT 1
39692: PLUS
39693: PPUSH
39694: LD_VAR 0 9
39698: PPUSH
39699: CALL_OW 2
39703: ST_TO_ADDR
39704: GO 39632
39706: POP
39707: POP
// if tmp then
39708: LD_VAR 0 19
39712: IFFALSE 39724
// f := tmp ;
39714: LD_ADDR_VAR 0 12
39718: PUSH
39719: LD_VAR 0 19
39723: ST_TO_ADDR
// end ; x := personel [ i ] ;
39724: LD_ADDR_VAR 0 13
39728: PUSH
39729: LD_VAR 0 6
39733: PUSH
39734: LD_VAR 0 8
39738: ARRAY
39739: ST_TO_ADDR
// if x = - 1 then
39740: LD_VAR 0 13
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: EQUAL
39749: IFFALSE 39960
// begin for j in f do
39751: LD_ADDR_VAR 0 9
39755: PUSH
39756: LD_VAR 0 12
39760: PUSH
39761: FOR_IN
39762: IFFALSE 39956
// repeat InitHc ;
39764: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39768: LD_VAR 0 9
39772: PPUSH
39773: CALL_OW 266
39777: PUSH
39778: LD_INT 5
39780: EQUAL
39781: IFFALSE 39851
// begin if UnitsInside ( j ) < 3 then
39783: LD_VAR 0 9
39787: PPUSH
39788: CALL_OW 313
39792: PUSH
39793: LD_INT 3
39795: LESS
39796: IFFALSE 39832
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39798: LD_INT 0
39800: PPUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 8
39806: PUSH
39807: LD_INT 9
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PUSH
39815: LD_VAR 0 17
39819: ARRAY
39820: PPUSH
39821: LD_VAR 0 4
39825: PPUSH
39826: CALL_OW 380
39830: GO 39849
// PrepareHuman ( false , i , skill ) ;
39832: LD_INT 0
39834: PPUSH
39835: LD_VAR 0 8
39839: PPUSH
39840: LD_VAR 0 4
39844: PPUSH
39845: CALL_OW 380
// end else
39849: GO 39868
// PrepareHuman ( false , i , skill ) ;
39851: LD_INT 0
39853: PPUSH
39854: LD_VAR 0 8
39858: PPUSH
39859: LD_VAR 0 4
39863: PPUSH
39864: CALL_OW 380
// un := CreateHuman ;
39868: LD_ADDR_VAR 0 14
39872: PUSH
39873: CALL_OW 44
39877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39878: LD_ADDR_VAR 0 7
39882: PUSH
39883: LD_VAR 0 7
39887: PPUSH
39888: LD_INT 1
39890: PPUSH
39891: LD_VAR 0 14
39895: PPUSH
39896: CALL_OW 2
39900: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39901: LD_VAR 0 14
39905: PPUSH
39906: LD_VAR 0 9
39910: PPUSH
39911: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39915: LD_VAR 0 9
39919: PPUSH
39920: CALL_OW 313
39924: PUSH
39925: LD_INT 6
39927: EQUAL
39928: IFTRUE 39952
39930: PUSH
39931: LD_VAR 0 9
39935: PPUSH
39936: CALL_OW 266
39940: PUSH
39941: LD_INT 32
39943: PUSH
39944: LD_INT 31
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: IN
39951: OR
39952: IFFALSE 39764
39954: GO 39761
39956: POP
39957: POP
// end else
39958: GO 40344
// for j = 1 to x do
39960: LD_ADDR_VAR 0 9
39964: PUSH
39965: DOUBLE
39966: LD_INT 1
39968: DEC
39969: ST_TO_ADDR
39970: LD_VAR 0 13
39974: PUSH
39975: FOR_TO
39976: IFFALSE 40342
// begin InitHc ;
39978: CALL_OW 19
// if not f then
39982: LD_VAR 0 12
39986: NOT
39987: IFFALSE 40076
// begin PrepareHuman ( false , i , skill ) ;
39989: LD_INT 0
39991: PPUSH
39992: LD_VAR 0 8
39996: PPUSH
39997: LD_VAR 0 4
40001: PPUSH
40002: CALL_OW 380
// un := CreateHuman ;
40006: LD_ADDR_VAR 0 14
40010: PUSH
40011: CALL_OW 44
40015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40016: LD_ADDR_VAR 0 7
40020: PUSH
40021: LD_VAR 0 7
40025: PPUSH
40026: LD_INT 1
40028: PPUSH
40029: LD_VAR 0 14
40033: PPUSH
40034: CALL_OW 2
40038: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40039: LD_VAR 0 14
40043: PPUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 250
40053: PPUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 251
40063: PPUSH
40064: LD_INT 10
40066: PPUSH
40067: LD_INT 0
40069: PPUSH
40070: CALL_OW 50
// continue ;
40074: GO 39975
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40076: LD_VAR 0 12
40080: PUSH
40081: LD_INT 1
40083: ARRAY
40084: PPUSH
40085: CALL_OW 313
40089: IFFALSE 40117
40091: PUSH
40092: LD_VAR 0 12
40096: PUSH
40097: LD_INT 1
40099: ARRAY
40100: PPUSH
40101: CALL_OW 266
40105: PUSH
40106: LD_INT 32
40108: PUSH
40109: LD_INT 31
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: IN
40116: AND
40117: IFTRUE 40138
40119: PUSH
40120: LD_VAR 0 12
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: CALL_OW 313
40133: PUSH
40134: LD_INT 6
40136: EQUAL
40137: OR
40138: IFFALSE 40158
// f := Delete ( f , 1 ) ;
40140: LD_ADDR_VAR 0 12
40144: PUSH
40145: LD_VAR 0 12
40149: PPUSH
40150: LD_INT 1
40152: PPUSH
40153: CALL_OW 3
40157: ST_TO_ADDR
// if not f then
40158: LD_VAR 0 12
40162: NOT
40163: IFFALSE 40181
// begin x := x + 2 ;
40165: LD_ADDR_VAR 0 13
40169: PUSH
40170: LD_VAR 0 13
40174: PUSH
40175: LD_INT 2
40177: PLUS
40178: ST_TO_ADDR
// continue ;
40179: GO 39975
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40181: LD_VAR 0 12
40185: PUSH
40186: LD_INT 1
40188: ARRAY
40189: PPUSH
40190: CALL_OW 266
40194: PUSH
40195: LD_INT 5
40197: EQUAL
40198: IFFALSE 40272
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40200: LD_VAR 0 12
40204: PUSH
40205: LD_INT 1
40207: ARRAY
40208: PPUSH
40209: CALL_OW 313
40213: PUSH
40214: LD_INT 3
40216: LESS
40217: IFFALSE 40253
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40219: LD_INT 0
40221: PPUSH
40222: LD_INT 5
40224: PUSH
40225: LD_INT 8
40227: PUSH
40228: LD_INT 9
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: LD_VAR 0 17
40240: ARRAY
40241: PPUSH
40242: LD_VAR 0 4
40246: PPUSH
40247: CALL_OW 380
40251: GO 40270
// PrepareHuman ( false , i , skill ) ;
40253: LD_INT 0
40255: PPUSH
40256: LD_VAR 0 8
40260: PPUSH
40261: LD_VAR 0 4
40265: PPUSH
40266: CALL_OW 380
// end else
40270: GO 40289
// PrepareHuman ( false , i , skill ) ;
40272: LD_INT 0
40274: PPUSH
40275: LD_VAR 0 8
40279: PPUSH
40280: LD_VAR 0 4
40284: PPUSH
40285: CALL_OW 380
// un := CreateHuman ;
40289: LD_ADDR_VAR 0 14
40293: PUSH
40294: CALL_OW 44
40298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40299: LD_ADDR_VAR 0 7
40303: PUSH
40304: LD_VAR 0 7
40308: PPUSH
40309: LD_INT 1
40311: PPUSH
40312: LD_VAR 0 14
40316: PPUSH
40317: CALL_OW 2
40321: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40322: LD_VAR 0 14
40326: PPUSH
40327: LD_VAR 0 12
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: PPUSH
40336: CALL_OW 52
// end ;
40340: GO 39975
40342: POP
40343: POP
// end ;
40344: GO 39275
40346: POP
40347: POP
// result := result ^ buildings ;
40348: LD_ADDR_VAR 0 7
40352: PUSH
40353: LD_VAR 0 7
40357: PUSH
40358: LD_VAR 0 18
40362: ADD
40363: ST_TO_ADDR
// end else
40364: GO 40507
// begin for i = 1 to personel do
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: DOUBLE
40372: LD_INT 1
40374: DEC
40375: ST_TO_ADDR
40376: LD_VAR 0 6
40380: PUSH
40381: FOR_TO
40382: IFFALSE 40505
// begin if i > 4 then
40384: LD_VAR 0 8
40388: PUSH
40389: LD_INT 4
40391: GREATER
40392: IFFALSE 40396
// break ;
40394: GO 40505
// x := personel [ i ] ;
40396: LD_ADDR_VAR 0 13
40400: PUSH
40401: LD_VAR 0 6
40405: PUSH
40406: LD_VAR 0 8
40410: ARRAY
40411: ST_TO_ADDR
// if x = - 1 then
40412: LD_VAR 0 13
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: EQUAL
40421: IFFALSE 40425
// continue ;
40423: GO 40381
// PrepareHuman ( false , i , skill ) ;
40425: LD_INT 0
40427: PPUSH
40428: LD_VAR 0 8
40432: PPUSH
40433: LD_VAR 0 4
40437: PPUSH
40438: CALL_OW 380
// un := CreateHuman ;
40442: LD_ADDR_VAR 0 14
40446: PUSH
40447: CALL_OW 44
40451: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40452: LD_VAR 0 14
40456: PPUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 250
40466: PPUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 251
40476: PPUSH
40477: LD_INT 10
40479: PPUSH
40480: LD_INT 0
40482: PPUSH
40483: CALL_OW 50
// result := result ^ un ;
40487: LD_ADDR_VAR 0 7
40491: PUSH
40492: LD_VAR 0 7
40496: PUSH
40497: LD_VAR 0 14
40501: ADD
40502: ST_TO_ADDR
// end ;
40503: GO 40381
40505: POP
40506: POP
// end ; end ;
40507: LD_VAR 0 7
40511: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40512: LD_INT 0
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
// result := false ;
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_INT 0
40537: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40538: LD_VAR 0 1
40542: NOT
40543: IFTRUE 40568
40545: PUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: CALL_OW 266
40555: PUSH
40556: LD_INT 32
40558: PUSH
40559: LD_INT 33
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: IN
40566: NOT
40567: OR
40568: IFFALSE 40572
// exit ;
40570: GO 41707
// nat := GetNation ( tower ) ;
40572: LD_ADDR_VAR 0 12
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: CALL_OW 248
40586: ST_TO_ADDR
// side := GetSide ( tower ) ;
40587: LD_ADDR_VAR 0 16
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 255
40601: ST_TO_ADDR
// x := GetX ( tower ) ;
40602: LD_ADDR_VAR 0 10
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 250
40616: ST_TO_ADDR
// y := GetY ( tower ) ;
40617: LD_ADDR_VAR 0 11
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 251
40631: ST_TO_ADDR
// if not x or not y then
40632: LD_VAR 0 10
40636: NOT
40637: IFTRUE 40646
40639: PUSH
40640: LD_VAR 0 11
40644: NOT
40645: OR
40646: IFFALSE 40650
// exit ;
40648: GO 41707
// weapon := 0 ;
40650: LD_ADDR_VAR 0 18
40654: PUSH
40655: LD_INT 0
40657: ST_TO_ADDR
// fac_list := [ ] ;
40658: LD_ADDR_VAR 0 17
40662: PUSH
40663: EMPTY
40664: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40665: LD_ADDR_VAR 0 6
40669: PUSH
40670: LD_VAR 0 1
40674: PPUSH
40675: CALL_OW 274
40679: PPUSH
40680: LD_VAR 0 2
40684: PPUSH
40685: LD_INT 0
40687: PPUSH
40688: CALL 38242 0 3
40692: PPUSH
40693: LD_INT 30
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PPUSH
40703: CALL_OW 72
40707: ST_TO_ADDR
// if not factories then
40708: LD_VAR 0 6
40712: NOT
40713: IFFALSE 40717
// exit ;
40715: GO 41707
// for i in factories do
40717: LD_ADDR_VAR 0 8
40721: PUSH
40722: LD_VAR 0 6
40726: PUSH
40727: FOR_IN
40728: IFFALSE 40753
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40730: LD_ADDR_VAR 0 17
40734: PUSH
40735: LD_VAR 0 17
40739: PUSH
40740: LD_VAR 0 8
40744: PPUSH
40745: CALL_OW 478
40749: UNION
40750: ST_TO_ADDR
40751: GO 40727
40753: POP
40754: POP
// if not fac_list then
40755: LD_VAR 0 17
40759: NOT
40760: IFFALSE 40764
// exit ;
40762: GO 41707
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40764: LD_ADDR_VAR 0 5
40768: PUSH
40769: LD_INT 4
40771: PUSH
40772: LD_INT 5
40774: PUSH
40775: LD_INT 9
40777: PUSH
40778: LD_INT 10
40780: PUSH
40781: LD_INT 6
40783: PUSH
40784: LD_INT 7
40786: PUSH
40787: LD_INT 11
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 27
40801: PUSH
40802: LD_INT 28
40804: PUSH
40805: LD_INT 26
40807: PUSH
40808: LD_INT 30
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 43
40819: PUSH
40820: LD_INT 44
40822: PUSH
40823: LD_INT 46
40825: PUSH
40826: LD_INT 45
40828: PUSH
40829: LD_INT 47
40831: PUSH
40832: LD_INT 49
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: PUSH
40848: LD_VAR 0 12
40852: ARRAY
40853: ST_TO_ADDR
// list := list isect fac_list ;
40854: LD_ADDR_VAR 0 5
40858: PUSH
40859: LD_VAR 0 5
40863: PUSH
40864: LD_VAR 0 17
40868: ISECT
40869: ST_TO_ADDR
// if not list then
40870: LD_VAR 0 5
40874: NOT
40875: IFFALSE 40879
// exit ;
40877: GO 41707
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40879: LD_VAR 0 12
40883: PUSH
40884: LD_INT 3
40886: EQUAL
40887: IFFALSE 40899
40889: PUSH
40890: LD_INT 49
40892: PUSH
40893: LD_VAR 0 5
40897: IN
40898: AND
40899: IFFALSE 40919
40901: PUSH
40902: LD_INT 31
40904: PPUSH
40905: LD_VAR 0 16
40909: PPUSH
40910: CALL_OW 321
40914: PUSH
40915: LD_INT 2
40917: EQUAL
40918: AND
40919: IFFALSE 40979
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40921: LD_INT 22
40923: PUSH
40924: LD_VAR 0 16
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 35
40935: PUSH
40936: LD_INT 49
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 91
40945: PUSH
40946: LD_VAR 0 1
40950: PUSH
40951: LD_INT 10
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: PPUSH
40964: CALL_OW 69
40968: NOT
40969: IFFALSE 40979
// weapon := ru_time_lapser ;
40971: LD_ADDR_VAR 0 18
40975: PUSH
40976: LD_INT 49
40978: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40979: LD_VAR 0 12
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: IN
40994: IFFALSE 41018
40996: PUSH
40997: LD_INT 11
40999: PUSH
41000: LD_VAR 0 5
41004: IN
41005: IFTRUE 41017
41007: PUSH
41008: LD_INT 30
41010: PUSH
41011: LD_VAR 0 5
41015: IN
41016: OR
41017: AND
41018: IFFALSE 41038
41020: PUSH
41021: LD_INT 6
41023: PPUSH
41024: LD_VAR 0 16
41028: PPUSH
41029: CALL_OW 321
41033: PUSH
41034: LD_INT 2
41036: EQUAL
41037: AND
41038: IFFALSE 41205
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41040: LD_INT 22
41042: PUSH
41043: LD_VAR 0 16
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 35
41057: PUSH
41058: LD_INT 11
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 35
41067: PUSH
41068: LD_INT 30
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 91
41082: PUSH
41083: LD_VAR 0 1
41087: PUSH
41088: LD_INT 18
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: PPUSH
41101: CALL_OW 69
41105: NOT
41106: IFFALSE 41182
41108: PUSH
41109: LD_INT 22
41111: PUSH
41112: LD_VAR 0 16
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 30
41126: PUSH
41127: LD_INT 32
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 30
41136: PUSH
41137: LD_INT 33
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 91
41151: PUSH
41152: LD_VAR 0 1
41156: PUSH
41157: LD_INT 12
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: PUSH
41170: EMPTY
41171: LIST
41172: PPUSH
41173: CALL_OW 69
41177: PUSH
41178: LD_INT 2
41180: GREATER
41181: AND
41182: IFFALSE 41205
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41184: LD_ADDR_VAR 0 18
41188: PUSH
41189: LD_INT 11
41191: PUSH
41192: LD_INT 30
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_VAR 0 12
41203: ARRAY
41204: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41205: LD_VAR 0 18
41209: NOT
41210: IFFALSE 41230
41212: PUSH
41213: LD_INT 40
41215: PPUSH
41216: LD_VAR 0 16
41220: PPUSH
41221: CALL_OW 321
41225: PUSH
41226: LD_INT 2
41228: EQUAL
41229: AND
41230: IFFALSE 41266
41232: PUSH
41233: LD_INT 7
41235: PUSH
41236: LD_VAR 0 5
41240: IN
41241: IFTRUE 41253
41243: PUSH
41244: LD_INT 28
41246: PUSH
41247: LD_VAR 0 5
41251: IN
41252: OR
41253: IFTRUE 41265
41255: PUSH
41256: LD_INT 45
41258: PUSH
41259: LD_VAR 0 5
41263: IN
41264: OR
41265: AND
41266: IFFALSE 41520
// begin hex := GetHexInfo ( x , y ) ;
41268: LD_ADDR_VAR 0 4
41272: PUSH
41273: LD_VAR 0 10
41277: PPUSH
41278: LD_VAR 0 11
41282: PPUSH
41283: CALL_OW 546
41287: ST_TO_ADDR
// if hex [ 1 ] then
41288: LD_VAR 0 4
41292: PUSH
41293: LD_INT 1
41295: ARRAY
41296: IFFALSE 41300
// exit ;
41298: GO 41707
// height := hex [ 2 ] ;
41300: LD_ADDR_VAR 0 15
41304: PUSH
41305: LD_VAR 0 4
41309: PUSH
41310: LD_INT 2
41312: ARRAY
41313: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41314: LD_ADDR_VAR 0 14
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 5
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: ST_TO_ADDR
// for i in tmp do
41337: LD_ADDR_VAR 0 8
41341: PUSH
41342: LD_VAR 0 14
41346: PUSH
41347: FOR_IN
41348: IFFALSE 41518
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41350: LD_ADDR_VAR 0 9
41354: PUSH
41355: LD_VAR 0 10
41359: PPUSH
41360: LD_VAR 0 8
41364: PPUSH
41365: LD_INT 5
41367: PPUSH
41368: CALL_OW 272
41372: PUSH
41373: LD_VAR 0 11
41377: PPUSH
41378: LD_VAR 0 8
41382: PPUSH
41383: LD_INT 5
41385: PPUSH
41386: CALL_OW 273
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41395: LD_VAR 0 9
41399: PUSH
41400: LD_INT 1
41402: ARRAY
41403: PPUSH
41404: LD_VAR 0 9
41408: PUSH
41409: LD_INT 2
41411: ARRAY
41412: PPUSH
41413: CALL_OW 488
41417: IFFALSE 41516
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41419: LD_ADDR_VAR 0 4
41423: PUSH
41424: LD_VAR 0 9
41428: PUSH
41429: LD_INT 1
41431: ARRAY
41432: PPUSH
41433: LD_VAR 0 9
41437: PUSH
41438: LD_INT 2
41440: ARRAY
41441: PPUSH
41442: CALL_OW 546
41446: ST_TO_ADDR
// if hex [ 1 ] then
41447: LD_VAR 0 4
41451: PUSH
41452: LD_INT 1
41454: ARRAY
41455: IFFALSE 41459
// continue ;
41457: GO 41347
// h := hex [ 2 ] ;
41459: LD_ADDR_VAR 0 13
41463: PUSH
41464: LD_VAR 0 4
41468: PUSH
41469: LD_INT 2
41471: ARRAY
41472: ST_TO_ADDR
// if h + 7 < height then
41473: LD_VAR 0 13
41477: PUSH
41478: LD_INT 7
41480: PLUS
41481: PUSH
41482: LD_VAR 0 15
41486: LESS
41487: IFFALSE 41516
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41489: LD_ADDR_VAR 0 18
41493: PUSH
41494: LD_INT 7
41496: PUSH
41497: LD_INT 28
41499: PUSH
41500: LD_INT 45
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: LD_VAR 0 12
41512: ARRAY
41513: ST_TO_ADDR
// break ;
41514: GO 41518
// end ; end ; end ;
41516: GO 41347
41518: POP
41519: POP
// end ; if not weapon then
41520: LD_VAR 0 18
41524: NOT
41525: IFFALSE 41585
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 5
41536: PUSH
41537: LD_INT 11
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 49
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: DIFF
41551: ST_TO_ADDR
// if not list then
41552: LD_VAR 0 5
41556: NOT
41557: IFFALSE 41561
// exit ;
41559: GO 41707
// weapon := list [ rand ( 1 , list ) ] ;
41561: LD_ADDR_VAR 0 18
41565: PUSH
41566: LD_VAR 0 5
41570: PUSH
41571: LD_INT 1
41573: PPUSH
41574: LD_VAR 0 5
41578: PPUSH
41579: CALL_OW 12
41583: ARRAY
41584: ST_TO_ADDR
// end ; if weapon then
41585: LD_VAR 0 18
41589: IFFALSE 41707
// begin tmp := CostOfWeapon ( weapon ) ;
41591: LD_ADDR_VAR 0 14
41595: PUSH
41596: LD_VAR 0 18
41600: PPUSH
41601: CALL_OW 451
41605: ST_TO_ADDR
// j := GetBase ( tower ) ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 274
41620: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41621: LD_VAR 0 9
41625: PPUSH
41626: LD_INT 1
41628: PPUSH
41629: CALL_OW 275
41633: PUSH
41634: LD_VAR 0 14
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: GREATEREQUAL
41643: IFFALSE 41669
41645: PUSH
41646: LD_VAR 0 9
41650: PPUSH
41651: LD_INT 2
41653: PPUSH
41654: CALL_OW 275
41658: PUSH
41659: LD_VAR 0 14
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: GREATEREQUAL
41668: AND
41669: IFFALSE 41695
41671: PUSH
41672: LD_VAR 0 9
41676: PPUSH
41677: LD_INT 3
41679: PPUSH
41680: CALL_OW 275
41684: PUSH
41685: LD_VAR 0 14
41689: PUSH
41690: LD_INT 3
41692: ARRAY
41693: GREATEREQUAL
41694: AND
41695: IFFALSE 41707
// result := weapon ;
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_VAR 0 18
41706: ST_TO_ADDR
// end ; end ;
41707: LD_VAR 0 3
41711: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41712: LD_INT 0
41714: PPUSH
41715: PPUSH
// result := true ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 1
41723: ST_TO_ADDR
// if array1 = array2 then
41724: LD_VAR 0 1
41728: PUSH
41729: LD_VAR 0 2
41733: EQUAL
41734: IFFALSE 41794
// begin for i = 1 to array1 do
41736: LD_ADDR_VAR 0 4
41740: PUSH
41741: DOUBLE
41742: LD_INT 1
41744: DEC
41745: ST_TO_ADDR
41746: LD_VAR 0 1
41750: PUSH
41751: FOR_TO
41752: IFFALSE 41790
// if array1 [ i ] <> array2 [ i ] then
41754: LD_VAR 0 1
41758: PUSH
41759: LD_VAR 0 4
41763: ARRAY
41764: PUSH
41765: LD_VAR 0 2
41769: PUSH
41770: LD_VAR 0 4
41774: ARRAY
41775: NONEQUAL
41776: IFFALSE 41788
// begin result := false ;
41778: LD_ADDR_VAR 0 3
41782: PUSH
41783: LD_INT 0
41785: ST_TO_ADDR
// break ;
41786: GO 41790
// end ;
41788: GO 41751
41790: POP
41791: POP
// end else
41792: GO 41802
// result := false ;
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_INT 0
41801: ST_TO_ADDR
// end ;
41802: LD_VAR 0 3
41806: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
// if not array1 or not array2 then
41811: LD_VAR 0 1
41815: NOT
41816: IFTRUE 41825
41818: PUSH
41819: LD_VAR 0 2
41823: NOT
41824: OR
41825: IFFALSE 41829
// exit ;
41827: GO 41893
// result := true ;
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_INT 1
41836: ST_TO_ADDR
// for i = 1 to array1 do
41837: LD_ADDR_VAR 0 4
41841: PUSH
41842: DOUBLE
41843: LD_INT 1
41845: DEC
41846: ST_TO_ADDR
41847: LD_VAR 0 1
41851: PUSH
41852: FOR_TO
41853: IFFALSE 41891
// if array1 [ i ] <> array2 [ i ] then
41855: LD_VAR 0 1
41859: PUSH
41860: LD_VAR 0 4
41864: ARRAY
41865: PUSH
41866: LD_VAR 0 2
41870: PUSH
41871: LD_VAR 0 4
41875: ARRAY
41876: NONEQUAL
41877: IFFALSE 41889
// begin result := false ;
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_INT 0
41886: ST_TO_ADDR
// break ;
41887: GO 41891
// end ;
41889: GO 41852
41891: POP
41892: POP
// end ;
41893: LD_VAR 0 3
41897: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41898: LD_INT 0
41900: PPUSH
41901: PPUSH
41902: PPUSH
// pom := GetBase ( fac ) ;
41903: LD_ADDR_VAR 0 5
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 274
41917: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41918: LD_ADDR_VAR 0 4
41922: PUSH
41923: LD_VAR 0 2
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: LD_VAR 0 2
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 2
41945: PUSH
41946: LD_INT 3
41948: ARRAY
41949: PPUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_INT 4
41957: ARRAY
41958: PPUSH
41959: CALL_OW 449
41963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41964: LD_ADDR_VAR 0 3
41968: PUSH
41969: LD_VAR 0 5
41973: PPUSH
41974: LD_INT 1
41976: PPUSH
41977: CALL_OW 275
41981: PUSH
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 1
41989: ARRAY
41990: GREATEREQUAL
41991: IFFALSE 42017
41993: PUSH
41994: LD_VAR 0 5
41998: PPUSH
41999: LD_INT 2
42001: PPUSH
42002: CALL_OW 275
42006: PUSH
42007: LD_VAR 0 4
42011: PUSH
42012: LD_INT 2
42014: ARRAY
42015: GREATEREQUAL
42016: AND
42017: IFFALSE 42043
42019: PUSH
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_INT 3
42027: PPUSH
42028: CALL_OW 275
42032: PUSH
42033: LD_VAR 0 4
42037: PUSH
42038: LD_INT 3
42040: ARRAY
42041: GREATEREQUAL
42042: AND
42043: ST_TO_ADDR
// end ;
42044: LD_VAR 0 3
42048: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
// pom := GetBase ( building ) ;
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_VAR 0 1
42064: PPUSH
42065: CALL_OW 274
42069: ST_TO_ADDR
// if not pom then
42070: LD_VAR 0 3
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 42253
// btype := GetBType ( building ) ;
42079: LD_ADDR_VAR 0 5
42083: PUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: CALL_OW 266
42093: ST_TO_ADDR
// if btype = b_armoury then
42094: LD_VAR 0 5
42098: PUSH
42099: LD_INT 4
42101: EQUAL
42102: IFFALSE 42112
// btype := b_barracks ;
42104: LD_ADDR_VAR 0 5
42108: PUSH
42109: LD_INT 5
42111: ST_TO_ADDR
// if btype = b_depot then
42112: LD_VAR 0 5
42116: PUSH
42117: LD_INT 0
42119: EQUAL
42120: IFFALSE 42130
// btype := b_warehouse ;
42122: LD_ADDR_VAR 0 5
42126: PUSH
42127: LD_INT 1
42129: ST_TO_ADDR
// if btype = b_workshop then
42130: LD_VAR 0 5
42134: PUSH
42135: LD_INT 2
42137: EQUAL
42138: IFFALSE 42148
// btype := b_factory ;
42140: LD_ADDR_VAR 0 5
42144: PUSH
42145: LD_INT 3
42147: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42148: LD_ADDR_VAR 0 4
42152: PUSH
42153: LD_VAR 0 5
42157: PPUSH
42158: LD_VAR 0 1
42162: PPUSH
42163: CALL_OW 248
42167: PPUSH
42168: CALL_OW 450
42172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42173: LD_ADDR_VAR 0 2
42177: PUSH
42178: LD_VAR 0 3
42182: PPUSH
42183: LD_INT 1
42185: PPUSH
42186: CALL_OW 275
42190: PUSH
42191: LD_VAR 0 4
42195: PUSH
42196: LD_INT 1
42198: ARRAY
42199: GREATEREQUAL
42200: IFFALSE 42226
42202: PUSH
42203: LD_VAR 0 3
42207: PPUSH
42208: LD_INT 2
42210: PPUSH
42211: CALL_OW 275
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: GREATEREQUAL
42225: AND
42226: IFFALSE 42252
42228: PUSH
42229: LD_VAR 0 3
42233: PPUSH
42234: LD_INT 3
42236: PPUSH
42237: CALL_OW 275
42241: PUSH
42242: LD_VAR 0 4
42246: PUSH
42247: LD_INT 3
42249: ARRAY
42250: GREATEREQUAL
42251: AND
42252: ST_TO_ADDR
// end ;
42253: LD_VAR 0 2
42257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42258: LD_INT 0
42260: PPUSH
42261: PPUSH
42262: PPUSH
// pom := GetBase ( building ) ;
42263: LD_ADDR_VAR 0 4
42267: PUSH
42268: LD_VAR 0 1
42272: PPUSH
42273: CALL_OW 274
42277: ST_TO_ADDR
// if not pom then
42278: LD_VAR 0 4
42282: NOT
42283: IFFALSE 42287
// exit ;
42285: GO 42392
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42287: LD_ADDR_VAR 0 5
42291: PUSH
42292: LD_VAR 0 2
42296: PPUSH
42297: LD_VAR 0 1
42301: PPUSH
42302: CALL_OW 248
42306: PPUSH
42307: CALL_OW 450
42311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42312: LD_ADDR_VAR 0 3
42316: PUSH
42317: LD_VAR 0 4
42321: PPUSH
42322: LD_INT 1
42324: PPUSH
42325: CALL_OW 275
42329: PUSH
42330: LD_VAR 0 5
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: GREATEREQUAL
42339: IFFALSE 42365
42341: PUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: LD_INT 2
42349: PPUSH
42350: CALL_OW 275
42354: PUSH
42355: LD_VAR 0 5
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: GREATEREQUAL
42364: AND
42365: IFFALSE 42391
42367: PUSH
42368: LD_VAR 0 4
42372: PPUSH
42373: LD_INT 3
42375: PPUSH
42376: CALL_OW 275
42380: PUSH
42381: LD_VAR 0 5
42385: PUSH
42386: LD_INT 3
42388: ARRAY
42389: GREATEREQUAL
42390: AND
42391: ST_TO_ADDR
// end ;
42392: LD_VAR 0 3
42396: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42397: LD_INT 0
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
// result := false ;
42410: LD_ADDR_VAR 0 8
42414: PUSH
42415: LD_INT 0
42417: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42418: LD_VAR 0 5
42422: NOT
42423: IFTRUE 42432
42425: PUSH
42426: LD_VAR 0 1
42430: NOT
42431: OR
42432: IFTRUE 42441
42434: PUSH
42435: LD_VAR 0 2
42439: NOT
42440: OR
42441: IFTRUE 42450
42443: PUSH
42444: LD_VAR 0 3
42448: NOT
42449: OR
42450: IFFALSE 42454
// exit ;
42452: GO 43280
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42454: LD_ADDR_VAR 0 14
42458: PUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: LD_VAR 0 3
42473: PPUSH
42474: LD_VAR 0 4
42478: PPUSH
42479: LD_VAR 0 5
42483: PUSH
42484: LD_INT 1
42486: ARRAY
42487: PPUSH
42488: CALL_OW 248
42492: PPUSH
42493: LD_INT 0
42495: PPUSH
42496: CALL 44561 0 6
42500: ST_TO_ADDR
// if not hexes then
42501: LD_VAR 0 14
42505: NOT
42506: IFFALSE 42510
// exit ;
42508: GO 43280
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42510: LD_ADDR_VAR 0 17
42514: PUSH
42515: LD_VAR 0 5
42519: PPUSH
42520: LD_INT 22
42522: PUSH
42523: LD_VAR 0 13
42527: PPUSH
42528: CALL_OW 255
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: LD_INT 30
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 30
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PPUSH
42569: CALL_OW 72
42573: ST_TO_ADDR
// for i = 1 to hexes do
42574: LD_ADDR_VAR 0 9
42578: PUSH
42579: DOUBLE
42580: LD_INT 1
42582: DEC
42583: ST_TO_ADDR
42584: LD_VAR 0 14
42588: PUSH
42589: FOR_TO
42590: IFFALSE 43278
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42592: LD_ADDR_VAR 0 13
42596: PUSH
42597: LD_VAR 0 14
42601: PUSH
42602: LD_VAR 0 9
42606: ARRAY
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: PPUSH
42612: LD_VAR 0 14
42616: PUSH
42617: LD_VAR 0 9
42621: ARRAY
42622: PUSH
42623: LD_INT 2
42625: ARRAY
42626: PPUSH
42627: CALL_OW 428
42631: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42632: LD_VAR 0 14
42636: PUSH
42637: LD_VAR 0 9
42641: ARRAY
42642: PUSH
42643: LD_INT 1
42645: ARRAY
42646: PPUSH
42647: LD_VAR 0 14
42651: PUSH
42652: LD_VAR 0 9
42656: ARRAY
42657: PUSH
42658: LD_INT 2
42660: ARRAY
42661: PPUSH
42662: CALL_OW 351
42666: IFTRUE 42705
42668: PUSH
42669: LD_VAR 0 14
42673: PUSH
42674: LD_VAR 0 9
42678: ARRAY
42679: PUSH
42680: LD_INT 1
42682: ARRAY
42683: PPUSH
42684: LD_VAR 0 14
42688: PUSH
42689: LD_VAR 0 9
42693: ARRAY
42694: PUSH
42695: LD_INT 2
42697: ARRAY
42698: PPUSH
42699: CALL_OW 488
42703: NOT
42704: OR
42705: IFTRUE 42722
42707: PUSH
42708: LD_VAR 0 13
42712: PPUSH
42713: CALL_OW 247
42717: PUSH
42718: LD_INT 3
42720: EQUAL
42721: OR
42722: IFFALSE 42728
// exit ;
42724: POP
42725: POP
42726: GO 43280
// if not tmp then
42728: LD_VAR 0 13
42732: NOT
42733: IFFALSE 42737
// continue ;
42735: GO 42589
// result := true ;
42737: LD_ADDR_VAR 0 8
42741: PUSH
42742: LD_INT 1
42744: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42745: LD_VAR 0 6
42749: IFFALSE 42766
42751: PUSH
42752: LD_VAR 0 13
42756: PPUSH
42757: CALL_OW 247
42761: PUSH
42762: LD_INT 2
42764: EQUAL
42765: AND
42766: IFFALSE 42783
42768: PUSH
42769: LD_VAR 0 13
42773: PPUSH
42774: CALL_OW 263
42778: PUSH
42779: LD_INT 1
42781: EQUAL
42782: AND
42783: IFFALSE 42947
// begin if IsDrivenBy ( tmp ) then
42785: LD_VAR 0 13
42789: PPUSH
42790: CALL_OW 311
42794: IFFALSE 42798
// continue ;
42796: GO 42589
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42798: LD_VAR 0 6
42802: PPUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 60
42808: PUSH
42809: EMPTY
42810: LIST
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 55
42821: PUSH
42822: EMPTY
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 72
42837: IFFALSE 42945
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42839: LD_ADDR_VAR 0 18
42843: PUSH
42844: LD_VAR 0 6
42848: PPUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 60
42854: PUSH
42855: EMPTY
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 55
42867: PUSH
42868: EMPTY
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PPUSH
42879: CALL_OW 72
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: ST_TO_ADDR
// if IsInUnit ( driver ) then
42888: LD_VAR 0 18
42892: PPUSH
42893: CALL_OW 310
42897: IFFALSE 42908
// ComExit ( driver ) ;
42899: LD_VAR 0 18
42903: PPUSH
42904: CALL 68551 0 1
// AddComEnterUnit ( driver , tmp ) ;
42908: LD_VAR 0 18
42912: PPUSH
42913: LD_VAR 0 13
42917: PPUSH
42918: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42922: LD_VAR 0 18
42926: PPUSH
42927: LD_VAR 0 7
42931: PPUSH
42932: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42936: LD_VAR 0 18
42940: PPUSH
42941: CALL_OW 181
// end ; continue ;
42945: GO 42589
// end ; if not cleaners or not tmp in cleaners then
42947: LD_VAR 0 6
42951: NOT
42952: IFTRUE 42967
42954: PUSH
42955: LD_VAR 0 13
42959: PUSH
42960: LD_VAR 0 6
42964: IN
42965: NOT
42966: OR
42967: IFFALSE 43276
// begin if dep then
42969: LD_VAR 0 17
42973: IFFALSE 43109
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42975: LD_ADDR_VAR 0 16
42979: PUSH
42980: LD_VAR 0 17
42984: PUSH
42985: LD_INT 1
42987: ARRAY
42988: PPUSH
42989: CALL_OW 250
42993: PPUSH
42994: LD_VAR 0 17
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PPUSH
43003: CALL_OW 254
43007: PPUSH
43008: LD_INT 5
43010: PPUSH
43011: CALL_OW 272
43015: PUSH
43016: LD_VAR 0 17
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PPUSH
43025: CALL_OW 251
43029: PPUSH
43030: LD_VAR 0 17
43034: PUSH
43035: LD_INT 1
43037: ARRAY
43038: PPUSH
43039: CALL_OW 254
43043: PPUSH
43044: LD_INT 5
43046: PPUSH
43047: CALL_OW 273
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43056: LD_VAR 0 16
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: LD_VAR 0 16
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: PPUSH
43074: CALL_OW 488
43078: IFFALSE 43109
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43080: LD_VAR 0 13
43084: PPUSH
43085: LD_VAR 0 16
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: LD_VAR 0 16
43098: PUSH
43099: LD_INT 2
43101: ARRAY
43102: PPUSH
43103: CALL_OW 111
// continue ;
43107: GO 42589
// end ; end ; r := GetDir ( tmp ) ;
43109: LD_ADDR_VAR 0 15
43113: PUSH
43114: LD_VAR 0 13
43118: PPUSH
43119: CALL_OW 254
43123: ST_TO_ADDR
// if r = 5 then
43124: LD_VAR 0 15
43128: PUSH
43129: LD_INT 5
43131: EQUAL
43132: IFFALSE 43142
// r := 0 ;
43134: LD_ADDR_VAR 0 15
43138: PUSH
43139: LD_INT 0
43141: ST_TO_ADDR
// for j = r to 5 do
43142: LD_ADDR_VAR 0 10
43146: PUSH
43147: DOUBLE
43148: LD_VAR 0 15
43152: DEC
43153: ST_TO_ADDR
43154: LD_INT 5
43156: PUSH
43157: FOR_TO
43158: IFFALSE 43274
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43160: LD_ADDR_VAR 0 11
43164: PUSH
43165: LD_VAR 0 13
43169: PPUSH
43170: CALL_OW 250
43174: PPUSH
43175: LD_VAR 0 10
43179: PPUSH
43180: LD_INT 2
43182: PPUSH
43183: CALL_OW 272
43187: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43188: LD_ADDR_VAR 0 12
43192: PUSH
43193: LD_VAR 0 13
43197: PPUSH
43198: CALL_OW 251
43202: PPUSH
43203: LD_VAR 0 10
43207: PPUSH
43208: LD_INT 2
43210: PPUSH
43211: CALL_OW 273
43215: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43216: LD_VAR 0 11
43220: PPUSH
43221: LD_VAR 0 12
43225: PPUSH
43226: CALL_OW 488
43230: IFFALSE 43249
43232: PUSH
43233: LD_VAR 0 11
43237: PPUSH
43238: LD_VAR 0 12
43242: PPUSH
43243: CALL_OW 428
43247: NOT
43248: AND
43249: IFFALSE 43272
// begin ComMoveXY ( tmp , _x , _y ) ;
43251: LD_VAR 0 13
43255: PPUSH
43256: LD_VAR 0 11
43260: PPUSH
43261: LD_VAR 0 12
43265: PPUSH
43266: CALL_OW 111
// break ;
43270: GO 43274
// end ; end ;
43272: GO 43157
43274: POP
43275: POP
// end ; end ;
43276: GO 42589
43278: POP
43279: POP
// end ;
43280: LD_VAR 0 8
43284: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43285: LD_INT 0
43287: PPUSH
// result := true ;
43288: LD_ADDR_VAR 0 3
43292: PUSH
43293: LD_INT 1
43295: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43296: LD_VAR 0 2
43300: PUSH
43301: LD_INT 24
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43315
43307: LD_INT 33
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43340
43315: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 32
43323: PPUSH
43324: LD_VAR 0 1
43328: PPUSH
43329: CALL_OW 321
43333: PUSH
43334: LD_INT 2
43336: EQUAL
43337: ST_TO_ADDR
43338: GO 43656
43340: LD_INT 20
43342: DOUBLE
43343: EQUAL
43344: IFTRUE 43348
43346: GO 43373
43348: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_INT 6
43356: PPUSH
43357: LD_VAR 0 1
43361: PPUSH
43362: CALL_OW 321
43366: PUSH
43367: LD_INT 2
43369: EQUAL
43370: ST_TO_ADDR
43371: GO 43656
43373: LD_INT 22
43375: DOUBLE
43376: EQUAL
43377: IFTRUE 43387
43379: LD_INT 36
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43412
43387: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 15
43395: PPUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 321
43405: PUSH
43406: LD_INT 2
43408: EQUAL
43409: ST_TO_ADDR
43410: GO 43656
43412: LD_INT 30
43414: DOUBLE
43415: EQUAL
43416: IFTRUE 43420
43418: GO 43445
43420: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43421: LD_ADDR_VAR 0 3
43425: PUSH
43426: LD_INT 20
43428: PPUSH
43429: LD_VAR 0 1
43433: PPUSH
43434: CALL_OW 321
43438: PUSH
43439: LD_INT 2
43441: EQUAL
43442: ST_TO_ADDR
43443: GO 43656
43445: LD_INT 28
43447: DOUBLE
43448: EQUAL
43449: IFTRUE 43459
43451: LD_INT 21
43453: DOUBLE
43454: EQUAL
43455: IFTRUE 43459
43457: GO 43484
43459: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43460: LD_ADDR_VAR 0 3
43464: PUSH
43465: LD_INT 21
43467: PPUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 321
43477: PUSH
43478: LD_INT 2
43480: EQUAL
43481: ST_TO_ADDR
43482: GO 43656
43484: LD_INT 16
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43492
43490: GO 43517
43492: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: LD_INT 84
43500: PPUSH
43501: LD_VAR 0 1
43505: PPUSH
43506: CALL_OW 321
43510: PUSH
43511: LD_INT 2
43513: EQUAL
43514: ST_TO_ADDR
43515: GO 43656
43517: LD_INT 19
43519: DOUBLE
43520: EQUAL
43521: IFTRUE 43531
43523: LD_INT 23
43525: DOUBLE
43526: EQUAL
43527: IFTRUE 43531
43529: GO 43556
43531: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43532: LD_ADDR_VAR 0 3
43536: PUSH
43537: LD_INT 83
43539: PPUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 321
43549: PUSH
43550: LD_INT 2
43552: EQUAL
43553: ST_TO_ADDR
43554: GO 43656
43556: LD_INT 17
43558: DOUBLE
43559: EQUAL
43560: IFTRUE 43564
43562: GO 43589
43564: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_INT 39
43572: PPUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 321
43582: PUSH
43583: LD_INT 2
43585: EQUAL
43586: ST_TO_ADDR
43587: GO 43656
43589: LD_INT 18
43591: DOUBLE
43592: EQUAL
43593: IFTRUE 43597
43595: GO 43622
43597: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: LD_INT 40
43605: PPUSH
43606: LD_VAR 0 1
43610: PPUSH
43611: CALL_OW 321
43615: PUSH
43616: LD_INT 2
43618: EQUAL
43619: ST_TO_ADDR
43620: GO 43656
43622: LD_INT 27
43624: DOUBLE
43625: EQUAL
43626: IFTRUE 43630
43628: GO 43655
43630: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43631: LD_ADDR_VAR 0 3
43635: PUSH
43636: LD_INT 35
43638: PPUSH
43639: LD_VAR 0 1
43643: PPUSH
43644: CALL_OW 321
43648: PUSH
43649: LD_INT 2
43651: EQUAL
43652: ST_TO_ADDR
43653: GO 43656
43655: POP
// end ;
43656: LD_VAR 0 3
43660: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43661: LD_INT 0
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
// result := false ;
43674: LD_ADDR_VAR 0 6
43678: PUSH
43679: LD_INT 0
43681: ST_TO_ADDR
// if btype = b_depot then
43682: LD_VAR 0 2
43686: PUSH
43687: LD_INT 0
43689: EQUAL
43690: IFFALSE 43702
// begin result := true ;
43692: LD_ADDR_VAR 0 6
43696: PUSH
43697: LD_INT 1
43699: ST_TO_ADDR
// exit ;
43700: GO 44556
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43702: LD_VAR 0 1
43706: NOT
43707: IFTRUE 43732
43709: PUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: CALL_OW 266
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: IN
43730: NOT
43731: OR
43732: IFTRUE 43741
43734: PUSH
43735: LD_VAR 0 2
43739: NOT
43740: OR
43741: IFTRUE 43777
43743: PUSH
43744: LD_VAR 0 5
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: LD_INT 5
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: IN
43775: NOT
43776: OR
43777: IFTRUE 43796
43779: PUSH
43780: LD_VAR 0 3
43784: PPUSH
43785: LD_VAR 0 4
43789: PPUSH
43790: CALL_OW 488
43794: NOT
43795: OR
43796: IFFALSE 43800
// exit ;
43798: GO 44556
// side := GetSide ( depot ) ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_VAR 0 1
43809: PPUSH
43810: CALL_OW 255
43814: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43815: LD_VAR 0 9
43819: PPUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL 43285 0 2
43829: NOT
43830: IFFALSE 43834
// exit ;
43832: GO 44556
// pom := GetBase ( depot ) ;
43834: LD_ADDR_VAR 0 10
43838: PUSH
43839: LD_VAR 0 1
43843: PPUSH
43844: CALL_OW 274
43848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43849: LD_ADDR_VAR 0 11
43853: PUSH
43854: LD_VAR 0 2
43858: PPUSH
43859: LD_VAR 0 1
43863: PPUSH
43864: CALL_OW 248
43868: PPUSH
43869: CALL_OW 450
43873: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43874: LD_VAR 0 10
43878: PPUSH
43879: LD_INT 1
43881: PPUSH
43882: CALL_OW 275
43886: PUSH
43887: LD_VAR 0 11
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: GREATEREQUAL
43896: IFFALSE 43922
43898: PUSH
43899: LD_VAR 0 10
43903: PPUSH
43904: LD_INT 2
43906: PPUSH
43907: CALL_OW 275
43911: PUSH
43912: LD_VAR 0 11
43916: PUSH
43917: LD_INT 2
43919: ARRAY
43920: GREATEREQUAL
43921: AND
43922: IFFALSE 43948
43924: PUSH
43925: LD_VAR 0 10
43929: PPUSH
43930: LD_INT 3
43932: PPUSH
43933: CALL_OW 275
43937: PUSH
43938: LD_VAR 0 11
43942: PUSH
43943: LD_INT 3
43945: ARRAY
43946: GREATEREQUAL
43947: AND
43948: NOT
43949: IFFALSE 43953
// exit ;
43951: GO 44556
// if GetBType ( depot ) = b_depot then
43953: LD_VAR 0 1
43957: PPUSH
43958: CALL_OW 266
43962: PUSH
43963: LD_INT 0
43965: EQUAL
43966: IFFALSE 43978
// dist := 28 else
43968: LD_ADDR_VAR 0 14
43972: PUSH
43973: LD_INT 28
43975: ST_TO_ADDR
43976: GO 43986
// dist := 36 ;
43978: LD_ADDR_VAR 0 14
43982: PUSH
43983: LD_INT 36
43985: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43986: LD_VAR 0 1
43990: PPUSH
43991: LD_VAR 0 3
43995: PPUSH
43996: LD_VAR 0 4
44000: PPUSH
44001: CALL_OW 297
44005: PUSH
44006: LD_VAR 0 14
44010: GREATER
44011: IFFALSE 44015
// exit ;
44013: GO 44556
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44015: LD_ADDR_VAR 0 12
44019: PUSH
44020: LD_VAR 0 2
44024: PPUSH
44025: LD_VAR 0 3
44029: PPUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: LD_VAR 0 5
44039: PPUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: CALL_OW 248
44049: PPUSH
44050: LD_INT 0
44052: PPUSH
44053: CALL 44561 0 6
44057: ST_TO_ADDR
// if not hexes then
44058: LD_VAR 0 12
44062: NOT
44063: IFFALSE 44067
// exit ;
44065: GO 44556
// hex := GetHexInfo ( x , y ) ;
44067: LD_ADDR_VAR 0 15
44071: PUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: LD_VAR 0 4
44081: PPUSH
44082: CALL_OW 546
44086: ST_TO_ADDR
// if hex [ 1 ] then
44087: LD_VAR 0 15
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: IFFALSE 44099
// exit ;
44097: GO 44556
// height := hex [ 2 ] ;
44099: LD_ADDR_VAR 0 13
44103: PUSH
44104: LD_VAR 0 15
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: ST_TO_ADDR
// for i = 1 to hexes do
44113: LD_ADDR_VAR 0 7
44117: PUSH
44118: DOUBLE
44119: LD_INT 1
44121: DEC
44122: ST_TO_ADDR
44123: LD_VAR 0 12
44127: PUSH
44128: FOR_TO
44129: IFFALSE 44473
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44131: LD_VAR 0 12
44135: PUSH
44136: LD_VAR 0 7
44140: ARRAY
44141: PUSH
44142: LD_INT 1
44144: ARRAY
44145: PPUSH
44146: LD_VAR 0 12
44150: PUSH
44151: LD_VAR 0 7
44155: ARRAY
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: PPUSH
44161: CALL_OW 488
44165: NOT
44166: IFTRUE 44208
44168: PUSH
44169: LD_VAR 0 12
44173: PUSH
44174: LD_VAR 0 7
44178: ARRAY
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PPUSH
44184: LD_VAR 0 12
44188: PUSH
44189: LD_VAR 0 7
44193: ARRAY
44194: PUSH
44195: LD_INT 2
44197: ARRAY
44198: PPUSH
44199: CALL_OW 428
44203: PUSH
44204: LD_INT 0
44206: GREATER
44207: OR
44208: IFTRUE 44246
44210: PUSH
44211: LD_VAR 0 12
44215: PUSH
44216: LD_VAR 0 7
44220: ARRAY
44221: PUSH
44222: LD_INT 1
44224: ARRAY
44225: PPUSH
44226: LD_VAR 0 12
44230: PUSH
44231: LD_VAR 0 7
44235: ARRAY
44236: PUSH
44237: LD_INT 2
44239: ARRAY
44240: PPUSH
44241: CALL_OW 351
44245: OR
44246: IFFALSE 44252
// exit ;
44248: POP
44249: POP
44250: GO 44556
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44252: LD_ADDR_VAR 0 8
44256: PUSH
44257: LD_VAR 0 12
44261: PUSH
44262: LD_VAR 0 7
44266: ARRAY
44267: PUSH
44268: LD_INT 1
44270: ARRAY
44271: PPUSH
44272: LD_VAR 0 12
44276: PUSH
44277: LD_VAR 0 7
44281: ARRAY
44282: PUSH
44283: LD_INT 2
44285: ARRAY
44286: PPUSH
44287: CALL_OW 546
44291: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44292: LD_VAR 0 8
44296: PUSH
44297: LD_INT 1
44299: ARRAY
44300: IFTRUE 44322
44302: PUSH
44303: LD_VAR 0 8
44307: PUSH
44308: LD_INT 2
44310: ARRAY
44311: PUSH
44312: LD_VAR 0 13
44316: PUSH
44317: LD_INT 2
44319: PLUS
44320: GREATER
44321: OR
44322: IFTRUE 44344
44324: PUSH
44325: LD_VAR 0 8
44329: PUSH
44330: LD_INT 2
44332: ARRAY
44333: PUSH
44334: LD_VAR 0 13
44338: PUSH
44339: LD_INT 2
44341: MINUS
44342: LESS
44343: OR
44344: IFTRUE 44412
44346: PUSH
44347: LD_VAR 0 8
44351: PUSH
44352: LD_INT 3
44354: ARRAY
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 8
44361: PUSH
44362: LD_INT 9
44364: PUSH
44365: LD_INT 10
44367: PUSH
44368: LD_INT 11
44370: PUSH
44371: LD_INT 12
44373: PUSH
44374: LD_INT 13
44376: PUSH
44377: LD_INT 16
44379: PUSH
44380: LD_INT 17
44382: PUSH
44383: LD_INT 18
44385: PUSH
44386: LD_INT 19
44388: PUSH
44389: LD_INT 20
44391: PUSH
44392: LD_INT 21
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: IN
44410: NOT
44411: OR
44412: IFTRUE 44425
44414: PUSH
44415: LD_VAR 0 8
44419: PUSH
44420: LD_INT 5
44422: ARRAY
44423: NOT
44424: OR
44425: IFTRUE 44465
44427: PUSH
44428: LD_VAR 0 8
44432: PUSH
44433: LD_INT 6
44435: ARRAY
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 7
44445: PUSH
44446: LD_INT 9
44448: PUSH
44449: LD_INT 10
44451: PUSH
44452: LD_INT 11
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: IN
44463: NOT
44464: OR
44465: IFFALSE 44471
// exit ;
44467: POP
44468: POP
44469: GO 44556
// end ;
44471: GO 44128
44473: POP
44474: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44475: LD_VAR 0 9
44479: PPUSH
44480: LD_VAR 0 3
44484: PPUSH
44485: LD_VAR 0 4
44489: PPUSH
44490: LD_INT 20
44492: PPUSH
44493: CALL 36375 0 4
44497: PUSH
44498: LD_INT 4
44500: ARRAY
44501: IFFALSE 44505
// exit ;
44503: GO 44556
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44505: LD_VAR 0 2
44509: PUSH
44510: LD_INT 29
44512: PUSH
44513: LD_INT 30
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: IN
44520: IFFALSE 44544
44522: PUSH
44523: LD_VAR 0 3
44527: PPUSH
44528: LD_VAR 0 4
44532: PPUSH
44533: LD_VAR 0 9
44537: PPUSH
44538: CALL_OW 440
44542: NOT
44543: AND
44544: IFFALSE 44548
// exit ;
44546: GO 44556
// result := true ;
44548: LD_ADDR_VAR 0 6
44552: PUSH
44553: LD_INT 1
44555: ST_TO_ADDR
// end ;
44556: LD_VAR 0 6
44560: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44561: LD_INT 0
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
// result = [ ] ;
44621: LD_ADDR_VAR 0 7
44625: PUSH
44626: EMPTY
44627: ST_TO_ADDR
// temp_list = [ ] ;
44628: LD_ADDR_VAR 0 9
44632: PUSH
44633: EMPTY
44634: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44635: LD_VAR 0 4
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: LD_INT 4
44654: PUSH
44655: LD_INT 5
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: IN
44666: NOT
44667: IFTRUE 44710
44669: PUSH
44670: LD_VAR 0 1
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: IN
44685: IFFALSE 44709
44687: PUSH
44688: LD_VAR 0 5
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: IN
44707: NOT
44708: AND
44709: OR
44710: IFFALSE 44714
// exit ;
44712: GO 63113
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44714: LD_VAR 0 1
44718: PUSH
44719: LD_INT 6
44721: PUSH
44722: LD_INT 7
44724: PUSH
44725: LD_INT 8
44727: PUSH
44728: LD_INT 13
44730: PUSH
44731: LD_INT 12
44733: PUSH
44734: LD_INT 15
44736: PUSH
44737: LD_INT 11
44739: PUSH
44740: LD_INT 14
44742: PUSH
44743: LD_INT 10
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: IN
44757: IFFALSE 44767
// btype = b_lab ;
44759: LD_ADDR_VAR 0 1
44763: PUSH
44764: LD_INT 6
44766: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44767: LD_VAR 0 6
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: IN
44786: NOT
44787: IFTRUE 44855
44789: PUSH
44790: LD_VAR 0 1
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: LD_INT 6
44809: PUSH
44810: LD_INT 36
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: LD_INT 5
44818: PUSH
44819: LD_INT 31
44821: PUSH
44822: LD_INT 32
44824: PUSH
44825: LD_INT 33
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: IN
44841: NOT
44842: IFFALSE 44854
44844: PUSH
44845: LD_VAR 0 6
44849: PUSH
44850: LD_INT 1
44852: EQUAL
44853: AND
44854: OR
44855: IFTRUE 44887
44857: PUSH
44858: LD_VAR 0 1
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: IN
44873: NOT
44874: IFFALSE 44886
44876: PUSH
44877: LD_VAR 0 6
44881: PUSH
44882: LD_INT 2
44884: EQUAL
44885: AND
44886: OR
44887: IFFALSE 44897
// mode = 0 ;
44889: LD_ADDR_VAR 0 6
44893: PUSH
44894: LD_INT 0
44896: ST_TO_ADDR
// case mode of 0 :
44897: LD_VAR 0 6
44901: PUSH
44902: LD_INT 0
44904: DOUBLE
44905: EQUAL
44906: IFTRUE 44910
44908: GO 56363
44910: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44911: LD_ADDR_VAR 0 11
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45104: LD_ADDR_VAR 0 12
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45300: LD_ADDR_VAR 0 13
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: LD_INT 3
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 14
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45695: LD_ADDR_VAR 0 15
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45888: LD_ADDR_VAR 0 16
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46081: LD_ADDR_VAR 0 17
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46311: LD_ADDR_VAR 0 18
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46541: LD_ADDR_VAR 0 19
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46771: LD_ADDR_VAR 0 20
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47001: LD_ADDR_VAR 0 21
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47231: LD_ADDR_VAR 0 22
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47461: LD_ADDR_VAR 0 23
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 3
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47741: LD_ADDR_VAR 0 24
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48017: LD_ADDR_VAR 0 25
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48291: LD_ADDR_VAR 0 26
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48567: LD_ADDR_VAR 0 27
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48847: LD_ADDR_VAR 0 28
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49129: LD_ADDR_VAR 0 29
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49408: LD_ADDR_VAR 0 30
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49686: LD_ADDR_VAR 0 31
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49964: LD_ADDR_VAR 0 32
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50242: LD_ADDR_VAR 0 33
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50521: LD_ADDR_VAR 0 34
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50801: LD_ADDR_VAR 0 35
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50913: LD_ADDR_VAR 0 36
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51025: LD_ADDR_VAR 0 37
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51137: LD_ADDR_VAR 0 38
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51249: LD_ADDR_VAR 0 39
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51361: LD_ADDR_VAR 0 40
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51473: LD_ADDR_VAR 0 41
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51823: LD_ADDR_VAR 0 42
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52173: LD_ADDR_VAR 0 43
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52521: LD_ADDR_VAR 0 44
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52871: LD_ADDR_VAR 0 45
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53221: LD_ADDR_VAR 0 46
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53569: LD_ADDR_VAR 0 47
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53720: LD_ADDR_VAR 0 48
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53867: LD_ADDR_VAR 0 49
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54011: LD_ADDR_VAR 0 50
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54155: LD_ADDR_VAR 0 51
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54302: LD_ADDR_VAR 0 52
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54453: LD_ADDR_VAR 0 53
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54683: LD_ADDR_VAR 0 54
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54913: LD_ADDR_VAR 0 55
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55143: LD_ADDR_VAR 0 56
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55373: LD_ADDR_VAR 0 57
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55603: LD_ADDR_VAR 0 58
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55833: LD_ADDR_VAR 0 59
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55921: LD_ADDR_VAR 0 60
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56009: LD_ADDR_VAR 0 61
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56097: LD_ADDR_VAR 0 62
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56185: LD_ADDR_VAR 0 63
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56273: LD_ADDR_VAR 0 64
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// end ; 1 :
56361: GO 62258
56363: LD_INT 1
56365: DOUBLE
56366: EQUAL
56367: IFTRUE 56371
56369: GO 58994
56371: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56372: LD_ADDR_VAR 0 11
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56416: LD_ADDR_VAR 0 12
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56457: LD_ADDR_VAR 0 13
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56497: LD_ADDR_VAR 0 14
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56538: LD_ADDR_VAR 0 15
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56582: LD_ADDR_VAR 0 16
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56628: LD_ADDR_VAR 0 17
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56672: LD_ADDR_VAR 0 18
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56713: LD_ADDR_VAR 0 19
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56753: LD_ADDR_VAR 0 20
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56794: LD_ADDR_VAR 0 21
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56838: LD_ADDR_VAR 0 22
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56884: LD_ADDR_VAR 0 23
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 4
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56928: LD_ADDR_VAR 0 24
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56969: LD_ADDR_VAR 0 25
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57009: LD_ADDR_VAR 0 26
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57050: LD_ADDR_VAR 0 27
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57094: LD_ADDR_VAR 0 28
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: LD_INT 4
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57140: LD_ADDR_VAR 0 29
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 5
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 6
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 6
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57295: LD_ADDR_VAR 0 30
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 6
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 6
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57438: LD_ADDR_VAR 0 31
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 4
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: PUSH
57516: LD_INT 5
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: LD_INT 5
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 6
57535: PUSH
57536: LD_INT 5
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 6
57545: PUSH
57546: LD_INT 6
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 5
57555: PUSH
57556: LD_INT 6
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57577: LD_ADDR_VAR 0 32
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 4
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 5
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 5
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 6
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 6
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57720: LD_ADDR_VAR 0 33
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 4
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 5
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 6
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 6
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57875: LD_ADDR_VAR 0 34
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 4
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: NEG
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 4
57942: NEG
57943: PUSH
57944: LD_INT 4
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 5
57966: NEG
57967: PUSH
57968: LD_INT 4
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: LD_INT 5
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 5
57990: NEG
57991: PUSH
57992: LD_INT 6
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 6
58002: NEG
58003: PUSH
58004: LD_INT 5
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 6
58014: NEG
58015: PUSH
58016: LD_INT 6
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58038: LD_ADDR_VAR 0 41
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58082: LD_ADDR_VAR 0 42
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58123: LD_ADDR_VAR 0 43
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58163: LD_ADDR_VAR 0 44
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58204: LD_ADDR_VAR 0 45
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58248: LD_ADDR_VAR 0 46
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 47
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58327: LD_ADDR_VAR 0 48
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58358: LD_ADDR_VAR 0 49
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58387: LD_ADDR_VAR 0 50
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58416: LD_ADDR_VAR 0 51
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58447: LD_ADDR_VAR 0 52
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58480: LD_ADDR_VAR 0 53
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58524: LD_ADDR_VAR 0 54
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58565: LD_ADDR_VAR 0 55
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58605: LD_ADDR_VAR 0 56
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58646: LD_ADDR_VAR 0 57
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58690: LD_ADDR_VAR 0 58
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58736: LD_ADDR_VAR 0 59
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58780: LD_ADDR_VAR 0 60
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58821: LD_ADDR_VAR 0 61
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58861: LD_ADDR_VAR 0 62
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58902: LD_ADDR_VAR 0 63
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58946: LD_ADDR_VAR 0 64
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// end ; 2 :
58992: GO 62258
58994: LD_INT 2
58996: DOUBLE
58997: EQUAL
58998: IFTRUE 59002
59000: GO 62257
59002: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59003: LD_ADDR_VAR 0 29
59007: PUSH
59008: LD_INT 4
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 5
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 5
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 4
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 4
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 4
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 4
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 5
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 5
59460: NEG
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59541: LD_ADDR_VAR 0 30
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: LD_INT 5
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: LD_INT 5
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 5
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 4
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 5
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 5
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60088: LD_ADDR_VAR 0 31
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 5
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 4
60244: NEG
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 5
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 4
60338: NEG
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 5
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 4
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 5
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60638: LD_ADDR_VAR 0 32
60642: PUSH
60643: LD_INT 4
60645: NEG
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 5
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 5
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 5
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: LD_INT 4
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 5
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 5
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61185: LD_ADDR_VAR 0 33
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: LD_INT 5
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 5
61264: NEG
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 5
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 5
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 4
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 5
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 3
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 5
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61723: LD_ADDR_VAR 0 34
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 5
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: LD_INT 5
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 4
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 5
61945: PUSH
61946: LD_INT 4
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 4
62108: NEG
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 5
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 5
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// end ; end ;
62255: GO 62258
62257: POP
// case btype of b_depot , b_warehouse :
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 0
62265: DOUBLE
62266: EQUAL
62267: IFTRUE 62277
62269: LD_INT 1
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62277
62275: GO 62478
62277: POP
// case nation of nation_american :
62278: LD_VAR 0 5
62282: PUSH
62283: LD_INT 1
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62291
62289: GO 62347
62291: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62292: LD_ADDR_VAR 0 9
62296: PUSH
62297: LD_VAR 0 11
62301: PUSH
62302: LD_VAR 0 12
62306: PUSH
62307: LD_VAR 0 13
62311: PUSH
62312: LD_VAR 0 14
62316: PUSH
62317: LD_VAR 0 15
62321: PUSH
62322: LD_VAR 0 16
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 4
62339: PUSH
62340: LD_INT 1
62342: PLUS
62343: ARRAY
62344: ST_TO_ADDR
62345: GO 62476
62347: LD_INT 2
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62355
62353: GO 62411
62355: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62356: LD_ADDR_VAR 0 9
62360: PUSH
62361: LD_VAR 0 17
62365: PUSH
62366: LD_VAR 0 18
62370: PUSH
62371: LD_VAR 0 19
62375: PUSH
62376: LD_VAR 0 20
62380: PUSH
62381: LD_VAR 0 21
62385: PUSH
62386: LD_VAR 0 22
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: PUSH
62399: LD_VAR 0 4
62403: PUSH
62404: LD_INT 1
62406: PLUS
62407: ARRAY
62408: ST_TO_ADDR
62409: GO 62476
62411: LD_INT 3
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62419
62417: GO 62475
62419: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62420: LD_ADDR_VAR 0 9
62424: PUSH
62425: LD_VAR 0 23
62429: PUSH
62430: LD_VAR 0 24
62434: PUSH
62435: LD_VAR 0 25
62439: PUSH
62440: LD_VAR 0 26
62444: PUSH
62445: LD_VAR 0 27
62449: PUSH
62450: LD_VAR 0 28
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: LD_VAR 0 4
62467: PUSH
62468: LD_INT 1
62470: PLUS
62471: ARRAY
62472: ST_TO_ADDR
62473: GO 62476
62475: POP
62476: GO 63031
62478: LD_INT 2
62480: DOUBLE
62481: EQUAL
62482: IFTRUE 62492
62484: LD_INT 3
62486: DOUBLE
62487: EQUAL
62488: IFTRUE 62492
62490: GO 62548
62492: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62493: LD_ADDR_VAR 0 9
62497: PUSH
62498: LD_VAR 0 29
62502: PUSH
62503: LD_VAR 0 30
62507: PUSH
62508: LD_VAR 0 31
62512: PUSH
62513: LD_VAR 0 32
62517: PUSH
62518: LD_VAR 0 33
62522: PUSH
62523: LD_VAR 0 34
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 4
62540: PUSH
62541: LD_INT 1
62543: PLUS
62544: ARRAY
62545: ST_TO_ADDR
62546: GO 63031
62548: LD_INT 16
62550: DOUBLE
62551: EQUAL
62552: IFTRUE 62610
62554: LD_INT 17
62556: DOUBLE
62557: EQUAL
62558: IFTRUE 62610
62560: LD_INT 18
62562: DOUBLE
62563: EQUAL
62564: IFTRUE 62610
62566: LD_INT 19
62568: DOUBLE
62569: EQUAL
62570: IFTRUE 62610
62572: LD_INT 22
62574: DOUBLE
62575: EQUAL
62576: IFTRUE 62610
62578: LD_INT 20
62580: DOUBLE
62581: EQUAL
62582: IFTRUE 62610
62584: LD_INT 21
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62610
62590: LD_INT 23
62592: DOUBLE
62593: EQUAL
62594: IFTRUE 62610
62596: LD_INT 24
62598: DOUBLE
62599: EQUAL
62600: IFTRUE 62610
62602: LD_INT 25
62604: DOUBLE
62605: EQUAL
62606: IFTRUE 62610
62608: GO 62666
62610: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62611: LD_ADDR_VAR 0 9
62615: PUSH
62616: LD_VAR 0 35
62620: PUSH
62621: LD_VAR 0 36
62625: PUSH
62626: LD_VAR 0 37
62630: PUSH
62631: LD_VAR 0 38
62635: PUSH
62636: LD_VAR 0 39
62640: PUSH
62641: LD_VAR 0 40
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: PUSH
62654: LD_VAR 0 4
62658: PUSH
62659: LD_INT 1
62661: PLUS
62662: ARRAY
62663: ST_TO_ADDR
62664: GO 63031
62666: LD_INT 6
62668: DOUBLE
62669: EQUAL
62670: IFTRUE 62722
62672: LD_INT 7
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62722
62678: LD_INT 8
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62722
62684: LD_INT 13
62686: DOUBLE
62687: EQUAL
62688: IFTRUE 62722
62690: LD_INT 12
62692: DOUBLE
62693: EQUAL
62694: IFTRUE 62722
62696: LD_INT 15
62698: DOUBLE
62699: EQUAL
62700: IFTRUE 62722
62702: LD_INT 11
62704: DOUBLE
62705: EQUAL
62706: IFTRUE 62722
62708: LD_INT 14
62710: DOUBLE
62711: EQUAL
62712: IFTRUE 62722
62714: LD_INT 10
62716: DOUBLE
62717: EQUAL
62718: IFTRUE 62722
62720: GO 62778
62722: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62723: LD_ADDR_VAR 0 9
62727: PUSH
62728: LD_VAR 0 41
62732: PUSH
62733: LD_VAR 0 42
62737: PUSH
62738: LD_VAR 0 43
62742: PUSH
62743: LD_VAR 0 44
62747: PUSH
62748: LD_VAR 0 45
62752: PUSH
62753: LD_VAR 0 46
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: PUSH
62766: LD_VAR 0 4
62770: PUSH
62771: LD_INT 1
62773: PLUS
62774: ARRAY
62775: ST_TO_ADDR
62776: GO 63031
62778: LD_INT 36
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62786
62784: GO 62842
62786: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62787: LD_ADDR_VAR 0 9
62791: PUSH
62792: LD_VAR 0 47
62796: PUSH
62797: LD_VAR 0 48
62801: PUSH
62802: LD_VAR 0 49
62806: PUSH
62807: LD_VAR 0 50
62811: PUSH
62812: LD_VAR 0 51
62816: PUSH
62817: LD_VAR 0 52
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: PUSH
62830: LD_VAR 0 4
62834: PUSH
62835: LD_INT 1
62837: PLUS
62838: ARRAY
62839: ST_TO_ADDR
62840: GO 63031
62842: LD_INT 4
62844: DOUBLE
62845: EQUAL
62846: IFTRUE 62868
62848: LD_INT 5
62850: DOUBLE
62851: EQUAL
62852: IFTRUE 62868
62854: LD_INT 34
62856: DOUBLE
62857: EQUAL
62858: IFTRUE 62868
62860: LD_INT 37
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62868
62866: GO 62924
62868: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62869: LD_ADDR_VAR 0 9
62873: PUSH
62874: LD_VAR 0 53
62878: PUSH
62879: LD_VAR 0 54
62883: PUSH
62884: LD_VAR 0 55
62888: PUSH
62889: LD_VAR 0 56
62893: PUSH
62894: LD_VAR 0 57
62898: PUSH
62899: LD_VAR 0 58
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 4
62916: PUSH
62917: LD_INT 1
62919: PLUS
62920: ARRAY
62921: ST_TO_ADDR
62922: GO 63031
62924: LD_INT 31
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62974
62930: LD_INT 32
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62974
62936: LD_INT 33
62938: DOUBLE
62939: EQUAL
62940: IFTRUE 62974
62942: LD_INT 27
62944: DOUBLE
62945: EQUAL
62946: IFTRUE 62974
62948: LD_INT 26
62950: DOUBLE
62951: EQUAL
62952: IFTRUE 62974
62954: LD_INT 28
62956: DOUBLE
62957: EQUAL
62958: IFTRUE 62974
62960: LD_INT 29
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62974
62966: LD_INT 30
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 62974
62972: GO 63030
62974: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62975: LD_ADDR_VAR 0 9
62979: PUSH
62980: LD_VAR 0 59
62984: PUSH
62985: LD_VAR 0 60
62989: PUSH
62990: LD_VAR 0 61
62994: PUSH
62995: LD_VAR 0 62
62999: PUSH
63000: LD_VAR 0 63
63004: PUSH
63005: LD_VAR 0 64
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 4
63022: PUSH
63023: LD_INT 1
63025: PLUS
63026: ARRAY
63027: ST_TO_ADDR
63028: GO 63031
63030: POP
// temp_list2 = [ ] ;
63031: LD_ADDR_VAR 0 10
63035: PUSH
63036: EMPTY
63037: ST_TO_ADDR
// for i in temp_list do
63038: LD_ADDR_VAR 0 8
63042: PUSH
63043: LD_VAR 0 9
63047: PUSH
63048: FOR_IN
63049: IFFALSE 63101
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63051: LD_ADDR_VAR 0 10
63055: PUSH
63056: LD_VAR 0 10
63060: PUSH
63061: LD_VAR 0 8
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PUSH
63070: LD_VAR 0 2
63074: PLUS
63075: PUSH
63076: LD_VAR 0 8
63080: PUSH
63081: LD_INT 2
63083: ARRAY
63084: PUSH
63085: LD_VAR 0 3
63089: PLUS
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: ADD
63098: ST_TO_ADDR
63099: GO 63048
63101: POP
63102: POP
// result = temp_list2 ;
63103: LD_ADDR_VAR 0 7
63107: PUSH
63108: LD_VAR 0 10
63112: ST_TO_ADDR
// end ;
63113: LD_VAR 0 7
63117: RET
// export function EnemyInRange ( unit , dist ) ; begin
63118: LD_INT 0
63120: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL_OW 255
63135: PPUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 250
63145: PPUSH
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL_OW 251
63155: PPUSH
63156: LD_VAR 0 2
63160: PPUSH
63161: CALL 36375 0 4
63165: PUSH
63166: LD_INT 4
63168: ARRAY
63169: ST_TO_ADDR
// end ;
63170: LD_VAR 0 3
63174: RET
// export function PlayerSeeMe ( unit ) ; begin
63175: LD_INT 0
63177: PPUSH
// result := See ( your_side , unit ) ;
63178: LD_ADDR_VAR 0 2
63182: PUSH
63183: LD_OWVAR 2
63187: PPUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 292
63197: ST_TO_ADDR
// end ;
63198: LD_VAR 0 2
63202: RET
// export function ReverseDir ( unit ) ; begin
63203: LD_INT 0
63205: PPUSH
// if not unit then
63206: LD_VAR 0 1
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 63238
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63215: LD_ADDR_VAR 0 2
63219: PUSH
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 254
63229: PUSH
63230: LD_INT 3
63232: PLUS
63233: PUSH
63234: LD_INT 6
63236: MOD
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 2
63242: RET
// export function ReverseArray ( array ) ; var i ; begin
63243: LD_INT 0
63245: PPUSH
63246: PPUSH
// if not array then
63247: LD_VAR 0 1
63251: NOT
63252: IFFALSE 63256
// exit ;
63254: GO 63311
// result := [ ] ;
63256: LD_ADDR_VAR 0 2
63260: PUSH
63261: EMPTY
63262: ST_TO_ADDR
// for i := array downto 1 do
63263: LD_ADDR_VAR 0 3
63267: PUSH
63268: DOUBLE
63269: LD_VAR 0 1
63273: INC
63274: ST_TO_ADDR
63275: LD_INT 1
63277: PUSH
63278: FOR_DOWNTO
63279: IFFALSE 63309
// result := Join ( result , array [ i ] ) ;
63281: LD_ADDR_VAR 0 2
63285: PUSH
63286: LD_VAR 0 2
63290: PPUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 3
63300: ARRAY
63301: PPUSH
63302: CALL 68153 0 2
63306: ST_TO_ADDR
63307: GO 63278
63309: POP
63310: POP
// end ;
63311: LD_VAR 0 2
63315: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63316: LD_INT 0
63318: PPUSH
63319: PPUSH
63320: PPUSH
63321: PPUSH
63322: PPUSH
63323: PPUSH
// if not unit or not hexes then
63324: LD_VAR 0 1
63328: NOT
63329: IFTRUE 63338
63331: PUSH
63332: LD_VAR 0 2
63336: NOT
63337: OR
63338: IFFALSE 63342
// exit ;
63340: GO 63465
// dist := 9999 ;
63342: LD_ADDR_VAR 0 5
63346: PUSH
63347: LD_INT 9999
63349: ST_TO_ADDR
// for i = 1 to hexes do
63350: LD_ADDR_VAR 0 4
63354: PUSH
63355: DOUBLE
63356: LD_INT 1
63358: DEC
63359: ST_TO_ADDR
63360: LD_VAR 0 2
63364: PUSH
63365: FOR_TO
63366: IFFALSE 63453
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63368: LD_ADDR_VAR 0 6
63372: PUSH
63373: LD_VAR 0 1
63377: PPUSH
63378: LD_VAR 0 2
63382: PUSH
63383: LD_VAR 0 4
63387: ARRAY
63388: PUSH
63389: LD_INT 1
63391: ARRAY
63392: PPUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_VAR 0 4
63402: ARRAY
63403: PUSH
63404: LD_INT 2
63406: ARRAY
63407: PPUSH
63408: CALL_OW 297
63412: ST_TO_ADDR
// if tdist < dist then
63413: LD_VAR 0 6
63417: PUSH
63418: LD_VAR 0 5
63422: LESS
63423: IFFALSE 63451
// begin hex := hexes [ i ] ;
63425: LD_ADDR_VAR 0 8
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_VAR 0 4
63439: ARRAY
63440: ST_TO_ADDR
// dist := tdist ;
63441: LD_ADDR_VAR 0 5
63445: PUSH
63446: LD_VAR 0 6
63450: ST_TO_ADDR
// end ; end ;
63451: GO 63365
63453: POP
63454: POP
// result := hex ;
63455: LD_ADDR_VAR 0 3
63459: PUSH
63460: LD_VAR 0 8
63464: ST_TO_ADDR
// end ;
63465: LD_VAR 0 3
63469: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63470: LD_INT 0
63472: PPUSH
63473: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63474: LD_VAR 0 1
63478: NOT
63479: IFTRUE 63518
63481: PUSH
63482: LD_VAR 0 1
63486: PUSH
63487: LD_INT 21
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 23
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PPUSH
63511: CALL_OW 69
63515: IN
63516: NOT
63517: OR
63518: IFFALSE 63522
// exit ;
63520: GO 63569
// for i = 1 to 3 do
63522: LD_ADDR_VAR 0 3
63526: PUSH
63527: DOUBLE
63528: LD_INT 1
63530: DEC
63531: ST_TO_ADDR
63532: LD_INT 3
63534: PUSH
63535: FOR_TO
63536: IFFALSE 63567
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63538: LD_VAR 0 1
63542: PPUSH
63543: CALL_OW 250
63547: PPUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: CALL_OW 251
63557: PPUSH
63558: LD_INT 1
63560: PPUSH
63561: CALL_OW 453
63565: GO 63535
63567: POP
63568: POP
// end ;
63569: LD_VAR 0 2
63573: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
63581: PPUSH
// if not unit or not enemy_unit then
63582: LD_VAR 0 1
63586: NOT
63587: IFTRUE 63596
63589: PUSH
63590: LD_VAR 0 2
63594: NOT
63595: OR
63596: IFFALSE 63600
// exit ;
63598: GO 64071
// if GetLives ( i ) < 250 then
63600: LD_VAR 0 4
63604: PPUSH
63605: CALL_OW 256
63609: PUSH
63610: LD_INT 250
63612: LESS
63613: IFFALSE 63626
// begin ComAutodestruct ( i ) ;
63615: LD_VAR 0 4
63619: PPUSH
63620: CALL 63470 0 1
// exit ;
63624: GO 64071
// end ; x := GetX ( enemy_unit ) ;
63626: LD_ADDR_VAR 0 7
63630: PUSH
63631: LD_VAR 0 2
63635: PPUSH
63636: CALL_OW 250
63640: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63641: LD_ADDR_VAR 0 8
63645: PUSH
63646: LD_VAR 0 2
63650: PPUSH
63651: CALL_OW 251
63655: ST_TO_ADDR
// if not x or not y then
63656: LD_VAR 0 7
63660: NOT
63661: IFTRUE 63670
63663: PUSH
63664: LD_VAR 0 8
63668: NOT
63669: OR
63670: IFFALSE 63674
// exit ;
63672: GO 64071
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63674: LD_ADDR_VAR 0 6
63678: PUSH
63679: LD_VAR 0 7
63683: PPUSH
63684: LD_INT 0
63686: PPUSH
63687: LD_INT 4
63689: PPUSH
63690: CALL_OW 272
63694: PUSH
63695: LD_VAR 0 8
63699: PPUSH
63700: LD_INT 0
63702: PPUSH
63703: LD_INT 4
63705: PPUSH
63706: CALL_OW 273
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_VAR 0 7
63719: PPUSH
63720: LD_INT 1
63722: PPUSH
63723: LD_INT 4
63725: PPUSH
63726: CALL_OW 272
63730: PUSH
63731: LD_VAR 0 8
63735: PPUSH
63736: LD_INT 1
63738: PPUSH
63739: LD_INT 4
63741: PPUSH
63742: CALL_OW 273
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_VAR 0 7
63755: PPUSH
63756: LD_INT 2
63758: PPUSH
63759: LD_INT 4
63761: PPUSH
63762: CALL_OW 272
63766: PUSH
63767: LD_VAR 0 8
63771: PPUSH
63772: LD_INT 2
63774: PPUSH
63775: LD_INT 4
63777: PPUSH
63778: CALL_OW 273
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_VAR 0 7
63791: PPUSH
63792: LD_INT 3
63794: PPUSH
63795: LD_INT 4
63797: PPUSH
63798: CALL_OW 272
63802: PUSH
63803: LD_VAR 0 8
63807: PPUSH
63808: LD_INT 3
63810: PPUSH
63811: LD_INT 4
63813: PPUSH
63814: CALL_OW 273
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_VAR 0 7
63827: PPUSH
63828: LD_INT 4
63830: PPUSH
63831: LD_INT 4
63833: PPUSH
63834: CALL_OW 272
63838: PUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 4
63846: PPUSH
63847: LD_INT 4
63849: PPUSH
63850: CALL_OW 273
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_VAR 0 7
63863: PPUSH
63864: LD_INT 5
63866: PPUSH
63867: LD_INT 4
63869: PPUSH
63870: CALL_OW 272
63874: PUSH
63875: LD_VAR 0 8
63879: PPUSH
63880: LD_INT 5
63882: PPUSH
63883: LD_INT 4
63885: PPUSH
63886: CALL_OW 273
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// for i = tmp downto 1 do
63903: LD_ADDR_VAR 0 4
63907: PUSH
63908: DOUBLE
63909: LD_VAR 0 6
63913: INC
63914: ST_TO_ADDR
63915: LD_INT 1
63917: PUSH
63918: FOR_DOWNTO
63919: IFFALSE 64022
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63921: LD_VAR 0 6
63925: PUSH
63926: LD_VAR 0 4
63930: ARRAY
63931: PUSH
63932: LD_INT 1
63934: ARRAY
63935: PPUSH
63936: LD_VAR 0 6
63940: PUSH
63941: LD_VAR 0 4
63945: ARRAY
63946: PUSH
63947: LD_INT 2
63949: ARRAY
63950: PPUSH
63951: CALL_OW 488
63955: NOT
63956: IFTRUE 63998
63958: PUSH
63959: LD_VAR 0 6
63963: PUSH
63964: LD_VAR 0 4
63968: ARRAY
63969: PUSH
63970: LD_INT 1
63972: ARRAY
63973: PPUSH
63974: LD_VAR 0 6
63978: PUSH
63979: LD_VAR 0 4
63983: ARRAY
63984: PUSH
63985: LD_INT 2
63987: ARRAY
63988: PPUSH
63989: CALL_OW 428
63993: PUSH
63994: LD_INT 0
63996: NONEQUAL
63997: OR
63998: IFFALSE 64020
// tmp := Delete ( tmp , i ) ;
64000: LD_ADDR_VAR 0 6
64004: PUSH
64005: LD_VAR 0 6
64009: PPUSH
64010: LD_VAR 0 4
64014: PPUSH
64015: CALL_OW 3
64019: ST_TO_ADDR
64020: GO 63918
64022: POP
64023: POP
// j := GetClosestHex ( unit , tmp ) ;
64024: LD_ADDR_VAR 0 5
64028: PUSH
64029: LD_VAR 0 1
64033: PPUSH
64034: LD_VAR 0 6
64038: PPUSH
64039: CALL 63316 0 2
64043: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64044: LD_VAR 0 1
64048: PPUSH
64049: LD_VAR 0 5
64053: PUSH
64054: LD_INT 1
64056: ARRAY
64057: PPUSH
64058: LD_VAR 0 5
64062: PUSH
64063: LD_INT 2
64065: ARRAY
64066: PPUSH
64067: CALL_OW 111
// end ;
64071: LD_VAR 0 3
64075: RET
// export function PrepareApemanSoldier ( ) ; begin
64076: LD_INT 0
64078: PPUSH
// uc_nation := 0 ;
64079: LD_ADDR_OWVAR 21
64083: PUSH
64084: LD_INT 0
64086: ST_TO_ADDR
// hc_sex := sex_male ;
64087: LD_ADDR_OWVAR 27
64091: PUSH
64092: LD_INT 1
64094: ST_TO_ADDR
// hc_name :=  ;
64095: LD_ADDR_OWVAR 26
64099: PUSH
64100: LD_STRING 
64102: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64103: LD_ADDR_OWVAR 28
64107: PUSH
64108: LD_INT 15
64110: ST_TO_ADDR
// hc_gallery :=  ;
64111: LD_ADDR_OWVAR 33
64115: PUSH
64116: LD_STRING 
64118: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64119: LD_ADDR_OWVAR 31
64123: PUSH
64124: LD_INT 0
64126: PPUSH
64127: LD_INT 3
64129: PPUSH
64130: CALL_OW 12
64134: PUSH
64135: LD_INT 0
64137: PPUSH
64138: LD_INT 3
64140: PPUSH
64141: CALL_OW 12
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64158: LD_ADDR_OWVAR 29
64162: PUSH
64163: LD_INT 12
64165: PUSH
64166: LD_INT 12
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: ST_TO_ADDR
// end ;
64173: LD_VAR 0 1
64177: RET
// export function PrepareApemanEngineer ( ) ; begin
64178: LD_INT 0
64180: PPUSH
// uc_nation := 0 ;
64181: LD_ADDR_OWVAR 21
64185: PUSH
64186: LD_INT 0
64188: ST_TO_ADDR
// hc_sex := sex_male ;
64189: LD_ADDR_OWVAR 27
64193: PUSH
64194: LD_INT 1
64196: ST_TO_ADDR
// hc_name :=  ;
64197: LD_ADDR_OWVAR 26
64201: PUSH
64202: LD_STRING 
64204: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64205: LD_ADDR_OWVAR 28
64209: PUSH
64210: LD_INT 16
64212: ST_TO_ADDR
// hc_gallery :=  ;
64213: LD_ADDR_OWVAR 33
64217: PUSH
64218: LD_STRING 
64220: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64221: LD_ADDR_OWVAR 31
64225: PUSH
64226: LD_INT 0
64228: PPUSH
64229: LD_INT 3
64231: PPUSH
64232: CALL_OW 12
64236: PUSH
64237: LD_INT 0
64239: PPUSH
64240: LD_INT 3
64242: PPUSH
64243: CALL_OW 12
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64260: LD_ADDR_OWVAR 29
64264: PUSH
64265: LD_INT 12
64267: PUSH
64268: LD_INT 12
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: ST_TO_ADDR
// end ;
64275: LD_VAR 0 1
64279: RET
// export function PrepareApeman ( agressivity ) ; begin
64280: LD_INT 0
64282: PPUSH
// uc_side := 0 ;
64283: LD_ADDR_OWVAR 20
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// uc_nation := 0 ;
64291: LD_ADDR_OWVAR 21
64295: PUSH
64296: LD_INT 0
64298: ST_TO_ADDR
// hc_sex := sex_male ;
64299: LD_ADDR_OWVAR 27
64303: PUSH
64304: LD_INT 1
64306: ST_TO_ADDR
// hc_class := class_apeman ;
64307: LD_ADDR_OWVAR 28
64311: PUSH
64312: LD_INT 12
64314: ST_TO_ADDR
// hc_gallery :=  ;
64315: LD_ADDR_OWVAR 33
64319: PUSH
64320: LD_STRING 
64322: ST_TO_ADDR
// hc_name :=  ;
64323: LD_ADDR_OWVAR 26
64327: PUSH
64328: LD_STRING 
64330: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64331: LD_ADDR_OWVAR 29
64335: PUSH
64336: LD_INT 12
64338: PUSH
64339: LD_INT 12
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// if agressivity = 0 then
64346: LD_VAR 0 1
64350: PUSH
64351: LD_INT 0
64353: EQUAL
64354: IFFALSE 64366
// hc_agressivity := 0 else
64356: LD_ADDR_OWVAR 35
64360: PUSH
64361: LD_INT 0
64363: ST_TO_ADDR
64364: GO 64387
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64366: LD_ADDR_OWVAR 35
64370: PUSH
64371: LD_VAR 0 1
64375: NEG
64376: PPUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 12
64386: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64387: LD_ADDR_OWVAR 31
64391: PUSH
64392: LD_INT 0
64394: PPUSH
64395: LD_INT 3
64397: PPUSH
64398: CALL_OW 12
64402: PUSH
64403: LD_INT 0
64405: PPUSH
64406: LD_INT 3
64408: PPUSH
64409: CALL_OW 12
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: ST_TO_ADDR
// end ;
64426: LD_VAR 0 2
64430: RET
// export function PrepareTiger ( agressivity ) ; begin
64431: LD_INT 0
64433: PPUSH
// uc_side := 0 ;
64434: LD_ADDR_OWVAR 20
64438: PUSH
64439: LD_INT 0
64441: ST_TO_ADDR
// uc_nation := 0 ;
64442: LD_ADDR_OWVAR 21
64446: PUSH
64447: LD_INT 0
64449: ST_TO_ADDR
// InitHc ;
64450: CALL_OW 19
// hc_class := class_tiger ;
64454: LD_ADDR_OWVAR 28
64458: PUSH
64459: LD_INT 14
64461: ST_TO_ADDR
// hc_gallery :=  ;
64462: LD_ADDR_OWVAR 33
64466: PUSH
64467: LD_STRING 
64469: ST_TO_ADDR
// hc_name :=  ;
64470: LD_ADDR_OWVAR 26
64474: PUSH
64475: LD_STRING 
64477: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64478: LD_ADDR_OWVAR 35
64482: PUSH
64483: LD_VAR 0 1
64487: NEG
64488: PPUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 12
64498: ST_TO_ADDR
// end ;
64499: LD_VAR 0 2
64503: RET
// export function PrepareEnchidna ( ) ; begin
64504: LD_INT 0
64506: PPUSH
// uc_side := 0 ;
64507: LD_ADDR_OWVAR 20
64511: PUSH
64512: LD_INT 0
64514: ST_TO_ADDR
// uc_nation := 0 ;
64515: LD_ADDR_OWVAR 21
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// InitHc ;
64523: CALL_OW 19
// hc_class := class_baggie ;
64527: LD_ADDR_OWVAR 28
64531: PUSH
64532: LD_INT 13
64534: ST_TO_ADDR
// hc_gallery :=  ;
64535: LD_ADDR_OWVAR 33
64539: PUSH
64540: LD_STRING 
64542: ST_TO_ADDR
// hc_name :=  ;
64543: LD_ADDR_OWVAR 26
64547: PUSH
64548: LD_STRING 
64550: ST_TO_ADDR
// end ;
64551: LD_VAR 0 1
64555: RET
// export function PrepareFrog ( ) ; begin
64556: LD_INT 0
64558: PPUSH
// uc_side := 0 ;
64559: LD_ADDR_OWVAR 20
64563: PUSH
64564: LD_INT 0
64566: ST_TO_ADDR
// uc_nation := 0 ;
64567: LD_ADDR_OWVAR 21
64571: PUSH
64572: LD_INT 0
64574: ST_TO_ADDR
// InitHc ;
64575: CALL_OW 19
// hc_class := class_frog ;
64579: LD_ADDR_OWVAR 28
64583: PUSH
64584: LD_INT 19
64586: ST_TO_ADDR
// hc_gallery :=  ;
64587: LD_ADDR_OWVAR 33
64591: PUSH
64592: LD_STRING 
64594: ST_TO_ADDR
// hc_name :=  ;
64595: LD_ADDR_OWVAR 26
64599: PUSH
64600: LD_STRING 
64602: ST_TO_ADDR
// end ;
64603: LD_VAR 0 1
64607: RET
// export function PrepareFish ( ) ; begin
64608: LD_INT 0
64610: PPUSH
// uc_side := 0 ;
64611: LD_ADDR_OWVAR 20
64615: PUSH
64616: LD_INT 0
64618: ST_TO_ADDR
// uc_nation := 0 ;
64619: LD_ADDR_OWVAR 21
64623: PUSH
64624: LD_INT 0
64626: ST_TO_ADDR
// InitHc ;
64627: CALL_OW 19
// hc_class := class_fish ;
64631: LD_ADDR_OWVAR 28
64635: PUSH
64636: LD_INT 20
64638: ST_TO_ADDR
// hc_gallery :=  ;
64639: LD_ADDR_OWVAR 33
64643: PUSH
64644: LD_STRING 
64646: ST_TO_ADDR
// hc_name :=  ;
64647: LD_ADDR_OWVAR 26
64651: PUSH
64652: LD_STRING 
64654: ST_TO_ADDR
// end ;
64655: LD_VAR 0 1
64659: RET
// export function PrepareBird ( ) ; begin
64660: LD_INT 0
64662: PPUSH
// uc_side := 0 ;
64663: LD_ADDR_OWVAR 20
64667: PUSH
64668: LD_INT 0
64670: ST_TO_ADDR
// uc_nation := 0 ;
64671: LD_ADDR_OWVAR 21
64675: PUSH
64676: LD_INT 0
64678: ST_TO_ADDR
// InitHc ;
64679: CALL_OW 19
// hc_class := class_phororhacos ;
64683: LD_ADDR_OWVAR 28
64687: PUSH
64688: LD_INT 18
64690: ST_TO_ADDR
// hc_gallery :=  ;
64691: LD_ADDR_OWVAR 33
64695: PUSH
64696: LD_STRING 
64698: ST_TO_ADDR
// hc_name :=  ;
64699: LD_ADDR_OWVAR 26
64703: PUSH
64704: LD_STRING 
64706: ST_TO_ADDR
// end ;
64707: LD_VAR 0 1
64711: RET
// export function PrepareHorse ( ) ; begin
64712: LD_INT 0
64714: PPUSH
// uc_side := 0 ;
64715: LD_ADDR_OWVAR 20
64719: PUSH
64720: LD_INT 0
64722: ST_TO_ADDR
// uc_nation := 0 ;
64723: LD_ADDR_OWVAR 21
64727: PUSH
64728: LD_INT 0
64730: ST_TO_ADDR
// InitHc ;
64731: CALL_OW 19
// hc_class := class_horse ;
64735: LD_ADDR_OWVAR 28
64739: PUSH
64740: LD_INT 21
64742: ST_TO_ADDR
// hc_gallery :=  ;
64743: LD_ADDR_OWVAR 33
64747: PUSH
64748: LD_STRING 
64750: ST_TO_ADDR
// hc_name :=  ;
64751: LD_ADDR_OWVAR 26
64755: PUSH
64756: LD_STRING 
64758: ST_TO_ADDR
// end ;
64759: LD_VAR 0 1
64763: RET
// export function PrepareMastodont ( ) ; begin
64764: LD_INT 0
64766: PPUSH
// uc_side := 0 ;
64767: LD_ADDR_OWVAR 20
64771: PUSH
64772: LD_INT 0
64774: ST_TO_ADDR
// uc_nation := 0 ;
64775: LD_ADDR_OWVAR 21
64779: PUSH
64780: LD_INT 0
64782: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64783: LD_ADDR_OWVAR 37
64787: PUSH
64788: LD_INT 31
64790: ST_TO_ADDR
// vc_control := control_rider ;
64791: LD_ADDR_OWVAR 38
64795: PUSH
64796: LD_INT 4
64798: ST_TO_ADDR
// end ;
64799: LD_VAR 0 1
64803: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64804: LD_INT 0
64806: PPUSH
64807: PPUSH
64808: PPUSH
// uc_side = 0 ;
64809: LD_ADDR_OWVAR 20
64813: PUSH
64814: LD_INT 0
64816: ST_TO_ADDR
// uc_nation = 0 ;
64817: LD_ADDR_OWVAR 21
64821: PUSH
64822: LD_INT 0
64824: ST_TO_ADDR
// InitHc_All ( ) ;
64825: CALL_OW 584
// InitVc ;
64829: CALL_OW 20
// if mastodonts then
64833: LD_VAR 0 6
64837: IFFALSE 64904
// for i = 1 to mastodonts do
64839: LD_ADDR_VAR 0 11
64843: PUSH
64844: DOUBLE
64845: LD_INT 1
64847: DEC
64848: ST_TO_ADDR
64849: LD_VAR 0 6
64853: PUSH
64854: FOR_TO
64855: IFFALSE 64902
// begin vc_chassis := 31 ;
64857: LD_ADDR_OWVAR 37
64861: PUSH
64862: LD_INT 31
64864: ST_TO_ADDR
// vc_control := control_rider ;
64865: LD_ADDR_OWVAR 38
64869: PUSH
64870: LD_INT 4
64872: ST_TO_ADDR
// animal := CreateVehicle ;
64873: LD_ADDR_VAR 0 12
64877: PUSH
64878: CALL_OW 45
64882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64883: LD_VAR 0 12
64887: PPUSH
64888: LD_VAR 0 8
64892: PPUSH
64893: LD_INT 0
64895: PPUSH
64896: CALL 67046 0 3
// end ;
64900: GO 64854
64902: POP
64903: POP
// if horses then
64904: LD_VAR 0 5
64908: IFFALSE 64975
// for i = 1 to horses do
64910: LD_ADDR_VAR 0 11
64914: PUSH
64915: DOUBLE
64916: LD_INT 1
64918: DEC
64919: ST_TO_ADDR
64920: LD_VAR 0 5
64924: PUSH
64925: FOR_TO
64926: IFFALSE 64973
// begin hc_class := 21 ;
64928: LD_ADDR_OWVAR 28
64932: PUSH
64933: LD_INT 21
64935: ST_TO_ADDR
// hc_gallery :=  ;
64936: LD_ADDR_OWVAR 33
64940: PUSH
64941: LD_STRING 
64943: ST_TO_ADDR
// animal := CreateHuman ;
64944: LD_ADDR_VAR 0 12
64948: PUSH
64949: CALL_OW 44
64953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64954: LD_VAR 0 12
64958: PPUSH
64959: LD_VAR 0 8
64963: PPUSH
64964: LD_INT 0
64966: PPUSH
64967: CALL 67046 0 3
// end ;
64971: GO 64925
64973: POP
64974: POP
// if birds then
64975: LD_VAR 0 1
64979: IFFALSE 65046
// for i = 1 to birds do
64981: LD_ADDR_VAR 0 11
64985: PUSH
64986: DOUBLE
64987: LD_INT 1
64989: DEC
64990: ST_TO_ADDR
64991: LD_VAR 0 1
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65044
// begin hc_class := 18 ;
64999: LD_ADDR_OWVAR 28
65003: PUSH
65004: LD_INT 18
65006: ST_TO_ADDR
// hc_gallery =  ;
65007: LD_ADDR_OWVAR 33
65011: PUSH
65012: LD_STRING 
65014: ST_TO_ADDR
// animal := CreateHuman ;
65015: LD_ADDR_VAR 0 12
65019: PUSH
65020: CALL_OW 44
65024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65025: LD_VAR 0 12
65029: PPUSH
65030: LD_VAR 0 8
65034: PPUSH
65035: LD_INT 0
65037: PPUSH
65038: CALL 67046 0 3
// end ;
65042: GO 64996
65044: POP
65045: POP
// if tigers then
65046: LD_VAR 0 2
65050: IFFALSE 65134
// for i = 1 to tigers do
65052: LD_ADDR_VAR 0 11
65056: PUSH
65057: DOUBLE
65058: LD_INT 1
65060: DEC
65061: ST_TO_ADDR
65062: LD_VAR 0 2
65066: PUSH
65067: FOR_TO
65068: IFFALSE 65132
// begin hc_class = class_tiger ;
65070: LD_ADDR_OWVAR 28
65074: PUSH
65075: LD_INT 14
65077: ST_TO_ADDR
// hc_gallery =  ;
65078: LD_ADDR_OWVAR 33
65082: PUSH
65083: LD_STRING 
65085: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65086: LD_ADDR_OWVAR 35
65090: PUSH
65091: LD_INT 7
65093: NEG
65094: PPUSH
65095: LD_INT 7
65097: PPUSH
65098: CALL_OW 12
65102: ST_TO_ADDR
// animal := CreateHuman ;
65103: LD_ADDR_VAR 0 12
65107: PUSH
65108: CALL_OW 44
65112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65113: LD_VAR 0 12
65117: PPUSH
65118: LD_VAR 0 8
65122: PPUSH
65123: LD_INT 0
65125: PPUSH
65126: CALL 67046 0 3
// end ;
65130: GO 65067
65132: POP
65133: POP
// if apemans then
65134: LD_VAR 0 3
65138: IFFALSE 65261
// for i = 1 to apemans do
65140: LD_ADDR_VAR 0 11
65144: PUSH
65145: DOUBLE
65146: LD_INT 1
65148: DEC
65149: ST_TO_ADDR
65150: LD_VAR 0 3
65154: PUSH
65155: FOR_TO
65156: IFFALSE 65259
// begin hc_class = class_apeman ;
65158: LD_ADDR_OWVAR 28
65162: PUSH
65163: LD_INT 12
65165: ST_TO_ADDR
// hc_gallery =  ;
65166: LD_ADDR_OWVAR 33
65170: PUSH
65171: LD_STRING 
65173: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65174: LD_ADDR_OWVAR 35
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PPUSH
65183: LD_INT 2
65185: PPUSH
65186: CALL_OW 12
65190: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65191: LD_ADDR_OWVAR 31
65195: PUSH
65196: LD_INT 1
65198: PPUSH
65199: LD_INT 3
65201: PPUSH
65202: CALL_OW 12
65206: PUSH
65207: LD_INT 1
65209: PPUSH
65210: LD_INT 3
65212: PPUSH
65213: CALL_OW 12
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// animal := CreateHuman ;
65230: LD_ADDR_VAR 0 12
65234: PUSH
65235: CALL_OW 44
65239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65240: LD_VAR 0 12
65244: PPUSH
65245: LD_VAR 0 8
65249: PPUSH
65250: LD_INT 0
65252: PPUSH
65253: CALL 67046 0 3
// end ;
65257: GO 65155
65259: POP
65260: POP
// if enchidnas then
65261: LD_VAR 0 4
65265: IFFALSE 65332
// for i = 1 to enchidnas do
65267: LD_ADDR_VAR 0 11
65271: PUSH
65272: DOUBLE
65273: LD_INT 1
65275: DEC
65276: ST_TO_ADDR
65277: LD_VAR 0 4
65281: PUSH
65282: FOR_TO
65283: IFFALSE 65330
// begin hc_class = 13 ;
65285: LD_ADDR_OWVAR 28
65289: PUSH
65290: LD_INT 13
65292: ST_TO_ADDR
// hc_gallery =  ;
65293: LD_ADDR_OWVAR 33
65297: PUSH
65298: LD_STRING 
65300: ST_TO_ADDR
// animal := CreateHuman ;
65301: LD_ADDR_VAR 0 12
65305: PUSH
65306: CALL_OW 44
65310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65311: LD_VAR 0 12
65315: PPUSH
65316: LD_VAR 0 8
65320: PPUSH
65321: LD_INT 0
65323: PPUSH
65324: CALL 67046 0 3
// end ;
65328: GO 65282
65330: POP
65331: POP
// if fishes then
65332: LD_VAR 0 7
65336: IFFALSE 65403
// for i = 1 to fishes do
65338: LD_ADDR_VAR 0 11
65342: PUSH
65343: DOUBLE
65344: LD_INT 1
65346: DEC
65347: ST_TO_ADDR
65348: LD_VAR 0 7
65352: PUSH
65353: FOR_TO
65354: IFFALSE 65401
// begin hc_class = 20 ;
65356: LD_ADDR_OWVAR 28
65360: PUSH
65361: LD_INT 20
65363: ST_TO_ADDR
// hc_gallery =  ;
65364: LD_ADDR_OWVAR 33
65368: PUSH
65369: LD_STRING 
65371: ST_TO_ADDR
// animal := CreateHuman ;
65372: LD_ADDR_VAR 0 12
65376: PUSH
65377: CALL_OW 44
65381: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65382: LD_VAR 0 12
65386: PPUSH
65387: LD_VAR 0 9
65391: PPUSH
65392: LD_INT 0
65394: PPUSH
65395: CALL 67046 0 3
// end ;
65399: GO 65353
65401: POP
65402: POP
// end ;
65403: LD_VAR 0 10
65407: RET
// export function WantHeal ( sci , unit ) ; begin
65408: LD_INT 0
65410: PPUSH
// if GetTaskList ( sci ) > 0 then
65411: LD_VAR 0 1
65415: PPUSH
65416: CALL_OW 437
65420: PUSH
65421: LD_INT 0
65423: GREATER
65424: IFFALSE 65496
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 437
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PUSH
65440: LD_INT 1
65442: ARRAY
65443: PUSH
65444: LD_STRING l
65446: EQUAL
65447: IFFALSE 65474
65449: PUSH
65450: LD_VAR 0 1
65454: PPUSH
65455: CALL_OW 437
65459: PUSH
65460: LD_INT 1
65462: ARRAY
65463: PUSH
65464: LD_INT 4
65466: ARRAY
65467: PUSH
65468: LD_VAR 0 2
65472: EQUAL
65473: AND
65474: IFFALSE 65486
// result := true else
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_INT 1
65483: ST_TO_ADDR
65484: GO 65494
// result := false ;
65486: LD_ADDR_VAR 0 3
65490: PUSH
65491: LD_INT 0
65493: ST_TO_ADDR
// end else
65494: GO 65504
// result := false ;
65496: LD_ADDR_VAR 0 3
65500: PUSH
65501: LD_INT 0
65503: ST_TO_ADDR
// end ;
65504: LD_VAR 0 3
65508: RET
// export function HealTarget ( sci ) ; begin
65509: LD_INT 0
65511: PPUSH
// if not sci then
65512: LD_VAR 0 1
65516: NOT
65517: IFFALSE 65521
// exit ;
65519: GO 65586
// result := 0 ;
65521: LD_ADDR_VAR 0 2
65525: PUSH
65526: LD_INT 0
65528: ST_TO_ADDR
// if GetTaskList ( sci ) then
65529: LD_VAR 0 1
65533: PPUSH
65534: CALL_OW 437
65538: IFFALSE 65586
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65540: LD_VAR 0 1
65544: PPUSH
65545: CALL_OW 437
65549: PUSH
65550: LD_INT 1
65552: ARRAY
65553: PUSH
65554: LD_INT 1
65556: ARRAY
65557: PUSH
65558: LD_STRING l
65560: EQUAL
65561: IFFALSE 65586
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65563: LD_ADDR_VAR 0 2
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: CALL_OW 437
65577: PUSH
65578: LD_INT 1
65580: ARRAY
65581: PUSH
65582: LD_INT 4
65584: ARRAY
65585: ST_TO_ADDR
// end ;
65586: LD_VAR 0 2
65590: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65591: LD_INT 0
65593: PPUSH
65594: PPUSH
65595: PPUSH
65596: PPUSH
// if not base_units then
65597: LD_VAR 0 1
65601: NOT
65602: IFFALSE 65606
// exit ;
65604: GO 65693
// result := false ;
65606: LD_ADDR_VAR 0 2
65610: PUSH
65611: LD_INT 0
65613: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65614: LD_ADDR_VAR 0 5
65618: PUSH
65619: LD_VAR 0 1
65623: PPUSH
65624: LD_INT 21
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PPUSH
65634: CALL_OW 72
65638: ST_TO_ADDR
// if not tmp then
65639: LD_VAR 0 5
65643: NOT
65644: IFFALSE 65648
// exit ;
65646: GO 65693
// for i in tmp do
65648: LD_ADDR_VAR 0 3
65652: PUSH
65653: LD_VAR 0 5
65657: PUSH
65658: FOR_IN
65659: IFFALSE 65691
// begin result := EnemyInRange ( i , 22 ) ;
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: LD_VAR 0 3
65670: PPUSH
65671: LD_INT 22
65673: PPUSH
65674: CALL 63118 0 2
65678: ST_TO_ADDR
// if result then
65679: LD_VAR 0 2
65683: IFFALSE 65689
// exit ;
65685: POP
65686: POP
65687: GO 65693
// end ;
65689: GO 65658
65691: POP
65692: POP
// end ;
65693: LD_VAR 0 2
65697: RET
// export function FilterByTag ( units , tag ) ; begin
65698: LD_INT 0
65700: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65701: LD_ADDR_VAR 0 3
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_INT 120
65713: PUSH
65714: LD_VAR 0 2
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PPUSH
65723: CALL_OW 72
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 3
65732: RET
// export function IsDriver ( un ) ; begin
65733: LD_INT 0
65735: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65736: LD_ADDR_VAR 0 2
65740: PUSH
65741: LD_VAR 0 1
65745: PUSH
65746: LD_INT 55
65748: PUSH
65749: EMPTY
65750: LIST
65751: PPUSH
65752: CALL_OW 69
65756: IN
65757: ST_TO_ADDR
// end ;
65758: LD_VAR 0 2
65762: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
// list := [ ] ;
65767: LD_ADDR_VAR 0 5
65771: PUSH
65772: EMPTY
65773: ST_TO_ADDR
// case d of 0 :
65774: LD_VAR 0 3
65778: PUSH
65779: LD_INT 0
65781: DOUBLE
65782: EQUAL
65783: IFTRUE 65787
65785: GO 65920
65787: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 4
65800: MINUS
65801: PUSH
65802: LD_VAR 0 2
65806: PUSH
65807: LD_INT 4
65809: MINUS
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: PUSH
65819: LD_VAR 0 1
65823: PUSH
65824: LD_INT 3
65826: MINUS
65827: PUSH
65828: LD_VAR 0 2
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 4
65848: PLUS
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_INT 3
65870: PLUS
65871: PUSH
65872: LD_VAR 0 2
65876: PUSH
65877: LD_INT 3
65879: PLUS
65880: PUSH
65881: LD_INT 5
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: PUSH
65889: LD_VAR 0 1
65893: PUSH
65894: LD_VAR 0 2
65898: PUSH
65899: LD_INT 4
65901: PLUS
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// end ; 1 :
65918: GO 66618
65920: LD_INT 1
65922: DOUBLE
65923: EQUAL
65924: IFTRUE 65928
65926: GO 66061
65928: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_VAR 0 2
65943: PUSH
65944: LD_INT 4
65946: MINUS
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: PUSH
65956: LD_VAR 0 1
65960: PUSH
65961: LD_INT 3
65963: MINUS
65964: PUSH
65965: LD_VAR 0 2
65969: PUSH
65970: LD_INT 3
65972: MINUS
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: LIST
65981: PUSH
65982: LD_VAR 0 1
65986: PUSH
65987: LD_INT 4
65989: MINUS
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: PUSH
66004: LD_VAR 0 1
66008: PUSH
66009: LD_VAR 0 2
66013: PUSH
66014: LD_INT 3
66016: PLUS
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: PUSH
66026: LD_VAR 0 1
66030: PUSH
66031: LD_INT 4
66033: PLUS
66034: PUSH
66035: LD_VAR 0 2
66039: PUSH
66040: LD_INT 4
66042: PLUS
66043: PUSH
66044: LD_INT 5
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// end ; 2 :
66059: GO 66618
66061: LD_INT 2
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 66198
66069: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66070: LD_ADDR_VAR 0 5
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: LD_VAR 0 2
66084: PUSH
66085: LD_INT 3
66087: MINUS
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: PUSH
66097: LD_VAR 0 1
66101: PUSH
66102: LD_INT 4
66104: PLUS
66105: PUSH
66106: LD_VAR 0 2
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_VAR 0 2
66128: PUSH
66129: LD_INT 4
66131: PLUS
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: LD_INT 3
66148: MINUS
66149: PUSH
66150: LD_VAR 0 2
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 4
66170: MINUS
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 4
66179: MINUS
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// end ; 3 :
66196: GO 66618
66198: LD_INT 3
66200: DOUBLE
66201: EQUAL
66202: IFTRUE 66206
66204: GO 66339
66206: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66207: LD_ADDR_VAR 0 5
66211: PUSH
66212: LD_VAR 0 1
66216: PUSH
66217: LD_INT 3
66219: PLUS
66220: PUSH
66221: LD_VAR 0 2
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_VAR 0 1
66238: PUSH
66239: LD_INT 4
66241: PLUS
66242: PUSH
66243: LD_VAR 0 2
66247: PUSH
66248: LD_INT 4
66250: PLUS
66251: PUSH
66252: LD_INT 5
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: PUSH
66260: LD_VAR 0 1
66264: PUSH
66265: LD_INT 4
66267: MINUS
66268: PUSH
66269: LD_VAR 0 2
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_VAR 0 2
66291: PUSH
66292: LD_INT 4
66294: MINUS
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 3
66311: MINUS
66312: PUSH
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 3
66320: MINUS
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: ST_TO_ADDR
// end ; 4 :
66337: GO 66618
66339: LD_INT 4
66341: DOUBLE
66342: EQUAL
66343: IFTRUE 66347
66345: GO 66480
66347: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66348: LD_ADDR_VAR 0 5
66352: PUSH
66353: LD_VAR 0 1
66357: PUSH
66358: LD_VAR 0 2
66362: PUSH
66363: LD_INT 4
66365: PLUS
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 3
66382: PLUS
66383: PUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_INT 3
66391: PLUS
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: LIST
66400: PUSH
66401: LD_VAR 0 1
66405: PUSH
66406: LD_INT 4
66408: PLUS
66409: PUSH
66410: LD_VAR 0 2
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: PUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_VAR 0 2
66432: PUSH
66433: LD_INT 3
66435: MINUS
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_INT 4
66452: MINUS
66453: PUSH
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 4
66461: MINUS
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: ST_TO_ADDR
// end ; 5 :
66478: GO 66618
66480: LD_INT 5
66482: DOUBLE
66483: EQUAL
66484: IFTRUE 66488
66486: GO 66617
66488: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66489: LD_ADDR_VAR 0 5
66493: PUSH
66494: LD_VAR 0 1
66498: PUSH
66499: LD_INT 4
66501: MINUS
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: PUSH
66516: LD_VAR 0 1
66520: PUSH
66521: LD_VAR 0 2
66525: PUSH
66526: LD_INT 4
66528: MINUS
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: LIST
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: LD_INT 4
66545: PLUS
66546: PUSH
66547: LD_VAR 0 2
66551: PUSH
66552: LD_INT 4
66554: PLUS
66555: PUSH
66556: LD_INT 5
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 3
66571: PLUS
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 4
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_VAR 0 2
66595: PUSH
66596: LD_INT 3
66598: PLUS
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: ST_TO_ADDR
// end ; end ;
66615: GO 66618
66617: POP
// result := list ;
66618: LD_ADDR_VAR 0 4
66622: PUSH
66623: LD_VAR 0 5
66627: ST_TO_ADDR
// end ;
66628: LD_VAR 0 4
66632: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66633: LD_INT 0
66635: PPUSH
66636: PPUSH
66637: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66638: LD_VAR 0 1
66642: NOT
66643: IFTRUE 66671
66645: PUSH
66646: LD_VAR 0 2
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: IN
66669: NOT
66670: OR
66671: IFFALSE 66675
// exit ;
66673: GO 66758
// tmp := [ ] ;
66675: LD_ADDR_VAR 0 5
66679: PUSH
66680: EMPTY
66681: ST_TO_ADDR
// for i in units do
66682: LD_ADDR_VAR 0 4
66686: PUSH
66687: LD_VAR 0 1
66691: PUSH
66692: FOR_IN
66693: IFFALSE 66727
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66695: LD_ADDR_VAR 0 5
66699: PUSH
66700: LD_VAR 0 5
66704: PPUSH
66705: LD_VAR 0 4
66709: PPUSH
66710: LD_VAR 0 2
66714: PPUSH
66715: CALL_OW 259
66719: PPUSH
66720: CALL 68153 0 2
66724: ST_TO_ADDR
66725: GO 66692
66727: POP
66728: POP
// if not tmp then
66729: LD_VAR 0 5
66733: NOT
66734: IFFALSE 66738
// exit ;
66736: GO 66758
// result := SortListByListDesc ( units , tmp ) ;
66738: LD_ADDR_VAR 0 3
66742: PUSH
66743: LD_VAR 0 1
66747: PPUSH
66748: LD_VAR 0 5
66752: PPUSH
66753: CALL_OW 77
66757: ST_TO_ADDR
// end ;
66758: LD_VAR 0 3
66762: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66763: LD_INT 0
66765: PPUSH
66766: PPUSH
66767: PPUSH
// result := false ;
66768: LD_ADDR_VAR 0 3
66772: PUSH
66773: LD_INT 0
66775: ST_TO_ADDR
// if not building then
66776: LD_VAR 0 2
66780: NOT
66781: IFFALSE 66785
// exit ;
66783: GO 66929
// x := GetX ( building ) ;
66785: LD_ADDR_VAR 0 4
66789: PUSH
66790: LD_VAR 0 2
66794: PPUSH
66795: CALL_OW 250
66799: ST_TO_ADDR
// y := GetY ( building ) ;
66800: LD_ADDR_VAR 0 5
66804: PUSH
66805: LD_VAR 0 2
66809: PPUSH
66810: CALL_OW 251
66814: ST_TO_ADDR
// if not x or not y then
66815: LD_VAR 0 4
66819: NOT
66820: IFTRUE 66829
66822: PUSH
66823: LD_VAR 0 5
66827: NOT
66828: OR
66829: IFFALSE 66833
// exit ;
66831: GO 66929
// if GetTaskList ( unit ) then
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL_OW 437
66842: IFFALSE 66929
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66844: LD_STRING e
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 437
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PUSH
66861: LD_INT 1
66863: ARRAY
66864: EQUAL
66865: IFFALSE 66892
66867: PUSH
66868: LD_VAR 0 4
66872: PUSH
66873: LD_VAR 0 1
66877: PPUSH
66878: CALL_OW 437
66882: PUSH
66883: LD_INT 1
66885: ARRAY
66886: PUSH
66887: LD_INT 2
66889: ARRAY
66890: EQUAL
66891: AND
66892: IFFALSE 66919
66894: PUSH
66895: LD_VAR 0 5
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: CALL_OW 437
66909: PUSH
66910: LD_INT 1
66912: ARRAY
66913: PUSH
66914: LD_INT 3
66916: ARRAY
66917: EQUAL
66918: AND
66919: IFFALSE 66929
// result := true end ;
66921: LD_ADDR_VAR 0 3
66925: PUSH
66926: LD_INT 1
66928: ST_TO_ADDR
// end ;
66929: LD_VAR 0 3
66933: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66934: LD_INT 0
66936: PPUSH
// result := false ;
66937: LD_ADDR_VAR 0 4
66941: PUSH
66942: LD_INT 0
66944: ST_TO_ADDR
// if GetTaskList ( unit ) then
66945: LD_VAR 0 1
66949: PPUSH
66950: CALL_OW 437
66954: IFFALSE 67041
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66956: LD_STRING M
66958: PUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: CALL_OW 437
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PUSH
66973: LD_INT 1
66975: ARRAY
66976: EQUAL
66977: IFFALSE 67004
66979: PUSH
66980: LD_VAR 0 2
66984: PUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 437
66994: PUSH
66995: LD_INT 1
66997: ARRAY
66998: PUSH
66999: LD_INT 2
67001: ARRAY
67002: EQUAL
67003: AND
67004: IFFALSE 67031
67006: PUSH
67007: LD_VAR 0 3
67011: PUSH
67012: LD_VAR 0 1
67016: PPUSH
67017: CALL_OW 437
67021: PUSH
67022: LD_INT 1
67024: ARRAY
67025: PUSH
67026: LD_INT 3
67028: ARRAY
67029: EQUAL
67030: AND
67031: IFFALSE 67041
// result := true ;
67033: LD_ADDR_VAR 0 4
67037: PUSH
67038: LD_INT 1
67040: ST_TO_ADDR
// end ; end ;
67041: LD_VAR 0 4
67045: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67046: LD_INT 0
67048: PPUSH
67049: PPUSH
67050: PPUSH
67051: PPUSH
// if not unit or not area then
67052: LD_VAR 0 1
67056: NOT
67057: IFTRUE 67066
67059: PUSH
67060: LD_VAR 0 2
67064: NOT
67065: OR
67066: IFFALSE 67070
// exit ;
67068: GO 67246
// tmp := AreaToList ( area , i ) ;
67070: LD_ADDR_VAR 0 6
67074: PUSH
67075: LD_VAR 0 2
67079: PPUSH
67080: LD_VAR 0 5
67084: PPUSH
67085: CALL_OW 517
67089: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67090: LD_ADDR_VAR 0 5
67094: PUSH
67095: DOUBLE
67096: LD_INT 1
67098: DEC
67099: ST_TO_ADDR
67100: LD_VAR 0 6
67104: PUSH
67105: LD_INT 1
67107: ARRAY
67108: PUSH
67109: FOR_TO
67110: IFFALSE 67244
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67112: LD_ADDR_VAR 0 7
67116: PUSH
67117: LD_VAR 0 6
67121: PUSH
67122: LD_INT 1
67124: ARRAY
67125: PUSH
67126: LD_VAR 0 5
67130: ARRAY
67131: PUSH
67132: LD_VAR 0 6
67136: PUSH
67137: LD_INT 2
67139: ARRAY
67140: PUSH
67141: LD_VAR 0 5
67145: ARRAY
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67151: LD_INT 92
67153: PUSH
67154: LD_VAR 0 7
67158: PUSH
67159: LD_INT 1
67161: ARRAY
67162: PUSH
67163: LD_VAR 0 7
67167: PUSH
67168: LD_INT 2
67170: ARRAY
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: PPUSH
67181: CALL_OW 69
67185: PUSH
67186: LD_INT 0
67188: EQUAL
67189: IFFALSE 67242
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67191: LD_VAR 0 1
67195: PPUSH
67196: LD_VAR 0 7
67200: PUSH
67201: LD_INT 1
67203: ARRAY
67204: PPUSH
67205: LD_VAR 0 7
67209: PUSH
67210: LD_INT 2
67212: ARRAY
67213: PPUSH
67214: LD_VAR 0 3
67218: PPUSH
67219: CALL_OW 48
// result := IsPlaced ( unit ) ;
67223: LD_ADDR_VAR 0 4
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: CALL_OW 305
67237: ST_TO_ADDR
// exit ;
67238: POP
67239: POP
67240: GO 67246
// end ; end ;
67242: GO 67109
67244: POP
67245: POP
// end ;
67246: LD_VAR 0 4
67250: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67251: LD_INT 0
67253: PPUSH
67254: PPUSH
67255: PPUSH
// if not side or side > 8 then
67256: LD_VAR 0 1
67260: NOT
67261: IFTRUE 67273
67263: PUSH
67264: LD_VAR 0 1
67268: PUSH
67269: LD_INT 8
67271: GREATER
67272: OR
67273: IFFALSE 67277
// exit ;
67275: GO 67464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67277: LD_ADDR_VAR 0 4
67281: PUSH
67282: LD_INT 22
67284: PUSH
67285: LD_VAR 0 1
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 21
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PPUSH
67308: CALL_OW 69
67312: ST_TO_ADDR
// if not tmp then
67313: LD_VAR 0 4
67317: NOT
67318: IFFALSE 67322
// exit ;
67320: GO 67464
// enable_addtolog := true ;
67322: LD_ADDR_OWVAR 81
67326: PUSH
67327: LD_INT 1
67329: ST_TO_ADDR
// AddToLog ( [ ) ;
67330: LD_STRING [
67332: PPUSH
67333: CALL_OW 561
// for i in tmp do
67337: LD_ADDR_VAR 0 3
67341: PUSH
67342: LD_VAR 0 4
67346: PUSH
67347: FOR_IN
67348: IFFALSE 67455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67350: LD_STRING [
67352: PUSH
67353: LD_VAR 0 3
67357: PPUSH
67358: CALL_OW 266
67362: STR
67363: PUSH
67364: LD_STRING , 
67366: STR
67367: PUSH
67368: LD_VAR 0 3
67372: PPUSH
67373: CALL_OW 250
67377: STR
67378: PUSH
67379: LD_STRING , 
67381: STR
67382: PUSH
67383: LD_VAR 0 3
67387: PPUSH
67388: CALL_OW 251
67392: STR
67393: PUSH
67394: LD_STRING , 
67396: STR
67397: PUSH
67398: LD_VAR 0 3
67402: PPUSH
67403: CALL_OW 254
67407: STR
67408: PUSH
67409: LD_STRING , 
67411: STR
67412: PUSH
67413: LD_VAR 0 3
67417: PPUSH
67418: LD_INT 1
67420: PPUSH
67421: CALL_OW 268
67425: STR
67426: PUSH
67427: LD_STRING , 
67429: STR
67430: PUSH
67431: LD_VAR 0 3
67435: PPUSH
67436: LD_INT 2
67438: PPUSH
67439: CALL_OW 268
67443: STR
67444: PUSH
67445: LD_STRING ],
67447: STR
67448: PPUSH
67449: CALL_OW 561
// end ;
67453: GO 67347
67455: POP
67456: POP
// AddToLog ( ]; ) ;
67457: LD_STRING ];
67459: PPUSH
67460: CALL_OW 561
// end ;
67464: LD_VAR 0 2
67468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
// if not area or not rate or not max then
67476: LD_VAR 0 1
67480: NOT
67481: IFTRUE 67490
67483: PUSH
67484: LD_VAR 0 2
67488: NOT
67489: OR
67490: IFTRUE 67499
67492: PUSH
67493: LD_VAR 0 4
67497: NOT
67498: OR
67499: IFFALSE 67503
// exit ;
67501: GO 67692
// while 1 do
67503: LD_INT 1
67505: IFFALSE 67692
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67507: LD_ADDR_VAR 0 9
67511: PUSH
67512: LD_VAR 0 1
67516: PPUSH
67517: LD_INT 1
67519: PPUSH
67520: CALL_OW 287
67524: PUSH
67525: LD_INT 10
67527: MUL
67528: ST_TO_ADDR
// r := rate / 10 ;
67529: LD_ADDR_VAR 0 7
67533: PUSH
67534: LD_VAR 0 2
67538: PUSH
67539: LD_INT 10
67541: DIVREAL
67542: ST_TO_ADDR
// time := 1 1$00 ;
67543: LD_ADDR_VAR 0 8
67547: PUSH
67548: LD_INT 2100
67550: ST_TO_ADDR
// if amount < min then
67551: LD_VAR 0 9
67555: PUSH
67556: LD_VAR 0 3
67560: LESS
67561: IFFALSE 67579
// r := r * 2 else
67563: LD_ADDR_VAR 0 7
67567: PUSH
67568: LD_VAR 0 7
67572: PUSH
67573: LD_INT 2
67575: MUL
67576: ST_TO_ADDR
67577: GO 67605
// if amount > max then
67579: LD_VAR 0 9
67583: PUSH
67584: LD_VAR 0 4
67588: GREATER
67589: IFFALSE 67605
// r := r / 2 ;
67591: LD_ADDR_VAR 0 7
67595: PUSH
67596: LD_VAR 0 7
67600: PUSH
67601: LD_INT 2
67603: DIVREAL
67604: ST_TO_ADDR
// time := time / r ;
67605: LD_ADDR_VAR 0 8
67609: PUSH
67610: LD_VAR 0 8
67614: PUSH
67615: LD_VAR 0 7
67619: DIVREAL
67620: ST_TO_ADDR
// if time < 0 then
67621: LD_VAR 0 8
67625: PUSH
67626: LD_INT 0
67628: LESS
67629: IFFALSE 67646
// time := time * - 1 ;
67631: LD_ADDR_VAR 0 8
67635: PUSH
67636: LD_VAR 0 8
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: MUL
67645: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67646: LD_VAR 0 8
67650: PUSH
67651: LD_INT 35
67653: PPUSH
67654: LD_INT 875
67656: PPUSH
67657: CALL_OW 12
67661: PLUS
67662: PPUSH
67663: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67667: LD_INT 1
67669: PPUSH
67670: LD_INT 5
67672: PPUSH
67673: CALL_OW 12
67677: PPUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_INT 1
67685: PPUSH
67686: CALL_OW 55
// end ;
67690: GO 67503
// end ;
67692: LD_VAR 0 5
67696: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67697: LD_INT 0
67699: PPUSH
67700: PPUSH
67701: PPUSH
67702: PPUSH
67703: PPUSH
67704: PPUSH
67705: PPUSH
67706: PPUSH
// if not turrets or not factories then
67707: LD_VAR 0 1
67711: NOT
67712: IFTRUE 67721
67714: PUSH
67715: LD_VAR 0 2
67719: NOT
67720: OR
67721: IFFALSE 67725
// exit ;
67723: GO 68032
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67725: LD_ADDR_VAR 0 10
67729: PUSH
67730: LD_INT 5
67732: PUSH
67733: LD_INT 6
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: LD_INT 4
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 3
67752: PUSH
67753: LD_INT 5
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 24
67767: PUSH
67768: LD_INT 25
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 23
67777: PUSH
67778: LD_INT 27
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 42
67791: PUSH
67792: LD_INT 43
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 44
67801: PUSH
67802: LD_INT 46
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 45
67811: PUSH
67812: LD_INT 47
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: LIST
67828: ST_TO_ADDR
// result := [ ] ;
67829: LD_ADDR_VAR 0 3
67833: PUSH
67834: EMPTY
67835: ST_TO_ADDR
// for i in turrets do
67836: LD_ADDR_VAR 0 4
67840: PUSH
67841: LD_VAR 0 1
67845: PUSH
67846: FOR_IN
67847: IFFALSE 68030
// begin nat := GetNation ( i ) ;
67849: LD_ADDR_VAR 0 7
67853: PUSH
67854: LD_VAR 0 4
67858: PPUSH
67859: CALL_OW 248
67863: ST_TO_ADDR
// weapon := 0 ;
67864: LD_ADDR_VAR 0 8
67868: PUSH
67869: LD_INT 0
67871: ST_TO_ADDR
// if not nat then
67872: LD_VAR 0 7
67876: NOT
67877: IFFALSE 67881
// continue ;
67879: GO 67846
// for j in list [ nat ] do
67881: LD_ADDR_VAR 0 5
67885: PUSH
67886: LD_VAR 0 10
67890: PUSH
67891: LD_VAR 0 7
67895: ARRAY
67896: PUSH
67897: FOR_IN
67898: IFFALSE 67939
// if GetBWeapon ( i ) = j [ 1 ] then
67900: LD_VAR 0 4
67904: PPUSH
67905: CALL_OW 269
67909: PUSH
67910: LD_VAR 0 5
67914: PUSH
67915: LD_INT 1
67917: ARRAY
67918: EQUAL
67919: IFFALSE 67937
// begin weapon := j [ 2 ] ;
67921: LD_ADDR_VAR 0 8
67925: PUSH
67926: LD_VAR 0 5
67930: PUSH
67931: LD_INT 2
67933: ARRAY
67934: ST_TO_ADDR
// break ;
67935: GO 67939
// end ;
67937: GO 67897
67939: POP
67940: POP
// if not weapon then
67941: LD_VAR 0 8
67945: NOT
67946: IFFALSE 67950
// continue ;
67948: GO 67846
// for k in factories do
67950: LD_ADDR_VAR 0 6
67954: PUSH
67955: LD_VAR 0 2
67959: PUSH
67960: FOR_IN
67961: IFFALSE 68026
// begin weapons := AvailableWeaponList ( k ) ;
67963: LD_ADDR_VAR 0 9
67967: PUSH
67968: LD_VAR 0 6
67972: PPUSH
67973: CALL_OW 478
67977: ST_TO_ADDR
// if not weapons then
67978: LD_VAR 0 9
67982: NOT
67983: IFFALSE 67987
// continue ;
67985: GO 67960
// if weapon in weapons then
67987: LD_VAR 0 8
67991: PUSH
67992: LD_VAR 0 9
67996: IN
67997: IFFALSE 68024
// begin result := [ i , weapon ] ;
67999: LD_ADDR_VAR 0 3
68003: PUSH
68004: LD_VAR 0 4
68008: PUSH
68009: LD_VAR 0 8
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: ST_TO_ADDR
// exit ;
68018: POP
68019: POP
68020: POP
68021: POP
68022: GO 68032
// end ; end ;
68024: GO 67960
68026: POP
68027: POP
// end ;
68028: GO 67846
68030: POP
68031: POP
// end ;
68032: LD_VAR 0 3
68036: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68037: LD_INT 0
68039: PPUSH
// if not side or side > 8 then
68040: LD_VAR 0 3
68044: NOT
68045: IFTRUE 68057
68047: PUSH
68048: LD_VAR 0 3
68052: PUSH
68053: LD_INT 8
68055: GREATER
68056: OR
68057: IFFALSE 68061
// exit ;
68059: GO 68120
// if not range then
68061: LD_VAR 0 4
68065: NOT
68066: IFFALSE 68077
// range := - 12 ;
68068: LD_ADDR_VAR 0 4
68072: PUSH
68073: LD_INT 12
68075: NEG
68076: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68077: LD_VAR 0 1
68081: PPUSH
68082: LD_VAR 0 2
68086: PPUSH
68087: LD_VAR 0 3
68091: PPUSH
68092: LD_VAR 0 4
68096: PPUSH
68097: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68101: LD_VAR 0 1
68105: PPUSH
68106: LD_VAR 0 2
68110: PPUSH
68111: LD_VAR 0 3
68115: PPUSH
68116: CALL_OW 331
// end ;
68120: LD_VAR 0 5
68124: RET
// export function Video ( mode ) ; begin
68125: LD_INT 0
68127: PPUSH
// ingame_video = mode ;
68128: LD_ADDR_OWVAR 52
68132: PUSH
68133: LD_VAR 0 1
68137: ST_TO_ADDR
// interface_hidden = mode ;
68138: LD_ADDR_OWVAR 54
68142: PUSH
68143: LD_VAR 0 1
68147: ST_TO_ADDR
// end ;
68148: LD_VAR 0 2
68152: RET
// export function Join ( array , element ) ; begin
68153: LD_INT 0
68155: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_VAR 0 1
68170: PUSH
68171: LD_INT 1
68173: PLUS
68174: PPUSH
68175: LD_VAR 0 2
68179: PPUSH
68180: CALL_OW 1
68184: ST_TO_ADDR
// end ;
68185: LD_VAR 0 3
68189: RET
// export function JoinUnion ( array , element ) ; begin
68190: LD_INT 0
68192: PPUSH
// result := array union element ;
68193: LD_ADDR_VAR 0 3
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: LD_VAR 0 2
68207: UNION
68208: ST_TO_ADDR
// end ;
68209: LD_VAR 0 3
68213: RET
// export function GetBehemoths ( side ) ; begin
68214: LD_INT 0
68216: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_INT 22
68224: PUSH
68225: LD_VAR 0 1
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 31
68236: PUSH
68237: LD_INT 25
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PPUSH
68248: CALL_OW 69
68252: ST_TO_ADDR
// end ;
68253: LD_VAR 0 2
68257: RET
// export function Shuffle ( array ) ; var i , index ; begin
68258: LD_INT 0
68260: PPUSH
68261: PPUSH
68262: PPUSH
// result := [ ] ;
68263: LD_ADDR_VAR 0 2
68267: PUSH
68268: EMPTY
68269: ST_TO_ADDR
// if not array then
68270: LD_VAR 0 1
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68378
// Randomize ;
68279: CALL_OW 10
// for i = array downto 1 do
68283: LD_ADDR_VAR 0 3
68287: PUSH
68288: DOUBLE
68289: LD_VAR 0 1
68293: INC
68294: ST_TO_ADDR
68295: LD_INT 1
68297: PUSH
68298: FOR_DOWNTO
68299: IFFALSE 68376
// begin index := rand ( 1 , array ) ;
68301: LD_ADDR_VAR 0 4
68305: PUSH
68306: LD_INT 1
68308: PPUSH
68309: LD_VAR 0 1
68313: PPUSH
68314: CALL_OW 12
68318: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68319: LD_ADDR_VAR 0 2
68323: PUSH
68324: LD_VAR 0 2
68328: PPUSH
68329: LD_VAR 0 2
68333: PUSH
68334: LD_INT 1
68336: PLUS
68337: PPUSH
68338: LD_VAR 0 1
68342: PUSH
68343: LD_VAR 0 4
68347: ARRAY
68348: PPUSH
68349: CALL_OW 2
68353: ST_TO_ADDR
// array := Delete ( array , index ) ;
68354: LD_ADDR_VAR 0 1
68358: PUSH
68359: LD_VAR 0 1
68363: PPUSH
68364: LD_VAR 0 4
68368: PPUSH
68369: CALL_OW 3
68373: ST_TO_ADDR
// end ;
68374: GO 68298
68376: POP
68377: POP
// end ;
68378: LD_VAR 0 2
68382: RET
// export function GetBaseMaterials ( base ) ; begin
68383: LD_INT 0
68385: PPUSH
// result := [ 0 , 0 , 0 ] ;
68386: LD_ADDR_VAR 0 2
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: LIST
68404: ST_TO_ADDR
// if not base then
68405: LD_VAR 0 1
68409: NOT
68410: IFFALSE 68414
// exit ;
68412: GO 68463
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68414: LD_ADDR_VAR 0 2
68418: PUSH
68419: LD_VAR 0 1
68423: PPUSH
68424: LD_INT 1
68426: PPUSH
68427: CALL_OW 275
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: LD_INT 2
68439: PPUSH
68440: CALL_OW 275
68444: PUSH
68445: LD_VAR 0 1
68449: PPUSH
68450: LD_INT 3
68452: PPUSH
68453: CALL_OW 275
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: ST_TO_ADDR
// end ;
68463: LD_VAR 0 2
68467: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68468: LD_INT 0
68470: PPUSH
68471: PPUSH
// result := array ;
68472: LD_ADDR_VAR 0 3
68476: PUSH
68477: LD_VAR 0 1
68481: ST_TO_ADDR
// if size >= result then
68482: LD_VAR 0 2
68486: PUSH
68487: LD_VAR 0 3
68491: GREATEREQUAL
68492: IFFALSE 68496
// exit ;
68494: GO 68546
// if size then
68496: LD_VAR 0 2
68500: IFFALSE 68546
// for i := array downto size do
68502: LD_ADDR_VAR 0 4
68506: PUSH
68507: DOUBLE
68508: LD_VAR 0 1
68512: INC
68513: ST_TO_ADDR
68514: LD_VAR 0 2
68518: PUSH
68519: FOR_DOWNTO
68520: IFFALSE 68544
// result := Delete ( result , result ) ;
68522: LD_ADDR_VAR 0 3
68526: PUSH
68527: LD_VAR 0 3
68531: PPUSH
68532: LD_VAR 0 3
68536: PPUSH
68537: CALL_OW 3
68541: ST_TO_ADDR
68542: GO 68519
68544: POP
68545: POP
// end ;
68546: LD_VAR 0 3
68550: RET
// export function ComExit ( unit ) ; var tmp ; begin
68551: LD_INT 0
68553: PPUSH
68554: PPUSH
// if not IsInUnit ( unit ) then
68555: LD_VAR 0 1
68559: PPUSH
68560: CALL_OW 310
68564: NOT
68565: IFFALSE 68569
// exit ;
68567: GO 68629
// tmp := IsInUnit ( unit ) ;
68569: LD_ADDR_VAR 0 3
68573: PUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL_OW 310
68583: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68584: LD_VAR 0 3
68588: PPUSH
68589: CALL_OW 247
68593: PUSH
68594: LD_INT 2
68596: EQUAL
68597: IFFALSE 68610
// ComExitVehicle ( unit ) else
68599: LD_VAR 0 1
68603: PPUSH
68604: CALL_OW 121
68608: GO 68619
// ComExitBuilding ( unit ) ;
68610: LD_VAR 0 1
68614: PPUSH
68615: CALL_OW 122
// result := tmp ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: LD_VAR 0 3
68628: ST_TO_ADDR
// end ;
68629: LD_VAR 0 2
68633: RET
// export function ComExitAll ( units ) ; var i ; begin
68634: LD_INT 0
68636: PPUSH
68637: PPUSH
// if not units then
68638: LD_VAR 0 1
68642: NOT
68643: IFFALSE 68647
// exit ;
68645: GO 68673
// for i in units do
68647: LD_ADDR_VAR 0 3
68651: PUSH
68652: LD_VAR 0 1
68656: PUSH
68657: FOR_IN
68658: IFFALSE 68671
// ComExit ( i ) ;
68660: LD_VAR 0 3
68664: PPUSH
68665: CALL 68551 0 1
68669: GO 68657
68671: POP
68672: POP
// end ;
68673: LD_VAR 0 2
68677: RET
// export function ResetHc ; begin
68678: LD_INT 0
68680: PPUSH
// InitHc ;
68681: CALL_OW 19
// hc_importance := 0 ;
68685: LD_ADDR_OWVAR 32
68689: PUSH
68690: LD_INT 0
68692: ST_TO_ADDR
// end ;
68693: LD_VAR 0 1
68697: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68703: LD_ADDR_VAR 0 6
68707: PUSH
68708: LD_VAR 0 1
68712: PUSH
68713: LD_VAR 0 3
68717: PLUS
68718: PUSH
68719: LD_INT 2
68721: DIV
68722: ST_TO_ADDR
// if _x < 0 then
68723: LD_VAR 0 6
68727: PUSH
68728: LD_INT 0
68730: LESS
68731: IFFALSE 68748
// _x := _x * - 1 ;
68733: LD_ADDR_VAR 0 6
68737: PUSH
68738: LD_VAR 0 6
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: MUL
68747: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68748: LD_ADDR_VAR 0 7
68752: PUSH
68753: LD_VAR 0 2
68757: PUSH
68758: LD_VAR 0 4
68762: PLUS
68763: PUSH
68764: LD_INT 2
68766: DIV
68767: ST_TO_ADDR
// if _y < 0 then
68768: LD_VAR 0 7
68772: PUSH
68773: LD_INT 0
68775: LESS
68776: IFFALSE 68793
// _y := _y * - 1 ;
68778: LD_ADDR_VAR 0 7
68782: PUSH
68783: LD_VAR 0 7
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: MUL
68792: ST_TO_ADDR
// result := [ _x , _y ] ;
68793: LD_ADDR_VAR 0 5
68797: PUSH
68798: LD_VAR 0 6
68802: PUSH
68803: LD_VAR 0 7
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: ST_TO_ADDR
// end ;
68812: LD_VAR 0 5
68816: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68817: LD_INT 0
68819: PPUSH
68820: PPUSH
68821: PPUSH
68822: PPUSH
// task := GetTaskList ( unit ) ;
68823: LD_ADDR_VAR 0 7
68827: PUSH
68828: LD_VAR 0 1
68832: PPUSH
68833: CALL_OW 437
68837: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68838: LD_VAR 0 7
68842: NOT
68843: IFFALSE 68862
68845: PUSH
68846: LD_VAR 0 1
68850: PPUSH
68851: LD_VAR 0 2
68855: PPUSH
68856: CALL_OW 308
68860: NOT
68861: AND
68862: IFFALSE 68866
// exit ;
68864: GO 68984
// if IsInArea ( unit , area ) then
68866: LD_VAR 0 1
68870: PPUSH
68871: LD_VAR 0 2
68875: PPUSH
68876: CALL_OW 308
68880: IFFALSE 68898
// begin ComMoveToArea ( unit , goAway ) ;
68882: LD_VAR 0 1
68886: PPUSH
68887: LD_VAR 0 3
68891: PPUSH
68892: CALL_OW 113
// exit ;
68896: GO 68984
// end ; if task [ 1 ] [ 1 ] <> M then
68898: LD_VAR 0 7
68902: PUSH
68903: LD_INT 1
68905: ARRAY
68906: PUSH
68907: LD_INT 1
68909: ARRAY
68910: PUSH
68911: LD_STRING M
68913: NONEQUAL
68914: IFFALSE 68918
// exit ;
68916: GO 68984
// x := task [ 1 ] [ 2 ] ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: LD_VAR 0 7
68927: PUSH
68928: LD_INT 1
68930: ARRAY
68931: PUSH
68932: LD_INT 2
68934: ARRAY
68935: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68936: LD_ADDR_VAR 0 6
68940: PUSH
68941: LD_VAR 0 7
68945: PUSH
68946: LD_INT 1
68948: ARRAY
68949: PUSH
68950: LD_INT 3
68952: ARRAY
68953: ST_TO_ADDR
// if InArea ( x , y , area ) then
68954: LD_VAR 0 5
68958: PPUSH
68959: LD_VAR 0 6
68963: PPUSH
68964: LD_VAR 0 2
68968: PPUSH
68969: CALL_OW 309
68973: IFFALSE 68984
// ComStop ( unit ) ;
68975: LD_VAR 0 1
68979: PPUSH
68980: CALL_OW 141
// end ;
68984: LD_VAR 0 4
68988: RET
// export function Abs ( value ) ; begin
68989: LD_INT 0
68991: PPUSH
// result := value ;
68992: LD_ADDR_VAR 0 2
68996: PUSH
68997: LD_VAR 0 1
69001: ST_TO_ADDR
// if value < 0 then
69002: LD_VAR 0 1
69006: PUSH
69007: LD_INT 0
69009: LESS
69010: IFFALSE 69027
// result := value * - 1 ;
69012: LD_ADDR_VAR 0 2
69016: PUSH
69017: LD_VAR 0 1
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: MUL
69026: ST_TO_ADDR
// end ;
69027: LD_VAR 0 2
69031: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69032: LD_INT 0
69034: PPUSH
69035: PPUSH
69036: PPUSH
69037: PPUSH
69038: PPUSH
69039: PPUSH
69040: PPUSH
69041: PPUSH
// if not unit or not building then
69042: LD_VAR 0 1
69046: NOT
69047: IFTRUE 69056
69049: PUSH
69050: LD_VAR 0 2
69054: NOT
69055: OR
69056: IFFALSE 69060
// exit ;
69058: GO 69288
// x := GetX ( building ) ;
69060: LD_ADDR_VAR 0 4
69064: PUSH
69065: LD_VAR 0 2
69069: PPUSH
69070: CALL_OW 250
69074: ST_TO_ADDR
// y := GetY ( building ) ;
69075: LD_ADDR_VAR 0 6
69079: PUSH
69080: LD_VAR 0 2
69084: PPUSH
69085: CALL_OW 251
69089: ST_TO_ADDR
// d := GetDir ( building ) ;
69090: LD_ADDR_VAR 0 8
69094: PUSH
69095: LD_VAR 0 2
69099: PPUSH
69100: CALL_OW 254
69104: ST_TO_ADDR
// r := 4 ;
69105: LD_ADDR_VAR 0 9
69109: PUSH
69110: LD_INT 4
69112: ST_TO_ADDR
// for i := 1 to 5 do
69113: LD_ADDR_VAR 0 10
69117: PUSH
69118: DOUBLE
69119: LD_INT 1
69121: DEC
69122: ST_TO_ADDR
69123: LD_INT 5
69125: PUSH
69126: FOR_TO
69127: IFFALSE 69286
// begin _x := ShiftX ( x , d , r + i ) ;
69129: LD_ADDR_VAR 0 5
69133: PUSH
69134: LD_VAR 0 4
69138: PPUSH
69139: LD_VAR 0 8
69143: PPUSH
69144: LD_VAR 0 9
69148: PUSH
69149: LD_VAR 0 10
69153: PLUS
69154: PPUSH
69155: CALL_OW 272
69159: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69160: LD_ADDR_VAR 0 7
69164: PUSH
69165: LD_VAR 0 6
69169: PPUSH
69170: LD_VAR 0 8
69174: PPUSH
69175: LD_VAR 0 9
69179: PUSH
69180: LD_VAR 0 10
69184: PLUS
69185: PPUSH
69186: CALL_OW 273
69190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69191: LD_VAR 0 5
69195: PPUSH
69196: LD_VAR 0 7
69200: PPUSH
69201: CALL_OW 488
69205: IFFALSE 69240
69207: PUSH
69208: LD_VAR 0 5
69212: PPUSH
69213: LD_VAR 0 7
69217: PPUSH
69218: CALL_OW 428
69222: PPUSH
69223: CALL_OW 247
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: LD_INT 2
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: IN
69238: NOT
69239: AND
69240: IFFALSE 69284
// begin ComMoveXY ( unit , _x , _y ) ;
69242: LD_VAR 0 1
69246: PPUSH
69247: LD_VAR 0 5
69251: PPUSH
69252: LD_VAR 0 7
69256: PPUSH
69257: CALL_OW 111
// result := [ _x , _y ] ;
69261: LD_ADDR_VAR 0 3
69265: PUSH
69266: LD_VAR 0 5
69270: PUSH
69271: LD_VAR 0 7
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: ST_TO_ADDR
// exit ;
69280: POP
69281: POP
69282: GO 69288
// end ; end ;
69284: GO 69126
69286: POP
69287: POP
// end ;
69288: LD_VAR 0 3
69292: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69293: LD_INT 0
69295: PPUSH
69296: PPUSH
69297: PPUSH
// result := 0 ;
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_INT 0
69305: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69306: LD_VAR 0 1
69310: PUSH
69311: LD_INT 0
69313: LESS
69314: IFTRUE 69326
69316: PUSH
69317: LD_VAR 0 1
69321: PUSH
69322: LD_INT 8
69324: GREATER
69325: OR
69326: IFTRUE 69338
69328: PUSH
69329: LD_VAR 0 2
69333: PUSH
69334: LD_INT 0
69336: LESS
69337: OR
69338: IFTRUE 69350
69340: PUSH
69341: LD_VAR 0 2
69345: PUSH
69346: LD_INT 8
69348: GREATER
69349: OR
69350: IFFALSE 69354
// exit ;
69352: GO 69429
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69354: LD_ADDR_VAR 0 4
69358: PUSH
69359: LD_INT 22
69361: PUSH
69362: LD_VAR 0 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PPUSH
69371: CALL_OW 69
69375: PUSH
69376: FOR_IN
69377: IFFALSE 69427
// begin un := UnitShoot ( i ) ;
69379: LD_ADDR_VAR 0 5
69383: PUSH
69384: LD_VAR 0 4
69388: PPUSH
69389: CALL_OW 504
69393: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69394: LD_VAR 0 5
69398: PPUSH
69399: CALL_OW 255
69403: PUSH
69404: LD_VAR 0 1
69408: EQUAL
69409: IFFALSE 69425
// begin result := un ;
69411: LD_ADDR_VAR 0 3
69415: PUSH
69416: LD_VAR 0 5
69420: ST_TO_ADDR
// exit ;
69421: POP
69422: POP
69423: GO 69429
// end ; end ;
69425: GO 69376
69427: POP
69428: POP
// end ;
69429: LD_VAR 0 3
69433: RET
// export function GetCargoBay ( units ) ; begin
69434: LD_INT 0
69436: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69437: LD_ADDR_VAR 0 2
69441: PUSH
69442: LD_VAR 0 1
69446: PPUSH
69447: LD_INT 2
69449: PUSH
69450: LD_INT 34
69452: PUSH
69453: LD_INT 12
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 34
69462: PUSH
69463: LD_INT 51
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 34
69472: PUSH
69473: LD_INT 32
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 34
69482: PUSH
69483: LD_INT 89
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: PPUSH
69497: CALL_OW 72
69501: ST_TO_ADDR
// end ;
69502: LD_VAR 0 2
69506: RET
// export function Negate ( value ) ; begin
69507: LD_INT 0
69509: PPUSH
// result := not value ;
69510: LD_ADDR_VAR 0 2
69514: PUSH
69515: LD_VAR 0 1
69519: NOT
69520: ST_TO_ADDR
// end ;
69521: LD_VAR 0 2
69525: RET
// export function Inc ( value ) ; begin
69526: LD_INT 0
69528: PPUSH
// result := value + 1 ;
69529: LD_ADDR_VAR 0 2
69533: PUSH
69534: LD_VAR 0 1
69538: PUSH
69539: LD_INT 1
69541: PLUS
69542: ST_TO_ADDR
// end ;
69543: LD_VAR 0 2
69547: RET
// export function Dec ( value ) ; begin
69548: LD_INT 0
69550: PPUSH
// result := value - 1 ;
69551: LD_ADDR_VAR 0 2
69555: PUSH
69556: LD_VAR 0 1
69560: PUSH
69561: LD_INT 1
69563: MINUS
69564: ST_TO_ADDR
// end ;
69565: LD_VAR 0 2
69569: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69570: LD_INT 0
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69580: LD_VAR 0 1
69584: PPUSH
69585: LD_VAR 0 2
69589: PPUSH
69590: CALL_OW 488
69594: NOT
69595: IFTRUE 69614
69597: PUSH
69598: LD_VAR 0 3
69602: PPUSH
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL_OW 488
69612: NOT
69613: OR
69614: IFFALSE 69627
// begin result := - 1 ;
69616: LD_ADDR_VAR 0 5
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: ST_TO_ADDR
// exit ;
69625: GO 69862
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69627: LD_ADDR_VAR 0 12
69631: PUSH
69632: LD_VAR 0 1
69636: PPUSH
69637: LD_VAR 0 2
69641: PPUSH
69642: LD_VAR 0 3
69646: PPUSH
69647: LD_VAR 0 4
69651: PPUSH
69652: CALL 68698 0 4
69656: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69657: LD_ADDR_VAR 0 11
69661: PUSH
69662: LD_VAR 0 1
69666: PPUSH
69667: LD_VAR 0 2
69671: PPUSH
69672: LD_VAR 0 12
69676: PUSH
69677: LD_INT 1
69679: ARRAY
69680: PPUSH
69681: LD_VAR 0 12
69685: PUSH
69686: LD_INT 2
69688: ARRAY
69689: PPUSH
69690: CALL_OW 298
69694: ST_TO_ADDR
// distance := 9999 ;
69695: LD_ADDR_VAR 0 10
69699: PUSH
69700: LD_INT 9999
69702: ST_TO_ADDR
// for i := 0 to 5 do
69703: LD_ADDR_VAR 0 6
69707: PUSH
69708: DOUBLE
69709: LD_INT 0
69711: DEC
69712: ST_TO_ADDR
69713: LD_INT 5
69715: PUSH
69716: FOR_TO
69717: IFFALSE 69860
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69719: LD_ADDR_VAR 0 7
69723: PUSH
69724: LD_VAR 0 1
69728: PPUSH
69729: LD_VAR 0 6
69733: PPUSH
69734: LD_VAR 0 11
69738: PPUSH
69739: CALL_OW 272
69743: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69744: LD_ADDR_VAR 0 8
69748: PUSH
69749: LD_VAR 0 2
69753: PPUSH
69754: LD_VAR 0 6
69758: PPUSH
69759: LD_VAR 0 11
69763: PPUSH
69764: CALL_OW 273
69768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69769: LD_VAR 0 7
69773: PPUSH
69774: LD_VAR 0 8
69778: PPUSH
69779: CALL_OW 488
69783: NOT
69784: IFFALSE 69788
// continue ;
69786: GO 69716
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69788: LD_ADDR_VAR 0 9
69792: PUSH
69793: LD_VAR 0 12
69797: PUSH
69798: LD_INT 1
69800: ARRAY
69801: PPUSH
69802: LD_VAR 0 12
69806: PUSH
69807: LD_INT 2
69809: ARRAY
69810: PPUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: LD_VAR 0 8
69820: PPUSH
69821: CALL_OW 298
69825: ST_TO_ADDR
// if tmp < distance then
69826: LD_VAR 0 9
69830: PUSH
69831: LD_VAR 0 10
69835: LESS
69836: IFFALSE 69858
// begin result := i ;
69838: LD_ADDR_VAR 0 5
69842: PUSH
69843: LD_VAR 0 6
69847: ST_TO_ADDR
// distance := tmp ;
69848: LD_ADDR_VAR 0 10
69852: PUSH
69853: LD_VAR 0 9
69857: ST_TO_ADDR
// end ; end ;
69858: GO 69716
69860: POP
69861: POP
// end ;
69862: LD_VAR 0 5
69866: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69867: LD_INT 0
69869: PPUSH
69870: PPUSH
// if not driver or not IsInUnit ( driver ) then
69871: LD_VAR 0 1
69875: NOT
69876: IFTRUE 69890
69878: PUSH
69879: LD_VAR 0 1
69883: PPUSH
69884: CALL_OW 310
69888: NOT
69889: OR
69890: IFFALSE 69894
// exit ;
69892: GO 69984
// vehicle := IsInUnit ( driver ) ;
69894: LD_ADDR_VAR 0 3
69898: PUSH
69899: LD_VAR 0 1
69903: PPUSH
69904: CALL_OW 310
69908: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69909: LD_VAR 0 1
69913: PPUSH
69914: LD_STRING \
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: LD_INT 0
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: PUSH
69944: LD_STRING E
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: LD_VAR 0 3
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PPUSH
69980: CALL_OW 446
// end ;
69984: LD_VAR 0 2
69988: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69989: LD_INT 0
69991: PPUSH
69992: PPUSH
// if not driver or not IsInUnit ( driver ) then
69993: LD_VAR 0 1
69997: NOT
69998: IFTRUE 70012
70000: PUSH
70001: LD_VAR 0 1
70005: PPUSH
70006: CALL_OW 310
70010: NOT
70011: OR
70012: IFFALSE 70016
// exit ;
70014: GO 70106
// vehicle := IsInUnit ( driver ) ;
70016: LD_ADDR_VAR 0 3
70020: PUSH
70021: LD_VAR 0 1
70025: PPUSH
70026: CALL_OW 310
70030: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70031: LD_VAR 0 1
70035: PPUSH
70036: LD_STRING \
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: PUSH
70066: LD_STRING E
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: LD_VAR 0 3
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PPUSH
70102: CALL_OW 447
// end ;
70106: LD_VAR 0 2
70110: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70111: LD_INT 0
70113: PPUSH
70114: PPUSH
70115: PPUSH
// tmp := [ ] ;
70116: LD_ADDR_VAR 0 5
70120: PUSH
70121: EMPTY
70122: ST_TO_ADDR
// for i in units do
70123: LD_ADDR_VAR 0 4
70127: PUSH
70128: LD_VAR 0 1
70132: PUSH
70133: FOR_IN
70134: IFFALSE 70172
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70136: LD_ADDR_VAR 0 5
70140: PUSH
70141: LD_VAR 0 5
70145: PPUSH
70146: LD_VAR 0 5
70150: PUSH
70151: LD_INT 1
70153: PLUS
70154: PPUSH
70155: LD_VAR 0 4
70159: PPUSH
70160: CALL_OW 256
70164: PPUSH
70165: CALL_OW 2
70169: ST_TO_ADDR
70170: GO 70133
70172: POP
70173: POP
// if not tmp then
70174: LD_VAR 0 5
70178: NOT
70179: IFFALSE 70183
// exit ;
70181: GO 70231
// if asc then
70183: LD_VAR 0 2
70187: IFFALSE 70211
// result := SortListByListAsc ( units , tmp ) else
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: LD_VAR 0 1
70198: PPUSH
70199: LD_VAR 0 5
70203: PPUSH
70204: CALL_OW 76
70208: ST_TO_ADDR
70209: GO 70231
// result := SortListByListDesc ( units , tmp ) ;
70211: LD_ADDR_VAR 0 3
70215: PUSH
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_VAR 0 5
70225: PPUSH
70226: CALL_OW 77
70230: ST_TO_ADDR
// end ;
70231: LD_VAR 0 3
70235: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70236: LD_INT 0
70238: PPUSH
70239: PPUSH
// task := GetTaskList ( mech ) ;
70240: LD_ADDR_VAR 0 4
70244: PUSH
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 437
70254: ST_TO_ADDR
// if not task then
70255: LD_VAR 0 4
70259: NOT
70260: IFFALSE 70264
// exit ;
70262: GO 70308
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70264: LD_ADDR_VAR 0 3
70268: PUSH
70269: LD_VAR 0 4
70273: PUSH
70274: LD_INT 1
70276: ARRAY
70277: PUSH
70278: LD_INT 1
70280: ARRAY
70281: PUSH
70282: LD_STRING r
70284: EQUAL
70285: IFFALSE 70307
70287: PUSH
70288: LD_VAR 0 4
70292: PUSH
70293: LD_INT 1
70295: ARRAY
70296: PUSH
70297: LD_INT 4
70299: ARRAY
70300: PUSH
70301: LD_VAR 0 2
70305: EQUAL
70306: AND
70307: ST_TO_ADDR
// end ;
70308: LD_VAR 0 3
70312: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70313: LD_INT 0
70315: PPUSH
// SetDir ( unit , d ) ;
70316: LD_VAR 0 1
70320: PPUSH
70321: LD_VAR 0 4
70325: PPUSH
70326: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70330: LD_ADDR_VAR 0 6
70334: PUSH
70335: LD_VAR 0 1
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: LD_VAR 0 3
70349: PPUSH
70350: LD_VAR 0 5
70354: PPUSH
70355: CALL_OW 48
70359: ST_TO_ADDR
// end ;
70360: LD_VAR 0 6
70364: RET
// export function ToNaturalNumber ( number ) ; begin
70365: LD_INT 0
70367: PPUSH
// result := number div 1 ;
70368: LD_ADDR_VAR 0 2
70372: PUSH
70373: LD_VAR 0 1
70377: PUSH
70378: LD_INT 1
70380: DIV
70381: ST_TO_ADDR
// if number < 0 then
70382: LD_VAR 0 1
70386: PUSH
70387: LD_INT 0
70389: LESS
70390: IFFALSE 70400
// result := 0 ;
70392: LD_ADDR_VAR 0 2
70396: PUSH
70397: LD_INT 0
70399: ST_TO_ADDR
// end ;
70400: LD_VAR 0 2
70404: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70405: LD_INT 0
70407: PPUSH
70408: PPUSH
70409: PPUSH
// if not buildings then
70410: LD_VAR 0 1
70414: NOT
70415: IFFALSE 70419
// exit ;
70417: GO 70534
// tmp := [ ] ;
70419: LD_ADDR_VAR 0 5
70423: PUSH
70424: EMPTY
70425: ST_TO_ADDR
// for b in buildings do
70426: LD_ADDR_VAR 0 4
70430: PUSH
70431: LD_VAR 0 1
70435: PUSH
70436: FOR_IN
70437: IFFALSE 70475
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70439: LD_ADDR_VAR 0 5
70443: PUSH
70444: LD_VAR 0 5
70448: PPUSH
70449: LD_VAR 0 5
70453: PUSH
70454: LD_INT 1
70456: PLUS
70457: PPUSH
70458: LD_VAR 0 4
70462: PPUSH
70463: CALL_OW 266
70467: PPUSH
70468: CALL_OW 1
70472: ST_TO_ADDR
70473: GO 70436
70475: POP
70476: POP
// if not tmp then
70477: LD_VAR 0 5
70481: NOT
70482: IFFALSE 70486
// exit ;
70484: GO 70534
// if asc then
70486: LD_VAR 0 2
70490: IFFALSE 70514
// result := SortListByListAsc ( buildings , tmp ) else
70492: LD_ADDR_VAR 0 3
70496: PUSH
70497: LD_VAR 0 1
70501: PPUSH
70502: LD_VAR 0 5
70506: PPUSH
70507: CALL_OW 76
70511: ST_TO_ADDR
70512: GO 70534
// result := SortListByListDesc ( buildings , tmp ) ;
70514: LD_ADDR_VAR 0 3
70518: PUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: LD_VAR 0 5
70528: PPUSH
70529: CALL_OW 77
70533: ST_TO_ADDR
// end ;
70534: LD_VAR 0 3
70538: RET
// export function SortByClass ( units , class ) ; var un ; begin
70539: LD_INT 0
70541: PPUSH
70542: PPUSH
// if not units or not class then
70543: LD_VAR 0 1
70547: NOT
70548: IFTRUE 70557
70550: PUSH
70551: LD_VAR 0 2
70555: NOT
70556: OR
70557: IFFALSE 70561
// exit ;
70559: GO 70656
// result := [ ] ;
70561: LD_ADDR_VAR 0 3
70565: PUSH
70566: EMPTY
70567: ST_TO_ADDR
// for un in units do
70568: LD_ADDR_VAR 0 4
70572: PUSH
70573: LD_VAR 0 1
70577: PUSH
70578: FOR_IN
70579: IFFALSE 70654
// if GetClass ( un ) = class then
70581: LD_VAR 0 4
70585: PPUSH
70586: CALL_OW 257
70590: PUSH
70591: LD_VAR 0 2
70595: EQUAL
70596: IFFALSE 70623
// result := Insert ( result , 1 , un ) else
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 3
70607: PPUSH
70608: LD_INT 1
70610: PPUSH
70611: LD_VAR 0 4
70615: PPUSH
70616: CALL_OW 2
70620: ST_TO_ADDR
70621: GO 70652
// result := Replace ( result , result + 1 , un ) ;
70623: LD_ADDR_VAR 0 3
70627: PUSH
70628: LD_VAR 0 3
70632: PPUSH
70633: LD_VAR 0 3
70637: PUSH
70638: LD_INT 1
70640: PLUS
70641: PPUSH
70642: LD_VAR 0 4
70646: PPUSH
70647: CALL_OW 1
70651: ST_TO_ADDR
70652: GO 70578
70654: POP
70655: POP
// end ;
70656: LD_VAR 0 3
70660: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70661: LD_INT 0
70663: PPUSH
70664: PPUSH
70665: PPUSH
70666: PPUSH
70667: PPUSH
70668: PPUSH
70669: PPUSH
// result := [ ] ;
70670: LD_ADDR_VAR 0 4
70674: PUSH
70675: EMPTY
70676: ST_TO_ADDR
// if x - r < 0 then
70677: LD_VAR 0 1
70681: PUSH
70682: LD_VAR 0 3
70686: MINUS
70687: PUSH
70688: LD_INT 0
70690: LESS
70691: IFFALSE 70703
// min_x := 0 else
70693: LD_ADDR_VAR 0 8
70697: PUSH
70698: LD_INT 0
70700: ST_TO_ADDR
70701: GO 70719
// min_x := x - r ;
70703: LD_ADDR_VAR 0 8
70707: PUSH
70708: LD_VAR 0 1
70712: PUSH
70713: LD_VAR 0 3
70717: MINUS
70718: ST_TO_ADDR
// if y - r < 0 then
70719: LD_VAR 0 2
70723: PUSH
70724: LD_VAR 0 3
70728: MINUS
70729: PUSH
70730: LD_INT 0
70732: LESS
70733: IFFALSE 70745
// min_y := 0 else
70735: LD_ADDR_VAR 0 7
70739: PUSH
70740: LD_INT 0
70742: ST_TO_ADDR
70743: GO 70761
// min_y := y - r ;
70745: LD_ADDR_VAR 0 7
70749: PUSH
70750: LD_VAR 0 2
70754: PUSH
70755: LD_VAR 0 3
70759: MINUS
70760: ST_TO_ADDR
// max_x := x + r ;
70761: LD_ADDR_VAR 0 9
70765: PUSH
70766: LD_VAR 0 1
70770: PUSH
70771: LD_VAR 0 3
70775: PLUS
70776: ST_TO_ADDR
// max_y := y + r ;
70777: LD_ADDR_VAR 0 10
70781: PUSH
70782: LD_VAR 0 2
70786: PUSH
70787: LD_VAR 0 3
70791: PLUS
70792: ST_TO_ADDR
// for _x = min_x to max_x do
70793: LD_ADDR_VAR 0 5
70797: PUSH
70798: DOUBLE
70799: LD_VAR 0 8
70803: DEC
70804: ST_TO_ADDR
70805: LD_VAR 0 9
70809: PUSH
70810: FOR_TO
70811: IFFALSE 70912
// for _y = min_y to max_y do
70813: LD_ADDR_VAR 0 6
70817: PUSH
70818: DOUBLE
70819: LD_VAR 0 7
70823: DEC
70824: ST_TO_ADDR
70825: LD_VAR 0 10
70829: PUSH
70830: FOR_TO
70831: IFFALSE 70908
// begin if not ValidHex ( _x , _y ) then
70833: LD_VAR 0 5
70837: PPUSH
70838: LD_VAR 0 6
70842: PPUSH
70843: CALL_OW 488
70847: NOT
70848: IFFALSE 70852
// continue ;
70850: GO 70830
// if GetResourceTypeXY ( _x , _y ) then
70852: LD_VAR 0 5
70856: PPUSH
70857: LD_VAR 0 6
70861: PPUSH
70862: CALL_OW 283
70866: IFFALSE 70906
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70868: LD_ADDR_VAR 0 4
70872: PUSH
70873: LD_VAR 0 4
70877: PPUSH
70878: LD_VAR 0 4
70882: PUSH
70883: LD_INT 1
70885: PLUS
70886: PPUSH
70887: LD_VAR 0 5
70891: PUSH
70892: LD_VAR 0 6
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PPUSH
70901: CALL_OW 1
70905: ST_TO_ADDR
// end ;
70906: GO 70830
70908: POP
70909: POP
70910: GO 70810
70912: POP
70913: POP
// end ;
70914: LD_VAR 0 4
70918: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70919: LD_INT 0
70921: PPUSH
70922: PPUSH
70923: PPUSH
70924: PPUSH
70925: PPUSH
70926: PPUSH
70927: PPUSH
70928: PPUSH
// if not units then
70929: LD_VAR 0 1
70933: NOT
70934: IFFALSE 70938
// exit ;
70936: GO 71470
// result := UnitFilter ( units , [ f_ok ] ) ;
70938: LD_ADDR_VAR 0 3
70942: PUSH
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_INT 50
70950: PUSH
70951: EMPTY
70952: LIST
70953: PPUSH
70954: CALL_OW 72
70958: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70959: LD_ADDR_VAR 0 8
70963: PUSH
70964: LD_VAR 0 1
70968: PUSH
70969: LD_INT 1
70971: ARRAY
70972: PPUSH
70973: CALL_OW 255
70977: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70978: LD_ADDR_VAR 0 10
70982: PUSH
70983: LD_INT 29
70985: PUSH
70986: LD_INT 91
70988: PUSH
70989: LD_INT 49
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: ST_TO_ADDR
// if not result then
70997: LD_VAR 0 3
71001: NOT
71002: IFFALSE 71006
// exit ;
71004: GO 71470
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71006: LD_ADDR_VAR 0 5
71010: PUSH
71011: LD_INT 81
71013: PUSH
71014: LD_VAR 0 8
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PPUSH
71023: CALL_OW 69
71027: ST_TO_ADDR
// for i in result do
71028: LD_ADDR_VAR 0 4
71032: PUSH
71033: LD_VAR 0 3
71037: PUSH
71038: FOR_IN
71039: IFFALSE 71468
// begin tag := GetTag ( i ) + 1 ;
71041: LD_ADDR_VAR 0 9
71045: PUSH
71046: LD_VAR 0 4
71050: PPUSH
71051: CALL_OW 110
71055: PUSH
71056: LD_INT 1
71058: PLUS
71059: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71060: LD_ADDR_VAR 0 7
71064: PUSH
71065: LD_VAR 0 4
71069: PPUSH
71070: CALL_OW 250
71074: PPUSH
71075: LD_VAR 0 4
71079: PPUSH
71080: CALL_OW 251
71084: PPUSH
71085: LD_INT 4
71087: PPUSH
71088: CALL 70661 0 3
71092: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71093: LD_VAR 0 4
71097: PPUSH
71098: CALL_OW 247
71102: PUSH
71103: LD_INT 2
71105: EQUAL
71106: IFFALSE 71118
71108: PUSH
71109: LD_VAR 0 7
71113: PUSH
71114: LD_INT 2
71116: GREATER
71117: AND
71118: IFFALSE 71138
71120: PUSH
71121: LD_VAR 0 4
71125: PPUSH
71126: CALL_OW 264
71130: PUSH
71131: LD_VAR 0 10
71135: IN
71136: NOT
71137: AND
71138: IFFALSE 71177
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71140: LD_VAR 0 4
71144: PPUSH
71145: LD_VAR 0 7
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PUSH
71154: LD_INT 1
71156: ARRAY
71157: PPUSH
71158: LD_VAR 0 7
71162: PUSH
71163: LD_INT 1
71165: ARRAY
71166: PUSH
71167: LD_INT 2
71169: ARRAY
71170: PPUSH
71171: CALL_OW 116
71175: GO 71466
// if path > tag then
71177: LD_VAR 0 2
71181: PUSH
71182: LD_VAR 0 9
71186: GREATER
71187: IFFALSE 71395
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71189: LD_ADDR_VAR 0 6
71193: PUSH
71194: LD_VAR 0 5
71198: PPUSH
71199: LD_INT 91
71201: PUSH
71202: LD_VAR 0 4
71206: PUSH
71207: LD_INT 8
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: PPUSH
71215: CALL_OW 72
71219: ST_TO_ADDR
// if nearEnemy then
71220: LD_VAR 0 6
71224: IFFALSE 71293
// begin if GetWeapon ( i ) = ru_time_lapser then
71226: LD_VAR 0 4
71230: PPUSH
71231: CALL_OW 264
71235: PUSH
71236: LD_INT 49
71238: EQUAL
71239: IFFALSE 71267
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71241: LD_VAR 0 4
71245: PPUSH
71246: LD_VAR 0 6
71250: PPUSH
71251: LD_VAR 0 4
71255: PPUSH
71256: CALL_OW 74
71260: PPUSH
71261: CALL_OW 112
71265: GO 71291
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71267: LD_VAR 0 4
71271: PPUSH
71272: LD_VAR 0 6
71276: PPUSH
71277: LD_VAR 0 4
71281: PPUSH
71282: CALL_OW 74
71286: PPUSH
71287: CALL 72551 0 2
// end else
71291: GO 71393
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71293: LD_VAR 0 4
71297: PPUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_VAR 0 9
71307: ARRAY
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PPUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_VAR 0 9
71322: ARRAY
71323: PUSH
71324: LD_INT 2
71326: ARRAY
71327: PPUSH
71328: CALL_OW 297
71332: PUSH
71333: LD_INT 6
71335: GREATER
71336: IFFALSE 71379
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71338: LD_VAR 0 4
71342: PPUSH
71343: LD_VAR 0 2
71347: PUSH
71348: LD_VAR 0 9
71352: ARRAY
71353: PUSH
71354: LD_INT 1
71356: ARRAY
71357: PPUSH
71358: LD_VAR 0 2
71362: PUSH
71363: LD_VAR 0 9
71367: ARRAY
71368: PUSH
71369: LD_INT 2
71371: ARRAY
71372: PPUSH
71373: CALL_OW 114
71377: GO 71393
// SetTag ( i , tag ) ;
71379: LD_VAR 0 4
71383: PPUSH
71384: LD_VAR 0 9
71388: PPUSH
71389: CALL_OW 109
// end else
71393: GO 71466
// if enemy then
71395: LD_VAR 0 5
71399: IFFALSE 71466
// begin if GetWeapon ( i ) = ru_time_lapser then
71401: LD_VAR 0 4
71405: PPUSH
71406: CALL_OW 264
71410: PUSH
71411: LD_INT 49
71413: EQUAL
71414: IFFALSE 71442
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71416: LD_VAR 0 4
71420: PPUSH
71421: LD_VAR 0 5
71425: PPUSH
71426: LD_VAR 0 4
71430: PPUSH
71431: CALL_OW 74
71435: PPUSH
71436: CALL_OW 112
71440: GO 71466
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71442: LD_VAR 0 4
71446: PPUSH
71447: LD_VAR 0 5
71451: PPUSH
71452: LD_VAR 0 4
71456: PPUSH
71457: CALL_OW 74
71461: PPUSH
71462: CALL 72551 0 2
// end ; end ;
71466: GO 71038
71468: POP
71469: POP
// end ;
71470: LD_VAR 0 3
71474: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71475: LD_INT 0
71477: PPUSH
71478: PPUSH
71479: PPUSH
// if not unit or IsInUnit ( unit ) then
71480: LD_VAR 0 1
71484: NOT
71485: IFTRUE 71498
71487: PUSH
71488: LD_VAR 0 1
71492: PPUSH
71493: CALL_OW 310
71497: OR
71498: IFFALSE 71502
// exit ;
71500: GO 71593
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71502: LD_ADDR_VAR 0 4
71506: PUSH
71507: LD_VAR 0 1
71511: PPUSH
71512: CALL_OW 250
71516: PPUSH
71517: LD_VAR 0 2
71521: PPUSH
71522: LD_INT 1
71524: PPUSH
71525: CALL_OW 272
71529: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71530: LD_ADDR_VAR 0 5
71534: PUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 251
71544: PPUSH
71545: LD_VAR 0 2
71549: PPUSH
71550: LD_INT 1
71552: PPUSH
71553: CALL_OW 273
71557: ST_TO_ADDR
// if ValidHex ( x , y ) then
71558: LD_VAR 0 4
71562: PPUSH
71563: LD_VAR 0 5
71567: PPUSH
71568: CALL_OW 488
71572: IFFALSE 71593
// ComTurnXY ( unit , x , y ) ;
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_VAR 0 4
71583: PPUSH
71584: LD_VAR 0 5
71588: PPUSH
71589: CALL_OW 118
// end ;
71593: LD_VAR 0 3
71597: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
// result := false ;
71602: LD_ADDR_VAR 0 3
71606: PUSH
71607: LD_INT 0
71609: ST_TO_ADDR
// if not units then
71610: LD_VAR 0 2
71614: NOT
71615: IFFALSE 71619
// exit ;
71617: GO 71664
// for i in units do
71619: LD_ADDR_VAR 0 4
71623: PUSH
71624: LD_VAR 0 2
71628: PUSH
71629: FOR_IN
71630: IFFALSE 71662
// if See ( side , i ) then
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 4
71641: PPUSH
71642: CALL_OW 292
71646: IFFALSE 71660
// begin result := true ;
71648: LD_ADDR_VAR 0 3
71652: PUSH
71653: LD_INT 1
71655: ST_TO_ADDR
// exit ;
71656: POP
71657: POP
71658: GO 71664
// end ;
71660: GO 71629
71662: POP
71663: POP
// end ;
71664: LD_VAR 0 3
71668: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71669: LD_INT 0
71671: PPUSH
71672: PPUSH
71673: PPUSH
71674: PPUSH
// if not unit or not points then
71675: LD_VAR 0 1
71679: NOT
71680: IFTRUE 71689
71682: PUSH
71683: LD_VAR 0 2
71687: NOT
71688: OR
71689: IFFALSE 71693
// exit ;
71691: GO 71783
// dist := 99999 ;
71693: LD_ADDR_VAR 0 5
71697: PUSH
71698: LD_INT 99999
71700: ST_TO_ADDR
// for i in points do
71701: LD_ADDR_VAR 0 4
71705: PUSH
71706: LD_VAR 0 2
71710: PUSH
71711: FOR_IN
71712: IFFALSE 71781
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71714: LD_ADDR_VAR 0 6
71718: PUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: LD_VAR 0 4
71728: PUSH
71729: LD_INT 1
71731: ARRAY
71732: PPUSH
71733: LD_VAR 0 4
71737: PUSH
71738: LD_INT 2
71740: ARRAY
71741: PPUSH
71742: CALL_OW 297
71746: ST_TO_ADDR
// if tmpDist < dist then
71747: LD_VAR 0 6
71751: PUSH
71752: LD_VAR 0 5
71756: LESS
71757: IFFALSE 71779
// begin result := i ;
71759: LD_ADDR_VAR 0 3
71763: PUSH
71764: LD_VAR 0 4
71768: ST_TO_ADDR
// dist := tmpDist ;
71769: LD_ADDR_VAR 0 5
71773: PUSH
71774: LD_VAR 0 6
71778: ST_TO_ADDR
// end ; end ;
71779: GO 71711
71781: POP
71782: POP
// end ;
71783: LD_VAR 0 3
71787: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71788: LD_INT 0
71790: PPUSH
// uc_side := side ;
71791: LD_ADDR_OWVAR 20
71795: PUSH
71796: LD_VAR 0 1
71800: ST_TO_ADDR
// uc_nation := 3 ;
71801: LD_ADDR_OWVAR 21
71805: PUSH
71806: LD_INT 3
71808: ST_TO_ADDR
// vc_chassis := 25 ;
71809: LD_ADDR_OWVAR 37
71813: PUSH
71814: LD_INT 25
71816: ST_TO_ADDR
// vc_engine := engine_siberite ;
71817: LD_ADDR_OWVAR 39
71821: PUSH
71822: LD_INT 3
71824: ST_TO_ADDR
// vc_control := control_computer ;
71825: LD_ADDR_OWVAR 38
71829: PUSH
71830: LD_INT 3
71832: ST_TO_ADDR
// vc_weapon := 59 ;
71833: LD_ADDR_OWVAR 40
71837: PUSH
71838: LD_INT 59
71840: ST_TO_ADDR
// result := CreateVehicle ;
71841: LD_ADDR_VAR 0 5
71845: PUSH
71846: CALL_OW 45
71850: ST_TO_ADDR
// SetDir ( result , d ) ;
71851: LD_VAR 0 5
71855: PPUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71865: LD_VAR 0 5
71869: PPUSH
71870: LD_VAR 0 2
71874: PPUSH
71875: LD_VAR 0 3
71879: PPUSH
71880: LD_INT 0
71882: PPUSH
71883: CALL_OW 48
// end ;
71887: LD_VAR 0 5
71891: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71892: LD_INT 0
71894: PPUSH
71895: PPUSH
71896: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71897: LD_ADDR_VAR 0 2
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71920: LD_VAR 0 1
71924: NOT
71925: IFTRUE 71958
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: CALL_OW 264
71937: PUSH
71938: LD_INT 12
71940: PUSH
71941: LD_INT 51
71943: PUSH
71944: LD_INT 32
71946: PUSH
71947: LD_INT 89
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: IN
71956: NOT
71957: OR
71958: IFFALSE 71962
// exit ;
71960: GO 72060
// for i := 1 to 3 do
71962: LD_ADDR_VAR 0 3
71966: PUSH
71967: DOUBLE
71968: LD_INT 1
71970: DEC
71971: ST_TO_ADDR
71972: LD_INT 3
71974: PUSH
71975: FOR_TO
71976: IFFALSE 72058
// begin tmp := GetCargo ( cargo , i ) ;
71978: LD_ADDR_VAR 0 4
71982: PUSH
71983: LD_VAR 0 1
71987: PPUSH
71988: LD_VAR 0 3
71992: PPUSH
71993: CALL_OW 289
71997: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71998: LD_ADDR_VAR 0 2
72002: PUSH
72003: LD_VAR 0 2
72007: PPUSH
72008: LD_VAR 0 3
72012: PPUSH
72013: LD_VAR 0 4
72017: PPUSH
72018: CALL_OW 1
72022: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72023: LD_ADDR_VAR 0 2
72027: PUSH
72028: LD_VAR 0 2
72032: PPUSH
72033: LD_INT 4
72035: PPUSH
72036: LD_VAR 0 2
72040: PUSH
72041: LD_INT 4
72043: ARRAY
72044: PUSH
72045: LD_VAR 0 4
72049: PLUS
72050: PPUSH
72051: CALL_OW 1
72055: ST_TO_ADDR
// end ;
72056: GO 71975
72058: POP
72059: POP
// end ;
72060: LD_VAR 0 2
72064: RET
// export function Length ( array ) ; begin
72065: LD_INT 0
72067: PPUSH
// result := array + 0 ;
72068: LD_ADDR_VAR 0 2
72072: PUSH
72073: LD_VAR 0 1
72077: PUSH
72078: LD_INT 0
72080: PLUS
72081: ST_TO_ADDR
// end ;
72082: LD_VAR 0 2
72086: RET
// export function PrepareArray ( array ) ; begin
72087: LD_INT 0
72089: PPUSH
// result := array diff 0 ;
72090: LD_ADDR_VAR 0 2
72094: PUSH
72095: LD_VAR 0 1
72099: PUSH
72100: LD_INT 0
72102: DIFF
72103: ST_TO_ADDR
// if not result [ 1 ] then
72104: LD_VAR 0 2
72108: PUSH
72109: LD_INT 1
72111: ARRAY
72112: NOT
72113: IFFALSE 72133
// result := Delete ( result , 1 ) ;
72115: LD_ADDR_VAR 0 2
72119: PUSH
72120: LD_VAR 0 2
72124: PPUSH
72125: LD_INT 1
72127: PPUSH
72128: CALL_OW 3
72132: ST_TO_ADDR
// end ;
72133: LD_VAR 0 2
72137: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72138: LD_INT 0
72140: PPUSH
72141: PPUSH
72142: PPUSH
72143: PPUSH
// sibRocketRange := 25 ;
72144: LD_ADDR_VAR 0 6
72148: PUSH
72149: LD_INT 25
72151: ST_TO_ADDR
// result := false ;
72152: LD_ADDR_VAR 0 4
72156: PUSH
72157: LD_INT 0
72159: ST_TO_ADDR
// for i := 0 to 5 do
72160: LD_ADDR_VAR 0 5
72164: PUSH
72165: DOUBLE
72166: LD_INT 0
72168: DEC
72169: ST_TO_ADDR
72170: LD_INT 5
72172: PUSH
72173: FOR_TO
72174: IFFALSE 72241
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72176: LD_VAR 0 1
72180: PPUSH
72181: LD_VAR 0 5
72185: PPUSH
72186: LD_VAR 0 6
72190: PPUSH
72191: CALL_OW 272
72195: PPUSH
72196: LD_VAR 0 2
72200: PPUSH
72201: LD_VAR 0 5
72205: PPUSH
72206: LD_VAR 0 6
72210: PPUSH
72211: CALL_OW 273
72215: PPUSH
72216: LD_VAR 0 3
72220: PPUSH
72221: CALL_OW 309
72225: IFFALSE 72239
// begin result := true ;
72227: LD_ADDR_VAR 0 4
72231: PUSH
72232: LD_INT 1
72234: ST_TO_ADDR
// exit ;
72235: POP
72236: POP
72237: GO 72243
// end ;
72239: GO 72173
72241: POP
72242: POP
// end ;
72243: LD_VAR 0 4
72247: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72248: LD_INT 0
72250: PPUSH
72251: PPUSH
72252: PPUSH
// if btype = b_depot then
72253: LD_VAR 0 2
72257: PUSH
72258: LD_INT 0
72260: EQUAL
72261: IFFALSE 72273
// begin result := true ;
72263: LD_ADDR_VAR 0 3
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// exit ;
72271: GO 72393
// end ; pom := GetBase ( depot ) ;
72273: LD_ADDR_VAR 0 4
72277: PUSH
72278: LD_VAR 0 1
72282: PPUSH
72283: CALL_OW 274
72287: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72288: LD_ADDR_VAR 0 5
72292: PUSH
72293: LD_VAR 0 2
72297: PPUSH
72298: LD_VAR 0 1
72302: PPUSH
72303: CALL_OW 248
72307: PPUSH
72308: CALL_OW 450
72312: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72313: LD_ADDR_VAR 0 3
72317: PUSH
72318: LD_VAR 0 4
72322: PPUSH
72323: LD_INT 1
72325: PPUSH
72326: CALL_OW 275
72330: PUSH
72331: LD_VAR 0 5
72335: PUSH
72336: LD_INT 1
72338: ARRAY
72339: GREATEREQUAL
72340: IFFALSE 72366
72342: PUSH
72343: LD_VAR 0 4
72347: PPUSH
72348: LD_INT 2
72350: PPUSH
72351: CALL_OW 275
72355: PUSH
72356: LD_VAR 0 5
72360: PUSH
72361: LD_INT 2
72363: ARRAY
72364: GREATEREQUAL
72365: AND
72366: IFFALSE 72392
72368: PUSH
72369: LD_VAR 0 4
72373: PPUSH
72374: LD_INT 3
72376: PPUSH
72377: CALL_OW 275
72381: PUSH
72382: LD_VAR 0 5
72386: PUSH
72387: LD_INT 3
72389: ARRAY
72390: GREATEREQUAL
72391: AND
72392: ST_TO_ADDR
// end ;
72393: LD_VAR 0 3
72397: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72398: LD_INT 0
72400: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72401: LD_VAR 0 1
72405: PPUSH
72406: LD_VAR 0 2
72410: PPUSH
72411: LD_INT 0
72413: PPUSH
72414: LD_INT 0
72416: PPUSH
72417: LD_INT 1
72419: PPUSH
72420: LD_INT 0
72422: PPUSH
72423: CALL_OW 587
// end ;
72427: LD_VAR 0 3
72431: RET
// export function CenterOnNow ( unit ) ; begin
72432: LD_INT 0
72434: PPUSH
// result := IsInUnit ( unit ) ;
72435: LD_ADDR_VAR 0 2
72439: PUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: CALL_OW 310
72449: ST_TO_ADDR
// if not result then
72450: LD_VAR 0 2
72454: NOT
72455: IFFALSE 72467
// result := unit ;
72457: LD_ADDR_VAR 0 2
72461: PUSH
72462: LD_VAR 0 1
72466: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72467: LD_VAR 0 1
72471: PPUSH
72472: CALL_OW 87
// end ;
72476: LD_VAR 0 2
72480: RET
// export function ComMoveHex ( unit , hex ) ; begin
72481: LD_INT 0
72483: PPUSH
// if not hex then
72484: LD_VAR 0 2
72488: NOT
72489: IFFALSE 72493
// exit ;
72491: GO 72546
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72493: LD_VAR 0 2
72497: PUSH
72498: LD_INT 1
72500: ARRAY
72501: PPUSH
72502: LD_VAR 0 2
72506: PUSH
72507: LD_INT 2
72509: ARRAY
72510: PPUSH
72511: CALL_OW 428
72515: IFFALSE 72519
// exit ;
72517: GO 72546
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72519: LD_VAR 0 1
72523: PPUSH
72524: LD_VAR 0 2
72528: PUSH
72529: LD_INT 1
72531: ARRAY
72532: PPUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 2
72540: ARRAY
72541: PPUSH
72542: CALL_OW 111
// end ;
72546: LD_VAR 0 3
72550: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72551: LD_INT 0
72553: PPUSH
72554: PPUSH
72555: PPUSH
// if not unit or not enemy then
72556: LD_VAR 0 1
72560: NOT
72561: IFTRUE 72570
72563: PUSH
72564: LD_VAR 0 2
72568: NOT
72569: OR
72570: IFFALSE 72574
// exit ;
72572: GO 72700
// x := GetX ( enemy ) ;
72574: LD_ADDR_VAR 0 4
72578: PUSH
72579: LD_VAR 0 2
72583: PPUSH
72584: CALL_OW 250
72588: ST_TO_ADDR
// y := GetY ( enemy ) ;
72589: LD_ADDR_VAR 0 5
72593: PUSH
72594: LD_VAR 0 2
72598: PPUSH
72599: CALL_OW 251
72603: ST_TO_ADDR
// if ValidHex ( x , y ) then
72604: LD_VAR 0 4
72608: PPUSH
72609: LD_VAR 0 5
72613: PPUSH
72614: CALL_OW 488
72618: IFFALSE 72700
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72620: LD_VAR 0 2
72624: PPUSH
72625: CALL_OW 247
72629: PUSH
72630: LD_INT 3
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: IN
72640: IFTRUE 72663
72642: PUSH
72643: LD_VAR 0 1
72647: PPUSH
72648: CALL_OW 255
72652: PPUSH
72653: LD_VAR 0 2
72657: PPUSH
72658: CALL_OW 292
72662: OR
72663: IFFALSE 72681
// ComAttackUnit ( unit , enemy ) else
72665: LD_VAR 0 1
72669: PPUSH
72670: LD_VAR 0 2
72674: PPUSH
72675: CALL_OW 115
72679: GO 72700
// ComAgressiveMove ( unit , x , y ) ;
72681: LD_VAR 0 1
72685: PPUSH
72686: LD_VAR 0 4
72690: PPUSH
72691: LD_VAR 0 5
72695: PPUSH
72696: CALL_OW 114
// end ;
72700: LD_VAR 0 3
72704: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72705: LD_INT 0
72707: PPUSH
72708: PPUSH
72709: PPUSH
// list := AreaToList ( area , 0 ) ;
72710: LD_ADDR_VAR 0 5
72714: PUSH
72715: LD_VAR 0 1
72719: PPUSH
72720: LD_INT 0
72722: PPUSH
72723: CALL_OW 517
72727: ST_TO_ADDR
// if not list then
72728: LD_VAR 0 5
72732: NOT
72733: IFFALSE 72737
// exit ;
72735: GO 72867
// if all then
72737: LD_VAR 0 2
72741: IFFALSE 72829
// begin for i := 1 to list [ 1 ] do
72743: LD_ADDR_VAR 0 4
72747: PUSH
72748: DOUBLE
72749: LD_INT 1
72751: DEC
72752: ST_TO_ADDR
72753: LD_VAR 0 5
72757: PUSH
72758: LD_INT 1
72760: ARRAY
72761: PUSH
72762: FOR_TO
72763: IFFALSE 72825
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72765: LD_ADDR_VAR 0 3
72769: PUSH
72770: LD_VAR 0 3
72774: PPUSH
72775: LD_VAR 0 3
72779: PUSH
72780: LD_INT 1
72782: PLUS
72783: PPUSH
72784: LD_VAR 0 5
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PUSH
72793: LD_VAR 0 4
72797: ARRAY
72798: PUSH
72799: LD_VAR 0 5
72803: PUSH
72804: LD_INT 2
72806: ARRAY
72807: PUSH
72808: LD_VAR 0 4
72812: ARRAY
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PPUSH
72818: CALL_OW 1
72822: ST_TO_ADDR
72823: GO 72762
72825: POP
72826: POP
// exit ;
72827: GO 72867
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72829: LD_ADDR_VAR 0 3
72833: PUSH
72834: LD_VAR 0 5
72838: PUSH
72839: LD_INT 1
72841: ARRAY
72842: PUSH
72843: LD_INT 1
72845: ARRAY
72846: PUSH
72847: LD_VAR 0 5
72851: PUSH
72852: LD_INT 2
72854: ARRAY
72855: PUSH
72856: LD_INT 1
72858: ARRAY
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: EMPTY
72865: LIST
72866: ST_TO_ADDR
// end ;
72867: LD_VAR 0 3
72871: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72872: LD_INT 0
72874: PPUSH
72875: PPUSH
// list := AreaToList ( area , 0 ) ;
72876: LD_ADDR_VAR 0 4
72880: PUSH
72881: LD_VAR 0 1
72885: PPUSH
72886: LD_INT 0
72888: PPUSH
72889: CALL_OW 517
72893: ST_TO_ADDR
// if not list then
72894: LD_VAR 0 4
72898: NOT
72899: IFFALSE 72903
// exit ;
72901: GO 72944
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72903: LD_ADDR_VAR 0 3
72907: PUSH
72908: LD_VAR 0 4
72912: PUSH
72913: LD_INT 1
72915: ARRAY
72916: PUSH
72917: LD_INT 1
72919: ARRAY
72920: PUSH
72921: LD_VAR 0 4
72925: PUSH
72926: LD_INT 2
72928: ARRAY
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: PUSH
72934: LD_VAR 0 2
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: LIST
72943: ST_TO_ADDR
// end ;
72944: LD_VAR 0 3
72948: RET
// export function First ( array ) ; begin
72949: LD_INT 0
72951: PPUSH
// if not array then
72952: LD_VAR 0 1
72956: NOT
72957: IFFALSE 72961
// exit ;
72959: GO 72975
// result := array [ 1 ] ;
72961: LD_ADDR_VAR 0 2
72965: PUSH
72966: LD_VAR 0 1
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: ST_TO_ADDR
// end ;
72975: LD_VAR 0 2
72979: RET
// export function Last ( array ) ; begin
72980: LD_INT 0
72982: PPUSH
// if not array then
72983: LD_VAR 0 1
72987: NOT
72988: IFFALSE 72992
// exit ;
72990: GO 73008
// result := array [ array ] ;
72992: LD_ADDR_VAR 0 2
72996: PUSH
72997: LD_VAR 0 1
73001: PUSH
73002: LD_VAR 0 1
73006: ARRAY
73007: ST_TO_ADDR
// end ;
73008: LD_VAR 0 2
73012: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73013: LD_INT 0
73015: PPUSH
73016: PPUSH
// result := [ ] ;
73017: LD_ADDR_VAR 0 5
73021: PUSH
73022: EMPTY
73023: ST_TO_ADDR
// if not array then
73024: LD_VAR 0 1
73028: NOT
73029: IFFALSE 73033
// exit ;
73031: GO 73145
// for i := 1 to array do
73033: LD_ADDR_VAR 0 6
73037: PUSH
73038: DOUBLE
73039: LD_INT 1
73041: DEC
73042: ST_TO_ADDR
73043: LD_VAR 0 1
73047: PUSH
73048: FOR_TO
73049: IFFALSE 73143
// if array [ i ] [ index ] = value then
73051: LD_VAR 0 1
73055: PUSH
73056: LD_VAR 0 6
73060: ARRAY
73061: PUSH
73062: LD_VAR 0 2
73066: ARRAY
73067: PUSH
73068: LD_VAR 0 3
73072: EQUAL
73073: IFFALSE 73141
// begin if indexColumn then
73075: LD_VAR 0 4
73079: IFFALSE 73115
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73081: LD_ADDR_VAR 0 5
73085: PUSH
73086: LD_VAR 0 5
73090: PPUSH
73091: LD_VAR 0 1
73095: PUSH
73096: LD_VAR 0 6
73100: ARRAY
73101: PUSH
73102: LD_VAR 0 4
73106: ARRAY
73107: PPUSH
73108: CALL 68153 0 2
73112: ST_TO_ADDR
73113: GO 73141
// result := Join ( result , array [ i ] ) ;
73115: LD_ADDR_VAR 0 5
73119: PUSH
73120: LD_VAR 0 5
73124: PPUSH
73125: LD_VAR 0 1
73129: PUSH
73130: LD_VAR 0 6
73134: ARRAY
73135: PPUSH
73136: CALL 68153 0 2
73140: ST_TO_ADDR
// end ;
73141: GO 73048
73143: POP
73144: POP
// end ;
73145: LD_VAR 0 5
73149: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73150: LD_INT 0
73152: PPUSH
// if not vehicles or not parkingPoint then
73153: LD_VAR 0 1
73157: NOT
73158: IFTRUE 73167
73160: PUSH
73161: LD_VAR 0 2
73165: NOT
73166: OR
73167: IFFALSE 73171
// exit ;
73169: GO 73269
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73171: LD_ADDR_VAR 0 1
73175: PUSH
73176: LD_VAR 0 1
73180: PPUSH
73181: LD_INT 50
73183: PUSH
73184: EMPTY
73185: LIST
73186: PUSH
73187: LD_INT 3
73189: PUSH
73190: LD_INT 92
73192: PUSH
73193: LD_VAR 0 2
73197: PUSH
73198: LD_INT 1
73200: ARRAY
73201: PUSH
73202: LD_VAR 0 2
73206: PUSH
73207: LD_INT 2
73209: ARRAY
73210: PUSH
73211: LD_INT 8
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PPUSH
73228: CALL_OW 72
73232: ST_TO_ADDR
// if not vehicles then
73233: LD_VAR 0 1
73237: NOT
73238: IFFALSE 73242
// exit ;
73240: GO 73269
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73242: LD_VAR 0 1
73246: PPUSH
73247: LD_VAR 0 2
73251: PUSH
73252: LD_INT 1
73254: ARRAY
73255: PPUSH
73256: LD_VAR 0 2
73260: PUSH
73261: LD_INT 2
73263: ARRAY
73264: PPUSH
73265: CALL_OW 111
// end ;
73269: LD_VAR 0 3
73273: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73274: LD_INT 0
73276: PPUSH
73277: PPUSH
73278: PPUSH
// if not side or not area then
73279: LD_VAR 0 1
73283: NOT
73284: IFTRUE 73293
73286: PUSH
73287: LD_VAR 0 2
73291: NOT
73292: OR
73293: IFFALSE 73297
// exit ;
73295: GO 73416
// tmp := AreaToList ( area , 0 ) ;
73297: LD_ADDR_VAR 0 5
73301: PUSH
73302: LD_VAR 0 2
73306: PPUSH
73307: LD_INT 0
73309: PPUSH
73310: CALL_OW 517
73314: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73315: LD_ADDR_VAR 0 4
73319: PUSH
73320: DOUBLE
73321: LD_INT 1
73323: DEC
73324: ST_TO_ADDR
73325: LD_VAR 0 5
73329: PUSH
73330: LD_INT 1
73332: ARRAY
73333: PUSH
73334: FOR_TO
73335: IFFALSE 73414
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73337: LD_VAR 0 5
73341: PUSH
73342: LD_INT 1
73344: ARRAY
73345: PUSH
73346: LD_VAR 0 4
73350: ARRAY
73351: PPUSH
73352: LD_VAR 0 5
73356: PUSH
73357: LD_INT 2
73359: ARRAY
73360: PUSH
73361: LD_VAR 0 4
73365: ARRAY
73366: PPUSH
73367: CALL_OW 351
73371: IFFALSE 73412
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73373: LD_VAR 0 5
73377: PUSH
73378: LD_INT 1
73380: ARRAY
73381: PUSH
73382: LD_VAR 0 4
73386: ARRAY
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_INT 2
73395: ARRAY
73396: PUSH
73397: LD_VAR 0 4
73401: ARRAY
73402: PPUSH
73403: LD_VAR 0 1
73407: PPUSH
73408: CALL_OW 244
// end ;
73412: GO 73334
73414: POP
73415: POP
// end ;
73416: LD_VAR 0 3
73420: RET
// export function UniqueArray ( array ) ; var i ; begin
73421: LD_INT 0
73423: PPUSH
73424: PPUSH
// result := [ ] ;
73425: LD_ADDR_VAR 0 2
73429: PUSH
73430: EMPTY
73431: ST_TO_ADDR
// if not array then
73432: LD_VAR 0 1
73436: NOT
73437: IFFALSE 73441
// exit ;
73439: GO 73502
// for i := 1 to array do
73441: LD_ADDR_VAR 0 3
73445: PUSH
73446: DOUBLE
73447: LD_INT 1
73449: DEC
73450: ST_TO_ADDR
73451: LD_VAR 0 1
73455: PUSH
73456: FOR_TO
73457: IFFALSE 73500
// if not array [ i ] in result then
73459: LD_VAR 0 1
73463: PUSH
73464: LD_VAR 0 3
73468: ARRAY
73469: PUSH
73470: LD_VAR 0 2
73474: IN
73475: NOT
73476: IFFALSE 73498
// result := Join ( result , i ) ;
73478: LD_ADDR_VAR 0 2
73482: PUSH
73483: LD_VAR 0 2
73487: PPUSH
73488: LD_VAR 0 3
73492: PPUSH
73493: CALL 68153 0 2
73497: ST_TO_ADDR
73498: GO 73456
73500: POP
73501: POP
// end ; end_of_file
73502: LD_VAR 0 2
73506: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73507: LD_VAR 0 1
73511: PUSH
73512: LD_INT 200
73514: DOUBLE
73515: GREATEREQUAL
73516: IFFALSE 73524
73518: LD_INT 299
73520: DOUBLE
73521: LESSEQUAL
73522: IFTRUE 73526
73524: GO 73558
73526: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_VAR 0 2
73536: PPUSH
73537: LD_VAR 0 3
73541: PPUSH
73542: LD_VAR 0 4
73546: PPUSH
73547: LD_VAR 0 5
73551: PPUSH
73552: CALL 24339 0 5
73556: GO 73635
73558: LD_INT 300
73560: DOUBLE
73561: GREATEREQUAL
73562: IFFALSE 73570
73564: LD_INT 399
73566: DOUBLE
73567: LESSEQUAL
73568: IFTRUE 73572
73570: GO 73634
73572: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73573: LD_VAR 0 1
73577: PPUSH
73578: LD_VAR 0 2
73582: PPUSH
73583: LD_VAR 0 3
73587: PPUSH
73588: LD_VAR 0 4
73592: PPUSH
73593: LD_VAR 0 5
73597: PPUSH
73598: LD_VAR 0 6
73602: PPUSH
73603: LD_VAR 0 7
73607: PPUSH
73608: LD_VAR 0 8
73612: PPUSH
73613: LD_VAR 0 9
73617: PPUSH
73618: LD_VAR 0 10
73622: PPUSH
73623: LD_VAR 0 11
73627: PPUSH
73628: CALL 20142 0 11
73632: GO 73635
73634: POP
// end ;
73635: PPOPN 11
73637: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73638: LD_VAR 0 1
73642: PPUSH
73643: LD_VAR 0 2
73647: PPUSH
73648: LD_VAR 0 3
73652: PPUSH
73653: LD_VAR 0 4
73657: PPUSH
73658: LD_VAR 0 5
73662: PPUSH
73663: CALL 23639 0 5
// end ; end_of_file
73667: PPOPN 5
73669: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73670: LD_VAR 0 1
73674: PPUSH
73675: LD_VAR 0 2
73679: PPUSH
73680: LD_VAR 0 3
73684: PPUSH
73685: LD_VAR 0 4
73689: PPUSH
73690: LD_VAR 0 5
73694: PPUSH
73695: LD_VAR 0 6
73699: PPUSH
73700: CALL 7682 0 6
// end ;
73704: PPOPN 6
73706: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73707: LD_INT 0
73709: PPUSH
// begin if not units then
73710: LD_VAR 0 1
73714: NOT
73715: IFFALSE 73719
// exit ;
73717: GO 73753
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_VAR 0 2
73728: PPUSH
73729: LD_VAR 0 3
73733: PPUSH
73734: LD_VAR 0 4
73738: PPUSH
73739: LD_VAR 0 5
73743: PPUSH
73744: LD_VAR 0 6
73748: PPUSH
73749: CALL 29936 0 6
// end ;
73753: PPOPN 7
73755: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73756: CALL 7569 0 0
// end ;
73760: PPOPN 1
73762: END
