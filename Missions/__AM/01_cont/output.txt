// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26911 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26911 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26911 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26911 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64203 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68122 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68122 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68122 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68122 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68122 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68122 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 26911 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68122 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6016
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6009: LD_STRING enableBioCharacter(BIO_BOBBY)
6011: PPUSH
6012: CALL_OW 559
// end ;
6016: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6017: LD_EXP 18
6021: PPUSH
6022: LD_INT 10
6024: PPUSH
6025: CALL_OW 308
6029: PUSH
6030: LD_EXP 18
6034: PPUSH
6035: LD_INT 12
6037: PPUSH
6038: CALL_OW 308
6042: OR
6043: IFFALSE 6099
6045: GO 6047
6047: DISABLE
// begin cyrus_saved := true ;
6048: LD_ADDR_EXP 13
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6056: LD_EXP 18
6060: PPUSH
6061: CALL_OW 256
6065: PPUSH
6066: LD_STRING 01_CyrusLifePoints_1
6068: PPUSH
6069: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6082: LD_STRING Cyrus
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6092: LD_STRING enableBioCharacter(BIO_CYRUS)
6094: PPUSH
6095: CALL_OW 559
// end ;
6099: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6100: LD_EXP 16
6104: PPUSH
6105: LD_INT 10
6107: PPUSH
6108: CALL_OW 308
6112: PUSH
6113: LD_EXP 16
6117: PPUSH
6118: LD_INT 12
6120: PPUSH
6121: CALL_OW 308
6125: OR
6126: IFFALSE 6755
6128: GO 6130
6130: DISABLE
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// begin if macmilan_use_radio then
6139: LD_EXP 6
6143: IFFALSE 6152
// SetAchievement ( ACH_RADIO ) ;
6145: LD_STRING ACH_RADIO
6147: PPUSH
6148: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6152: LD_EXP 13
6156: NOT
6157: PUSH
6158: LD_EXP 7
6162: AND
6163: PUSH
6164: LD_EXP 18
6168: PPUSH
6169: CALL_OW 302
6173: AND
6174: PUSH
6175: LD_EXP 12
6179: NOT
6180: PUSH
6181: LD_EXP 4
6185: AND
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: AND
6197: OR
6198: IFFALSE 6239
// case Query ( Q2 ) of 1 :
6200: LD_STRING Q2
6202: PPUSH
6203: CALL_OW 97
6207: PUSH
6208: LD_INT 1
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// wait_for_them := true ; 2 :
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
6225: GO 6239
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6238
6235: POP
// ; end ;
6236: GO 6239
6238: POP
// if wait_for_them then
6239: LD_VAR 0 3
6243: IFFALSE 6356
// repeat wait ( 0 0$01 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6252: LD_EXP 13
6256: PUSH
6257: LD_EXP 12
6261: AND
6262: PUSH
6263: LD_EXP 13
6267: PUSH
6268: LD_EXP 4
6272: NOT
6273: PUSH
6274: LD_EXP 17
6278: PPUSH
6279: CALL_OW 303
6283: OR
6284: PUSH
6285: LD_EXP 17
6289: PPUSH
6290: CALL_OW 301
6294: OR
6295: AND
6296: OR
6297: PUSH
6298: LD_EXP 12
6302: PUSH
6303: LD_EXP 7
6307: NOT
6308: PUSH
6309: LD_EXP 18
6313: PPUSH
6314: CALL_OW 303
6318: OR
6319: PUSH
6320: LD_EXP 18
6324: PPUSH
6325: CALL_OW 301
6329: OR
6330: AND
6331: OR
6332: PUSH
6333: LD_EXP 17
6337: PPUSH
6338: CALL_OW 301
6342: PUSH
6343: LD_EXP 18
6347: PPUSH
6348: CALL_OW 301
6352: AND
6353: OR
6354: IFFALSE 6245
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6356: LD_EXP 16
6360: PPUSH
6361: CALL_OW 256
6365: PPUSH
6366: LD_STRING 01_JMMLifePoints_1
6368: PPUSH
6369: CALL_OW 39
// RemoveUnit ( JMM ) ;
6373: LD_EXP 16
6377: PPUSH
6378: CALL_OW 64
// to_reward := [ JMM ] ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_EXP 16
6391: PUSH
6392: EMPTY
6393: LIST
6394: ST_TO_ADDR
// if bobby_saved then
6395: LD_EXP 12
6399: IFFALSE 6417
// to_reward := to_reward ^ Bobby ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: LD_VAR 0 2
6410: PUSH
6411: LD_EXP 17
6415: ADD
6416: ST_TO_ADDR
// if cyrus_saved then
6417: LD_EXP 13
6421: IFFALSE 6439
// to_reward := to_reward ^ Cyrus ;
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: LD_VAR 0 2
6432: PUSH
6433: LD_EXP 18
6437: ADD
6438: ST_TO_ADDR
// m1 := true ;
6439: LD_ADDR_VAR 0 4
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// m2 := bobby_saved ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: LD_EXP 12
6456: ST_TO_ADDR
// m3 := cyrus_saved ;
6457: LD_ADDR_VAR 0 6
6461: PUSH
6462: LD_EXP 13
6466: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6467: LD_STRING JMM
6469: PPUSH
6470: LD_INT 1
6472: PPUSH
6473: CALL_OW 101
// if not bobby_in_squad then
6477: LD_EXP 4
6481: NOT
6482: IFFALSE 6495
// AddMedal ( Bobby , - 1 ) ;
6484: LD_STRING Bobby
6486: PPUSH
6487: LD_INT 1
6489: NEG
6490: PPUSH
6491: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6495: LD_EXP 12
6499: NOT
6500: PUSH
6501: LD_EXP 17
6505: PPUSH
6506: CALL_OW 303
6510: PUSH
6511: LD_EXP 17
6515: PPUSH
6516: CALL_OW 301
6520: OR
6521: AND
6522: IFFALSE 6535
// AddMedal ( Bobby , - 2 ) ;
6524: LD_STRING Bobby
6526: PPUSH
6527: LD_INT 2
6529: NEG
6530: PPUSH
6531: CALL_OW 101
// if not cyrus_in_squad then
6535: LD_EXP 7
6539: NOT
6540: IFFALSE 6553
// AddMedal ( Cyrus , - 1 ) ;
6542: LD_STRING Cyrus
6544: PPUSH
6545: LD_INT 1
6547: NEG
6548: PPUSH
6549: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6553: LD_EXP 13
6557: NOT
6558: PUSH
6559: LD_EXP 18
6563: PPUSH
6564: CALL_OW 303
6568: PUSH
6569: LD_EXP 18
6573: PPUSH
6574: CALL_OW 301
6578: OR
6579: AND
6580: IFFALSE 6593
// AddMedal ( Cyrus , - 2 ) ;
6582: LD_STRING Cyrus
6584: PPUSH
6585: LD_INT 2
6587: NEG
6588: PPUSH
6589: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6593: LD_OWVAR 67
6597: PUSH
6598: LD_INT 3
6600: GREATEREQUAL
6601: PUSH
6602: LD_VAR 0 4
6606: AND
6607: PUSH
6608: LD_VAR 0 5
6612: AND
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6631
// SetAchievementEX ( ACH_AMER , 1 ) ;
6621: LD_STRING ACH_AMER
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 564
// GiveMedals ( MAIN ) ;
6631: LD_STRING MAIN
6633: PPUSH
6634: CALL_OW 102
// RewardPeople ( to_reward ) ;
6638: LD_VAR 0 2
6642: PPUSH
6643: CALL_OW 43
// if bobby_saved then
6647: LD_EXP 12
6651: IFFALSE 6671
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6653: LD_EXP 17
6657: PPUSH
6658: LD_EXP 2
6662: PUSH
6663: LD_STRING Bobby
6665: STR
6666: PPUSH
6667: CALL_OW 38
// if cyrus_saved then
6671: LD_EXP 13
6675: IFFALSE 6695
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6677: LD_EXP 18
6681: PPUSH
6682: LD_EXP 2
6686: PUSH
6687: LD_STRING Cyrus
6689: STR
6690: PPUSH
6691: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6695: LD_EXP 16
6699: PPUSH
6700: LD_EXP 2
6704: PUSH
6705: LD_STRING JMM
6707: STR
6708: PPUSH
6709: CALL_OW 38
// if tick <= 3 3$00 then
6713: LD_OWVAR 1
6717: PUSH
6718: LD_INT 6300
6720: LESSEQUAL
6721: IFFALSE 6730
// SetAchievement ( ACH_ASPEED_1 ) ;
6723: LD_STRING ACH_ASPEED_1
6725: PPUSH
6726: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6730: LD_STRING enableBioCharacter(BIO_JMM)
6732: PPUSH
6733: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6737: LD_STRING enableBioCharacter(BIO_JOAN)
6739: PPUSH
6740: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6744: LD_STRING enableBioCharacter(BIO_BARN)
6746: PPUSH
6747: CALL_OW 559
// YouWin ;
6751: CALL_OW 103
// end ; end_of_file
6755: PPOPN 6
6757: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6758: LD_VAR 0 1
6762: PUSH
6763: LD_EXP 16
6767: EQUAL
6768: IFFALSE 6777
// YouLost ( JMM ) ;
6770: LD_STRING JMM
6772: PPUSH
6773: CALL_OW 104
// end ;
6777: PPOPN 1
6779: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: CALL 22742 0 2
// end ;
6794: PPOPN 2
6796: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL 22622 0 1
// if un = JMM then
6806: LD_VAR 0 1
6810: PUSH
6811: LD_EXP 16
6815: EQUAL
6816: IFFALSE 6825
// YouLost ( JMM ) ;
6818: LD_STRING JMM
6820: PPUSH
6821: CALL_OW 104
// end ; end_of_file end_of_file
6825: PPOPN 1
6827: END
// export globalGameSaveCounter ; every 0 0$1 do
6828: GO 6830
6830: DISABLE
// begin enable ;
6831: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6832: LD_STRING updateTimer(
6834: PUSH
6835: LD_OWVAR 1
6839: STR
6840: PUSH
6841: LD_STRING );
6843: STR
6844: PPUSH
6845: CALL_OW 559
// end ;
6849: END
// every 0 0$1 do
6850: GO 6852
6852: DISABLE
// begin globalGameSaveCounter := 0 ;
6853: LD_ADDR_EXP 28
6857: PUSH
6858: LD_INT 0
6860: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6861: LD_STRING setGameSaveCounter(0)
6863: PPUSH
6864: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6868: LD_STRING initStreamRollete();
6870: PPUSH
6871: CALL_OW 559
// InitStreamMode ;
6875: CALL 8201 0 0
// DefineStreamItems ( false ) ;
6879: LD_INT 0
6881: PPUSH
6882: CALL 8665 0 1
// end ;
6886: END
// export function SOS_MapStart ( ) ; begin
6887: LD_INT 0
6889: PPUSH
// if streamModeActive then
6890: LD_EXP 29
6894: IFFALSE 6903
// DefineStreamItems ( true ) ;
6896: LD_INT 1
6898: PPUSH
6899: CALL 8665 0 1
// UpdateLuaVariables ( ) ;
6903: CALL 6920 0 0
// UpdateFactoryWaypoints ( ) ;
6907: CALL 21526 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6911: CALL 21783 0 0
// end ;
6915: LD_VAR 0 1
6919: RET
// function UpdateLuaVariables ( ) ; begin
6920: LD_INT 0
6922: PPUSH
// if globalGameSaveCounter then
6923: LD_EXP 28
6927: IFFALSE 6961
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6929: LD_ADDR_EXP 28
6933: PUSH
6934: LD_EXP 28
6938: PPUSH
6939: CALL 65564 0 1
6943: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6944: LD_STRING setGameSaveCounter(
6946: PUSH
6947: LD_EXP 28
6951: STR
6952: PUSH
6953: LD_STRING )
6955: STR
6956: PPUSH
6957: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6961: LD_STRING setGameDifficulty(
6963: PUSH
6964: LD_OWVAR 67
6968: STR
6969: PUSH
6970: LD_STRING )
6972: STR
6973: PPUSH
6974: CALL_OW 559
// end ;
6978: LD_VAR 0 1
6982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6983: LD_INT 0
6985: PPUSH
// if p2 = stream_mode then
6986: LD_VAR 0 2
6990: PUSH
6991: LD_INT 100
6993: EQUAL
6994: IFFALSE 7997
// begin if not StreamModeActive then
6996: LD_EXP 29
7000: NOT
7001: IFFALSE 7011
// StreamModeActive := true ;
7003: LD_ADDR_EXP 29
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 0 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 0
7018: EQUAL
7019: IFFALSE 7025
// InitStreamMode ;
7021: CALL 8201 0 0
// if p3 = 1 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: IFFALSE 7043
// sRocket := true ;
7035: LD_ADDR_EXP 34
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7061
// sSpeed := true ;
7053: LD_ADDR_EXP 33
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 3 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 3
7068: EQUAL
7069: IFFALSE 7079
// sEngine := true ;
7071: LD_ADDR_EXP 35
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// if p3 = 4 then
7079: LD_VAR 0 3
7083: PUSH
7084: LD_INT 4
7086: EQUAL
7087: IFFALSE 7097
// sSpec := true ;
7089: LD_ADDR_EXP 32
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// if p3 = 5 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 5
7104: EQUAL
7105: IFFALSE 7115
// sLevel := true ;
7107: LD_ADDR_EXP 36
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 6 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 6
7122: EQUAL
7123: IFFALSE 7133
// sArmoury := true ;
7125: LD_ADDR_EXP 37
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 7 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 7
7140: EQUAL
7141: IFFALSE 7151
// sRadar := true ;
7143: LD_ADDR_EXP 38
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 8 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 8
7158: EQUAL
7159: IFFALSE 7169
// sBunker := true ;
7161: LD_ADDR_EXP 39
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 9 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 9
7176: EQUAL
7177: IFFALSE 7187
// sHack := true ;
7179: LD_ADDR_EXP 40
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 10 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 10
7194: EQUAL
7195: IFFALSE 7205
// sFire := true ;
7197: LD_ADDR_EXP 41
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 11 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 11
7212: EQUAL
7213: IFFALSE 7223
// sRefresh := true ;
7215: LD_ADDR_EXP 42
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 12 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 12
7230: EQUAL
7231: IFFALSE 7241
// sExp := true ;
7233: LD_ADDR_EXP 43
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 13 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 13
7248: EQUAL
7249: IFFALSE 7259
// sDepot := true ;
7251: LD_ADDR_EXP 44
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 14 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 14
7266: EQUAL
7267: IFFALSE 7277
// sFlag := true ;
7269: LD_ADDR_EXP 45
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 15 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 15
7284: EQUAL
7285: IFFALSE 7295
// sKamikadze := true ;
7287: LD_ADDR_EXP 53
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 16 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 16
7302: EQUAL
7303: IFFALSE 7313
// sTroll := true ;
7305: LD_ADDR_EXP 54
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 17 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 17
7320: EQUAL
7321: IFFALSE 7331
// sSlow := true ;
7323: LD_ADDR_EXP 55
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 18 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 18
7338: EQUAL
7339: IFFALSE 7349
// sLack := true ;
7341: LD_ADDR_EXP 56
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 19 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 19
7356: EQUAL
7357: IFFALSE 7367
// sTank := true ;
7359: LD_ADDR_EXP 58
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 20 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 20
7374: EQUAL
7375: IFFALSE 7385
// sRemote := true ;
7377: LD_ADDR_EXP 59
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 21 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 21
7392: EQUAL
7393: IFFALSE 7403
// sPowell := true ;
7395: LD_ADDR_EXP 60
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 22 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 22
7410: EQUAL
7411: IFFALSE 7421
// sTeleport := true ;
7413: LD_ADDR_EXP 63
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 23 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 23
7428: EQUAL
7429: IFFALSE 7439
// sOilTower := true ;
7431: LD_ADDR_EXP 65
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 24 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 24
7446: EQUAL
7447: IFFALSE 7457
// sShovel := true ;
7449: LD_ADDR_EXP 66
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 25 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 25
7464: EQUAL
7465: IFFALSE 7475
// sSheik := true ;
7467: LD_ADDR_EXP 67
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 26 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 26
7482: EQUAL
7483: IFFALSE 7493
// sEarthquake := true ;
7485: LD_ADDR_EXP 69
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 27 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 27
7500: EQUAL
7501: IFFALSE 7511
// sAI := true ;
7503: LD_ADDR_EXP 70
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 28 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 28
7518: EQUAL
7519: IFFALSE 7529
// sCargo := true ;
7521: LD_ADDR_EXP 73
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 29 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 29
7536: EQUAL
7537: IFFALSE 7547
// sDLaser := true ;
7539: LD_ADDR_EXP 74
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 30 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 30
7554: EQUAL
7555: IFFALSE 7565
// sExchange := true ;
7557: LD_ADDR_EXP 75
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 31 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 31
7572: EQUAL
7573: IFFALSE 7583
// sFac := true ;
7575: LD_ADDR_EXP 76
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 32 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 32
7590: EQUAL
7591: IFFALSE 7601
// sPower := true ;
7593: LD_ADDR_EXP 77
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 33 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 33
7608: EQUAL
7609: IFFALSE 7619
// sRandom := true ;
7611: LD_ADDR_EXP 78
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 34 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 34
7626: EQUAL
7627: IFFALSE 7637
// sShield := true ;
7629: LD_ADDR_EXP 79
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 35 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 35
7644: EQUAL
7645: IFFALSE 7655
// sTime := true ;
7647: LD_ADDR_EXP 80
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 36 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 36
7662: EQUAL
7663: IFFALSE 7673
// sTools := true ;
7665: LD_ADDR_EXP 81
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 101 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 101
7680: EQUAL
7681: IFFALSE 7691
// sSold := true ;
7683: LD_ADDR_EXP 46
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 102 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 102
7698: EQUAL
7699: IFFALSE 7709
// sDiff := true ;
7701: LD_ADDR_EXP 47
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 103 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 103
7716: EQUAL
7717: IFFALSE 7727
// sFog := true ;
7719: LD_ADDR_EXP 50
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 104 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 104
7734: EQUAL
7735: IFFALSE 7745
// sReset := true ;
7737: LD_ADDR_EXP 51
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 105 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 105
7752: EQUAL
7753: IFFALSE 7763
// sSun := true ;
7755: LD_ADDR_EXP 52
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 106 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 106
7770: EQUAL
7771: IFFALSE 7781
// sTiger := true ;
7773: LD_ADDR_EXP 48
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 107 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 107
7788: EQUAL
7789: IFFALSE 7799
// sBomb := true ;
7791: LD_ADDR_EXP 49
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 108 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 108
7806: EQUAL
7807: IFFALSE 7817
// sWound := true ;
7809: LD_ADDR_EXP 57
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 109 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 109
7824: EQUAL
7825: IFFALSE 7835
// sBetray := true ;
7827: LD_ADDR_EXP 61
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 110 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 110
7842: EQUAL
7843: IFFALSE 7853
// sContamin := true ;
7845: LD_ADDR_EXP 62
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 111 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 111
7860: EQUAL
7861: IFFALSE 7871
// sOil := true ;
7863: LD_ADDR_EXP 64
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 112 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 112
7878: EQUAL
7879: IFFALSE 7889
// sStu := true ;
7881: LD_ADDR_EXP 68
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 113 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 113
7896: EQUAL
7897: IFFALSE 7907
// sBazooka := true ;
7899: LD_ADDR_EXP 71
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 114 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 114
7914: EQUAL
7915: IFFALSE 7925
// sMortar := true ;
7917: LD_ADDR_EXP 72
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 115 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 115
7932: EQUAL
7933: IFFALSE 7943
// sRanger := true ;
7935: LD_ADDR_EXP 82
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 116 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 116
7950: EQUAL
7951: IFFALSE 7961
// sComputer := true ;
7953: LD_ADDR_EXP 83
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 117 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 117
7968: EQUAL
7969: IFFALSE 7979
// s30 := true ;
7971: LD_ADDR_EXP 84
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 118 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 118
7986: EQUAL
7987: IFFALSE 7997
// s60 := true ;
7989: LD_ADDR_EXP 85
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// end ; if p2 = hack_mode then
7997: LD_VAR 0 2
8001: PUSH
8002: LD_INT 101
8004: EQUAL
8005: IFFALSE 8133
// begin case p3 of 1 :
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 1
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8027
8020: POP
// hHackUnlimitedResources ; 2 :
8021: CALL 20272 0 0
8025: GO 8133
8027: LD_INT 2
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8042
8035: POP
// hHackSetLevel10 ; 3 :
8036: CALL 20405 0 0
8040: GO 8133
8042: LD_INT 3
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8057
8050: POP
// hHackSetLevel10YourUnits ; 4 :
8051: CALL 20490 0 0
8055: GO 8133
8057: LD_INT 4
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8072
8065: POP
// hHackInvincible ; 5 :
8066: CALL 20938 0 0
8070: GO 8133
8072: LD_INT 5
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8087
8080: POP
// hHackInvisible ; 6 :
8081: CALL 21049 0 0
8085: GO 8133
8087: LD_INT 6
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8102
8095: POP
// hHackChangeYourSide ; 7 :
8096: CALL 21106 0 0
8100: GO 8133
8102: LD_INT 7
8104: DOUBLE
8105: EQUAL
8106: IFTRUE 8110
8108: GO 8117
8110: POP
// hHackChangeUnitSide ; 8 :
8111: CALL 21148 0 0
8115: GO 8133
8117: LD_INT 8
8119: DOUBLE
8120: EQUAL
8121: IFTRUE 8125
8123: GO 8132
8125: POP
// hHackFog ; end ;
8126: CALL 21249 0 0
8130: GO 8133
8132: POP
// end ; if p2 = game_save_mode then
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 102
8140: EQUAL
8141: IFFALSE 8196
// begin if p3 = 1 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 1
8150: EQUAL
8151: IFFALSE 8163
// globalGameSaveCounter := p4 ;
8153: LD_ADDR_EXP 28
8157: PUSH
8158: LD_VAR 0 4
8162: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: PUSH
8172: LD_EXP 28
8176: AND
8177: IFFALSE 8196
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8179: LD_STRING setGameSaveCounter(
8181: PUSH
8182: LD_EXP 28
8186: STR
8187: PUSH
8188: LD_STRING )
8190: STR
8191: PPUSH
8192: CALL_OW 559
// end ; end ;
8196: LD_VAR 0 7
8200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8201: LD_INT 0
8203: PPUSH
// streamModeActive := false ;
8204: LD_ADDR_EXP 29
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// normalCounter := 36 ;
8212: LD_ADDR_EXP 30
8216: PUSH
8217: LD_INT 36
8219: ST_TO_ADDR
// hardcoreCounter := 18 ;
8220: LD_ADDR_EXP 31
8224: PUSH
8225: LD_INT 18
8227: ST_TO_ADDR
// sRocket := false ;
8228: LD_ADDR_EXP 34
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// sSpeed := false ;
8236: LD_ADDR_EXP 33
8240: PUSH
8241: LD_INT 0
8243: ST_TO_ADDR
// sEngine := false ;
8244: LD_ADDR_EXP 35
8248: PUSH
8249: LD_INT 0
8251: ST_TO_ADDR
// sSpec := false ;
8252: LD_ADDR_EXP 32
8256: PUSH
8257: LD_INT 0
8259: ST_TO_ADDR
// sLevel := false ;
8260: LD_ADDR_EXP 36
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// sArmoury := false ;
8268: LD_ADDR_EXP 37
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// sRadar := false ;
8276: LD_ADDR_EXP 38
8280: PUSH
8281: LD_INT 0
8283: ST_TO_ADDR
// sBunker := false ;
8284: LD_ADDR_EXP 39
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// sHack := false ;
8292: LD_ADDR_EXP 40
8296: PUSH
8297: LD_INT 0
8299: ST_TO_ADDR
// sFire := false ;
8300: LD_ADDR_EXP 41
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// sRefresh := false ;
8308: LD_ADDR_EXP 42
8312: PUSH
8313: LD_INT 0
8315: ST_TO_ADDR
// sExp := false ;
8316: LD_ADDR_EXP 43
8320: PUSH
8321: LD_INT 0
8323: ST_TO_ADDR
// sDepot := false ;
8324: LD_ADDR_EXP 44
8328: PUSH
8329: LD_INT 0
8331: ST_TO_ADDR
// sFlag := false ;
8332: LD_ADDR_EXP 45
8336: PUSH
8337: LD_INT 0
8339: ST_TO_ADDR
// sKamikadze := false ;
8340: LD_ADDR_EXP 53
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// sTroll := false ;
8348: LD_ADDR_EXP 54
8352: PUSH
8353: LD_INT 0
8355: ST_TO_ADDR
// sSlow := false ;
8356: LD_ADDR_EXP 55
8360: PUSH
8361: LD_INT 0
8363: ST_TO_ADDR
// sLack := false ;
8364: LD_ADDR_EXP 56
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// sTank := false ;
8372: LD_ADDR_EXP 58
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// sRemote := false ;
8380: LD_ADDR_EXP 59
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// sPowell := false ;
8388: LD_ADDR_EXP 60
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// sTeleport := false ;
8396: LD_ADDR_EXP 63
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// sOilTower := false ;
8404: LD_ADDR_EXP 65
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// sShovel := false ;
8412: LD_ADDR_EXP 66
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// sSheik := false ;
8420: LD_ADDR_EXP 67
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
// sEarthquake := false ;
8428: LD_ADDR_EXP 69
8432: PUSH
8433: LD_INT 0
8435: ST_TO_ADDR
// sAI := false ;
8436: LD_ADDR_EXP 70
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// sCargo := false ;
8444: LD_ADDR_EXP 73
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// sDLaser := false ;
8452: LD_ADDR_EXP 74
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// sExchange := false ;
8460: LD_ADDR_EXP 75
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sFac := false ;
8468: LD_ADDR_EXP 76
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sPower := false ;
8476: LD_ADDR_EXP 77
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sRandom := false ;
8484: LD_ADDR_EXP 78
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sShield := false ;
8492: LD_ADDR_EXP 79
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sTime := false ;
8500: LD_ADDR_EXP 80
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sTools := false ;
8508: LD_ADDR_EXP 81
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sSold := false ;
8516: LD_ADDR_EXP 46
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sDiff := false ;
8524: LD_ADDR_EXP 47
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sFog := false ;
8532: LD_ADDR_EXP 50
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sReset := false ;
8540: LD_ADDR_EXP 51
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sSun := false ;
8548: LD_ADDR_EXP 52
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sTiger := false ;
8556: LD_ADDR_EXP 48
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sBomb := false ;
8564: LD_ADDR_EXP 49
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sWound := false ;
8572: LD_ADDR_EXP 57
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sBetray := false ;
8580: LD_ADDR_EXP 61
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sContamin := false ;
8588: LD_ADDR_EXP 62
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sOil := false ;
8596: LD_ADDR_EXP 64
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sStu := false ;
8604: LD_ADDR_EXP 68
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sBazooka := false ;
8612: LD_ADDR_EXP 71
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sMortar := false ;
8620: LD_ADDR_EXP 72
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sRanger := false ;
8628: LD_ADDR_EXP 82
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sComputer := false ;
8636: LD_ADDR_EXP 83
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// s30 := false ;
8644: LD_ADDR_EXP 84
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// s60 := false ;
8652: LD_ADDR_EXP 85
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// end ;
8660: LD_VAR 0 1
8664: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8665: LD_INT 0
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// result := [ ] ;
8674: LD_ADDR_VAR 0 2
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// if campaign_id = 1 then
8681: LD_OWVAR 69
8685: PUSH
8686: LD_INT 1
8688: EQUAL
8689: IFFALSE 11855
// begin case mission_number of 1 :
8691: LD_OWVAR 70
8695: PUSH
8696: LD_INT 1
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8780
8704: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8705: LD_ADDR_VAR 0 2
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: LD_INT 11
8718: PUSH
8719: LD_INT 12
8721: PUSH
8722: LD_INT 15
8724: PUSH
8725: LD_INT 16
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 23
8733: PUSH
8734: LD_INT 26
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 106
8756: PUSH
8757: LD_INT 116
8759: PUSH
8760: LD_INT 117
8762: PUSH
8763: LD_INT 118
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: ST_TO_ADDR
8778: GO 11853
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8872
8788: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8789: LD_ADDR_VAR 0 2
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: LD_INT 4
8799: PUSH
8800: LD_INT 11
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: LD_INT 15
8808: PUSH
8809: LD_INT 16
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_INT 23
8817: PUSH
8818: LD_INT 26
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 101
8834: PUSH
8835: LD_INT 102
8837: PUSH
8838: LD_INT 105
8840: PUSH
8841: LD_INT 106
8843: PUSH
8844: LD_INT 108
8846: PUSH
8847: LD_INT 116
8849: PUSH
8850: LD_INT 117
8852: PUSH
8853: LD_INT 118
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: ST_TO_ADDR
8870: GO 11853
8872: LD_INT 3
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 8968
8880: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: LD_INT 4
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: LD_INT 11
8897: PUSH
8898: LD_INT 12
8900: PUSH
8901: LD_INT 15
8903: PUSH
8904: LD_INT 16
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 26
8912: PUSH
8913: LD_INT 36
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 101
8930: PUSH
8931: LD_INT 102
8933: PUSH
8934: LD_INT 105
8936: PUSH
8937: LD_INT 106
8939: PUSH
8940: LD_INT 108
8942: PUSH
8943: LD_INT 116
8945: PUSH
8946: LD_INT 117
8948: PUSH
8949: LD_INT 118
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 11853
8968: LD_INT 4
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9072
8976: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 4
8987: PUSH
8988: LD_INT 5
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 15
9002: PUSH
9003: LD_INT 16
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_INT 23
9011: PUSH
9012: LD_INT 26
9014: PUSH
9015: LD_INT 36
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 101
9034: PUSH
9035: LD_INT 102
9037: PUSH
9038: LD_INT 105
9040: PUSH
9041: LD_INT 106
9043: PUSH
9044: LD_INT 108
9046: PUSH
9047: LD_INT 116
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 118
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
9070: GO 11853
9072: LD_INT 5
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9192
9080: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: LD_INT 6
9097: PUSH
9098: LD_INT 8
9100: PUSH
9101: LD_INT 11
9103: PUSH
9104: LD_INT 12
9106: PUSH
9107: LD_INT 15
9109: PUSH
9110: LD_INT 16
9112: PUSH
9113: LD_INT 22
9115: PUSH
9116: LD_INT 23
9118: PUSH
9119: LD_INT 25
9121: PUSH
9122: LD_INT 26
9124: PUSH
9125: LD_INT 36
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 101
9146: PUSH
9147: LD_INT 102
9149: PUSH
9150: LD_INT 105
9152: PUSH
9153: LD_INT 106
9155: PUSH
9156: LD_INT 108
9158: PUSH
9159: LD_INT 109
9161: PUSH
9162: LD_INT 112
9164: PUSH
9165: LD_INT 116
9167: PUSH
9168: LD_INT 117
9170: PUSH
9171: LD_INT 118
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: ST_TO_ADDR
9190: GO 11853
9192: LD_INT 6
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9332
9200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9201: LD_ADDR_VAR 0 2
9205: PUSH
9206: LD_INT 2
9208: PUSH
9209: LD_INT 4
9211: PUSH
9212: LD_INT 5
9214: PUSH
9215: LD_INT 6
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 20
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 23
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 26
9250: PUSH
9251: LD_INT 30
9253: PUSH
9254: LD_INT 31
9256: PUSH
9257: LD_INT 32
9259: PUSH
9260: LD_INT 36
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 101
9286: PUSH
9287: LD_INT 102
9289: PUSH
9290: LD_INT 105
9292: PUSH
9293: LD_INT 106
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 112
9304: PUSH
9305: LD_INT 116
9307: PUSH
9308: LD_INT 117
9310: PUSH
9311: LD_INT 118
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 11853
9332: LD_INT 7
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9452
9340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 7
9357: PUSH
9358: LD_INT 11
9360: PUSH
9361: LD_INT 12
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 16
9369: PUSH
9370: LD_INT 20
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 22
9378: PUSH
9379: LD_INT 23
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 26
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 103
9412: PUSH
9413: LD_INT 105
9415: PUSH
9416: LD_INT 106
9418: PUSH
9419: LD_INT 108
9421: PUSH
9422: LD_INT 112
9424: PUSH
9425: LD_INT 116
9427: PUSH
9428: LD_INT 117
9430: PUSH
9431: LD_INT 118
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: ST_TO_ADDR
9450: GO 11853
9452: LD_INT 8
9454: DOUBLE
9455: EQUAL
9456: IFTRUE 9460
9458: GO 9600
9460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 6
9477: PUSH
9478: LD_INT 7
9480: PUSH
9481: LD_INT 8
9483: PUSH
9484: LD_INT 11
9486: PUSH
9487: LD_INT 12
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 20
9498: PUSH
9499: LD_INT 21
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_INT 23
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 30
9516: PUSH
9517: LD_INT 31
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 101
9550: PUSH
9551: LD_INT 102
9553: PUSH
9554: LD_INT 103
9556: PUSH
9557: LD_INT 105
9559: PUSH
9560: LD_INT 106
9562: PUSH
9563: LD_INT 108
9565: PUSH
9566: LD_INT 109
9568: PUSH
9569: LD_INT 112
9571: PUSH
9572: LD_INT 116
9574: PUSH
9575: LD_INT 117
9577: PUSH
9578: LD_INT 118
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: ST_TO_ADDR
9598: GO 11853
9600: LD_INT 9
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9756
9608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9609: LD_ADDR_VAR 0 2
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: LD_INT 4
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 6
9625: PUSH
9626: LD_INT 7
9628: PUSH
9629: LD_INT 8
9631: PUSH
9632: LD_INT 11
9634: PUSH
9635: LD_INT 12
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 26
9661: PUSH
9662: LD_INT 28
9664: PUSH
9665: LD_INT 30
9667: PUSH
9668: LD_INT 31
9670: PUSH
9671: LD_INT 32
9673: PUSH
9674: LD_INT 36
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 101
9702: PUSH
9703: LD_INT 102
9705: PUSH
9706: LD_INT 103
9708: PUSH
9709: LD_INT 105
9711: PUSH
9712: LD_INT 106
9714: PUSH
9715: LD_INT 108
9717: PUSH
9718: LD_INT 109
9720: PUSH
9721: LD_INT 112
9723: PUSH
9724: LD_INT 114
9726: PUSH
9727: LD_INT 116
9729: PUSH
9730: LD_INT 117
9732: PUSH
9733: LD_INT 118
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: ST_TO_ADDR
9754: GO 11853
9756: LD_INT 10
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9960
9764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: LD_INT 9
9790: PUSH
9791: LD_INT 10
9793: PUSH
9794: LD_INT 11
9796: PUSH
9797: LD_INT 12
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 15
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: LD_INT 17
9814: PUSH
9815: LD_INT 18
9817: PUSH
9818: LD_INT 19
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: LD_INT 31
9850: PUSH
9851: LD_INT 32
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 101
9890: PUSH
9891: LD_INT 102
9893: PUSH
9894: LD_INT 103
9896: PUSH
9897: LD_INT 104
9899: PUSH
9900: LD_INT 105
9902: PUSH
9903: LD_INT 106
9905: PUSH
9906: LD_INT 107
9908: PUSH
9909: LD_INT 108
9911: PUSH
9912: LD_INT 109
9914: PUSH
9915: LD_INT 110
9917: PUSH
9918: LD_INT 111
9920: PUSH
9921: LD_INT 112
9923: PUSH
9924: LD_INT 114
9926: PUSH
9927: LD_INT 116
9929: PUSH
9930: LD_INT 117
9932: PUSH
9933: LD_INT 118
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: ST_TO_ADDR
9958: GO 11853
9960: LD_INT 11
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10172
9968: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9969: LD_ADDR_VAR 0 2
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 4
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: LD_INT 6
9988: PUSH
9989: LD_INT 7
9991: PUSH
9992: LD_INT 8
9994: PUSH
9995: LD_INT 9
9997: PUSH
9998: LD_INT 10
10000: PUSH
10001: LD_INT 11
10003: PUSH
10004: LD_INT 12
10006: PUSH
10007: LD_INT 13
10009: PUSH
10010: LD_INT 14
10012: PUSH
10013: LD_INT 15
10015: PUSH
10016: LD_INT 16
10018: PUSH
10019: LD_INT 17
10021: PUSH
10022: LD_INT 18
10024: PUSH
10025: LD_INT 19
10027: PUSH
10028: LD_INT 20
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 23
10039: PUSH
10040: LD_INT 24
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 26
10048: PUSH
10049: LD_INT 28
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 31
10057: PUSH
10058: LD_INT 32
10060: PUSH
10061: LD_INT 34
10063: PUSH
10064: LD_INT 36
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 101
10102: PUSH
10103: LD_INT 102
10105: PUSH
10106: LD_INT 103
10108: PUSH
10109: LD_INT 104
10111: PUSH
10112: LD_INT 105
10114: PUSH
10115: LD_INT 106
10117: PUSH
10118: LD_INT 107
10120: PUSH
10121: LD_INT 108
10123: PUSH
10124: LD_INT 109
10126: PUSH
10127: LD_INT 110
10129: PUSH
10130: LD_INT 111
10132: PUSH
10133: LD_INT 112
10135: PUSH
10136: LD_INT 114
10138: PUSH
10139: LD_INT 116
10141: PUSH
10142: LD_INT 117
10144: PUSH
10145: LD_INT 118
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: ST_TO_ADDR
10170: GO 11853
10172: LD_INT 12
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10400
10180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 3
10194: PUSH
10195: LD_INT 4
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: LD_INT 6
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: LD_INT 8
10209: PUSH
10210: LD_INT 9
10212: PUSH
10213: LD_INT 10
10215: PUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: LD_INT 13
10224: PUSH
10225: LD_INT 14
10227: PUSH
10228: LD_INT 15
10230: PUSH
10231: LD_INT 16
10233: PUSH
10234: LD_INT 17
10236: PUSH
10237: LD_INT 18
10239: PUSH
10240: LD_INT 19
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 21
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 23
10254: PUSH
10255: LD_INT 24
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 26
10263: PUSH
10264: LD_INT 27
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 31
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 33
10281: PUSH
10282: LD_INT 34
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 101
10326: PUSH
10327: LD_INT 102
10329: PUSH
10330: LD_INT 103
10332: PUSH
10333: LD_INT 104
10335: PUSH
10336: LD_INT 105
10338: PUSH
10339: LD_INT 106
10341: PUSH
10342: LD_INT 107
10344: PUSH
10345: LD_INT 108
10347: PUSH
10348: LD_INT 109
10350: PUSH
10351: LD_INT 110
10353: PUSH
10354: LD_INT 111
10356: PUSH
10357: LD_INT 112
10359: PUSH
10360: LD_INT 113
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: ST_TO_ADDR
10398: GO 11853
10400: LD_INT 13
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10616
10408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: LD_INT 4
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 9
10434: PUSH
10435: LD_INT 10
10437: PUSH
10438: LD_INT 11
10440: PUSH
10441: LD_INT 12
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: LD_INT 15
10449: PUSH
10450: LD_INT 16
10452: PUSH
10453: LD_INT 17
10455: PUSH
10456: LD_INT 18
10458: PUSH
10459: LD_INT 19
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 23
10473: PUSH
10474: LD_INT 24
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 26
10482: PUSH
10483: LD_INT 27
10485: PUSH
10486: LD_INT 28
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: LD_INT 32
10497: PUSH
10498: LD_INT 33
10500: PUSH
10501: LD_INT 34
10503: PUSH
10504: LD_INT 36
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 102
10545: PUSH
10546: LD_INT 103
10548: PUSH
10549: LD_INT 104
10551: PUSH
10552: LD_INT 105
10554: PUSH
10555: LD_INT 106
10557: PUSH
10558: LD_INT 107
10560: PUSH
10561: LD_INT 108
10563: PUSH
10564: LD_INT 109
10566: PUSH
10567: LD_INT 110
10569: PUSH
10570: LD_INT 111
10572: PUSH
10573: LD_INT 112
10575: PUSH
10576: LD_INT 113
10578: PUSH
10579: LD_INT 114
10581: PUSH
10582: LD_INT 116
10584: PUSH
10585: LD_INT 117
10587: PUSH
10588: LD_INT 118
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 11853
10616: LD_INT 14
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10848
10624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_INT 1
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: LD_INT 3
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 6
10647: PUSH
10648: LD_INT 7
10650: PUSH
10651: LD_INT 8
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: LD_INT 11
10662: PUSH
10663: LD_INT 12
10665: PUSH
10666: LD_INT 13
10668: PUSH
10669: LD_INT 14
10671: PUSH
10672: LD_INT 15
10674: PUSH
10675: LD_INT 16
10677: PUSH
10678: LD_INT 17
10680: PUSH
10681: LD_INT 18
10683: PUSH
10684: LD_INT 19
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 24
10701: PUSH
10702: LD_INT 25
10704: PUSH
10705: LD_INT 26
10707: PUSH
10708: LD_INT 27
10710: PUSH
10711: LD_INT 28
10713: PUSH
10714: LD_INT 29
10716: PUSH
10717: LD_INT 30
10719: PUSH
10720: LD_INT 31
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 33
10728: PUSH
10729: LD_INT 34
10731: PUSH
10732: LD_INT 36
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 101
10774: PUSH
10775: LD_INT 102
10777: PUSH
10778: LD_INT 103
10780: PUSH
10781: LD_INT 104
10783: PUSH
10784: LD_INT 105
10786: PUSH
10787: LD_INT 106
10789: PUSH
10790: LD_INT 107
10792: PUSH
10793: LD_INT 108
10795: PUSH
10796: LD_INT 109
10798: PUSH
10799: LD_INT 110
10801: PUSH
10802: LD_INT 111
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 113
10810: PUSH
10811: LD_INT 114
10813: PUSH
10814: LD_INT 116
10816: PUSH
10817: LD_INT 117
10819: PUSH
10820: LD_INT 118
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 11853
10848: LD_INT 15
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11080
10856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: LD_INT 6
10879: PUSH
10880: LD_INT 7
10882: PUSH
10883: LD_INT 8
10885: PUSH
10886: LD_INT 9
10888: PUSH
10889: LD_INT 10
10891: PUSH
10892: LD_INT 11
10894: PUSH
10895: LD_INT 12
10897: PUSH
10898: LD_INT 13
10900: PUSH
10901: LD_INT 14
10903: PUSH
10904: LD_INT 15
10906: PUSH
10907: LD_INT 16
10909: PUSH
10910: LD_INT 17
10912: PUSH
10913: LD_INT 18
10915: PUSH
10916: LD_INT 19
10918: PUSH
10919: LD_INT 20
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 23
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 25
10936: PUSH
10937: LD_INT 26
10939: PUSH
10940: LD_INT 27
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: LD_INT 29
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 33
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 36
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 101
11006: PUSH
11007: LD_INT 102
11009: PUSH
11010: LD_INT 103
11012: PUSH
11013: LD_INT 104
11015: PUSH
11016: LD_INT 105
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 107
11024: PUSH
11025: LD_INT 108
11027: PUSH
11028: LD_INT 109
11030: PUSH
11031: LD_INT 110
11033: PUSH
11034: LD_INT 111
11036: PUSH
11037: LD_INT 112
11039: PUSH
11040: LD_INT 113
11042: PUSH
11043: LD_INT 114
11045: PUSH
11046: LD_INT 116
11048: PUSH
11049: LD_INT 117
11051: PUSH
11052: LD_INT 118
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: ST_TO_ADDR
11078: GO 11853
11080: LD_INT 16
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11224
11088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 4
11099: PUSH
11100: LD_INT 5
11102: PUSH
11103: LD_INT 7
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 15
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 22
11126: PUSH
11127: LD_INT 23
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 26
11135: PUSH
11136: LD_INT 30
11138: PUSH
11139: LD_INT 31
11141: PUSH
11142: LD_INT 32
11144: PUSH
11145: LD_INT 33
11147: PUSH
11148: LD_INT 34
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 101
11174: PUSH
11175: LD_INT 102
11177: PUSH
11178: LD_INT 103
11180: PUSH
11181: LD_INT 106
11183: PUSH
11184: LD_INT 108
11186: PUSH
11187: LD_INT 112
11189: PUSH
11190: LD_INT 113
11192: PUSH
11193: LD_INT 114
11195: PUSH
11196: LD_INT 116
11198: PUSH
11199: LD_INT 117
11201: PUSH
11202: LD_INT 118
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: ST_TO_ADDR
11222: GO 11853
11224: LD_INT 17
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11456
11232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_INT 5
11252: PUSH
11253: LD_INT 6
11255: PUSH
11256: LD_INT 7
11258: PUSH
11259: LD_INT 8
11261: PUSH
11262: LD_INT 9
11264: PUSH
11265: LD_INT 10
11267: PUSH
11268: LD_INT 11
11270: PUSH
11271: LD_INT 12
11273: PUSH
11274: LD_INT 13
11276: PUSH
11277: LD_INT 14
11279: PUSH
11280: LD_INT 15
11282: PUSH
11283: LD_INT 16
11285: PUSH
11286: LD_INT 17
11288: PUSH
11289: LD_INT 18
11291: PUSH
11292: LD_INT 19
11294: PUSH
11295: LD_INT 20
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 22
11303: PUSH
11304: LD_INT 23
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 26
11315: PUSH
11316: LD_INT 27
11318: PUSH
11319: LD_INT 28
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 31
11330: PUSH
11331: LD_INT 32
11333: PUSH
11334: LD_INT 33
11336: PUSH
11337: LD_INT 34
11339: PUSH
11340: LD_INT 36
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 101
11382: PUSH
11383: LD_INT 102
11385: PUSH
11386: LD_INT 103
11388: PUSH
11389: LD_INT 104
11391: PUSH
11392: LD_INT 105
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 107
11400: PUSH
11401: LD_INT 108
11403: PUSH
11404: LD_INT 109
11406: PUSH
11407: LD_INT 110
11409: PUSH
11410: LD_INT 111
11412: PUSH
11413: LD_INT 112
11415: PUSH
11416: LD_INT 113
11418: PUSH
11419: LD_INT 114
11421: PUSH
11422: LD_INT 116
11424: PUSH
11425: LD_INT 117
11427: PUSH
11428: LD_INT 118
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 11853
11456: LD_INT 18
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11612
11464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 7
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 20
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 23
11505: PUSH
11506: LD_INT 25
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 31
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 34
11526: PUSH
11527: LD_INT 35
11529: PUSH
11530: LD_INT 36
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 103
11564: PUSH
11565: LD_INT 106
11567: PUSH
11568: LD_INT 108
11570: PUSH
11571: LD_INT 112
11573: PUSH
11574: LD_INT 113
11576: PUSH
11577: LD_INT 114
11579: PUSH
11580: LD_INT 115
11582: PUSH
11583: LD_INT 116
11585: PUSH
11586: LD_INT 117
11588: PUSH
11589: LD_INT 118
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: ST_TO_ADDR
11610: GO 11853
11612: LD_INT 19
11614: DOUBLE
11615: EQUAL
11616: IFTRUE 11620
11618: GO 11852
11620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 1
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: LD_INT 4
11637: PUSH
11638: LD_INT 5
11640: PUSH
11641: LD_INT 6
11643: PUSH
11644: LD_INT 7
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: LD_INT 9
11652: PUSH
11653: LD_INT 10
11655: PUSH
11656: LD_INT 11
11658: PUSH
11659: LD_INT 12
11661: PUSH
11662: LD_INT 13
11664: PUSH
11665: LD_INT 14
11667: PUSH
11668: LD_INT 15
11670: PUSH
11671: LD_INT 16
11673: PUSH
11674: LD_INT 17
11676: PUSH
11677: LD_INT 18
11679: PUSH
11680: LD_INT 19
11682: PUSH
11683: LD_INT 20
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_INT 23
11694: PUSH
11695: LD_INT 24
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 26
11703: PUSH
11704: LD_INT 27
11706: PUSH
11707: LD_INT 28
11709: PUSH
11710: LD_INT 29
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 31
11718: PUSH
11719: LD_INT 32
11721: PUSH
11722: LD_INT 33
11724: PUSH
11725: LD_INT 34
11727: PUSH
11728: LD_INT 35
11730: PUSH
11731: LD_INT 36
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 101
11774: PUSH
11775: LD_INT 102
11777: PUSH
11778: LD_INT 103
11780: PUSH
11781: LD_INT 104
11783: PUSH
11784: LD_INT 105
11786: PUSH
11787: LD_INT 106
11789: PUSH
11790: LD_INT 107
11792: PUSH
11793: LD_INT 108
11795: PUSH
11796: LD_INT 109
11798: PUSH
11799: LD_INT 110
11801: PUSH
11802: LD_INT 111
11804: PUSH
11805: LD_INT 112
11807: PUSH
11808: LD_INT 113
11810: PUSH
11811: LD_INT 114
11813: PUSH
11814: LD_INT 115
11816: PUSH
11817: LD_INT 116
11819: PUSH
11820: LD_INT 117
11822: PUSH
11823: LD_INT 118
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: ST_TO_ADDR
11850: GO 11853
11852: POP
// end else
11853: GO 12084
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11855: LD_ADDR_VAR 0 2
11859: PUSH
11860: LD_INT 1
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: LD_INT 6
11877: PUSH
11878: LD_INT 7
11880: PUSH
11881: LD_INT 8
11883: PUSH
11884: LD_INT 9
11886: PUSH
11887: LD_INT 10
11889: PUSH
11890: LD_INT 11
11892: PUSH
11893: LD_INT 12
11895: PUSH
11896: LD_INT 13
11898: PUSH
11899: LD_INT 14
11901: PUSH
11902: LD_INT 15
11904: PUSH
11905: LD_INT 16
11907: PUSH
11908: LD_INT 17
11910: PUSH
11911: LD_INT 18
11913: PUSH
11914: LD_INT 19
11916: PUSH
11917: LD_INT 20
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 22
11925: PUSH
11926: LD_INT 23
11928: PUSH
11929: LD_INT 24
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 26
11937: PUSH
11938: LD_INT 27
11940: PUSH
11941: LD_INT 28
11943: PUSH
11944: LD_INT 29
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 31
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: LD_INT 33
11958: PUSH
11959: LD_INT 34
11961: PUSH
11962: LD_INT 35
11964: PUSH
11965: LD_INT 36
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 104
12017: PUSH
12018: LD_INT 105
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 107
12026: PUSH
12027: LD_INT 108
12029: PUSH
12030: LD_INT 109
12032: PUSH
12033: LD_INT 110
12035: PUSH
12036: LD_INT 111
12038: PUSH
12039: LD_INT 112
12041: PUSH
12042: LD_INT 113
12044: PUSH
12045: LD_INT 114
12047: PUSH
12048: LD_INT 115
12050: PUSH
12051: LD_INT 116
12053: PUSH
12054: LD_INT 117
12056: PUSH
12057: LD_INT 118
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: ST_TO_ADDR
// if result then
12084: LD_VAR 0 2
12088: IFFALSE 12874
// begin normal :=  ;
12090: LD_ADDR_VAR 0 5
12094: PUSH
12095: LD_STRING 
12097: ST_TO_ADDR
// hardcore :=  ;
12098: LD_ADDR_VAR 0 6
12102: PUSH
12103: LD_STRING 
12105: ST_TO_ADDR
// active :=  ;
12106: LD_ADDR_VAR 0 7
12110: PUSH
12111: LD_STRING 
12113: ST_TO_ADDR
// for i = 1 to normalCounter do
12114: LD_ADDR_VAR 0 8
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_EXP 30
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12231
// begin tmp := 0 ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING 0
12139: ST_TO_ADDR
// if result [ 1 ] then
12140: LD_VAR 0 2
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: IFFALSE 12213
// if result [ 1 ] [ 1 ] = i then
12150: LD_VAR 0 2
12154: PUSH
12155: LD_INT 1
12157: ARRAY
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PUSH
12163: LD_VAR 0 8
12167: EQUAL
12168: IFFALSE 12213
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: LD_VAR 0 2
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 3
12199: PPUSH
12200: CALL_OW 1
12204: ST_TO_ADDR
// tmp := 1 ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_STRING 1
12212: ST_TO_ADDR
// end ; normal := normal & tmp ;
12213: LD_ADDR_VAR 0 5
12217: PUSH
12218: LD_VAR 0 5
12222: PUSH
12223: LD_VAR 0 3
12227: STR
12228: ST_TO_ADDR
// end ;
12229: GO 12129
12231: POP
12232: POP
// for i = 1 to hardcoreCounter do
12233: LD_ADDR_VAR 0 8
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_EXP 31
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12354
// begin tmp := 0 ;
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: LD_STRING 0
12258: ST_TO_ADDR
// if result [ 2 ] then
12259: LD_VAR 0 2
12263: PUSH
12264: LD_INT 2
12266: ARRAY
12267: IFFALSE 12336
// if result [ 2 ] [ 1 ] = 100 + i then
12269: LD_VAR 0 2
12273: PUSH
12274: LD_INT 2
12276: ARRAY
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PUSH
12282: LD_INT 100
12284: PUSH
12285: LD_VAR 0 8
12289: PLUS
12290: EQUAL
12291: IFFALSE 12336
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 2
12313: ARRAY
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 3
12322: PPUSH
12323: CALL_OW 1
12327: ST_TO_ADDR
// tmp := 1 ;
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_STRING 1
12335: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12336: LD_ADDR_VAR 0 6
12340: PUSH
12341: LD_VAR 0 6
12345: PUSH
12346: LD_VAR 0 3
12350: STR
12351: ST_TO_ADDR
// end ;
12352: GO 12248
12354: POP
12355: POP
// if isGameLoad then
12356: LD_VAR 0 1
12360: IFFALSE 12835
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: LD_EXP 34
12371: PUSH
12372: LD_EXP 33
12376: PUSH
12377: LD_EXP 35
12381: PUSH
12382: LD_EXP 32
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_EXP 37
12396: PUSH
12397: LD_EXP 38
12401: PUSH
12402: LD_EXP 39
12406: PUSH
12407: LD_EXP 40
12411: PUSH
12412: LD_EXP 41
12416: PUSH
12417: LD_EXP 42
12421: PUSH
12422: LD_EXP 43
12426: PUSH
12427: LD_EXP 44
12431: PUSH
12432: LD_EXP 45
12436: PUSH
12437: LD_EXP 53
12441: PUSH
12442: LD_EXP 54
12446: PUSH
12447: LD_EXP 55
12451: PUSH
12452: LD_EXP 56
12456: PUSH
12457: LD_EXP 58
12461: PUSH
12462: LD_EXP 59
12466: PUSH
12467: LD_EXP 60
12471: PUSH
12472: LD_EXP 63
12476: PUSH
12477: LD_EXP 65
12481: PUSH
12482: LD_EXP 66
12486: PUSH
12487: LD_EXP 67
12491: PUSH
12492: LD_EXP 69
12496: PUSH
12497: LD_EXP 70
12501: PUSH
12502: LD_EXP 73
12506: PUSH
12507: LD_EXP 74
12511: PUSH
12512: LD_EXP 75
12516: PUSH
12517: LD_EXP 76
12521: PUSH
12522: LD_EXP 77
12526: PUSH
12527: LD_EXP 78
12531: PUSH
12532: LD_EXP 79
12536: PUSH
12537: LD_EXP 80
12541: PUSH
12542: LD_EXP 81
12546: PUSH
12547: LD_EXP 46
12551: PUSH
12552: LD_EXP 47
12556: PUSH
12557: LD_EXP 50
12561: PUSH
12562: LD_EXP 51
12566: PUSH
12567: LD_EXP 52
12571: PUSH
12572: LD_EXP 48
12576: PUSH
12577: LD_EXP 49
12581: PUSH
12582: LD_EXP 57
12586: PUSH
12587: LD_EXP 61
12591: PUSH
12592: LD_EXP 62
12596: PUSH
12597: LD_EXP 64
12601: PUSH
12602: LD_EXP 68
12606: PUSH
12607: LD_EXP 71
12611: PUSH
12612: LD_EXP 72
12616: PUSH
12617: LD_EXP 82
12621: PUSH
12622: LD_EXP 83
12626: PUSH
12627: LD_EXP 84
12631: PUSH
12632: LD_EXP 85
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: ST_TO_ADDR
// tmp :=  ;
12693: LD_ADDR_VAR 0 3
12697: PUSH
12698: LD_STRING 
12700: ST_TO_ADDR
// for i = 1 to normalCounter do
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: DOUBLE
12707: LD_INT 1
12709: DEC
12710: ST_TO_ADDR
12711: LD_EXP 30
12715: PUSH
12716: FOR_TO
12717: IFFALSE 12753
// begin if flags [ i ] then
12719: LD_VAR 0 4
12723: PUSH
12724: LD_VAR 0 8
12728: ARRAY
12729: IFFALSE 12751
// tmp := tmp & i & ; ;
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_VAR 0 3
12740: PUSH
12741: LD_VAR 0 8
12745: STR
12746: PUSH
12747: LD_STRING ;
12749: STR
12750: ST_TO_ADDR
// end ;
12751: GO 12716
12753: POP
12754: POP
// for i = 1 to hardcoreCounter do
12755: LD_ADDR_VAR 0 8
12759: PUSH
12760: DOUBLE
12761: LD_INT 1
12763: DEC
12764: ST_TO_ADDR
12765: LD_EXP 31
12769: PUSH
12770: FOR_TO
12771: IFFALSE 12817
// begin if flags [ normalCounter + i ] then
12773: LD_VAR 0 4
12777: PUSH
12778: LD_EXP 30
12782: PUSH
12783: LD_VAR 0 8
12787: PLUS
12788: ARRAY
12789: IFFALSE 12815
// tmp := tmp & ( 100 + i ) & ; ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_VAR 0 3
12800: PUSH
12801: LD_INT 100
12803: PUSH
12804: LD_VAR 0 8
12808: PLUS
12809: STR
12810: PUSH
12811: LD_STRING ;
12813: STR
12814: ST_TO_ADDR
// end ;
12815: GO 12770
12817: POP
12818: POP
// if tmp then
12819: LD_VAR 0 3
12823: IFFALSE 12835
// active := tmp ;
12825: LD_ADDR_VAR 0 7
12829: PUSH
12830: LD_VAR 0 3
12834: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12835: LD_STRING getStreamItemsFromMission("
12837: PUSH
12838: LD_VAR 0 5
12842: STR
12843: PUSH
12844: LD_STRING ","
12846: STR
12847: PUSH
12848: LD_VAR 0 6
12852: STR
12853: PUSH
12854: LD_STRING ","
12856: STR
12857: PUSH
12858: LD_VAR 0 7
12862: STR
12863: PUSH
12864: LD_STRING ")
12866: STR
12867: PPUSH
12868: CALL_OW 559
// end else
12872: GO 12881
// ToLua ( getStreamItemsFromMission("","","") ) ;
12874: LD_STRING getStreamItemsFromMission("","","")
12876: PPUSH
12877: CALL_OW 559
// end ;
12881: LD_VAR 0 2
12885: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12886: LD_EXP 29
12890: PUSH
12891: LD_EXP 34
12895: AND
12896: IFFALSE 13020
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
// begin enable ;
12905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12906: LD_ADDR_VAR 0 2
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_OWVAR 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 34
12928: PUSH
12929: LD_INT 7
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: LD_INT 45
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 34
12948: PUSH
12949: LD_INT 28
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 47
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// if not tmp then
12982: LD_VAR 0 2
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 13020
// for i in tmp do
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_VAR 0 2
13000: PUSH
13001: FOR_IN
13002: IFFALSE 13018
// begin SetLives ( i , 0 ) ;
13004: LD_VAR 0 1
13008: PPUSH
13009: LD_INT 0
13011: PPUSH
13012: CALL_OW 234
// end ;
13016: GO 13001
13018: POP
13019: POP
// end ;
13020: PPOPN 2
13022: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13023: LD_EXP 29
13027: PUSH
13028: LD_EXP 35
13032: AND
13033: IFFALSE 13117
13035: GO 13037
13037: DISABLE
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
// begin enable ;
13042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_OWVAR 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 32
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: ST_TO_ADDR
// if not tmp then
13079: LD_VAR 0 2
13083: NOT
13084: IFFALSE 13088
// exit ;
13086: GO 13117
// for i in tmp do
13088: LD_ADDR_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: PUSH
13098: FOR_IN
13099: IFFALSE 13115
// begin SetLives ( i , 0 ) ;
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_INT 0
13108: PPUSH
13109: CALL_OW 234
// end ;
13113: GO 13098
13115: POP
13116: POP
// end ;
13117: PPOPN 2
13119: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13120: LD_EXP 29
13124: PUSH
13125: LD_EXP 32
13129: AND
13130: IFFALSE 13223
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin enable ;
13138: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_OWVAR 2
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 9
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 8
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PPUSH
13199: CALL_OW 69
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13221
// begin SetClass ( i , 1 ) ;
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 336
// end ;
13219: GO 13204
13221: POP
13222: POP
// end ;
13223: PPOPN 1
13225: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13226: LD_EXP 29
13230: PUSH
13231: LD_EXP 33
13235: AND
13236: PUSH
13237: LD_OWVAR 65
13241: PUSH
13242: LD_INT 7
13244: LESS
13245: AND
13246: IFFALSE 13260
13248: GO 13250
13250: DISABLE
// begin enable ;
13251: ENABLE
// game_speed := 7 ;
13252: LD_ADDR_OWVAR 65
13256: PUSH
13257: LD_INT 7
13259: ST_TO_ADDR
// end ;
13260: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13261: LD_EXP 29
13265: PUSH
13266: LD_EXP 36
13270: AND
13271: IFFALSE 13473
13273: GO 13275
13275: DISABLE
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
13280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_INT 81
13288: PUSH
13289: LD_OWVAR 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 69
13316: ST_TO_ADDR
// if not tmp then
13317: LD_VAR 0 3
13321: NOT
13322: IFFALSE 13326
// exit ;
13324: GO 13473
// if tmp > 5 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 5
13333: GREATER
13334: IFFALSE 13346
// k := 5 else
13336: LD_ADDR_VAR 0 2
13340: PUSH
13341: LD_INT 5
13343: ST_TO_ADDR
13344: GO 13356
// k := tmp ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 3
13355: ST_TO_ADDR
// for i := 1 to k do
13356: LD_ADDR_VAR 0 1
13360: PUSH
13361: DOUBLE
13362: LD_INT 1
13364: DEC
13365: ST_TO_ADDR
13366: LD_VAR 0 2
13370: PUSH
13371: FOR_TO
13372: IFFALSE 13471
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13374: LD_VAR 0 3
13378: PUSH
13379: LD_VAR 0 1
13383: ARRAY
13384: PPUSH
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 4
13392: MOD
13393: PUSH
13394: LD_INT 1
13396: PLUS
13397: PPUSH
13398: CALL_OW 259
13402: PUSH
13403: LD_INT 10
13405: LESS
13406: IFFALSE 13469
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13408: LD_VAR 0 3
13412: PUSH
13413: LD_VAR 0 1
13417: ARRAY
13418: PPUSH
13419: LD_VAR 0 1
13423: PUSH
13424: LD_INT 4
13426: MOD
13427: PUSH
13428: LD_INT 1
13430: PLUS
13431: PPUSH
13432: LD_VAR 0 3
13436: PUSH
13437: LD_VAR 0 1
13441: ARRAY
13442: PPUSH
13443: LD_VAR 0 1
13447: PUSH
13448: LD_INT 4
13450: MOD
13451: PUSH
13452: LD_INT 1
13454: PLUS
13455: PPUSH
13456: CALL_OW 259
13460: PUSH
13461: LD_INT 1
13463: PLUS
13464: PPUSH
13465: CALL_OW 237
13469: GO 13371
13471: POP
13472: POP
// end ;
13473: PPOPN 3
13475: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13476: LD_EXP 29
13480: PUSH
13481: LD_EXP 37
13485: AND
13486: IFFALSE 13506
13488: GO 13490
13490: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13491: LD_INT 4
13493: PPUSH
13494: LD_OWVAR 2
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 324
13506: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13507: LD_EXP 29
13511: PUSH
13512: LD_EXP 66
13516: AND
13517: IFFALSE 13537
13519: GO 13521
13521: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13522: LD_INT 19
13524: PPUSH
13525: LD_OWVAR 2
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 324
13537: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13538: LD_EXP 29
13542: PUSH
13543: LD_EXP 38
13547: AND
13548: IFFALSE 13650
13550: GO 13552
13552: DISABLE
13553: LD_INT 0
13555: PPUSH
13556: PPUSH
// begin enable ;
13557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 34
13580: PUSH
13581: LD_INT 11
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// if not tmp then
13612: LD_VAR 0 2
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 13650
// for i in tmp do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 2
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// begin SetLives ( i , 0 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 0
13641: PPUSH
13642: CALL_OW 234
// end ;
13646: GO 13631
13648: POP
13649: POP
// end ;
13650: PPOPN 2
13652: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13653: LD_EXP 29
13657: PUSH
13658: LD_EXP 39
13662: AND
13663: IFFALSE 13683
13665: GO 13667
13667: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13668: LD_INT 32
13670: PPUSH
13671: LD_OWVAR 2
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 324
13683: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13684: LD_EXP 29
13688: PUSH
13689: LD_EXP 40
13693: AND
13694: IFFALSE 13875
13696: GO 13698
13698: DISABLE
13699: LD_INT 0
13701: PPUSH
13702: PPUSH
13703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: LD_INT 22
13711: PUSH
13712: LD_OWVAR 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 3
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if not tmp then
13740: LD_VAR 0 2
13744: NOT
13745: IFFALSE 13749
// exit ;
13747: GO 13875
// side := 0 ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// for i := 1 to 8 do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_INT 8
13769: PUSH
13770: FOR_TO
13771: IFFALSE 13819
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13773: LD_OWVAR 2
13777: PUSH
13778: LD_VAR 0 1
13782: NONEQUAL
13783: PUSH
13784: LD_OWVAR 2
13788: PPUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 81
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: AND
13803: IFFALSE 13817
// begin side := i ;
13805: LD_ADDR_VAR 0 3
13809: PUSH
13810: LD_VAR 0 1
13814: ST_TO_ADDR
// break ;
13815: GO 13819
// end ;
13817: GO 13770
13819: POP
13820: POP
// if not side then
13821: LD_VAR 0 3
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13875
// for i := 1 to tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 2
13844: PUSH
13845: FOR_TO
13846: IFFALSE 13873
// if Prob ( 60 ) then
13848: LD_INT 60
13850: PPUSH
13851: CALL_OW 13
13855: IFFALSE 13871
// SetSide ( i , side ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: CALL_OW 235
13871: GO 13845
13873: POP
13874: POP
// end ;
13875: PPOPN 3
13877: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13878: LD_EXP 29
13882: PUSH
13883: LD_EXP 42
13887: AND
13888: IFFALSE 14007
13890: GO 13892
13892: DISABLE
13893: LD_INT 0
13895: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13896: LD_ADDR_VAR 0 1
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_OWVAR 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: PUSH
13950: FOR_IN
13951: IFFALSE 14005
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 257
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: IN
13981: IFFALSE 14003
// SetClass ( un , rand ( 1 , 4 ) ) ;
13983: LD_VAR 0 1
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: LD_INT 4
13993: PPUSH
13994: CALL_OW 12
13998: PPUSH
13999: CALL_OW 336
14003: GO 13950
14005: POP
14006: POP
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14010: LD_EXP 29
14014: PUSH
14015: LD_EXP 41
14019: AND
14020: IFFALSE 14099
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_OWVAR 2
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 3
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: ST_TO_ADDR
// if not tmp then
14064: LD_VAR 0 1
14068: NOT
14069: IFFALSE 14073
// exit ;
14071: GO 14099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 1
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 12
14090: ARRAY
14091: PPUSH
14092: LD_INT 100
14094: PPUSH
14095: CALL_OW 234
// end ;
14099: PPOPN 1
14101: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14102: LD_EXP 29
14106: PUSH
14107: LD_EXP 43
14111: AND
14112: IFFALSE 14210
14114: GO 14116
14116: DISABLE
14117: LD_INT 0
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 1
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14210
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14165: LD_VAR 0 1
14169: PUSH
14170: LD_INT 1
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 12
14182: ARRAY
14183: PPUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_INT 4
14189: PPUSH
14190: CALL_OW 12
14194: PPUSH
14195: LD_INT 3000
14197: PPUSH
14198: LD_INT 9000
14200: PPUSH
14201: CALL_OW 12
14205: PPUSH
14206: CALL_OW 492
// end ;
14210: PPOPN 1
14212: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14213: LD_EXP 29
14217: PUSH
14218: LD_EXP 44
14222: AND
14223: IFFALSE 14243
14225: GO 14227
14227: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14228: LD_INT 1
14230: PPUSH
14231: LD_OWVAR 2
14235: PPUSH
14236: LD_INT 0
14238: PPUSH
14239: CALL_OW 324
14243: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14244: LD_EXP 29
14248: PUSH
14249: LD_EXP 45
14253: AND
14254: IFFALSE 14337
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_OWVAR 2
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// if not tmp then
14299: LD_VAR 0 2
14303: NOT
14304: IFFALSE 14308
// exit ;
14306: GO 14337
// for i in tmp do
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: FOR_IN
14319: IFFALSE 14335
// SetBLevel ( i , 10 ) ;
14321: LD_VAR 0 1
14325: PPUSH
14326: LD_INT 10
14328: PPUSH
14329: CALL_OW 241
14333: GO 14318
14335: POP
14336: POP
// end ;
14337: PPOPN 2
14339: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14340: LD_EXP 29
14344: PUSH
14345: LD_EXP 46
14349: AND
14350: IFFALSE 14461
14352: GO 14354
14354: DISABLE
14355: LD_INT 0
14357: PPUSH
14358: PPUSH
14359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_OWVAR 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 25
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: ST_TO_ADDR
// if not tmp then
14396: LD_VAR 0 3
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14461
// un := tmp [ rand ( 1 , tmp ) ] ;
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_VAR 0 3
14414: PUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_VAR 0 3
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: ST_TO_ADDR
// if Crawls ( un ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 318
14438: IFFALSE 14449
// ComWalk ( un ) ;
14440: LD_VAR 0 2
14444: PPUSH
14445: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14449: LD_VAR 0 2
14453: PPUSH
14454: LD_INT 5
14456: PPUSH
14457: CALL_OW 336
// end ;
14461: PPOPN 3
14463: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14464: LD_EXP 29
14468: PUSH
14469: LD_EXP 47
14473: AND
14474: PUSH
14475: LD_OWVAR 67
14479: PUSH
14480: LD_INT 4
14482: LESS
14483: AND
14484: IFFALSE 14503
14486: GO 14488
14488: DISABLE
// begin Difficulty := Difficulty + 1 ;
14489: LD_ADDR_OWVAR 67
14493: PUSH
14494: LD_OWVAR 67
14498: PUSH
14499: LD_INT 1
14501: PLUS
14502: ST_TO_ADDR
// end ;
14503: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14504: LD_EXP 29
14508: PUSH
14509: LD_EXP 48
14513: AND
14514: IFFALSE 14617
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
// begin for i := 1 to 5 do
14522: LD_ADDR_VAR 0 1
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_INT 5
14534: PUSH
14535: FOR_TO
14536: IFFALSE 14615
// begin uc_nation := nation_nature ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// uc_side := 0 ;
14546: LD_ADDR_OWVAR 20
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14554: LD_ADDR_OWVAR 29
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
// hc_agressivity := 20 ;
14569: LD_ADDR_OWVAR 35
14573: PUSH
14574: LD_INT 20
14576: ST_TO_ADDR
// hc_class := class_tiger ;
14577: LD_ADDR_OWVAR 28
14581: PUSH
14582: LD_INT 14
14584: ST_TO_ADDR
// hc_gallery :=  ;
14585: LD_ADDR_OWVAR 33
14589: PUSH
14590: LD_STRING 
14592: ST_TO_ADDR
// hc_name :=  ;
14593: LD_ADDR_OWVAR 26
14597: PUSH
14598: LD_STRING 
14600: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14601: CALL_OW 44
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL_OW 51
// end ;
14613: GO 14535
14615: POP
14616: POP
// end ;
14617: PPOPN 1
14619: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14620: LD_EXP 29
14624: PUSH
14625: LD_EXP 49
14629: AND
14630: IFFALSE 14639
14632: GO 14634
14634: DISABLE
// StreamSibBomb ;
14635: CALL 14640 0 0
14639: END
// export function StreamSibBomb ; var i , x , y ; begin
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// result := false ;
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// for i := 1 to 16 do
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: DOUBLE
14660: LD_INT 1
14662: DEC
14663: ST_TO_ADDR
14664: LD_INT 16
14666: PUSH
14667: FOR_TO
14668: IFFALSE 14867
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 10
14677: PUSH
14678: LD_INT 20
14680: PUSH
14681: LD_INT 30
14683: PUSH
14684: LD_INT 40
14686: PUSH
14687: LD_INT 50
14689: PUSH
14690: LD_INT 60
14692: PUSH
14693: LD_INT 70
14695: PUSH
14696: LD_INT 80
14698: PUSH
14699: LD_INT 90
14701: PUSH
14702: LD_INT 100
14704: PUSH
14705: LD_INT 110
14707: PUSH
14708: LD_INT 120
14710: PUSH
14711: LD_INT 130
14713: PUSH
14714: LD_INT 140
14716: PUSH
14717: LD_INT 150
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 1
14739: PPUSH
14740: LD_INT 15
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_INT 10
14756: PUSH
14757: LD_INT 20
14759: PUSH
14760: LD_INT 30
14762: PUSH
14763: LD_INT 40
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: LD_INT 60
14771: PUSH
14772: LD_INT 70
14774: PUSH
14775: LD_INT 80
14777: PUSH
14778: LD_INT 90
14780: PUSH
14781: LD_INT 100
14783: PUSH
14784: LD_INT 110
14786: PUSH
14787: LD_INT 120
14789: PUSH
14790: LD_INT 130
14792: PUSH
14793: LD_INT 140
14795: PUSH
14796: LD_INT 150
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 15
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: ST_TO_ADDR
// if ValidHex ( x , y ) then
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_VAR 0 4
14837: PPUSH
14838: CALL_OW 488
14842: IFFALSE 14865
// begin result := [ x , y ] ;
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_VAR 0 3
14853: PUSH
14854: LD_VAR 0 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
// break ;
14863: GO 14867
// end ; end ;
14865: GO 14667
14867: POP
14868: POP
// if result then
14869: LD_VAR 0 1
14873: IFFALSE 14933
// begin ToLua ( playSibBomb() ) ;
14875: LD_STRING playSibBomb()
14877: PPUSH
14878: CALL_OW 559
// wait ( 0 0$14 ) ;
14882: LD_INT 490
14884: PPUSH
14885: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 2
14905: ARRAY
14906: PPUSH
14907: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: PPUSH
14929: CALL_OW 429
// end ; end ;
14933: LD_VAR 0 1
14937: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14938: LD_EXP 29
14942: PUSH
14943: LD_EXP 51
14947: AND
14948: IFFALSE 14960
14950: GO 14952
14952: DISABLE
// YouLost (  ) ;
14953: LD_STRING 
14955: PPUSH
14956: CALL_OW 104
14960: END
// every 0 0$1 trigger StreamModeActive and sFog do
14961: LD_EXP 29
14965: PUSH
14966: LD_EXP 50
14970: AND
14971: IFFALSE 14985
14973: GO 14975
14975: DISABLE
// FogOff ( your_side ) ;
14976: LD_OWVAR 2
14980: PPUSH
14981: CALL_OW 344
14985: END
// every 0 0$1 trigger StreamModeActive and sSun do
14986: LD_EXP 29
14990: PUSH
14991: LD_EXP 52
14995: AND
14996: IFFALSE 15024
14998: GO 15000
15000: DISABLE
// begin solar_recharge_percent := 0 ;
15001: LD_ADDR_OWVAR 79
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15009: LD_INT 10500
15011: PPUSH
15012: CALL_OW 67
// solar_recharge_percent := 100 ;
15016: LD_ADDR_OWVAR 79
15020: PUSH
15021: LD_INT 100
15023: ST_TO_ADDR
// end ;
15024: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15025: LD_EXP 29
15029: PUSH
15030: LD_EXP 53
15034: AND
15035: IFFALSE 15274
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
15044: PPUSH
// begin tmp := [ ] ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: EMPTY
15051: ST_TO_ADDR
// for i := 1 to 6 do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: DOUBLE
15058: LD_INT 1
15060: DEC
15061: ST_TO_ADDR
15062: LD_INT 6
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15171
// begin uc_nation := nation_nature ;
15068: LD_ADDR_OWVAR 21
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// uc_side := 0 ;
15076: LD_ADDR_OWVAR 20
15080: PUSH
15081: LD_INT 0
15083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15084: LD_ADDR_OWVAR 29
15088: PUSH
15089: LD_INT 12
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
// hc_agressivity := 20 ;
15099: LD_ADDR_OWVAR 35
15103: PUSH
15104: LD_INT 20
15106: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15107: LD_ADDR_OWVAR 28
15111: PUSH
15112: LD_INT 17
15114: ST_TO_ADDR
// hc_gallery :=  ;
15115: LD_ADDR_OWVAR 33
15119: PUSH
15120: LD_STRING 
15122: ST_TO_ADDR
// hc_name :=  ;
15123: LD_ADDR_OWVAR 26
15127: PUSH
15128: LD_STRING 
15130: ST_TO_ADDR
// un := CreateHuman ;
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: CALL_OW 44
15140: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 51
// tmp := tmp ^ un ;
15153: LD_ADDR_VAR 0 3
15157: PUSH
15158: LD_VAR 0 3
15162: PUSH
15163: LD_VAR 0 2
15167: ADD
15168: ST_TO_ADDR
// end ;
15169: GO 15065
15171: POP
15172: POP
// repeat wait ( 0 0$1 ) ;
15173: LD_INT 35
15175: PPUSH
15176: CALL_OW 67
// for un in tmp do
15180: LD_ADDR_VAR 0 2
15184: PUSH
15185: LD_VAR 0 3
15189: PUSH
15190: FOR_IN
15191: IFFALSE 15265
// begin if IsDead ( un ) then
15193: LD_VAR 0 2
15197: PPUSH
15198: CALL_OW 301
15202: IFFALSE 15222
// begin tmp := tmp diff un ;
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_VAR 0 2
15218: DIFF
15219: ST_TO_ADDR
// continue ;
15220: GO 15190
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PPUSH
15244: CALL_OW 69
15248: PPUSH
15249: LD_VAR 0 2
15253: PPUSH
15254: CALL_OW 74
15258: PPUSH
15259: CALL_OW 115
// end ;
15263: GO 15190
15265: POP
15266: POP
// until not tmp ;
15267: LD_VAR 0 3
15271: NOT
15272: IFFALSE 15173
// end ;
15274: PPOPN 3
15276: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15277: LD_EXP 29
15281: PUSH
15282: LD_EXP 54
15286: AND
15287: IFFALSE 15341
15289: GO 15291
15291: DISABLE
// begin ToLua ( displayTroll(); ) ;
15292: LD_STRING displayTroll();
15294: PPUSH
15295: CALL_OW 559
// wait ( 3 3$00 ) ;
15299: LD_INT 6300
15301: PPUSH
15302: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15306: LD_STRING hideTroll();
15308: PPUSH
15309: CALL_OW 559
// wait ( 1 1$00 ) ;
15313: LD_INT 2100
15315: PPUSH
15316: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15320: LD_STRING displayTroll();
15322: PPUSH
15323: CALL_OW 559
// wait ( 1 1$00 ) ;
15327: LD_INT 2100
15329: PPUSH
15330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15334: LD_STRING hideTroll();
15336: PPUSH
15337: CALL_OW 559
// end ;
15341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15342: LD_EXP 29
15346: PUSH
15347: LD_EXP 55
15351: AND
15352: IFFALSE 15415
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
// begin p := 0 ;
15360: LD_ADDR_VAR 0 1
15364: PUSH
15365: LD_INT 0
15367: ST_TO_ADDR
// repeat game_speed := 1 ;
15368: LD_ADDR_OWVAR 65
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15376: LD_INT 35
15378: PPUSH
15379: CALL_OW 67
// p := p + 1 ;
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: PLUS
15396: ST_TO_ADDR
// until p >= 60 ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 60
15404: GREATEREQUAL
15405: IFFALSE 15368
// game_speed := 4 ;
15407: LD_ADDR_OWVAR 65
15411: PUSH
15412: LD_INT 4
15414: ST_TO_ADDR
// end ;
15415: PPOPN 1
15417: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15418: LD_EXP 29
15422: PUSH
15423: LD_EXP 56
15427: AND
15428: IFFALSE 15574
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
15436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_INT 22
15444: PUSH
15445: LD_OWVAR 2
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PPUSH
15486: CALL_OW 69
15490: ST_TO_ADDR
// if not depot then
15491: LD_VAR 0 1
15495: NOT
15496: IFFALSE 15500
// exit ;
15498: GO 15574
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: PPUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: CALL_OW 12
15522: ARRAY
15523: PPUSH
15524: CALL_OW 274
15528: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15529: LD_VAR 0 2
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_INT 0
15539: PPUSH
15540: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: LD_INT 2
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15559: LD_VAR 0 2
15563: PPUSH
15564: LD_INT 3
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 277
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15577: LD_EXP 29
15581: PUSH
15582: LD_EXP 57
15586: AND
15587: IFFALSE 15684
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_OWVAR 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 21
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: LD_INT 23
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 1
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15658: LD_VAR 0 1
15662: PUSH
15663: LD_INT 1
15665: PPUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 12
15675: ARRAY
15676: PPUSH
15677: LD_INT 200
15679: PPUSH
15680: CALL_OW 234
// end ;
15684: PPOPN 1
15686: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15687: LD_EXP 29
15691: PUSH
15692: LD_EXP 58
15696: AND
15697: IFFALSE 15776
15699: GO 15701
15701: DISABLE
15702: LD_INT 0
15704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15705: LD_ADDR_VAR 0 1
15709: PUSH
15710: LD_INT 22
15712: PUSH
15713: LD_OWVAR 2
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: ST_TO_ADDR
// if not tmp then
15741: LD_VAR 0 1
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PPUSH
15769: LD_INT 60
15771: PPUSH
15772: CALL_OW 234
// end ;
15776: PPOPN 1
15778: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15779: LD_EXP 29
15783: PUSH
15784: LD_EXP 59
15788: AND
15789: IFFALSE 15888
15791: GO 15793
15793: DISABLE
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
// begin enable ;
15798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 61
15818: PUSH
15819: EMPTY
15820: LIST
15821: PUSH
15822: LD_INT 33
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not tmp then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15888
// for i in tmp do
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: LD_VAR 0 1
15860: PUSH
15861: FOR_IN
15862: IFFALSE 15886
// if IsControledBy ( i ) then
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 312
15873: IFFALSE 15884
// ComUnlink ( i ) ;
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL_OW 136
15884: GO 15861
15886: POP
15887: POP
// end ;
15888: PPOPN 2
15890: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15891: LD_EXP 29
15895: PUSH
15896: LD_EXP 60
15900: AND
15901: IFFALSE 16041
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin ToLua ( displayPowell(); ) ;
15910: LD_STRING displayPowell();
15912: PPUSH
15913: CALL_OW 559
// uc_side := 0 ;
15917: LD_ADDR_OWVAR 20
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// uc_nation := 2 ;
15925: LD_ADDR_OWVAR 21
15929: PUSH
15930: LD_INT 2
15932: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15933: LD_ADDR_OWVAR 37
15937: PUSH
15938: LD_INT 14
15940: ST_TO_ADDR
// vc_engine := engine_siberite ;
15941: LD_ADDR_OWVAR 39
15945: PUSH
15946: LD_INT 3
15948: ST_TO_ADDR
// vc_control := control_apeman ;
15949: LD_ADDR_OWVAR 38
15953: PUSH
15954: LD_INT 5
15956: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15957: LD_ADDR_OWVAR 40
15961: PUSH
15962: LD_INT 29
15964: ST_TO_ADDR
// un := CreateVehicle ;
15965: LD_ADDR_VAR 0 2
15969: PUSH
15970: CALL_OW 45
15974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15994: LD_VAR 0 2
15998: PPUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PPUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: CALL_OW 74
16025: PPUSH
16026: CALL_OW 115
// until IsDead ( un ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: CALL_OW 301
16039: IFFALSE 15987
// end ;
16041: PPOPN 2
16043: END
// every 0 0$1 trigger StreamModeActive and sStu do
16044: LD_EXP 29
16048: PUSH
16049: LD_EXP 68
16053: AND
16054: IFFALSE 16070
16056: GO 16058
16058: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16059: LD_STRING displayStucuk();
16061: PPUSH
16062: CALL_OW 559
// ResetFog ;
16066: CALL_OW 335
// end ;
16070: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16071: LD_EXP 29
16075: PUSH
16076: LD_EXP 61
16080: AND
16081: IFFALSE 16222
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_OWVAR 2
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16222
// un := tmp [ rand ( 1 , tmp ) ] ;
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: CALL_OW 12
16157: ARRAY
16158: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 0
16166: PPUSH
16167: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_OWVAR 3
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 74
16196: PPUSH
16197: CALL_OW 115
// wait ( 0 0$20 ) ;
16201: LD_INT 700
16203: PPUSH
16204: CALL_OW 67
// SetSide ( un , your_side ) ;
16208: LD_VAR 0 1
16212: PPUSH
16213: LD_OWVAR 2
16217: PPUSH
16218: CALL_OW 235
// end ;
16222: PPOPN 2
16224: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16225: LD_EXP 29
16229: PUSH
16230: LD_EXP 62
16234: AND
16235: IFFALSE 16341
16237: GO 16239
16239: DISABLE
16240: LD_INT 0
16242: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_OWVAR 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: ST_TO_ADDR
// if not depot then
16297: LD_VAR 0 1
16301: NOT
16302: IFFALSE 16306
// exit ;
16304: GO 16341
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16306: LD_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PPUSH
16315: CALL_OW 250
16319: PPUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: CALL_OW 251
16333: PPUSH
16334: LD_INT 70
16336: PPUSH
16337: CALL_OW 495
// end ;
16341: PPOPN 1
16343: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16344: LD_EXP 29
16348: PUSH
16349: LD_EXP 63
16353: AND
16354: IFFALSE 16565
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16366: LD_ADDR_VAR 0 5
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_OWVAR 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: ST_TO_ADDR
// if not tmp then
16402: LD_VAR 0 5
16406: NOT
16407: IFFALSE 16411
// exit ;
16409: GO 16565
// for i in tmp do
16411: LD_ADDR_VAR 0 1
16415: PUSH
16416: LD_VAR 0 5
16420: PUSH
16421: FOR_IN
16422: IFFALSE 16563
// begin d := rand ( 0 , 5 ) ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 0
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: CALL_OW 12
16439: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 250
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: LD_INT 12
16465: PPUSH
16466: CALL_OW 12
16470: PPUSH
16471: CALL_OW 272
16475: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 251
16490: PPUSH
16491: LD_VAR 0 4
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 12
16501: PPUSH
16502: CALL_OW 12
16506: PPUSH
16507: CALL_OW 273
16511: ST_TO_ADDR
// if ValidHex ( x , y ) then
16512: LD_VAR 0 2
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: CALL_OW 488
16526: IFFALSE 16561
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 2
16537: PPUSH
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: LD_INT 6
16548: PPUSH
16549: CALL_OW 12
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 483
// end ;
16561: GO 16421
16563: POP
16564: POP
// end ;
16565: PPOPN 5
16567: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16568: LD_EXP 29
16572: PUSH
16573: LD_EXP 64
16577: AND
16578: IFFALSE 16672
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_OWVAR 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 32
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: ST_TO_ADDR
// if not tmp then
16634: LD_VAR 0 2
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 16672
// for i in tmp do
16643: LD_ADDR_VAR 0 1
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16670
// SetFuel ( i , 0 ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_INT 0
16663: PPUSH
16664: CALL_OW 240
16668: GO 16653
16670: POP
16671: POP
// end ;
16672: PPOPN 2
16674: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16675: LD_EXP 29
16679: PUSH
16680: LD_EXP 65
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_OWVAR 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 29
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PPUSH
16724: CALL_OW 69
16728: ST_TO_ADDR
// if not tmp then
16729: LD_VAR 0 1
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 16751
// DestroyUnit ( tmp [ 1 ] ) ;
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: CALL_OW 65
// end ;
16751: PPOPN 1
16753: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16754: LD_EXP 29
16758: PUSH
16759: LD_EXP 67
16763: AND
16764: IFFALSE 16893
16766: GO 16768
16768: DISABLE
16769: LD_INT 0
16771: PPUSH
// begin uc_side := 0 ;
16772: LD_ADDR_OWVAR 20
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// uc_nation := nation_arabian ;
16780: LD_ADDR_OWVAR 21
16784: PUSH
16785: LD_INT 2
16787: ST_TO_ADDR
// hc_gallery :=  ;
16788: LD_ADDR_OWVAR 33
16792: PUSH
16793: LD_STRING 
16795: ST_TO_ADDR
// hc_name :=  ;
16796: LD_ADDR_OWVAR 26
16800: PUSH
16801: LD_STRING 
16803: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16804: LD_INT 1
16806: PPUSH
16807: LD_INT 11
16809: PPUSH
16810: LD_INT 10
16812: PPUSH
16813: CALL_OW 380
// un := CreateHuman ;
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: CALL_OW 44
16826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 1
16834: PPUSH
16835: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16839: LD_INT 35
16841: PPUSH
16842: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 22
16853: PUSH
16854: LD_OWVAR 2
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 74
16877: PPUSH
16878: CALL_OW 115
// until IsDead ( un ) ;
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 301
16891: IFFALSE 16839
// end ;
16893: PPOPN 1
16895: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16896: LD_EXP 29
16900: PUSH
16901: LD_EXP 69
16905: AND
16906: IFFALSE 16918
16908: GO 16910
16910: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16911: LD_STRING earthquake(getX(game), 0, 32)
16913: PPUSH
16914: CALL_OW 559
16918: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16919: LD_EXP 29
16923: PUSH
16924: LD_EXP 70
16928: AND
16929: IFFALSE 17020
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
// begin enable ;
16937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16938: LD_ADDR_VAR 0 1
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 33
16967: PUSH
16968: LD_INT 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 69
16984: ST_TO_ADDR
// if not tmp then
16985: LD_VAR 0 1
16989: NOT
16990: IFFALSE 16994
// exit ;
16992: GO 17020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 1
17001: PPUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 12
17011: ARRAY
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 234
// end ;
17020: PPOPN 1
17022: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17023: LD_EXP 29
17027: PUSH
17028: LD_EXP 71
17032: AND
17033: IFFALSE 17174
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 69
17078: ST_TO_ADDR
// if not tmp then
17079: LD_VAR 0 3
17083: NOT
17084: IFFALSE 17088
// exit ;
17086: GO 17174
// un := tmp [ rand ( 1 , tmp ) ] ;
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: LD_VAR 0 3
17097: PUSH
17098: LD_INT 1
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: CALL_OW 12
17110: ARRAY
17111: ST_TO_ADDR
// if Crawls ( un ) then
17112: LD_VAR 0 2
17116: PPUSH
17117: CALL_OW 318
17121: IFFALSE 17132
// ComWalk ( un ) ;
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_INT 9
17139: PPUSH
17140: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17144: LD_INT 28
17146: PPUSH
17147: LD_OWVAR 2
17151: PPUSH
17152: LD_INT 2
17154: PPUSH
17155: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17159: LD_INT 29
17161: PPUSH
17162: LD_OWVAR 2
17166: PPUSH
17167: LD_INT 2
17169: PPUSH
17170: CALL_OW 322
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17177: LD_EXP 29
17181: PUSH
17182: LD_EXP 72
17186: AND
17187: IFFALSE 17298
17189: GO 17191
17191: DISABLE
17192: LD_INT 0
17194: PPUSH
17195: PPUSH
17196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_OWVAR 2
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if not tmp then
17233: LD_VAR 0 3
17237: NOT
17238: IFFALSE 17242
// exit ;
17240: GO 17298
// un := tmp [ rand ( 1 , tmp ) ] ;
17242: LD_ADDR_VAR 0 2
17246: PUSH
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 1
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 12
17264: ARRAY
17265: ST_TO_ADDR
// if Crawls ( un ) then
17266: LD_VAR 0 2
17270: PPUSH
17271: CALL_OW 318
17275: IFFALSE 17286
// ComWalk ( un ) ;
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17286: LD_VAR 0 2
17290: PPUSH
17291: LD_INT 8
17293: PPUSH
17294: CALL_OW 336
// end ;
17298: PPOPN 3
17300: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17301: LD_EXP 29
17305: PUSH
17306: LD_EXP 73
17310: AND
17311: IFFALSE 17455
17313: GO 17315
17315: DISABLE
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 21
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 34
17352: PUSH
17353: LD_INT 12
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 34
17362: PUSH
17363: LD_INT 51
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 34
17372: PUSH
17373: LD_INT 32
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: ST_TO_ADDR
// if not tmp then
17396: LD_VAR 0 2
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17455
// for i in tmp do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17453
// if GetCargo ( i , mat_artifact ) = 0 then
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_INT 4
17425: PPUSH
17426: CALL_OW 289
17430: PUSH
17431: LD_INT 0
17433: EQUAL
17434: IFFALSE 17451
// SetCargo ( i , mat_siberit , 100 ) ;
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_INT 3
17443: PPUSH
17444: LD_INT 100
17446: PPUSH
17447: CALL_OW 290
17451: GO 17415
17453: POP
17454: POP
// end ;
17455: PPOPN 2
17457: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17458: LD_EXP 29
17462: PUSH
17463: LD_EXP 74
17467: AND
17468: IFFALSE 17651
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_OWVAR 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PPUSH
17494: CALL_OW 69
17498: ST_TO_ADDR
// if not tmp then
17499: LD_VAR 0 2
17503: NOT
17504: IFFALSE 17508
// exit ;
17506: GO 17651
// for i := 1 to 2 do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_INT 2
17520: PUSH
17521: FOR_TO
17522: IFFALSE 17649
// begin uc_side := your_side ;
17524: LD_ADDR_OWVAR 20
17528: PUSH
17529: LD_OWVAR 2
17533: ST_TO_ADDR
// uc_nation := nation_american ;
17534: LD_ADDR_OWVAR 21
17538: PUSH
17539: LD_INT 1
17541: ST_TO_ADDR
// vc_chassis := us_morphling ;
17542: LD_ADDR_OWVAR 37
17546: PUSH
17547: LD_INT 5
17549: ST_TO_ADDR
// vc_engine := engine_siberite ;
17550: LD_ADDR_OWVAR 39
17554: PUSH
17555: LD_INT 3
17557: ST_TO_ADDR
// vc_control := control_computer ;
17558: LD_ADDR_OWVAR 38
17562: PUSH
17563: LD_INT 3
17565: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17566: LD_ADDR_OWVAR 40
17570: PUSH
17571: LD_INT 10
17573: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PPUSH
17583: CALL_OW 310
17587: NOT
17588: IFFALSE 17635
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17590: CALL_OW 45
17594: PPUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 1
17602: ARRAY
17603: PPUSH
17604: CALL_OW 250
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: CALL_OW 251
17622: PPUSH
17623: LD_INT 12
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 50
17633: GO 17647
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17635: CALL_OW 45
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 51
// end ;
17647: GO 17521
17649: POP
17650: POP
// end ;
17651: PPOPN 2
17653: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17654: LD_EXP 29
17658: PUSH
17659: LD_EXP 75
17663: AND
17664: IFFALSE 17886
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17677: LD_ADDR_VAR 0 6
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_OWVAR 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 21
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 23
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 6
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17886
// s1 := rand ( 1 , 4 ) ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 4
17750: PPUSH
17751: CALL_OW 12
17755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17756: LD_ADDR_VAR 0 4
17760: PUSH
17761: LD_VAR 0 6
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 259
17779: ST_TO_ADDR
// if s1 = 1 then
17780: LD_VAR 0 2
17784: PUSH
17785: LD_INT 1
17787: EQUAL
17788: IFFALSE 17808
// s2 := rand ( 2 , 4 ) else
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 2
17797: PPUSH
17798: LD_INT 4
17800: PPUSH
17801: CALL_OW 12
17805: ST_TO_ADDR
17806: GO 17816
// s2 := 1 ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 6
17825: PUSH
17826: LD_INT 1
17828: ARRAY
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: CALL_OW 259
17839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17840: LD_VAR 0 6
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17863: LD_VAR 0 6
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: LD_VAR 0 4
17881: PPUSH
17882: CALL_OW 237
// end ;
17886: PPOPN 6
17888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17889: LD_EXP 29
17893: PUSH
17894: LD_EXP 76
17898: AND
17899: IFFALSE 17978
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17907: LD_ADDR_VAR 0 1
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 1
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 17978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17952: LD_VAR 0 1
17956: PUSH
17957: LD_INT 1
17959: PPUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 12
17969: ARRAY
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 234
// end ;
17978: PPOPN 1
17980: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17981: LD_EXP 29
17985: PUSH
17986: LD_EXP 77
17990: AND
17991: IFFALSE 18103
17993: GO 17995
17995: DISABLE
17996: LD_INT 0
17998: PPUSH
17999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_INT 22
18007: PUSH
18008: LD_OWVAR 2
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 27
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 30
18032: PUSH
18033: LD_INT 26
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 28
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PPUSH
18060: CALL_OW 69
18064: ST_TO_ADDR
// if not tmp then
18065: LD_VAR 0 2
18069: NOT
18070: IFFALSE 18074
// exit ;
18072: GO 18103
// for i in tmp do
18074: LD_ADDR_VAR 0 1
18078: PUSH
18079: LD_VAR 0 2
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18101
// SetLives ( i , 1 ) ;
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 234
18099: GO 18084
18101: POP
18102: POP
// end ;
18103: PPOPN 2
18105: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18106: LD_EXP 29
18110: PUSH
18111: LD_EXP 78
18115: AND
18116: IFFALSE 18403
18118: GO 18120
18120: DISABLE
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
18125: PPUSH
// begin i := rand ( 1 , 7 ) ;
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: LD_INT 1
18133: PPUSH
18134: LD_INT 7
18136: PPUSH
18137: CALL_OW 12
18141: ST_TO_ADDR
// case i of 1 :
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18165
18155: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18156: LD_STRING earthquake(getX(game), 0, 32)
18158: PPUSH
18159: CALL_OW 559
18163: GO 18403
18165: LD_INT 2
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18187
18173: POP
// begin ToLua ( displayStucuk(); ) ;
18174: LD_STRING displayStucuk();
18176: PPUSH
18177: CALL_OW 559
// ResetFog ;
18181: CALL_OW 335
// end ; 3 :
18185: GO 18403
18187: LD_INT 3
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18299
18195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 22
18203: PUSH
18204: LD_OWVAR 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 2
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18403
// un := tmp [ rand ( 1 , tmp ) ] ;
18241: LD_ADDR_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: ST_TO_ADDR
// if Crawls ( un ) then
18265: LD_VAR 0 3
18269: PPUSH
18270: CALL_OW 318
18274: IFFALSE 18285
// ComWalk ( un ) ;
18276: LD_VAR 0 3
18280: PPUSH
18281: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_INT 8
18292: PPUSH
18293: CALL_OW 336
// end ; 4 :
18297: GO 18403
18299: LD_INT 4
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18381
18307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 29
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: ST_TO_ADDR
// if not tmp then
18344: LD_VAR 0 2
18348: NOT
18349: IFFALSE 18353
// exit ;
18351: GO 18403
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18353: LD_VAR 0 2
18357: PUSH
18358: LD_INT 1
18360: ARRAY
18361: PPUSH
18362: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18366: LD_VAR 0 2
18370: PUSH
18371: LD_INT 1
18373: ARRAY
18374: PPUSH
18375: CALL_OW 65
// end ; 5 .. 7 :
18379: GO 18403
18381: LD_INT 5
18383: DOUBLE
18384: GREATEREQUAL
18385: IFFALSE 18393
18387: LD_INT 7
18389: DOUBLE
18390: LESSEQUAL
18391: IFTRUE 18395
18393: GO 18402
18395: POP
// StreamSibBomb ; end ;
18396: CALL 14640 0 0
18400: GO 18403
18402: POP
// end ;
18403: PPOPN 3
18405: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18406: LD_EXP 29
18410: PUSH
18411: LD_EXP 79
18415: AND
18416: IFFALSE 18572
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: LD_INT 81
18433: PUSH
18434: LD_OWVAR 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 21
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18572
// p := 0 ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_INT 0
18496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18497: LD_INT 35
18499: PPUSH
18500: CALL_OW 67
// p := p + 1 ;
18504: LD_ADDR_VAR 0 3
18508: PUSH
18509: LD_VAR 0 3
18513: PUSH
18514: LD_INT 1
18516: PLUS
18517: ST_TO_ADDR
// for i in tmp do
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: FOR_IN
18529: IFFALSE 18560
// if GetLives ( i ) < 1000 then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 256
18540: PUSH
18541: LD_INT 1000
18543: LESS
18544: IFFALSE 18558
// SetLives ( i , 1000 ) ;
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_INT 1000
18553: PPUSH
18554: CALL_OW 234
18558: GO 18528
18560: POP
18561: POP
// until p > 20 ;
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 20
18569: GREATER
18570: IFFALSE 18497
// end ;
18572: PPOPN 3
18574: END
// every 0 0$1 trigger StreamModeActive and sTime do
18575: LD_EXP 29
18579: PUSH
18580: LD_EXP 80
18584: AND
18585: IFFALSE 18620
18587: GO 18589
18589: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18590: LD_INT 28
18592: PPUSH
18593: LD_OWVAR 2
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18605: LD_INT 30
18607: PPUSH
18608: LD_OWVAR 2
18612: PPUSH
18613: LD_INT 2
18615: PPUSH
18616: CALL_OW 322
// end ;
18620: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18621: LD_EXP 29
18625: PUSH
18626: LD_EXP 81
18630: AND
18631: IFFALSE 18752
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 23
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: PPUSH
18689: CALL_OW 69
18693: ST_TO_ADDR
// if not tmp then
18694: LD_VAR 0 2
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18752
// for i in tmp do
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: LD_VAR 0 2
18712: PUSH
18713: FOR_IN
18714: IFFALSE 18750
// begin if Crawls ( i ) then
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 318
18725: IFFALSE 18736
// ComWalk ( i ) ;
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 138
// SetClass ( i , 2 ) ;
18736: LD_VAR 0 1
18740: PPUSH
18741: LD_INT 2
18743: PPUSH
18744: CALL_OW 336
// end ;
18748: GO 18713
18750: POP
18751: POP
// end ;
18752: PPOPN 2
18754: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18755: LD_EXP 29
18759: PUSH
18760: LD_EXP 82
18764: AND
18765: IFFALSE 19053
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18775: LD_OWVAR 2
18779: PPUSH
18780: LD_INT 9
18782: PPUSH
18783: LD_INT 1
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18793: LD_INT 9
18795: PPUSH
18796: LD_OWVAR 2
18800: PPUSH
18801: CALL_OW 343
// uc_side := 9 ;
18805: LD_ADDR_OWVAR 20
18809: PUSH
18810: LD_INT 9
18812: ST_TO_ADDR
// uc_nation := 2 ;
18813: LD_ADDR_OWVAR 21
18817: PUSH
18818: LD_INT 2
18820: ST_TO_ADDR
// hc_name := Dark Warrior ;
18821: LD_ADDR_OWVAR 26
18825: PUSH
18826: LD_STRING Dark Warrior
18828: ST_TO_ADDR
// hc_gallery :=  ;
18829: LD_ADDR_OWVAR 33
18833: PUSH
18834: LD_STRING 
18836: ST_TO_ADDR
// hc_noskilllimit := true ;
18837: LD_ADDR_OWVAR 76
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18845: LD_ADDR_OWVAR 31
18849: PUSH
18850: LD_INT 30
18852: PUSH
18853: LD_INT 30
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// un := CreateHuman ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: CALL_OW 44
18877: ST_TO_ADDR
// hc_noskilllimit := false ;
18878: LD_ADDR_OWVAR 76
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 3
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// ToLua ( playRanger() ) ;
18898: LD_STRING playRanger()
18900: PPUSH
18901: CALL_OW 559
// p := 0 ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18913: LD_INT 35
18915: PPUSH
18916: CALL_OW 67
// p := p + 1 ;
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 2
18929: PUSH
18930: LD_INT 1
18932: PLUS
18933: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18934: LD_VAR 0 3
18938: PPUSH
18939: CALL_OW 256
18943: PUSH
18944: LD_INT 1000
18946: LESS
18947: IFFALSE 18961
// SetLives ( un , 1000 ) ;
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1000
18956: PPUSH
18957: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18961: LD_VAR 0 3
18965: PPUSH
18966: LD_INT 81
18968: PUSH
18969: LD_OWVAR 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 91
18980: PUSH
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 69
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: CALL_OW 74
19012: PPUSH
19013: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19017: LD_VAR 0 2
19021: PUSH
19022: LD_INT 80
19024: GREATER
19025: PUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 301
19035: OR
19036: IFFALSE 18913
// if un then
19038: LD_VAR 0 3
19042: IFFALSE 19053
// RemoveUnit ( un ) ;
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 64
// end ;
19053: PPOPN 3
19055: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19056: LD_EXP 83
19060: IFFALSE 19176
19062: GO 19064
19064: DISABLE
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19070: LD_ADDR_VAR 0 2
19074: PUSH
19075: LD_INT 81
19077: PUSH
19078: LD_OWVAR 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19106: LD_STRING playComputer()
19108: PPUSH
19109: CALL_OW 559
// if not tmp then
19113: LD_VAR 0 2
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19176
// for i in tmp do
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: FOR_IN
19133: IFFALSE 19174
// for j := 1 to 4 do
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: DOUBLE
19141: LD_INT 1
19143: DEC
19144: ST_TO_ADDR
19145: LD_INT 4
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19170
// SetSkill ( i , j , 10 ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_VAR 0 3
19160: PPUSH
19161: LD_INT 10
19163: PPUSH
19164: CALL_OW 237
19168: GO 19148
19170: POP
19171: POP
19172: GO 19132
19174: POP
19175: POP
// end ;
19176: PPOPN 3
19178: END
// every 0 0$1 trigger s30 do var i , tmp ;
19179: LD_EXP 84
19183: IFFALSE 19252
19185: GO 19187
19187: DISABLE
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19192: LD_ADDR_VAR 0 2
19196: PUSH
19197: LD_INT 22
19199: PUSH
19200: LD_OWVAR 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: ST_TO_ADDR
// if not tmp then
19214: LD_VAR 0 2
19218: NOT
19219: IFFALSE 19223
// exit ;
19221: GO 19252
// for i in tmp do
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_VAR 0 2
19232: PUSH
19233: FOR_IN
19234: IFFALSE 19250
// SetLives ( i , 300 ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_INT 300
19243: PPUSH
19244: CALL_OW 234
19248: GO 19233
19250: POP
19251: POP
// end ;
19252: PPOPN 2
19254: END
// every 0 0$1 trigger s60 do var i , tmp ;
19255: LD_EXP 85
19259: IFFALSE 19328
19261: GO 19263
19263: DISABLE
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_OWVAR 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 2
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19328
// for i in tmp do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_VAR 0 2
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19326
// SetLives ( i , 600 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 600
19319: PPUSH
19320: CALL_OW 234
19324: GO 19309
19326: POP
19327: POP
// end ;
19328: PPOPN 2
19330: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19331: LD_INT 0
19333: PPUSH
// case cmd of 301 :
19334: LD_VAR 0 1
19338: PUSH
19339: LD_INT 301
19341: DOUBLE
19342: EQUAL
19343: IFTRUE 19347
19345: GO 19379
19347: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19348: LD_VAR 0 6
19352: PPUSH
19353: LD_VAR 0 7
19357: PPUSH
19358: LD_VAR 0 8
19362: PPUSH
19363: LD_VAR 0 4
19367: PPUSH
19368: LD_VAR 0 5
19372: PPUSH
19373: CALL 20580 0 5
19377: GO 19500
19379: LD_INT 302
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19424
19387: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19388: LD_VAR 0 6
19392: PPUSH
19393: LD_VAR 0 7
19397: PPUSH
19398: LD_VAR 0 8
19402: PPUSH
19403: LD_VAR 0 9
19407: PPUSH
19408: LD_VAR 0 4
19412: PPUSH
19413: LD_VAR 0 5
19417: PPUSH
19418: CALL 20671 0 6
19422: GO 19500
19424: LD_INT 303
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19469
19432: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19433: LD_VAR 0 6
19437: PPUSH
19438: LD_VAR 0 7
19442: PPUSH
19443: LD_VAR 0 8
19447: PPUSH
19448: LD_VAR 0 9
19452: PPUSH
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL 19505 0 6
19467: GO 19500
19469: LD_INT 304
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19499
19477: POP
// hHackTeleport ( unit , x , y ) ; end ;
19478: LD_VAR 0 2
19482: PPUSH
19483: LD_VAR 0 4
19487: PPUSH
19488: LD_VAR 0 5
19492: PPUSH
19493: CALL 21264 0 3
19497: GO 19500
19499: POP
// end ;
19500: LD_VAR 0 12
19504: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19509: LD_VAR 0 1
19513: PUSH
19514: LD_INT 1
19516: LESS
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 3
19525: GREATER
19526: OR
19527: PUSH
19528: LD_VAR 0 5
19532: PPUSH
19533: LD_VAR 0 6
19537: PPUSH
19538: CALL_OW 428
19542: OR
19543: IFFALSE 19547
// exit ;
19545: GO 20267
// uc_side := your_side ;
19547: LD_ADDR_OWVAR 20
19551: PUSH
19552: LD_OWVAR 2
19556: ST_TO_ADDR
// uc_nation := nation ;
19557: LD_ADDR_OWVAR 21
19561: PUSH
19562: LD_VAR 0 1
19566: ST_TO_ADDR
// bc_level = 1 ;
19567: LD_ADDR_OWVAR 43
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// case btype of 1 :
19575: LD_VAR 0 2
19579: PUSH
19580: LD_INT 1
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19599
19588: POP
// bc_type := b_depot ; 2 :
19589: LD_ADDR_OWVAR 42
19593: PUSH
19594: LD_INT 0
19596: ST_TO_ADDR
19597: GO 20211
19599: LD_INT 2
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19618
19607: POP
// bc_type := b_warehouse ; 3 :
19608: LD_ADDR_OWVAR 42
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
19616: GO 20211
19618: LD_INT 3
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19637
19626: POP
// bc_type := b_lab ; 4 .. 9 :
19627: LD_ADDR_OWVAR 42
19631: PUSH
19632: LD_INT 6
19634: ST_TO_ADDR
19635: GO 20211
19637: LD_INT 4
19639: DOUBLE
19640: GREATEREQUAL
19641: IFFALSE 19649
19643: LD_INT 9
19645: DOUBLE
19646: LESSEQUAL
19647: IFTRUE 19651
19649: GO 19703
19651: POP
// begin bc_type := b_lab_half ;
19652: LD_ADDR_OWVAR 42
19656: PUSH
19657: LD_INT 7
19659: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19660: LD_ADDR_OWVAR 44
19664: PUSH
19665: LD_INT 10
19667: PUSH
19668: LD_INT 11
19670: PUSH
19671: LD_INT 12
19673: PUSH
19674: LD_INT 15
19676: PUSH
19677: LD_INT 14
19679: PUSH
19680: LD_INT 13
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: LD_INT 3
19698: MINUS
19699: ARRAY
19700: ST_TO_ADDR
// end ; 10 .. 13 :
19701: GO 20211
19703: LD_INT 10
19705: DOUBLE
19706: GREATEREQUAL
19707: IFFALSE 19715
19709: LD_INT 13
19711: DOUBLE
19712: LESSEQUAL
19713: IFTRUE 19717
19715: GO 19794
19717: POP
// begin bc_type := b_lab_full ;
19718: LD_ADDR_OWVAR 42
19722: PUSH
19723: LD_INT 8
19725: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19726: LD_ADDR_OWVAR 44
19730: PUSH
19731: LD_INT 10
19733: PUSH
19734: LD_INT 12
19736: PUSH
19737: LD_INT 14
19739: PUSH
19740: LD_INT 13
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_VAR 0 2
19753: PUSH
19754: LD_INT 9
19756: MINUS
19757: ARRAY
19758: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19759: LD_ADDR_OWVAR 45
19763: PUSH
19764: LD_INT 11
19766: PUSH
19767: LD_INT 15
19769: PUSH
19770: LD_INT 12
19772: PUSH
19773: LD_INT 15
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: PUSH
19782: LD_VAR 0 2
19786: PUSH
19787: LD_INT 9
19789: MINUS
19790: ARRAY
19791: ST_TO_ADDR
// end ; 14 :
19792: GO 20211
19794: LD_INT 14
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19813
19802: POP
// bc_type := b_workshop ; 15 :
19803: LD_ADDR_OWVAR 42
19807: PUSH
19808: LD_INT 2
19810: ST_TO_ADDR
19811: GO 20211
19813: LD_INT 15
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19832
19821: POP
// bc_type := b_factory ; 16 :
19822: LD_ADDR_OWVAR 42
19826: PUSH
19827: LD_INT 3
19829: ST_TO_ADDR
19830: GO 20211
19832: LD_INT 16
19834: DOUBLE
19835: EQUAL
19836: IFTRUE 19840
19838: GO 19851
19840: POP
// bc_type := b_ext_gun ; 17 :
19841: LD_ADDR_OWVAR 42
19845: PUSH
19846: LD_INT 17
19848: ST_TO_ADDR
19849: GO 20211
19851: LD_INT 17
19853: DOUBLE
19854: EQUAL
19855: IFTRUE 19859
19857: GO 19887
19859: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19860: LD_ADDR_OWVAR 42
19864: PUSH
19865: LD_INT 19
19867: PUSH
19868: LD_INT 23
19870: PUSH
19871: LD_INT 19
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: PUSH
19879: LD_VAR 0 1
19883: ARRAY
19884: ST_TO_ADDR
19885: GO 20211
19887: LD_INT 18
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19906
19895: POP
// bc_type := b_ext_radar ; 19 :
19896: LD_ADDR_OWVAR 42
19900: PUSH
19901: LD_INT 20
19903: ST_TO_ADDR
19904: GO 20211
19906: LD_INT 19
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 19925
19914: POP
// bc_type := b_ext_radio ; 20 :
19915: LD_ADDR_OWVAR 42
19919: PUSH
19920: LD_INT 22
19922: ST_TO_ADDR
19923: GO 20211
19925: LD_INT 20
19927: DOUBLE
19928: EQUAL
19929: IFTRUE 19933
19931: GO 19944
19933: POP
// bc_type := b_ext_siberium ; 21 :
19934: LD_ADDR_OWVAR 42
19938: PUSH
19939: LD_INT 21
19941: ST_TO_ADDR
19942: GO 20211
19944: LD_INT 21
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19963
19952: POP
// bc_type := b_ext_computer ; 22 :
19953: LD_ADDR_OWVAR 42
19957: PUSH
19958: LD_INT 24
19960: ST_TO_ADDR
19961: GO 20211
19963: LD_INT 22
19965: DOUBLE
19966: EQUAL
19967: IFTRUE 19971
19969: GO 19982
19971: POP
// bc_type := b_ext_track ; 23 :
19972: LD_ADDR_OWVAR 42
19976: PUSH
19977: LD_INT 16
19979: ST_TO_ADDR
19980: GO 20211
19982: LD_INT 23
19984: DOUBLE
19985: EQUAL
19986: IFTRUE 19990
19988: GO 20001
19990: POP
// bc_type := b_ext_laser ; 24 :
19991: LD_ADDR_OWVAR 42
19995: PUSH
19996: LD_INT 25
19998: ST_TO_ADDR
19999: GO 20211
20001: LD_INT 24
20003: DOUBLE
20004: EQUAL
20005: IFTRUE 20009
20007: GO 20020
20009: POP
// bc_type := b_control_tower ; 25 :
20010: LD_ADDR_OWVAR 42
20014: PUSH
20015: LD_INT 36
20017: ST_TO_ADDR
20018: GO 20211
20020: LD_INT 25
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20039
20028: POP
// bc_type := b_breastwork ; 26 :
20029: LD_ADDR_OWVAR 42
20033: PUSH
20034: LD_INT 31
20036: ST_TO_ADDR
20037: GO 20211
20039: LD_INT 26
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20058
20047: POP
// bc_type := b_bunker ; 27 :
20048: LD_ADDR_OWVAR 42
20052: PUSH
20053: LD_INT 32
20055: ST_TO_ADDR
20056: GO 20211
20058: LD_INT 27
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20077
20066: POP
// bc_type := b_turret ; 28 :
20067: LD_ADDR_OWVAR 42
20071: PUSH
20072: LD_INT 33
20074: ST_TO_ADDR
20075: GO 20211
20077: LD_INT 28
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20096
20085: POP
// bc_type := b_armoury ; 29 :
20086: LD_ADDR_OWVAR 42
20090: PUSH
20091: LD_INT 4
20093: ST_TO_ADDR
20094: GO 20211
20096: LD_INT 29
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20115
20104: POP
// bc_type := b_barracks ; 30 :
20105: LD_ADDR_OWVAR 42
20109: PUSH
20110: LD_INT 5
20112: ST_TO_ADDR
20113: GO 20211
20115: LD_INT 30
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20134
20123: POP
// bc_type := b_solar_power ; 31 :
20124: LD_ADDR_OWVAR 42
20128: PUSH
20129: LD_INT 27
20131: ST_TO_ADDR
20132: GO 20211
20134: LD_INT 31
20136: DOUBLE
20137: EQUAL
20138: IFTRUE 20142
20140: GO 20153
20142: POP
// bc_type := b_oil_power ; 32 :
20143: LD_ADDR_OWVAR 42
20147: PUSH
20148: LD_INT 26
20150: ST_TO_ADDR
20151: GO 20211
20153: LD_INT 32
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20172
20161: POP
// bc_type := b_siberite_power ; 33 :
20162: LD_ADDR_OWVAR 42
20166: PUSH
20167: LD_INT 28
20169: ST_TO_ADDR
20170: GO 20211
20172: LD_INT 33
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20191
20180: POP
// bc_type := b_oil_mine ; 34 :
20181: LD_ADDR_OWVAR 42
20185: PUSH
20186: LD_INT 29
20188: ST_TO_ADDR
20189: GO 20211
20191: LD_INT 34
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_siberite_mine ; end ;
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 30
20207: ST_TO_ADDR
20208: GO 20211
20210: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20211: LD_ADDR_VAR 0 8
20215: PUSH
20216: LD_VAR 0 5
20220: PPUSH
20221: LD_VAR 0 6
20225: PPUSH
20226: LD_VAR 0 3
20230: PPUSH
20231: CALL_OW 47
20235: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20236: LD_OWVAR 42
20240: PUSH
20241: LD_INT 32
20243: PUSH
20244: LD_INT 33
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: IN
20251: IFFALSE 20267
// PlaceWeaponTurret ( b , weapon ) ;
20253: LD_VAR 0 8
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: CALL_OW 431
// end ;
20267: LD_VAR 0 7
20271: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20272: LD_INT 0
20274: PPUSH
20275: PPUSH
20276: PPUSH
20277: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20278: LD_ADDR_VAR 0 4
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_OWVAR 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 30
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 30
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 69
20331: ST_TO_ADDR
// if not tmp then
20332: LD_VAR 0 4
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20400
// for i in tmp do
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_VAR 0 4
20350: PUSH
20351: FOR_IN
20352: IFFALSE 20398
// for j = 1 to 3 do
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: DOUBLE
20360: LD_INT 1
20362: DEC
20363: ST_TO_ADDR
20364: LD_INT 3
20366: PUSH
20367: FOR_TO
20368: IFFALSE 20394
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20370: LD_VAR 0 2
20374: PPUSH
20375: CALL_OW 274
20379: PPUSH
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_INT 99999
20387: PPUSH
20388: CALL_OW 277
20392: GO 20367
20394: POP
20395: POP
20396: GO 20351
20398: POP
20399: POP
// end ;
20400: LD_VAR 0 1
20404: RET
// export function hHackSetLevel10 ; var i , j ; begin
20405: LD_INT 0
20407: PPUSH
20408: PPUSH
20409: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20410: LD_ADDR_VAR 0 2
20414: PUSH
20415: LD_INT 21
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: PUSH
20430: FOR_IN
20431: IFFALSE 20483
// if IsSelected ( i ) then
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 306
20442: IFFALSE 20481
// begin for j := 1 to 4 do
20444: LD_ADDR_VAR 0 3
20448: PUSH
20449: DOUBLE
20450: LD_INT 1
20452: DEC
20453: ST_TO_ADDR
20454: LD_INT 4
20456: PUSH
20457: FOR_TO
20458: IFFALSE 20479
// SetSkill ( i , j , 10 ) ;
20460: LD_VAR 0 2
20464: PPUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 10
20472: PPUSH
20473: CALL_OW 237
20477: GO 20457
20479: POP
20480: POP
// end ;
20481: GO 20430
20483: POP
20484: POP
// end ;
20485: LD_VAR 0 1
20489: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20490: LD_INT 0
20492: PPUSH
20493: PPUSH
20494: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20495: LD_ADDR_VAR 0 2
20499: PUSH
20500: LD_INT 22
20502: PUSH
20503: LD_OWVAR 2
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 21
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PPUSH
20526: CALL_OW 69
20530: PUSH
20531: FOR_IN
20532: IFFALSE 20573
// begin for j := 1 to 4 do
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: DOUBLE
20540: LD_INT 1
20542: DEC
20543: ST_TO_ADDR
20544: LD_INT 4
20546: PUSH
20547: FOR_TO
20548: IFFALSE 20569
// SetSkill ( i , j , 10 ) ;
20550: LD_VAR 0 2
20554: PPUSH
20555: LD_VAR 0 3
20559: PPUSH
20560: LD_INT 10
20562: PPUSH
20563: CALL_OW 237
20567: GO 20547
20569: POP
20570: POP
// end ;
20571: GO 20531
20573: POP
20574: POP
// end ;
20575: LD_VAR 0 1
20579: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20580: LD_INT 0
20582: PPUSH
// uc_side := your_side ;
20583: LD_ADDR_OWVAR 20
20587: PUSH
20588: LD_OWVAR 2
20592: ST_TO_ADDR
// uc_nation := nation ;
20593: LD_ADDR_OWVAR 21
20597: PUSH
20598: LD_VAR 0 1
20602: ST_TO_ADDR
// InitHc ;
20603: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20607: LD_INT 0
20609: PPUSH
20610: LD_VAR 0 2
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20624: LD_VAR 0 4
20628: PPUSH
20629: LD_VAR 0 5
20633: PPUSH
20634: CALL_OW 428
20638: PUSH
20639: LD_INT 0
20641: EQUAL
20642: IFFALSE 20666
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20644: CALL_OW 44
20648: PPUSH
20649: LD_VAR 0 4
20653: PPUSH
20654: LD_VAR 0 5
20658: PPUSH
20659: LD_INT 1
20661: PPUSH
20662: CALL_OW 48
// end ;
20666: LD_VAR 0 6
20670: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20671: LD_INT 0
20673: PPUSH
20674: PPUSH
// uc_side := your_side ;
20675: LD_ADDR_OWVAR 20
20679: PUSH
20680: LD_OWVAR 2
20684: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20685: LD_VAR 0 1
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: LD_INT 4
20701: PUSH
20702: LD_INT 5
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: IN
20712: IFFALSE 20724
// uc_nation := nation_american else
20714: LD_ADDR_OWVAR 21
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
20722: GO 20767
// if chassis in [ 11 , 12 , 13 , 14 ] then
20724: LD_VAR 0 1
20728: PUSH
20729: LD_INT 11
20731: PUSH
20732: LD_INT 12
20734: PUSH
20735: LD_INT 13
20737: PUSH
20738: LD_INT 14
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: IN
20747: IFFALSE 20759
// uc_nation := nation_arabian else
20749: LD_ADDR_OWVAR 21
20753: PUSH
20754: LD_INT 2
20756: ST_TO_ADDR
20757: GO 20767
// uc_nation := nation_russian ;
20759: LD_ADDR_OWVAR 21
20763: PUSH
20764: LD_INT 3
20766: ST_TO_ADDR
// vc_chassis := chassis ;
20767: LD_ADDR_OWVAR 37
20771: PUSH
20772: LD_VAR 0 1
20776: ST_TO_ADDR
// vc_engine := engine ;
20777: LD_ADDR_OWVAR 39
20781: PUSH
20782: LD_VAR 0 2
20786: ST_TO_ADDR
// vc_control := control ;
20787: LD_ADDR_OWVAR 38
20791: PUSH
20792: LD_VAR 0 3
20796: ST_TO_ADDR
// vc_weapon := weapon ;
20797: LD_ADDR_OWVAR 40
20801: PUSH
20802: LD_VAR 0 4
20806: ST_TO_ADDR
// un := CreateVehicle ;
20807: LD_ADDR_VAR 0 8
20811: PUSH
20812: CALL_OW 45
20816: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20817: LD_VAR 0 8
20821: PPUSH
20822: LD_INT 0
20824: PPUSH
20825: LD_INT 5
20827: PPUSH
20828: CALL_OW 12
20832: PPUSH
20833: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20837: LD_VAR 0 8
20841: PPUSH
20842: LD_VAR 0 5
20846: PPUSH
20847: LD_VAR 0 6
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 48
// end ;
20859: LD_VAR 0 7
20863: RET
// export hInvincible ; every 1 do
20864: GO 20866
20866: DISABLE
// hInvincible := [ ] ;
20867: LD_ADDR_EXP 86
20871: PUSH
20872: EMPTY
20873: ST_TO_ADDR
20874: END
// every 10 do var i ;
20875: GO 20877
20877: DISABLE
20878: LD_INT 0
20880: PPUSH
// begin enable ;
20881: ENABLE
// if not hInvincible then
20882: LD_EXP 86
20886: NOT
20887: IFFALSE 20891
// exit ;
20889: GO 20935
// for i in hInvincible do
20891: LD_ADDR_VAR 0 1
20895: PUSH
20896: LD_EXP 86
20900: PUSH
20901: FOR_IN
20902: IFFALSE 20933
// if GetLives ( i ) < 1000 then
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 256
20913: PUSH
20914: LD_INT 1000
20916: LESS
20917: IFFALSE 20931
// SetLives ( i , 1000 ) ;
20919: LD_VAR 0 1
20923: PPUSH
20924: LD_INT 1000
20926: PPUSH
20927: CALL_OW 234
20931: GO 20901
20933: POP
20934: POP
// end ;
20935: PPOPN 1
20937: END
// export function hHackInvincible ; var i ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 21
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 21
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: PPUSH
20975: CALL_OW 69
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21042
// if IsSelected ( i ) then
20983: LD_VAR 0 2
20987: PPUSH
20988: CALL_OW 306
20992: IFFALSE 21040
// begin if i in hInvincible then
20994: LD_VAR 0 2
20998: PUSH
20999: LD_EXP 86
21003: IN
21004: IFFALSE 21024
// hInvincible := hInvincible diff i else
21006: LD_ADDR_EXP 86
21010: PUSH
21011: LD_EXP 86
21015: PUSH
21016: LD_VAR 0 2
21020: DIFF
21021: ST_TO_ADDR
21022: GO 21040
// hInvincible := hInvincible union i ;
21024: LD_ADDR_EXP 86
21028: PUSH
21029: LD_EXP 86
21033: PUSH
21034: LD_VAR 0 2
21038: UNION
21039: ST_TO_ADDR
// end ;
21040: GO 20980
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 1
21048: RET
// export function hHackInvisible ; var i , j ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21054: LD_ADDR_VAR 0 2
21058: PUSH
21059: LD_INT 21
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: PUSH
21074: FOR_IN
21075: IFFALSE 21099
// if IsSelected ( i ) then
21077: LD_VAR 0 2
21081: PPUSH
21082: CALL_OW 306
21086: IFFALSE 21097
// ComForceInvisible ( i ) ;
21088: LD_VAR 0 2
21092: PPUSH
21093: CALL_OW 496
21097: GO 21074
21099: POP
21100: POP
// end ;
21101: LD_VAR 0 1
21105: RET
// export function hHackChangeYourSide ; begin
21106: LD_INT 0
21108: PPUSH
// if your_side = 8 then
21109: LD_OWVAR 2
21113: PUSH
21114: LD_INT 8
21116: EQUAL
21117: IFFALSE 21129
// your_side := 0 else
21119: LD_ADDR_OWVAR 2
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
21127: GO 21143
// your_side := your_side + 1 ;
21129: LD_ADDR_OWVAR 2
21133: PUSH
21134: LD_OWVAR 2
21138: PUSH
21139: LD_INT 1
21141: PLUS
21142: ST_TO_ADDR
// end ;
21143: LD_VAR 0 1
21147: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
21152: PPUSH
// for i in all_units do
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_OWVAR 3
21162: PUSH
21163: FOR_IN
21164: IFFALSE 21242
// if IsSelected ( i ) then
21166: LD_VAR 0 2
21170: PPUSH
21171: CALL_OW 306
21175: IFFALSE 21240
// begin j := GetSide ( i ) ;
21177: LD_ADDR_VAR 0 3
21181: PUSH
21182: LD_VAR 0 2
21186: PPUSH
21187: CALL_OW 255
21191: ST_TO_ADDR
// if j = 8 then
21192: LD_VAR 0 3
21196: PUSH
21197: LD_INT 8
21199: EQUAL
21200: IFFALSE 21212
// j := 0 else
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
21210: GO 21226
// j := j + 1 ;
21212: LD_ADDR_VAR 0 3
21216: PUSH
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 1
21224: PLUS
21225: ST_TO_ADDR
// SetSide ( i , j ) ;
21226: LD_VAR 0 2
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: CALL_OW 235
// end ;
21240: GO 21163
21242: POP
21243: POP
// end ;
21244: LD_VAR 0 1
21248: RET
// export function hHackFog ; begin
21249: LD_INT 0
21251: PPUSH
// FogOff ( true ) ;
21252: LD_INT 1
21254: PPUSH
21255: CALL_OW 344
// end ;
21259: LD_VAR 0 1
21263: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21264: LD_INT 0
21266: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21267: LD_VAR 0 1
21271: PPUSH
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 3
21281: PPUSH
21282: LD_INT 1
21284: PPUSH
21285: LD_INT 1
21287: PPUSH
21288: CALL_OW 483
// CenterOnXY ( x , y ) ;
21292: LD_VAR 0 2
21296: PPUSH
21297: LD_VAR 0 3
21301: PPUSH
21302: CALL_OW 84
// end ;
21306: LD_VAR 0 4
21310: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21315: LD_VAR 0 1
21319: NOT
21320: PUSH
21321: LD_VAR 0 2
21325: PPUSH
21326: LD_VAR 0 3
21330: PPUSH
21331: CALL_OW 488
21335: NOT
21336: OR
21337: PUSH
21338: LD_VAR 0 1
21342: PPUSH
21343: CALL_OW 266
21347: PUSH
21348: LD_INT 3
21350: NONEQUAL
21351: PUSH
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 247
21361: PUSH
21362: LD_INT 1
21364: EQUAL
21365: NOT
21366: AND
21367: OR
21368: IFFALSE 21372
// exit ;
21370: GO 21521
// if GetType ( factory ) = unit_human then
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 247
21381: PUSH
21382: LD_INT 1
21384: EQUAL
21385: IFFALSE 21402
// factory := IsInUnit ( factory ) ;
21387: LD_ADDR_VAR 0 1
21391: PUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: CALL_OW 310
21401: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 266
21411: PUSH
21412: LD_INT 3
21414: NONEQUAL
21415: IFFALSE 21419
// exit ;
21417: GO 21521
// if HexInfo ( x , y ) = factory then
21419: LD_VAR 0 2
21423: PPUSH
21424: LD_VAR 0 3
21428: PPUSH
21429: CALL_OW 428
21433: PUSH
21434: LD_VAR 0 1
21438: EQUAL
21439: IFFALSE 21466
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21441: LD_ADDR_EXP 87
21445: PUSH
21446: LD_EXP 87
21450: PPUSH
21451: LD_VAR 0 1
21455: PPUSH
21456: LD_INT 0
21458: PPUSH
21459: CALL_OW 1
21463: ST_TO_ADDR
21464: GO 21517
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21466: LD_ADDR_EXP 87
21470: PUSH
21471: LD_EXP 87
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: LD_VAR 0 1
21485: PPUSH
21486: CALL_OW 255
21490: PUSH
21491: LD_VAR 0 1
21495: PUSH
21496: LD_VAR 0 2
21500: PUSH
21501: LD_VAR 0 3
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 1
21516: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21517: CALL 21526 0 0
// end ;
21521: LD_VAR 0 4
21525: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21531: LD_STRING resetFactoryWaypoint();
21533: PPUSH
21534: CALL_OW 559
// if factoryWaypoints then
21538: LD_EXP 87
21542: IFFALSE 21668
// begin list := PrepareArray ( factoryWaypoints ) ;
21544: LD_ADDR_VAR 0 3
21548: PUSH
21549: LD_EXP 87
21553: PPUSH
21554: CALL 67961 0 1
21558: ST_TO_ADDR
// for i := 1 to list do
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: DOUBLE
21565: LD_INT 1
21567: DEC
21568: ST_TO_ADDR
21569: LD_VAR 0 3
21573: PUSH
21574: FOR_TO
21575: IFFALSE 21666
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21577: LD_STRING setFactoryWaypointXY(
21579: PUSH
21580: LD_VAR 0 3
21584: PUSH
21585: LD_VAR 0 2
21589: ARRAY
21590: PUSH
21591: LD_INT 1
21593: ARRAY
21594: STR
21595: PUSH
21596: LD_STRING ,
21598: STR
21599: PUSH
21600: LD_VAR 0 3
21604: PUSH
21605: LD_VAR 0 2
21609: ARRAY
21610: PUSH
21611: LD_INT 2
21613: ARRAY
21614: STR
21615: PUSH
21616: LD_STRING ,
21618: STR
21619: PUSH
21620: LD_VAR 0 3
21624: PUSH
21625: LD_VAR 0 2
21629: ARRAY
21630: PUSH
21631: LD_INT 3
21633: ARRAY
21634: STR
21635: PUSH
21636: LD_STRING ,
21638: STR
21639: PUSH
21640: LD_VAR 0 3
21644: PUSH
21645: LD_VAR 0 2
21649: ARRAY
21650: PUSH
21651: LD_INT 4
21653: ARRAY
21654: STR
21655: PUSH
21656: LD_STRING )
21658: STR
21659: PPUSH
21660: CALL_OW 559
21664: GO 21574
21666: POP
21667: POP
// end ; end ;
21668: LD_VAR 0 1
21672: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21673: LD_INT 0
21675: PPUSH
// if HexInfo ( x , y ) = warehouse then
21676: LD_VAR 0 2
21680: PPUSH
21681: LD_VAR 0 3
21685: PPUSH
21686: CALL_OW 428
21690: PUSH
21691: LD_VAR 0 1
21695: EQUAL
21696: IFFALSE 21723
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21698: LD_ADDR_EXP 88
21702: PUSH
21703: LD_EXP 88
21707: PPUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: LD_INT 0
21715: PPUSH
21716: CALL_OW 1
21720: ST_TO_ADDR
21721: GO 21774
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21723: LD_ADDR_EXP 88
21727: PUSH
21728: LD_EXP 88
21732: PPUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 255
21747: PUSH
21748: LD_VAR 0 1
21752: PUSH
21753: LD_VAR 0 2
21757: PUSH
21758: LD_VAR 0 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 1
21773: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21774: CALL 21783 0 0
// end ;
21778: LD_VAR 0 4
21782: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21788: LD_STRING resetWarehouseGatheringPoints();
21790: PPUSH
21791: CALL_OW 559
// if warehouseGatheringPoints then
21795: LD_EXP 88
21799: IFFALSE 21925
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_EXP 88
21810: PPUSH
21811: CALL 67961 0 1
21815: ST_TO_ADDR
// for i := 1 to list do
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: DOUBLE
21822: LD_INT 1
21824: DEC
21825: ST_TO_ADDR
21826: LD_VAR 0 3
21830: PUSH
21831: FOR_TO
21832: IFFALSE 21923
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21834: LD_STRING setWarehouseGatheringPointXY(
21836: PUSH
21837: LD_VAR 0 3
21841: PUSH
21842: LD_VAR 0 2
21846: ARRAY
21847: PUSH
21848: LD_INT 1
21850: ARRAY
21851: STR
21852: PUSH
21853: LD_STRING ,
21855: STR
21856: PUSH
21857: LD_VAR 0 3
21861: PUSH
21862: LD_VAR 0 2
21866: ARRAY
21867: PUSH
21868: LD_INT 2
21870: ARRAY
21871: STR
21872: PUSH
21873: LD_STRING ,
21875: STR
21876: PUSH
21877: LD_VAR 0 3
21881: PUSH
21882: LD_VAR 0 2
21886: ARRAY
21887: PUSH
21888: LD_INT 3
21890: ARRAY
21891: STR
21892: PUSH
21893: LD_STRING ,
21895: STR
21896: PUSH
21897: LD_VAR 0 3
21901: PUSH
21902: LD_VAR 0 2
21906: ARRAY
21907: PUSH
21908: LD_INT 4
21910: ARRAY
21911: STR
21912: PUSH
21913: LD_STRING )
21915: STR
21916: PPUSH
21917: CALL_OW 559
21921: GO 21831
21923: POP
21924: POP
// end ; end ;
21925: LD_VAR 0 1
21929: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21930: LD_EXP 88
21934: IFFALSE 22619
21936: GO 21938
21938: DISABLE
21939: LD_INT 0
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
// begin enable ;
21950: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21951: LD_ADDR_VAR 0 3
21955: PUSH
21956: LD_EXP 88
21960: PPUSH
21961: CALL 67961 0 1
21965: ST_TO_ADDR
// if not list then
21966: LD_VAR 0 3
21970: NOT
21971: IFFALSE 21975
// exit ;
21973: GO 22619
// for i := 1 to list do
21975: LD_ADDR_VAR 0 1
21979: PUSH
21980: DOUBLE
21981: LD_INT 1
21983: DEC
21984: ST_TO_ADDR
21985: LD_VAR 0 3
21989: PUSH
21990: FOR_TO
21991: IFFALSE 22617
// begin depot := list [ i ] [ 2 ] ;
21993: LD_ADDR_VAR 0 8
21997: PUSH
21998: LD_VAR 0 3
22002: PUSH
22003: LD_VAR 0 1
22007: ARRAY
22008: PUSH
22009: LD_INT 2
22011: ARRAY
22012: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22013: LD_ADDR_VAR 0 5
22017: PUSH
22018: LD_VAR 0 3
22022: PUSH
22023: LD_VAR 0 1
22027: ARRAY
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22033: LD_VAR 0 8
22037: PPUSH
22038: CALL_OW 301
22042: PUSH
22043: LD_VAR 0 5
22047: PUSH
22048: LD_VAR 0 8
22052: PPUSH
22053: CALL_OW 255
22057: NONEQUAL
22058: OR
22059: IFFALSE 22088
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22061: LD_ADDR_EXP 88
22065: PUSH
22066: LD_EXP 88
22070: PPUSH
22071: LD_VAR 0 8
22075: PPUSH
22076: LD_INT 0
22078: PPUSH
22079: CALL_OW 1
22083: ST_TO_ADDR
// exit ;
22084: POP
22085: POP
22086: GO 22619
// end ; x := list [ i ] [ 3 ] ;
22088: LD_ADDR_VAR 0 6
22092: PUSH
22093: LD_VAR 0 3
22097: PUSH
22098: LD_VAR 0 1
22102: ARRAY
22103: PUSH
22104: LD_INT 3
22106: ARRAY
22107: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22108: LD_ADDR_VAR 0 7
22112: PUSH
22113: LD_VAR 0 3
22117: PUSH
22118: LD_VAR 0 1
22122: ARRAY
22123: PUSH
22124: LD_INT 4
22126: ARRAY
22127: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22128: LD_ADDR_VAR 0 9
22132: PUSH
22133: LD_VAR 0 6
22137: PPUSH
22138: LD_VAR 0 7
22142: PPUSH
22143: LD_INT 16
22145: PPUSH
22146: CALL 66549 0 3
22150: ST_TO_ADDR
// if not cratesNearbyPoint then
22151: LD_VAR 0 9
22155: NOT
22156: IFFALSE 22162
// exit ;
22158: POP
22159: POP
22160: GO 22619
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22162: LD_ADDR_VAR 0 4
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_VAR 0 5
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: LD_INT 60
22184: PUSH
22185: EMPTY
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 91
22194: PUSH
22195: LD_VAR 0 8
22199: PUSH
22200: LD_INT 6
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 25
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 16
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PPUSH
22242: CALL_OW 69
22246: PUSH
22247: LD_VAR 0 8
22251: PPUSH
22252: CALL_OW 313
22256: PPUSH
22257: LD_INT 3
22259: PUSH
22260: LD_INT 60
22262: PUSH
22263: EMPTY
22264: LIST
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: LD_INT 25
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 25
22285: PUSH
22286: LD_INT 16
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 72
22306: UNION
22307: ST_TO_ADDR
// if tmp then
22308: LD_VAR 0 4
22312: IFFALSE 22392
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: LD_VAR 0 4
22323: PPUSH
22324: LD_INT 3
22326: PPUSH
22327: CALL 64518 0 2
22331: ST_TO_ADDR
// for j in tmp do
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_VAR 0 4
22341: PUSH
22342: FOR_IN
22343: IFFALSE 22386
// begin if IsInUnit ( j ) then
22345: LD_VAR 0 2
22349: PPUSH
22350: CALL_OW 310
22354: IFFALSE 22365
// ComExit ( j ) ;
22356: LD_VAR 0 2
22360: PPUSH
22361: CALL 64601 0 1
// AddComCollect ( j , x , y ) ;
22365: LD_VAR 0 2
22369: PPUSH
22370: LD_VAR 0 6
22374: PPUSH
22375: LD_VAR 0 7
22379: PPUSH
22380: CALL_OW 177
// end ;
22384: GO 22342
22386: POP
22387: POP
// exit ;
22388: POP
22389: POP
22390: GO 22619
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_INT 22
22399: PUSH
22400: LD_VAR 0 5
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 91
22411: PUSH
22412: LD_VAR 0 8
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 34
22430: PUSH
22431: LD_INT 12
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: LD_INT 51
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 34
22450: PUSH
22451: LD_INT 32
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 34
22460: PUSH
22461: LD_INT 89
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 69
22484: ST_TO_ADDR
// if tmp then
22485: LD_VAR 0 4
22489: IFFALSE 22615
// begin for j in tmp do
22491: LD_ADDR_VAR 0 2
22495: PUSH
22496: LD_VAR 0 4
22500: PUSH
22501: FOR_IN
22502: IFFALSE 22613
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22504: LD_VAR 0 2
22508: PPUSH
22509: CALL_OW 262
22513: PUSH
22514: LD_INT 3
22516: EQUAL
22517: PUSH
22518: LD_VAR 0 2
22522: PPUSH
22523: CALL_OW 261
22527: PUSH
22528: LD_INT 20
22530: GREATER
22531: OR
22532: PUSH
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 314
22542: NOT
22543: AND
22544: PUSH
22545: LD_VAR 0 2
22549: PPUSH
22550: CALL_OW 263
22554: PUSH
22555: LD_INT 1
22557: NONEQUAL
22558: PUSH
22559: LD_VAR 0 2
22563: PPUSH
22564: CALL_OW 311
22568: OR
22569: AND
22570: IFFALSE 22611
// begin ComCollect ( j , x , y ) ;
22572: LD_VAR 0 2
22576: PPUSH
22577: LD_VAR 0 6
22581: PPUSH
22582: LD_VAR 0 7
22586: PPUSH
22587: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22591: LD_VAR 0 2
22595: PPUSH
22596: LD_VAR 0 8
22600: PPUSH
22601: CALL_OW 172
// exit ;
22605: POP
22606: POP
22607: POP
22608: POP
22609: GO 22619
// end ;
22611: GO 22501
22613: POP
22614: POP
// end ; end ;
22615: GO 21990
22617: POP
22618: POP
// end ; end_of_file
22619: PPOPN 9
22621: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
22626: PPUSH
22627: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22628: LD_VAR 0 1
22632: PPUSH
22633: CALL_OW 264
22637: PUSH
22638: LD_INT 91
22640: EQUAL
22641: IFFALSE 22713
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22643: LD_INT 68
22645: PPUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL_OW 255
22655: PPUSH
22656: CALL_OW 321
22660: PUSH
22661: LD_INT 2
22663: EQUAL
22664: IFFALSE 22676
// eff := 70 else
22666: LD_ADDR_VAR 0 4
22670: PUSH
22671: LD_INT 70
22673: ST_TO_ADDR
22674: GO 22684
// eff := 30 ;
22676: LD_ADDR_VAR 0 4
22680: PUSH
22681: LD_INT 30
22683: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 250
22693: PPUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 251
22703: PPUSH
22704: LD_VAR 0 4
22708: PPUSH
22709: CALL_OW 495
// end ; end ;
22713: LD_VAR 0 2
22717: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22718: LD_INT 0
22720: PPUSH
// end ;
22721: LD_VAR 0 4
22725: RET
// export function SOS_Command ( cmd ) ; begin
22726: LD_INT 0
22728: PPUSH
// end ;
22729: LD_VAR 0 2
22733: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22734: LD_INT 0
22736: PPUSH
// end ;
22737: LD_VAR 0 6
22741: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
// if not vehicle or not factory then
22746: LD_VAR 0 1
22750: NOT
22751: PUSH
22752: LD_VAR 0 2
22756: NOT
22757: OR
22758: IFFALSE 22762
// exit ;
22760: GO 22993
// if factoryWaypoints >= factory then
22762: LD_EXP 87
22766: PUSH
22767: LD_VAR 0 2
22771: GREATEREQUAL
22772: IFFALSE 22993
// if factoryWaypoints [ factory ] then
22774: LD_EXP 87
22778: PUSH
22779: LD_VAR 0 2
22783: ARRAY
22784: IFFALSE 22993
// begin if GetControl ( vehicle ) = control_manual then
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 263
22795: PUSH
22796: LD_INT 1
22798: EQUAL
22799: IFFALSE 22880
// begin driver := IsDrivenBy ( vehicle ) ;
22801: LD_ADDR_VAR 0 4
22805: PUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL_OW 311
22815: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22816: LD_VAR 0 4
22820: PPUSH
22821: LD_EXP 87
22825: PUSH
22826: LD_VAR 0 2
22830: ARRAY
22831: PUSH
22832: LD_INT 3
22834: ARRAY
22835: PPUSH
22836: LD_EXP 87
22840: PUSH
22841: LD_VAR 0 2
22845: ARRAY
22846: PUSH
22847: LD_INT 4
22849: ARRAY
22850: PPUSH
22851: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22855: LD_VAR 0 4
22859: PPUSH
22860: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22864: LD_VAR 0 4
22868: PPUSH
22869: LD_VAR 0 2
22873: PPUSH
22874: CALL_OW 180
// end else
22878: GO 22993
// if GetControl ( vehicle ) = control_remote then
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 263
22889: PUSH
22890: LD_INT 2
22892: EQUAL
22893: IFFALSE 22954
// begin wait ( 0 0$2 ) ;
22895: LD_INT 70
22897: PPUSH
22898: CALL_OW 67
// if Connect ( vehicle ) then
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL 34842 0 1
22911: IFFALSE 22952
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_EXP 87
22922: PUSH
22923: LD_VAR 0 2
22927: ARRAY
22928: PUSH
22929: LD_INT 3
22931: ARRAY
22932: PPUSH
22933: LD_EXP 87
22937: PUSH
22938: LD_VAR 0 2
22942: ARRAY
22943: PUSH
22944: LD_INT 4
22946: ARRAY
22947: PPUSH
22948: CALL_OW 171
// end else
22952: GO 22993
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22954: LD_VAR 0 1
22958: PPUSH
22959: LD_EXP 87
22963: PUSH
22964: LD_VAR 0 2
22968: ARRAY
22969: PUSH
22970: LD_INT 3
22972: ARRAY
22973: PPUSH
22974: LD_EXP 87
22978: PUSH
22979: LD_VAR 0 2
22983: ARRAY
22984: PUSH
22985: LD_INT 4
22987: ARRAY
22988: PPUSH
22989: CALL_OW 171
// end ; end ;
22993: LD_VAR 0 3
22997: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22998: LD_INT 0
23000: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23001: LD_VAR 0 1
23005: PUSH
23006: LD_INT 250
23008: EQUAL
23009: PUSH
23010: LD_VAR 0 2
23014: PPUSH
23015: CALL_OW 264
23019: PUSH
23020: LD_INT 81
23022: EQUAL
23023: AND
23024: IFFALSE 23045
// MinerPlaceMine ( unit , x , y ) ;
23026: LD_VAR 0 2
23030: PPUSH
23031: LD_VAR 0 4
23035: PPUSH
23036: LD_VAR 0 5
23040: PPUSH
23041: CALL 25430 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23045: LD_VAR 0 1
23049: PUSH
23050: LD_INT 251
23052: EQUAL
23053: PUSH
23054: LD_VAR 0 2
23058: PPUSH
23059: CALL_OW 264
23063: PUSH
23064: LD_INT 81
23066: EQUAL
23067: AND
23068: IFFALSE 23089
// MinerDetonateMine ( unit , x , y ) ;
23070: LD_VAR 0 2
23074: PPUSH
23075: LD_VAR 0 4
23079: PPUSH
23080: LD_VAR 0 5
23084: PPUSH
23085: CALL 25705 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23089: LD_VAR 0 1
23093: PUSH
23094: LD_INT 252
23096: EQUAL
23097: PUSH
23098: LD_VAR 0 2
23102: PPUSH
23103: CALL_OW 264
23107: PUSH
23108: LD_INT 81
23110: EQUAL
23111: AND
23112: IFFALSE 23133
// MinerCreateMinefield ( unit , x , y ) ;
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: LD_VAR 0 5
23128: PPUSH
23129: CALL 26122 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23133: LD_VAR 0 1
23137: PUSH
23138: LD_INT 253
23140: EQUAL
23141: PUSH
23142: LD_VAR 0 2
23146: PPUSH
23147: CALL_OW 257
23151: PUSH
23152: LD_INT 5
23154: EQUAL
23155: AND
23156: IFFALSE 23177
// ComBinocular ( unit , x , y ) ;
23158: LD_VAR 0 2
23162: PPUSH
23163: LD_VAR 0 4
23167: PPUSH
23168: LD_VAR 0 5
23172: PPUSH
23173: CALL 26491 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23177: LD_VAR 0 1
23181: PUSH
23182: LD_INT 254
23184: EQUAL
23185: PUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: CALL_OW 264
23195: PUSH
23196: LD_INT 99
23198: EQUAL
23199: AND
23200: PUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: CALL_OW 263
23210: PUSH
23211: LD_INT 3
23213: EQUAL
23214: AND
23215: IFFALSE 23231
// HackDestroyVehicle ( unit , selectedUnit ) ;
23217: LD_VAR 0 2
23221: PPUSH
23222: LD_VAR 0 3
23226: PPUSH
23227: CALL 24794 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23231: LD_VAR 0 1
23235: PUSH
23236: LD_INT 255
23238: EQUAL
23239: PUSH
23240: LD_VAR 0 2
23244: PPUSH
23245: CALL_OW 264
23249: PUSH
23250: LD_INT 14
23252: PUSH
23253: LD_INT 53
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: IN
23260: AND
23261: PUSH
23262: LD_VAR 0 4
23266: PPUSH
23267: LD_VAR 0 5
23271: PPUSH
23272: CALL_OW 488
23276: AND
23277: IFFALSE 23301
// CutTreeXYR ( unit , x , y , 12 ) ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_VAR 0 4
23288: PPUSH
23289: LD_VAR 0 5
23293: PPUSH
23294: LD_INT 12
23296: PPUSH
23297: CALL 23364 0 4
// if cmd = 256 then
23301: LD_VAR 0 1
23305: PUSH
23306: LD_INT 256
23308: EQUAL
23309: IFFALSE 23330
// SetFactoryWaypoint ( unit , x , y ) ;
23311: LD_VAR 0 2
23315: PPUSH
23316: LD_VAR 0 4
23320: PPUSH
23321: LD_VAR 0 5
23325: PPUSH
23326: CALL 21311 0 3
// if cmd = 257 then
23330: LD_VAR 0 1
23334: PUSH
23335: LD_INT 257
23337: EQUAL
23338: IFFALSE 23359
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 4
23349: PPUSH
23350: LD_VAR 0 5
23354: PPUSH
23355: CALL 21673 0 3
// end ;
23359: LD_VAR 0 6
23363: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
23373: PPUSH
23374: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23375: LD_VAR 0 1
23379: NOT
23380: PUSH
23381: LD_VAR 0 2
23385: PPUSH
23386: LD_VAR 0 3
23390: PPUSH
23391: CALL_OW 488
23395: NOT
23396: OR
23397: PUSH
23398: LD_VAR 0 4
23402: NOT
23403: OR
23404: IFFALSE 23408
// exit ;
23406: GO 23748
// list := [ ] ;
23408: LD_ADDR_VAR 0 13
23412: PUSH
23413: EMPTY
23414: ST_TO_ADDR
// if x - r < 0 then
23415: LD_VAR 0 2
23419: PUSH
23420: LD_VAR 0 4
23424: MINUS
23425: PUSH
23426: LD_INT 0
23428: LESS
23429: IFFALSE 23441
// min_x := 0 else
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_INT 0
23438: ST_TO_ADDR
23439: GO 23457
// min_x := x - r ;
23441: LD_ADDR_VAR 0 7
23445: PUSH
23446: LD_VAR 0 2
23450: PUSH
23451: LD_VAR 0 4
23455: MINUS
23456: ST_TO_ADDR
// if y - r < 0 then
23457: LD_VAR 0 3
23461: PUSH
23462: LD_VAR 0 4
23466: MINUS
23467: PUSH
23468: LD_INT 0
23470: LESS
23471: IFFALSE 23483
// min_y := 0 else
23473: LD_ADDR_VAR 0 8
23477: PUSH
23478: LD_INT 0
23480: ST_TO_ADDR
23481: GO 23499
// min_y := y - r ;
23483: LD_ADDR_VAR 0 8
23487: PUSH
23488: LD_VAR 0 3
23492: PUSH
23493: LD_VAR 0 4
23497: MINUS
23498: ST_TO_ADDR
// max_x := x + r ;
23499: LD_ADDR_VAR 0 9
23503: PUSH
23504: LD_VAR 0 2
23508: PUSH
23509: LD_VAR 0 4
23513: PLUS
23514: ST_TO_ADDR
// max_y := y + r ;
23515: LD_ADDR_VAR 0 10
23519: PUSH
23520: LD_VAR 0 3
23524: PUSH
23525: LD_VAR 0 4
23529: PLUS
23530: ST_TO_ADDR
// for _x = min_x to max_x do
23531: LD_ADDR_VAR 0 11
23535: PUSH
23536: DOUBLE
23537: LD_VAR 0 7
23541: DEC
23542: ST_TO_ADDR
23543: LD_VAR 0 9
23547: PUSH
23548: FOR_TO
23549: IFFALSE 23666
// for _y = min_y to max_y do
23551: LD_ADDR_VAR 0 12
23555: PUSH
23556: DOUBLE
23557: LD_VAR 0 8
23561: DEC
23562: ST_TO_ADDR
23563: LD_VAR 0 10
23567: PUSH
23568: FOR_TO
23569: IFFALSE 23662
// begin if not ValidHex ( _x , _y ) then
23571: LD_VAR 0 11
23575: PPUSH
23576: LD_VAR 0 12
23580: PPUSH
23581: CALL_OW 488
23585: NOT
23586: IFFALSE 23590
// continue ;
23588: GO 23568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23590: LD_VAR 0 11
23594: PPUSH
23595: LD_VAR 0 12
23599: PPUSH
23600: CALL_OW 351
23604: PUSH
23605: LD_VAR 0 11
23609: PPUSH
23610: LD_VAR 0 12
23614: PPUSH
23615: CALL_OW 554
23619: AND
23620: IFFALSE 23660
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23622: LD_ADDR_VAR 0 13
23626: PUSH
23627: LD_VAR 0 13
23631: PPUSH
23632: LD_VAR 0 13
23636: PUSH
23637: LD_INT 1
23639: PLUS
23640: PPUSH
23641: LD_VAR 0 11
23645: PUSH
23646: LD_VAR 0 12
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PPUSH
23655: CALL_OW 2
23659: ST_TO_ADDR
// end ;
23660: GO 23568
23662: POP
23663: POP
23664: GO 23548
23666: POP
23667: POP
// if not list then
23668: LD_VAR 0 13
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23748
// for i in list do
23677: LD_ADDR_VAR 0 6
23681: PUSH
23682: LD_VAR 0 13
23686: PUSH
23687: FOR_IN
23688: IFFALSE 23746
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23690: LD_VAR 0 1
23694: PPUSH
23695: LD_STRING M
23697: PUSH
23698: LD_VAR 0 6
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PUSH
23707: LD_VAR 0 6
23711: PUSH
23712: LD_INT 2
23714: ARRAY
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: PPUSH
23740: CALL_OW 447
23744: GO 23687
23746: POP
23747: POP
// end ;
23748: LD_VAR 0 5
23752: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23753: LD_EXP 90
23757: NOT
23758: IFFALSE 23808
23760: GO 23762
23762: DISABLE
// begin initHack := true ;
23763: LD_ADDR_EXP 90
23767: PUSH
23768: LD_INT 1
23770: ST_TO_ADDR
// hackTanks := [ ] ;
23771: LD_ADDR_EXP 91
23775: PUSH
23776: EMPTY
23777: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23778: LD_ADDR_EXP 92
23782: PUSH
23783: EMPTY
23784: ST_TO_ADDR
// hackLimit := 3 ;
23785: LD_ADDR_EXP 93
23789: PUSH
23790: LD_INT 3
23792: ST_TO_ADDR
// hackDist := 12 ;
23793: LD_ADDR_EXP 94
23797: PUSH
23798: LD_INT 12
23800: ST_TO_ADDR
// hackCounter := [ ] ;
23801: LD_ADDR_EXP 95
23805: PUSH
23806: EMPTY
23807: ST_TO_ADDR
// end ;
23808: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23809: LD_EXP 90
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_INT 99
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PPUSH
23824: CALL_OW 69
23828: AND
23829: IFFALSE 24082
23831: GO 23833
23833: DISABLE
23834: LD_INT 0
23836: PPUSH
23837: PPUSH
// begin enable ;
23838: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23839: LD_ADDR_VAR 0 1
23843: PUSH
23844: LD_INT 34
23846: PUSH
23847: LD_INT 99
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PPUSH
23854: CALL_OW 69
23858: PUSH
23859: FOR_IN
23860: IFFALSE 24080
// begin if not i in hackTanks then
23862: LD_VAR 0 1
23866: PUSH
23867: LD_EXP 91
23871: IN
23872: NOT
23873: IFFALSE 23956
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23875: LD_ADDR_EXP 91
23879: PUSH
23880: LD_EXP 91
23884: PPUSH
23885: LD_EXP 91
23889: PUSH
23890: LD_INT 1
23892: PLUS
23893: PPUSH
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 1
23903: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23904: LD_ADDR_EXP 92
23908: PUSH
23909: LD_EXP 92
23913: PPUSH
23914: LD_EXP 92
23918: PUSH
23919: LD_INT 1
23921: PLUS
23922: PPUSH
23923: EMPTY
23924: PPUSH
23925: CALL_OW 1
23929: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23930: LD_ADDR_EXP 95
23934: PUSH
23935: LD_EXP 95
23939: PPUSH
23940: LD_EXP 95
23944: PUSH
23945: LD_INT 1
23947: PLUS
23948: PPUSH
23949: EMPTY
23950: PPUSH
23951: CALL_OW 1
23955: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 302
23965: NOT
23966: IFFALSE 23979
// begin HackUnlinkAll ( i ) ;
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL 24085 0 1
// continue ;
23977: GO 23859
// end ; HackCheckCapturedStatus ( i ) ;
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL 24528 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23988: LD_ADDR_VAR 0 2
23992: PUSH
23993: LD_INT 81
23995: PUSH
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 255
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 33
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 91
24022: PUSH
24023: LD_VAR 0 1
24027: PUSH
24028: LD_EXP 94
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 50
24040: PUSH
24041: EMPTY
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: PPUSH
24050: CALL_OW 69
24054: ST_TO_ADDR
// if not tmp then
24055: LD_VAR 0 2
24059: NOT
24060: IFFALSE 24064
// continue ;
24062: GO 23859
// HackLink ( i , tmp ) ;
24064: LD_VAR 0 1
24068: PPUSH
24069: LD_VAR 0 2
24073: PPUSH
24074: CALL 24221 0 2
// end ;
24078: GO 23859
24080: POP
24081: POP
// end ;
24082: PPOPN 2
24084: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24085: LD_INT 0
24087: PPUSH
24088: PPUSH
24089: PPUSH
// if not hack in hackTanks then
24090: LD_VAR 0 1
24094: PUSH
24095: LD_EXP 91
24099: IN
24100: NOT
24101: IFFALSE 24105
// exit ;
24103: GO 24216
// index := GetElementIndex ( hackTanks , hack ) ;
24105: LD_ADDR_VAR 0 4
24109: PUSH
24110: LD_EXP 91
24114: PPUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL 31658 0 2
24124: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24125: LD_EXP 92
24129: PUSH
24130: LD_VAR 0 4
24134: ARRAY
24135: IFFALSE 24216
// begin for i in hackTanksCaptured [ index ] do
24137: LD_ADDR_VAR 0 3
24141: PUSH
24142: LD_EXP 92
24146: PUSH
24147: LD_VAR 0 4
24151: ARRAY
24152: PUSH
24153: FOR_IN
24154: IFFALSE 24180
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24156: LD_VAR 0 3
24160: PUSH
24161: LD_INT 1
24163: ARRAY
24164: PPUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_INT 2
24172: ARRAY
24173: PPUSH
24174: CALL_OW 235
24178: GO 24153
24180: POP
24181: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24182: LD_ADDR_EXP 92
24186: PUSH
24187: LD_EXP 92
24191: PPUSH
24192: LD_VAR 0 4
24196: PPUSH
24197: EMPTY
24198: PPUSH
24199: CALL_OW 1
24203: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24204: LD_VAR 0 1
24208: PPUSH
24209: LD_INT 0
24211: PPUSH
24212: CALL_OW 505
// end ; end ;
24216: LD_VAR 0 2
24220: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24221: LD_INT 0
24223: PPUSH
24224: PPUSH
24225: PPUSH
// if not hack in hackTanks or not vehicles then
24226: LD_VAR 0 1
24230: PUSH
24231: LD_EXP 91
24235: IN
24236: NOT
24237: PUSH
24238: LD_VAR 0 2
24242: NOT
24243: OR
24244: IFFALSE 24248
// exit ;
24246: GO 24523
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24248: LD_ADDR_VAR 0 2
24252: PUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 1
24265: PPUSH
24266: LD_INT 1
24268: PPUSH
24269: CALL 32308 0 4
24273: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24274: LD_ADDR_VAR 0 5
24278: PUSH
24279: LD_EXP 91
24283: PPUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL 31658 0 2
24293: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24294: LD_EXP 92
24298: PUSH
24299: LD_VAR 0 5
24303: ARRAY
24304: PUSH
24305: LD_EXP 93
24309: LESS
24310: IFFALSE 24499
// begin for i := 1 to vehicles do
24312: LD_ADDR_VAR 0 4
24316: PUSH
24317: DOUBLE
24318: LD_INT 1
24320: DEC
24321: ST_TO_ADDR
24322: LD_VAR 0 2
24326: PUSH
24327: FOR_TO
24328: IFFALSE 24497
// begin if hackTanksCaptured [ index ] = hackLimit then
24330: LD_EXP 92
24334: PUSH
24335: LD_VAR 0 5
24339: ARRAY
24340: PUSH
24341: LD_EXP 93
24345: EQUAL
24346: IFFALSE 24350
// break ;
24348: GO 24497
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24350: LD_ADDR_EXP 95
24354: PUSH
24355: LD_EXP 95
24359: PPUSH
24360: LD_VAR 0 5
24364: PPUSH
24365: LD_EXP 95
24369: PUSH
24370: LD_VAR 0 5
24374: ARRAY
24375: PUSH
24376: LD_INT 1
24378: PLUS
24379: PPUSH
24380: CALL_OW 1
24384: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24385: LD_ADDR_EXP 92
24389: PUSH
24390: LD_EXP 92
24394: PPUSH
24395: LD_VAR 0 5
24399: PUSH
24400: LD_EXP 92
24404: PUSH
24405: LD_VAR 0 5
24409: ARRAY
24410: PUSH
24411: LD_INT 1
24413: PLUS
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PPUSH
24419: LD_VAR 0 2
24423: PUSH
24424: LD_VAR 0 4
24428: ARRAY
24429: PUSH
24430: LD_VAR 0 2
24434: PUSH
24435: LD_VAR 0 4
24439: ARRAY
24440: PPUSH
24441: CALL_OW 255
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PPUSH
24450: CALL 31873 0 3
24454: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24455: LD_VAR 0 2
24459: PUSH
24460: LD_VAR 0 4
24464: ARRAY
24465: PPUSH
24466: LD_VAR 0 1
24470: PPUSH
24471: CALL_OW 255
24475: PPUSH
24476: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24480: LD_VAR 0 2
24484: PUSH
24485: LD_VAR 0 4
24489: ARRAY
24490: PPUSH
24491: CALL_OW 141
// end ;
24495: GO 24327
24497: POP
24498: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24499: LD_VAR 0 1
24503: PPUSH
24504: LD_EXP 92
24508: PUSH
24509: LD_VAR 0 5
24513: ARRAY
24514: PUSH
24515: LD_INT 0
24517: PLUS
24518: PPUSH
24519: CALL_OW 505
// end ;
24523: LD_VAR 0 3
24527: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24528: LD_INT 0
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
// if not hack in hackTanks then
24534: LD_VAR 0 1
24538: PUSH
24539: LD_EXP 91
24543: IN
24544: NOT
24545: IFFALSE 24549
// exit ;
24547: GO 24789
// index := GetElementIndex ( hackTanks , hack ) ;
24549: LD_ADDR_VAR 0 4
24553: PUSH
24554: LD_EXP 91
24558: PPUSH
24559: LD_VAR 0 1
24563: PPUSH
24564: CALL 31658 0 2
24568: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: DOUBLE
24575: LD_EXP 92
24579: PUSH
24580: LD_VAR 0 4
24584: ARRAY
24585: INC
24586: ST_TO_ADDR
24587: LD_INT 1
24589: PUSH
24590: FOR_DOWNTO
24591: IFFALSE 24763
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24593: LD_ADDR_VAR 0 5
24597: PUSH
24598: LD_EXP 92
24602: PUSH
24603: LD_VAR 0 4
24607: ARRAY
24608: PUSH
24609: LD_VAR 0 3
24613: ARRAY
24614: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24615: LD_VAR 0 5
24619: PUSH
24620: LD_INT 1
24622: ARRAY
24623: PPUSH
24624: CALL_OW 302
24628: NOT
24629: PUSH
24630: LD_VAR 0 5
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: PPUSH
24639: CALL_OW 255
24643: PUSH
24644: LD_VAR 0 1
24648: PPUSH
24649: CALL_OW 255
24653: NONEQUAL
24654: OR
24655: IFFALSE 24761
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24657: LD_VAR 0 5
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: PPUSH
24666: CALL_OW 305
24670: PUSH
24671: LD_VAR 0 5
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: PPUSH
24680: CALL_OW 255
24684: PUSH
24685: LD_VAR 0 1
24689: PPUSH
24690: CALL_OW 255
24694: EQUAL
24695: AND
24696: IFFALSE 24720
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24698: LD_VAR 0 5
24702: PUSH
24703: LD_INT 1
24705: ARRAY
24706: PPUSH
24707: LD_VAR 0 5
24711: PUSH
24712: LD_INT 2
24714: ARRAY
24715: PPUSH
24716: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24720: LD_ADDR_EXP 92
24724: PUSH
24725: LD_EXP 92
24729: PPUSH
24730: LD_VAR 0 4
24734: PPUSH
24735: LD_EXP 92
24739: PUSH
24740: LD_VAR 0 4
24744: ARRAY
24745: PPUSH
24746: LD_VAR 0 3
24750: PPUSH
24751: CALL_OW 3
24755: PPUSH
24756: CALL_OW 1
24760: ST_TO_ADDR
// end ; end ;
24761: GO 24590
24763: POP
24764: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24765: LD_VAR 0 1
24769: PPUSH
24770: LD_EXP 92
24774: PUSH
24775: LD_VAR 0 4
24779: ARRAY
24780: PUSH
24781: LD_INT 0
24783: PLUS
24784: PPUSH
24785: CALL_OW 505
// end ;
24789: LD_VAR 0 2
24793: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24794: LD_INT 0
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
// if not hack in hackTanks then
24800: LD_VAR 0 1
24804: PUSH
24805: LD_EXP 91
24809: IN
24810: NOT
24811: IFFALSE 24815
// exit ;
24813: GO 24900
// index := GetElementIndex ( hackTanks , hack ) ;
24815: LD_ADDR_VAR 0 5
24819: PUSH
24820: LD_EXP 91
24824: PPUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL 31658 0 2
24834: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24835: LD_ADDR_VAR 0 4
24839: PUSH
24840: DOUBLE
24841: LD_INT 1
24843: DEC
24844: ST_TO_ADDR
24845: LD_EXP 92
24849: PUSH
24850: LD_VAR 0 5
24854: ARRAY
24855: PUSH
24856: FOR_TO
24857: IFFALSE 24898
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24859: LD_EXP 92
24863: PUSH
24864: LD_VAR 0 5
24868: ARRAY
24869: PUSH
24870: LD_VAR 0 4
24874: ARRAY
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PUSH
24880: LD_VAR 0 2
24884: EQUAL
24885: IFFALSE 24896
// KillUnit ( vehicle ) ;
24887: LD_VAR 0 2
24891: PPUSH
24892: CALL_OW 66
24896: GO 24856
24898: POP
24899: POP
// end ;
24900: LD_VAR 0 3
24904: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24905: LD_EXP 96
24909: NOT
24910: IFFALSE 24945
24912: GO 24914
24914: DISABLE
// begin initMiner := true ;
24915: LD_ADDR_EXP 96
24919: PUSH
24920: LD_INT 1
24922: ST_TO_ADDR
// minersList := [ ] ;
24923: LD_ADDR_EXP 97
24927: PUSH
24928: EMPTY
24929: ST_TO_ADDR
// minerMinesList := [ ] ;
24930: LD_ADDR_EXP 98
24934: PUSH
24935: EMPTY
24936: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24937: LD_ADDR_EXP 99
24941: PUSH
24942: LD_INT 5
24944: ST_TO_ADDR
// end ;
24945: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24946: LD_EXP 96
24950: PUSH
24951: LD_INT 34
24953: PUSH
24954: LD_INT 81
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: AND
24966: IFFALSE 25427
24968: GO 24970
24970: DISABLE
24971: LD_INT 0
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
// begin enable ;
24977: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24978: LD_ADDR_VAR 0 1
24982: PUSH
24983: LD_INT 34
24985: PUSH
24986: LD_INT 81
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PPUSH
24993: CALL_OW 69
24997: PUSH
24998: FOR_IN
24999: IFFALSE 25071
// begin if not i in minersList then
25001: LD_VAR 0 1
25005: PUSH
25006: LD_EXP 97
25010: IN
25011: NOT
25012: IFFALSE 25069
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25014: LD_ADDR_EXP 97
25018: PUSH
25019: LD_EXP 97
25023: PPUSH
25024: LD_EXP 97
25028: PUSH
25029: LD_INT 1
25031: PLUS
25032: PPUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 1
25042: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25043: LD_ADDR_EXP 98
25047: PUSH
25048: LD_EXP 98
25052: PPUSH
25053: LD_EXP 98
25057: PUSH
25058: LD_INT 1
25060: PLUS
25061: PPUSH
25062: EMPTY
25063: PPUSH
25064: CALL_OW 1
25068: ST_TO_ADDR
// end end ;
25069: GO 24998
25071: POP
25072: POP
// for i := minerMinesList downto 1 do
25073: LD_ADDR_VAR 0 1
25077: PUSH
25078: DOUBLE
25079: LD_EXP 98
25083: INC
25084: ST_TO_ADDR
25085: LD_INT 1
25087: PUSH
25088: FOR_DOWNTO
25089: IFFALSE 25425
// begin if IsLive ( minersList [ i ] ) then
25091: LD_EXP 97
25095: PUSH
25096: LD_VAR 0 1
25100: ARRAY
25101: PPUSH
25102: CALL_OW 300
25106: IFFALSE 25134
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25108: LD_EXP 97
25112: PUSH
25113: LD_VAR 0 1
25117: ARRAY
25118: PPUSH
25119: LD_EXP 98
25123: PUSH
25124: LD_VAR 0 1
25128: ARRAY
25129: PPUSH
25130: CALL_OW 505
// if not minerMinesList [ i ] then
25134: LD_EXP 98
25138: PUSH
25139: LD_VAR 0 1
25143: ARRAY
25144: NOT
25145: IFFALSE 25149
// continue ;
25147: GO 25088
// for j := minerMinesList [ i ] downto 1 do
25149: LD_ADDR_VAR 0 2
25153: PUSH
25154: DOUBLE
25155: LD_EXP 98
25159: PUSH
25160: LD_VAR 0 1
25164: ARRAY
25165: INC
25166: ST_TO_ADDR
25167: LD_INT 1
25169: PUSH
25170: FOR_DOWNTO
25171: IFFALSE 25421
// begin side := GetSide ( minersList [ i ] ) ;
25173: LD_ADDR_VAR 0 3
25177: PUSH
25178: LD_EXP 97
25182: PUSH
25183: LD_VAR 0 1
25187: ARRAY
25188: PPUSH
25189: CALL_OW 255
25193: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25194: LD_ADDR_VAR 0 4
25198: PUSH
25199: LD_EXP 98
25203: PUSH
25204: LD_VAR 0 1
25208: ARRAY
25209: PUSH
25210: LD_VAR 0 2
25214: ARRAY
25215: PUSH
25216: LD_INT 1
25218: ARRAY
25219: PPUSH
25220: LD_EXP 98
25224: PUSH
25225: LD_VAR 0 1
25229: ARRAY
25230: PUSH
25231: LD_VAR 0 2
25235: ARRAY
25236: PUSH
25237: LD_INT 2
25239: ARRAY
25240: PPUSH
25241: CALL_OW 428
25245: ST_TO_ADDR
// if not tmp then
25246: LD_VAR 0 4
25250: NOT
25251: IFFALSE 25255
// continue ;
25253: GO 25170
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25255: LD_VAR 0 4
25259: PUSH
25260: LD_INT 81
25262: PUSH
25263: LD_VAR 0 3
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PPUSH
25272: CALL_OW 69
25276: IN
25277: PUSH
25278: LD_EXP 98
25282: PUSH
25283: LD_VAR 0 1
25287: ARRAY
25288: PUSH
25289: LD_VAR 0 2
25293: ARRAY
25294: PUSH
25295: LD_INT 1
25297: ARRAY
25298: PPUSH
25299: LD_EXP 98
25303: PUSH
25304: LD_VAR 0 1
25308: ARRAY
25309: PUSH
25310: LD_VAR 0 2
25314: ARRAY
25315: PUSH
25316: LD_INT 2
25318: ARRAY
25319: PPUSH
25320: CALL_OW 458
25324: AND
25325: IFFALSE 25419
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25327: LD_EXP 98
25331: PUSH
25332: LD_VAR 0 1
25336: ARRAY
25337: PUSH
25338: LD_VAR 0 2
25342: ARRAY
25343: PUSH
25344: LD_INT 1
25346: ARRAY
25347: PPUSH
25348: LD_EXP 98
25352: PUSH
25353: LD_VAR 0 1
25357: ARRAY
25358: PUSH
25359: LD_VAR 0 2
25363: ARRAY
25364: PUSH
25365: LD_INT 2
25367: ARRAY
25368: PPUSH
25369: LD_VAR 0 3
25373: PPUSH
25374: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25378: LD_ADDR_EXP 98
25382: PUSH
25383: LD_EXP 98
25387: PPUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: LD_EXP 98
25397: PUSH
25398: LD_VAR 0 1
25402: ARRAY
25403: PPUSH
25404: LD_VAR 0 2
25408: PPUSH
25409: CALL_OW 3
25413: PPUSH
25414: CALL_OW 1
25418: ST_TO_ADDR
// end ; end ;
25419: GO 25170
25421: POP
25422: POP
// end ;
25423: GO 25088
25425: POP
25426: POP
// end ;
25427: PPOPN 4
25429: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25430: LD_INT 0
25432: PPUSH
25433: PPUSH
// result := false ;
25434: LD_ADDR_VAR 0 4
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 264
25451: PUSH
25452: LD_INT 81
25454: EQUAL
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25700
// index := GetElementIndex ( minersList , unit ) ;
25460: LD_ADDR_VAR 0 5
25464: PUSH
25465: LD_EXP 97
25469: PPUSH
25470: LD_VAR 0 1
25474: PPUSH
25475: CALL 31658 0 2
25479: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25480: LD_EXP 98
25484: PUSH
25485: LD_VAR 0 5
25489: ARRAY
25490: PUSH
25491: LD_EXP 99
25495: GREATEREQUAL
25496: IFFALSE 25500
// exit ;
25498: GO 25700
// ComMoveXY ( unit , x , y ) ;
25500: LD_VAR 0 1
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25519: LD_INT 35
25521: PPUSH
25522: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: CALL 63013 0 3
25545: NOT
25546: PUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL_OW 314
25556: AND
25557: IFFALSE 25561
// exit ;
25559: GO 25700
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25561: LD_VAR 0 2
25565: PPUSH
25566: LD_VAR 0 3
25570: PPUSH
25571: CALL_OW 428
25575: PUSH
25576: LD_VAR 0 1
25580: EQUAL
25581: PUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 314
25591: NOT
25592: AND
25593: IFFALSE 25519
// PlaySoundXY ( x , y , PlantMine ) ;
25595: LD_VAR 0 2
25599: PPUSH
25600: LD_VAR 0 3
25604: PPUSH
25605: LD_STRING PlantMine
25607: PPUSH
25608: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25612: LD_VAR 0 2
25616: PPUSH
25617: LD_VAR 0 3
25621: PPUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 255
25631: PPUSH
25632: LD_INT 0
25634: PPUSH
25635: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25639: LD_ADDR_EXP 98
25643: PUSH
25644: LD_EXP 98
25648: PPUSH
25649: LD_VAR 0 5
25653: PUSH
25654: LD_EXP 98
25658: PUSH
25659: LD_VAR 0 5
25663: ARRAY
25664: PUSH
25665: LD_INT 1
25667: PLUS
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PPUSH
25673: LD_VAR 0 2
25677: PUSH
25678: LD_VAR 0 3
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL 31873 0 3
25691: ST_TO_ADDR
// result := true ;
25692: LD_ADDR_VAR 0 4
25696: PUSH
25697: LD_INT 1
25699: ST_TO_ADDR
// end ;
25700: LD_VAR 0 4
25704: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25705: LD_INT 0
25707: PPUSH
25708: PPUSH
25709: PPUSH
// if not unit in minersList then
25710: LD_VAR 0 1
25714: PUSH
25715: LD_EXP 97
25719: IN
25720: NOT
25721: IFFALSE 25725
// exit ;
25723: GO 26117
// index := GetElementIndex ( minersList , unit ) ;
25725: LD_ADDR_VAR 0 6
25729: PUSH
25730: LD_EXP 97
25734: PPUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL 31658 0 2
25744: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: DOUBLE
25751: LD_EXP 98
25755: PUSH
25756: LD_VAR 0 6
25760: ARRAY
25761: INC
25762: ST_TO_ADDR
25763: LD_INT 1
25765: PUSH
25766: FOR_DOWNTO
25767: IFFALSE 25928
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25769: LD_EXP 98
25773: PUSH
25774: LD_VAR 0 6
25778: ARRAY
25779: PUSH
25780: LD_VAR 0 5
25784: ARRAY
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PUSH
25790: LD_VAR 0 2
25794: EQUAL
25795: PUSH
25796: LD_EXP 98
25800: PUSH
25801: LD_VAR 0 6
25805: ARRAY
25806: PUSH
25807: LD_VAR 0 5
25811: ARRAY
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PUSH
25817: LD_VAR 0 3
25821: EQUAL
25822: AND
25823: IFFALSE 25926
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25825: LD_EXP 98
25829: PUSH
25830: LD_VAR 0 6
25834: ARRAY
25835: PUSH
25836: LD_VAR 0 5
25840: ARRAY
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PPUSH
25846: LD_EXP 98
25850: PUSH
25851: LD_VAR 0 6
25855: ARRAY
25856: PUSH
25857: LD_VAR 0 5
25861: ARRAY
25862: PUSH
25863: LD_INT 2
25865: ARRAY
25866: PPUSH
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL_OW 255
25876: PPUSH
25877: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25881: LD_ADDR_EXP 98
25885: PUSH
25886: LD_EXP 98
25890: PPUSH
25891: LD_VAR 0 6
25895: PPUSH
25896: LD_EXP 98
25900: PUSH
25901: LD_VAR 0 6
25905: ARRAY
25906: PPUSH
25907: LD_VAR 0 5
25911: PPUSH
25912: CALL_OW 3
25916: PPUSH
25917: CALL_OW 1
25921: ST_TO_ADDR
// exit ;
25922: POP
25923: POP
25924: GO 26117
// end ; end ;
25926: GO 25766
25928: POP
25929: POP
// for i := minerMinesList [ index ] downto 1 do
25930: LD_ADDR_VAR 0 5
25934: PUSH
25935: DOUBLE
25936: LD_EXP 98
25940: PUSH
25941: LD_VAR 0 6
25945: ARRAY
25946: INC
25947: ST_TO_ADDR
25948: LD_INT 1
25950: PUSH
25951: FOR_DOWNTO
25952: IFFALSE 26115
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25954: LD_EXP 98
25958: PUSH
25959: LD_VAR 0 6
25963: ARRAY
25964: PUSH
25965: LD_VAR 0 5
25969: ARRAY
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: PPUSH
25975: LD_EXP 98
25979: PUSH
25980: LD_VAR 0 6
25984: ARRAY
25985: PUSH
25986: LD_VAR 0 5
25990: ARRAY
25991: PUSH
25992: LD_INT 2
25994: ARRAY
25995: PPUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: CALL_OW 298
26010: PUSH
26011: LD_INT 6
26013: LESS
26014: IFFALSE 26113
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26016: LD_EXP 98
26020: PUSH
26021: LD_VAR 0 6
26025: ARRAY
26026: PUSH
26027: LD_VAR 0 5
26031: ARRAY
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: LD_EXP 98
26041: PUSH
26042: LD_VAR 0 6
26046: ARRAY
26047: PUSH
26048: LD_VAR 0 5
26052: ARRAY
26053: PUSH
26054: LD_INT 2
26056: ARRAY
26057: PPUSH
26058: LD_VAR 0 1
26062: PPUSH
26063: CALL_OW 255
26067: PPUSH
26068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26072: LD_ADDR_EXP 98
26076: PUSH
26077: LD_EXP 98
26081: PPUSH
26082: LD_VAR 0 6
26086: PPUSH
26087: LD_EXP 98
26091: PUSH
26092: LD_VAR 0 6
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 5
26102: PPUSH
26103: CALL_OW 3
26107: PPUSH
26108: CALL_OW 1
26112: ST_TO_ADDR
// end ; end ;
26113: GO 25951
26115: POP
26116: POP
// end ;
26117: LD_VAR 0 4
26121: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26122: LD_INT 0
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26133: LD_VAR 0 1
26137: PPUSH
26138: CALL_OW 264
26142: PUSH
26143: LD_INT 81
26145: EQUAL
26146: NOT
26147: PUSH
26148: LD_VAR 0 1
26152: PUSH
26153: LD_EXP 97
26157: IN
26158: NOT
26159: OR
26160: IFFALSE 26164
// exit ;
26162: GO 26486
// index := GetElementIndex ( minersList , unit ) ;
26164: LD_ADDR_VAR 0 6
26168: PUSH
26169: LD_EXP 97
26173: PPUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL 31658 0 2
26183: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26184: LD_ADDR_VAR 0 8
26188: PUSH
26189: LD_EXP 99
26193: PUSH
26194: LD_EXP 98
26198: PUSH
26199: LD_VAR 0 6
26203: ARRAY
26204: MINUS
26205: ST_TO_ADDR
// if not minesFreeAmount then
26206: LD_VAR 0 8
26210: NOT
26211: IFFALSE 26215
// exit ;
26213: GO 26486
// tmp := [ ] ;
26215: LD_ADDR_VAR 0 7
26219: PUSH
26220: EMPTY
26221: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: DOUBLE
26228: LD_INT 1
26230: DEC
26231: ST_TO_ADDR
26232: LD_VAR 0 8
26236: PUSH
26237: FOR_TO
26238: IFFALSE 26433
// begin _d := rand ( 0 , 5 ) ;
26240: LD_ADDR_VAR 0 11
26244: PUSH
26245: LD_INT 0
26247: PPUSH
26248: LD_INT 5
26250: PPUSH
26251: CALL_OW 12
26255: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26256: LD_ADDR_VAR 0 12
26260: PUSH
26261: LD_INT 2
26263: PPUSH
26264: LD_INT 6
26266: PPUSH
26267: CALL_OW 12
26271: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26272: LD_ADDR_VAR 0 9
26276: PUSH
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_VAR 0 11
26286: PPUSH
26287: LD_VAR 0 12
26291: PPUSH
26292: CALL_OW 272
26296: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26297: LD_ADDR_VAR 0 10
26301: PUSH
26302: LD_VAR 0 3
26306: PPUSH
26307: LD_VAR 0 11
26311: PPUSH
26312: LD_VAR 0 12
26316: PPUSH
26317: CALL_OW 273
26321: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26322: LD_VAR 0 9
26326: PPUSH
26327: LD_VAR 0 10
26331: PPUSH
26332: CALL_OW 488
26336: PUSH
26337: LD_VAR 0 9
26341: PUSH
26342: LD_VAR 0 10
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_VAR 0 7
26355: IN
26356: NOT
26357: AND
26358: PUSH
26359: LD_VAR 0 9
26363: PPUSH
26364: LD_VAR 0 10
26368: PPUSH
26369: CALL_OW 458
26373: NOT
26374: AND
26375: IFFALSE 26417
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26377: LD_ADDR_VAR 0 7
26381: PUSH
26382: LD_VAR 0 7
26386: PPUSH
26387: LD_VAR 0 7
26391: PUSH
26392: LD_INT 1
26394: PLUS
26395: PPUSH
26396: LD_VAR 0 9
26400: PUSH
26401: LD_VAR 0 10
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 1
26414: ST_TO_ADDR
26415: GO 26431
// i := i - 1 ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_VAR 0 5
26426: PUSH
26427: LD_INT 1
26429: MINUS
26430: ST_TO_ADDR
// end ;
26431: GO 26237
26433: POP
26434: POP
// for i in tmp do
26435: LD_ADDR_VAR 0 5
26439: PUSH
26440: LD_VAR 0 7
26444: PUSH
26445: FOR_IN
26446: IFFALSE 26484
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26448: LD_VAR 0 1
26452: PPUSH
26453: LD_VAR 0 5
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: LD_VAR 0 5
26466: PUSH
26467: LD_INT 2
26469: ARRAY
26470: PPUSH
26471: CALL 25430 0 3
26475: NOT
26476: IFFALSE 26482
// exit ;
26478: POP
26479: POP
26480: GO 26486
26482: GO 26445
26484: POP
26485: POP
// end ;
26486: LD_VAR 0 4
26490: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
// if not GetClass ( unit ) = class_sniper then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 257
26509: PUSH
26510: LD_INT 5
26512: EQUAL
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26906
// dist := 8 ;
26518: LD_ADDR_VAR 0 5
26522: PUSH
26523: LD_INT 8
26525: ST_TO_ADDR
// viewRange := 12 ;
26526: LD_ADDR_VAR 0 7
26530: PUSH
26531: LD_INT 12
26533: ST_TO_ADDR
// side := GetSide ( unit ) ;
26534: LD_ADDR_VAR 0 6
26538: PUSH
26539: LD_VAR 0 1
26543: PPUSH
26544: CALL_OW 255
26548: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26549: LD_INT 61
26551: PPUSH
26552: LD_VAR 0 6
26556: PPUSH
26557: CALL_OW 321
26561: PUSH
26562: LD_INT 2
26564: EQUAL
26565: IFFALSE 26575
// viewRange := 16 ;
26567: LD_ADDR_VAR 0 7
26571: PUSH
26572: LD_INT 16
26574: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26575: LD_VAR 0 1
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: CALL_OW 297
26594: PUSH
26595: LD_VAR 0 5
26599: GREATER
26600: IFFALSE 26679
// begin ComMoveXY ( unit , x , y ) ;
26602: LD_VAR 0 1
26606: PPUSH
26607: LD_VAR 0 2
26611: PPUSH
26612: LD_VAR 0 3
26616: PPUSH
26617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26621: LD_INT 35
26623: PPUSH
26624: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26628: LD_VAR 0 1
26632: PPUSH
26633: LD_VAR 0 2
26637: PPUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: CALL 63013 0 3
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 26906
// until GetDistUnitXY ( unit , x , y ) < dist ;
26652: LD_VAR 0 1
26656: PPUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 3
26666: PPUSH
26667: CALL_OW 297
26671: PUSH
26672: LD_VAR 0 5
26676: LESS
26677: IFFALSE 26621
// end ; ComTurnXY ( unit , x , y ) ;
26679: LD_VAR 0 1
26683: PPUSH
26684: LD_VAR 0 2
26688: PPUSH
26689: LD_VAR 0 3
26693: PPUSH
26694: CALL_OW 118
// wait ( 5 ) ;
26698: LD_INT 5
26700: PPUSH
26701: CALL_OW 67
// _d := GetDir ( unit ) ;
26705: LD_ADDR_VAR 0 10
26709: PUSH
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 254
26719: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26720: LD_ADDR_VAR 0 8
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 250
26734: PPUSH
26735: LD_VAR 0 10
26739: PPUSH
26740: LD_VAR 0 5
26744: PPUSH
26745: CALL_OW 272
26749: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26750: LD_ADDR_VAR 0 9
26754: PUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL_OW 251
26764: PPUSH
26765: LD_VAR 0 10
26769: PPUSH
26770: LD_VAR 0 5
26774: PPUSH
26775: CALL_OW 273
26779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26780: LD_VAR 0 8
26784: PPUSH
26785: LD_VAR 0 9
26789: PPUSH
26790: CALL_OW 488
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26906
// ComAnimCustom ( unit , 1 ) ;
26799: LD_VAR 0 1
26803: PPUSH
26804: LD_INT 1
26806: PPUSH
26807: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26811: LD_VAR 0 8
26815: PPUSH
26816: LD_VAR 0 9
26820: PPUSH
26821: LD_VAR 0 6
26825: PPUSH
26826: LD_VAR 0 7
26830: PPUSH
26831: CALL_OW 330
// repeat wait ( 1 ) ;
26835: LD_INT 1
26837: PPUSH
26838: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26842: LD_VAR 0 1
26846: PPUSH
26847: CALL_OW 316
26851: PUSH
26852: LD_VAR 0 1
26856: PPUSH
26857: CALL_OW 314
26861: OR
26862: PUSH
26863: LD_VAR 0 1
26867: PPUSH
26868: CALL_OW 302
26872: NOT
26873: OR
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 301
26884: OR
26885: IFFALSE 26835
// RemoveSeeing ( _x , _y , side ) ;
26887: LD_VAR 0 8
26891: PPUSH
26892: LD_VAR 0 9
26896: PPUSH
26897: LD_VAR 0 6
26901: PPUSH
26902: CALL_OW 331
// end ; end_of_file
26906: LD_VAR 0 4
26910: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26911: LD_INT 0
26913: PPUSH
26914: PPUSH
// if exist_mode then
26915: LD_VAR 0 2
26919: IFFALSE 26944
// unit := CreateCharacter ( prefix & ident ) else
26921: LD_ADDR_VAR 0 5
26925: PUSH
26926: LD_VAR 0 3
26930: PUSH
26931: LD_VAR 0 1
26935: STR
26936: PPUSH
26937: CALL_OW 34
26941: ST_TO_ADDR
26942: GO 26959
// unit := NewCharacter ( ident ) ;
26944: LD_ADDR_VAR 0 5
26948: PUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 25
26958: ST_TO_ADDR
// result := unit ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_VAR 0 5
26968: ST_TO_ADDR
// end ;
26969: LD_VAR 0 4
26973: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
// if not side or not nation then
26978: LD_VAR 0 1
26982: NOT
26983: PUSH
26984: LD_VAR 0 2
26988: NOT
26989: OR
26990: IFFALSE 26994
// exit ;
26992: GO 27762
// case nation of nation_american :
26994: LD_VAR 0 2
26998: PUSH
26999: LD_INT 1
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27221
27007: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27008: LD_ADDR_VAR 0 4
27012: PUSH
27013: LD_INT 35
27015: PUSH
27016: LD_INT 45
27018: PUSH
27019: LD_INT 46
27021: PUSH
27022: LD_INT 47
27024: PUSH
27025: LD_INT 82
27027: PUSH
27028: LD_INT 83
27030: PUSH
27031: LD_INT 84
27033: PUSH
27034: LD_INT 85
27036: PUSH
27037: LD_INT 86
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 6
27048: PUSH
27049: LD_INT 15
27051: PUSH
27052: LD_INT 16
27054: PUSH
27055: LD_INT 7
27057: PUSH
27058: LD_INT 12
27060: PUSH
27061: LD_INT 13
27063: PUSH
27064: LD_INT 10
27066: PUSH
27067: LD_INT 14
27069: PUSH
27070: LD_INT 20
27072: PUSH
27073: LD_INT 21
27075: PUSH
27076: LD_INT 22
27078: PUSH
27079: LD_INT 25
27081: PUSH
27082: LD_INT 32
27084: PUSH
27085: LD_INT 27
27087: PUSH
27088: LD_INT 36
27090: PUSH
27091: LD_INT 69
27093: PUSH
27094: LD_INT 39
27096: PUSH
27097: LD_INT 34
27099: PUSH
27100: LD_INT 40
27102: PUSH
27103: LD_INT 48
27105: PUSH
27106: LD_INT 49
27108: PUSH
27109: LD_INT 50
27111: PUSH
27112: LD_INT 51
27114: PUSH
27115: LD_INT 52
27117: PUSH
27118: LD_INT 53
27120: PUSH
27121: LD_INT 54
27123: PUSH
27124: LD_INT 55
27126: PUSH
27127: LD_INT 56
27129: PUSH
27130: LD_INT 57
27132: PUSH
27133: LD_INT 58
27135: PUSH
27136: LD_INT 59
27138: PUSH
27139: LD_INT 60
27141: PUSH
27142: LD_INT 61
27144: PUSH
27145: LD_INT 62
27147: PUSH
27148: LD_INT 80
27150: PUSH
27151: LD_INT 82
27153: PUSH
27154: LD_INT 83
27156: PUSH
27157: LD_INT 84
27159: PUSH
27160: LD_INT 85
27162: PUSH
27163: LD_INT 86
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
27219: GO 27686
27221: LD_INT 2
27223: DOUBLE
27224: EQUAL
27225: IFTRUE 27229
27227: GO 27455
27229: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: LD_INT 35
27237: PUSH
27238: LD_INT 45
27240: PUSH
27241: LD_INT 46
27243: PUSH
27244: LD_INT 47
27246: PUSH
27247: LD_INT 82
27249: PUSH
27250: LD_INT 83
27252: PUSH
27253: LD_INT 84
27255: PUSH
27256: LD_INT 85
27258: PUSH
27259: LD_INT 87
27261: PUSH
27262: LD_INT 70
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 11
27270: PUSH
27271: LD_INT 3
27273: PUSH
27274: LD_INT 4
27276: PUSH
27277: LD_INT 5
27279: PUSH
27280: LD_INT 6
27282: PUSH
27283: LD_INT 15
27285: PUSH
27286: LD_INT 18
27288: PUSH
27289: LD_INT 7
27291: PUSH
27292: LD_INT 17
27294: PUSH
27295: LD_INT 8
27297: PUSH
27298: LD_INT 20
27300: PUSH
27301: LD_INT 21
27303: PUSH
27304: LD_INT 22
27306: PUSH
27307: LD_INT 72
27309: PUSH
27310: LD_INT 26
27312: PUSH
27313: LD_INT 69
27315: PUSH
27316: LD_INT 39
27318: PUSH
27319: LD_INT 40
27321: PUSH
27322: LD_INT 41
27324: PUSH
27325: LD_INT 42
27327: PUSH
27328: LD_INT 43
27330: PUSH
27331: LD_INT 48
27333: PUSH
27334: LD_INT 49
27336: PUSH
27337: LD_INT 50
27339: PUSH
27340: LD_INT 51
27342: PUSH
27343: LD_INT 52
27345: PUSH
27346: LD_INT 53
27348: PUSH
27349: LD_INT 54
27351: PUSH
27352: LD_INT 55
27354: PUSH
27355: LD_INT 56
27357: PUSH
27358: LD_INT 60
27360: PUSH
27361: LD_INT 61
27363: PUSH
27364: LD_INT 62
27366: PUSH
27367: LD_INT 66
27369: PUSH
27370: LD_INT 67
27372: PUSH
27373: LD_INT 68
27375: PUSH
27376: LD_INT 81
27378: PUSH
27379: LD_INT 82
27381: PUSH
27382: LD_INT 83
27384: PUSH
27385: LD_INT 84
27387: PUSH
27388: LD_INT 85
27390: PUSH
27391: LD_INT 87
27393: PUSH
27394: LD_INT 88
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
27453: GO 27686
27455: LD_INT 3
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27685
27463: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27464: LD_ADDR_VAR 0 4
27468: PUSH
27469: LD_INT 46
27471: PUSH
27472: LD_INT 47
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: LD_INT 82
27483: PUSH
27484: LD_INT 83
27486: PUSH
27487: LD_INT 84
27489: PUSH
27490: LD_INT 85
27492: PUSH
27493: LD_INT 86
27495: PUSH
27496: LD_INT 11
27498: PUSH
27499: LD_INT 9
27501: PUSH
27502: LD_INT 20
27504: PUSH
27505: LD_INT 19
27507: PUSH
27508: LD_INT 21
27510: PUSH
27511: LD_INT 24
27513: PUSH
27514: LD_INT 22
27516: PUSH
27517: LD_INT 25
27519: PUSH
27520: LD_INT 28
27522: PUSH
27523: LD_INT 29
27525: PUSH
27526: LD_INT 30
27528: PUSH
27529: LD_INT 31
27531: PUSH
27532: LD_INT 37
27534: PUSH
27535: LD_INT 38
27537: PUSH
27538: LD_INT 32
27540: PUSH
27541: LD_INT 27
27543: PUSH
27544: LD_INT 33
27546: PUSH
27547: LD_INT 69
27549: PUSH
27550: LD_INT 39
27552: PUSH
27553: LD_INT 34
27555: PUSH
27556: LD_INT 40
27558: PUSH
27559: LD_INT 71
27561: PUSH
27562: LD_INT 23
27564: PUSH
27565: LD_INT 44
27567: PUSH
27568: LD_INT 48
27570: PUSH
27571: LD_INT 49
27573: PUSH
27574: LD_INT 50
27576: PUSH
27577: LD_INT 51
27579: PUSH
27580: LD_INT 52
27582: PUSH
27583: LD_INT 53
27585: PUSH
27586: LD_INT 54
27588: PUSH
27589: LD_INT 55
27591: PUSH
27592: LD_INT 56
27594: PUSH
27595: LD_INT 57
27597: PUSH
27598: LD_INT 58
27600: PUSH
27601: LD_INT 59
27603: PUSH
27604: LD_INT 63
27606: PUSH
27607: LD_INT 64
27609: PUSH
27610: LD_INT 65
27612: PUSH
27613: LD_INT 82
27615: PUSH
27616: LD_INT 83
27618: PUSH
27619: LD_INT 84
27621: PUSH
27622: LD_INT 85
27624: PUSH
27625: LD_INT 86
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
27683: GO 27686
27685: POP
// if state > - 1 and state < 3 then
27686: LD_VAR 0 3
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: GREATER
27695: PUSH
27696: LD_VAR 0 3
27700: PUSH
27701: LD_INT 3
27703: LESS
27704: AND
27705: IFFALSE 27762
// for i in result do
27707: LD_ADDR_VAR 0 5
27711: PUSH
27712: LD_VAR 0 4
27716: PUSH
27717: FOR_IN
27718: IFFALSE 27760
// if GetTech ( i , side ) <> state then
27720: LD_VAR 0 5
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 321
27734: PUSH
27735: LD_VAR 0 3
27739: NONEQUAL
27740: IFFALSE 27758
// result := result diff i ;
27742: LD_ADDR_VAR 0 4
27746: PUSH
27747: LD_VAR 0 4
27751: PUSH
27752: LD_VAR 0 5
27756: DIFF
27757: ST_TO_ADDR
27758: GO 27717
27760: POP
27761: POP
// end ;
27762: LD_VAR 0 4
27766: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27767: LD_INT 0
27769: PPUSH
27770: PPUSH
27771: PPUSH
// result := true ;
27772: LD_ADDR_VAR 0 3
27776: PUSH
27777: LD_INT 1
27779: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27780: LD_ADDR_VAR 0 5
27784: PUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 480
27794: ST_TO_ADDR
// if not tmp then
27795: LD_VAR 0 5
27799: NOT
27800: IFFALSE 27804
// exit ;
27802: GO 27853
// for i in tmp do
27804: LD_ADDR_VAR 0 4
27808: PUSH
27809: LD_VAR 0 5
27813: PUSH
27814: FOR_IN
27815: IFFALSE 27851
// if GetTech ( i , side ) <> state_researched then
27817: LD_VAR 0 4
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 321
27831: PUSH
27832: LD_INT 2
27834: NONEQUAL
27835: IFFALSE 27849
// begin result := false ;
27837: LD_ADDR_VAR 0 3
27841: PUSH
27842: LD_INT 0
27844: ST_TO_ADDR
// exit ;
27845: POP
27846: POP
27847: GO 27853
// end ;
27849: GO 27814
27851: POP
27852: POP
// end ;
27853: LD_VAR 0 3
27857: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27873: LD_VAR 0 1
27877: NOT
27878: PUSH
27879: LD_VAR 0 1
27883: PPUSH
27884: CALL_OW 257
27888: PUSH
27889: LD_INT 9
27891: NONEQUAL
27892: OR
27893: IFFALSE 27897
// exit ;
27895: GO 28470
// side := GetSide ( unit ) ;
27897: LD_ADDR_VAR 0 9
27901: PUSH
27902: LD_VAR 0 1
27906: PPUSH
27907: CALL_OW 255
27911: ST_TO_ADDR
// tech_space := tech_spacanom ;
27912: LD_ADDR_VAR 0 12
27916: PUSH
27917: LD_INT 29
27919: ST_TO_ADDR
// tech_time := tech_taurad ;
27920: LD_ADDR_VAR 0 13
27924: PUSH
27925: LD_INT 28
27927: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27928: LD_ADDR_VAR 0 11
27932: PUSH
27933: LD_VAR 0 1
27937: PPUSH
27938: CALL_OW 310
27942: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27943: LD_VAR 0 11
27947: PPUSH
27948: CALL_OW 247
27952: PUSH
27953: LD_INT 2
27955: EQUAL
27956: IFFALSE 27960
// exit ;
27958: GO 28470
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27960: LD_ADDR_VAR 0 8
27964: PUSH
27965: LD_INT 81
27967: PUSH
27968: LD_VAR 0 9
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 3
27979: PUSH
27980: LD_INT 21
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 69
28002: ST_TO_ADDR
// if not tmp then
28003: LD_VAR 0 8
28007: NOT
28008: IFFALSE 28012
// exit ;
28010: GO 28470
// if in_unit then
28012: LD_VAR 0 11
28016: IFFALSE 28040
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28018: LD_ADDR_VAR 0 10
28022: PUSH
28023: LD_VAR 0 8
28027: PPUSH
28028: LD_VAR 0 11
28032: PPUSH
28033: CALL_OW 74
28037: ST_TO_ADDR
28038: GO 28060
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28040: LD_ADDR_VAR 0 10
28044: PUSH
28045: LD_VAR 0 8
28049: PPUSH
28050: LD_VAR 0 1
28054: PPUSH
28055: CALL_OW 74
28059: ST_TO_ADDR
// if not enemy then
28060: LD_VAR 0 10
28064: NOT
28065: IFFALSE 28069
// exit ;
28067: GO 28470
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28069: LD_VAR 0 11
28073: PUSH
28074: LD_VAR 0 11
28078: PPUSH
28079: LD_VAR 0 10
28083: PPUSH
28084: CALL_OW 296
28088: PUSH
28089: LD_INT 13
28091: GREATER
28092: AND
28093: PUSH
28094: LD_VAR 0 1
28098: PPUSH
28099: LD_VAR 0 10
28103: PPUSH
28104: CALL_OW 296
28108: PUSH
28109: LD_INT 12
28111: GREATER
28112: OR
28113: IFFALSE 28117
// exit ;
28115: GO 28470
// missile := [ 1 ] ;
28117: LD_ADDR_VAR 0 14
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28128: LD_VAR 0 9
28132: PPUSH
28133: LD_VAR 0 12
28137: PPUSH
28138: CALL_OW 325
28142: IFFALSE 28171
// missile := Replace ( missile , missile + 1 , 2 ) ;
28144: LD_ADDR_VAR 0 14
28148: PUSH
28149: LD_VAR 0 14
28153: PPUSH
28154: LD_VAR 0 14
28158: PUSH
28159: LD_INT 1
28161: PLUS
28162: PPUSH
28163: LD_INT 2
28165: PPUSH
28166: CALL_OW 1
28170: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28171: LD_VAR 0 9
28175: PPUSH
28176: LD_VAR 0 13
28180: PPUSH
28181: CALL_OW 325
28185: PUSH
28186: LD_VAR 0 10
28190: PPUSH
28191: CALL_OW 255
28195: PPUSH
28196: LD_VAR 0 13
28200: PPUSH
28201: CALL_OW 325
28205: NOT
28206: AND
28207: IFFALSE 28236
// missile := Replace ( missile , missile + 1 , 3 ) ;
28209: LD_ADDR_VAR 0 14
28213: PUSH
28214: LD_VAR 0 14
28218: PPUSH
28219: LD_VAR 0 14
28223: PUSH
28224: LD_INT 1
28226: PLUS
28227: PPUSH
28228: LD_INT 3
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
// if missile < 2 then
28236: LD_VAR 0 14
28240: PUSH
28241: LD_INT 2
28243: LESS
28244: IFFALSE 28248
// exit ;
28246: GO 28470
// x := GetX ( enemy ) ;
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: LD_VAR 0 10
28257: PPUSH
28258: CALL_OW 250
28262: ST_TO_ADDR
// y := GetY ( enemy ) ;
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_VAR 0 10
28272: PPUSH
28273: CALL_OW 251
28277: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28278: LD_ADDR_VAR 0 6
28282: PUSH
28283: LD_VAR 0 4
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PPUSH
28292: LD_INT 1
28294: PPUSH
28295: CALL_OW 12
28299: PLUS
28300: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28301: LD_ADDR_VAR 0 7
28305: PUSH
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PPUSH
28315: LD_INT 1
28317: PPUSH
28318: CALL_OW 12
28322: PLUS
28323: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28324: LD_VAR 0 6
28328: PPUSH
28329: LD_VAR 0 7
28333: PPUSH
28334: CALL_OW 488
28338: NOT
28339: IFFALSE 28361
// begin _x := x ;
28341: LD_ADDR_VAR 0 6
28345: PUSH
28346: LD_VAR 0 4
28350: ST_TO_ADDR
// _y := y ;
28351: LD_ADDR_VAR 0 7
28355: PUSH
28356: LD_VAR 0 5
28360: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 1
28368: PPUSH
28369: LD_VAR 0 14
28373: PPUSH
28374: CALL_OW 12
28378: ST_TO_ADDR
// case i of 1 :
28379: LD_VAR 0 3
28383: PUSH
28384: LD_INT 1
28386: DOUBLE
28387: EQUAL
28388: IFTRUE 28392
28390: GO 28409
28392: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_VAR 0 10
28402: PPUSH
28403: CALL_OW 115
28407: GO 28470
28409: LD_INT 2
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28439
28417: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_VAR 0 6
28427: PPUSH
28428: LD_VAR 0 7
28432: PPUSH
28433: CALL_OW 153
28437: GO 28470
28439: LD_INT 3
28441: DOUBLE
28442: EQUAL
28443: IFTRUE 28447
28445: GO 28469
28447: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_VAR 0 6
28457: PPUSH
28458: LD_VAR 0 7
28462: PPUSH
28463: CALL_OW 154
28467: GO 28470
28469: POP
// end ;
28470: LD_VAR 0 2
28474: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28475: LD_INT 0
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
28481: PPUSH
28482: PPUSH
// if not unit or not building then
28483: LD_VAR 0 1
28487: NOT
28488: PUSH
28489: LD_VAR 0 2
28493: NOT
28494: OR
28495: IFFALSE 28499
// exit ;
28497: GO 28657
// x := GetX ( building ) ;
28499: LD_ADDR_VAR 0 5
28503: PUSH
28504: LD_VAR 0 2
28508: PPUSH
28509: CALL_OW 250
28513: ST_TO_ADDR
// y := GetY ( building ) ;
28514: LD_ADDR_VAR 0 6
28518: PUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 251
28528: ST_TO_ADDR
// for i = 0 to 5 do
28529: LD_ADDR_VAR 0 4
28533: PUSH
28534: DOUBLE
28535: LD_INT 0
28537: DEC
28538: ST_TO_ADDR
28539: LD_INT 5
28541: PUSH
28542: FOR_TO
28543: IFFALSE 28655
// begin _x := ShiftX ( x , i , 3 ) ;
28545: LD_ADDR_VAR 0 7
28549: PUSH
28550: LD_VAR 0 5
28554: PPUSH
28555: LD_VAR 0 4
28559: PPUSH
28560: LD_INT 3
28562: PPUSH
28563: CALL_OW 272
28567: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28568: LD_ADDR_VAR 0 8
28572: PUSH
28573: LD_VAR 0 6
28577: PPUSH
28578: LD_VAR 0 4
28582: PPUSH
28583: LD_INT 3
28585: PPUSH
28586: CALL_OW 273
28590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28591: LD_VAR 0 7
28595: PPUSH
28596: LD_VAR 0 8
28600: PPUSH
28601: CALL_OW 488
28605: NOT
28606: IFFALSE 28610
// continue ;
28608: GO 28542
// if HexInfo ( _x , _y ) = 0 then
28610: LD_VAR 0 7
28614: PPUSH
28615: LD_VAR 0 8
28619: PPUSH
28620: CALL_OW 428
28624: PUSH
28625: LD_INT 0
28627: EQUAL
28628: IFFALSE 28653
// begin ComMoveXY ( unit , _x , _y ) ;
28630: LD_VAR 0 1
28634: PPUSH
28635: LD_VAR 0 7
28639: PPUSH
28640: LD_VAR 0 8
28644: PPUSH
28645: CALL_OW 111
// exit ;
28649: POP
28650: POP
28651: GO 28657
// end ; end ;
28653: GO 28542
28655: POP
28656: POP
// end ;
28657: LD_VAR 0 3
28661: RET
// export function ScanBase ( side , base_area ) ; begin
28662: LD_INT 0
28664: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_VAR 0 2
28674: PPUSH
28675: LD_INT 81
28677: PUSH
28678: LD_VAR 0 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PPUSH
28687: CALL_OW 70
28691: ST_TO_ADDR
// end ;
28692: LD_VAR 0 3
28696: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28697: LD_INT 0
28699: PPUSH
28700: PPUSH
28701: PPUSH
28702: PPUSH
// result := false ;
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_INT 0
28710: ST_TO_ADDR
// side := GetSide ( unit ) ;
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 255
28725: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28726: LD_ADDR_VAR 0 4
28730: PUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 248
28740: ST_TO_ADDR
// case nat of 1 :
28741: LD_VAR 0 4
28745: PUSH
28746: LD_INT 1
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28754
28752: GO 28765
28754: POP
// tech := tech_lassight ; 2 :
28755: LD_ADDR_VAR 0 5
28759: PUSH
28760: LD_INT 12
28762: ST_TO_ADDR
28763: GO 28804
28765: LD_INT 2
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28784
28773: POP
// tech := tech_mortar ; 3 :
28774: LD_ADDR_VAR 0 5
28778: PUSH
28779: LD_INT 41
28781: ST_TO_ADDR
28782: GO 28804
28784: LD_INT 3
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 28803
28792: POP
// tech := tech_bazooka ; end ;
28793: LD_ADDR_VAR 0 5
28797: PUSH
28798: LD_INT 44
28800: ST_TO_ADDR
28801: GO 28804
28803: POP
// if Researched ( side , tech ) then
28804: LD_VAR 0 3
28808: PPUSH
28809: LD_VAR 0 5
28813: PPUSH
28814: CALL_OW 325
28818: IFFALSE 28845
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28820: LD_ADDR_VAR 0 2
28824: PUSH
28825: LD_INT 5
28827: PUSH
28828: LD_INT 8
28830: PUSH
28831: LD_INT 9
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PUSH
28839: LD_VAR 0 4
28843: ARRAY
28844: ST_TO_ADDR
// end ;
28845: LD_VAR 0 2
28849: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28850: LD_INT 0
28852: PPUSH
28853: PPUSH
28854: PPUSH
// if not mines then
28855: LD_VAR 0 2
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 29008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: LD_INT 81
28871: PUSH
28872: LD_VAR 0 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: LD_INT 21
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PPUSH
28902: CALL_OW 69
28906: ST_TO_ADDR
// for i in mines do
28907: LD_ADDR_VAR 0 4
28911: PUSH
28912: LD_VAR 0 2
28916: PUSH
28917: FOR_IN
28918: IFFALSE 29006
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28920: LD_VAR 0 4
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: PPUSH
28929: LD_VAR 0 4
28933: PUSH
28934: LD_INT 2
28936: ARRAY
28937: PPUSH
28938: CALL_OW 458
28942: NOT
28943: IFFALSE 28947
// continue ;
28945: GO 28917
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28947: LD_VAR 0 4
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: PPUSH
28956: LD_VAR 0 4
28960: PUSH
28961: LD_INT 2
28963: ARRAY
28964: PPUSH
28965: CALL_OW 428
28969: PUSH
28970: LD_VAR 0 5
28974: IN
28975: IFFALSE 29004
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28977: LD_VAR 0 4
28981: PUSH
28982: LD_INT 1
28984: ARRAY
28985: PPUSH
28986: LD_VAR 0 4
28990: PUSH
28991: LD_INT 2
28993: ARRAY
28994: PPUSH
28995: LD_VAR 0 1
28999: PPUSH
29000: CALL_OW 456
// end ;
29004: GO 28917
29006: POP
29007: POP
// end ;
29008: LD_VAR 0 3
29012: RET
// export function Count ( array ) ; begin
29013: LD_INT 0
29015: PPUSH
// result := array + 0 ;
29016: LD_ADDR_VAR 0 2
29020: PUSH
29021: LD_VAR 0 1
29025: PUSH
29026: LD_INT 0
29028: PLUS
29029: ST_TO_ADDR
// end ;
29030: LD_VAR 0 2
29034: RET
// export function IsEmpty ( building ) ; begin
29035: LD_INT 0
29037: PPUSH
// if not building then
29038: LD_VAR 0 1
29042: NOT
29043: IFFALSE 29047
// exit ;
29045: GO 29090
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 1
29056: PUSH
29057: LD_INT 22
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 255
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 58
29076: PUSH
29077: EMPTY
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PPUSH
29084: CALL_OW 69
29088: IN
29089: ST_TO_ADDR
// end ;
29090: LD_VAR 0 2
29094: RET
// export function IsNotFull ( building ) ; var places ; begin
29095: LD_INT 0
29097: PPUSH
29098: PPUSH
// if not building then
29099: LD_VAR 0 1
29103: NOT
29104: IFFALSE 29108
// exit ;
29106: GO 29136
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29108: LD_ADDR_VAR 0 2
29112: PUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: LD_INT 3
29120: PUSH
29121: LD_INT 62
29123: PUSH
29124: EMPTY
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PPUSH
29131: CALL_OW 72
29135: ST_TO_ADDR
// end ;
29136: LD_VAR 0 2
29140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
// tmp := [ ] ;
29147: LD_ADDR_VAR 0 3
29151: PUSH
29152: EMPTY
29153: ST_TO_ADDR
// list := [ ] ;
29154: LD_ADDR_VAR 0 5
29158: PUSH
29159: EMPTY
29160: ST_TO_ADDR
// for i = 16 to 25 do
29161: LD_ADDR_VAR 0 4
29165: PUSH
29166: DOUBLE
29167: LD_INT 16
29169: DEC
29170: ST_TO_ADDR
29171: LD_INT 25
29173: PUSH
29174: FOR_TO
29175: IFFALSE 29248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_VAR 0 3
29186: PUSH
29187: LD_INT 22
29189: PUSH
29190: LD_VAR 0 1
29194: PPUSH
29195: CALL_OW 255
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 91
29206: PUSH
29207: LD_VAR 0 1
29211: PUSH
29212: LD_INT 6
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 30
29222: PUSH
29223: LD_VAR 0 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: PPUSH
29240: CALL_OW 69
29244: ADD
29245: ST_TO_ADDR
29246: GO 29174
29248: POP
29249: POP
// for i = 1 to tmp do
29250: LD_ADDR_VAR 0 4
29254: PUSH
29255: DOUBLE
29256: LD_INT 1
29258: DEC
29259: ST_TO_ADDR
29260: LD_VAR 0 3
29264: PUSH
29265: FOR_TO
29266: IFFALSE 29354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29268: LD_ADDR_VAR 0 5
29272: PUSH
29273: LD_VAR 0 5
29277: PUSH
29278: LD_VAR 0 3
29282: PUSH
29283: LD_VAR 0 4
29287: ARRAY
29288: PPUSH
29289: CALL_OW 266
29293: PUSH
29294: LD_VAR 0 3
29298: PUSH
29299: LD_VAR 0 4
29303: ARRAY
29304: PPUSH
29305: CALL_OW 250
29309: PUSH
29310: LD_VAR 0 3
29314: PUSH
29315: LD_VAR 0 4
29319: ARRAY
29320: PPUSH
29321: CALL_OW 251
29325: PUSH
29326: LD_VAR 0 3
29330: PUSH
29331: LD_VAR 0 4
29335: ARRAY
29336: PPUSH
29337: CALL_OW 254
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: ADD
29351: ST_TO_ADDR
29352: GO 29265
29354: POP
29355: POP
// result := list ;
29356: LD_ADDR_VAR 0 2
29360: PUSH
29361: LD_VAR 0 5
29365: ST_TO_ADDR
// end ;
29366: LD_VAR 0 2
29370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
// if not factory then
29380: LD_VAR 0 1
29384: NOT
29385: IFFALSE 29389
// exit ;
29387: GO 29982
// if control = control_apeman then
29389: LD_VAR 0 4
29393: PUSH
29394: LD_INT 5
29396: EQUAL
29397: IFFALSE 29506
// begin tmp := UnitsInside ( factory ) ;
29399: LD_ADDR_VAR 0 8
29403: PUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 313
29413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29414: LD_VAR 0 8
29418: PPUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 12
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 72
29433: NOT
29434: IFFALSE 29444
// control := control_manual ;
29436: LD_ADDR_VAR 0 4
29440: PUSH
29441: LD_INT 1
29443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29444: LD_ADDR_VAR 0 8
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: CALL 29141 0 1
29458: ST_TO_ADDR
// if tmp then
29459: LD_VAR 0 8
29463: IFFALSE 29506
// begin for i in tmp do
29465: LD_ADDR_VAR 0 7
29469: PUSH
29470: LD_VAR 0 8
29474: PUSH
29475: FOR_IN
29476: IFFALSE 29504
// if i [ 1 ] = b_ext_radio then
29478: LD_VAR 0 7
29482: PUSH
29483: LD_INT 1
29485: ARRAY
29486: PUSH
29487: LD_INT 22
29489: EQUAL
29490: IFFALSE 29502
// begin control := control_remote ;
29492: LD_ADDR_VAR 0 4
29496: PUSH
29497: LD_INT 2
29499: ST_TO_ADDR
// break ;
29500: GO 29504
// end ;
29502: GO 29475
29504: POP
29505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: LD_VAR 0 3
29520: PPUSH
29521: LD_VAR 0 4
29525: PPUSH
29526: LD_VAR 0 5
29530: PPUSH
29531: CALL_OW 448
29535: IFFALSE 29570
// begin result := [ chassis , engine , control , weapon ] ;
29537: LD_ADDR_VAR 0 6
29541: PUSH
29542: LD_VAR 0 2
29546: PUSH
29547: LD_VAR 0 3
29551: PUSH
29552: LD_VAR 0 4
29556: PUSH
29557: LD_VAR 0 5
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
// exit ;
29568: GO 29982
// end ; _chassis := AvailableChassisList ( factory ) ;
29570: LD_ADDR_VAR 0 9
29574: PUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 475
29584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29585: LD_ADDR_VAR 0 11
29589: PUSH
29590: LD_VAR 0 1
29594: PPUSH
29595: CALL_OW 476
29599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29600: LD_ADDR_VAR 0 12
29604: PUSH
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 477
29614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29615: LD_ADDR_VAR 0 10
29619: PUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL_OW 478
29629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29630: LD_VAR 0 9
29634: NOT
29635: PUSH
29636: LD_VAR 0 11
29640: NOT
29641: OR
29642: PUSH
29643: LD_VAR 0 12
29647: NOT
29648: OR
29649: PUSH
29650: LD_VAR 0 10
29654: NOT
29655: OR
29656: IFFALSE 29691
// begin result := [ chassis , engine , control , weapon ] ;
29658: LD_ADDR_VAR 0 6
29662: PUSH
29663: LD_VAR 0 2
29667: PUSH
29668: LD_VAR 0 3
29672: PUSH
29673: LD_VAR 0 4
29677: PUSH
29678: LD_VAR 0 5
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// exit ;
29689: GO 29982
// end ; if not chassis in _chassis then
29691: LD_VAR 0 2
29695: PUSH
29696: LD_VAR 0 9
29700: IN
29701: NOT
29702: IFFALSE 29728
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29704: LD_ADDR_VAR 0 2
29708: PUSH
29709: LD_VAR 0 9
29713: PUSH
29714: LD_INT 1
29716: PPUSH
29717: LD_VAR 0 9
29721: PPUSH
29722: CALL_OW 12
29726: ARRAY
29727: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: CALL 29987 0 2
29742: NOT
29743: IFFALSE 29802
// repeat engine := _engine [ 1 ] ;
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: LD_VAR 0 11
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29759: LD_ADDR_VAR 0 11
29763: PUSH
29764: LD_VAR 0 11
29768: PPUSH
29769: LD_INT 1
29771: PPUSH
29772: CALL_OW 3
29776: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29777: LD_VAR 0 2
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL 29987 0 2
29791: PUSH
29792: LD_VAR 0 11
29796: PUSH
29797: EMPTY
29798: EQUAL
29799: OR
29800: IFFALSE 29745
// if not control in _control then
29802: LD_VAR 0 4
29806: PUSH
29807: LD_VAR 0 12
29811: IN
29812: NOT
29813: IFFALSE 29839
// control := _control [ rand ( 1 , _control ) ] ;
29815: LD_ADDR_VAR 0 4
29819: PUSH
29820: LD_VAR 0 12
29824: PUSH
29825: LD_INT 1
29827: PPUSH
29828: LD_VAR 0 12
29832: PPUSH
29833: CALL_OW 12
29837: ARRAY
29838: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29839: LD_VAR 0 2
29843: PPUSH
29844: LD_VAR 0 5
29848: PPUSH
29849: CALL 30207 0 2
29853: NOT
29854: IFFALSE 29913
// repeat weapon := _weapon [ 1 ] ;
29856: LD_ADDR_VAR 0 5
29860: PUSH
29861: LD_VAR 0 10
29865: PUSH
29866: LD_INT 1
29868: ARRAY
29869: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29870: LD_ADDR_VAR 0 10
29874: PUSH
29875: LD_VAR 0 10
29879: PPUSH
29880: LD_INT 1
29882: PPUSH
29883: CALL_OW 3
29887: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 5
29897: PPUSH
29898: CALL 30207 0 2
29902: PUSH
29903: LD_VAR 0 10
29907: PUSH
29908: EMPTY
29909: EQUAL
29910: OR
29911: IFFALSE 29856
// result := [ ] ;
29913: LD_ADDR_VAR 0 6
29917: PUSH
29918: EMPTY
29919: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29920: LD_VAR 0 1
29924: PPUSH
29925: LD_VAR 0 2
29929: PPUSH
29930: LD_VAR 0 3
29934: PPUSH
29935: LD_VAR 0 4
29939: PPUSH
29940: LD_VAR 0 5
29944: PPUSH
29945: CALL_OW 448
29949: IFFALSE 29982
// result := [ chassis , engine , control , weapon ] ;
29951: LD_ADDR_VAR 0 6
29955: PUSH
29956: LD_VAR 0 2
29960: PUSH
29961: LD_VAR 0 3
29965: PUSH
29966: LD_VAR 0 4
29970: PUSH
29971: LD_VAR 0 5
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// end ;
29982: LD_VAR 0 6
29986: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29987: LD_INT 0
29989: PPUSH
// if not chassis or not engine then
29990: LD_VAR 0 1
29994: NOT
29995: PUSH
29996: LD_VAR 0 2
30000: NOT
30001: OR
30002: IFFALSE 30006
// exit ;
30004: GO 30202
// case engine of engine_solar :
30006: LD_VAR 0 2
30010: PUSH
30011: LD_INT 2
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30057
30019: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30020: LD_ADDR_VAR 0 3
30024: PUSH
30025: LD_INT 11
30027: PUSH
30028: LD_INT 12
30030: PUSH
30031: LD_INT 13
30033: PUSH
30034: LD_INT 14
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
30055: GO 30186
30057: LD_INT 1
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30127
30065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_INT 11
30073: PUSH
30074: LD_INT 12
30076: PUSH
30077: LD_INT 13
30079: PUSH
30080: LD_INT 14
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: LD_INT 21
30100: PUSH
30101: LD_INT 23
30103: PUSH
30104: LD_INT 22
30106: PUSH
30107: LD_INT 24
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
30125: GO 30186
30127: LD_INT 3
30129: DOUBLE
30130: EQUAL
30131: IFTRUE 30135
30133: GO 30185
30135: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_INT 13
30143: PUSH
30144: LD_INT 14
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: LD_INT 4
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: LD_INT 21
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_INT 23
30167: PUSH
30168: LD_INT 24
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
30183: GO 30186
30185: POP
// result := ( chassis in result ) ;
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_VAR 0 1
30195: PUSH
30196: LD_VAR 0 3
30200: IN
30201: ST_TO_ADDR
// end ;
30202: LD_VAR 0 3
30206: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30207: LD_INT 0
30209: PPUSH
// if not chassis or not weapon then
30210: LD_VAR 0 1
30214: NOT
30215: PUSH
30216: LD_VAR 0 2
30220: NOT
30221: OR
30222: IFFALSE 30226
// exit ;
30224: GO 31286
// case weapon of us_machine_gun :
30226: LD_VAR 0 2
30230: PUSH
30231: LD_INT 2
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30269
30239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30240: LD_ADDR_VAR 0 3
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 4
30256: PUSH
30257: LD_INT 5
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
30267: GO 31270
30269: LD_INT 3
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 30307
30277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: LD_INT 4
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
30305: GO 31270
30307: LD_INT 11
30309: DOUBLE
30310: EQUAL
30311: IFTRUE 30315
30313: GO 30345
30315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30316: LD_ADDR_VAR 0 3
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
30343: GO 31270
30345: LD_INT 4
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30379
30353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: LD_INT 4
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
30377: GO 31270
30379: LD_INT 5
30381: DOUBLE
30382: EQUAL
30383: IFTRUE 30387
30385: GO 30413
30387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30388: LD_ADDR_VAR 0 3
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 4
30401: PUSH
30402: LD_INT 5
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
30411: GO 31270
30413: LD_INT 9
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30447
30421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 4
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
30445: GO 31270
30447: LD_INT 7
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30481
30455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: LD_INT 4
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
30479: GO 31270
30481: LD_INT 12
30483: DOUBLE
30484: EQUAL
30485: IFTRUE 30489
30487: GO 30515
30489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30490: LD_ADDR_VAR 0 3
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
30513: GO 31270
30515: LD_INT 13
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30549
30523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: LD_INT 5
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
30547: GO 31270
30549: LD_INT 14
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30575
30557: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30558: LD_ADDR_VAR 0 3
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: ST_TO_ADDR
30573: GO 31270
30575: LD_INT 6
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30601
30583: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30584: LD_ADDR_VAR 0 3
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: LD_INT 5
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: ST_TO_ADDR
30599: GO 31270
30601: LD_INT 10
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30627
30609: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30610: LD_ADDR_VAR 0 3
30614: PUSH
30615: LD_INT 4
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: ST_TO_ADDR
30625: GO 31270
30627: LD_INT 22
30629: DOUBLE
30630: EQUAL
30631: IFTRUE 30635
30633: GO 30661
30635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30636: LD_ADDR_VAR 0 3
30640: PUSH
30641: LD_INT 11
30643: PUSH
30644: LD_INT 12
30646: PUSH
30647: LD_INT 13
30649: PUSH
30650: LD_INT 14
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: ST_TO_ADDR
30659: GO 31270
30661: LD_INT 23
30663: DOUBLE
30664: EQUAL
30665: IFTRUE 30669
30667: GO 30695
30669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30670: LD_ADDR_VAR 0 3
30674: PUSH
30675: LD_INT 11
30677: PUSH
30678: LD_INT 12
30680: PUSH
30681: LD_INT 13
30683: PUSH
30684: LD_INT 14
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
30693: GO 31270
30695: LD_INT 24
30697: DOUBLE
30698: EQUAL
30699: IFTRUE 30703
30701: GO 30729
30703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30704: LD_ADDR_VAR 0 3
30708: PUSH
30709: LD_INT 11
30711: PUSH
30712: LD_INT 12
30714: PUSH
30715: LD_INT 13
30717: PUSH
30718: LD_INT 14
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 31270
30729: LD_INT 30
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30763
30737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 11
30745: PUSH
30746: LD_INT 12
30748: PUSH
30749: LD_INT 13
30751: PUSH
30752: LD_INT 14
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
30761: GO 31270
30763: LD_INT 25
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30789
30771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_INT 13
30779: PUSH
30780: LD_INT 14
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: ST_TO_ADDR
30787: GO 31270
30789: LD_INT 27
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 30815
30797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30798: LD_ADDR_VAR 0 3
30802: PUSH
30803: LD_INT 13
30805: PUSH
30806: LD_INT 14
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: ST_TO_ADDR
30813: GO 31270
30815: LD_INT 92
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30849
30823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_INT 11
30831: PUSH
30832: LD_INT 12
30834: PUSH
30835: LD_INT 13
30837: PUSH
30838: LD_INT 14
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
30847: GO 31270
30849: LD_INT 28
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30875
30857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_INT 13
30865: PUSH
30866: LD_INT 14
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: ST_TO_ADDR
30873: GO 31270
30875: LD_INT 29
30877: DOUBLE
30878: EQUAL
30879: IFTRUE 30883
30881: GO 30901
30883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30884: LD_ADDR_VAR 0 3
30888: PUSH
30889: LD_INT 13
30891: PUSH
30892: LD_INT 14
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: ST_TO_ADDR
30899: GO 31270
30901: LD_INT 31
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30927
30909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30910: LD_ADDR_VAR 0 3
30914: PUSH
30915: LD_INT 13
30917: PUSH
30918: LD_INT 14
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: ST_TO_ADDR
30925: GO 31270
30927: LD_INT 26
30929: DOUBLE
30930: EQUAL
30931: IFTRUE 30935
30933: GO 30953
30935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 13
30943: PUSH
30944: LD_INT 14
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: ST_TO_ADDR
30951: GO 31270
30953: LD_INT 42
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 30987
30961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30962: LD_ADDR_VAR 0 3
30966: PUSH
30967: LD_INT 21
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_INT 23
30975: PUSH
30976: LD_INT 24
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: ST_TO_ADDR
30985: GO 31270
30987: LD_INT 43
30989: DOUBLE
30990: EQUAL
30991: IFTRUE 30995
30993: GO 31021
30995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30996: LD_ADDR_VAR 0 3
31000: PUSH
31001: LD_INT 21
31003: PUSH
31004: LD_INT 22
31006: PUSH
31007: LD_INT 23
31009: PUSH
31010: LD_INT 24
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
31019: GO 31270
31021: LD_INT 44
31023: DOUBLE
31024: EQUAL
31025: IFTRUE 31029
31027: GO 31055
31029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31030: LD_ADDR_VAR 0 3
31034: PUSH
31035: LD_INT 21
31037: PUSH
31038: LD_INT 22
31040: PUSH
31041: LD_INT 23
31043: PUSH
31044: LD_INT 24
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: ST_TO_ADDR
31053: GO 31270
31055: LD_INT 45
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31089
31063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31064: LD_ADDR_VAR 0 3
31068: PUSH
31069: LD_INT 21
31071: PUSH
31072: LD_INT 22
31074: PUSH
31075: LD_INT 23
31077: PUSH
31078: LD_INT 24
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
31087: GO 31270
31089: LD_INT 49
31091: DOUBLE
31092: EQUAL
31093: IFTRUE 31097
31095: GO 31123
31097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31098: LD_ADDR_VAR 0 3
31102: PUSH
31103: LD_INT 21
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_INT 23
31111: PUSH
31112: LD_INT 24
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
31121: GO 31270
31123: LD_INT 51
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31157
31131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31132: LD_ADDR_VAR 0 3
31136: PUSH
31137: LD_INT 21
31139: PUSH
31140: LD_INT 22
31142: PUSH
31143: LD_INT 23
31145: PUSH
31146: LD_INT 24
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: ST_TO_ADDR
31155: GO 31270
31157: LD_INT 52
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31191
31165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_INT 21
31173: PUSH
31174: LD_INT 22
31176: PUSH
31177: LD_INT 23
31179: PUSH
31180: LD_INT 24
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
31189: GO 31270
31191: LD_INT 53
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31217
31199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 23
31207: PUSH
31208: LD_INT 24
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: ST_TO_ADDR
31215: GO 31270
31217: LD_INT 46
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31243
31225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_INT 23
31233: PUSH
31234: LD_INT 24
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: ST_TO_ADDR
31241: GO 31270
31243: LD_INT 47
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31269
31251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31252: LD_ADDR_VAR 0 3
31256: PUSH
31257: LD_INT 23
31259: PUSH
31260: LD_INT 24
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: ST_TO_ADDR
31267: GO 31270
31269: POP
// result := ( chassis in result ) ;
31270: LD_ADDR_VAR 0 3
31274: PUSH
31275: LD_VAR 0 1
31279: PUSH
31280: LD_VAR 0 3
31284: IN
31285: ST_TO_ADDR
// end ;
31286: LD_VAR 0 3
31290: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31291: LD_INT 0
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
// result := array ;
31300: LD_ADDR_VAR 0 5
31304: PUSH
31305: LD_VAR 0 1
31309: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31310: LD_VAR 0 1
31314: NOT
31315: PUSH
31316: LD_VAR 0 2
31320: NOT
31321: OR
31322: PUSH
31323: LD_VAR 0 3
31327: NOT
31328: OR
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: LD_VAR 0 1
31339: GREATER
31340: OR
31341: PUSH
31342: LD_VAR 0 3
31346: PUSH
31347: LD_VAR 0 1
31351: GREATER
31352: OR
31353: IFFALSE 31357
// exit ;
31355: GO 31653
// if direction then
31357: LD_VAR 0 4
31361: IFFALSE 31425
// begin d := 1 ;
31363: LD_ADDR_VAR 0 9
31367: PUSH
31368: LD_INT 1
31370: ST_TO_ADDR
// if i_from > i_to then
31371: LD_VAR 0 2
31375: PUSH
31376: LD_VAR 0 3
31380: GREATER
31381: IFFALSE 31407
// length := ( array - i_from ) + i_to else
31383: LD_ADDR_VAR 0 11
31387: PUSH
31388: LD_VAR 0 1
31392: PUSH
31393: LD_VAR 0 2
31397: MINUS
31398: PUSH
31399: LD_VAR 0 3
31403: PLUS
31404: ST_TO_ADDR
31405: GO 31423
// length := i_to - i_from ;
31407: LD_ADDR_VAR 0 11
31411: PUSH
31412: LD_VAR 0 3
31416: PUSH
31417: LD_VAR 0 2
31421: MINUS
31422: ST_TO_ADDR
// end else
31423: GO 31486
// begin d := - 1 ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: ST_TO_ADDR
// if i_from > i_to then
31434: LD_VAR 0 2
31438: PUSH
31439: LD_VAR 0 3
31443: GREATER
31444: IFFALSE 31464
// length := i_from - i_to else
31446: LD_ADDR_VAR 0 11
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 3
31460: MINUS
31461: ST_TO_ADDR
31462: GO 31486
// length := ( array - i_to ) + i_from ;
31464: LD_ADDR_VAR 0 11
31468: PUSH
31469: LD_VAR 0 1
31473: PUSH
31474: LD_VAR 0 3
31478: MINUS
31479: PUSH
31480: LD_VAR 0 2
31484: PLUS
31485: ST_TO_ADDR
// end ; if not length then
31486: LD_VAR 0 11
31490: NOT
31491: IFFALSE 31495
// exit ;
31493: GO 31653
// tmp := array ;
31495: LD_ADDR_VAR 0 10
31499: PUSH
31500: LD_VAR 0 1
31504: ST_TO_ADDR
// for i = 1 to length do
31505: LD_ADDR_VAR 0 6
31509: PUSH
31510: DOUBLE
31511: LD_INT 1
31513: DEC
31514: ST_TO_ADDR
31515: LD_VAR 0 11
31519: PUSH
31520: FOR_TO
31521: IFFALSE 31641
// begin for j = 1 to array do
31523: LD_ADDR_VAR 0 7
31527: PUSH
31528: DOUBLE
31529: LD_INT 1
31531: DEC
31532: ST_TO_ADDR
31533: LD_VAR 0 1
31537: PUSH
31538: FOR_TO
31539: IFFALSE 31627
// begin k := j + d ;
31541: LD_ADDR_VAR 0 8
31545: PUSH
31546: LD_VAR 0 7
31550: PUSH
31551: LD_VAR 0 9
31555: PLUS
31556: ST_TO_ADDR
// if k > array then
31557: LD_VAR 0 8
31561: PUSH
31562: LD_VAR 0 1
31566: GREATER
31567: IFFALSE 31577
// k := 1 ;
31569: LD_ADDR_VAR 0 8
31573: PUSH
31574: LD_INT 1
31576: ST_TO_ADDR
// if not k then
31577: LD_VAR 0 8
31581: NOT
31582: IFFALSE 31594
// k := array ;
31584: LD_ADDR_VAR 0 8
31588: PUSH
31589: LD_VAR 0 1
31593: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31594: LD_ADDR_VAR 0 10
31598: PUSH
31599: LD_VAR 0 10
31603: PPUSH
31604: LD_VAR 0 8
31608: PPUSH
31609: LD_VAR 0 1
31613: PUSH
31614: LD_VAR 0 7
31618: ARRAY
31619: PPUSH
31620: CALL_OW 1
31624: ST_TO_ADDR
// end ;
31625: GO 31538
31627: POP
31628: POP
// array := tmp ;
31629: LD_ADDR_VAR 0 1
31633: PUSH
31634: LD_VAR 0 10
31638: ST_TO_ADDR
// end ;
31639: GO 31520
31641: POP
31642: POP
// result := array ;
31643: LD_ADDR_VAR 0 5
31647: PUSH
31648: LD_VAR 0 1
31652: ST_TO_ADDR
// end ;
31653: LD_VAR 0 5
31657: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31658: LD_INT 0
31660: PPUSH
31661: PPUSH
// result := 0 ;
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// if not array or not value in array then
31670: LD_VAR 0 1
31674: NOT
31675: PUSH
31676: LD_VAR 0 2
31680: PUSH
31681: LD_VAR 0 1
31685: IN
31686: NOT
31687: OR
31688: IFFALSE 31692
// exit ;
31690: GO 31746
// for i = 1 to array do
31692: LD_ADDR_VAR 0 4
31696: PUSH
31697: DOUBLE
31698: LD_INT 1
31700: DEC
31701: ST_TO_ADDR
31702: LD_VAR 0 1
31706: PUSH
31707: FOR_TO
31708: IFFALSE 31744
// if value = array [ i ] then
31710: LD_VAR 0 2
31714: PUSH
31715: LD_VAR 0 1
31719: PUSH
31720: LD_VAR 0 4
31724: ARRAY
31725: EQUAL
31726: IFFALSE 31742
// begin result := i ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: LD_VAR 0 4
31737: ST_TO_ADDR
// exit ;
31738: POP
31739: POP
31740: GO 31746
// end ;
31742: GO 31707
31744: POP
31745: POP
// end ;
31746: LD_VAR 0 3
31750: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31751: LD_INT 0
31753: PPUSH
// vc_chassis := chassis ;
31754: LD_ADDR_OWVAR 37
31758: PUSH
31759: LD_VAR 0 1
31763: ST_TO_ADDR
// vc_engine := engine ;
31764: LD_ADDR_OWVAR 39
31768: PUSH
31769: LD_VAR 0 2
31773: ST_TO_ADDR
// vc_control := control ;
31774: LD_ADDR_OWVAR 38
31778: PUSH
31779: LD_VAR 0 3
31783: ST_TO_ADDR
// vc_weapon := weapon ;
31784: LD_ADDR_OWVAR 40
31788: PUSH
31789: LD_VAR 0 4
31793: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31794: LD_ADDR_OWVAR 41
31798: PUSH
31799: LD_VAR 0 5
31803: ST_TO_ADDR
// end ;
31804: LD_VAR 0 6
31808: RET
// export function WantPlant ( unit ) ; var task ; begin
31809: LD_INT 0
31811: PPUSH
31812: PPUSH
// result := false ;
31813: LD_ADDR_VAR 0 2
31817: PUSH
31818: LD_INT 0
31820: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: LD_VAR 0 1
31830: PPUSH
31831: CALL_OW 437
31835: ST_TO_ADDR
// if task then
31836: LD_VAR 0 3
31840: IFFALSE 31868
// if task [ 1 ] [ 1 ] = p then
31842: LD_VAR 0 3
31846: PUSH
31847: LD_INT 1
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: PUSH
31855: LD_STRING p
31857: EQUAL
31858: IFFALSE 31868
// result := true ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_INT 1
31867: ST_TO_ADDR
// end ;
31868: LD_VAR 0 2
31872: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31873: LD_INT 0
31875: PPUSH
31876: PPUSH
31877: PPUSH
31878: PPUSH
// if pos < 1 then
31879: LD_VAR 0 2
31883: PUSH
31884: LD_INT 1
31886: LESS
31887: IFFALSE 31891
// exit ;
31889: GO 32194
// if pos = 1 then
31891: LD_VAR 0 2
31895: PUSH
31896: LD_INT 1
31898: EQUAL
31899: IFFALSE 31932
// result := Replace ( arr , pos [ 1 ] , value ) else
31901: LD_ADDR_VAR 0 4
31905: PUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: LD_VAR 0 2
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 1
31929: ST_TO_ADDR
31930: GO 32194
// begin tmp := arr ;
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: LD_VAR 0 1
31941: ST_TO_ADDR
// s_arr := [ tmp ] ;
31942: LD_ADDR_VAR 0 7
31946: PUSH
31947: LD_VAR 0 6
31951: PUSH
31952: EMPTY
31953: LIST
31954: ST_TO_ADDR
// for i = 1 to pos - 1 do
31955: LD_ADDR_VAR 0 5
31959: PUSH
31960: DOUBLE
31961: LD_INT 1
31963: DEC
31964: ST_TO_ADDR
31965: LD_VAR 0 2
31969: PUSH
31970: LD_INT 1
31972: MINUS
31973: PUSH
31974: FOR_TO
31975: IFFALSE 32020
// begin tmp := tmp [ pos [ i ] ] ;
31977: LD_ADDR_VAR 0 6
31981: PUSH
31982: LD_VAR 0 6
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: LD_VAR 0 5
31996: ARRAY
31997: ARRAY
31998: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31999: LD_ADDR_VAR 0 7
32003: PUSH
32004: LD_VAR 0 7
32008: PUSH
32009: LD_VAR 0 6
32013: PUSH
32014: EMPTY
32015: LIST
32016: ADD
32017: ST_TO_ADDR
// end ;
32018: GO 31974
32020: POP
32021: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32022: LD_ADDR_VAR 0 6
32026: PUSH
32027: LD_VAR 0 6
32031: PPUSH
32032: LD_VAR 0 2
32036: PUSH
32037: LD_VAR 0 2
32041: ARRAY
32042: PPUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: CALL_OW 1
32052: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32053: LD_ADDR_VAR 0 7
32057: PUSH
32058: LD_VAR 0 7
32062: PPUSH
32063: LD_VAR 0 7
32067: PPUSH
32068: LD_VAR 0 6
32072: PPUSH
32073: CALL_OW 1
32077: ST_TO_ADDR
// for i = s_arr downto 2 do
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: DOUBLE
32084: LD_VAR 0 7
32088: INC
32089: ST_TO_ADDR
32090: LD_INT 2
32092: PUSH
32093: FOR_DOWNTO
32094: IFFALSE 32178
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32096: LD_ADDR_VAR 0 6
32100: PUSH
32101: LD_VAR 0 7
32105: PUSH
32106: LD_VAR 0 5
32110: PUSH
32111: LD_INT 1
32113: MINUS
32114: ARRAY
32115: PPUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_VAR 0 5
32125: PUSH
32126: LD_INT 1
32128: MINUS
32129: ARRAY
32130: PPUSH
32131: LD_VAR 0 7
32135: PUSH
32136: LD_VAR 0 5
32140: ARRAY
32141: PPUSH
32142: CALL_OW 1
32146: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32147: LD_ADDR_VAR 0 7
32151: PUSH
32152: LD_VAR 0 7
32156: PPUSH
32157: LD_VAR 0 5
32161: PUSH
32162: LD_INT 1
32164: MINUS
32165: PPUSH
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 1
32175: ST_TO_ADDR
// end ;
32176: GO 32093
32178: POP
32179: POP
// result := s_arr [ 1 ] ;
32180: LD_ADDR_VAR 0 4
32184: PUSH
32185: LD_VAR 0 7
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: ST_TO_ADDR
// end ; end ;
32194: LD_VAR 0 4
32198: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
// if not list then
32203: LD_VAR 0 1
32207: NOT
32208: IFFALSE 32212
// exit ;
32210: GO 32303
// i := list [ pos1 ] ;
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: LD_VAR 0 1
32221: PUSH
32222: LD_VAR 0 2
32226: ARRAY
32227: ST_TO_ADDR
// if not i then
32228: LD_VAR 0 5
32232: NOT
32233: IFFALSE 32237
// exit ;
32235: GO 32303
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32237: LD_ADDR_VAR 0 1
32241: PUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: LD_VAR 0 2
32251: PPUSH
32252: LD_VAR 0 1
32256: PUSH
32257: LD_VAR 0 3
32261: ARRAY
32262: PPUSH
32263: CALL_OW 1
32267: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32268: LD_ADDR_VAR 0 1
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: LD_VAR 0 3
32282: PPUSH
32283: LD_VAR 0 5
32287: PPUSH
32288: CALL_OW 1
32292: ST_TO_ADDR
// result := list ;
32293: LD_ADDR_VAR 0 4
32297: PUSH
32298: LD_VAR 0 1
32302: ST_TO_ADDR
// end ;
32303: LD_VAR 0 4
32307: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32308: LD_INT 0
32310: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32311: LD_ADDR_VAR 0 5
32315: PUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: CALL_OW 250
32325: PPUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 251
32335: PPUSH
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: LD_VAR 0 4
32350: PPUSH
32351: CALL 32361 0 5
32355: ST_TO_ADDR
// end ;
32356: LD_VAR 0 5
32360: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32361: LD_INT 0
32363: PPUSH
32364: PPUSH
32365: PPUSH
32366: PPUSH
// if not list then
32367: LD_VAR 0 3
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 32764
// result := [ ] ;
32376: LD_ADDR_VAR 0 6
32380: PUSH
32381: EMPTY
32382: ST_TO_ADDR
// for i in list do
32383: LD_ADDR_VAR 0 7
32387: PUSH
32388: LD_VAR 0 3
32392: PUSH
32393: FOR_IN
32394: IFFALSE 32596
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32396: LD_ADDR_VAR 0 9
32400: PUSH
32401: LD_VAR 0 7
32405: PPUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: LD_VAR 0 2
32415: PPUSH
32416: CALL_OW 297
32420: ST_TO_ADDR
// if not result then
32421: LD_VAR 0 6
32425: NOT
32426: IFFALSE 32452
// result := [ [ i , tmp ] ] else
32428: LD_ADDR_VAR 0 6
32432: PUSH
32433: LD_VAR 0 7
32437: PUSH
32438: LD_VAR 0 9
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: ST_TO_ADDR
32450: GO 32594
// begin if result [ result ] [ 2 ] < tmp then
32452: LD_VAR 0 6
32456: PUSH
32457: LD_VAR 0 6
32461: ARRAY
32462: PUSH
32463: LD_INT 2
32465: ARRAY
32466: PUSH
32467: LD_VAR 0 9
32471: LESS
32472: IFFALSE 32514
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32474: LD_ADDR_VAR 0 6
32478: PUSH
32479: LD_VAR 0 6
32483: PPUSH
32484: LD_VAR 0 6
32488: PUSH
32489: LD_INT 1
32491: PLUS
32492: PPUSH
32493: LD_VAR 0 7
32497: PUSH
32498: LD_VAR 0 9
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 2
32511: ST_TO_ADDR
32512: GO 32594
// for j = 1 to result do
32514: LD_ADDR_VAR 0 8
32518: PUSH
32519: DOUBLE
32520: LD_INT 1
32522: DEC
32523: ST_TO_ADDR
32524: LD_VAR 0 6
32528: PUSH
32529: FOR_TO
32530: IFFALSE 32592
// begin if tmp < result [ j ] [ 2 ] then
32532: LD_VAR 0 9
32536: PUSH
32537: LD_VAR 0 6
32541: PUSH
32542: LD_VAR 0 8
32546: ARRAY
32547: PUSH
32548: LD_INT 2
32550: ARRAY
32551: LESS
32552: IFFALSE 32590
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32554: LD_ADDR_VAR 0 6
32558: PUSH
32559: LD_VAR 0 6
32563: PPUSH
32564: LD_VAR 0 8
32568: PPUSH
32569: LD_VAR 0 7
32573: PUSH
32574: LD_VAR 0 9
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PPUSH
32583: CALL_OW 2
32587: ST_TO_ADDR
// break ;
32588: GO 32592
// end ; end ;
32590: GO 32529
32592: POP
32593: POP
// end ; end ;
32594: GO 32393
32596: POP
32597: POP
// if result and not asc then
32598: LD_VAR 0 6
32602: PUSH
32603: LD_VAR 0 4
32607: NOT
32608: AND
32609: IFFALSE 32684
// begin tmp := result ;
32611: LD_ADDR_VAR 0 9
32615: PUSH
32616: LD_VAR 0 6
32620: ST_TO_ADDR
// for i = tmp downto 1 do
32621: LD_ADDR_VAR 0 7
32625: PUSH
32626: DOUBLE
32627: LD_VAR 0 9
32631: INC
32632: ST_TO_ADDR
32633: LD_INT 1
32635: PUSH
32636: FOR_DOWNTO
32637: IFFALSE 32682
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32639: LD_ADDR_VAR 0 6
32643: PUSH
32644: LD_VAR 0 6
32648: PPUSH
32649: LD_VAR 0 9
32653: PUSH
32654: LD_VAR 0 7
32658: MINUS
32659: PUSH
32660: LD_INT 1
32662: PLUS
32663: PPUSH
32664: LD_VAR 0 9
32668: PUSH
32669: LD_VAR 0 7
32673: ARRAY
32674: PPUSH
32675: CALL_OW 1
32679: ST_TO_ADDR
32680: GO 32636
32682: POP
32683: POP
// end ; tmp := [ ] ;
32684: LD_ADDR_VAR 0 9
32688: PUSH
32689: EMPTY
32690: ST_TO_ADDR
// if mode then
32691: LD_VAR 0 5
32695: IFFALSE 32764
// begin for i = 1 to result do
32697: LD_ADDR_VAR 0 7
32701: PUSH
32702: DOUBLE
32703: LD_INT 1
32705: DEC
32706: ST_TO_ADDR
32707: LD_VAR 0 6
32711: PUSH
32712: FOR_TO
32713: IFFALSE 32752
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32715: LD_ADDR_VAR 0 9
32719: PUSH
32720: LD_VAR 0 9
32724: PPUSH
32725: LD_VAR 0 7
32729: PPUSH
32730: LD_VAR 0 6
32734: PUSH
32735: LD_VAR 0 7
32739: ARRAY
32740: PUSH
32741: LD_INT 1
32743: ARRAY
32744: PPUSH
32745: CALL_OW 1
32749: ST_TO_ADDR
32750: GO 32712
32752: POP
32753: POP
// result := tmp ;
32754: LD_ADDR_VAR 0 6
32758: PUSH
32759: LD_VAR 0 9
32763: ST_TO_ADDR
// end ; end ;
32764: LD_VAR 0 6
32768: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32769: LD_INT 0
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32777: LD_ADDR_VAR 0 5
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: ST_TO_ADDR
// if not x or not y then
32799: LD_VAR 0 2
32803: NOT
32804: PUSH
32805: LD_VAR 0 3
32809: NOT
32810: OR
32811: IFFALSE 32815
// exit ;
32813: GO 34465
// if not range then
32815: LD_VAR 0 4
32819: NOT
32820: IFFALSE 32830
// range := 10 ;
32822: LD_ADDR_VAR 0 4
32826: PUSH
32827: LD_INT 10
32829: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32830: LD_ADDR_VAR 0 8
32834: PUSH
32835: LD_INT 81
32837: PUSH
32838: LD_VAR 0 1
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 92
32849: PUSH
32850: LD_VAR 0 2
32854: PUSH
32855: LD_VAR 0 3
32859: PUSH
32860: LD_VAR 0 4
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 21
32876: PUSH
32877: LD_INT 3
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 69
32897: ST_TO_ADDR
// if not tmp then
32898: LD_VAR 0 8
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 34465
// for i in tmp do
32907: LD_ADDR_VAR 0 6
32911: PUSH
32912: LD_VAR 0 8
32916: PUSH
32917: FOR_IN
32918: IFFALSE 34440
// begin points := [ 0 , 0 , 0 ] ;
32920: LD_ADDR_VAR 0 9
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// bpoints := 1 ;
32939: LD_ADDR_VAR 0 10
32943: PUSH
32944: LD_INT 1
32946: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32947: LD_VAR 0 6
32951: PPUSH
32952: CALL_OW 247
32956: PUSH
32957: LD_INT 1
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 33543
32965: POP
// begin if GetClass ( i ) = 1 then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 257
32975: PUSH
32976: LD_INT 1
32978: EQUAL
32979: IFFALSE 33000
// points := [ 10 , 5 , 3 ] ;
32981: LD_ADDR_VAR 0 9
32985: PUSH
32986: LD_INT 10
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33000: LD_VAR 0 6
33004: PPUSH
33005: CALL_OW 257
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 4
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: IN
33024: IFFALSE 33045
// points := [ 3 , 2 , 1 ] ;
33026: LD_ADDR_VAR 0 9
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33045: LD_VAR 0 6
33049: PPUSH
33050: CALL_OW 257
33054: PUSH
33055: LD_INT 5
33057: EQUAL
33058: IFFALSE 33079
// points := [ 130 , 5 , 2 ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_INT 130
33067: PUSH
33068: LD_INT 5
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33079: LD_VAR 0 6
33083: PPUSH
33084: CALL_OW 257
33088: PUSH
33089: LD_INT 8
33091: EQUAL
33092: IFFALSE 33113
// points := [ 35 , 35 , 30 ] ;
33094: LD_ADDR_VAR 0 9
33098: PUSH
33099: LD_INT 35
33101: PUSH
33102: LD_INT 35
33104: PUSH
33105: LD_INT 30
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33113: LD_VAR 0 6
33117: PPUSH
33118: CALL_OW 257
33122: PUSH
33123: LD_INT 9
33125: EQUAL
33126: IFFALSE 33147
// points := [ 20 , 55 , 40 ] ;
33128: LD_ADDR_VAR 0 9
33132: PUSH
33133: LD_INT 20
33135: PUSH
33136: LD_INT 55
33138: PUSH
33139: LD_INT 40
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 257
33156: PUSH
33157: LD_INT 12
33159: PUSH
33160: LD_INT 16
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: IN
33167: IFFALSE 33188
// points := [ 5 , 3 , 2 ] ;
33169: LD_ADDR_VAR 0 9
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33188: LD_VAR 0 6
33192: PPUSH
33193: CALL_OW 257
33197: PUSH
33198: LD_INT 17
33200: EQUAL
33201: IFFALSE 33222
// points := [ 100 , 50 , 75 ] ;
33203: LD_ADDR_VAR 0 9
33207: PUSH
33208: LD_INT 100
33210: PUSH
33211: LD_INT 50
33213: PUSH
33214: LD_INT 75
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33222: LD_VAR 0 6
33226: PPUSH
33227: CALL_OW 257
33231: PUSH
33232: LD_INT 15
33234: EQUAL
33235: IFFALSE 33256
// points := [ 10 , 5 , 3 ] ;
33237: LD_ADDR_VAR 0 9
33241: PUSH
33242: LD_INT 10
33244: PUSH
33245: LD_INT 5
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33256: LD_VAR 0 6
33260: PPUSH
33261: CALL_OW 257
33265: PUSH
33266: LD_INT 14
33268: EQUAL
33269: IFFALSE 33290
// points := [ 10 , 0 , 0 ] ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_INT 10
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33290: LD_VAR 0 6
33294: PPUSH
33295: CALL_OW 257
33299: PUSH
33300: LD_INT 11
33302: EQUAL
33303: IFFALSE 33324
// points := [ 30 , 10 , 5 ] ;
33305: LD_ADDR_VAR 0 9
33309: PUSH
33310: LD_INT 30
33312: PUSH
33313: LD_INT 10
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33324: LD_VAR 0 1
33328: PPUSH
33329: LD_INT 5
33331: PPUSH
33332: CALL_OW 321
33336: PUSH
33337: LD_INT 2
33339: EQUAL
33340: IFFALSE 33357
// bpoints := bpoints * 1.8 ;
33342: LD_ADDR_VAR 0 10
33346: PUSH
33347: LD_VAR 0 10
33351: PUSH
33352: LD_REAL  1.80000000000000E+0000
33355: MUL
33356: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33357: LD_VAR 0 6
33361: PPUSH
33362: CALL_OW 257
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: IN
33385: PUSH
33386: LD_VAR 0 1
33390: PPUSH
33391: LD_INT 51
33393: PPUSH
33394: CALL_OW 321
33398: PUSH
33399: LD_INT 2
33401: EQUAL
33402: AND
33403: IFFALSE 33420
// bpoints := bpoints * 1.2 ;
33405: LD_ADDR_VAR 0 10
33409: PUSH
33410: LD_VAR 0 10
33414: PUSH
33415: LD_REAL  1.20000000000000E+0000
33418: MUL
33419: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33420: LD_VAR 0 6
33424: PPUSH
33425: CALL_OW 257
33429: PUSH
33430: LD_INT 5
33432: PUSH
33433: LD_INT 7
33435: PUSH
33436: LD_INT 9
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: IN
33444: PUSH
33445: LD_VAR 0 1
33449: PPUSH
33450: LD_INT 52
33452: PPUSH
33453: CALL_OW 321
33457: PUSH
33458: LD_INT 2
33460: EQUAL
33461: AND
33462: IFFALSE 33479
// bpoints := bpoints * 1.5 ;
33464: LD_ADDR_VAR 0 10
33468: PUSH
33469: LD_VAR 0 10
33473: PUSH
33474: LD_REAL  1.50000000000000E+0000
33477: MUL
33478: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33479: LD_VAR 0 1
33483: PPUSH
33484: LD_INT 66
33486: PPUSH
33487: CALL_OW 321
33491: PUSH
33492: LD_INT 2
33494: EQUAL
33495: IFFALSE 33512
// bpoints := bpoints * 1.1 ;
33497: LD_ADDR_VAR 0 10
33501: PUSH
33502: LD_VAR 0 10
33506: PUSH
33507: LD_REAL  1.10000000000000E+0000
33510: MUL
33511: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33512: LD_ADDR_VAR 0 10
33516: PUSH
33517: LD_VAR 0 10
33521: PUSH
33522: LD_VAR 0 6
33526: PPUSH
33527: LD_INT 1
33529: PPUSH
33530: CALL_OW 259
33534: PUSH
33535: LD_REAL  1.15000000000000E+0000
33538: MUL
33539: MUL
33540: ST_TO_ADDR
// end ; unit_vehicle :
33541: GO 34369
33543: LD_INT 2
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 34357
33551: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33552: LD_VAR 0 6
33556: PPUSH
33557: CALL_OW 264
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: LD_INT 42
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: IN
33576: IFFALSE 33597
// points := [ 25 , 5 , 3 ] ;
33578: LD_ADDR_VAR 0 9
33582: PUSH
33583: LD_INT 25
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33597: LD_VAR 0 6
33601: PPUSH
33602: CALL_OW 264
33606: PUSH
33607: LD_INT 4
33609: PUSH
33610: LD_INT 43
33612: PUSH
33613: LD_INT 25
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: IN
33621: IFFALSE 33642
// points := [ 40 , 15 , 5 ] ;
33623: LD_ADDR_VAR 0 9
33627: PUSH
33628: LD_INT 40
33630: PUSH
33631: LD_INT 15
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33642: LD_VAR 0 6
33646: PPUSH
33647: CALL_OW 264
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 23
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: IN
33662: IFFALSE 33683
// points := [ 7 , 25 , 8 ] ;
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_INT 7
33671: PUSH
33672: LD_INT 25
33674: PUSH
33675: LD_INT 8
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33683: LD_VAR 0 6
33687: PPUSH
33688: CALL_OW 264
33692: PUSH
33693: LD_INT 5
33695: PUSH
33696: LD_INT 27
33698: PUSH
33699: LD_INT 44
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: IN
33707: IFFALSE 33728
// points := [ 14 , 50 , 16 ] ;
33709: LD_ADDR_VAR 0 9
33713: PUSH
33714: LD_INT 14
33716: PUSH
33717: LD_INT 50
33719: PUSH
33720: LD_INT 16
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33728: LD_VAR 0 6
33732: PPUSH
33733: CALL_OW 264
33737: PUSH
33738: LD_INT 6
33740: PUSH
33741: LD_INT 46
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: IN
33748: IFFALSE 33769
// points := [ 32 , 120 , 70 ] ;
33750: LD_ADDR_VAR 0 9
33754: PUSH
33755: LD_INT 32
33757: PUSH
33758: LD_INT 120
33760: PUSH
33761: LD_INT 70
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33769: LD_VAR 0 6
33773: PPUSH
33774: CALL_OW 264
33778: PUSH
33779: LD_INT 7
33781: PUSH
33782: LD_INT 28
33784: PUSH
33785: LD_INT 45
33787: PUSH
33788: LD_INT 92
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: IN
33797: IFFALSE 33818
// points := [ 35 , 20 , 45 ] ;
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: LD_INT 35
33806: PUSH
33807: LD_INT 20
33809: PUSH
33810: LD_INT 45
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33818: LD_VAR 0 6
33822: PPUSH
33823: CALL_OW 264
33827: PUSH
33828: LD_INT 47
33830: PUSH
33831: EMPTY
33832: LIST
33833: IN
33834: IFFALSE 33855
// points := [ 67 , 45 , 75 ] ;
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: LD_INT 67
33843: PUSH
33844: LD_INT 45
33846: PUSH
33847: LD_INT 75
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33855: LD_VAR 0 6
33859: PPUSH
33860: CALL_OW 264
33864: PUSH
33865: LD_INT 26
33867: PUSH
33868: EMPTY
33869: LIST
33870: IN
33871: IFFALSE 33892
// points := [ 120 , 30 , 80 ] ;
33873: LD_ADDR_VAR 0 9
33877: PUSH
33878: LD_INT 120
33880: PUSH
33881: LD_INT 30
33883: PUSH
33884: LD_INT 80
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33892: LD_VAR 0 6
33896: PPUSH
33897: CALL_OW 264
33901: PUSH
33902: LD_INT 22
33904: PUSH
33905: EMPTY
33906: LIST
33907: IN
33908: IFFALSE 33929
// points := [ 40 , 1 , 1 ] ;
33910: LD_ADDR_VAR 0 9
33914: PUSH
33915: LD_INT 40
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33929: LD_VAR 0 6
33933: PPUSH
33934: CALL_OW 264
33938: PUSH
33939: LD_INT 29
33941: PUSH
33942: EMPTY
33943: LIST
33944: IN
33945: IFFALSE 33966
// points := [ 70 , 200 , 400 ] ;
33947: LD_ADDR_VAR 0 9
33951: PUSH
33952: LD_INT 70
33954: PUSH
33955: LD_INT 200
33957: PUSH
33958: LD_INT 400
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33966: LD_VAR 0 6
33970: PPUSH
33971: CALL_OW 264
33975: PUSH
33976: LD_INT 14
33978: PUSH
33979: LD_INT 53
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: IN
33986: IFFALSE 34007
// points := [ 40 , 10 , 20 ] ;
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_INT 40
33995: PUSH
33996: LD_INT 10
33998: PUSH
33999: LD_INT 20
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34007: LD_VAR 0 6
34011: PPUSH
34012: CALL_OW 264
34016: PUSH
34017: LD_INT 9
34019: PUSH
34020: EMPTY
34021: LIST
34022: IN
34023: IFFALSE 34044
// points := [ 5 , 70 , 20 ] ;
34025: LD_ADDR_VAR 0 9
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 70
34035: PUSH
34036: LD_INT 20
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34044: LD_VAR 0 6
34048: PPUSH
34049: CALL_OW 264
34053: PUSH
34054: LD_INT 10
34056: PUSH
34057: EMPTY
34058: LIST
34059: IN
34060: IFFALSE 34081
// points := [ 35 , 110 , 70 ] ;
34062: LD_ADDR_VAR 0 9
34066: PUSH
34067: LD_INT 35
34069: PUSH
34070: LD_INT 110
34072: PUSH
34073: LD_INT 70
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34081: LD_VAR 0 6
34085: PPUSH
34086: CALL_OW 265
34090: PUSH
34091: LD_INT 25
34093: EQUAL
34094: IFFALSE 34115
// points := [ 80 , 65 , 100 ] ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_INT 80
34103: PUSH
34104: LD_INT 65
34106: PUSH
34107: LD_INT 100
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34115: LD_VAR 0 6
34119: PPUSH
34120: CALL_OW 263
34124: PUSH
34125: LD_INT 1
34127: EQUAL
34128: IFFALSE 34163
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34130: LD_ADDR_VAR 0 10
34134: PUSH
34135: LD_VAR 0 10
34139: PUSH
34140: LD_VAR 0 6
34144: PPUSH
34145: CALL_OW 311
34149: PPUSH
34150: LD_INT 3
34152: PPUSH
34153: CALL_OW 259
34157: PUSH
34158: LD_INT 4
34160: MUL
34161: MUL
34162: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34163: LD_VAR 0 6
34167: PPUSH
34168: CALL_OW 263
34172: PUSH
34173: LD_INT 2
34175: EQUAL
34176: IFFALSE 34227
// begin j := IsControledBy ( i ) ;
34178: LD_ADDR_VAR 0 7
34182: PUSH
34183: LD_VAR 0 6
34187: PPUSH
34188: CALL_OW 312
34192: ST_TO_ADDR
// if j then
34193: LD_VAR 0 7
34197: IFFALSE 34227
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34199: LD_ADDR_VAR 0 10
34203: PUSH
34204: LD_VAR 0 10
34208: PUSH
34209: LD_VAR 0 7
34213: PPUSH
34214: LD_INT 3
34216: PPUSH
34217: CALL_OW 259
34221: PUSH
34222: LD_INT 3
34224: MUL
34225: MUL
34226: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34227: LD_VAR 0 6
34231: PPUSH
34232: CALL_OW 264
34236: PUSH
34237: LD_INT 5
34239: PUSH
34240: LD_INT 6
34242: PUSH
34243: LD_INT 46
34245: PUSH
34246: LD_INT 44
34248: PUSH
34249: LD_INT 47
34251: PUSH
34252: LD_INT 45
34254: PUSH
34255: LD_INT 28
34257: PUSH
34258: LD_INT 7
34260: PUSH
34261: LD_INT 27
34263: PUSH
34264: LD_INT 29
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: IN
34279: PUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: LD_INT 52
34287: PPUSH
34288: CALL_OW 321
34292: PUSH
34293: LD_INT 2
34295: EQUAL
34296: AND
34297: IFFALSE 34314
// bpoints := bpoints * 1.2 ;
34299: LD_ADDR_VAR 0 10
34303: PUSH
34304: LD_VAR 0 10
34308: PUSH
34309: LD_REAL  1.20000000000000E+0000
34312: MUL
34313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34314: LD_VAR 0 6
34318: PPUSH
34319: CALL_OW 264
34323: PUSH
34324: LD_INT 6
34326: PUSH
34327: LD_INT 46
34329: PUSH
34330: LD_INT 47
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: IN
34338: IFFALSE 34355
// bpoints := bpoints * 1.2 ;
34340: LD_ADDR_VAR 0 10
34344: PUSH
34345: LD_VAR 0 10
34349: PUSH
34350: LD_REAL  1.20000000000000E+0000
34353: MUL
34354: ST_TO_ADDR
// end ; unit_building :
34355: GO 34369
34357: LD_INT 3
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34368
34365: POP
// ; end ;
34366: GO 34369
34368: POP
// for j = 1 to 3 do
34369: LD_ADDR_VAR 0 7
34373: PUSH
34374: DOUBLE
34375: LD_INT 1
34377: DEC
34378: ST_TO_ADDR
34379: LD_INT 3
34381: PUSH
34382: FOR_TO
34383: IFFALSE 34436
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34385: LD_ADDR_VAR 0 5
34389: PUSH
34390: LD_VAR 0 5
34394: PPUSH
34395: LD_VAR 0 7
34399: PPUSH
34400: LD_VAR 0 5
34404: PUSH
34405: LD_VAR 0 7
34409: ARRAY
34410: PUSH
34411: LD_VAR 0 9
34415: PUSH
34416: LD_VAR 0 7
34420: ARRAY
34421: PUSH
34422: LD_VAR 0 10
34426: MUL
34427: PLUS
34428: PPUSH
34429: CALL_OW 1
34433: ST_TO_ADDR
34434: GO 34382
34436: POP
34437: POP
// end ;
34438: GO 32917
34440: POP
34441: POP
// result := Replace ( result , 4 , tmp ) ;
34442: LD_ADDR_VAR 0 5
34446: PUSH
34447: LD_VAR 0 5
34451: PPUSH
34452: LD_INT 4
34454: PPUSH
34455: LD_VAR 0 8
34459: PPUSH
34460: CALL_OW 1
34464: ST_TO_ADDR
// end ;
34465: LD_VAR 0 5
34469: RET
// export function DangerAtRange ( unit , range ) ; begin
34470: LD_INT 0
34472: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34473: LD_ADDR_VAR 0 3
34477: PUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 255
34487: PPUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 250
34497: PPUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 251
34507: PPUSH
34508: LD_VAR 0 2
34512: PPUSH
34513: CALL 32769 0 4
34517: ST_TO_ADDR
// end ;
34518: LD_VAR 0 3
34522: RET
// export function DangerInArea ( side , area ) ; begin
34523: LD_INT 0
34525: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_VAR 0 2
34535: PPUSH
34536: LD_INT 81
34538: PUSH
34539: LD_VAR 0 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PPUSH
34548: CALL_OW 70
34552: ST_TO_ADDR
// end ;
34553: LD_VAR 0 3
34557: RET
// export function IsExtension ( b ) ; begin
34558: LD_INT 0
34560: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34561: LD_ADDR_VAR 0 2
34565: PUSH
34566: LD_VAR 0 1
34570: PUSH
34571: LD_INT 23
34573: PUSH
34574: LD_INT 20
34576: PUSH
34577: LD_INT 22
34579: PUSH
34580: LD_INT 17
34582: PUSH
34583: LD_INT 24
34585: PUSH
34586: LD_INT 21
34588: PUSH
34589: LD_INT 19
34591: PUSH
34592: LD_INT 16
34594: PUSH
34595: LD_INT 25
34597: PUSH
34598: LD_INT 18
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: IN
34613: ST_TO_ADDR
// end ;
34614: LD_VAR 0 2
34618: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34619: LD_INT 0
34621: PPUSH
34622: PPUSH
34623: PPUSH
// result := [ ] ;
34624: LD_ADDR_VAR 0 4
34628: PUSH
34629: EMPTY
34630: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: LD_VAR 0 2
34640: PPUSH
34641: LD_INT 21
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PPUSH
34651: CALL_OW 70
34655: ST_TO_ADDR
// if not tmp then
34656: LD_VAR 0 5
34660: NOT
34661: IFFALSE 34665
// exit ;
34663: GO 34729
// if checkLink then
34665: LD_VAR 0 3
34669: IFFALSE 34719
// begin for i in tmp do
34671: LD_ADDR_VAR 0 6
34675: PUSH
34676: LD_VAR 0 5
34680: PUSH
34681: FOR_IN
34682: IFFALSE 34717
// if GetBase ( i ) <> base then
34684: LD_VAR 0 6
34688: PPUSH
34689: CALL_OW 274
34693: PUSH
34694: LD_VAR 0 1
34698: NONEQUAL
34699: IFFALSE 34715
// ComLinkToBase ( base , i ) ;
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_VAR 0 6
34710: PPUSH
34711: CALL_OW 169
34715: GO 34681
34717: POP
34718: POP
// end ; result := tmp ;
34719: LD_ADDR_VAR 0 4
34723: PUSH
34724: LD_VAR 0 5
34728: ST_TO_ADDR
// end ;
34729: LD_VAR 0 4
34733: RET
// export function ComComplete ( units , b ) ; var i ; begin
34734: LD_INT 0
34736: PPUSH
34737: PPUSH
// if not units then
34738: LD_VAR 0 1
34742: NOT
34743: IFFALSE 34747
// exit ;
34745: GO 34837
// for i in units do
34747: LD_ADDR_VAR 0 4
34751: PUSH
34752: LD_VAR 0 1
34756: PUSH
34757: FOR_IN
34758: IFFALSE 34835
// if BuildingStatus ( b ) = bs_build then
34760: LD_VAR 0 2
34764: PPUSH
34765: CALL_OW 461
34769: PUSH
34770: LD_INT 1
34772: EQUAL
34773: IFFALSE 34833
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34775: LD_VAR 0 4
34779: PPUSH
34780: LD_STRING h
34782: PUSH
34783: LD_VAR 0 2
34787: PPUSH
34788: CALL_OW 250
34792: PUSH
34793: LD_VAR 0 2
34797: PPUSH
34798: CALL_OW 251
34802: PUSH
34803: LD_VAR 0 2
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: PUSH
34826: EMPTY
34827: LIST
34828: PPUSH
34829: CALL_OW 446
34833: GO 34757
34835: POP
34836: POP
// end ;
34837: LD_VAR 0 3
34841: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34842: LD_INT 0
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34850: LD_VAR 0 1
34854: NOT
34855: PUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL_OW 263
34865: PUSH
34866: LD_INT 2
34868: NONEQUAL
34869: OR
34870: IFFALSE 34874
// exit ;
34872: GO 35190
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34874: LD_ADDR_VAR 0 6
34878: PUSH
34879: LD_INT 22
34881: PUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 255
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 30
34901: PUSH
34902: LD_INT 36
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 34
34911: PUSH
34912: LD_INT 31
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PPUSH
34928: CALL_OW 69
34932: ST_TO_ADDR
// if not tmp then
34933: LD_VAR 0 6
34937: NOT
34938: IFFALSE 34942
// exit ;
34940: GO 35190
// result := [ ] ;
34942: LD_ADDR_VAR 0 2
34946: PUSH
34947: EMPTY
34948: ST_TO_ADDR
// for i in tmp do
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_VAR 0 6
34958: PUSH
34959: FOR_IN
34960: IFFALSE 35031
// begin t := UnitsInside ( i ) ;
34962: LD_ADDR_VAR 0 4
34966: PUSH
34967: LD_VAR 0 3
34971: PPUSH
34972: CALL_OW 313
34976: ST_TO_ADDR
// if t then
34977: LD_VAR 0 4
34981: IFFALSE 35029
// for j in t do
34983: LD_ADDR_VAR 0 7
34987: PUSH
34988: LD_VAR 0 4
34992: PUSH
34993: FOR_IN
34994: IFFALSE 35027
// result := Replace ( result , result + 1 , j ) ;
34996: LD_ADDR_VAR 0 2
35000: PUSH
35001: LD_VAR 0 2
35005: PPUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_INT 1
35013: PLUS
35014: PPUSH
35015: LD_VAR 0 7
35019: PPUSH
35020: CALL_OW 1
35024: ST_TO_ADDR
35025: GO 34993
35027: POP
35028: POP
// end ;
35029: GO 34959
35031: POP
35032: POP
// if not result then
35033: LD_VAR 0 2
35037: NOT
35038: IFFALSE 35042
// exit ;
35040: GO 35190
// mech := result [ 1 ] ;
35042: LD_ADDR_VAR 0 5
35046: PUSH
35047: LD_VAR 0 2
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: ST_TO_ADDR
// if result > 1 then
35056: LD_VAR 0 2
35060: PUSH
35061: LD_INT 1
35063: GREATER
35064: IFFALSE 35176
// begin for i = 2 to result do
35066: LD_ADDR_VAR 0 3
35070: PUSH
35071: DOUBLE
35072: LD_INT 2
35074: DEC
35075: ST_TO_ADDR
35076: LD_VAR 0 2
35080: PUSH
35081: FOR_TO
35082: IFFALSE 35174
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35084: LD_ADDR_VAR 0 4
35088: PUSH
35089: LD_VAR 0 2
35093: PUSH
35094: LD_VAR 0 3
35098: ARRAY
35099: PPUSH
35100: LD_INT 3
35102: PPUSH
35103: CALL_OW 259
35107: PUSH
35108: LD_VAR 0 2
35112: PUSH
35113: LD_VAR 0 3
35117: ARRAY
35118: PPUSH
35119: CALL_OW 432
35123: MINUS
35124: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35125: LD_VAR 0 4
35129: PUSH
35130: LD_VAR 0 5
35134: PPUSH
35135: LD_INT 3
35137: PPUSH
35138: CALL_OW 259
35142: PUSH
35143: LD_VAR 0 5
35147: PPUSH
35148: CALL_OW 432
35152: MINUS
35153: GREATEREQUAL
35154: IFFALSE 35172
// mech := result [ i ] ;
35156: LD_ADDR_VAR 0 5
35160: PUSH
35161: LD_VAR 0 2
35165: PUSH
35166: LD_VAR 0 3
35170: ARRAY
35171: ST_TO_ADDR
// end ;
35172: GO 35081
35174: POP
35175: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35176: LD_VAR 0 1
35180: PPUSH
35181: LD_VAR 0 5
35185: PPUSH
35186: CALL_OW 135
// end ;
35190: LD_VAR 0 2
35194: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35195: LD_INT 0
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
// result := [ ] ;
35210: LD_ADDR_VAR 0 7
35214: PUSH
35215: EMPTY
35216: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL_OW 266
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: IN
35237: NOT
35238: IFFALSE 35242
// exit ;
35240: GO 36876
// if name then
35242: LD_VAR 0 3
35246: IFFALSE 35262
// SetBName ( base_dep , name ) ;
35248: LD_VAR 0 1
35252: PPUSH
35253: LD_VAR 0 3
35257: PPUSH
35258: CALL_OW 500
// base := GetBase ( base_dep ) ;
35262: LD_ADDR_VAR 0 15
35266: PUSH
35267: LD_VAR 0 1
35271: PPUSH
35272: CALL_OW 274
35276: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35277: LD_ADDR_VAR 0 16
35281: PUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 255
35291: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35292: LD_ADDR_VAR 0 17
35296: PUSH
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 248
35306: ST_TO_ADDR
// if sources then
35307: LD_VAR 0 5
35311: IFFALSE 35358
// for i = 1 to 3 do
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: DOUBLE
35319: LD_INT 1
35321: DEC
35322: ST_TO_ADDR
35323: LD_INT 3
35325: PUSH
35326: FOR_TO
35327: IFFALSE 35356
// AddResourceType ( base , i , sources [ i ] ) ;
35329: LD_VAR 0 15
35333: PPUSH
35334: LD_VAR 0 8
35338: PPUSH
35339: LD_VAR 0 5
35343: PUSH
35344: LD_VAR 0 8
35348: ARRAY
35349: PPUSH
35350: CALL_OW 276
35354: GO 35326
35356: POP
35357: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35358: LD_ADDR_VAR 0 18
35362: PUSH
35363: LD_VAR 0 15
35367: PPUSH
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_INT 1
35375: PPUSH
35376: CALL 34619 0 3
35380: ST_TO_ADDR
// InitHc ;
35381: CALL_OW 19
// InitUc ;
35385: CALL_OW 18
// uc_side := side ;
35389: LD_ADDR_OWVAR 20
35393: PUSH
35394: LD_VAR 0 16
35398: ST_TO_ADDR
// uc_nation := nation ;
35399: LD_ADDR_OWVAR 21
35403: PUSH
35404: LD_VAR 0 17
35408: ST_TO_ADDR
// if buildings then
35409: LD_VAR 0 18
35413: IFFALSE 36735
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35415: LD_ADDR_VAR 0 19
35419: PUSH
35420: LD_VAR 0 18
35424: PPUSH
35425: LD_INT 2
35427: PUSH
35428: LD_INT 30
35430: PUSH
35431: LD_INT 29
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 30
35440: PUSH
35441: LD_INT 30
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: PPUSH
35453: CALL_OW 72
35457: ST_TO_ADDR
// if tmp then
35458: LD_VAR 0 19
35462: IFFALSE 35510
// for i in tmp do
35464: LD_ADDR_VAR 0 8
35468: PUSH
35469: LD_VAR 0 19
35473: PUSH
35474: FOR_IN
35475: IFFALSE 35508
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35477: LD_VAR 0 8
35481: PPUSH
35482: CALL_OW 250
35486: PPUSH
35487: LD_VAR 0 8
35491: PPUSH
35492: CALL_OW 251
35496: PPUSH
35497: LD_VAR 0 16
35501: PPUSH
35502: CALL_OW 441
35506: GO 35474
35508: POP
35509: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35510: LD_VAR 0 18
35514: PPUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 30
35520: PUSH
35521: LD_INT 32
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 30
35530: PUSH
35531: LD_INT 33
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: PPUSH
35543: CALL_OW 72
35547: IFFALSE 35635
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35549: LD_ADDR_VAR 0 8
35553: PUSH
35554: LD_VAR 0 18
35558: PPUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: LD_INT 32
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 30
35574: PUSH
35575: LD_INT 33
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: PPUSH
35587: CALL_OW 72
35591: PUSH
35592: FOR_IN
35593: IFFALSE 35633
// begin if not GetBWeapon ( i ) then
35595: LD_VAR 0 8
35599: PPUSH
35600: CALL_OW 269
35604: NOT
35605: IFFALSE 35631
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35607: LD_VAR 0 8
35611: PPUSH
35612: LD_VAR 0 8
35616: PPUSH
35617: LD_VAR 0 2
35621: PPUSH
35622: CALL 36881 0 2
35626: PPUSH
35627: CALL_OW 431
// end ;
35631: GO 35592
35633: POP
35634: POP
// end ; for i = 1 to personel do
35635: LD_ADDR_VAR 0 8
35639: PUSH
35640: DOUBLE
35641: LD_INT 1
35643: DEC
35644: ST_TO_ADDR
35645: LD_VAR 0 6
35649: PUSH
35650: FOR_TO
35651: IFFALSE 36715
// begin if i > 4 then
35653: LD_VAR 0 8
35657: PUSH
35658: LD_INT 4
35660: GREATER
35661: IFFALSE 35665
// break ;
35663: GO 36715
// case i of 1 :
35665: LD_VAR 0 8
35669: PUSH
35670: LD_INT 1
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35758
35678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35679: LD_ADDR_VAR 0 12
35683: PUSH
35684: LD_VAR 0 18
35688: PPUSH
35689: LD_INT 22
35691: PUSH
35692: LD_VAR 0 16
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 58
35703: PUSH
35704: EMPTY
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 30
35712: PUSH
35713: LD_INT 32
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 30
35722: PUSH
35723: LD_INT 4
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 30
35732: PUSH
35733: LD_INT 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 72
35755: ST_TO_ADDR
35756: GO 35980
35758: LD_INT 2
35760: DOUBLE
35761: EQUAL
35762: IFTRUE 35766
35764: GO 35828
35766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35767: LD_ADDR_VAR 0 12
35771: PUSH
35772: LD_VAR 0 18
35776: PPUSH
35777: LD_INT 22
35779: PUSH
35780: LD_VAR 0 16
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 30
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 30
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PPUSH
35821: CALL_OW 72
35825: ST_TO_ADDR
35826: GO 35980
35828: LD_INT 3
35830: DOUBLE
35831: EQUAL
35832: IFTRUE 35836
35834: GO 35898
35836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35837: LD_ADDR_VAR 0 12
35841: PUSH
35842: LD_VAR 0 18
35846: PPUSH
35847: LD_INT 22
35849: PUSH
35850: LD_VAR 0 16
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: LD_INT 30
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 30
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PPUSH
35891: CALL_OW 72
35895: ST_TO_ADDR
35896: GO 35980
35898: LD_INT 4
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35979
35906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35907: LD_ADDR_VAR 0 12
35911: PUSH
35912: LD_VAR 0 18
35916: PPUSH
35917: LD_INT 22
35919: PUSH
35920: LD_VAR 0 16
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 30
35934: PUSH
35935: LD_INT 6
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 30
35944: PUSH
35945: LD_INT 7
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 30
35954: PUSH
35955: LD_INT 8
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 72
35976: ST_TO_ADDR
35977: GO 35980
35979: POP
// if i = 1 then
35980: LD_VAR 0 8
35984: PUSH
35985: LD_INT 1
35987: EQUAL
35988: IFFALSE 36099
// begin tmp := [ ] ;
35990: LD_ADDR_VAR 0 19
35994: PUSH
35995: EMPTY
35996: ST_TO_ADDR
// for j in f do
35997: LD_ADDR_VAR 0 9
36001: PUSH
36002: LD_VAR 0 12
36006: PUSH
36007: FOR_IN
36008: IFFALSE 36081
// if GetBType ( j ) = b_bunker then
36010: LD_VAR 0 9
36014: PPUSH
36015: CALL_OW 266
36019: PUSH
36020: LD_INT 32
36022: EQUAL
36023: IFFALSE 36050
// tmp := Insert ( tmp , 1 , j ) else
36025: LD_ADDR_VAR 0 19
36029: PUSH
36030: LD_VAR 0 19
36034: PPUSH
36035: LD_INT 1
36037: PPUSH
36038: LD_VAR 0 9
36042: PPUSH
36043: CALL_OW 2
36047: ST_TO_ADDR
36048: GO 36079
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36050: LD_ADDR_VAR 0 19
36054: PUSH
36055: LD_VAR 0 19
36059: PPUSH
36060: LD_VAR 0 19
36064: PUSH
36065: LD_INT 1
36067: PLUS
36068: PPUSH
36069: LD_VAR 0 9
36073: PPUSH
36074: CALL_OW 2
36078: ST_TO_ADDR
36079: GO 36007
36081: POP
36082: POP
// if tmp then
36083: LD_VAR 0 19
36087: IFFALSE 36099
// f := tmp ;
36089: LD_ADDR_VAR 0 12
36093: PUSH
36094: LD_VAR 0 19
36098: ST_TO_ADDR
// end ; x := personel [ i ] ;
36099: LD_ADDR_VAR 0 13
36103: PUSH
36104: LD_VAR 0 6
36108: PUSH
36109: LD_VAR 0 8
36113: ARRAY
36114: ST_TO_ADDR
// if x = - 1 then
36115: LD_VAR 0 13
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: EQUAL
36124: IFFALSE 36333
// begin for j in f do
36126: LD_ADDR_VAR 0 9
36130: PUSH
36131: LD_VAR 0 12
36135: PUSH
36136: FOR_IN
36137: IFFALSE 36329
// repeat InitHc ;
36139: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36143: LD_VAR 0 9
36147: PPUSH
36148: CALL_OW 266
36152: PUSH
36153: LD_INT 5
36155: EQUAL
36156: IFFALSE 36226
// begin if UnitsInside ( j ) < 3 then
36158: LD_VAR 0 9
36162: PPUSH
36163: CALL_OW 313
36167: PUSH
36168: LD_INT 3
36170: LESS
36171: IFFALSE 36207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36173: LD_INT 0
36175: PPUSH
36176: LD_INT 5
36178: PUSH
36179: LD_INT 8
36181: PUSH
36182: LD_INT 9
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_VAR 0 17
36194: ARRAY
36195: PPUSH
36196: LD_VAR 0 4
36200: PPUSH
36201: CALL_OW 380
36205: GO 36224
// PrepareHuman ( false , i , skill ) ;
36207: LD_INT 0
36209: PPUSH
36210: LD_VAR 0 8
36214: PPUSH
36215: LD_VAR 0 4
36219: PPUSH
36220: CALL_OW 380
// end else
36224: GO 36243
// PrepareHuman ( false , i , skill ) ;
36226: LD_INT 0
36228: PPUSH
36229: LD_VAR 0 8
36233: PPUSH
36234: LD_VAR 0 4
36238: PPUSH
36239: CALL_OW 380
// un := CreateHuman ;
36243: LD_ADDR_VAR 0 14
36247: PUSH
36248: CALL_OW 44
36252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36253: LD_ADDR_VAR 0 7
36257: PUSH
36258: LD_VAR 0 7
36262: PPUSH
36263: LD_INT 1
36265: PPUSH
36266: LD_VAR 0 14
36270: PPUSH
36271: CALL_OW 2
36275: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36276: LD_VAR 0 14
36280: PPUSH
36281: LD_VAR 0 9
36285: PPUSH
36286: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36290: LD_VAR 0 9
36294: PPUSH
36295: CALL_OW 313
36299: PUSH
36300: LD_INT 6
36302: EQUAL
36303: PUSH
36304: LD_VAR 0 9
36308: PPUSH
36309: CALL_OW 266
36313: PUSH
36314: LD_INT 32
36316: PUSH
36317: LD_INT 31
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: IN
36324: OR
36325: IFFALSE 36139
36327: GO 36136
36329: POP
36330: POP
// end else
36331: GO 36713
// for j = 1 to x do
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: DOUBLE
36339: LD_INT 1
36341: DEC
36342: ST_TO_ADDR
36343: LD_VAR 0 13
36347: PUSH
36348: FOR_TO
36349: IFFALSE 36711
// begin InitHc ;
36351: CALL_OW 19
// if not f then
36355: LD_VAR 0 12
36359: NOT
36360: IFFALSE 36449
// begin PrepareHuman ( false , i , skill ) ;
36362: LD_INT 0
36364: PPUSH
36365: LD_VAR 0 8
36369: PPUSH
36370: LD_VAR 0 4
36374: PPUSH
36375: CALL_OW 380
// un := CreateHuman ;
36379: LD_ADDR_VAR 0 14
36383: PUSH
36384: CALL_OW 44
36388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36389: LD_ADDR_VAR 0 7
36393: PUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_INT 1
36401: PPUSH
36402: LD_VAR 0 14
36406: PPUSH
36407: CALL_OW 2
36411: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36412: LD_VAR 0 14
36416: PPUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 250
36426: PPUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 251
36436: PPUSH
36437: LD_INT 10
36439: PPUSH
36440: LD_INT 0
36442: PPUSH
36443: CALL_OW 50
// continue ;
36447: GO 36348
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36449: LD_VAR 0 12
36453: PUSH
36454: LD_INT 1
36456: ARRAY
36457: PPUSH
36458: CALL_OW 313
36462: PUSH
36463: LD_VAR 0 12
36467: PUSH
36468: LD_INT 1
36470: ARRAY
36471: PPUSH
36472: CALL_OW 266
36476: PUSH
36477: LD_INT 32
36479: PUSH
36480: LD_INT 31
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: IN
36487: AND
36488: PUSH
36489: LD_VAR 0 12
36493: PUSH
36494: LD_INT 1
36496: ARRAY
36497: PPUSH
36498: CALL_OW 313
36502: PUSH
36503: LD_INT 6
36505: EQUAL
36506: OR
36507: IFFALSE 36527
// f := Delete ( f , 1 ) ;
36509: LD_ADDR_VAR 0 12
36513: PUSH
36514: LD_VAR 0 12
36518: PPUSH
36519: LD_INT 1
36521: PPUSH
36522: CALL_OW 3
36526: ST_TO_ADDR
// if not f then
36527: LD_VAR 0 12
36531: NOT
36532: IFFALSE 36550
// begin x := x + 2 ;
36534: LD_ADDR_VAR 0 13
36538: PUSH
36539: LD_VAR 0 13
36543: PUSH
36544: LD_INT 2
36546: PLUS
36547: ST_TO_ADDR
// continue ;
36548: GO 36348
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36550: LD_VAR 0 12
36554: PUSH
36555: LD_INT 1
36557: ARRAY
36558: PPUSH
36559: CALL_OW 266
36563: PUSH
36564: LD_INT 5
36566: EQUAL
36567: IFFALSE 36641
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36569: LD_VAR 0 12
36573: PUSH
36574: LD_INT 1
36576: ARRAY
36577: PPUSH
36578: CALL_OW 313
36582: PUSH
36583: LD_INT 3
36585: LESS
36586: IFFALSE 36622
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36588: LD_INT 0
36590: PPUSH
36591: LD_INT 5
36593: PUSH
36594: LD_INT 8
36596: PUSH
36597: LD_INT 9
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: PUSH
36605: LD_VAR 0 17
36609: ARRAY
36610: PPUSH
36611: LD_VAR 0 4
36615: PPUSH
36616: CALL_OW 380
36620: GO 36639
// PrepareHuman ( false , i , skill ) ;
36622: LD_INT 0
36624: PPUSH
36625: LD_VAR 0 8
36629: PPUSH
36630: LD_VAR 0 4
36634: PPUSH
36635: CALL_OW 380
// end else
36639: GO 36658
// PrepareHuman ( false , i , skill ) ;
36641: LD_INT 0
36643: PPUSH
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 4
36653: PPUSH
36654: CALL_OW 380
// un := CreateHuman ;
36658: LD_ADDR_VAR 0 14
36662: PUSH
36663: CALL_OW 44
36667: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36668: LD_ADDR_VAR 0 7
36672: PUSH
36673: LD_VAR 0 7
36677: PPUSH
36678: LD_INT 1
36680: PPUSH
36681: LD_VAR 0 14
36685: PPUSH
36686: CALL_OW 2
36690: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36691: LD_VAR 0 14
36695: PPUSH
36696: LD_VAR 0 12
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PPUSH
36705: CALL_OW 52
// end ;
36709: GO 36348
36711: POP
36712: POP
// end ;
36713: GO 35650
36715: POP
36716: POP
// result := result ^ buildings ;
36717: LD_ADDR_VAR 0 7
36721: PUSH
36722: LD_VAR 0 7
36726: PUSH
36727: LD_VAR 0 18
36731: ADD
36732: ST_TO_ADDR
// end else
36733: GO 36876
// begin for i = 1 to personel do
36735: LD_ADDR_VAR 0 8
36739: PUSH
36740: DOUBLE
36741: LD_INT 1
36743: DEC
36744: ST_TO_ADDR
36745: LD_VAR 0 6
36749: PUSH
36750: FOR_TO
36751: IFFALSE 36874
// begin if i > 4 then
36753: LD_VAR 0 8
36757: PUSH
36758: LD_INT 4
36760: GREATER
36761: IFFALSE 36765
// break ;
36763: GO 36874
// x := personel [ i ] ;
36765: LD_ADDR_VAR 0 13
36769: PUSH
36770: LD_VAR 0 6
36774: PUSH
36775: LD_VAR 0 8
36779: ARRAY
36780: ST_TO_ADDR
// if x = - 1 then
36781: LD_VAR 0 13
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: EQUAL
36790: IFFALSE 36794
// continue ;
36792: GO 36750
// PrepareHuman ( false , i , skill ) ;
36794: LD_INT 0
36796: PPUSH
36797: LD_VAR 0 8
36801: PPUSH
36802: LD_VAR 0 4
36806: PPUSH
36807: CALL_OW 380
// un := CreateHuman ;
36811: LD_ADDR_VAR 0 14
36815: PUSH
36816: CALL_OW 44
36820: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36821: LD_VAR 0 14
36825: PPUSH
36826: LD_VAR 0 1
36830: PPUSH
36831: CALL_OW 250
36835: PPUSH
36836: LD_VAR 0 1
36840: PPUSH
36841: CALL_OW 251
36845: PPUSH
36846: LD_INT 10
36848: PPUSH
36849: LD_INT 0
36851: PPUSH
36852: CALL_OW 50
// result := result ^ un ;
36856: LD_ADDR_VAR 0 7
36860: PUSH
36861: LD_VAR 0 7
36865: PUSH
36866: LD_VAR 0 14
36870: ADD
36871: ST_TO_ADDR
// end ;
36872: GO 36750
36874: POP
36875: POP
// end ; end ;
36876: LD_VAR 0 7
36880: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
// result := false ;
36899: LD_ADDR_VAR 0 3
36903: PUSH
36904: LD_INT 0
36906: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36907: LD_VAR 0 1
36911: NOT
36912: PUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 266
36922: PUSH
36923: LD_INT 32
36925: PUSH
36926: LD_INT 33
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: IN
36933: NOT
36934: OR
36935: IFFALSE 36939
// exit ;
36937: GO 38048
// nat := GetNation ( tower ) ;
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 248
36953: ST_TO_ADDR
// side := GetSide ( tower ) ;
36954: LD_ADDR_VAR 0 16
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 255
36968: ST_TO_ADDR
// x := GetX ( tower ) ;
36969: LD_ADDR_VAR 0 10
36973: PUSH
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 250
36983: ST_TO_ADDR
// y := GetY ( tower ) ;
36984: LD_ADDR_VAR 0 11
36988: PUSH
36989: LD_VAR 0 1
36993: PPUSH
36994: CALL_OW 251
36998: ST_TO_ADDR
// if not x or not y then
36999: LD_VAR 0 10
37003: NOT
37004: PUSH
37005: LD_VAR 0 11
37009: NOT
37010: OR
37011: IFFALSE 37015
// exit ;
37013: GO 38048
// weapon := 0 ;
37015: LD_ADDR_VAR 0 18
37019: PUSH
37020: LD_INT 0
37022: ST_TO_ADDR
// fac_list := [ ] ;
37023: LD_ADDR_VAR 0 17
37027: PUSH
37028: EMPTY
37029: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37030: LD_ADDR_VAR 0 6
37034: PUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 274
37044: PPUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_INT 0
37052: PPUSH
37053: CALL 34619 0 3
37057: PPUSH
37058: LD_INT 30
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 72
37072: ST_TO_ADDR
// if not factories then
37073: LD_VAR 0 6
37077: NOT
37078: IFFALSE 37082
// exit ;
37080: GO 38048
// for i in factories do
37082: LD_ADDR_VAR 0 8
37086: PUSH
37087: LD_VAR 0 6
37091: PUSH
37092: FOR_IN
37093: IFFALSE 37118
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37095: LD_ADDR_VAR 0 17
37099: PUSH
37100: LD_VAR 0 17
37104: PUSH
37105: LD_VAR 0 8
37109: PPUSH
37110: CALL_OW 478
37114: UNION
37115: ST_TO_ADDR
37116: GO 37092
37118: POP
37119: POP
// if not fac_list then
37120: LD_VAR 0 17
37124: NOT
37125: IFFALSE 37129
// exit ;
37127: GO 38048
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37129: LD_ADDR_VAR 0 5
37133: PUSH
37134: LD_INT 4
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: LD_INT 9
37142: PUSH
37143: LD_INT 10
37145: PUSH
37146: LD_INT 6
37148: PUSH
37149: LD_INT 7
37151: PUSH
37152: LD_INT 11
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 27
37166: PUSH
37167: LD_INT 28
37169: PUSH
37170: LD_INT 26
37172: PUSH
37173: LD_INT 30
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 43
37184: PUSH
37185: LD_INT 44
37187: PUSH
37188: LD_INT 46
37190: PUSH
37191: LD_INT 45
37193: PUSH
37194: LD_INT 47
37196: PUSH
37197: LD_INT 49
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: PUSH
37213: LD_VAR 0 12
37217: ARRAY
37218: ST_TO_ADDR
// list := list isect fac_list ;
37219: LD_ADDR_VAR 0 5
37223: PUSH
37224: LD_VAR 0 5
37228: PUSH
37229: LD_VAR 0 17
37233: ISECT
37234: ST_TO_ADDR
// if not list then
37235: LD_VAR 0 5
37239: NOT
37240: IFFALSE 37244
// exit ;
37242: GO 38048
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37244: LD_VAR 0 12
37248: PUSH
37249: LD_INT 3
37251: EQUAL
37252: PUSH
37253: LD_INT 49
37255: PUSH
37256: LD_VAR 0 5
37260: IN
37261: AND
37262: PUSH
37263: LD_INT 31
37265: PPUSH
37266: LD_VAR 0 16
37270: PPUSH
37271: CALL_OW 321
37275: PUSH
37276: LD_INT 2
37278: EQUAL
37279: AND
37280: IFFALSE 37340
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37282: LD_INT 22
37284: PUSH
37285: LD_VAR 0 16
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 35
37296: PUSH
37297: LD_INT 49
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 91
37306: PUSH
37307: LD_VAR 0 1
37311: PUSH
37312: LD_INT 10
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: PPUSH
37325: CALL_OW 69
37329: NOT
37330: IFFALSE 37340
// weapon := ru_time_lapser ;
37332: LD_ADDR_VAR 0 18
37336: PUSH
37337: LD_INT 49
37339: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37340: LD_VAR 0 12
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: IN
37355: PUSH
37356: LD_INT 11
37358: PUSH
37359: LD_VAR 0 5
37363: IN
37364: PUSH
37365: LD_INT 30
37367: PUSH
37368: LD_VAR 0 5
37372: IN
37373: OR
37374: AND
37375: PUSH
37376: LD_INT 6
37378: PPUSH
37379: LD_VAR 0 16
37383: PPUSH
37384: CALL_OW 321
37388: PUSH
37389: LD_INT 2
37391: EQUAL
37392: AND
37393: IFFALSE 37558
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37395: LD_INT 22
37397: PUSH
37398: LD_VAR 0 16
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: LD_INT 35
37412: PUSH
37413: LD_INT 11
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 35
37422: PUSH
37423: LD_INT 30
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 91
37437: PUSH
37438: LD_VAR 0 1
37442: PUSH
37443: LD_INT 18
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 69
37460: NOT
37461: PUSH
37462: LD_INT 22
37464: PUSH
37465: LD_VAR 0 16
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 30
37479: PUSH
37480: LD_INT 32
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 30
37489: PUSH
37490: LD_INT 33
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 91
37504: PUSH
37505: LD_VAR 0 1
37509: PUSH
37510: LD_INT 12
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: PUSH
37523: EMPTY
37524: LIST
37525: PPUSH
37526: CALL_OW 69
37530: PUSH
37531: LD_INT 2
37533: GREATER
37534: AND
37535: IFFALSE 37558
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37537: LD_ADDR_VAR 0 18
37541: PUSH
37542: LD_INT 11
37544: PUSH
37545: LD_INT 30
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_VAR 0 12
37556: ARRAY
37557: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37558: LD_VAR 0 18
37562: NOT
37563: PUSH
37564: LD_INT 40
37566: PPUSH
37567: LD_VAR 0 16
37571: PPUSH
37572: CALL_OW 321
37576: PUSH
37577: LD_INT 2
37579: EQUAL
37580: AND
37581: PUSH
37582: LD_INT 7
37584: PUSH
37585: LD_VAR 0 5
37589: IN
37590: PUSH
37591: LD_INT 28
37593: PUSH
37594: LD_VAR 0 5
37598: IN
37599: OR
37600: PUSH
37601: LD_INT 45
37603: PUSH
37604: LD_VAR 0 5
37608: IN
37609: OR
37610: AND
37611: IFFALSE 37865
// begin hex := GetHexInfo ( x , y ) ;
37613: LD_ADDR_VAR 0 4
37617: PUSH
37618: LD_VAR 0 10
37622: PPUSH
37623: LD_VAR 0 11
37627: PPUSH
37628: CALL_OW 546
37632: ST_TO_ADDR
// if hex [ 1 ] then
37633: LD_VAR 0 4
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: IFFALSE 37645
// exit ;
37643: GO 38048
// height := hex [ 2 ] ;
37645: LD_ADDR_VAR 0 15
37649: PUSH
37650: LD_VAR 0 4
37654: PUSH
37655: LD_INT 2
37657: ARRAY
37658: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37659: LD_ADDR_VAR 0 14
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: LD_INT 5
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// for i in tmp do
37682: LD_ADDR_VAR 0 8
37686: PUSH
37687: LD_VAR 0 14
37691: PUSH
37692: FOR_IN
37693: IFFALSE 37863
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: LD_VAR 0 10
37704: PPUSH
37705: LD_VAR 0 8
37709: PPUSH
37710: LD_INT 5
37712: PPUSH
37713: CALL_OW 272
37717: PUSH
37718: LD_VAR 0 11
37722: PPUSH
37723: LD_VAR 0 8
37727: PPUSH
37728: LD_INT 5
37730: PPUSH
37731: CALL_OW 273
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37740: LD_VAR 0 9
37744: PUSH
37745: LD_INT 1
37747: ARRAY
37748: PPUSH
37749: LD_VAR 0 9
37753: PUSH
37754: LD_INT 2
37756: ARRAY
37757: PPUSH
37758: CALL_OW 488
37762: IFFALSE 37861
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37764: LD_ADDR_VAR 0 4
37768: PUSH
37769: LD_VAR 0 9
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PPUSH
37778: LD_VAR 0 9
37782: PUSH
37783: LD_INT 2
37785: ARRAY
37786: PPUSH
37787: CALL_OW 546
37791: ST_TO_ADDR
// if hex [ 1 ] then
37792: LD_VAR 0 4
37796: PUSH
37797: LD_INT 1
37799: ARRAY
37800: IFFALSE 37804
// continue ;
37802: GO 37692
// h := hex [ 2 ] ;
37804: LD_ADDR_VAR 0 13
37808: PUSH
37809: LD_VAR 0 4
37813: PUSH
37814: LD_INT 2
37816: ARRAY
37817: ST_TO_ADDR
// if h + 7 < height then
37818: LD_VAR 0 13
37822: PUSH
37823: LD_INT 7
37825: PLUS
37826: PUSH
37827: LD_VAR 0 15
37831: LESS
37832: IFFALSE 37861
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37834: LD_ADDR_VAR 0 18
37838: PUSH
37839: LD_INT 7
37841: PUSH
37842: LD_INT 28
37844: PUSH
37845: LD_INT 45
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: PUSH
37853: LD_VAR 0 12
37857: ARRAY
37858: ST_TO_ADDR
// break ;
37859: GO 37863
// end ; end ; end ;
37861: GO 37692
37863: POP
37864: POP
// end ; if not weapon then
37865: LD_VAR 0 18
37869: NOT
37870: IFFALSE 37930
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37872: LD_ADDR_VAR 0 5
37876: PUSH
37877: LD_VAR 0 5
37881: PUSH
37882: LD_INT 11
37884: PUSH
37885: LD_INT 30
37887: PUSH
37888: LD_INT 49
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: DIFF
37896: ST_TO_ADDR
// if not list then
37897: LD_VAR 0 5
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38048
// weapon := list [ rand ( 1 , list ) ] ;
37906: LD_ADDR_VAR 0 18
37910: PUSH
37911: LD_VAR 0 5
37915: PUSH
37916: LD_INT 1
37918: PPUSH
37919: LD_VAR 0 5
37923: PPUSH
37924: CALL_OW 12
37928: ARRAY
37929: ST_TO_ADDR
// end ; if weapon then
37930: LD_VAR 0 18
37934: IFFALSE 38048
// begin tmp := CostOfWeapon ( weapon ) ;
37936: LD_ADDR_VAR 0 14
37940: PUSH
37941: LD_VAR 0 18
37945: PPUSH
37946: CALL_OW 451
37950: ST_TO_ADDR
// j := GetBase ( tower ) ;
37951: LD_ADDR_VAR 0 9
37955: PUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: CALL_OW 274
37965: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37966: LD_VAR 0 9
37970: PPUSH
37971: LD_INT 1
37973: PPUSH
37974: CALL_OW 275
37978: PUSH
37979: LD_VAR 0 14
37983: PUSH
37984: LD_INT 1
37986: ARRAY
37987: GREATEREQUAL
37988: PUSH
37989: LD_VAR 0 9
37993: PPUSH
37994: LD_INT 2
37996: PPUSH
37997: CALL_OW 275
38001: PUSH
38002: LD_VAR 0 14
38006: PUSH
38007: LD_INT 2
38009: ARRAY
38010: GREATEREQUAL
38011: AND
38012: PUSH
38013: LD_VAR 0 9
38017: PPUSH
38018: LD_INT 3
38020: PPUSH
38021: CALL_OW 275
38025: PUSH
38026: LD_VAR 0 14
38030: PUSH
38031: LD_INT 3
38033: ARRAY
38034: GREATEREQUAL
38035: AND
38036: IFFALSE 38048
// result := weapon ;
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_VAR 0 18
38047: ST_TO_ADDR
// end ; end ;
38048: LD_VAR 0 3
38052: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
// result := true ;
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_INT 1
38064: ST_TO_ADDR
// if array1 = array2 then
38065: LD_VAR 0 1
38069: PUSH
38070: LD_VAR 0 2
38074: EQUAL
38075: IFFALSE 38135
// begin for i = 1 to array1 do
38077: LD_ADDR_VAR 0 4
38081: PUSH
38082: DOUBLE
38083: LD_INT 1
38085: DEC
38086: ST_TO_ADDR
38087: LD_VAR 0 1
38091: PUSH
38092: FOR_TO
38093: IFFALSE 38131
// if array1 [ i ] <> array2 [ i ] then
38095: LD_VAR 0 1
38099: PUSH
38100: LD_VAR 0 4
38104: ARRAY
38105: PUSH
38106: LD_VAR 0 2
38110: PUSH
38111: LD_VAR 0 4
38115: ARRAY
38116: NONEQUAL
38117: IFFALSE 38129
// begin result := false ;
38119: LD_ADDR_VAR 0 3
38123: PUSH
38124: LD_INT 0
38126: ST_TO_ADDR
// break ;
38127: GO 38131
// end ;
38129: GO 38092
38131: POP
38132: POP
// end else
38133: GO 38143
// result := false ;
38135: LD_ADDR_VAR 0 3
38139: PUSH
38140: LD_INT 0
38142: ST_TO_ADDR
// end ;
38143: LD_VAR 0 3
38147: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38148: LD_INT 0
38150: PPUSH
38151: PPUSH
// if not array1 or not array2 then
38152: LD_VAR 0 1
38156: NOT
38157: PUSH
38158: LD_VAR 0 2
38162: NOT
38163: OR
38164: IFFALSE 38168
// exit ;
38166: GO 38232
// result := true ;
38168: LD_ADDR_VAR 0 3
38172: PUSH
38173: LD_INT 1
38175: ST_TO_ADDR
// for i = 1 to array1 do
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: DOUBLE
38182: LD_INT 1
38184: DEC
38185: ST_TO_ADDR
38186: LD_VAR 0 1
38190: PUSH
38191: FOR_TO
38192: IFFALSE 38230
// if array1 [ i ] <> array2 [ i ] then
38194: LD_VAR 0 1
38198: PUSH
38199: LD_VAR 0 4
38203: ARRAY
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_VAR 0 4
38214: ARRAY
38215: NONEQUAL
38216: IFFALSE 38228
// begin result := false ;
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// break ;
38226: GO 38230
// end ;
38228: GO 38191
38230: POP
38231: POP
// end ;
38232: LD_VAR 0 3
38236: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38237: LD_INT 0
38239: PPUSH
38240: PPUSH
38241: PPUSH
// pom := GetBase ( fac ) ;
38242: LD_ADDR_VAR 0 5
38246: PUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL_OW 274
38256: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 2
38278: ARRAY
38279: PPUSH
38280: LD_VAR 0 2
38284: PUSH
38285: LD_INT 3
38287: ARRAY
38288: PPUSH
38289: LD_VAR 0 2
38293: PUSH
38294: LD_INT 4
38296: ARRAY
38297: PPUSH
38298: CALL_OW 449
38302: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38303: LD_ADDR_VAR 0 3
38307: PUSH
38308: LD_VAR 0 5
38312: PPUSH
38313: LD_INT 1
38315: PPUSH
38316: CALL_OW 275
38320: PUSH
38321: LD_VAR 0 4
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: GREATEREQUAL
38330: PUSH
38331: LD_VAR 0 5
38335: PPUSH
38336: LD_INT 2
38338: PPUSH
38339: CALL_OW 275
38343: PUSH
38344: LD_VAR 0 4
38348: PUSH
38349: LD_INT 2
38351: ARRAY
38352: GREATEREQUAL
38353: AND
38354: PUSH
38355: LD_VAR 0 5
38359: PPUSH
38360: LD_INT 3
38362: PPUSH
38363: CALL_OW 275
38367: PUSH
38368: LD_VAR 0 4
38372: PUSH
38373: LD_INT 3
38375: ARRAY
38376: GREATEREQUAL
38377: AND
38378: ST_TO_ADDR
// end ;
38379: LD_VAR 0 3
38383: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38384: LD_INT 0
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
// pom := GetBase ( building ) ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 274
38404: ST_TO_ADDR
// if not pom then
38405: LD_VAR 0 3
38409: NOT
38410: IFFALSE 38414
// exit ;
38412: GO 38584
// btype := GetBType ( building ) ;
38414: LD_ADDR_VAR 0 5
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 266
38428: ST_TO_ADDR
// if btype = b_armoury then
38429: LD_VAR 0 5
38433: PUSH
38434: LD_INT 4
38436: EQUAL
38437: IFFALSE 38447
// btype := b_barracks ;
38439: LD_ADDR_VAR 0 5
38443: PUSH
38444: LD_INT 5
38446: ST_TO_ADDR
// if btype = b_depot then
38447: LD_VAR 0 5
38451: PUSH
38452: LD_INT 0
38454: EQUAL
38455: IFFALSE 38465
// btype := b_warehouse ;
38457: LD_ADDR_VAR 0 5
38461: PUSH
38462: LD_INT 1
38464: ST_TO_ADDR
// if btype = b_workshop then
38465: LD_VAR 0 5
38469: PUSH
38470: LD_INT 2
38472: EQUAL
38473: IFFALSE 38483
// btype := b_factory ;
38475: LD_ADDR_VAR 0 5
38479: PUSH
38480: LD_INT 3
38482: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_VAR 0 5
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 248
38502: PPUSH
38503: CALL_OW 450
38507: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38508: LD_ADDR_VAR 0 2
38512: PUSH
38513: LD_VAR 0 3
38517: PPUSH
38518: LD_INT 1
38520: PPUSH
38521: CALL_OW 275
38525: PUSH
38526: LD_VAR 0 4
38530: PUSH
38531: LD_INT 1
38533: ARRAY
38534: GREATEREQUAL
38535: PUSH
38536: LD_VAR 0 3
38540: PPUSH
38541: LD_INT 2
38543: PPUSH
38544: CALL_OW 275
38548: PUSH
38549: LD_VAR 0 4
38553: PUSH
38554: LD_INT 2
38556: ARRAY
38557: GREATEREQUAL
38558: AND
38559: PUSH
38560: LD_VAR 0 3
38564: PPUSH
38565: LD_INT 3
38567: PPUSH
38568: CALL_OW 275
38572: PUSH
38573: LD_VAR 0 4
38577: PUSH
38578: LD_INT 3
38580: ARRAY
38581: GREATEREQUAL
38582: AND
38583: ST_TO_ADDR
// end ;
38584: LD_VAR 0 2
38588: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38589: LD_INT 0
38591: PPUSH
38592: PPUSH
38593: PPUSH
// pom := GetBase ( building ) ;
38594: LD_ADDR_VAR 0 4
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 274
38608: ST_TO_ADDR
// if not pom then
38609: LD_VAR 0 4
38613: NOT
38614: IFFALSE 38618
// exit ;
38616: GO 38719
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 248
38637: PPUSH
38638: CALL_OW 450
38642: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38643: LD_ADDR_VAR 0 3
38647: PUSH
38648: LD_VAR 0 4
38652: PPUSH
38653: LD_INT 1
38655: PPUSH
38656: CALL_OW 275
38660: PUSH
38661: LD_VAR 0 5
38665: PUSH
38666: LD_INT 1
38668: ARRAY
38669: GREATEREQUAL
38670: PUSH
38671: LD_VAR 0 4
38675: PPUSH
38676: LD_INT 2
38678: PPUSH
38679: CALL_OW 275
38683: PUSH
38684: LD_VAR 0 5
38688: PUSH
38689: LD_INT 2
38691: ARRAY
38692: GREATEREQUAL
38693: AND
38694: PUSH
38695: LD_VAR 0 4
38699: PPUSH
38700: LD_INT 3
38702: PPUSH
38703: CALL_OW 275
38707: PUSH
38708: LD_VAR 0 5
38712: PUSH
38713: LD_INT 3
38715: ARRAY
38716: GREATEREQUAL
38717: AND
38718: ST_TO_ADDR
// end ;
38719: LD_VAR 0 3
38723: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38724: LD_INT 0
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
// result := false ;
38737: LD_ADDR_VAR 0 8
38741: PUSH
38742: LD_INT 0
38744: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38745: LD_VAR 0 5
38749: NOT
38750: PUSH
38751: LD_VAR 0 1
38755: NOT
38756: OR
38757: PUSH
38758: LD_VAR 0 2
38762: NOT
38763: OR
38764: PUSH
38765: LD_VAR 0 3
38769: NOT
38770: OR
38771: IFFALSE 38775
// exit ;
38773: GO 39589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38775: LD_ADDR_VAR 0 14
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_VAR 0 2
38789: PPUSH
38790: LD_VAR 0 3
38794: PPUSH
38795: LD_VAR 0 4
38799: PPUSH
38800: LD_VAR 0 5
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PPUSH
38809: CALL_OW 248
38813: PPUSH
38814: LD_INT 0
38816: PPUSH
38817: CALL 40822 0 6
38821: ST_TO_ADDR
// if not hexes then
38822: LD_VAR 0 14
38826: NOT
38827: IFFALSE 38831
// exit ;
38829: GO 39589
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38831: LD_ADDR_VAR 0 17
38835: PUSH
38836: LD_VAR 0 5
38840: PPUSH
38841: LD_INT 22
38843: PUSH
38844: LD_VAR 0 13
38848: PPUSH
38849: CALL_OW 255
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 30
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 30
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PPUSH
38890: CALL_OW 72
38894: ST_TO_ADDR
// for i = 1 to hexes do
38895: LD_ADDR_VAR 0 9
38899: PUSH
38900: DOUBLE
38901: LD_INT 1
38903: DEC
38904: ST_TO_ADDR
38905: LD_VAR 0 14
38909: PUSH
38910: FOR_TO
38911: IFFALSE 39587
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38913: LD_ADDR_VAR 0 13
38917: PUSH
38918: LD_VAR 0 14
38922: PUSH
38923: LD_VAR 0 9
38927: ARRAY
38928: PUSH
38929: LD_INT 1
38931: ARRAY
38932: PPUSH
38933: LD_VAR 0 14
38937: PUSH
38938: LD_VAR 0 9
38942: ARRAY
38943: PUSH
38944: LD_INT 2
38946: ARRAY
38947: PPUSH
38948: CALL_OW 428
38952: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38953: LD_VAR 0 14
38957: PUSH
38958: LD_VAR 0 9
38962: ARRAY
38963: PUSH
38964: LD_INT 1
38966: ARRAY
38967: PPUSH
38968: LD_VAR 0 14
38972: PUSH
38973: LD_VAR 0 9
38977: ARRAY
38978: PUSH
38979: LD_INT 2
38981: ARRAY
38982: PPUSH
38983: CALL_OW 351
38987: PUSH
38988: LD_VAR 0 14
38992: PUSH
38993: LD_VAR 0 9
38997: ARRAY
38998: PUSH
38999: LD_INT 1
39001: ARRAY
39002: PPUSH
39003: LD_VAR 0 14
39007: PUSH
39008: LD_VAR 0 9
39012: ARRAY
39013: PUSH
39014: LD_INT 2
39016: ARRAY
39017: PPUSH
39018: CALL_OW 488
39022: NOT
39023: OR
39024: PUSH
39025: LD_VAR 0 13
39029: PPUSH
39030: CALL_OW 247
39034: PUSH
39035: LD_INT 3
39037: EQUAL
39038: OR
39039: IFFALSE 39045
// exit ;
39041: POP
39042: POP
39043: GO 39589
// if not tmp then
39045: LD_VAR 0 13
39049: NOT
39050: IFFALSE 39054
// continue ;
39052: GO 38910
// result := true ;
39054: LD_ADDR_VAR 0 8
39058: PUSH
39059: LD_INT 1
39061: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39062: LD_VAR 0 6
39066: PUSH
39067: LD_VAR 0 13
39071: PPUSH
39072: CALL_OW 247
39076: PUSH
39077: LD_INT 2
39079: EQUAL
39080: AND
39081: PUSH
39082: LD_VAR 0 13
39086: PPUSH
39087: CALL_OW 263
39091: PUSH
39092: LD_INT 1
39094: EQUAL
39095: AND
39096: IFFALSE 39260
// begin if IsDrivenBy ( tmp ) then
39098: LD_VAR 0 13
39102: PPUSH
39103: CALL_OW 311
39107: IFFALSE 39111
// continue ;
39109: GO 38910
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39111: LD_VAR 0 6
39115: PPUSH
39116: LD_INT 3
39118: PUSH
39119: LD_INT 60
39121: PUSH
39122: EMPTY
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: LD_INT 55
39134: PUSH
39135: EMPTY
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PPUSH
39146: CALL_OW 72
39150: IFFALSE 39258
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39152: LD_ADDR_VAR 0 18
39156: PUSH
39157: LD_VAR 0 6
39161: PPUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 60
39167: PUSH
39168: EMPTY
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 3
39177: PUSH
39178: LD_INT 55
39180: PUSH
39181: EMPTY
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PPUSH
39192: CALL_OW 72
39196: PUSH
39197: LD_INT 1
39199: ARRAY
39200: ST_TO_ADDR
// if IsInUnit ( driver ) then
39201: LD_VAR 0 18
39205: PPUSH
39206: CALL_OW 310
39210: IFFALSE 39221
// ComExit ( driver ) ;
39212: LD_VAR 0 18
39216: PPUSH
39217: CALL 64601 0 1
// AddComEnterUnit ( driver , tmp ) ;
39221: LD_VAR 0 18
39225: PPUSH
39226: LD_VAR 0 13
39230: PPUSH
39231: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39235: LD_VAR 0 18
39239: PPUSH
39240: LD_VAR 0 7
39244: PPUSH
39245: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39249: LD_VAR 0 18
39253: PPUSH
39254: CALL_OW 181
// end ; continue ;
39258: GO 38910
// end ; if not cleaners or not tmp in cleaners then
39260: LD_VAR 0 6
39264: NOT
39265: PUSH
39266: LD_VAR 0 13
39270: PUSH
39271: LD_VAR 0 6
39275: IN
39276: NOT
39277: OR
39278: IFFALSE 39585
// begin if dep then
39280: LD_VAR 0 17
39284: IFFALSE 39420
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39286: LD_ADDR_VAR 0 16
39290: PUSH
39291: LD_VAR 0 17
39295: PUSH
39296: LD_INT 1
39298: ARRAY
39299: PPUSH
39300: CALL_OW 250
39304: PPUSH
39305: LD_VAR 0 17
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: PPUSH
39314: CALL_OW 254
39318: PPUSH
39319: LD_INT 5
39321: PPUSH
39322: CALL_OW 272
39326: PUSH
39327: LD_VAR 0 17
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: CALL_OW 251
39340: PPUSH
39341: LD_VAR 0 17
39345: PUSH
39346: LD_INT 1
39348: ARRAY
39349: PPUSH
39350: CALL_OW 254
39354: PPUSH
39355: LD_INT 5
39357: PPUSH
39358: CALL_OW 273
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39367: LD_VAR 0 16
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: LD_VAR 0 16
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: PPUSH
39385: CALL_OW 488
39389: IFFALSE 39420
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39391: LD_VAR 0 13
39395: PPUSH
39396: LD_VAR 0 16
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PPUSH
39405: LD_VAR 0 16
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: PPUSH
39414: CALL_OW 111
// continue ;
39418: GO 38910
// end ; end ; r := GetDir ( tmp ) ;
39420: LD_ADDR_VAR 0 15
39424: PUSH
39425: LD_VAR 0 13
39429: PPUSH
39430: CALL_OW 254
39434: ST_TO_ADDR
// if r = 5 then
39435: LD_VAR 0 15
39439: PUSH
39440: LD_INT 5
39442: EQUAL
39443: IFFALSE 39453
// r := 0 ;
39445: LD_ADDR_VAR 0 15
39449: PUSH
39450: LD_INT 0
39452: ST_TO_ADDR
// for j = r to 5 do
39453: LD_ADDR_VAR 0 10
39457: PUSH
39458: DOUBLE
39459: LD_VAR 0 15
39463: DEC
39464: ST_TO_ADDR
39465: LD_INT 5
39467: PUSH
39468: FOR_TO
39469: IFFALSE 39583
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39471: LD_ADDR_VAR 0 11
39475: PUSH
39476: LD_VAR 0 13
39480: PPUSH
39481: CALL_OW 250
39485: PPUSH
39486: LD_VAR 0 10
39490: PPUSH
39491: LD_INT 2
39493: PPUSH
39494: CALL_OW 272
39498: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39499: LD_ADDR_VAR 0 12
39503: PUSH
39504: LD_VAR 0 13
39508: PPUSH
39509: CALL_OW 251
39513: PPUSH
39514: LD_VAR 0 10
39518: PPUSH
39519: LD_INT 2
39521: PPUSH
39522: CALL_OW 273
39526: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39527: LD_VAR 0 11
39531: PPUSH
39532: LD_VAR 0 12
39536: PPUSH
39537: CALL_OW 488
39541: PUSH
39542: LD_VAR 0 11
39546: PPUSH
39547: LD_VAR 0 12
39551: PPUSH
39552: CALL_OW 428
39556: NOT
39557: AND
39558: IFFALSE 39581
// begin ComMoveXY ( tmp , _x , _y ) ;
39560: LD_VAR 0 13
39564: PPUSH
39565: LD_VAR 0 11
39569: PPUSH
39570: LD_VAR 0 12
39574: PPUSH
39575: CALL_OW 111
// break ;
39579: GO 39583
// end ; end ;
39581: GO 39468
39583: POP
39584: POP
// end ; end ;
39585: GO 38910
39587: POP
39588: POP
// end ;
39589: LD_VAR 0 8
39593: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39594: LD_INT 0
39596: PPUSH
// result := true ;
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 1
39604: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39605: LD_VAR 0 2
39609: PUSH
39610: LD_INT 24
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39624
39616: LD_INT 33
39618: DOUBLE
39619: EQUAL
39620: IFTRUE 39624
39622: GO 39649
39624: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39625: LD_ADDR_VAR 0 3
39629: PUSH
39630: LD_INT 32
39632: PPUSH
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 321
39642: PUSH
39643: LD_INT 2
39645: EQUAL
39646: ST_TO_ADDR
39647: GO 39965
39649: LD_INT 20
39651: DOUBLE
39652: EQUAL
39653: IFTRUE 39657
39655: GO 39682
39657: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39658: LD_ADDR_VAR 0 3
39662: PUSH
39663: LD_INT 6
39665: PPUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 321
39675: PUSH
39676: LD_INT 2
39678: EQUAL
39679: ST_TO_ADDR
39680: GO 39965
39682: LD_INT 22
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39696
39688: LD_INT 36
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39721
39696: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 15
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 321
39714: PUSH
39715: LD_INT 2
39717: EQUAL
39718: ST_TO_ADDR
39719: GO 39965
39721: LD_INT 30
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39754
39729: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 20
39737: PPUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 321
39747: PUSH
39748: LD_INT 2
39750: EQUAL
39751: ST_TO_ADDR
39752: GO 39965
39754: LD_INT 28
39756: DOUBLE
39757: EQUAL
39758: IFTRUE 39768
39760: LD_INT 21
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39793
39768: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 21
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 321
39786: PUSH
39787: LD_INT 2
39789: EQUAL
39790: ST_TO_ADDR
39791: GO 39965
39793: LD_INT 16
39795: DOUBLE
39796: EQUAL
39797: IFTRUE 39801
39799: GO 39826
39801: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39802: LD_ADDR_VAR 0 3
39806: PUSH
39807: LD_INT 84
39809: PPUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 321
39819: PUSH
39820: LD_INT 2
39822: EQUAL
39823: ST_TO_ADDR
39824: GO 39965
39826: LD_INT 19
39828: DOUBLE
39829: EQUAL
39830: IFTRUE 39840
39832: LD_INT 23
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39865
39840: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 83
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 321
39858: PUSH
39859: LD_INT 2
39861: EQUAL
39862: ST_TO_ADDR
39863: GO 39965
39865: LD_INT 17
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39898
39873: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_INT 39
39881: PPUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 321
39891: PUSH
39892: LD_INT 2
39894: EQUAL
39895: ST_TO_ADDR
39896: GO 39965
39898: LD_INT 18
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39906
39904: GO 39931
39906: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39907: LD_ADDR_VAR 0 3
39911: PUSH
39912: LD_INT 40
39914: PPUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 321
39924: PUSH
39925: LD_INT 2
39927: EQUAL
39928: ST_TO_ADDR
39929: GO 39965
39931: LD_INT 27
39933: DOUBLE
39934: EQUAL
39935: IFTRUE 39939
39937: GO 39964
39939: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39940: LD_ADDR_VAR 0 3
39944: PUSH
39945: LD_INT 35
39947: PPUSH
39948: LD_VAR 0 1
39952: PPUSH
39953: CALL_OW 321
39957: PUSH
39958: LD_INT 2
39960: EQUAL
39961: ST_TO_ADDR
39962: GO 39965
39964: POP
// end ;
39965: LD_VAR 0 3
39969: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
// result := false ;
39983: LD_ADDR_VAR 0 6
39987: PUSH
39988: LD_INT 0
39990: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39991: LD_VAR 0 1
39995: NOT
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: CALL_OW 266
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: IN
40017: NOT
40018: OR
40019: PUSH
40020: LD_VAR 0 2
40024: NOT
40025: OR
40026: PUSH
40027: LD_VAR 0 5
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 4
40046: PUSH
40047: LD_INT 5
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: IN
40058: NOT
40059: OR
40060: PUSH
40061: LD_VAR 0 3
40065: PPUSH
40066: LD_VAR 0 4
40070: PPUSH
40071: CALL_OW 488
40075: NOT
40076: OR
40077: IFFALSE 40081
// exit ;
40079: GO 40817
// side := GetSide ( depot ) ;
40081: LD_ADDR_VAR 0 9
40085: PUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 255
40095: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40096: LD_VAR 0 9
40100: PPUSH
40101: LD_VAR 0 2
40105: PPUSH
40106: CALL 39594 0 2
40110: NOT
40111: IFFALSE 40115
// exit ;
40113: GO 40817
// pom := GetBase ( depot ) ;
40115: LD_ADDR_VAR 0 10
40119: PUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 274
40129: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40130: LD_ADDR_VAR 0 11
40134: PUSH
40135: LD_VAR 0 2
40139: PPUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 248
40149: PPUSH
40150: CALL_OW 450
40154: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40155: LD_VAR 0 10
40159: PPUSH
40160: LD_INT 1
40162: PPUSH
40163: CALL_OW 275
40167: PUSH
40168: LD_VAR 0 11
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: GREATEREQUAL
40177: PUSH
40178: LD_VAR 0 10
40182: PPUSH
40183: LD_INT 2
40185: PPUSH
40186: CALL_OW 275
40190: PUSH
40191: LD_VAR 0 11
40195: PUSH
40196: LD_INT 2
40198: ARRAY
40199: GREATEREQUAL
40200: AND
40201: PUSH
40202: LD_VAR 0 10
40206: PPUSH
40207: LD_INT 3
40209: PPUSH
40210: CALL_OW 275
40214: PUSH
40215: LD_VAR 0 11
40219: PUSH
40220: LD_INT 3
40222: ARRAY
40223: GREATEREQUAL
40224: AND
40225: NOT
40226: IFFALSE 40230
// exit ;
40228: GO 40817
// if GetBType ( depot ) = b_depot then
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 266
40239: PUSH
40240: LD_INT 0
40242: EQUAL
40243: IFFALSE 40255
// dist := 28 else
40245: LD_ADDR_VAR 0 14
40249: PUSH
40250: LD_INT 28
40252: ST_TO_ADDR
40253: GO 40263
// dist := 36 ;
40255: LD_ADDR_VAR 0 14
40259: PUSH
40260: LD_INT 36
40262: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40263: LD_VAR 0 1
40267: PPUSH
40268: LD_VAR 0 3
40272: PPUSH
40273: LD_VAR 0 4
40277: PPUSH
40278: CALL_OW 297
40282: PUSH
40283: LD_VAR 0 14
40287: GREATER
40288: IFFALSE 40292
// exit ;
40290: GO 40817
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40292: LD_ADDR_VAR 0 12
40296: PUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: LD_VAR 0 4
40311: PPUSH
40312: LD_VAR 0 5
40316: PPUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 248
40326: PPUSH
40327: LD_INT 0
40329: PPUSH
40330: CALL 40822 0 6
40334: ST_TO_ADDR
// if not hexes then
40335: LD_VAR 0 12
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40817
// hex := GetHexInfo ( x , y ) ;
40344: LD_ADDR_VAR 0 15
40348: PUSH
40349: LD_VAR 0 3
40353: PPUSH
40354: LD_VAR 0 4
40358: PPUSH
40359: CALL_OW 546
40363: ST_TO_ADDR
// if hex [ 1 ] then
40364: LD_VAR 0 15
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: IFFALSE 40376
// exit ;
40374: GO 40817
// height := hex [ 2 ] ;
40376: LD_ADDR_VAR 0 13
40380: PUSH
40381: LD_VAR 0 15
40385: PUSH
40386: LD_INT 2
40388: ARRAY
40389: ST_TO_ADDR
// for i = 1 to hexes do
40390: LD_ADDR_VAR 0 7
40394: PUSH
40395: DOUBLE
40396: LD_INT 1
40398: DEC
40399: ST_TO_ADDR
40400: LD_VAR 0 12
40404: PUSH
40405: FOR_TO
40406: IFFALSE 40736
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40408: LD_VAR 0 12
40412: PUSH
40413: LD_VAR 0 7
40417: ARRAY
40418: PUSH
40419: LD_INT 1
40421: ARRAY
40422: PPUSH
40423: LD_VAR 0 12
40427: PUSH
40428: LD_VAR 0 7
40432: ARRAY
40433: PUSH
40434: LD_INT 2
40436: ARRAY
40437: PPUSH
40438: CALL_OW 488
40442: NOT
40443: PUSH
40444: LD_VAR 0 12
40448: PUSH
40449: LD_VAR 0 7
40453: ARRAY
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: PPUSH
40459: LD_VAR 0 12
40463: PUSH
40464: LD_VAR 0 7
40468: ARRAY
40469: PUSH
40470: LD_INT 2
40472: ARRAY
40473: PPUSH
40474: CALL_OW 428
40478: PUSH
40479: LD_INT 0
40481: GREATER
40482: OR
40483: PUSH
40484: LD_VAR 0 12
40488: PUSH
40489: LD_VAR 0 7
40493: ARRAY
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: PPUSH
40499: LD_VAR 0 12
40503: PUSH
40504: LD_VAR 0 7
40508: ARRAY
40509: PUSH
40510: LD_INT 2
40512: ARRAY
40513: PPUSH
40514: CALL_OW 351
40518: OR
40519: IFFALSE 40525
// exit ;
40521: POP
40522: POP
40523: GO 40817
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40525: LD_ADDR_VAR 0 8
40529: PUSH
40530: LD_VAR 0 12
40534: PUSH
40535: LD_VAR 0 7
40539: ARRAY
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: PPUSH
40545: LD_VAR 0 12
40549: PUSH
40550: LD_VAR 0 7
40554: ARRAY
40555: PUSH
40556: LD_INT 2
40558: ARRAY
40559: PPUSH
40560: CALL_OW 546
40564: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40565: LD_VAR 0 8
40569: PUSH
40570: LD_INT 1
40572: ARRAY
40573: PUSH
40574: LD_VAR 0 8
40578: PUSH
40579: LD_INT 2
40581: ARRAY
40582: PUSH
40583: LD_VAR 0 13
40587: PUSH
40588: LD_INT 2
40590: PLUS
40591: GREATER
40592: OR
40593: PUSH
40594: LD_VAR 0 8
40598: PUSH
40599: LD_INT 2
40601: ARRAY
40602: PUSH
40603: LD_VAR 0 13
40607: PUSH
40608: LD_INT 2
40610: MINUS
40611: LESS
40612: OR
40613: PUSH
40614: LD_VAR 0 8
40618: PUSH
40619: LD_INT 3
40621: ARRAY
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 8
40628: PUSH
40629: LD_INT 9
40631: PUSH
40632: LD_INT 10
40634: PUSH
40635: LD_INT 11
40637: PUSH
40638: LD_INT 12
40640: PUSH
40641: LD_INT 13
40643: PUSH
40644: LD_INT 16
40646: PUSH
40647: LD_INT 17
40649: PUSH
40650: LD_INT 18
40652: PUSH
40653: LD_INT 19
40655: PUSH
40656: LD_INT 20
40658: PUSH
40659: LD_INT 21
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: IN
40677: NOT
40678: OR
40679: PUSH
40680: LD_VAR 0 8
40684: PUSH
40685: LD_INT 5
40687: ARRAY
40688: NOT
40689: OR
40690: PUSH
40691: LD_VAR 0 8
40695: PUSH
40696: LD_INT 6
40698: ARRAY
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 7
40708: PUSH
40709: LD_INT 9
40711: PUSH
40712: LD_INT 10
40714: PUSH
40715: LD_INT 11
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: IN
40726: NOT
40727: OR
40728: IFFALSE 40734
// exit ;
40730: POP
40731: POP
40732: GO 40817
// end ;
40734: GO 40405
40736: POP
40737: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40738: LD_VAR 0 9
40742: PPUSH
40743: LD_VAR 0 3
40747: PPUSH
40748: LD_VAR 0 4
40752: PPUSH
40753: LD_INT 20
40755: PPUSH
40756: CALL 32769 0 4
40760: PUSH
40761: LD_INT 4
40763: ARRAY
40764: IFFALSE 40768
// exit ;
40766: GO 40817
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 29
40775: PUSH
40776: LD_INT 30
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: IN
40783: PUSH
40784: LD_VAR 0 3
40788: PPUSH
40789: LD_VAR 0 4
40793: PPUSH
40794: LD_VAR 0 9
40798: PPUSH
40799: CALL_OW 440
40803: NOT
40804: AND
40805: IFFALSE 40809
// exit ;
40807: GO 40817
// result := true ;
40809: LD_ADDR_VAR 0 6
40813: PUSH
40814: LD_INT 1
40816: ST_TO_ADDR
// end ;
40817: LD_VAR 0 6
40821: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
40881: PPUSH
// result = [ ] ;
40882: LD_ADDR_VAR 0 7
40886: PUSH
40887: EMPTY
40888: ST_TO_ADDR
// temp_list = [ ] ;
40889: LD_ADDR_VAR 0 9
40893: PUSH
40894: EMPTY
40895: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40896: LD_VAR 0 4
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: LD_INT 4
40915: PUSH
40916: LD_INT 5
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: IN
40927: NOT
40928: PUSH
40929: LD_VAR 0 1
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: IN
40944: PUSH
40945: LD_VAR 0 5
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: IN
40964: NOT
40965: AND
40966: OR
40967: IFFALSE 40971
// exit ;
40969: GO 59362
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40971: LD_VAR 0 1
40975: PUSH
40976: LD_INT 6
40978: PUSH
40979: LD_INT 7
40981: PUSH
40982: LD_INT 8
40984: PUSH
40985: LD_INT 13
40987: PUSH
40988: LD_INT 12
40990: PUSH
40991: LD_INT 15
40993: PUSH
40994: LD_INT 11
40996: PUSH
40997: LD_INT 14
40999: PUSH
41000: LD_INT 10
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: IN
41014: IFFALSE 41024
// btype = b_lab ;
41016: LD_ADDR_VAR 0 1
41020: PUSH
41021: LD_INT 6
41023: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41024: LD_VAR 0 6
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: IN
41043: NOT
41044: PUSH
41045: LD_VAR 0 1
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 6
41064: PUSH
41065: LD_INT 36
41067: PUSH
41068: LD_INT 4
41070: PUSH
41071: LD_INT 5
41073: PUSH
41074: LD_INT 31
41076: PUSH
41077: LD_INT 32
41079: PUSH
41080: LD_INT 33
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: IN
41096: NOT
41097: PUSH
41098: LD_VAR 0 6
41102: PUSH
41103: LD_INT 1
41105: EQUAL
41106: AND
41107: OR
41108: PUSH
41109: LD_VAR 0 1
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: IN
41124: NOT
41125: PUSH
41126: LD_VAR 0 6
41130: PUSH
41131: LD_INT 2
41133: EQUAL
41134: AND
41135: OR
41136: IFFALSE 41146
// mode = 0 ;
41138: LD_ADDR_VAR 0 6
41142: PUSH
41143: LD_INT 0
41145: ST_TO_ADDR
// case mode of 0 :
41146: LD_VAR 0 6
41150: PUSH
41151: LD_INT 0
41153: DOUBLE
41154: EQUAL
41155: IFTRUE 41159
41157: GO 52612
41159: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41160: LD_ADDR_VAR 0 11
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41353: LD_ADDR_VAR 0 12
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41549: LD_ADDR_VAR 0 13
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 3
41708: NEG
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: LD_INT 3
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41748: LD_ADDR_VAR 0 14
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41944: LD_ADDR_VAR 0 15
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42137: LD_ADDR_VAR 0 16
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42330: LD_ADDR_VAR 0 17
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42560: LD_ADDR_VAR 0 18
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42790: LD_ADDR_VAR 0 19
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43020: LD_ADDR_VAR 0 20
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43250: LD_ADDR_VAR 0 21
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43480: LD_ADDR_VAR 0 22
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43710: LD_ADDR_VAR 0 23
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43990: LD_ADDR_VAR 0 24
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44266: LD_ADDR_VAR 0 25
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44540: LD_ADDR_VAR 0 26
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44816: LD_ADDR_VAR 0 27
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 3
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45096: LD_ADDR_VAR 0 28
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45378: LD_ADDR_VAR 0 29
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 3
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45657: LD_ADDR_VAR 0 30
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45935: LD_ADDR_VAR 0 31
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46213: LD_ADDR_VAR 0 32
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 3
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46491: LD_ADDR_VAR 0 33
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46770: LD_ADDR_VAR 0 34
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47050: LD_ADDR_VAR 0 35
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47162: LD_ADDR_VAR 0 36
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47274: LD_ADDR_VAR 0 37
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47386: LD_ADDR_VAR 0 38
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47498: LD_ADDR_VAR 0 39
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47610: LD_ADDR_VAR 0 40
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47722: LD_ADDR_VAR 0 41
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 3
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48072: LD_ADDR_VAR 0 42
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48422: LD_ADDR_VAR 0 43
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 3
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 3
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48770: LD_ADDR_VAR 0 44
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 3
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49120: LD_ADDR_VAR 0 45
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 3
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: NEG
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: LD_INT 3
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49470: LD_ADDR_VAR 0 46
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49818: LD_ADDR_VAR 0 47
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49969: LD_ADDR_VAR 0 48
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50116: LD_ADDR_VAR 0 49
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50260: LD_ADDR_VAR 0 50
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50404: LD_ADDR_VAR 0 51
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50551: LD_ADDR_VAR 0 52
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50702: LD_ADDR_VAR 0 53
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50932: LD_ADDR_VAR 0 54
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51162: LD_ADDR_VAR 0 55
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51392: LD_ADDR_VAR 0 56
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51622: LD_ADDR_VAR 0 57
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51852: LD_ADDR_VAR 0 58
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52082: LD_ADDR_VAR 0 59
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52170: LD_ADDR_VAR 0 60
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52258: LD_ADDR_VAR 0 61
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52346: LD_ADDR_VAR 0 62
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52434: LD_ADDR_VAR 0 63
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52522: LD_ADDR_VAR 0 64
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: ST_TO_ADDR
// end ; 1 :
52610: GO 58507
52612: LD_INT 1
52614: DOUBLE
52615: EQUAL
52616: IFTRUE 52620
52618: GO 55243
52620: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52621: LD_ADDR_VAR 0 11
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52665: LD_ADDR_VAR 0 12
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52706: LD_ADDR_VAR 0 13
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52746: LD_ADDR_VAR 0 14
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52787: LD_ADDR_VAR 0 15
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52831: LD_ADDR_VAR 0 16
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: NEG
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52877: LD_ADDR_VAR 0 17
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 3
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52921: LD_ADDR_VAR 0 18
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52962: LD_ADDR_VAR 0 19
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53002: LD_ADDR_VAR 0 20
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53043: LD_ADDR_VAR 0 21
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53087: LD_ADDR_VAR 0 22
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53133: LD_ADDR_VAR 0 23
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 4
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53177: LD_ADDR_VAR 0 24
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53218: LD_ADDR_VAR 0 25
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 4
53235: PUSH
53236: LD_INT 3
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53258: LD_ADDR_VAR 0 26
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 4
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53299: LD_ADDR_VAR 0 27
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 4
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53343: LD_ADDR_VAR 0 28
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: LD_INT 4
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53389: LD_ADDR_VAR 0 29
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 4
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 4
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 5
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 5
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 4
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 6
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 6
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 5
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53544: LD_ADDR_VAR 0 30
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 4
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 4
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 4
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 5
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 5
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 5
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 6
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 6
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53687: LD_ADDR_VAR 0 31
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 4
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 4
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 5
53764: PUSH
53765: LD_INT 5
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: LD_INT 5
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 6
53784: PUSH
53785: LD_INT 5
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 6
53794: PUSH
53795: LD_INT 6
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 5
53804: PUSH
53805: LD_INT 6
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53826: LD_ADDR_VAR 0 32
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 6
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 6
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 5
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53969: LD_ADDR_VAR 0 33
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 4
54021: NEG
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 5
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 5
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 6
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 6
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54124: LD_ADDR_VAR 0 34
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 4
54191: NEG
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: NEG
54204: PUSH
54205: LD_INT 5
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 5
54215: NEG
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: LD_INT 5
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 5
54239: NEG
54240: PUSH
54241: LD_INT 6
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 6
54251: NEG
54252: PUSH
54253: LD_INT 5
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 6
54263: NEG
54264: PUSH
54265: LD_INT 6
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54287: LD_ADDR_VAR 0 41
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54331: LD_ADDR_VAR 0 42
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54372: LD_ADDR_VAR 0 43
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54412: LD_ADDR_VAR 0 44
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54453: LD_ADDR_VAR 0 45
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54497: LD_ADDR_VAR 0 46
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54543: LD_ADDR_VAR 0 47
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54576: LD_ADDR_VAR 0 48
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54607: LD_ADDR_VAR 0 49
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54636: LD_ADDR_VAR 0 50
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54665: LD_ADDR_VAR 0 51
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54696: LD_ADDR_VAR 0 52
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54729: LD_ADDR_VAR 0 53
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 3
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54773: LD_ADDR_VAR 0 54
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54814: LD_ADDR_VAR 0 55
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54854: LD_ADDR_VAR 0 56
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54895: LD_ADDR_VAR 0 57
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54939: LD_ADDR_VAR 0 58
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54985: LD_ADDR_VAR 0 59
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55029: LD_ADDR_VAR 0 60
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55070: LD_ADDR_VAR 0 61
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55110: LD_ADDR_VAR 0 62
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55151: LD_ADDR_VAR 0 63
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55195: LD_ADDR_VAR 0 64
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// end ; 2 :
55241: GO 58507
55243: LD_INT 2
55245: DOUBLE
55246: EQUAL
55247: IFTRUE 55251
55249: GO 58506
55251: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55252: LD_ADDR_VAR 0 29
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 4
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 5
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 5
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 4
55382: PUSH
55383: LD_INT 4
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 4
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 4
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 4
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 4
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 5
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 5
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 4
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 5
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 3
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 4
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 4
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: LD_INT 5
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 4
55685: NEG
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 5
55697: NEG
55698: PUSH
55699: LD_INT 4
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 5
55709: NEG
55710: PUSH
55711: LD_INT 5
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: LD_INT 5
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 5
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55790: LD_ADDR_VAR 0 30
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: LD_INT 4
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 5
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 5
55827: PUSH
55828: LD_INT 5
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: LD_INT 5
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 5
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: LD_INT 5
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 4
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 4
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 4
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 4
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 5
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 5
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 5
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: NEG
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: LD_INT 4
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 4
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 5
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 5
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56337: LD_ADDR_VAR 0 31
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 5
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 4
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 4
56493: NEG
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 4
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 4
56516: NEG
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 4
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 5
56599: NEG
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: LD_INT 5
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: LD_INT 5
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 5
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 4
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 4
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 4
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 5
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 5
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 4
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 5
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56887: LD_ADDR_VAR 0 32
56891: PUSH
56892: LD_INT 4
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 4
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 5
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 5
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 5
56973: NEG
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: LD_INT 3
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 4
57056: NEG
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 4
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 4
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 5
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 5
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 4
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 5
57329: PUSH
57330: LD_INT 5
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 5
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57434: LD_ADDR_VAR 0 33
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: NEG
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 5
57501: NEG
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 5
57513: NEG
57514: PUSH
57515: LD_INT 5
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: LD_INT 5
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: NEG
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 4
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 5
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: PUSH
57775: LD_INT 4
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57972: LD_ADDR_VAR 0 34
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 5
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 4
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 5
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 5
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 4
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 4
58174: PUSH
58175: LD_INT 4
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 5
58194: PUSH
58195: LD_INT 4
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 5
58204: PUSH
58205: LD_INT 5
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 4
58214: PUSH
58215: LD_INT 5
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: LD_INT 5
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 4
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 4
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 5
58413: NEG
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 5
58424: NEG
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// end ; end ;
58504: GO 58507
58506: POP
// case btype of b_depot , b_warehouse :
58507: LD_VAR 0 1
58511: PUSH
58512: LD_INT 0
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58526
58518: LD_INT 1
58520: DOUBLE
58521: EQUAL
58522: IFTRUE 58526
58524: GO 58727
58526: POP
// case nation of nation_american :
58527: LD_VAR 0 5
58531: PUSH
58532: LD_INT 1
58534: DOUBLE
58535: EQUAL
58536: IFTRUE 58540
58538: GO 58596
58540: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58541: LD_ADDR_VAR 0 9
58545: PUSH
58546: LD_VAR 0 11
58550: PUSH
58551: LD_VAR 0 12
58555: PUSH
58556: LD_VAR 0 13
58560: PUSH
58561: LD_VAR 0 14
58565: PUSH
58566: LD_VAR 0 15
58570: PUSH
58571: LD_VAR 0 16
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: PUSH
58584: LD_VAR 0 4
58588: PUSH
58589: LD_INT 1
58591: PLUS
58592: ARRAY
58593: ST_TO_ADDR
58594: GO 58725
58596: LD_INT 2
58598: DOUBLE
58599: EQUAL
58600: IFTRUE 58604
58602: GO 58660
58604: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58605: LD_ADDR_VAR 0 9
58609: PUSH
58610: LD_VAR 0 17
58614: PUSH
58615: LD_VAR 0 18
58619: PUSH
58620: LD_VAR 0 19
58624: PUSH
58625: LD_VAR 0 20
58629: PUSH
58630: LD_VAR 0 21
58634: PUSH
58635: LD_VAR 0 22
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: PUSH
58648: LD_VAR 0 4
58652: PUSH
58653: LD_INT 1
58655: PLUS
58656: ARRAY
58657: ST_TO_ADDR
58658: GO 58725
58660: LD_INT 3
58662: DOUBLE
58663: EQUAL
58664: IFTRUE 58668
58666: GO 58724
58668: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58669: LD_ADDR_VAR 0 9
58673: PUSH
58674: LD_VAR 0 23
58678: PUSH
58679: LD_VAR 0 24
58683: PUSH
58684: LD_VAR 0 25
58688: PUSH
58689: LD_VAR 0 26
58693: PUSH
58694: LD_VAR 0 27
58698: PUSH
58699: LD_VAR 0 28
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: PUSH
58712: LD_VAR 0 4
58716: PUSH
58717: LD_INT 1
58719: PLUS
58720: ARRAY
58721: ST_TO_ADDR
58722: GO 58725
58724: POP
58725: GO 59280
58727: LD_INT 2
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58741
58733: LD_INT 3
58735: DOUBLE
58736: EQUAL
58737: IFTRUE 58741
58739: GO 58797
58741: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58742: LD_ADDR_VAR 0 9
58746: PUSH
58747: LD_VAR 0 29
58751: PUSH
58752: LD_VAR 0 30
58756: PUSH
58757: LD_VAR 0 31
58761: PUSH
58762: LD_VAR 0 32
58766: PUSH
58767: LD_VAR 0 33
58771: PUSH
58772: LD_VAR 0 34
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: PUSH
58785: LD_VAR 0 4
58789: PUSH
58790: LD_INT 1
58792: PLUS
58793: ARRAY
58794: ST_TO_ADDR
58795: GO 59280
58797: LD_INT 16
58799: DOUBLE
58800: EQUAL
58801: IFTRUE 58859
58803: LD_INT 17
58805: DOUBLE
58806: EQUAL
58807: IFTRUE 58859
58809: LD_INT 18
58811: DOUBLE
58812: EQUAL
58813: IFTRUE 58859
58815: LD_INT 19
58817: DOUBLE
58818: EQUAL
58819: IFTRUE 58859
58821: LD_INT 22
58823: DOUBLE
58824: EQUAL
58825: IFTRUE 58859
58827: LD_INT 20
58829: DOUBLE
58830: EQUAL
58831: IFTRUE 58859
58833: LD_INT 21
58835: DOUBLE
58836: EQUAL
58837: IFTRUE 58859
58839: LD_INT 23
58841: DOUBLE
58842: EQUAL
58843: IFTRUE 58859
58845: LD_INT 24
58847: DOUBLE
58848: EQUAL
58849: IFTRUE 58859
58851: LD_INT 25
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58859
58857: GO 58915
58859: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58860: LD_ADDR_VAR 0 9
58864: PUSH
58865: LD_VAR 0 35
58869: PUSH
58870: LD_VAR 0 36
58874: PUSH
58875: LD_VAR 0 37
58879: PUSH
58880: LD_VAR 0 38
58884: PUSH
58885: LD_VAR 0 39
58889: PUSH
58890: LD_VAR 0 40
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: PUSH
58903: LD_VAR 0 4
58907: PUSH
58908: LD_INT 1
58910: PLUS
58911: ARRAY
58912: ST_TO_ADDR
58913: GO 59280
58915: LD_INT 6
58917: DOUBLE
58918: EQUAL
58919: IFTRUE 58971
58921: LD_INT 7
58923: DOUBLE
58924: EQUAL
58925: IFTRUE 58971
58927: LD_INT 8
58929: DOUBLE
58930: EQUAL
58931: IFTRUE 58971
58933: LD_INT 13
58935: DOUBLE
58936: EQUAL
58937: IFTRUE 58971
58939: LD_INT 12
58941: DOUBLE
58942: EQUAL
58943: IFTRUE 58971
58945: LD_INT 15
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58971
58951: LD_INT 11
58953: DOUBLE
58954: EQUAL
58955: IFTRUE 58971
58957: LD_INT 14
58959: DOUBLE
58960: EQUAL
58961: IFTRUE 58971
58963: LD_INT 10
58965: DOUBLE
58966: EQUAL
58967: IFTRUE 58971
58969: GO 59027
58971: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58972: LD_ADDR_VAR 0 9
58976: PUSH
58977: LD_VAR 0 41
58981: PUSH
58982: LD_VAR 0 42
58986: PUSH
58987: LD_VAR 0 43
58991: PUSH
58992: LD_VAR 0 44
58996: PUSH
58997: LD_VAR 0 45
59001: PUSH
59002: LD_VAR 0 46
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: PUSH
59015: LD_VAR 0 4
59019: PUSH
59020: LD_INT 1
59022: PLUS
59023: ARRAY
59024: ST_TO_ADDR
59025: GO 59280
59027: LD_INT 36
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59091
59035: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59036: LD_ADDR_VAR 0 9
59040: PUSH
59041: LD_VAR 0 47
59045: PUSH
59046: LD_VAR 0 48
59050: PUSH
59051: LD_VAR 0 49
59055: PUSH
59056: LD_VAR 0 50
59060: PUSH
59061: LD_VAR 0 51
59065: PUSH
59066: LD_VAR 0 52
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: PUSH
59079: LD_VAR 0 4
59083: PUSH
59084: LD_INT 1
59086: PLUS
59087: ARRAY
59088: ST_TO_ADDR
59089: GO 59280
59091: LD_INT 4
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59117
59097: LD_INT 5
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59117
59103: LD_INT 34
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59117
59109: LD_INT 37
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59117
59115: GO 59173
59117: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59118: LD_ADDR_VAR 0 9
59122: PUSH
59123: LD_VAR 0 53
59127: PUSH
59128: LD_VAR 0 54
59132: PUSH
59133: LD_VAR 0 55
59137: PUSH
59138: LD_VAR 0 56
59142: PUSH
59143: LD_VAR 0 57
59147: PUSH
59148: LD_VAR 0 58
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: PUSH
59161: LD_VAR 0 4
59165: PUSH
59166: LD_INT 1
59168: PLUS
59169: ARRAY
59170: ST_TO_ADDR
59171: GO 59280
59173: LD_INT 31
59175: DOUBLE
59176: EQUAL
59177: IFTRUE 59223
59179: LD_INT 32
59181: DOUBLE
59182: EQUAL
59183: IFTRUE 59223
59185: LD_INT 33
59187: DOUBLE
59188: EQUAL
59189: IFTRUE 59223
59191: LD_INT 27
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59223
59197: LD_INT 26
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59223
59203: LD_INT 28
59205: DOUBLE
59206: EQUAL
59207: IFTRUE 59223
59209: LD_INT 29
59211: DOUBLE
59212: EQUAL
59213: IFTRUE 59223
59215: LD_INT 30
59217: DOUBLE
59218: EQUAL
59219: IFTRUE 59223
59221: GO 59279
59223: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59224: LD_ADDR_VAR 0 9
59228: PUSH
59229: LD_VAR 0 59
59233: PUSH
59234: LD_VAR 0 60
59238: PUSH
59239: LD_VAR 0 61
59243: PUSH
59244: LD_VAR 0 62
59248: PUSH
59249: LD_VAR 0 63
59253: PUSH
59254: LD_VAR 0 64
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: PUSH
59267: LD_VAR 0 4
59271: PUSH
59272: LD_INT 1
59274: PLUS
59275: ARRAY
59276: ST_TO_ADDR
59277: GO 59280
59279: POP
// temp_list2 = [ ] ;
59280: LD_ADDR_VAR 0 10
59284: PUSH
59285: EMPTY
59286: ST_TO_ADDR
// for i in temp_list do
59287: LD_ADDR_VAR 0 8
59291: PUSH
59292: LD_VAR 0 9
59296: PUSH
59297: FOR_IN
59298: IFFALSE 59350
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59300: LD_ADDR_VAR 0 10
59304: PUSH
59305: LD_VAR 0 10
59309: PUSH
59310: LD_VAR 0 8
59314: PUSH
59315: LD_INT 1
59317: ARRAY
59318: PUSH
59319: LD_VAR 0 2
59323: PLUS
59324: PUSH
59325: LD_VAR 0 8
59329: PUSH
59330: LD_INT 2
59332: ARRAY
59333: PUSH
59334: LD_VAR 0 3
59338: PLUS
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: ADD
59347: ST_TO_ADDR
59348: GO 59297
59350: POP
59351: POP
// result = temp_list2 ;
59352: LD_ADDR_VAR 0 7
59356: PUSH
59357: LD_VAR 0 10
59361: ST_TO_ADDR
// end ;
59362: LD_VAR 0 7
59366: RET
// export function EnemyInRange ( unit , dist ) ; begin
59367: LD_INT 0
59369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59370: LD_ADDR_VAR 0 3
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 255
59384: PPUSH
59385: LD_VAR 0 1
59389: PPUSH
59390: CALL_OW 250
59394: PPUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 251
59404: PPUSH
59405: LD_VAR 0 2
59409: PPUSH
59410: CALL 32769 0 4
59414: PUSH
59415: LD_INT 4
59417: ARRAY
59418: ST_TO_ADDR
// end ;
59419: LD_VAR 0 3
59423: RET
// export function PlayerSeeMe ( unit ) ; begin
59424: LD_INT 0
59426: PPUSH
// result := See ( your_side , unit ) ;
59427: LD_ADDR_VAR 0 2
59431: PUSH
59432: LD_OWVAR 2
59436: PPUSH
59437: LD_VAR 0 1
59441: PPUSH
59442: CALL_OW 292
59446: ST_TO_ADDR
// end ;
59447: LD_VAR 0 2
59451: RET
// export function ReverseDir ( unit ) ; begin
59452: LD_INT 0
59454: PPUSH
// if not unit then
59455: LD_VAR 0 1
59459: NOT
59460: IFFALSE 59464
// exit ;
59462: GO 59487
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59464: LD_ADDR_VAR 0 2
59468: PUSH
59469: LD_VAR 0 1
59473: PPUSH
59474: CALL_OW 254
59478: PUSH
59479: LD_INT 3
59481: PLUS
59482: PUSH
59483: LD_INT 6
59485: MOD
59486: ST_TO_ADDR
// end ;
59487: LD_VAR 0 2
59491: RET
// export function ReverseArray ( array ) ; var i ; begin
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
// if not array then
59496: LD_VAR 0 1
59500: NOT
59501: IFFALSE 59505
// exit ;
59503: GO 59560
// result := [ ] ;
59505: LD_ADDR_VAR 0 2
59509: PUSH
59510: EMPTY
59511: ST_TO_ADDR
// for i := array downto 1 do
59512: LD_ADDR_VAR 0 3
59516: PUSH
59517: DOUBLE
59518: LD_VAR 0 1
59522: INC
59523: ST_TO_ADDR
59524: LD_INT 1
59526: PUSH
59527: FOR_DOWNTO
59528: IFFALSE 59558
// result := Join ( result , array [ i ] ) ;
59530: LD_ADDR_VAR 0 2
59534: PUSH
59535: LD_VAR 0 2
59539: PPUSH
59540: LD_VAR 0 1
59544: PUSH
59545: LD_VAR 0 3
59549: ARRAY
59550: PPUSH
59551: CALL 64203 0 2
59555: ST_TO_ADDR
59556: GO 59527
59558: POP
59559: POP
// end ;
59560: LD_VAR 0 2
59564: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59565: LD_INT 0
59567: PPUSH
59568: PPUSH
59569: PPUSH
59570: PPUSH
59571: PPUSH
59572: PPUSH
// if not unit or not hexes then
59573: LD_VAR 0 1
59577: NOT
59578: PUSH
59579: LD_VAR 0 2
59583: NOT
59584: OR
59585: IFFALSE 59589
// exit ;
59587: GO 59712
// dist := 9999 ;
59589: LD_ADDR_VAR 0 5
59593: PUSH
59594: LD_INT 9999
59596: ST_TO_ADDR
// for i = 1 to hexes do
59597: LD_ADDR_VAR 0 4
59601: PUSH
59602: DOUBLE
59603: LD_INT 1
59605: DEC
59606: ST_TO_ADDR
59607: LD_VAR 0 2
59611: PUSH
59612: FOR_TO
59613: IFFALSE 59700
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59615: LD_ADDR_VAR 0 6
59619: PUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_VAR 0 4
59634: ARRAY
59635: PUSH
59636: LD_INT 1
59638: ARRAY
59639: PPUSH
59640: LD_VAR 0 2
59644: PUSH
59645: LD_VAR 0 4
59649: ARRAY
59650: PUSH
59651: LD_INT 2
59653: ARRAY
59654: PPUSH
59655: CALL_OW 297
59659: ST_TO_ADDR
// if tdist < dist then
59660: LD_VAR 0 6
59664: PUSH
59665: LD_VAR 0 5
59669: LESS
59670: IFFALSE 59698
// begin hex := hexes [ i ] ;
59672: LD_ADDR_VAR 0 8
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_VAR 0 4
59686: ARRAY
59687: ST_TO_ADDR
// dist := tdist ;
59688: LD_ADDR_VAR 0 5
59692: PUSH
59693: LD_VAR 0 6
59697: ST_TO_ADDR
// end ; end ;
59698: GO 59612
59700: POP
59701: POP
// result := hex ;
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: LD_VAR 0 8
59711: ST_TO_ADDR
// end ;
59712: LD_VAR 0 3
59716: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59717: LD_INT 0
59719: PPUSH
59720: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59721: LD_VAR 0 1
59725: NOT
59726: PUSH
59727: LD_VAR 0 1
59731: PUSH
59732: LD_INT 21
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 23
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PPUSH
59756: CALL_OW 69
59760: IN
59761: NOT
59762: OR
59763: IFFALSE 59767
// exit ;
59765: GO 59814
// for i = 1 to 3 do
59767: LD_ADDR_VAR 0 3
59771: PUSH
59772: DOUBLE
59773: LD_INT 1
59775: DEC
59776: ST_TO_ADDR
59777: LD_INT 3
59779: PUSH
59780: FOR_TO
59781: IFFALSE 59812
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 250
59792: PPUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 251
59802: PPUSH
59803: LD_INT 1
59805: PPUSH
59806: CALL_OW 453
59810: GO 59780
59812: POP
59813: POP
// end ;
59814: LD_VAR 0 2
59818: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59819: LD_INT 0
59821: PPUSH
59822: PPUSH
59823: PPUSH
59824: PPUSH
59825: PPUSH
59826: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59827: LD_VAR 0 1
59831: NOT
59832: PUSH
59833: LD_VAR 0 2
59837: NOT
59838: OR
59839: PUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: CALL_OW 314
59849: OR
59850: IFFALSE 59854
// exit ;
59852: GO 60321
// if GetLives ( i ) < 250 then
59854: LD_VAR 0 4
59858: PPUSH
59859: CALL_OW 256
59863: PUSH
59864: LD_INT 250
59866: LESS
59867: IFFALSE 59880
// begin ComAutodestruct ( i ) ;
59869: LD_VAR 0 4
59873: PPUSH
59874: CALL 59717 0 1
// exit ;
59878: GO 60321
// end ; x := GetX ( enemy_unit ) ;
59880: LD_ADDR_VAR 0 7
59884: PUSH
59885: LD_VAR 0 2
59889: PPUSH
59890: CALL_OW 250
59894: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59895: LD_ADDR_VAR 0 8
59899: PUSH
59900: LD_VAR 0 2
59904: PPUSH
59905: CALL_OW 251
59909: ST_TO_ADDR
// if not x or not y then
59910: LD_VAR 0 7
59914: NOT
59915: PUSH
59916: LD_VAR 0 8
59920: NOT
59921: OR
59922: IFFALSE 59926
// exit ;
59924: GO 60321
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59926: LD_ADDR_VAR 0 6
59930: PUSH
59931: LD_VAR 0 7
59935: PPUSH
59936: LD_INT 0
59938: PPUSH
59939: LD_INT 4
59941: PPUSH
59942: CALL_OW 272
59946: PUSH
59947: LD_VAR 0 8
59951: PPUSH
59952: LD_INT 0
59954: PPUSH
59955: LD_INT 4
59957: PPUSH
59958: CALL_OW 273
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_VAR 0 7
59971: PPUSH
59972: LD_INT 1
59974: PPUSH
59975: LD_INT 4
59977: PPUSH
59978: CALL_OW 272
59982: PUSH
59983: LD_VAR 0 8
59987: PPUSH
59988: LD_INT 1
59990: PPUSH
59991: LD_INT 4
59993: PPUSH
59994: CALL_OW 273
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 7
60007: PPUSH
60008: LD_INT 2
60010: PPUSH
60011: LD_INT 4
60013: PPUSH
60014: CALL_OW 272
60018: PUSH
60019: LD_VAR 0 8
60023: PPUSH
60024: LD_INT 2
60026: PPUSH
60027: LD_INT 4
60029: PPUSH
60030: CALL_OW 273
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 7
60043: PPUSH
60044: LD_INT 3
60046: PPUSH
60047: LD_INT 4
60049: PPUSH
60050: CALL_OW 272
60054: PUSH
60055: LD_VAR 0 8
60059: PPUSH
60060: LD_INT 3
60062: PPUSH
60063: LD_INT 4
60065: PPUSH
60066: CALL_OW 273
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_VAR 0 7
60079: PPUSH
60080: LD_INT 4
60082: PPUSH
60083: LD_INT 4
60085: PPUSH
60086: CALL_OW 272
60090: PUSH
60091: LD_VAR 0 8
60095: PPUSH
60096: LD_INT 4
60098: PPUSH
60099: LD_INT 4
60101: PPUSH
60102: CALL_OW 273
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 7
60115: PPUSH
60116: LD_INT 5
60118: PPUSH
60119: LD_INT 4
60121: PPUSH
60122: CALL_OW 272
60126: PUSH
60127: LD_VAR 0 8
60131: PPUSH
60132: LD_INT 5
60134: PPUSH
60135: LD_INT 4
60137: PPUSH
60138: CALL_OW 273
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// for i = tmp downto 1 do
60155: LD_ADDR_VAR 0 4
60159: PUSH
60160: DOUBLE
60161: LD_VAR 0 6
60165: INC
60166: ST_TO_ADDR
60167: LD_INT 1
60169: PUSH
60170: FOR_DOWNTO
60171: IFFALSE 60272
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60173: LD_VAR 0 6
60177: PUSH
60178: LD_VAR 0 4
60182: ARRAY
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PPUSH
60188: LD_VAR 0 6
60192: PUSH
60193: LD_VAR 0 4
60197: ARRAY
60198: PUSH
60199: LD_INT 2
60201: ARRAY
60202: PPUSH
60203: CALL_OW 488
60207: NOT
60208: PUSH
60209: LD_VAR 0 6
60213: PUSH
60214: LD_VAR 0 4
60218: ARRAY
60219: PUSH
60220: LD_INT 1
60222: ARRAY
60223: PPUSH
60224: LD_VAR 0 6
60228: PUSH
60229: LD_VAR 0 4
60233: ARRAY
60234: PUSH
60235: LD_INT 2
60237: ARRAY
60238: PPUSH
60239: CALL_OW 428
60243: PUSH
60244: LD_INT 0
60246: NONEQUAL
60247: OR
60248: IFFALSE 60270
// tmp := Delete ( tmp , i ) ;
60250: LD_ADDR_VAR 0 6
60254: PUSH
60255: LD_VAR 0 6
60259: PPUSH
60260: LD_VAR 0 4
60264: PPUSH
60265: CALL_OW 3
60269: ST_TO_ADDR
60270: GO 60170
60272: POP
60273: POP
// j := GetClosestHex ( unit , tmp ) ;
60274: LD_ADDR_VAR 0 5
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: LD_VAR 0 6
60288: PPUSH
60289: CALL 59565 0 2
60293: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60294: LD_VAR 0 1
60298: PPUSH
60299: LD_VAR 0 5
60303: PUSH
60304: LD_INT 1
60306: ARRAY
60307: PPUSH
60308: LD_VAR 0 5
60312: PUSH
60313: LD_INT 2
60315: ARRAY
60316: PPUSH
60317: CALL_OW 111
// end ;
60321: LD_VAR 0 3
60325: RET
// export function PrepareApemanSoldier ( ) ; begin
60326: LD_INT 0
60328: PPUSH
// uc_nation := 0 ;
60329: LD_ADDR_OWVAR 21
60333: PUSH
60334: LD_INT 0
60336: ST_TO_ADDR
// hc_sex := sex_male ;
60337: LD_ADDR_OWVAR 27
60341: PUSH
60342: LD_INT 1
60344: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60345: LD_ADDR_OWVAR 28
60349: PUSH
60350: LD_INT 15
60352: ST_TO_ADDR
// hc_gallery :=  ;
60353: LD_ADDR_OWVAR 33
60357: PUSH
60358: LD_STRING 
60360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60361: LD_ADDR_OWVAR 31
60365: PUSH
60366: LD_INT 0
60368: PPUSH
60369: LD_INT 3
60371: PPUSH
60372: CALL_OW 12
60376: PUSH
60377: LD_INT 0
60379: PPUSH
60380: LD_INT 3
60382: PPUSH
60383: CALL_OW 12
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
// end ;
60400: LD_VAR 0 1
60404: RET
// export function PrepareApemanEngineer ( ) ; begin
60405: LD_INT 0
60407: PPUSH
// uc_nation := 0 ;
60408: LD_ADDR_OWVAR 21
60412: PUSH
60413: LD_INT 0
60415: ST_TO_ADDR
// hc_sex := sex_male ;
60416: LD_ADDR_OWVAR 27
60420: PUSH
60421: LD_INT 1
60423: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60424: LD_ADDR_OWVAR 28
60428: PUSH
60429: LD_INT 16
60431: ST_TO_ADDR
// hc_gallery :=  ;
60432: LD_ADDR_OWVAR 33
60436: PUSH
60437: LD_STRING 
60439: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60440: LD_ADDR_OWVAR 31
60444: PUSH
60445: LD_INT 0
60447: PPUSH
60448: LD_INT 3
60450: PPUSH
60451: CALL_OW 12
60455: PUSH
60456: LD_INT 0
60458: PPUSH
60459: LD_INT 3
60461: PPUSH
60462: CALL_OW 12
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: ST_TO_ADDR
// end ;
60479: LD_VAR 0 1
60483: RET
// export function PrepareApeman ( agressivity ) ; begin
60484: LD_INT 0
60486: PPUSH
// uc_side := 0 ;
60487: LD_ADDR_OWVAR 20
60491: PUSH
60492: LD_INT 0
60494: ST_TO_ADDR
// uc_nation := 0 ;
60495: LD_ADDR_OWVAR 21
60499: PUSH
60500: LD_INT 0
60502: ST_TO_ADDR
// hc_sex := sex_male ;
60503: LD_ADDR_OWVAR 27
60507: PUSH
60508: LD_INT 1
60510: ST_TO_ADDR
// hc_class := class_apeman ;
60511: LD_ADDR_OWVAR 28
60515: PUSH
60516: LD_INT 12
60518: ST_TO_ADDR
// hc_gallery :=  ;
60519: LD_ADDR_OWVAR 33
60523: PUSH
60524: LD_STRING 
60526: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60527: LD_ADDR_OWVAR 35
60531: PUSH
60532: LD_VAR 0 1
60536: NEG
60537: PPUSH
60538: LD_VAR 0 1
60542: PPUSH
60543: CALL_OW 12
60547: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60548: LD_ADDR_OWVAR 31
60552: PUSH
60553: LD_INT 0
60555: PPUSH
60556: LD_INT 3
60558: PPUSH
60559: CALL_OW 12
60563: PUSH
60564: LD_INT 0
60566: PPUSH
60567: LD_INT 3
60569: PPUSH
60570: CALL_OW 12
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// end ;
60587: LD_VAR 0 2
60591: RET
// export function PrepareTiger ( agressivity ) ; begin
60592: LD_INT 0
60594: PPUSH
// uc_side := 0 ;
60595: LD_ADDR_OWVAR 20
60599: PUSH
60600: LD_INT 0
60602: ST_TO_ADDR
// uc_nation := 0 ;
60603: LD_ADDR_OWVAR 21
60607: PUSH
60608: LD_INT 0
60610: ST_TO_ADDR
// hc_class := class_tiger ;
60611: LD_ADDR_OWVAR 28
60615: PUSH
60616: LD_INT 14
60618: ST_TO_ADDR
// hc_gallery :=  ;
60619: LD_ADDR_OWVAR 33
60623: PUSH
60624: LD_STRING 
60626: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60627: LD_ADDR_OWVAR 35
60631: PUSH
60632: LD_VAR 0 1
60636: NEG
60637: PPUSH
60638: LD_VAR 0 1
60642: PPUSH
60643: CALL_OW 12
60647: ST_TO_ADDR
// end ;
60648: LD_VAR 0 2
60652: RET
// export function PrepareEnchidna ( ) ; begin
60653: LD_INT 0
60655: PPUSH
// uc_side := 0 ;
60656: LD_ADDR_OWVAR 20
60660: PUSH
60661: LD_INT 0
60663: ST_TO_ADDR
// uc_nation := 0 ;
60664: LD_ADDR_OWVAR 21
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
// hc_class := class_baggie ;
60672: LD_ADDR_OWVAR 28
60676: PUSH
60677: LD_INT 13
60679: ST_TO_ADDR
// hc_gallery :=  ;
60680: LD_ADDR_OWVAR 33
60684: PUSH
60685: LD_STRING 
60687: ST_TO_ADDR
// end ;
60688: LD_VAR 0 1
60692: RET
// export function PrepareFrog ( ) ; begin
60693: LD_INT 0
60695: PPUSH
// uc_side := 0 ;
60696: LD_ADDR_OWVAR 20
60700: PUSH
60701: LD_INT 0
60703: ST_TO_ADDR
// uc_nation := 0 ;
60704: LD_ADDR_OWVAR 21
60708: PUSH
60709: LD_INT 0
60711: ST_TO_ADDR
// hc_class := class_frog ;
60712: LD_ADDR_OWVAR 28
60716: PUSH
60717: LD_INT 19
60719: ST_TO_ADDR
// hc_gallery :=  ;
60720: LD_ADDR_OWVAR 33
60724: PUSH
60725: LD_STRING 
60727: ST_TO_ADDR
// end ;
60728: LD_VAR 0 1
60732: RET
// export function PrepareFish ( ) ; begin
60733: LD_INT 0
60735: PPUSH
// uc_side := 0 ;
60736: LD_ADDR_OWVAR 20
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// uc_nation := 0 ;
60744: LD_ADDR_OWVAR 21
60748: PUSH
60749: LD_INT 0
60751: ST_TO_ADDR
// hc_class := class_fish ;
60752: LD_ADDR_OWVAR 28
60756: PUSH
60757: LD_INT 20
60759: ST_TO_ADDR
// hc_gallery :=  ;
60760: LD_ADDR_OWVAR 33
60764: PUSH
60765: LD_STRING 
60767: ST_TO_ADDR
// end ;
60768: LD_VAR 0 1
60772: RET
// export function PrepareBird ( ) ; begin
60773: LD_INT 0
60775: PPUSH
// uc_side := 0 ;
60776: LD_ADDR_OWVAR 20
60780: PUSH
60781: LD_INT 0
60783: ST_TO_ADDR
// uc_nation := 0 ;
60784: LD_ADDR_OWVAR 21
60788: PUSH
60789: LD_INT 0
60791: ST_TO_ADDR
// hc_class := class_phororhacos ;
60792: LD_ADDR_OWVAR 28
60796: PUSH
60797: LD_INT 18
60799: ST_TO_ADDR
// hc_gallery :=  ;
60800: LD_ADDR_OWVAR 33
60804: PUSH
60805: LD_STRING 
60807: ST_TO_ADDR
// end ;
60808: LD_VAR 0 1
60812: RET
// export function PrepareHorse ( ) ; begin
60813: LD_INT 0
60815: PPUSH
// uc_side := 0 ;
60816: LD_ADDR_OWVAR 20
60820: PUSH
60821: LD_INT 0
60823: ST_TO_ADDR
// uc_nation := 0 ;
60824: LD_ADDR_OWVAR 21
60828: PUSH
60829: LD_INT 0
60831: ST_TO_ADDR
// hc_class := class_horse ;
60832: LD_ADDR_OWVAR 28
60836: PUSH
60837: LD_INT 21
60839: ST_TO_ADDR
// hc_gallery :=  ;
60840: LD_ADDR_OWVAR 33
60844: PUSH
60845: LD_STRING 
60847: ST_TO_ADDR
// end ;
60848: LD_VAR 0 1
60852: RET
// export function PrepareMastodont ( ) ; begin
60853: LD_INT 0
60855: PPUSH
// uc_side := 0 ;
60856: LD_ADDR_OWVAR 20
60860: PUSH
60861: LD_INT 0
60863: ST_TO_ADDR
// uc_nation := 0 ;
60864: LD_ADDR_OWVAR 21
60868: PUSH
60869: LD_INT 0
60871: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60872: LD_ADDR_OWVAR 37
60876: PUSH
60877: LD_INT 31
60879: ST_TO_ADDR
// vc_control := control_rider ;
60880: LD_ADDR_OWVAR 38
60884: PUSH
60885: LD_INT 4
60887: ST_TO_ADDR
// end ;
60888: LD_VAR 0 1
60892: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60893: LD_INT 0
60895: PPUSH
60896: PPUSH
60897: PPUSH
// uc_side = 0 ;
60898: LD_ADDR_OWVAR 20
60902: PUSH
60903: LD_INT 0
60905: ST_TO_ADDR
// uc_nation = 0 ;
60906: LD_ADDR_OWVAR 21
60910: PUSH
60911: LD_INT 0
60913: ST_TO_ADDR
// InitHc_All ( ) ;
60914: CALL_OW 584
// InitVc ;
60918: CALL_OW 20
// if mastodonts then
60922: LD_VAR 0 6
60926: IFFALSE 60993
// for i = 1 to mastodonts do
60928: LD_ADDR_VAR 0 11
60932: PUSH
60933: DOUBLE
60934: LD_INT 1
60936: DEC
60937: ST_TO_ADDR
60938: LD_VAR 0 6
60942: PUSH
60943: FOR_TO
60944: IFFALSE 60991
// begin vc_chassis := 31 ;
60946: LD_ADDR_OWVAR 37
60950: PUSH
60951: LD_INT 31
60953: ST_TO_ADDR
// vc_control := control_rider ;
60954: LD_ADDR_OWVAR 38
60958: PUSH
60959: LD_INT 4
60961: ST_TO_ADDR
// animal := CreateVehicle ;
60962: LD_ADDR_VAR 0 12
60966: PUSH
60967: CALL_OW 45
60971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60972: LD_VAR 0 12
60976: PPUSH
60977: LD_VAR 0 8
60981: PPUSH
60982: LD_INT 0
60984: PPUSH
60985: CALL 63121 0 3
// end ;
60989: GO 60943
60991: POP
60992: POP
// if horses then
60993: LD_VAR 0 5
60997: IFFALSE 61064
// for i = 1 to horses do
60999: LD_ADDR_VAR 0 11
61003: PUSH
61004: DOUBLE
61005: LD_INT 1
61007: DEC
61008: ST_TO_ADDR
61009: LD_VAR 0 5
61013: PUSH
61014: FOR_TO
61015: IFFALSE 61062
// begin hc_class := 21 ;
61017: LD_ADDR_OWVAR 28
61021: PUSH
61022: LD_INT 21
61024: ST_TO_ADDR
// hc_gallery :=  ;
61025: LD_ADDR_OWVAR 33
61029: PUSH
61030: LD_STRING 
61032: ST_TO_ADDR
// animal := CreateHuman ;
61033: LD_ADDR_VAR 0 12
61037: PUSH
61038: CALL_OW 44
61042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61043: LD_VAR 0 12
61047: PPUSH
61048: LD_VAR 0 8
61052: PPUSH
61053: LD_INT 0
61055: PPUSH
61056: CALL 63121 0 3
// end ;
61060: GO 61014
61062: POP
61063: POP
// if birds then
61064: LD_VAR 0 1
61068: IFFALSE 61135
// for i = 1 to birds do
61070: LD_ADDR_VAR 0 11
61074: PUSH
61075: DOUBLE
61076: LD_INT 1
61078: DEC
61079: ST_TO_ADDR
61080: LD_VAR 0 1
61084: PUSH
61085: FOR_TO
61086: IFFALSE 61133
// begin hc_class = 18 ;
61088: LD_ADDR_OWVAR 28
61092: PUSH
61093: LD_INT 18
61095: ST_TO_ADDR
// hc_gallery =  ;
61096: LD_ADDR_OWVAR 33
61100: PUSH
61101: LD_STRING 
61103: ST_TO_ADDR
// animal := CreateHuman ;
61104: LD_ADDR_VAR 0 12
61108: PUSH
61109: CALL_OW 44
61113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61114: LD_VAR 0 12
61118: PPUSH
61119: LD_VAR 0 8
61123: PPUSH
61124: LD_INT 0
61126: PPUSH
61127: CALL 63121 0 3
// end ;
61131: GO 61085
61133: POP
61134: POP
// if tigers then
61135: LD_VAR 0 2
61139: IFFALSE 61223
// for i = 1 to tigers do
61141: LD_ADDR_VAR 0 11
61145: PUSH
61146: DOUBLE
61147: LD_INT 1
61149: DEC
61150: ST_TO_ADDR
61151: LD_VAR 0 2
61155: PUSH
61156: FOR_TO
61157: IFFALSE 61221
// begin hc_class = class_tiger ;
61159: LD_ADDR_OWVAR 28
61163: PUSH
61164: LD_INT 14
61166: ST_TO_ADDR
// hc_gallery =  ;
61167: LD_ADDR_OWVAR 33
61171: PUSH
61172: LD_STRING 
61174: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61175: LD_ADDR_OWVAR 35
61179: PUSH
61180: LD_INT 7
61182: NEG
61183: PPUSH
61184: LD_INT 7
61186: PPUSH
61187: CALL_OW 12
61191: ST_TO_ADDR
// animal := CreateHuman ;
61192: LD_ADDR_VAR 0 12
61196: PUSH
61197: CALL_OW 44
61201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61202: LD_VAR 0 12
61206: PPUSH
61207: LD_VAR 0 8
61211: PPUSH
61212: LD_INT 0
61214: PPUSH
61215: CALL 63121 0 3
// end ;
61219: GO 61156
61221: POP
61222: POP
// if apemans then
61223: LD_VAR 0 3
61227: IFFALSE 61350
// for i = 1 to apemans do
61229: LD_ADDR_VAR 0 11
61233: PUSH
61234: DOUBLE
61235: LD_INT 1
61237: DEC
61238: ST_TO_ADDR
61239: LD_VAR 0 3
61243: PUSH
61244: FOR_TO
61245: IFFALSE 61348
// begin hc_class = class_apeman ;
61247: LD_ADDR_OWVAR 28
61251: PUSH
61252: LD_INT 12
61254: ST_TO_ADDR
// hc_gallery =  ;
61255: LD_ADDR_OWVAR 33
61259: PUSH
61260: LD_STRING 
61262: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61263: LD_ADDR_OWVAR 35
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PPUSH
61272: LD_INT 2
61274: PPUSH
61275: CALL_OW 12
61279: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61280: LD_ADDR_OWVAR 31
61284: PUSH
61285: LD_INT 1
61287: PPUSH
61288: LD_INT 3
61290: PPUSH
61291: CALL_OW 12
61295: PUSH
61296: LD_INT 1
61298: PPUSH
61299: LD_INT 3
61301: PPUSH
61302: CALL_OW 12
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// animal := CreateHuman ;
61319: LD_ADDR_VAR 0 12
61323: PUSH
61324: CALL_OW 44
61328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61329: LD_VAR 0 12
61333: PPUSH
61334: LD_VAR 0 8
61338: PPUSH
61339: LD_INT 0
61341: PPUSH
61342: CALL 63121 0 3
// end ;
61346: GO 61244
61348: POP
61349: POP
// if enchidnas then
61350: LD_VAR 0 4
61354: IFFALSE 61421
// for i = 1 to enchidnas do
61356: LD_ADDR_VAR 0 11
61360: PUSH
61361: DOUBLE
61362: LD_INT 1
61364: DEC
61365: ST_TO_ADDR
61366: LD_VAR 0 4
61370: PUSH
61371: FOR_TO
61372: IFFALSE 61419
// begin hc_class = 13 ;
61374: LD_ADDR_OWVAR 28
61378: PUSH
61379: LD_INT 13
61381: ST_TO_ADDR
// hc_gallery =  ;
61382: LD_ADDR_OWVAR 33
61386: PUSH
61387: LD_STRING 
61389: ST_TO_ADDR
// animal := CreateHuman ;
61390: LD_ADDR_VAR 0 12
61394: PUSH
61395: CALL_OW 44
61399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61400: LD_VAR 0 12
61404: PPUSH
61405: LD_VAR 0 8
61409: PPUSH
61410: LD_INT 0
61412: PPUSH
61413: CALL 63121 0 3
// end ;
61417: GO 61371
61419: POP
61420: POP
// if fishes then
61421: LD_VAR 0 7
61425: IFFALSE 61492
// for i = 1 to fishes do
61427: LD_ADDR_VAR 0 11
61431: PUSH
61432: DOUBLE
61433: LD_INT 1
61435: DEC
61436: ST_TO_ADDR
61437: LD_VAR 0 7
61441: PUSH
61442: FOR_TO
61443: IFFALSE 61490
// begin hc_class = 20 ;
61445: LD_ADDR_OWVAR 28
61449: PUSH
61450: LD_INT 20
61452: ST_TO_ADDR
// hc_gallery =  ;
61453: LD_ADDR_OWVAR 33
61457: PUSH
61458: LD_STRING 
61460: ST_TO_ADDR
// animal := CreateHuman ;
61461: LD_ADDR_VAR 0 12
61465: PUSH
61466: CALL_OW 44
61470: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61471: LD_VAR 0 12
61475: PPUSH
61476: LD_VAR 0 9
61480: PPUSH
61481: LD_INT 0
61483: PPUSH
61484: CALL 63121 0 3
// end ;
61488: GO 61442
61490: POP
61491: POP
// end ;
61492: LD_VAR 0 10
61496: RET
// export function WantHeal ( sci , unit ) ; begin
61497: LD_INT 0
61499: PPUSH
// if GetTaskList ( sci ) > 0 then
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 437
61509: PUSH
61510: LD_INT 0
61512: GREATER
61513: IFFALSE 61583
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61515: LD_VAR 0 1
61519: PPUSH
61520: CALL_OW 437
61524: PUSH
61525: LD_INT 1
61527: ARRAY
61528: PUSH
61529: LD_INT 1
61531: ARRAY
61532: PUSH
61533: LD_STRING l
61535: EQUAL
61536: PUSH
61537: LD_VAR 0 1
61541: PPUSH
61542: CALL_OW 437
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PUSH
61551: LD_INT 4
61553: ARRAY
61554: PUSH
61555: LD_VAR 0 2
61559: EQUAL
61560: AND
61561: IFFALSE 61573
// result := true else
61563: LD_ADDR_VAR 0 3
61567: PUSH
61568: LD_INT 1
61570: ST_TO_ADDR
61571: GO 61581
// result := false ;
61573: LD_ADDR_VAR 0 3
61577: PUSH
61578: LD_INT 0
61580: ST_TO_ADDR
// end else
61581: GO 61591
// result := false ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_INT 0
61590: ST_TO_ADDR
// end ;
61591: LD_VAR 0 3
61595: RET
// export function HealTarget ( sci ) ; begin
61596: LD_INT 0
61598: PPUSH
// if not sci then
61599: LD_VAR 0 1
61603: NOT
61604: IFFALSE 61608
// exit ;
61606: GO 61673
// result := 0 ;
61608: LD_ADDR_VAR 0 2
61612: PUSH
61613: LD_INT 0
61615: ST_TO_ADDR
// if GetTaskList ( sci ) then
61616: LD_VAR 0 1
61620: PPUSH
61621: CALL_OW 437
61625: IFFALSE 61673
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61627: LD_VAR 0 1
61631: PPUSH
61632: CALL_OW 437
61636: PUSH
61637: LD_INT 1
61639: ARRAY
61640: PUSH
61641: LD_INT 1
61643: ARRAY
61644: PUSH
61645: LD_STRING l
61647: EQUAL
61648: IFFALSE 61673
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61650: LD_ADDR_VAR 0 2
61654: PUSH
61655: LD_VAR 0 1
61659: PPUSH
61660: CALL_OW 437
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PUSH
61669: LD_INT 4
61671: ARRAY
61672: ST_TO_ADDR
// end ;
61673: LD_VAR 0 2
61677: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
// if not base_units then
61684: LD_VAR 0 1
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61780
// result := false ;
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: LD_INT 0
61700: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61701: LD_ADDR_VAR 0 5
61705: PUSH
61706: LD_VAR 0 1
61710: PPUSH
61711: LD_INT 21
61713: PUSH
61714: LD_INT 3
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PPUSH
61721: CALL_OW 72
61725: ST_TO_ADDR
// if not tmp then
61726: LD_VAR 0 5
61730: NOT
61731: IFFALSE 61735
// exit ;
61733: GO 61780
// for i in tmp do
61735: LD_ADDR_VAR 0 3
61739: PUSH
61740: LD_VAR 0 5
61744: PUSH
61745: FOR_IN
61746: IFFALSE 61778
// begin result := EnemyInRange ( i , 22 ) ;
61748: LD_ADDR_VAR 0 2
61752: PUSH
61753: LD_VAR 0 3
61757: PPUSH
61758: LD_INT 22
61760: PPUSH
61761: CALL 59367 0 2
61765: ST_TO_ADDR
// if result then
61766: LD_VAR 0 2
61770: IFFALSE 61776
// exit ;
61772: POP
61773: POP
61774: GO 61780
// end ;
61776: GO 61745
61778: POP
61779: POP
// end ;
61780: LD_VAR 0 2
61784: RET
// export function FilterByTag ( units , tag ) ; begin
61785: LD_INT 0
61787: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61788: LD_ADDR_VAR 0 3
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_INT 120
61800: PUSH
61801: LD_VAR 0 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PPUSH
61810: CALL_OW 72
61814: ST_TO_ADDR
// end ;
61815: LD_VAR 0 3
61819: RET
// export function IsDriver ( un ) ; begin
61820: LD_INT 0
61822: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61823: LD_ADDR_VAR 0 2
61827: PUSH
61828: LD_VAR 0 1
61832: PUSH
61833: LD_INT 55
61835: PUSH
61836: EMPTY
61837: LIST
61838: PPUSH
61839: CALL_OW 69
61843: IN
61844: ST_TO_ADDR
// end ;
61845: LD_VAR 0 2
61849: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61850: LD_INT 0
61852: PPUSH
61853: PPUSH
// list := [ ] ;
61854: LD_ADDR_VAR 0 5
61858: PUSH
61859: EMPTY
61860: ST_TO_ADDR
// case d of 0 :
61861: LD_VAR 0 3
61865: PUSH
61866: LD_INT 0
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61874
61872: GO 62007
61874: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61875: LD_ADDR_VAR 0 5
61879: PUSH
61880: LD_VAR 0 1
61884: PUSH
61885: LD_INT 4
61887: MINUS
61888: PUSH
61889: LD_VAR 0 2
61893: PUSH
61894: LD_INT 4
61896: MINUS
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: PUSH
61906: LD_VAR 0 1
61910: PUSH
61911: LD_INT 3
61913: MINUS
61914: PUSH
61915: LD_VAR 0 2
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: PUSH
61928: LD_VAR 0 1
61932: PUSH
61933: LD_INT 4
61935: PLUS
61936: PUSH
61937: LD_VAR 0 2
61941: PUSH
61942: LD_INT 4
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: PUSH
61950: LD_VAR 0 1
61954: PUSH
61955: LD_INT 3
61957: PLUS
61958: PUSH
61959: LD_VAR 0 2
61963: PUSH
61964: LD_INT 3
61966: PLUS
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: PUSH
61976: LD_VAR 0 1
61980: PUSH
61981: LD_VAR 0 2
61985: PUSH
61986: LD_INT 4
61988: PLUS
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// end ; 1 :
62005: GO 62705
62007: LD_INT 1
62009: DOUBLE
62010: EQUAL
62011: IFTRUE 62015
62013: GO 62148
62015: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62016: LD_ADDR_VAR 0 5
62020: PUSH
62021: LD_VAR 0 1
62025: PUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 4
62033: MINUS
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: PUSH
62043: LD_VAR 0 1
62047: PUSH
62048: LD_INT 3
62050: MINUS
62051: PUSH
62052: LD_VAR 0 2
62056: PUSH
62057: LD_INT 3
62059: MINUS
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: PUSH
62069: LD_VAR 0 1
62073: PUSH
62074: LD_INT 4
62076: MINUS
62077: PUSH
62078: LD_VAR 0 2
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: PUSH
62091: LD_VAR 0 1
62095: PUSH
62096: LD_VAR 0 2
62100: PUSH
62101: LD_INT 3
62103: PLUS
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: PUSH
62113: LD_VAR 0 1
62117: PUSH
62118: LD_INT 4
62120: PLUS
62121: PUSH
62122: LD_VAR 0 2
62126: PUSH
62127: LD_INT 4
62129: PLUS
62130: PUSH
62131: LD_INT 5
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: ST_TO_ADDR
// end ; 2 :
62146: GO 62705
62148: LD_INT 2
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62156
62154: GO 62285
62156: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62157: LD_ADDR_VAR 0 5
62161: PUSH
62162: LD_VAR 0 1
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: LD_INT 3
62174: MINUS
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: PUSH
62184: LD_VAR 0 1
62188: PUSH
62189: LD_INT 4
62191: PLUS
62192: PUSH
62193: LD_VAR 0 2
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: PUSH
62206: LD_VAR 0 1
62210: PUSH
62211: LD_VAR 0 2
62215: PUSH
62216: LD_INT 4
62218: PLUS
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: PUSH
62228: LD_VAR 0 1
62232: PUSH
62233: LD_INT 3
62235: MINUS
62236: PUSH
62237: LD_VAR 0 2
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: PUSH
62250: LD_VAR 0 1
62254: PUSH
62255: LD_INT 4
62257: MINUS
62258: PUSH
62259: LD_VAR 0 2
62263: PUSH
62264: LD_INT 4
62266: MINUS
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: ST_TO_ADDR
// end ; 3 :
62283: GO 62705
62285: LD_INT 3
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62293
62291: GO 62426
62293: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62294: LD_ADDR_VAR 0 5
62298: PUSH
62299: LD_VAR 0 1
62303: PUSH
62304: LD_INT 3
62306: PLUS
62307: PUSH
62308: LD_VAR 0 2
62312: PUSH
62313: LD_INT 4
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: PUSH
62321: LD_VAR 0 1
62325: PUSH
62326: LD_INT 4
62328: PLUS
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 4
62337: PLUS
62338: PUSH
62339: LD_INT 5
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: LD_VAR 0 1
62351: PUSH
62352: LD_INT 4
62354: MINUS
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_VAR 0 2
62378: PUSH
62379: LD_INT 4
62381: MINUS
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: PUSH
62391: LD_VAR 0 1
62395: PUSH
62396: LD_INT 3
62398: MINUS
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: LD_INT 3
62407: MINUS
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// end ; 4 :
62424: GO 62705
62426: LD_INT 4
62428: DOUBLE
62429: EQUAL
62430: IFTRUE 62434
62432: GO 62567
62434: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62435: LD_ADDR_VAR 0 5
62439: PUSH
62440: LD_VAR 0 1
62444: PUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 4
62452: PLUS
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: PUSH
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 3
62469: PLUS
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_INT 3
62478: PLUS
62479: PUSH
62480: LD_INT 5
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: LIST
62487: PUSH
62488: LD_VAR 0 1
62492: PUSH
62493: LD_INT 4
62495: PLUS
62496: PUSH
62497: LD_VAR 0 2
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: PUSH
62510: LD_VAR 0 1
62514: PUSH
62515: LD_VAR 0 2
62519: PUSH
62520: LD_INT 3
62522: MINUS
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: PUSH
62532: LD_VAR 0 1
62536: PUSH
62537: LD_INT 4
62539: MINUS
62540: PUSH
62541: LD_VAR 0 2
62545: PUSH
62546: LD_INT 4
62548: MINUS
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// end ; 5 :
62565: GO 62705
62567: LD_INT 5
62569: DOUBLE
62570: EQUAL
62571: IFTRUE 62575
62573: GO 62704
62575: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62576: LD_ADDR_VAR 0 5
62580: PUSH
62581: LD_VAR 0 1
62585: PUSH
62586: LD_INT 4
62588: MINUS
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: PUSH
62603: LD_VAR 0 1
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_INT 4
62615: MINUS
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: LD_VAR 0 1
62629: PUSH
62630: LD_INT 4
62632: PLUS
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_INT 4
62641: PLUS
62642: PUSH
62643: LD_INT 5
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: LD_VAR 0 1
62655: PUSH
62656: LD_INT 3
62658: PLUS
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: PUSH
62673: LD_VAR 0 1
62677: PUSH
62678: LD_VAR 0 2
62682: PUSH
62683: LD_INT 3
62685: PLUS
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: ST_TO_ADDR
// end ; end ;
62702: GO 62705
62704: POP
// result := list ;
62705: LD_ADDR_VAR 0 4
62709: PUSH
62710: LD_VAR 0 5
62714: ST_TO_ADDR
// end ;
62715: LD_VAR 0 4
62719: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62720: LD_INT 0
62722: PPUSH
62723: PPUSH
62724: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62725: LD_VAR 0 1
62729: NOT
62730: PUSH
62731: LD_VAR 0 2
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: LD_INT 4
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: IN
62754: NOT
62755: OR
62756: IFFALSE 62760
// exit ;
62758: GO 62843
// tmp := [ ] ;
62760: LD_ADDR_VAR 0 5
62764: PUSH
62765: EMPTY
62766: ST_TO_ADDR
// for i in units do
62767: LD_ADDR_VAR 0 4
62771: PUSH
62772: LD_VAR 0 1
62776: PUSH
62777: FOR_IN
62778: IFFALSE 62812
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62780: LD_ADDR_VAR 0 5
62784: PUSH
62785: LD_VAR 0 5
62789: PPUSH
62790: LD_VAR 0 4
62794: PPUSH
62795: LD_VAR 0 2
62799: PPUSH
62800: CALL_OW 259
62804: PPUSH
62805: CALL 64203 0 2
62809: ST_TO_ADDR
62810: GO 62777
62812: POP
62813: POP
// if not tmp then
62814: LD_VAR 0 5
62818: NOT
62819: IFFALSE 62823
// exit ;
62821: GO 62843
// result := SortListByListDesc ( units , tmp ) ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: LD_VAR 0 5
62837: PPUSH
62838: CALL_OW 77
62842: ST_TO_ADDR
// end ;
62843: LD_VAR 0 3
62847: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
// result := false ;
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_INT 0
62860: ST_TO_ADDR
// if not building then
62861: LD_VAR 0 2
62865: NOT
62866: IFFALSE 62870
// exit ;
62868: GO 63008
// x := GetX ( building ) ;
62870: LD_ADDR_VAR 0 4
62874: PUSH
62875: LD_VAR 0 2
62879: PPUSH
62880: CALL_OW 250
62884: ST_TO_ADDR
// y := GetY ( building ) ;
62885: LD_ADDR_VAR 0 5
62889: PUSH
62890: LD_VAR 0 2
62894: PPUSH
62895: CALL_OW 251
62899: ST_TO_ADDR
// if not x or not y then
62900: LD_VAR 0 4
62904: NOT
62905: PUSH
62906: LD_VAR 0 5
62910: NOT
62911: OR
62912: IFFALSE 62916
// exit ;
62914: GO 63008
// if GetTaskList ( unit ) then
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL_OW 437
62925: IFFALSE 63008
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62927: LD_STRING e
62929: PUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: CALL_OW 437
62939: PUSH
62940: LD_INT 1
62942: ARRAY
62943: PUSH
62944: LD_INT 1
62946: ARRAY
62947: EQUAL
62948: PUSH
62949: LD_VAR 0 4
62953: PUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: CALL_OW 437
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: PUSH
62968: LD_INT 2
62970: ARRAY
62971: EQUAL
62972: AND
62973: PUSH
62974: LD_VAR 0 5
62978: PUSH
62979: LD_VAR 0 1
62983: PPUSH
62984: CALL_OW 437
62988: PUSH
62989: LD_INT 1
62991: ARRAY
62992: PUSH
62993: LD_INT 3
62995: ARRAY
62996: EQUAL
62997: AND
62998: IFFALSE 63008
// result := true end ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_INT 1
63007: ST_TO_ADDR
// end ;
63008: LD_VAR 0 3
63012: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63013: LD_INT 0
63015: PPUSH
// result := false ;
63016: LD_ADDR_VAR 0 4
63020: PUSH
63021: LD_INT 0
63023: ST_TO_ADDR
// if GetTaskList ( unit ) then
63024: LD_VAR 0 1
63028: PPUSH
63029: CALL_OW 437
63033: IFFALSE 63116
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63035: LD_STRING M
63037: PUSH
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 437
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_INT 1
63054: ARRAY
63055: EQUAL
63056: PUSH
63057: LD_VAR 0 2
63061: PUSH
63062: LD_VAR 0 1
63066: PPUSH
63067: CALL_OW 437
63071: PUSH
63072: LD_INT 1
63074: ARRAY
63075: PUSH
63076: LD_INT 2
63078: ARRAY
63079: EQUAL
63080: AND
63081: PUSH
63082: LD_VAR 0 3
63086: PUSH
63087: LD_VAR 0 1
63091: PPUSH
63092: CALL_OW 437
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PUSH
63101: LD_INT 3
63103: ARRAY
63104: EQUAL
63105: AND
63106: IFFALSE 63116
// result := true ;
63108: LD_ADDR_VAR 0 4
63112: PUSH
63113: LD_INT 1
63115: ST_TO_ADDR
// end ; end ;
63116: LD_VAR 0 4
63120: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63121: LD_INT 0
63123: PPUSH
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not unit or not area then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 2
63137: NOT
63138: OR
63139: IFFALSE 63143
// exit ;
63141: GO 63306
// tmp := AreaToList ( area , i ) ;
63143: LD_ADDR_VAR 0 6
63147: PUSH
63148: LD_VAR 0 2
63152: PPUSH
63153: LD_VAR 0 5
63157: PPUSH
63158: CALL_OW 517
63162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63163: LD_ADDR_VAR 0 5
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_VAR 0 6
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PUSH
63182: FOR_TO
63183: IFFALSE 63304
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63185: LD_ADDR_VAR 0 7
63189: PUSH
63190: LD_VAR 0 6
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PUSH
63199: LD_VAR 0 5
63203: ARRAY
63204: PUSH
63205: LD_VAR 0 6
63209: PUSH
63210: LD_INT 2
63212: ARRAY
63213: PUSH
63214: LD_VAR 0 5
63218: ARRAY
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
63224: LD_INT 92
63226: PUSH
63227: LD_VAR 0 7
63231: PUSH
63232: LD_INT 1
63234: ARRAY
63235: PUSH
63236: LD_VAR 0 7
63240: PUSH
63241: LD_INT 2
63243: ARRAY
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: PPUSH
63254: CALL_OW 69
63258: PUSH
63259: LD_INT 0
63261: EQUAL
63262: IFFALSE 63302
// begin PlaceUnitArea ( unit , area , mode ) ;
63264: LD_VAR 0 1
63268: PPUSH
63269: LD_VAR 0 2
63273: PPUSH
63274: LD_VAR 0 3
63278: PPUSH
63279: CALL_OW 49
// result := IsPlaced ( unit ) ;
63283: LD_ADDR_VAR 0 4
63287: PUSH
63288: LD_VAR 0 1
63292: PPUSH
63293: CALL_OW 305
63297: ST_TO_ADDR
// exit ;
63298: POP
63299: POP
63300: GO 63306
// end ; end ;
63302: GO 63182
63304: POP
63305: POP
// end ;
63306: LD_VAR 0 4
63310: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63311: LD_INT 0
63313: PPUSH
63314: PPUSH
63315: PPUSH
// if not side or side > 8 then
63316: LD_VAR 0 1
63320: NOT
63321: PUSH
63322: LD_VAR 0 1
63326: PUSH
63327: LD_INT 8
63329: GREATER
63330: OR
63331: IFFALSE 63335
// exit ;
63333: GO 63522
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63335: LD_ADDR_VAR 0 4
63339: PUSH
63340: LD_INT 22
63342: PUSH
63343: LD_VAR 0 1
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 21
63354: PUSH
63355: LD_INT 3
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PPUSH
63366: CALL_OW 69
63370: ST_TO_ADDR
// if not tmp then
63371: LD_VAR 0 4
63375: NOT
63376: IFFALSE 63380
// exit ;
63378: GO 63522
// enable_addtolog := true ;
63380: LD_ADDR_OWVAR 81
63384: PUSH
63385: LD_INT 1
63387: ST_TO_ADDR
// AddToLog ( [ ) ;
63388: LD_STRING [
63390: PPUSH
63391: CALL_OW 561
// for i in tmp do
63395: LD_ADDR_VAR 0 3
63399: PUSH
63400: LD_VAR 0 4
63404: PUSH
63405: FOR_IN
63406: IFFALSE 63513
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63408: LD_STRING [
63410: PUSH
63411: LD_VAR 0 3
63415: PPUSH
63416: CALL_OW 266
63420: STR
63421: PUSH
63422: LD_STRING , 
63424: STR
63425: PUSH
63426: LD_VAR 0 3
63430: PPUSH
63431: CALL_OW 250
63435: STR
63436: PUSH
63437: LD_STRING , 
63439: STR
63440: PUSH
63441: LD_VAR 0 3
63445: PPUSH
63446: CALL_OW 251
63450: STR
63451: PUSH
63452: LD_STRING , 
63454: STR
63455: PUSH
63456: LD_VAR 0 3
63460: PPUSH
63461: CALL_OW 254
63465: STR
63466: PUSH
63467: LD_STRING , 
63469: STR
63470: PUSH
63471: LD_VAR 0 3
63475: PPUSH
63476: LD_INT 1
63478: PPUSH
63479: CALL_OW 268
63483: STR
63484: PUSH
63485: LD_STRING , 
63487: STR
63488: PUSH
63489: LD_VAR 0 3
63493: PPUSH
63494: LD_INT 2
63496: PPUSH
63497: CALL_OW 268
63501: STR
63502: PUSH
63503: LD_STRING ],
63505: STR
63506: PPUSH
63507: CALL_OW 561
// end ;
63511: GO 63405
63513: POP
63514: POP
// AddToLog ( ]; ) ;
63515: LD_STRING ];
63517: PPUSH
63518: CALL_OW 561
// end ;
63522: LD_VAR 0 2
63526: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63527: LD_INT 0
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
// if not area or not rate or not max then
63534: LD_VAR 0 1
63538: NOT
63539: PUSH
63540: LD_VAR 0 2
63544: NOT
63545: OR
63546: PUSH
63547: LD_VAR 0 4
63551: NOT
63552: OR
63553: IFFALSE 63557
// exit ;
63555: GO 63746
// while 1 do
63557: LD_INT 1
63559: IFFALSE 63746
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63561: LD_ADDR_VAR 0 9
63565: PUSH
63566: LD_VAR 0 1
63570: PPUSH
63571: LD_INT 1
63573: PPUSH
63574: CALL_OW 287
63578: PUSH
63579: LD_INT 10
63581: MUL
63582: ST_TO_ADDR
// r := rate / 10 ;
63583: LD_ADDR_VAR 0 7
63587: PUSH
63588: LD_VAR 0 2
63592: PUSH
63593: LD_INT 10
63595: DIVREAL
63596: ST_TO_ADDR
// time := 1 1$00 ;
63597: LD_ADDR_VAR 0 8
63601: PUSH
63602: LD_INT 2100
63604: ST_TO_ADDR
// if amount < min then
63605: LD_VAR 0 9
63609: PUSH
63610: LD_VAR 0 3
63614: LESS
63615: IFFALSE 63633
// r := r * 2 else
63617: LD_ADDR_VAR 0 7
63621: PUSH
63622: LD_VAR 0 7
63626: PUSH
63627: LD_INT 2
63629: MUL
63630: ST_TO_ADDR
63631: GO 63659
// if amount > max then
63633: LD_VAR 0 9
63637: PUSH
63638: LD_VAR 0 4
63642: GREATER
63643: IFFALSE 63659
// r := r / 2 ;
63645: LD_ADDR_VAR 0 7
63649: PUSH
63650: LD_VAR 0 7
63654: PUSH
63655: LD_INT 2
63657: DIVREAL
63658: ST_TO_ADDR
// time := time / r ;
63659: LD_ADDR_VAR 0 8
63663: PUSH
63664: LD_VAR 0 8
63668: PUSH
63669: LD_VAR 0 7
63673: DIVREAL
63674: ST_TO_ADDR
// if time < 0 then
63675: LD_VAR 0 8
63679: PUSH
63680: LD_INT 0
63682: LESS
63683: IFFALSE 63700
// time := time * - 1 ;
63685: LD_ADDR_VAR 0 8
63689: PUSH
63690: LD_VAR 0 8
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: MUL
63699: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63700: LD_VAR 0 8
63704: PUSH
63705: LD_INT 35
63707: PPUSH
63708: LD_INT 875
63710: PPUSH
63711: CALL_OW 12
63715: PLUS
63716: PPUSH
63717: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63721: LD_INT 1
63723: PPUSH
63724: LD_INT 5
63726: PPUSH
63727: CALL_OW 12
63731: PPUSH
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_INT 1
63739: PPUSH
63740: CALL_OW 55
// end ;
63744: GO 63557
// end ;
63746: LD_VAR 0 5
63750: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63751: LD_INT 0
63753: PPUSH
63754: PPUSH
63755: PPUSH
63756: PPUSH
63757: PPUSH
63758: PPUSH
63759: PPUSH
63760: PPUSH
// if not turrets or not factories then
63761: LD_VAR 0 1
63765: NOT
63766: PUSH
63767: LD_VAR 0 2
63771: NOT
63772: OR
63773: IFFALSE 63777
// exit ;
63775: GO 64084
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63777: LD_ADDR_VAR 0 10
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: LD_INT 6
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 4
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: LD_INT 5
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 24
63819: PUSH
63820: LD_INT 25
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 23
63829: PUSH
63830: LD_INT 27
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 42
63843: PUSH
63844: LD_INT 43
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 44
63853: PUSH
63854: LD_INT 46
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 45
63863: PUSH
63864: LD_INT 47
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// result := [ ] ;
63881: LD_ADDR_VAR 0 3
63885: PUSH
63886: EMPTY
63887: ST_TO_ADDR
// for i in turrets do
63888: LD_ADDR_VAR 0 4
63892: PUSH
63893: LD_VAR 0 1
63897: PUSH
63898: FOR_IN
63899: IFFALSE 64082
// begin nat := GetNation ( i ) ;
63901: LD_ADDR_VAR 0 7
63905: PUSH
63906: LD_VAR 0 4
63910: PPUSH
63911: CALL_OW 248
63915: ST_TO_ADDR
// weapon := 0 ;
63916: LD_ADDR_VAR 0 8
63920: PUSH
63921: LD_INT 0
63923: ST_TO_ADDR
// if not nat then
63924: LD_VAR 0 7
63928: NOT
63929: IFFALSE 63933
// continue ;
63931: GO 63898
// for j in list [ nat ] do
63933: LD_ADDR_VAR 0 5
63937: PUSH
63938: LD_VAR 0 10
63942: PUSH
63943: LD_VAR 0 7
63947: ARRAY
63948: PUSH
63949: FOR_IN
63950: IFFALSE 63991
// if GetBWeapon ( i ) = j [ 1 ] then
63952: LD_VAR 0 4
63956: PPUSH
63957: CALL_OW 269
63961: PUSH
63962: LD_VAR 0 5
63966: PUSH
63967: LD_INT 1
63969: ARRAY
63970: EQUAL
63971: IFFALSE 63989
// begin weapon := j [ 2 ] ;
63973: LD_ADDR_VAR 0 8
63977: PUSH
63978: LD_VAR 0 5
63982: PUSH
63983: LD_INT 2
63985: ARRAY
63986: ST_TO_ADDR
// break ;
63987: GO 63991
// end ;
63989: GO 63949
63991: POP
63992: POP
// if not weapon then
63993: LD_VAR 0 8
63997: NOT
63998: IFFALSE 64002
// continue ;
64000: GO 63898
// for k in factories do
64002: LD_ADDR_VAR 0 6
64006: PUSH
64007: LD_VAR 0 2
64011: PUSH
64012: FOR_IN
64013: IFFALSE 64078
// begin weapons := AvailableWeaponList ( k ) ;
64015: LD_ADDR_VAR 0 9
64019: PUSH
64020: LD_VAR 0 6
64024: PPUSH
64025: CALL_OW 478
64029: ST_TO_ADDR
// if not weapons then
64030: LD_VAR 0 9
64034: NOT
64035: IFFALSE 64039
// continue ;
64037: GO 64012
// if weapon in weapons then
64039: LD_VAR 0 8
64043: PUSH
64044: LD_VAR 0 9
64048: IN
64049: IFFALSE 64076
// begin result := [ i , weapon ] ;
64051: LD_ADDR_VAR 0 3
64055: PUSH
64056: LD_VAR 0 4
64060: PUSH
64061: LD_VAR 0 8
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// exit ;
64070: POP
64071: POP
64072: POP
64073: POP
64074: GO 64084
// end ; end ;
64076: GO 64012
64078: POP
64079: POP
// end ;
64080: GO 63898
64082: POP
64083: POP
// end ;
64084: LD_VAR 0 3
64088: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64089: LD_INT 0
64091: PPUSH
// if not side or side > 8 then
64092: LD_VAR 0 3
64096: NOT
64097: PUSH
64098: LD_VAR 0 3
64102: PUSH
64103: LD_INT 8
64105: GREATER
64106: OR
64107: IFFALSE 64111
// exit ;
64109: GO 64170
// if not range then
64111: LD_VAR 0 4
64115: NOT
64116: IFFALSE 64127
// range := - 12 ;
64118: LD_ADDR_VAR 0 4
64122: PUSH
64123: LD_INT 12
64125: NEG
64126: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64127: LD_VAR 0 1
64131: PPUSH
64132: LD_VAR 0 2
64136: PPUSH
64137: LD_VAR 0 3
64141: PPUSH
64142: LD_VAR 0 4
64146: PPUSH
64147: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64151: LD_VAR 0 1
64155: PPUSH
64156: LD_VAR 0 2
64160: PPUSH
64161: LD_VAR 0 3
64165: PPUSH
64166: CALL_OW 331
// end ;
64170: LD_VAR 0 5
64174: RET
// export function Video ( mode ) ; begin
64175: LD_INT 0
64177: PPUSH
// ingame_video = mode ;
64178: LD_ADDR_OWVAR 52
64182: PUSH
64183: LD_VAR 0 1
64187: ST_TO_ADDR
// interface_hidden = mode ;
64188: LD_ADDR_OWVAR 54
64192: PUSH
64193: LD_VAR 0 1
64197: ST_TO_ADDR
// end ;
64198: LD_VAR 0 2
64202: RET
// export function Join ( array , element ) ; begin
64203: LD_INT 0
64205: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64206: LD_ADDR_VAR 0 3
64210: PUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: LD_VAR 0 1
64220: PUSH
64221: LD_INT 1
64223: PLUS
64224: PPUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: CALL_OW 1
64234: ST_TO_ADDR
// end ;
64235: LD_VAR 0 3
64239: RET
// export function JoinUnion ( array , element ) ; begin
64240: LD_INT 0
64242: PPUSH
// result := array union element ;
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_VAR 0 1
64252: PUSH
64253: LD_VAR 0 2
64257: UNION
64258: ST_TO_ADDR
// end ;
64259: LD_VAR 0 3
64263: RET
// export function GetBehemoths ( side ) ; begin
64264: LD_INT 0
64266: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64267: LD_ADDR_VAR 0 2
64271: PUSH
64272: LD_INT 22
64274: PUSH
64275: LD_VAR 0 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 31
64286: PUSH
64287: LD_INT 25
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PPUSH
64298: CALL_OW 69
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 2
64307: RET
// export function Shuffle ( array ) ; var i , index ; begin
64308: LD_INT 0
64310: PPUSH
64311: PPUSH
64312: PPUSH
// result := [ ] ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: EMPTY
64319: ST_TO_ADDR
// if not array then
64320: LD_VAR 0 1
64324: NOT
64325: IFFALSE 64329
// exit ;
64327: GO 64428
// Randomize ;
64329: CALL_OW 10
// for i = array downto 1 do
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: DOUBLE
64339: LD_VAR 0 1
64343: INC
64344: ST_TO_ADDR
64345: LD_INT 1
64347: PUSH
64348: FOR_DOWNTO
64349: IFFALSE 64426
// begin index := rand ( 1 , array ) ;
64351: LD_ADDR_VAR 0 4
64355: PUSH
64356: LD_INT 1
64358: PPUSH
64359: LD_VAR 0 1
64363: PPUSH
64364: CALL_OW 12
64368: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64369: LD_ADDR_VAR 0 2
64373: PUSH
64374: LD_VAR 0 2
64378: PPUSH
64379: LD_VAR 0 2
64383: PUSH
64384: LD_INT 1
64386: PLUS
64387: PPUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_VAR 0 4
64397: ARRAY
64398: PPUSH
64399: CALL_OW 2
64403: ST_TO_ADDR
// array := Delete ( array , index ) ;
64404: LD_ADDR_VAR 0 1
64408: PUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: LD_VAR 0 4
64418: PPUSH
64419: CALL_OW 3
64423: ST_TO_ADDR
// end ;
64424: GO 64348
64426: POP
64427: POP
// end ;
64428: LD_VAR 0 2
64432: RET
// export function GetBaseMaterials ( base ) ; begin
64433: LD_INT 0
64435: PPUSH
// result := [ 0 , 0 , 0 ] ;
64436: LD_ADDR_VAR 0 2
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// if not base then
64455: LD_VAR 0 1
64459: NOT
64460: IFFALSE 64464
// exit ;
64462: GO 64513
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64464: LD_ADDR_VAR 0 2
64468: PUSH
64469: LD_VAR 0 1
64473: PPUSH
64474: LD_INT 1
64476: PPUSH
64477: CALL_OW 275
64481: PUSH
64482: LD_VAR 0 1
64486: PPUSH
64487: LD_INT 2
64489: PPUSH
64490: CALL_OW 275
64494: PUSH
64495: LD_VAR 0 1
64499: PPUSH
64500: LD_INT 3
64502: PPUSH
64503: CALL_OW 275
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: ST_TO_ADDR
// end ;
64513: LD_VAR 0 2
64517: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64518: LD_INT 0
64520: PPUSH
64521: PPUSH
// result := array ;
64522: LD_ADDR_VAR 0 3
64526: PUSH
64527: LD_VAR 0 1
64531: ST_TO_ADDR
// if size >= result then
64532: LD_VAR 0 2
64536: PUSH
64537: LD_VAR 0 3
64541: GREATEREQUAL
64542: IFFALSE 64546
// exit ;
64544: GO 64596
// if size then
64546: LD_VAR 0 2
64550: IFFALSE 64596
// for i := array downto size do
64552: LD_ADDR_VAR 0 4
64556: PUSH
64557: DOUBLE
64558: LD_VAR 0 1
64562: INC
64563: ST_TO_ADDR
64564: LD_VAR 0 2
64568: PUSH
64569: FOR_DOWNTO
64570: IFFALSE 64594
// result := Delete ( result , result ) ;
64572: LD_ADDR_VAR 0 3
64576: PUSH
64577: LD_VAR 0 3
64581: PPUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: CALL_OW 3
64591: ST_TO_ADDR
64592: GO 64569
64594: POP
64595: POP
// end ;
64596: LD_VAR 0 3
64600: RET
// export function ComExit ( unit ) ; var tmp ; begin
64601: LD_INT 0
64603: PPUSH
64604: PPUSH
// if not IsInUnit ( unit ) then
64605: LD_VAR 0 1
64609: PPUSH
64610: CALL_OW 310
64614: NOT
64615: IFFALSE 64619
// exit ;
64617: GO 64679
// tmp := IsInUnit ( unit ) ;
64619: LD_ADDR_VAR 0 3
64623: PUSH
64624: LD_VAR 0 1
64628: PPUSH
64629: CALL_OW 310
64633: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64634: LD_VAR 0 3
64638: PPUSH
64639: CALL_OW 247
64643: PUSH
64644: LD_INT 2
64646: EQUAL
64647: IFFALSE 64660
// ComExitVehicle ( unit ) else
64649: LD_VAR 0 1
64653: PPUSH
64654: CALL_OW 121
64658: GO 64669
// ComExitBuilding ( unit ) ;
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 122
// result := tmp ;
64669: LD_ADDR_VAR 0 2
64673: PUSH
64674: LD_VAR 0 3
64678: ST_TO_ADDR
// end ;
64679: LD_VAR 0 2
64683: RET
// export function ComExitAll ( units ) ; var i ; begin
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
// if not units then
64688: LD_VAR 0 1
64692: NOT
64693: IFFALSE 64697
// exit ;
64695: GO 64723
// for i in units do
64697: LD_ADDR_VAR 0 3
64701: PUSH
64702: LD_VAR 0 1
64706: PUSH
64707: FOR_IN
64708: IFFALSE 64721
// ComExit ( i ) ;
64710: LD_VAR 0 3
64714: PPUSH
64715: CALL 64601 0 1
64719: GO 64707
64721: POP
64722: POP
// end ;
64723: LD_VAR 0 2
64727: RET
// export function ResetHc ; begin
64728: LD_INT 0
64730: PPUSH
// InitHc ;
64731: CALL_OW 19
// hc_importance := 0 ;
64735: LD_ADDR_OWVAR 32
64739: PUSH
64740: LD_INT 0
64742: ST_TO_ADDR
// end ;
64743: LD_VAR 0 1
64747: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64748: LD_INT 0
64750: PPUSH
64751: PPUSH
64752: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64753: LD_ADDR_VAR 0 6
64757: PUSH
64758: LD_VAR 0 1
64762: PUSH
64763: LD_VAR 0 3
64767: PLUS
64768: PUSH
64769: LD_INT 2
64771: DIV
64772: ST_TO_ADDR
// if _x < 0 then
64773: LD_VAR 0 6
64777: PUSH
64778: LD_INT 0
64780: LESS
64781: IFFALSE 64798
// _x := _x * - 1 ;
64783: LD_ADDR_VAR 0 6
64787: PUSH
64788: LD_VAR 0 6
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: MUL
64797: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64798: LD_ADDR_VAR 0 7
64802: PUSH
64803: LD_VAR 0 2
64807: PUSH
64808: LD_VAR 0 4
64812: PLUS
64813: PUSH
64814: LD_INT 2
64816: DIV
64817: ST_TO_ADDR
// if _y < 0 then
64818: LD_VAR 0 7
64822: PUSH
64823: LD_INT 0
64825: LESS
64826: IFFALSE 64843
// _y := _y * - 1 ;
64828: LD_ADDR_VAR 0 7
64832: PUSH
64833: LD_VAR 0 7
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: MUL
64842: ST_TO_ADDR
// result := [ _x , _y ] ;
64843: LD_ADDR_VAR 0 5
64847: PUSH
64848: LD_VAR 0 6
64852: PUSH
64853: LD_VAR 0 7
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// end ;
64862: LD_VAR 0 5
64866: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64867: LD_INT 0
64869: PPUSH
64870: PPUSH
64871: PPUSH
64872: PPUSH
// task := GetTaskList ( unit ) ;
64873: LD_ADDR_VAR 0 7
64877: PUSH
64878: LD_VAR 0 1
64882: PPUSH
64883: CALL_OW 437
64887: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64888: LD_VAR 0 7
64892: NOT
64893: PUSH
64894: LD_VAR 0 1
64898: PPUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: CALL_OW 308
64908: NOT
64909: AND
64910: IFFALSE 64914
// exit ;
64912: GO 65032
// if IsInArea ( unit , area ) then
64914: LD_VAR 0 1
64918: PPUSH
64919: LD_VAR 0 2
64923: PPUSH
64924: CALL_OW 308
64928: IFFALSE 64946
// begin ComMoveToArea ( unit , goAway ) ;
64930: LD_VAR 0 1
64934: PPUSH
64935: LD_VAR 0 3
64939: PPUSH
64940: CALL_OW 113
// exit ;
64944: GO 65032
// end ; if task [ 1 ] [ 1 ] <> M then
64946: LD_VAR 0 7
64950: PUSH
64951: LD_INT 1
64953: ARRAY
64954: PUSH
64955: LD_INT 1
64957: ARRAY
64958: PUSH
64959: LD_STRING M
64961: NONEQUAL
64962: IFFALSE 64966
// exit ;
64964: GO 65032
// x := task [ 1 ] [ 2 ] ;
64966: LD_ADDR_VAR 0 5
64970: PUSH
64971: LD_VAR 0 7
64975: PUSH
64976: LD_INT 1
64978: ARRAY
64979: PUSH
64980: LD_INT 2
64982: ARRAY
64983: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64984: LD_ADDR_VAR 0 6
64988: PUSH
64989: LD_VAR 0 7
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PUSH
64998: LD_INT 3
65000: ARRAY
65001: ST_TO_ADDR
// if InArea ( x , y , area ) then
65002: LD_VAR 0 5
65006: PPUSH
65007: LD_VAR 0 6
65011: PPUSH
65012: LD_VAR 0 2
65016: PPUSH
65017: CALL_OW 309
65021: IFFALSE 65032
// ComStop ( unit ) ;
65023: LD_VAR 0 1
65027: PPUSH
65028: CALL_OW 141
// end ;
65032: LD_VAR 0 4
65036: RET
// export function Abs ( value ) ; begin
65037: LD_INT 0
65039: PPUSH
// result := value ;
65040: LD_ADDR_VAR 0 2
65044: PUSH
65045: LD_VAR 0 1
65049: ST_TO_ADDR
// if value < 0 then
65050: LD_VAR 0 1
65054: PUSH
65055: LD_INT 0
65057: LESS
65058: IFFALSE 65075
// result := value * - 1 ;
65060: LD_ADDR_VAR 0 2
65064: PUSH
65065: LD_VAR 0 1
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: MUL
65074: ST_TO_ADDR
// end ;
65075: LD_VAR 0 2
65079: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65080: LD_INT 0
65082: PPUSH
65083: PPUSH
65084: PPUSH
65085: PPUSH
65086: PPUSH
65087: PPUSH
65088: PPUSH
65089: PPUSH
// if not unit or not building then
65090: LD_VAR 0 1
65094: NOT
65095: PUSH
65096: LD_VAR 0 2
65100: NOT
65101: OR
65102: IFFALSE 65106
// exit ;
65104: GO 65332
// x := GetX ( building ) ;
65106: LD_ADDR_VAR 0 4
65110: PUSH
65111: LD_VAR 0 2
65115: PPUSH
65116: CALL_OW 250
65120: ST_TO_ADDR
// y := GetY ( building ) ;
65121: LD_ADDR_VAR 0 6
65125: PUSH
65126: LD_VAR 0 2
65130: PPUSH
65131: CALL_OW 251
65135: ST_TO_ADDR
// d := GetDir ( building ) ;
65136: LD_ADDR_VAR 0 8
65140: PUSH
65141: LD_VAR 0 2
65145: PPUSH
65146: CALL_OW 254
65150: ST_TO_ADDR
// r := 4 ;
65151: LD_ADDR_VAR 0 9
65155: PUSH
65156: LD_INT 4
65158: ST_TO_ADDR
// for i := 1 to 5 do
65159: LD_ADDR_VAR 0 10
65163: PUSH
65164: DOUBLE
65165: LD_INT 1
65167: DEC
65168: ST_TO_ADDR
65169: LD_INT 5
65171: PUSH
65172: FOR_TO
65173: IFFALSE 65330
// begin _x := ShiftX ( x , d , r + i ) ;
65175: LD_ADDR_VAR 0 5
65179: PUSH
65180: LD_VAR 0 4
65184: PPUSH
65185: LD_VAR 0 8
65189: PPUSH
65190: LD_VAR 0 9
65194: PUSH
65195: LD_VAR 0 10
65199: PLUS
65200: PPUSH
65201: CALL_OW 272
65205: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65206: LD_ADDR_VAR 0 7
65210: PUSH
65211: LD_VAR 0 6
65215: PPUSH
65216: LD_VAR 0 8
65220: PPUSH
65221: LD_VAR 0 9
65225: PUSH
65226: LD_VAR 0 10
65230: PLUS
65231: PPUSH
65232: CALL_OW 273
65236: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65237: LD_VAR 0 5
65241: PPUSH
65242: LD_VAR 0 7
65246: PPUSH
65247: CALL_OW 488
65251: PUSH
65252: LD_VAR 0 5
65256: PPUSH
65257: LD_VAR 0 7
65261: PPUSH
65262: CALL_OW 428
65266: PPUSH
65267: CALL_OW 247
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: IN
65282: NOT
65283: AND
65284: IFFALSE 65328
// begin ComMoveXY ( unit , _x , _y ) ;
65286: LD_VAR 0 1
65290: PPUSH
65291: LD_VAR 0 5
65295: PPUSH
65296: LD_VAR 0 7
65300: PPUSH
65301: CALL_OW 111
// result := [ _x , _y ] ;
65305: LD_ADDR_VAR 0 3
65309: PUSH
65310: LD_VAR 0 5
65314: PUSH
65315: LD_VAR 0 7
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// exit ;
65324: POP
65325: POP
65326: GO 65332
// end ; end ;
65328: GO 65172
65330: POP
65331: POP
// end ;
65332: LD_VAR 0 3
65336: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
65341: PPUSH
// result := 0 ;
65342: LD_ADDR_VAR 0 3
65346: PUSH
65347: LD_INT 0
65349: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65350: LD_VAR 0 1
65354: PUSH
65355: LD_INT 0
65357: LESS
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: LD_INT 8
65366: GREATER
65367: OR
65368: PUSH
65369: LD_VAR 0 2
65373: PUSH
65374: LD_INT 0
65376: LESS
65377: OR
65378: PUSH
65379: LD_VAR 0 2
65383: PUSH
65384: LD_INT 8
65386: GREATER
65387: OR
65388: IFFALSE 65392
// exit ;
65390: GO 65467
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65392: LD_ADDR_VAR 0 4
65396: PUSH
65397: LD_INT 22
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PPUSH
65409: CALL_OW 69
65413: PUSH
65414: FOR_IN
65415: IFFALSE 65465
// begin un := UnitShoot ( i ) ;
65417: LD_ADDR_VAR 0 5
65421: PUSH
65422: LD_VAR 0 4
65426: PPUSH
65427: CALL_OW 504
65431: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65432: LD_VAR 0 5
65436: PPUSH
65437: CALL_OW 255
65441: PUSH
65442: LD_VAR 0 1
65446: EQUAL
65447: IFFALSE 65463
// begin result := un ;
65449: LD_ADDR_VAR 0 3
65453: PUSH
65454: LD_VAR 0 5
65458: ST_TO_ADDR
// exit ;
65459: POP
65460: POP
65461: GO 65467
// end ; end ;
65463: GO 65414
65465: POP
65466: POP
// end ;
65467: LD_VAR 0 3
65471: RET
// export function GetCargoBay ( units ) ; begin
65472: LD_INT 0
65474: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65475: LD_ADDR_VAR 0 2
65479: PUSH
65480: LD_VAR 0 1
65484: PPUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 34
65490: PUSH
65491: LD_INT 12
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 34
65500: PUSH
65501: LD_INT 51
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 34
65510: PUSH
65511: LD_INT 32
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 34
65520: PUSH
65521: LD_INT 89
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: PPUSH
65535: CALL_OW 72
65539: ST_TO_ADDR
// end ;
65540: LD_VAR 0 2
65544: RET
// export function Negate ( value ) ; begin
65545: LD_INT 0
65547: PPUSH
// result := not value ;
65548: LD_ADDR_VAR 0 2
65552: PUSH
65553: LD_VAR 0 1
65557: NOT
65558: ST_TO_ADDR
// end ;
65559: LD_VAR 0 2
65563: RET
// export function Inc ( value ) ; begin
65564: LD_INT 0
65566: PPUSH
// result := value + 1 ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: LD_INT 1
65579: PLUS
65580: ST_TO_ADDR
// end ;
65581: LD_VAR 0 2
65585: RET
// export function Dec ( value ) ; begin
65586: LD_INT 0
65588: PPUSH
// result := value - 1 ;
65589: LD_ADDR_VAR 0 2
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: LD_INT 1
65601: MINUS
65602: ST_TO_ADDR
// end ;
65603: LD_VAR 0 2
65607: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65608: LD_INT 0
65610: PPUSH
65611: PPUSH
65612: PPUSH
65613: PPUSH
65614: PPUSH
65615: PPUSH
65616: PPUSH
65617: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 2
65627: PPUSH
65628: CALL_OW 488
65632: NOT
65633: PUSH
65634: LD_VAR 0 3
65638: PPUSH
65639: LD_VAR 0 4
65643: PPUSH
65644: CALL_OW 488
65648: NOT
65649: OR
65650: IFFALSE 65663
// begin result := - 1 ;
65652: LD_ADDR_VAR 0 5
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: ST_TO_ADDR
// exit ;
65661: GO 65898
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65663: LD_ADDR_VAR 0 12
65667: PUSH
65668: LD_VAR 0 1
65672: PPUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: LD_VAR 0 3
65682: PPUSH
65683: LD_VAR 0 4
65687: PPUSH
65688: CALL 64748 0 4
65692: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65693: LD_ADDR_VAR 0 11
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: LD_VAR 0 2
65707: PPUSH
65708: LD_VAR 0 12
65712: PUSH
65713: LD_INT 1
65715: ARRAY
65716: PPUSH
65717: LD_VAR 0 12
65721: PUSH
65722: LD_INT 2
65724: ARRAY
65725: PPUSH
65726: CALL_OW 298
65730: ST_TO_ADDR
// distance := 9999 ;
65731: LD_ADDR_VAR 0 10
65735: PUSH
65736: LD_INT 9999
65738: ST_TO_ADDR
// for i := 0 to 5 do
65739: LD_ADDR_VAR 0 6
65743: PUSH
65744: DOUBLE
65745: LD_INT 0
65747: DEC
65748: ST_TO_ADDR
65749: LD_INT 5
65751: PUSH
65752: FOR_TO
65753: IFFALSE 65896
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65755: LD_ADDR_VAR 0 7
65759: PUSH
65760: LD_VAR 0 1
65764: PPUSH
65765: LD_VAR 0 6
65769: PPUSH
65770: LD_VAR 0 11
65774: PPUSH
65775: CALL_OW 272
65779: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65780: LD_ADDR_VAR 0 8
65784: PUSH
65785: LD_VAR 0 2
65789: PPUSH
65790: LD_VAR 0 6
65794: PPUSH
65795: LD_VAR 0 11
65799: PPUSH
65800: CALL_OW 273
65804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65805: LD_VAR 0 7
65809: PPUSH
65810: LD_VAR 0 8
65814: PPUSH
65815: CALL_OW 488
65819: NOT
65820: IFFALSE 65824
// continue ;
65822: GO 65752
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65824: LD_ADDR_VAR 0 9
65828: PUSH
65829: LD_VAR 0 12
65833: PUSH
65834: LD_INT 1
65836: ARRAY
65837: PPUSH
65838: LD_VAR 0 12
65842: PUSH
65843: LD_INT 2
65845: ARRAY
65846: PPUSH
65847: LD_VAR 0 7
65851: PPUSH
65852: LD_VAR 0 8
65856: PPUSH
65857: CALL_OW 298
65861: ST_TO_ADDR
// if tmp < distance then
65862: LD_VAR 0 9
65866: PUSH
65867: LD_VAR 0 10
65871: LESS
65872: IFFALSE 65894
// begin result := i ;
65874: LD_ADDR_VAR 0 5
65878: PUSH
65879: LD_VAR 0 6
65883: ST_TO_ADDR
// distance := tmp ;
65884: LD_ADDR_VAR 0 10
65888: PUSH
65889: LD_VAR 0 9
65893: ST_TO_ADDR
// end ; end ;
65894: GO 65752
65896: POP
65897: POP
// end ;
65898: LD_VAR 0 5
65902: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65903: LD_INT 0
65905: PPUSH
65906: PPUSH
// if not driver or not IsInUnit ( driver ) then
65907: LD_VAR 0 1
65911: NOT
65912: PUSH
65913: LD_VAR 0 1
65917: PPUSH
65918: CALL_OW 310
65922: NOT
65923: OR
65924: IFFALSE 65928
// exit ;
65926: GO 66018
// vehicle := IsInUnit ( driver ) ;
65928: LD_ADDR_VAR 0 3
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 310
65942: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65943: LD_VAR 0 1
65947: PPUSH
65948: LD_STRING \
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_STRING E
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_VAR 0 3
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PPUSH
66014: CALL_OW 446
// end ;
66018: LD_VAR 0 2
66022: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
// if not driver or not IsInUnit ( driver ) then
66027: LD_VAR 0 1
66031: NOT
66032: PUSH
66033: LD_VAR 0 1
66037: PPUSH
66038: CALL_OW 310
66042: NOT
66043: OR
66044: IFFALSE 66048
// exit ;
66046: GO 66138
// vehicle := IsInUnit ( driver ) ;
66048: LD_ADDR_VAR 0 3
66052: PUSH
66053: LD_VAR 0 1
66057: PPUSH
66058: CALL_OW 310
66062: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66063: LD_VAR 0 1
66067: PPUSH
66068: LD_STRING \
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: PUSH
66098: LD_STRING E
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_VAR 0 3
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PPUSH
66134: CALL_OW 447
// end ;
66138: LD_VAR 0 2
66142: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66143: LD_INT 0
66145: PPUSH
66146: PPUSH
66147: PPUSH
// tmp := [ ] ;
66148: LD_ADDR_VAR 0 5
66152: PUSH
66153: EMPTY
66154: ST_TO_ADDR
// for i in units do
66155: LD_ADDR_VAR 0 4
66159: PUSH
66160: LD_VAR 0 1
66164: PUSH
66165: FOR_IN
66166: IFFALSE 66204
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66168: LD_ADDR_VAR 0 5
66172: PUSH
66173: LD_VAR 0 5
66177: PPUSH
66178: LD_VAR 0 5
66182: PUSH
66183: LD_INT 1
66185: PLUS
66186: PPUSH
66187: LD_VAR 0 4
66191: PPUSH
66192: CALL_OW 256
66196: PPUSH
66197: CALL_OW 2
66201: ST_TO_ADDR
66202: GO 66165
66204: POP
66205: POP
// if not tmp then
66206: LD_VAR 0 5
66210: NOT
66211: IFFALSE 66215
// exit ;
66213: GO 66263
// if asc then
66215: LD_VAR 0 2
66219: IFFALSE 66243
// result := SortListByListAsc ( units , tmp ) else
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: LD_VAR 0 5
66235: PPUSH
66236: CALL_OW 76
66240: ST_TO_ADDR
66241: GO 66263
// result := SortListByListDesc ( units , tmp ) ;
66243: LD_ADDR_VAR 0 3
66247: PUSH
66248: LD_VAR 0 1
66252: PPUSH
66253: LD_VAR 0 5
66257: PPUSH
66258: CALL_OW 77
66262: ST_TO_ADDR
// end ;
66263: LD_VAR 0 3
66267: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66268: LD_INT 0
66270: PPUSH
66271: PPUSH
// task := GetTaskList ( mech ) ;
66272: LD_ADDR_VAR 0 4
66276: PUSH
66277: LD_VAR 0 1
66281: PPUSH
66282: CALL_OW 437
66286: ST_TO_ADDR
// if not task then
66287: LD_VAR 0 4
66291: NOT
66292: IFFALSE 66296
// exit ;
66294: GO 66338
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66296: LD_ADDR_VAR 0 3
66300: PUSH
66301: LD_VAR 0 4
66305: PUSH
66306: LD_INT 1
66308: ARRAY
66309: PUSH
66310: LD_INT 1
66312: ARRAY
66313: PUSH
66314: LD_STRING r
66316: EQUAL
66317: PUSH
66318: LD_VAR 0 4
66322: PUSH
66323: LD_INT 1
66325: ARRAY
66326: PUSH
66327: LD_INT 4
66329: ARRAY
66330: PUSH
66331: LD_VAR 0 2
66335: EQUAL
66336: AND
66337: ST_TO_ADDR
// end ;
66338: LD_VAR 0 3
66342: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66343: LD_INT 0
66345: PPUSH
// SetDir ( unit , d ) ;
66346: LD_VAR 0 1
66350: PPUSH
66351: LD_VAR 0 4
66355: PPUSH
66356: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66360: LD_VAR 0 1
66364: PPUSH
66365: LD_VAR 0 2
66369: PPUSH
66370: LD_VAR 0 3
66374: PPUSH
66375: LD_VAR 0 5
66379: PPUSH
66380: CALL_OW 48
// end ;
66384: LD_VAR 0 6
66388: RET
// export function ToNaturalNumber ( number ) ; begin
66389: LD_INT 0
66391: PPUSH
// result := number div 1 ;
66392: LD_ADDR_VAR 0 2
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 1
66404: DIV
66405: ST_TO_ADDR
// if number < 0 then
66406: LD_VAR 0 1
66410: PUSH
66411: LD_INT 0
66413: LESS
66414: IFFALSE 66424
// result := 0 ;
66416: LD_ADDR_VAR 0 2
66420: PUSH
66421: LD_INT 0
66423: ST_TO_ADDR
// end ;
66424: LD_VAR 0 2
66428: RET
// export function SortByClass ( units , class ) ; var un ; begin
66429: LD_INT 0
66431: PPUSH
66432: PPUSH
// if not units or not class then
66433: LD_VAR 0 1
66437: NOT
66438: PUSH
66439: LD_VAR 0 2
66443: NOT
66444: OR
66445: IFFALSE 66449
// exit ;
66447: GO 66544
// result := [ ] ;
66449: LD_ADDR_VAR 0 3
66453: PUSH
66454: EMPTY
66455: ST_TO_ADDR
// for un in units do
66456: LD_ADDR_VAR 0 4
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: FOR_IN
66467: IFFALSE 66542
// if GetClass ( un ) = class then
66469: LD_VAR 0 4
66473: PPUSH
66474: CALL_OW 257
66478: PUSH
66479: LD_VAR 0 2
66483: EQUAL
66484: IFFALSE 66511
// result := Insert ( result , 1 , un ) else
66486: LD_ADDR_VAR 0 3
66490: PUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_INT 1
66498: PPUSH
66499: LD_VAR 0 4
66503: PPUSH
66504: CALL_OW 2
66508: ST_TO_ADDR
66509: GO 66540
// result := Replace ( result , result + 1 , un ) ;
66511: LD_ADDR_VAR 0 3
66515: PUSH
66516: LD_VAR 0 3
66520: PPUSH
66521: LD_VAR 0 3
66525: PUSH
66526: LD_INT 1
66528: PLUS
66529: PPUSH
66530: LD_VAR 0 4
66534: PPUSH
66535: CALL_OW 1
66539: ST_TO_ADDR
66540: GO 66466
66542: POP
66543: POP
// end ;
66544: LD_VAR 0 3
66548: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66549: LD_INT 0
66551: PPUSH
66552: PPUSH
66553: PPUSH
66554: PPUSH
66555: PPUSH
66556: PPUSH
66557: PPUSH
// result := [ ] ;
66558: LD_ADDR_VAR 0 4
66562: PUSH
66563: EMPTY
66564: ST_TO_ADDR
// if x - r < 0 then
66565: LD_VAR 0 1
66569: PUSH
66570: LD_VAR 0 3
66574: MINUS
66575: PUSH
66576: LD_INT 0
66578: LESS
66579: IFFALSE 66591
// min_x := 0 else
66581: LD_ADDR_VAR 0 8
66585: PUSH
66586: LD_INT 0
66588: ST_TO_ADDR
66589: GO 66607
// min_x := x - r ;
66591: LD_ADDR_VAR 0 8
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_VAR 0 3
66605: MINUS
66606: ST_TO_ADDR
// if y - r < 0 then
66607: LD_VAR 0 2
66611: PUSH
66612: LD_VAR 0 3
66616: MINUS
66617: PUSH
66618: LD_INT 0
66620: LESS
66621: IFFALSE 66633
// min_y := 0 else
66623: LD_ADDR_VAR 0 7
66627: PUSH
66628: LD_INT 0
66630: ST_TO_ADDR
66631: GO 66649
// min_y := y - r ;
66633: LD_ADDR_VAR 0 7
66637: PUSH
66638: LD_VAR 0 2
66642: PUSH
66643: LD_VAR 0 3
66647: MINUS
66648: ST_TO_ADDR
// max_x := x + r ;
66649: LD_ADDR_VAR 0 9
66653: PUSH
66654: LD_VAR 0 1
66658: PUSH
66659: LD_VAR 0 3
66663: PLUS
66664: ST_TO_ADDR
// max_y := y + r ;
66665: LD_ADDR_VAR 0 10
66669: PUSH
66670: LD_VAR 0 2
66674: PUSH
66675: LD_VAR 0 3
66679: PLUS
66680: ST_TO_ADDR
// for _x = min_x to max_x do
66681: LD_ADDR_VAR 0 5
66685: PUSH
66686: DOUBLE
66687: LD_VAR 0 8
66691: DEC
66692: ST_TO_ADDR
66693: LD_VAR 0 9
66697: PUSH
66698: FOR_TO
66699: IFFALSE 66800
// for _y = min_y to max_y do
66701: LD_ADDR_VAR 0 6
66705: PUSH
66706: DOUBLE
66707: LD_VAR 0 7
66711: DEC
66712: ST_TO_ADDR
66713: LD_VAR 0 10
66717: PUSH
66718: FOR_TO
66719: IFFALSE 66796
// begin if not ValidHex ( _x , _y ) then
66721: LD_VAR 0 5
66725: PPUSH
66726: LD_VAR 0 6
66730: PPUSH
66731: CALL_OW 488
66735: NOT
66736: IFFALSE 66740
// continue ;
66738: GO 66718
// if GetResourceTypeXY ( _x , _y ) then
66740: LD_VAR 0 5
66744: PPUSH
66745: LD_VAR 0 6
66749: PPUSH
66750: CALL_OW 283
66754: IFFALSE 66794
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66756: LD_ADDR_VAR 0 4
66760: PUSH
66761: LD_VAR 0 4
66765: PPUSH
66766: LD_VAR 0 4
66770: PUSH
66771: LD_INT 1
66773: PLUS
66774: PPUSH
66775: LD_VAR 0 5
66779: PUSH
66780: LD_VAR 0 6
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PPUSH
66789: CALL_OW 1
66793: ST_TO_ADDR
// end ;
66794: GO 66718
66796: POP
66797: POP
66798: GO 66698
66800: POP
66801: POP
// end ;
66802: LD_VAR 0 4
66806: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66807: LD_INT 0
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
66815: PPUSH
66816: PPUSH
// if not units then
66817: LD_VAR 0 1
66821: NOT
66822: IFFALSE 66826
// exit ;
66824: GO 67350
// result := UnitFilter ( units , [ f_ok ] ) ;
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: LD_VAR 0 1
66835: PPUSH
66836: LD_INT 50
66838: PUSH
66839: EMPTY
66840: LIST
66841: PPUSH
66842: CALL_OW 72
66846: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66847: LD_ADDR_VAR 0 8
66851: PUSH
66852: LD_VAR 0 1
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PPUSH
66861: CALL_OW 255
66865: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66866: LD_ADDR_VAR 0 10
66870: PUSH
66871: LD_INT 29
66873: PUSH
66874: LD_INT 91
66876: PUSH
66877: LD_INT 49
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// if not result then
66885: LD_VAR 0 3
66889: NOT
66890: IFFALSE 66894
// exit ;
66892: GO 67350
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66894: LD_ADDR_VAR 0 5
66898: PUSH
66899: LD_INT 81
66901: PUSH
66902: LD_VAR 0 8
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PPUSH
66911: CALL_OW 69
66915: ST_TO_ADDR
// for i in result do
66916: LD_ADDR_VAR 0 4
66920: PUSH
66921: LD_VAR 0 3
66925: PUSH
66926: FOR_IN
66927: IFFALSE 67348
// begin tag := GetTag ( i ) + 1 ;
66929: LD_ADDR_VAR 0 9
66933: PUSH
66934: LD_VAR 0 4
66938: PPUSH
66939: CALL_OW 110
66943: PUSH
66944: LD_INT 1
66946: PLUS
66947: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66948: LD_ADDR_VAR 0 7
66952: PUSH
66953: LD_VAR 0 4
66957: PPUSH
66958: CALL_OW 250
66962: PPUSH
66963: LD_VAR 0 4
66967: PPUSH
66968: CALL_OW 251
66972: PPUSH
66973: LD_INT 6
66975: PPUSH
66976: CALL 66549 0 3
66980: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66981: LD_VAR 0 4
66985: PPUSH
66986: CALL_OW 247
66990: PUSH
66991: LD_INT 2
66993: EQUAL
66994: PUSH
66995: LD_VAR 0 7
66999: AND
67000: PUSH
67001: LD_VAR 0 4
67005: PPUSH
67006: CALL_OW 264
67010: PUSH
67011: LD_VAR 0 10
67015: IN
67016: NOT
67017: AND
67018: IFFALSE 67057
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67020: LD_VAR 0 4
67024: PPUSH
67025: LD_VAR 0 7
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PPUSH
67038: LD_VAR 0 7
67042: PUSH
67043: LD_INT 1
67045: ARRAY
67046: PUSH
67047: LD_INT 2
67049: ARRAY
67050: PPUSH
67051: CALL_OW 116
67055: GO 67346
// if path > tag then
67057: LD_VAR 0 2
67061: PUSH
67062: LD_VAR 0 9
67066: GREATER
67067: IFFALSE 67275
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67069: LD_ADDR_VAR 0 6
67073: PUSH
67074: LD_VAR 0 5
67078: PPUSH
67079: LD_INT 91
67081: PUSH
67082: LD_VAR 0 4
67086: PUSH
67087: LD_INT 8
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: PPUSH
67095: CALL_OW 72
67099: ST_TO_ADDR
// if nearEnemy then
67100: LD_VAR 0 6
67104: IFFALSE 67173
// begin if GetWeapon ( i ) = ru_time_lapser then
67106: LD_VAR 0 4
67110: PPUSH
67111: CALL_OW 264
67115: PUSH
67116: LD_INT 49
67118: EQUAL
67119: IFFALSE 67147
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67121: LD_VAR 0 4
67125: PPUSH
67126: LD_VAR 0 6
67130: PPUSH
67131: LD_VAR 0 4
67135: PPUSH
67136: CALL_OW 74
67140: PPUSH
67141: CALL_OW 112
67145: GO 67171
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67147: LD_VAR 0 4
67151: PPUSH
67152: LD_VAR 0 6
67156: PPUSH
67157: LD_VAR 0 4
67161: PPUSH
67162: CALL_OW 74
67166: PPUSH
67167: CALL_OW 115
// end else
67171: GO 67273
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67173: LD_VAR 0 4
67177: PPUSH
67178: LD_VAR 0 2
67182: PUSH
67183: LD_VAR 0 9
67187: ARRAY
67188: PUSH
67189: LD_INT 1
67191: ARRAY
67192: PPUSH
67193: LD_VAR 0 2
67197: PUSH
67198: LD_VAR 0 9
67202: ARRAY
67203: PUSH
67204: LD_INT 2
67206: ARRAY
67207: PPUSH
67208: CALL_OW 297
67212: PUSH
67213: LD_INT 6
67215: GREATER
67216: IFFALSE 67259
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67218: LD_VAR 0 4
67222: PPUSH
67223: LD_VAR 0 2
67227: PUSH
67228: LD_VAR 0 9
67232: ARRAY
67233: PUSH
67234: LD_INT 1
67236: ARRAY
67237: PPUSH
67238: LD_VAR 0 2
67242: PUSH
67243: LD_VAR 0 9
67247: ARRAY
67248: PUSH
67249: LD_INT 2
67251: ARRAY
67252: PPUSH
67253: CALL_OW 114
67257: GO 67273
// SetTag ( i , tag ) ;
67259: LD_VAR 0 4
67263: PPUSH
67264: LD_VAR 0 9
67268: PPUSH
67269: CALL_OW 109
// end else
67273: GO 67346
// if enemy then
67275: LD_VAR 0 5
67279: IFFALSE 67346
// begin if GetWeapon ( i ) = ru_time_lapser then
67281: LD_VAR 0 4
67285: PPUSH
67286: CALL_OW 264
67290: PUSH
67291: LD_INT 49
67293: EQUAL
67294: IFFALSE 67322
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67296: LD_VAR 0 4
67300: PPUSH
67301: LD_VAR 0 5
67305: PPUSH
67306: LD_VAR 0 4
67310: PPUSH
67311: CALL_OW 74
67315: PPUSH
67316: CALL_OW 112
67320: GO 67346
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67322: LD_VAR 0 4
67326: PPUSH
67327: LD_VAR 0 5
67331: PPUSH
67332: LD_VAR 0 4
67336: PPUSH
67337: CALL_OW 74
67341: PPUSH
67342: CALL_OW 115
// end ; end ;
67346: GO 66926
67348: POP
67349: POP
// end ;
67350: LD_VAR 0 3
67354: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67355: LD_INT 0
67357: PPUSH
67358: PPUSH
67359: PPUSH
// if not unit or IsInUnit ( unit ) then
67360: LD_VAR 0 1
67364: NOT
67365: PUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: CALL_OW 310
67375: OR
67376: IFFALSE 67380
// exit ;
67378: GO 67471
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67380: LD_ADDR_VAR 0 4
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 250
67394: PPUSH
67395: LD_VAR 0 2
67399: PPUSH
67400: LD_INT 1
67402: PPUSH
67403: CALL_OW 272
67407: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67408: LD_ADDR_VAR 0 5
67412: PUSH
67413: LD_VAR 0 1
67417: PPUSH
67418: CALL_OW 251
67422: PPUSH
67423: LD_VAR 0 2
67427: PPUSH
67428: LD_INT 1
67430: PPUSH
67431: CALL_OW 273
67435: ST_TO_ADDR
// if ValidHex ( x , y ) then
67436: LD_VAR 0 4
67440: PPUSH
67441: LD_VAR 0 5
67445: PPUSH
67446: CALL_OW 488
67450: IFFALSE 67471
// ComTurnXY ( unit , x , y ) ;
67452: LD_VAR 0 1
67456: PPUSH
67457: LD_VAR 0 4
67461: PPUSH
67462: LD_VAR 0 5
67466: PPUSH
67467: CALL_OW 118
// end ;
67471: LD_VAR 0 3
67475: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67476: LD_INT 0
67478: PPUSH
67479: PPUSH
// result := false ;
67480: LD_ADDR_VAR 0 3
67484: PUSH
67485: LD_INT 0
67487: ST_TO_ADDR
// if not units then
67488: LD_VAR 0 2
67492: NOT
67493: IFFALSE 67497
// exit ;
67495: GO 67542
// for i in units do
67497: LD_ADDR_VAR 0 4
67501: PUSH
67502: LD_VAR 0 2
67506: PUSH
67507: FOR_IN
67508: IFFALSE 67540
// if See ( side , i ) then
67510: LD_VAR 0 1
67514: PPUSH
67515: LD_VAR 0 4
67519: PPUSH
67520: CALL_OW 292
67524: IFFALSE 67538
// begin result := true ;
67526: LD_ADDR_VAR 0 3
67530: PUSH
67531: LD_INT 1
67533: ST_TO_ADDR
// exit ;
67534: POP
67535: POP
67536: GO 67542
// end ;
67538: GO 67507
67540: POP
67541: POP
// end ;
67542: LD_VAR 0 3
67546: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67547: LD_INT 0
67549: PPUSH
67550: PPUSH
67551: PPUSH
67552: PPUSH
// if not unit or not points then
67553: LD_VAR 0 1
67557: NOT
67558: PUSH
67559: LD_VAR 0 2
67563: NOT
67564: OR
67565: IFFALSE 67569
// exit ;
67567: GO 67659
// dist := 99999 ;
67569: LD_ADDR_VAR 0 5
67573: PUSH
67574: LD_INT 99999
67576: ST_TO_ADDR
// for i in points do
67577: LD_ADDR_VAR 0 4
67581: PUSH
67582: LD_VAR 0 2
67586: PUSH
67587: FOR_IN
67588: IFFALSE 67657
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67590: LD_ADDR_VAR 0 6
67594: PUSH
67595: LD_VAR 0 1
67599: PPUSH
67600: LD_VAR 0 4
67604: PUSH
67605: LD_INT 1
67607: ARRAY
67608: PPUSH
67609: LD_VAR 0 4
67613: PUSH
67614: LD_INT 2
67616: ARRAY
67617: PPUSH
67618: CALL_OW 297
67622: ST_TO_ADDR
// if tmpDist < dist then
67623: LD_VAR 0 6
67627: PUSH
67628: LD_VAR 0 5
67632: LESS
67633: IFFALSE 67655
// begin result := i ;
67635: LD_ADDR_VAR 0 3
67639: PUSH
67640: LD_VAR 0 4
67644: ST_TO_ADDR
// dist := tmpDist ;
67645: LD_ADDR_VAR 0 5
67649: PUSH
67650: LD_VAR 0 6
67654: ST_TO_ADDR
// end ; end ;
67655: GO 67587
67657: POP
67658: POP
// end ;
67659: LD_VAR 0 3
67663: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67664: LD_INT 0
67666: PPUSH
// uc_side := side ;
67667: LD_ADDR_OWVAR 20
67671: PUSH
67672: LD_VAR 0 1
67676: ST_TO_ADDR
// uc_nation := 3 ;
67677: LD_ADDR_OWVAR 21
67681: PUSH
67682: LD_INT 3
67684: ST_TO_ADDR
// vc_chassis := 25 ;
67685: LD_ADDR_OWVAR 37
67689: PUSH
67690: LD_INT 25
67692: ST_TO_ADDR
// vc_engine := engine_siberite ;
67693: LD_ADDR_OWVAR 39
67697: PUSH
67698: LD_INT 3
67700: ST_TO_ADDR
// vc_control := control_computer ;
67701: LD_ADDR_OWVAR 38
67705: PUSH
67706: LD_INT 3
67708: ST_TO_ADDR
// vc_weapon := 59 ;
67709: LD_ADDR_OWVAR 40
67713: PUSH
67714: LD_INT 59
67716: ST_TO_ADDR
// result := CreateVehicle ;
67717: LD_ADDR_VAR 0 5
67721: PUSH
67722: CALL_OW 45
67726: ST_TO_ADDR
// SetDir ( result , d ) ;
67727: LD_VAR 0 5
67731: PPUSH
67732: LD_VAR 0 4
67736: PPUSH
67737: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67741: LD_VAR 0 5
67745: PPUSH
67746: LD_VAR 0 2
67750: PPUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: LD_INT 0
67758: PPUSH
67759: CALL_OW 48
// end ;
67763: LD_VAR 0 5
67767: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67768: LD_INT 0
67770: PPUSH
67771: PPUSH
67772: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67773: LD_ADDR_VAR 0 2
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67796: LD_VAR 0 1
67800: NOT
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: CALL_OW 264
67811: PUSH
67812: LD_INT 12
67814: PUSH
67815: LD_INT 51
67817: PUSH
67818: LD_INT 32
67820: PUSH
67821: LD_INT 89
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: IN
67830: NOT
67831: OR
67832: IFFALSE 67836
// exit ;
67834: GO 67934
// for i := 1 to 3 do
67836: LD_ADDR_VAR 0 3
67840: PUSH
67841: DOUBLE
67842: LD_INT 1
67844: DEC
67845: ST_TO_ADDR
67846: LD_INT 3
67848: PUSH
67849: FOR_TO
67850: IFFALSE 67932
// begin tmp := GetCargo ( cargo , i ) ;
67852: LD_ADDR_VAR 0 4
67856: PUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: LD_VAR 0 3
67866: PPUSH
67867: CALL_OW 289
67871: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67872: LD_ADDR_VAR 0 2
67876: PUSH
67877: LD_VAR 0 2
67881: PPUSH
67882: LD_VAR 0 3
67886: PPUSH
67887: LD_VAR 0 4
67891: PPUSH
67892: CALL_OW 1
67896: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67897: LD_ADDR_VAR 0 2
67901: PUSH
67902: LD_VAR 0 2
67906: PPUSH
67907: LD_INT 4
67909: PPUSH
67910: LD_VAR 0 2
67914: PUSH
67915: LD_INT 4
67917: ARRAY
67918: PUSH
67919: LD_VAR 0 4
67923: PLUS
67924: PPUSH
67925: CALL_OW 1
67929: ST_TO_ADDR
// end ;
67930: GO 67849
67932: POP
67933: POP
// end ;
67934: LD_VAR 0 2
67938: RET
// export function Length ( array ) ; begin
67939: LD_INT 0
67941: PPUSH
// result := array + 0 ;
67942: LD_ADDR_VAR 0 2
67946: PUSH
67947: LD_VAR 0 1
67951: PUSH
67952: LD_INT 0
67954: PLUS
67955: ST_TO_ADDR
// end ;
67956: LD_VAR 0 2
67960: RET
// export function PrepareArray ( array ) ; begin
67961: LD_INT 0
67963: PPUSH
// result := array diff 0 ;
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: LD_VAR 0 1
67973: PUSH
67974: LD_INT 0
67976: DIFF
67977: ST_TO_ADDR
// if not result [ 1 ] then
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 1
67985: ARRAY
67986: NOT
67987: IFFALSE 68007
// result := Delete ( result , 1 ) ;
67989: LD_ADDR_VAR 0 2
67993: PUSH
67994: LD_VAR 0 2
67998: PPUSH
67999: LD_INT 1
68001: PPUSH
68002: CALL_OW 3
68006: ST_TO_ADDR
// end ;
68007: LD_VAR 0 2
68011: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68012: LD_INT 0
68014: PPUSH
68015: PPUSH
68016: PPUSH
68017: PPUSH
// sibRocketRange := 25 ;
68018: LD_ADDR_VAR 0 6
68022: PUSH
68023: LD_INT 25
68025: ST_TO_ADDR
// result := false ;
68026: LD_ADDR_VAR 0 4
68030: PUSH
68031: LD_INT 0
68033: ST_TO_ADDR
// for i := 0 to 5 do
68034: LD_ADDR_VAR 0 5
68038: PUSH
68039: DOUBLE
68040: LD_INT 0
68042: DEC
68043: ST_TO_ADDR
68044: LD_INT 5
68046: PUSH
68047: FOR_TO
68048: IFFALSE 68115
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68050: LD_VAR 0 1
68054: PPUSH
68055: LD_VAR 0 5
68059: PPUSH
68060: LD_VAR 0 6
68064: PPUSH
68065: CALL_OW 272
68069: PPUSH
68070: LD_VAR 0 2
68074: PPUSH
68075: LD_VAR 0 5
68079: PPUSH
68080: LD_VAR 0 6
68084: PPUSH
68085: CALL_OW 273
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: CALL_OW 309
68099: IFFALSE 68113
// begin result := true ;
68101: LD_ADDR_VAR 0 4
68105: PUSH
68106: LD_INT 1
68108: ST_TO_ADDR
// exit ;
68109: POP
68110: POP
68111: GO 68117
// end ;
68113: GO 68047
68115: POP
68116: POP
// end ;
68117: LD_VAR 0 4
68121: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68122: LD_INT 0
68124: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_VAR 0 2
68134: PPUSH
68135: LD_INT 0
68137: PPUSH
68138: LD_INT 0
68140: PPUSH
68141: LD_INT 1
68143: PPUSH
68144: LD_INT 0
68146: PPUSH
68147: CALL_OW 587
// end ;
68151: LD_VAR 0 3
68155: RET
// export function CenterOnNow ( unit ) ; begin
68156: LD_INT 0
68158: PPUSH
// result := IsInUnit ( unit ) ;
68159: LD_ADDR_VAR 0 2
68163: PUSH
68164: LD_VAR 0 1
68168: PPUSH
68169: CALL_OW 310
68173: ST_TO_ADDR
// if not result then
68174: LD_VAR 0 2
68178: NOT
68179: IFFALSE 68191
// result := unit ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_VAR 0 1
68190: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68191: LD_VAR 0 1
68195: PPUSH
68196: CALL_OW 87
// end ;
68200: LD_VAR 0 2
68204: RET
// export function ComMoveHex ( unit , hex ) ; begin
68205: LD_INT 0
68207: PPUSH
// if not hex then
68208: LD_VAR 0 2
68212: NOT
68213: IFFALSE 68217
// exit ;
68215: GO 68270
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68217: LD_VAR 0 2
68221: PUSH
68222: LD_INT 1
68224: ARRAY
68225: PPUSH
68226: LD_VAR 0 2
68230: PUSH
68231: LD_INT 2
68233: ARRAY
68234: PPUSH
68235: CALL_OW 428
68239: IFFALSE 68243
// exit ;
68241: GO 68270
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68243: LD_VAR 0 1
68247: PPUSH
68248: LD_VAR 0 2
68252: PUSH
68253: LD_INT 1
68255: ARRAY
68256: PPUSH
68257: LD_VAR 0 2
68261: PUSH
68262: LD_INT 2
68264: ARRAY
68265: PPUSH
68266: CALL_OW 111
// end ; end_of_file
68270: LD_VAR 0 3
68274: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 200
68282: DOUBLE
68283: GREATEREQUAL
68284: IFFALSE 68292
68286: LD_INT 299
68288: DOUBLE
68289: LESSEQUAL
68290: IFTRUE 68294
68292: GO 68326
68294: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68295: LD_VAR 0 1
68299: PPUSH
68300: LD_VAR 0 2
68304: PPUSH
68305: LD_VAR 0 3
68309: PPUSH
68310: LD_VAR 0 4
68314: PPUSH
68315: LD_VAR 0 5
68319: PPUSH
68320: CALL 22998 0 5
68324: GO 68403
68326: LD_INT 300
68328: DOUBLE
68329: GREATEREQUAL
68330: IFFALSE 68338
68332: LD_INT 399
68334: DOUBLE
68335: LESSEQUAL
68336: IFTRUE 68340
68338: GO 68402
68340: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68341: LD_VAR 0 1
68345: PPUSH
68346: LD_VAR 0 2
68350: PPUSH
68351: LD_VAR 0 3
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: LD_VAR 0 5
68365: PPUSH
68366: LD_VAR 0 6
68370: PPUSH
68371: LD_VAR 0 7
68375: PPUSH
68376: LD_VAR 0 8
68380: PPUSH
68381: LD_VAR 0 9
68385: PPUSH
68386: LD_VAR 0 10
68390: PPUSH
68391: LD_VAR 0 11
68395: PPUSH
68396: CALL 19331 0 11
68400: GO 68403
68402: POP
// end ;
68403: PPOPN 11
68405: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68406: LD_VAR 0 1
68410: PPUSH
68411: LD_VAR 0 2
68415: PPUSH
68416: LD_VAR 0 3
68420: PPUSH
68421: LD_VAR 0 4
68425: PPUSH
68426: LD_VAR 0 5
68430: PPUSH
68431: CALL 22734 0 5
// end ; end_of_file
68435: PPOPN 5
68437: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 2
68447: PPUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_VAR 0 4
68457: PPUSH
68458: LD_VAR 0 5
68462: PPUSH
68463: LD_VAR 0 6
68467: PPUSH
68468: CALL 6983 0 6
// end ;
68472: PPOPN 6
68474: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68475: LD_INT 0
68477: PPUSH
// begin if not units then
68478: LD_VAR 0 1
68482: NOT
68483: IFFALSE 68487
// exit ;
68485: GO 68487
// end ;
68487: PPOPN 7
68489: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68490: CALL 6887 0 0
// end ;
68494: PPOPN 1
68496: END
