// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2596 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := ... ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING ...
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := ... ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING ...
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 450 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 450
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 400 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 400
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1603
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1548
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// ComHold ( un ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 140
// end else
1546: GO 1601
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_EXP 21
1557: PPUSH
1558: LD_EXP 21
1562: PUSH
1563: LD_INT 1
1565: PLUS
1566: PPUSH
1567: LD_VAR 0 4
1571: PPUSH
1572: CALL_OW 2
1576: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// ComHold ( un ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL_OW 140
// end ; end ;
1601: GO 1451
1603: POP
1604: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 30
1622: PUSH
1623: LD_INT 31
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 69
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1658
// PrepareSolBun ( skill , i ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: CALL 239 0 2
1656: GO 1639
1658: POP
1659: POP
// for i = 1 to 2 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_INT 1
1668: DEC
1669: ST_TO_ADDR
1670: LD_INT 2
1672: PUSH
1673: FOR_TO
1674: IFFALSE 1805
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1676: LD_ADDR_VAR 0 4
1680: PUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 22
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: LD_INT 42
1698: PPUSH
1699: LD_INT 100
1701: PPUSH
1702: CALL 375 0 7
1706: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 131
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_VAR 0 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 14
1759: PUSH
1760: LD_INT 87
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_VAR 0 3
1771: ARRAY
1772: PPUSH
1773: LD_INT 0
1775: PPUSH
1776: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1780: LD_ADDR_EXP 22
1784: PUSH
1785: LD_EXP 22
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 2
1802: ST_TO_ADDR
// end ;
1803: GO 1673
1805: POP
1806: POP
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
1807: LD_ADDR_VAR 0 3
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 2
1819: PUSH
1820: LD_INT 2
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: LD_OWVAR 67
1835: ARRAY
1836: PUSH
1837: FOR_TO
1838: IFFALSE 1929
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1840: LD_INT 2
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_VAR 0 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: CALL_OW 380
// un := CreateHuman ;
1870: LD_ADDR_VAR 0 4
1874: PUSH
1875: CALL_OW 44
1879: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1880: LD_ADDR_EXP 23
1884: PUSH
1885: LD_EXP 23
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_VAR 0 4
1897: PPUSH
1898: CALL_OW 2
1902: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 10
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// ComHold ( un ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: CALL_OW 140
// end ;
1927: GO 1837
1929: POP
1930: POP
// if Difficulty < 3 then
1931: LD_OWVAR 67
1935: PUSH
1936: LD_INT 3
1938: LESS
1939: IFFALSE 1943
// exit ;
1941: GO 1986
// PrepareHuman ( false , 1 , skill ) ;
1943: LD_INT 0
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_VAR 0 2
1953: PPUSH
1954: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1958: LD_ADDR_EXP 24
1962: PUSH
1963: CALL_OW 44
1967: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1968: LD_EXP 24
1972: PPUSH
1973: LD_INT 82
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 48
// end ;
1986: LD_VAR 0 1
1990: RET
// every 0 0$01 trigger active_road_patrol do
1991: LD_EXP 8
1995: IFFALSE 2061
1997: GO 1999
1999: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2000: LD_EXP 22
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PPUSH
2009: LD_STRING road
2011: PPUSH
2012: LD_INT 70
2014: PPUSH
2015: LD_INT 131
2017: PUSH
2018: LD_INT 87
2020: PUSH
2021: LD_INT 107
2023: PUSH
2024: LD_INT 75
2026: PUSH
2027: LD_INT 107
2029: PUSH
2030: LD_INT 66
2032: PUSH
2033: LD_INT 114
2035: PUSH
2036: LD_INT 61
2038: PUSH
2039: LD_INT 107
2041: PUSH
2042: LD_INT 34
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL 463 0 4
2061: END
// every 0 0$01 trigger active_road_patrol do
2062: LD_EXP 8
2066: IFFALSE 2124
2068: GO 2070
2070: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2071: LD_EXP 22
2075: PUSH
2076: LD_INT 2
2078: ARRAY
2079: PPUSH
2080: LD_STRING road
2082: PPUSH
2083: LD_INT 70
2085: PPUSH
2086: LD_INT 21
2088: PUSH
2089: LD_INT 12
2091: PUSH
2092: LD_INT 37
2094: PUSH
2095: LD_INT 30
2097: PUSH
2098: LD_INT 65
2100: PUSH
2101: LD_INT 62
2103: PUSH
2104: LD_INT 107
2106: PUSH
2107: LD_INT 76
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL 463 0 4
2124: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2125: LD_EXP 24
2129: PPUSH
2130: CALL_OW 302
2134: IFFALSE 2196
2136: GO 2138
2138: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2139: LD_EXP 24
2143: PPUSH
2144: LD_STRING forest
2146: PPUSH
2147: LD_INT 35
2149: PPUSH
2150: LD_INT 52
2152: PUSH
2153: LD_INT 15
2155: PUSH
2156: LD_INT 81
2158: PUSH
2159: LD_INT 9
2161: PUSH
2162: LD_INT 120
2164: PUSH
2165: LD_INT 52
2167: PUSH
2168: LD_INT 135
2170: PUSH
2171: LD_INT 80
2173: PUSH
2174: LD_INT 122
2176: PUSH
2177: LD_INT 95
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL 463 0 4
2196: END
// every 0 0$01 trigger macmilan_use_radio do
2197: LD_EXP 6
2201: IFFALSE 2262
2203: GO 2205
2205: DISABLE
// begin active_road_patrol := false ;
2206: LD_ADDR_EXP 8
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2214: LD_EXP 22
2218: PPUSH
2219: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2223: LD_EXP 22
2227: PPUSH
2228: LD_INT 72
2230: PPUSH
2231: LD_INT 41
2233: PPUSH
2234: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2238: LD_EXP 21
2242: PPUSH
2243: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2247: LD_EXP 21
2251: PPUSH
2252: LD_INT 72
2254: PPUSH
2255: LD_INT 41
2257: PPUSH
2258: CALL_OW 174
// end ;
2262: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2263: LD_INT 9
2265: PPUSH
2266: LD_INT 22
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL_OW 70
2280: IFFALSE 2354
2282: GO 2284
2284: DISABLE
2285: LD_INT 0
2287: PPUSH
// begin enable ;
2288: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2289: LD_ADDR_VAR 0 1
2293: PUSH
2294: LD_INT 9
2296: PPUSH
2297: LD_INT 22
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: CALL_OW 70
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2316: LD_EXP 21
2320: PPUSH
2321: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2325: LD_EXP 21
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 250
2339: PPUSH
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 251
2349: PPUSH
2350: CALL_OW 174
// end ;
2354: PPOPN 1
2356: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2357: LD_EXP 22
2361: PUSH
2362: LD_INT 1
2364: ARRAY
2365: PPUSH
2366: CALL_OW 256
2370: PUSH
2371: LD_INT 999
2373: LESS
2374: PUSH
2375: LD_EXP 22
2379: PUSH
2380: LD_INT 2
2382: ARRAY
2383: PPUSH
2384: CALL_OW 256
2388: PUSH
2389: LD_INT 999
2391: LESS
2392: OR
2393: PUSH
2394: LD_INT 3
2396: PPUSH
2397: LD_EXP 15
2401: PPUSH
2402: CALL_OW 292
2406: AND
2407: IFFALSE 2434
2409: GO 2411
2411: DISABLE
// begin active_road_patrol := false ;
2412: LD_ADDR_EXP 8
2416: PUSH
2417: LD_INT 0
2419: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2420: LD_EXP 22
2424: PPUSH
2425: LD_EXP 15
2429: PPUSH
2430: CALL_OW 115
// end ;
2434: END
// every 0 0$01 trigger macmilan_in_trap do
2435: LD_EXP 9
2439: IFFALSE 2485
2441: GO 2443
2443: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2444: LD_EXP 21
2448: PPUSH
2449: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2453: LD_EXP 20
2457: PUSH
2458: LD_EXP 21
2462: ADD
2463: PUSH
2464: LD_EXP 25
2468: ADD
2469: PUSH
2470: LD_EXP 22
2474: ADD
2475: PPUSH
2476: LD_EXP 15
2480: PPUSH
2481: CALL_OW 115
// end ;
2485: END
// every 0 0$01 trigger meta_action do
2486: LD_EXP 10
2490: IFFALSE 2536
2492: GO 2494
2494: DISABLE
// begin active_road_patrol := false ;
2495: LD_ADDR_EXP 8
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2503: LD_EXP 20
2507: PUSH
2508: LD_EXP 21
2512: ADD
2513: PUSH
2514: LD_EXP 25
2518: ADD
2519: PUSH
2520: LD_EXP 22
2524: ADD
2525: PPUSH
2526: LD_INT 93
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 114
// end ;
2536: END
// every 0 0$20 trigger send_troops_to_forest do
2537: LD_EXP 14
2541: IFFALSE 2595
2543: GO 2545
2545: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2546: LD_EXP 24
2550: PPUSH
2551: CALL_OW 302
2555: NOT
2556: IFFALSE 2560
// exit ;
2558: GO 2595
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2560: LD_EXP 20
2564: PUSH
2565: LD_EXP 25
2569: ADD
2570: PPUSH
2571: LD_EXP 24
2575: PPUSH
2576: CALL_OW 252
2580: PPUSH
2581: LD_EXP 24
2585: PPUSH
2586: CALL_OW 253
2590: PPUSH
2591: CALL_OW 114
// end ; end_of_file
2595: END
// export function Action ; begin
2596: LD_INT 0
2598: PPUSH
// InGameOn ;
2599: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2603: LD_INT 79
2605: PPUSH
2606: LD_INT 76
2608: PPUSH
2609: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2613: LD_INT 10
2615: PPUSH
2616: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2620: LD_EXP 15
2624: PPUSH
2625: LD_INT 80
2627: PPUSH
2628: LD_INT 79
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: CALL_OW 48
// Wait ( 0 0$03 ) ;
2638: LD_INT 105
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2645: LD_EXP 15
2649: PPUSH
2650: LD_INT 80
2652: PPUSH
2653: LD_INT 76
2655: PPUSH
2656: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2660: LD_EXP 15
2664: PPUSH
2665: LD_STRING D1-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2672: LD_INT 10
2674: PPUSH
2675: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2679: LD_EXP 15
2683: PPUSH
2684: LD_INT 76
2686: PPUSH
2687: LD_INT 76
2689: PPUSH
2690: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D1-JMM-1a
2701: PPUSH
2702: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2706: LD_INT 10
2708: PPUSH
2709: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2713: LD_EXP 15
2717: PPUSH
2718: LD_INT 83
2720: PPUSH
2721: LD_INT 66
2723: PPUSH
2724: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2728: LD_EXP 15
2732: PPUSH
2733: LD_STRING D1-JMM-1b
2735: PPUSH
2736: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2740: LD_INT 18
2742: PPUSH
2743: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2747: LD_EXP 15
2751: PPUSH
2752: LD_STRING D1-JMM-1c
2754: PPUSH
2755: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2759: LD_INT 7
2761: PPUSH
2762: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2766: LD_EXP 18
2770: PPUSH
2771: LD_STRING D1-Pow-1
2773: PPUSH
2774: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2778: LD_EXP 15
2782: PPUSH
2783: LD_STRING D1-JMM-2
2785: PPUSH
2786: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2790: LD_EXP 18
2794: PPUSH
2795: LD_STRING D1-Pow-2
2797: PPUSH
2798: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2802: LD_EXP 15
2806: PPUSH
2807: LD_STRING D1-JMM-3
2809: PPUSH
2810: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2814: LD_EXP 18
2818: PPUSH
2819: LD_STRING D1-Pow-3
2821: PPUSH
2822: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2826: LD_EXP 15
2830: PPUSH
2831: LD_STRING D1-JMM-4
2833: PPUSH
2834: CALL_OW 88
// ComFree ( JMM ) ;
2838: LD_EXP 15
2842: PPUSH
2843: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2847: LD_INT 10
2849: PPUSH
2850: CALL_OW 67
// InGameOff ;
2854: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2858: LD_STRING M1
2860: PPUSH
2861: CALL_OW 337
// active_russian_dialog := true ;
2865: LD_ADDR_EXP 3
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// active_road_patrol := true ;
2873: LD_ADDR_EXP 8
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2881: LD_EXP 16
2885: PPUSH
2886: LD_INT 41
2888: PPUSH
2889: LD_INT 71
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 48
// ComHold ( Bobby ) ;
2899: LD_EXP 16
2903: PPUSH
2904: CALL_OW 140
// PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
2908: LD_EXP 17
2912: PPUSH
2913: LD_INT 90
2915: PPUSH
2916: LD_INT 42
2918: PPUSH
2919: LD_INT 0
2921: PPUSH
2922: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2926: LD_EXP 17
2930: PPUSH
2931: LD_INT 79
2933: PPUSH
2934: LD_INT 34
2936: PPUSH
2937: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2941: LD_EXP 17
2945: PPUSH
2946: CALL_OW 137
// SaveForQuickRestart ;
2950: CALL_OW 22
// end ;
2954: LD_VAR 0 1
2958: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
2959: LD_EXP 3
2963: IFFALSE 3535
2965: GO 2967
2967: DISABLE
2968: LD_INT 0
2970: PPUSH
// begin wait_points := 0 ;
2971: LD_ADDR_VAR 0 1
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
2979: LD_INT 70
2981: PPUSH
2982: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
2986: LD_EXP 20
2990: PPUSH
2991: LD_INT 79
2993: PPUSH
2994: LD_INT 83
2996: PPUSH
2997: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3001: LD_EXP 20
3005: PUSH
3006: LD_INT 2
3008: ARRAY
3009: PPUSH
3010: LD_STRING D1R-Rus1-1
3012: PPUSH
3013: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3017: LD_EXP 20
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING D1R-Rus2-1
3028: PPUSH
3029: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3033: LD_EXP 21
3037: PPUSH
3038: LD_INT 79
3040: PPUSH
3041: LD_INT 83
3043: PPUSH
3044: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3048: LD_INT 35
3050: PPUSH
3051: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3055: LD_EXP 20
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: PPUSH
3064: LD_INT 79
3066: PPUSH
3067: LD_INT 82
3069: PPUSH
3070: CALL_OW 297
3074: PUSH
3075: LD_INT 5
3077: LESS
3078: IFFALSE 3048
// if not IsInArea ( JMM , jmm_spot ) then
3080: LD_EXP 15
3084: PPUSH
3085: LD_INT 5
3087: PPUSH
3088: CALL_OW 308
3092: NOT
3093: IFFALSE 3113
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3095: LD_EXP 20
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_STRING D1Ra-Rus2-1
3106: PPUSH
3107: CALL_OW 88
3111: GO 3249
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3113: LD_EXP 20
3117: PUSH
3118: LD_INT 2
3120: ARRAY
3121: PPUSH
3122: LD_STRING D1Rb-Rus1-1
3124: PPUSH
3125: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3129: LD_EXP 20
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_STRING D1Rb-Rus2-1
3140: PPUSH
3141: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3145: LD_EXP 20
3149: PUSH
3150: LD_EXP 21
3154: ADD
3155: PPUSH
3156: LD_EXP 15
3160: PPUSH
3161: CALL_OW 250
3165: PPUSH
3166: LD_EXP 15
3170: PPUSH
3171: CALL_OW 251
3175: PPUSH
3176: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3180: LD_INT 35
3182: PPUSH
3183: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3187: LD_EXP 15
3191: PPUSH
3192: LD_INT 5
3194: PPUSH
3195: CALL_OW 308
3199: NOT
3200: PUSH
3201: LD_INT 3
3203: PPUSH
3204: LD_EXP 15
3208: PPUSH
3209: CALL_OW 292
3213: NOT
3214: AND
3215: IFFALSE 3180
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3217: LD_EXP 20
3221: PUSH
3222: LD_INT 2
3224: ARRAY
3225: PPUSH
3226: LD_STRING D1Rc-Rus1-1
3228: PPUSH
3229: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3233: LD_EXP 20
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: LD_STRING D1Ra-Rus2-1a
3244: PPUSH
3245: CALL_OW 88
// end ; wait_points := 10 ;
3249: LD_ADDR_VAR 0 1
3253: PUSH
3254: LD_INT 10
3256: ST_TO_ADDR
// if Difficulty > 1 then
3257: LD_OWVAR 67
3261: PUSH
3262: LD_INT 1
3264: GREATER
3265: IFFALSE 3296
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3267: LD_EXP 20
3271: PPUSH
3272: LD_INT 78
3274: PPUSH
3275: LD_INT 95
3277: PPUSH
3278: CALL_OW 114
// wait_points := wait_points + 15 ;
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: LD_VAR 0 1
3291: PUSH
3292: LD_INT 15
3294: PLUS
3295: ST_TO_ADDR
// end ; repeat wait ( 0 0$01 ) ;
3296: LD_INT 35
3298: PPUSH
3299: CALL_OW 67
// wait_points := wait_points - 1 ;
3303: LD_ADDR_VAR 0 1
3307: PUSH
3308: LD_VAR 0 1
3312: PUSH
3313: LD_INT 1
3315: MINUS
3316: ST_TO_ADDR
// if See ( 3 , JMM ) then
3317: LD_INT 3
3319: PPUSH
3320: LD_EXP 15
3324: PPUSH
3325: CALL_OW 292
3329: IFFALSE 3383
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3331: LD_EXP 20
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: LD_STRING D1Rb-Rus1-1
3342: PPUSH
3343: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3347: LD_EXP 20
3351: PPUSH
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 250
3361: PPUSH
3362: LD_EXP 15
3366: PPUSH
3367: CALL_OW 251
3371: PPUSH
3372: CALL_OW 114
// Wait ( 0 0$03 ) ;
3376: LD_INT 105
3378: PPUSH
3379: CALL_OW 67
// end ; until wait_points = 0 ;
3383: LD_VAR 0 1
3387: PUSH
3388: LD_INT 0
3390: EQUAL
3391: IFFALSE 3296
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3393: LD_EXP 20
3397: PPUSH
3398: LD_INT 45
3400: PPUSH
3401: LD_INT 5
3403: PPUSH
3404: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3408: LD_EXP 21
3412: PPUSH
3413: LD_INT 26
3415: PPUSH
3416: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3420: LD_INT 35
3422: PPUSH
3423: CALL_OW 67
// if See ( 3 , JMM ) then
3427: LD_INT 3
3429: PPUSH
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 292
3439: IFFALSE 3495
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3441: LD_EXP 20
3445: PUSH
3446: LD_INT 2
3448: ARRAY
3449: PPUSH
3450: LD_STRING D1Rb-Rus1-1
3452: PPUSH
3453: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3457: LD_EXP 20
3461: PPUSH
3462: LD_EXP 15
3466: PPUSH
3467: CALL_OW 250
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 251
3481: PPUSH
3482: CALL_OW 114
// Wait ( 0 0$50 ) ;
3486: LD_INT 1750
3488: PPUSH
3489: CALL_OW 67
// end else
3493: GO 3510
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3495: LD_EXP 20
3499: PPUSH
3500: LD_INT 45
3502: PPUSH
3503: LD_INT 5
3505: PPUSH
3506: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3510: LD_EXP 20
3514: PUSH
3515: LD_INT 1
3517: ARRAY
3518: PPUSH
3519: LD_INT 45
3521: PPUSH
3522: LD_INT 5
3524: PPUSH
3525: CALL_OW 297
3529: PUSH
3530: LD_INT 10
3532: LESS
3533: IFFALSE 3420
// end ;
3535: PPOPN 1
3537: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3538: LD_EXP 15
3542: PPUSH
3543: LD_EXP 16
3547: PPUSH
3548: CALL_OW 296
3552: PUSH
3553: LD_INT 9
3555: LESS
3556: IFFALSE 4007
3558: GO 3560
3560: DISABLE
// begin ComWalk ( Bobby ) ;
3561: LD_EXP 16
3565: PPUSH
3566: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3570: LD_EXP 16
3574: PPUSH
3575: LD_EXP 15
3579: PPUSH
3580: CALL_OW 250
3584: PPUSH
3585: LD_EXP 15
3589: PPUSH
3590: CALL_OW 251
3594: PPUSH
3595: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3599: LD_INT 35
3601: PPUSH
3602: CALL_OW 67
// until See ( 4 , JMM ) ;
3606: LD_INT 4
3608: PPUSH
3609: LD_EXP 15
3613: PPUSH
3614: CALL_OW 292
3618: IFFALSE 3599
// InGameOn ;
3620: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3624: LD_EXP 15
3628: PPUSH
3629: LD_EXP 16
3633: PPUSH
3634: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3638: LD_EXP 7
3642: PUSH
3643: LD_EXP 17
3647: PPUSH
3648: CALL_OW 302
3652: AND
3653: PUSH
3654: LD_EXP 15
3658: PPUSH
3659: LD_EXP 17
3663: PPUSH
3664: CALL_OW 296
3668: PUSH
3669: LD_INT 10
3671: LESS
3672: AND
3673: IFFALSE 3718
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3675: LD_EXP 17
3679: PPUSH
3680: LD_EXP 15
3684: PPUSH
3685: CALL_OW 250
3689: PPUSH
3690: LD_EXP 15
3694: PPUSH
3695: CALL_OW 251
3699: PPUSH
3700: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3704: LD_EXP 17
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3718: LD_EXP 15
3722: PPUSH
3723: LD_STRING D2-JMM-1
3725: PPUSH
3726: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3730: LD_INT 10
3732: PPUSH
3733: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3737: LD_EXP 16
3741: PPUSH
3742: LD_EXP 15
3746: PPUSH
3747: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3751: LD_EXP 16
3755: PPUSH
3756: LD_STRING D2-Bobby-1
3758: PPUSH
3759: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3763: LD_EXP 15
3767: PPUSH
3768: LD_STRING D2-JMM-2
3770: PPUSH
3771: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3775: LD_EXP 16
3779: PPUSH
3780: LD_EXP 15
3784: PPUSH
3785: CALL_OW 250
3789: PPUSH
3790: LD_EXP 15
3794: PPUSH
3795: CALL_OW 251
3799: PPUSH
3800: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3804: LD_EXP 16
3808: PPUSH
3809: LD_STRING D2-Bobby-2
3811: PPUSH
3812: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3816: LD_EXP 15
3820: PPUSH
3821: LD_STRING D2-JMM-3
3823: PPUSH
3824: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3828: LD_EXP 16
3832: PPUSH
3833: LD_EXP 15
3837: PPUSH
3838: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3842: LD_EXP 16
3846: PPUSH
3847: LD_STRING D2-Bobby-3
3849: PPUSH
3850: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3854: LD_EXP 15
3858: PPUSH
3859: LD_STRING D2-JMM-4
3861: PPUSH
3862: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3866: LD_EXP 16
3870: PPUSH
3871: LD_STRING D2-Bobby-4
3873: PPUSH
3874: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D2-JMM-5
3885: PPUSH
3886: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_STRING D2-Bobby-5
3897: PPUSH
3898: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D2-JMM-6
3909: PPUSH
3910: CALL_OW 88
// if not powell_contact then
3914: LD_EXP 5
3918: NOT
3919: IFFALSE 3945
// begin Say ( Bobby , D2-Bobby-6 ) ;
3921: LD_EXP 16
3925: PPUSH
3926: LD_STRING D2-Bobby-6
3928: PPUSH
3929: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
3933: LD_EXP 15
3937: PPUSH
3938: LD_STRING D2-JMM-7
3940: PPUSH
3941: CALL_OW 88
// end ; InGameOff ;
3945: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
3949: LD_EXP 16
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
3961: LD_EXP 15
3965: PUSH
3966: LD_EXP 16
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 139
// bobby_in_squad := true ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_INT 1
3986: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
3987: LD_EXP 5
3991: PUSH
3992: LD_EXP 7
3996: NOT
3997: AND
3998: IFFALSE 4007
// ChangeMissionObjectives ( M2b ) ;
4000: LD_STRING M2b
4002: PPUSH
4003: CALL_OW 337
// end ;
4007: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
4008: LD_EXP 3
4012: PUSH
4013: LD_EXP 4
4017: NOT
4018: AND
4019: IFFALSE 4039
4021: GO 4023
4023: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4024: LD_EXP 16
4028: PPUSH
4029: LD_INT 75
4031: PPUSH
4032: LD_INT 83
4034: PPUSH
4035: CALL_OW 111
4039: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4040: LD_EXP 7
4044: PUSH
4045: LD_EXP 4
4049: NOT
4050: AND
4051: IFFALSE 4080
4053: GO 4055
4055: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4056: LD_EXP 16
4060: PPUSH
4061: LD_INT 105
4063: PPUSH
4064: LD_INT 97
4066: PPUSH
4067: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4071: LD_EXP 16
4075: PPUSH
4076: CALL_OW 197
// end ;
4080: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4081: LD_EXP 15
4085: PPUSH
4086: LD_INT 6
4088: PPUSH
4089: CALL_OW 308
4093: PUSH
4094: LD_EXP 15
4098: PPUSH
4099: LD_EXP 16
4103: PPUSH
4104: CALL_OW 296
4108: PUSH
4109: LD_INT 7
4111: LESS
4112: AND
4113: PUSH
4114: LD_EXP 4
4118: AND
4119: IFFALSE 4166
4121: GO 4123
4123: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4124: LD_EXP 15
4128: PUSH
4129: LD_EXP 16
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PPUSH
4138: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4142: LD_EXP 15
4146: PPUSH
4147: LD_STRING D2a-JMM-1
4149: PPUSH
4150: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4154: LD_EXP 16
4158: PPUSH
4159: LD_STRING D2a-Bobby-1
4161: PPUSH
4162: CALL_OW 88
// end ;
4166: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4167: LD_EXP 3
4171: PUSH
4172: LD_INT 3
4174: PPUSH
4175: LD_EXP 15
4179: PPUSH
4180: CALL_OW 292
4184: NOT
4185: AND
4186: IFFALSE 4362
4188: GO 4190
4190: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4191: LD_INT 350
4193: PPUSH
4194: LD_INT 700
4196: PPUSH
4197: CALL_OW 12
4201: PPUSH
4202: CALL_OW 67
// InGameOn ;
4206: CALL_OW 8
// DialogueOn ;
4210: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4214: LD_EXP 18
4218: PPUSH
4219: LD_STRING D3-Pow-1
4221: PPUSH
4222: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4226: LD_EXP 15
4230: PPUSH
4231: LD_STRING D3-JMM-1
4233: PPUSH
4234: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4238: LD_EXP 18
4242: PPUSH
4243: LD_STRING D3-Pow-2
4245: PPUSH
4246: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4250: LD_EXP 15
4254: PPUSH
4255: LD_STRING D3-JMM-2
4257: PPUSH
4258: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4262: LD_EXP 18
4266: PPUSH
4267: LD_STRING D3-Pow-3
4269: PPUSH
4270: CALL_OW 94
// DialogueOff ;
4274: CALL_OW 7
// InGameOff ;
4278: CALL_OW 9
// powell_contact := true ;
4282: LD_ADDR_EXP 5
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4290: LD_INT 10
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: CALL_OW 424
// uc_side := 4 ;
4300: LD_ADDR_OWVAR 20
4304: PUSH
4305: LD_INT 4
4307: ST_TO_ADDR
// uc_nation := 1 ;
4308: LD_ADDR_OWVAR 21
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4316: LD_ADDR_EXP 18
4320: PUSH
4321: LD_STRING Powell
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL 182 0 2
4331: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4332: LD_STRING M2
4334: PPUSH
4335: CALL_OW 337
// if not bobby_in_squad then
4339: LD_EXP 4
4343: NOT
4344: IFFALSE 4355
// ChangeMissionObjectives ( M2a ) else
4346: LD_STRING M2a
4348: PPUSH
4349: CALL_OW 337
4353: GO 4362
// ChangeMissionObjectives ( M2b ) ;
4355: LD_STRING M2b
4357: PPUSH
4358: CALL_OW 337
// end ;
4362: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4363: LD_EXP 15
4367: PPUSH
4368: LD_INT 7
4370: PPUSH
4371: CALL_OW 308
4375: IFFALSE 4510
4377: GO 4379
4379: DISABLE
// begin DialogueOn ;
4380: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4384: LD_EXP 19
4388: PPUSH
4389: LD_STRING D4-Rus3-1
4391: PPUSH
4392: CALL_OW 94
// DialogueOff ;
4396: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4400: LD_STRING M3a
4402: PPUSH
4403: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4407: LD_INT 11
4409: PPUSH
4410: LD_INT 1
4412: PPUSH
4413: CALL_OW 424
// Wait ( 0 0$02 ) ;
4417: LD_INT 70
4419: PPUSH
4420: CALL_OW 67
// DialogueOn ;
4424: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4428: LD_EXP 18
4432: PPUSH
4433: LD_STRING D4-Pow-1
4435: PPUSH
4436: CALL_OW 94
// DialogueOff ;
4440: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4444: LD_STRING M3b
4446: PPUSH
4447: CALL_OW 337
// case Query ( Q1 ) of 1 :
4451: LD_STRING Q1
4453: PPUSH
4454: CALL_OW 97
4458: PUSH
4459: LD_INT 1
4461: DOUBLE
4462: EQUAL
4463: IFTRUE 4467
4465: GO 4498
4467: POP
// begin macmilan_use_radio := true ;
4468: LD_ADDR_EXP 6
4472: PUSH
4473: LD_INT 1
4475: ST_TO_ADDR
// DialogueOn ;
4476: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4480: LD_EXP 15
4484: PPUSH
4485: LD_STRING D4a-JMM-1
4487: PPUSH
4488: CALL_OW 88
// DialogueOff ;
4492: CALL_OW 7
// end ; 2 :
4496: GO 4510
4498: LD_INT 2
4500: DOUBLE
4501: EQUAL
4502: IFTRUE 4506
4504: GO 4509
4506: POP
// ; end ;
4507: GO 4510
4509: POP
// end ;
4510: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4511: LD_EXP 15
4515: PPUSH
4516: LD_EXP 17
4520: PPUSH
4521: CALL_OW 296
4525: PUSH
4526: LD_INT 8
4528: LESS
4529: IFFALSE 4780
4531: GO 4533
4533: DISABLE
// begin InGameOn ;
4534: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4538: LD_EXP 15
4542: PPUSH
4543: LD_EXP 17
4547: PPUSH
4548: CALL_OW 250
4552: PPUSH
4553: LD_EXP 17
4557: PPUSH
4558: CALL_OW 251
4562: PPUSH
4563: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4567: LD_EXP 16
4571: PPUSH
4572: CALL_OW 302
4576: PUSH
4577: LD_EXP 4
4581: AND
4582: IFFALSE 4613
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4584: LD_EXP 16
4588: PPUSH
4589: LD_EXP 15
4593: PPUSH
4594: CALL_OW 250
4598: PPUSH
4599: LD_EXP 15
4603: PPUSH
4604: CALL_OW 251
4608: PPUSH
4609: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4613: LD_EXP 15
4617: PPUSH
4618: LD_STRING D5-JMM-1
4620: PPUSH
4621: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4625: LD_INT 10
4627: PPUSH
4628: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4632: LD_EXP 15
4636: PPUSH
4637: LD_EXP 17
4641: PPUSH
4642: CALL_OW 119
// ComWalk ( Cyrus ) ;
4646: LD_EXP 17
4650: PPUSH
4651: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4655: LD_EXP 17
4659: PPUSH
4660: LD_EXP 15
4664: PPUSH
4665: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4669: LD_EXP 17
4673: PPUSH
4674: LD_STRING D5-Cyrus-1
4676: PPUSH
4677: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4681: LD_EXP 16
4685: PPUSH
4686: CALL_OW 302
4690: PUSH
4691: LD_EXP 4
4695: AND
4696: IFFALSE 4736
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4698: LD_EXP 16
4702: PPUSH
4703: LD_EXP 17
4707: PPUSH
4708: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4712: LD_EXP 16
4716: PPUSH
4717: LD_STRING D5-Bobby-1
4719: PPUSH
4720: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4724: LD_EXP 15
4728: PPUSH
4729: LD_STRING D5-JMM-2
4731: PPUSH
4732: CALL_OW 88
// end ; InGameOff ;
4736: CALL_OW 9
// cyrus_in_squad := true ;
4740: LD_ADDR_EXP 7
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4748: LD_EXP 17
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4760: LD_EXP 5
4764: PUSH
4765: LD_EXP 4
4769: NOT
4770: AND
4771: IFFALSE 4780
// ChangeMissionObjectives ( M2b ) ;
4773: LD_STRING M2b
4775: PPUSH
4776: CALL_OW 337
// end ;
4780: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4781: LD_EXP 4
4785: PUSH
4786: LD_EXP 7
4790: AND
4791: IFFALSE 4803
4793: GO 4795
4795: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4796: LD_STRING M2c
4798: PPUSH
4799: CALL_OW 337
4803: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4804: LD_EXP 15
4808: PPUSH
4809: LD_INT 8
4811: PPUSH
4812: CALL_OW 308
4816: IFFALSE 4868
4818: GO 4820
4820: DISABLE
// begin macmilan_in_trap := true ;
4821: LD_ADDR_EXP 9
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4829: LD_INT 35
4831: PPUSH
4832: CALL_OW 67
// DialogueOn ;
4836: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4840: LD_EXP 25
4844: PPUSH
4845: LD_STRING D5-Pok-1
4847: PPUSH
4848: CALL_OW 88
// DialogueOff ;
4852: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
4856: LD_EXP 15
4860: PPUSH
4861: LD_STRING D4b-JMM-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4869: LD_EXP 15
4873: PPUSH
4874: LD_EXP 23
4878: PUSH
4879: LD_EXP 23
4883: ARRAY
4884: PPUSH
4885: CALL_OW 296
4889: PUSH
4890: LD_INT 12
4892: LESS
4893: PUSH
4894: LD_EXP 23
4898: PUSH
4899: LD_EXP 23
4903: ARRAY
4904: PPUSH
4905: CALL_OW 256
4909: PUSH
4910: LD_INT 999
4912: LESS
4913: OR
4914: IFFALSE 5144
4916: GO 4918
4918: DISABLE
4919: LD_INT 0
4921: PPUSH
4922: PPUSH
// begin hp := [ 200 , 150 , 100 ] [ Difficulty ] ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 150
4933: PUSH
4934: LD_INT 100
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: ST_TO_ADDR
// for i in russian_meta_guards do
4948: LD_ADDR_VAR 0 1
4952: PUSH
4953: LD_EXP 23
4957: PUSH
4958: FOR_IN
4959: IFFALSE 4999
// if IsOk ( i ) then
4961: LD_VAR 0 1
4965: PPUSH
4966: CALL_OW 302
4970: IFFALSE 4997
// SetLives ( i , GetLives ( i ) - hp ) ;
4972: LD_VAR 0 1
4976: PPUSH
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 256
4986: PUSH
4987: LD_VAR 0 2
4991: MINUS
4992: PPUSH
4993: CALL_OW 234
4997: GO 4958
4999: POP
5000: POP
// DialogueOn ;
5001: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5005: LD_EXP 23
5009: PUSH
5010: LD_EXP 23
5014: ARRAY
5015: PPUSH
5016: LD_STRING D6-FRus1-1
5018: PPUSH
5019: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5023: LD_EXP 15
5027: PPUSH
5028: LD_STRING D6-JMM-1
5030: PPUSH
5031: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5035: LD_EXP 17
5039: PPUSH
5040: CALL_OW 302
5044: PUSH
5045: LD_EXP 7
5049: AND
5050: IFFALSE 5064
// Say ( Cyrus , D6-Cyrus-1 ) ;
5052: LD_EXP 17
5056: PPUSH
5057: LD_STRING D6-Cyrus-1
5059: PPUSH
5060: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5064: LD_EXP 16
5068: PPUSH
5069: CALL_OW 302
5073: PUSH
5074: LD_EXP 4
5078: AND
5079: IFFALSE 5093
// Say ( Bobby , D6-Bobby-1 ) ;
5081: LD_EXP 16
5085: PPUSH
5086: LD_STRING D6-Bobby-1
5088: PPUSH
5089: CALL_OW 88
// DialogueOff ;
5093: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5097: LD_INT 140
5099: PUSH
5100: LD_INT 105
5102: PUSH
5103: LD_INT 70
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: PPUSH
5117: CALL_OW 67
// meta_action := true ;
5121: LD_ADDR_EXP 10
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_INT 94
5136: PPUSH
5137: LD_INT 8
5139: PPUSH
5140: CALL_OW 114
// end ;
5144: PPOPN 2
5146: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5147: LD_EXP 15
5151: PPUSH
5152: LD_INT 93
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 297
5162: PUSH
5163: LD_INT 5
5165: LESS
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PPUSH
5177: CALL_OW 69
5181: PUSH
5182: LD_INT 1
5184: GREATER
5185: AND
5186: IFFALSE 5203
5188: GO 5190
5190: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5191: LD_EXP 15
5195: PPUSH
5196: LD_STRING D6a-JMM-1
5198: PPUSH
5199: CALL_OW 88
5203: END
// every 0 0$01 trigger IsDying ( JMM ) do
5204: LD_EXP 15
5208: PPUSH
5209: CALL_OW 303
5213: IFFALSE 5225
5215: GO 5217
5217: DISABLE
// YouLost ( JMM ) ;
5218: LD_STRING JMM
5220: PPUSH
5221: CALL_OW 104
5225: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5226: LD_EXP 16
5230: PPUSH
5231: LD_INT 10
5233: PPUSH
5234: CALL_OW 308
5238: IFFALSE 5287
5240: GO 5242
5242: DISABLE
// begin bobby_saved := true ;
5243: LD_ADDR_EXP 12
5247: PUSH
5248: LD_INT 1
5250: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5251: LD_EXP 16
5255: PPUSH
5256: CALL_OW 256
5260: PPUSH
5261: LD_STRING 01_BobbyLifePoints_1
5263: PPUSH
5264: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5268: LD_EXP 16
5272: PPUSH
5273: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5277: LD_STRING Bobby
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 101
// end ;
5287: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5288: LD_EXP 17
5292: PPUSH
5293: LD_INT 10
5295: PPUSH
5296: CALL_OW 308
5300: IFFALSE 5349
5302: GO 5304
5304: DISABLE
// begin cyrus_saved := true ;
5305: LD_ADDR_EXP 13
5309: PUSH
5310: LD_INT 1
5312: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5313: LD_EXP 17
5317: PPUSH
5318: CALL_OW 256
5322: PPUSH
5323: LD_STRING 01_CyrusLifePoints_1
5325: PPUSH
5326: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5330: LD_EXP 17
5334: PPUSH
5335: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5339: LD_STRING Cyrus
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 101
// end ;
5349: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5350: LD_EXP 15
5354: PPUSH
5355: LD_INT 10
5357: PPUSH
5358: CALL_OW 308
5362: IFFALSE 5871
5364: GO 5366
5366: DISABLE
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5372: LD_EXP 13
5376: NOT
5377: PUSH
5378: LD_EXP 7
5382: AND
5383: PUSH
5384: LD_EXP 17
5388: PPUSH
5389: CALL_OW 302
5393: AND
5394: PUSH
5395: LD_EXP 12
5399: NOT
5400: PUSH
5401: LD_EXP 4
5405: AND
5406: PUSH
5407: LD_EXP 16
5411: PPUSH
5412: CALL_OW 302
5416: AND
5417: OR
5418: IFFALSE 5459
// case Query ( Q2 ) of 1 :
5420: LD_STRING Q2
5422: PPUSH
5423: CALL_OW 97
5427: PUSH
5428: LD_INT 1
5430: DOUBLE
5431: EQUAL
5432: IFTRUE 5436
5434: GO 5447
5436: POP
// wait_for_them := true ; 2 :
5437: LD_ADDR_VAR 0 3
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
5445: GO 5459
5447: LD_INT 2
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5458
5455: POP
// ; end ;
5456: GO 5459
5458: POP
// if wait_for_them then
5459: LD_VAR 0 3
5463: IFFALSE 5576
// repeat wait ( 0 0$01 ) ;
5465: LD_INT 35
5467: PPUSH
5468: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5472: LD_EXP 13
5476: PUSH
5477: LD_EXP 12
5481: AND
5482: PUSH
5483: LD_EXP 13
5487: PUSH
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 16
5498: PPUSH
5499: CALL_OW 303
5503: OR
5504: PUSH
5505: LD_EXP 16
5509: PPUSH
5510: CALL_OW 301
5514: OR
5515: AND
5516: OR
5517: PUSH
5518: LD_EXP 12
5522: PUSH
5523: LD_EXP 7
5527: NOT
5528: PUSH
5529: LD_EXP 17
5533: PPUSH
5534: CALL_OW 303
5538: OR
5539: PUSH
5540: LD_EXP 17
5544: PPUSH
5545: CALL_OW 301
5549: OR
5550: AND
5551: OR
5552: PUSH
5553: LD_EXP 16
5557: PPUSH
5558: CALL_OW 301
5562: PUSH
5563: LD_EXP 17
5567: PPUSH
5568: CALL_OW 301
5572: AND
5573: OR
5574: IFFALSE 5465
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5576: LD_EXP 15
5580: PPUSH
5581: CALL_OW 256
5585: PPUSH
5586: LD_STRING 01_JMMLifePoints_1
5588: PPUSH
5589: CALL_OW 39
// RemoveUnit ( JMM ) ;
5593: LD_EXP 15
5597: PPUSH
5598: CALL_OW 64
// to_reward := [ JMM ] ;
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: LD_EXP 15
5611: PUSH
5612: EMPTY
5613: LIST
5614: ST_TO_ADDR
// if bobby_saved then
5615: LD_EXP 12
5619: IFFALSE 5637
// to_reward := to_reward ^ Bobby ;
5621: LD_ADDR_VAR 0 2
5625: PUSH
5626: LD_VAR 0 2
5630: PUSH
5631: LD_EXP 16
5635: ADD
5636: ST_TO_ADDR
// if cyrus_saved then
5637: LD_EXP 13
5641: IFFALSE 5659
// to_reward := to_reward ^ Cyrus ;
5643: LD_ADDR_VAR 0 2
5647: PUSH
5648: LD_VAR 0 2
5652: PUSH
5653: LD_EXP 17
5657: ADD
5658: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5659: LD_STRING JMM
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: CALL_OW 101
// if not bobby_in_squad then
5669: LD_EXP 4
5673: NOT
5674: IFFALSE 5687
// AddMedal ( Bobby , - 1 ) ;
5676: LD_STRING Bobby
5678: PPUSH
5679: LD_INT 1
5681: NEG
5682: PPUSH
5683: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5687: LD_EXP 12
5691: NOT
5692: PUSH
5693: LD_EXP 16
5697: PPUSH
5698: CALL_OW 303
5702: PUSH
5703: LD_EXP 16
5707: PPUSH
5708: CALL_OW 301
5712: OR
5713: AND
5714: IFFALSE 5727
// AddMedal ( Bobby , - 2 ) ;
5716: LD_STRING Bobby
5718: PPUSH
5719: LD_INT 2
5721: NEG
5722: PPUSH
5723: CALL_OW 101
// if not cyrus_in_squad then
5727: LD_EXP 7
5731: NOT
5732: IFFALSE 5745
// AddMedal ( Cyrus , - 1 ) ;
5734: LD_STRING Cyrus
5736: PPUSH
5737: LD_INT 1
5739: NEG
5740: PPUSH
5741: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5745: LD_EXP 13
5749: NOT
5750: PUSH
5751: LD_EXP 17
5755: PPUSH
5756: CALL_OW 303
5760: PUSH
5761: LD_EXP 17
5765: PPUSH
5766: CALL_OW 301
5770: OR
5771: AND
5772: IFFALSE 5785
// AddMedal ( Cyrus , - 2 ) ;
5774: LD_STRING Cyrus
5776: PPUSH
5777: LD_INT 2
5779: NEG
5780: PPUSH
5781: CALL_OW 101
// GiveMedals ( MAIN ) ;
5785: LD_STRING MAIN
5787: PPUSH
5788: CALL_OW 102
// RewardPeople ( to_reward ) ;
5792: LD_VAR 0 2
5796: PPUSH
5797: CALL_OW 43
// if bobby_saved then
5801: LD_EXP 12
5805: IFFALSE 5825
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5807: LD_EXP 16
5811: PPUSH
5812: LD_EXP 2
5816: PUSH
5817: LD_STRING Bobby
5819: STR
5820: PPUSH
5821: CALL_OW 38
// if cyrus_saved then
5825: LD_EXP 13
5829: IFFALSE 5849
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5831: LD_EXP 17
5835: PPUSH
5836: LD_EXP 2
5840: PUSH
5841: LD_STRING Cyrus
5843: STR
5844: PPUSH
5845: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5849: LD_EXP 15
5853: PPUSH
5854: LD_EXP 2
5858: PUSH
5859: LD_STRING JMM
5861: STR
5862: PPUSH
5863: CALL_OW 38
// YouWin ;
5867: CALL_OW 103
// end ;
5871: PPOPN 3
5873: END
