// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26881 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26881 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26881 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26881 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64349 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68268 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68268 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68268 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68268 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68268 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68268 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 26881 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68268 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6009
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// end ;
6009: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6010: LD_EXP 18
6014: PPUSH
6015: LD_INT 10
6017: PPUSH
6018: CALL_OW 308
6022: PUSH
6023: LD_EXP 18
6027: PPUSH
6028: LD_INT 12
6030: PPUSH
6031: CALL_OW 308
6035: OR
6036: IFFALSE 6085
6038: GO 6040
6040: DISABLE
// begin cyrus_saved := true ;
6041: LD_ADDR_EXP 13
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6049: LD_EXP 18
6053: PPUSH
6054: CALL_OW 256
6058: PPUSH
6059: LD_STRING 01_CyrusLifePoints_1
6061: PPUSH
6062: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6066: LD_EXP 18
6070: PPUSH
6071: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6075: LD_STRING Cyrus
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: CALL_OW 101
// end ;
6085: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6086: LD_EXP 16
6090: PPUSH
6091: LD_INT 10
6093: PPUSH
6094: CALL_OW 308
6098: PUSH
6099: LD_EXP 16
6103: PPUSH
6104: LD_INT 12
6106: PPUSH
6107: CALL_OW 308
6111: OR
6112: IFFALSE 6720
6114: GO 6116
6116: DISABLE
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
// begin if macmilan_use_radio then
6125: LD_EXP 6
6129: IFFALSE 6138
// SetAchievement ( ACH_RADIO ) ;
6131: LD_STRING ACH_RADIO
6133: PPUSH
6134: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6138: LD_EXP 13
6142: NOT
6143: PUSH
6144: LD_EXP 7
6148: AND
6149: PUSH
6150: LD_EXP 18
6154: PPUSH
6155: CALL_OW 302
6159: AND
6160: PUSH
6161: LD_EXP 12
6165: NOT
6166: PUSH
6167: LD_EXP 4
6171: AND
6172: PUSH
6173: LD_EXP 17
6177: PPUSH
6178: CALL_OW 302
6182: AND
6183: OR
6184: IFFALSE 6225
// case Query ( Q2 ) of 1 :
6186: LD_STRING Q2
6188: PPUSH
6189: CALL_OW 97
6193: PUSH
6194: LD_INT 1
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6213
6202: POP
// wait_for_them := true ; 2 :
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 1
6210: ST_TO_ADDR
6211: GO 6225
6213: LD_INT 2
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6224
6221: POP
// ; end ;
6222: GO 6225
6224: POP
// if wait_for_them then
6225: LD_VAR 0 3
6229: IFFALSE 6342
// repeat wait ( 0 0$01 ) ;
6231: LD_INT 35
6233: PPUSH
6234: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6238: LD_EXP 13
6242: PUSH
6243: LD_EXP 12
6247: AND
6248: PUSH
6249: LD_EXP 13
6253: PUSH
6254: LD_EXP 4
6258: NOT
6259: PUSH
6260: LD_EXP 17
6264: PPUSH
6265: CALL_OW 303
6269: OR
6270: PUSH
6271: LD_EXP 17
6275: PPUSH
6276: CALL_OW 301
6280: OR
6281: AND
6282: OR
6283: PUSH
6284: LD_EXP 12
6288: PUSH
6289: LD_EXP 7
6293: NOT
6294: PUSH
6295: LD_EXP 18
6299: PPUSH
6300: CALL_OW 303
6304: OR
6305: PUSH
6306: LD_EXP 18
6310: PPUSH
6311: CALL_OW 301
6315: OR
6316: AND
6317: OR
6318: PUSH
6319: LD_EXP 17
6323: PPUSH
6324: CALL_OW 301
6328: PUSH
6329: LD_EXP 18
6333: PPUSH
6334: CALL_OW 301
6338: AND
6339: OR
6340: IFFALSE 6231
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6342: LD_EXP 16
6346: PPUSH
6347: CALL_OW 256
6351: PPUSH
6352: LD_STRING 01_JMMLifePoints_1
6354: PPUSH
6355: CALL_OW 39
// RemoveUnit ( JMM ) ;
6359: LD_EXP 16
6363: PPUSH
6364: CALL_OW 64
// to_reward := [ JMM ] ;
6368: LD_ADDR_VAR 0 2
6372: PUSH
6373: LD_EXP 16
6377: PUSH
6378: EMPTY
6379: LIST
6380: ST_TO_ADDR
// if bobby_saved then
6381: LD_EXP 12
6385: IFFALSE 6403
// to_reward := to_reward ^ Bobby ;
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_VAR 0 2
6396: PUSH
6397: LD_EXP 17
6401: ADD
6402: ST_TO_ADDR
// if cyrus_saved then
6403: LD_EXP 13
6407: IFFALSE 6425
// to_reward := to_reward ^ Cyrus ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_EXP 18
6423: ADD
6424: ST_TO_ADDR
// m1 := true ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// m2 := bobby_saved ;
6433: LD_ADDR_VAR 0 5
6437: PUSH
6438: LD_EXP 12
6442: ST_TO_ADDR
// m3 := cyrus_saved ;
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: LD_EXP 13
6452: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6453: LD_STRING JMM
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 101
// if not bobby_in_squad then
6463: LD_EXP 4
6467: NOT
6468: IFFALSE 6481
// AddMedal ( Bobby , - 1 ) ;
6470: LD_STRING Bobby
6472: PPUSH
6473: LD_INT 1
6475: NEG
6476: PPUSH
6477: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6481: LD_EXP 12
6485: NOT
6486: PUSH
6487: LD_EXP 17
6491: PPUSH
6492: CALL_OW 303
6496: PUSH
6497: LD_EXP 17
6501: PPUSH
6502: CALL_OW 301
6506: OR
6507: AND
6508: IFFALSE 6521
// AddMedal ( Bobby , - 2 ) ;
6510: LD_STRING Bobby
6512: PPUSH
6513: LD_INT 2
6515: NEG
6516: PPUSH
6517: CALL_OW 101
// if not cyrus_in_squad then
6521: LD_EXP 7
6525: NOT
6526: IFFALSE 6539
// AddMedal ( Cyrus , - 1 ) ;
6528: LD_STRING Cyrus
6530: PPUSH
6531: LD_INT 1
6533: NEG
6534: PPUSH
6535: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6539: LD_EXP 13
6543: NOT
6544: PUSH
6545: LD_EXP 18
6549: PPUSH
6550: CALL_OW 303
6554: PUSH
6555: LD_EXP 18
6559: PPUSH
6560: CALL_OW 301
6564: OR
6565: AND
6566: IFFALSE 6579
// AddMedal ( Cyrus , - 2 ) ;
6568: LD_STRING Cyrus
6570: PPUSH
6571: LD_INT 2
6573: NEG
6574: PPUSH
6575: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6579: LD_OWVAR 67
6583: PUSH
6584: LD_INT 3
6586: GREATEREQUAL
6587: PUSH
6588: LD_VAR 0 4
6592: AND
6593: PUSH
6594: LD_VAR 0 5
6598: AND
6599: PUSH
6600: LD_VAR 0 6
6604: AND
6605: IFFALSE 6617
// SetAchievementEX ( ACH_AMER , 1 ) ;
6607: LD_STRING ACH_AMER
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 564
// GiveMedals ( MAIN ) ;
6617: LD_STRING MAIN
6619: PPUSH
6620: CALL_OW 102
// RewardPeople ( to_reward ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 43
// if bobby_saved then
6633: LD_EXP 12
6637: IFFALSE 6657
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6639: LD_EXP 17
6643: PPUSH
6644: LD_EXP 2
6648: PUSH
6649: LD_STRING Bobby
6651: STR
6652: PPUSH
6653: CALL_OW 38
// if cyrus_saved then
6657: LD_EXP 13
6661: IFFALSE 6681
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6663: LD_EXP 18
6667: PPUSH
6668: LD_EXP 2
6672: PUSH
6673: LD_STRING Cyrus
6675: STR
6676: PPUSH
6677: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6681: LD_EXP 16
6685: PPUSH
6686: LD_EXP 2
6690: PUSH
6691: LD_STRING JMM
6693: STR
6694: PPUSH
6695: CALL_OW 38
// if tick <= 3 3$00 then
6699: LD_OWVAR 1
6703: PUSH
6704: LD_INT 6300
6706: LESSEQUAL
6707: IFFALSE 6716
// SetAchievement ( ACH_ASPEED_1 ) ;
6709: LD_STRING ACH_ASPEED_1
6711: PPUSH
6712: CALL_OW 543
// YouWin ;
6716: CALL_OW 103
// end ; end_of_file
6720: PPOPN 6
6722: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6723: LD_VAR 0 1
6727: PUSH
6728: LD_EXP 16
6732: EQUAL
6733: IFFALSE 6742
// YouLost ( JMM ) ;
6735: LD_STRING JMM
6737: PPUSH
6738: CALL_OW 104
// end ;
6742: PPOPN 1
6744: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6745: LD_VAR 0 1
6749: PPUSH
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL 22712 0 2
// end ;
6759: PPOPN 2
6761: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL 22592 0 1
// if un = JMM then
6771: LD_VAR 0 1
6775: PUSH
6776: LD_EXP 16
6780: EQUAL
6781: IFFALSE 6790
// YouLost ( JMM ) ;
6783: LD_STRING JMM
6785: PPUSH
6786: CALL_OW 104
// end ; end_of_file end_of_file
6790: PPOPN 1
6792: END
// every 0 0$1 do
6793: GO 6795
6795: DISABLE
// begin enable ;
6796: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6797: LD_STRING updateTimer(
6799: PUSH
6800: LD_OWVAR 1
6804: STR
6805: PUSH
6806: LD_STRING );
6808: STR
6809: PPUSH
6810: CALL_OW 559
// end ;
6814: END
// export function SOS_MapStart ( ) ; begin
6815: LD_INT 0
6817: PPUSH
// if streamModeActive then
6818: LD_EXP 29
6822: IFFALSE 6831
// DefineStreamItems ( true ) ;
6824: LD_INT 1
6826: PPUSH
6827: CALL 8635 0 1
// UpdateLuaVariables ( ) ;
6831: CALL 6848 0 0
// UpdateFactoryWaypoints ( ) ;
6835: CALL 21496 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6839: CALL 21753 0 0
// end ;
6843: LD_VAR 0 1
6847: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
6848: LD_INT 0
6850: PPUSH
// if not globalGameSaveCounter then
6851: LD_EXP 28
6855: NOT
6856: IFFALSE 6867
// ToLua ( setGameSaveCounter(0) ) else
6858: LD_STRING setGameSaveCounter(0)
6860: PPUSH
6861: CALL_OW 559
6865: GO 6899
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6867: LD_ADDR_EXP 28
6871: PUSH
6872: LD_EXP 28
6876: PPUSH
6877: CALL 65710 0 1
6881: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6882: LD_STRING setGameSaveCounter(
6884: PUSH
6885: LD_EXP 28
6889: STR
6890: PUSH
6891: LD_STRING )
6893: STR
6894: PPUSH
6895: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6899: LD_STRING setGameDifficulty(
6901: PUSH
6902: LD_OWVAR 67
6906: STR
6907: PUSH
6908: LD_STRING )
6910: STR
6911: PPUSH
6912: CALL_OW 559
// end ;
6916: LD_VAR 0 1
6920: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6921: LD_INT 0
6923: PPUSH
// if p2 = stream_mode then
6924: LD_VAR 0 2
6928: PUSH
6929: LD_INT 100
6931: EQUAL
6932: IFFALSE 7935
// begin if not StreamModeActive then
6934: LD_EXP 29
6938: NOT
6939: IFFALSE 6949
// StreamModeActive := true ;
6941: LD_ADDR_EXP 29
6945: PUSH
6946: LD_INT 1
6948: ST_TO_ADDR
// if p3 = 0 then
6949: LD_VAR 0 3
6953: PUSH
6954: LD_INT 0
6956: EQUAL
6957: IFFALSE 6963
// InitStreamMode ;
6959: CALL 8171 0 0
// if p3 = 1 then
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 1
6970: EQUAL
6971: IFFALSE 6981
// sRocket := true ;
6973: LD_ADDR_EXP 34
6977: PUSH
6978: LD_INT 1
6980: ST_TO_ADDR
// if p3 = 2 then
6981: LD_VAR 0 3
6985: PUSH
6986: LD_INT 2
6988: EQUAL
6989: IFFALSE 6999
// sSpeed := true ;
6991: LD_ADDR_EXP 33
6995: PUSH
6996: LD_INT 1
6998: ST_TO_ADDR
// if p3 = 3 then
6999: LD_VAR 0 3
7003: PUSH
7004: LD_INT 3
7006: EQUAL
7007: IFFALSE 7017
// sEngine := true ;
7009: LD_ADDR_EXP 35
7013: PUSH
7014: LD_INT 1
7016: ST_TO_ADDR
// if p3 = 4 then
7017: LD_VAR 0 3
7021: PUSH
7022: LD_INT 4
7024: EQUAL
7025: IFFALSE 7035
// sSpec := true ;
7027: LD_ADDR_EXP 32
7031: PUSH
7032: LD_INT 1
7034: ST_TO_ADDR
// if p3 = 5 then
7035: LD_VAR 0 3
7039: PUSH
7040: LD_INT 5
7042: EQUAL
7043: IFFALSE 7053
// sLevel := true ;
7045: LD_ADDR_EXP 36
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// if p3 = 6 then
7053: LD_VAR 0 3
7057: PUSH
7058: LD_INT 6
7060: EQUAL
7061: IFFALSE 7071
// sArmoury := true ;
7063: LD_ADDR_EXP 37
7067: PUSH
7068: LD_INT 1
7070: ST_TO_ADDR
// if p3 = 7 then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_INT 7
7078: EQUAL
7079: IFFALSE 7089
// sRadar := true ;
7081: LD_ADDR_EXP 38
7085: PUSH
7086: LD_INT 1
7088: ST_TO_ADDR
// if p3 = 8 then
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 8
7096: EQUAL
7097: IFFALSE 7107
// sBunker := true ;
7099: LD_ADDR_EXP 39
7103: PUSH
7104: LD_INT 1
7106: ST_TO_ADDR
// if p3 = 9 then
7107: LD_VAR 0 3
7111: PUSH
7112: LD_INT 9
7114: EQUAL
7115: IFFALSE 7125
// sHack := true ;
7117: LD_ADDR_EXP 40
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// if p3 = 10 then
7125: LD_VAR 0 3
7129: PUSH
7130: LD_INT 10
7132: EQUAL
7133: IFFALSE 7143
// sFire := true ;
7135: LD_ADDR_EXP 41
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// if p3 = 11 then
7143: LD_VAR 0 3
7147: PUSH
7148: LD_INT 11
7150: EQUAL
7151: IFFALSE 7161
// sRefresh := true ;
7153: LD_ADDR_EXP 42
7157: PUSH
7158: LD_INT 1
7160: ST_TO_ADDR
// if p3 = 12 then
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 12
7168: EQUAL
7169: IFFALSE 7179
// sExp := true ;
7171: LD_ADDR_EXP 43
7175: PUSH
7176: LD_INT 1
7178: ST_TO_ADDR
// if p3 = 13 then
7179: LD_VAR 0 3
7183: PUSH
7184: LD_INT 13
7186: EQUAL
7187: IFFALSE 7197
// sDepot := true ;
7189: LD_ADDR_EXP 44
7193: PUSH
7194: LD_INT 1
7196: ST_TO_ADDR
// if p3 = 14 then
7197: LD_VAR 0 3
7201: PUSH
7202: LD_INT 14
7204: EQUAL
7205: IFFALSE 7215
// sFlag := true ;
7207: LD_ADDR_EXP 45
7211: PUSH
7212: LD_INT 1
7214: ST_TO_ADDR
// if p3 = 15 then
7215: LD_VAR 0 3
7219: PUSH
7220: LD_INT 15
7222: EQUAL
7223: IFFALSE 7233
// sKamikadze := true ;
7225: LD_ADDR_EXP 53
7229: PUSH
7230: LD_INT 1
7232: ST_TO_ADDR
// if p3 = 16 then
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 16
7240: EQUAL
7241: IFFALSE 7251
// sTroll := true ;
7243: LD_ADDR_EXP 54
7247: PUSH
7248: LD_INT 1
7250: ST_TO_ADDR
// if p3 = 17 then
7251: LD_VAR 0 3
7255: PUSH
7256: LD_INT 17
7258: EQUAL
7259: IFFALSE 7269
// sSlow := true ;
7261: LD_ADDR_EXP 55
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// if p3 = 18 then
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 18
7276: EQUAL
7277: IFFALSE 7287
// sLack := true ;
7279: LD_ADDR_EXP 56
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// if p3 = 19 then
7287: LD_VAR 0 3
7291: PUSH
7292: LD_INT 19
7294: EQUAL
7295: IFFALSE 7305
// sTank := true ;
7297: LD_ADDR_EXP 58
7301: PUSH
7302: LD_INT 1
7304: ST_TO_ADDR
// if p3 = 20 then
7305: LD_VAR 0 3
7309: PUSH
7310: LD_INT 20
7312: EQUAL
7313: IFFALSE 7323
// sRemote := true ;
7315: LD_ADDR_EXP 59
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// if p3 = 21 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 21
7330: EQUAL
7331: IFFALSE 7341
// sPowell := true ;
7333: LD_ADDR_EXP 60
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// if p3 = 22 then
7341: LD_VAR 0 3
7345: PUSH
7346: LD_INT 22
7348: EQUAL
7349: IFFALSE 7359
// sTeleport := true ;
7351: LD_ADDR_EXP 63
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// if p3 = 23 then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 23
7366: EQUAL
7367: IFFALSE 7377
// sOilTower := true ;
7369: LD_ADDR_EXP 65
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// if p3 = 24 then
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 24
7384: EQUAL
7385: IFFALSE 7395
// sShovel := true ;
7387: LD_ADDR_EXP 66
7391: PUSH
7392: LD_INT 1
7394: ST_TO_ADDR
// if p3 = 25 then
7395: LD_VAR 0 3
7399: PUSH
7400: LD_INT 25
7402: EQUAL
7403: IFFALSE 7413
// sSheik := true ;
7405: LD_ADDR_EXP 67
7409: PUSH
7410: LD_INT 1
7412: ST_TO_ADDR
// if p3 = 26 then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 26
7420: EQUAL
7421: IFFALSE 7431
// sEarthquake := true ;
7423: LD_ADDR_EXP 69
7427: PUSH
7428: LD_INT 1
7430: ST_TO_ADDR
// if p3 = 27 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 27
7438: EQUAL
7439: IFFALSE 7449
// sAI := true ;
7441: LD_ADDR_EXP 70
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if p3 = 28 then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_INT 28
7456: EQUAL
7457: IFFALSE 7467
// sCargo := true ;
7459: LD_ADDR_EXP 73
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// if p3 = 29 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 29
7474: EQUAL
7475: IFFALSE 7485
// sDLaser := true ;
7477: LD_ADDR_EXP 74
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 30 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 30
7492: EQUAL
7493: IFFALSE 7503
// sExchange := true ;
7495: LD_ADDR_EXP 75
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 31 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 31
7510: EQUAL
7511: IFFALSE 7521
// sFac := true ;
7513: LD_ADDR_EXP 76
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 32 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 32
7528: EQUAL
7529: IFFALSE 7539
// sPower := true ;
7531: LD_ADDR_EXP 77
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 33 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 33
7546: EQUAL
7547: IFFALSE 7557
// sRandom := true ;
7549: LD_ADDR_EXP 78
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 34 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 34
7564: EQUAL
7565: IFFALSE 7575
// sShield := true ;
7567: LD_ADDR_EXP 79
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 35 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 35
7582: EQUAL
7583: IFFALSE 7593
// sTime := true ;
7585: LD_ADDR_EXP 80
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 36 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 36
7600: EQUAL
7601: IFFALSE 7611
// sTools := true ;
7603: LD_ADDR_EXP 81
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 101 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 101
7618: EQUAL
7619: IFFALSE 7629
// sSold := true ;
7621: LD_ADDR_EXP 46
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 102 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 102
7636: EQUAL
7637: IFFALSE 7647
// sDiff := true ;
7639: LD_ADDR_EXP 47
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 103 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 103
7654: EQUAL
7655: IFFALSE 7665
// sFog := true ;
7657: LD_ADDR_EXP 50
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 104 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 104
7672: EQUAL
7673: IFFALSE 7683
// sReset := true ;
7675: LD_ADDR_EXP 51
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 105 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 105
7690: EQUAL
7691: IFFALSE 7701
// sSun := true ;
7693: LD_ADDR_EXP 52
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 106 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 106
7708: EQUAL
7709: IFFALSE 7719
// sTiger := true ;
7711: LD_ADDR_EXP 48
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 107 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 107
7726: EQUAL
7727: IFFALSE 7737
// sBomb := true ;
7729: LD_ADDR_EXP 49
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 108 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 108
7744: EQUAL
7745: IFFALSE 7755
// sWound := true ;
7747: LD_ADDR_EXP 57
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 109 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 109
7762: EQUAL
7763: IFFALSE 7773
// sBetray := true ;
7765: LD_ADDR_EXP 61
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 110 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 110
7780: EQUAL
7781: IFFALSE 7791
// sContamin := true ;
7783: LD_ADDR_EXP 62
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 111 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 111
7798: EQUAL
7799: IFFALSE 7809
// sOil := true ;
7801: LD_ADDR_EXP 64
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 112 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 112
7816: EQUAL
7817: IFFALSE 7827
// sStu := true ;
7819: LD_ADDR_EXP 68
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 113 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 113
7834: EQUAL
7835: IFFALSE 7845
// sBazooka := true ;
7837: LD_ADDR_EXP 71
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 114 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 114
7852: EQUAL
7853: IFFALSE 7863
// sMortar := true ;
7855: LD_ADDR_EXP 72
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 115 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 115
7870: EQUAL
7871: IFFALSE 7881
// sRanger := true ;
7873: LD_ADDR_EXP 82
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 116 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 116
7888: EQUAL
7889: IFFALSE 7899
// sComputer := true ;
7891: LD_ADDR_EXP 83
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 117 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 117
7906: EQUAL
7907: IFFALSE 7917
// s30 := true ;
7909: LD_ADDR_EXP 84
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 118 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 118
7924: EQUAL
7925: IFFALSE 7935
// s60 := true ;
7927: LD_ADDR_EXP 85
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// end ; if p2 = hack_mode then
7935: LD_VAR 0 2
7939: PUSH
7940: LD_INT 101
7942: EQUAL
7943: IFFALSE 8071
// begin case p3 of 1 :
7945: LD_VAR 0 3
7949: PUSH
7950: LD_INT 1
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 7965
7958: POP
// hHackUnlimitedResources ; 2 :
7959: CALL 20242 0 0
7963: GO 8071
7965: LD_INT 2
7967: DOUBLE
7968: EQUAL
7969: IFTRUE 7973
7971: GO 7980
7973: POP
// hHackSetLevel10 ; 3 :
7974: CALL 20375 0 0
7978: GO 8071
7980: LD_INT 3
7982: DOUBLE
7983: EQUAL
7984: IFTRUE 7988
7986: GO 7995
7988: POP
// hHackSetLevel10YourUnits ; 4 :
7989: CALL 20460 0 0
7993: GO 8071
7995: LD_INT 4
7997: DOUBLE
7998: EQUAL
7999: IFTRUE 8003
8001: GO 8010
8003: POP
// hHackInvincible ; 5 :
8004: CALL 20908 0 0
8008: GO 8071
8010: LD_INT 5
8012: DOUBLE
8013: EQUAL
8014: IFTRUE 8018
8016: GO 8025
8018: POP
// hHackInvisible ; 6 :
8019: CALL 21019 0 0
8023: GO 8071
8025: LD_INT 6
8027: DOUBLE
8028: EQUAL
8029: IFTRUE 8033
8031: GO 8040
8033: POP
// hHackChangeYourSide ; 7 :
8034: CALL 21076 0 0
8038: GO 8071
8040: LD_INT 7
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8055
8048: POP
// hHackChangeUnitSide ; 8 :
8049: CALL 21118 0 0
8053: GO 8071
8055: LD_INT 8
8057: DOUBLE
8058: EQUAL
8059: IFTRUE 8063
8061: GO 8070
8063: POP
// hHackFog ; end ;
8064: CALL 21219 0 0
8068: GO 8071
8070: POP
// end ; if p2 = game_save_mode then
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 102
8078: EQUAL
8079: IFFALSE 8144
// begin if p3 = 1 then
8081: LD_VAR 0 3
8085: PUSH
8086: LD_INT 1
8088: EQUAL
8089: IFFALSE 8101
// globalGameSaveCounter := p4 ;
8091: LD_ADDR_EXP 28
8095: PUSH
8096: LD_VAR 0 4
8100: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8101: LD_VAR 0 3
8105: PUSH
8106: LD_INT 2
8108: EQUAL
8109: PUSH
8110: LD_EXP 28
8114: AND
8115: IFFALSE 8134
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8117: LD_STRING setGameSaveCounter(
8119: PUSH
8120: LD_EXP 28
8124: STR
8125: PUSH
8126: LD_STRING )
8128: STR
8129: PPUSH
8130: CALL_OW 559
// display_strings := globalGameSaveCounter ;
8134: LD_ADDR_OWVAR 47
8138: PUSH
8139: LD_EXP 28
8143: ST_TO_ADDR
// end ; end ;
8144: LD_VAR 0 7
8148: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8149: GO 8151
8151: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8152: LD_STRING initStreamRollete();
8154: PPUSH
8155: CALL_OW 559
// InitStreamMode ;
8159: CALL 8171 0 0
// DefineStreamItems ( false ) ;
8163: LD_INT 0
8165: PPUSH
8166: CALL 8635 0 1
// end ;
8170: END
// function InitStreamMode ; begin
8171: LD_INT 0
8173: PPUSH
// streamModeActive := false ;
8174: LD_ADDR_EXP 29
8178: PUSH
8179: LD_INT 0
8181: ST_TO_ADDR
// normalCounter := 36 ;
8182: LD_ADDR_EXP 30
8186: PUSH
8187: LD_INT 36
8189: ST_TO_ADDR
// hardcoreCounter := 18 ;
8190: LD_ADDR_EXP 31
8194: PUSH
8195: LD_INT 18
8197: ST_TO_ADDR
// sRocket := false ;
8198: LD_ADDR_EXP 34
8202: PUSH
8203: LD_INT 0
8205: ST_TO_ADDR
// sSpeed := false ;
8206: LD_ADDR_EXP 33
8210: PUSH
8211: LD_INT 0
8213: ST_TO_ADDR
// sEngine := false ;
8214: LD_ADDR_EXP 35
8218: PUSH
8219: LD_INT 0
8221: ST_TO_ADDR
// sSpec := false ;
8222: LD_ADDR_EXP 32
8226: PUSH
8227: LD_INT 0
8229: ST_TO_ADDR
// sLevel := false ;
8230: LD_ADDR_EXP 36
8234: PUSH
8235: LD_INT 0
8237: ST_TO_ADDR
// sArmoury := false ;
8238: LD_ADDR_EXP 37
8242: PUSH
8243: LD_INT 0
8245: ST_TO_ADDR
// sRadar := false ;
8246: LD_ADDR_EXP 38
8250: PUSH
8251: LD_INT 0
8253: ST_TO_ADDR
// sBunker := false ;
8254: LD_ADDR_EXP 39
8258: PUSH
8259: LD_INT 0
8261: ST_TO_ADDR
// sHack := false ;
8262: LD_ADDR_EXP 40
8266: PUSH
8267: LD_INT 0
8269: ST_TO_ADDR
// sFire := false ;
8270: LD_ADDR_EXP 41
8274: PUSH
8275: LD_INT 0
8277: ST_TO_ADDR
// sRefresh := false ;
8278: LD_ADDR_EXP 42
8282: PUSH
8283: LD_INT 0
8285: ST_TO_ADDR
// sExp := false ;
8286: LD_ADDR_EXP 43
8290: PUSH
8291: LD_INT 0
8293: ST_TO_ADDR
// sDepot := false ;
8294: LD_ADDR_EXP 44
8298: PUSH
8299: LD_INT 0
8301: ST_TO_ADDR
// sFlag := false ;
8302: LD_ADDR_EXP 45
8306: PUSH
8307: LD_INT 0
8309: ST_TO_ADDR
// sKamikadze := false ;
8310: LD_ADDR_EXP 53
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// sTroll := false ;
8318: LD_ADDR_EXP 54
8322: PUSH
8323: LD_INT 0
8325: ST_TO_ADDR
// sSlow := false ;
8326: LD_ADDR_EXP 55
8330: PUSH
8331: LD_INT 0
8333: ST_TO_ADDR
// sLack := false ;
8334: LD_ADDR_EXP 56
8338: PUSH
8339: LD_INT 0
8341: ST_TO_ADDR
// sTank := false ;
8342: LD_ADDR_EXP 58
8346: PUSH
8347: LD_INT 0
8349: ST_TO_ADDR
// sRemote := false ;
8350: LD_ADDR_EXP 59
8354: PUSH
8355: LD_INT 0
8357: ST_TO_ADDR
// sPowell := false ;
8358: LD_ADDR_EXP 60
8362: PUSH
8363: LD_INT 0
8365: ST_TO_ADDR
// sTeleport := false ;
8366: LD_ADDR_EXP 63
8370: PUSH
8371: LD_INT 0
8373: ST_TO_ADDR
// sOilTower := false ;
8374: LD_ADDR_EXP 65
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// sShovel := false ;
8382: LD_ADDR_EXP 66
8386: PUSH
8387: LD_INT 0
8389: ST_TO_ADDR
// sSheik := false ;
8390: LD_ADDR_EXP 67
8394: PUSH
8395: LD_INT 0
8397: ST_TO_ADDR
// sEarthquake := false ;
8398: LD_ADDR_EXP 69
8402: PUSH
8403: LD_INT 0
8405: ST_TO_ADDR
// sAI := false ;
8406: LD_ADDR_EXP 70
8410: PUSH
8411: LD_INT 0
8413: ST_TO_ADDR
// sCargo := false ;
8414: LD_ADDR_EXP 73
8418: PUSH
8419: LD_INT 0
8421: ST_TO_ADDR
// sDLaser := false ;
8422: LD_ADDR_EXP 74
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// sExchange := false ;
8430: LD_ADDR_EXP 75
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// sFac := false ;
8438: LD_ADDR_EXP 76
8442: PUSH
8443: LD_INT 0
8445: ST_TO_ADDR
// sPower := false ;
8446: LD_ADDR_EXP 77
8450: PUSH
8451: LD_INT 0
8453: ST_TO_ADDR
// sRandom := false ;
8454: LD_ADDR_EXP 78
8458: PUSH
8459: LD_INT 0
8461: ST_TO_ADDR
// sShield := false ;
8462: LD_ADDR_EXP 79
8466: PUSH
8467: LD_INT 0
8469: ST_TO_ADDR
// sTime := false ;
8470: LD_ADDR_EXP 80
8474: PUSH
8475: LD_INT 0
8477: ST_TO_ADDR
// sTools := false ;
8478: LD_ADDR_EXP 81
8482: PUSH
8483: LD_INT 0
8485: ST_TO_ADDR
// sSold := false ;
8486: LD_ADDR_EXP 46
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// sDiff := false ;
8494: LD_ADDR_EXP 47
8498: PUSH
8499: LD_INT 0
8501: ST_TO_ADDR
// sFog := false ;
8502: LD_ADDR_EXP 50
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// sReset := false ;
8510: LD_ADDR_EXP 51
8514: PUSH
8515: LD_INT 0
8517: ST_TO_ADDR
// sSun := false ;
8518: LD_ADDR_EXP 52
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// sTiger := false ;
8526: LD_ADDR_EXP 48
8530: PUSH
8531: LD_INT 0
8533: ST_TO_ADDR
// sBomb := false ;
8534: LD_ADDR_EXP 49
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// sWound := false ;
8542: LD_ADDR_EXP 57
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// sBetray := false ;
8550: LD_ADDR_EXP 61
8554: PUSH
8555: LD_INT 0
8557: ST_TO_ADDR
// sContamin := false ;
8558: LD_ADDR_EXP 62
8562: PUSH
8563: LD_INT 0
8565: ST_TO_ADDR
// sOil := false ;
8566: LD_ADDR_EXP 64
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// sStu := false ;
8574: LD_ADDR_EXP 68
8578: PUSH
8579: LD_INT 0
8581: ST_TO_ADDR
// sBazooka := false ;
8582: LD_ADDR_EXP 71
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// sMortar := false ;
8590: LD_ADDR_EXP 72
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// sRanger := false ;
8598: LD_ADDR_EXP 82
8602: PUSH
8603: LD_INT 0
8605: ST_TO_ADDR
// sComputer := false ;
8606: LD_ADDR_EXP 83
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// s30 := false ;
8614: LD_ADDR_EXP 84
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// s60 := false ;
8622: LD_ADDR_EXP 85
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// end ;
8630: LD_VAR 0 1
8634: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8635: LD_INT 0
8637: PPUSH
8638: PPUSH
8639: PPUSH
8640: PPUSH
8641: PPUSH
8642: PPUSH
8643: PPUSH
// result := [ ] ;
8644: LD_ADDR_VAR 0 2
8648: PUSH
8649: EMPTY
8650: ST_TO_ADDR
// if campaign_id = 1 then
8651: LD_OWVAR 69
8655: PUSH
8656: LD_INT 1
8658: EQUAL
8659: IFFALSE 11825
// begin case mission_number of 1 :
8661: LD_OWVAR 70
8665: PUSH
8666: LD_INT 1
8668: DOUBLE
8669: EQUAL
8670: IFTRUE 8674
8672: GO 8750
8674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8675: LD_ADDR_VAR 0 2
8679: PUSH
8680: LD_INT 2
8682: PUSH
8683: LD_INT 4
8685: PUSH
8686: LD_INT 11
8688: PUSH
8689: LD_INT 12
8691: PUSH
8692: LD_INT 15
8694: PUSH
8695: LD_INT 16
8697: PUSH
8698: LD_INT 22
8700: PUSH
8701: LD_INT 23
8703: PUSH
8704: LD_INT 26
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 101
8720: PUSH
8721: LD_INT 102
8723: PUSH
8724: LD_INT 106
8726: PUSH
8727: LD_INT 116
8729: PUSH
8730: LD_INT 117
8732: PUSH
8733: LD_INT 118
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: ST_TO_ADDR
8748: GO 11823
8750: LD_INT 2
8752: DOUBLE
8753: EQUAL
8754: IFTRUE 8758
8756: GO 8842
8758: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 23
8787: PUSH
8788: LD_INT 26
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 101
8804: PUSH
8805: LD_INT 102
8807: PUSH
8808: LD_INT 105
8810: PUSH
8811: LD_INT 106
8813: PUSH
8814: LD_INT 108
8816: PUSH
8817: LD_INT 116
8819: PUSH
8820: LD_INT 117
8822: PUSH
8823: LD_INT 118
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 11823
8842: LD_INT 3
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 8938
8850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: LD_INT 4
8861: PUSH
8862: LD_INT 5
8864: PUSH
8865: LD_INT 11
8867: PUSH
8868: LD_INT 12
8870: PUSH
8871: LD_INT 15
8873: PUSH
8874: LD_INT 16
8876: PUSH
8877: LD_INT 22
8879: PUSH
8880: LD_INT 26
8882: PUSH
8883: LD_INT 36
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 101
8900: PUSH
8901: LD_INT 102
8903: PUSH
8904: LD_INT 105
8906: PUSH
8907: LD_INT 106
8909: PUSH
8910: LD_INT 108
8912: PUSH
8913: LD_INT 116
8915: PUSH
8916: LD_INT 117
8918: PUSH
8919: LD_INT 118
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
8936: GO 11823
8938: LD_INT 4
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 9042
8946: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8947: LD_ADDR_VAR 0 2
8951: PUSH
8952: LD_INT 2
8954: PUSH
8955: LD_INT 4
8957: PUSH
8958: LD_INT 5
8960: PUSH
8961: LD_INT 8
8963: PUSH
8964: LD_INT 11
8966: PUSH
8967: LD_INT 12
8969: PUSH
8970: LD_INT 15
8972: PUSH
8973: LD_INT 16
8975: PUSH
8976: LD_INT 22
8978: PUSH
8979: LD_INT 23
8981: PUSH
8982: LD_INT 26
8984: PUSH
8985: LD_INT 36
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 101
9004: PUSH
9005: LD_INT 102
9007: PUSH
9008: LD_INT 105
9010: PUSH
9011: LD_INT 106
9013: PUSH
9014: LD_INT 108
9016: PUSH
9017: LD_INT 116
9019: PUSH
9020: LD_INT 117
9022: PUSH
9023: LD_INT 118
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: ST_TO_ADDR
9040: GO 11823
9042: LD_INT 5
9044: DOUBLE
9045: EQUAL
9046: IFTRUE 9050
9048: GO 9162
9050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9051: LD_ADDR_VAR 0 2
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 4
9061: PUSH
9062: LD_INT 5
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: LD_INT 8
9070: PUSH
9071: LD_INT 11
9073: PUSH
9074: LD_INT 12
9076: PUSH
9077: LD_INT 15
9079: PUSH
9080: LD_INT 16
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 23
9088: PUSH
9089: LD_INT 25
9091: PUSH
9092: LD_INT 26
9094: PUSH
9095: LD_INT 36
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 105
9122: PUSH
9123: LD_INT 106
9125: PUSH
9126: LD_INT 108
9128: PUSH
9129: LD_INT 109
9131: PUSH
9132: LD_INT 112
9134: PUSH
9135: LD_INT 116
9137: PUSH
9138: LD_INT 117
9140: PUSH
9141: LD_INT 118
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: ST_TO_ADDR
9160: GO 11823
9162: LD_INT 6
9164: DOUBLE
9165: EQUAL
9166: IFTRUE 9170
9168: GO 9302
9170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9171: LD_ADDR_VAR 0 2
9175: PUSH
9176: LD_INT 2
9178: PUSH
9179: LD_INT 4
9181: PUSH
9182: LD_INT 5
9184: PUSH
9185: LD_INT 6
9187: PUSH
9188: LD_INT 8
9190: PUSH
9191: LD_INT 11
9193: PUSH
9194: LD_INT 12
9196: PUSH
9197: LD_INT 15
9199: PUSH
9200: LD_INT 16
9202: PUSH
9203: LD_INT 20
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 22
9211: PUSH
9212: LD_INT 23
9214: PUSH
9215: LD_INT 25
9217: PUSH
9218: LD_INT 26
9220: PUSH
9221: LD_INT 30
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: LD_INT 32
9229: PUSH
9230: LD_INT 36
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 101
9256: PUSH
9257: LD_INT 102
9259: PUSH
9260: LD_INT 105
9262: PUSH
9263: LD_INT 106
9265: PUSH
9266: LD_INT 108
9268: PUSH
9269: LD_INT 109
9271: PUSH
9272: LD_INT 112
9274: PUSH
9275: LD_INT 116
9277: PUSH
9278: LD_INT 117
9280: PUSH
9281: LD_INT 118
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: ST_TO_ADDR
9300: GO 11823
9302: LD_INT 7
9304: DOUBLE
9305: EQUAL
9306: IFTRUE 9310
9308: GO 9422
9310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9311: LD_ADDR_VAR 0 2
9315: PUSH
9316: LD_INT 2
9318: PUSH
9319: LD_INT 4
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: LD_INT 7
9327: PUSH
9328: LD_INT 11
9330: PUSH
9331: LD_INT 12
9333: PUSH
9334: LD_INT 15
9336: PUSH
9337: LD_INT 16
9339: PUSH
9340: LD_INT 20
9342: PUSH
9343: LD_INT 21
9345: PUSH
9346: LD_INT 22
9348: PUSH
9349: LD_INT 23
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 26
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 101
9376: PUSH
9377: LD_INT 102
9379: PUSH
9380: LD_INT 103
9382: PUSH
9383: LD_INT 105
9385: PUSH
9386: LD_INT 106
9388: PUSH
9389: LD_INT 108
9391: PUSH
9392: LD_INT 112
9394: PUSH
9395: LD_INT 116
9397: PUSH
9398: LD_INT 117
9400: PUSH
9401: LD_INT 118
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: ST_TO_ADDR
9420: GO 11823
9422: LD_INT 8
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9570
9430: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_INT 2
9438: PUSH
9439: LD_INT 4
9441: PUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 7
9450: PUSH
9451: LD_INT 8
9453: PUSH
9454: LD_INT 11
9456: PUSH
9457: LD_INT 12
9459: PUSH
9460: LD_INT 15
9462: PUSH
9463: LD_INT 16
9465: PUSH
9466: LD_INT 20
9468: PUSH
9469: LD_INT 21
9471: PUSH
9472: LD_INT 22
9474: PUSH
9475: LD_INT 23
9477: PUSH
9478: LD_INT 25
9480: PUSH
9481: LD_INT 26
9483: PUSH
9484: LD_INT 30
9486: PUSH
9487: LD_INT 31
9489: PUSH
9490: LD_INT 32
9492: PUSH
9493: LD_INT 36
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 101
9520: PUSH
9521: LD_INT 102
9523: PUSH
9524: LD_INT 103
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 108
9535: PUSH
9536: LD_INT 109
9538: PUSH
9539: LD_INT 112
9541: PUSH
9542: LD_INT 116
9544: PUSH
9545: LD_INT 117
9547: PUSH
9548: LD_INT 118
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: ST_TO_ADDR
9568: GO 11823
9570: LD_INT 9
9572: DOUBLE
9573: EQUAL
9574: IFTRUE 9578
9576: GO 9726
9578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9579: LD_ADDR_VAR 0 2
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: LD_INT 4
9589: PUSH
9590: LD_INT 5
9592: PUSH
9593: LD_INT 6
9595: PUSH
9596: LD_INT 7
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: LD_INT 11
9604: PUSH
9605: LD_INT 12
9607: PUSH
9608: LD_INT 15
9610: PUSH
9611: LD_INT 16
9613: PUSH
9614: LD_INT 20
9616: PUSH
9617: LD_INT 21
9619: PUSH
9620: LD_INT 22
9622: PUSH
9623: LD_INT 23
9625: PUSH
9626: LD_INT 25
9628: PUSH
9629: LD_INT 26
9631: PUSH
9632: LD_INT 28
9634: PUSH
9635: LD_INT 30
9637: PUSH
9638: LD_INT 31
9640: PUSH
9641: LD_INT 32
9643: PUSH
9644: LD_INT 36
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 101
9672: PUSH
9673: LD_INT 102
9675: PUSH
9676: LD_INT 103
9678: PUSH
9679: LD_INT 105
9681: PUSH
9682: LD_INT 106
9684: PUSH
9685: LD_INT 108
9687: PUSH
9688: LD_INT 109
9690: PUSH
9691: LD_INT 112
9693: PUSH
9694: LD_INT 114
9696: PUSH
9697: LD_INT 116
9699: PUSH
9700: LD_INT 117
9702: PUSH
9703: LD_INT 118
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: ST_TO_ADDR
9724: GO 11823
9726: LD_INT 10
9728: DOUBLE
9729: EQUAL
9730: IFTRUE 9734
9732: GO 9930
9734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_INT 2
9742: PUSH
9743: LD_INT 4
9745: PUSH
9746: LD_INT 5
9748: PUSH
9749: LD_INT 6
9751: PUSH
9752: LD_INT 7
9754: PUSH
9755: LD_INT 8
9757: PUSH
9758: LD_INT 9
9760: PUSH
9761: LD_INT 10
9763: PUSH
9764: LD_INT 11
9766: PUSH
9767: LD_INT 12
9769: PUSH
9770: LD_INT 13
9772: PUSH
9773: LD_INT 14
9775: PUSH
9776: LD_INT 15
9778: PUSH
9779: LD_INT 16
9781: PUSH
9782: LD_INT 17
9784: PUSH
9785: LD_INT 18
9787: PUSH
9788: LD_INT 19
9790: PUSH
9791: LD_INT 20
9793: PUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 22
9799: PUSH
9800: LD_INT 23
9802: PUSH
9803: LD_INT 24
9805: PUSH
9806: LD_INT 25
9808: PUSH
9809: LD_INT 26
9811: PUSH
9812: LD_INT 28
9814: PUSH
9815: LD_INT 30
9817: PUSH
9818: LD_INT 31
9820: PUSH
9821: LD_INT 32
9823: PUSH
9824: LD_INT 36
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 101
9860: PUSH
9861: LD_INT 102
9863: PUSH
9864: LD_INT 103
9866: PUSH
9867: LD_INT 104
9869: PUSH
9870: LD_INT 105
9872: PUSH
9873: LD_INT 106
9875: PUSH
9876: LD_INT 107
9878: PUSH
9879: LD_INT 108
9881: PUSH
9882: LD_INT 109
9884: PUSH
9885: LD_INT 110
9887: PUSH
9888: LD_INT 111
9890: PUSH
9891: LD_INT 112
9893: PUSH
9894: LD_INT 114
9896: PUSH
9897: LD_INT 116
9899: PUSH
9900: LD_INT 117
9902: PUSH
9903: LD_INT 118
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
9928: GO 11823
9930: LD_INT 11
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 10142
9938: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: LD_INT 4
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 6
9958: PUSH
9959: LD_INT 7
9961: PUSH
9962: LD_INT 8
9964: PUSH
9965: LD_INT 9
9967: PUSH
9968: LD_INT 10
9970: PUSH
9971: LD_INT 11
9973: PUSH
9974: LD_INT 12
9976: PUSH
9977: LD_INT 13
9979: PUSH
9980: LD_INT 14
9982: PUSH
9983: LD_INT 15
9985: PUSH
9986: LD_INT 16
9988: PUSH
9989: LD_INT 17
9991: PUSH
9992: LD_INT 18
9994: PUSH
9995: LD_INT 19
9997: PUSH
9998: LD_INT 20
10000: PUSH
10001: LD_INT 21
10003: PUSH
10004: LD_INT 22
10006: PUSH
10007: LD_INT 23
10009: PUSH
10010: LD_INT 24
10012: PUSH
10013: LD_INT 25
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: LD_INT 28
10021: PUSH
10022: LD_INT 30
10024: PUSH
10025: LD_INT 31
10027: PUSH
10028: LD_INT 32
10030: PUSH
10031: LD_INT 34
10033: PUSH
10034: LD_INT 36
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 101
10072: PUSH
10073: LD_INT 102
10075: PUSH
10076: LD_INT 103
10078: PUSH
10079: LD_INT 104
10081: PUSH
10082: LD_INT 105
10084: PUSH
10085: LD_INT 106
10087: PUSH
10088: LD_INT 107
10090: PUSH
10091: LD_INT 108
10093: PUSH
10094: LD_INT 109
10096: PUSH
10097: LD_INT 110
10099: PUSH
10100: LD_INT 111
10102: PUSH
10103: LD_INT 112
10105: PUSH
10106: LD_INT 114
10108: PUSH
10109: LD_INT 116
10111: PUSH
10112: LD_INT 117
10114: PUSH
10115: LD_INT 118
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: ST_TO_ADDR
10140: GO 11823
10142: LD_INT 12
10144: DOUBLE
10145: EQUAL
10146: IFTRUE 10150
10148: GO 10370
10150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: LD_INT 5
10170: PUSH
10171: LD_INT 6
10173: PUSH
10174: LD_INT 7
10176: PUSH
10177: LD_INT 8
10179: PUSH
10180: LD_INT 9
10182: PUSH
10183: LD_INT 10
10185: PUSH
10186: LD_INT 11
10188: PUSH
10189: LD_INT 12
10191: PUSH
10192: LD_INT 13
10194: PUSH
10195: LD_INT 14
10197: PUSH
10198: LD_INT 15
10200: PUSH
10201: LD_INT 16
10203: PUSH
10204: LD_INT 17
10206: PUSH
10207: LD_INT 18
10209: PUSH
10210: LD_INT 19
10212: PUSH
10213: LD_INT 20
10215: PUSH
10216: LD_INT 21
10218: PUSH
10219: LD_INT 22
10221: PUSH
10222: LD_INT 23
10224: PUSH
10225: LD_INT 24
10227: PUSH
10228: LD_INT 25
10230: PUSH
10231: LD_INT 26
10233: PUSH
10234: LD_INT 27
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: LD_INT 30
10242: PUSH
10243: LD_INT 31
10245: PUSH
10246: LD_INT 32
10248: PUSH
10249: LD_INT 33
10251: PUSH
10252: LD_INT 34
10254: PUSH
10255: LD_INT 36
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 101
10296: PUSH
10297: LD_INT 102
10299: PUSH
10300: LD_INT 103
10302: PUSH
10303: LD_INT 104
10305: PUSH
10306: LD_INT 105
10308: PUSH
10309: LD_INT 106
10311: PUSH
10312: LD_INT 107
10314: PUSH
10315: LD_INT 108
10317: PUSH
10318: LD_INT 109
10320: PUSH
10321: LD_INT 110
10323: PUSH
10324: LD_INT 111
10326: PUSH
10327: LD_INT 112
10329: PUSH
10330: LD_INT 113
10332: PUSH
10333: LD_INT 114
10335: PUSH
10336: LD_INT 116
10338: PUSH
10339: LD_INT 117
10341: PUSH
10342: LD_INT 118
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: ST_TO_ADDR
10368: GO 11823
10370: LD_INT 13
10372: DOUBLE
10373: EQUAL
10374: IFTRUE 10378
10376: GO 10586
10378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10379: LD_ADDR_VAR 0 2
10383: PUSH
10384: LD_INT 1
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: LD_INT 4
10395: PUSH
10396: LD_INT 5
10398: PUSH
10399: LD_INT 8
10401: PUSH
10402: LD_INT 9
10404: PUSH
10405: LD_INT 10
10407: PUSH
10408: LD_INT 11
10410: PUSH
10411: LD_INT 12
10413: PUSH
10414: LD_INT 14
10416: PUSH
10417: LD_INT 15
10419: PUSH
10420: LD_INT 16
10422: PUSH
10423: LD_INT 17
10425: PUSH
10426: LD_INT 18
10428: PUSH
10429: LD_INT 19
10431: PUSH
10432: LD_INT 20
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 24
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 26
10452: PUSH
10453: LD_INT 27
10455: PUSH
10456: LD_INT 28
10458: PUSH
10459: LD_INT 30
10461: PUSH
10462: LD_INT 31
10464: PUSH
10465: LD_INT 32
10467: PUSH
10468: LD_INT 33
10470: PUSH
10471: LD_INT 34
10473: PUSH
10474: LD_INT 36
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 101
10512: PUSH
10513: LD_INT 102
10515: PUSH
10516: LD_INT 103
10518: PUSH
10519: LD_INT 104
10521: PUSH
10522: LD_INT 105
10524: PUSH
10525: LD_INT 106
10527: PUSH
10528: LD_INT 107
10530: PUSH
10531: LD_INT 108
10533: PUSH
10534: LD_INT 109
10536: PUSH
10537: LD_INT 110
10539: PUSH
10540: LD_INT 111
10542: PUSH
10543: LD_INT 112
10545: PUSH
10546: LD_INT 113
10548: PUSH
10549: LD_INT 114
10551: PUSH
10552: LD_INT 116
10554: PUSH
10555: LD_INT 117
10557: PUSH
10558: LD_INT 118
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: ST_TO_ADDR
10584: GO 11823
10586: LD_INT 14
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10818
10594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 3
10608: PUSH
10609: LD_INT 4
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: LD_INT 8
10623: PUSH
10624: LD_INT 9
10626: PUSH
10627: LD_INT 10
10629: PUSH
10630: LD_INT 11
10632: PUSH
10633: LD_INT 12
10635: PUSH
10636: LD_INT 13
10638: PUSH
10639: LD_INT 14
10641: PUSH
10642: LD_INT 15
10644: PUSH
10645: LD_INT 16
10647: PUSH
10648: LD_INT 17
10650: PUSH
10651: LD_INT 18
10653: PUSH
10654: LD_INT 19
10656: PUSH
10657: LD_INT 20
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 22
10665: PUSH
10666: LD_INT 23
10668: PUSH
10669: LD_INT 24
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 26
10677: PUSH
10678: LD_INT 27
10680: PUSH
10681: LD_INT 28
10683: PUSH
10684: LD_INT 29
10686: PUSH
10687: LD_INT 30
10689: PUSH
10690: LD_INT 31
10692: PUSH
10693: LD_INT 32
10695: PUSH
10696: LD_INT 33
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 36
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 101
10744: PUSH
10745: LD_INT 102
10747: PUSH
10748: LD_INT 103
10750: PUSH
10751: LD_INT 104
10753: PUSH
10754: LD_INT 105
10756: PUSH
10757: LD_INT 106
10759: PUSH
10760: LD_INT 107
10762: PUSH
10763: LD_INT 108
10765: PUSH
10766: LD_INT 109
10768: PUSH
10769: LD_INT 110
10771: PUSH
10772: LD_INT 111
10774: PUSH
10775: LD_INT 112
10777: PUSH
10778: LD_INT 113
10780: PUSH
10781: LD_INT 114
10783: PUSH
10784: LD_INT 116
10786: PUSH
10787: LD_INT 117
10789: PUSH
10790: LD_INT 118
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: ST_TO_ADDR
10816: GO 11823
10818: LD_INT 15
10820: DOUBLE
10821: EQUAL
10822: IFTRUE 10826
10824: GO 11050
10826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10827: LD_ADDR_VAR 0 2
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: LD_INT 4
10843: PUSH
10844: LD_INT 5
10846: PUSH
10847: LD_INT 6
10849: PUSH
10850: LD_INT 7
10852: PUSH
10853: LD_INT 8
10855: PUSH
10856: LD_INT 9
10858: PUSH
10859: LD_INT 10
10861: PUSH
10862: LD_INT 11
10864: PUSH
10865: LD_INT 12
10867: PUSH
10868: LD_INT 13
10870: PUSH
10871: LD_INT 14
10873: PUSH
10874: LD_INT 15
10876: PUSH
10877: LD_INT 16
10879: PUSH
10880: LD_INT 17
10882: PUSH
10883: LD_INT 18
10885: PUSH
10886: LD_INT 19
10888: PUSH
10889: LD_INT 20
10891: PUSH
10892: LD_INT 21
10894: PUSH
10895: LD_INT 22
10897: PUSH
10898: LD_INT 23
10900: PUSH
10901: LD_INT 24
10903: PUSH
10904: LD_INT 25
10906: PUSH
10907: LD_INT 26
10909: PUSH
10910: LD_INT 27
10912: PUSH
10913: LD_INT 28
10915: PUSH
10916: LD_INT 29
10918: PUSH
10919: LD_INT 30
10921: PUSH
10922: LD_INT 31
10924: PUSH
10925: LD_INT 32
10927: PUSH
10928: LD_INT 33
10930: PUSH
10931: LD_INT 34
10933: PUSH
10934: LD_INT 36
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 101
10976: PUSH
10977: LD_INT 102
10979: PUSH
10980: LD_INT 103
10982: PUSH
10983: LD_INT 104
10985: PUSH
10986: LD_INT 105
10988: PUSH
10989: LD_INT 106
10991: PUSH
10992: LD_INT 107
10994: PUSH
10995: LD_INT 108
10997: PUSH
10998: LD_INT 109
11000: PUSH
11001: LD_INT 110
11003: PUSH
11004: LD_INT 111
11006: PUSH
11007: LD_INT 112
11009: PUSH
11010: LD_INT 113
11012: PUSH
11013: LD_INT 114
11015: PUSH
11016: LD_INT 116
11018: PUSH
11019: LD_INT 117
11021: PUSH
11022: LD_INT 118
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: ST_TO_ADDR
11048: GO 11823
11050: LD_INT 16
11052: DOUBLE
11053: EQUAL
11054: IFTRUE 11058
11056: GO 11194
11058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11059: LD_ADDR_VAR 0 2
11063: PUSH
11064: LD_INT 2
11066: PUSH
11067: LD_INT 4
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: LD_INT 7
11075: PUSH
11076: LD_INT 11
11078: PUSH
11079: LD_INT 12
11081: PUSH
11082: LD_INT 15
11084: PUSH
11085: LD_INT 16
11087: PUSH
11088: LD_INT 20
11090: PUSH
11091: LD_INT 21
11093: PUSH
11094: LD_INT 22
11096: PUSH
11097: LD_INT 23
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 26
11105: PUSH
11106: LD_INT 30
11108: PUSH
11109: LD_INT 31
11111: PUSH
11112: LD_INT 32
11114: PUSH
11115: LD_INT 33
11117: PUSH
11118: LD_INT 34
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 101
11144: PUSH
11145: LD_INT 102
11147: PUSH
11148: LD_INT 103
11150: PUSH
11151: LD_INT 106
11153: PUSH
11154: LD_INT 108
11156: PUSH
11157: LD_INT 112
11159: PUSH
11160: LD_INT 113
11162: PUSH
11163: LD_INT 114
11165: PUSH
11166: LD_INT 116
11168: PUSH
11169: LD_INT 117
11171: PUSH
11172: LD_INT 118
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: ST_TO_ADDR
11192: GO 11823
11194: LD_INT 17
11196: DOUBLE
11197: EQUAL
11198: IFTRUE 11202
11200: GO 11426
11202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11203: LD_ADDR_VAR 0 2
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 4
11219: PUSH
11220: LD_INT 5
11222: PUSH
11223: LD_INT 6
11225: PUSH
11226: LD_INT 7
11228: PUSH
11229: LD_INT 8
11231: PUSH
11232: LD_INT 9
11234: PUSH
11235: LD_INT 10
11237: PUSH
11238: LD_INT 11
11240: PUSH
11241: LD_INT 12
11243: PUSH
11244: LD_INT 13
11246: PUSH
11247: LD_INT 14
11249: PUSH
11250: LD_INT 15
11252: PUSH
11253: LD_INT 16
11255: PUSH
11256: LD_INT 17
11258: PUSH
11259: LD_INT 18
11261: PUSH
11262: LD_INT 19
11264: PUSH
11265: LD_INT 20
11267: PUSH
11268: LD_INT 21
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_INT 23
11276: PUSH
11277: LD_INT 24
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 26
11285: PUSH
11286: LD_INT 27
11288: PUSH
11289: LD_INT 28
11291: PUSH
11292: LD_INT 29
11294: PUSH
11295: LD_INT 30
11297: PUSH
11298: LD_INT 31
11300: PUSH
11301: LD_INT 32
11303: PUSH
11304: LD_INT 33
11306: PUSH
11307: LD_INT 34
11309: PUSH
11310: LD_INT 36
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 101
11352: PUSH
11353: LD_INT 102
11355: PUSH
11356: LD_INT 103
11358: PUSH
11359: LD_INT 104
11361: PUSH
11362: LD_INT 105
11364: PUSH
11365: LD_INT 106
11367: PUSH
11368: LD_INT 107
11370: PUSH
11371: LD_INT 108
11373: PUSH
11374: LD_INT 109
11376: PUSH
11377: LD_INT 110
11379: PUSH
11380: LD_INT 111
11382: PUSH
11383: LD_INT 112
11385: PUSH
11386: LD_INT 113
11388: PUSH
11389: LD_INT 114
11391: PUSH
11392: LD_INT 116
11394: PUSH
11395: LD_INT 117
11397: PUSH
11398: LD_INT 118
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: ST_TO_ADDR
11424: GO 11823
11426: LD_INT 18
11428: DOUBLE
11429: EQUAL
11430: IFTRUE 11434
11432: GO 11582
11434: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: LD_INT 4
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: LD_INT 7
11451: PUSH
11452: LD_INT 11
11454: PUSH
11455: LD_INT 12
11457: PUSH
11458: LD_INT 15
11460: PUSH
11461: LD_INT 16
11463: PUSH
11464: LD_INT 20
11466: PUSH
11467: LD_INT 21
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 23
11475: PUSH
11476: LD_INT 25
11478: PUSH
11479: LD_INT 26
11481: PUSH
11482: LD_INT 30
11484: PUSH
11485: LD_INT 31
11487: PUSH
11488: LD_INT 32
11490: PUSH
11491: LD_INT 33
11493: PUSH
11494: LD_INT 34
11496: PUSH
11497: LD_INT 35
11499: PUSH
11500: LD_INT 36
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 101
11528: PUSH
11529: LD_INT 102
11531: PUSH
11532: LD_INT 103
11534: PUSH
11535: LD_INT 106
11537: PUSH
11538: LD_INT 108
11540: PUSH
11541: LD_INT 112
11543: PUSH
11544: LD_INT 113
11546: PUSH
11547: LD_INT 114
11549: PUSH
11550: LD_INT 115
11552: PUSH
11553: LD_INT 116
11555: PUSH
11556: LD_INT 117
11558: PUSH
11559: LD_INT 118
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: ST_TO_ADDR
11580: GO 11823
11582: LD_INT 19
11584: DOUBLE
11585: EQUAL
11586: IFTRUE 11590
11588: GO 11822
11590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: LD_INT 2
11601: PUSH
11602: LD_INT 3
11604: PUSH
11605: LD_INT 4
11607: PUSH
11608: LD_INT 5
11610: PUSH
11611: LD_INT 6
11613: PUSH
11614: LD_INT 7
11616: PUSH
11617: LD_INT 8
11619: PUSH
11620: LD_INT 9
11622: PUSH
11623: LD_INT 10
11625: PUSH
11626: LD_INT 11
11628: PUSH
11629: LD_INT 12
11631: PUSH
11632: LD_INT 13
11634: PUSH
11635: LD_INT 14
11637: PUSH
11638: LD_INT 15
11640: PUSH
11641: LD_INT 16
11643: PUSH
11644: LD_INT 17
11646: PUSH
11647: LD_INT 18
11649: PUSH
11650: LD_INT 19
11652: PUSH
11653: LD_INT 20
11655: PUSH
11656: LD_INT 21
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 23
11664: PUSH
11665: LD_INT 24
11667: PUSH
11668: LD_INT 25
11670: PUSH
11671: LD_INT 26
11673: PUSH
11674: LD_INT 27
11676: PUSH
11677: LD_INT 28
11679: PUSH
11680: LD_INT 29
11682: PUSH
11683: LD_INT 30
11685: PUSH
11686: LD_INT 31
11688: PUSH
11689: LD_INT 32
11691: PUSH
11692: LD_INT 33
11694: PUSH
11695: LD_INT 34
11697: PUSH
11698: LD_INT 35
11700: PUSH
11701: LD_INT 36
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 101
11744: PUSH
11745: LD_INT 102
11747: PUSH
11748: LD_INT 103
11750: PUSH
11751: LD_INT 104
11753: PUSH
11754: LD_INT 105
11756: PUSH
11757: LD_INT 106
11759: PUSH
11760: LD_INT 107
11762: PUSH
11763: LD_INT 108
11765: PUSH
11766: LD_INT 109
11768: PUSH
11769: LD_INT 110
11771: PUSH
11772: LD_INT 111
11774: PUSH
11775: LD_INT 112
11777: PUSH
11778: LD_INT 113
11780: PUSH
11781: LD_INT 114
11783: PUSH
11784: LD_INT 115
11786: PUSH
11787: LD_INT 116
11789: PUSH
11790: LD_INT 117
11792: PUSH
11793: LD_INT 118
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: ST_TO_ADDR
11820: GO 11823
11822: POP
// end else
11823: GO 12054
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_INT 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 3
11838: PUSH
11839: LD_INT 4
11841: PUSH
11842: LD_INT 5
11844: PUSH
11845: LD_INT 6
11847: PUSH
11848: LD_INT 7
11850: PUSH
11851: LD_INT 8
11853: PUSH
11854: LD_INT 9
11856: PUSH
11857: LD_INT 10
11859: PUSH
11860: LD_INT 11
11862: PUSH
11863: LD_INT 12
11865: PUSH
11866: LD_INT 13
11868: PUSH
11869: LD_INT 14
11871: PUSH
11872: LD_INT 15
11874: PUSH
11875: LD_INT 16
11877: PUSH
11878: LD_INT 17
11880: PUSH
11881: LD_INT 18
11883: PUSH
11884: LD_INT 19
11886: PUSH
11887: LD_INT 20
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_INT 23
11898: PUSH
11899: LD_INT 24
11901: PUSH
11902: LD_INT 25
11904: PUSH
11905: LD_INT 26
11907: PUSH
11908: LD_INT 27
11910: PUSH
11911: LD_INT 28
11913: PUSH
11914: LD_INT 29
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 31
11922: PUSH
11923: LD_INT 32
11925: PUSH
11926: LD_INT 33
11928: PUSH
11929: LD_INT 34
11931: PUSH
11932: LD_INT 35
11934: PUSH
11935: LD_INT 36
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 101
11978: PUSH
11979: LD_INT 102
11981: PUSH
11982: LD_INT 103
11984: PUSH
11985: LD_INT 104
11987: PUSH
11988: LD_INT 105
11990: PUSH
11991: LD_INT 106
11993: PUSH
11994: LD_INT 107
11996: PUSH
11997: LD_INT 108
11999: PUSH
12000: LD_INT 109
12002: PUSH
12003: LD_INT 110
12005: PUSH
12006: LD_INT 111
12008: PUSH
12009: LD_INT 112
12011: PUSH
12012: LD_INT 113
12014: PUSH
12015: LD_INT 114
12017: PUSH
12018: LD_INT 115
12020: PUSH
12021: LD_INT 116
12023: PUSH
12024: LD_INT 117
12026: PUSH
12027: LD_INT 118
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: ST_TO_ADDR
// if result then
12054: LD_VAR 0 2
12058: IFFALSE 12844
// begin normal :=  ;
12060: LD_ADDR_VAR 0 5
12064: PUSH
12065: LD_STRING 
12067: ST_TO_ADDR
// hardcore :=  ;
12068: LD_ADDR_VAR 0 6
12072: PUSH
12073: LD_STRING 
12075: ST_TO_ADDR
// active :=  ;
12076: LD_ADDR_VAR 0 7
12080: PUSH
12081: LD_STRING 
12083: ST_TO_ADDR
// for i = 1 to normalCounter do
12084: LD_ADDR_VAR 0 8
12088: PUSH
12089: DOUBLE
12090: LD_INT 1
12092: DEC
12093: ST_TO_ADDR
12094: LD_EXP 30
12098: PUSH
12099: FOR_TO
12100: IFFALSE 12201
// begin tmp := 0 ;
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: LD_STRING 0
12109: ST_TO_ADDR
// if result [ 1 ] then
12110: LD_VAR 0 2
12114: PUSH
12115: LD_INT 1
12117: ARRAY
12118: IFFALSE 12183
// if result [ 1 ] [ 1 ] = i then
12120: LD_VAR 0 2
12124: PUSH
12125: LD_INT 1
12127: ARRAY
12128: PUSH
12129: LD_INT 1
12131: ARRAY
12132: PUSH
12133: LD_VAR 0 8
12137: EQUAL
12138: IFFALSE 12183
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12140: LD_ADDR_VAR 0 2
12144: PUSH
12145: LD_VAR 0 2
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: LD_VAR 0 2
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 3
12169: PPUSH
12170: CALL_OW 1
12174: ST_TO_ADDR
// tmp := 1 ;
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_STRING 1
12182: ST_TO_ADDR
// end ; normal := normal & tmp ;
12183: LD_ADDR_VAR 0 5
12187: PUSH
12188: LD_VAR 0 5
12192: PUSH
12193: LD_VAR 0 3
12197: STR
12198: ST_TO_ADDR
// end ;
12199: GO 12099
12201: POP
12202: POP
// for i = 1 to hardcoreCounter do
12203: LD_ADDR_VAR 0 8
12207: PUSH
12208: DOUBLE
12209: LD_INT 1
12211: DEC
12212: ST_TO_ADDR
12213: LD_EXP 31
12217: PUSH
12218: FOR_TO
12219: IFFALSE 12324
// begin tmp := 0 ;
12221: LD_ADDR_VAR 0 3
12225: PUSH
12226: LD_STRING 0
12228: ST_TO_ADDR
// if result [ 2 ] then
12229: LD_VAR 0 2
12233: PUSH
12234: LD_INT 2
12236: ARRAY
12237: IFFALSE 12306
// if result [ 2 ] [ 1 ] = 100 + i then
12239: LD_VAR 0 2
12243: PUSH
12244: LD_INT 2
12246: ARRAY
12247: PUSH
12248: LD_INT 1
12250: ARRAY
12251: PUSH
12252: LD_INT 100
12254: PUSH
12255: LD_VAR 0 8
12259: PLUS
12260: EQUAL
12261: IFFALSE 12306
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: LD_VAR 0 2
12272: PPUSH
12273: LD_INT 2
12275: PPUSH
12276: LD_VAR 0 2
12280: PUSH
12281: LD_INT 2
12283: ARRAY
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 3
12292: PPUSH
12293: CALL_OW 1
12297: ST_TO_ADDR
// tmp := 1 ;
12298: LD_ADDR_VAR 0 3
12302: PUSH
12303: LD_STRING 1
12305: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12306: LD_ADDR_VAR 0 6
12310: PUSH
12311: LD_VAR 0 6
12315: PUSH
12316: LD_VAR 0 3
12320: STR
12321: ST_TO_ADDR
// end ;
12322: GO 12218
12324: POP
12325: POP
// if isGameLoad then
12326: LD_VAR 0 1
12330: IFFALSE 12805
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12332: LD_ADDR_VAR 0 4
12336: PUSH
12337: LD_EXP 34
12341: PUSH
12342: LD_EXP 33
12346: PUSH
12347: LD_EXP 35
12351: PUSH
12352: LD_EXP 32
12356: PUSH
12357: LD_EXP 36
12361: PUSH
12362: LD_EXP 37
12366: PUSH
12367: LD_EXP 38
12371: PUSH
12372: LD_EXP 39
12376: PUSH
12377: LD_EXP 40
12381: PUSH
12382: LD_EXP 41
12386: PUSH
12387: LD_EXP 42
12391: PUSH
12392: LD_EXP 43
12396: PUSH
12397: LD_EXP 44
12401: PUSH
12402: LD_EXP 45
12406: PUSH
12407: LD_EXP 53
12411: PUSH
12412: LD_EXP 54
12416: PUSH
12417: LD_EXP 55
12421: PUSH
12422: LD_EXP 56
12426: PUSH
12427: LD_EXP 58
12431: PUSH
12432: LD_EXP 59
12436: PUSH
12437: LD_EXP 60
12441: PUSH
12442: LD_EXP 63
12446: PUSH
12447: LD_EXP 65
12451: PUSH
12452: LD_EXP 66
12456: PUSH
12457: LD_EXP 67
12461: PUSH
12462: LD_EXP 69
12466: PUSH
12467: LD_EXP 70
12471: PUSH
12472: LD_EXP 73
12476: PUSH
12477: LD_EXP 74
12481: PUSH
12482: LD_EXP 75
12486: PUSH
12487: LD_EXP 76
12491: PUSH
12492: LD_EXP 77
12496: PUSH
12497: LD_EXP 78
12501: PUSH
12502: LD_EXP 79
12506: PUSH
12507: LD_EXP 80
12511: PUSH
12512: LD_EXP 81
12516: PUSH
12517: LD_EXP 46
12521: PUSH
12522: LD_EXP 47
12526: PUSH
12527: LD_EXP 50
12531: PUSH
12532: LD_EXP 51
12536: PUSH
12537: LD_EXP 52
12541: PUSH
12542: LD_EXP 48
12546: PUSH
12547: LD_EXP 49
12551: PUSH
12552: LD_EXP 57
12556: PUSH
12557: LD_EXP 61
12561: PUSH
12562: LD_EXP 62
12566: PUSH
12567: LD_EXP 64
12571: PUSH
12572: LD_EXP 68
12576: PUSH
12577: LD_EXP 71
12581: PUSH
12582: LD_EXP 72
12586: PUSH
12587: LD_EXP 82
12591: PUSH
12592: LD_EXP 83
12596: PUSH
12597: LD_EXP 84
12601: PUSH
12602: LD_EXP 85
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: ST_TO_ADDR
// tmp :=  ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: LD_STRING 
12670: ST_TO_ADDR
// for i = 1 to normalCounter do
12671: LD_ADDR_VAR 0 8
12675: PUSH
12676: DOUBLE
12677: LD_INT 1
12679: DEC
12680: ST_TO_ADDR
12681: LD_EXP 30
12685: PUSH
12686: FOR_TO
12687: IFFALSE 12723
// begin if flags [ i ] then
12689: LD_VAR 0 4
12693: PUSH
12694: LD_VAR 0 8
12698: ARRAY
12699: IFFALSE 12721
// tmp := tmp & i & ; ;
12701: LD_ADDR_VAR 0 3
12705: PUSH
12706: LD_VAR 0 3
12710: PUSH
12711: LD_VAR 0 8
12715: STR
12716: PUSH
12717: LD_STRING ;
12719: STR
12720: ST_TO_ADDR
// end ;
12721: GO 12686
12723: POP
12724: POP
// for i = 1 to hardcoreCounter do
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_EXP 31
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12787
// begin if flags [ normalCounter + i ] then
12743: LD_VAR 0 4
12747: PUSH
12748: LD_EXP 30
12752: PUSH
12753: LD_VAR 0 8
12757: PLUS
12758: ARRAY
12759: IFFALSE 12785
// tmp := tmp & ( 100 + i ) & ; ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: LD_VAR 0 3
12770: PUSH
12771: LD_INT 100
12773: PUSH
12774: LD_VAR 0 8
12778: PLUS
12779: STR
12780: PUSH
12781: LD_STRING ;
12783: STR
12784: ST_TO_ADDR
// end ;
12785: GO 12740
12787: POP
12788: POP
// if tmp then
12789: LD_VAR 0 3
12793: IFFALSE 12805
// active := tmp ;
12795: LD_ADDR_VAR 0 7
12799: PUSH
12800: LD_VAR 0 3
12804: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12805: LD_STRING getStreamItemsFromMission("
12807: PUSH
12808: LD_VAR 0 5
12812: STR
12813: PUSH
12814: LD_STRING ","
12816: STR
12817: PUSH
12818: LD_VAR 0 6
12822: STR
12823: PUSH
12824: LD_STRING ","
12826: STR
12827: PUSH
12828: LD_VAR 0 7
12832: STR
12833: PUSH
12834: LD_STRING ")
12836: STR
12837: PPUSH
12838: CALL_OW 559
// end else
12842: GO 12851
// ToLua ( getStreamItemsFromMission("","","") ) ;
12844: LD_STRING getStreamItemsFromMission("","","")
12846: PPUSH
12847: CALL_OW 559
// end ;
12851: LD_VAR 0 2
12855: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12856: LD_EXP 29
12860: PUSH
12861: LD_EXP 34
12865: AND
12866: IFFALSE 12990
12868: GO 12870
12870: DISABLE
12871: LD_INT 0
12873: PPUSH
12874: PPUSH
// begin enable ;
12875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_INT 22
12883: PUSH
12884: LD_OWVAR 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 34
12898: PUSH
12899: LD_INT 7
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 34
12908: PUSH
12909: LD_INT 45
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 34
12918: PUSH
12919: LD_INT 28
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 34
12928: PUSH
12929: LD_INT 47
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: ST_TO_ADDR
// if not tmp then
12952: LD_VAR 0 2
12956: NOT
12957: IFFALSE 12961
// exit ;
12959: GO 12990
// for i in tmp do
12961: LD_ADDR_VAR 0 1
12965: PUSH
12966: LD_VAR 0 2
12970: PUSH
12971: FOR_IN
12972: IFFALSE 12988
// begin SetLives ( i , 0 ) ;
12974: LD_VAR 0 1
12978: PPUSH
12979: LD_INT 0
12981: PPUSH
12982: CALL_OW 234
// end ;
12986: GO 12971
12988: POP
12989: POP
// end ;
12990: PPOPN 2
12992: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12993: LD_EXP 29
12997: PUSH
12998: LD_EXP 35
13002: AND
13003: IFFALSE 13087
13005: GO 13007
13007: DISABLE
13008: LD_INT 0
13010: PPUSH
13011: PPUSH
// begin enable ;
13012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13013: LD_ADDR_VAR 0 2
13017: PUSH
13018: LD_INT 22
13020: PUSH
13021: LD_OWVAR 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 32
13032: PUSH
13033: LD_INT 3
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PPUSH
13044: CALL_OW 69
13048: ST_TO_ADDR
// if not tmp then
13049: LD_VAR 0 2
13053: NOT
13054: IFFALSE 13058
// exit ;
13056: GO 13087
// for i in tmp do
13058: LD_ADDR_VAR 0 1
13062: PUSH
13063: LD_VAR 0 2
13067: PUSH
13068: FOR_IN
13069: IFFALSE 13085
// begin SetLives ( i , 0 ) ;
13071: LD_VAR 0 1
13075: PPUSH
13076: LD_INT 0
13078: PPUSH
13079: CALL_OW 234
// end ;
13083: GO 13068
13085: POP
13086: POP
// end ;
13087: PPOPN 2
13089: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13090: LD_EXP 29
13094: PUSH
13095: LD_EXP 32
13099: AND
13100: IFFALSE 13193
13102: GO 13104
13104: DISABLE
13105: LD_INT 0
13107: PPUSH
// begin enable ;
13108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_OWVAR 2
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 5
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 25
13141: PUSH
13142: LD_INT 9
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 8
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: PUSH
13174: FOR_IN
13175: IFFALSE 13191
// begin SetClass ( i , 1 ) ;
13177: LD_VAR 0 1
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: CALL_OW 336
// end ;
13189: GO 13174
13191: POP
13192: POP
// end ;
13193: PPOPN 1
13195: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13196: LD_EXP 29
13200: PUSH
13201: LD_EXP 33
13205: AND
13206: PUSH
13207: LD_OWVAR 65
13211: PUSH
13212: LD_INT 7
13214: LESS
13215: AND
13216: IFFALSE 13230
13218: GO 13220
13220: DISABLE
// begin enable ;
13221: ENABLE
// game_speed := 7 ;
13222: LD_ADDR_OWVAR 65
13226: PUSH
13227: LD_INT 7
13229: ST_TO_ADDR
// end ;
13230: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13231: LD_EXP 29
13235: PUSH
13236: LD_EXP 36
13240: AND
13241: IFFALSE 13443
13243: GO 13245
13245: DISABLE
13246: LD_INT 0
13248: PPUSH
13249: PPUSH
13250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: LD_INT 81
13258: PUSH
13259: LD_OWVAR 2
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: ST_TO_ADDR
// if not tmp then
13287: LD_VAR 0 3
13291: NOT
13292: IFFALSE 13296
// exit ;
13294: GO 13443
// if tmp > 5 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 5
13303: GREATER
13304: IFFALSE 13316
// k := 5 else
13306: LD_ADDR_VAR 0 2
13310: PUSH
13311: LD_INT 5
13313: ST_TO_ADDR
13314: GO 13326
// k := tmp ;
13316: LD_ADDR_VAR 0 2
13320: PUSH
13321: LD_VAR 0 3
13325: ST_TO_ADDR
// for i := 1 to k do
13326: LD_ADDR_VAR 0 1
13330: PUSH
13331: DOUBLE
13332: LD_INT 1
13334: DEC
13335: ST_TO_ADDR
13336: LD_VAR 0 2
13340: PUSH
13341: FOR_TO
13342: IFFALSE 13441
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13344: LD_VAR 0 3
13348: PUSH
13349: LD_VAR 0 1
13353: ARRAY
13354: PPUSH
13355: LD_VAR 0 1
13359: PUSH
13360: LD_INT 4
13362: MOD
13363: PUSH
13364: LD_INT 1
13366: PLUS
13367: PPUSH
13368: CALL_OW 259
13372: PUSH
13373: LD_INT 10
13375: LESS
13376: IFFALSE 13439
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13378: LD_VAR 0 3
13382: PUSH
13383: LD_VAR 0 1
13387: ARRAY
13388: PPUSH
13389: LD_VAR 0 1
13393: PUSH
13394: LD_INT 4
13396: MOD
13397: PUSH
13398: LD_INT 1
13400: PLUS
13401: PPUSH
13402: LD_VAR 0 3
13406: PUSH
13407: LD_VAR 0 1
13411: ARRAY
13412: PPUSH
13413: LD_VAR 0 1
13417: PUSH
13418: LD_INT 4
13420: MOD
13421: PUSH
13422: LD_INT 1
13424: PLUS
13425: PPUSH
13426: CALL_OW 259
13430: PUSH
13431: LD_INT 1
13433: PLUS
13434: PPUSH
13435: CALL_OW 237
13439: GO 13341
13441: POP
13442: POP
// end ;
13443: PPOPN 3
13445: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13446: LD_EXP 29
13450: PUSH
13451: LD_EXP 37
13455: AND
13456: IFFALSE 13476
13458: GO 13460
13460: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13461: LD_INT 4
13463: PPUSH
13464: LD_OWVAR 2
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 324
13476: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13477: LD_EXP 29
13481: PUSH
13482: LD_EXP 66
13486: AND
13487: IFFALSE 13507
13489: GO 13491
13491: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13492: LD_INT 19
13494: PPUSH
13495: LD_OWVAR 2
13499: PPUSH
13500: LD_INT 0
13502: PPUSH
13503: CALL_OW 324
13507: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13508: LD_EXP 29
13512: PUSH
13513: LD_EXP 38
13517: AND
13518: IFFALSE 13620
13520: GO 13522
13522: DISABLE
13523: LD_INT 0
13525: PPUSH
13526: PPUSH
// begin enable ;
13527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13528: LD_ADDR_VAR 0 2
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_OWVAR 2
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: LD_INT 34
13550: PUSH
13551: LD_INT 11
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 34
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 69
13581: ST_TO_ADDR
// if not tmp then
13582: LD_VAR 0 2
13586: NOT
13587: IFFALSE 13591
// exit ;
13589: GO 13620
// for i in tmp do
13591: LD_ADDR_VAR 0 1
13595: PUSH
13596: LD_VAR 0 2
13600: PUSH
13601: FOR_IN
13602: IFFALSE 13618
// begin SetLives ( i , 0 ) ;
13604: LD_VAR 0 1
13608: PPUSH
13609: LD_INT 0
13611: PPUSH
13612: CALL_OW 234
// end ;
13616: GO 13601
13618: POP
13619: POP
// end ;
13620: PPOPN 2
13622: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13623: LD_EXP 29
13627: PUSH
13628: LD_EXP 39
13632: AND
13633: IFFALSE 13653
13635: GO 13637
13637: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13638: LD_INT 32
13640: PPUSH
13641: LD_OWVAR 2
13645: PPUSH
13646: LD_INT 0
13648: PPUSH
13649: CALL_OW 324
13653: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13654: LD_EXP 29
13658: PUSH
13659: LD_EXP 40
13663: AND
13664: IFFALSE 13845
13666: GO 13668
13668: DISABLE
13669: LD_INT 0
13671: PPUSH
13672: PPUSH
13673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13674: LD_ADDR_VAR 0 2
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: LD_OWVAR 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 33
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 69
13709: ST_TO_ADDR
// if not tmp then
13710: LD_VAR 0 2
13714: NOT
13715: IFFALSE 13719
// exit ;
13717: GO 13845
// side := 0 ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// for i := 1 to 8 do
13727: LD_ADDR_VAR 0 1
13731: PUSH
13732: DOUBLE
13733: LD_INT 1
13735: DEC
13736: ST_TO_ADDR
13737: LD_INT 8
13739: PUSH
13740: FOR_TO
13741: IFFALSE 13789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13743: LD_OWVAR 2
13747: PUSH
13748: LD_VAR 0 1
13752: NONEQUAL
13753: PUSH
13754: LD_OWVAR 2
13758: PPUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 81
13768: PUSH
13769: LD_INT 2
13771: EQUAL
13772: AND
13773: IFFALSE 13787
// begin side := i ;
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_VAR 0 1
13784: ST_TO_ADDR
// break ;
13785: GO 13789
// end ;
13787: GO 13740
13789: POP
13790: POP
// if not side then
13791: LD_VAR 0 3
13795: NOT
13796: IFFALSE 13800
// exit ;
13798: GO 13845
// for i := 1 to tmp do
13800: LD_ADDR_VAR 0 1
13804: PUSH
13805: DOUBLE
13806: LD_INT 1
13808: DEC
13809: ST_TO_ADDR
13810: LD_VAR 0 2
13814: PUSH
13815: FOR_TO
13816: IFFALSE 13843
// if Prob ( 60 ) then
13818: LD_INT 60
13820: PPUSH
13821: CALL_OW 13
13825: IFFALSE 13841
// SetSide ( i , side ) ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: CALL_OW 235
13841: GO 13815
13843: POP
13844: POP
// end ;
13845: PPOPN 3
13847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13848: LD_EXP 29
13852: PUSH
13853: LD_EXP 42
13857: AND
13858: IFFALSE 13977
13860: GO 13862
13862: DISABLE
13863: LD_INT 0
13865: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13866: LD_ADDR_VAR 0 1
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_OWVAR 2
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 21
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 3
13895: PUSH
13896: LD_INT 23
13898: PUSH
13899: LD_INT 0
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: PUSH
13920: FOR_IN
13921: IFFALSE 13975
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 257
13932: PUSH
13933: LD_INT 1
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: LD_INT 4
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: IN
13951: IFFALSE 13973
// SetClass ( un , rand ( 1 , 4 ) ) ;
13953: LD_VAR 0 1
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: LD_INT 4
13963: PPUSH
13964: CALL_OW 12
13968: PPUSH
13969: CALL_OW 336
13973: GO 13920
13975: POP
13976: POP
// end ;
13977: PPOPN 1
13979: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13980: LD_EXP 29
13984: PUSH
13985: LD_EXP 41
13989: AND
13990: IFFALSE 14069
13992: GO 13994
13994: DISABLE
13995: LD_INT 0
13997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_OWVAR 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: ST_TO_ADDR
// if not tmp then
14034: LD_VAR 0 1
14038: NOT
14039: IFFALSE 14043
// exit ;
14041: GO 14069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14043: LD_VAR 0 1
14047: PUSH
14048: LD_INT 1
14050: PPUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 12
14060: ARRAY
14061: PPUSH
14062: LD_INT 100
14064: PPUSH
14065: CALL_OW 234
// end ;
14069: PPOPN 1
14071: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14072: LD_EXP 29
14076: PUSH
14077: LD_EXP 43
14081: AND
14082: IFFALSE 14180
14084: GO 14086
14086: DISABLE
14087: LD_INT 0
14089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_OWVAR 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: ST_TO_ADDR
// if not tmp then
14126: LD_VAR 0 1
14130: NOT
14131: IFFALSE 14135
// exit ;
14133: GO 14180
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14135: LD_VAR 0 1
14139: PUSH
14140: LD_INT 1
14142: PPUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 12
14152: ARRAY
14153: PPUSH
14154: LD_INT 1
14156: PPUSH
14157: LD_INT 4
14159: PPUSH
14160: CALL_OW 12
14164: PPUSH
14165: LD_INT 3000
14167: PPUSH
14168: LD_INT 9000
14170: PPUSH
14171: CALL_OW 12
14175: PPUSH
14176: CALL_OW 492
// end ;
14180: PPOPN 1
14182: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14183: LD_EXP 29
14187: PUSH
14188: LD_EXP 44
14192: AND
14193: IFFALSE 14213
14195: GO 14197
14197: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14198: LD_INT 1
14200: PPUSH
14201: LD_OWVAR 2
14205: PPUSH
14206: LD_INT 0
14208: PPUSH
14209: CALL_OW 324
14213: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14214: LD_EXP 29
14218: PUSH
14219: LD_EXP 45
14223: AND
14224: IFFALSE 14307
14226: GO 14228
14228: DISABLE
14229: LD_INT 0
14231: PPUSH
14232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14233: LD_ADDR_VAR 0 2
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_OWVAR 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: ST_TO_ADDR
// if not tmp then
14269: LD_VAR 0 2
14273: NOT
14274: IFFALSE 14278
// exit ;
14276: GO 14307
// for i in tmp do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_VAR 0 2
14287: PUSH
14288: FOR_IN
14289: IFFALSE 14305
// SetBLevel ( i , 10 ) ;
14291: LD_VAR 0 1
14295: PPUSH
14296: LD_INT 10
14298: PPUSH
14299: CALL_OW 241
14303: GO 14288
14305: POP
14306: POP
// end ;
14307: PPOPN 2
14309: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14310: LD_EXP 29
14314: PUSH
14315: LD_EXP 46
14319: AND
14320: IFFALSE 14431
14322: GO 14324
14324: DISABLE
14325: LD_INT 0
14327: PPUSH
14328: PPUSH
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14330: LD_ADDR_VAR 0 3
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 25
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 3
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14431
// un := tmp [ rand ( 1 , tmp ) ] ;
14375: LD_ADDR_VAR 0 2
14379: PUSH
14380: LD_VAR 0 3
14384: PUSH
14385: LD_INT 1
14387: PPUSH
14388: LD_VAR 0 3
14392: PPUSH
14393: CALL_OW 12
14397: ARRAY
14398: ST_TO_ADDR
// if Crawls ( un ) then
14399: LD_VAR 0 2
14403: PPUSH
14404: CALL_OW 318
14408: IFFALSE 14419
// ComWalk ( un ) ;
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14419: LD_VAR 0 2
14423: PPUSH
14424: LD_INT 5
14426: PPUSH
14427: CALL_OW 336
// end ;
14431: PPOPN 3
14433: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14434: LD_EXP 29
14438: PUSH
14439: LD_EXP 47
14443: AND
14444: PUSH
14445: LD_OWVAR 67
14449: PUSH
14450: LD_INT 4
14452: LESS
14453: AND
14454: IFFALSE 14473
14456: GO 14458
14458: DISABLE
// begin Difficulty := Difficulty + 1 ;
14459: LD_ADDR_OWVAR 67
14463: PUSH
14464: LD_OWVAR 67
14468: PUSH
14469: LD_INT 1
14471: PLUS
14472: ST_TO_ADDR
// end ;
14473: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14474: LD_EXP 29
14478: PUSH
14479: LD_EXP 48
14483: AND
14484: IFFALSE 14587
14486: GO 14488
14488: DISABLE
14489: LD_INT 0
14491: PPUSH
// begin for i := 1 to 5 do
14492: LD_ADDR_VAR 0 1
14496: PUSH
14497: DOUBLE
14498: LD_INT 1
14500: DEC
14501: ST_TO_ADDR
14502: LD_INT 5
14504: PUSH
14505: FOR_TO
14506: IFFALSE 14585
// begin uc_nation := nation_nature ;
14508: LD_ADDR_OWVAR 21
14512: PUSH
14513: LD_INT 0
14515: ST_TO_ADDR
// uc_side := 0 ;
14516: LD_ADDR_OWVAR 20
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14524: LD_ADDR_OWVAR 29
14528: PUSH
14529: LD_INT 12
14531: PUSH
14532: LD_INT 12
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: ST_TO_ADDR
// hc_agressivity := 20 ;
14539: LD_ADDR_OWVAR 35
14543: PUSH
14544: LD_INT 20
14546: ST_TO_ADDR
// hc_class := class_tiger ;
14547: LD_ADDR_OWVAR 28
14551: PUSH
14552: LD_INT 14
14554: ST_TO_ADDR
// hc_gallery :=  ;
14555: LD_ADDR_OWVAR 33
14559: PUSH
14560: LD_STRING 
14562: ST_TO_ADDR
// hc_name :=  ;
14563: LD_ADDR_OWVAR 26
14567: PUSH
14568: LD_STRING 
14570: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14571: CALL_OW 44
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 51
// end ;
14583: GO 14505
14585: POP
14586: POP
// end ;
14587: PPOPN 1
14589: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14590: LD_EXP 29
14594: PUSH
14595: LD_EXP 49
14599: AND
14600: IFFALSE 14609
14602: GO 14604
14604: DISABLE
// StreamSibBomb ;
14605: CALL 14610 0 0
14609: END
// export function StreamSibBomb ; var i , x , y ; begin
14610: LD_INT 0
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
// result := false ;
14616: LD_ADDR_VAR 0 1
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
// for i := 1 to 16 do
14624: LD_ADDR_VAR 0 2
14628: PUSH
14629: DOUBLE
14630: LD_INT 1
14632: DEC
14633: ST_TO_ADDR
14634: LD_INT 16
14636: PUSH
14637: FOR_TO
14638: IFFALSE 14837
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14640: LD_ADDR_VAR 0 3
14644: PUSH
14645: LD_INT 10
14647: PUSH
14648: LD_INT 20
14650: PUSH
14651: LD_INT 30
14653: PUSH
14654: LD_INT 40
14656: PUSH
14657: LD_INT 50
14659: PUSH
14660: LD_INT 60
14662: PUSH
14663: LD_INT 70
14665: PUSH
14666: LD_INT 80
14668: PUSH
14669: LD_INT 90
14671: PUSH
14672: LD_INT 100
14674: PUSH
14675: LD_INT 110
14677: PUSH
14678: LD_INT 120
14680: PUSH
14681: LD_INT 130
14683: PUSH
14684: LD_INT 140
14686: PUSH
14687: LD_INT 150
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 1
14709: PPUSH
14710: LD_INT 15
14712: PPUSH
14713: CALL_OW 12
14717: ARRAY
14718: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14719: LD_ADDR_VAR 0 4
14723: PUSH
14724: LD_INT 10
14726: PUSH
14727: LD_INT 20
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 40
14735: PUSH
14736: LD_INT 50
14738: PUSH
14739: LD_INT 60
14741: PUSH
14742: LD_INT 70
14744: PUSH
14745: LD_INT 80
14747: PUSH
14748: LD_INT 90
14750: PUSH
14751: LD_INT 100
14753: PUSH
14754: LD_INT 110
14756: PUSH
14757: LD_INT 120
14759: PUSH
14760: LD_INT 130
14762: PUSH
14763: LD_INT 140
14765: PUSH
14766: LD_INT 150
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 1
14788: PPUSH
14789: LD_INT 15
14791: PPUSH
14792: CALL_OW 12
14796: ARRAY
14797: ST_TO_ADDR
// if ValidHex ( x , y ) then
14798: LD_VAR 0 3
14802: PPUSH
14803: LD_VAR 0 4
14807: PPUSH
14808: CALL_OW 488
14812: IFFALSE 14835
// begin result := [ x , y ] ;
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: LD_VAR 0 3
14823: PUSH
14824: LD_VAR 0 4
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: ST_TO_ADDR
// break ;
14833: GO 14837
// end ; end ;
14835: GO 14637
14837: POP
14838: POP
// if result then
14839: LD_VAR 0 1
14843: IFFALSE 14903
// begin ToLua ( playSibBomb() ) ;
14845: LD_STRING playSibBomb()
14847: PPUSH
14848: CALL_OW 559
// wait ( 0 0$14 ) ;
14852: LD_INT 490
14854: PPUSH
14855: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: LD_VAR 0 1
14872: PUSH
14873: LD_INT 2
14875: ARRAY
14876: PPUSH
14877: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14881: LD_VAR 0 1
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: LD_VAR 0 1
14894: PUSH
14895: LD_INT 2
14897: ARRAY
14898: PPUSH
14899: CALL_OW 429
// end ; end ;
14903: LD_VAR 0 1
14907: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14908: LD_EXP 29
14912: PUSH
14913: LD_EXP 51
14917: AND
14918: IFFALSE 14930
14920: GO 14922
14922: DISABLE
// YouLost (  ) ;
14923: LD_STRING 
14925: PPUSH
14926: CALL_OW 104
14930: END
// every 0 0$1 trigger StreamModeActive and sFog do
14931: LD_EXP 29
14935: PUSH
14936: LD_EXP 50
14940: AND
14941: IFFALSE 14955
14943: GO 14945
14945: DISABLE
// FogOff ( your_side ) ;
14946: LD_OWVAR 2
14950: PPUSH
14951: CALL_OW 344
14955: END
// every 0 0$1 trigger StreamModeActive and sSun do
14956: LD_EXP 29
14960: PUSH
14961: LD_EXP 52
14965: AND
14966: IFFALSE 14994
14968: GO 14970
14970: DISABLE
// begin solar_recharge_percent := 0 ;
14971: LD_ADDR_OWVAR 79
14975: PUSH
14976: LD_INT 0
14978: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14979: LD_INT 10500
14981: PPUSH
14982: CALL_OW 67
// solar_recharge_percent := 100 ;
14986: LD_ADDR_OWVAR 79
14990: PUSH
14991: LD_INT 100
14993: ST_TO_ADDR
// end ;
14994: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14995: LD_EXP 29
14999: PUSH
15000: LD_EXP 53
15004: AND
15005: IFFALSE 15244
15007: GO 15009
15009: DISABLE
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
15014: PPUSH
// begin tmp := [ ] ;
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: EMPTY
15021: ST_TO_ADDR
// for i := 1 to 6 do
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: DOUBLE
15028: LD_INT 1
15030: DEC
15031: ST_TO_ADDR
15032: LD_INT 6
15034: PUSH
15035: FOR_TO
15036: IFFALSE 15141
// begin uc_nation := nation_nature ;
15038: LD_ADDR_OWVAR 21
15042: PUSH
15043: LD_INT 0
15045: ST_TO_ADDR
// uc_side := 0 ;
15046: LD_ADDR_OWVAR 20
15050: PUSH
15051: LD_INT 0
15053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15054: LD_ADDR_OWVAR 29
15058: PUSH
15059: LD_INT 12
15061: PUSH
15062: LD_INT 12
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: ST_TO_ADDR
// hc_agressivity := 20 ;
15069: LD_ADDR_OWVAR 35
15073: PUSH
15074: LD_INT 20
15076: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15077: LD_ADDR_OWVAR 28
15081: PUSH
15082: LD_INT 17
15084: ST_TO_ADDR
// hc_gallery :=  ;
15085: LD_ADDR_OWVAR 33
15089: PUSH
15090: LD_STRING 
15092: ST_TO_ADDR
// hc_name :=  ;
15093: LD_ADDR_OWVAR 26
15097: PUSH
15098: LD_STRING 
15100: ST_TO_ADDR
// un := CreateHuman ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: CALL_OW 44
15110: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15111: LD_VAR 0 2
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 51
// tmp := tmp ^ un ;
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_VAR 0 3
15132: PUSH
15133: LD_VAR 0 2
15137: ADD
15138: ST_TO_ADDR
// end ;
15139: GO 15035
15141: POP
15142: POP
// repeat wait ( 0 0$1 ) ;
15143: LD_INT 35
15145: PPUSH
15146: CALL_OW 67
// for un in tmp do
15150: LD_ADDR_VAR 0 2
15154: PUSH
15155: LD_VAR 0 3
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15235
// begin if IsDead ( un ) then
15163: LD_VAR 0 2
15167: PPUSH
15168: CALL_OW 301
15172: IFFALSE 15192
// begin tmp := tmp diff un ;
15174: LD_ADDR_VAR 0 3
15178: PUSH
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 2
15188: DIFF
15189: ST_TO_ADDR
// continue ;
15190: GO 15160
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15192: LD_VAR 0 2
15196: PPUSH
15197: LD_INT 3
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_INT 0
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: PPUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: CALL_OW 74
15228: PPUSH
15229: CALL_OW 115
// end ;
15233: GO 15160
15235: POP
15236: POP
// until not tmp ;
15237: LD_VAR 0 3
15241: NOT
15242: IFFALSE 15143
// end ;
15244: PPOPN 3
15246: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15247: LD_EXP 29
15251: PUSH
15252: LD_EXP 54
15256: AND
15257: IFFALSE 15311
15259: GO 15261
15261: DISABLE
// begin ToLua ( displayTroll(); ) ;
15262: LD_STRING displayTroll();
15264: PPUSH
15265: CALL_OW 559
// wait ( 3 3$00 ) ;
15269: LD_INT 6300
15271: PPUSH
15272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15276: LD_STRING hideTroll();
15278: PPUSH
15279: CALL_OW 559
// wait ( 1 1$00 ) ;
15283: LD_INT 2100
15285: PPUSH
15286: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15290: LD_STRING displayTroll();
15292: PPUSH
15293: CALL_OW 559
// wait ( 1 1$00 ) ;
15297: LD_INT 2100
15299: PPUSH
15300: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15304: LD_STRING hideTroll();
15306: PPUSH
15307: CALL_OW 559
// end ;
15311: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15312: LD_EXP 29
15316: PUSH
15317: LD_EXP 55
15321: AND
15322: IFFALSE 15385
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
// begin p := 0 ;
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_INT 0
15337: ST_TO_ADDR
// repeat game_speed := 1 ;
15338: LD_ADDR_OWVAR 65
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15346: LD_INT 35
15348: PPUSH
15349: CALL_OW 67
// p := p + 1 ;
15353: LD_ADDR_VAR 0 1
15357: PUSH
15358: LD_VAR 0 1
15362: PUSH
15363: LD_INT 1
15365: PLUS
15366: ST_TO_ADDR
// until p >= 60 ;
15367: LD_VAR 0 1
15371: PUSH
15372: LD_INT 60
15374: GREATEREQUAL
15375: IFFALSE 15338
// game_speed := 4 ;
15377: LD_ADDR_OWVAR 65
15381: PUSH
15382: LD_INT 4
15384: ST_TO_ADDR
// end ;
15385: PPOPN 1
15387: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15388: LD_EXP 29
15392: PUSH
15393: LD_EXP 56
15397: AND
15398: IFFALSE 15544
15400: GO 15402
15402: DISABLE
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15407: LD_ADDR_VAR 0 1
15411: PUSH
15412: LD_INT 22
15414: PUSH
15415: LD_OWVAR 2
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 2
15426: PUSH
15427: LD_INT 30
15429: PUSH
15430: LD_INT 0
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 30
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PPUSH
15456: CALL_OW 69
15460: ST_TO_ADDR
// if not depot then
15461: LD_VAR 0 1
15465: NOT
15466: IFFALSE 15470
// exit ;
15468: GO 15544
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15470: LD_ADDR_VAR 0 2
15474: PUSH
15475: LD_VAR 0 1
15479: PUSH
15480: LD_INT 1
15482: PPUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: PPUSH
15494: CALL_OW 274
15498: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15499: LD_VAR 0 2
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: LD_INT 0
15509: PPUSH
15510: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_INT 2
15521: PPUSH
15522: LD_INT 0
15524: PPUSH
15525: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15529: LD_VAR 0 2
15533: PPUSH
15534: LD_INT 3
15536: PPUSH
15537: LD_INT 0
15539: PPUSH
15540: CALL_OW 277
// end ;
15544: PPOPN 2
15546: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15547: LD_EXP 29
15551: PUSH
15552: LD_EXP 57
15556: AND
15557: IFFALSE 15654
15559: GO 15561
15561: DISABLE
15562: LD_INT 0
15564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15565: LD_ADDR_VAR 0 1
15569: PUSH
15570: LD_INT 22
15572: PUSH
15573: LD_OWVAR 2
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 21
15584: PUSH
15585: LD_INT 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 3
15594: PUSH
15595: LD_INT 23
15597: PUSH
15598: LD_INT 0
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: PPUSH
15614: CALL_OW 69
15618: ST_TO_ADDR
// if not tmp then
15619: LD_VAR 0 1
15623: NOT
15624: IFFALSE 15628
// exit ;
15626: GO 15654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15628: LD_VAR 0 1
15632: PUSH
15633: LD_INT 1
15635: PPUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 12
15645: ARRAY
15646: PPUSH
15647: LD_INT 200
15649: PPUSH
15650: CALL_OW 234
// end ;
15654: PPOPN 1
15656: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15657: LD_EXP 29
15661: PUSH
15662: LD_EXP 58
15666: AND
15667: IFFALSE 15746
15669: GO 15671
15671: DISABLE
15672: LD_INT 0
15674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15675: LD_ADDR_VAR 0 1
15679: PUSH
15680: LD_INT 22
15682: PUSH
15683: LD_OWVAR 2
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: ST_TO_ADDR
// if not tmp then
15711: LD_VAR 0 1
15715: NOT
15716: IFFALSE 15720
// exit ;
15718: GO 15746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 1
15727: PPUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 12
15737: ARRAY
15738: PPUSH
15739: LD_INT 60
15741: PPUSH
15742: CALL_OW 234
// end ;
15746: PPOPN 1
15748: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15749: LD_EXP 29
15753: PUSH
15754: LD_EXP 59
15758: AND
15759: IFFALSE 15858
15761: GO 15763
15763: DISABLE
15764: LD_INT 0
15766: PPUSH
15767: PPUSH
// begin enable ;
15768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15769: LD_ADDR_VAR 0 1
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_OWVAR 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 61
15788: PUSH
15789: EMPTY
15790: LIST
15791: PUSH
15792: LD_INT 33
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: PPUSH
15807: CALL_OW 69
15811: ST_TO_ADDR
// if not tmp then
15812: LD_VAR 0 1
15816: NOT
15817: IFFALSE 15821
// exit ;
15819: GO 15858
// for i in tmp do
15821: LD_ADDR_VAR 0 2
15825: PUSH
15826: LD_VAR 0 1
15830: PUSH
15831: FOR_IN
15832: IFFALSE 15856
// if IsControledBy ( i ) then
15834: LD_VAR 0 2
15838: PPUSH
15839: CALL_OW 312
15843: IFFALSE 15854
// ComUnlink ( i ) ;
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 136
15854: GO 15831
15856: POP
15857: POP
// end ;
15858: PPOPN 2
15860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15861: LD_EXP 29
15865: PUSH
15866: LD_EXP 60
15870: AND
15871: IFFALSE 16011
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
// begin ToLua ( displayPowell(); ) ;
15880: LD_STRING displayPowell();
15882: PPUSH
15883: CALL_OW 559
// uc_side := 0 ;
15887: LD_ADDR_OWVAR 20
15891: PUSH
15892: LD_INT 0
15894: ST_TO_ADDR
// uc_nation := 2 ;
15895: LD_ADDR_OWVAR 21
15899: PUSH
15900: LD_INT 2
15902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15903: LD_ADDR_OWVAR 37
15907: PUSH
15908: LD_INT 14
15910: ST_TO_ADDR
// vc_engine := engine_siberite ;
15911: LD_ADDR_OWVAR 39
15915: PUSH
15916: LD_INT 3
15918: ST_TO_ADDR
// vc_control := control_apeman ;
15919: LD_ADDR_OWVAR 38
15923: PUSH
15924: LD_INT 5
15926: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15927: LD_ADDR_OWVAR 40
15931: PUSH
15932: LD_INT 29
15934: ST_TO_ADDR
// un := CreateVehicle ;
15935: LD_ADDR_VAR 0 2
15939: PUSH
15940: CALL_OW 45
15944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15945: LD_VAR 0 2
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15957: LD_INT 35
15959: PPUSH
15960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15964: LD_VAR 0 2
15968: PPUSH
15969: LD_INT 22
15971: PUSH
15972: LD_OWVAR 2
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PPUSH
15986: LD_VAR 0 2
15990: PPUSH
15991: CALL_OW 74
15995: PPUSH
15996: CALL_OW 115
// until IsDead ( un ) ;
16000: LD_VAR 0 2
16004: PPUSH
16005: CALL_OW 301
16009: IFFALSE 15957
// end ;
16011: PPOPN 2
16013: END
// every 0 0$1 trigger StreamModeActive and sStu do
16014: LD_EXP 29
16018: PUSH
16019: LD_EXP 68
16023: AND
16024: IFFALSE 16040
16026: GO 16028
16028: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16029: LD_STRING displayStucuk();
16031: PPUSH
16032: CALL_OW 559
// ResetFog ;
16036: CALL_OW 335
// end ;
16040: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16041: LD_EXP 29
16045: PUSH
16046: LD_EXP 61
16050: AND
16051: IFFALSE 16192
16053: GO 16055
16055: DISABLE
16056: LD_INT 0
16058: PPUSH
16059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_OWVAR 2
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 21
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL_OW 69
16095: ST_TO_ADDR
// if not tmp then
16096: LD_VAR 0 2
16100: NOT
16101: IFFALSE 16105
// exit ;
16103: GO 16192
// un := tmp [ rand ( 1 , tmp ) ] ;
16105: LD_ADDR_VAR 0 1
16109: PUSH
16110: LD_VAR 0 2
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16129: LD_VAR 0 1
16133: PPUSH
16134: LD_INT 0
16136: PPUSH
16137: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16141: LD_VAR 0 1
16145: PPUSH
16146: LD_OWVAR 3
16150: PUSH
16151: LD_VAR 0 1
16155: DIFF
16156: PPUSH
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 74
16166: PPUSH
16167: CALL_OW 115
// wait ( 0 0$20 ) ;
16171: LD_INT 700
16173: PPUSH
16174: CALL_OW 67
// SetSide ( un , your_side ) ;
16178: LD_VAR 0 1
16182: PPUSH
16183: LD_OWVAR 2
16187: PPUSH
16188: CALL_OW 235
// end ;
16192: PPOPN 2
16194: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16195: LD_EXP 29
16199: PUSH
16200: LD_EXP 62
16204: AND
16205: IFFALSE 16311
16207: GO 16209
16209: DISABLE
16210: LD_INT 0
16212: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16213: LD_ADDR_VAR 0 1
16217: PUSH
16218: LD_INT 22
16220: PUSH
16221: LD_OWVAR 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 30
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 30
16245: PUSH
16246: LD_INT 1
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: ST_TO_ADDR
// if not depot then
16267: LD_VAR 0 1
16271: NOT
16272: IFFALSE 16276
// exit ;
16274: GO 16311
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16276: LD_VAR 0 1
16280: PUSH
16281: LD_INT 1
16283: ARRAY
16284: PPUSH
16285: CALL_OW 250
16289: PPUSH
16290: LD_VAR 0 1
16294: PUSH
16295: LD_INT 1
16297: ARRAY
16298: PPUSH
16299: CALL_OW 251
16303: PPUSH
16304: LD_INT 70
16306: PPUSH
16307: CALL_OW 495
// end ;
16311: PPOPN 1
16313: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16314: LD_EXP 29
16318: PUSH
16319: LD_EXP 63
16323: AND
16324: IFFALSE 16535
16326: GO 16328
16328: DISABLE
16329: LD_INT 0
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16336: LD_ADDR_VAR 0 5
16340: PUSH
16341: LD_INT 22
16343: PUSH
16344: LD_OWVAR 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 21
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 69
16371: ST_TO_ADDR
// if not tmp then
16372: LD_VAR 0 5
16376: NOT
16377: IFFALSE 16381
// exit ;
16379: GO 16535
// for i in tmp do
16381: LD_ADDR_VAR 0 1
16385: PUSH
16386: LD_VAR 0 5
16390: PUSH
16391: FOR_IN
16392: IFFALSE 16533
// begin d := rand ( 0 , 5 ) ;
16394: LD_ADDR_VAR 0 4
16398: PUSH
16399: LD_INT 0
16401: PPUSH
16402: LD_INT 5
16404: PPUSH
16405: CALL_OW 12
16409: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16410: LD_ADDR_VAR 0 2
16414: PUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 250
16424: PPUSH
16425: LD_VAR 0 4
16429: PPUSH
16430: LD_INT 3
16432: PPUSH
16433: LD_INT 12
16435: PPUSH
16436: CALL_OW 12
16440: PPUSH
16441: CALL_OW 272
16445: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 251
16460: PPUSH
16461: LD_VAR 0 4
16465: PPUSH
16466: LD_INT 3
16468: PPUSH
16469: LD_INT 12
16471: PPUSH
16472: CALL_OW 12
16476: PPUSH
16477: CALL_OW 273
16481: ST_TO_ADDR
// if ValidHex ( x , y ) then
16482: LD_VAR 0 2
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: CALL_OW 488
16496: IFFALSE 16531
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 2
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: LD_INT 3
16515: PPUSH
16516: LD_INT 6
16518: PPUSH
16519: CALL_OW 12
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 483
// end ;
16531: GO 16391
16533: POP
16534: POP
// end ;
16535: PPOPN 5
16537: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16538: LD_EXP 29
16542: PUSH
16543: LD_EXP 64
16547: AND
16548: IFFALSE 16642
16550: GO 16552
16552: DISABLE
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_INT 22
16564: PUSH
16565: LD_OWVAR 2
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 32
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 21
16586: PUSH
16587: LD_INT 2
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 69
16603: ST_TO_ADDR
// if not tmp then
16604: LD_VAR 0 2
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16642
// for i in tmp do
16613: LD_ADDR_VAR 0 1
16617: PUSH
16618: LD_VAR 0 2
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16640
// SetFuel ( i , 0 ) ;
16626: LD_VAR 0 1
16630: PPUSH
16631: LD_INT 0
16633: PPUSH
16634: CALL_OW 240
16638: GO 16623
16640: POP
16641: POP
// end ;
16642: PPOPN 2
16644: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16645: LD_EXP 29
16649: PUSH
16650: LD_EXP 65
16654: AND
16655: IFFALSE 16721
16657: GO 16659
16659: DISABLE
16660: LD_INT 0
16662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16663: LD_ADDR_VAR 0 1
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_OWVAR 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 30
16682: PUSH
16683: LD_INT 29
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// if not tmp then
16699: LD_VAR 0 1
16703: NOT
16704: IFFALSE 16708
// exit ;
16706: GO 16721
// DestroyUnit ( tmp [ 1 ] ) ;
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: CALL_OW 65
// end ;
16721: PPOPN 1
16723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16724: LD_EXP 29
16728: PUSH
16729: LD_EXP 67
16733: AND
16734: IFFALSE 16863
16736: GO 16738
16738: DISABLE
16739: LD_INT 0
16741: PPUSH
// begin uc_side := 0 ;
16742: LD_ADDR_OWVAR 20
16746: PUSH
16747: LD_INT 0
16749: ST_TO_ADDR
// uc_nation := nation_arabian ;
16750: LD_ADDR_OWVAR 21
16754: PUSH
16755: LD_INT 2
16757: ST_TO_ADDR
// hc_gallery :=  ;
16758: LD_ADDR_OWVAR 33
16762: PUSH
16763: LD_STRING 
16765: ST_TO_ADDR
// hc_name :=  ;
16766: LD_ADDR_OWVAR 26
16770: PUSH
16771: LD_STRING 
16773: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16774: LD_INT 1
16776: PPUSH
16777: LD_INT 11
16779: PPUSH
16780: LD_INT 10
16782: PPUSH
16783: CALL_OW 380
// un := CreateHuman ;
16787: LD_ADDR_VAR 0 1
16791: PUSH
16792: CALL_OW 44
16796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16797: LD_VAR 0 1
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16809: LD_INT 35
16811: PPUSH
16812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_INT 22
16823: PUSH
16824: LD_OWVAR 2
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: PPUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL_OW 74
16847: PPUSH
16848: CALL_OW 115
// until IsDead ( un ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: CALL_OW 301
16861: IFFALSE 16809
// end ;
16863: PPOPN 1
16865: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16866: LD_EXP 29
16870: PUSH
16871: LD_EXP 69
16875: AND
16876: IFFALSE 16888
16878: GO 16880
16880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16881: LD_STRING earthquake(getX(game), 0, 32)
16883: PPUSH
16884: CALL_OW 559
16888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16889: LD_EXP 29
16893: PUSH
16894: LD_EXP 70
16898: AND
16899: IFFALSE 16990
16901: GO 16903
16903: DISABLE
16904: LD_INT 0
16906: PPUSH
// begin enable ;
16907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16908: LD_ADDR_VAR 0 1
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_OWVAR 2
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 21
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 33
16937: PUSH
16938: LD_INT 3
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: ST_TO_ADDR
// if not tmp then
16955: LD_VAR 0 1
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 16990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16964: LD_VAR 0 1
16968: PUSH
16969: LD_INT 1
16971: PPUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 12
16981: ARRAY
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: CALL_OW 234
// end ;
16990: PPOPN 1
16992: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16993: LD_EXP 29
16997: PUSH
16998: LD_EXP 71
17002: AND
17003: IFFALSE 17144
17005: GO 17007
17007: DISABLE
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
17012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_OWVAR 2
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 25
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: ST_TO_ADDR
// if not tmp then
17049: LD_VAR 0 3
17053: NOT
17054: IFFALSE 17058
// exit ;
17056: GO 17144
// un := tmp [ rand ( 1 , tmp ) ] ;
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_VAR 0 3
17067: PUSH
17068: LD_INT 1
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: CALL_OW 12
17080: ARRAY
17081: ST_TO_ADDR
// if Crawls ( un ) then
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 318
17091: IFFALSE 17102
// ComWalk ( un ) ;
17093: LD_VAR 0 2
17097: PPUSH
17098: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17102: LD_VAR 0 2
17106: PPUSH
17107: LD_INT 9
17109: PPUSH
17110: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17114: LD_INT 28
17116: PPUSH
17117: LD_OWVAR 2
17121: PPUSH
17122: LD_INT 2
17124: PPUSH
17125: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17129: LD_INT 29
17131: PPUSH
17132: LD_OWVAR 2
17136: PPUSH
17137: LD_INT 2
17139: PPUSH
17140: CALL_OW 322
// end ;
17144: PPOPN 3
17146: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17147: LD_EXP 29
17151: PUSH
17152: LD_EXP 72
17156: AND
17157: IFFALSE 17268
17159: GO 17161
17161: DISABLE
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17167: LD_ADDR_VAR 0 3
17171: PUSH
17172: LD_INT 22
17174: PUSH
17175: LD_OWVAR 2
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 25
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PPUSH
17198: CALL_OW 69
17202: ST_TO_ADDR
// if not tmp then
17203: LD_VAR 0 3
17207: NOT
17208: IFFALSE 17212
// exit ;
17210: GO 17268
// un := tmp [ rand ( 1 , tmp ) ] ;
17212: LD_ADDR_VAR 0 2
17216: PUSH
17217: LD_VAR 0 3
17221: PUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_VAR 0 3
17229: PPUSH
17230: CALL_OW 12
17234: ARRAY
17235: ST_TO_ADDR
// if Crawls ( un ) then
17236: LD_VAR 0 2
17240: PPUSH
17241: CALL_OW 318
17245: IFFALSE 17256
// ComWalk ( un ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17256: LD_VAR 0 2
17260: PPUSH
17261: LD_INT 8
17263: PPUSH
17264: CALL_OW 336
// end ;
17268: PPOPN 3
17270: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17271: LD_EXP 29
17275: PUSH
17276: LD_EXP 73
17280: AND
17281: IFFALSE 17425
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_OWVAR 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 34
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 34
17332: PUSH
17333: LD_INT 51
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 34
17342: PUSH
17343: LD_INT 32
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ST_TO_ADDR
// if not tmp then
17366: LD_VAR 0 2
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17425
// for i in tmp do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17423
// if GetCargo ( i , mat_artifact ) = 0 then
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 4
17395: PPUSH
17396: CALL_OW 289
17400: PUSH
17401: LD_INT 0
17403: EQUAL
17404: IFFALSE 17421
// SetCargo ( i , mat_siberit , 100 ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_INT 3
17413: PPUSH
17414: LD_INT 100
17416: PPUSH
17417: CALL_OW 290
17421: GO 17385
17423: POP
17424: POP
// end ;
17425: PPOPN 2
17427: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17428: LD_EXP 29
17432: PUSH
17433: LD_EXP 74
17437: AND
17438: IFFALSE 17621
17440: GO 17442
17442: DISABLE
17443: LD_INT 0
17445: PPUSH
17446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17447: LD_ADDR_VAR 0 2
17451: PUSH
17452: LD_INT 22
17454: PUSH
17455: LD_OWVAR 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PPUSH
17464: CALL_OW 69
17468: ST_TO_ADDR
// if not tmp then
17469: LD_VAR 0 2
17473: NOT
17474: IFFALSE 17478
// exit ;
17476: GO 17621
// for i := 1 to 2 do
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: DOUBLE
17484: LD_INT 1
17486: DEC
17487: ST_TO_ADDR
17488: LD_INT 2
17490: PUSH
17491: FOR_TO
17492: IFFALSE 17619
// begin uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// uc_nation := nation_american ;
17504: LD_ADDR_OWVAR 21
17508: PUSH
17509: LD_INT 1
17511: ST_TO_ADDR
// vc_chassis := us_morphling ;
17512: LD_ADDR_OWVAR 37
17516: PUSH
17517: LD_INT 5
17519: ST_TO_ADDR
// vc_engine := engine_siberite ;
17520: LD_ADDR_OWVAR 39
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// vc_control := control_computer ;
17528: LD_ADDR_OWVAR 38
17532: PUSH
17533: LD_INT 3
17535: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17536: LD_ADDR_OWVAR 40
17540: PUSH
17541: LD_INT 10
17543: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17544: LD_VAR 0 2
17548: PUSH
17549: LD_INT 1
17551: ARRAY
17552: PPUSH
17553: CALL_OW 310
17557: NOT
17558: IFFALSE 17605
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17560: CALL_OW 45
17564: PPUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: CALL_OW 250
17578: PPUSH
17579: LD_VAR 0 2
17583: PUSH
17584: LD_INT 1
17586: ARRAY
17587: PPUSH
17588: CALL_OW 251
17592: PPUSH
17593: LD_INT 12
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 50
17603: GO 17617
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17605: CALL_OW 45
17609: PPUSH
17610: LD_INT 1
17612: PPUSH
17613: CALL_OW 51
// end ;
17617: GO 17491
17619: POP
17620: POP
// end ;
17621: PPOPN 2
17623: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17624: LD_EXP 29
17628: PUSH
17629: LD_EXP 75
17633: AND
17634: IFFALSE 17856
17636: GO 17638
17638: DISABLE
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17647: LD_ADDR_VAR 0 6
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_OWVAR 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 21
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: LD_INT 23
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: PPUSH
17696: CALL_OW 69
17700: ST_TO_ADDR
// if not tmp then
17701: LD_VAR 0 6
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17856
// s1 := rand ( 1 , 4 ) ;
17710: LD_ADDR_VAR 0 2
17714: PUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 4
17720: PPUSH
17721: CALL_OW 12
17725: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17726: LD_ADDR_VAR 0 4
17730: PUSH
17731: LD_VAR 0 6
17735: PUSH
17736: LD_INT 1
17738: ARRAY
17739: PPUSH
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 259
17749: ST_TO_ADDR
// if s1 = 1 then
17750: LD_VAR 0 2
17754: PUSH
17755: LD_INT 1
17757: EQUAL
17758: IFFALSE 17778
// s2 := rand ( 2 , 4 ) else
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: LD_INT 2
17767: PPUSH
17768: LD_INT 4
17770: PPUSH
17771: CALL_OW 12
17775: ST_TO_ADDR
17776: GO 17786
// s2 := 1 ;
17778: LD_ADDR_VAR 0 3
17782: PUSH
17783: LD_INT 1
17785: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17786: LD_ADDR_VAR 0 5
17790: PUSH
17791: LD_VAR 0 6
17795: PUSH
17796: LD_INT 1
17798: ARRAY
17799: PPUSH
17800: LD_VAR 0 3
17804: PPUSH
17805: CALL_OW 259
17809: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17810: LD_VAR 0 6
17814: PUSH
17815: LD_INT 1
17817: ARRAY
17818: PPUSH
17819: LD_VAR 0 2
17823: PPUSH
17824: LD_VAR 0 5
17828: PPUSH
17829: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17833: LD_VAR 0 6
17837: PUSH
17838: LD_INT 1
17840: ARRAY
17841: PPUSH
17842: LD_VAR 0 3
17846: PPUSH
17847: LD_VAR 0 4
17851: PPUSH
17852: CALL_OW 237
// end ;
17856: PPOPN 6
17858: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17859: LD_EXP 29
17863: PUSH
17864: LD_EXP 76
17868: AND
17869: IFFALSE 17948
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17877: LD_ADDR_VAR 0 1
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 30
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 1
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 17948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17922: LD_VAR 0 1
17926: PUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 12
17939: ARRAY
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 234
// end ;
17948: PPOPN 1
17950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17951: LD_EXP 29
17955: PUSH
17956: LD_EXP 77
17960: AND
17961: IFFALSE 18073
17963: GO 17965
17965: DISABLE
17966: LD_INT 0
17968: PPUSH
17969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17970: LD_ADDR_VAR 0 2
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_OWVAR 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 2
17989: PUSH
17990: LD_INT 30
17992: PUSH
17993: LD_INT 27
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 30
18002: PUSH
18003: LD_INT 26
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 30
18012: PUSH
18013: LD_INT 28
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PPUSH
18030: CALL_OW 69
18034: ST_TO_ADDR
// if not tmp then
18035: LD_VAR 0 2
18039: NOT
18040: IFFALSE 18044
// exit ;
18042: GO 18073
// for i in tmp do
18044: LD_ADDR_VAR 0 1
18048: PUSH
18049: LD_VAR 0 2
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18071
// SetLives ( i , 1 ) ;
18057: LD_VAR 0 1
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 234
18069: GO 18054
18071: POP
18072: POP
// end ;
18073: PPOPN 2
18075: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18076: LD_EXP 29
18080: PUSH
18081: LD_EXP 78
18085: AND
18086: IFFALSE 18373
18088: GO 18090
18090: DISABLE
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
18095: PPUSH
// begin i := rand ( 1 , 7 ) ;
18096: LD_ADDR_VAR 0 1
18100: PUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 7
18106: PPUSH
18107: CALL_OW 12
18111: ST_TO_ADDR
// case i of 1 :
18112: LD_VAR 0 1
18116: PUSH
18117: LD_INT 1
18119: DOUBLE
18120: EQUAL
18121: IFTRUE 18125
18123: GO 18135
18125: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18126: LD_STRING earthquake(getX(game), 0, 32)
18128: PPUSH
18129: CALL_OW 559
18133: GO 18373
18135: LD_INT 2
18137: DOUBLE
18138: EQUAL
18139: IFTRUE 18143
18141: GO 18157
18143: POP
// begin ToLua ( displayStucuk(); ) ;
18144: LD_STRING displayStucuk();
18146: PPUSH
18147: CALL_OW 559
// ResetFog ;
18151: CALL_OW 335
// end ; 3 :
18155: GO 18373
18157: LD_INT 3
18159: DOUBLE
18160: EQUAL
18161: IFTRUE 18165
18163: GO 18269
18165: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// if not tmp then
18202: LD_VAR 0 2
18206: NOT
18207: IFFALSE 18211
// exit ;
18209: GO 18373
// un := tmp [ rand ( 1 , tmp ) ] ;
18211: LD_ADDR_VAR 0 3
18215: PUSH
18216: LD_VAR 0 2
18220: PUSH
18221: LD_INT 1
18223: PPUSH
18224: LD_VAR 0 2
18228: PPUSH
18229: CALL_OW 12
18233: ARRAY
18234: ST_TO_ADDR
// if Crawls ( un ) then
18235: LD_VAR 0 3
18239: PPUSH
18240: CALL_OW 318
18244: IFFALSE 18255
// ComWalk ( un ) ;
18246: LD_VAR 0 3
18250: PPUSH
18251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18255: LD_VAR 0 3
18259: PPUSH
18260: LD_INT 8
18262: PPUSH
18263: CALL_OW 336
// end ; 4 :
18267: GO 18373
18269: LD_INT 4
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18351
18277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 29
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// if not tmp then
18314: LD_VAR 0 2
18318: NOT
18319: IFFALSE 18323
// exit ;
18321: GO 18373
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18323: LD_VAR 0 2
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: PPUSH
18332: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18336: LD_VAR 0 2
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL_OW 65
// end ; 5 .. 7 :
18349: GO 18373
18351: LD_INT 5
18353: DOUBLE
18354: GREATEREQUAL
18355: IFFALSE 18363
18357: LD_INT 7
18359: DOUBLE
18360: LESSEQUAL
18361: IFTRUE 18365
18363: GO 18372
18365: POP
// StreamSibBomb ; end ;
18366: CALL 14610 0 0
18370: GO 18373
18372: POP
// end ;
18373: PPOPN 3
18375: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18376: LD_EXP 29
18380: PUSH
18381: LD_EXP 79
18385: AND
18386: IFFALSE 18542
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
18395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_INT 81
18403: PUSH
18404: LD_OWVAR 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 21
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 21
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: ST_TO_ADDR
// if not tmp then
18450: LD_VAR 0 2
18454: NOT
18455: IFFALSE 18459
// exit ;
18457: GO 18542
// p := 0 ;
18459: LD_ADDR_VAR 0 3
18463: PUSH
18464: LD_INT 0
18466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18467: LD_INT 35
18469: PPUSH
18470: CALL_OW 67
// p := p + 1 ;
18474: LD_ADDR_VAR 0 3
18478: PUSH
18479: LD_VAR 0 3
18483: PUSH
18484: LD_INT 1
18486: PLUS
18487: ST_TO_ADDR
// for i in tmp do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: FOR_IN
18499: IFFALSE 18530
// if GetLives ( i ) < 1000 then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 256
18510: PUSH
18511: LD_INT 1000
18513: LESS
18514: IFFALSE 18528
// SetLives ( i , 1000 ) ;
18516: LD_VAR 0 1
18520: PPUSH
18521: LD_INT 1000
18523: PPUSH
18524: CALL_OW 234
18528: GO 18498
18530: POP
18531: POP
// until p > 20 ;
18532: LD_VAR 0 3
18536: PUSH
18537: LD_INT 20
18539: GREATER
18540: IFFALSE 18467
// end ;
18542: PPOPN 3
18544: END
// every 0 0$1 trigger StreamModeActive and sTime do
18545: LD_EXP 29
18549: PUSH
18550: LD_EXP 80
18554: AND
18555: IFFALSE 18590
18557: GO 18559
18559: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18560: LD_INT 28
18562: PPUSH
18563: LD_OWVAR 2
18567: PPUSH
18568: LD_INT 2
18570: PPUSH
18571: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18575: LD_INT 30
18577: PPUSH
18578: LD_OWVAR 2
18582: PPUSH
18583: LD_INT 2
18585: PPUSH
18586: CALL_OW 322
// end ;
18590: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18591: LD_EXP 29
18595: PUSH
18596: LD_EXP 81
18600: AND
18601: IFFALSE 18722
18603: GO 18605
18605: DISABLE
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18610: LD_ADDR_VAR 0 2
18614: PUSH
18615: LD_INT 22
18617: PUSH
18618: LD_OWVAR 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 23
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: ST_TO_ADDR
// if not tmp then
18664: LD_VAR 0 2
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18722
// for i in tmp do
18673: LD_ADDR_VAR 0 1
18677: PUSH
18678: LD_VAR 0 2
18682: PUSH
18683: FOR_IN
18684: IFFALSE 18720
// begin if Crawls ( i ) then
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 318
18695: IFFALSE 18706
// ComWalk ( i ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: CALL_OW 138
// SetClass ( i , 2 ) ;
18706: LD_VAR 0 1
18710: PPUSH
18711: LD_INT 2
18713: PPUSH
18714: CALL_OW 336
// end ;
18718: GO 18683
18720: POP
18721: POP
// end ;
18722: PPOPN 2
18724: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18725: LD_EXP 29
18729: PUSH
18730: LD_EXP 82
18734: AND
18735: IFFALSE 19023
18737: GO 18739
18739: DISABLE
18740: LD_INT 0
18742: PPUSH
18743: PPUSH
18744: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18745: LD_OWVAR 2
18749: PPUSH
18750: LD_INT 9
18752: PPUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18763: LD_INT 9
18765: PPUSH
18766: LD_OWVAR 2
18770: PPUSH
18771: CALL_OW 343
// uc_side := 9 ;
18775: LD_ADDR_OWVAR 20
18779: PUSH
18780: LD_INT 9
18782: ST_TO_ADDR
// uc_nation := 2 ;
18783: LD_ADDR_OWVAR 21
18787: PUSH
18788: LD_INT 2
18790: ST_TO_ADDR
// hc_name := Dark Warrior ;
18791: LD_ADDR_OWVAR 26
18795: PUSH
18796: LD_STRING Dark Warrior
18798: ST_TO_ADDR
// hc_gallery :=  ;
18799: LD_ADDR_OWVAR 33
18803: PUSH
18804: LD_STRING 
18806: ST_TO_ADDR
// hc_noskilllimit := true ;
18807: LD_ADDR_OWVAR 76
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18815: LD_ADDR_OWVAR 31
18819: PUSH
18820: LD_INT 30
18822: PUSH
18823: LD_INT 30
18825: PUSH
18826: LD_INT 30
18828: PUSH
18829: LD_INT 30
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: ST_TO_ADDR
// un := CreateHuman ;
18838: LD_ADDR_VAR 0 3
18842: PUSH
18843: CALL_OW 44
18847: ST_TO_ADDR
// hc_noskilllimit := false ;
18848: LD_ADDR_OWVAR 76
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18856: LD_VAR 0 3
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 51
// ToLua ( playRanger() ) ;
18868: LD_STRING playRanger()
18870: PPUSH
18871: CALL_OW 559
// p := 0 ;
18875: LD_ADDR_VAR 0 2
18879: PUSH
18880: LD_INT 0
18882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18883: LD_INT 35
18885: PPUSH
18886: CALL_OW 67
// p := p + 1 ;
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: LD_VAR 0 2
18899: PUSH
18900: LD_INT 1
18902: PLUS
18903: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18904: LD_VAR 0 3
18908: PPUSH
18909: CALL_OW 256
18913: PUSH
18914: LD_INT 1000
18916: LESS
18917: IFFALSE 18931
// SetLives ( un , 1000 ) ;
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1000
18926: PPUSH
18927: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18931: LD_VAR 0 3
18935: PPUSH
18936: LD_INT 81
18938: PUSH
18939: LD_OWVAR 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 91
18950: PUSH
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 30
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 69
18972: PPUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL_OW 74
18982: PPUSH
18983: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18987: LD_VAR 0 2
18991: PUSH
18992: LD_INT 80
18994: GREATER
18995: PUSH
18996: LD_VAR 0 3
19000: PPUSH
19001: CALL_OW 301
19005: OR
19006: IFFALSE 18883
// if un then
19008: LD_VAR 0 3
19012: IFFALSE 19023
// RemoveUnit ( un ) ;
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 64
// end ;
19023: PPOPN 3
19025: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19026: LD_EXP 83
19030: IFFALSE 19146
19032: GO 19034
19034: DISABLE
19035: LD_INT 0
19037: PPUSH
19038: PPUSH
19039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19040: LD_ADDR_VAR 0 2
19044: PUSH
19045: LD_INT 81
19047: PUSH
19048: LD_OWVAR 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19076: LD_STRING playComputer()
19078: PPUSH
19079: CALL_OW 559
// if not tmp then
19083: LD_VAR 0 2
19087: NOT
19088: IFFALSE 19092
// exit ;
19090: GO 19146
// for i in tmp do
19092: LD_ADDR_VAR 0 1
19096: PUSH
19097: LD_VAR 0 2
19101: PUSH
19102: FOR_IN
19103: IFFALSE 19144
// for j := 1 to 4 do
19105: LD_ADDR_VAR 0 3
19109: PUSH
19110: DOUBLE
19111: LD_INT 1
19113: DEC
19114: ST_TO_ADDR
19115: LD_INT 4
19117: PUSH
19118: FOR_TO
19119: IFFALSE 19140
// SetSkill ( i , j , 10 ) ;
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_VAR 0 3
19130: PPUSH
19131: LD_INT 10
19133: PPUSH
19134: CALL_OW 237
19138: GO 19118
19140: POP
19141: POP
19142: GO 19102
19144: POP
19145: POP
// end ;
19146: PPOPN 3
19148: END
// every 0 0$1 trigger s30 do var i , tmp ;
19149: LD_EXP 84
19153: IFFALSE 19222
19155: GO 19157
19157: DISABLE
19158: LD_INT 0
19160: PPUSH
19161: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_OWVAR 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: ST_TO_ADDR
// if not tmp then
19184: LD_VAR 0 2
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19222
// for i in tmp do
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: LD_VAR 0 2
19202: PUSH
19203: FOR_IN
19204: IFFALSE 19220
// SetLives ( i , 300 ) ;
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_INT 300
19213: PPUSH
19214: CALL_OW 234
19218: GO 19203
19220: POP
19221: POP
// end ;
19222: PPOPN 2
19224: END
// every 0 0$1 trigger s60 do var i , tmp ;
19225: LD_EXP 85
19229: IFFALSE 19298
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
19237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19238: LD_ADDR_VAR 0 2
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_OWVAR 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 69
19259: ST_TO_ADDR
// if not tmp then
19260: LD_VAR 0 2
19264: NOT
19265: IFFALSE 19269
// exit ;
19267: GO 19298
// for i in tmp do
19269: LD_ADDR_VAR 0 1
19273: PUSH
19274: LD_VAR 0 2
19278: PUSH
19279: FOR_IN
19280: IFFALSE 19296
// SetLives ( i , 600 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_INT 600
19289: PPUSH
19290: CALL_OW 234
19294: GO 19279
19296: POP
19297: POP
// end ;
19298: PPOPN 2
19300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19301: LD_INT 0
19303: PPUSH
// case cmd of 301 :
19304: LD_VAR 0 1
19308: PUSH
19309: LD_INT 301
19311: DOUBLE
19312: EQUAL
19313: IFTRUE 19317
19315: GO 19349
19317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19318: LD_VAR 0 6
19322: PPUSH
19323: LD_VAR 0 7
19327: PPUSH
19328: LD_VAR 0 8
19332: PPUSH
19333: LD_VAR 0 4
19337: PPUSH
19338: LD_VAR 0 5
19342: PPUSH
19343: CALL 20550 0 5
19347: GO 19470
19349: LD_INT 302
19351: DOUBLE
19352: EQUAL
19353: IFTRUE 19357
19355: GO 19394
19357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19358: LD_VAR 0 6
19362: PPUSH
19363: LD_VAR 0 7
19367: PPUSH
19368: LD_VAR 0 8
19372: PPUSH
19373: LD_VAR 0 9
19377: PPUSH
19378: LD_VAR 0 4
19382: PPUSH
19383: LD_VAR 0 5
19387: PPUSH
19388: CALL 20641 0 6
19392: GO 19470
19394: LD_INT 303
19396: DOUBLE
19397: EQUAL
19398: IFTRUE 19402
19400: GO 19439
19402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19403: LD_VAR 0 6
19407: PPUSH
19408: LD_VAR 0 7
19412: PPUSH
19413: LD_VAR 0 8
19417: PPUSH
19418: LD_VAR 0 9
19422: PPUSH
19423: LD_VAR 0 4
19427: PPUSH
19428: LD_VAR 0 5
19432: PPUSH
19433: CALL 19475 0 6
19437: GO 19470
19439: LD_INT 304
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19469
19447: POP
// hHackTeleport ( unit , x , y ) ; end ;
19448: LD_VAR 0 2
19452: PPUSH
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL 21234 0 3
19467: GO 19470
19469: POP
// end ;
19470: LD_VAR 0 12
19474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19475: LD_INT 0
19477: PPUSH
19478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19479: LD_VAR 0 1
19483: PUSH
19484: LD_INT 1
19486: LESS
19487: PUSH
19488: LD_VAR 0 1
19492: PUSH
19493: LD_INT 3
19495: GREATER
19496: OR
19497: PUSH
19498: LD_VAR 0 5
19502: PPUSH
19503: LD_VAR 0 6
19507: PPUSH
19508: CALL_OW 428
19512: OR
19513: IFFALSE 19517
// exit ;
19515: GO 20237
// uc_side := your_side ;
19517: LD_ADDR_OWVAR 20
19521: PUSH
19522: LD_OWVAR 2
19526: ST_TO_ADDR
// uc_nation := nation ;
19527: LD_ADDR_OWVAR 21
19531: PUSH
19532: LD_VAR 0 1
19536: ST_TO_ADDR
// bc_level = 1 ;
19537: LD_ADDR_OWVAR 43
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// case btype of 1 :
19545: LD_VAR 0 2
19549: PUSH
19550: LD_INT 1
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19569
19558: POP
// bc_type := b_depot ; 2 :
19559: LD_ADDR_OWVAR 42
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
19567: GO 20181
19569: LD_INT 2
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19588
19577: POP
// bc_type := b_warehouse ; 3 :
19578: LD_ADDR_OWVAR 42
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
19586: GO 20181
19588: LD_INT 3
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19607
19596: POP
// bc_type := b_lab ; 4 .. 9 :
19597: LD_ADDR_OWVAR 42
19601: PUSH
19602: LD_INT 6
19604: ST_TO_ADDR
19605: GO 20181
19607: LD_INT 4
19609: DOUBLE
19610: GREATEREQUAL
19611: IFFALSE 19619
19613: LD_INT 9
19615: DOUBLE
19616: LESSEQUAL
19617: IFTRUE 19621
19619: GO 19673
19621: POP
// begin bc_type := b_lab_half ;
19622: LD_ADDR_OWVAR 42
19626: PUSH
19627: LD_INT 7
19629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19630: LD_ADDR_OWVAR 44
19634: PUSH
19635: LD_INT 10
19637: PUSH
19638: LD_INT 11
19640: PUSH
19641: LD_INT 12
19643: PUSH
19644: LD_INT 15
19646: PUSH
19647: LD_INT 14
19649: PUSH
19650: LD_INT 13
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: PUSH
19661: LD_VAR 0 2
19665: PUSH
19666: LD_INT 3
19668: MINUS
19669: ARRAY
19670: ST_TO_ADDR
// end ; 10 .. 13 :
19671: GO 20181
19673: LD_INT 10
19675: DOUBLE
19676: GREATEREQUAL
19677: IFFALSE 19685
19679: LD_INT 13
19681: DOUBLE
19682: LESSEQUAL
19683: IFTRUE 19687
19685: GO 19764
19687: POP
// begin bc_type := b_lab_full ;
19688: LD_ADDR_OWVAR 42
19692: PUSH
19693: LD_INT 8
19695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19696: LD_ADDR_OWVAR 44
19700: PUSH
19701: LD_INT 10
19703: PUSH
19704: LD_INT 12
19706: PUSH
19707: LD_INT 14
19709: PUSH
19710: LD_INT 13
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: LD_VAR 0 2
19723: PUSH
19724: LD_INT 9
19726: MINUS
19727: ARRAY
19728: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19729: LD_ADDR_OWVAR 45
19733: PUSH
19734: LD_INT 11
19736: PUSH
19737: LD_INT 15
19739: PUSH
19740: LD_INT 12
19742: PUSH
19743: LD_INT 15
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: PUSH
19752: LD_VAR 0 2
19756: PUSH
19757: LD_INT 9
19759: MINUS
19760: ARRAY
19761: ST_TO_ADDR
// end ; 14 :
19762: GO 20181
19764: LD_INT 14
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19783
19772: POP
// bc_type := b_workshop ; 15 :
19773: LD_ADDR_OWVAR 42
19777: PUSH
19778: LD_INT 2
19780: ST_TO_ADDR
19781: GO 20181
19783: LD_INT 15
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19802
19791: POP
// bc_type := b_factory ; 16 :
19792: LD_ADDR_OWVAR 42
19796: PUSH
19797: LD_INT 3
19799: ST_TO_ADDR
19800: GO 20181
19802: LD_INT 16
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// bc_type := b_ext_gun ; 17 :
19811: LD_ADDR_OWVAR 42
19815: PUSH
19816: LD_INT 17
19818: ST_TO_ADDR
19819: GO 20181
19821: LD_INT 17
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19857
19829: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19830: LD_ADDR_OWVAR 42
19834: PUSH
19835: LD_INT 19
19837: PUSH
19838: LD_INT 23
19840: PUSH
19841: LD_INT 19
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: LD_VAR 0 1
19853: ARRAY
19854: ST_TO_ADDR
19855: GO 20181
19857: LD_INT 18
19859: DOUBLE
19860: EQUAL
19861: IFTRUE 19865
19863: GO 19876
19865: POP
// bc_type := b_ext_radar ; 19 :
19866: LD_ADDR_OWVAR 42
19870: PUSH
19871: LD_INT 20
19873: ST_TO_ADDR
19874: GO 20181
19876: LD_INT 19
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19895
19884: POP
// bc_type := b_ext_radio ; 20 :
19885: LD_ADDR_OWVAR 42
19889: PUSH
19890: LD_INT 22
19892: ST_TO_ADDR
19893: GO 20181
19895: LD_INT 20
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19914
19903: POP
// bc_type := b_ext_siberium ; 21 :
19904: LD_ADDR_OWVAR 42
19908: PUSH
19909: LD_INT 21
19911: ST_TO_ADDR
19912: GO 20181
19914: LD_INT 21
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19933
19922: POP
// bc_type := b_ext_computer ; 22 :
19923: LD_ADDR_OWVAR 42
19927: PUSH
19928: LD_INT 24
19930: ST_TO_ADDR
19931: GO 20181
19933: LD_INT 22
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19952
19941: POP
// bc_type := b_ext_track ; 23 :
19942: LD_ADDR_OWVAR 42
19946: PUSH
19947: LD_INT 16
19949: ST_TO_ADDR
19950: GO 20181
19952: LD_INT 23
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19971
19960: POP
// bc_type := b_ext_laser ; 24 :
19961: LD_ADDR_OWVAR 42
19965: PUSH
19966: LD_INT 25
19968: ST_TO_ADDR
19969: GO 20181
19971: LD_INT 24
19973: DOUBLE
19974: EQUAL
19975: IFTRUE 19979
19977: GO 19990
19979: POP
// bc_type := b_control_tower ; 25 :
19980: LD_ADDR_OWVAR 42
19984: PUSH
19985: LD_INT 36
19987: ST_TO_ADDR
19988: GO 20181
19990: LD_INT 25
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20009
19998: POP
// bc_type := b_breastwork ; 26 :
19999: LD_ADDR_OWVAR 42
20003: PUSH
20004: LD_INT 31
20006: ST_TO_ADDR
20007: GO 20181
20009: LD_INT 26
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20028
20017: POP
// bc_type := b_bunker ; 27 :
20018: LD_ADDR_OWVAR 42
20022: PUSH
20023: LD_INT 32
20025: ST_TO_ADDR
20026: GO 20181
20028: LD_INT 27
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_turret ; 28 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 33
20044: ST_TO_ADDR
20045: GO 20181
20047: LD_INT 28
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_armoury ; 29 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 4
20063: ST_TO_ADDR
20064: GO 20181
20066: LD_INT 29
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_barracks ; 30 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 5
20082: ST_TO_ADDR
20083: GO 20181
20085: LD_INT 30
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_solar_power ; 31 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 27
20101: ST_TO_ADDR
20102: GO 20181
20104: LD_INT 31
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_oil_power ; 32 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 26
20120: ST_TO_ADDR
20121: GO 20181
20123: LD_INT 32
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// bc_type := b_siberite_power ; 33 :
20132: LD_ADDR_OWVAR 42
20136: PUSH
20137: LD_INT 28
20139: ST_TO_ADDR
20140: GO 20181
20142: LD_INT 33
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// bc_type := b_oil_mine ; 34 :
20151: LD_ADDR_OWVAR 42
20155: PUSH
20156: LD_INT 29
20158: ST_TO_ADDR
20159: GO 20181
20161: LD_INT 34
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// bc_type := b_siberite_mine ; end ;
20170: LD_ADDR_OWVAR 42
20174: PUSH
20175: LD_INT 30
20177: ST_TO_ADDR
20178: GO 20181
20180: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20181: LD_ADDR_VAR 0 8
20185: PUSH
20186: LD_VAR 0 5
20190: PPUSH
20191: LD_VAR 0 6
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: CALL_OW 47
20205: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20206: LD_OWVAR 42
20210: PUSH
20211: LD_INT 32
20213: PUSH
20214: LD_INT 33
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: IN
20221: IFFALSE 20237
// PlaceWeaponTurret ( b , weapon ) ;
20223: LD_VAR 0 8
20227: PPUSH
20228: LD_VAR 0 4
20232: PPUSH
20233: CALL_OW 431
// end ;
20237: LD_VAR 0 7
20241: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20242: LD_INT 0
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20248: LD_ADDR_VAR 0 4
20252: PUSH
20253: LD_INT 22
20255: PUSH
20256: LD_OWVAR 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 30
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: ST_TO_ADDR
// if not tmp then
20302: LD_VAR 0 4
20306: NOT
20307: IFFALSE 20311
// exit ;
20309: GO 20370
// for i in tmp do
20311: LD_ADDR_VAR 0 2
20315: PUSH
20316: LD_VAR 0 4
20320: PUSH
20321: FOR_IN
20322: IFFALSE 20368
// for j = 1 to 3 do
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: DOUBLE
20330: LD_INT 1
20332: DEC
20333: ST_TO_ADDR
20334: LD_INT 3
20336: PUSH
20337: FOR_TO
20338: IFFALSE 20364
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20340: LD_VAR 0 2
20344: PPUSH
20345: CALL_OW 274
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_INT 99999
20357: PPUSH
20358: CALL_OW 277
20362: GO 20337
20364: POP
20365: POP
20366: GO 20321
20368: POP
20369: POP
// end ;
20370: LD_VAR 0 1
20374: RET
// export function hHackSetLevel10 ; var i , j ; begin
20375: LD_INT 0
20377: PPUSH
20378: PPUSH
20379: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20380: LD_ADDR_VAR 0 2
20384: PUSH
20385: LD_INT 21
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PPUSH
20395: CALL_OW 69
20399: PUSH
20400: FOR_IN
20401: IFFALSE 20453
// if IsSelected ( i ) then
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 306
20412: IFFALSE 20451
// begin for j := 1 to 4 do
20414: LD_ADDR_VAR 0 3
20418: PUSH
20419: DOUBLE
20420: LD_INT 1
20422: DEC
20423: ST_TO_ADDR
20424: LD_INT 4
20426: PUSH
20427: FOR_TO
20428: IFFALSE 20449
// SetSkill ( i , j , 10 ) ;
20430: LD_VAR 0 2
20434: PPUSH
20435: LD_VAR 0 3
20439: PPUSH
20440: LD_INT 10
20442: PPUSH
20443: CALL_OW 237
20447: GO 20427
20449: POP
20450: POP
// end ;
20451: GO 20400
20453: POP
20454: POP
// end ;
20455: LD_VAR 0 1
20459: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
20464: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_INT 22
20472: PUSH
20473: LD_OWVAR 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 21
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PPUSH
20496: CALL_OW 69
20500: PUSH
20501: FOR_IN
20502: IFFALSE 20543
// begin for j := 1 to 4 do
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: DOUBLE
20510: LD_INT 1
20512: DEC
20513: ST_TO_ADDR
20514: LD_INT 4
20516: PUSH
20517: FOR_TO
20518: IFFALSE 20539
// SetSkill ( i , j , 10 ) ;
20520: LD_VAR 0 2
20524: PPUSH
20525: LD_VAR 0 3
20529: PPUSH
20530: LD_INT 10
20532: PPUSH
20533: CALL_OW 237
20537: GO 20517
20539: POP
20540: POP
// end ;
20541: GO 20501
20543: POP
20544: POP
// end ;
20545: LD_VAR 0 1
20549: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20550: LD_INT 0
20552: PPUSH
// uc_side := your_side ;
20553: LD_ADDR_OWVAR 20
20557: PUSH
20558: LD_OWVAR 2
20562: ST_TO_ADDR
// uc_nation := nation ;
20563: LD_ADDR_OWVAR 21
20567: PUSH
20568: LD_VAR 0 1
20572: ST_TO_ADDR
// InitHc ;
20573: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20577: LD_INT 0
20579: PPUSH
20580: LD_VAR 0 2
20584: PPUSH
20585: LD_VAR 0 3
20589: PPUSH
20590: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20594: LD_VAR 0 4
20598: PPUSH
20599: LD_VAR 0 5
20603: PPUSH
20604: CALL_OW 428
20608: PUSH
20609: LD_INT 0
20611: EQUAL
20612: IFFALSE 20636
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20614: CALL_OW 44
20618: PPUSH
20619: LD_VAR 0 4
20623: PPUSH
20624: LD_VAR 0 5
20628: PPUSH
20629: LD_INT 1
20631: PPUSH
20632: CALL_OW 48
// end ;
20636: LD_VAR 0 6
20640: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20641: LD_INT 0
20643: PPUSH
20644: PPUSH
// uc_side := your_side ;
20645: LD_ADDR_OWVAR 20
20649: PUSH
20650: LD_OWVAR 2
20654: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20655: LD_VAR 0 1
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 4
20671: PUSH
20672: LD_INT 5
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: IN
20682: IFFALSE 20694
// uc_nation := nation_american else
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 1
20691: ST_TO_ADDR
20692: GO 20737
// if chassis in [ 11 , 12 , 13 , 14 ] then
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 11
20701: PUSH
20702: LD_INT 12
20704: PUSH
20705: LD_INT 13
20707: PUSH
20708: LD_INT 14
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: IN
20717: IFFALSE 20729
// uc_nation := nation_arabian else
20719: LD_ADDR_OWVAR 21
20723: PUSH
20724: LD_INT 2
20726: ST_TO_ADDR
20727: GO 20737
// uc_nation := nation_russian ;
20729: LD_ADDR_OWVAR 21
20733: PUSH
20734: LD_INT 3
20736: ST_TO_ADDR
// vc_chassis := chassis ;
20737: LD_ADDR_OWVAR 37
20741: PUSH
20742: LD_VAR 0 1
20746: ST_TO_ADDR
// vc_engine := engine ;
20747: LD_ADDR_OWVAR 39
20751: PUSH
20752: LD_VAR 0 2
20756: ST_TO_ADDR
// vc_control := control ;
20757: LD_ADDR_OWVAR 38
20761: PUSH
20762: LD_VAR 0 3
20766: ST_TO_ADDR
// vc_weapon := weapon ;
20767: LD_ADDR_OWVAR 40
20771: PUSH
20772: LD_VAR 0 4
20776: ST_TO_ADDR
// un := CreateVehicle ;
20777: LD_ADDR_VAR 0 8
20781: PUSH
20782: CALL_OW 45
20786: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20787: LD_VAR 0 8
20791: PPUSH
20792: LD_INT 0
20794: PPUSH
20795: LD_INT 5
20797: PPUSH
20798: CALL_OW 12
20802: PPUSH
20803: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20807: LD_VAR 0 8
20811: PPUSH
20812: LD_VAR 0 5
20816: PPUSH
20817: LD_VAR 0 6
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 48
// end ;
20829: LD_VAR 0 7
20833: RET
// export hInvincible ; every 1 do
20834: GO 20836
20836: DISABLE
// hInvincible := [ ] ;
20837: LD_ADDR_EXP 86
20841: PUSH
20842: EMPTY
20843: ST_TO_ADDR
20844: END
// every 10 do var i ;
20845: GO 20847
20847: DISABLE
20848: LD_INT 0
20850: PPUSH
// begin enable ;
20851: ENABLE
// if not hInvincible then
20852: LD_EXP 86
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 20905
// for i in hInvincible do
20861: LD_ADDR_VAR 0 1
20865: PUSH
20866: LD_EXP 86
20870: PUSH
20871: FOR_IN
20872: IFFALSE 20903
// if GetLives ( i ) < 1000 then
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 256
20883: PUSH
20884: LD_INT 1000
20886: LESS
20887: IFFALSE 20901
// SetLives ( i , 1000 ) ;
20889: LD_VAR 0 1
20893: PPUSH
20894: LD_INT 1000
20896: PPUSH
20897: CALL_OW 234
20901: GO 20871
20903: POP
20904: POP
// end ;
20905: PPOPN 1
20907: END
// export function hHackInvincible ; var i ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20912: LD_ADDR_VAR 0 2
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: PPUSH
20945: CALL_OW 69
20949: PUSH
20950: FOR_IN
20951: IFFALSE 21012
// if IsSelected ( i ) then
20953: LD_VAR 0 2
20957: PPUSH
20958: CALL_OW 306
20962: IFFALSE 21010
// begin if i in hInvincible then
20964: LD_VAR 0 2
20968: PUSH
20969: LD_EXP 86
20973: IN
20974: IFFALSE 20994
// hInvincible := hInvincible diff i else
20976: LD_ADDR_EXP 86
20980: PUSH
20981: LD_EXP 86
20985: PUSH
20986: LD_VAR 0 2
20990: DIFF
20991: ST_TO_ADDR
20992: GO 21010
// hInvincible := hInvincible union i ;
20994: LD_ADDR_EXP 86
20998: PUSH
20999: LD_EXP 86
21003: PUSH
21004: LD_VAR 0 2
21008: UNION
21009: ST_TO_ADDR
// end ;
21010: GO 20950
21012: POP
21013: POP
// end ;
21014: LD_VAR 0 1
21018: RET
// export function hHackInvisible ; var i , j ; begin
21019: LD_INT 0
21021: PPUSH
21022: PPUSH
21023: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21024: LD_ADDR_VAR 0 2
21028: PUSH
21029: LD_INT 21
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 69
21043: PUSH
21044: FOR_IN
21045: IFFALSE 21069
// if IsSelected ( i ) then
21047: LD_VAR 0 2
21051: PPUSH
21052: CALL_OW 306
21056: IFFALSE 21067
// ComForceInvisible ( i ) ;
21058: LD_VAR 0 2
21062: PPUSH
21063: CALL_OW 496
21067: GO 21044
21069: POP
21070: POP
// end ;
21071: LD_VAR 0 1
21075: RET
// export function hHackChangeYourSide ; begin
21076: LD_INT 0
21078: PPUSH
// if your_side = 8 then
21079: LD_OWVAR 2
21083: PUSH
21084: LD_INT 8
21086: EQUAL
21087: IFFALSE 21099
// your_side := 0 else
21089: LD_ADDR_OWVAR 2
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
21097: GO 21113
// your_side := your_side + 1 ;
21099: LD_ADDR_OWVAR 2
21103: PUSH
21104: LD_OWVAR 2
21108: PUSH
21109: LD_INT 1
21111: PLUS
21112: ST_TO_ADDR
// end ;
21113: LD_VAR 0 1
21117: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
// for i in all_units do
21123: LD_ADDR_VAR 0 2
21127: PUSH
21128: LD_OWVAR 3
21132: PUSH
21133: FOR_IN
21134: IFFALSE 21212
// if IsSelected ( i ) then
21136: LD_VAR 0 2
21140: PPUSH
21141: CALL_OW 306
21145: IFFALSE 21210
// begin j := GetSide ( i ) ;
21147: LD_ADDR_VAR 0 3
21151: PUSH
21152: LD_VAR 0 2
21156: PPUSH
21157: CALL_OW 255
21161: ST_TO_ADDR
// if j = 8 then
21162: LD_VAR 0 3
21166: PUSH
21167: LD_INT 8
21169: EQUAL
21170: IFFALSE 21182
// j := 0 else
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
21180: GO 21196
// j := j + 1 ;
21182: LD_ADDR_VAR 0 3
21186: PUSH
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 1
21194: PLUS
21195: ST_TO_ADDR
// SetSide ( i , j ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: CALL_OW 235
// end ;
21210: GO 21133
21212: POP
21213: POP
// end ;
21214: LD_VAR 0 1
21218: RET
// export function hHackFog ; begin
21219: LD_INT 0
21221: PPUSH
// FogOff ( true ) ;
21222: LD_INT 1
21224: PPUSH
21225: CALL_OW 344
// end ;
21229: LD_VAR 0 1
21233: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21234: LD_INT 0
21236: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21237: LD_VAR 0 1
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: LD_VAR 0 3
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: CALL_OW 483
// CenterOnXY ( x , y ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: CALL_OW 84
// end ;
21276: LD_VAR 0 4
21280: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21285: LD_VAR 0 1
21289: NOT
21290: PUSH
21291: LD_VAR 0 2
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: CALL_OW 488
21305: NOT
21306: OR
21307: PUSH
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 266
21317: PUSH
21318: LD_INT 3
21320: NONEQUAL
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 1
21334: EQUAL
21335: NOT
21336: AND
21337: OR
21338: IFFALSE 21342
// exit ;
21340: GO 21491
// if GetType ( factory ) = unit_human then
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 247
21351: PUSH
21352: LD_INT 1
21354: EQUAL
21355: IFFALSE 21372
// factory := IsInUnit ( factory ) ;
21357: LD_ADDR_VAR 0 1
21361: PUSH
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 310
21371: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 266
21381: PUSH
21382: LD_INT 3
21384: NONEQUAL
21385: IFFALSE 21389
// exit ;
21387: GO 21491
// if HexInfo ( x , y ) = factory then
21389: LD_VAR 0 2
21393: PPUSH
21394: LD_VAR 0 3
21398: PPUSH
21399: CALL_OW 428
21403: PUSH
21404: LD_VAR 0 1
21408: EQUAL
21409: IFFALSE 21436
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21411: LD_ADDR_EXP 87
21415: PUSH
21416: LD_EXP 87
21420: PPUSH
21421: LD_VAR 0 1
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 1
21433: ST_TO_ADDR
21434: GO 21487
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21436: LD_ADDR_EXP 87
21440: PUSH
21441: LD_EXP 87
21445: PPUSH
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_VAR 0 1
21455: PPUSH
21456: CALL_OW 255
21460: PUSH
21461: LD_VAR 0 1
21465: PUSH
21466: LD_VAR 0 2
21470: PUSH
21471: LD_VAR 0 3
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 1
21486: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21487: CALL 21496 0 0
// end ;
21491: LD_VAR 0 4
21495: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
21500: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21501: LD_STRING resetFactoryWaypoint();
21503: PPUSH
21504: CALL_OW 559
// if factoryWaypoints then
21508: LD_EXP 87
21512: IFFALSE 21638
// begin list := PrepareArray ( factoryWaypoints ) ;
21514: LD_ADDR_VAR 0 3
21518: PUSH
21519: LD_EXP 87
21523: PPUSH
21524: CALL 68107 0 1
21528: ST_TO_ADDR
// for i := 1 to list do
21529: LD_ADDR_VAR 0 2
21533: PUSH
21534: DOUBLE
21535: LD_INT 1
21537: DEC
21538: ST_TO_ADDR
21539: LD_VAR 0 3
21543: PUSH
21544: FOR_TO
21545: IFFALSE 21636
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21547: LD_STRING setFactoryWaypointXY(
21549: PUSH
21550: LD_VAR 0 3
21554: PUSH
21555: LD_VAR 0 2
21559: ARRAY
21560: PUSH
21561: LD_INT 1
21563: ARRAY
21564: STR
21565: PUSH
21566: LD_STRING ,
21568: STR
21569: PUSH
21570: LD_VAR 0 3
21574: PUSH
21575: LD_VAR 0 2
21579: ARRAY
21580: PUSH
21581: LD_INT 2
21583: ARRAY
21584: STR
21585: PUSH
21586: LD_STRING ,
21588: STR
21589: PUSH
21590: LD_VAR 0 3
21594: PUSH
21595: LD_VAR 0 2
21599: ARRAY
21600: PUSH
21601: LD_INT 3
21603: ARRAY
21604: STR
21605: PUSH
21606: LD_STRING ,
21608: STR
21609: PUSH
21610: LD_VAR 0 3
21614: PUSH
21615: LD_VAR 0 2
21619: ARRAY
21620: PUSH
21621: LD_INT 4
21623: ARRAY
21624: STR
21625: PUSH
21626: LD_STRING )
21628: STR
21629: PPUSH
21630: CALL_OW 559
21634: GO 21544
21636: POP
21637: POP
// end ; end ;
21638: LD_VAR 0 1
21642: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21643: LD_INT 0
21645: PPUSH
// if HexInfo ( x , y ) = warehouse then
21646: LD_VAR 0 2
21650: PPUSH
21651: LD_VAR 0 3
21655: PPUSH
21656: CALL_OW 428
21660: PUSH
21661: LD_VAR 0 1
21665: EQUAL
21666: IFFALSE 21693
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21668: LD_ADDR_EXP 88
21672: PUSH
21673: LD_EXP 88
21677: PPUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 1
21690: ST_TO_ADDR
21691: GO 21744
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21693: LD_ADDR_EXP 88
21697: PUSH
21698: LD_EXP 88
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 255
21717: PUSH
21718: LD_VAR 0 1
21722: PUSH
21723: LD_VAR 0 2
21727: PUSH
21728: LD_VAR 0 3
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PPUSH
21739: CALL_OW 1
21743: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21744: CALL 21753 0 0
// end ;
21748: LD_VAR 0 4
21752: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21753: LD_INT 0
21755: PPUSH
21756: PPUSH
21757: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21758: LD_STRING resetWarehouseGatheringPoints();
21760: PPUSH
21761: CALL_OW 559
// if warehouseGatheringPoints then
21765: LD_EXP 88
21769: IFFALSE 21895
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_EXP 88
21780: PPUSH
21781: CALL 68107 0 1
21785: ST_TO_ADDR
// for i := 1 to list do
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: DOUBLE
21792: LD_INT 1
21794: DEC
21795: ST_TO_ADDR
21796: LD_VAR 0 3
21800: PUSH
21801: FOR_TO
21802: IFFALSE 21893
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21804: LD_STRING setWarehouseGatheringPointXY(
21806: PUSH
21807: LD_VAR 0 3
21811: PUSH
21812: LD_VAR 0 2
21816: ARRAY
21817: PUSH
21818: LD_INT 1
21820: ARRAY
21821: STR
21822: PUSH
21823: LD_STRING ,
21825: STR
21826: PUSH
21827: LD_VAR 0 3
21831: PUSH
21832: LD_VAR 0 2
21836: ARRAY
21837: PUSH
21838: LD_INT 2
21840: ARRAY
21841: STR
21842: PUSH
21843: LD_STRING ,
21845: STR
21846: PUSH
21847: LD_VAR 0 3
21851: PUSH
21852: LD_VAR 0 2
21856: ARRAY
21857: PUSH
21858: LD_INT 3
21860: ARRAY
21861: STR
21862: PUSH
21863: LD_STRING ,
21865: STR
21866: PUSH
21867: LD_VAR 0 3
21871: PUSH
21872: LD_VAR 0 2
21876: ARRAY
21877: PUSH
21878: LD_INT 4
21880: ARRAY
21881: STR
21882: PUSH
21883: LD_STRING )
21885: STR
21886: PPUSH
21887: CALL_OW 559
21891: GO 21801
21893: POP
21894: POP
// end ; end ;
21895: LD_VAR 0 1
21899: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21900: LD_EXP 88
21904: IFFALSE 22589
21906: GO 21908
21908: DISABLE
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
// begin enable ;
21920: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21921: LD_ADDR_VAR 0 3
21925: PUSH
21926: LD_EXP 88
21930: PPUSH
21931: CALL 68107 0 1
21935: ST_TO_ADDR
// if not list then
21936: LD_VAR 0 3
21940: NOT
21941: IFFALSE 21945
// exit ;
21943: GO 22589
// for i := 1 to list do
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: DOUBLE
21951: LD_INT 1
21953: DEC
21954: ST_TO_ADDR
21955: LD_VAR 0 3
21959: PUSH
21960: FOR_TO
21961: IFFALSE 22587
// begin depot := list [ i ] [ 2 ] ;
21963: LD_ADDR_VAR 0 8
21967: PUSH
21968: LD_VAR 0 3
21972: PUSH
21973: LD_VAR 0 1
21977: ARRAY
21978: PUSH
21979: LD_INT 2
21981: ARRAY
21982: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21983: LD_ADDR_VAR 0 5
21987: PUSH
21988: LD_VAR 0 3
21992: PUSH
21993: LD_VAR 0 1
21997: ARRAY
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22003: LD_VAR 0 8
22007: PPUSH
22008: CALL_OW 301
22012: PUSH
22013: LD_VAR 0 5
22017: PUSH
22018: LD_VAR 0 8
22022: PPUSH
22023: CALL_OW 255
22027: NONEQUAL
22028: OR
22029: IFFALSE 22058
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22031: LD_ADDR_EXP 88
22035: PUSH
22036: LD_EXP 88
22040: PPUSH
22041: LD_VAR 0 8
22045: PPUSH
22046: LD_INT 0
22048: PPUSH
22049: CALL_OW 1
22053: ST_TO_ADDR
// exit ;
22054: POP
22055: POP
22056: GO 22589
// end ; x := list [ i ] [ 3 ] ;
22058: LD_ADDR_VAR 0 6
22062: PUSH
22063: LD_VAR 0 3
22067: PUSH
22068: LD_VAR 0 1
22072: ARRAY
22073: PUSH
22074: LD_INT 3
22076: ARRAY
22077: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22078: LD_ADDR_VAR 0 7
22082: PUSH
22083: LD_VAR 0 3
22087: PUSH
22088: LD_VAR 0 1
22092: ARRAY
22093: PUSH
22094: LD_INT 4
22096: ARRAY
22097: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22098: LD_ADDR_VAR 0 9
22102: PUSH
22103: LD_VAR 0 6
22107: PPUSH
22108: LD_VAR 0 7
22112: PPUSH
22113: LD_INT 16
22115: PPUSH
22116: CALL 66695 0 3
22120: ST_TO_ADDR
// if not cratesNearbyPoint then
22121: LD_VAR 0 9
22125: NOT
22126: IFFALSE 22132
// exit ;
22128: POP
22129: POP
22130: GO 22589
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22132: LD_ADDR_VAR 0 4
22136: PUSH
22137: LD_INT 22
22139: PUSH
22140: LD_VAR 0 5
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 60
22154: PUSH
22155: EMPTY
22156: LIST
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 91
22164: PUSH
22165: LD_VAR 0 8
22169: PUSH
22170: LD_INT 6
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: LD_INT 25
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 25
22193: PUSH
22194: LD_INT 16
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL_OW 69
22216: PUSH
22217: LD_VAR 0 8
22221: PPUSH
22222: CALL_OW 313
22226: PPUSH
22227: LD_INT 3
22229: PUSH
22230: LD_INT 60
22232: PUSH
22233: EMPTY
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 25
22245: PUSH
22246: LD_INT 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 16
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PPUSH
22272: CALL_OW 72
22276: UNION
22277: ST_TO_ADDR
// if tmp then
22278: LD_VAR 0 4
22282: IFFALSE 22362
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 4
22293: PPUSH
22294: LD_INT 3
22296: PPUSH
22297: CALL 64664 0 2
22301: ST_TO_ADDR
// for j in tmp do
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: LD_VAR 0 4
22311: PUSH
22312: FOR_IN
22313: IFFALSE 22356
// begin if IsInUnit ( j ) then
22315: LD_VAR 0 2
22319: PPUSH
22320: CALL_OW 310
22324: IFFALSE 22335
// ComExit ( j ) ;
22326: LD_VAR 0 2
22330: PPUSH
22331: CALL 64747 0 1
// AddComCollect ( j , x , y ) ;
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_VAR 0 6
22344: PPUSH
22345: LD_VAR 0 7
22349: PPUSH
22350: CALL_OW 177
// end ;
22354: GO 22312
22356: POP
22357: POP
// exit ;
22358: POP
22359: POP
22360: GO 22589
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22362: LD_ADDR_VAR 0 4
22366: PUSH
22367: LD_INT 22
22369: PUSH
22370: LD_VAR 0 5
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 91
22381: PUSH
22382: LD_VAR 0 8
22386: PUSH
22387: LD_INT 8
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 34
22400: PUSH
22401: LD_INT 12
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 34
22410: PUSH
22411: LD_INT 51
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 32
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 34
22430: PUSH
22431: LD_INT 89
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: PPUSH
22450: CALL_OW 69
22454: ST_TO_ADDR
// if tmp then
22455: LD_VAR 0 4
22459: IFFALSE 22585
// begin for j in tmp do
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_VAR 0 4
22470: PUSH
22471: FOR_IN
22472: IFFALSE 22583
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22474: LD_VAR 0 2
22478: PPUSH
22479: CALL_OW 262
22483: PUSH
22484: LD_INT 3
22486: EQUAL
22487: PUSH
22488: LD_VAR 0 2
22492: PPUSH
22493: CALL_OW 261
22497: PUSH
22498: LD_INT 20
22500: GREATER
22501: OR
22502: PUSH
22503: LD_VAR 0 2
22507: PPUSH
22508: CALL_OW 314
22512: NOT
22513: AND
22514: PUSH
22515: LD_VAR 0 2
22519: PPUSH
22520: CALL_OW 263
22524: PUSH
22525: LD_INT 1
22527: NONEQUAL
22528: PUSH
22529: LD_VAR 0 2
22533: PPUSH
22534: CALL_OW 311
22538: OR
22539: AND
22540: IFFALSE 22581
// begin ComCollect ( j , x , y ) ;
22542: LD_VAR 0 2
22546: PPUSH
22547: LD_VAR 0 6
22551: PPUSH
22552: LD_VAR 0 7
22556: PPUSH
22557: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22561: LD_VAR 0 2
22565: PPUSH
22566: LD_VAR 0 8
22570: PPUSH
22571: CALL_OW 172
// exit ;
22575: POP
22576: POP
22577: POP
22578: POP
22579: GO 22589
// end ;
22581: GO 22471
22583: POP
22584: POP
// end ; end ;
22585: GO 21960
22587: POP
22588: POP
// end ; end_of_file
22589: PPOPN 9
22591: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22598: LD_VAR 0 1
22602: PPUSH
22603: CALL_OW 264
22607: PUSH
22608: LD_INT 91
22610: EQUAL
22611: IFFALSE 22683
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22613: LD_INT 68
22615: PPUSH
22616: LD_VAR 0 1
22620: PPUSH
22621: CALL_OW 255
22625: PPUSH
22626: CALL_OW 321
22630: PUSH
22631: LD_INT 2
22633: EQUAL
22634: IFFALSE 22646
// eff := 70 else
22636: LD_ADDR_VAR 0 4
22640: PUSH
22641: LD_INT 70
22643: ST_TO_ADDR
22644: GO 22654
// eff := 30 ;
22646: LD_ADDR_VAR 0 4
22650: PUSH
22651: LD_INT 30
22653: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 250
22663: PPUSH
22664: LD_VAR 0 1
22668: PPUSH
22669: CALL_OW 251
22673: PPUSH
22674: LD_VAR 0 4
22678: PPUSH
22679: CALL_OW 495
// end ; end ;
22683: LD_VAR 0 2
22687: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22688: LD_INT 0
22690: PPUSH
// end ;
22691: LD_VAR 0 4
22695: RET
// export function SOS_Command ( cmd ) ; begin
22696: LD_INT 0
22698: PPUSH
// end ;
22699: LD_VAR 0 2
22703: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22704: LD_INT 0
22706: PPUSH
// end ;
22707: LD_VAR 0 6
22711: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
// if not vehicle or not factory then
22716: LD_VAR 0 1
22720: NOT
22721: PUSH
22722: LD_VAR 0 2
22726: NOT
22727: OR
22728: IFFALSE 22732
// exit ;
22730: GO 22963
// if factoryWaypoints >= factory then
22732: LD_EXP 87
22736: PUSH
22737: LD_VAR 0 2
22741: GREATEREQUAL
22742: IFFALSE 22963
// if factoryWaypoints [ factory ] then
22744: LD_EXP 87
22748: PUSH
22749: LD_VAR 0 2
22753: ARRAY
22754: IFFALSE 22963
// begin if GetControl ( vehicle ) = control_manual then
22756: LD_VAR 0 1
22760: PPUSH
22761: CALL_OW 263
22765: PUSH
22766: LD_INT 1
22768: EQUAL
22769: IFFALSE 22850
// begin driver := IsDrivenBy ( vehicle ) ;
22771: LD_ADDR_VAR 0 4
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 311
22785: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22786: LD_VAR 0 4
22790: PPUSH
22791: LD_EXP 87
22795: PUSH
22796: LD_VAR 0 2
22800: ARRAY
22801: PUSH
22802: LD_INT 3
22804: ARRAY
22805: PPUSH
22806: LD_EXP 87
22810: PUSH
22811: LD_VAR 0 2
22815: ARRAY
22816: PUSH
22817: LD_INT 4
22819: ARRAY
22820: PPUSH
22821: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22825: LD_VAR 0 4
22829: PPUSH
22830: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22834: LD_VAR 0 4
22838: PPUSH
22839: LD_VAR 0 2
22843: PPUSH
22844: CALL_OW 180
// end else
22848: GO 22963
// if GetControl ( vehicle ) = control_remote then
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 263
22859: PUSH
22860: LD_INT 2
22862: EQUAL
22863: IFFALSE 22924
// begin wait ( 0 0$2 ) ;
22865: LD_INT 70
22867: PPUSH
22868: CALL_OW 67
// if Connect ( vehicle ) then
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL 34987 0 1
22881: IFFALSE 22922
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_EXP 87
22892: PUSH
22893: LD_VAR 0 2
22897: ARRAY
22898: PUSH
22899: LD_INT 3
22901: ARRAY
22902: PPUSH
22903: LD_EXP 87
22907: PUSH
22908: LD_VAR 0 2
22912: ARRAY
22913: PUSH
22914: LD_INT 4
22916: ARRAY
22917: PPUSH
22918: CALL_OW 171
// end else
22922: GO 22963
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22924: LD_VAR 0 1
22928: PPUSH
22929: LD_EXP 87
22933: PUSH
22934: LD_VAR 0 2
22938: ARRAY
22939: PUSH
22940: LD_INT 3
22942: ARRAY
22943: PPUSH
22944: LD_EXP 87
22948: PUSH
22949: LD_VAR 0 2
22953: ARRAY
22954: PUSH
22955: LD_INT 4
22957: ARRAY
22958: PPUSH
22959: CALL_OW 171
// end ; end ;
22963: LD_VAR 0 3
22967: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22968: LD_INT 0
22970: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22971: LD_VAR 0 1
22975: PUSH
22976: LD_INT 250
22978: EQUAL
22979: PUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 264
22989: PUSH
22990: LD_INT 81
22992: EQUAL
22993: AND
22994: IFFALSE 23015
// MinerPlaceMine ( unit , x , y ) ;
22996: LD_VAR 0 2
23000: PPUSH
23001: LD_VAR 0 4
23005: PPUSH
23006: LD_VAR 0 5
23010: PPUSH
23011: CALL 25400 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23015: LD_VAR 0 1
23019: PUSH
23020: LD_INT 251
23022: EQUAL
23023: PUSH
23024: LD_VAR 0 2
23028: PPUSH
23029: CALL_OW 264
23033: PUSH
23034: LD_INT 81
23036: EQUAL
23037: AND
23038: IFFALSE 23059
// MinerDetonateMine ( unit , x , y ) ;
23040: LD_VAR 0 2
23044: PPUSH
23045: LD_VAR 0 4
23049: PPUSH
23050: LD_VAR 0 5
23054: PPUSH
23055: CALL 25675 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23059: LD_VAR 0 1
23063: PUSH
23064: LD_INT 252
23066: EQUAL
23067: PUSH
23068: LD_VAR 0 2
23072: PPUSH
23073: CALL_OW 264
23077: PUSH
23078: LD_INT 81
23080: EQUAL
23081: AND
23082: IFFALSE 23103
// MinerCreateMinefield ( unit , x , y ) ;
23084: LD_VAR 0 2
23088: PPUSH
23089: LD_VAR 0 4
23093: PPUSH
23094: LD_VAR 0 5
23098: PPUSH
23099: CALL 26092 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23103: LD_VAR 0 1
23107: PUSH
23108: LD_INT 253
23110: EQUAL
23111: PUSH
23112: LD_VAR 0 2
23116: PPUSH
23117: CALL_OW 257
23121: PUSH
23122: LD_INT 5
23124: EQUAL
23125: AND
23126: IFFALSE 23147
// ComBinocular ( unit , x , y ) ;
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_VAR 0 4
23137: PPUSH
23138: LD_VAR 0 5
23142: PPUSH
23143: CALL 26461 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23147: LD_VAR 0 1
23151: PUSH
23152: LD_INT 254
23154: EQUAL
23155: PUSH
23156: LD_VAR 0 2
23160: PPUSH
23161: CALL_OW 264
23165: PUSH
23166: LD_INT 99
23168: EQUAL
23169: AND
23170: PUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: CALL_OW 263
23180: PUSH
23181: LD_INT 3
23183: EQUAL
23184: AND
23185: IFFALSE 23201
// HackDestroyVehicle ( unit , selectedUnit ) ;
23187: LD_VAR 0 2
23191: PPUSH
23192: LD_VAR 0 3
23196: PPUSH
23197: CALL 24764 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23201: LD_VAR 0 1
23205: PUSH
23206: LD_INT 255
23208: EQUAL
23209: PUSH
23210: LD_VAR 0 2
23214: PPUSH
23215: CALL_OW 264
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 53
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: IN
23230: AND
23231: PUSH
23232: LD_VAR 0 4
23236: PPUSH
23237: LD_VAR 0 5
23241: PPUSH
23242: CALL_OW 488
23246: AND
23247: IFFALSE 23271
// CutTreeXYR ( unit , x , y , 12 ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_VAR 0 4
23258: PPUSH
23259: LD_VAR 0 5
23263: PPUSH
23264: LD_INT 12
23266: PPUSH
23267: CALL 23334 0 4
// if cmd = 256 then
23271: LD_VAR 0 1
23275: PUSH
23276: LD_INT 256
23278: EQUAL
23279: IFFALSE 23300
// SetFactoryWaypoint ( unit , x , y ) ;
23281: LD_VAR 0 2
23285: PPUSH
23286: LD_VAR 0 4
23290: PPUSH
23291: LD_VAR 0 5
23295: PPUSH
23296: CALL 21281 0 3
// if cmd = 257 then
23300: LD_VAR 0 1
23304: PUSH
23305: LD_INT 257
23307: EQUAL
23308: IFFALSE 23329
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_VAR 0 4
23319: PPUSH
23320: LD_VAR 0 5
23324: PPUSH
23325: CALL 21643 0 3
// end ;
23329: LD_VAR 0 6
23333: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23345: LD_VAR 0 1
23349: NOT
23350: PUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: CALL_OW 488
23365: NOT
23366: OR
23367: PUSH
23368: LD_VAR 0 4
23372: NOT
23373: OR
23374: IFFALSE 23378
// exit ;
23376: GO 23718
// list := [ ] ;
23378: LD_ADDR_VAR 0 13
23382: PUSH
23383: EMPTY
23384: ST_TO_ADDR
// if x - r < 0 then
23385: LD_VAR 0 2
23389: PUSH
23390: LD_VAR 0 4
23394: MINUS
23395: PUSH
23396: LD_INT 0
23398: LESS
23399: IFFALSE 23411
// min_x := 0 else
23401: LD_ADDR_VAR 0 7
23405: PUSH
23406: LD_INT 0
23408: ST_TO_ADDR
23409: GO 23427
// min_x := x - r ;
23411: LD_ADDR_VAR 0 7
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: LD_VAR 0 4
23425: MINUS
23426: ST_TO_ADDR
// if y - r < 0 then
23427: LD_VAR 0 3
23431: PUSH
23432: LD_VAR 0 4
23436: MINUS
23437: PUSH
23438: LD_INT 0
23440: LESS
23441: IFFALSE 23453
// min_y := 0 else
23443: LD_ADDR_VAR 0 8
23447: PUSH
23448: LD_INT 0
23450: ST_TO_ADDR
23451: GO 23469
// min_y := y - r ;
23453: LD_ADDR_VAR 0 8
23457: PUSH
23458: LD_VAR 0 3
23462: PUSH
23463: LD_VAR 0 4
23467: MINUS
23468: ST_TO_ADDR
// max_x := x + r ;
23469: LD_ADDR_VAR 0 9
23473: PUSH
23474: LD_VAR 0 2
23478: PUSH
23479: LD_VAR 0 4
23483: PLUS
23484: ST_TO_ADDR
// max_y := y + r ;
23485: LD_ADDR_VAR 0 10
23489: PUSH
23490: LD_VAR 0 3
23494: PUSH
23495: LD_VAR 0 4
23499: PLUS
23500: ST_TO_ADDR
// for _x = min_x to max_x do
23501: LD_ADDR_VAR 0 11
23505: PUSH
23506: DOUBLE
23507: LD_VAR 0 7
23511: DEC
23512: ST_TO_ADDR
23513: LD_VAR 0 9
23517: PUSH
23518: FOR_TO
23519: IFFALSE 23636
// for _y = min_y to max_y do
23521: LD_ADDR_VAR 0 12
23525: PUSH
23526: DOUBLE
23527: LD_VAR 0 8
23531: DEC
23532: ST_TO_ADDR
23533: LD_VAR 0 10
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23632
// begin if not ValidHex ( _x , _y ) then
23541: LD_VAR 0 11
23545: PPUSH
23546: LD_VAR 0 12
23550: PPUSH
23551: CALL_OW 488
23555: NOT
23556: IFFALSE 23560
// continue ;
23558: GO 23538
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23560: LD_VAR 0 11
23564: PPUSH
23565: LD_VAR 0 12
23569: PPUSH
23570: CALL_OW 351
23574: PUSH
23575: LD_VAR 0 11
23579: PPUSH
23580: LD_VAR 0 12
23584: PPUSH
23585: CALL_OW 554
23589: AND
23590: IFFALSE 23630
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23592: LD_ADDR_VAR 0 13
23596: PUSH
23597: LD_VAR 0 13
23601: PPUSH
23602: LD_VAR 0 13
23606: PUSH
23607: LD_INT 1
23609: PLUS
23610: PPUSH
23611: LD_VAR 0 11
23615: PUSH
23616: LD_VAR 0 12
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PPUSH
23625: CALL_OW 2
23629: ST_TO_ADDR
// end ;
23630: GO 23538
23632: POP
23633: POP
23634: GO 23518
23636: POP
23637: POP
// if not list then
23638: LD_VAR 0 13
23642: NOT
23643: IFFALSE 23647
// exit ;
23645: GO 23718
// for i in list do
23647: LD_ADDR_VAR 0 6
23651: PUSH
23652: LD_VAR 0 13
23656: PUSH
23657: FOR_IN
23658: IFFALSE 23716
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_STRING M
23667: PUSH
23668: LD_VAR 0 6
23672: PUSH
23673: LD_INT 1
23675: ARRAY
23676: PUSH
23677: LD_VAR 0 6
23681: PUSH
23682: LD_INT 2
23684: ARRAY
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: PPUSH
23710: CALL_OW 447
23714: GO 23657
23716: POP
23717: POP
// end ;
23718: LD_VAR 0 5
23722: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23723: LD_EXP 90
23727: NOT
23728: IFFALSE 23778
23730: GO 23732
23732: DISABLE
// begin initHack := true ;
23733: LD_ADDR_EXP 90
23737: PUSH
23738: LD_INT 1
23740: ST_TO_ADDR
// hackTanks := [ ] ;
23741: LD_ADDR_EXP 91
23745: PUSH
23746: EMPTY
23747: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23748: LD_ADDR_EXP 92
23752: PUSH
23753: EMPTY
23754: ST_TO_ADDR
// hackLimit := 3 ;
23755: LD_ADDR_EXP 93
23759: PUSH
23760: LD_INT 3
23762: ST_TO_ADDR
// hackDist := 12 ;
23763: LD_ADDR_EXP 94
23767: PUSH
23768: LD_INT 12
23770: ST_TO_ADDR
// hackCounter := [ ] ;
23771: LD_ADDR_EXP 95
23775: PUSH
23776: EMPTY
23777: ST_TO_ADDR
// end ;
23778: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23779: LD_EXP 90
23783: PUSH
23784: LD_INT 34
23786: PUSH
23787: LD_INT 99
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: AND
23799: IFFALSE 24052
23801: GO 23803
23803: DISABLE
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
// begin enable ;
23808: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23809: LD_ADDR_VAR 0 1
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_INT 99
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PPUSH
23824: CALL_OW 69
23828: PUSH
23829: FOR_IN
23830: IFFALSE 24050
// begin if not i in hackTanks then
23832: LD_VAR 0 1
23836: PUSH
23837: LD_EXP 91
23841: IN
23842: NOT
23843: IFFALSE 23926
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23845: LD_ADDR_EXP 91
23849: PUSH
23850: LD_EXP 91
23854: PPUSH
23855: LD_EXP 91
23859: PUSH
23860: LD_INT 1
23862: PLUS
23863: PPUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 1
23873: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23874: LD_ADDR_EXP 92
23878: PUSH
23879: LD_EXP 92
23883: PPUSH
23884: LD_EXP 92
23888: PUSH
23889: LD_INT 1
23891: PLUS
23892: PPUSH
23893: EMPTY
23894: PPUSH
23895: CALL_OW 1
23899: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23900: LD_ADDR_EXP 95
23904: PUSH
23905: LD_EXP 95
23909: PPUSH
23910: LD_EXP 95
23914: PUSH
23915: LD_INT 1
23917: PLUS
23918: PPUSH
23919: EMPTY
23920: PPUSH
23921: CALL_OW 1
23925: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 302
23935: NOT
23936: IFFALSE 23949
// begin HackUnlinkAll ( i ) ;
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL 24055 0 1
// continue ;
23947: GO 23829
// end ; HackCheckCapturedStatus ( i ) ;
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL 24498 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23958: LD_ADDR_VAR 0 2
23962: PUSH
23963: LD_INT 81
23965: PUSH
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 255
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 33
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 91
23992: PUSH
23993: LD_VAR 0 1
23997: PUSH
23998: LD_EXP 94
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 50
24010: PUSH
24011: EMPTY
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: PPUSH
24020: CALL_OW 69
24024: ST_TO_ADDR
// if not tmp then
24025: LD_VAR 0 2
24029: NOT
24030: IFFALSE 24034
// continue ;
24032: GO 23829
// HackLink ( i , tmp ) ;
24034: LD_VAR 0 1
24038: PPUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL 24191 0 2
// end ;
24048: GO 23829
24050: POP
24051: POP
// end ;
24052: PPOPN 2
24054: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24055: LD_INT 0
24057: PPUSH
24058: PPUSH
24059: PPUSH
// if not hack in hackTanks then
24060: LD_VAR 0 1
24064: PUSH
24065: LD_EXP 91
24069: IN
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24186
// index := GetElementIndex ( hackTanks , hack ) ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_EXP 91
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL 31803 0 2
24094: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24095: LD_EXP 92
24099: PUSH
24100: LD_VAR 0 4
24104: ARRAY
24105: IFFALSE 24186
// begin for i in hackTanksCaptured [ index ] do
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_EXP 92
24116: PUSH
24117: LD_VAR 0 4
24121: ARRAY
24122: PUSH
24123: FOR_IN
24124: IFFALSE 24150
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24126: LD_VAR 0 3
24130: PUSH
24131: LD_INT 1
24133: ARRAY
24134: PPUSH
24135: LD_VAR 0 3
24139: PUSH
24140: LD_INT 2
24142: ARRAY
24143: PPUSH
24144: CALL_OW 235
24148: GO 24123
24150: POP
24151: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24152: LD_ADDR_EXP 92
24156: PUSH
24157: LD_EXP 92
24161: PPUSH
24162: LD_VAR 0 4
24166: PPUSH
24167: EMPTY
24168: PPUSH
24169: CALL_OW 1
24173: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24174: LD_VAR 0 1
24178: PPUSH
24179: LD_INT 0
24181: PPUSH
24182: CALL_OW 505
// end ; end ;
24186: LD_VAR 0 2
24190: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
// if not hack in hackTanks or not vehicles then
24196: LD_VAR 0 1
24200: PUSH
24201: LD_EXP 91
24205: IN
24206: NOT
24207: PUSH
24208: LD_VAR 0 2
24212: NOT
24213: OR
24214: IFFALSE 24218
// exit ;
24216: GO 24493
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: LD_VAR 0 2
24232: PPUSH
24233: LD_INT 1
24235: PPUSH
24236: LD_INT 1
24238: PPUSH
24239: CALL 32453 0 4
24243: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24244: LD_ADDR_VAR 0 5
24248: PUSH
24249: LD_EXP 91
24253: PPUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL 31803 0 2
24263: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24264: LD_EXP 92
24268: PUSH
24269: LD_VAR 0 5
24273: ARRAY
24274: PUSH
24275: LD_EXP 93
24279: LESS
24280: IFFALSE 24469
// begin for i := 1 to vehicles do
24282: LD_ADDR_VAR 0 4
24286: PUSH
24287: DOUBLE
24288: LD_INT 1
24290: DEC
24291: ST_TO_ADDR
24292: LD_VAR 0 2
24296: PUSH
24297: FOR_TO
24298: IFFALSE 24467
// begin if hackTanksCaptured [ index ] = hackLimit then
24300: LD_EXP 92
24304: PUSH
24305: LD_VAR 0 5
24309: ARRAY
24310: PUSH
24311: LD_EXP 93
24315: EQUAL
24316: IFFALSE 24320
// break ;
24318: GO 24467
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24320: LD_ADDR_EXP 95
24324: PUSH
24325: LD_EXP 95
24329: PPUSH
24330: LD_VAR 0 5
24334: PPUSH
24335: LD_EXP 95
24339: PUSH
24340: LD_VAR 0 5
24344: ARRAY
24345: PUSH
24346: LD_INT 1
24348: PLUS
24349: PPUSH
24350: CALL_OW 1
24354: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24355: LD_ADDR_EXP 92
24359: PUSH
24360: LD_EXP 92
24364: PPUSH
24365: LD_VAR 0 5
24369: PUSH
24370: LD_EXP 92
24374: PUSH
24375: LD_VAR 0 5
24379: ARRAY
24380: PUSH
24381: LD_INT 1
24383: PLUS
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PPUSH
24389: LD_VAR 0 2
24393: PUSH
24394: LD_VAR 0 4
24398: ARRAY
24399: PUSH
24400: LD_VAR 0 2
24404: PUSH
24405: LD_VAR 0 4
24409: ARRAY
24410: PPUSH
24411: CALL_OW 255
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PPUSH
24420: CALL 32018 0 3
24424: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24425: LD_VAR 0 2
24429: PUSH
24430: LD_VAR 0 4
24434: ARRAY
24435: PPUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 255
24445: PPUSH
24446: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24450: LD_VAR 0 2
24454: PUSH
24455: LD_VAR 0 4
24459: ARRAY
24460: PPUSH
24461: CALL_OW 141
// end ;
24465: GO 24297
24467: POP
24468: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24469: LD_VAR 0 1
24473: PPUSH
24474: LD_EXP 92
24478: PUSH
24479: LD_VAR 0 5
24483: ARRAY
24484: PUSH
24485: LD_INT 0
24487: PLUS
24488: PPUSH
24489: CALL_OW 505
// end ;
24493: LD_VAR 0 3
24497: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24498: LD_INT 0
24500: PPUSH
24501: PPUSH
24502: PPUSH
24503: PPUSH
// if not hack in hackTanks then
24504: LD_VAR 0 1
24508: PUSH
24509: LD_EXP 91
24513: IN
24514: NOT
24515: IFFALSE 24519
// exit ;
24517: GO 24759
// index := GetElementIndex ( hackTanks , hack ) ;
24519: LD_ADDR_VAR 0 4
24523: PUSH
24524: LD_EXP 91
24528: PPUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: CALL 31803 0 2
24538: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24539: LD_ADDR_VAR 0 3
24543: PUSH
24544: DOUBLE
24545: LD_EXP 92
24549: PUSH
24550: LD_VAR 0 4
24554: ARRAY
24555: INC
24556: ST_TO_ADDR
24557: LD_INT 1
24559: PUSH
24560: FOR_DOWNTO
24561: IFFALSE 24733
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24563: LD_ADDR_VAR 0 5
24567: PUSH
24568: LD_EXP 92
24572: PUSH
24573: LD_VAR 0 4
24577: ARRAY
24578: PUSH
24579: LD_VAR 0 3
24583: ARRAY
24584: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24585: LD_VAR 0 5
24589: PUSH
24590: LD_INT 1
24592: ARRAY
24593: PPUSH
24594: CALL_OW 302
24598: NOT
24599: PUSH
24600: LD_VAR 0 5
24604: PUSH
24605: LD_INT 1
24607: ARRAY
24608: PPUSH
24609: CALL_OW 255
24613: PUSH
24614: LD_VAR 0 1
24618: PPUSH
24619: CALL_OW 255
24623: NONEQUAL
24624: OR
24625: IFFALSE 24731
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24627: LD_VAR 0 5
24631: PUSH
24632: LD_INT 1
24634: ARRAY
24635: PPUSH
24636: CALL_OW 305
24640: PUSH
24641: LD_VAR 0 5
24645: PUSH
24646: LD_INT 1
24648: ARRAY
24649: PPUSH
24650: CALL_OW 255
24654: PUSH
24655: LD_VAR 0 1
24659: PPUSH
24660: CALL_OW 255
24664: EQUAL
24665: AND
24666: IFFALSE 24690
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24668: LD_VAR 0 5
24672: PUSH
24673: LD_INT 1
24675: ARRAY
24676: PPUSH
24677: LD_VAR 0 5
24681: PUSH
24682: LD_INT 2
24684: ARRAY
24685: PPUSH
24686: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24690: LD_ADDR_EXP 92
24694: PUSH
24695: LD_EXP 92
24699: PPUSH
24700: LD_VAR 0 4
24704: PPUSH
24705: LD_EXP 92
24709: PUSH
24710: LD_VAR 0 4
24714: ARRAY
24715: PPUSH
24716: LD_VAR 0 3
24720: PPUSH
24721: CALL_OW 3
24725: PPUSH
24726: CALL_OW 1
24730: ST_TO_ADDR
// end ; end ;
24731: GO 24560
24733: POP
24734: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24735: LD_VAR 0 1
24739: PPUSH
24740: LD_EXP 92
24744: PUSH
24745: LD_VAR 0 4
24749: ARRAY
24750: PUSH
24751: LD_INT 0
24753: PLUS
24754: PPUSH
24755: CALL_OW 505
// end ;
24759: LD_VAR 0 2
24763: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
// if not hack in hackTanks then
24770: LD_VAR 0 1
24774: PUSH
24775: LD_EXP 91
24779: IN
24780: NOT
24781: IFFALSE 24785
// exit ;
24783: GO 24870
// index := GetElementIndex ( hackTanks , hack ) ;
24785: LD_ADDR_VAR 0 5
24789: PUSH
24790: LD_EXP 91
24794: PPUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL 31803 0 2
24804: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: DOUBLE
24811: LD_INT 1
24813: DEC
24814: ST_TO_ADDR
24815: LD_EXP 92
24819: PUSH
24820: LD_VAR 0 5
24824: ARRAY
24825: PUSH
24826: FOR_TO
24827: IFFALSE 24868
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24829: LD_EXP 92
24833: PUSH
24834: LD_VAR 0 5
24838: ARRAY
24839: PUSH
24840: LD_VAR 0 4
24844: ARRAY
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PUSH
24850: LD_VAR 0 2
24854: EQUAL
24855: IFFALSE 24866
// KillUnit ( vehicle ) ;
24857: LD_VAR 0 2
24861: PPUSH
24862: CALL_OW 66
24866: GO 24826
24868: POP
24869: POP
// end ;
24870: LD_VAR 0 3
24874: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24875: LD_EXP 96
24879: NOT
24880: IFFALSE 24915
24882: GO 24884
24884: DISABLE
// begin initMiner := true ;
24885: LD_ADDR_EXP 96
24889: PUSH
24890: LD_INT 1
24892: ST_TO_ADDR
// minersList := [ ] ;
24893: LD_ADDR_EXP 97
24897: PUSH
24898: EMPTY
24899: ST_TO_ADDR
// minerMinesList := [ ] ;
24900: LD_ADDR_EXP 98
24904: PUSH
24905: EMPTY
24906: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24907: LD_ADDR_EXP 99
24911: PUSH
24912: LD_INT 5
24914: ST_TO_ADDR
// end ;
24915: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24916: LD_EXP 96
24920: PUSH
24921: LD_INT 34
24923: PUSH
24924: LD_INT 81
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PPUSH
24931: CALL_OW 69
24935: AND
24936: IFFALSE 25397
24938: GO 24940
24940: DISABLE
24941: LD_INT 0
24943: PPUSH
24944: PPUSH
24945: PPUSH
24946: PPUSH
// begin enable ;
24947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24948: LD_ADDR_VAR 0 1
24952: PUSH
24953: LD_INT 34
24955: PUSH
24956: LD_INT 81
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PPUSH
24963: CALL_OW 69
24967: PUSH
24968: FOR_IN
24969: IFFALSE 25041
// begin if not i in minersList then
24971: LD_VAR 0 1
24975: PUSH
24976: LD_EXP 97
24980: IN
24981: NOT
24982: IFFALSE 25039
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24984: LD_ADDR_EXP 97
24988: PUSH
24989: LD_EXP 97
24993: PPUSH
24994: LD_EXP 97
24998: PUSH
24999: LD_INT 1
25001: PLUS
25002: PPUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 1
25012: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25013: LD_ADDR_EXP 98
25017: PUSH
25018: LD_EXP 98
25022: PPUSH
25023: LD_EXP 98
25027: PUSH
25028: LD_INT 1
25030: PLUS
25031: PPUSH
25032: EMPTY
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
// end end ;
25039: GO 24968
25041: POP
25042: POP
// for i := minerMinesList downto 1 do
25043: LD_ADDR_VAR 0 1
25047: PUSH
25048: DOUBLE
25049: LD_EXP 98
25053: INC
25054: ST_TO_ADDR
25055: LD_INT 1
25057: PUSH
25058: FOR_DOWNTO
25059: IFFALSE 25395
// begin if IsLive ( minersList [ i ] ) then
25061: LD_EXP 97
25065: PUSH
25066: LD_VAR 0 1
25070: ARRAY
25071: PPUSH
25072: CALL_OW 300
25076: IFFALSE 25104
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25078: LD_EXP 97
25082: PUSH
25083: LD_VAR 0 1
25087: ARRAY
25088: PPUSH
25089: LD_EXP 98
25093: PUSH
25094: LD_VAR 0 1
25098: ARRAY
25099: PPUSH
25100: CALL_OW 505
// if not minerMinesList [ i ] then
25104: LD_EXP 98
25108: PUSH
25109: LD_VAR 0 1
25113: ARRAY
25114: NOT
25115: IFFALSE 25119
// continue ;
25117: GO 25058
// for j := minerMinesList [ i ] downto 1 do
25119: LD_ADDR_VAR 0 2
25123: PUSH
25124: DOUBLE
25125: LD_EXP 98
25129: PUSH
25130: LD_VAR 0 1
25134: ARRAY
25135: INC
25136: ST_TO_ADDR
25137: LD_INT 1
25139: PUSH
25140: FOR_DOWNTO
25141: IFFALSE 25391
// begin side := GetSide ( minersList [ i ] ) ;
25143: LD_ADDR_VAR 0 3
25147: PUSH
25148: LD_EXP 97
25152: PUSH
25153: LD_VAR 0 1
25157: ARRAY
25158: PPUSH
25159: CALL_OW 255
25163: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25164: LD_ADDR_VAR 0 4
25168: PUSH
25169: LD_EXP 98
25173: PUSH
25174: LD_VAR 0 1
25178: ARRAY
25179: PUSH
25180: LD_VAR 0 2
25184: ARRAY
25185: PUSH
25186: LD_INT 1
25188: ARRAY
25189: PPUSH
25190: LD_EXP 98
25194: PUSH
25195: LD_VAR 0 1
25199: ARRAY
25200: PUSH
25201: LD_VAR 0 2
25205: ARRAY
25206: PUSH
25207: LD_INT 2
25209: ARRAY
25210: PPUSH
25211: CALL_OW 428
25215: ST_TO_ADDR
// if not tmp then
25216: LD_VAR 0 4
25220: NOT
25221: IFFALSE 25225
// continue ;
25223: GO 25140
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25225: LD_VAR 0 4
25229: PUSH
25230: LD_INT 81
25232: PUSH
25233: LD_VAR 0 3
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: IN
25247: PUSH
25248: LD_EXP 98
25252: PUSH
25253: LD_VAR 0 1
25257: ARRAY
25258: PUSH
25259: LD_VAR 0 2
25263: ARRAY
25264: PUSH
25265: LD_INT 1
25267: ARRAY
25268: PPUSH
25269: LD_EXP 98
25273: PUSH
25274: LD_VAR 0 1
25278: ARRAY
25279: PUSH
25280: LD_VAR 0 2
25284: ARRAY
25285: PUSH
25286: LD_INT 2
25288: ARRAY
25289: PPUSH
25290: CALL_OW 458
25294: AND
25295: IFFALSE 25389
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25297: LD_EXP 98
25301: PUSH
25302: LD_VAR 0 1
25306: ARRAY
25307: PUSH
25308: LD_VAR 0 2
25312: ARRAY
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: PPUSH
25318: LD_EXP 98
25322: PUSH
25323: LD_VAR 0 1
25327: ARRAY
25328: PUSH
25329: LD_VAR 0 2
25333: ARRAY
25334: PUSH
25335: LD_INT 2
25337: ARRAY
25338: PPUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25348: LD_ADDR_EXP 98
25352: PUSH
25353: LD_EXP 98
25357: PPUSH
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_EXP 98
25367: PUSH
25368: LD_VAR 0 1
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 2
25378: PPUSH
25379: CALL_OW 3
25383: PPUSH
25384: CALL_OW 1
25388: ST_TO_ADDR
// end ; end ;
25389: GO 25140
25391: POP
25392: POP
// end ;
25393: GO 25058
25395: POP
25396: POP
// end ;
25397: PPOPN 4
25399: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
// result := false ;
25404: LD_ADDR_VAR 0 4
25408: PUSH
25409: LD_INT 0
25411: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 264
25421: PUSH
25422: LD_INT 81
25424: EQUAL
25425: NOT
25426: IFFALSE 25430
// exit ;
25428: GO 25670
// index := GetElementIndex ( minersList , unit ) ;
25430: LD_ADDR_VAR 0 5
25434: PUSH
25435: LD_EXP 97
25439: PPUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL 31803 0 2
25449: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25450: LD_EXP 98
25454: PUSH
25455: LD_VAR 0 5
25459: ARRAY
25460: PUSH
25461: LD_EXP 99
25465: GREATEREQUAL
25466: IFFALSE 25470
// exit ;
25468: GO 25670
// ComMoveXY ( unit , x , y ) ;
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_VAR 0 2
25479: PPUSH
25480: LD_VAR 0 3
25484: PPUSH
25485: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25489: LD_INT 35
25491: PPUSH
25492: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25496: LD_VAR 0 1
25500: PPUSH
25501: LD_VAR 0 2
25505: PPUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: CALL 63158 0 3
25515: NOT
25516: PUSH
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 314
25526: AND
25527: IFFALSE 25531
// exit ;
25529: GO 25670
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: CALL_OW 428
25545: PUSH
25546: LD_VAR 0 1
25550: EQUAL
25551: PUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: CALL_OW 314
25561: NOT
25562: AND
25563: IFFALSE 25489
// PlaySoundXY ( x , y , PlantMine ) ;
25565: LD_VAR 0 2
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: LD_STRING PlantMine
25577: PPUSH
25578: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25582: LD_VAR 0 2
25586: PPUSH
25587: LD_VAR 0 3
25591: PPUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 255
25601: PPUSH
25602: LD_INT 0
25604: PPUSH
25605: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25609: LD_ADDR_EXP 98
25613: PUSH
25614: LD_EXP 98
25618: PPUSH
25619: LD_VAR 0 5
25623: PUSH
25624: LD_EXP 98
25628: PUSH
25629: LD_VAR 0 5
25633: ARRAY
25634: PUSH
25635: LD_INT 1
25637: PLUS
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: LD_VAR 0 2
25647: PUSH
25648: LD_VAR 0 3
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL 32018 0 3
25661: ST_TO_ADDR
// result := true ;
25662: LD_ADDR_VAR 0 4
25666: PUSH
25667: LD_INT 1
25669: ST_TO_ADDR
// end ;
25670: LD_VAR 0 4
25674: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
25679: PPUSH
// if not unit in minersList then
25680: LD_VAR 0 1
25684: PUSH
25685: LD_EXP 97
25689: IN
25690: NOT
25691: IFFALSE 25695
// exit ;
25693: GO 26087
// index := GetElementIndex ( minersList , unit ) ;
25695: LD_ADDR_VAR 0 6
25699: PUSH
25700: LD_EXP 97
25704: PPUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL 31803 0 2
25714: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25715: LD_ADDR_VAR 0 5
25719: PUSH
25720: DOUBLE
25721: LD_EXP 98
25725: PUSH
25726: LD_VAR 0 6
25730: ARRAY
25731: INC
25732: ST_TO_ADDR
25733: LD_INT 1
25735: PUSH
25736: FOR_DOWNTO
25737: IFFALSE 25898
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25739: LD_EXP 98
25743: PUSH
25744: LD_VAR 0 6
25748: ARRAY
25749: PUSH
25750: LD_VAR 0 5
25754: ARRAY
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PUSH
25760: LD_VAR 0 2
25764: EQUAL
25765: PUSH
25766: LD_EXP 98
25770: PUSH
25771: LD_VAR 0 6
25775: ARRAY
25776: PUSH
25777: LD_VAR 0 5
25781: ARRAY
25782: PUSH
25783: LD_INT 2
25785: ARRAY
25786: PUSH
25787: LD_VAR 0 3
25791: EQUAL
25792: AND
25793: IFFALSE 25896
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25795: LD_EXP 98
25799: PUSH
25800: LD_VAR 0 6
25804: ARRAY
25805: PUSH
25806: LD_VAR 0 5
25810: ARRAY
25811: PUSH
25812: LD_INT 1
25814: ARRAY
25815: PPUSH
25816: LD_EXP 98
25820: PUSH
25821: LD_VAR 0 6
25825: ARRAY
25826: PUSH
25827: LD_VAR 0 5
25831: ARRAY
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: PPUSH
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL_OW 255
25846: PPUSH
25847: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25851: LD_ADDR_EXP 98
25855: PUSH
25856: LD_EXP 98
25860: PPUSH
25861: LD_VAR 0 6
25865: PPUSH
25866: LD_EXP 98
25870: PUSH
25871: LD_VAR 0 6
25875: ARRAY
25876: PPUSH
25877: LD_VAR 0 5
25881: PPUSH
25882: CALL_OW 3
25886: PPUSH
25887: CALL_OW 1
25891: ST_TO_ADDR
// exit ;
25892: POP
25893: POP
25894: GO 26087
// end ; end ;
25896: GO 25736
25898: POP
25899: POP
// for i := minerMinesList [ index ] downto 1 do
25900: LD_ADDR_VAR 0 5
25904: PUSH
25905: DOUBLE
25906: LD_EXP 98
25910: PUSH
25911: LD_VAR 0 6
25915: ARRAY
25916: INC
25917: ST_TO_ADDR
25918: LD_INT 1
25920: PUSH
25921: FOR_DOWNTO
25922: IFFALSE 26085
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25924: LD_EXP 98
25928: PUSH
25929: LD_VAR 0 6
25933: ARRAY
25934: PUSH
25935: LD_VAR 0 5
25939: ARRAY
25940: PUSH
25941: LD_INT 1
25943: ARRAY
25944: PPUSH
25945: LD_EXP 98
25949: PUSH
25950: LD_VAR 0 6
25954: ARRAY
25955: PUSH
25956: LD_VAR 0 5
25960: ARRAY
25961: PUSH
25962: LD_INT 2
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 2
25970: PPUSH
25971: LD_VAR 0 3
25975: PPUSH
25976: CALL_OW 298
25980: PUSH
25981: LD_INT 6
25983: LESS
25984: IFFALSE 26083
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25986: LD_EXP 98
25990: PUSH
25991: LD_VAR 0 6
25995: ARRAY
25996: PUSH
25997: LD_VAR 0 5
26001: ARRAY
26002: PUSH
26003: LD_INT 1
26005: ARRAY
26006: PPUSH
26007: LD_EXP 98
26011: PUSH
26012: LD_VAR 0 6
26016: ARRAY
26017: PUSH
26018: LD_VAR 0 5
26022: ARRAY
26023: PUSH
26024: LD_INT 2
26026: ARRAY
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 255
26037: PPUSH
26038: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26042: LD_ADDR_EXP 98
26046: PUSH
26047: LD_EXP 98
26051: PPUSH
26052: LD_VAR 0 6
26056: PPUSH
26057: LD_EXP 98
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PPUSH
26068: LD_VAR 0 5
26072: PPUSH
26073: CALL_OW 3
26077: PPUSH
26078: CALL_OW 1
26082: ST_TO_ADDR
// end ; end ;
26083: GO 25921
26085: POP
26086: POP
// end ;
26087: LD_VAR 0 4
26091: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26092: LD_INT 0
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26103: LD_VAR 0 1
26107: PPUSH
26108: CALL_OW 264
26112: PUSH
26113: LD_INT 81
26115: EQUAL
26116: NOT
26117: PUSH
26118: LD_VAR 0 1
26122: PUSH
26123: LD_EXP 97
26127: IN
26128: NOT
26129: OR
26130: IFFALSE 26134
// exit ;
26132: GO 26456
// index := GetElementIndex ( minersList , unit ) ;
26134: LD_ADDR_VAR 0 6
26138: PUSH
26139: LD_EXP 97
26143: PPUSH
26144: LD_VAR 0 1
26148: PPUSH
26149: CALL 31803 0 2
26153: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26154: LD_ADDR_VAR 0 8
26158: PUSH
26159: LD_EXP 99
26163: PUSH
26164: LD_EXP 98
26168: PUSH
26169: LD_VAR 0 6
26173: ARRAY
26174: MINUS
26175: ST_TO_ADDR
// if not minesFreeAmount then
26176: LD_VAR 0 8
26180: NOT
26181: IFFALSE 26185
// exit ;
26183: GO 26456
// tmp := [ ] ;
26185: LD_ADDR_VAR 0 7
26189: PUSH
26190: EMPTY
26191: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: DOUBLE
26198: LD_INT 1
26200: DEC
26201: ST_TO_ADDR
26202: LD_VAR 0 8
26206: PUSH
26207: FOR_TO
26208: IFFALSE 26403
// begin _d := rand ( 0 , 5 ) ;
26210: LD_ADDR_VAR 0 11
26214: PUSH
26215: LD_INT 0
26217: PPUSH
26218: LD_INT 5
26220: PPUSH
26221: CALL_OW 12
26225: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26226: LD_ADDR_VAR 0 12
26230: PUSH
26231: LD_INT 2
26233: PPUSH
26234: LD_INT 6
26236: PPUSH
26237: CALL_OW 12
26241: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26242: LD_ADDR_VAR 0 9
26246: PUSH
26247: LD_VAR 0 2
26251: PPUSH
26252: LD_VAR 0 11
26256: PPUSH
26257: LD_VAR 0 12
26261: PPUSH
26262: CALL_OW 272
26266: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26267: LD_ADDR_VAR 0 10
26271: PUSH
26272: LD_VAR 0 3
26276: PPUSH
26277: LD_VAR 0 11
26281: PPUSH
26282: LD_VAR 0 12
26286: PPUSH
26287: CALL_OW 273
26291: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26292: LD_VAR 0 9
26296: PPUSH
26297: LD_VAR 0 10
26301: PPUSH
26302: CALL_OW 488
26306: PUSH
26307: LD_VAR 0 9
26311: PUSH
26312: LD_VAR 0 10
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_VAR 0 7
26325: IN
26326: NOT
26327: AND
26328: PUSH
26329: LD_VAR 0 9
26333: PPUSH
26334: LD_VAR 0 10
26338: PPUSH
26339: CALL_OW 458
26343: NOT
26344: AND
26345: IFFALSE 26387
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26347: LD_ADDR_VAR 0 7
26351: PUSH
26352: LD_VAR 0 7
26356: PPUSH
26357: LD_VAR 0 7
26361: PUSH
26362: LD_INT 1
26364: PLUS
26365: PPUSH
26366: LD_VAR 0 9
26370: PUSH
26371: LD_VAR 0 10
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 1
26384: ST_TO_ADDR
26385: GO 26401
// i := i - 1 ;
26387: LD_ADDR_VAR 0 5
26391: PUSH
26392: LD_VAR 0 5
26396: PUSH
26397: LD_INT 1
26399: MINUS
26400: ST_TO_ADDR
// end ;
26401: GO 26207
26403: POP
26404: POP
// for i in tmp do
26405: LD_ADDR_VAR 0 5
26409: PUSH
26410: LD_VAR 0 7
26414: PUSH
26415: FOR_IN
26416: IFFALSE 26454
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26418: LD_VAR 0 1
26422: PPUSH
26423: LD_VAR 0 5
26427: PUSH
26428: LD_INT 1
26430: ARRAY
26431: PPUSH
26432: LD_VAR 0 5
26436: PUSH
26437: LD_INT 2
26439: ARRAY
26440: PPUSH
26441: CALL 25400 0 3
26445: NOT
26446: IFFALSE 26452
// exit ;
26448: POP
26449: POP
26450: GO 26456
26452: GO 26415
26454: POP
26455: POP
// end ;
26456: LD_VAR 0 4
26460: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26461: LD_INT 0
26463: PPUSH
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
// if not GetClass ( unit ) = class_sniper then
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 257
26479: PUSH
26480: LD_INT 5
26482: EQUAL
26483: NOT
26484: IFFALSE 26488
// exit ;
26486: GO 26876
// dist := 8 ;
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_INT 8
26495: ST_TO_ADDR
// viewRange := 12 ;
26496: LD_ADDR_VAR 0 7
26500: PUSH
26501: LD_INT 12
26503: ST_TO_ADDR
// side := GetSide ( unit ) ;
26504: LD_ADDR_VAR 0 6
26508: PUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 255
26518: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26519: LD_INT 61
26521: PPUSH
26522: LD_VAR 0 6
26526: PPUSH
26527: CALL_OW 321
26531: PUSH
26532: LD_INT 2
26534: EQUAL
26535: IFFALSE 26545
// viewRange := 16 ;
26537: LD_ADDR_VAR 0 7
26541: PUSH
26542: LD_INT 16
26544: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26545: LD_VAR 0 1
26549: PPUSH
26550: LD_VAR 0 2
26554: PPUSH
26555: LD_VAR 0 3
26559: PPUSH
26560: CALL_OW 297
26564: PUSH
26565: LD_VAR 0 5
26569: GREATER
26570: IFFALSE 26649
// begin ComMoveXY ( unit , x , y ) ;
26572: LD_VAR 0 1
26576: PPUSH
26577: LD_VAR 0 2
26581: PPUSH
26582: LD_VAR 0 3
26586: PPUSH
26587: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26591: LD_INT 35
26593: PPUSH
26594: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26598: LD_VAR 0 1
26602: PPUSH
26603: LD_VAR 0 2
26607: PPUSH
26608: LD_VAR 0 3
26612: PPUSH
26613: CALL 63158 0 3
26617: NOT
26618: IFFALSE 26622
// exit ;
26620: GO 26876
// until GetDistUnitXY ( unit , x , y ) < dist ;
26622: LD_VAR 0 1
26626: PPUSH
26627: LD_VAR 0 2
26631: PPUSH
26632: LD_VAR 0 3
26636: PPUSH
26637: CALL_OW 297
26641: PUSH
26642: LD_VAR 0 5
26646: LESS
26647: IFFALSE 26591
// end ; ComTurnXY ( unit , x , y ) ;
26649: LD_VAR 0 1
26653: PPUSH
26654: LD_VAR 0 2
26658: PPUSH
26659: LD_VAR 0 3
26663: PPUSH
26664: CALL_OW 118
// wait ( 5 ) ;
26668: LD_INT 5
26670: PPUSH
26671: CALL_OW 67
// _d := GetDir ( unit ) ;
26675: LD_ADDR_VAR 0 10
26679: PUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 254
26689: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26690: LD_ADDR_VAR 0 8
26694: PUSH
26695: LD_VAR 0 1
26699: PPUSH
26700: CALL_OW 250
26704: PPUSH
26705: LD_VAR 0 10
26709: PPUSH
26710: LD_VAR 0 5
26714: PPUSH
26715: CALL_OW 272
26719: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 251
26734: PPUSH
26735: LD_VAR 0 10
26739: PPUSH
26740: LD_VAR 0 5
26744: PPUSH
26745: CALL_OW 273
26749: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26750: LD_VAR 0 8
26754: PPUSH
26755: LD_VAR 0 9
26759: PPUSH
26760: CALL_OW 488
26764: NOT
26765: IFFALSE 26769
// exit ;
26767: GO 26876
// ComAnimCustom ( unit , 1 ) ;
26769: LD_VAR 0 1
26773: PPUSH
26774: LD_INT 1
26776: PPUSH
26777: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26781: LD_VAR 0 8
26785: PPUSH
26786: LD_VAR 0 9
26790: PPUSH
26791: LD_VAR 0 6
26795: PPUSH
26796: LD_VAR 0 7
26800: PPUSH
26801: CALL_OW 330
// repeat wait ( 1 ) ;
26805: LD_INT 1
26807: PPUSH
26808: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 316
26821: PUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 314
26831: OR
26832: PUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 302
26842: NOT
26843: OR
26844: PUSH
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 301
26854: OR
26855: IFFALSE 26805
// RemoveSeeing ( _x , _y , side ) ;
26857: LD_VAR 0 8
26861: PPUSH
26862: LD_VAR 0 9
26866: PPUSH
26867: LD_VAR 0 6
26871: PPUSH
26872: CALL_OW 331
// end ; end_of_file
26876: LD_VAR 0 4
26880: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26881: LD_INT 0
26883: PPUSH
26884: PPUSH
// if exist_mode then
26885: LD_VAR 0 2
26889: IFFALSE 26914
// unit := CreateCharacter ( prefix & ident ) else
26891: LD_ADDR_VAR 0 5
26895: PUSH
26896: LD_VAR 0 3
26900: PUSH
26901: LD_VAR 0 1
26905: STR
26906: PPUSH
26907: CALL_OW 34
26911: ST_TO_ADDR
26912: GO 26929
// unit := NewCharacter ( ident ) ;
26914: LD_ADDR_VAR 0 5
26918: PUSH
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 25
26928: ST_TO_ADDR
// result := unit ;
26929: LD_ADDR_VAR 0 4
26933: PUSH
26934: LD_VAR 0 5
26938: ST_TO_ADDR
// end ;
26939: LD_VAR 0 4
26943: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26944: LD_INT 0
26946: PPUSH
26947: PPUSH
// if not side or not nation then
26948: LD_VAR 0 1
26952: NOT
26953: PUSH
26954: LD_VAR 0 2
26958: NOT
26959: OR
26960: IFFALSE 26964
// exit ;
26962: GO 27732
// case nation of nation_american :
26964: LD_VAR 0 2
26968: PUSH
26969: LD_INT 1
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 27191
26977: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26978: LD_ADDR_VAR 0 4
26982: PUSH
26983: LD_INT 35
26985: PUSH
26986: LD_INT 45
26988: PUSH
26989: LD_INT 46
26991: PUSH
26992: LD_INT 47
26994: PUSH
26995: LD_INT 82
26997: PUSH
26998: LD_INT 83
27000: PUSH
27001: LD_INT 84
27003: PUSH
27004: LD_INT 85
27006: PUSH
27007: LD_INT 86
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 6
27018: PUSH
27019: LD_INT 15
27021: PUSH
27022: LD_INT 16
27024: PUSH
27025: LD_INT 7
27027: PUSH
27028: LD_INT 12
27030: PUSH
27031: LD_INT 13
27033: PUSH
27034: LD_INT 10
27036: PUSH
27037: LD_INT 14
27039: PUSH
27040: LD_INT 20
27042: PUSH
27043: LD_INT 21
27045: PUSH
27046: LD_INT 22
27048: PUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 32
27054: PUSH
27055: LD_INT 27
27057: PUSH
27058: LD_INT 36
27060: PUSH
27061: LD_INT 69
27063: PUSH
27064: LD_INT 39
27066: PUSH
27067: LD_INT 34
27069: PUSH
27070: LD_INT 40
27072: PUSH
27073: LD_INT 48
27075: PUSH
27076: LD_INT 49
27078: PUSH
27079: LD_INT 50
27081: PUSH
27082: LD_INT 51
27084: PUSH
27085: LD_INT 52
27087: PUSH
27088: LD_INT 53
27090: PUSH
27091: LD_INT 54
27093: PUSH
27094: LD_INT 55
27096: PUSH
27097: LD_INT 56
27099: PUSH
27100: LD_INT 57
27102: PUSH
27103: LD_INT 58
27105: PUSH
27106: LD_INT 59
27108: PUSH
27109: LD_INT 60
27111: PUSH
27112: LD_INT 61
27114: PUSH
27115: LD_INT 62
27117: PUSH
27118: LD_INT 80
27120: PUSH
27121: LD_INT 82
27123: PUSH
27124: LD_INT 83
27126: PUSH
27127: LD_INT 84
27129: PUSH
27130: LD_INT 85
27132: PUSH
27133: LD_INT 86
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
27189: GO 27656
27191: LD_INT 2
27193: DOUBLE
27194: EQUAL
27195: IFTRUE 27199
27197: GO 27425
27199: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27200: LD_ADDR_VAR 0 4
27204: PUSH
27205: LD_INT 35
27207: PUSH
27208: LD_INT 45
27210: PUSH
27211: LD_INT 46
27213: PUSH
27214: LD_INT 47
27216: PUSH
27217: LD_INT 82
27219: PUSH
27220: LD_INT 83
27222: PUSH
27223: LD_INT 84
27225: PUSH
27226: LD_INT 85
27228: PUSH
27229: LD_INT 87
27231: PUSH
27232: LD_INT 70
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 11
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: LD_INT 4
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: LD_INT 6
27252: PUSH
27253: LD_INT 15
27255: PUSH
27256: LD_INT 18
27258: PUSH
27259: LD_INT 7
27261: PUSH
27262: LD_INT 17
27264: PUSH
27265: LD_INT 8
27267: PUSH
27268: LD_INT 20
27270: PUSH
27271: LD_INT 21
27273: PUSH
27274: LD_INT 22
27276: PUSH
27277: LD_INT 72
27279: PUSH
27280: LD_INT 26
27282: PUSH
27283: LD_INT 69
27285: PUSH
27286: LD_INT 39
27288: PUSH
27289: LD_INT 40
27291: PUSH
27292: LD_INT 41
27294: PUSH
27295: LD_INT 42
27297: PUSH
27298: LD_INT 43
27300: PUSH
27301: LD_INT 48
27303: PUSH
27304: LD_INT 49
27306: PUSH
27307: LD_INT 50
27309: PUSH
27310: LD_INT 51
27312: PUSH
27313: LD_INT 52
27315: PUSH
27316: LD_INT 53
27318: PUSH
27319: LD_INT 54
27321: PUSH
27322: LD_INT 55
27324: PUSH
27325: LD_INT 56
27327: PUSH
27328: LD_INT 60
27330: PUSH
27331: LD_INT 61
27333: PUSH
27334: LD_INT 62
27336: PUSH
27337: LD_INT 66
27339: PUSH
27340: LD_INT 67
27342: PUSH
27343: LD_INT 68
27345: PUSH
27346: LD_INT 81
27348: PUSH
27349: LD_INT 82
27351: PUSH
27352: LD_INT 83
27354: PUSH
27355: LD_INT 84
27357: PUSH
27358: LD_INT 85
27360: PUSH
27361: LD_INT 87
27363: PUSH
27364: LD_INT 88
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
27423: GO 27656
27425: LD_INT 3
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27655
27433: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27434: LD_ADDR_VAR 0 4
27438: PUSH
27439: LD_INT 46
27441: PUSH
27442: LD_INT 47
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: LD_INT 82
27453: PUSH
27454: LD_INT 83
27456: PUSH
27457: LD_INT 84
27459: PUSH
27460: LD_INT 85
27462: PUSH
27463: LD_INT 86
27465: PUSH
27466: LD_INT 11
27468: PUSH
27469: LD_INT 9
27471: PUSH
27472: LD_INT 20
27474: PUSH
27475: LD_INT 19
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 24
27483: PUSH
27484: LD_INT 22
27486: PUSH
27487: LD_INT 25
27489: PUSH
27490: LD_INT 28
27492: PUSH
27493: LD_INT 29
27495: PUSH
27496: LD_INT 30
27498: PUSH
27499: LD_INT 31
27501: PUSH
27502: LD_INT 37
27504: PUSH
27505: LD_INT 38
27507: PUSH
27508: LD_INT 32
27510: PUSH
27511: LD_INT 27
27513: PUSH
27514: LD_INT 33
27516: PUSH
27517: LD_INT 69
27519: PUSH
27520: LD_INT 39
27522: PUSH
27523: LD_INT 34
27525: PUSH
27526: LD_INT 40
27528: PUSH
27529: LD_INT 71
27531: PUSH
27532: LD_INT 23
27534: PUSH
27535: LD_INT 44
27537: PUSH
27538: LD_INT 48
27540: PUSH
27541: LD_INT 49
27543: PUSH
27544: LD_INT 50
27546: PUSH
27547: LD_INT 51
27549: PUSH
27550: LD_INT 52
27552: PUSH
27553: LD_INT 53
27555: PUSH
27556: LD_INT 54
27558: PUSH
27559: LD_INT 55
27561: PUSH
27562: LD_INT 56
27564: PUSH
27565: LD_INT 57
27567: PUSH
27568: LD_INT 58
27570: PUSH
27571: LD_INT 59
27573: PUSH
27574: LD_INT 63
27576: PUSH
27577: LD_INT 64
27579: PUSH
27580: LD_INT 65
27582: PUSH
27583: LD_INT 82
27585: PUSH
27586: LD_INT 83
27588: PUSH
27589: LD_INT 84
27591: PUSH
27592: LD_INT 85
27594: PUSH
27595: LD_INT 86
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: ST_TO_ADDR
27653: GO 27656
27655: POP
// if state > - 1 and state < 3 then
27656: LD_VAR 0 3
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: GREATER
27665: PUSH
27666: LD_VAR 0 3
27670: PUSH
27671: LD_INT 3
27673: LESS
27674: AND
27675: IFFALSE 27732
// for i in result do
27677: LD_ADDR_VAR 0 5
27681: PUSH
27682: LD_VAR 0 4
27686: PUSH
27687: FOR_IN
27688: IFFALSE 27730
// if GetTech ( i , side ) <> state then
27690: LD_VAR 0 5
27694: PPUSH
27695: LD_VAR 0 1
27699: PPUSH
27700: CALL_OW 321
27704: PUSH
27705: LD_VAR 0 3
27709: NONEQUAL
27710: IFFALSE 27728
// result := result diff i ;
27712: LD_ADDR_VAR 0 4
27716: PUSH
27717: LD_VAR 0 4
27721: PUSH
27722: LD_VAR 0 5
27726: DIFF
27727: ST_TO_ADDR
27728: GO 27687
27730: POP
27731: POP
// end ;
27732: LD_VAR 0 4
27736: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27737: LD_INT 0
27739: PPUSH
27740: PPUSH
27741: PPUSH
// result := true ;
27742: LD_ADDR_VAR 0 3
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27750: LD_ADDR_VAR 0 5
27754: PUSH
27755: LD_VAR 0 2
27759: PPUSH
27760: CALL_OW 480
27764: ST_TO_ADDR
// if not tmp then
27765: LD_VAR 0 5
27769: NOT
27770: IFFALSE 27774
// exit ;
27772: GO 27823
// for i in tmp do
27774: LD_ADDR_VAR 0 4
27778: PUSH
27779: LD_VAR 0 5
27783: PUSH
27784: FOR_IN
27785: IFFALSE 27821
// if GetTech ( i , side ) <> state_researched then
27787: LD_VAR 0 4
27791: PPUSH
27792: LD_VAR 0 1
27796: PPUSH
27797: CALL_OW 321
27801: PUSH
27802: LD_INT 2
27804: NONEQUAL
27805: IFFALSE 27819
// begin result := false ;
27807: LD_ADDR_VAR 0 3
27811: PUSH
27812: LD_INT 0
27814: ST_TO_ADDR
// exit ;
27815: POP
27816: POP
27817: GO 27823
// end ;
27819: GO 27784
27821: POP
27822: POP
// end ;
27823: LD_VAR 0 3
27827: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27828: LD_INT 0
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
27841: PPUSH
27842: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27843: LD_VAR 0 1
27847: NOT
27848: PUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 257
27858: PUSH
27859: LD_INT 9
27861: NONEQUAL
27862: OR
27863: IFFALSE 27867
// exit ;
27865: GO 28440
// side := GetSide ( unit ) ;
27867: LD_ADDR_VAR 0 9
27871: PUSH
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 255
27881: ST_TO_ADDR
// tech_space := tech_spacanom ;
27882: LD_ADDR_VAR 0 12
27886: PUSH
27887: LD_INT 29
27889: ST_TO_ADDR
// tech_time := tech_taurad ;
27890: LD_ADDR_VAR 0 13
27894: PUSH
27895: LD_INT 28
27897: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27898: LD_ADDR_VAR 0 11
27902: PUSH
27903: LD_VAR 0 1
27907: PPUSH
27908: CALL_OW 310
27912: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27913: LD_VAR 0 11
27917: PPUSH
27918: CALL_OW 247
27922: PUSH
27923: LD_INT 2
27925: EQUAL
27926: IFFALSE 27930
// exit ;
27928: GO 28440
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27930: LD_ADDR_VAR 0 8
27934: PUSH
27935: LD_INT 81
27937: PUSH
27938: LD_VAR 0 9
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 21
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PPUSH
27968: CALL_OW 69
27972: ST_TO_ADDR
// if not tmp then
27973: LD_VAR 0 8
27977: NOT
27978: IFFALSE 27982
// exit ;
27980: GO 28440
// if in_unit then
27982: LD_VAR 0 11
27986: IFFALSE 28010
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27988: LD_ADDR_VAR 0 10
27992: PUSH
27993: LD_VAR 0 8
27997: PPUSH
27998: LD_VAR 0 11
28002: PPUSH
28003: CALL_OW 74
28007: ST_TO_ADDR
28008: GO 28030
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28010: LD_ADDR_VAR 0 10
28014: PUSH
28015: LD_VAR 0 8
28019: PPUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 74
28029: ST_TO_ADDR
// if not enemy then
28030: LD_VAR 0 10
28034: NOT
28035: IFFALSE 28039
// exit ;
28037: GO 28440
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28039: LD_VAR 0 11
28043: PUSH
28044: LD_VAR 0 11
28048: PPUSH
28049: LD_VAR 0 10
28053: PPUSH
28054: CALL_OW 296
28058: PUSH
28059: LD_INT 13
28061: GREATER
28062: AND
28063: PUSH
28064: LD_VAR 0 1
28068: PPUSH
28069: LD_VAR 0 10
28073: PPUSH
28074: CALL_OW 296
28078: PUSH
28079: LD_INT 12
28081: GREATER
28082: OR
28083: IFFALSE 28087
// exit ;
28085: GO 28440
// missile := [ 1 ] ;
28087: LD_ADDR_VAR 0 14
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28098: LD_VAR 0 9
28102: PPUSH
28103: LD_VAR 0 12
28107: PPUSH
28108: CALL_OW 325
28112: IFFALSE 28141
// missile := Replace ( missile , missile + 1 , 2 ) ;
28114: LD_ADDR_VAR 0 14
28118: PUSH
28119: LD_VAR 0 14
28123: PPUSH
28124: LD_VAR 0 14
28128: PUSH
28129: LD_INT 1
28131: PLUS
28132: PPUSH
28133: LD_INT 2
28135: PPUSH
28136: CALL_OW 1
28140: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28141: LD_VAR 0 9
28145: PPUSH
28146: LD_VAR 0 13
28150: PPUSH
28151: CALL_OW 325
28155: PUSH
28156: LD_VAR 0 10
28160: PPUSH
28161: CALL_OW 255
28165: PPUSH
28166: LD_VAR 0 13
28170: PPUSH
28171: CALL_OW 325
28175: NOT
28176: AND
28177: IFFALSE 28206
// missile := Replace ( missile , missile + 1 , 3 ) ;
28179: LD_ADDR_VAR 0 14
28183: PUSH
28184: LD_VAR 0 14
28188: PPUSH
28189: LD_VAR 0 14
28193: PUSH
28194: LD_INT 1
28196: PLUS
28197: PPUSH
28198: LD_INT 3
28200: PPUSH
28201: CALL_OW 1
28205: ST_TO_ADDR
// if missile < 2 then
28206: LD_VAR 0 14
28210: PUSH
28211: LD_INT 2
28213: LESS
28214: IFFALSE 28218
// exit ;
28216: GO 28440
// x := GetX ( enemy ) ;
28218: LD_ADDR_VAR 0 4
28222: PUSH
28223: LD_VAR 0 10
28227: PPUSH
28228: CALL_OW 250
28232: ST_TO_ADDR
// y := GetY ( enemy ) ;
28233: LD_ADDR_VAR 0 5
28237: PUSH
28238: LD_VAR 0 10
28242: PPUSH
28243: CALL_OW 251
28247: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28248: LD_ADDR_VAR 0 6
28252: PUSH
28253: LD_VAR 0 4
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PPUSH
28262: LD_INT 1
28264: PPUSH
28265: CALL_OW 12
28269: PLUS
28270: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28271: LD_ADDR_VAR 0 7
28275: PUSH
28276: LD_VAR 0 5
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PPUSH
28285: LD_INT 1
28287: PPUSH
28288: CALL_OW 12
28292: PLUS
28293: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28294: LD_VAR 0 6
28298: PPUSH
28299: LD_VAR 0 7
28303: PPUSH
28304: CALL_OW 488
28308: NOT
28309: IFFALSE 28331
// begin _x := x ;
28311: LD_ADDR_VAR 0 6
28315: PUSH
28316: LD_VAR 0 4
28320: ST_TO_ADDR
// _y := y ;
28321: LD_ADDR_VAR 0 7
28325: PUSH
28326: LD_VAR 0 5
28330: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 1
28338: PPUSH
28339: LD_VAR 0 14
28343: PPUSH
28344: CALL_OW 12
28348: ST_TO_ADDR
// case i of 1 :
28349: LD_VAR 0 3
28353: PUSH
28354: LD_INT 1
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28379
28362: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_VAR 0 10
28372: PPUSH
28373: CALL_OW 115
28377: GO 28440
28379: LD_INT 2
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28409
28387: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_VAR 0 6
28397: PPUSH
28398: LD_VAR 0 7
28402: PPUSH
28403: CALL_OW 153
28407: GO 28440
28409: LD_INT 3
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28439
28417: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_VAR 0 6
28427: PPUSH
28428: LD_VAR 0 7
28432: PPUSH
28433: CALL_OW 154
28437: GO 28440
28439: POP
// end ;
28440: LD_VAR 0 2
28444: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
// if not unit or not building then
28453: LD_VAR 0 1
28457: NOT
28458: PUSH
28459: LD_VAR 0 2
28463: NOT
28464: OR
28465: IFFALSE 28469
// exit ;
28467: GO 28627
// x := GetX ( building ) ;
28469: LD_ADDR_VAR 0 5
28473: PUSH
28474: LD_VAR 0 2
28478: PPUSH
28479: CALL_OW 250
28483: ST_TO_ADDR
// y := GetY ( building ) ;
28484: LD_ADDR_VAR 0 6
28488: PUSH
28489: LD_VAR 0 2
28493: PPUSH
28494: CALL_OW 251
28498: ST_TO_ADDR
// for i = 0 to 5 do
28499: LD_ADDR_VAR 0 4
28503: PUSH
28504: DOUBLE
28505: LD_INT 0
28507: DEC
28508: ST_TO_ADDR
28509: LD_INT 5
28511: PUSH
28512: FOR_TO
28513: IFFALSE 28625
// begin _x := ShiftX ( x , i , 3 ) ;
28515: LD_ADDR_VAR 0 7
28519: PUSH
28520: LD_VAR 0 5
28524: PPUSH
28525: LD_VAR 0 4
28529: PPUSH
28530: LD_INT 3
28532: PPUSH
28533: CALL_OW 272
28537: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28538: LD_ADDR_VAR 0 8
28542: PUSH
28543: LD_VAR 0 6
28547: PPUSH
28548: LD_VAR 0 4
28552: PPUSH
28553: LD_INT 3
28555: PPUSH
28556: CALL_OW 273
28560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28561: LD_VAR 0 7
28565: PPUSH
28566: LD_VAR 0 8
28570: PPUSH
28571: CALL_OW 488
28575: NOT
28576: IFFALSE 28580
// continue ;
28578: GO 28512
// if HexInfo ( _x , _y ) = 0 then
28580: LD_VAR 0 7
28584: PPUSH
28585: LD_VAR 0 8
28589: PPUSH
28590: CALL_OW 428
28594: PUSH
28595: LD_INT 0
28597: EQUAL
28598: IFFALSE 28623
// begin ComMoveXY ( unit , _x , _y ) ;
28600: LD_VAR 0 1
28604: PPUSH
28605: LD_VAR 0 7
28609: PPUSH
28610: LD_VAR 0 8
28614: PPUSH
28615: CALL_OW 111
// exit ;
28619: POP
28620: POP
28621: GO 28627
// end ; end ;
28623: GO 28512
28625: POP
28626: POP
// end ;
28627: LD_VAR 0 3
28631: RET
// export function ScanBase ( side , base_area ) ; begin
28632: LD_INT 0
28634: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28635: LD_ADDR_VAR 0 3
28639: PUSH
28640: LD_VAR 0 2
28644: PPUSH
28645: LD_INT 81
28647: PUSH
28648: LD_VAR 0 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PPUSH
28657: CALL_OW 70
28661: ST_TO_ADDR
// end ;
28662: LD_VAR 0 3
28666: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
28671: PPUSH
28672: PPUSH
// result := false ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_INT 0
28680: ST_TO_ADDR
// side := GetSide ( unit ) ;
28681: LD_ADDR_VAR 0 3
28685: PUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 255
28695: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28696: LD_ADDR_VAR 0 4
28700: PUSH
28701: LD_VAR 0 1
28705: PPUSH
28706: CALL_OW 248
28710: ST_TO_ADDR
// case nat of 1 :
28711: LD_VAR 0 4
28715: PUSH
28716: LD_INT 1
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 28735
28724: POP
// tech := tech_lassight ; 2 :
28725: LD_ADDR_VAR 0 5
28729: PUSH
28730: LD_INT 12
28732: ST_TO_ADDR
28733: GO 28774
28735: LD_INT 2
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28754
28743: POP
// tech := tech_mortar ; 3 :
28744: LD_ADDR_VAR 0 5
28748: PUSH
28749: LD_INT 41
28751: ST_TO_ADDR
28752: GO 28774
28754: LD_INT 3
28756: DOUBLE
28757: EQUAL
28758: IFTRUE 28762
28760: GO 28773
28762: POP
// tech := tech_bazooka ; end ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 44
28770: ST_TO_ADDR
28771: GO 28774
28773: POP
// if Researched ( side , tech ) then
28774: LD_VAR 0 3
28778: PPUSH
28779: LD_VAR 0 5
28783: PPUSH
28784: CALL_OW 325
28788: IFFALSE 28815
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28790: LD_ADDR_VAR 0 2
28794: PUSH
28795: LD_INT 5
28797: PUSH
28798: LD_INT 8
28800: PUSH
28801: LD_INT 9
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: PUSH
28809: LD_VAR 0 4
28813: ARRAY
28814: ST_TO_ADDR
// end ;
28815: LD_VAR 0 2
28819: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
28824: PPUSH
// if not mines then
28825: LD_VAR 0 2
28829: NOT
28830: IFFALSE 28834
// exit ;
28832: GO 28978
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28834: LD_ADDR_VAR 0 5
28838: PUSH
28839: LD_INT 81
28841: PUSH
28842: LD_VAR 0 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 3
28853: PUSH
28854: LD_INT 21
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 69
28876: ST_TO_ADDR
// for i in mines do
28877: LD_ADDR_VAR 0 4
28881: PUSH
28882: LD_VAR 0 2
28886: PUSH
28887: FOR_IN
28888: IFFALSE 28976
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28890: LD_VAR 0 4
28894: PUSH
28895: LD_INT 1
28897: ARRAY
28898: PPUSH
28899: LD_VAR 0 4
28903: PUSH
28904: LD_INT 2
28906: ARRAY
28907: PPUSH
28908: CALL_OW 458
28912: NOT
28913: IFFALSE 28917
// continue ;
28915: GO 28887
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28917: LD_VAR 0 4
28921: PUSH
28922: LD_INT 1
28924: ARRAY
28925: PPUSH
28926: LD_VAR 0 4
28930: PUSH
28931: LD_INT 2
28933: ARRAY
28934: PPUSH
28935: CALL_OW 428
28939: PUSH
28940: LD_VAR 0 5
28944: IN
28945: IFFALSE 28974
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28947: LD_VAR 0 4
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: PPUSH
28956: LD_VAR 0 4
28960: PUSH
28961: LD_INT 2
28963: ARRAY
28964: PPUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL_OW 456
// end ;
28974: GO 28887
28976: POP
28977: POP
// end ;
28978: LD_VAR 0 3
28982: RET
// export function Count ( array ) ; var i ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
// result := 0 ;
28987: LD_ADDR_VAR 0 2
28991: PUSH
28992: LD_INT 0
28994: ST_TO_ADDR
// for i in array do
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_VAR 0 1
29004: PUSH
29005: FOR_IN
29006: IFFALSE 29030
// if i then
29008: LD_VAR 0 3
29012: IFFALSE 29028
// result := result + 1 ;
29014: LD_ADDR_VAR 0 2
29018: PUSH
29019: LD_VAR 0 2
29023: PUSH
29024: LD_INT 1
29026: PLUS
29027: ST_TO_ADDR
29028: GO 29005
29030: POP
29031: POP
// end ;
29032: LD_VAR 0 2
29036: RET
// export function IsEmpty ( building ) ; begin
29037: LD_INT 0
29039: PPUSH
// if not building then
29040: LD_VAR 0 1
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29092
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29049: LD_ADDR_VAR 0 2
29053: PUSH
29054: LD_VAR 0 1
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 255
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 58
29078: PUSH
29079: EMPTY
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: IN
29091: ST_TO_ADDR
// end ;
29092: LD_VAR 0 2
29096: RET
// export function IsNotFull ( building ) ; var places ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
// if not building then
29101: LD_VAR 0 1
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29281
// result := false ;
29110: LD_ADDR_VAR 0 2
29114: PUSH
29115: LD_INT 0
29117: ST_TO_ADDR
// places := 0 ;
29118: LD_ADDR_VAR 0 3
29122: PUSH
29123: LD_INT 0
29125: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 266
29135: PUSH
29136: LD_INT 0
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29198
29142: LD_INT 1
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29198
29148: LD_INT 6
29150: DOUBLE
29151: EQUAL
29152: IFTRUE 29198
29154: LD_INT 7
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29198
29160: LD_INT 8
29162: DOUBLE
29163: EQUAL
29164: IFTRUE 29198
29166: LD_INT 4
29168: DOUBLE
29169: EQUAL
29170: IFTRUE 29198
29172: LD_INT 5
29174: DOUBLE
29175: EQUAL
29176: IFTRUE 29198
29178: LD_INT 2
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29198
29184: LD_INT 3
29186: DOUBLE
29187: EQUAL
29188: IFTRUE 29198
29190: LD_INT 35
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29209
29198: POP
// places := 6 ; b_bunker , b_breastwork :
29199: LD_ADDR_VAR 0 3
29203: PUSH
29204: LD_INT 6
29206: ST_TO_ADDR
29207: GO 29254
29209: LD_INT 32
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29223
29215: LD_INT 31
29217: DOUBLE
29218: EQUAL
29219: IFTRUE 29223
29221: GO 29234
29223: POP
// places := 1 ; b_control_tower :
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_INT 1
29231: ST_TO_ADDR
29232: GO 29254
29234: LD_INT 36
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29253
29242: POP
// places := 3 ; end ;
29243: LD_ADDR_VAR 0 3
29247: PUSH
29248: LD_INT 3
29250: ST_TO_ADDR
29251: GO 29254
29253: POP
// if places then
29254: LD_VAR 0 3
29258: IFFALSE 29281
// result := UnitsInside ( building ) < places ;
29260: LD_ADDR_VAR 0 2
29264: PUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 313
29274: PUSH
29275: LD_VAR 0 3
29279: LESS
29280: ST_TO_ADDR
// end ;
29281: LD_VAR 0 2
29285: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29286: LD_INT 0
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
// tmp := [ ] ;
29292: LD_ADDR_VAR 0 3
29296: PUSH
29297: EMPTY
29298: ST_TO_ADDR
// list := [ ] ;
29299: LD_ADDR_VAR 0 5
29303: PUSH
29304: EMPTY
29305: ST_TO_ADDR
// for i = 16 to 25 do
29306: LD_ADDR_VAR 0 4
29310: PUSH
29311: DOUBLE
29312: LD_INT 16
29314: DEC
29315: ST_TO_ADDR
29316: LD_INT 25
29318: PUSH
29319: FOR_TO
29320: IFFALSE 29393
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_VAR 0 3
29331: PUSH
29332: LD_INT 22
29334: PUSH
29335: LD_VAR 0 1
29339: PPUSH
29340: CALL_OW 255
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 91
29351: PUSH
29352: LD_VAR 0 1
29356: PUSH
29357: LD_INT 6
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 30
29367: PUSH
29368: LD_VAR 0 4
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: PPUSH
29385: CALL_OW 69
29389: ADD
29390: ST_TO_ADDR
29391: GO 29319
29393: POP
29394: POP
// for i = 1 to tmp do
29395: LD_ADDR_VAR 0 4
29399: PUSH
29400: DOUBLE
29401: LD_INT 1
29403: DEC
29404: ST_TO_ADDR
29405: LD_VAR 0 3
29409: PUSH
29410: FOR_TO
29411: IFFALSE 29499
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: LD_VAR 0 5
29422: PUSH
29423: LD_VAR 0 3
29427: PUSH
29428: LD_VAR 0 4
29432: ARRAY
29433: PPUSH
29434: CALL_OW 266
29438: PUSH
29439: LD_VAR 0 3
29443: PUSH
29444: LD_VAR 0 4
29448: ARRAY
29449: PPUSH
29450: CALL_OW 250
29454: PUSH
29455: LD_VAR 0 3
29459: PUSH
29460: LD_VAR 0 4
29464: ARRAY
29465: PPUSH
29466: CALL_OW 251
29470: PUSH
29471: LD_VAR 0 3
29475: PUSH
29476: LD_VAR 0 4
29480: ARRAY
29481: PPUSH
29482: CALL_OW 254
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: ADD
29496: ST_TO_ADDR
29497: GO 29410
29499: POP
29500: POP
// result := list ;
29501: LD_ADDR_VAR 0 2
29505: PUSH
29506: LD_VAR 0 5
29510: ST_TO_ADDR
// end ;
29511: LD_VAR 0 2
29515: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
// if not factory then
29525: LD_VAR 0 1
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 30127
// if control = control_apeman then
29534: LD_VAR 0 4
29538: PUSH
29539: LD_INT 5
29541: EQUAL
29542: IFFALSE 29651
// begin tmp := UnitsInside ( factory ) ;
29544: LD_ADDR_VAR 0 8
29548: PUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 313
29558: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29559: LD_VAR 0 8
29563: PPUSH
29564: LD_INT 25
29566: PUSH
29567: LD_INT 12
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 72
29578: NOT
29579: IFFALSE 29589
// control := control_manual ;
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_INT 1
29588: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29589: LD_ADDR_VAR 0 8
29593: PUSH
29594: LD_VAR 0 1
29598: PPUSH
29599: CALL 29286 0 1
29603: ST_TO_ADDR
// if tmp then
29604: LD_VAR 0 8
29608: IFFALSE 29651
// begin for i in tmp do
29610: LD_ADDR_VAR 0 7
29614: PUSH
29615: LD_VAR 0 8
29619: PUSH
29620: FOR_IN
29621: IFFALSE 29649
// if i [ 1 ] = b_ext_radio then
29623: LD_VAR 0 7
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PUSH
29632: LD_INT 22
29634: EQUAL
29635: IFFALSE 29647
// begin control := control_remote ;
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_INT 2
29644: ST_TO_ADDR
// break ;
29645: GO 29649
// end ;
29647: GO 29620
29649: POP
29650: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29651: LD_VAR 0 1
29655: PPUSH
29656: LD_VAR 0 2
29660: PPUSH
29661: LD_VAR 0 3
29665: PPUSH
29666: LD_VAR 0 4
29670: PPUSH
29671: LD_VAR 0 5
29675: PPUSH
29676: CALL_OW 448
29680: IFFALSE 29715
// begin result := [ chassis , engine , control , weapon ] ;
29682: LD_ADDR_VAR 0 6
29686: PUSH
29687: LD_VAR 0 2
29691: PUSH
29692: LD_VAR 0 3
29696: PUSH
29697: LD_VAR 0 4
29701: PUSH
29702: LD_VAR 0 5
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: ST_TO_ADDR
// exit ;
29713: GO 30127
// end ; _chassis := AvailableChassisList ( factory ) ;
29715: LD_ADDR_VAR 0 9
29719: PUSH
29720: LD_VAR 0 1
29724: PPUSH
29725: CALL_OW 475
29729: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29730: LD_ADDR_VAR 0 11
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 476
29744: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29745: LD_ADDR_VAR 0 12
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: CALL_OW 477
29759: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29760: LD_ADDR_VAR 0 10
29764: PUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 478
29774: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29775: LD_VAR 0 9
29779: NOT
29780: PUSH
29781: LD_VAR 0 11
29785: NOT
29786: OR
29787: PUSH
29788: LD_VAR 0 12
29792: NOT
29793: OR
29794: PUSH
29795: LD_VAR 0 10
29799: NOT
29800: OR
29801: IFFALSE 29836
// begin result := [ chassis , engine , control , weapon ] ;
29803: LD_ADDR_VAR 0 6
29807: PUSH
29808: LD_VAR 0 2
29812: PUSH
29813: LD_VAR 0 3
29817: PUSH
29818: LD_VAR 0 4
29822: PUSH
29823: LD_VAR 0 5
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
// exit ;
29834: GO 30127
// end ; if not chassis in _chassis then
29836: LD_VAR 0 2
29840: PUSH
29841: LD_VAR 0 9
29845: IN
29846: NOT
29847: IFFALSE 29873
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29849: LD_ADDR_VAR 0 2
29853: PUSH
29854: LD_VAR 0 9
29858: PUSH
29859: LD_INT 1
29861: PPUSH
29862: LD_VAR 0 9
29866: PPUSH
29867: CALL_OW 12
29871: ARRAY
29872: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29873: LD_VAR 0 2
29877: PPUSH
29878: LD_VAR 0 3
29882: PPUSH
29883: CALL 30132 0 2
29887: NOT
29888: IFFALSE 29947
// repeat engine := _engine [ 1 ] ;
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_VAR 0 11
29899: PUSH
29900: LD_INT 1
29902: ARRAY
29903: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29904: LD_ADDR_VAR 0 11
29908: PUSH
29909: LD_VAR 0 11
29913: PPUSH
29914: LD_INT 1
29916: PPUSH
29917: CALL_OW 3
29921: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29922: LD_VAR 0 2
29926: PPUSH
29927: LD_VAR 0 3
29931: PPUSH
29932: CALL 30132 0 2
29936: PUSH
29937: LD_VAR 0 11
29941: PUSH
29942: EMPTY
29943: EQUAL
29944: OR
29945: IFFALSE 29890
// if not control in _control then
29947: LD_VAR 0 4
29951: PUSH
29952: LD_VAR 0 12
29956: IN
29957: NOT
29958: IFFALSE 29984
// control := _control [ rand ( 1 , _control ) ] ;
29960: LD_ADDR_VAR 0 4
29964: PUSH
29965: LD_VAR 0 12
29969: PUSH
29970: LD_INT 1
29972: PPUSH
29973: LD_VAR 0 12
29977: PPUSH
29978: CALL_OW 12
29982: ARRAY
29983: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29984: LD_VAR 0 2
29988: PPUSH
29989: LD_VAR 0 5
29993: PPUSH
29994: CALL 30352 0 2
29998: NOT
29999: IFFALSE 30058
// repeat weapon := _weapon [ 1 ] ;
30001: LD_ADDR_VAR 0 5
30005: PUSH
30006: LD_VAR 0 10
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30015: LD_ADDR_VAR 0 10
30019: PUSH
30020: LD_VAR 0 10
30024: PPUSH
30025: LD_INT 1
30027: PPUSH
30028: CALL_OW 3
30032: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30033: LD_VAR 0 2
30037: PPUSH
30038: LD_VAR 0 5
30042: PPUSH
30043: CALL 30352 0 2
30047: PUSH
30048: LD_VAR 0 10
30052: PUSH
30053: EMPTY
30054: EQUAL
30055: OR
30056: IFFALSE 30001
// result := [ ] ;
30058: LD_ADDR_VAR 0 6
30062: PUSH
30063: EMPTY
30064: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 2
30074: PPUSH
30075: LD_VAR 0 3
30079: PPUSH
30080: LD_VAR 0 4
30084: PPUSH
30085: LD_VAR 0 5
30089: PPUSH
30090: CALL_OW 448
30094: IFFALSE 30127
// result := [ chassis , engine , control , weapon ] ;
30096: LD_ADDR_VAR 0 6
30100: PUSH
30101: LD_VAR 0 2
30105: PUSH
30106: LD_VAR 0 3
30110: PUSH
30111: LD_VAR 0 4
30115: PUSH
30116: LD_VAR 0 5
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
// end ;
30127: LD_VAR 0 6
30131: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30132: LD_INT 0
30134: PPUSH
// if not chassis or not engine then
30135: LD_VAR 0 1
30139: NOT
30140: PUSH
30141: LD_VAR 0 2
30145: NOT
30146: OR
30147: IFFALSE 30151
// exit ;
30149: GO 30347
// case engine of engine_solar :
30151: LD_VAR 0 2
30155: PUSH
30156: LD_INT 2
30158: DOUBLE
30159: EQUAL
30160: IFTRUE 30164
30162: GO 30202
30164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30165: LD_ADDR_VAR 0 3
30169: PUSH
30170: LD_INT 11
30172: PUSH
30173: LD_INT 12
30175: PUSH
30176: LD_INT 13
30178: PUSH
30179: LD_INT 14
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: LD_INT 3
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
30200: GO 30331
30202: LD_INT 1
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30272
30210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_INT 11
30218: PUSH
30219: LD_INT 12
30221: PUSH
30222: LD_INT 13
30224: PUSH
30225: LD_INT 14
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: LD_INT 4
30239: PUSH
30240: LD_INT 5
30242: PUSH
30243: LD_INT 21
30245: PUSH
30246: LD_INT 23
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_INT 24
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: ST_TO_ADDR
30270: GO 30331
30272: LD_INT 3
30274: DOUBLE
30275: EQUAL
30276: IFTRUE 30280
30278: GO 30330
30280: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30281: LD_ADDR_VAR 0 3
30285: PUSH
30286: LD_INT 13
30288: PUSH
30289: LD_INT 14
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: LD_INT 5
30303: PUSH
30304: LD_INT 21
30306: PUSH
30307: LD_INT 22
30309: PUSH
30310: LD_INT 23
30312: PUSH
30313: LD_INT 24
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: ST_TO_ADDR
30328: GO 30331
30330: POP
// result := ( chassis in result ) ;
30331: LD_ADDR_VAR 0 3
30335: PUSH
30336: LD_VAR 0 1
30340: PUSH
30341: LD_VAR 0 3
30345: IN
30346: ST_TO_ADDR
// end ;
30347: LD_VAR 0 3
30351: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30352: LD_INT 0
30354: PPUSH
// if not chassis or not weapon then
30355: LD_VAR 0 1
30359: NOT
30360: PUSH
30361: LD_VAR 0 2
30365: NOT
30366: OR
30367: IFFALSE 30371
// exit ;
30369: GO 31431
// case weapon of us_machine_gun :
30371: LD_VAR 0 2
30375: PUSH
30376: LD_INT 2
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30414
30384: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30385: LD_ADDR_VAR 0 3
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 4
30401: PUSH
30402: LD_INT 5
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
30412: GO 31415
30414: LD_INT 3
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30452
30422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: LD_INT 4
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: ST_TO_ADDR
30450: GO 31415
30452: LD_INT 11
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30490
30460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30461: LD_ADDR_VAR 0 3
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 4
30477: PUSH
30478: LD_INT 5
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
30488: GO 31415
30490: LD_INT 4
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30524
30498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
30522: GO 31415
30524: LD_INT 5
30526: DOUBLE
30527: EQUAL
30528: IFTRUE 30532
30530: GO 30558
30532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30533: LD_ADDR_VAR 0 3
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: LD_INT 5
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
30556: GO 31415
30558: LD_INT 9
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30566
30564: GO 30592
30566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 4
30580: PUSH
30581: LD_INT 5
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 31415
30592: LD_INT 7
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30626
30600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: LD_INT 5
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
30624: GO 31415
30626: LD_INT 12
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30660
30634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: LD_INT 5
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
30658: GO 31415
30660: LD_INT 13
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30694
30668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: LD_INT 3
30679: PUSH
30680: LD_INT 4
30682: PUSH
30683: LD_INT 5
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
30692: GO 31415
30694: LD_INT 14
30696: DOUBLE
30697: EQUAL
30698: IFTRUE 30702
30700: GO 30720
30702: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 4
30710: PUSH
30711: LD_INT 5
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: ST_TO_ADDR
30718: GO 31415
30720: LD_INT 6
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30746
30728: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_INT 4
30736: PUSH
30737: LD_INT 5
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 31415
30746: LD_INT 10
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30772
30754: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30755: LD_ADDR_VAR 0 3
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: LD_INT 5
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31415
30772: LD_INT 22
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30806
30780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 11
30788: PUSH
30789: LD_INT 12
30791: PUSH
30792: LD_INT 13
30794: PUSH
30795: LD_INT 14
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
30804: GO 31415
30806: LD_INT 23
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30840
30814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 11
30822: PUSH
30823: LD_INT 12
30825: PUSH
30826: LD_INT 13
30828: PUSH
30829: LD_INT 14
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
30838: GO 31415
30840: LD_INT 24
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30874
30848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 11
30856: PUSH
30857: LD_INT 12
30859: PUSH
30860: LD_INT 13
30862: PUSH
30863: LD_INT 14
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
30872: GO 31415
30874: LD_INT 30
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 30908
30882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_INT 11
30890: PUSH
30891: LD_INT 12
30893: PUSH
30894: LD_INT 13
30896: PUSH
30897: LD_INT 14
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
30906: GO 31415
30908: LD_INT 25
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30934
30916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30917: LD_ADDR_VAR 0 3
30921: PUSH
30922: LD_INT 13
30924: PUSH
30925: LD_INT 14
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: ST_TO_ADDR
30932: GO 31415
30934: LD_INT 27
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30960
30942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 13
30950: PUSH
30951: LD_INT 14
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: ST_TO_ADDR
30958: GO 31415
30960: LD_INT 92
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30994
30968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_INT 11
30976: PUSH
30977: LD_INT 12
30979: PUSH
30980: LD_INT 13
30982: PUSH
30983: LD_INT 14
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
30992: GO 31415
30994: LD_INT 28
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31020
31002: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 13
31010: PUSH
31011: LD_INT 14
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: ST_TO_ADDR
31018: GO 31415
31020: LD_INT 29
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31046
31028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_INT 13
31036: PUSH
31037: LD_INT 14
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: ST_TO_ADDR
31044: GO 31415
31046: LD_INT 31
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31072
31054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 13
31062: PUSH
31063: LD_INT 14
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31415
31072: LD_INT 26
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31098
31080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 13
31088: PUSH
31089: LD_INT 14
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: ST_TO_ADDR
31096: GO 31415
31098: LD_INT 42
31100: DOUBLE
31101: EQUAL
31102: IFTRUE 31106
31104: GO 31132
31106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31107: LD_ADDR_VAR 0 3
31111: PUSH
31112: LD_INT 21
31114: PUSH
31115: LD_INT 22
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: LD_INT 24
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
31130: GO 31415
31132: LD_INT 43
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31166
31140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 21
31148: PUSH
31149: LD_INT 22
31151: PUSH
31152: LD_INT 23
31154: PUSH
31155: LD_INT 24
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31415
31166: LD_INT 44
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31200
31174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 23
31188: PUSH
31189: LD_INT 24
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
31198: GO 31415
31200: LD_INT 45
31202: DOUBLE
31203: EQUAL
31204: IFTRUE 31208
31206: GO 31234
31208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31209: LD_ADDR_VAR 0 3
31213: PUSH
31214: LD_INT 21
31216: PUSH
31217: LD_INT 22
31219: PUSH
31220: LD_INT 23
31222: PUSH
31223: LD_INT 24
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
31232: GO 31415
31234: LD_INT 49
31236: DOUBLE
31237: EQUAL
31238: IFTRUE 31242
31240: GO 31268
31242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31243: LD_ADDR_VAR 0 3
31247: PUSH
31248: LD_INT 21
31250: PUSH
31251: LD_INT 22
31253: PUSH
31254: LD_INT 23
31256: PUSH
31257: LD_INT 24
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
31266: GO 31415
31268: LD_INT 51
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31302
31276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_INT 21
31284: PUSH
31285: LD_INT 22
31287: PUSH
31288: LD_INT 23
31290: PUSH
31291: LD_INT 24
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: ST_TO_ADDR
31300: GO 31415
31302: LD_INT 52
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31336
31310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_INT 21
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_INT 23
31324: PUSH
31325: LD_INT 24
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
31334: GO 31415
31336: LD_INT 53
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31362
31344: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: LD_INT 23
31352: PUSH
31353: LD_INT 24
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: ST_TO_ADDR
31360: GO 31415
31362: LD_INT 46
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31388
31370: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31371: LD_ADDR_VAR 0 3
31375: PUSH
31376: LD_INT 23
31378: PUSH
31379: LD_INT 24
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: ST_TO_ADDR
31386: GO 31415
31388: LD_INT 47
31390: DOUBLE
31391: EQUAL
31392: IFTRUE 31396
31394: GO 31414
31396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31397: LD_ADDR_VAR 0 3
31401: PUSH
31402: LD_INT 23
31404: PUSH
31405: LD_INT 24
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 31415
31414: POP
// result := ( chassis in result ) ;
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: LD_VAR 0 1
31424: PUSH
31425: LD_VAR 0 3
31429: IN
31430: ST_TO_ADDR
// end ;
31431: LD_VAR 0 3
31435: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31436: LD_INT 0
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
// result := array ;
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_VAR 0 1
31454: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31455: LD_VAR 0 1
31459: NOT
31460: PUSH
31461: LD_VAR 0 2
31465: NOT
31466: OR
31467: PUSH
31468: LD_VAR 0 3
31472: NOT
31473: OR
31474: PUSH
31475: LD_VAR 0 2
31479: PUSH
31480: LD_VAR 0 1
31484: GREATER
31485: OR
31486: PUSH
31487: LD_VAR 0 3
31491: PUSH
31492: LD_VAR 0 1
31496: GREATER
31497: OR
31498: IFFALSE 31502
// exit ;
31500: GO 31798
// if direction then
31502: LD_VAR 0 4
31506: IFFALSE 31570
// begin d := 1 ;
31508: LD_ADDR_VAR 0 9
31512: PUSH
31513: LD_INT 1
31515: ST_TO_ADDR
// if i_from > i_to then
31516: LD_VAR 0 2
31520: PUSH
31521: LD_VAR 0 3
31525: GREATER
31526: IFFALSE 31552
// length := ( array - i_from ) + i_to else
31528: LD_ADDR_VAR 0 11
31532: PUSH
31533: LD_VAR 0 1
31537: PUSH
31538: LD_VAR 0 2
31542: MINUS
31543: PUSH
31544: LD_VAR 0 3
31548: PLUS
31549: ST_TO_ADDR
31550: GO 31568
// length := i_to - i_from ;
31552: LD_ADDR_VAR 0 11
31556: PUSH
31557: LD_VAR 0 3
31561: PUSH
31562: LD_VAR 0 2
31566: MINUS
31567: ST_TO_ADDR
// end else
31568: GO 31631
// begin d := - 1 ;
31570: LD_ADDR_VAR 0 9
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: ST_TO_ADDR
// if i_from > i_to then
31579: LD_VAR 0 2
31583: PUSH
31584: LD_VAR 0 3
31588: GREATER
31589: IFFALSE 31609
// length := i_from - i_to else
31591: LD_ADDR_VAR 0 11
31595: PUSH
31596: LD_VAR 0 2
31600: PUSH
31601: LD_VAR 0 3
31605: MINUS
31606: ST_TO_ADDR
31607: GO 31631
// length := ( array - i_to ) + i_from ;
31609: LD_ADDR_VAR 0 11
31613: PUSH
31614: LD_VAR 0 1
31618: PUSH
31619: LD_VAR 0 3
31623: MINUS
31624: PUSH
31625: LD_VAR 0 2
31629: PLUS
31630: ST_TO_ADDR
// end ; if not length then
31631: LD_VAR 0 11
31635: NOT
31636: IFFALSE 31640
// exit ;
31638: GO 31798
// tmp := array ;
31640: LD_ADDR_VAR 0 10
31644: PUSH
31645: LD_VAR 0 1
31649: ST_TO_ADDR
// for i = 1 to length do
31650: LD_ADDR_VAR 0 6
31654: PUSH
31655: DOUBLE
31656: LD_INT 1
31658: DEC
31659: ST_TO_ADDR
31660: LD_VAR 0 11
31664: PUSH
31665: FOR_TO
31666: IFFALSE 31786
// begin for j = 1 to array do
31668: LD_ADDR_VAR 0 7
31672: PUSH
31673: DOUBLE
31674: LD_INT 1
31676: DEC
31677: ST_TO_ADDR
31678: LD_VAR 0 1
31682: PUSH
31683: FOR_TO
31684: IFFALSE 31772
// begin k := j + d ;
31686: LD_ADDR_VAR 0 8
31690: PUSH
31691: LD_VAR 0 7
31695: PUSH
31696: LD_VAR 0 9
31700: PLUS
31701: ST_TO_ADDR
// if k > array then
31702: LD_VAR 0 8
31706: PUSH
31707: LD_VAR 0 1
31711: GREATER
31712: IFFALSE 31722
// k := 1 ;
31714: LD_ADDR_VAR 0 8
31718: PUSH
31719: LD_INT 1
31721: ST_TO_ADDR
// if not k then
31722: LD_VAR 0 8
31726: NOT
31727: IFFALSE 31739
// k := array ;
31729: LD_ADDR_VAR 0 8
31733: PUSH
31734: LD_VAR 0 1
31738: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31739: LD_ADDR_VAR 0 10
31743: PUSH
31744: LD_VAR 0 10
31748: PPUSH
31749: LD_VAR 0 8
31753: PPUSH
31754: LD_VAR 0 1
31758: PUSH
31759: LD_VAR 0 7
31763: ARRAY
31764: PPUSH
31765: CALL_OW 1
31769: ST_TO_ADDR
// end ;
31770: GO 31683
31772: POP
31773: POP
// array := tmp ;
31774: LD_ADDR_VAR 0 1
31778: PUSH
31779: LD_VAR 0 10
31783: ST_TO_ADDR
// end ;
31784: GO 31665
31786: POP
31787: POP
// result := array ;
31788: LD_ADDR_VAR 0 5
31792: PUSH
31793: LD_VAR 0 1
31797: ST_TO_ADDR
// end ;
31798: LD_VAR 0 5
31802: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
// result := 0 ;
31807: LD_ADDR_VAR 0 3
31811: PUSH
31812: LD_INT 0
31814: ST_TO_ADDR
// if not array or not value in array then
31815: LD_VAR 0 1
31819: NOT
31820: PUSH
31821: LD_VAR 0 2
31825: PUSH
31826: LD_VAR 0 1
31830: IN
31831: NOT
31832: OR
31833: IFFALSE 31837
// exit ;
31835: GO 31891
// for i = 1 to array do
31837: LD_ADDR_VAR 0 4
31841: PUSH
31842: DOUBLE
31843: LD_INT 1
31845: DEC
31846: ST_TO_ADDR
31847: LD_VAR 0 1
31851: PUSH
31852: FOR_TO
31853: IFFALSE 31889
// if value = array [ i ] then
31855: LD_VAR 0 2
31859: PUSH
31860: LD_VAR 0 1
31864: PUSH
31865: LD_VAR 0 4
31869: ARRAY
31870: EQUAL
31871: IFFALSE 31887
// begin result := i ;
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_VAR 0 4
31882: ST_TO_ADDR
// exit ;
31883: POP
31884: POP
31885: GO 31891
// end ;
31887: GO 31852
31889: POP
31890: POP
// end ;
31891: LD_VAR 0 3
31895: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31896: LD_INT 0
31898: PPUSH
// vc_chassis := chassis ;
31899: LD_ADDR_OWVAR 37
31903: PUSH
31904: LD_VAR 0 1
31908: ST_TO_ADDR
// vc_engine := engine ;
31909: LD_ADDR_OWVAR 39
31913: PUSH
31914: LD_VAR 0 2
31918: ST_TO_ADDR
// vc_control := control ;
31919: LD_ADDR_OWVAR 38
31923: PUSH
31924: LD_VAR 0 3
31928: ST_TO_ADDR
// vc_weapon := weapon ;
31929: LD_ADDR_OWVAR 40
31933: PUSH
31934: LD_VAR 0 4
31938: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31939: LD_ADDR_OWVAR 41
31943: PUSH
31944: LD_VAR 0 5
31948: ST_TO_ADDR
// end ;
31949: LD_VAR 0 6
31953: RET
// export function WantPlant ( unit ) ; var task ; begin
31954: LD_INT 0
31956: PPUSH
31957: PPUSH
// result := false ;
31958: LD_ADDR_VAR 0 2
31962: PUSH
31963: LD_INT 0
31965: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31966: LD_ADDR_VAR 0 3
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: CALL_OW 437
31980: ST_TO_ADDR
// if task then
31981: LD_VAR 0 3
31985: IFFALSE 32013
// if task [ 1 ] [ 1 ] = p then
31987: LD_VAR 0 3
31991: PUSH
31992: LD_INT 1
31994: ARRAY
31995: PUSH
31996: LD_INT 1
31998: ARRAY
31999: PUSH
32000: LD_STRING p
32002: EQUAL
32003: IFFALSE 32013
// result := true ;
32005: LD_ADDR_VAR 0 2
32009: PUSH
32010: LD_INT 1
32012: ST_TO_ADDR
// end ;
32013: LD_VAR 0 2
32017: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
// if pos < 1 then
32024: LD_VAR 0 2
32028: PUSH
32029: LD_INT 1
32031: LESS
32032: IFFALSE 32036
// exit ;
32034: GO 32339
// if pos = 1 then
32036: LD_VAR 0 2
32040: PUSH
32041: LD_INT 1
32043: EQUAL
32044: IFFALSE 32077
// result := Replace ( arr , pos [ 1 ] , value ) else
32046: LD_ADDR_VAR 0 4
32050: PUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: LD_VAR 0 2
32060: PUSH
32061: LD_INT 1
32063: ARRAY
32064: PPUSH
32065: LD_VAR 0 3
32069: PPUSH
32070: CALL_OW 1
32074: ST_TO_ADDR
32075: GO 32339
// begin tmp := arr ;
32077: LD_ADDR_VAR 0 6
32081: PUSH
32082: LD_VAR 0 1
32086: ST_TO_ADDR
// s_arr := [ tmp ] ;
32087: LD_ADDR_VAR 0 7
32091: PUSH
32092: LD_VAR 0 6
32096: PUSH
32097: EMPTY
32098: LIST
32099: ST_TO_ADDR
// for i = 1 to pos - 1 do
32100: LD_ADDR_VAR 0 5
32104: PUSH
32105: DOUBLE
32106: LD_INT 1
32108: DEC
32109: ST_TO_ADDR
32110: LD_VAR 0 2
32114: PUSH
32115: LD_INT 1
32117: MINUS
32118: PUSH
32119: FOR_TO
32120: IFFALSE 32165
// begin tmp := tmp [ pos [ i ] ] ;
32122: LD_ADDR_VAR 0 6
32126: PUSH
32127: LD_VAR 0 6
32131: PUSH
32132: LD_VAR 0 2
32136: PUSH
32137: LD_VAR 0 5
32141: ARRAY
32142: ARRAY
32143: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32144: LD_ADDR_VAR 0 7
32148: PUSH
32149: LD_VAR 0 7
32153: PUSH
32154: LD_VAR 0 6
32158: PUSH
32159: EMPTY
32160: LIST
32161: ADD
32162: ST_TO_ADDR
// end ;
32163: GO 32119
32165: POP
32166: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32167: LD_ADDR_VAR 0 6
32171: PUSH
32172: LD_VAR 0 6
32176: PPUSH
32177: LD_VAR 0 2
32181: PUSH
32182: LD_VAR 0 2
32186: ARRAY
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: CALL_OW 1
32197: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32198: LD_ADDR_VAR 0 7
32202: PUSH
32203: LD_VAR 0 7
32207: PPUSH
32208: LD_VAR 0 7
32212: PPUSH
32213: LD_VAR 0 6
32217: PPUSH
32218: CALL_OW 1
32222: ST_TO_ADDR
// for i = s_arr downto 2 do
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: DOUBLE
32229: LD_VAR 0 7
32233: INC
32234: ST_TO_ADDR
32235: LD_INT 2
32237: PUSH
32238: FOR_DOWNTO
32239: IFFALSE 32323
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32241: LD_ADDR_VAR 0 6
32245: PUSH
32246: LD_VAR 0 7
32250: PUSH
32251: LD_VAR 0 5
32255: PUSH
32256: LD_INT 1
32258: MINUS
32259: ARRAY
32260: PPUSH
32261: LD_VAR 0 2
32265: PUSH
32266: LD_VAR 0 5
32270: PUSH
32271: LD_INT 1
32273: MINUS
32274: ARRAY
32275: PPUSH
32276: LD_VAR 0 7
32280: PUSH
32281: LD_VAR 0 5
32285: ARRAY
32286: PPUSH
32287: CALL_OW 1
32291: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32292: LD_ADDR_VAR 0 7
32296: PUSH
32297: LD_VAR 0 7
32301: PPUSH
32302: LD_VAR 0 5
32306: PUSH
32307: LD_INT 1
32309: MINUS
32310: PPUSH
32311: LD_VAR 0 6
32315: PPUSH
32316: CALL_OW 1
32320: ST_TO_ADDR
// end ;
32321: GO 32238
32323: POP
32324: POP
// result := s_arr [ 1 ] ;
32325: LD_ADDR_VAR 0 4
32329: PUSH
32330: LD_VAR 0 7
32334: PUSH
32335: LD_INT 1
32337: ARRAY
32338: ST_TO_ADDR
// end ; end ;
32339: LD_VAR 0 4
32343: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32344: LD_INT 0
32346: PPUSH
32347: PPUSH
// if not list then
32348: LD_VAR 0 1
32352: NOT
32353: IFFALSE 32357
// exit ;
32355: GO 32448
// i := list [ pos1 ] ;
32357: LD_ADDR_VAR 0 5
32361: PUSH
32362: LD_VAR 0 1
32366: PUSH
32367: LD_VAR 0 2
32371: ARRAY
32372: ST_TO_ADDR
// if not i then
32373: LD_VAR 0 5
32377: NOT
32378: IFFALSE 32382
// exit ;
32380: GO 32448
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32382: LD_ADDR_VAR 0 1
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: LD_VAR 0 2
32396: PPUSH
32397: LD_VAR 0 1
32401: PUSH
32402: LD_VAR 0 3
32406: ARRAY
32407: PPUSH
32408: CALL_OW 1
32412: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32413: LD_ADDR_VAR 0 1
32417: PUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: LD_VAR 0 3
32427: PPUSH
32428: LD_VAR 0 5
32432: PPUSH
32433: CALL_OW 1
32437: ST_TO_ADDR
// result := list ;
32438: LD_ADDR_VAR 0 4
32442: PUSH
32443: LD_VAR 0 1
32447: ST_TO_ADDR
// end ;
32448: LD_VAR 0 4
32452: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32453: LD_INT 0
32455: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_VAR 0 1
32465: PPUSH
32466: CALL_OW 250
32470: PPUSH
32471: LD_VAR 0 1
32475: PPUSH
32476: CALL_OW 251
32480: PPUSH
32481: LD_VAR 0 2
32485: PPUSH
32486: LD_VAR 0 3
32490: PPUSH
32491: LD_VAR 0 4
32495: PPUSH
32496: CALL 32506 0 5
32500: ST_TO_ADDR
// end ;
32501: LD_VAR 0 5
32505: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32506: LD_INT 0
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
// if not list then
32512: LD_VAR 0 3
32516: NOT
32517: IFFALSE 32521
// exit ;
32519: GO 32909
// result := [ ] ;
32521: LD_ADDR_VAR 0 6
32525: PUSH
32526: EMPTY
32527: ST_TO_ADDR
// for i in list do
32528: LD_ADDR_VAR 0 7
32532: PUSH
32533: LD_VAR 0 3
32537: PUSH
32538: FOR_IN
32539: IFFALSE 32741
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32541: LD_ADDR_VAR 0 9
32545: PUSH
32546: LD_VAR 0 7
32550: PPUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: CALL_OW 297
32565: ST_TO_ADDR
// if not result then
32566: LD_VAR 0 6
32570: NOT
32571: IFFALSE 32597
// result := [ [ i , tmp ] ] else
32573: LD_ADDR_VAR 0 6
32577: PUSH
32578: LD_VAR 0 7
32582: PUSH
32583: LD_VAR 0 9
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: EMPTY
32593: LIST
32594: ST_TO_ADDR
32595: GO 32739
// begin if result [ result ] [ 2 ] < tmp then
32597: LD_VAR 0 6
32601: PUSH
32602: LD_VAR 0 6
32606: ARRAY
32607: PUSH
32608: LD_INT 2
32610: ARRAY
32611: PUSH
32612: LD_VAR 0 9
32616: LESS
32617: IFFALSE 32659
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32619: LD_ADDR_VAR 0 6
32623: PUSH
32624: LD_VAR 0 6
32628: PPUSH
32629: LD_VAR 0 6
32633: PUSH
32634: LD_INT 1
32636: PLUS
32637: PPUSH
32638: LD_VAR 0 7
32642: PUSH
32643: LD_VAR 0 9
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PPUSH
32652: CALL_OW 2
32656: ST_TO_ADDR
32657: GO 32739
// for j = 1 to result do
32659: LD_ADDR_VAR 0 8
32663: PUSH
32664: DOUBLE
32665: LD_INT 1
32667: DEC
32668: ST_TO_ADDR
32669: LD_VAR 0 6
32673: PUSH
32674: FOR_TO
32675: IFFALSE 32737
// begin if tmp < result [ j ] [ 2 ] then
32677: LD_VAR 0 9
32681: PUSH
32682: LD_VAR 0 6
32686: PUSH
32687: LD_VAR 0 8
32691: ARRAY
32692: PUSH
32693: LD_INT 2
32695: ARRAY
32696: LESS
32697: IFFALSE 32735
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32699: LD_ADDR_VAR 0 6
32703: PUSH
32704: LD_VAR 0 6
32708: PPUSH
32709: LD_VAR 0 8
32713: PPUSH
32714: LD_VAR 0 7
32718: PUSH
32719: LD_VAR 0 9
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 2
32732: ST_TO_ADDR
// break ;
32733: GO 32737
// end ; end ;
32735: GO 32674
32737: POP
32738: POP
// end ; end ;
32739: GO 32538
32741: POP
32742: POP
// if result and not asc then
32743: LD_VAR 0 6
32747: PUSH
32748: LD_VAR 0 4
32752: NOT
32753: AND
32754: IFFALSE 32829
// begin tmp := result ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_VAR 0 6
32765: ST_TO_ADDR
// for i = tmp downto 1 do
32766: LD_ADDR_VAR 0 7
32770: PUSH
32771: DOUBLE
32772: LD_VAR 0 9
32776: INC
32777: ST_TO_ADDR
32778: LD_INT 1
32780: PUSH
32781: FOR_DOWNTO
32782: IFFALSE 32827
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32784: LD_ADDR_VAR 0 6
32788: PUSH
32789: LD_VAR 0 6
32793: PPUSH
32794: LD_VAR 0 9
32798: PUSH
32799: LD_VAR 0 7
32803: MINUS
32804: PUSH
32805: LD_INT 1
32807: PLUS
32808: PPUSH
32809: LD_VAR 0 9
32813: PUSH
32814: LD_VAR 0 7
32818: ARRAY
32819: PPUSH
32820: CALL_OW 1
32824: ST_TO_ADDR
32825: GO 32781
32827: POP
32828: POP
// end ; tmp := [ ] ;
32829: LD_ADDR_VAR 0 9
32833: PUSH
32834: EMPTY
32835: ST_TO_ADDR
// if mode then
32836: LD_VAR 0 5
32840: IFFALSE 32909
// begin for i = 1 to result do
32842: LD_ADDR_VAR 0 7
32846: PUSH
32847: DOUBLE
32848: LD_INT 1
32850: DEC
32851: ST_TO_ADDR
32852: LD_VAR 0 6
32856: PUSH
32857: FOR_TO
32858: IFFALSE 32897
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32860: LD_ADDR_VAR 0 9
32864: PUSH
32865: LD_VAR 0 9
32869: PPUSH
32870: LD_VAR 0 7
32874: PPUSH
32875: LD_VAR 0 6
32879: PUSH
32880: LD_VAR 0 7
32884: ARRAY
32885: PUSH
32886: LD_INT 1
32888: ARRAY
32889: PPUSH
32890: CALL_OW 1
32894: ST_TO_ADDR
32895: GO 32857
32897: POP
32898: POP
// result := tmp ;
32899: LD_ADDR_VAR 0 6
32903: PUSH
32904: LD_VAR 0 9
32908: ST_TO_ADDR
// end ; end ;
32909: LD_VAR 0 6
32913: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32914: LD_INT 0
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: ST_TO_ADDR
// if not x or not y then
32944: LD_VAR 0 2
32948: NOT
32949: PUSH
32950: LD_VAR 0 3
32954: NOT
32955: OR
32956: IFFALSE 32960
// exit ;
32958: GO 34610
// if not range then
32960: LD_VAR 0 4
32964: NOT
32965: IFFALSE 32975
// range := 10 ;
32967: LD_ADDR_VAR 0 4
32971: PUSH
32972: LD_INT 10
32974: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32975: LD_ADDR_VAR 0 8
32979: PUSH
32980: LD_INT 81
32982: PUSH
32983: LD_VAR 0 1
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 92
32994: PUSH
32995: LD_VAR 0 2
32999: PUSH
33000: LD_VAR 0 3
33004: PUSH
33005: LD_VAR 0 4
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 21
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: PPUSH
33038: CALL_OW 69
33042: ST_TO_ADDR
// if not tmp then
33043: LD_VAR 0 8
33047: NOT
33048: IFFALSE 33052
// exit ;
33050: GO 34610
// for i in tmp do
33052: LD_ADDR_VAR 0 6
33056: PUSH
33057: LD_VAR 0 8
33061: PUSH
33062: FOR_IN
33063: IFFALSE 34585
// begin points := [ 0 , 0 , 0 ] ;
33065: LD_ADDR_VAR 0 9
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// bpoints := 1 ;
33084: LD_ADDR_VAR 0 10
33088: PUSH
33089: LD_INT 1
33091: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33092: LD_VAR 0 6
33096: PPUSH
33097: CALL_OW 247
33101: PUSH
33102: LD_INT 1
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33688
33110: POP
// begin if GetClass ( i ) = 1 then
33111: LD_VAR 0 6
33115: PPUSH
33116: CALL_OW 257
33120: PUSH
33121: LD_INT 1
33123: EQUAL
33124: IFFALSE 33145
// points := [ 10 , 5 , 3 ] ;
33126: LD_ADDR_VAR 0 9
33130: PUSH
33131: LD_INT 10
33133: PUSH
33134: LD_INT 5
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33145: LD_VAR 0 6
33149: PPUSH
33150: CALL_OW 257
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 3
33160: PUSH
33161: LD_INT 4
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: IN
33169: IFFALSE 33190
// points := [ 3 , 2 , 1 ] ;
33171: LD_ADDR_VAR 0 9
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33190: LD_VAR 0 6
33194: PPUSH
33195: CALL_OW 257
33199: PUSH
33200: LD_INT 5
33202: EQUAL
33203: IFFALSE 33224
// points := [ 130 , 5 , 2 ] ;
33205: LD_ADDR_VAR 0 9
33209: PUSH
33210: LD_INT 130
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33224: LD_VAR 0 6
33228: PPUSH
33229: CALL_OW 257
33233: PUSH
33234: LD_INT 8
33236: EQUAL
33237: IFFALSE 33258
// points := [ 35 , 35 , 30 ] ;
33239: LD_ADDR_VAR 0 9
33243: PUSH
33244: LD_INT 35
33246: PUSH
33247: LD_INT 35
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: LIST
33257: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33258: LD_VAR 0 6
33262: PPUSH
33263: CALL_OW 257
33267: PUSH
33268: LD_INT 9
33270: EQUAL
33271: IFFALSE 33292
// points := [ 20 , 55 , 40 ] ;
33273: LD_ADDR_VAR 0 9
33277: PUSH
33278: LD_INT 20
33280: PUSH
33281: LD_INT 55
33283: PUSH
33284: LD_INT 40
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33292: LD_VAR 0 6
33296: PPUSH
33297: CALL_OW 257
33301: PUSH
33302: LD_INT 12
33304: PUSH
33305: LD_INT 16
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: IN
33312: IFFALSE 33333
// points := [ 5 , 3 , 2 ] ;
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_INT 5
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33333: LD_VAR 0 6
33337: PPUSH
33338: CALL_OW 257
33342: PUSH
33343: LD_INT 17
33345: EQUAL
33346: IFFALSE 33367
// points := [ 100 , 50 , 75 ] ;
33348: LD_ADDR_VAR 0 9
33352: PUSH
33353: LD_INT 100
33355: PUSH
33356: LD_INT 50
33358: PUSH
33359: LD_INT 75
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33367: LD_VAR 0 6
33371: PPUSH
33372: CALL_OW 257
33376: PUSH
33377: LD_INT 15
33379: EQUAL
33380: IFFALSE 33401
// points := [ 10 , 5 , 3 ] ;
33382: LD_ADDR_VAR 0 9
33386: PUSH
33387: LD_INT 10
33389: PUSH
33390: LD_INT 5
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33401: LD_VAR 0 6
33405: PPUSH
33406: CALL_OW 257
33410: PUSH
33411: LD_INT 14
33413: EQUAL
33414: IFFALSE 33435
// points := [ 10 , 0 , 0 ] ;
33416: LD_ADDR_VAR 0 9
33420: PUSH
33421: LD_INT 10
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33435: LD_VAR 0 6
33439: PPUSH
33440: CALL_OW 257
33444: PUSH
33445: LD_INT 11
33447: EQUAL
33448: IFFALSE 33469
// points := [ 30 , 10 , 5 ] ;
33450: LD_ADDR_VAR 0 9
33454: PUSH
33455: LD_INT 30
33457: PUSH
33458: LD_INT 10
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33469: LD_VAR 0 1
33473: PPUSH
33474: LD_INT 5
33476: PPUSH
33477: CALL_OW 321
33481: PUSH
33482: LD_INT 2
33484: EQUAL
33485: IFFALSE 33502
// bpoints := bpoints * 1.8 ;
33487: LD_ADDR_VAR 0 10
33491: PUSH
33492: LD_VAR 0 10
33496: PUSH
33497: LD_REAL  1.80000000000000E+0000
33500: MUL
33501: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33502: LD_VAR 0 6
33506: PPUSH
33507: CALL_OW 257
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: IN
33530: PUSH
33531: LD_VAR 0 1
33535: PPUSH
33536: LD_INT 51
33538: PPUSH
33539: CALL_OW 321
33543: PUSH
33544: LD_INT 2
33546: EQUAL
33547: AND
33548: IFFALSE 33565
// bpoints := bpoints * 1.2 ;
33550: LD_ADDR_VAR 0 10
33554: PUSH
33555: LD_VAR 0 10
33559: PUSH
33560: LD_REAL  1.20000000000000E+0000
33563: MUL
33564: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33565: LD_VAR 0 6
33569: PPUSH
33570: CALL_OW 257
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 7
33580: PUSH
33581: LD_INT 9
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: IN
33589: PUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: LD_INT 52
33597: PPUSH
33598: CALL_OW 321
33602: PUSH
33603: LD_INT 2
33605: EQUAL
33606: AND
33607: IFFALSE 33624
// bpoints := bpoints * 1.5 ;
33609: LD_ADDR_VAR 0 10
33613: PUSH
33614: LD_VAR 0 10
33618: PUSH
33619: LD_REAL  1.50000000000000E+0000
33622: MUL
33623: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33624: LD_VAR 0 1
33628: PPUSH
33629: LD_INT 66
33631: PPUSH
33632: CALL_OW 321
33636: PUSH
33637: LD_INT 2
33639: EQUAL
33640: IFFALSE 33657
// bpoints := bpoints * 1.1 ;
33642: LD_ADDR_VAR 0 10
33646: PUSH
33647: LD_VAR 0 10
33651: PUSH
33652: LD_REAL  1.10000000000000E+0000
33655: MUL
33656: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33657: LD_ADDR_VAR 0 10
33661: PUSH
33662: LD_VAR 0 10
33666: PUSH
33667: LD_VAR 0 6
33671: PPUSH
33672: LD_INT 1
33674: PPUSH
33675: CALL_OW 259
33679: PUSH
33680: LD_REAL  1.15000000000000E+0000
33683: MUL
33684: MUL
33685: ST_TO_ADDR
// end ; unit_vehicle :
33686: GO 34514
33688: LD_INT 2
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 34502
33696: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 264
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 42
33712: PUSH
33713: LD_INT 24
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: IN
33721: IFFALSE 33742
// points := [ 25 , 5 , 3 ] ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 25
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33742: LD_VAR 0 6
33746: PPUSH
33747: CALL_OW 264
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: LD_INT 43
33757: PUSH
33758: LD_INT 25
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: IN
33766: IFFALSE 33787
// points := [ 40 , 15 , 5 ] ;
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_INT 40
33775: PUSH
33776: LD_INT 15
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33787: LD_VAR 0 6
33791: PPUSH
33792: CALL_OW 264
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 23
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: IN
33807: IFFALSE 33828
// points := [ 7 , 25 , 8 ] ;
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_INT 7
33816: PUSH
33817: LD_INT 25
33819: PUSH
33820: LD_INT 8
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33828: LD_VAR 0 6
33832: PPUSH
33833: CALL_OW 264
33837: PUSH
33838: LD_INT 5
33840: PUSH
33841: LD_INT 27
33843: PUSH
33844: LD_INT 44
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: IN
33852: IFFALSE 33873
// points := [ 14 , 50 , 16 ] ;
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_INT 14
33861: PUSH
33862: LD_INT 50
33864: PUSH
33865: LD_INT 16
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 264
33882: PUSH
33883: LD_INT 6
33885: PUSH
33886: LD_INT 46
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: IN
33893: IFFALSE 33914
// points := [ 32 , 120 , 70 ] ;
33895: LD_ADDR_VAR 0 9
33899: PUSH
33900: LD_INT 32
33902: PUSH
33903: LD_INT 120
33905: PUSH
33906: LD_INT 70
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33914: LD_VAR 0 6
33918: PPUSH
33919: CALL_OW 264
33923: PUSH
33924: LD_INT 7
33926: PUSH
33927: LD_INT 28
33929: PUSH
33930: LD_INT 45
33932: PUSH
33933: LD_INT 92
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: IN
33942: IFFALSE 33963
// points := [ 35 , 20 , 45 ] ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_INT 35
33951: PUSH
33952: LD_INT 20
33954: PUSH
33955: LD_INT 45
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33963: LD_VAR 0 6
33967: PPUSH
33968: CALL_OW 264
33972: PUSH
33973: LD_INT 47
33975: PUSH
33976: EMPTY
33977: LIST
33978: IN
33979: IFFALSE 34000
// points := [ 67 , 45 , 75 ] ;
33981: LD_ADDR_VAR 0 9
33985: PUSH
33986: LD_INT 67
33988: PUSH
33989: LD_INT 45
33991: PUSH
33992: LD_INT 75
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 264
34009: PUSH
34010: LD_INT 26
34012: PUSH
34013: EMPTY
34014: LIST
34015: IN
34016: IFFALSE 34037
// points := [ 120 , 30 , 80 ] ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_INT 120
34025: PUSH
34026: LD_INT 30
34028: PUSH
34029: LD_INT 80
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34037: LD_VAR 0 6
34041: PPUSH
34042: CALL_OW 264
34046: PUSH
34047: LD_INT 22
34049: PUSH
34050: EMPTY
34051: LIST
34052: IN
34053: IFFALSE 34074
// points := [ 40 , 1 , 1 ] ;
34055: LD_ADDR_VAR 0 9
34059: PUSH
34060: LD_INT 40
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34074: LD_VAR 0 6
34078: PPUSH
34079: CALL_OW 264
34083: PUSH
34084: LD_INT 29
34086: PUSH
34087: EMPTY
34088: LIST
34089: IN
34090: IFFALSE 34111
// points := [ 70 , 200 , 400 ] ;
34092: LD_ADDR_VAR 0 9
34096: PUSH
34097: LD_INT 70
34099: PUSH
34100: LD_INT 200
34102: PUSH
34103: LD_INT 400
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34111: LD_VAR 0 6
34115: PPUSH
34116: CALL_OW 264
34120: PUSH
34121: LD_INT 14
34123: PUSH
34124: LD_INT 53
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: IN
34131: IFFALSE 34152
// points := [ 40 , 10 , 20 ] ;
34133: LD_ADDR_VAR 0 9
34137: PUSH
34138: LD_INT 40
34140: PUSH
34141: LD_INT 10
34143: PUSH
34144: LD_INT 20
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34152: LD_VAR 0 6
34156: PPUSH
34157: CALL_OW 264
34161: PUSH
34162: LD_INT 9
34164: PUSH
34165: EMPTY
34166: LIST
34167: IN
34168: IFFALSE 34189
// points := [ 5 , 70 , 20 ] ;
34170: LD_ADDR_VAR 0 9
34174: PUSH
34175: LD_INT 5
34177: PUSH
34178: LD_INT 70
34180: PUSH
34181: LD_INT 20
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34189: LD_VAR 0 6
34193: PPUSH
34194: CALL_OW 264
34198: PUSH
34199: LD_INT 10
34201: PUSH
34202: EMPTY
34203: LIST
34204: IN
34205: IFFALSE 34226
// points := [ 35 , 110 , 70 ] ;
34207: LD_ADDR_VAR 0 9
34211: PUSH
34212: LD_INT 35
34214: PUSH
34215: LD_INT 110
34217: PUSH
34218: LD_INT 70
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34226: LD_VAR 0 6
34230: PPUSH
34231: CALL_OW 265
34235: PUSH
34236: LD_INT 25
34238: EQUAL
34239: IFFALSE 34260
// points := [ 80 , 65 , 100 ] ;
34241: LD_ADDR_VAR 0 9
34245: PUSH
34246: LD_INT 80
34248: PUSH
34249: LD_INT 65
34251: PUSH
34252: LD_INT 100
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34260: LD_VAR 0 6
34264: PPUSH
34265: CALL_OW 263
34269: PUSH
34270: LD_INT 1
34272: EQUAL
34273: IFFALSE 34308
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34275: LD_ADDR_VAR 0 10
34279: PUSH
34280: LD_VAR 0 10
34284: PUSH
34285: LD_VAR 0 6
34289: PPUSH
34290: CALL_OW 311
34294: PPUSH
34295: LD_INT 3
34297: PPUSH
34298: CALL_OW 259
34302: PUSH
34303: LD_INT 4
34305: MUL
34306: MUL
34307: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34308: LD_VAR 0 6
34312: PPUSH
34313: CALL_OW 263
34317: PUSH
34318: LD_INT 2
34320: EQUAL
34321: IFFALSE 34372
// begin j := IsControledBy ( i ) ;
34323: LD_ADDR_VAR 0 7
34327: PUSH
34328: LD_VAR 0 6
34332: PPUSH
34333: CALL_OW 312
34337: ST_TO_ADDR
// if j then
34338: LD_VAR 0 7
34342: IFFALSE 34372
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34344: LD_ADDR_VAR 0 10
34348: PUSH
34349: LD_VAR 0 10
34353: PUSH
34354: LD_VAR 0 7
34358: PPUSH
34359: LD_INT 3
34361: PPUSH
34362: CALL_OW 259
34366: PUSH
34367: LD_INT 3
34369: MUL
34370: MUL
34371: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 264
34381: PUSH
34382: LD_INT 5
34384: PUSH
34385: LD_INT 6
34387: PUSH
34388: LD_INT 46
34390: PUSH
34391: LD_INT 44
34393: PUSH
34394: LD_INT 47
34396: PUSH
34397: LD_INT 45
34399: PUSH
34400: LD_INT 28
34402: PUSH
34403: LD_INT 7
34405: PUSH
34406: LD_INT 27
34408: PUSH
34409: LD_INT 29
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: IN
34424: PUSH
34425: LD_VAR 0 1
34429: PPUSH
34430: LD_INT 52
34432: PPUSH
34433: CALL_OW 321
34437: PUSH
34438: LD_INT 2
34440: EQUAL
34441: AND
34442: IFFALSE 34459
// bpoints := bpoints * 1.2 ;
34444: LD_ADDR_VAR 0 10
34448: PUSH
34449: LD_VAR 0 10
34453: PUSH
34454: LD_REAL  1.20000000000000E+0000
34457: MUL
34458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 264
34468: PUSH
34469: LD_INT 6
34471: PUSH
34472: LD_INT 46
34474: PUSH
34475: LD_INT 47
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: IN
34483: IFFALSE 34500
// bpoints := bpoints * 1.2 ;
34485: LD_ADDR_VAR 0 10
34489: PUSH
34490: LD_VAR 0 10
34494: PUSH
34495: LD_REAL  1.20000000000000E+0000
34498: MUL
34499: ST_TO_ADDR
// end ; unit_building :
34500: GO 34514
34502: LD_INT 3
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34513
34510: POP
// ; end ;
34511: GO 34514
34513: POP
// for j = 1 to 3 do
34514: LD_ADDR_VAR 0 7
34518: PUSH
34519: DOUBLE
34520: LD_INT 1
34522: DEC
34523: ST_TO_ADDR
34524: LD_INT 3
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34581
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34530: LD_ADDR_VAR 0 5
34534: PUSH
34535: LD_VAR 0 5
34539: PPUSH
34540: LD_VAR 0 7
34544: PPUSH
34545: LD_VAR 0 5
34549: PUSH
34550: LD_VAR 0 7
34554: ARRAY
34555: PUSH
34556: LD_VAR 0 9
34560: PUSH
34561: LD_VAR 0 7
34565: ARRAY
34566: PUSH
34567: LD_VAR 0 10
34571: MUL
34572: PLUS
34573: PPUSH
34574: CALL_OW 1
34578: ST_TO_ADDR
34579: GO 34527
34581: POP
34582: POP
// end ;
34583: GO 33062
34585: POP
34586: POP
// result := Replace ( result , 4 , tmp ) ;
34587: LD_ADDR_VAR 0 5
34591: PUSH
34592: LD_VAR 0 5
34596: PPUSH
34597: LD_INT 4
34599: PPUSH
34600: LD_VAR 0 8
34604: PPUSH
34605: CALL_OW 1
34609: ST_TO_ADDR
// end ;
34610: LD_VAR 0 5
34614: RET
// export function DangerAtRange ( unit , range ) ; begin
34615: LD_INT 0
34617: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL_OW 255
34632: PPUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 250
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 251
34652: PPUSH
34653: LD_VAR 0 2
34657: PPUSH
34658: CALL 32914 0 4
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 3
34667: RET
// export function DangerInArea ( side , area ) ; begin
34668: LD_INT 0
34670: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: LD_INT 81
34683: PUSH
34684: LD_VAR 0 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PPUSH
34693: CALL_OW 70
34697: ST_TO_ADDR
// end ;
34698: LD_VAR 0 3
34702: RET
// export function IsExtension ( b ) ; begin
34703: LD_INT 0
34705: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34706: LD_ADDR_VAR 0 2
34710: PUSH
34711: LD_VAR 0 1
34715: PUSH
34716: LD_INT 23
34718: PUSH
34719: LD_INT 20
34721: PUSH
34722: LD_INT 22
34724: PUSH
34725: LD_INT 17
34727: PUSH
34728: LD_INT 24
34730: PUSH
34731: LD_INT 21
34733: PUSH
34734: LD_INT 19
34736: PUSH
34737: LD_INT 16
34739: PUSH
34740: LD_INT 25
34742: PUSH
34743: LD_INT 18
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: IN
34758: ST_TO_ADDR
// end ;
34759: LD_VAR 0 2
34763: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34764: LD_INT 0
34766: PPUSH
34767: PPUSH
34768: PPUSH
// result := [ ] ;
34769: LD_ADDR_VAR 0 4
34773: PUSH
34774: EMPTY
34775: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34776: LD_ADDR_VAR 0 5
34780: PUSH
34781: LD_VAR 0 2
34785: PPUSH
34786: LD_INT 21
34788: PUSH
34789: LD_INT 3
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PPUSH
34796: CALL_OW 70
34800: ST_TO_ADDR
// if not tmp then
34801: LD_VAR 0 5
34805: NOT
34806: IFFALSE 34810
// exit ;
34808: GO 34874
// if checkLink then
34810: LD_VAR 0 3
34814: IFFALSE 34864
// begin for i in tmp do
34816: LD_ADDR_VAR 0 6
34820: PUSH
34821: LD_VAR 0 5
34825: PUSH
34826: FOR_IN
34827: IFFALSE 34862
// if GetBase ( i ) <> base then
34829: LD_VAR 0 6
34833: PPUSH
34834: CALL_OW 274
34838: PUSH
34839: LD_VAR 0 1
34843: NONEQUAL
34844: IFFALSE 34860
// ComLinkToBase ( base , i ) ;
34846: LD_VAR 0 1
34850: PPUSH
34851: LD_VAR 0 6
34855: PPUSH
34856: CALL_OW 169
34860: GO 34826
34862: POP
34863: POP
// end ; result := tmp ;
34864: LD_ADDR_VAR 0 4
34868: PUSH
34869: LD_VAR 0 5
34873: ST_TO_ADDR
// end ;
34874: LD_VAR 0 4
34878: RET
// export function ComComplete ( units , b ) ; var i ; begin
34879: LD_INT 0
34881: PPUSH
34882: PPUSH
// if not units then
34883: LD_VAR 0 1
34887: NOT
34888: IFFALSE 34892
// exit ;
34890: GO 34982
// for i in units do
34892: LD_ADDR_VAR 0 4
34896: PUSH
34897: LD_VAR 0 1
34901: PUSH
34902: FOR_IN
34903: IFFALSE 34980
// if BuildingStatus ( b ) = bs_build then
34905: LD_VAR 0 2
34909: PPUSH
34910: CALL_OW 461
34914: PUSH
34915: LD_INT 1
34917: EQUAL
34918: IFFALSE 34978
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34920: LD_VAR 0 4
34924: PPUSH
34925: LD_STRING h
34927: PUSH
34928: LD_VAR 0 2
34932: PPUSH
34933: CALL_OW 250
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: CALL_OW 251
34947: PUSH
34948: LD_VAR 0 2
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: PPUSH
34974: CALL_OW 446
34978: GO 34902
34980: POP
34981: POP
// end ;
34982: LD_VAR 0 3
34986: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34987: LD_INT 0
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34995: LD_VAR 0 1
34999: NOT
35000: PUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 263
35010: PUSH
35011: LD_INT 2
35013: NONEQUAL
35014: OR
35015: IFFALSE 35019
// exit ;
35017: GO 35335
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35019: LD_ADDR_VAR 0 6
35023: PUSH
35024: LD_INT 22
35026: PUSH
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL_OW 255
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 30
35046: PUSH
35047: LD_INT 36
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 34
35056: PUSH
35057: LD_INT 31
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PPUSH
35073: CALL_OW 69
35077: ST_TO_ADDR
// if not tmp then
35078: LD_VAR 0 6
35082: NOT
35083: IFFALSE 35087
// exit ;
35085: GO 35335
// result := [ ] ;
35087: LD_ADDR_VAR 0 2
35091: PUSH
35092: EMPTY
35093: ST_TO_ADDR
// for i in tmp do
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: LD_VAR 0 6
35103: PUSH
35104: FOR_IN
35105: IFFALSE 35176
// begin t := UnitsInside ( i ) ;
35107: LD_ADDR_VAR 0 4
35111: PUSH
35112: LD_VAR 0 3
35116: PPUSH
35117: CALL_OW 313
35121: ST_TO_ADDR
// if t then
35122: LD_VAR 0 4
35126: IFFALSE 35174
// for j in t do
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: LD_VAR 0 4
35137: PUSH
35138: FOR_IN
35139: IFFALSE 35172
// result := Replace ( result , result + 1 , j ) ;
35141: LD_ADDR_VAR 0 2
35145: PUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_VAR 0 2
35155: PUSH
35156: LD_INT 1
35158: PLUS
35159: PPUSH
35160: LD_VAR 0 7
35164: PPUSH
35165: CALL_OW 1
35169: ST_TO_ADDR
35170: GO 35138
35172: POP
35173: POP
// end ;
35174: GO 35104
35176: POP
35177: POP
// if not result then
35178: LD_VAR 0 2
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 35335
// mech := result [ 1 ] ;
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: LD_VAR 0 2
35196: PUSH
35197: LD_INT 1
35199: ARRAY
35200: ST_TO_ADDR
// if result > 1 then
35201: LD_VAR 0 2
35205: PUSH
35206: LD_INT 1
35208: GREATER
35209: IFFALSE 35321
// begin for i = 2 to result do
35211: LD_ADDR_VAR 0 3
35215: PUSH
35216: DOUBLE
35217: LD_INT 2
35219: DEC
35220: ST_TO_ADDR
35221: LD_VAR 0 2
35225: PUSH
35226: FOR_TO
35227: IFFALSE 35319
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35229: LD_ADDR_VAR 0 4
35233: PUSH
35234: LD_VAR 0 2
35238: PUSH
35239: LD_VAR 0 3
35243: ARRAY
35244: PPUSH
35245: LD_INT 3
35247: PPUSH
35248: CALL_OW 259
35252: PUSH
35253: LD_VAR 0 2
35257: PUSH
35258: LD_VAR 0 3
35262: ARRAY
35263: PPUSH
35264: CALL_OW 432
35268: MINUS
35269: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35270: LD_VAR 0 4
35274: PUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: LD_INT 3
35282: PPUSH
35283: CALL_OW 259
35287: PUSH
35288: LD_VAR 0 5
35292: PPUSH
35293: CALL_OW 432
35297: MINUS
35298: GREATEREQUAL
35299: IFFALSE 35317
// mech := result [ i ] ;
35301: LD_ADDR_VAR 0 5
35305: PUSH
35306: LD_VAR 0 2
35310: PUSH
35311: LD_VAR 0 3
35315: ARRAY
35316: ST_TO_ADDR
// end ;
35317: GO 35226
35319: POP
35320: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35321: LD_VAR 0 1
35325: PPUSH
35326: LD_VAR 0 5
35330: PPUSH
35331: CALL_OW 135
// end ;
35335: LD_VAR 0 2
35339: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35340: LD_INT 0
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
// result := [ ] ;
35355: LD_ADDR_VAR 0 7
35359: PUSH
35360: EMPTY
35361: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 266
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: IN
35382: NOT
35383: IFFALSE 35387
// exit ;
35385: GO 37021
// if name then
35387: LD_VAR 0 3
35391: IFFALSE 35407
// SetBName ( base_dep , name ) ;
35393: LD_VAR 0 1
35397: PPUSH
35398: LD_VAR 0 3
35402: PPUSH
35403: CALL_OW 500
// base := GetBase ( base_dep ) ;
35407: LD_ADDR_VAR 0 15
35411: PUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL_OW 274
35421: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35422: LD_ADDR_VAR 0 16
35426: PUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL_OW 255
35436: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35437: LD_ADDR_VAR 0 17
35441: PUSH
35442: LD_VAR 0 1
35446: PPUSH
35447: CALL_OW 248
35451: ST_TO_ADDR
// if sources then
35452: LD_VAR 0 5
35456: IFFALSE 35503
// for i = 1 to 3 do
35458: LD_ADDR_VAR 0 8
35462: PUSH
35463: DOUBLE
35464: LD_INT 1
35466: DEC
35467: ST_TO_ADDR
35468: LD_INT 3
35470: PUSH
35471: FOR_TO
35472: IFFALSE 35501
// AddResourceType ( base , i , sources [ i ] ) ;
35474: LD_VAR 0 15
35478: PPUSH
35479: LD_VAR 0 8
35483: PPUSH
35484: LD_VAR 0 5
35488: PUSH
35489: LD_VAR 0 8
35493: ARRAY
35494: PPUSH
35495: CALL_OW 276
35499: GO 35471
35501: POP
35502: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35503: LD_ADDR_VAR 0 18
35507: PUSH
35508: LD_VAR 0 15
35512: PPUSH
35513: LD_VAR 0 2
35517: PPUSH
35518: LD_INT 1
35520: PPUSH
35521: CALL 34764 0 3
35525: ST_TO_ADDR
// InitHc ;
35526: CALL_OW 19
// InitUc ;
35530: CALL_OW 18
// uc_side := side ;
35534: LD_ADDR_OWVAR 20
35538: PUSH
35539: LD_VAR 0 16
35543: ST_TO_ADDR
// uc_nation := nation ;
35544: LD_ADDR_OWVAR 21
35548: PUSH
35549: LD_VAR 0 17
35553: ST_TO_ADDR
// if buildings then
35554: LD_VAR 0 18
35558: IFFALSE 36880
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35560: LD_ADDR_VAR 0 19
35564: PUSH
35565: LD_VAR 0 18
35569: PPUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 30
35575: PUSH
35576: LD_INT 29
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 30
35585: PUSH
35586: LD_INT 30
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: PPUSH
35598: CALL_OW 72
35602: ST_TO_ADDR
// if tmp then
35603: LD_VAR 0 19
35607: IFFALSE 35655
// for i in tmp do
35609: LD_ADDR_VAR 0 8
35613: PUSH
35614: LD_VAR 0 19
35618: PUSH
35619: FOR_IN
35620: IFFALSE 35653
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35622: LD_VAR 0 8
35626: PPUSH
35627: CALL_OW 250
35631: PPUSH
35632: LD_VAR 0 8
35636: PPUSH
35637: CALL_OW 251
35641: PPUSH
35642: LD_VAR 0 16
35646: PPUSH
35647: CALL_OW 441
35651: GO 35619
35653: POP
35654: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35655: LD_VAR 0 18
35659: PPUSH
35660: LD_INT 2
35662: PUSH
35663: LD_INT 30
35665: PUSH
35666: LD_INT 32
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 30
35675: PUSH
35676: LD_INT 33
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 72
35692: IFFALSE 35780
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35694: LD_ADDR_VAR 0 8
35698: PUSH
35699: LD_VAR 0 18
35703: PPUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 30
35709: PUSH
35710: LD_INT 32
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: LD_INT 33
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: PPUSH
35732: CALL_OW 72
35736: PUSH
35737: FOR_IN
35738: IFFALSE 35778
// begin if not GetBWeapon ( i ) then
35740: LD_VAR 0 8
35744: PPUSH
35745: CALL_OW 269
35749: NOT
35750: IFFALSE 35776
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35752: LD_VAR 0 8
35756: PPUSH
35757: LD_VAR 0 8
35761: PPUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL 37026 0 2
35771: PPUSH
35772: CALL_OW 431
// end ;
35776: GO 35737
35778: POP
35779: POP
// end ; for i = 1 to personel do
35780: LD_ADDR_VAR 0 8
35784: PUSH
35785: DOUBLE
35786: LD_INT 1
35788: DEC
35789: ST_TO_ADDR
35790: LD_VAR 0 6
35794: PUSH
35795: FOR_TO
35796: IFFALSE 36860
// begin if i > 4 then
35798: LD_VAR 0 8
35802: PUSH
35803: LD_INT 4
35805: GREATER
35806: IFFALSE 35810
// break ;
35808: GO 36860
// case i of 1 :
35810: LD_VAR 0 8
35814: PUSH
35815: LD_INT 1
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35903
35823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35824: LD_ADDR_VAR 0 12
35828: PUSH
35829: LD_VAR 0 18
35833: PPUSH
35834: LD_INT 22
35836: PUSH
35837: LD_VAR 0 16
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 58
35848: PUSH
35849: EMPTY
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 30
35857: PUSH
35858: LD_INT 32
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 30
35867: PUSH
35868: LD_INT 4
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 30
35877: PUSH
35878: LD_INT 5
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PPUSH
35896: CALL_OW 72
35900: ST_TO_ADDR
35901: GO 36125
35903: LD_INT 2
35905: DOUBLE
35906: EQUAL
35907: IFTRUE 35911
35909: GO 35973
35911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35912: LD_ADDR_VAR 0 12
35916: PUSH
35917: LD_VAR 0 18
35921: PPUSH
35922: LD_INT 22
35924: PUSH
35925: LD_VAR 0 16
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: LD_INT 30
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 30
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PPUSH
35966: CALL_OW 72
35970: ST_TO_ADDR
35971: GO 36125
35973: LD_INT 3
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 36043
35981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35982: LD_ADDR_VAR 0 12
35986: PUSH
35987: LD_VAR 0 18
35991: PPUSH
35992: LD_INT 22
35994: PUSH
35995: LD_VAR 0 16
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 30
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 30
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL_OW 72
36040: ST_TO_ADDR
36041: GO 36125
36043: LD_INT 4
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36051
36049: GO 36124
36051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36052: LD_ADDR_VAR 0 12
36056: PUSH
36057: LD_VAR 0 18
36061: PPUSH
36062: LD_INT 22
36064: PUSH
36065: LD_VAR 0 16
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: LD_INT 30
36079: PUSH
36080: LD_INT 6
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 30
36089: PUSH
36090: LD_INT 7
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 30
36099: PUSH
36100: LD_INT 8
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PPUSH
36117: CALL_OW 72
36121: ST_TO_ADDR
36122: GO 36125
36124: POP
// if i = 1 then
36125: LD_VAR 0 8
36129: PUSH
36130: LD_INT 1
36132: EQUAL
36133: IFFALSE 36244
// begin tmp := [ ] ;
36135: LD_ADDR_VAR 0 19
36139: PUSH
36140: EMPTY
36141: ST_TO_ADDR
// for j in f do
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_VAR 0 12
36151: PUSH
36152: FOR_IN
36153: IFFALSE 36226
// if GetBType ( j ) = b_bunker then
36155: LD_VAR 0 9
36159: PPUSH
36160: CALL_OW 266
36164: PUSH
36165: LD_INT 32
36167: EQUAL
36168: IFFALSE 36195
// tmp := Insert ( tmp , 1 , j ) else
36170: LD_ADDR_VAR 0 19
36174: PUSH
36175: LD_VAR 0 19
36179: PPUSH
36180: LD_INT 1
36182: PPUSH
36183: LD_VAR 0 9
36187: PPUSH
36188: CALL_OW 2
36192: ST_TO_ADDR
36193: GO 36224
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36195: LD_ADDR_VAR 0 19
36199: PUSH
36200: LD_VAR 0 19
36204: PPUSH
36205: LD_VAR 0 19
36209: PUSH
36210: LD_INT 1
36212: PLUS
36213: PPUSH
36214: LD_VAR 0 9
36218: PPUSH
36219: CALL_OW 2
36223: ST_TO_ADDR
36224: GO 36152
36226: POP
36227: POP
// if tmp then
36228: LD_VAR 0 19
36232: IFFALSE 36244
// f := tmp ;
36234: LD_ADDR_VAR 0 12
36238: PUSH
36239: LD_VAR 0 19
36243: ST_TO_ADDR
// end ; x := personel [ i ] ;
36244: LD_ADDR_VAR 0 13
36248: PUSH
36249: LD_VAR 0 6
36253: PUSH
36254: LD_VAR 0 8
36258: ARRAY
36259: ST_TO_ADDR
// if x = - 1 then
36260: LD_VAR 0 13
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: EQUAL
36269: IFFALSE 36478
// begin for j in f do
36271: LD_ADDR_VAR 0 9
36275: PUSH
36276: LD_VAR 0 12
36280: PUSH
36281: FOR_IN
36282: IFFALSE 36474
// repeat InitHc ;
36284: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36288: LD_VAR 0 9
36292: PPUSH
36293: CALL_OW 266
36297: PUSH
36298: LD_INT 5
36300: EQUAL
36301: IFFALSE 36371
// begin if UnitsInside ( j ) < 3 then
36303: LD_VAR 0 9
36307: PPUSH
36308: CALL_OW 313
36312: PUSH
36313: LD_INT 3
36315: LESS
36316: IFFALSE 36352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36318: LD_INT 0
36320: PPUSH
36321: LD_INT 5
36323: PUSH
36324: LD_INT 8
36326: PUSH
36327: LD_INT 9
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: LD_VAR 0 17
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 4
36345: PPUSH
36346: CALL_OW 380
36350: GO 36369
// PrepareHuman ( false , i , skill ) ;
36352: LD_INT 0
36354: PPUSH
36355: LD_VAR 0 8
36359: PPUSH
36360: LD_VAR 0 4
36364: PPUSH
36365: CALL_OW 380
// end else
36369: GO 36388
// PrepareHuman ( false , i , skill ) ;
36371: LD_INT 0
36373: PPUSH
36374: LD_VAR 0 8
36378: PPUSH
36379: LD_VAR 0 4
36383: PPUSH
36384: CALL_OW 380
// un := CreateHuman ;
36388: LD_ADDR_VAR 0 14
36392: PUSH
36393: CALL_OW 44
36397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36398: LD_ADDR_VAR 0 7
36402: PUSH
36403: LD_VAR 0 7
36407: PPUSH
36408: LD_INT 1
36410: PPUSH
36411: LD_VAR 0 14
36415: PPUSH
36416: CALL_OW 2
36420: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36421: LD_VAR 0 14
36425: PPUSH
36426: LD_VAR 0 9
36430: PPUSH
36431: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36435: LD_VAR 0 9
36439: PPUSH
36440: CALL_OW 313
36444: PUSH
36445: LD_INT 6
36447: EQUAL
36448: PUSH
36449: LD_VAR 0 9
36453: PPUSH
36454: CALL_OW 266
36458: PUSH
36459: LD_INT 32
36461: PUSH
36462: LD_INT 31
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: IN
36469: OR
36470: IFFALSE 36284
36472: GO 36281
36474: POP
36475: POP
// end else
36476: GO 36858
// for j = 1 to x do
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: DOUBLE
36484: LD_INT 1
36486: DEC
36487: ST_TO_ADDR
36488: LD_VAR 0 13
36492: PUSH
36493: FOR_TO
36494: IFFALSE 36856
// begin InitHc ;
36496: CALL_OW 19
// if not f then
36500: LD_VAR 0 12
36504: NOT
36505: IFFALSE 36594
// begin PrepareHuman ( false , i , skill ) ;
36507: LD_INT 0
36509: PPUSH
36510: LD_VAR 0 8
36514: PPUSH
36515: LD_VAR 0 4
36519: PPUSH
36520: CALL_OW 380
// un := CreateHuman ;
36524: LD_ADDR_VAR 0 14
36528: PUSH
36529: CALL_OW 44
36533: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: LD_VAR 0 7
36543: PPUSH
36544: LD_INT 1
36546: PPUSH
36547: LD_VAR 0 14
36551: PPUSH
36552: CALL_OW 2
36556: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36557: LD_VAR 0 14
36561: PPUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL_OW 250
36571: PPUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 251
36581: PPUSH
36582: LD_INT 10
36584: PPUSH
36585: LD_INT 0
36587: PPUSH
36588: CALL_OW 50
// continue ;
36592: GO 36493
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36594: LD_VAR 0 12
36598: PUSH
36599: LD_INT 1
36601: ARRAY
36602: PPUSH
36603: CALL_OW 313
36607: PUSH
36608: LD_VAR 0 12
36612: PUSH
36613: LD_INT 1
36615: ARRAY
36616: PPUSH
36617: CALL_OW 266
36621: PUSH
36622: LD_INT 32
36624: PUSH
36625: LD_INT 31
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: IN
36632: AND
36633: PUSH
36634: LD_VAR 0 12
36638: PUSH
36639: LD_INT 1
36641: ARRAY
36642: PPUSH
36643: CALL_OW 313
36647: PUSH
36648: LD_INT 6
36650: EQUAL
36651: OR
36652: IFFALSE 36672
// f := Delete ( f , 1 ) ;
36654: LD_ADDR_VAR 0 12
36658: PUSH
36659: LD_VAR 0 12
36663: PPUSH
36664: LD_INT 1
36666: PPUSH
36667: CALL_OW 3
36671: ST_TO_ADDR
// if not f then
36672: LD_VAR 0 12
36676: NOT
36677: IFFALSE 36695
// begin x := x + 2 ;
36679: LD_ADDR_VAR 0 13
36683: PUSH
36684: LD_VAR 0 13
36688: PUSH
36689: LD_INT 2
36691: PLUS
36692: ST_TO_ADDR
// continue ;
36693: GO 36493
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36695: LD_VAR 0 12
36699: PUSH
36700: LD_INT 1
36702: ARRAY
36703: PPUSH
36704: CALL_OW 266
36708: PUSH
36709: LD_INT 5
36711: EQUAL
36712: IFFALSE 36786
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36714: LD_VAR 0 12
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PPUSH
36723: CALL_OW 313
36727: PUSH
36728: LD_INT 3
36730: LESS
36731: IFFALSE 36767
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36733: LD_INT 0
36735: PPUSH
36736: LD_INT 5
36738: PUSH
36739: LD_INT 8
36741: PUSH
36742: LD_INT 9
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: PUSH
36750: LD_VAR 0 17
36754: ARRAY
36755: PPUSH
36756: LD_VAR 0 4
36760: PPUSH
36761: CALL_OW 380
36765: GO 36784
// PrepareHuman ( false , i , skill ) ;
36767: LD_INT 0
36769: PPUSH
36770: LD_VAR 0 8
36774: PPUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: CALL_OW 380
// end else
36784: GO 36803
// PrepareHuman ( false , i , skill ) ;
36786: LD_INT 0
36788: PPUSH
36789: LD_VAR 0 8
36793: PPUSH
36794: LD_VAR 0 4
36798: PPUSH
36799: CALL_OW 380
// un := CreateHuman ;
36803: LD_ADDR_VAR 0 14
36807: PUSH
36808: CALL_OW 44
36812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36813: LD_ADDR_VAR 0 7
36817: PUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_INT 1
36825: PPUSH
36826: LD_VAR 0 14
36830: PPUSH
36831: CALL_OW 2
36835: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36836: LD_VAR 0 14
36840: PPUSH
36841: LD_VAR 0 12
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: PPUSH
36850: CALL_OW 52
// end ;
36854: GO 36493
36856: POP
36857: POP
// end ;
36858: GO 35795
36860: POP
36861: POP
// result := result ^ buildings ;
36862: LD_ADDR_VAR 0 7
36866: PUSH
36867: LD_VAR 0 7
36871: PUSH
36872: LD_VAR 0 18
36876: ADD
36877: ST_TO_ADDR
// end else
36878: GO 37021
// begin for i = 1 to personel do
36880: LD_ADDR_VAR 0 8
36884: PUSH
36885: DOUBLE
36886: LD_INT 1
36888: DEC
36889: ST_TO_ADDR
36890: LD_VAR 0 6
36894: PUSH
36895: FOR_TO
36896: IFFALSE 37019
// begin if i > 4 then
36898: LD_VAR 0 8
36902: PUSH
36903: LD_INT 4
36905: GREATER
36906: IFFALSE 36910
// break ;
36908: GO 37019
// x := personel [ i ] ;
36910: LD_ADDR_VAR 0 13
36914: PUSH
36915: LD_VAR 0 6
36919: PUSH
36920: LD_VAR 0 8
36924: ARRAY
36925: ST_TO_ADDR
// if x = - 1 then
36926: LD_VAR 0 13
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: EQUAL
36935: IFFALSE 36939
// continue ;
36937: GO 36895
// PrepareHuman ( false , i , skill ) ;
36939: LD_INT 0
36941: PPUSH
36942: LD_VAR 0 8
36946: PPUSH
36947: LD_VAR 0 4
36951: PPUSH
36952: CALL_OW 380
// un := CreateHuman ;
36956: LD_ADDR_VAR 0 14
36960: PUSH
36961: CALL_OW 44
36965: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36966: LD_VAR 0 14
36970: PPUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 250
36980: PPUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 251
36990: PPUSH
36991: LD_INT 10
36993: PPUSH
36994: LD_INT 0
36996: PPUSH
36997: CALL_OW 50
// result := result ^ un ;
37001: LD_ADDR_VAR 0 7
37005: PUSH
37006: LD_VAR 0 7
37010: PUSH
37011: LD_VAR 0 14
37015: ADD
37016: ST_TO_ADDR
// end ;
37017: GO 36895
37019: POP
37020: POP
// end ; end ;
37021: LD_VAR 0 7
37025: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37026: LD_INT 0
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
// result := false ;
37044: LD_ADDR_VAR 0 3
37048: PUSH
37049: LD_INT 0
37051: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37052: LD_VAR 0 1
37056: NOT
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 266
37067: PUSH
37068: LD_INT 32
37070: PUSH
37071: LD_INT 33
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: IN
37078: NOT
37079: OR
37080: IFFALSE 37084
// exit ;
37082: GO 38193
// nat := GetNation ( tower ) ;
37084: LD_ADDR_VAR 0 12
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 248
37098: ST_TO_ADDR
// side := GetSide ( tower ) ;
37099: LD_ADDR_VAR 0 16
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 255
37113: ST_TO_ADDR
// x := GetX ( tower ) ;
37114: LD_ADDR_VAR 0 10
37118: PUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: CALL_OW 250
37128: ST_TO_ADDR
// y := GetY ( tower ) ;
37129: LD_ADDR_VAR 0 11
37133: PUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 251
37143: ST_TO_ADDR
// if not x or not y then
37144: LD_VAR 0 10
37148: NOT
37149: PUSH
37150: LD_VAR 0 11
37154: NOT
37155: OR
37156: IFFALSE 37160
// exit ;
37158: GO 38193
// weapon := 0 ;
37160: LD_ADDR_VAR 0 18
37164: PUSH
37165: LD_INT 0
37167: ST_TO_ADDR
// fac_list := [ ] ;
37168: LD_ADDR_VAR 0 17
37172: PUSH
37173: EMPTY
37174: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37175: LD_ADDR_VAR 0 6
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 274
37189: PPUSH
37190: LD_VAR 0 2
37194: PPUSH
37195: LD_INT 0
37197: PPUSH
37198: CALL 34764 0 3
37202: PPUSH
37203: LD_INT 30
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PPUSH
37213: CALL_OW 72
37217: ST_TO_ADDR
// if not factories then
37218: LD_VAR 0 6
37222: NOT
37223: IFFALSE 37227
// exit ;
37225: GO 38193
// for i in factories do
37227: LD_ADDR_VAR 0 8
37231: PUSH
37232: LD_VAR 0 6
37236: PUSH
37237: FOR_IN
37238: IFFALSE 37263
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37240: LD_ADDR_VAR 0 17
37244: PUSH
37245: LD_VAR 0 17
37249: PUSH
37250: LD_VAR 0 8
37254: PPUSH
37255: CALL_OW 478
37259: UNION
37260: ST_TO_ADDR
37261: GO 37237
37263: POP
37264: POP
// if not fac_list then
37265: LD_VAR 0 17
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 38193
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37274: LD_ADDR_VAR 0 5
37278: PUSH
37279: LD_INT 4
37281: PUSH
37282: LD_INT 5
37284: PUSH
37285: LD_INT 9
37287: PUSH
37288: LD_INT 10
37290: PUSH
37291: LD_INT 6
37293: PUSH
37294: LD_INT 7
37296: PUSH
37297: LD_INT 11
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 27
37311: PUSH
37312: LD_INT 28
37314: PUSH
37315: LD_INT 26
37317: PUSH
37318: LD_INT 30
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 43
37329: PUSH
37330: LD_INT 44
37332: PUSH
37333: LD_INT 46
37335: PUSH
37336: LD_INT 45
37338: PUSH
37339: LD_INT 47
37341: PUSH
37342: LD_INT 49
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: LD_VAR 0 12
37362: ARRAY
37363: ST_TO_ADDR
// list := list isect fac_list ;
37364: LD_ADDR_VAR 0 5
37368: PUSH
37369: LD_VAR 0 5
37373: PUSH
37374: LD_VAR 0 17
37378: ISECT
37379: ST_TO_ADDR
// if not list then
37380: LD_VAR 0 5
37384: NOT
37385: IFFALSE 37389
// exit ;
37387: GO 38193
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37389: LD_VAR 0 12
37393: PUSH
37394: LD_INT 3
37396: EQUAL
37397: PUSH
37398: LD_INT 49
37400: PUSH
37401: LD_VAR 0 5
37405: IN
37406: AND
37407: PUSH
37408: LD_INT 31
37410: PPUSH
37411: LD_VAR 0 16
37415: PPUSH
37416: CALL_OW 321
37420: PUSH
37421: LD_INT 2
37423: EQUAL
37424: AND
37425: IFFALSE 37485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37427: LD_INT 22
37429: PUSH
37430: LD_VAR 0 16
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 35
37441: PUSH
37442: LD_INT 49
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 91
37451: PUSH
37452: LD_VAR 0 1
37456: PUSH
37457: LD_INT 10
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: PPUSH
37470: CALL_OW 69
37474: NOT
37475: IFFALSE 37485
// weapon := ru_time_lapser ;
37477: LD_ADDR_VAR 0 18
37481: PUSH
37482: LD_INT 49
37484: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37485: LD_VAR 0 12
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: IN
37500: PUSH
37501: LD_INT 11
37503: PUSH
37504: LD_VAR 0 5
37508: IN
37509: PUSH
37510: LD_INT 30
37512: PUSH
37513: LD_VAR 0 5
37517: IN
37518: OR
37519: AND
37520: PUSH
37521: LD_INT 6
37523: PPUSH
37524: LD_VAR 0 16
37528: PPUSH
37529: CALL_OW 321
37533: PUSH
37534: LD_INT 2
37536: EQUAL
37537: AND
37538: IFFALSE 37703
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37540: LD_INT 22
37542: PUSH
37543: LD_VAR 0 16
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: LD_INT 35
37557: PUSH
37558: LD_INT 11
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 35
37567: PUSH
37568: LD_INT 30
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 91
37582: PUSH
37583: LD_VAR 0 1
37587: PUSH
37588: LD_INT 18
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: PPUSH
37601: CALL_OW 69
37605: NOT
37606: PUSH
37607: LD_INT 22
37609: PUSH
37610: LD_VAR 0 16
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 30
37624: PUSH
37625: LD_INT 32
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 30
37634: PUSH
37635: LD_INT 33
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 91
37649: PUSH
37650: LD_VAR 0 1
37654: PUSH
37655: LD_INT 12
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: PPUSH
37671: CALL_OW 69
37675: PUSH
37676: LD_INT 2
37678: GREATER
37679: AND
37680: IFFALSE 37703
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37682: LD_ADDR_VAR 0 18
37686: PUSH
37687: LD_INT 11
37689: PUSH
37690: LD_INT 30
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_VAR 0 12
37701: ARRAY
37702: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37703: LD_VAR 0 18
37707: NOT
37708: PUSH
37709: LD_INT 40
37711: PPUSH
37712: LD_VAR 0 16
37716: PPUSH
37717: CALL_OW 321
37721: PUSH
37722: LD_INT 2
37724: EQUAL
37725: AND
37726: PUSH
37727: LD_INT 7
37729: PUSH
37730: LD_VAR 0 5
37734: IN
37735: PUSH
37736: LD_INT 28
37738: PUSH
37739: LD_VAR 0 5
37743: IN
37744: OR
37745: PUSH
37746: LD_INT 45
37748: PUSH
37749: LD_VAR 0 5
37753: IN
37754: OR
37755: AND
37756: IFFALSE 38010
// begin hex := GetHexInfo ( x , y ) ;
37758: LD_ADDR_VAR 0 4
37762: PUSH
37763: LD_VAR 0 10
37767: PPUSH
37768: LD_VAR 0 11
37772: PPUSH
37773: CALL_OW 546
37777: ST_TO_ADDR
// if hex [ 1 ] then
37778: LD_VAR 0 4
37782: PUSH
37783: LD_INT 1
37785: ARRAY
37786: IFFALSE 37790
// exit ;
37788: GO 38193
// height := hex [ 2 ] ;
37790: LD_ADDR_VAR 0 15
37794: PUSH
37795: LD_VAR 0 4
37799: PUSH
37800: LD_INT 2
37802: ARRAY
37803: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37804: LD_ADDR_VAR 0 14
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 5
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
// for i in tmp do
37827: LD_ADDR_VAR 0 8
37831: PUSH
37832: LD_VAR 0 14
37836: PUSH
37837: FOR_IN
37838: IFFALSE 38008
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37840: LD_ADDR_VAR 0 9
37844: PUSH
37845: LD_VAR 0 10
37849: PPUSH
37850: LD_VAR 0 8
37854: PPUSH
37855: LD_INT 5
37857: PPUSH
37858: CALL_OW 272
37862: PUSH
37863: LD_VAR 0 11
37867: PPUSH
37868: LD_VAR 0 8
37872: PPUSH
37873: LD_INT 5
37875: PPUSH
37876: CALL_OW 273
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37885: LD_VAR 0 9
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: LD_VAR 0 9
37898: PUSH
37899: LD_INT 2
37901: ARRAY
37902: PPUSH
37903: CALL_OW 488
37907: IFFALSE 38006
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37909: LD_ADDR_VAR 0 4
37913: PUSH
37914: LD_VAR 0 9
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: PPUSH
37923: LD_VAR 0 9
37927: PUSH
37928: LD_INT 2
37930: ARRAY
37931: PPUSH
37932: CALL_OW 546
37936: ST_TO_ADDR
// if hex [ 1 ] then
37937: LD_VAR 0 4
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: IFFALSE 37949
// continue ;
37947: GO 37837
// h := hex [ 2 ] ;
37949: LD_ADDR_VAR 0 13
37953: PUSH
37954: LD_VAR 0 4
37958: PUSH
37959: LD_INT 2
37961: ARRAY
37962: ST_TO_ADDR
// if h + 7 < height then
37963: LD_VAR 0 13
37967: PUSH
37968: LD_INT 7
37970: PLUS
37971: PUSH
37972: LD_VAR 0 15
37976: LESS
37977: IFFALSE 38006
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37979: LD_ADDR_VAR 0 18
37983: PUSH
37984: LD_INT 7
37986: PUSH
37987: LD_INT 28
37989: PUSH
37990: LD_INT 45
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: PUSH
37998: LD_VAR 0 12
38002: ARRAY
38003: ST_TO_ADDR
// break ;
38004: GO 38008
// end ; end ; end ;
38006: GO 37837
38008: POP
38009: POP
// end ; if not weapon then
38010: LD_VAR 0 18
38014: NOT
38015: IFFALSE 38075
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38017: LD_ADDR_VAR 0 5
38021: PUSH
38022: LD_VAR 0 5
38026: PUSH
38027: LD_INT 11
38029: PUSH
38030: LD_INT 30
38032: PUSH
38033: LD_INT 49
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: DIFF
38041: ST_TO_ADDR
// if not list then
38042: LD_VAR 0 5
38046: NOT
38047: IFFALSE 38051
// exit ;
38049: GO 38193
// weapon := list [ rand ( 1 , list ) ] ;
38051: LD_ADDR_VAR 0 18
38055: PUSH
38056: LD_VAR 0 5
38060: PUSH
38061: LD_INT 1
38063: PPUSH
38064: LD_VAR 0 5
38068: PPUSH
38069: CALL_OW 12
38073: ARRAY
38074: ST_TO_ADDR
// end ; if weapon then
38075: LD_VAR 0 18
38079: IFFALSE 38193
// begin tmp := CostOfWeapon ( weapon ) ;
38081: LD_ADDR_VAR 0 14
38085: PUSH
38086: LD_VAR 0 18
38090: PPUSH
38091: CALL_OW 451
38095: ST_TO_ADDR
// j := GetBase ( tower ) ;
38096: LD_ADDR_VAR 0 9
38100: PUSH
38101: LD_VAR 0 1
38105: PPUSH
38106: CALL_OW 274
38110: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38111: LD_VAR 0 9
38115: PPUSH
38116: LD_INT 1
38118: PPUSH
38119: CALL_OW 275
38123: PUSH
38124: LD_VAR 0 14
38128: PUSH
38129: LD_INT 1
38131: ARRAY
38132: GREATEREQUAL
38133: PUSH
38134: LD_VAR 0 9
38138: PPUSH
38139: LD_INT 2
38141: PPUSH
38142: CALL_OW 275
38146: PUSH
38147: LD_VAR 0 14
38151: PUSH
38152: LD_INT 2
38154: ARRAY
38155: GREATEREQUAL
38156: AND
38157: PUSH
38158: LD_VAR 0 9
38162: PPUSH
38163: LD_INT 3
38165: PPUSH
38166: CALL_OW 275
38170: PUSH
38171: LD_VAR 0 14
38175: PUSH
38176: LD_INT 3
38178: ARRAY
38179: GREATEREQUAL
38180: AND
38181: IFFALSE 38193
// result := weapon ;
38183: LD_ADDR_VAR 0 3
38187: PUSH
38188: LD_VAR 0 18
38192: ST_TO_ADDR
// end ; end ;
38193: LD_VAR 0 3
38197: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38198: LD_INT 0
38200: PPUSH
38201: PPUSH
// result := true ;
38202: LD_ADDR_VAR 0 3
38206: PUSH
38207: LD_INT 1
38209: ST_TO_ADDR
// if array1 = array2 then
38210: LD_VAR 0 1
38214: PUSH
38215: LD_VAR 0 2
38219: EQUAL
38220: IFFALSE 38280
// begin for i = 1 to array1 do
38222: LD_ADDR_VAR 0 4
38226: PUSH
38227: DOUBLE
38228: LD_INT 1
38230: DEC
38231: ST_TO_ADDR
38232: LD_VAR 0 1
38236: PUSH
38237: FOR_TO
38238: IFFALSE 38276
// if array1 [ i ] <> array2 [ i ] then
38240: LD_VAR 0 1
38244: PUSH
38245: LD_VAR 0 4
38249: ARRAY
38250: PUSH
38251: LD_VAR 0 2
38255: PUSH
38256: LD_VAR 0 4
38260: ARRAY
38261: NONEQUAL
38262: IFFALSE 38274
// begin result := false ;
38264: LD_ADDR_VAR 0 3
38268: PUSH
38269: LD_INT 0
38271: ST_TO_ADDR
// break ;
38272: GO 38276
// end ;
38274: GO 38237
38276: POP
38277: POP
// end else
38278: GO 38288
// result := false ;
38280: LD_ADDR_VAR 0 3
38284: PUSH
38285: LD_INT 0
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 3
38292: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38293: LD_INT 0
38295: PPUSH
38296: PPUSH
// if not array1 or not array2 then
38297: LD_VAR 0 1
38301: NOT
38302: PUSH
38303: LD_VAR 0 2
38307: NOT
38308: OR
38309: IFFALSE 38313
// exit ;
38311: GO 38377
// result := true ;
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 1
38320: ST_TO_ADDR
// for i = 1 to array1 do
38321: LD_ADDR_VAR 0 4
38325: PUSH
38326: DOUBLE
38327: LD_INT 1
38329: DEC
38330: ST_TO_ADDR
38331: LD_VAR 0 1
38335: PUSH
38336: FOR_TO
38337: IFFALSE 38375
// if array1 [ i ] <> array2 [ i ] then
38339: LD_VAR 0 1
38343: PUSH
38344: LD_VAR 0 4
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 2
38354: PUSH
38355: LD_VAR 0 4
38359: ARRAY
38360: NONEQUAL
38361: IFFALSE 38373
// begin result := false ;
38363: LD_ADDR_VAR 0 3
38367: PUSH
38368: LD_INT 0
38370: ST_TO_ADDR
// break ;
38371: GO 38375
// end ;
38373: GO 38336
38375: POP
38376: POP
// end ;
38377: LD_VAR 0 3
38381: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38382: LD_INT 0
38384: PPUSH
38385: PPUSH
38386: PPUSH
// pom := GetBase ( fac ) ;
38387: LD_ADDR_VAR 0 5
38391: PUSH
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL_OW 274
38401: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38402: LD_ADDR_VAR 0 4
38406: PUSH
38407: LD_VAR 0 2
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: PPUSH
38416: LD_VAR 0 2
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: PPUSH
38425: LD_VAR 0 2
38429: PUSH
38430: LD_INT 3
38432: ARRAY
38433: PPUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 4
38441: ARRAY
38442: PPUSH
38443: CALL_OW 449
38447: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38448: LD_ADDR_VAR 0 3
38452: PUSH
38453: LD_VAR 0 5
38457: PPUSH
38458: LD_INT 1
38460: PPUSH
38461: CALL_OW 275
38465: PUSH
38466: LD_VAR 0 4
38470: PUSH
38471: LD_INT 1
38473: ARRAY
38474: GREATEREQUAL
38475: PUSH
38476: LD_VAR 0 5
38480: PPUSH
38481: LD_INT 2
38483: PPUSH
38484: CALL_OW 275
38488: PUSH
38489: LD_VAR 0 4
38493: PUSH
38494: LD_INT 2
38496: ARRAY
38497: GREATEREQUAL
38498: AND
38499: PUSH
38500: LD_VAR 0 5
38504: PPUSH
38505: LD_INT 3
38507: PPUSH
38508: CALL_OW 275
38512: PUSH
38513: LD_VAR 0 4
38517: PUSH
38518: LD_INT 3
38520: ARRAY
38521: GREATEREQUAL
38522: AND
38523: ST_TO_ADDR
// end ;
38524: LD_VAR 0 3
38528: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38529: LD_INT 0
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
// pom := GetBase ( building ) ;
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: CALL_OW 274
38549: ST_TO_ADDR
// if not pom then
38550: LD_VAR 0 3
38554: NOT
38555: IFFALSE 38559
// exit ;
38557: GO 38729
// btype := GetBType ( building ) ;
38559: LD_ADDR_VAR 0 5
38563: PUSH
38564: LD_VAR 0 1
38568: PPUSH
38569: CALL_OW 266
38573: ST_TO_ADDR
// if btype = b_armoury then
38574: LD_VAR 0 5
38578: PUSH
38579: LD_INT 4
38581: EQUAL
38582: IFFALSE 38592
// btype := b_barracks ;
38584: LD_ADDR_VAR 0 5
38588: PUSH
38589: LD_INT 5
38591: ST_TO_ADDR
// if btype = b_depot then
38592: LD_VAR 0 5
38596: PUSH
38597: LD_INT 0
38599: EQUAL
38600: IFFALSE 38610
// btype := b_warehouse ;
38602: LD_ADDR_VAR 0 5
38606: PUSH
38607: LD_INT 1
38609: ST_TO_ADDR
// if btype = b_workshop then
38610: LD_VAR 0 5
38614: PUSH
38615: LD_INT 2
38617: EQUAL
38618: IFFALSE 38628
// btype := b_factory ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_INT 3
38627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38628: LD_ADDR_VAR 0 4
38632: PUSH
38633: LD_VAR 0 5
38637: PPUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 248
38647: PPUSH
38648: CALL_OW 450
38652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38653: LD_ADDR_VAR 0 2
38657: PUSH
38658: LD_VAR 0 3
38662: PPUSH
38663: LD_INT 1
38665: PPUSH
38666: CALL_OW 275
38670: PUSH
38671: LD_VAR 0 4
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: GREATEREQUAL
38680: PUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: LD_INT 2
38688: PPUSH
38689: CALL_OW 275
38693: PUSH
38694: LD_VAR 0 4
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: GREATEREQUAL
38703: AND
38704: PUSH
38705: LD_VAR 0 3
38709: PPUSH
38710: LD_INT 3
38712: PPUSH
38713: CALL_OW 275
38717: PUSH
38718: LD_VAR 0 4
38722: PUSH
38723: LD_INT 3
38725: ARRAY
38726: GREATEREQUAL
38727: AND
38728: ST_TO_ADDR
// end ;
38729: LD_VAR 0 2
38733: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38734: LD_INT 0
38736: PPUSH
38737: PPUSH
38738: PPUSH
// pom := GetBase ( building ) ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 274
38753: ST_TO_ADDR
// if not pom then
38754: LD_VAR 0 4
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38864
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38763: LD_ADDR_VAR 0 5
38767: PUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: CALL_OW 248
38782: PPUSH
38783: CALL_OW 450
38787: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38788: LD_ADDR_VAR 0 3
38792: PUSH
38793: LD_VAR 0 4
38797: PPUSH
38798: LD_INT 1
38800: PPUSH
38801: CALL_OW 275
38805: PUSH
38806: LD_VAR 0 5
38810: PUSH
38811: LD_INT 1
38813: ARRAY
38814: GREATEREQUAL
38815: PUSH
38816: LD_VAR 0 4
38820: PPUSH
38821: LD_INT 2
38823: PPUSH
38824: CALL_OW 275
38828: PUSH
38829: LD_VAR 0 5
38833: PUSH
38834: LD_INT 2
38836: ARRAY
38837: GREATEREQUAL
38838: AND
38839: PUSH
38840: LD_VAR 0 4
38844: PPUSH
38845: LD_INT 3
38847: PPUSH
38848: CALL_OW 275
38852: PUSH
38853: LD_VAR 0 5
38857: PUSH
38858: LD_INT 3
38860: ARRAY
38861: GREATEREQUAL
38862: AND
38863: ST_TO_ADDR
// end ;
38864: LD_VAR 0 3
38868: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
// result := false ;
38882: LD_ADDR_VAR 0 8
38886: PUSH
38887: LD_INT 0
38889: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38890: LD_VAR 0 5
38894: NOT
38895: PUSH
38896: LD_VAR 0 1
38900: NOT
38901: OR
38902: PUSH
38903: LD_VAR 0 2
38907: NOT
38908: OR
38909: PUSH
38910: LD_VAR 0 3
38914: NOT
38915: OR
38916: IFFALSE 38920
// exit ;
38918: GO 39734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38920: LD_ADDR_VAR 0 14
38924: PUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: LD_VAR 0 3
38939: PPUSH
38940: LD_VAR 0 4
38944: PPUSH
38945: LD_VAR 0 5
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: PPUSH
38954: CALL_OW 248
38958: PPUSH
38959: LD_INT 0
38961: PPUSH
38962: CALL 40967 0 6
38966: ST_TO_ADDR
// if not hexes then
38967: LD_VAR 0 14
38971: NOT
38972: IFFALSE 38976
// exit ;
38974: GO 39734
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38976: LD_ADDR_VAR 0 17
38980: PUSH
38981: LD_VAR 0 5
38985: PPUSH
38986: LD_INT 22
38988: PUSH
38989: LD_VAR 0 13
38993: PPUSH
38994: CALL_OW 255
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 30
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 30
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PPUSH
39035: CALL_OW 72
39039: ST_TO_ADDR
// for i = 1 to hexes do
39040: LD_ADDR_VAR 0 9
39044: PUSH
39045: DOUBLE
39046: LD_INT 1
39048: DEC
39049: ST_TO_ADDR
39050: LD_VAR 0 14
39054: PUSH
39055: FOR_TO
39056: IFFALSE 39732
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39058: LD_ADDR_VAR 0 13
39062: PUSH
39063: LD_VAR 0 14
39067: PUSH
39068: LD_VAR 0 9
39072: ARRAY
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: PPUSH
39078: LD_VAR 0 14
39082: PUSH
39083: LD_VAR 0 9
39087: ARRAY
39088: PUSH
39089: LD_INT 2
39091: ARRAY
39092: PPUSH
39093: CALL_OW 428
39097: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39098: LD_VAR 0 14
39102: PUSH
39103: LD_VAR 0 9
39107: ARRAY
39108: PUSH
39109: LD_INT 1
39111: ARRAY
39112: PPUSH
39113: LD_VAR 0 14
39117: PUSH
39118: LD_VAR 0 9
39122: ARRAY
39123: PUSH
39124: LD_INT 2
39126: ARRAY
39127: PPUSH
39128: CALL_OW 351
39132: PUSH
39133: LD_VAR 0 14
39137: PUSH
39138: LD_VAR 0 9
39142: ARRAY
39143: PUSH
39144: LD_INT 1
39146: ARRAY
39147: PPUSH
39148: LD_VAR 0 14
39152: PUSH
39153: LD_VAR 0 9
39157: ARRAY
39158: PUSH
39159: LD_INT 2
39161: ARRAY
39162: PPUSH
39163: CALL_OW 488
39167: NOT
39168: OR
39169: PUSH
39170: LD_VAR 0 13
39174: PPUSH
39175: CALL_OW 247
39179: PUSH
39180: LD_INT 3
39182: EQUAL
39183: OR
39184: IFFALSE 39190
// exit ;
39186: POP
39187: POP
39188: GO 39734
// if not tmp then
39190: LD_VAR 0 13
39194: NOT
39195: IFFALSE 39199
// continue ;
39197: GO 39055
// result := true ;
39199: LD_ADDR_VAR 0 8
39203: PUSH
39204: LD_INT 1
39206: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39207: LD_VAR 0 6
39211: PUSH
39212: LD_VAR 0 13
39216: PPUSH
39217: CALL_OW 247
39221: PUSH
39222: LD_INT 2
39224: EQUAL
39225: AND
39226: PUSH
39227: LD_VAR 0 13
39231: PPUSH
39232: CALL_OW 263
39236: PUSH
39237: LD_INT 1
39239: EQUAL
39240: AND
39241: IFFALSE 39405
// begin if IsDrivenBy ( tmp ) then
39243: LD_VAR 0 13
39247: PPUSH
39248: CALL_OW 311
39252: IFFALSE 39256
// continue ;
39254: GO 39055
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39256: LD_VAR 0 6
39260: PPUSH
39261: LD_INT 3
39263: PUSH
39264: LD_INT 60
39266: PUSH
39267: EMPTY
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: LD_INT 55
39279: PUSH
39280: EMPTY
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PPUSH
39291: CALL_OW 72
39295: IFFALSE 39403
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39297: LD_ADDR_VAR 0 18
39301: PUSH
39302: LD_VAR 0 6
39306: PPUSH
39307: LD_INT 3
39309: PUSH
39310: LD_INT 60
39312: PUSH
39313: EMPTY
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 55
39325: PUSH
39326: EMPTY
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PPUSH
39337: CALL_OW 72
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: ST_TO_ADDR
// if IsInUnit ( driver ) then
39346: LD_VAR 0 18
39350: PPUSH
39351: CALL_OW 310
39355: IFFALSE 39366
// ComExit ( driver ) ;
39357: LD_VAR 0 18
39361: PPUSH
39362: CALL 64747 0 1
// AddComEnterUnit ( driver , tmp ) ;
39366: LD_VAR 0 18
39370: PPUSH
39371: LD_VAR 0 13
39375: PPUSH
39376: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39380: LD_VAR 0 18
39384: PPUSH
39385: LD_VAR 0 7
39389: PPUSH
39390: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39394: LD_VAR 0 18
39398: PPUSH
39399: CALL_OW 181
// end ; continue ;
39403: GO 39055
// end ; if not cleaners or not tmp in cleaners then
39405: LD_VAR 0 6
39409: NOT
39410: PUSH
39411: LD_VAR 0 13
39415: PUSH
39416: LD_VAR 0 6
39420: IN
39421: NOT
39422: OR
39423: IFFALSE 39730
// begin if dep then
39425: LD_VAR 0 17
39429: IFFALSE 39565
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39431: LD_ADDR_VAR 0 16
39435: PUSH
39436: LD_VAR 0 17
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: CALL_OW 250
39449: PPUSH
39450: LD_VAR 0 17
39454: PUSH
39455: LD_INT 1
39457: ARRAY
39458: PPUSH
39459: CALL_OW 254
39463: PPUSH
39464: LD_INT 5
39466: PPUSH
39467: CALL_OW 272
39471: PUSH
39472: LD_VAR 0 17
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: CALL_OW 251
39485: PPUSH
39486: LD_VAR 0 17
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: PPUSH
39495: CALL_OW 254
39499: PPUSH
39500: LD_INT 5
39502: PPUSH
39503: CALL_OW 273
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39512: LD_VAR 0 16
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PPUSH
39521: LD_VAR 0 16
39525: PUSH
39526: LD_INT 2
39528: ARRAY
39529: PPUSH
39530: CALL_OW 488
39534: IFFALSE 39565
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39536: LD_VAR 0 13
39540: PPUSH
39541: LD_VAR 0 16
39545: PUSH
39546: LD_INT 1
39548: ARRAY
39549: PPUSH
39550: LD_VAR 0 16
39554: PUSH
39555: LD_INT 2
39557: ARRAY
39558: PPUSH
39559: CALL_OW 111
// continue ;
39563: GO 39055
// end ; end ; r := GetDir ( tmp ) ;
39565: LD_ADDR_VAR 0 15
39569: PUSH
39570: LD_VAR 0 13
39574: PPUSH
39575: CALL_OW 254
39579: ST_TO_ADDR
// if r = 5 then
39580: LD_VAR 0 15
39584: PUSH
39585: LD_INT 5
39587: EQUAL
39588: IFFALSE 39598
// r := 0 ;
39590: LD_ADDR_VAR 0 15
39594: PUSH
39595: LD_INT 0
39597: ST_TO_ADDR
// for j = r to 5 do
39598: LD_ADDR_VAR 0 10
39602: PUSH
39603: DOUBLE
39604: LD_VAR 0 15
39608: DEC
39609: ST_TO_ADDR
39610: LD_INT 5
39612: PUSH
39613: FOR_TO
39614: IFFALSE 39728
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39616: LD_ADDR_VAR 0 11
39620: PUSH
39621: LD_VAR 0 13
39625: PPUSH
39626: CALL_OW 250
39630: PPUSH
39631: LD_VAR 0 10
39635: PPUSH
39636: LD_INT 2
39638: PPUSH
39639: CALL_OW 272
39643: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39644: LD_ADDR_VAR 0 12
39648: PUSH
39649: LD_VAR 0 13
39653: PPUSH
39654: CALL_OW 251
39658: PPUSH
39659: LD_VAR 0 10
39663: PPUSH
39664: LD_INT 2
39666: PPUSH
39667: CALL_OW 273
39671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39672: LD_VAR 0 11
39676: PPUSH
39677: LD_VAR 0 12
39681: PPUSH
39682: CALL_OW 488
39686: PUSH
39687: LD_VAR 0 11
39691: PPUSH
39692: LD_VAR 0 12
39696: PPUSH
39697: CALL_OW 428
39701: NOT
39702: AND
39703: IFFALSE 39726
// begin ComMoveXY ( tmp , _x , _y ) ;
39705: LD_VAR 0 13
39709: PPUSH
39710: LD_VAR 0 11
39714: PPUSH
39715: LD_VAR 0 12
39719: PPUSH
39720: CALL_OW 111
// break ;
39724: GO 39728
// end ; end ;
39726: GO 39613
39728: POP
39729: POP
// end ; end ;
39730: GO 39055
39732: POP
39733: POP
// end ;
39734: LD_VAR 0 8
39738: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39739: LD_INT 0
39741: PPUSH
// result := true ;
39742: LD_ADDR_VAR 0 3
39746: PUSH
39747: LD_INT 1
39749: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39750: LD_VAR 0 2
39754: PUSH
39755: LD_INT 24
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39769
39761: LD_INT 33
39763: DOUBLE
39764: EQUAL
39765: IFTRUE 39769
39767: GO 39794
39769: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_INT 32
39777: PPUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 321
39787: PUSH
39788: LD_INT 2
39790: EQUAL
39791: ST_TO_ADDR
39792: GO 40110
39794: LD_INT 20
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39827
39802: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 6
39810: PPUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 321
39820: PUSH
39821: LD_INT 2
39823: EQUAL
39824: ST_TO_ADDR
39825: GO 40110
39827: LD_INT 22
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39841
39833: LD_INT 36
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 39866
39841: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 15
39849: PPUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 321
39859: PUSH
39860: LD_INT 2
39862: EQUAL
39863: ST_TO_ADDR
39864: GO 40110
39866: LD_INT 30
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39874
39872: GO 39899
39874: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_INT 20
39882: PPUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 321
39892: PUSH
39893: LD_INT 2
39895: EQUAL
39896: ST_TO_ADDR
39897: GO 40110
39899: LD_INT 28
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39913
39905: LD_INT 21
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39938
39913: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 21
39921: PPUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 321
39931: PUSH
39932: LD_INT 2
39934: EQUAL
39935: ST_TO_ADDR
39936: GO 40110
39938: LD_INT 16
39940: DOUBLE
39941: EQUAL
39942: IFTRUE 39946
39944: GO 39971
39946: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_INT 84
39954: PPUSH
39955: LD_VAR 0 1
39959: PPUSH
39960: CALL_OW 321
39964: PUSH
39965: LD_INT 2
39967: EQUAL
39968: ST_TO_ADDR
39969: GO 40110
39971: LD_INT 19
39973: DOUBLE
39974: EQUAL
39975: IFTRUE 39985
39977: LD_INT 23
39979: DOUBLE
39980: EQUAL
39981: IFTRUE 39985
39983: GO 40010
39985: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_INT 83
39993: PPUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: CALL_OW 321
40003: PUSH
40004: LD_INT 2
40006: EQUAL
40007: ST_TO_ADDR
40008: GO 40110
40010: LD_INT 17
40012: DOUBLE
40013: EQUAL
40014: IFTRUE 40018
40016: GO 40043
40018: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40019: LD_ADDR_VAR 0 3
40023: PUSH
40024: LD_INT 39
40026: PPUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 321
40036: PUSH
40037: LD_INT 2
40039: EQUAL
40040: ST_TO_ADDR
40041: GO 40110
40043: LD_INT 18
40045: DOUBLE
40046: EQUAL
40047: IFTRUE 40051
40049: GO 40076
40051: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_INT 40
40059: PPUSH
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 321
40069: PUSH
40070: LD_INT 2
40072: EQUAL
40073: ST_TO_ADDR
40074: GO 40110
40076: LD_INT 27
40078: DOUBLE
40079: EQUAL
40080: IFTRUE 40084
40082: GO 40109
40084: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: LD_INT 35
40092: PPUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 321
40102: PUSH
40103: LD_INT 2
40105: EQUAL
40106: ST_TO_ADDR
40107: GO 40110
40109: POP
// end ;
40110: LD_VAR 0 3
40114: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40115: LD_INT 0
40117: PPUSH
40118: PPUSH
40119: PPUSH
40120: PPUSH
40121: PPUSH
40122: PPUSH
40123: PPUSH
40124: PPUSH
40125: PPUSH
40126: PPUSH
40127: PPUSH
// result := false ;
40128: LD_ADDR_VAR 0 6
40132: PUSH
40133: LD_INT 0
40135: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40136: LD_VAR 0 1
40140: NOT
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 266
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: IN
40162: NOT
40163: OR
40164: PUSH
40165: LD_VAR 0 2
40169: NOT
40170: OR
40171: PUSH
40172: LD_VAR 0 5
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 3
40188: PUSH
40189: LD_INT 4
40191: PUSH
40192: LD_INT 5
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: IN
40203: NOT
40204: OR
40205: PUSH
40206: LD_VAR 0 3
40210: PPUSH
40211: LD_VAR 0 4
40215: PPUSH
40216: CALL_OW 488
40220: NOT
40221: OR
40222: IFFALSE 40226
// exit ;
40224: GO 40962
// side := GetSide ( depot ) ;
40226: LD_ADDR_VAR 0 9
40230: PUSH
40231: LD_VAR 0 1
40235: PPUSH
40236: CALL_OW 255
40240: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40241: LD_VAR 0 9
40245: PPUSH
40246: LD_VAR 0 2
40250: PPUSH
40251: CALL 39739 0 2
40255: NOT
40256: IFFALSE 40260
// exit ;
40258: GO 40962
// pom := GetBase ( depot ) ;
40260: LD_ADDR_VAR 0 10
40264: PUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 274
40274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40275: LD_ADDR_VAR 0 11
40279: PUSH
40280: LD_VAR 0 2
40284: PPUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 248
40294: PPUSH
40295: CALL_OW 450
40299: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40300: LD_VAR 0 10
40304: PPUSH
40305: LD_INT 1
40307: PPUSH
40308: CALL_OW 275
40312: PUSH
40313: LD_VAR 0 11
40317: PUSH
40318: LD_INT 1
40320: ARRAY
40321: GREATEREQUAL
40322: PUSH
40323: LD_VAR 0 10
40327: PPUSH
40328: LD_INT 2
40330: PPUSH
40331: CALL_OW 275
40335: PUSH
40336: LD_VAR 0 11
40340: PUSH
40341: LD_INT 2
40343: ARRAY
40344: GREATEREQUAL
40345: AND
40346: PUSH
40347: LD_VAR 0 10
40351: PPUSH
40352: LD_INT 3
40354: PPUSH
40355: CALL_OW 275
40359: PUSH
40360: LD_VAR 0 11
40364: PUSH
40365: LD_INT 3
40367: ARRAY
40368: GREATEREQUAL
40369: AND
40370: NOT
40371: IFFALSE 40375
// exit ;
40373: GO 40962
// if GetBType ( depot ) = b_depot then
40375: LD_VAR 0 1
40379: PPUSH
40380: CALL_OW 266
40384: PUSH
40385: LD_INT 0
40387: EQUAL
40388: IFFALSE 40400
// dist := 28 else
40390: LD_ADDR_VAR 0 14
40394: PUSH
40395: LD_INT 28
40397: ST_TO_ADDR
40398: GO 40408
// dist := 36 ;
40400: LD_ADDR_VAR 0 14
40404: PUSH
40405: LD_INT 36
40407: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40408: LD_VAR 0 1
40412: PPUSH
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_VAR 0 4
40422: PPUSH
40423: CALL_OW 297
40427: PUSH
40428: LD_VAR 0 14
40432: GREATER
40433: IFFALSE 40437
// exit ;
40435: GO 40962
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40437: LD_ADDR_VAR 0 12
40441: PUSH
40442: LD_VAR 0 2
40446: PPUSH
40447: LD_VAR 0 3
40451: PPUSH
40452: LD_VAR 0 4
40456: PPUSH
40457: LD_VAR 0 5
40461: PPUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 248
40471: PPUSH
40472: LD_INT 0
40474: PPUSH
40475: CALL 40967 0 6
40479: ST_TO_ADDR
// if not hexes then
40480: LD_VAR 0 12
40484: NOT
40485: IFFALSE 40489
// exit ;
40487: GO 40962
// hex := GetHexInfo ( x , y ) ;
40489: LD_ADDR_VAR 0 15
40493: PUSH
40494: LD_VAR 0 3
40498: PPUSH
40499: LD_VAR 0 4
40503: PPUSH
40504: CALL_OW 546
40508: ST_TO_ADDR
// if hex [ 1 ] then
40509: LD_VAR 0 15
40513: PUSH
40514: LD_INT 1
40516: ARRAY
40517: IFFALSE 40521
// exit ;
40519: GO 40962
// height := hex [ 2 ] ;
40521: LD_ADDR_VAR 0 13
40525: PUSH
40526: LD_VAR 0 15
40530: PUSH
40531: LD_INT 2
40533: ARRAY
40534: ST_TO_ADDR
// for i = 1 to hexes do
40535: LD_ADDR_VAR 0 7
40539: PUSH
40540: DOUBLE
40541: LD_INT 1
40543: DEC
40544: ST_TO_ADDR
40545: LD_VAR 0 12
40549: PUSH
40550: FOR_TO
40551: IFFALSE 40881
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40553: LD_VAR 0 12
40557: PUSH
40558: LD_VAR 0 7
40562: ARRAY
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: PPUSH
40568: LD_VAR 0 12
40572: PUSH
40573: LD_VAR 0 7
40577: ARRAY
40578: PUSH
40579: LD_INT 2
40581: ARRAY
40582: PPUSH
40583: CALL_OW 488
40587: NOT
40588: PUSH
40589: LD_VAR 0 12
40593: PUSH
40594: LD_VAR 0 7
40598: ARRAY
40599: PUSH
40600: LD_INT 1
40602: ARRAY
40603: PPUSH
40604: LD_VAR 0 12
40608: PUSH
40609: LD_VAR 0 7
40613: ARRAY
40614: PUSH
40615: LD_INT 2
40617: ARRAY
40618: PPUSH
40619: CALL_OW 428
40623: PUSH
40624: LD_INT 0
40626: GREATER
40627: OR
40628: PUSH
40629: LD_VAR 0 12
40633: PUSH
40634: LD_VAR 0 7
40638: ARRAY
40639: PUSH
40640: LD_INT 1
40642: ARRAY
40643: PPUSH
40644: LD_VAR 0 12
40648: PUSH
40649: LD_VAR 0 7
40653: ARRAY
40654: PUSH
40655: LD_INT 2
40657: ARRAY
40658: PPUSH
40659: CALL_OW 351
40663: OR
40664: IFFALSE 40670
// exit ;
40666: POP
40667: POP
40668: GO 40962
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40670: LD_ADDR_VAR 0 8
40674: PUSH
40675: LD_VAR 0 12
40679: PUSH
40680: LD_VAR 0 7
40684: ARRAY
40685: PUSH
40686: LD_INT 1
40688: ARRAY
40689: PPUSH
40690: LD_VAR 0 12
40694: PUSH
40695: LD_VAR 0 7
40699: ARRAY
40700: PUSH
40701: LD_INT 2
40703: ARRAY
40704: PPUSH
40705: CALL_OW 546
40709: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40710: LD_VAR 0 8
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: PUSH
40719: LD_VAR 0 8
40723: PUSH
40724: LD_INT 2
40726: ARRAY
40727: PUSH
40728: LD_VAR 0 13
40732: PUSH
40733: LD_INT 2
40735: PLUS
40736: GREATER
40737: OR
40738: PUSH
40739: LD_VAR 0 8
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: PUSH
40748: LD_VAR 0 13
40752: PUSH
40753: LD_INT 2
40755: MINUS
40756: LESS
40757: OR
40758: PUSH
40759: LD_VAR 0 8
40763: PUSH
40764: LD_INT 3
40766: ARRAY
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 8
40773: PUSH
40774: LD_INT 9
40776: PUSH
40777: LD_INT 10
40779: PUSH
40780: LD_INT 11
40782: PUSH
40783: LD_INT 12
40785: PUSH
40786: LD_INT 13
40788: PUSH
40789: LD_INT 16
40791: PUSH
40792: LD_INT 17
40794: PUSH
40795: LD_INT 18
40797: PUSH
40798: LD_INT 19
40800: PUSH
40801: LD_INT 20
40803: PUSH
40804: LD_INT 21
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: IN
40822: NOT
40823: OR
40824: PUSH
40825: LD_VAR 0 8
40829: PUSH
40830: LD_INT 5
40832: ARRAY
40833: NOT
40834: OR
40835: PUSH
40836: LD_VAR 0 8
40840: PUSH
40841: LD_INT 6
40843: ARRAY
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: LD_INT 7
40853: PUSH
40854: LD_INT 9
40856: PUSH
40857: LD_INT 10
40859: PUSH
40860: LD_INT 11
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: IN
40871: NOT
40872: OR
40873: IFFALSE 40879
// exit ;
40875: POP
40876: POP
40877: GO 40962
// end ;
40879: GO 40550
40881: POP
40882: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40883: LD_VAR 0 9
40887: PPUSH
40888: LD_VAR 0 3
40892: PPUSH
40893: LD_VAR 0 4
40897: PPUSH
40898: LD_INT 20
40900: PPUSH
40901: CALL 32914 0 4
40905: PUSH
40906: LD_INT 4
40908: ARRAY
40909: IFFALSE 40913
// exit ;
40911: GO 40962
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40913: LD_VAR 0 2
40917: PUSH
40918: LD_INT 29
40920: PUSH
40921: LD_INT 30
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: IN
40928: PUSH
40929: LD_VAR 0 3
40933: PPUSH
40934: LD_VAR 0 4
40938: PPUSH
40939: LD_VAR 0 9
40943: PPUSH
40944: CALL_OW 440
40948: NOT
40949: AND
40950: IFFALSE 40954
// exit ;
40952: GO 40962
// result := true ;
40954: LD_ADDR_VAR 0 6
40958: PUSH
40959: LD_INT 1
40961: ST_TO_ADDR
// end ;
40962: LD_VAR 0 6
40966: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40967: LD_INT 0
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
41024: PPUSH
41025: PPUSH
41026: PPUSH
// result = [ ] ;
41027: LD_ADDR_VAR 0 7
41031: PUSH
41032: EMPTY
41033: ST_TO_ADDR
// temp_list = [ ] ;
41034: LD_ADDR_VAR 0 9
41038: PUSH
41039: EMPTY
41040: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41041: LD_VAR 0 4
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 4
41060: PUSH
41061: LD_INT 5
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: IN
41072: NOT
41073: PUSH
41074: LD_VAR 0 1
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: IN
41089: PUSH
41090: LD_VAR 0 5
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: IN
41109: NOT
41110: AND
41111: OR
41112: IFFALSE 41116
// exit ;
41114: GO 59507
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41116: LD_VAR 0 1
41120: PUSH
41121: LD_INT 6
41123: PUSH
41124: LD_INT 7
41126: PUSH
41127: LD_INT 8
41129: PUSH
41130: LD_INT 13
41132: PUSH
41133: LD_INT 12
41135: PUSH
41136: LD_INT 15
41138: PUSH
41139: LD_INT 11
41141: PUSH
41142: LD_INT 14
41144: PUSH
41145: LD_INT 10
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: IN
41159: IFFALSE 41169
// btype = b_lab ;
41161: LD_ADDR_VAR 0 1
41165: PUSH
41166: LD_INT 6
41168: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41169: LD_VAR 0 6
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: IN
41188: NOT
41189: PUSH
41190: LD_VAR 0 1
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 3
41206: PUSH
41207: LD_INT 6
41209: PUSH
41210: LD_INT 36
41212: PUSH
41213: LD_INT 4
41215: PUSH
41216: LD_INT 5
41218: PUSH
41219: LD_INT 31
41221: PUSH
41222: LD_INT 32
41224: PUSH
41225: LD_INT 33
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: IN
41241: NOT
41242: PUSH
41243: LD_VAR 0 6
41247: PUSH
41248: LD_INT 1
41250: EQUAL
41251: AND
41252: OR
41253: PUSH
41254: LD_VAR 0 1
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: IN
41269: NOT
41270: PUSH
41271: LD_VAR 0 6
41275: PUSH
41276: LD_INT 2
41278: EQUAL
41279: AND
41280: OR
41281: IFFALSE 41291
// mode = 0 ;
41283: LD_ADDR_VAR 0 6
41287: PUSH
41288: LD_INT 0
41290: ST_TO_ADDR
// case mode of 0 :
41291: LD_VAR 0 6
41295: PUSH
41296: LD_INT 0
41298: DOUBLE
41299: EQUAL
41300: IFTRUE 41304
41302: GO 52757
41304: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41305: LD_ADDR_VAR 0 11
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41498: LD_ADDR_VAR 0 12
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41694: LD_ADDR_VAR 0 13
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 3
41865: NEG
41866: PUSH
41867: LD_INT 3
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41893: LD_ADDR_VAR 0 14
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42089: LD_ADDR_VAR 0 15
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42282: LD_ADDR_VAR 0 16
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42475: LD_ADDR_VAR 0 17
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42705: LD_ADDR_VAR 0 18
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42935: LD_ADDR_VAR 0 19
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43165: LD_ADDR_VAR 0 20
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43395: LD_ADDR_VAR 0 21
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43625: LD_ADDR_VAR 0 22
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43855: LD_ADDR_VAR 0 23
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 3
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44135: LD_ADDR_VAR 0 24
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44411: LD_ADDR_VAR 0 25
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44685: LD_ADDR_VAR 0 26
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44961: LD_ADDR_VAR 0 27
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 3
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45241: LD_ADDR_VAR 0 28
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45523: LD_ADDR_VAR 0 29
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45802: LD_ADDR_VAR 0 30
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46080: LD_ADDR_VAR 0 31
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46358: LD_ADDR_VAR 0 32
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46636: LD_ADDR_VAR 0 33
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46915: LD_ADDR_VAR 0 34
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47195: LD_ADDR_VAR 0 35
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47307: LD_ADDR_VAR 0 36
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47419: LD_ADDR_VAR 0 37
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47531: LD_ADDR_VAR 0 38
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47643: LD_ADDR_VAR 0 39
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47755: LD_ADDR_VAR 0 40
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47867: LD_ADDR_VAR 0 41
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: NEG
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48217: LD_ADDR_VAR 0 42
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 3
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48567: LD_ADDR_VAR 0 43
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48915: LD_ADDR_VAR 0 44
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 3
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49265: LD_ADDR_VAR 0 45
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 46
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49963: LD_ADDR_VAR 0 47
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50114: LD_ADDR_VAR 0 48
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50261: LD_ADDR_VAR 0 49
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50405: LD_ADDR_VAR 0 50
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50549: LD_ADDR_VAR 0 51
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50696: LD_ADDR_VAR 0 52
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50847: LD_ADDR_VAR 0 53
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 54
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51307: LD_ADDR_VAR 0 55
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51537: LD_ADDR_VAR 0 56
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51767: LD_ADDR_VAR 0 57
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51997: LD_ADDR_VAR 0 58
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52227: LD_ADDR_VAR 0 59
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52315: LD_ADDR_VAR 0 60
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52403: LD_ADDR_VAR 0 61
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52491: LD_ADDR_VAR 0 62
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52579: LD_ADDR_VAR 0 63
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52667: LD_ADDR_VAR 0 64
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// end ; 1 :
52755: GO 58652
52757: LD_INT 1
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52765
52763: GO 55388
52765: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52766: LD_ADDR_VAR 0 11
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 3
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52810: LD_ADDR_VAR 0 12
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52851: LD_ADDR_VAR 0 13
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52891: LD_ADDR_VAR 0 14
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52932: LD_ADDR_VAR 0 15
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52976: LD_ADDR_VAR 0 16
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53022: LD_ADDR_VAR 0 17
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53066: LD_ADDR_VAR 0 18
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53107: LD_ADDR_VAR 0 19
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53147: LD_ADDR_VAR 0 20
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53188: LD_ADDR_VAR 0 21
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53232: LD_ADDR_VAR 0 22
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 3
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: LD_INT 3
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53278: LD_ADDR_VAR 0 23
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 4
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53322: LD_ADDR_VAR 0 24
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53363: LD_ADDR_VAR 0 25
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 4
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53403: LD_ADDR_VAR 0 26
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53444: LD_ADDR_VAR 0 27
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53488: LD_ADDR_VAR 0 28
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 4
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 4
53519: NEG
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53534: LD_ADDR_VAR 0 29
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 3
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 4
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 5
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 5
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 4
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 6
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 6
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 5
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53689: LD_ADDR_VAR 0 30
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 4
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 5
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 5
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 6
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 6
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53832: LD_ADDR_VAR 0 31
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 4
53879: PUSH
53880: LD_INT 4
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 5
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: PUSH
53910: LD_INT 5
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: LD_INT 5
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 6
53929: PUSH
53930: LD_INT 5
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 6
53939: PUSH
53940: LD_INT 6
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: LD_INT 6
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53971: LD_ADDR_VAR 0 32
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 4
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 5
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 4
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 6
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 6
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 5
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54114: LD_ADDR_VAR 0 33
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 4
54166: NEG
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 4
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 4
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 5
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 6
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 6
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54269: LD_ADDR_VAR 0 34
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: LD_INT 4
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 4
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: LD_INT 4
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 4
54348: NEG
54349: PUSH
54350: LD_INT 5
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 5
54360: NEG
54361: PUSH
54362: LD_INT 4
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 5
54372: NEG
54373: PUSH
54374: LD_INT 5
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 5
54384: NEG
54385: PUSH
54386: LD_INT 6
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 6
54396: NEG
54397: PUSH
54398: LD_INT 5
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 6
54408: NEG
54409: PUSH
54410: LD_INT 6
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54432: LD_ADDR_VAR 0 41
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54476: LD_ADDR_VAR 0 42
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54517: LD_ADDR_VAR 0 43
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54557: LD_ADDR_VAR 0 44
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54598: LD_ADDR_VAR 0 45
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54642: LD_ADDR_VAR 0 46
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54688: LD_ADDR_VAR 0 47
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54721: LD_ADDR_VAR 0 48
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54752: LD_ADDR_VAR 0 49
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 3
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54781: LD_ADDR_VAR 0 50
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54810: LD_ADDR_VAR 0 51
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54841: LD_ADDR_VAR 0 52
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54874: LD_ADDR_VAR 0 53
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54918: LD_ADDR_VAR 0 54
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54959: LD_ADDR_VAR 0 55
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54999: LD_ADDR_VAR 0 56
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55040: LD_ADDR_VAR 0 57
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55084: LD_ADDR_VAR 0 58
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55130: LD_ADDR_VAR 0 59
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55174: LD_ADDR_VAR 0 60
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: LIST
55214: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55215: LD_ADDR_VAR 0 61
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55255: LD_ADDR_VAR 0 62
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55296: LD_ADDR_VAR 0 63
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55340: LD_ADDR_VAR 0 64
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// end ; 2 :
55386: GO 58652
55388: LD_INT 2
55390: DOUBLE
55391: EQUAL
55392: IFTRUE 55396
55394: GO 58651
55396: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55397: LD_ADDR_VAR 0 29
55401: PUSH
55402: LD_INT 4
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 4
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 5
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 5
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 4
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 5
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 4
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 4
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 4
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 3
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 4
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 5
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 5
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 4
55736: NEG
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 4
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 4
55759: NEG
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 4
55782: NEG
55783: PUSH
55784: LD_INT 4
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 4
55794: NEG
55795: PUSH
55796: LD_INT 5
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: LD_INT 4
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 4
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 5
55842: NEG
55843: PUSH
55844: LD_INT 4
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 5
55854: NEG
55855: PUSH
55856: LD_INT 5
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: LD_INT 5
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 5
55878: NEG
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55935: LD_ADDR_VAR 0 30
55939: PUSH
55940: LD_INT 4
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 4
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 5
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 5
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 4
55982: PUSH
55983: LD_INT 5
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 5
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 5
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 4
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 5
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 5
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 4
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 4
56299: NEG
56300: PUSH
56301: LD_INT 4
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 4
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 4
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 4
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 5
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 4
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 4
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 5
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 5
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56482: LD_ADDR_VAR 0 31
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 4
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 5
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 5
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: NEG
56685: PUSH
56686: LD_INT 4
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: LD_INT 5
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 4
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 4
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 5
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 5
56756: NEG
56757: PUSH
56758: LD_INT 5
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 5
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 5
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 4
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 4
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 4
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 5
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 5
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 5
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57032: LD_ADDR_VAR 0 32
57036: PUSH
57037: LD_INT 4
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 4
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 5
57095: NEG
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 5
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: NEG
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 5
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 5
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 5
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 4
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: LD_INT 5
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: LD_INT 5
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: LD_INT 4
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 5
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: LD_INT 5
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57579: LD_ADDR_VAR 0 33
57583: PUSH
57584: LD_INT 4
57586: NEG
57587: PUSH
57588: LD_INT 4
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: LD_INT 5
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: NEG
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 5
57646: NEG
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 5
57658: NEG
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 5
57682: NEG
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 4
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 4
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 5
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 3
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 4
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 5
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 5
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 5
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58117: LD_ADDR_VAR 0 34
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 5
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 4
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 5
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 5
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: LD_INT 5
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 5
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 5
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 4
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 5
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 5
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 5
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// end ; end ;
58649: GO 58652
58651: POP
// case btype of b_depot , b_warehouse :
58652: LD_VAR 0 1
58656: PUSH
58657: LD_INT 0
58659: DOUBLE
58660: EQUAL
58661: IFTRUE 58671
58663: LD_INT 1
58665: DOUBLE
58666: EQUAL
58667: IFTRUE 58671
58669: GO 58872
58671: POP
// case nation of nation_american :
58672: LD_VAR 0 5
58676: PUSH
58677: LD_INT 1
58679: DOUBLE
58680: EQUAL
58681: IFTRUE 58685
58683: GO 58741
58685: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58686: LD_ADDR_VAR 0 9
58690: PUSH
58691: LD_VAR 0 11
58695: PUSH
58696: LD_VAR 0 12
58700: PUSH
58701: LD_VAR 0 13
58705: PUSH
58706: LD_VAR 0 14
58710: PUSH
58711: LD_VAR 0 15
58715: PUSH
58716: LD_VAR 0 16
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: LD_VAR 0 4
58733: PUSH
58734: LD_INT 1
58736: PLUS
58737: ARRAY
58738: ST_TO_ADDR
58739: GO 58870
58741: LD_INT 2
58743: DOUBLE
58744: EQUAL
58745: IFTRUE 58749
58747: GO 58805
58749: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58750: LD_ADDR_VAR 0 9
58754: PUSH
58755: LD_VAR 0 17
58759: PUSH
58760: LD_VAR 0 18
58764: PUSH
58765: LD_VAR 0 19
58769: PUSH
58770: LD_VAR 0 20
58774: PUSH
58775: LD_VAR 0 21
58779: PUSH
58780: LD_VAR 0 22
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: PUSH
58793: LD_VAR 0 4
58797: PUSH
58798: LD_INT 1
58800: PLUS
58801: ARRAY
58802: ST_TO_ADDR
58803: GO 58870
58805: LD_INT 3
58807: DOUBLE
58808: EQUAL
58809: IFTRUE 58813
58811: GO 58869
58813: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58814: LD_ADDR_VAR 0 9
58818: PUSH
58819: LD_VAR 0 23
58823: PUSH
58824: LD_VAR 0 24
58828: PUSH
58829: LD_VAR 0 25
58833: PUSH
58834: LD_VAR 0 26
58838: PUSH
58839: LD_VAR 0 27
58843: PUSH
58844: LD_VAR 0 28
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: PUSH
58857: LD_VAR 0 4
58861: PUSH
58862: LD_INT 1
58864: PLUS
58865: ARRAY
58866: ST_TO_ADDR
58867: GO 58870
58869: POP
58870: GO 59425
58872: LD_INT 2
58874: DOUBLE
58875: EQUAL
58876: IFTRUE 58886
58878: LD_INT 3
58880: DOUBLE
58881: EQUAL
58882: IFTRUE 58886
58884: GO 58942
58886: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58887: LD_ADDR_VAR 0 9
58891: PUSH
58892: LD_VAR 0 29
58896: PUSH
58897: LD_VAR 0 30
58901: PUSH
58902: LD_VAR 0 31
58906: PUSH
58907: LD_VAR 0 32
58911: PUSH
58912: LD_VAR 0 33
58916: PUSH
58917: LD_VAR 0 34
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: PUSH
58930: LD_VAR 0 4
58934: PUSH
58935: LD_INT 1
58937: PLUS
58938: ARRAY
58939: ST_TO_ADDR
58940: GO 59425
58942: LD_INT 16
58944: DOUBLE
58945: EQUAL
58946: IFTRUE 59004
58948: LD_INT 17
58950: DOUBLE
58951: EQUAL
58952: IFTRUE 59004
58954: LD_INT 18
58956: DOUBLE
58957: EQUAL
58958: IFTRUE 59004
58960: LD_INT 19
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 59004
58966: LD_INT 22
58968: DOUBLE
58969: EQUAL
58970: IFTRUE 59004
58972: LD_INT 20
58974: DOUBLE
58975: EQUAL
58976: IFTRUE 59004
58978: LD_INT 21
58980: DOUBLE
58981: EQUAL
58982: IFTRUE 59004
58984: LD_INT 23
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 59004
58990: LD_INT 24
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 59004
58996: LD_INT 25
58998: DOUBLE
58999: EQUAL
59000: IFTRUE 59004
59002: GO 59060
59004: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59005: LD_ADDR_VAR 0 9
59009: PUSH
59010: LD_VAR 0 35
59014: PUSH
59015: LD_VAR 0 36
59019: PUSH
59020: LD_VAR 0 37
59024: PUSH
59025: LD_VAR 0 38
59029: PUSH
59030: LD_VAR 0 39
59034: PUSH
59035: LD_VAR 0 40
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: PUSH
59048: LD_VAR 0 4
59052: PUSH
59053: LD_INT 1
59055: PLUS
59056: ARRAY
59057: ST_TO_ADDR
59058: GO 59425
59060: LD_INT 6
59062: DOUBLE
59063: EQUAL
59064: IFTRUE 59116
59066: LD_INT 7
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59116
59072: LD_INT 8
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59116
59078: LD_INT 13
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59116
59084: LD_INT 12
59086: DOUBLE
59087: EQUAL
59088: IFTRUE 59116
59090: LD_INT 15
59092: DOUBLE
59093: EQUAL
59094: IFTRUE 59116
59096: LD_INT 11
59098: DOUBLE
59099: EQUAL
59100: IFTRUE 59116
59102: LD_INT 14
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59116
59108: LD_INT 10
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59172
59116: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59117: LD_ADDR_VAR 0 9
59121: PUSH
59122: LD_VAR 0 41
59126: PUSH
59127: LD_VAR 0 42
59131: PUSH
59132: LD_VAR 0 43
59136: PUSH
59137: LD_VAR 0 44
59141: PUSH
59142: LD_VAR 0 45
59146: PUSH
59147: LD_VAR 0 46
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: PUSH
59160: LD_VAR 0 4
59164: PUSH
59165: LD_INT 1
59167: PLUS
59168: ARRAY
59169: ST_TO_ADDR
59170: GO 59425
59172: LD_INT 36
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59180
59178: GO 59236
59180: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59181: LD_ADDR_VAR 0 9
59185: PUSH
59186: LD_VAR 0 47
59190: PUSH
59191: LD_VAR 0 48
59195: PUSH
59196: LD_VAR 0 49
59200: PUSH
59201: LD_VAR 0 50
59205: PUSH
59206: LD_VAR 0 51
59210: PUSH
59211: LD_VAR 0 52
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: PUSH
59224: LD_VAR 0 4
59228: PUSH
59229: LD_INT 1
59231: PLUS
59232: ARRAY
59233: ST_TO_ADDR
59234: GO 59425
59236: LD_INT 4
59238: DOUBLE
59239: EQUAL
59240: IFTRUE 59262
59242: LD_INT 5
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59262
59248: LD_INT 34
59250: DOUBLE
59251: EQUAL
59252: IFTRUE 59262
59254: LD_INT 37
59256: DOUBLE
59257: EQUAL
59258: IFTRUE 59262
59260: GO 59318
59262: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59263: LD_ADDR_VAR 0 9
59267: PUSH
59268: LD_VAR 0 53
59272: PUSH
59273: LD_VAR 0 54
59277: PUSH
59278: LD_VAR 0 55
59282: PUSH
59283: LD_VAR 0 56
59287: PUSH
59288: LD_VAR 0 57
59292: PUSH
59293: LD_VAR 0 58
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: PUSH
59306: LD_VAR 0 4
59310: PUSH
59311: LD_INT 1
59313: PLUS
59314: ARRAY
59315: ST_TO_ADDR
59316: GO 59425
59318: LD_INT 31
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59368
59324: LD_INT 32
59326: DOUBLE
59327: EQUAL
59328: IFTRUE 59368
59330: LD_INT 33
59332: DOUBLE
59333: EQUAL
59334: IFTRUE 59368
59336: LD_INT 27
59338: DOUBLE
59339: EQUAL
59340: IFTRUE 59368
59342: LD_INT 26
59344: DOUBLE
59345: EQUAL
59346: IFTRUE 59368
59348: LD_INT 28
59350: DOUBLE
59351: EQUAL
59352: IFTRUE 59368
59354: LD_INT 29
59356: DOUBLE
59357: EQUAL
59358: IFTRUE 59368
59360: LD_INT 30
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59368
59366: GO 59424
59368: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59369: LD_ADDR_VAR 0 9
59373: PUSH
59374: LD_VAR 0 59
59378: PUSH
59379: LD_VAR 0 60
59383: PUSH
59384: LD_VAR 0 61
59388: PUSH
59389: LD_VAR 0 62
59393: PUSH
59394: LD_VAR 0 63
59398: PUSH
59399: LD_VAR 0 64
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: PUSH
59412: LD_VAR 0 4
59416: PUSH
59417: LD_INT 1
59419: PLUS
59420: ARRAY
59421: ST_TO_ADDR
59422: GO 59425
59424: POP
// temp_list2 = [ ] ;
59425: LD_ADDR_VAR 0 10
59429: PUSH
59430: EMPTY
59431: ST_TO_ADDR
// for i in temp_list do
59432: LD_ADDR_VAR 0 8
59436: PUSH
59437: LD_VAR 0 9
59441: PUSH
59442: FOR_IN
59443: IFFALSE 59495
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59445: LD_ADDR_VAR 0 10
59449: PUSH
59450: LD_VAR 0 10
59454: PUSH
59455: LD_VAR 0 8
59459: PUSH
59460: LD_INT 1
59462: ARRAY
59463: PUSH
59464: LD_VAR 0 2
59468: PLUS
59469: PUSH
59470: LD_VAR 0 8
59474: PUSH
59475: LD_INT 2
59477: ARRAY
59478: PUSH
59479: LD_VAR 0 3
59483: PLUS
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: ADD
59492: ST_TO_ADDR
59493: GO 59442
59495: POP
59496: POP
// result = temp_list2 ;
59497: LD_ADDR_VAR 0 7
59501: PUSH
59502: LD_VAR 0 10
59506: ST_TO_ADDR
// end ;
59507: LD_VAR 0 7
59511: RET
// export function EnemyInRange ( unit , dist ) ; begin
59512: LD_INT 0
59514: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59515: LD_ADDR_VAR 0 3
59519: PUSH
59520: LD_VAR 0 1
59524: PPUSH
59525: CALL_OW 255
59529: PPUSH
59530: LD_VAR 0 1
59534: PPUSH
59535: CALL_OW 250
59539: PPUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 251
59549: PPUSH
59550: LD_VAR 0 2
59554: PPUSH
59555: CALL 32914 0 4
59559: PUSH
59560: LD_INT 4
59562: ARRAY
59563: ST_TO_ADDR
// end ;
59564: LD_VAR 0 3
59568: RET
// export function PlayerSeeMe ( unit ) ; begin
59569: LD_INT 0
59571: PPUSH
// result := See ( your_side , unit ) ;
59572: LD_ADDR_VAR 0 2
59576: PUSH
59577: LD_OWVAR 2
59581: PPUSH
59582: LD_VAR 0 1
59586: PPUSH
59587: CALL_OW 292
59591: ST_TO_ADDR
// end ;
59592: LD_VAR 0 2
59596: RET
// export function ReverseDir ( unit ) ; begin
59597: LD_INT 0
59599: PPUSH
// if not unit then
59600: LD_VAR 0 1
59604: NOT
59605: IFFALSE 59609
// exit ;
59607: GO 59632
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59609: LD_ADDR_VAR 0 2
59613: PUSH
59614: LD_VAR 0 1
59618: PPUSH
59619: CALL_OW 254
59623: PUSH
59624: LD_INT 3
59626: PLUS
59627: PUSH
59628: LD_INT 6
59630: MOD
59631: ST_TO_ADDR
// end ;
59632: LD_VAR 0 2
59636: RET
// export function ReverseArray ( array ) ; var i ; begin
59637: LD_INT 0
59639: PPUSH
59640: PPUSH
// if not array then
59641: LD_VAR 0 1
59645: NOT
59646: IFFALSE 59650
// exit ;
59648: GO 59705
// result := [ ] ;
59650: LD_ADDR_VAR 0 2
59654: PUSH
59655: EMPTY
59656: ST_TO_ADDR
// for i := array downto 1 do
59657: LD_ADDR_VAR 0 3
59661: PUSH
59662: DOUBLE
59663: LD_VAR 0 1
59667: INC
59668: ST_TO_ADDR
59669: LD_INT 1
59671: PUSH
59672: FOR_DOWNTO
59673: IFFALSE 59703
// result := Join ( result , array [ i ] ) ;
59675: LD_ADDR_VAR 0 2
59679: PUSH
59680: LD_VAR 0 2
59684: PPUSH
59685: LD_VAR 0 1
59689: PUSH
59690: LD_VAR 0 3
59694: ARRAY
59695: PPUSH
59696: CALL 64349 0 2
59700: ST_TO_ADDR
59701: GO 59672
59703: POP
59704: POP
// end ;
59705: LD_VAR 0 2
59709: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59710: LD_INT 0
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
59716: PPUSH
59717: PPUSH
// if not unit or not hexes then
59718: LD_VAR 0 1
59722: NOT
59723: PUSH
59724: LD_VAR 0 2
59728: NOT
59729: OR
59730: IFFALSE 59734
// exit ;
59732: GO 59857
// dist := 9999 ;
59734: LD_ADDR_VAR 0 5
59738: PUSH
59739: LD_INT 9999
59741: ST_TO_ADDR
// for i = 1 to hexes do
59742: LD_ADDR_VAR 0 4
59746: PUSH
59747: DOUBLE
59748: LD_INT 1
59750: DEC
59751: ST_TO_ADDR
59752: LD_VAR 0 2
59756: PUSH
59757: FOR_TO
59758: IFFALSE 59845
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59760: LD_ADDR_VAR 0 6
59764: PUSH
59765: LD_VAR 0 1
59769: PPUSH
59770: LD_VAR 0 2
59774: PUSH
59775: LD_VAR 0 4
59779: ARRAY
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PPUSH
59785: LD_VAR 0 2
59789: PUSH
59790: LD_VAR 0 4
59794: ARRAY
59795: PUSH
59796: LD_INT 2
59798: ARRAY
59799: PPUSH
59800: CALL_OW 297
59804: ST_TO_ADDR
// if tdist < dist then
59805: LD_VAR 0 6
59809: PUSH
59810: LD_VAR 0 5
59814: LESS
59815: IFFALSE 59843
// begin hex := hexes [ i ] ;
59817: LD_ADDR_VAR 0 8
59821: PUSH
59822: LD_VAR 0 2
59826: PUSH
59827: LD_VAR 0 4
59831: ARRAY
59832: ST_TO_ADDR
// dist := tdist ;
59833: LD_ADDR_VAR 0 5
59837: PUSH
59838: LD_VAR 0 6
59842: ST_TO_ADDR
// end ; end ;
59843: GO 59757
59845: POP
59846: POP
// result := hex ;
59847: LD_ADDR_VAR 0 3
59851: PUSH
59852: LD_VAR 0 8
59856: ST_TO_ADDR
// end ;
59857: LD_VAR 0 3
59861: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59862: LD_INT 0
59864: PPUSH
59865: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59866: LD_VAR 0 1
59870: NOT
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_INT 21
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 23
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PPUSH
59901: CALL_OW 69
59905: IN
59906: NOT
59907: OR
59908: IFFALSE 59912
// exit ;
59910: GO 59959
// for i = 1 to 3 do
59912: LD_ADDR_VAR 0 3
59916: PUSH
59917: DOUBLE
59918: LD_INT 1
59920: DEC
59921: ST_TO_ADDR
59922: LD_INT 3
59924: PUSH
59925: FOR_TO
59926: IFFALSE 59957
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59928: LD_VAR 0 1
59932: PPUSH
59933: CALL_OW 250
59937: PPUSH
59938: LD_VAR 0 1
59942: PPUSH
59943: CALL_OW 251
59947: PPUSH
59948: LD_INT 1
59950: PPUSH
59951: CALL_OW 453
59955: GO 59925
59957: POP
59958: POP
// end ;
59959: LD_VAR 0 2
59963: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59964: LD_INT 0
59966: PPUSH
59967: PPUSH
59968: PPUSH
59969: PPUSH
59970: PPUSH
59971: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59972: LD_VAR 0 1
59976: NOT
59977: PUSH
59978: LD_VAR 0 2
59982: NOT
59983: OR
59984: PUSH
59985: LD_VAR 0 1
59989: PPUSH
59990: CALL_OW 314
59994: OR
59995: IFFALSE 59999
// exit ;
59997: GO 60466
// if GetLives ( i ) < 250 then
59999: LD_VAR 0 4
60003: PPUSH
60004: CALL_OW 256
60008: PUSH
60009: LD_INT 250
60011: LESS
60012: IFFALSE 60025
// begin ComAutodestruct ( i ) ;
60014: LD_VAR 0 4
60018: PPUSH
60019: CALL 59862 0 1
// exit ;
60023: GO 60466
// end ; x := GetX ( enemy_unit ) ;
60025: LD_ADDR_VAR 0 7
60029: PUSH
60030: LD_VAR 0 2
60034: PPUSH
60035: CALL_OW 250
60039: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60040: LD_ADDR_VAR 0 8
60044: PUSH
60045: LD_VAR 0 2
60049: PPUSH
60050: CALL_OW 251
60054: ST_TO_ADDR
// if not x or not y then
60055: LD_VAR 0 7
60059: NOT
60060: PUSH
60061: LD_VAR 0 8
60065: NOT
60066: OR
60067: IFFALSE 60071
// exit ;
60069: GO 60466
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60071: LD_ADDR_VAR 0 6
60075: PUSH
60076: LD_VAR 0 7
60080: PPUSH
60081: LD_INT 0
60083: PPUSH
60084: LD_INT 4
60086: PPUSH
60087: CALL_OW 272
60091: PUSH
60092: LD_VAR 0 8
60096: PPUSH
60097: LD_INT 0
60099: PPUSH
60100: LD_INT 4
60102: PPUSH
60103: CALL_OW 273
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_VAR 0 7
60116: PPUSH
60117: LD_INT 1
60119: PPUSH
60120: LD_INT 4
60122: PPUSH
60123: CALL_OW 272
60127: PUSH
60128: LD_VAR 0 8
60132: PPUSH
60133: LD_INT 1
60135: PPUSH
60136: LD_INT 4
60138: PPUSH
60139: CALL_OW 273
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 7
60152: PPUSH
60153: LD_INT 2
60155: PPUSH
60156: LD_INT 4
60158: PPUSH
60159: CALL_OW 272
60163: PUSH
60164: LD_VAR 0 8
60168: PPUSH
60169: LD_INT 2
60171: PPUSH
60172: LD_INT 4
60174: PPUSH
60175: CALL_OW 273
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_VAR 0 7
60188: PPUSH
60189: LD_INT 3
60191: PPUSH
60192: LD_INT 4
60194: PPUSH
60195: CALL_OW 272
60199: PUSH
60200: LD_VAR 0 8
60204: PPUSH
60205: LD_INT 3
60207: PPUSH
60208: LD_INT 4
60210: PPUSH
60211: CALL_OW 273
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_VAR 0 7
60224: PPUSH
60225: LD_INT 4
60227: PPUSH
60228: LD_INT 4
60230: PPUSH
60231: CALL_OW 272
60235: PUSH
60236: LD_VAR 0 8
60240: PPUSH
60241: LD_INT 4
60243: PPUSH
60244: LD_INT 4
60246: PPUSH
60247: CALL_OW 273
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_VAR 0 7
60260: PPUSH
60261: LD_INT 5
60263: PPUSH
60264: LD_INT 4
60266: PPUSH
60267: CALL_OW 272
60271: PUSH
60272: LD_VAR 0 8
60276: PPUSH
60277: LD_INT 5
60279: PPUSH
60280: LD_INT 4
60282: PPUSH
60283: CALL_OW 273
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// for i = tmp downto 1 do
60300: LD_ADDR_VAR 0 4
60304: PUSH
60305: DOUBLE
60306: LD_VAR 0 6
60310: INC
60311: ST_TO_ADDR
60312: LD_INT 1
60314: PUSH
60315: FOR_DOWNTO
60316: IFFALSE 60417
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60318: LD_VAR 0 6
60322: PUSH
60323: LD_VAR 0 4
60327: ARRAY
60328: PUSH
60329: LD_INT 1
60331: ARRAY
60332: PPUSH
60333: LD_VAR 0 6
60337: PUSH
60338: LD_VAR 0 4
60342: ARRAY
60343: PUSH
60344: LD_INT 2
60346: ARRAY
60347: PPUSH
60348: CALL_OW 488
60352: NOT
60353: PUSH
60354: LD_VAR 0 6
60358: PUSH
60359: LD_VAR 0 4
60363: ARRAY
60364: PUSH
60365: LD_INT 1
60367: ARRAY
60368: PPUSH
60369: LD_VAR 0 6
60373: PUSH
60374: LD_VAR 0 4
60378: ARRAY
60379: PUSH
60380: LD_INT 2
60382: ARRAY
60383: PPUSH
60384: CALL_OW 428
60388: PUSH
60389: LD_INT 0
60391: NONEQUAL
60392: OR
60393: IFFALSE 60415
// tmp := Delete ( tmp , i ) ;
60395: LD_ADDR_VAR 0 6
60399: PUSH
60400: LD_VAR 0 6
60404: PPUSH
60405: LD_VAR 0 4
60409: PPUSH
60410: CALL_OW 3
60414: ST_TO_ADDR
60415: GO 60315
60417: POP
60418: POP
// j := GetClosestHex ( unit , tmp ) ;
60419: LD_ADDR_VAR 0 5
60423: PUSH
60424: LD_VAR 0 1
60428: PPUSH
60429: LD_VAR 0 6
60433: PPUSH
60434: CALL 59710 0 2
60438: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60439: LD_VAR 0 1
60443: PPUSH
60444: LD_VAR 0 5
60448: PUSH
60449: LD_INT 1
60451: ARRAY
60452: PPUSH
60453: LD_VAR 0 5
60457: PUSH
60458: LD_INT 2
60460: ARRAY
60461: PPUSH
60462: CALL_OW 111
// end ;
60466: LD_VAR 0 3
60470: RET
// export function PrepareApemanSoldier ( ) ; begin
60471: LD_INT 0
60473: PPUSH
// uc_nation := 0 ;
60474: LD_ADDR_OWVAR 21
60478: PUSH
60479: LD_INT 0
60481: ST_TO_ADDR
// hc_sex := sex_male ;
60482: LD_ADDR_OWVAR 27
60486: PUSH
60487: LD_INT 1
60489: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60490: LD_ADDR_OWVAR 28
60494: PUSH
60495: LD_INT 15
60497: ST_TO_ADDR
// hc_gallery :=  ;
60498: LD_ADDR_OWVAR 33
60502: PUSH
60503: LD_STRING 
60505: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60506: LD_ADDR_OWVAR 31
60510: PUSH
60511: LD_INT 0
60513: PPUSH
60514: LD_INT 3
60516: PPUSH
60517: CALL_OW 12
60521: PUSH
60522: LD_INT 0
60524: PPUSH
60525: LD_INT 3
60527: PPUSH
60528: CALL_OW 12
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// end ;
60545: LD_VAR 0 1
60549: RET
// export function PrepareApemanEngineer ( ) ; begin
60550: LD_INT 0
60552: PPUSH
// uc_nation := 0 ;
60553: LD_ADDR_OWVAR 21
60557: PUSH
60558: LD_INT 0
60560: ST_TO_ADDR
// hc_sex := sex_male ;
60561: LD_ADDR_OWVAR 27
60565: PUSH
60566: LD_INT 1
60568: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60569: LD_ADDR_OWVAR 28
60573: PUSH
60574: LD_INT 16
60576: ST_TO_ADDR
// hc_gallery :=  ;
60577: LD_ADDR_OWVAR 33
60581: PUSH
60582: LD_STRING 
60584: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60585: LD_ADDR_OWVAR 31
60589: PUSH
60590: LD_INT 0
60592: PPUSH
60593: LD_INT 3
60595: PPUSH
60596: CALL_OW 12
60600: PUSH
60601: LD_INT 0
60603: PPUSH
60604: LD_INT 3
60606: PPUSH
60607: CALL_OW 12
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: ST_TO_ADDR
// end ;
60624: LD_VAR 0 1
60628: RET
// export function PrepareApeman ( agressivity ) ; begin
60629: LD_INT 0
60631: PPUSH
// uc_side := 0 ;
60632: LD_ADDR_OWVAR 20
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
// uc_nation := 0 ;
60640: LD_ADDR_OWVAR 21
60644: PUSH
60645: LD_INT 0
60647: ST_TO_ADDR
// hc_sex := sex_male ;
60648: LD_ADDR_OWVAR 27
60652: PUSH
60653: LD_INT 1
60655: ST_TO_ADDR
// hc_class := class_apeman ;
60656: LD_ADDR_OWVAR 28
60660: PUSH
60661: LD_INT 12
60663: ST_TO_ADDR
// hc_gallery :=  ;
60664: LD_ADDR_OWVAR 33
60668: PUSH
60669: LD_STRING 
60671: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60672: LD_ADDR_OWVAR 35
60676: PUSH
60677: LD_VAR 0 1
60681: NEG
60682: PPUSH
60683: LD_VAR 0 1
60687: PPUSH
60688: CALL_OW 12
60692: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60693: LD_ADDR_OWVAR 31
60697: PUSH
60698: LD_INT 0
60700: PPUSH
60701: LD_INT 3
60703: PPUSH
60704: CALL_OW 12
60708: PUSH
60709: LD_INT 0
60711: PPUSH
60712: LD_INT 3
60714: PPUSH
60715: CALL_OW 12
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: ST_TO_ADDR
// end ;
60732: LD_VAR 0 2
60736: RET
// export function PrepareTiger ( agressivity ) ; begin
60737: LD_INT 0
60739: PPUSH
// uc_side := 0 ;
60740: LD_ADDR_OWVAR 20
60744: PUSH
60745: LD_INT 0
60747: ST_TO_ADDR
// uc_nation := 0 ;
60748: LD_ADDR_OWVAR 21
60752: PUSH
60753: LD_INT 0
60755: ST_TO_ADDR
// hc_class := class_tiger ;
60756: LD_ADDR_OWVAR 28
60760: PUSH
60761: LD_INT 14
60763: ST_TO_ADDR
// hc_gallery :=  ;
60764: LD_ADDR_OWVAR 33
60768: PUSH
60769: LD_STRING 
60771: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60772: LD_ADDR_OWVAR 35
60776: PUSH
60777: LD_VAR 0 1
60781: NEG
60782: PPUSH
60783: LD_VAR 0 1
60787: PPUSH
60788: CALL_OW 12
60792: ST_TO_ADDR
// end ;
60793: LD_VAR 0 2
60797: RET
// export function PrepareEnchidna ( ) ; begin
60798: LD_INT 0
60800: PPUSH
// uc_side := 0 ;
60801: LD_ADDR_OWVAR 20
60805: PUSH
60806: LD_INT 0
60808: ST_TO_ADDR
// uc_nation := 0 ;
60809: LD_ADDR_OWVAR 21
60813: PUSH
60814: LD_INT 0
60816: ST_TO_ADDR
// hc_class := class_baggie ;
60817: LD_ADDR_OWVAR 28
60821: PUSH
60822: LD_INT 13
60824: ST_TO_ADDR
// hc_gallery :=  ;
60825: LD_ADDR_OWVAR 33
60829: PUSH
60830: LD_STRING 
60832: ST_TO_ADDR
// end ;
60833: LD_VAR 0 1
60837: RET
// export function PrepareFrog ( ) ; begin
60838: LD_INT 0
60840: PPUSH
// uc_side := 0 ;
60841: LD_ADDR_OWVAR 20
60845: PUSH
60846: LD_INT 0
60848: ST_TO_ADDR
// uc_nation := 0 ;
60849: LD_ADDR_OWVAR 21
60853: PUSH
60854: LD_INT 0
60856: ST_TO_ADDR
// hc_class := class_frog ;
60857: LD_ADDR_OWVAR 28
60861: PUSH
60862: LD_INT 19
60864: ST_TO_ADDR
// hc_gallery :=  ;
60865: LD_ADDR_OWVAR 33
60869: PUSH
60870: LD_STRING 
60872: ST_TO_ADDR
// end ;
60873: LD_VAR 0 1
60877: RET
// export function PrepareFish ( ) ; begin
60878: LD_INT 0
60880: PPUSH
// uc_side := 0 ;
60881: LD_ADDR_OWVAR 20
60885: PUSH
60886: LD_INT 0
60888: ST_TO_ADDR
// uc_nation := 0 ;
60889: LD_ADDR_OWVAR 21
60893: PUSH
60894: LD_INT 0
60896: ST_TO_ADDR
// hc_class := class_fish ;
60897: LD_ADDR_OWVAR 28
60901: PUSH
60902: LD_INT 20
60904: ST_TO_ADDR
// hc_gallery :=  ;
60905: LD_ADDR_OWVAR 33
60909: PUSH
60910: LD_STRING 
60912: ST_TO_ADDR
// end ;
60913: LD_VAR 0 1
60917: RET
// export function PrepareBird ( ) ; begin
60918: LD_INT 0
60920: PPUSH
// uc_side := 0 ;
60921: LD_ADDR_OWVAR 20
60925: PUSH
60926: LD_INT 0
60928: ST_TO_ADDR
// uc_nation := 0 ;
60929: LD_ADDR_OWVAR 21
60933: PUSH
60934: LD_INT 0
60936: ST_TO_ADDR
// hc_class := class_phororhacos ;
60937: LD_ADDR_OWVAR 28
60941: PUSH
60942: LD_INT 18
60944: ST_TO_ADDR
// hc_gallery :=  ;
60945: LD_ADDR_OWVAR 33
60949: PUSH
60950: LD_STRING 
60952: ST_TO_ADDR
// end ;
60953: LD_VAR 0 1
60957: RET
// export function PrepareHorse ( ) ; begin
60958: LD_INT 0
60960: PPUSH
// uc_side := 0 ;
60961: LD_ADDR_OWVAR 20
60965: PUSH
60966: LD_INT 0
60968: ST_TO_ADDR
// uc_nation := 0 ;
60969: LD_ADDR_OWVAR 21
60973: PUSH
60974: LD_INT 0
60976: ST_TO_ADDR
// hc_class := class_horse ;
60977: LD_ADDR_OWVAR 28
60981: PUSH
60982: LD_INT 21
60984: ST_TO_ADDR
// hc_gallery :=  ;
60985: LD_ADDR_OWVAR 33
60989: PUSH
60990: LD_STRING 
60992: ST_TO_ADDR
// end ;
60993: LD_VAR 0 1
60997: RET
// export function PrepareMastodont ( ) ; begin
60998: LD_INT 0
61000: PPUSH
// uc_side := 0 ;
61001: LD_ADDR_OWVAR 20
61005: PUSH
61006: LD_INT 0
61008: ST_TO_ADDR
// uc_nation := 0 ;
61009: LD_ADDR_OWVAR 21
61013: PUSH
61014: LD_INT 0
61016: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61017: LD_ADDR_OWVAR 37
61021: PUSH
61022: LD_INT 31
61024: ST_TO_ADDR
// vc_control := control_rider ;
61025: LD_ADDR_OWVAR 38
61029: PUSH
61030: LD_INT 4
61032: ST_TO_ADDR
// end ;
61033: LD_VAR 0 1
61037: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61038: LD_INT 0
61040: PPUSH
61041: PPUSH
61042: PPUSH
// uc_side = 0 ;
61043: LD_ADDR_OWVAR 20
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// uc_nation = 0 ;
61051: LD_ADDR_OWVAR 21
61055: PUSH
61056: LD_INT 0
61058: ST_TO_ADDR
// InitHc_All ( ) ;
61059: CALL_OW 584
// InitVc ;
61063: CALL_OW 20
// if mastodonts then
61067: LD_VAR 0 6
61071: IFFALSE 61138
// for i = 1 to mastodonts do
61073: LD_ADDR_VAR 0 11
61077: PUSH
61078: DOUBLE
61079: LD_INT 1
61081: DEC
61082: ST_TO_ADDR
61083: LD_VAR 0 6
61087: PUSH
61088: FOR_TO
61089: IFFALSE 61136
// begin vc_chassis := 31 ;
61091: LD_ADDR_OWVAR 37
61095: PUSH
61096: LD_INT 31
61098: ST_TO_ADDR
// vc_control := control_rider ;
61099: LD_ADDR_OWVAR 38
61103: PUSH
61104: LD_INT 4
61106: ST_TO_ADDR
// animal := CreateVehicle ;
61107: LD_ADDR_VAR 0 12
61111: PUSH
61112: CALL_OW 45
61116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61117: LD_VAR 0 12
61121: PPUSH
61122: LD_VAR 0 8
61126: PPUSH
61127: LD_INT 0
61129: PPUSH
61130: CALL 63266 0 3
// end ;
61134: GO 61088
61136: POP
61137: POP
// if horses then
61138: LD_VAR 0 5
61142: IFFALSE 61209
// for i = 1 to horses do
61144: LD_ADDR_VAR 0 11
61148: PUSH
61149: DOUBLE
61150: LD_INT 1
61152: DEC
61153: ST_TO_ADDR
61154: LD_VAR 0 5
61158: PUSH
61159: FOR_TO
61160: IFFALSE 61207
// begin hc_class := 21 ;
61162: LD_ADDR_OWVAR 28
61166: PUSH
61167: LD_INT 21
61169: ST_TO_ADDR
// hc_gallery :=  ;
61170: LD_ADDR_OWVAR 33
61174: PUSH
61175: LD_STRING 
61177: ST_TO_ADDR
// animal := CreateHuman ;
61178: LD_ADDR_VAR 0 12
61182: PUSH
61183: CALL_OW 44
61187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61188: LD_VAR 0 12
61192: PPUSH
61193: LD_VAR 0 8
61197: PPUSH
61198: LD_INT 0
61200: PPUSH
61201: CALL 63266 0 3
// end ;
61205: GO 61159
61207: POP
61208: POP
// if birds then
61209: LD_VAR 0 1
61213: IFFALSE 61280
// for i = 1 to birds do
61215: LD_ADDR_VAR 0 11
61219: PUSH
61220: DOUBLE
61221: LD_INT 1
61223: DEC
61224: ST_TO_ADDR
61225: LD_VAR 0 1
61229: PUSH
61230: FOR_TO
61231: IFFALSE 61278
// begin hc_class = 18 ;
61233: LD_ADDR_OWVAR 28
61237: PUSH
61238: LD_INT 18
61240: ST_TO_ADDR
// hc_gallery =  ;
61241: LD_ADDR_OWVAR 33
61245: PUSH
61246: LD_STRING 
61248: ST_TO_ADDR
// animal := CreateHuman ;
61249: LD_ADDR_VAR 0 12
61253: PUSH
61254: CALL_OW 44
61258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61259: LD_VAR 0 12
61263: PPUSH
61264: LD_VAR 0 8
61268: PPUSH
61269: LD_INT 0
61271: PPUSH
61272: CALL 63266 0 3
// end ;
61276: GO 61230
61278: POP
61279: POP
// if tigers then
61280: LD_VAR 0 2
61284: IFFALSE 61368
// for i = 1 to tigers do
61286: LD_ADDR_VAR 0 11
61290: PUSH
61291: DOUBLE
61292: LD_INT 1
61294: DEC
61295: ST_TO_ADDR
61296: LD_VAR 0 2
61300: PUSH
61301: FOR_TO
61302: IFFALSE 61366
// begin hc_class = class_tiger ;
61304: LD_ADDR_OWVAR 28
61308: PUSH
61309: LD_INT 14
61311: ST_TO_ADDR
// hc_gallery =  ;
61312: LD_ADDR_OWVAR 33
61316: PUSH
61317: LD_STRING 
61319: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61320: LD_ADDR_OWVAR 35
61324: PUSH
61325: LD_INT 7
61327: NEG
61328: PPUSH
61329: LD_INT 7
61331: PPUSH
61332: CALL_OW 12
61336: ST_TO_ADDR
// animal := CreateHuman ;
61337: LD_ADDR_VAR 0 12
61341: PUSH
61342: CALL_OW 44
61346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61347: LD_VAR 0 12
61351: PPUSH
61352: LD_VAR 0 8
61356: PPUSH
61357: LD_INT 0
61359: PPUSH
61360: CALL 63266 0 3
// end ;
61364: GO 61301
61366: POP
61367: POP
// if apemans then
61368: LD_VAR 0 3
61372: IFFALSE 61495
// for i = 1 to apemans do
61374: LD_ADDR_VAR 0 11
61378: PUSH
61379: DOUBLE
61380: LD_INT 1
61382: DEC
61383: ST_TO_ADDR
61384: LD_VAR 0 3
61388: PUSH
61389: FOR_TO
61390: IFFALSE 61493
// begin hc_class = class_apeman ;
61392: LD_ADDR_OWVAR 28
61396: PUSH
61397: LD_INT 12
61399: ST_TO_ADDR
// hc_gallery =  ;
61400: LD_ADDR_OWVAR 33
61404: PUSH
61405: LD_STRING 
61407: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61408: LD_ADDR_OWVAR 35
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PPUSH
61417: LD_INT 2
61419: PPUSH
61420: CALL_OW 12
61424: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61425: LD_ADDR_OWVAR 31
61429: PUSH
61430: LD_INT 1
61432: PPUSH
61433: LD_INT 3
61435: PPUSH
61436: CALL_OW 12
61440: PUSH
61441: LD_INT 1
61443: PPUSH
61444: LD_INT 3
61446: PPUSH
61447: CALL_OW 12
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// animal := CreateHuman ;
61464: LD_ADDR_VAR 0 12
61468: PUSH
61469: CALL_OW 44
61473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61474: LD_VAR 0 12
61478: PPUSH
61479: LD_VAR 0 8
61483: PPUSH
61484: LD_INT 0
61486: PPUSH
61487: CALL 63266 0 3
// end ;
61491: GO 61389
61493: POP
61494: POP
// if enchidnas then
61495: LD_VAR 0 4
61499: IFFALSE 61566
// for i = 1 to enchidnas do
61501: LD_ADDR_VAR 0 11
61505: PUSH
61506: DOUBLE
61507: LD_INT 1
61509: DEC
61510: ST_TO_ADDR
61511: LD_VAR 0 4
61515: PUSH
61516: FOR_TO
61517: IFFALSE 61564
// begin hc_class = 13 ;
61519: LD_ADDR_OWVAR 28
61523: PUSH
61524: LD_INT 13
61526: ST_TO_ADDR
// hc_gallery =  ;
61527: LD_ADDR_OWVAR 33
61531: PUSH
61532: LD_STRING 
61534: ST_TO_ADDR
// animal := CreateHuman ;
61535: LD_ADDR_VAR 0 12
61539: PUSH
61540: CALL_OW 44
61544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61545: LD_VAR 0 12
61549: PPUSH
61550: LD_VAR 0 8
61554: PPUSH
61555: LD_INT 0
61557: PPUSH
61558: CALL 63266 0 3
// end ;
61562: GO 61516
61564: POP
61565: POP
// if fishes then
61566: LD_VAR 0 7
61570: IFFALSE 61637
// for i = 1 to fishes do
61572: LD_ADDR_VAR 0 11
61576: PUSH
61577: DOUBLE
61578: LD_INT 1
61580: DEC
61581: ST_TO_ADDR
61582: LD_VAR 0 7
61586: PUSH
61587: FOR_TO
61588: IFFALSE 61635
// begin hc_class = 20 ;
61590: LD_ADDR_OWVAR 28
61594: PUSH
61595: LD_INT 20
61597: ST_TO_ADDR
// hc_gallery =  ;
61598: LD_ADDR_OWVAR 33
61602: PUSH
61603: LD_STRING 
61605: ST_TO_ADDR
// animal := CreateHuman ;
61606: LD_ADDR_VAR 0 12
61610: PUSH
61611: CALL_OW 44
61615: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61616: LD_VAR 0 12
61620: PPUSH
61621: LD_VAR 0 9
61625: PPUSH
61626: LD_INT 0
61628: PPUSH
61629: CALL 63266 0 3
// end ;
61633: GO 61587
61635: POP
61636: POP
// end ;
61637: LD_VAR 0 10
61641: RET
// export function WantHeal ( sci , unit ) ; begin
61642: LD_INT 0
61644: PPUSH
// if GetTaskList ( sci ) > 0 then
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL_OW 437
61654: PUSH
61655: LD_INT 0
61657: GREATER
61658: IFFALSE 61728
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 437
61669: PUSH
61670: LD_INT 1
61672: ARRAY
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: PUSH
61678: LD_STRING l
61680: EQUAL
61681: PUSH
61682: LD_VAR 0 1
61686: PPUSH
61687: CALL_OW 437
61691: PUSH
61692: LD_INT 1
61694: ARRAY
61695: PUSH
61696: LD_INT 4
61698: ARRAY
61699: PUSH
61700: LD_VAR 0 2
61704: EQUAL
61705: AND
61706: IFFALSE 61718
// result := true else
61708: LD_ADDR_VAR 0 3
61712: PUSH
61713: LD_INT 1
61715: ST_TO_ADDR
61716: GO 61726
// result := false ;
61718: LD_ADDR_VAR 0 3
61722: PUSH
61723: LD_INT 0
61725: ST_TO_ADDR
// end else
61726: GO 61736
// result := false ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_INT 0
61735: ST_TO_ADDR
// end ;
61736: LD_VAR 0 3
61740: RET
// export function HealTarget ( sci ) ; begin
61741: LD_INT 0
61743: PPUSH
// if not sci then
61744: LD_VAR 0 1
61748: NOT
61749: IFFALSE 61753
// exit ;
61751: GO 61818
// result := 0 ;
61753: LD_ADDR_VAR 0 2
61757: PUSH
61758: LD_INT 0
61760: ST_TO_ADDR
// if GetTaskList ( sci ) then
61761: LD_VAR 0 1
61765: PPUSH
61766: CALL_OW 437
61770: IFFALSE 61818
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61772: LD_VAR 0 1
61776: PPUSH
61777: CALL_OW 437
61781: PUSH
61782: LD_INT 1
61784: ARRAY
61785: PUSH
61786: LD_INT 1
61788: ARRAY
61789: PUSH
61790: LD_STRING l
61792: EQUAL
61793: IFFALSE 61818
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61795: LD_ADDR_VAR 0 2
61799: PUSH
61800: LD_VAR 0 1
61804: PPUSH
61805: CALL_OW 437
61809: PUSH
61810: LD_INT 1
61812: ARRAY
61813: PUSH
61814: LD_INT 4
61816: ARRAY
61817: ST_TO_ADDR
// end ;
61818: LD_VAR 0 2
61822: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61823: LD_INT 0
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
// if not base_units then
61829: LD_VAR 0 1
61833: NOT
61834: IFFALSE 61838
// exit ;
61836: GO 61925
// result := false ;
61838: LD_ADDR_VAR 0 2
61842: PUSH
61843: LD_INT 0
61845: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61846: LD_ADDR_VAR 0 5
61850: PUSH
61851: LD_VAR 0 1
61855: PPUSH
61856: LD_INT 21
61858: PUSH
61859: LD_INT 3
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PPUSH
61866: CALL_OW 72
61870: ST_TO_ADDR
// if not tmp then
61871: LD_VAR 0 5
61875: NOT
61876: IFFALSE 61880
// exit ;
61878: GO 61925
// for i in tmp do
61880: LD_ADDR_VAR 0 3
61884: PUSH
61885: LD_VAR 0 5
61889: PUSH
61890: FOR_IN
61891: IFFALSE 61923
// begin result := EnemyInRange ( i , 22 ) ;
61893: LD_ADDR_VAR 0 2
61897: PUSH
61898: LD_VAR 0 3
61902: PPUSH
61903: LD_INT 22
61905: PPUSH
61906: CALL 59512 0 2
61910: ST_TO_ADDR
// if result then
61911: LD_VAR 0 2
61915: IFFALSE 61921
// exit ;
61917: POP
61918: POP
61919: GO 61925
// end ;
61921: GO 61890
61923: POP
61924: POP
// end ;
61925: LD_VAR 0 2
61929: RET
// export function FilterByTag ( units , tag ) ; begin
61930: LD_INT 0
61932: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61933: LD_ADDR_VAR 0 3
61937: PUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: LD_INT 120
61945: PUSH
61946: LD_VAR 0 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PPUSH
61955: CALL_OW 72
61959: ST_TO_ADDR
// end ;
61960: LD_VAR 0 3
61964: RET
// export function IsDriver ( un ) ; begin
61965: LD_INT 0
61967: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61968: LD_ADDR_VAR 0 2
61972: PUSH
61973: LD_VAR 0 1
61977: PUSH
61978: LD_INT 55
61980: PUSH
61981: EMPTY
61982: LIST
61983: PPUSH
61984: CALL_OW 69
61988: IN
61989: ST_TO_ADDR
// end ;
61990: LD_VAR 0 2
61994: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61995: LD_INT 0
61997: PPUSH
61998: PPUSH
// list := [ ] ;
61999: LD_ADDR_VAR 0 5
62003: PUSH
62004: EMPTY
62005: ST_TO_ADDR
// case d of 0 :
62006: LD_VAR 0 3
62010: PUSH
62011: LD_INT 0
62013: DOUBLE
62014: EQUAL
62015: IFTRUE 62019
62017: GO 62152
62019: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62020: LD_ADDR_VAR 0 5
62024: PUSH
62025: LD_VAR 0 1
62029: PUSH
62030: LD_INT 4
62032: MINUS
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 4
62041: MINUS
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_INT 3
62058: MINUS
62059: PUSH
62060: LD_VAR 0 2
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: LD_VAR 0 1
62077: PUSH
62078: LD_INT 4
62080: PLUS
62081: PUSH
62082: LD_VAR 0 2
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: LD_VAR 0 1
62099: PUSH
62100: LD_INT 3
62102: PLUS
62103: PUSH
62104: LD_VAR 0 2
62108: PUSH
62109: LD_INT 3
62111: PLUS
62112: PUSH
62113: LD_INT 5
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: PUSH
62121: LD_VAR 0 1
62125: PUSH
62126: LD_VAR 0 2
62130: PUSH
62131: LD_INT 4
62133: PLUS
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// end ; 1 :
62150: GO 62850
62152: LD_INT 1
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62160
62158: GO 62293
62160: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62161: LD_ADDR_VAR 0 5
62165: PUSH
62166: LD_VAR 0 1
62170: PUSH
62171: LD_VAR 0 2
62175: PUSH
62176: LD_INT 4
62178: MINUS
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: PUSH
62188: LD_VAR 0 1
62192: PUSH
62193: LD_INT 3
62195: MINUS
62196: PUSH
62197: LD_VAR 0 2
62201: PUSH
62202: LD_INT 3
62204: MINUS
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: LD_VAR 0 1
62218: PUSH
62219: LD_INT 4
62221: MINUS
62222: PUSH
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: PUSH
62236: LD_VAR 0 1
62240: PUSH
62241: LD_VAR 0 2
62245: PUSH
62246: LD_INT 3
62248: PLUS
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: PUSH
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 4
62265: PLUS
62266: PUSH
62267: LD_VAR 0 2
62271: PUSH
62272: LD_INT 4
62274: PLUS
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// end ; 2 :
62291: GO 62850
62293: LD_INT 2
62295: DOUBLE
62296: EQUAL
62297: IFTRUE 62301
62299: GO 62430
62301: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62302: LD_ADDR_VAR 0 5
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: LD_VAR 0 2
62316: PUSH
62317: LD_INT 3
62319: MINUS
62320: PUSH
62321: LD_INT 3
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: LD_VAR 0 1
62333: PUSH
62334: LD_INT 4
62336: PLUS
62337: PUSH
62338: LD_VAR 0 2
62342: PUSH
62343: LD_INT 4
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_INT 4
62363: PLUS
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: PUSH
62373: LD_VAR 0 1
62377: PUSH
62378: LD_INT 3
62380: MINUS
62381: PUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: PUSH
62395: LD_VAR 0 1
62399: PUSH
62400: LD_INT 4
62402: MINUS
62403: PUSH
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 4
62411: MINUS
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: ST_TO_ADDR
// end ; 3 :
62428: GO 62850
62430: LD_INT 3
62432: DOUBLE
62433: EQUAL
62434: IFTRUE 62438
62436: GO 62571
62438: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62439: LD_ADDR_VAR 0 5
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 3
62451: PLUS
62452: PUSH
62453: LD_VAR 0 2
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: PUSH
62466: LD_VAR 0 1
62470: PUSH
62471: LD_INT 4
62473: PLUS
62474: PUSH
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 4
62482: PLUS
62483: PUSH
62484: LD_INT 5
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: LD_VAR 0 1
62496: PUSH
62497: LD_INT 4
62499: MINUS
62500: PUSH
62501: LD_VAR 0 2
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: LD_INT 4
62526: MINUS
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 3
62543: MINUS
62544: PUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_INT 3
62552: MINUS
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: ST_TO_ADDR
// end ; 4 :
62569: GO 62850
62571: LD_INT 4
62573: DOUBLE
62574: EQUAL
62575: IFTRUE 62579
62577: GO 62712
62579: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62580: LD_ADDR_VAR 0 5
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 4
62597: PLUS
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: PUSH
62607: LD_VAR 0 1
62611: PUSH
62612: LD_INT 3
62614: PLUS
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 3
62623: PLUS
62624: PUSH
62625: LD_INT 5
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: LD_VAR 0 1
62637: PUSH
62638: LD_INT 4
62640: PLUS
62641: PUSH
62642: LD_VAR 0 2
62646: PUSH
62647: LD_INT 4
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: PUSH
62655: LD_VAR 0 1
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 3
62667: MINUS
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 4
62684: MINUS
62685: PUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 4
62693: MINUS
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: ST_TO_ADDR
// end ; 5 :
62710: GO 62850
62712: LD_INT 5
62714: DOUBLE
62715: EQUAL
62716: IFTRUE 62720
62718: GO 62849
62720: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62721: LD_ADDR_VAR 0 5
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_INT 4
62733: MINUS
62734: PUSH
62735: LD_VAR 0 2
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: PUSH
62748: LD_VAR 0 1
62752: PUSH
62753: LD_VAR 0 2
62757: PUSH
62758: LD_INT 4
62760: MINUS
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: LD_VAR 0 1
62774: PUSH
62775: LD_INT 4
62777: PLUS
62778: PUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_INT 4
62786: PLUS
62787: PUSH
62788: LD_INT 5
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_INT 3
62803: PLUS
62804: PUSH
62805: LD_VAR 0 2
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: PUSH
62818: LD_VAR 0 1
62822: PUSH
62823: LD_VAR 0 2
62827: PUSH
62828: LD_INT 3
62830: PLUS
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: ST_TO_ADDR
// end ; end ;
62847: GO 62850
62849: POP
// result := list ;
62850: LD_ADDR_VAR 0 4
62854: PUSH
62855: LD_VAR 0 5
62859: ST_TO_ADDR
// end ;
62860: LD_VAR 0 4
62864: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62865: LD_INT 0
62867: PPUSH
62868: PPUSH
62869: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62870: LD_VAR 0 1
62874: NOT
62875: PUSH
62876: LD_VAR 0 2
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: LD_INT 4
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: IN
62899: NOT
62900: OR
62901: IFFALSE 62905
// exit ;
62903: GO 62988
// tmp := [ ] ;
62905: LD_ADDR_VAR 0 5
62909: PUSH
62910: EMPTY
62911: ST_TO_ADDR
// for i in units do
62912: LD_ADDR_VAR 0 4
62916: PUSH
62917: LD_VAR 0 1
62921: PUSH
62922: FOR_IN
62923: IFFALSE 62957
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62925: LD_ADDR_VAR 0 5
62929: PUSH
62930: LD_VAR 0 5
62934: PPUSH
62935: LD_VAR 0 4
62939: PPUSH
62940: LD_VAR 0 2
62944: PPUSH
62945: CALL_OW 259
62949: PPUSH
62950: CALL 64349 0 2
62954: ST_TO_ADDR
62955: GO 62922
62957: POP
62958: POP
// if not tmp then
62959: LD_VAR 0 5
62963: NOT
62964: IFFALSE 62968
// exit ;
62966: GO 62988
// result := SortListByListDesc ( units , tmp ) ;
62968: LD_ADDR_VAR 0 3
62972: PUSH
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_VAR 0 5
62982: PPUSH
62983: CALL_OW 77
62987: ST_TO_ADDR
// end ;
62988: LD_VAR 0 3
62992: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
62997: PPUSH
// result := false ;
62998: LD_ADDR_VAR 0 3
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
// if not building then
63006: LD_VAR 0 2
63010: NOT
63011: IFFALSE 63015
// exit ;
63013: GO 63153
// x := GetX ( building ) ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: CALL_OW 250
63029: ST_TO_ADDR
// y := GetY ( building ) ;
63030: LD_ADDR_VAR 0 5
63034: PUSH
63035: LD_VAR 0 2
63039: PPUSH
63040: CALL_OW 251
63044: ST_TO_ADDR
// if not x or not y then
63045: LD_VAR 0 4
63049: NOT
63050: PUSH
63051: LD_VAR 0 5
63055: NOT
63056: OR
63057: IFFALSE 63061
// exit ;
63059: GO 63153
// if GetTaskList ( unit ) then
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 437
63070: IFFALSE 63153
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63072: LD_STRING e
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 437
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PUSH
63089: LD_INT 1
63091: ARRAY
63092: EQUAL
63093: PUSH
63094: LD_VAR 0 4
63098: PUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 437
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: PUSH
63113: LD_INT 2
63115: ARRAY
63116: EQUAL
63117: AND
63118: PUSH
63119: LD_VAR 0 5
63123: PUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 437
63133: PUSH
63134: LD_INT 1
63136: ARRAY
63137: PUSH
63138: LD_INT 3
63140: ARRAY
63141: EQUAL
63142: AND
63143: IFFALSE 63153
// result := true end ;
63145: LD_ADDR_VAR 0 3
63149: PUSH
63150: LD_INT 1
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 3
63157: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63158: LD_INT 0
63160: PPUSH
// result := false ;
63161: LD_ADDR_VAR 0 4
63165: PUSH
63166: LD_INT 0
63168: ST_TO_ADDR
// if GetTaskList ( unit ) then
63169: LD_VAR 0 1
63173: PPUSH
63174: CALL_OW 437
63178: IFFALSE 63261
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63180: LD_STRING M
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: CALL_OW 437
63192: PUSH
63193: LD_INT 1
63195: ARRAY
63196: PUSH
63197: LD_INT 1
63199: ARRAY
63200: EQUAL
63201: PUSH
63202: LD_VAR 0 2
63206: PUSH
63207: LD_VAR 0 1
63211: PPUSH
63212: CALL_OW 437
63216: PUSH
63217: LD_INT 1
63219: ARRAY
63220: PUSH
63221: LD_INT 2
63223: ARRAY
63224: EQUAL
63225: AND
63226: PUSH
63227: LD_VAR 0 3
63231: PUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL_OW 437
63241: PUSH
63242: LD_INT 1
63244: ARRAY
63245: PUSH
63246: LD_INT 3
63248: ARRAY
63249: EQUAL
63250: AND
63251: IFFALSE 63261
// result := true ;
63253: LD_ADDR_VAR 0 4
63257: PUSH
63258: LD_INT 1
63260: ST_TO_ADDR
// end ; end ;
63261: LD_VAR 0 4
63265: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63266: LD_INT 0
63268: PPUSH
63269: PPUSH
63270: PPUSH
63271: PPUSH
// if not unit or not area then
63272: LD_VAR 0 1
63276: NOT
63277: PUSH
63278: LD_VAR 0 2
63282: NOT
63283: OR
63284: IFFALSE 63288
// exit ;
63286: GO 63452
// tmp := AreaToList ( area , i ) ;
63288: LD_ADDR_VAR 0 6
63292: PUSH
63293: LD_VAR 0 2
63297: PPUSH
63298: LD_VAR 0 5
63302: PPUSH
63303: CALL_OW 517
63307: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63308: LD_ADDR_VAR 0 5
63312: PUSH
63313: DOUBLE
63314: LD_INT 1
63316: DEC
63317: ST_TO_ADDR
63318: LD_VAR 0 6
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PUSH
63327: FOR_TO
63328: IFFALSE 63450
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63330: LD_ADDR_VAR 0 7
63334: PUSH
63335: LD_VAR 0 6
63339: PUSH
63340: LD_INT 1
63342: ARRAY
63343: PUSH
63344: LD_VAR 0 5
63348: ARRAY
63349: PUSH
63350: LD_VAR 0 6
63354: PUSH
63355: LD_INT 2
63357: ARRAY
63358: PUSH
63359: LD_VAR 0 5
63363: ARRAY
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63369: LD_VAR 0 7
63373: PUSH
63374: LD_INT 1
63376: ARRAY
63377: PPUSH
63378: LD_VAR 0 7
63382: PUSH
63383: LD_INT 2
63385: ARRAY
63386: PPUSH
63387: CALL_OW 428
63391: PUSH
63392: LD_INT 0
63394: EQUAL
63395: IFFALSE 63448
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63397: LD_VAR 0 1
63401: PPUSH
63402: LD_VAR 0 7
63406: PUSH
63407: LD_INT 1
63409: ARRAY
63410: PPUSH
63411: LD_VAR 0 7
63415: PUSH
63416: LD_INT 2
63418: ARRAY
63419: PPUSH
63420: LD_VAR 0 3
63424: PPUSH
63425: CALL_OW 48
// result := IsPlaced ( unit ) ;
63429: LD_ADDR_VAR 0 4
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: CALL_OW 305
63443: ST_TO_ADDR
// exit ;
63444: POP
63445: POP
63446: GO 63452
// end ; end ;
63448: GO 63327
63450: POP
63451: POP
// end ;
63452: LD_VAR 0 4
63456: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63457: LD_INT 0
63459: PPUSH
63460: PPUSH
63461: PPUSH
// if not side or side > 8 then
63462: LD_VAR 0 1
63466: NOT
63467: PUSH
63468: LD_VAR 0 1
63472: PUSH
63473: LD_INT 8
63475: GREATER
63476: OR
63477: IFFALSE 63481
// exit ;
63479: GO 63668
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63481: LD_ADDR_VAR 0 4
63485: PUSH
63486: LD_INT 22
63488: PUSH
63489: LD_VAR 0 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 21
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PPUSH
63512: CALL_OW 69
63516: ST_TO_ADDR
// if not tmp then
63517: LD_VAR 0 4
63521: NOT
63522: IFFALSE 63526
// exit ;
63524: GO 63668
// enable_addtolog := true ;
63526: LD_ADDR_OWVAR 81
63530: PUSH
63531: LD_INT 1
63533: ST_TO_ADDR
// AddToLog ( [ ) ;
63534: LD_STRING [
63536: PPUSH
63537: CALL_OW 561
// for i in tmp do
63541: LD_ADDR_VAR 0 3
63545: PUSH
63546: LD_VAR 0 4
63550: PUSH
63551: FOR_IN
63552: IFFALSE 63659
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63554: LD_STRING [
63556: PUSH
63557: LD_VAR 0 3
63561: PPUSH
63562: CALL_OW 266
63566: STR
63567: PUSH
63568: LD_STRING , 
63570: STR
63571: PUSH
63572: LD_VAR 0 3
63576: PPUSH
63577: CALL_OW 250
63581: STR
63582: PUSH
63583: LD_STRING , 
63585: STR
63586: PUSH
63587: LD_VAR 0 3
63591: PPUSH
63592: CALL_OW 251
63596: STR
63597: PUSH
63598: LD_STRING , 
63600: STR
63601: PUSH
63602: LD_VAR 0 3
63606: PPUSH
63607: CALL_OW 254
63611: STR
63612: PUSH
63613: LD_STRING , 
63615: STR
63616: PUSH
63617: LD_VAR 0 3
63621: PPUSH
63622: LD_INT 1
63624: PPUSH
63625: CALL_OW 268
63629: STR
63630: PUSH
63631: LD_STRING , 
63633: STR
63634: PUSH
63635: LD_VAR 0 3
63639: PPUSH
63640: LD_INT 2
63642: PPUSH
63643: CALL_OW 268
63647: STR
63648: PUSH
63649: LD_STRING ],
63651: STR
63652: PPUSH
63653: CALL_OW 561
// end ;
63657: GO 63551
63659: POP
63660: POP
// AddToLog ( ]; ) ;
63661: LD_STRING ];
63663: PPUSH
63664: CALL_OW 561
// end ;
63668: LD_VAR 0 2
63672: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63673: LD_INT 0
63675: PPUSH
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
// if not area or not rate or not max then
63680: LD_VAR 0 1
63684: NOT
63685: PUSH
63686: LD_VAR 0 2
63690: NOT
63691: OR
63692: PUSH
63693: LD_VAR 0 4
63697: NOT
63698: OR
63699: IFFALSE 63703
// exit ;
63701: GO 63892
// while 1 do
63703: LD_INT 1
63705: IFFALSE 63892
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63707: LD_ADDR_VAR 0 9
63711: PUSH
63712: LD_VAR 0 1
63716: PPUSH
63717: LD_INT 1
63719: PPUSH
63720: CALL_OW 287
63724: PUSH
63725: LD_INT 10
63727: MUL
63728: ST_TO_ADDR
// r := rate / 10 ;
63729: LD_ADDR_VAR 0 7
63733: PUSH
63734: LD_VAR 0 2
63738: PUSH
63739: LD_INT 10
63741: DIVREAL
63742: ST_TO_ADDR
// time := 1 1$00 ;
63743: LD_ADDR_VAR 0 8
63747: PUSH
63748: LD_INT 2100
63750: ST_TO_ADDR
// if amount < min then
63751: LD_VAR 0 9
63755: PUSH
63756: LD_VAR 0 3
63760: LESS
63761: IFFALSE 63779
// r := r * 2 else
63763: LD_ADDR_VAR 0 7
63767: PUSH
63768: LD_VAR 0 7
63772: PUSH
63773: LD_INT 2
63775: MUL
63776: ST_TO_ADDR
63777: GO 63805
// if amount > max then
63779: LD_VAR 0 9
63783: PUSH
63784: LD_VAR 0 4
63788: GREATER
63789: IFFALSE 63805
// r := r / 2 ;
63791: LD_ADDR_VAR 0 7
63795: PUSH
63796: LD_VAR 0 7
63800: PUSH
63801: LD_INT 2
63803: DIVREAL
63804: ST_TO_ADDR
// time := time / r ;
63805: LD_ADDR_VAR 0 8
63809: PUSH
63810: LD_VAR 0 8
63814: PUSH
63815: LD_VAR 0 7
63819: DIVREAL
63820: ST_TO_ADDR
// if time < 0 then
63821: LD_VAR 0 8
63825: PUSH
63826: LD_INT 0
63828: LESS
63829: IFFALSE 63846
// time := time * - 1 ;
63831: LD_ADDR_VAR 0 8
63835: PUSH
63836: LD_VAR 0 8
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: MUL
63845: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63846: LD_VAR 0 8
63850: PUSH
63851: LD_INT 35
63853: PPUSH
63854: LD_INT 875
63856: PPUSH
63857: CALL_OW 12
63861: PLUS
63862: PPUSH
63863: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63867: LD_INT 1
63869: PPUSH
63870: LD_INT 5
63872: PPUSH
63873: CALL_OW 12
63877: PPUSH
63878: LD_VAR 0 1
63882: PPUSH
63883: LD_INT 1
63885: PPUSH
63886: CALL_OW 55
// end ;
63890: GO 63703
// end ;
63892: LD_VAR 0 5
63896: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63897: LD_INT 0
63899: PPUSH
63900: PPUSH
63901: PPUSH
63902: PPUSH
63903: PPUSH
63904: PPUSH
63905: PPUSH
63906: PPUSH
// if not turrets or not factories then
63907: LD_VAR 0 1
63911: NOT
63912: PUSH
63913: LD_VAR 0 2
63917: NOT
63918: OR
63919: IFFALSE 63923
// exit ;
63921: GO 64230
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63923: LD_ADDR_VAR 0 10
63927: PUSH
63928: LD_INT 5
63930: PUSH
63931: LD_INT 6
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 4
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: LD_INT 5
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 24
63965: PUSH
63966: LD_INT 25
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 23
63975: PUSH
63976: LD_INT 27
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 42
63989: PUSH
63990: LD_INT 43
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 44
63999: PUSH
64000: LD_INT 46
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 45
64009: PUSH
64010: LD_INT 47
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: ST_TO_ADDR
// result := [ ] ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: EMPTY
64033: ST_TO_ADDR
// for i in turrets do
64034: LD_ADDR_VAR 0 4
64038: PUSH
64039: LD_VAR 0 1
64043: PUSH
64044: FOR_IN
64045: IFFALSE 64228
// begin nat := GetNation ( i ) ;
64047: LD_ADDR_VAR 0 7
64051: PUSH
64052: LD_VAR 0 4
64056: PPUSH
64057: CALL_OW 248
64061: ST_TO_ADDR
// weapon := 0 ;
64062: LD_ADDR_VAR 0 8
64066: PUSH
64067: LD_INT 0
64069: ST_TO_ADDR
// if not nat then
64070: LD_VAR 0 7
64074: NOT
64075: IFFALSE 64079
// continue ;
64077: GO 64044
// for j in list [ nat ] do
64079: LD_ADDR_VAR 0 5
64083: PUSH
64084: LD_VAR 0 10
64088: PUSH
64089: LD_VAR 0 7
64093: ARRAY
64094: PUSH
64095: FOR_IN
64096: IFFALSE 64137
// if GetBWeapon ( i ) = j [ 1 ] then
64098: LD_VAR 0 4
64102: PPUSH
64103: CALL_OW 269
64107: PUSH
64108: LD_VAR 0 5
64112: PUSH
64113: LD_INT 1
64115: ARRAY
64116: EQUAL
64117: IFFALSE 64135
// begin weapon := j [ 2 ] ;
64119: LD_ADDR_VAR 0 8
64123: PUSH
64124: LD_VAR 0 5
64128: PUSH
64129: LD_INT 2
64131: ARRAY
64132: ST_TO_ADDR
// break ;
64133: GO 64137
// end ;
64135: GO 64095
64137: POP
64138: POP
// if not weapon then
64139: LD_VAR 0 8
64143: NOT
64144: IFFALSE 64148
// continue ;
64146: GO 64044
// for k in factories do
64148: LD_ADDR_VAR 0 6
64152: PUSH
64153: LD_VAR 0 2
64157: PUSH
64158: FOR_IN
64159: IFFALSE 64224
// begin weapons := AvailableWeaponList ( k ) ;
64161: LD_ADDR_VAR 0 9
64165: PUSH
64166: LD_VAR 0 6
64170: PPUSH
64171: CALL_OW 478
64175: ST_TO_ADDR
// if not weapons then
64176: LD_VAR 0 9
64180: NOT
64181: IFFALSE 64185
// continue ;
64183: GO 64158
// if weapon in weapons then
64185: LD_VAR 0 8
64189: PUSH
64190: LD_VAR 0 9
64194: IN
64195: IFFALSE 64222
// begin result := [ i , weapon ] ;
64197: LD_ADDR_VAR 0 3
64201: PUSH
64202: LD_VAR 0 4
64206: PUSH
64207: LD_VAR 0 8
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: ST_TO_ADDR
// exit ;
64216: POP
64217: POP
64218: POP
64219: POP
64220: GO 64230
// end ; end ;
64222: GO 64158
64224: POP
64225: POP
// end ;
64226: GO 64044
64228: POP
64229: POP
// end ;
64230: LD_VAR 0 3
64234: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64235: LD_INT 0
64237: PPUSH
// if not side or side > 8 then
64238: LD_VAR 0 3
64242: NOT
64243: PUSH
64244: LD_VAR 0 3
64248: PUSH
64249: LD_INT 8
64251: GREATER
64252: OR
64253: IFFALSE 64257
// exit ;
64255: GO 64316
// if not range then
64257: LD_VAR 0 4
64261: NOT
64262: IFFALSE 64273
// range := - 12 ;
64264: LD_ADDR_VAR 0 4
64268: PUSH
64269: LD_INT 12
64271: NEG
64272: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: LD_VAR 0 4
64292: PPUSH
64293: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64297: LD_VAR 0 1
64301: PPUSH
64302: LD_VAR 0 2
64306: PPUSH
64307: LD_VAR 0 3
64311: PPUSH
64312: CALL_OW 331
// end ;
64316: LD_VAR 0 5
64320: RET
// export function Video ( mode ) ; begin
64321: LD_INT 0
64323: PPUSH
// ingame_video = mode ;
64324: LD_ADDR_OWVAR 52
64328: PUSH
64329: LD_VAR 0 1
64333: ST_TO_ADDR
// interface_hidden = mode ;
64334: LD_ADDR_OWVAR 54
64338: PUSH
64339: LD_VAR 0 1
64343: ST_TO_ADDR
// end ;
64344: LD_VAR 0 2
64348: RET
// export function Join ( array , element ) ; begin
64349: LD_INT 0
64351: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64352: LD_ADDR_VAR 0 3
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: LD_VAR 0 1
64366: PUSH
64367: LD_INT 1
64369: PLUS
64370: PPUSH
64371: LD_VAR 0 2
64375: PPUSH
64376: CALL_OW 1
64380: ST_TO_ADDR
// end ;
64381: LD_VAR 0 3
64385: RET
// export function JoinUnion ( array , element ) ; begin
64386: LD_INT 0
64388: PPUSH
// result := array union element ;
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_VAR 0 2
64403: UNION
64404: ST_TO_ADDR
// end ;
64405: LD_VAR 0 3
64409: RET
// export function GetBehemoths ( side ) ; begin
64410: LD_INT 0
64412: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64413: LD_ADDR_VAR 0 2
64417: PUSH
64418: LD_INT 22
64420: PUSH
64421: LD_VAR 0 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 31
64432: PUSH
64433: LD_INT 25
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PPUSH
64444: CALL_OW 69
64448: ST_TO_ADDR
// end ;
64449: LD_VAR 0 2
64453: RET
// export function Shuffle ( array ) ; var i , index ; begin
64454: LD_INT 0
64456: PPUSH
64457: PPUSH
64458: PPUSH
// result := [ ] ;
64459: LD_ADDR_VAR 0 2
64463: PUSH
64464: EMPTY
64465: ST_TO_ADDR
// if not array then
64466: LD_VAR 0 1
64470: NOT
64471: IFFALSE 64475
// exit ;
64473: GO 64574
// Randomize ;
64475: CALL_OW 10
// for i = array downto 1 do
64479: LD_ADDR_VAR 0 3
64483: PUSH
64484: DOUBLE
64485: LD_VAR 0 1
64489: INC
64490: ST_TO_ADDR
64491: LD_INT 1
64493: PUSH
64494: FOR_DOWNTO
64495: IFFALSE 64572
// begin index := rand ( 1 , array ) ;
64497: LD_ADDR_VAR 0 4
64501: PUSH
64502: LD_INT 1
64504: PPUSH
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL_OW 12
64514: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64515: LD_ADDR_VAR 0 2
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_VAR 0 2
64529: PUSH
64530: LD_INT 1
64532: PLUS
64533: PPUSH
64534: LD_VAR 0 1
64538: PUSH
64539: LD_VAR 0 4
64543: ARRAY
64544: PPUSH
64545: CALL_OW 2
64549: ST_TO_ADDR
// array := Delete ( array , index ) ;
64550: LD_ADDR_VAR 0 1
64554: PUSH
64555: LD_VAR 0 1
64559: PPUSH
64560: LD_VAR 0 4
64564: PPUSH
64565: CALL_OW 3
64569: ST_TO_ADDR
// end ;
64570: GO 64494
64572: POP
64573: POP
// end ;
64574: LD_VAR 0 2
64578: RET
// export function GetBaseMaterials ( base ) ; begin
64579: LD_INT 0
64581: PPUSH
// result := [ 0 , 0 , 0 ] ;
64582: LD_ADDR_VAR 0 2
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// if not base then
64601: LD_VAR 0 1
64605: NOT
64606: IFFALSE 64610
// exit ;
64608: GO 64659
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64610: LD_ADDR_VAR 0 2
64614: PUSH
64615: LD_VAR 0 1
64619: PPUSH
64620: LD_INT 1
64622: PPUSH
64623: CALL_OW 275
64627: PUSH
64628: LD_VAR 0 1
64632: PPUSH
64633: LD_INT 2
64635: PPUSH
64636: CALL_OW 275
64640: PUSH
64641: LD_VAR 0 1
64645: PPUSH
64646: LD_INT 3
64648: PPUSH
64649: CALL_OW 275
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 2
64663: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64664: LD_INT 0
64666: PPUSH
64667: PPUSH
// result := array ;
64668: LD_ADDR_VAR 0 3
64672: PUSH
64673: LD_VAR 0 1
64677: ST_TO_ADDR
// if size >= result then
64678: LD_VAR 0 2
64682: PUSH
64683: LD_VAR 0 3
64687: GREATEREQUAL
64688: IFFALSE 64692
// exit ;
64690: GO 64742
// if size then
64692: LD_VAR 0 2
64696: IFFALSE 64742
// for i := array downto size do
64698: LD_ADDR_VAR 0 4
64702: PUSH
64703: DOUBLE
64704: LD_VAR 0 1
64708: INC
64709: ST_TO_ADDR
64710: LD_VAR 0 2
64714: PUSH
64715: FOR_DOWNTO
64716: IFFALSE 64740
// result := Delete ( result , result ) ;
64718: LD_ADDR_VAR 0 3
64722: PUSH
64723: LD_VAR 0 3
64727: PPUSH
64728: LD_VAR 0 3
64732: PPUSH
64733: CALL_OW 3
64737: ST_TO_ADDR
64738: GO 64715
64740: POP
64741: POP
// end ;
64742: LD_VAR 0 3
64746: RET
// export function ComExit ( unit ) ; var tmp ; begin
64747: LD_INT 0
64749: PPUSH
64750: PPUSH
// if not IsInUnit ( unit ) then
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 310
64760: NOT
64761: IFFALSE 64765
// exit ;
64763: GO 64825
// tmp := IsInUnit ( unit ) ;
64765: LD_ADDR_VAR 0 3
64769: PUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 310
64779: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64780: LD_VAR 0 3
64784: PPUSH
64785: CALL_OW 247
64789: PUSH
64790: LD_INT 2
64792: EQUAL
64793: IFFALSE 64806
// ComExitVehicle ( unit ) else
64795: LD_VAR 0 1
64799: PPUSH
64800: CALL_OW 121
64804: GO 64815
// ComExitBuilding ( unit ) ;
64806: LD_VAR 0 1
64810: PPUSH
64811: CALL_OW 122
// result := tmp ;
64815: LD_ADDR_VAR 0 2
64819: PUSH
64820: LD_VAR 0 3
64824: ST_TO_ADDR
// end ;
64825: LD_VAR 0 2
64829: RET
// export function ComExitAll ( units ) ; var i ; begin
64830: LD_INT 0
64832: PPUSH
64833: PPUSH
// if not units then
64834: LD_VAR 0 1
64838: NOT
64839: IFFALSE 64843
// exit ;
64841: GO 64869
// for i in units do
64843: LD_ADDR_VAR 0 3
64847: PUSH
64848: LD_VAR 0 1
64852: PUSH
64853: FOR_IN
64854: IFFALSE 64867
// ComExit ( i ) ;
64856: LD_VAR 0 3
64860: PPUSH
64861: CALL 64747 0 1
64865: GO 64853
64867: POP
64868: POP
// end ;
64869: LD_VAR 0 2
64873: RET
// export function ResetHc ; begin
64874: LD_INT 0
64876: PPUSH
// InitHc ;
64877: CALL_OW 19
// hc_importance := 0 ;
64881: LD_ADDR_OWVAR 32
64885: PUSH
64886: LD_INT 0
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 1
64893: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64894: LD_INT 0
64896: PPUSH
64897: PPUSH
64898: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64899: LD_ADDR_VAR 0 6
64903: PUSH
64904: LD_VAR 0 1
64908: PUSH
64909: LD_VAR 0 3
64913: PLUS
64914: PUSH
64915: LD_INT 2
64917: DIV
64918: ST_TO_ADDR
// if _x < 0 then
64919: LD_VAR 0 6
64923: PUSH
64924: LD_INT 0
64926: LESS
64927: IFFALSE 64944
// _x := _x * - 1 ;
64929: LD_ADDR_VAR 0 6
64933: PUSH
64934: LD_VAR 0 6
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: MUL
64943: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64944: LD_ADDR_VAR 0 7
64948: PUSH
64949: LD_VAR 0 2
64953: PUSH
64954: LD_VAR 0 4
64958: PLUS
64959: PUSH
64960: LD_INT 2
64962: DIV
64963: ST_TO_ADDR
// if _y < 0 then
64964: LD_VAR 0 7
64968: PUSH
64969: LD_INT 0
64971: LESS
64972: IFFALSE 64989
// _y := _y * - 1 ;
64974: LD_ADDR_VAR 0 7
64978: PUSH
64979: LD_VAR 0 7
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: MUL
64988: ST_TO_ADDR
// result := [ _x , _y ] ;
64989: LD_ADDR_VAR 0 5
64993: PUSH
64994: LD_VAR 0 6
64998: PUSH
64999: LD_VAR 0 7
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: ST_TO_ADDR
// end ;
65008: LD_VAR 0 5
65012: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65013: LD_INT 0
65015: PPUSH
65016: PPUSH
65017: PPUSH
65018: PPUSH
// task := GetTaskList ( unit ) ;
65019: LD_ADDR_VAR 0 7
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 437
65033: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65034: LD_VAR 0 7
65038: NOT
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: CALL_OW 308
65054: NOT
65055: AND
65056: IFFALSE 65060
// exit ;
65058: GO 65178
// if IsInArea ( unit , area ) then
65060: LD_VAR 0 1
65064: PPUSH
65065: LD_VAR 0 2
65069: PPUSH
65070: CALL_OW 308
65074: IFFALSE 65092
// begin ComMoveToArea ( unit , goAway ) ;
65076: LD_VAR 0 1
65080: PPUSH
65081: LD_VAR 0 3
65085: PPUSH
65086: CALL_OW 113
// exit ;
65090: GO 65178
// end ; if task [ 1 ] [ 1 ] <> M then
65092: LD_VAR 0 7
65096: PUSH
65097: LD_INT 1
65099: ARRAY
65100: PUSH
65101: LD_INT 1
65103: ARRAY
65104: PUSH
65105: LD_STRING M
65107: NONEQUAL
65108: IFFALSE 65112
// exit ;
65110: GO 65178
// x := task [ 1 ] [ 2 ] ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: LD_VAR 0 7
65121: PUSH
65122: LD_INT 1
65124: ARRAY
65125: PUSH
65126: LD_INT 2
65128: ARRAY
65129: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65130: LD_ADDR_VAR 0 6
65134: PUSH
65135: LD_VAR 0 7
65139: PUSH
65140: LD_INT 1
65142: ARRAY
65143: PUSH
65144: LD_INT 3
65146: ARRAY
65147: ST_TO_ADDR
// if InArea ( x , y , area ) then
65148: LD_VAR 0 5
65152: PPUSH
65153: LD_VAR 0 6
65157: PPUSH
65158: LD_VAR 0 2
65162: PPUSH
65163: CALL_OW 309
65167: IFFALSE 65178
// ComStop ( unit ) ;
65169: LD_VAR 0 1
65173: PPUSH
65174: CALL_OW 141
// end ;
65178: LD_VAR 0 4
65182: RET
// export function Abs ( value ) ; begin
65183: LD_INT 0
65185: PPUSH
// result := value ;
65186: LD_ADDR_VAR 0 2
65190: PUSH
65191: LD_VAR 0 1
65195: ST_TO_ADDR
// if value < 0 then
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 0
65203: LESS
65204: IFFALSE 65221
// result := value * - 1 ;
65206: LD_ADDR_VAR 0 2
65210: PUSH
65211: LD_VAR 0 1
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: MUL
65220: ST_TO_ADDR
// end ;
65221: LD_VAR 0 2
65225: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
65230: PPUSH
65231: PPUSH
65232: PPUSH
65233: PPUSH
65234: PPUSH
65235: PPUSH
// if not unit or not building then
65236: LD_VAR 0 1
65240: NOT
65241: PUSH
65242: LD_VAR 0 2
65246: NOT
65247: OR
65248: IFFALSE 65252
// exit ;
65250: GO 65478
// x := GetX ( building ) ;
65252: LD_ADDR_VAR 0 4
65256: PUSH
65257: LD_VAR 0 2
65261: PPUSH
65262: CALL_OW 250
65266: ST_TO_ADDR
// y := GetY ( building ) ;
65267: LD_ADDR_VAR 0 6
65271: PUSH
65272: LD_VAR 0 2
65276: PPUSH
65277: CALL_OW 251
65281: ST_TO_ADDR
// d := GetDir ( building ) ;
65282: LD_ADDR_VAR 0 8
65286: PUSH
65287: LD_VAR 0 2
65291: PPUSH
65292: CALL_OW 254
65296: ST_TO_ADDR
// r := 4 ;
65297: LD_ADDR_VAR 0 9
65301: PUSH
65302: LD_INT 4
65304: ST_TO_ADDR
// for i := 1 to 5 do
65305: LD_ADDR_VAR 0 10
65309: PUSH
65310: DOUBLE
65311: LD_INT 1
65313: DEC
65314: ST_TO_ADDR
65315: LD_INT 5
65317: PUSH
65318: FOR_TO
65319: IFFALSE 65476
// begin _x := ShiftX ( x , d , r + i ) ;
65321: LD_ADDR_VAR 0 5
65325: PUSH
65326: LD_VAR 0 4
65330: PPUSH
65331: LD_VAR 0 8
65335: PPUSH
65336: LD_VAR 0 9
65340: PUSH
65341: LD_VAR 0 10
65345: PLUS
65346: PPUSH
65347: CALL_OW 272
65351: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65352: LD_ADDR_VAR 0 7
65356: PUSH
65357: LD_VAR 0 6
65361: PPUSH
65362: LD_VAR 0 8
65366: PPUSH
65367: LD_VAR 0 9
65371: PUSH
65372: LD_VAR 0 10
65376: PLUS
65377: PPUSH
65378: CALL_OW 273
65382: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65383: LD_VAR 0 5
65387: PPUSH
65388: LD_VAR 0 7
65392: PPUSH
65393: CALL_OW 488
65397: PUSH
65398: LD_VAR 0 5
65402: PPUSH
65403: LD_VAR 0 7
65407: PPUSH
65408: CALL_OW 428
65412: PPUSH
65413: CALL_OW 247
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: IN
65428: NOT
65429: AND
65430: IFFALSE 65474
// begin ComMoveXY ( unit , _x , _y ) ;
65432: LD_VAR 0 1
65436: PPUSH
65437: LD_VAR 0 5
65441: PPUSH
65442: LD_VAR 0 7
65446: PPUSH
65447: CALL_OW 111
// result := [ _x , _y ] ;
65451: LD_ADDR_VAR 0 3
65455: PUSH
65456: LD_VAR 0 5
65460: PUSH
65461: LD_VAR 0 7
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// exit ;
65470: POP
65471: POP
65472: GO 65478
// end ; end ;
65474: GO 65318
65476: POP
65477: POP
// end ;
65478: LD_VAR 0 3
65482: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65483: LD_INT 0
65485: PPUSH
65486: PPUSH
65487: PPUSH
// result := 0 ;
65488: LD_ADDR_VAR 0 3
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65496: LD_VAR 0 1
65500: PUSH
65501: LD_INT 0
65503: LESS
65504: PUSH
65505: LD_VAR 0 1
65509: PUSH
65510: LD_INT 8
65512: GREATER
65513: OR
65514: PUSH
65515: LD_VAR 0 2
65519: PUSH
65520: LD_INT 0
65522: LESS
65523: OR
65524: PUSH
65525: LD_VAR 0 2
65529: PUSH
65530: LD_INT 8
65532: GREATER
65533: OR
65534: IFFALSE 65538
// exit ;
65536: GO 65613
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65538: LD_ADDR_VAR 0 4
65542: PUSH
65543: LD_INT 22
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PPUSH
65555: CALL_OW 69
65559: PUSH
65560: FOR_IN
65561: IFFALSE 65611
// begin un := UnitShoot ( i ) ;
65563: LD_ADDR_VAR 0 5
65567: PUSH
65568: LD_VAR 0 4
65572: PPUSH
65573: CALL_OW 504
65577: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65578: LD_VAR 0 5
65582: PPUSH
65583: CALL_OW 255
65587: PUSH
65588: LD_VAR 0 1
65592: EQUAL
65593: IFFALSE 65609
// begin result := un ;
65595: LD_ADDR_VAR 0 3
65599: PUSH
65600: LD_VAR 0 5
65604: ST_TO_ADDR
// exit ;
65605: POP
65606: POP
65607: GO 65613
// end ; end ;
65609: GO 65560
65611: POP
65612: POP
// end ;
65613: LD_VAR 0 3
65617: RET
// export function GetCargoBay ( units ) ; begin
65618: LD_INT 0
65620: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65621: LD_ADDR_VAR 0 2
65625: PUSH
65626: LD_VAR 0 1
65630: PPUSH
65631: LD_INT 2
65633: PUSH
65634: LD_INT 34
65636: PUSH
65637: LD_INT 12
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 34
65646: PUSH
65647: LD_INT 51
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 34
65656: PUSH
65657: LD_INT 32
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 34
65666: PUSH
65667: LD_INT 89
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: PPUSH
65681: CALL_OW 72
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 2
65690: RET
// export function Negate ( value ) ; begin
65691: LD_INT 0
65693: PPUSH
// result := not value ;
65694: LD_ADDR_VAR 0 2
65698: PUSH
65699: LD_VAR 0 1
65703: NOT
65704: ST_TO_ADDR
// end ;
65705: LD_VAR 0 2
65709: RET
// export function Inc ( value ) ; begin
65710: LD_INT 0
65712: PPUSH
// result := value + 1 ;
65713: LD_ADDR_VAR 0 2
65717: PUSH
65718: LD_VAR 0 1
65722: PUSH
65723: LD_INT 1
65725: PLUS
65726: ST_TO_ADDR
// end ;
65727: LD_VAR 0 2
65731: RET
// export function Dec ( value ) ; begin
65732: LD_INT 0
65734: PPUSH
// result := value - 1 ;
65735: LD_ADDR_VAR 0 2
65739: PUSH
65740: LD_VAR 0 1
65744: PUSH
65745: LD_INT 1
65747: MINUS
65748: ST_TO_ADDR
// end ;
65749: LD_VAR 0 2
65753: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65754: LD_INT 0
65756: PPUSH
65757: PPUSH
65758: PPUSH
65759: PPUSH
65760: PPUSH
65761: PPUSH
65762: PPUSH
65763: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65764: LD_VAR 0 1
65768: PPUSH
65769: LD_VAR 0 2
65773: PPUSH
65774: CALL_OW 488
65778: NOT
65779: PUSH
65780: LD_VAR 0 3
65784: PPUSH
65785: LD_VAR 0 4
65789: PPUSH
65790: CALL_OW 488
65794: NOT
65795: OR
65796: IFFALSE 65809
// begin result := - 1 ;
65798: LD_ADDR_VAR 0 5
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: ST_TO_ADDR
// exit ;
65807: GO 66044
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65809: LD_ADDR_VAR 0 12
65813: PUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: LD_VAR 0 2
65823: PPUSH
65824: LD_VAR 0 3
65828: PPUSH
65829: LD_VAR 0 4
65833: PPUSH
65834: CALL 64894 0 4
65838: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65839: LD_ADDR_VAR 0 11
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: LD_VAR 0 2
65853: PPUSH
65854: LD_VAR 0 12
65858: PUSH
65859: LD_INT 1
65861: ARRAY
65862: PPUSH
65863: LD_VAR 0 12
65867: PUSH
65868: LD_INT 2
65870: ARRAY
65871: PPUSH
65872: CALL_OW 298
65876: ST_TO_ADDR
// distance := 9999 ;
65877: LD_ADDR_VAR 0 10
65881: PUSH
65882: LD_INT 9999
65884: ST_TO_ADDR
// for i := 0 to 5 do
65885: LD_ADDR_VAR 0 6
65889: PUSH
65890: DOUBLE
65891: LD_INT 0
65893: DEC
65894: ST_TO_ADDR
65895: LD_INT 5
65897: PUSH
65898: FOR_TO
65899: IFFALSE 66042
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65901: LD_ADDR_VAR 0 7
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: LD_VAR 0 6
65915: PPUSH
65916: LD_VAR 0 11
65920: PPUSH
65921: CALL_OW 272
65925: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65926: LD_ADDR_VAR 0 8
65930: PUSH
65931: LD_VAR 0 2
65935: PPUSH
65936: LD_VAR 0 6
65940: PPUSH
65941: LD_VAR 0 11
65945: PPUSH
65946: CALL_OW 273
65950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65951: LD_VAR 0 7
65955: PPUSH
65956: LD_VAR 0 8
65960: PPUSH
65961: CALL_OW 488
65965: NOT
65966: IFFALSE 65970
// continue ;
65968: GO 65898
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65970: LD_ADDR_VAR 0 9
65974: PUSH
65975: LD_VAR 0 12
65979: PUSH
65980: LD_INT 1
65982: ARRAY
65983: PPUSH
65984: LD_VAR 0 12
65988: PUSH
65989: LD_INT 2
65991: ARRAY
65992: PPUSH
65993: LD_VAR 0 7
65997: PPUSH
65998: LD_VAR 0 8
66002: PPUSH
66003: CALL_OW 298
66007: ST_TO_ADDR
// if tmp < distance then
66008: LD_VAR 0 9
66012: PUSH
66013: LD_VAR 0 10
66017: LESS
66018: IFFALSE 66040
// begin result := i ;
66020: LD_ADDR_VAR 0 5
66024: PUSH
66025: LD_VAR 0 6
66029: ST_TO_ADDR
// distance := tmp ;
66030: LD_ADDR_VAR 0 10
66034: PUSH
66035: LD_VAR 0 9
66039: ST_TO_ADDR
// end ; end ;
66040: GO 65898
66042: POP
66043: POP
// end ;
66044: LD_VAR 0 5
66048: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66049: LD_INT 0
66051: PPUSH
66052: PPUSH
// if not driver or not IsInUnit ( driver ) then
66053: LD_VAR 0 1
66057: NOT
66058: PUSH
66059: LD_VAR 0 1
66063: PPUSH
66064: CALL_OW 310
66068: NOT
66069: OR
66070: IFFALSE 66074
// exit ;
66072: GO 66164
// vehicle := IsInUnit ( driver ) ;
66074: LD_ADDR_VAR 0 3
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 310
66088: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66089: LD_VAR 0 1
66093: PPUSH
66094: LD_STRING \
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: LD_STRING E
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_VAR 0 3
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PPUSH
66160: CALL_OW 446
// end ;
66164: LD_VAR 0 2
66168: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66169: LD_INT 0
66171: PPUSH
66172: PPUSH
// if not driver or not IsInUnit ( driver ) then
66173: LD_VAR 0 1
66177: NOT
66178: PUSH
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL_OW 310
66188: NOT
66189: OR
66190: IFFALSE 66194
// exit ;
66192: GO 66284
// vehicle := IsInUnit ( driver ) ;
66194: LD_ADDR_VAR 0 3
66198: PUSH
66199: LD_VAR 0 1
66203: PPUSH
66204: CALL_OW 310
66208: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66209: LD_VAR 0 1
66213: PPUSH
66214: LD_STRING \
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: PUSH
66244: LD_STRING E
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_VAR 0 3
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PPUSH
66280: CALL_OW 447
// end ;
66284: LD_VAR 0 2
66288: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66289: LD_INT 0
66291: PPUSH
66292: PPUSH
66293: PPUSH
// tmp := [ ] ;
66294: LD_ADDR_VAR 0 5
66298: PUSH
66299: EMPTY
66300: ST_TO_ADDR
// for i in units do
66301: LD_ADDR_VAR 0 4
66305: PUSH
66306: LD_VAR 0 1
66310: PUSH
66311: FOR_IN
66312: IFFALSE 66350
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66314: LD_ADDR_VAR 0 5
66318: PUSH
66319: LD_VAR 0 5
66323: PPUSH
66324: LD_VAR 0 5
66328: PUSH
66329: LD_INT 1
66331: PLUS
66332: PPUSH
66333: LD_VAR 0 4
66337: PPUSH
66338: CALL_OW 256
66342: PPUSH
66343: CALL_OW 2
66347: ST_TO_ADDR
66348: GO 66311
66350: POP
66351: POP
// if not tmp then
66352: LD_VAR 0 5
66356: NOT
66357: IFFALSE 66361
// exit ;
66359: GO 66409
// if asc then
66361: LD_VAR 0 2
66365: IFFALSE 66389
// result := SortListByListAsc ( units , tmp ) else
66367: LD_ADDR_VAR 0 3
66371: PUSH
66372: LD_VAR 0 1
66376: PPUSH
66377: LD_VAR 0 5
66381: PPUSH
66382: CALL_OW 76
66386: ST_TO_ADDR
66387: GO 66409
// result := SortListByListDesc ( units , tmp ) ;
66389: LD_ADDR_VAR 0 3
66393: PUSH
66394: LD_VAR 0 1
66398: PPUSH
66399: LD_VAR 0 5
66403: PPUSH
66404: CALL_OW 77
66408: ST_TO_ADDR
// end ;
66409: LD_VAR 0 3
66413: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66414: LD_INT 0
66416: PPUSH
66417: PPUSH
// task := GetTaskList ( mech ) ;
66418: LD_ADDR_VAR 0 4
66422: PUSH
66423: LD_VAR 0 1
66427: PPUSH
66428: CALL_OW 437
66432: ST_TO_ADDR
// if not task then
66433: LD_VAR 0 4
66437: NOT
66438: IFFALSE 66442
// exit ;
66440: GO 66484
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66442: LD_ADDR_VAR 0 3
66446: PUSH
66447: LD_VAR 0 4
66451: PUSH
66452: LD_INT 1
66454: ARRAY
66455: PUSH
66456: LD_INT 1
66458: ARRAY
66459: PUSH
66460: LD_STRING r
66462: EQUAL
66463: PUSH
66464: LD_VAR 0 4
66468: PUSH
66469: LD_INT 1
66471: ARRAY
66472: PUSH
66473: LD_INT 4
66475: ARRAY
66476: PUSH
66477: LD_VAR 0 2
66481: EQUAL
66482: AND
66483: ST_TO_ADDR
// end ;
66484: LD_VAR 0 3
66488: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66489: LD_INT 0
66491: PPUSH
// SetDir ( unit , d ) ;
66492: LD_VAR 0 1
66496: PPUSH
66497: LD_VAR 0 4
66501: PPUSH
66502: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66506: LD_VAR 0 1
66510: PPUSH
66511: LD_VAR 0 2
66515: PPUSH
66516: LD_VAR 0 3
66520: PPUSH
66521: LD_VAR 0 5
66525: PPUSH
66526: CALL_OW 48
// end ;
66530: LD_VAR 0 6
66534: RET
// export function ToNaturalNumber ( number ) ; begin
66535: LD_INT 0
66537: PPUSH
// result := number div 1 ;
66538: LD_ADDR_VAR 0 2
66542: PUSH
66543: LD_VAR 0 1
66547: PUSH
66548: LD_INT 1
66550: DIV
66551: ST_TO_ADDR
// if number < 0 then
66552: LD_VAR 0 1
66556: PUSH
66557: LD_INT 0
66559: LESS
66560: IFFALSE 66570
// result := 0 ;
66562: LD_ADDR_VAR 0 2
66566: PUSH
66567: LD_INT 0
66569: ST_TO_ADDR
// end ;
66570: LD_VAR 0 2
66574: RET
// export function SortByClass ( units , class ) ; var un ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
// if not units or not class then
66579: LD_VAR 0 1
66583: NOT
66584: PUSH
66585: LD_VAR 0 2
66589: NOT
66590: OR
66591: IFFALSE 66595
// exit ;
66593: GO 66690
// result := [ ] ;
66595: LD_ADDR_VAR 0 3
66599: PUSH
66600: EMPTY
66601: ST_TO_ADDR
// for un in units do
66602: LD_ADDR_VAR 0 4
66606: PUSH
66607: LD_VAR 0 1
66611: PUSH
66612: FOR_IN
66613: IFFALSE 66688
// if GetClass ( un ) = class then
66615: LD_VAR 0 4
66619: PPUSH
66620: CALL_OW 257
66624: PUSH
66625: LD_VAR 0 2
66629: EQUAL
66630: IFFALSE 66657
// result := Insert ( result , 1 , un ) else
66632: LD_ADDR_VAR 0 3
66636: PUSH
66637: LD_VAR 0 3
66641: PPUSH
66642: LD_INT 1
66644: PPUSH
66645: LD_VAR 0 4
66649: PPUSH
66650: CALL_OW 2
66654: ST_TO_ADDR
66655: GO 66686
// result := Replace ( result , result + 1 , un ) ;
66657: LD_ADDR_VAR 0 3
66661: PUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: LD_VAR 0 3
66671: PUSH
66672: LD_INT 1
66674: PLUS
66675: PPUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: CALL_OW 1
66685: ST_TO_ADDR
66686: GO 66612
66688: POP
66689: POP
// end ;
66690: LD_VAR 0 3
66694: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66695: LD_INT 0
66697: PPUSH
66698: PPUSH
66699: PPUSH
66700: PPUSH
66701: PPUSH
66702: PPUSH
66703: PPUSH
// result := [ ] ;
66704: LD_ADDR_VAR 0 4
66708: PUSH
66709: EMPTY
66710: ST_TO_ADDR
// if x - r < 0 then
66711: LD_VAR 0 1
66715: PUSH
66716: LD_VAR 0 3
66720: MINUS
66721: PUSH
66722: LD_INT 0
66724: LESS
66725: IFFALSE 66737
// min_x := 0 else
66727: LD_ADDR_VAR 0 8
66731: PUSH
66732: LD_INT 0
66734: ST_TO_ADDR
66735: GO 66753
// min_x := x - r ;
66737: LD_ADDR_VAR 0 8
66741: PUSH
66742: LD_VAR 0 1
66746: PUSH
66747: LD_VAR 0 3
66751: MINUS
66752: ST_TO_ADDR
// if y - r < 0 then
66753: LD_VAR 0 2
66757: PUSH
66758: LD_VAR 0 3
66762: MINUS
66763: PUSH
66764: LD_INT 0
66766: LESS
66767: IFFALSE 66779
// min_y := 0 else
66769: LD_ADDR_VAR 0 7
66773: PUSH
66774: LD_INT 0
66776: ST_TO_ADDR
66777: GO 66795
// min_y := y - r ;
66779: LD_ADDR_VAR 0 7
66783: PUSH
66784: LD_VAR 0 2
66788: PUSH
66789: LD_VAR 0 3
66793: MINUS
66794: ST_TO_ADDR
// max_x := x + r ;
66795: LD_ADDR_VAR 0 9
66799: PUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_VAR 0 3
66809: PLUS
66810: ST_TO_ADDR
// max_y := y + r ;
66811: LD_ADDR_VAR 0 10
66815: PUSH
66816: LD_VAR 0 2
66820: PUSH
66821: LD_VAR 0 3
66825: PLUS
66826: ST_TO_ADDR
// for _x = min_x to max_x do
66827: LD_ADDR_VAR 0 5
66831: PUSH
66832: DOUBLE
66833: LD_VAR 0 8
66837: DEC
66838: ST_TO_ADDR
66839: LD_VAR 0 9
66843: PUSH
66844: FOR_TO
66845: IFFALSE 66946
// for _y = min_y to max_y do
66847: LD_ADDR_VAR 0 6
66851: PUSH
66852: DOUBLE
66853: LD_VAR 0 7
66857: DEC
66858: ST_TO_ADDR
66859: LD_VAR 0 10
66863: PUSH
66864: FOR_TO
66865: IFFALSE 66942
// begin if not ValidHex ( _x , _y ) then
66867: LD_VAR 0 5
66871: PPUSH
66872: LD_VAR 0 6
66876: PPUSH
66877: CALL_OW 488
66881: NOT
66882: IFFALSE 66886
// continue ;
66884: GO 66864
// if GetResourceTypeXY ( _x , _y ) then
66886: LD_VAR 0 5
66890: PPUSH
66891: LD_VAR 0 6
66895: PPUSH
66896: CALL_OW 283
66900: IFFALSE 66940
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66902: LD_ADDR_VAR 0 4
66906: PUSH
66907: LD_VAR 0 4
66911: PPUSH
66912: LD_VAR 0 4
66916: PUSH
66917: LD_INT 1
66919: PLUS
66920: PPUSH
66921: LD_VAR 0 5
66925: PUSH
66926: LD_VAR 0 6
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PPUSH
66935: CALL_OW 1
66939: ST_TO_ADDR
// end ;
66940: GO 66864
66942: POP
66943: POP
66944: GO 66844
66946: POP
66947: POP
// end ;
66948: LD_VAR 0 4
66952: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66953: LD_INT 0
66955: PPUSH
66956: PPUSH
66957: PPUSH
66958: PPUSH
66959: PPUSH
66960: PPUSH
66961: PPUSH
66962: PPUSH
// if not units then
66963: LD_VAR 0 1
66967: NOT
66968: IFFALSE 66972
// exit ;
66970: GO 67496
// result := UnitFilter ( units , [ f_ok ] ) ;
66972: LD_ADDR_VAR 0 3
66976: PUSH
66977: LD_VAR 0 1
66981: PPUSH
66982: LD_INT 50
66984: PUSH
66985: EMPTY
66986: LIST
66987: PPUSH
66988: CALL_OW 72
66992: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66993: LD_ADDR_VAR 0 8
66997: PUSH
66998: LD_VAR 0 1
67002: PUSH
67003: LD_INT 1
67005: ARRAY
67006: PPUSH
67007: CALL_OW 255
67011: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67012: LD_ADDR_VAR 0 10
67016: PUSH
67017: LD_INT 29
67019: PUSH
67020: LD_INT 91
67022: PUSH
67023: LD_INT 49
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// if not result then
67031: LD_VAR 0 3
67035: NOT
67036: IFFALSE 67040
// exit ;
67038: GO 67496
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67040: LD_ADDR_VAR 0 5
67044: PUSH
67045: LD_INT 81
67047: PUSH
67048: LD_VAR 0 8
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PPUSH
67057: CALL_OW 69
67061: ST_TO_ADDR
// for i in result do
67062: LD_ADDR_VAR 0 4
67066: PUSH
67067: LD_VAR 0 3
67071: PUSH
67072: FOR_IN
67073: IFFALSE 67494
// begin tag := GetTag ( i ) + 1 ;
67075: LD_ADDR_VAR 0 9
67079: PUSH
67080: LD_VAR 0 4
67084: PPUSH
67085: CALL_OW 110
67089: PUSH
67090: LD_INT 1
67092: PLUS
67093: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67094: LD_ADDR_VAR 0 7
67098: PUSH
67099: LD_VAR 0 4
67103: PPUSH
67104: CALL_OW 250
67108: PPUSH
67109: LD_VAR 0 4
67113: PPUSH
67114: CALL_OW 251
67118: PPUSH
67119: LD_INT 6
67121: PPUSH
67122: CALL 66695 0 3
67126: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67127: LD_VAR 0 4
67131: PPUSH
67132: CALL_OW 247
67136: PUSH
67137: LD_INT 2
67139: EQUAL
67140: PUSH
67141: LD_VAR 0 7
67145: AND
67146: PUSH
67147: LD_VAR 0 4
67151: PPUSH
67152: CALL_OW 264
67156: PUSH
67157: LD_VAR 0 10
67161: IN
67162: NOT
67163: AND
67164: IFFALSE 67203
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67166: LD_VAR 0 4
67170: PPUSH
67171: LD_VAR 0 7
67175: PUSH
67176: LD_INT 1
67178: ARRAY
67179: PUSH
67180: LD_INT 1
67182: ARRAY
67183: PPUSH
67184: LD_VAR 0 7
67188: PUSH
67189: LD_INT 1
67191: ARRAY
67192: PUSH
67193: LD_INT 2
67195: ARRAY
67196: PPUSH
67197: CALL_OW 116
67201: GO 67492
// if path > tag then
67203: LD_VAR 0 2
67207: PUSH
67208: LD_VAR 0 9
67212: GREATER
67213: IFFALSE 67421
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67215: LD_ADDR_VAR 0 6
67219: PUSH
67220: LD_VAR 0 5
67224: PPUSH
67225: LD_INT 91
67227: PUSH
67228: LD_VAR 0 4
67232: PUSH
67233: LD_INT 8
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: PPUSH
67241: CALL_OW 72
67245: ST_TO_ADDR
// if nearEnemy then
67246: LD_VAR 0 6
67250: IFFALSE 67319
// begin if GetWeapon ( i ) = ru_time_lapser then
67252: LD_VAR 0 4
67256: PPUSH
67257: CALL_OW 264
67261: PUSH
67262: LD_INT 49
67264: EQUAL
67265: IFFALSE 67293
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67267: LD_VAR 0 4
67271: PPUSH
67272: LD_VAR 0 6
67276: PPUSH
67277: LD_VAR 0 4
67281: PPUSH
67282: CALL_OW 74
67286: PPUSH
67287: CALL_OW 112
67291: GO 67317
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67293: LD_VAR 0 4
67297: PPUSH
67298: LD_VAR 0 6
67302: PPUSH
67303: LD_VAR 0 4
67307: PPUSH
67308: CALL_OW 74
67312: PPUSH
67313: CALL_OW 115
// end else
67317: GO 67419
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67319: LD_VAR 0 4
67323: PPUSH
67324: LD_VAR 0 2
67328: PUSH
67329: LD_VAR 0 9
67333: ARRAY
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PPUSH
67339: LD_VAR 0 2
67343: PUSH
67344: LD_VAR 0 9
67348: ARRAY
67349: PUSH
67350: LD_INT 2
67352: ARRAY
67353: PPUSH
67354: CALL_OW 297
67358: PUSH
67359: LD_INT 6
67361: GREATER
67362: IFFALSE 67405
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67364: LD_VAR 0 4
67368: PPUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_VAR 0 9
67378: ARRAY
67379: PUSH
67380: LD_INT 1
67382: ARRAY
67383: PPUSH
67384: LD_VAR 0 2
67388: PUSH
67389: LD_VAR 0 9
67393: ARRAY
67394: PUSH
67395: LD_INT 2
67397: ARRAY
67398: PPUSH
67399: CALL_OW 114
67403: GO 67419
// SetTag ( i , tag ) ;
67405: LD_VAR 0 4
67409: PPUSH
67410: LD_VAR 0 9
67414: PPUSH
67415: CALL_OW 109
// end else
67419: GO 67492
// if enemy then
67421: LD_VAR 0 5
67425: IFFALSE 67492
// begin if GetWeapon ( i ) = ru_time_lapser then
67427: LD_VAR 0 4
67431: PPUSH
67432: CALL_OW 264
67436: PUSH
67437: LD_INT 49
67439: EQUAL
67440: IFFALSE 67468
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67442: LD_VAR 0 4
67446: PPUSH
67447: LD_VAR 0 5
67451: PPUSH
67452: LD_VAR 0 4
67456: PPUSH
67457: CALL_OW 74
67461: PPUSH
67462: CALL_OW 112
67466: GO 67492
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67468: LD_VAR 0 4
67472: PPUSH
67473: LD_VAR 0 5
67477: PPUSH
67478: LD_VAR 0 4
67482: PPUSH
67483: CALL_OW 74
67487: PPUSH
67488: CALL_OW 115
// end ; end ;
67492: GO 67072
67494: POP
67495: POP
// end ;
67496: LD_VAR 0 3
67500: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
67505: PPUSH
// if not unit or IsInUnit ( unit ) then
67506: LD_VAR 0 1
67510: NOT
67511: PUSH
67512: LD_VAR 0 1
67516: PPUSH
67517: CALL_OW 310
67521: OR
67522: IFFALSE 67526
// exit ;
67524: GO 67617
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67526: LD_ADDR_VAR 0 4
67530: PUSH
67531: LD_VAR 0 1
67535: PPUSH
67536: CALL_OW 250
67540: PPUSH
67541: LD_VAR 0 2
67545: PPUSH
67546: LD_INT 1
67548: PPUSH
67549: CALL_OW 272
67553: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67554: LD_ADDR_VAR 0 5
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: CALL_OW 251
67568: PPUSH
67569: LD_VAR 0 2
67573: PPUSH
67574: LD_INT 1
67576: PPUSH
67577: CALL_OW 273
67581: ST_TO_ADDR
// if ValidHex ( x , y ) then
67582: LD_VAR 0 4
67586: PPUSH
67587: LD_VAR 0 5
67591: PPUSH
67592: CALL_OW 488
67596: IFFALSE 67617
// ComTurnXY ( unit , x , y ) ;
67598: LD_VAR 0 1
67602: PPUSH
67603: LD_VAR 0 4
67607: PPUSH
67608: LD_VAR 0 5
67612: PPUSH
67613: CALL_OW 118
// end ;
67617: LD_VAR 0 3
67621: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67622: LD_INT 0
67624: PPUSH
67625: PPUSH
// result := false ;
67626: LD_ADDR_VAR 0 3
67630: PUSH
67631: LD_INT 0
67633: ST_TO_ADDR
// if not units then
67634: LD_VAR 0 2
67638: NOT
67639: IFFALSE 67643
// exit ;
67641: GO 67688
// for i in units do
67643: LD_ADDR_VAR 0 4
67647: PUSH
67648: LD_VAR 0 2
67652: PUSH
67653: FOR_IN
67654: IFFALSE 67686
// if See ( side , i ) then
67656: LD_VAR 0 1
67660: PPUSH
67661: LD_VAR 0 4
67665: PPUSH
67666: CALL_OW 292
67670: IFFALSE 67684
// begin result := true ;
67672: LD_ADDR_VAR 0 3
67676: PUSH
67677: LD_INT 1
67679: ST_TO_ADDR
// exit ;
67680: POP
67681: POP
67682: GO 67688
// end ;
67684: GO 67653
67686: POP
67687: POP
// end ;
67688: LD_VAR 0 3
67692: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67693: LD_INT 0
67695: PPUSH
67696: PPUSH
67697: PPUSH
67698: PPUSH
// if not unit or not points then
67699: LD_VAR 0 1
67703: NOT
67704: PUSH
67705: LD_VAR 0 2
67709: NOT
67710: OR
67711: IFFALSE 67715
// exit ;
67713: GO 67805
// dist := 99999 ;
67715: LD_ADDR_VAR 0 5
67719: PUSH
67720: LD_INT 99999
67722: ST_TO_ADDR
// for i in points do
67723: LD_ADDR_VAR 0 4
67727: PUSH
67728: LD_VAR 0 2
67732: PUSH
67733: FOR_IN
67734: IFFALSE 67803
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67736: LD_ADDR_VAR 0 6
67740: PUSH
67741: LD_VAR 0 1
67745: PPUSH
67746: LD_VAR 0 4
67750: PUSH
67751: LD_INT 1
67753: ARRAY
67754: PPUSH
67755: LD_VAR 0 4
67759: PUSH
67760: LD_INT 2
67762: ARRAY
67763: PPUSH
67764: CALL_OW 297
67768: ST_TO_ADDR
// if tmpDist < dist then
67769: LD_VAR 0 6
67773: PUSH
67774: LD_VAR 0 5
67778: LESS
67779: IFFALSE 67801
// begin result := i ;
67781: LD_ADDR_VAR 0 3
67785: PUSH
67786: LD_VAR 0 4
67790: ST_TO_ADDR
// dist := tmpDist ;
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: LD_VAR 0 6
67800: ST_TO_ADDR
// end ; end ;
67801: GO 67733
67803: POP
67804: POP
// end ;
67805: LD_VAR 0 3
67809: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67810: LD_INT 0
67812: PPUSH
// uc_side := side ;
67813: LD_ADDR_OWVAR 20
67817: PUSH
67818: LD_VAR 0 1
67822: ST_TO_ADDR
// uc_nation := 3 ;
67823: LD_ADDR_OWVAR 21
67827: PUSH
67828: LD_INT 3
67830: ST_TO_ADDR
// vc_chassis := 25 ;
67831: LD_ADDR_OWVAR 37
67835: PUSH
67836: LD_INT 25
67838: ST_TO_ADDR
// vc_engine := engine_siberite ;
67839: LD_ADDR_OWVAR 39
67843: PUSH
67844: LD_INT 3
67846: ST_TO_ADDR
// vc_control := control_computer ;
67847: LD_ADDR_OWVAR 38
67851: PUSH
67852: LD_INT 3
67854: ST_TO_ADDR
// vc_weapon := 59 ;
67855: LD_ADDR_OWVAR 40
67859: PUSH
67860: LD_INT 59
67862: ST_TO_ADDR
// result := CreateVehicle ;
67863: LD_ADDR_VAR 0 5
67867: PUSH
67868: CALL_OW 45
67872: ST_TO_ADDR
// SetDir ( result , d ) ;
67873: LD_VAR 0 5
67877: PPUSH
67878: LD_VAR 0 4
67882: PPUSH
67883: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67887: LD_VAR 0 5
67891: PPUSH
67892: LD_VAR 0 2
67896: PPUSH
67897: LD_VAR 0 3
67901: PPUSH
67902: LD_INT 0
67904: PPUSH
67905: CALL_OW 48
// end ;
67909: LD_VAR 0 5
67913: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67914: LD_INT 0
67916: PPUSH
67917: PPUSH
67918: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67919: LD_ADDR_VAR 0 2
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67942: LD_VAR 0 1
67946: NOT
67947: PUSH
67948: LD_VAR 0 1
67952: PPUSH
67953: CALL_OW 264
67957: PUSH
67958: LD_INT 12
67960: PUSH
67961: LD_INT 51
67963: PUSH
67964: LD_INT 32
67966: PUSH
67967: LD_INT 89
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: IN
67976: NOT
67977: OR
67978: IFFALSE 67982
// exit ;
67980: GO 68080
// for i := 1 to 3 do
67982: LD_ADDR_VAR 0 3
67986: PUSH
67987: DOUBLE
67988: LD_INT 1
67990: DEC
67991: ST_TO_ADDR
67992: LD_INT 3
67994: PUSH
67995: FOR_TO
67996: IFFALSE 68078
// begin tmp := GetCargo ( cargo , i ) ;
67998: LD_ADDR_VAR 0 4
68002: PUSH
68003: LD_VAR 0 1
68007: PPUSH
68008: LD_VAR 0 3
68012: PPUSH
68013: CALL_OW 289
68017: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68018: LD_ADDR_VAR 0 2
68022: PUSH
68023: LD_VAR 0 2
68027: PPUSH
68028: LD_VAR 0 3
68032: PPUSH
68033: LD_VAR 0 4
68037: PPUSH
68038: CALL_OW 1
68042: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68043: LD_ADDR_VAR 0 2
68047: PUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: LD_INT 4
68055: PPUSH
68056: LD_VAR 0 2
68060: PUSH
68061: LD_INT 4
68063: ARRAY
68064: PUSH
68065: LD_VAR 0 4
68069: PLUS
68070: PPUSH
68071: CALL_OW 1
68075: ST_TO_ADDR
// end ;
68076: GO 67995
68078: POP
68079: POP
// end ;
68080: LD_VAR 0 2
68084: RET
// export function Length ( array ) ; begin
68085: LD_INT 0
68087: PPUSH
// result := array + 0 ;
68088: LD_ADDR_VAR 0 2
68092: PUSH
68093: LD_VAR 0 1
68097: PUSH
68098: LD_INT 0
68100: PLUS
68101: ST_TO_ADDR
// end ;
68102: LD_VAR 0 2
68106: RET
// export function PrepareArray ( array ) ; begin
68107: LD_INT 0
68109: PPUSH
// result := array diff 0 ;
68110: LD_ADDR_VAR 0 2
68114: PUSH
68115: LD_VAR 0 1
68119: PUSH
68120: LD_INT 0
68122: DIFF
68123: ST_TO_ADDR
// if not result [ 1 ] then
68124: LD_VAR 0 2
68128: PUSH
68129: LD_INT 1
68131: ARRAY
68132: NOT
68133: IFFALSE 68153
// result := Delete ( result , 1 ) ;
68135: LD_ADDR_VAR 0 2
68139: PUSH
68140: LD_VAR 0 2
68144: PPUSH
68145: LD_INT 1
68147: PPUSH
68148: CALL_OW 3
68152: ST_TO_ADDR
// end ;
68153: LD_VAR 0 2
68157: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68158: LD_INT 0
68160: PPUSH
68161: PPUSH
68162: PPUSH
68163: PPUSH
// sibRocketRange := 25 ;
68164: LD_ADDR_VAR 0 6
68168: PUSH
68169: LD_INT 25
68171: ST_TO_ADDR
// result := false ;
68172: LD_ADDR_VAR 0 4
68176: PUSH
68177: LD_INT 0
68179: ST_TO_ADDR
// for i := 0 to 5 do
68180: LD_ADDR_VAR 0 5
68184: PUSH
68185: DOUBLE
68186: LD_INT 0
68188: DEC
68189: ST_TO_ADDR
68190: LD_INT 5
68192: PUSH
68193: FOR_TO
68194: IFFALSE 68261
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68196: LD_VAR 0 1
68200: PPUSH
68201: LD_VAR 0 5
68205: PPUSH
68206: LD_VAR 0 6
68210: PPUSH
68211: CALL_OW 272
68215: PPUSH
68216: LD_VAR 0 2
68220: PPUSH
68221: LD_VAR 0 5
68225: PPUSH
68226: LD_VAR 0 6
68230: PPUSH
68231: CALL_OW 273
68235: PPUSH
68236: LD_VAR 0 3
68240: PPUSH
68241: CALL_OW 309
68245: IFFALSE 68259
// begin result := true ;
68247: LD_ADDR_VAR 0 4
68251: PUSH
68252: LD_INT 1
68254: ST_TO_ADDR
// exit ;
68255: POP
68256: POP
68257: GO 68263
// end ;
68259: GO 68193
68261: POP
68262: POP
// end ;
68263: LD_VAR 0 4
68267: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68268: LD_INT 0
68270: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68271: LD_VAR 0 1
68275: PPUSH
68276: LD_VAR 0 2
68280: PPUSH
68281: LD_INT 0
68283: PPUSH
68284: LD_INT 0
68286: PPUSH
68287: LD_INT 1
68289: PPUSH
68290: LD_INT 0
68292: PPUSH
68293: CALL_OW 587
// end ; end_of_file
68297: LD_VAR 0 3
68301: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68302: LD_VAR 0 1
68306: PUSH
68307: LD_INT 200
68309: DOUBLE
68310: GREATEREQUAL
68311: IFFALSE 68319
68313: LD_INT 299
68315: DOUBLE
68316: LESSEQUAL
68317: IFTRUE 68321
68319: GO 68353
68321: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68322: LD_VAR 0 1
68326: PPUSH
68327: LD_VAR 0 2
68331: PPUSH
68332: LD_VAR 0 3
68336: PPUSH
68337: LD_VAR 0 4
68341: PPUSH
68342: LD_VAR 0 5
68346: PPUSH
68347: CALL 22968 0 5
68351: GO 68430
68353: LD_INT 300
68355: DOUBLE
68356: GREATEREQUAL
68357: IFFALSE 68365
68359: LD_INT 399
68361: DOUBLE
68362: LESSEQUAL
68363: IFTRUE 68367
68365: GO 68429
68367: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68368: LD_VAR 0 1
68372: PPUSH
68373: LD_VAR 0 2
68377: PPUSH
68378: LD_VAR 0 3
68382: PPUSH
68383: LD_VAR 0 4
68387: PPUSH
68388: LD_VAR 0 5
68392: PPUSH
68393: LD_VAR 0 6
68397: PPUSH
68398: LD_VAR 0 7
68402: PPUSH
68403: LD_VAR 0 8
68407: PPUSH
68408: LD_VAR 0 9
68412: PPUSH
68413: LD_VAR 0 10
68417: PPUSH
68418: LD_VAR 0 11
68422: PPUSH
68423: CALL 19301 0 11
68427: GO 68430
68429: POP
// end ;
68430: PPOPN 11
68432: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: LD_VAR 0 5
68457: PPUSH
68458: CALL 22704 0 5
// end ; end_of_file
68462: PPOPN 5
68464: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68465: LD_VAR 0 1
68469: PPUSH
68470: LD_VAR 0 2
68474: PPUSH
68475: LD_VAR 0 3
68479: PPUSH
68480: LD_VAR 0 4
68484: PPUSH
68485: LD_VAR 0 5
68489: PPUSH
68490: LD_VAR 0 6
68494: PPUSH
68495: CALL 6921 0 6
// end ;
68499: PPOPN 6
68501: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68502: LD_INT 0
68504: PPUSH
// begin if not units then
68505: LD_VAR 0 1
68509: NOT
68510: IFFALSE 68514
// exit ;
68512: GO 68514
// end ;
68514: PPOPN 7
68516: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68517: CALL 6815 0 0
// end ;
68521: PPOPN 1
68523: END
