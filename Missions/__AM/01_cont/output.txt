// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26605 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26605 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26605 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26605 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 26605 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 10
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5727
5680: GO 5682
5682: DISABLE
// begin bobby_saved := true ;
5683: LD_ADDR_EXP 12
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5691: LD_EXP 17
5695: PPUSH
5696: CALL_OW 256
5700: PPUSH
5701: LD_STRING 01_BobbyLifePoints_1
5703: PPUSH
5704: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5708: LD_EXP 17
5712: PPUSH
5713: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5717: LD_STRING Bobby
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 101
// end ;
5727: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5728: LD_EXP 18
5732: PPUSH
5733: LD_INT 10
5735: PPUSH
5736: CALL_OW 308
5740: IFFALSE 5789
5742: GO 5744
5744: DISABLE
// begin cyrus_saved := true ;
5745: LD_ADDR_EXP 13
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: CALL_OW 256
5762: PPUSH
5763: LD_STRING 01_CyrusLifePoints_1
5765: PPUSH
5766: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5770: LD_EXP 18
5774: PPUSH
5775: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5779: LD_STRING Cyrus
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 101
// end ;
5789: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5790: LD_EXP 16
5794: PPUSH
5795: LD_INT 10
5797: PPUSH
5798: CALL_OW 308
5802: IFFALSE 6410
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin if macmilan_use_radio then
5815: LD_EXP 6
5819: IFFALSE 5828
// SetAchievement ( ACH_RADIO ) ;
5821: LD_STRING ACH_RADIO
5823: PPUSH
5824: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5828: LD_EXP 13
5832: NOT
5833: PUSH
5834: LD_EXP 7
5838: AND
5839: PUSH
5840: LD_EXP 18
5844: PPUSH
5845: CALL_OW 302
5849: AND
5850: PUSH
5851: LD_EXP 12
5855: NOT
5856: PUSH
5857: LD_EXP 4
5861: AND
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 302
5872: AND
5873: OR
5874: IFFALSE 5915
// case Query ( Q2 ) of 1 :
5876: LD_STRING Q2
5878: PPUSH
5879: CALL_OW 97
5883: PUSH
5884: LD_INT 1
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5903
5892: POP
// wait_for_them := true ; 2 :
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
5901: GO 5915
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5914
5911: POP
// ; end ;
5912: GO 5915
5914: POP
// if wait_for_them then
5915: LD_VAR 0 3
5919: IFFALSE 6032
// repeat wait ( 0 0$01 ) ;
5921: LD_INT 35
5923: PPUSH
5924: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5928: LD_EXP 13
5932: PUSH
5933: LD_EXP 12
5937: AND
5938: PUSH
5939: LD_EXP 13
5943: PUSH
5944: LD_EXP 4
5948: NOT
5949: PUSH
5950: LD_EXP 17
5954: PPUSH
5955: CALL_OW 303
5959: OR
5960: PUSH
5961: LD_EXP 17
5965: PPUSH
5966: CALL_OW 301
5970: OR
5971: AND
5972: OR
5973: PUSH
5974: LD_EXP 12
5978: PUSH
5979: LD_EXP 7
5983: NOT
5984: PUSH
5985: LD_EXP 18
5989: PPUSH
5990: CALL_OW 303
5994: OR
5995: PUSH
5996: LD_EXP 18
6000: PPUSH
6001: CALL_OW 301
6005: OR
6006: AND
6007: OR
6008: PUSH
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 301
6018: PUSH
6019: LD_EXP 18
6023: PPUSH
6024: CALL_OW 301
6028: AND
6029: OR
6030: IFFALSE 5921
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6032: LD_EXP 16
6036: PPUSH
6037: CALL_OW 256
6041: PPUSH
6042: LD_STRING 01_JMMLifePoints_1
6044: PPUSH
6045: CALL_OW 39
// RemoveUnit ( JMM ) ;
6049: LD_EXP 16
6053: PPUSH
6054: CALL_OW 64
// to_reward := [ JMM ] ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_EXP 16
6067: PUSH
6068: EMPTY
6069: LIST
6070: ST_TO_ADDR
// if bobby_saved then
6071: LD_EXP 12
6075: IFFALSE 6093
// to_reward := to_reward ^ Bobby ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_EXP 17
6091: ADD
6092: ST_TO_ADDR
// if cyrus_saved then
6093: LD_EXP 13
6097: IFFALSE 6115
// to_reward := to_reward ^ Cyrus ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_EXP 18
6113: ADD
6114: ST_TO_ADDR
// m1 := true ;
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// m2 := bobby_saved ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_EXP 12
6132: ST_TO_ADDR
// m3 := cyrus_saved ;
6133: LD_ADDR_VAR 0 6
6137: PUSH
6138: LD_EXP 13
6142: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6143: LD_STRING JMM
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: CALL_OW 101
// if not bobby_in_squad then
6153: LD_EXP 4
6157: NOT
6158: IFFALSE 6171
// AddMedal ( Bobby , - 1 ) ;
6160: LD_STRING Bobby
6162: PPUSH
6163: LD_INT 1
6165: NEG
6166: PPUSH
6167: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6171: LD_EXP 12
6175: NOT
6176: PUSH
6177: LD_EXP 17
6181: PPUSH
6182: CALL_OW 303
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 301
6196: OR
6197: AND
6198: IFFALSE 6211
// AddMedal ( Bobby , - 2 ) ;
6200: LD_STRING Bobby
6202: PPUSH
6203: LD_INT 2
6205: NEG
6206: PPUSH
6207: CALL_OW 101
// if not cyrus_in_squad then
6211: LD_EXP 7
6215: NOT
6216: IFFALSE 6229
// AddMedal ( Cyrus , - 1 ) ;
6218: LD_STRING Cyrus
6220: PPUSH
6221: LD_INT 1
6223: NEG
6224: PPUSH
6225: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6229: LD_EXP 13
6233: NOT
6234: PUSH
6235: LD_EXP 18
6239: PPUSH
6240: CALL_OW 303
6244: PUSH
6245: LD_EXP 18
6249: PPUSH
6250: CALL_OW 301
6254: OR
6255: AND
6256: IFFALSE 6269
// AddMedal ( Cyrus , - 2 ) ;
6258: LD_STRING Cyrus
6260: PPUSH
6261: LD_INT 2
6263: NEG
6264: PPUSH
6265: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6269: LD_OWVAR 67
6273: PUSH
6274: LD_INT 3
6276: GREATEREQUAL
6277: PUSH
6278: LD_VAR 0 4
6282: AND
6283: PUSH
6284: LD_VAR 0 5
6288: AND
6289: PUSH
6290: LD_VAR 0 6
6294: AND
6295: IFFALSE 6307
// SetAchievementEX ( ACH_AMER , 1 ) ;
6297: LD_STRING ACH_AMER
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 564
// GiveMedals ( MAIN ) ;
6307: LD_STRING MAIN
6309: PPUSH
6310: CALL_OW 102
// RewardPeople ( to_reward ) ;
6314: LD_VAR 0 2
6318: PPUSH
6319: CALL_OW 43
// if bobby_saved then
6323: LD_EXP 12
6327: IFFALSE 6347
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_EXP 2
6338: PUSH
6339: LD_STRING Bobby
6341: STR
6342: PPUSH
6343: CALL_OW 38
// if cyrus_saved then
6347: LD_EXP 13
6351: IFFALSE 6371
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6353: LD_EXP 18
6357: PPUSH
6358: LD_EXP 2
6362: PUSH
6363: LD_STRING Cyrus
6365: STR
6366: PPUSH
6367: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6371: LD_EXP 16
6375: PPUSH
6376: LD_EXP 2
6380: PUSH
6381: LD_STRING JMM
6383: STR
6384: PPUSH
6385: CALL_OW 38
// if tick <= 3 3$00 then
6389: LD_OWVAR 1
6393: PUSH
6394: LD_INT 6300
6396: LESSEQUAL
6397: IFFALSE 6406
// SetAchievement ( ACH_ASPEED_1 ) ;
6399: LD_STRING ACH_ASPEED_1
6401: PPUSH
6402: CALL_OW 543
// YouWin ;
6406: CALL_OW 103
// end ; end_of_file
6410: PPOPN 6
6412: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6413: LD_VAR 0 1
6417: PUSH
6418: LD_EXP 16
6422: EQUAL
6423: IFFALSE 6432
// YouLost ( JMM ) ;
6425: LD_STRING JMM
6427: PPUSH
6428: CALL_OW 104
// end ;
6432: PPOPN 1
6434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6435: LD_VAR 0 1
6439: PPUSH
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL 22256 0 2
// end ;
6449: PPOPN 2
6451: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL 22134 0 1
// if un = JMM then
6461: LD_VAR 0 1
6465: PUSH
6466: LD_EXP 16
6470: EQUAL
6471: IFFALSE 6480
// YouLost ( JMM ) ;
6473: LD_STRING JMM
6475: PPUSH
6476: CALL_OW 104
// end ; end_of_file end_of_file
6480: PPOPN 1
6482: END
// every 0 0$1 do
6483: GO 6485
6485: DISABLE
// begin enable ;
6486: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6487: LD_STRING updateTimer(
6489: PUSH
6490: LD_OWVAR 1
6494: STR
6495: PUSH
6496: LD_STRING );
6498: STR
6499: PPUSH
6500: CALL_OW 559
// end ;
6504: END
// export function SOS_MapStart ( ) ; begin
6505: LD_INT 0
6507: PPUSH
// if streamModeActive then
6508: LD_EXP 27
6512: IFFALSE 6521
// DefineStreamItems ( true ) ;
6514: LD_INT 1
6516: PPUSH
6517: CALL 8175 0 1
// UpdateFactoryWaypoints ( ) ;
6521: CALL 21036 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6525: CALL 21293 0 0
// end ;
6529: LD_VAR 0 1
6533: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6534: LD_INT 0
6536: PPUSH
// if p2 = 100 then
6537: LD_VAR 0 2
6541: PUSH
6542: LD_INT 100
6544: EQUAL
6545: IFFALSE 7548
// begin if not StreamModeActive then
6547: LD_EXP 27
6551: NOT
6552: IFFALSE 6562
// StreamModeActive := true ;
6554: LD_ADDR_EXP 27
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// if p3 = 0 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 0
6569: EQUAL
6570: IFFALSE 6576
// InitStreamMode ;
6572: CALL 7711 0 0
// if p3 = 1 then
6576: LD_VAR 0 3
6580: PUSH
6581: LD_INT 1
6583: EQUAL
6584: IFFALSE 6594
// sRocket := true ;
6586: LD_ADDR_EXP 32
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if p3 = 2 then
6594: LD_VAR 0 3
6598: PUSH
6599: LD_INT 2
6601: EQUAL
6602: IFFALSE 6612
// sSpeed := true ;
6604: LD_ADDR_EXP 31
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// if p3 = 3 then
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 3
6619: EQUAL
6620: IFFALSE 6630
// sEngine := true ;
6622: LD_ADDR_EXP 33
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// if p3 = 4 then
6630: LD_VAR 0 3
6634: PUSH
6635: LD_INT 4
6637: EQUAL
6638: IFFALSE 6648
// sSpec := true ;
6640: LD_ADDR_EXP 30
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// if p3 = 5 then
6648: LD_VAR 0 3
6652: PUSH
6653: LD_INT 5
6655: EQUAL
6656: IFFALSE 6666
// sLevel := true ;
6658: LD_ADDR_EXP 34
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// if p3 = 6 then
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 6
6673: EQUAL
6674: IFFALSE 6684
// sArmoury := true ;
6676: LD_ADDR_EXP 35
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// if p3 = 7 then
6684: LD_VAR 0 3
6688: PUSH
6689: LD_INT 7
6691: EQUAL
6692: IFFALSE 6702
// sRadar := true ;
6694: LD_ADDR_EXP 36
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// if p3 = 8 then
6702: LD_VAR 0 3
6706: PUSH
6707: LD_INT 8
6709: EQUAL
6710: IFFALSE 6720
// sBunker := true ;
6712: LD_ADDR_EXP 37
6716: PUSH
6717: LD_INT 1
6719: ST_TO_ADDR
// if p3 = 9 then
6720: LD_VAR 0 3
6724: PUSH
6725: LD_INT 9
6727: EQUAL
6728: IFFALSE 6738
// sHack := true ;
6730: LD_ADDR_EXP 38
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// if p3 = 10 then
6738: LD_VAR 0 3
6742: PUSH
6743: LD_INT 10
6745: EQUAL
6746: IFFALSE 6756
// sFire := true ;
6748: LD_ADDR_EXP 39
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// if p3 = 11 then
6756: LD_VAR 0 3
6760: PUSH
6761: LD_INT 11
6763: EQUAL
6764: IFFALSE 6774
// sRefresh := true ;
6766: LD_ADDR_EXP 40
6770: PUSH
6771: LD_INT 1
6773: ST_TO_ADDR
// if p3 = 12 then
6774: LD_VAR 0 3
6778: PUSH
6779: LD_INT 12
6781: EQUAL
6782: IFFALSE 6792
// sExp := true ;
6784: LD_ADDR_EXP 41
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
// if p3 = 13 then
6792: LD_VAR 0 3
6796: PUSH
6797: LD_INT 13
6799: EQUAL
6800: IFFALSE 6810
// sDepot := true ;
6802: LD_ADDR_EXP 42
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// if p3 = 14 then
6810: LD_VAR 0 3
6814: PUSH
6815: LD_INT 14
6817: EQUAL
6818: IFFALSE 6828
// sFlag := true ;
6820: LD_ADDR_EXP 43
6824: PUSH
6825: LD_INT 1
6827: ST_TO_ADDR
// if p3 = 15 then
6828: LD_VAR 0 3
6832: PUSH
6833: LD_INT 15
6835: EQUAL
6836: IFFALSE 6846
// sKamikadze := true ;
6838: LD_ADDR_EXP 51
6842: PUSH
6843: LD_INT 1
6845: ST_TO_ADDR
// if p3 = 16 then
6846: LD_VAR 0 3
6850: PUSH
6851: LD_INT 16
6853: EQUAL
6854: IFFALSE 6864
// sTroll := true ;
6856: LD_ADDR_EXP 52
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// if p3 = 17 then
6864: LD_VAR 0 3
6868: PUSH
6869: LD_INT 17
6871: EQUAL
6872: IFFALSE 6882
// sSlow := true ;
6874: LD_ADDR_EXP 53
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// if p3 = 18 then
6882: LD_VAR 0 3
6886: PUSH
6887: LD_INT 18
6889: EQUAL
6890: IFFALSE 6900
// sLack := true ;
6892: LD_ADDR_EXP 54
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// if p3 = 19 then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 19
6907: EQUAL
6908: IFFALSE 6918
// sTank := true ;
6910: LD_ADDR_EXP 56
6914: PUSH
6915: LD_INT 1
6917: ST_TO_ADDR
// if p3 = 20 then
6918: LD_VAR 0 3
6922: PUSH
6923: LD_INT 20
6925: EQUAL
6926: IFFALSE 6936
// sRemote := true ;
6928: LD_ADDR_EXP 57
6932: PUSH
6933: LD_INT 1
6935: ST_TO_ADDR
// if p3 = 21 then
6936: LD_VAR 0 3
6940: PUSH
6941: LD_INT 21
6943: EQUAL
6944: IFFALSE 6954
// sPowell := true ;
6946: LD_ADDR_EXP 58
6950: PUSH
6951: LD_INT 1
6953: ST_TO_ADDR
// if p3 = 22 then
6954: LD_VAR 0 3
6958: PUSH
6959: LD_INT 22
6961: EQUAL
6962: IFFALSE 6972
// sTeleport := true ;
6964: LD_ADDR_EXP 61
6968: PUSH
6969: LD_INT 1
6971: ST_TO_ADDR
// if p3 = 23 then
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 23
6979: EQUAL
6980: IFFALSE 6990
// sOilTower := true ;
6982: LD_ADDR_EXP 63
6986: PUSH
6987: LD_INT 1
6989: ST_TO_ADDR
// if p3 = 24 then
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 24
6997: EQUAL
6998: IFFALSE 7008
// sShovel := true ;
7000: LD_ADDR_EXP 64
7004: PUSH
7005: LD_INT 1
7007: ST_TO_ADDR
// if p3 = 25 then
7008: LD_VAR 0 3
7012: PUSH
7013: LD_INT 25
7015: EQUAL
7016: IFFALSE 7026
// sSheik := true ;
7018: LD_ADDR_EXP 65
7022: PUSH
7023: LD_INT 1
7025: ST_TO_ADDR
// if p3 = 26 then
7026: LD_VAR 0 3
7030: PUSH
7031: LD_INT 26
7033: EQUAL
7034: IFFALSE 7044
// sEarthquake := true ;
7036: LD_ADDR_EXP 67
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// if p3 = 27 then
7044: LD_VAR 0 3
7048: PUSH
7049: LD_INT 27
7051: EQUAL
7052: IFFALSE 7062
// sAI := true ;
7054: LD_ADDR_EXP 68
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// if p3 = 28 then
7062: LD_VAR 0 3
7066: PUSH
7067: LD_INT 28
7069: EQUAL
7070: IFFALSE 7080
// sCargo := true ;
7072: LD_ADDR_EXP 71
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// if p3 = 29 then
7080: LD_VAR 0 3
7084: PUSH
7085: LD_INT 29
7087: EQUAL
7088: IFFALSE 7098
// sDLaser := true ;
7090: LD_ADDR_EXP 72
7094: PUSH
7095: LD_INT 1
7097: ST_TO_ADDR
// if p3 = 30 then
7098: LD_VAR 0 3
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: IFFALSE 7116
// sExchange := true ;
7108: LD_ADDR_EXP 73
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// if p3 = 31 then
7116: LD_VAR 0 3
7120: PUSH
7121: LD_INT 31
7123: EQUAL
7124: IFFALSE 7134
// sFac := true ;
7126: LD_ADDR_EXP 74
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// if p3 = 32 then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 32
7141: EQUAL
7142: IFFALSE 7152
// sPower := true ;
7144: LD_ADDR_EXP 75
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
// if p3 = 33 then
7152: LD_VAR 0 3
7156: PUSH
7157: LD_INT 33
7159: EQUAL
7160: IFFALSE 7170
// sRandom := true ;
7162: LD_ADDR_EXP 76
7166: PUSH
7167: LD_INT 1
7169: ST_TO_ADDR
// if p3 = 34 then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 34
7177: EQUAL
7178: IFFALSE 7188
// sShield := true ;
7180: LD_ADDR_EXP 77
7184: PUSH
7185: LD_INT 1
7187: ST_TO_ADDR
// if p3 = 35 then
7188: LD_VAR 0 3
7192: PUSH
7193: LD_INT 35
7195: EQUAL
7196: IFFALSE 7206
// sTime := true ;
7198: LD_ADDR_EXP 78
7202: PUSH
7203: LD_INT 1
7205: ST_TO_ADDR
// if p3 = 36 then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 36
7213: EQUAL
7214: IFFALSE 7224
// sTools := true ;
7216: LD_ADDR_EXP 79
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// if p3 = 101 then
7224: LD_VAR 0 3
7228: PUSH
7229: LD_INT 101
7231: EQUAL
7232: IFFALSE 7242
// sSold := true ;
7234: LD_ADDR_EXP 44
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// if p3 = 102 then
7242: LD_VAR 0 3
7246: PUSH
7247: LD_INT 102
7249: EQUAL
7250: IFFALSE 7260
// sDiff := true ;
7252: LD_ADDR_EXP 45
7256: PUSH
7257: LD_INT 1
7259: ST_TO_ADDR
// if p3 = 103 then
7260: LD_VAR 0 3
7264: PUSH
7265: LD_INT 103
7267: EQUAL
7268: IFFALSE 7278
// sFog := true ;
7270: LD_ADDR_EXP 48
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// if p3 = 104 then
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 104
7285: EQUAL
7286: IFFALSE 7296
// sReset := true ;
7288: LD_ADDR_EXP 49
7292: PUSH
7293: LD_INT 1
7295: ST_TO_ADDR
// if p3 = 105 then
7296: LD_VAR 0 3
7300: PUSH
7301: LD_INT 105
7303: EQUAL
7304: IFFALSE 7314
// sSun := true ;
7306: LD_ADDR_EXP 50
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// if p3 = 106 then
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 106
7321: EQUAL
7322: IFFALSE 7332
// sTiger := true ;
7324: LD_ADDR_EXP 46
7328: PUSH
7329: LD_INT 1
7331: ST_TO_ADDR
// if p3 = 107 then
7332: LD_VAR 0 3
7336: PUSH
7337: LD_INT 107
7339: EQUAL
7340: IFFALSE 7350
// sBomb := true ;
7342: LD_ADDR_EXP 47
7346: PUSH
7347: LD_INT 1
7349: ST_TO_ADDR
// if p3 = 108 then
7350: LD_VAR 0 3
7354: PUSH
7355: LD_INT 108
7357: EQUAL
7358: IFFALSE 7368
// sWound := true ;
7360: LD_ADDR_EXP 55
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// if p3 = 109 then
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 109
7375: EQUAL
7376: IFFALSE 7386
// sBetray := true ;
7378: LD_ADDR_EXP 59
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if p3 = 110 then
7386: LD_VAR 0 3
7390: PUSH
7391: LD_INT 110
7393: EQUAL
7394: IFFALSE 7404
// sContamin := true ;
7396: LD_ADDR_EXP 60
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// if p3 = 111 then
7404: LD_VAR 0 3
7408: PUSH
7409: LD_INT 111
7411: EQUAL
7412: IFFALSE 7422
// sOil := true ;
7414: LD_ADDR_EXP 62
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// if p3 = 112 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 112
7429: EQUAL
7430: IFFALSE 7440
// sStu := true ;
7432: LD_ADDR_EXP 66
7436: PUSH
7437: LD_INT 1
7439: ST_TO_ADDR
// if p3 = 113 then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_INT 113
7447: EQUAL
7448: IFFALSE 7458
// sBazooka := true ;
7450: LD_ADDR_EXP 69
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// if p3 = 114 then
7458: LD_VAR 0 3
7462: PUSH
7463: LD_INT 114
7465: EQUAL
7466: IFFALSE 7476
// sMortar := true ;
7468: LD_ADDR_EXP 70
7472: PUSH
7473: LD_INT 1
7475: ST_TO_ADDR
// if p3 = 115 then
7476: LD_VAR 0 3
7480: PUSH
7481: LD_INT 115
7483: EQUAL
7484: IFFALSE 7494
// sRanger := true ;
7486: LD_ADDR_EXP 80
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// if p3 = 116 then
7494: LD_VAR 0 3
7498: PUSH
7499: LD_INT 116
7501: EQUAL
7502: IFFALSE 7512
// sComputer := true ;
7504: LD_ADDR_EXP 81
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// if p3 = 117 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 117
7519: EQUAL
7520: IFFALSE 7530
// s30 := true ;
7522: LD_ADDR_EXP 82
7526: PUSH
7527: LD_INT 1
7529: ST_TO_ADDR
// if p3 = 118 then
7530: LD_VAR 0 3
7534: PUSH
7535: LD_INT 118
7537: EQUAL
7538: IFFALSE 7548
// s60 := true ;
7540: LD_ADDR_EXP 83
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// end ; if p2 = 101 then
7548: LD_VAR 0 2
7552: PUSH
7553: LD_INT 101
7555: EQUAL
7556: IFFALSE 7684
// begin case p3 of 1 :
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 1
7565: DOUBLE
7566: EQUAL
7567: IFTRUE 7571
7569: GO 7578
7571: POP
// hHackUnlimitedResources ; 2 :
7572: CALL 19782 0 0
7576: GO 7684
7578: LD_INT 2
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7593
7586: POP
// hHackSetLevel10 ; 3 :
7587: CALL 19915 0 0
7591: GO 7684
7593: LD_INT 3
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7608
7601: POP
// hHackSetLevel10YourUnits ; 4 :
7602: CALL 20000 0 0
7606: GO 7684
7608: LD_INT 4
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7623
7616: POP
// hHackInvincible ; 5 :
7617: CALL 20448 0 0
7621: GO 7684
7623: LD_INT 5
7625: DOUBLE
7626: EQUAL
7627: IFTRUE 7631
7629: GO 7638
7631: POP
// hHackInvisible ; 6 :
7632: CALL 20559 0 0
7636: GO 7684
7638: LD_INT 6
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7653
7646: POP
// hHackChangeYourSide ; 7 :
7647: CALL 20616 0 0
7651: GO 7684
7653: LD_INT 7
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7668
7661: POP
// hHackChangeUnitSide ; 8 :
7662: CALL 20658 0 0
7666: GO 7684
7668: LD_INT 8
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7683
7676: POP
// hHackFog ; end ;
7677: CALL 20759 0 0
7681: GO 7684
7683: POP
// end ; end ;
7684: LD_VAR 0 7
7688: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7689: GO 7691
7691: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7692: LD_STRING initStreamRollete();
7694: PPUSH
7695: CALL_OW 559
// InitStreamMode ;
7699: CALL 7711 0 0
// DefineStreamItems ( false ) ;
7703: LD_INT 0
7705: PPUSH
7706: CALL 8175 0 1
// end ;
7710: END
// function InitStreamMode ; begin
7711: LD_INT 0
7713: PPUSH
// streamModeActive := false ;
7714: LD_ADDR_EXP 27
7718: PUSH
7719: LD_INT 0
7721: ST_TO_ADDR
// normalCounter := 36 ;
7722: LD_ADDR_EXP 28
7726: PUSH
7727: LD_INT 36
7729: ST_TO_ADDR
// hardcoreCounter := 18 ;
7730: LD_ADDR_EXP 29
7734: PUSH
7735: LD_INT 18
7737: ST_TO_ADDR
// sRocket := false ;
7738: LD_ADDR_EXP 32
7742: PUSH
7743: LD_INT 0
7745: ST_TO_ADDR
// sSpeed := false ;
7746: LD_ADDR_EXP 31
7750: PUSH
7751: LD_INT 0
7753: ST_TO_ADDR
// sEngine := false ;
7754: LD_ADDR_EXP 33
7758: PUSH
7759: LD_INT 0
7761: ST_TO_ADDR
// sSpec := false ;
7762: LD_ADDR_EXP 30
7766: PUSH
7767: LD_INT 0
7769: ST_TO_ADDR
// sLevel := false ;
7770: LD_ADDR_EXP 34
7774: PUSH
7775: LD_INT 0
7777: ST_TO_ADDR
// sArmoury := false ;
7778: LD_ADDR_EXP 35
7782: PUSH
7783: LD_INT 0
7785: ST_TO_ADDR
// sRadar := false ;
7786: LD_ADDR_EXP 36
7790: PUSH
7791: LD_INT 0
7793: ST_TO_ADDR
// sBunker := false ;
7794: LD_ADDR_EXP 37
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// sHack := false ;
7802: LD_ADDR_EXP 38
7806: PUSH
7807: LD_INT 0
7809: ST_TO_ADDR
// sFire := false ;
7810: LD_ADDR_EXP 39
7814: PUSH
7815: LD_INT 0
7817: ST_TO_ADDR
// sRefresh := false ;
7818: LD_ADDR_EXP 40
7822: PUSH
7823: LD_INT 0
7825: ST_TO_ADDR
// sExp := false ;
7826: LD_ADDR_EXP 41
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// sDepot := false ;
7834: LD_ADDR_EXP 42
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// sFlag := false ;
7842: LD_ADDR_EXP 43
7846: PUSH
7847: LD_INT 0
7849: ST_TO_ADDR
// sKamikadze := false ;
7850: LD_ADDR_EXP 51
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// sTroll := false ;
7858: LD_ADDR_EXP 52
7862: PUSH
7863: LD_INT 0
7865: ST_TO_ADDR
// sSlow := false ;
7866: LD_ADDR_EXP 53
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// sLack := false ;
7874: LD_ADDR_EXP 54
7878: PUSH
7879: LD_INT 0
7881: ST_TO_ADDR
// sTank := false ;
7882: LD_ADDR_EXP 56
7886: PUSH
7887: LD_INT 0
7889: ST_TO_ADDR
// sRemote := false ;
7890: LD_ADDR_EXP 57
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// sPowell := false ;
7898: LD_ADDR_EXP 58
7902: PUSH
7903: LD_INT 0
7905: ST_TO_ADDR
// sTeleport := false ;
7906: LD_ADDR_EXP 61
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// sOilTower := false ;
7914: LD_ADDR_EXP 63
7918: PUSH
7919: LD_INT 0
7921: ST_TO_ADDR
// sShovel := false ;
7922: LD_ADDR_EXP 64
7926: PUSH
7927: LD_INT 0
7929: ST_TO_ADDR
// sSheik := false ;
7930: LD_ADDR_EXP 65
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// sEarthquake := false ;
7938: LD_ADDR_EXP 67
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// sAI := false ;
7946: LD_ADDR_EXP 68
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// sCargo := false ;
7954: LD_ADDR_EXP 71
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// sDLaser := false ;
7962: LD_ADDR_EXP 72
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// sExchange := false ;
7970: LD_ADDR_EXP 73
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// sFac := false ;
7978: LD_ADDR_EXP 74
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// sPower := false ;
7986: LD_ADDR_EXP 75
7990: PUSH
7991: LD_INT 0
7993: ST_TO_ADDR
// sRandom := false ;
7994: LD_ADDR_EXP 76
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// sShield := false ;
8002: LD_ADDR_EXP 77
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// sTime := false ;
8010: LD_ADDR_EXP 78
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// sTools := false ;
8018: LD_ADDR_EXP 79
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// sSold := false ;
8026: LD_ADDR_EXP 44
8030: PUSH
8031: LD_INT 0
8033: ST_TO_ADDR
// sDiff := false ;
8034: LD_ADDR_EXP 45
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// sFog := false ;
8042: LD_ADDR_EXP 48
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// sReset := false ;
8050: LD_ADDR_EXP 49
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// sSun := false ;
8058: LD_ADDR_EXP 50
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// sTiger := false ;
8066: LD_ADDR_EXP 46
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// sBomb := false ;
8074: LD_ADDR_EXP 47
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// sWound := false ;
8082: LD_ADDR_EXP 55
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// sBetray := false ;
8090: LD_ADDR_EXP 59
8094: PUSH
8095: LD_INT 0
8097: ST_TO_ADDR
// sContamin := false ;
8098: LD_ADDR_EXP 60
8102: PUSH
8103: LD_INT 0
8105: ST_TO_ADDR
// sOil := false ;
8106: LD_ADDR_EXP 62
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
// sStu := false ;
8114: LD_ADDR_EXP 66
8118: PUSH
8119: LD_INT 0
8121: ST_TO_ADDR
// sBazooka := false ;
8122: LD_ADDR_EXP 69
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// sMortar := false ;
8130: LD_ADDR_EXP 70
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// sRanger := false ;
8138: LD_ADDR_EXP 80
8142: PUSH
8143: LD_INT 0
8145: ST_TO_ADDR
// sComputer := false ;
8146: LD_ADDR_EXP 81
8150: PUSH
8151: LD_INT 0
8153: ST_TO_ADDR
// s30 := false ;
8154: LD_ADDR_EXP 82
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// s60 := false ;
8162: LD_ADDR_EXP 83
8166: PUSH
8167: LD_INT 0
8169: ST_TO_ADDR
// end ;
8170: LD_VAR 0 1
8174: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8175: LD_INT 0
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
8181: PPUSH
8182: PPUSH
8183: PPUSH
// result := [ ] ;
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: EMPTY
8190: ST_TO_ADDR
// if campaign_id = 1 then
8191: LD_OWVAR 69
8195: PUSH
8196: LD_INT 1
8198: EQUAL
8199: IFFALSE 11365
// begin case mission_number of 1 :
8201: LD_OWVAR 70
8205: PUSH
8206: LD_INT 1
8208: DOUBLE
8209: EQUAL
8210: IFTRUE 8214
8212: GO 8290
8214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 11
8228: PUSH
8229: LD_INT 12
8231: PUSH
8232: LD_INT 15
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 23
8243: PUSH
8244: LD_INT 26
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 101
8260: PUSH
8261: LD_INT 102
8263: PUSH
8264: LD_INT 106
8266: PUSH
8267: LD_INT 116
8269: PUSH
8270: LD_INT 117
8272: PUSH
8273: LD_INT 118
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: ST_TO_ADDR
8288: GO 11363
8290: LD_INT 2
8292: DOUBLE
8293: EQUAL
8294: IFTRUE 8298
8296: GO 8382
8298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8299: LD_ADDR_VAR 0 2
8303: PUSH
8304: LD_INT 2
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 11
8312: PUSH
8313: LD_INT 12
8315: PUSH
8316: LD_INT 15
8318: PUSH
8319: LD_INT 16
8321: PUSH
8322: LD_INT 22
8324: PUSH
8325: LD_INT 23
8327: PUSH
8328: LD_INT 26
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 101
8344: PUSH
8345: LD_INT 102
8347: PUSH
8348: LD_INT 105
8350: PUSH
8351: LD_INT 106
8353: PUSH
8354: LD_INT 108
8356: PUSH
8357: LD_INT 116
8359: PUSH
8360: LD_INT 117
8362: PUSH
8363: LD_INT 118
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: ST_TO_ADDR
8380: GO 11363
8382: LD_INT 3
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8478
8390: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: LD_INT 4
8401: PUSH
8402: LD_INT 5
8404: PUSH
8405: LD_INT 11
8407: PUSH
8408: LD_INT 12
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 26
8422: PUSH
8423: LD_INT 36
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 101
8440: PUSH
8441: LD_INT 102
8443: PUSH
8444: LD_INT 105
8446: PUSH
8447: LD_INT 106
8449: PUSH
8450: LD_INT 108
8452: PUSH
8453: LD_INT 116
8455: PUSH
8456: LD_INT 117
8458: PUSH
8459: LD_INT 118
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: ST_TO_ADDR
8476: GO 11363
8478: LD_INT 4
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8582
8486: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: LD_INT 5
8500: PUSH
8501: LD_INT 8
8503: PUSH
8504: LD_INT 11
8506: PUSH
8507: LD_INT 12
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 23
8521: PUSH
8522: LD_INT 26
8524: PUSH
8525: LD_INT 36
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 101
8544: PUSH
8545: LD_INT 102
8547: PUSH
8548: LD_INT 105
8550: PUSH
8551: LD_INT 106
8553: PUSH
8554: LD_INT 108
8556: PUSH
8557: LD_INT 116
8559: PUSH
8560: LD_INT 117
8562: PUSH
8563: LD_INT 118
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: ST_TO_ADDR
8580: GO 11363
8582: LD_INT 5
8584: DOUBLE
8585: EQUAL
8586: IFTRUE 8590
8588: GO 8702
8590: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8591: LD_ADDR_VAR 0 2
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: LD_INT 6
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 11
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 15
8619: PUSH
8620: LD_INT 16
8622: PUSH
8623: LD_INT 22
8625: PUSH
8626: LD_INT 23
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 101
8656: PUSH
8657: LD_INT 102
8659: PUSH
8660: LD_INT 105
8662: PUSH
8663: LD_INT 106
8665: PUSH
8666: LD_INT 108
8668: PUSH
8669: LD_INT 109
8671: PUSH
8672: LD_INT 112
8674: PUSH
8675: LD_INT 116
8677: PUSH
8678: LD_INT 117
8680: PUSH
8681: LD_INT 118
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: ST_TO_ADDR
8700: GO 11363
8702: LD_INT 6
8704: DOUBLE
8705: EQUAL
8706: IFTRUE 8710
8708: GO 8842
8710: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8711: LD_ADDR_VAR 0 2
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 4
8721: PUSH
8722: LD_INT 5
8724: PUSH
8725: LD_INT 6
8727: PUSH
8728: LD_INT 8
8730: PUSH
8731: LD_INT 11
8733: PUSH
8734: LD_INT 12
8736: PUSH
8737: LD_INT 15
8739: PUSH
8740: LD_INT 16
8742: PUSH
8743: LD_INT 20
8745: PUSH
8746: LD_INT 21
8748: PUSH
8749: LD_INT 22
8751: PUSH
8752: LD_INT 23
8754: PUSH
8755: LD_INT 25
8757: PUSH
8758: LD_INT 26
8760: PUSH
8761: LD_INT 30
8763: PUSH
8764: LD_INT 31
8766: PUSH
8767: LD_INT 32
8769: PUSH
8770: LD_INT 36
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 101
8796: PUSH
8797: LD_INT 102
8799: PUSH
8800: LD_INT 105
8802: PUSH
8803: LD_INT 106
8805: PUSH
8806: LD_INT 108
8808: PUSH
8809: LD_INT 109
8811: PUSH
8812: LD_INT 112
8814: PUSH
8815: LD_INT 116
8817: PUSH
8818: LD_INT 117
8820: PUSH
8821: LD_INT 118
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 11363
8842: LD_INT 7
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 8962
8850: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: LD_INT 4
8861: PUSH
8862: LD_INT 5
8864: PUSH
8865: LD_INT 7
8867: PUSH
8868: LD_INT 11
8870: PUSH
8871: LD_INT 12
8873: PUSH
8874: LD_INT 15
8876: PUSH
8877: LD_INT 16
8879: PUSH
8880: LD_INT 20
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 22
8888: PUSH
8889: LD_INT 23
8891: PUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 26
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 101
8916: PUSH
8917: LD_INT 102
8919: PUSH
8920: LD_INT 103
8922: PUSH
8923: LD_INT 105
8925: PUSH
8926: LD_INT 106
8928: PUSH
8929: LD_INT 108
8931: PUSH
8932: LD_INT 112
8934: PUSH
8935: LD_INT 116
8937: PUSH
8938: LD_INT 117
8940: PUSH
8941: LD_INT 118
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: ST_TO_ADDR
8960: GO 11363
8962: LD_INT 8
8964: DOUBLE
8965: EQUAL
8966: IFTRUE 8970
8968: GO 9110
8970: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8971: LD_ADDR_VAR 0 2
8975: PUSH
8976: LD_INT 2
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: LD_INT 5
8984: PUSH
8985: LD_INT 6
8987: PUSH
8988: LD_INT 7
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 15
9002: PUSH
9003: LD_INT 16
9005: PUSH
9006: LD_INT 20
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 22
9014: PUSH
9015: LD_INT 23
9017: PUSH
9018: LD_INT 25
9020: PUSH
9021: LD_INT 26
9023: PUSH
9024: LD_INT 30
9026: PUSH
9027: LD_INT 31
9029: PUSH
9030: LD_INT 32
9032: PUSH
9033: LD_INT 36
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 101
9060: PUSH
9061: LD_INT 102
9063: PUSH
9064: LD_INT 103
9066: PUSH
9067: LD_INT 105
9069: PUSH
9070: LD_INT 106
9072: PUSH
9073: LD_INT 108
9075: PUSH
9076: LD_INT 109
9078: PUSH
9079: LD_INT 112
9081: PUSH
9082: LD_INT 116
9084: PUSH
9085: LD_INT 117
9087: PUSH
9088: LD_INT 118
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
9108: GO 11363
9110: LD_INT 9
9112: DOUBLE
9113: EQUAL
9114: IFTRUE 9118
9116: GO 9266
9118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 11
9144: PUSH
9145: LD_INT 12
9147: PUSH
9148: LD_INT 15
9150: PUSH
9151: LD_INT 16
9153: PUSH
9154: LD_INT 20
9156: PUSH
9157: LD_INT 21
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 23
9165: PUSH
9166: LD_INT 25
9168: PUSH
9169: LD_INT 26
9171: PUSH
9172: LD_INT 28
9174: PUSH
9175: LD_INT 30
9177: PUSH
9178: LD_INT 31
9180: PUSH
9181: LD_INT 32
9183: PUSH
9184: LD_INT 36
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 101
9212: PUSH
9213: LD_INT 102
9215: PUSH
9216: LD_INT 103
9218: PUSH
9219: LD_INT 105
9221: PUSH
9222: LD_INT 106
9224: PUSH
9225: LD_INT 108
9227: PUSH
9228: LD_INT 109
9230: PUSH
9231: LD_INT 112
9233: PUSH
9234: LD_INT 114
9236: PUSH
9237: LD_INT 116
9239: PUSH
9240: LD_INT 117
9242: PUSH
9243: LD_INT 118
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 11363
9266: LD_INT 10
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9470
9274: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: LD_INT 6
9291: PUSH
9292: LD_INT 7
9294: PUSH
9295: LD_INT 8
9297: PUSH
9298: LD_INT 9
9300: PUSH
9301: LD_INT 10
9303: PUSH
9304: LD_INT 11
9306: PUSH
9307: LD_INT 12
9309: PUSH
9310: LD_INT 13
9312: PUSH
9313: LD_INT 14
9315: PUSH
9316: LD_INT 15
9318: PUSH
9319: LD_INT 16
9321: PUSH
9322: LD_INT 17
9324: PUSH
9325: LD_INT 18
9327: PUSH
9328: LD_INT 19
9330: PUSH
9331: LD_INT 20
9333: PUSH
9334: LD_INT 21
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_INT 23
9342: PUSH
9343: LD_INT 24
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 26
9351: PUSH
9352: LD_INT 28
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 31
9360: PUSH
9361: LD_INT 32
9363: PUSH
9364: LD_INT 36
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 101
9400: PUSH
9401: LD_INT 102
9403: PUSH
9404: LD_INT 103
9406: PUSH
9407: LD_INT 104
9409: PUSH
9410: LD_INT 105
9412: PUSH
9413: LD_INT 106
9415: PUSH
9416: LD_INT 107
9418: PUSH
9419: LD_INT 108
9421: PUSH
9422: LD_INT 109
9424: PUSH
9425: LD_INT 110
9427: PUSH
9428: LD_INT 111
9430: PUSH
9431: LD_INT 112
9433: PUSH
9434: LD_INT 114
9436: PUSH
9437: LD_INT 116
9439: PUSH
9440: LD_INT 117
9442: PUSH
9443: LD_INT 118
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: ST_TO_ADDR
9468: GO 11363
9470: LD_INT 11
9472: DOUBLE
9473: EQUAL
9474: IFTRUE 9478
9476: GO 9682
9478: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9479: LD_ADDR_VAR 0 2
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: LD_INT 3
9489: PUSH
9490: LD_INT 4
9492: PUSH
9493: LD_INT 5
9495: PUSH
9496: LD_INT 6
9498: PUSH
9499: LD_INT 7
9501: PUSH
9502: LD_INT 8
9504: PUSH
9505: LD_INT 9
9507: PUSH
9508: LD_INT 10
9510: PUSH
9511: LD_INT 11
9513: PUSH
9514: LD_INT 12
9516: PUSH
9517: LD_INT 13
9519: PUSH
9520: LD_INT 14
9522: PUSH
9523: LD_INT 15
9525: PUSH
9526: LD_INT 16
9528: PUSH
9529: LD_INT 17
9531: PUSH
9532: LD_INT 18
9534: PUSH
9535: LD_INT 19
9537: PUSH
9538: LD_INT 20
9540: PUSH
9541: LD_INT 21
9543: PUSH
9544: LD_INT 22
9546: PUSH
9547: LD_INT 23
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 25
9555: PUSH
9556: LD_INT 26
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 31
9567: PUSH
9568: LD_INT 32
9570: PUSH
9571: LD_INT 34
9573: PUSH
9574: LD_INT 36
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 101
9612: PUSH
9613: LD_INT 102
9615: PUSH
9616: LD_INT 103
9618: PUSH
9619: LD_INT 104
9621: PUSH
9622: LD_INT 105
9624: PUSH
9625: LD_INT 106
9627: PUSH
9628: LD_INT 107
9630: PUSH
9631: LD_INT 108
9633: PUSH
9634: LD_INT 109
9636: PUSH
9637: LD_INT 110
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: LD_INT 112
9645: PUSH
9646: LD_INT 114
9648: PUSH
9649: LD_INT 116
9651: PUSH
9652: LD_INT 117
9654: PUSH
9655: LD_INT 118
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 11363
9682: LD_INT 12
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9910
9690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9691: LD_ADDR_VAR 0 2
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: LD_INT 4
9707: PUSH
9708: LD_INT 5
9710: PUSH
9711: LD_INT 6
9713: PUSH
9714: LD_INT 7
9716: PUSH
9717: LD_INT 8
9719: PUSH
9720: LD_INT 9
9722: PUSH
9723: LD_INT 10
9725: PUSH
9726: LD_INT 11
9728: PUSH
9729: LD_INT 12
9731: PUSH
9732: LD_INT 13
9734: PUSH
9735: LD_INT 14
9737: PUSH
9738: LD_INT 15
9740: PUSH
9741: LD_INT 16
9743: PUSH
9744: LD_INT 17
9746: PUSH
9747: LD_INT 18
9749: PUSH
9750: LD_INT 19
9752: PUSH
9753: LD_INT 20
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 22
9761: PUSH
9762: LD_INT 23
9764: PUSH
9765: LD_INT 24
9767: PUSH
9768: LD_INT 25
9770: PUSH
9771: LD_INT 26
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 28
9779: PUSH
9780: LD_INT 30
9782: PUSH
9783: LD_INT 31
9785: PUSH
9786: LD_INT 32
9788: PUSH
9789: LD_INT 33
9791: PUSH
9792: LD_INT 34
9794: PUSH
9795: LD_INT 36
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 101
9836: PUSH
9837: LD_INT 102
9839: PUSH
9840: LD_INT 103
9842: PUSH
9843: LD_INT 104
9845: PUSH
9846: LD_INT 105
9848: PUSH
9849: LD_INT 106
9851: PUSH
9852: LD_INT 107
9854: PUSH
9855: LD_INT 108
9857: PUSH
9858: LD_INT 109
9860: PUSH
9861: LD_INT 110
9863: PUSH
9864: LD_INT 111
9866: PUSH
9867: LD_INT 112
9869: PUSH
9870: LD_INT 113
9872: PUSH
9873: LD_INT 114
9875: PUSH
9876: LD_INT 116
9878: PUSH
9879: LD_INT 117
9881: PUSH
9882: LD_INT 118
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: ST_TO_ADDR
9908: GO 11363
9910: LD_INT 13
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 10126
9918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: LD_INT 8
9941: PUSH
9942: LD_INT 9
9944: PUSH
9945: LD_INT 10
9947: PUSH
9948: LD_INT 11
9950: PUSH
9951: LD_INT 12
9953: PUSH
9954: LD_INT 14
9956: PUSH
9957: LD_INT 15
9959: PUSH
9960: LD_INT 16
9962: PUSH
9963: LD_INT 17
9965: PUSH
9966: LD_INT 18
9968: PUSH
9969: LD_INT 19
9971: PUSH
9972: LD_INT 20
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 22
9980: PUSH
9981: LD_INT 23
9983: PUSH
9984: LD_INT 24
9986: PUSH
9987: LD_INT 25
9989: PUSH
9990: LD_INT 26
9992: PUSH
9993: LD_INT 27
9995: PUSH
9996: LD_INT 28
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 34
10013: PUSH
10014: LD_INT 36
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 101
10052: PUSH
10053: LD_INT 102
10055: PUSH
10056: LD_INT 103
10058: PUSH
10059: LD_INT 104
10061: PUSH
10062: LD_INT 105
10064: PUSH
10065: LD_INT 106
10067: PUSH
10068: LD_INT 107
10070: PUSH
10071: LD_INT 108
10073: PUSH
10074: LD_INT 109
10076: PUSH
10077: LD_INT 110
10079: PUSH
10080: LD_INT 111
10082: PUSH
10083: LD_INT 112
10085: PUSH
10086: LD_INT 113
10088: PUSH
10089: LD_INT 114
10091: PUSH
10092: LD_INT 116
10094: PUSH
10095: LD_INT 117
10097: PUSH
10098: LD_INT 118
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: ST_TO_ADDR
10124: GO 11363
10126: LD_INT 14
10128: DOUBLE
10129: EQUAL
10130: IFTRUE 10134
10132: GO 10358
10134: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10135: LD_ADDR_VAR 0 2
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 3
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: LD_INT 5
10154: PUSH
10155: LD_INT 6
10157: PUSH
10158: LD_INT 7
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: LD_INT 9
10166: PUSH
10167: LD_INT 10
10169: PUSH
10170: LD_INT 11
10172: PUSH
10173: LD_INT 12
10175: PUSH
10176: LD_INT 13
10178: PUSH
10179: LD_INT 14
10181: PUSH
10182: LD_INT 15
10184: PUSH
10185: LD_INT 16
10187: PUSH
10188: LD_INT 17
10190: PUSH
10191: LD_INT 18
10193: PUSH
10194: LD_INT 19
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: LD_INT 23
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 25
10214: PUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 27
10220: PUSH
10221: LD_INT 28
10223: PUSH
10224: LD_INT 29
10226: PUSH
10227: LD_INT 30
10229: PUSH
10230: LD_INT 31
10232: PUSH
10233: LD_INT 32
10235: PUSH
10236: LD_INT 33
10238: PUSH
10239: LD_INT 34
10241: PUSH
10242: LD_INT 36
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 101
10284: PUSH
10285: LD_INT 102
10287: PUSH
10288: LD_INT 103
10290: PUSH
10291: LD_INT 104
10293: PUSH
10294: LD_INT 105
10296: PUSH
10297: LD_INT 106
10299: PUSH
10300: LD_INT 107
10302: PUSH
10303: LD_INT 108
10305: PUSH
10306: LD_INT 109
10308: PUSH
10309: LD_INT 110
10311: PUSH
10312: LD_INT 111
10314: PUSH
10315: LD_INT 112
10317: PUSH
10318: LD_INT 113
10320: PUSH
10321: LD_INT 114
10323: PUSH
10324: LD_INT 116
10326: PUSH
10327: LD_INT 117
10329: PUSH
10330: LD_INT 118
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: ST_TO_ADDR
10356: GO 11363
10358: LD_INT 15
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10590
10366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: LD_INT 1
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: LD_INT 3
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 5
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: LD_INT 7
10392: PUSH
10393: LD_INT 8
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: LD_INT 10
10401: PUSH
10402: LD_INT 11
10404: PUSH
10405: LD_INT 12
10407: PUSH
10408: LD_INT 13
10410: PUSH
10411: LD_INT 14
10413: PUSH
10414: LD_INT 15
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: LD_INT 17
10422: PUSH
10423: LD_INT 18
10425: PUSH
10426: LD_INT 19
10428: PUSH
10429: LD_INT 20
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 23
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 26
10449: PUSH
10450: LD_INT 27
10452: PUSH
10453: LD_INT 28
10455: PUSH
10456: LD_INT 29
10458: PUSH
10459: LD_INT 30
10461: PUSH
10462: LD_INT 31
10464: PUSH
10465: LD_INT 32
10467: PUSH
10468: LD_INT 33
10470: PUSH
10471: LD_INT 34
10473: PUSH
10474: LD_INT 36
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 101
10516: PUSH
10517: LD_INT 102
10519: PUSH
10520: LD_INT 103
10522: PUSH
10523: LD_INT 104
10525: PUSH
10526: LD_INT 105
10528: PUSH
10529: LD_INT 106
10531: PUSH
10532: LD_INT 107
10534: PUSH
10535: LD_INT 108
10537: PUSH
10538: LD_INT 109
10540: PUSH
10541: LD_INT 110
10543: PUSH
10544: LD_INT 111
10546: PUSH
10547: LD_INT 112
10549: PUSH
10550: LD_INT 113
10552: PUSH
10553: LD_INT 114
10555: PUSH
10556: LD_INT 116
10558: PUSH
10559: LD_INT 117
10561: PUSH
10562: LD_INT 118
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 11363
10590: LD_INT 16
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10734
10598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: LD_INT 5
10612: PUSH
10613: LD_INT 7
10615: PUSH
10616: LD_INT 11
10618: PUSH
10619: LD_INT 12
10621: PUSH
10622: LD_INT 15
10624: PUSH
10625: LD_INT 16
10627: PUSH
10628: LD_INT 20
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 23
10639: PUSH
10640: LD_INT 25
10642: PUSH
10643: LD_INT 26
10645: PUSH
10646: LD_INT 30
10648: PUSH
10649: LD_INT 31
10651: PUSH
10652: LD_INT 32
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 101
10684: PUSH
10685: LD_INT 102
10687: PUSH
10688: LD_INT 103
10690: PUSH
10691: LD_INT 106
10693: PUSH
10694: LD_INT 108
10696: PUSH
10697: LD_INT 112
10699: PUSH
10700: LD_INT 113
10702: PUSH
10703: LD_INT 114
10705: PUSH
10706: LD_INT 116
10708: PUSH
10709: LD_INT 117
10711: PUSH
10712: LD_INT 118
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: ST_TO_ADDR
10732: GO 11363
10734: LD_INT 17
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10966
10742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10743: LD_ADDR_VAR 0 2
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: LD_INT 4
10759: PUSH
10760: LD_INT 5
10762: PUSH
10763: LD_INT 6
10765: PUSH
10766: LD_INT 7
10768: PUSH
10769: LD_INT 8
10771: PUSH
10772: LD_INT 9
10774: PUSH
10775: LD_INT 10
10777: PUSH
10778: LD_INT 11
10780: PUSH
10781: LD_INT 12
10783: PUSH
10784: LD_INT 13
10786: PUSH
10787: LD_INT 14
10789: PUSH
10790: LD_INT 15
10792: PUSH
10793: LD_INT 16
10795: PUSH
10796: LD_INT 17
10798: PUSH
10799: LD_INT 18
10801: PUSH
10802: LD_INT 19
10804: PUSH
10805: LD_INT 20
10807: PUSH
10808: LD_INT 21
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_INT 23
10816: PUSH
10817: LD_INT 24
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 27
10828: PUSH
10829: LD_INT 28
10831: PUSH
10832: LD_INT 29
10834: PUSH
10835: LD_INT 30
10837: PUSH
10838: LD_INT 31
10840: PUSH
10841: LD_INT 32
10843: PUSH
10844: LD_INT 33
10846: PUSH
10847: LD_INT 34
10849: PUSH
10850: LD_INT 36
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 101
10892: PUSH
10893: LD_INT 102
10895: PUSH
10896: LD_INT 103
10898: PUSH
10899: LD_INT 104
10901: PUSH
10902: LD_INT 105
10904: PUSH
10905: LD_INT 106
10907: PUSH
10908: LD_INT 107
10910: PUSH
10911: LD_INT 108
10913: PUSH
10914: LD_INT 109
10916: PUSH
10917: LD_INT 110
10919: PUSH
10920: LD_INT 111
10922: PUSH
10923: LD_INT 112
10925: PUSH
10926: LD_INT 113
10928: PUSH
10929: LD_INT 114
10931: PUSH
10932: LD_INT 116
10934: PUSH
10935: LD_INT 117
10937: PUSH
10938: LD_INT 118
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
10964: GO 11363
10966: LD_INT 18
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 11122
10974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10975: LD_ADDR_VAR 0 2
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: LD_INT 4
10985: PUSH
10986: LD_INT 5
10988: PUSH
10989: LD_INT 7
10991: PUSH
10992: LD_INT 11
10994: PUSH
10995: LD_INT 12
10997: PUSH
10998: LD_INT 15
11000: PUSH
11001: LD_INT 16
11003: PUSH
11004: LD_INT 20
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 25
11018: PUSH
11019: LD_INT 26
11021: PUSH
11022: LD_INT 30
11024: PUSH
11025: LD_INT 31
11027: PUSH
11028: LD_INT 32
11030: PUSH
11031: LD_INT 33
11033: PUSH
11034: LD_INT 34
11036: PUSH
11037: LD_INT 35
11039: PUSH
11040: LD_INT 36
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 101
11068: PUSH
11069: LD_INT 102
11071: PUSH
11072: LD_INT 103
11074: PUSH
11075: LD_INT 106
11077: PUSH
11078: LD_INT 108
11080: PUSH
11081: LD_INT 112
11083: PUSH
11084: LD_INT 113
11086: PUSH
11087: LD_INT 114
11089: PUSH
11090: LD_INT 115
11092: PUSH
11093: LD_INT 116
11095: PUSH
11096: LD_INT 117
11098: PUSH
11099: LD_INT 118
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: ST_TO_ADDR
11120: GO 11363
11122: LD_INT 19
11124: DOUBLE
11125: EQUAL
11126: IFTRUE 11130
11128: GO 11362
11130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11131: LD_ADDR_VAR 0 2
11135: PUSH
11136: LD_INT 1
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: LD_INT 3
11144: PUSH
11145: LD_INT 4
11147: PUSH
11148: LD_INT 5
11150: PUSH
11151: LD_INT 6
11153: PUSH
11154: LD_INT 7
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: LD_INT 9
11162: PUSH
11163: LD_INT 10
11165: PUSH
11166: LD_INT 11
11168: PUSH
11169: LD_INT 12
11171: PUSH
11172: LD_INT 13
11174: PUSH
11175: LD_INT 14
11177: PUSH
11178: LD_INT 15
11180: PUSH
11181: LD_INT 16
11183: PUSH
11184: LD_INT 17
11186: PUSH
11187: LD_INT 18
11189: PUSH
11190: LD_INT 19
11192: PUSH
11193: LD_INT 20
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 23
11204: PUSH
11205: LD_INT 24
11207: PUSH
11208: LD_INT 25
11210: PUSH
11211: LD_INT 26
11213: PUSH
11214: LD_INT 27
11216: PUSH
11217: LD_INT 28
11219: PUSH
11220: LD_INT 29
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 33
11234: PUSH
11235: LD_INT 34
11237: PUSH
11238: LD_INT 35
11240: PUSH
11241: LD_INT 36
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 101
11284: PUSH
11285: LD_INT 102
11287: PUSH
11288: LD_INT 103
11290: PUSH
11291: LD_INT 104
11293: PUSH
11294: LD_INT 105
11296: PUSH
11297: LD_INT 106
11299: PUSH
11300: LD_INT 107
11302: PUSH
11303: LD_INT 108
11305: PUSH
11306: LD_INT 109
11308: PUSH
11309: LD_INT 110
11311: PUSH
11312: LD_INT 111
11314: PUSH
11315: LD_INT 112
11317: PUSH
11318: LD_INT 113
11320: PUSH
11321: LD_INT 114
11323: PUSH
11324: LD_INT 115
11326: PUSH
11327: LD_INT 116
11329: PUSH
11330: LD_INT 117
11332: PUSH
11333: LD_INT 118
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: ST_TO_ADDR
11360: GO 11363
11362: POP
// end else
11363: GO 11594
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: LD_INT 4
11381: PUSH
11382: LD_INT 5
11384: PUSH
11385: LD_INT 6
11387: PUSH
11388: LD_INT 7
11390: PUSH
11391: LD_INT 8
11393: PUSH
11394: LD_INT 9
11396: PUSH
11397: LD_INT 10
11399: PUSH
11400: LD_INT 11
11402: PUSH
11403: LD_INT 12
11405: PUSH
11406: LD_INT 13
11408: PUSH
11409: LD_INT 14
11411: PUSH
11412: LD_INT 15
11414: PUSH
11415: LD_INT 16
11417: PUSH
11418: LD_INT 17
11420: PUSH
11421: LD_INT 18
11423: PUSH
11424: LD_INT 19
11426: PUSH
11427: LD_INT 20
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_INT 23
11438: PUSH
11439: LD_INT 24
11441: PUSH
11442: LD_INT 25
11444: PUSH
11445: LD_INT 26
11447: PUSH
11448: LD_INT 27
11450: PUSH
11451: LD_INT 28
11453: PUSH
11454: LD_INT 29
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 31
11462: PUSH
11463: LD_INT 32
11465: PUSH
11466: LD_INT 33
11468: PUSH
11469: LD_INT 34
11471: PUSH
11472: LD_INT 35
11474: PUSH
11475: LD_INT 36
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 101
11518: PUSH
11519: LD_INT 102
11521: PUSH
11522: LD_INT 103
11524: PUSH
11525: LD_INT 104
11527: PUSH
11528: LD_INT 105
11530: PUSH
11531: LD_INT 106
11533: PUSH
11534: LD_INT 107
11536: PUSH
11537: LD_INT 108
11539: PUSH
11540: LD_INT 109
11542: PUSH
11543: LD_INT 110
11545: PUSH
11546: LD_INT 111
11548: PUSH
11549: LD_INT 112
11551: PUSH
11552: LD_INT 113
11554: PUSH
11555: LD_INT 114
11557: PUSH
11558: LD_INT 115
11560: PUSH
11561: LD_INT 116
11563: PUSH
11564: LD_INT 117
11566: PUSH
11567: LD_INT 118
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: ST_TO_ADDR
// if result then
11594: LD_VAR 0 2
11598: IFFALSE 12384
// begin normal :=  ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_STRING 
11607: ST_TO_ADDR
// hardcore :=  ;
11608: LD_ADDR_VAR 0 6
11612: PUSH
11613: LD_STRING 
11615: ST_TO_ADDR
// active :=  ;
11616: LD_ADDR_VAR 0 7
11620: PUSH
11621: LD_STRING 
11623: ST_TO_ADDR
// for i = 1 to normalCounter do
11624: LD_ADDR_VAR 0 8
11628: PUSH
11629: DOUBLE
11630: LD_INT 1
11632: DEC
11633: ST_TO_ADDR
11634: LD_EXP 28
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11741
// begin tmp := 0 ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_STRING 0
11649: ST_TO_ADDR
// if result [ 1 ] then
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: IFFALSE 11723
// if result [ 1 ] [ 1 ] = i then
11660: LD_VAR 0 2
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PUSH
11673: LD_VAR 0 8
11677: EQUAL
11678: IFFALSE 11723
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 3
11709: PPUSH
11710: CALL_OW 1
11714: ST_TO_ADDR
// tmp := 1 ;
11715: LD_ADDR_VAR 0 3
11719: PUSH
11720: LD_STRING 1
11722: ST_TO_ADDR
// end ; normal := normal & tmp ;
11723: LD_ADDR_VAR 0 5
11727: PUSH
11728: LD_VAR 0 5
11732: PUSH
11733: LD_VAR 0 3
11737: STR
11738: ST_TO_ADDR
// end ;
11739: GO 11639
11741: POP
11742: POP
// for i = 1 to hardcoreCounter do
11743: LD_ADDR_VAR 0 8
11747: PUSH
11748: DOUBLE
11749: LD_INT 1
11751: DEC
11752: ST_TO_ADDR
11753: LD_EXP 29
11757: PUSH
11758: FOR_TO
11759: IFFALSE 11864
// begin tmp := 0 ;
11761: LD_ADDR_VAR 0 3
11765: PUSH
11766: LD_STRING 0
11768: ST_TO_ADDR
// if result [ 2 ] then
11769: LD_VAR 0 2
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: IFFALSE 11846
// if result [ 2 ] [ 1 ] = 100 + i then
11779: LD_VAR 0 2
11783: PUSH
11784: LD_INT 2
11786: ARRAY
11787: PUSH
11788: LD_INT 1
11790: ARRAY
11791: PUSH
11792: LD_INT 100
11794: PUSH
11795: LD_VAR 0 8
11799: PLUS
11800: EQUAL
11801: IFFALSE 11846
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 2
11815: PPUSH
11816: LD_VAR 0 2
11820: PUSH
11821: LD_INT 2
11823: ARRAY
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 3
11832: PPUSH
11833: CALL_OW 1
11837: ST_TO_ADDR
// tmp := 1 ;
11838: LD_ADDR_VAR 0 3
11842: PUSH
11843: LD_STRING 1
11845: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11846: LD_ADDR_VAR 0 6
11850: PUSH
11851: LD_VAR 0 6
11855: PUSH
11856: LD_VAR 0 3
11860: STR
11861: ST_TO_ADDR
// end ;
11862: GO 11758
11864: POP
11865: POP
// if isGameLoad then
11866: LD_VAR 0 1
11870: IFFALSE 12345
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11872: LD_ADDR_VAR 0 4
11876: PUSH
11877: LD_EXP 32
11881: PUSH
11882: LD_EXP 31
11886: PUSH
11887: LD_EXP 33
11891: PUSH
11892: LD_EXP 30
11896: PUSH
11897: LD_EXP 34
11901: PUSH
11902: LD_EXP 35
11906: PUSH
11907: LD_EXP 36
11911: PUSH
11912: LD_EXP 37
11916: PUSH
11917: LD_EXP 38
11921: PUSH
11922: LD_EXP 39
11926: PUSH
11927: LD_EXP 40
11931: PUSH
11932: LD_EXP 41
11936: PUSH
11937: LD_EXP 42
11941: PUSH
11942: LD_EXP 43
11946: PUSH
11947: LD_EXP 51
11951: PUSH
11952: LD_EXP 52
11956: PUSH
11957: LD_EXP 53
11961: PUSH
11962: LD_EXP 54
11966: PUSH
11967: LD_EXP 56
11971: PUSH
11972: LD_EXP 57
11976: PUSH
11977: LD_EXP 58
11981: PUSH
11982: LD_EXP 61
11986: PUSH
11987: LD_EXP 63
11991: PUSH
11992: LD_EXP 64
11996: PUSH
11997: LD_EXP 65
12001: PUSH
12002: LD_EXP 67
12006: PUSH
12007: LD_EXP 68
12011: PUSH
12012: LD_EXP 71
12016: PUSH
12017: LD_EXP 72
12021: PUSH
12022: LD_EXP 73
12026: PUSH
12027: LD_EXP 74
12031: PUSH
12032: LD_EXP 75
12036: PUSH
12037: LD_EXP 76
12041: PUSH
12042: LD_EXP 77
12046: PUSH
12047: LD_EXP 78
12051: PUSH
12052: LD_EXP 79
12056: PUSH
12057: LD_EXP 44
12061: PUSH
12062: LD_EXP 45
12066: PUSH
12067: LD_EXP 48
12071: PUSH
12072: LD_EXP 49
12076: PUSH
12077: LD_EXP 50
12081: PUSH
12082: LD_EXP 46
12086: PUSH
12087: LD_EXP 47
12091: PUSH
12092: LD_EXP 55
12096: PUSH
12097: LD_EXP 59
12101: PUSH
12102: LD_EXP 60
12106: PUSH
12107: LD_EXP 62
12111: PUSH
12112: LD_EXP 66
12116: PUSH
12117: LD_EXP 69
12121: PUSH
12122: LD_EXP 70
12126: PUSH
12127: LD_EXP 80
12131: PUSH
12132: LD_EXP 81
12136: PUSH
12137: LD_EXP 82
12141: PUSH
12142: LD_EXP 83
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
// tmp :=  ;
12203: LD_ADDR_VAR 0 3
12207: PUSH
12208: LD_STRING 
12210: ST_TO_ADDR
// for i = 1 to normalCounter do
12211: LD_ADDR_VAR 0 8
12215: PUSH
12216: DOUBLE
12217: LD_INT 1
12219: DEC
12220: ST_TO_ADDR
12221: LD_EXP 28
12225: PUSH
12226: FOR_TO
12227: IFFALSE 12263
// begin if flags [ i ] then
12229: LD_VAR 0 4
12233: PUSH
12234: LD_VAR 0 8
12238: ARRAY
12239: IFFALSE 12261
// tmp := tmp & i & ; ;
12241: LD_ADDR_VAR 0 3
12245: PUSH
12246: LD_VAR 0 3
12250: PUSH
12251: LD_VAR 0 8
12255: STR
12256: PUSH
12257: LD_STRING ;
12259: STR
12260: ST_TO_ADDR
// end ;
12261: GO 12226
12263: POP
12264: POP
// for i = 1 to hardcoreCounter do
12265: LD_ADDR_VAR 0 8
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_EXP 29
12279: PUSH
12280: FOR_TO
12281: IFFALSE 12327
// begin if flags [ normalCounter + i ] then
12283: LD_VAR 0 4
12287: PUSH
12288: LD_EXP 28
12292: PUSH
12293: LD_VAR 0 8
12297: PLUS
12298: ARRAY
12299: IFFALSE 12325
// tmp := tmp & ( 100 + i ) & ; ;
12301: LD_ADDR_VAR 0 3
12305: PUSH
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 100
12313: PUSH
12314: LD_VAR 0 8
12318: PLUS
12319: STR
12320: PUSH
12321: LD_STRING ;
12323: STR
12324: ST_TO_ADDR
// end ;
12325: GO 12280
12327: POP
12328: POP
// if tmp then
12329: LD_VAR 0 3
12333: IFFALSE 12345
// active := tmp ;
12335: LD_ADDR_VAR 0 7
12339: PUSH
12340: LD_VAR 0 3
12344: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12345: LD_STRING getStreamItemsFromMission("
12347: PUSH
12348: LD_VAR 0 5
12352: STR
12353: PUSH
12354: LD_STRING ","
12356: STR
12357: PUSH
12358: LD_VAR 0 6
12362: STR
12363: PUSH
12364: LD_STRING ","
12366: STR
12367: PUSH
12368: LD_VAR 0 7
12372: STR
12373: PUSH
12374: LD_STRING ")
12376: STR
12377: PPUSH
12378: CALL_OW 559
// end else
12382: GO 12391
// ToLua ( getStreamItemsFromMission("","","") ) ;
12384: LD_STRING getStreamItemsFromMission("","","")
12386: PPUSH
12387: CALL_OW 559
// end ;
12391: LD_VAR 0 2
12395: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12396: LD_EXP 27
12400: PUSH
12401: LD_EXP 32
12405: AND
12406: IFFALSE 12530
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
// begin enable ;
12415: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12416: LD_ADDR_VAR 0 2
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: LD_OWVAR 2
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 2
12435: PUSH
12436: LD_INT 34
12438: PUSH
12439: LD_INT 7
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 34
12448: PUSH
12449: LD_INT 45
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 34
12458: PUSH
12459: LD_INT 28
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 47
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: ST_TO_ADDR
// if not tmp then
12492: LD_VAR 0 2
12496: NOT
12497: IFFALSE 12501
// exit ;
12499: GO 12530
// for i in tmp do
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: LD_VAR 0 2
12510: PUSH
12511: FOR_IN
12512: IFFALSE 12528
// begin SetLives ( i , 0 ) ;
12514: LD_VAR 0 1
12518: PPUSH
12519: LD_INT 0
12521: PPUSH
12522: CALL_OW 234
// end ;
12526: GO 12511
12528: POP
12529: POP
// end ;
12530: PPOPN 2
12532: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12533: LD_EXP 27
12537: PUSH
12538: LD_EXP 33
12542: AND
12543: IFFALSE 12627
12545: GO 12547
12547: DISABLE
12548: LD_INT 0
12550: PPUSH
12551: PPUSH
// begin enable ;
12552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12553: LD_ADDR_VAR 0 2
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_OWVAR 2
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 32
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 69
12588: ST_TO_ADDR
// if not tmp then
12589: LD_VAR 0 2
12593: NOT
12594: IFFALSE 12598
// exit ;
12596: GO 12627
// for i in tmp do
12598: LD_ADDR_VAR 0 1
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: FOR_IN
12609: IFFALSE 12625
// begin SetLives ( i , 0 ) ;
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_INT 0
12618: PPUSH
12619: CALL_OW 234
// end ;
12623: GO 12608
12625: POP
12626: POP
// end ;
12627: PPOPN 2
12629: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12630: LD_EXP 27
12634: PUSH
12635: LD_EXP 30
12639: AND
12640: IFFALSE 12733
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin enable ;
12648: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12649: LD_ADDR_VAR 0 1
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_OWVAR 2
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 25
12671: PUSH
12672: LD_INT 5
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 9
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 8
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 69
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12731
// begin SetClass ( i , 1 ) ;
12717: LD_VAR 0 1
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 336
// end ;
12729: GO 12714
12731: POP
12732: POP
// end ;
12733: PPOPN 1
12735: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 31
12745: AND
12746: PUSH
12747: LD_OWVAR 65
12751: PUSH
12752: LD_INT 7
12754: LESS
12755: AND
12756: IFFALSE 12770
12758: GO 12760
12760: DISABLE
// begin enable ;
12761: ENABLE
// game_speed := 7 ;
12762: LD_ADDR_OWVAR 65
12766: PUSH
12767: LD_INT 7
12769: ST_TO_ADDR
// end ;
12770: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12771: LD_EXP 27
12775: PUSH
12776: LD_EXP 34
12780: AND
12781: IFFALSE 12983
12783: GO 12785
12785: DISABLE
12786: LD_INT 0
12788: PPUSH
12789: PPUSH
12790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_INT 81
12798: PUSH
12799: LD_OWVAR 2
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 1
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 69
12826: ST_TO_ADDR
// if not tmp then
12827: LD_VAR 0 3
12831: NOT
12832: IFFALSE 12836
// exit ;
12834: GO 12983
// if tmp > 5 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 5
12843: GREATER
12844: IFFALSE 12856
// k := 5 else
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_INT 5
12853: ST_TO_ADDR
12854: GO 12866
// k := tmp ;
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: LD_VAR 0 3
12865: ST_TO_ADDR
// for i := 1 to k do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: DOUBLE
12872: LD_INT 1
12874: DEC
12875: ST_TO_ADDR
12876: LD_VAR 0 2
12880: PUSH
12881: FOR_TO
12882: IFFALSE 12981
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12884: LD_VAR 0 3
12888: PUSH
12889: LD_VAR 0 1
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_INT 4
12902: MOD
12903: PUSH
12904: LD_INT 1
12906: PLUS
12907: PPUSH
12908: CALL_OW 259
12912: PUSH
12913: LD_INT 10
12915: LESS
12916: IFFALSE 12979
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: LD_VAR 0 1
12933: PUSH
12934: LD_INT 4
12936: MOD
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 3
12946: PUSH
12947: LD_VAR 0 1
12951: ARRAY
12952: PPUSH
12953: LD_VAR 0 1
12957: PUSH
12958: LD_INT 4
12960: MOD
12961: PUSH
12962: LD_INT 1
12964: PLUS
12965: PPUSH
12966: CALL_OW 259
12970: PUSH
12971: LD_INT 1
12973: PLUS
12974: PPUSH
12975: CALL_OW 237
12979: GO 12881
12981: POP
12982: POP
// end ;
12983: PPOPN 3
12985: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12986: LD_EXP 27
12990: PUSH
12991: LD_EXP 35
12995: AND
12996: IFFALSE 13016
12998: GO 13000
13000: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13001: LD_INT 4
13003: PPUSH
13004: LD_OWVAR 2
13008: PPUSH
13009: LD_INT 0
13011: PPUSH
13012: CALL_OW 324
13016: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13017: LD_EXP 27
13021: PUSH
13022: LD_EXP 64
13026: AND
13027: IFFALSE 13047
13029: GO 13031
13031: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13032: LD_INT 19
13034: PPUSH
13035: LD_OWVAR 2
13039: PPUSH
13040: LD_INT 0
13042: PPUSH
13043: CALL_OW 324
13047: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13048: LD_EXP 27
13052: PUSH
13053: LD_EXP 36
13057: AND
13058: IFFALSE 13160
13060: GO 13062
13062: DISABLE
13063: LD_INT 0
13065: PPUSH
13066: PPUSH
// begin enable ;
13067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_OWVAR 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: LD_INT 34
13090: PUSH
13091: LD_INT 11
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 34
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: ST_TO_ADDR
// if not tmp then
13122: LD_VAR 0 2
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13160
// for i in tmp do
13131: LD_ADDR_VAR 0 1
13135: PUSH
13136: LD_VAR 0 2
13140: PUSH
13141: FOR_IN
13142: IFFALSE 13158
// begin SetLives ( i , 0 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 0
13151: PPUSH
13152: CALL_OW 234
// end ;
13156: GO 13141
13158: POP
13159: POP
// end ;
13160: PPOPN 2
13162: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13163: LD_EXP 27
13167: PUSH
13168: LD_EXP 37
13172: AND
13173: IFFALSE 13193
13175: GO 13177
13177: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13178: LD_INT 32
13180: PPUSH
13181: LD_OWVAR 2
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: CALL_OW 324
13193: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13194: LD_EXP 27
13198: PUSH
13199: LD_EXP 38
13203: AND
13204: IFFALSE 13385
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
13212: PPUSH
13213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_INT 22
13221: PUSH
13222: LD_OWVAR 2
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 33
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13385
// side := 0 ;
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// for i := 1 to 8 do
13267: LD_ADDR_VAR 0 1
13271: PUSH
13272: DOUBLE
13273: LD_INT 1
13275: DEC
13276: ST_TO_ADDR
13277: LD_INT 8
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13329
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13283: LD_OWVAR 2
13287: PUSH
13288: LD_VAR 0 1
13292: NONEQUAL
13293: PUSH
13294: LD_OWVAR 2
13298: PPUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 81
13308: PUSH
13309: LD_INT 2
13311: EQUAL
13312: AND
13313: IFFALSE 13327
// begin side := i ;
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_VAR 0 1
13324: ST_TO_ADDR
// break ;
13325: GO 13329
// end ;
13327: GO 13280
13329: POP
13330: POP
// if not side then
13331: LD_VAR 0 3
13335: NOT
13336: IFFALSE 13340
// exit ;
13338: GO 13385
// for i := 1 to tmp do
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: DOUBLE
13346: LD_INT 1
13348: DEC
13349: ST_TO_ADDR
13350: LD_VAR 0 2
13354: PUSH
13355: FOR_TO
13356: IFFALSE 13383
// if Prob ( 60 ) then
13358: LD_INT 60
13360: PPUSH
13361: CALL_OW 13
13365: IFFALSE 13381
// SetSide ( i , side ) ;
13367: LD_VAR 0 1
13371: PPUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: CALL_OW 235
13381: GO 13355
13383: POP
13384: POP
// end ;
13385: PPOPN 3
13387: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13388: LD_EXP 27
13392: PUSH
13393: LD_EXP 40
13397: AND
13398: IFFALSE 13517
13400: GO 13402
13402: DISABLE
13403: LD_INT 0
13405: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13406: LD_ADDR_VAR 0 1
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_OWVAR 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 1
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: LD_INT 23
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: PPUSH
13455: CALL_OW 69
13459: PUSH
13460: FOR_IN
13461: IFFALSE 13515
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 257
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: IN
13491: IFFALSE 13513
// SetClass ( un , rand ( 1 , 4 ) ) ;
13493: LD_VAR 0 1
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: LD_INT 4
13503: PPUSH
13504: CALL_OW 12
13508: PPUSH
13509: CALL_OW 336
13513: GO 13460
13515: POP
13516: POP
// end ;
13517: PPOPN 1
13519: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13520: LD_EXP 27
13524: PUSH
13525: LD_EXP 39
13529: AND
13530: IFFALSE 13609
13532: GO 13534
13534: DISABLE
13535: LD_INT 0
13537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: LD_INT 22
13545: PUSH
13546: LD_OWVAR 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: ST_TO_ADDR
// if not tmp then
13574: LD_VAR 0 1
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 13609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: PPUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 12
13600: ARRAY
13601: PPUSH
13602: LD_INT 100
13604: PPUSH
13605: CALL_OW 234
// end ;
13609: PPOPN 1
13611: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13612: LD_EXP 27
13616: PUSH
13617: LD_EXP 41
13621: AND
13622: IFFALSE 13720
13624: GO 13626
13626: DISABLE
13627: LD_INT 0
13629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 21
13649: PUSH
13650: LD_INT 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 69
13665: ST_TO_ADDR
// if not tmp then
13666: LD_VAR 0 1
13670: NOT
13671: IFFALSE 13675
// exit ;
13673: GO 13720
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13675: LD_VAR 0 1
13679: PUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 12
13692: ARRAY
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: LD_INT 4
13699: PPUSH
13700: CALL_OW 12
13704: PPUSH
13705: LD_INT 3000
13707: PPUSH
13708: LD_INT 9000
13710: PPUSH
13711: CALL_OW 12
13715: PPUSH
13716: CALL_OW 492
// end ;
13720: PPOPN 1
13722: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13723: LD_EXP 27
13727: PUSH
13728: LD_EXP 42
13732: AND
13733: IFFALSE 13753
13735: GO 13737
13737: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13738: LD_INT 1
13740: PPUSH
13741: LD_OWVAR 2
13745: PPUSH
13746: LD_INT 0
13748: PPUSH
13749: CALL_OW 324
13753: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13754: LD_EXP 27
13758: PUSH
13759: LD_EXP 43
13763: AND
13764: IFFALSE 13847
13766: GO 13768
13768: DISABLE
13769: LD_INT 0
13771: PPUSH
13772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_OWVAR 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: ST_TO_ADDR
// if not tmp then
13809: LD_VAR 0 2
13813: NOT
13814: IFFALSE 13818
// exit ;
13816: GO 13847
// for i in tmp do
13818: LD_ADDR_VAR 0 1
13822: PUSH
13823: LD_VAR 0 2
13827: PUSH
13828: FOR_IN
13829: IFFALSE 13845
// SetBLevel ( i , 10 ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_INT 10
13838: PPUSH
13839: CALL_OW 241
13843: GO 13828
13845: POP
13846: POP
// end ;
13847: PPOPN 2
13849: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13850: LD_EXP 27
13854: PUSH
13855: LD_EXP 44
13859: AND
13860: IFFALSE 13971
13862: GO 13864
13864: DISABLE
13865: LD_INT 0
13867: PPUSH
13868: PPUSH
13869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13870: LD_ADDR_VAR 0 3
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_OWVAR 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: ST_TO_ADDR
// if not tmp then
13906: LD_VAR 0 3
13910: NOT
13911: IFFALSE 13915
// exit ;
13913: GO 13971
// un := tmp [ rand ( 1 , tmp ) ] ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_VAR 0 3
13932: PPUSH
13933: CALL_OW 12
13937: ARRAY
13938: ST_TO_ADDR
// if Crawls ( un ) then
13939: LD_VAR 0 2
13943: PPUSH
13944: CALL_OW 318
13948: IFFALSE 13959
// ComWalk ( un ) ;
13950: LD_VAR 0 2
13954: PPUSH
13955: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_INT 5
13966: PPUSH
13967: CALL_OW 336
// end ;
13971: PPOPN 3
13973: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13974: LD_EXP 27
13978: PUSH
13979: LD_EXP 45
13983: AND
13984: PUSH
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 4
13992: LESS
13993: AND
13994: IFFALSE 14013
13996: GO 13998
13998: DISABLE
// begin Difficulty := Difficulty + 1 ;
13999: LD_ADDR_OWVAR 67
14003: PUSH
14004: LD_OWVAR 67
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// end ;
14013: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14014: LD_EXP 27
14018: PUSH
14019: LD_EXP 46
14023: AND
14024: IFFALSE 14127
14026: GO 14028
14028: DISABLE
14029: LD_INT 0
14031: PPUSH
// begin for i := 1 to 5 do
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_INT 5
14044: PUSH
14045: FOR_TO
14046: IFFALSE 14125
// begin uc_nation := nation_nature ;
14048: LD_ADDR_OWVAR 21
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
// uc_side := 0 ;
14056: LD_ADDR_OWVAR 20
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14064: LD_ADDR_OWVAR 29
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: LD_INT 12
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: ST_TO_ADDR
// hc_agressivity := 20 ;
14079: LD_ADDR_OWVAR 35
14083: PUSH
14084: LD_INT 20
14086: ST_TO_ADDR
// hc_class := class_tiger ;
14087: LD_ADDR_OWVAR 28
14091: PUSH
14092: LD_INT 14
14094: ST_TO_ADDR
// hc_gallery :=  ;
14095: LD_ADDR_OWVAR 33
14099: PUSH
14100: LD_STRING 
14102: ST_TO_ADDR
// hc_name :=  ;
14103: LD_ADDR_OWVAR 26
14107: PUSH
14108: LD_STRING 
14110: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14111: CALL_OW 44
14115: PPUSH
14116: LD_INT 0
14118: PPUSH
14119: CALL_OW 51
// end ;
14123: GO 14045
14125: POP
14126: POP
// end ;
14127: PPOPN 1
14129: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14130: LD_EXP 27
14134: PUSH
14135: LD_EXP 47
14139: AND
14140: IFFALSE 14149
14142: GO 14144
14144: DISABLE
// StreamSibBomb ;
14145: CALL 14150 0 0
14149: END
// export function StreamSibBomb ; var i , x , y ; begin
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
14154: PPUSH
14155: PPUSH
// result := false ;
14156: LD_ADDR_VAR 0 1
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// for i := 1 to 16 do
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: DOUBLE
14170: LD_INT 1
14172: DEC
14173: ST_TO_ADDR
14174: LD_INT 16
14176: PUSH
14177: FOR_TO
14178: IFFALSE 14377
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_INT 10
14187: PUSH
14188: LD_INT 20
14190: PUSH
14191: LD_INT 30
14193: PUSH
14194: LD_INT 40
14196: PUSH
14197: LD_INT 50
14199: PUSH
14200: LD_INT 60
14202: PUSH
14203: LD_INT 70
14205: PUSH
14206: LD_INT 80
14208: PUSH
14209: LD_INT 90
14211: PUSH
14212: LD_INT 100
14214: PUSH
14215: LD_INT 110
14217: PUSH
14218: LD_INT 120
14220: PUSH
14221: LD_INT 130
14223: PUSH
14224: LD_INT 140
14226: PUSH
14227: LD_INT 150
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 1
14249: PPUSH
14250: LD_INT 15
14252: PPUSH
14253: CALL_OW 12
14257: ARRAY
14258: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14259: LD_ADDR_VAR 0 4
14263: PUSH
14264: LD_INT 10
14266: PUSH
14267: LD_INT 20
14269: PUSH
14270: LD_INT 30
14272: PUSH
14273: LD_INT 40
14275: PUSH
14276: LD_INT 50
14278: PUSH
14279: LD_INT 60
14281: PUSH
14282: LD_INT 70
14284: PUSH
14285: LD_INT 80
14287: PUSH
14288: LD_INT 90
14290: PUSH
14291: LD_INT 100
14293: PUSH
14294: LD_INT 110
14296: PUSH
14297: LD_INT 120
14299: PUSH
14300: LD_INT 130
14302: PUSH
14303: LD_INT 140
14305: PUSH
14306: LD_INT 150
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_INT 15
14331: PPUSH
14332: CALL_OW 12
14336: ARRAY
14337: ST_TO_ADDR
// if ValidHex ( x , y ) then
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_VAR 0 4
14347: PPUSH
14348: CALL_OW 488
14352: IFFALSE 14375
// begin result := [ x , y ] ;
14354: LD_ADDR_VAR 0 1
14358: PUSH
14359: LD_VAR 0 3
14363: PUSH
14364: LD_VAR 0 4
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: ST_TO_ADDR
// break ;
14373: GO 14377
// end ; end ;
14375: GO 14177
14377: POP
14378: POP
// if result then
14379: LD_VAR 0 1
14383: IFFALSE 14443
// begin ToLua ( playSibBomb() ) ;
14385: LD_STRING playSibBomb()
14387: PPUSH
14388: CALL_OW 559
// wait ( 0 0$14 ) ;
14392: LD_INT 490
14394: PPUSH
14395: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14399: LD_VAR 0 1
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 2
14415: ARRAY
14416: PPUSH
14417: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14421: LD_VAR 0 1
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 1
14434: PUSH
14435: LD_INT 2
14437: ARRAY
14438: PPUSH
14439: CALL_OW 429
// end ; end ;
14443: LD_VAR 0 1
14447: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14448: LD_EXP 27
14452: PUSH
14453: LD_EXP 49
14457: AND
14458: IFFALSE 14470
14460: GO 14462
14462: DISABLE
// YouLost (  ) ;
14463: LD_STRING 
14465: PPUSH
14466: CALL_OW 104
14470: END
// every 0 0$1 trigger StreamModeActive and sFog do
14471: LD_EXP 27
14475: PUSH
14476: LD_EXP 48
14480: AND
14481: IFFALSE 14495
14483: GO 14485
14485: DISABLE
// FogOff ( your_side ) ;
14486: LD_OWVAR 2
14490: PPUSH
14491: CALL_OW 344
14495: END
// every 0 0$1 trigger StreamModeActive and sSun do
14496: LD_EXP 27
14500: PUSH
14501: LD_EXP 50
14505: AND
14506: IFFALSE 14534
14508: GO 14510
14510: DISABLE
// begin solar_recharge_percent := 0 ;
14511: LD_ADDR_OWVAR 79
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14519: LD_INT 10500
14521: PPUSH
14522: CALL_OW 67
// solar_recharge_percent := 100 ;
14526: LD_ADDR_OWVAR 79
14530: PUSH
14531: LD_INT 100
14533: ST_TO_ADDR
// end ;
14534: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14535: LD_EXP 27
14539: PUSH
14540: LD_EXP 51
14544: AND
14545: IFFALSE 14784
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
14553: PPUSH
14554: PPUSH
// begin tmp := [ ] ;
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: EMPTY
14561: ST_TO_ADDR
// for i := 1 to 6 do
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: DOUBLE
14568: LD_INT 1
14570: DEC
14571: ST_TO_ADDR
14572: LD_INT 6
14574: PUSH
14575: FOR_TO
14576: IFFALSE 14681
// begin uc_nation := nation_nature ;
14578: LD_ADDR_OWVAR 21
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// uc_side := 0 ;
14586: LD_ADDR_OWVAR 20
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14594: LD_ADDR_OWVAR 29
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 12
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: ST_TO_ADDR
// hc_agressivity := 20 ;
14609: LD_ADDR_OWVAR 35
14613: PUSH
14614: LD_INT 20
14616: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14617: LD_ADDR_OWVAR 28
14621: PUSH
14622: LD_INT 17
14624: ST_TO_ADDR
// hc_gallery :=  ;
14625: LD_ADDR_OWVAR 33
14629: PUSH
14630: LD_STRING 
14632: ST_TO_ADDR
// hc_name :=  ;
14633: LD_ADDR_OWVAR 26
14637: PUSH
14638: LD_STRING 
14640: ST_TO_ADDR
// un := CreateHuman ;
14641: LD_ADDR_VAR 0 2
14645: PUSH
14646: CALL_OW 44
14650: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14651: LD_VAR 0 2
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 51
// tmp := tmp ^ un ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_VAR 0 3
14672: PUSH
14673: LD_VAR 0 2
14677: ADD
14678: ST_TO_ADDR
// end ;
14679: GO 14575
14681: POP
14682: POP
// repeat wait ( 0 0$1 ) ;
14683: LD_INT 35
14685: PPUSH
14686: CALL_OW 67
// for un in tmp do
14690: LD_ADDR_VAR 0 2
14694: PUSH
14695: LD_VAR 0 3
14699: PUSH
14700: FOR_IN
14701: IFFALSE 14775
// begin if IsDead ( un ) then
14703: LD_VAR 0 2
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14732
// begin tmp := tmp diff un ;
14714: LD_ADDR_VAR 0 3
14718: PUSH
14719: LD_VAR 0 3
14723: PUSH
14724: LD_VAR 0 2
14728: DIFF
14729: ST_TO_ADDR
// continue ;
14730: GO 14700
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14732: LD_VAR 0 2
14736: PPUSH
14737: LD_INT 3
14739: PUSH
14740: LD_INT 22
14742: PUSH
14743: LD_INT 0
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: PPUSH
14759: LD_VAR 0 2
14763: PPUSH
14764: CALL_OW 74
14768: PPUSH
14769: CALL_OW 115
// end ;
14773: GO 14700
14775: POP
14776: POP
// until not tmp ;
14777: LD_VAR 0 3
14781: NOT
14782: IFFALSE 14683
// end ;
14784: PPOPN 3
14786: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14787: LD_EXP 27
14791: PUSH
14792: LD_EXP 52
14796: AND
14797: IFFALSE 14851
14799: GO 14801
14801: DISABLE
// begin ToLua ( displayTroll(); ) ;
14802: LD_STRING displayTroll();
14804: PPUSH
14805: CALL_OW 559
// wait ( 3 3$00 ) ;
14809: LD_INT 6300
14811: PPUSH
14812: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14816: LD_STRING hideTroll();
14818: PPUSH
14819: CALL_OW 559
// wait ( 1 1$00 ) ;
14823: LD_INT 2100
14825: PPUSH
14826: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14830: LD_STRING displayTroll();
14832: PPUSH
14833: CALL_OW 559
// wait ( 1 1$00 ) ;
14837: LD_INT 2100
14839: PPUSH
14840: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14844: LD_STRING hideTroll();
14846: PPUSH
14847: CALL_OW 559
// end ;
14851: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14852: LD_EXP 27
14856: PUSH
14857: LD_EXP 53
14861: AND
14862: IFFALSE 14925
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
// begin p := 0 ;
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 0
14877: ST_TO_ADDR
// repeat game_speed := 1 ;
14878: LD_ADDR_OWVAR 65
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14886: LD_INT 35
14888: PPUSH
14889: CALL_OW 67
// p := p + 1 ;
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 1
14905: PLUS
14906: ST_TO_ADDR
// until p >= 60 ;
14907: LD_VAR 0 1
14911: PUSH
14912: LD_INT 60
14914: GREATEREQUAL
14915: IFFALSE 14878
// game_speed := 4 ;
14917: LD_ADDR_OWVAR 65
14921: PUSH
14922: LD_INT 4
14924: ST_TO_ADDR
// end ;
14925: PPOPN 1
14927: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14928: LD_EXP 27
14932: PUSH
14933: LD_EXP 54
14937: AND
14938: IFFALSE 15084
14940: GO 14942
14942: DISABLE
14943: LD_INT 0
14945: PPUSH
14946: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 0
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 30
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 69
15000: ST_TO_ADDR
// if not depot then
15001: LD_VAR 0 1
15005: NOT
15006: IFFALSE 15010
// exit ;
15008: GO 15084
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: LD_VAR 0 1
15019: PUSH
15020: LD_INT 1
15022: PPUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 12
15032: ARRAY
15033: PPUSH
15034: CALL_OW 274
15038: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15039: LD_VAR 0 2
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15054: LD_VAR 0 2
15058: PPUSH
15059: LD_INT 2
15061: PPUSH
15062: LD_INT 0
15064: PPUSH
15065: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 3
15076: PPUSH
15077: LD_INT 0
15079: PPUSH
15080: CALL_OW 277
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15087: LD_EXP 27
15091: PUSH
15092: LD_EXP 55
15096: AND
15097: IFFALSE 15194
15099: GO 15101
15101: DISABLE
15102: LD_INT 0
15104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15105: LD_ADDR_VAR 0 1
15109: PUSH
15110: LD_INT 22
15112: PUSH
15113: LD_OWVAR 2
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 21
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 23
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PPUSH
15154: CALL_OW 69
15158: ST_TO_ADDR
// if not tmp then
15159: LD_VAR 0 1
15163: NOT
15164: IFFALSE 15168
// exit ;
15166: GO 15194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15168: LD_VAR 0 1
15172: PUSH
15173: LD_INT 1
15175: PPUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 12
15185: ARRAY
15186: PPUSH
15187: LD_INT 200
15189: PPUSH
15190: CALL_OW 234
// end ;
15194: PPOPN 1
15196: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15197: LD_EXP 27
15201: PUSH
15202: LD_EXP 56
15206: AND
15207: IFFALSE 15286
15209: GO 15211
15211: DISABLE
15212: LD_INT 0
15214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15215: LD_ADDR_VAR 0 1
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_OWVAR 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 21
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: ST_TO_ADDR
// if not tmp then
15251: LD_VAR 0 1
15255: NOT
15256: IFFALSE 15260
// exit ;
15258: GO 15286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15260: LD_VAR 0 1
15264: PUSH
15265: LD_INT 1
15267: PPUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 12
15277: ARRAY
15278: PPUSH
15279: LD_INT 60
15281: PPUSH
15282: CALL_OW 234
// end ;
15286: PPOPN 1
15288: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15289: LD_EXP 27
15293: PUSH
15294: LD_EXP 57
15298: AND
15299: IFFALSE 15398
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
// begin enable ;
15308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 61
15328: PUSH
15329: EMPTY
15330: LIST
15331: PUSH
15332: LD_INT 33
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: ST_TO_ADDR
// if not tmp then
15352: LD_VAR 0 1
15356: NOT
15357: IFFALSE 15361
// exit ;
15359: GO 15398
// for i in tmp do
15361: LD_ADDR_VAR 0 2
15365: PUSH
15366: LD_VAR 0 1
15370: PUSH
15371: FOR_IN
15372: IFFALSE 15396
// if IsControledBy ( i ) then
15374: LD_VAR 0 2
15378: PPUSH
15379: CALL_OW 312
15383: IFFALSE 15394
// ComUnlink ( i ) ;
15385: LD_VAR 0 2
15389: PPUSH
15390: CALL_OW 136
15394: GO 15371
15396: POP
15397: POP
// end ;
15398: PPOPN 2
15400: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15401: LD_EXP 27
15405: PUSH
15406: LD_EXP 58
15410: AND
15411: IFFALSE 15551
15413: GO 15415
15415: DISABLE
15416: LD_INT 0
15418: PPUSH
15419: PPUSH
// begin ToLua ( displayPowell(); ) ;
15420: LD_STRING displayPowell();
15422: PPUSH
15423: CALL_OW 559
// uc_side := 0 ;
15427: LD_ADDR_OWVAR 20
15431: PUSH
15432: LD_INT 0
15434: ST_TO_ADDR
// uc_nation := 2 ;
15435: LD_ADDR_OWVAR 21
15439: PUSH
15440: LD_INT 2
15442: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15443: LD_ADDR_OWVAR 37
15447: PUSH
15448: LD_INT 14
15450: ST_TO_ADDR
// vc_engine := engine_siberite ;
15451: LD_ADDR_OWVAR 39
15455: PUSH
15456: LD_INT 3
15458: ST_TO_ADDR
// vc_control := control_apeman ;
15459: LD_ADDR_OWVAR 38
15463: PUSH
15464: LD_INT 5
15466: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15467: LD_ADDR_OWVAR 40
15471: PUSH
15472: LD_INT 29
15474: ST_TO_ADDR
// un := CreateVehicle ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: CALL_OW 45
15484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15485: LD_VAR 0 2
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15497: LD_INT 35
15499: PPUSH
15500: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_INT 22
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: PPUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 74
15535: PPUSH
15536: CALL_OW 115
// until IsDead ( un ) ;
15540: LD_VAR 0 2
15544: PPUSH
15545: CALL_OW 301
15549: IFFALSE 15497
// end ;
15551: PPOPN 2
15553: END
// every 0 0$1 trigger StreamModeActive and sStu do
15554: LD_EXP 27
15558: PUSH
15559: LD_EXP 66
15563: AND
15564: IFFALSE 15580
15566: GO 15568
15568: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15569: LD_STRING displayStucuk();
15571: PPUSH
15572: CALL_OW 559
// ResetFog ;
15576: CALL_OW 335
// end ;
15580: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15581: LD_EXP 27
15585: PUSH
15586: LD_EXP 59
15590: AND
15591: IFFALSE 15732
15593: GO 15595
15595: DISABLE
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_OWVAR 2
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: ST_TO_ADDR
// if not tmp then
15636: LD_VAR 0 2
15640: NOT
15641: IFFALSE 15645
// exit ;
15643: GO 15732
// un := tmp [ rand ( 1 , tmp ) ] ;
15645: LD_ADDR_VAR 0 1
15649: PUSH
15650: LD_VAR 0 2
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_VAR 0 2
15662: PPUSH
15663: CALL_OW 12
15667: ARRAY
15668: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_INT 0
15676: PPUSH
15677: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_OWVAR 3
15690: PUSH
15691: LD_VAR 0 1
15695: DIFF
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 74
15706: PPUSH
15707: CALL_OW 115
// wait ( 0 0$20 ) ;
15711: LD_INT 700
15713: PPUSH
15714: CALL_OW 67
// SetSide ( un , your_side ) ;
15718: LD_VAR 0 1
15722: PPUSH
15723: LD_OWVAR 2
15727: PPUSH
15728: CALL_OW 235
// end ;
15732: PPOPN 2
15734: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15735: LD_EXP 27
15739: PUSH
15740: LD_EXP 60
15744: AND
15745: IFFALSE 15851
15747: GO 15749
15749: DISABLE
15750: LD_INT 0
15752: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_INT 22
15760: PUSH
15761: LD_OWVAR 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PPUSH
15802: CALL_OW 69
15806: ST_TO_ADDR
// if not depot then
15807: LD_VAR 0 1
15811: NOT
15812: IFFALSE 15816
// exit ;
15814: GO 15851
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15816: LD_VAR 0 1
15820: PUSH
15821: LD_INT 1
15823: ARRAY
15824: PPUSH
15825: CALL_OW 250
15829: PPUSH
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: CALL_OW 251
15843: PPUSH
15844: LD_INT 70
15846: PPUSH
15847: CALL_OW 495
// end ;
15851: PPOPN 1
15853: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15854: LD_EXP 27
15858: PUSH
15859: LD_EXP 61
15863: AND
15864: IFFALSE 16075
15866: GO 15868
15868: DISABLE
15869: LD_INT 0
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15876: LD_ADDR_VAR 0 5
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_OWVAR 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// if not tmp then
15912: LD_VAR 0 5
15916: NOT
15917: IFFALSE 15921
// exit ;
15919: GO 16075
// for i in tmp do
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_VAR 0 5
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16073
// begin d := rand ( 0 , 5 ) ;
15934: LD_ADDR_VAR 0 4
15938: PUSH
15939: LD_INT 0
15941: PPUSH
15942: LD_INT 5
15944: PPUSH
15945: CALL_OW 12
15949: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15950: LD_ADDR_VAR 0 2
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 250
15964: PPUSH
15965: LD_VAR 0 4
15969: PPUSH
15970: LD_INT 3
15972: PPUSH
15973: LD_INT 12
15975: PPUSH
15976: CALL_OW 12
15980: PPUSH
15981: CALL_OW 272
15985: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15986: LD_ADDR_VAR 0 3
15990: PUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 251
16000: PPUSH
16001: LD_VAR 0 4
16005: PPUSH
16006: LD_INT 3
16008: PPUSH
16009: LD_INT 12
16011: PPUSH
16012: CALL_OW 12
16016: PPUSH
16017: CALL_OW 273
16021: ST_TO_ADDR
// if ValidHex ( x , y ) then
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_VAR 0 3
16031: PPUSH
16032: CALL_OW 488
16036: IFFALSE 16071
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_VAR 0 2
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 3
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL_OW 12
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 483
// end ;
16071: GO 15931
16073: POP
16074: POP
// end ;
16075: PPOPN 5
16077: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16078: LD_EXP 27
16082: PUSH
16083: LD_EXP 62
16087: AND
16088: IFFALSE 16182
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
16096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_OWVAR 2
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 32
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: ST_TO_ADDR
// if not tmp then
16144: LD_VAR 0 2
16148: NOT
16149: IFFALSE 16153
// exit ;
16151: GO 16182
// for i in tmp do
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_VAR 0 2
16162: PUSH
16163: FOR_IN
16164: IFFALSE 16180
// SetFuel ( i , 0 ) ;
16166: LD_VAR 0 1
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 240
16178: GO 16163
16180: POP
16181: POP
// end ;
16182: PPOPN 2
16184: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16185: LD_EXP 27
16189: PUSH
16190: LD_EXP 63
16194: AND
16195: IFFALSE 16261
16197: GO 16199
16199: DISABLE
16200: LD_INT 0
16202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_OWVAR 2
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 29
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: ST_TO_ADDR
// if not tmp then
16239: LD_VAR 0 1
16243: NOT
16244: IFFALSE 16248
// exit ;
16246: GO 16261
// DestroyUnit ( tmp [ 1 ] ) ;
16248: LD_VAR 0 1
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: CALL_OW 65
// end ;
16261: PPOPN 1
16263: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16264: LD_EXP 27
16268: PUSH
16269: LD_EXP 65
16273: AND
16274: IFFALSE 16403
16276: GO 16278
16278: DISABLE
16279: LD_INT 0
16281: PPUSH
// begin uc_side := 0 ;
16282: LD_ADDR_OWVAR 20
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// uc_nation := nation_arabian ;
16290: LD_ADDR_OWVAR 21
16294: PUSH
16295: LD_INT 2
16297: ST_TO_ADDR
// hc_gallery :=  ;
16298: LD_ADDR_OWVAR 33
16302: PUSH
16303: LD_STRING 
16305: ST_TO_ADDR
// hc_name :=  ;
16306: LD_ADDR_OWVAR 26
16310: PUSH
16311: LD_STRING 
16313: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16314: LD_INT 1
16316: PPUSH
16317: LD_INT 11
16319: PPUSH
16320: LD_INT 10
16322: PPUSH
16323: CALL_OW 380
// un := CreateHuman ;
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: CALL_OW 44
16336: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16337: LD_VAR 0 1
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: PPUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 74
16387: PPUSH
16388: CALL_OW 115
// until IsDead ( un ) ;
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 301
16401: IFFALSE 16349
// end ;
16403: PPOPN 1
16405: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16406: LD_EXP 27
16410: PUSH
16411: LD_EXP 67
16415: AND
16416: IFFALSE 16428
16418: GO 16420
16420: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16421: LD_STRING earthquake(getX(game), 0, 32)
16423: PPUSH
16424: CALL_OW 559
16428: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16429: LD_EXP 27
16433: PUSH
16434: LD_EXP 68
16438: AND
16439: IFFALSE 16530
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
// begin enable ;
16447: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_OWVAR 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 33
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: ST_TO_ADDR
// if not tmp then
16495: LD_VAR 0 1
16499: NOT
16500: IFFALSE 16504
// exit ;
16502: GO 16530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16504: LD_VAR 0 1
16508: PUSH
16509: LD_INT 1
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 12
16521: ARRAY
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 234
// end ;
16530: PPOPN 1
16532: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16533: LD_EXP 27
16537: PUSH
16538: LD_EXP 69
16542: AND
16543: IFFALSE 16684
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
16552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: LD_INT 22
16560: PUSH
16561: LD_OWVAR 2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 25
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PPUSH
16584: CALL_OW 69
16588: ST_TO_ADDR
// if not tmp then
16589: LD_VAR 0 3
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16684
// un := tmp [ rand ( 1 , tmp ) ] ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 1
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// if Crawls ( un ) then
16622: LD_VAR 0 2
16626: PPUSH
16627: CALL_OW 318
16631: IFFALSE 16642
// ComWalk ( un ) ;
16633: LD_VAR 0 2
16637: PPUSH
16638: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16642: LD_VAR 0 2
16646: PPUSH
16647: LD_INT 9
16649: PPUSH
16650: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16654: LD_INT 28
16656: PPUSH
16657: LD_OWVAR 2
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16669: LD_INT 29
16671: PPUSH
16672: LD_OWVAR 2
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: CALL_OW 322
// end ;
16684: PPOPN 3
16686: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16687: LD_EXP 27
16691: PUSH
16692: LD_EXP 70
16696: AND
16697: IFFALSE 16808
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16707: LD_ADDR_VAR 0 3
16711: PUSH
16712: LD_INT 22
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// if not tmp then
16743: LD_VAR 0 3
16747: NOT
16748: IFFALSE 16752
// exit ;
16750: GO 16808
// un := tmp [ rand ( 1 , tmp ) ] ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_INT 1
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: CALL_OW 12
16774: ARRAY
16775: ST_TO_ADDR
// if Crawls ( un ) then
16776: LD_VAR 0 2
16780: PPUSH
16781: CALL_OW 318
16785: IFFALSE 16796
// ComWalk ( un ) ;
16787: LD_VAR 0 2
16791: PPUSH
16792: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16796: LD_VAR 0 2
16800: PPUSH
16801: LD_INT 8
16803: PPUSH
16804: CALL_OW 336
// end ;
16808: PPOPN 3
16810: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16811: LD_EXP 27
16815: PUSH
16816: LD_EXP 71
16820: AND
16821: IFFALSE 16965
16823: GO 16825
16825: DISABLE
16826: LD_INT 0
16828: PPUSH
16829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16830: LD_ADDR_VAR 0 2
16834: PUSH
16835: LD_INT 22
16837: PUSH
16838: LD_OWVAR 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 21
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 34
16862: PUSH
16863: LD_INT 12
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 34
16872: PUSH
16873: LD_INT 51
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 34
16882: PUSH
16883: LD_INT 32
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 69
16905: ST_TO_ADDR
// if not tmp then
16906: LD_VAR 0 2
16910: NOT
16911: IFFALSE 16915
// exit ;
16913: GO 16965
// for i in tmp do
16915: LD_ADDR_VAR 0 1
16919: PUSH
16920: LD_VAR 0 2
16924: PUSH
16925: FOR_IN
16926: IFFALSE 16963
// if GetCargo ( i , mat_artifact ) = 0 then
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 4
16935: PPUSH
16936: CALL_OW 289
16940: PUSH
16941: LD_INT 0
16943: EQUAL
16944: IFFALSE 16961
// SetCargo ( i , mat_siberit , 100 ) ;
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: LD_INT 100
16956: PPUSH
16957: CALL_OW 290
16961: GO 16925
16963: POP
16964: POP
// end ;
16965: PPOPN 2
16967: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16968: LD_EXP 27
16972: PUSH
16973: LD_EXP 72
16977: AND
16978: IFFALSE 17161
16980: GO 16982
16982: DISABLE
16983: LD_INT 0
16985: PPUSH
16986: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_OWVAR 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 2
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17161
// for i := 1 to 2 do
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_INT 2
17030: PUSH
17031: FOR_TO
17032: IFFALSE 17159
// begin uc_side := your_side ;
17034: LD_ADDR_OWVAR 20
17038: PUSH
17039: LD_OWVAR 2
17043: ST_TO_ADDR
// uc_nation := nation_american ;
17044: LD_ADDR_OWVAR 21
17048: PUSH
17049: LD_INT 1
17051: ST_TO_ADDR
// vc_chassis := us_morphling ;
17052: LD_ADDR_OWVAR 37
17056: PUSH
17057: LD_INT 5
17059: ST_TO_ADDR
// vc_engine := engine_siberite ;
17060: LD_ADDR_OWVAR 39
17064: PUSH
17065: LD_INT 3
17067: ST_TO_ADDR
// vc_control := control_computer ;
17068: LD_ADDR_OWVAR 38
17072: PUSH
17073: LD_INT 3
17075: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17076: LD_ADDR_OWVAR 40
17080: PUSH
17081: LD_INT 10
17083: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17084: LD_VAR 0 2
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: CALL_OW 310
17097: NOT
17098: IFFALSE 17145
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17100: CALL_OW 45
17104: PPUSH
17105: LD_VAR 0 2
17109: PUSH
17110: LD_INT 1
17112: ARRAY
17113: PPUSH
17114: CALL_OW 250
17118: PPUSH
17119: LD_VAR 0 2
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: CALL_OW 251
17132: PPUSH
17133: LD_INT 12
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 50
17143: GO 17157
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17145: CALL_OW 45
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 51
// end ;
17157: GO 17031
17159: POP
17160: POP
// end ;
17161: PPOPN 2
17163: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17164: LD_EXP 27
17168: PUSH
17169: LD_EXP 73
17173: AND
17174: IFFALSE 17396
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17187: LD_ADDR_VAR 0 6
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 21
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 23
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 6
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17396
// s1 := rand ( 1 , 4 ) ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 1
17257: PPUSH
17258: LD_INT 4
17260: PPUSH
17261: CALL_OW 12
17265: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17266: LD_ADDR_VAR 0 4
17270: PUSH
17271: LD_VAR 0 6
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_VAR 0 2
17284: PPUSH
17285: CALL_OW 259
17289: ST_TO_ADDR
// if s1 = 1 then
17290: LD_VAR 0 2
17294: PUSH
17295: LD_INT 1
17297: EQUAL
17298: IFFALSE 17318
// s2 := rand ( 2 , 4 ) else
17300: LD_ADDR_VAR 0 3
17304: PUSH
17305: LD_INT 2
17307: PPUSH
17308: LD_INT 4
17310: PPUSH
17311: CALL_OW 12
17315: ST_TO_ADDR
17316: GO 17326
// s2 := 1 ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 1
17325: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17326: LD_ADDR_VAR 0 5
17330: PUSH
17331: LD_VAR 0 6
17335: PUSH
17336: LD_INT 1
17338: ARRAY
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: CALL_OW 259
17349: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17350: LD_VAR 0 6
17354: PUSH
17355: LD_INT 1
17357: ARRAY
17358: PPUSH
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_VAR 0 5
17368: PPUSH
17369: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17373: LD_VAR 0 6
17377: PUSH
17378: LD_INT 1
17380: ARRAY
17381: PPUSH
17382: LD_VAR 0 3
17386: PPUSH
17387: LD_VAR 0 4
17391: PPUSH
17392: CALL_OW 237
// end ;
17396: PPOPN 6
17398: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17399: LD_EXP 27
17403: PUSH
17404: LD_EXP 74
17408: AND
17409: IFFALSE 17488
17411: GO 17413
17413: DISABLE
17414: LD_INT 0
17416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 30
17436: PUSH
17437: LD_INT 3
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// if not tmp then
17453: LD_VAR 0 1
17457: NOT
17458: IFFALSE 17462
// exit ;
17460: GO 17488
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17462: LD_VAR 0 1
17466: PUSH
17467: LD_INT 1
17469: PPUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 12
17479: ARRAY
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 234
// end ;
17488: PPOPN 1
17490: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17491: LD_EXP 27
17495: PUSH
17496: LD_EXP 75
17500: AND
17501: IFFALSE 17613
17503: GO 17505
17505: DISABLE
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 27
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 30
17542: PUSH
17543: LD_INT 26
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 28
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PPUSH
17570: CALL_OW 69
17574: ST_TO_ADDR
// if not tmp then
17575: LD_VAR 0 2
17579: NOT
17580: IFFALSE 17584
// exit ;
17582: GO 17613
// for i in tmp do
17584: LD_ADDR_VAR 0 1
17588: PUSH
17589: LD_VAR 0 2
17593: PUSH
17594: FOR_IN
17595: IFFALSE 17611
// SetLives ( i , 1 ) ;
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 234
17609: GO 17594
17611: POP
17612: POP
// end ;
17613: PPOPN 2
17615: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17616: LD_EXP 27
17620: PUSH
17621: LD_EXP 76
17625: AND
17626: IFFALSE 17913
17628: GO 17630
17630: DISABLE
17631: LD_INT 0
17633: PPUSH
17634: PPUSH
17635: PPUSH
// begin i := rand ( 1 , 7 ) ;
17636: LD_ADDR_VAR 0 1
17640: PUSH
17641: LD_INT 1
17643: PPUSH
17644: LD_INT 7
17646: PPUSH
17647: CALL_OW 12
17651: ST_TO_ADDR
// case i of 1 :
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 1
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17675
17665: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17666: LD_STRING earthquake(getX(game), 0, 32)
17668: PPUSH
17669: CALL_OW 559
17673: GO 17913
17675: LD_INT 2
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17697
17683: POP
// begin ToLua ( displayStucuk(); ) ;
17684: LD_STRING displayStucuk();
17686: PPUSH
17687: CALL_OW 559
// ResetFog ;
17691: CALL_OW 335
// end ; 3 :
17695: GO 17913
17697: LD_INT 3
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17809
17705: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 22
17713: PUSH
17714: LD_OWVAR 2
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 25
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// if not tmp then
17742: LD_VAR 0 2
17746: NOT
17747: IFFALSE 17751
// exit ;
17749: GO 17913
// un := tmp [ rand ( 1 , tmp ) ] ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 1
17763: PPUSH
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL_OW 12
17773: ARRAY
17774: ST_TO_ADDR
// if Crawls ( un ) then
17775: LD_VAR 0 3
17779: PPUSH
17780: CALL_OW 318
17784: IFFALSE 17795
// ComWalk ( un ) ;
17786: LD_VAR 0 3
17790: PPUSH
17791: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_INT 8
17802: PPUSH
17803: CALL_OW 336
// end ; 4 :
17807: GO 17913
17809: LD_INT 4
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 17891
17817: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17818: LD_ADDR_VAR 0 2
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_OWVAR 2
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 30
17837: PUSH
17838: LD_INT 29
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 69
17853: ST_TO_ADDR
// if not tmp then
17854: LD_VAR 0 2
17858: NOT
17859: IFFALSE 17863
// exit ;
17861: GO 17913
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17863: LD_VAR 0 2
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17876: LD_VAR 0 2
17880: PUSH
17881: LD_INT 1
17883: ARRAY
17884: PPUSH
17885: CALL_OW 65
// end ; 5 .. 7 :
17889: GO 17913
17891: LD_INT 5
17893: DOUBLE
17894: GREATEREQUAL
17895: IFFALSE 17903
17897: LD_INT 7
17899: DOUBLE
17900: LESSEQUAL
17901: IFTRUE 17905
17903: GO 17912
17905: POP
// StreamSibBomb ; end ;
17906: CALL 14150 0 0
17910: GO 17913
17912: POP
// end ;
17913: PPOPN 3
17915: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17916: LD_EXP 27
17920: PUSH
17921: LD_EXP 77
17925: AND
17926: IFFALSE 18082
17928: GO 17930
17930: DISABLE
17931: LD_INT 0
17933: PPUSH
17934: PPUSH
17935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17936: LD_ADDR_VAR 0 2
17940: PUSH
17941: LD_INT 81
17943: PUSH
17944: LD_OWVAR 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PPUSH
17985: CALL_OW 69
17989: ST_TO_ADDR
// if not tmp then
17990: LD_VAR 0 2
17994: NOT
17995: IFFALSE 17999
// exit ;
17997: GO 18082
// p := 0 ;
17999: LD_ADDR_VAR 0 3
18003: PUSH
18004: LD_INT 0
18006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18007: LD_INT 35
18009: PPUSH
18010: CALL_OW 67
// p := p + 1 ;
18014: LD_ADDR_VAR 0 3
18018: PUSH
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 1
18026: PLUS
18027: ST_TO_ADDR
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 2
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18070
// if GetLives ( i ) < 1000 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 1000
18053: LESS
18054: IFFALSE 18068
// SetLives ( i , 1000 ) ;
18056: LD_VAR 0 1
18060: PPUSH
18061: LD_INT 1000
18063: PPUSH
18064: CALL_OW 234
18068: GO 18038
18070: POP
18071: POP
// until p > 20 ;
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 20
18079: GREATER
18080: IFFALSE 18007
// end ;
18082: PPOPN 3
18084: END
// every 0 0$1 trigger StreamModeActive and sTime do
18085: LD_EXP 27
18089: PUSH
18090: LD_EXP 78
18094: AND
18095: IFFALSE 18130
18097: GO 18099
18099: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18100: LD_INT 28
18102: PPUSH
18103: LD_OWVAR 2
18107: PPUSH
18108: LD_INT 2
18110: PPUSH
18111: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18115: LD_INT 30
18117: PPUSH
18118: LD_OWVAR 2
18122: PPUSH
18123: LD_INT 2
18125: PPUSH
18126: CALL_OW 322
// end ;
18130: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18131: LD_EXP 27
18135: PUSH
18136: LD_EXP 79
18140: AND
18141: IFFALSE 18262
18143: GO 18145
18145: DISABLE
18146: LD_INT 0
18148: PPUSH
18149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_OWVAR 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: LD_INT 23
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: ST_TO_ADDR
// if not tmp then
18204: LD_VAR 0 2
18208: NOT
18209: IFFALSE 18213
// exit ;
18211: GO 18262
// for i in tmp do
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18260
// begin if Crawls ( i ) then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 318
18235: IFFALSE 18246
// ComWalk ( i ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 138
// SetClass ( i , 2 ) ;
18246: LD_VAR 0 1
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: CALL_OW 336
// end ;
18258: GO 18223
18260: POP
18261: POP
// end ;
18262: PPOPN 2
18264: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18265: LD_EXP 27
18269: PUSH
18270: LD_EXP 80
18274: AND
18275: IFFALSE 18563
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18285: LD_OWVAR 2
18289: PPUSH
18290: LD_INT 9
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18303: LD_INT 9
18305: PPUSH
18306: LD_OWVAR 2
18310: PPUSH
18311: CALL_OW 343
// uc_side := 9 ;
18315: LD_ADDR_OWVAR 20
18319: PUSH
18320: LD_INT 9
18322: ST_TO_ADDR
// uc_nation := 2 ;
18323: LD_ADDR_OWVAR 21
18327: PUSH
18328: LD_INT 2
18330: ST_TO_ADDR
// hc_name := Dark Warrior ;
18331: LD_ADDR_OWVAR 26
18335: PUSH
18336: LD_STRING Dark Warrior
18338: ST_TO_ADDR
// hc_gallery :=  ;
18339: LD_ADDR_OWVAR 33
18343: PUSH
18344: LD_STRING 
18346: ST_TO_ADDR
// hc_noskilllimit := true ;
18347: LD_ADDR_OWVAR 76
18351: PUSH
18352: LD_INT 1
18354: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18355: LD_ADDR_OWVAR 31
18359: PUSH
18360: LD_INT 30
18362: PUSH
18363: LD_INT 30
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 30
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
// un := CreateHuman ;
18378: LD_ADDR_VAR 0 3
18382: PUSH
18383: CALL_OW 44
18387: ST_TO_ADDR
// hc_noskilllimit := false ;
18388: LD_ADDR_OWVAR 76
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 51
// ToLua ( playRanger() ) ;
18408: LD_STRING playRanger()
18410: PPUSH
18411: CALL_OW 559
// p := 0 ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18423: LD_INT 35
18425: PPUSH
18426: CALL_OW 67
// p := p + 1 ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_VAR 0 2
18439: PUSH
18440: LD_INT 1
18442: PLUS
18443: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18444: LD_VAR 0 3
18448: PPUSH
18449: CALL_OW 256
18453: PUSH
18454: LD_INT 1000
18456: LESS
18457: IFFALSE 18471
// SetLives ( un , 1000 ) ;
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1000
18466: PPUSH
18467: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 91
18490: PUSH
18491: LD_VAR 0 3
18495: PUSH
18496: LD_INT 30
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 74
18522: PPUSH
18523: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18527: LD_VAR 0 2
18531: PUSH
18532: LD_INT 80
18534: GREATER
18535: PUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 301
18545: OR
18546: IFFALSE 18423
// if un then
18548: LD_VAR 0 3
18552: IFFALSE 18563
// RemoveUnit ( un ) ;
18554: LD_VAR 0 3
18558: PPUSH
18559: CALL_OW 64
// end ;
18563: PPOPN 3
18565: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18566: LD_EXP 81
18570: IFFALSE 18686
18572: GO 18574
18574: DISABLE
18575: LD_INT 0
18577: PPUSH
18578: PPUSH
18579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18580: LD_ADDR_VAR 0 2
18584: PUSH
18585: LD_INT 81
18587: PUSH
18588: LD_OWVAR 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 21
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18616: LD_STRING playComputer()
18618: PPUSH
18619: CALL_OW 559
// if not tmp then
18623: LD_VAR 0 2
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18686
// for i in tmp do
18632: LD_ADDR_VAR 0 1
18636: PUSH
18637: LD_VAR 0 2
18641: PUSH
18642: FOR_IN
18643: IFFALSE 18684
// for j := 1 to 4 do
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: DOUBLE
18651: LD_INT 1
18653: DEC
18654: ST_TO_ADDR
18655: LD_INT 4
18657: PUSH
18658: FOR_TO
18659: IFFALSE 18680
// SetSkill ( i , j , 10 ) ;
18661: LD_VAR 0 1
18665: PPUSH
18666: LD_VAR 0 3
18670: PPUSH
18671: LD_INT 10
18673: PPUSH
18674: CALL_OW 237
18678: GO 18658
18680: POP
18681: POP
18682: GO 18642
18684: POP
18685: POP
// end ;
18686: PPOPN 3
18688: END
// every 0 0$1 trigger s30 do var i , tmp ;
18689: LD_EXP 82
18693: IFFALSE 18762
18695: GO 18697
18697: DISABLE
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: LD_INT 22
18709: PUSH
18710: LD_OWVAR 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 69
18723: ST_TO_ADDR
// if not tmp then
18724: LD_VAR 0 2
18728: NOT
18729: IFFALSE 18733
// exit ;
18731: GO 18762
// for i in tmp do
18733: LD_ADDR_VAR 0 1
18737: PUSH
18738: LD_VAR 0 2
18742: PUSH
18743: FOR_IN
18744: IFFALSE 18760
// SetLives ( i , 300 ) ;
18746: LD_VAR 0 1
18750: PPUSH
18751: LD_INT 300
18753: PPUSH
18754: CALL_OW 234
18758: GO 18743
18760: POP
18761: POP
// end ;
18762: PPOPN 2
18764: END
// every 0 0$1 trigger s60 do var i , tmp ;
18765: LD_EXP 83
18769: IFFALSE 18838
18771: GO 18773
18773: DISABLE
18774: LD_INT 0
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18778: LD_ADDR_VAR 0 2
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 69
18799: ST_TO_ADDR
// if not tmp then
18800: LD_VAR 0 2
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 18838
// for i in tmp do
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_VAR 0 2
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18836
// SetLives ( i , 600 ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 600
18829: PPUSH
18830: CALL_OW 234
18834: GO 18819
18836: POP
18837: POP
// end ;
18838: PPOPN 2
18840: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18841: LD_INT 0
18843: PPUSH
// case cmd of 301 :
18844: LD_VAR 0 1
18848: PUSH
18849: LD_INT 301
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18889
18857: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18858: LD_VAR 0 6
18862: PPUSH
18863: LD_VAR 0 7
18867: PPUSH
18868: LD_VAR 0 8
18872: PPUSH
18873: LD_VAR 0 4
18877: PPUSH
18878: LD_VAR 0 5
18882: PPUSH
18883: CALL 20090 0 5
18887: GO 19010
18889: LD_INT 302
18891: DOUBLE
18892: EQUAL
18893: IFTRUE 18897
18895: GO 18934
18897: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18898: LD_VAR 0 6
18902: PPUSH
18903: LD_VAR 0 7
18907: PPUSH
18908: LD_VAR 0 8
18912: PPUSH
18913: LD_VAR 0 9
18917: PPUSH
18918: LD_VAR 0 4
18922: PPUSH
18923: LD_VAR 0 5
18927: PPUSH
18928: CALL 20181 0 6
18932: GO 19010
18934: LD_INT 303
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18979
18942: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18943: LD_VAR 0 6
18947: PPUSH
18948: LD_VAR 0 7
18952: PPUSH
18953: LD_VAR 0 8
18957: PPUSH
18958: LD_VAR 0 9
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: LD_VAR 0 5
18972: PPUSH
18973: CALL 19015 0 6
18977: GO 19010
18979: LD_INT 304
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19009
18987: POP
// hHackTeleport ( unit , x , y ) ; end ;
18988: LD_VAR 0 2
18992: PPUSH
18993: LD_VAR 0 4
18997: PPUSH
18998: LD_VAR 0 5
19002: PPUSH
19003: CALL 20774 0 3
19007: GO 19010
19009: POP
// end ;
19010: LD_VAR 0 12
19014: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19015: LD_INT 0
19017: PPUSH
19018: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 1
19026: LESS
19027: PUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 3
19035: GREATER
19036: OR
19037: PUSH
19038: LD_VAR 0 5
19042: PPUSH
19043: LD_VAR 0 6
19047: PPUSH
19048: CALL_OW 428
19052: OR
19053: IFFALSE 19057
// exit ;
19055: GO 19777
// uc_side := your_side ;
19057: LD_ADDR_OWVAR 20
19061: PUSH
19062: LD_OWVAR 2
19066: ST_TO_ADDR
// uc_nation := nation ;
19067: LD_ADDR_OWVAR 21
19071: PUSH
19072: LD_VAR 0 1
19076: ST_TO_ADDR
// bc_level = 1 ;
19077: LD_ADDR_OWVAR 43
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// case btype of 1 :
19085: LD_VAR 0 2
19089: PUSH
19090: LD_INT 1
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19109
19098: POP
// bc_type := b_depot ; 2 :
19099: LD_ADDR_OWVAR 42
19103: PUSH
19104: LD_INT 0
19106: ST_TO_ADDR
19107: GO 19721
19109: LD_INT 2
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19128
19117: POP
// bc_type := b_warehouse ; 3 :
19118: LD_ADDR_OWVAR 42
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
19126: GO 19721
19128: LD_INT 3
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19147
19136: POP
// bc_type := b_lab ; 4 .. 9 :
19137: LD_ADDR_OWVAR 42
19141: PUSH
19142: LD_INT 6
19144: ST_TO_ADDR
19145: GO 19721
19147: LD_INT 4
19149: DOUBLE
19150: GREATEREQUAL
19151: IFFALSE 19159
19153: LD_INT 9
19155: DOUBLE
19156: LESSEQUAL
19157: IFTRUE 19161
19159: GO 19213
19161: POP
// begin bc_type := b_lab_half ;
19162: LD_ADDR_OWVAR 42
19166: PUSH
19167: LD_INT 7
19169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19170: LD_ADDR_OWVAR 44
19174: PUSH
19175: LD_INT 10
19177: PUSH
19178: LD_INT 11
19180: PUSH
19181: LD_INT 12
19183: PUSH
19184: LD_INT 15
19186: PUSH
19187: LD_INT 14
19189: PUSH
19190: LD_INT 13
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 3
19208: MINUS
19209: ARRAY
19210: ST_TO_ADDR
// end ; 10 .. 13 :
19211: GO 19721
19213: LD_INT 10
19215: DOUBLE
19216: GREATEREQUAL
19217: IFFALSE 19225
19219: LD_INT 13
19221: DOUBLE
19222: LESSEQUAL
19223: IFTRUE 19227
19225: GO 19304
19227: POP
// begin bc_type := b_lab_full ;
19228: LD_ADDR_OWVAR 42
19232: PUSH
19233: LD_INT 8
19235: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19236: LD_ADDR_OWVAR 44
19240: PUSH
19241: LD_INT 10
19243: PUSH
19244: LD_INT 12
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: LD_INT 13
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: LD_VAR 0 2
19263: PUSH
19264: LD_INT 9
19266: MINUS
19267: ARRAY
19268: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19269: LD_ADDR_OWVAR 45
19273: PUSH
19274: LD_INT 11
19276: PUSH
19277: LD_INT 15
19279: PUSH
19280: LD_INT 12
19282: PUSH
19283: LD_INT 15
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: PUSH
19292: LD_VAR 0 2
19296: PUSH
19297: LD_INT 9
19299: MINUS
19300: ARRAY
19301: ST_TO_ADDR
// end ; 14 :
19302: GO 19721
19304: LD_INT 14
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19323
19312: POP
// bc_type := b_workshop ; 15 :
19313: LD_ADDR_OWVAR 42
19317: PUSH
19318: LD_INT 2
19320: ST_TO_ADDR
19321: GO 19721
19323: LD_INT 15
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19342
19331: POP
// bc_type := b_factory ; 16 :
19332: LD_ADDR_OWVAR 42
19336: PUSH
19337: LD_INT 3
19339: ST_TO_ADDR
19340: GO 19721
19342: LD_INT 16
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19361
19350: POP
// bc_type := b_ext_gun ; 17 :
19351: LD_ADDR_OWVAR 42
19355: PUSH
19356: LD_INT 17
19358: ST_TO_ADDR
19359: GO 19721
19361: LD_INT 17
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19397
19369: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19370: LD_ADDR_OWVAR 42
19374: PUSH
19375: LD_INT 19
19377: PUSH
19378: LD_INT 23
19380: PUSH
19381: LD_INT 19
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: PUSH
19389: LD_VAR 0 1
19393: ARRAY
19394: ST_TO_ADDR
19395: GO 19721
19397: LD_INT 18
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19416
19405: POP
// bc_type := b_ext_radar ; 19 :
19406: LD_ADDR_OWVAR 42
19410: PUSH
19411: LD_INT 20
19413: ST_TO_ADDR
19414: GO 19721
19416: LD_INT 19
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19435
19424: POP
// bc_type := b_ext_radio ; 20 :
19425: LD_ADDR_OWVAR 42
19429: PUSH
19430: LD_INT 22
19432: ST_TO_ADDR
19433: GO 19721
19435: LD_INT 20
19437: DOUBLE
19438: EQUAL
19439: IFTRUE 19443
19441: GO 19454
19443: POP
// bc_type := b_ext_siberium ; 21 :
19444: LD_ADDR_OWVAR 42
19448: PUSH
19449: LD_INT 21
19451: ST_TO_ADDR
19452: GO 19721
19454: LD_INT 21
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19473
19462: POP
// bc_type := b_ext_computer ; 22 :
19463: LD_ADDR_OWVAR 42
19467: PUSH
19468: LD_INT 24
19470: ST_TO_ADDR
19471: GO 19721
19473: LD_INT 22
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19481
19479: GO 19492
19481: POP
// bc_type := b_ext_track ; 23 :
19482: LD_ADDR_OWVAR 42
19486: PUSH
19487: LD_INT 16
19489: ST_TO_ADDR
19490: GO 19721
19492: LD_INT 23
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19511
19500: POP
// bc_type := b_ext_laser ; 24 :
19501: LD_ADDR_OWVAR 42
19505: PUSH
19506: LD_INT 25
19508: ST_TO_ADDR
19509: GO 19721
19511: LD_INT 24
19513: DOUBLE
19514: EQUAL
19515: IFTRUE 19519
19517: GO 19530
19519: POP
// bc_type := b_control_tower ; 25 :
19520: LD_ADDR_OWVAR 42
19524: PUSH
19525: LD_INT 36
19527: ST_TO_ADDR
19528: GO 19721
19530: LD_INT 25
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19549
19538: POP
// bc_type := b_breastwork ; 26 :
19539: LD_ADDR_OWVAR 42
19543: PUSH
19544: LD_INT 31
19546: ST_TO_ADDR
19547: GO 19721
19549: LD_INT 26
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19568
19557: POP
// bc_type := b_bunker ; 27 :
19558: LD_ADDR_OWVAR 42
19562: PUSH
19563: LD_INT 32
19565: ST_TO_ADDR
19566: GO 19721
19568: LD_INT 27
19570: DOUBLE
19571: EQUAL
19572: IFTRUE 19576
19574: GO 19587
19576: POP
// bc_type := b_turret ; 28 :
19577: LD_ADDR_OWVAR 42
19581: PUSH
19582: LD_INT 33
19584: ST_TO_ADDR
19585: GO 19721
19587: LD_INT 28
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19606
19595: POP
// bc_type := b_armoury ; 29 :
19596: LD_ADDR_OWVAR 42
19600: PUSH
19601: LD_INT 4
19603: ST_TO_ADDR
19604: GO 19721
19606: LD_INT 29
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19625
19614: POP
// bc_type := b_barracks ; 30 :
19615: LD_ADDR_OWVAR 42
19619: PUSH
19620: LD_INT 5
19622: ST_TO_ADDR
19623: GO 19721
19625: LD_INT 30
19627: DOUBLE
19628: EQUAL
19629: IFTRUE 19633
19631: GO 19644
19633: POP
// bc_type := b_solar_power ; 31 :
19634: LD_ADDR_OWVAR 42
19638: PUSH
19639: LD_INT 27
19641: ST_TO_ADDR
19642: GO 19721
19644: LD_INT 31
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19663
19652: POP
// bc_type := b_oil_power ; 32 :
19653: LD_ADDR_OWVAR 42
19657: PUSH
19658: LD_INT 26
19660: ST_TO_ADDR
19661: GO 19721
19663: LD_INT 32
19665: DOUBLE
19666: EQUAL
19667: IFTRUE 19671
19669: GO 19682
19671: POP
// bc_type := b_siberite_power ; 33 :
19672: LD_ADDR_OWVAR 42
19676: PUSH
19677: LD_INT 28
19679: ST_TO_ADDR
19680: GO 19721
19682: LD_INT 33
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19701
19690: POP
// bc_type := b_oil_mine ; 34 :
19691: LD_ADDR_OWVAR 42
19695: PUSH
19696: LD_INT 29
19698: ST_TO_ADDR
19699: GO 19721
19701: LD_INT 34
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19720
19709: POP
// bc_type := b_siberite_mine ; end ;
19710: LD_ADDR_OWVAR 42
19714: PUSH
19715: LD_INT 30
19717: ST_TO_ADDR
19718: GO 19721
19720: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19721: LD_ADDR_VAR 0 8
19725: PUSH
19726: LD_VAR 0 5
19730: PPUSH
19731: LD_VAR 0 6
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: CALL_OW 47
19745: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19746: LD_OWVAR 42
19750: PUSH
19751: LD_INT 32
19753: PUSH
19754: LD_INT 33
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: IN
19761: IFFALSE 19777
// PlaceWeaponTurret ( b , weapon ) ;
19763: LD_VAR 0 8
19767: PPUSH
19768: LD_VAR 0 4
19772: PPUSH
19773: CALL_OW 431
// end ;
19777: LD_VAR 0 7
19781: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19788: LD_ADDR_VAR 0 4
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: ST_TO_ADDR
// if not tmp then
19842: LD_VAR 0 4
19846: NOT
19847: IFFALSE 19851
// exit ;
19849: GO 19910
// for i in tmp do
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_VAR 0 4
19860: PUSH
19861: FOR_IN
19862: IFFALSE 19908
// for j = 1 to 3 do
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: DOUBLE
19870: LD_INT 1
19872: DEC
19873: ST_TO_ADDR
19874: LD_INT 3
19876: PUSH
19877: FOR_TO
19878: IFFALSE 19904
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19880: LD_VAR 0 2
19884: PPUSH
19885: CALL_OW 274
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 99999
19897: PPUSH
19898: CALL_OW 277
19902: GO 19877
19904: POP
19905: POP
19906: GO 19861
19908: POP
19909: POP
// end ;
19910: LD_VAR 0 1
19914: RET
// export function hHackSetLevel10 ; var i , j ; begin
19915: LD_INT 0
19917: PPUSH
19918: PPUSH
19919: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19920: LD_ADDR_VAR 0 2
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PPUSH
19935: CALL_OW 69
19939: PUSH
19940: FOR_IN
19941: IFFALSE 19993
// if IsSelected ( i ) then
19943: LD_VAR 0 2
19947: PPUSH
19948: CALL_OW 306
19952: IFFALSE 19991
// begin for j := 1 to 4 do
19954: LD_ADDR_VAR 0 3
19958: PUSH
19959: DOUBLE
19960: LD_INT 1
19962: DEC
19963: ST_TO_ADDR
19964: LD_INT 4
19966: PUSH
19967: FOR_TO
19968: IFFALSE 19989
// SetSkill ( i , j , 10 ) ;
19970: LD_VAR 0 2
19974: PPUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: LD_INT 10
19982: PPUSH
19983: CALL_OW 237
19987: GO 19967
19989: POP
19990: POP
// end ;
19991: GO 19940
19993: POP
19994: POP
// end ;
19995: LD_VAR 0 1
19999: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20000: LD_INT 0
20002: PPUSH
20003: PPUSH
20004: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 21
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PPUSH
20036: CALL_OW 69
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20083
// begin for j := 1 to 4 do
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_INT 4
20056: PUSH
20057: FOR_TO
20058: IFFALSE 20079
// SetSkill ( i , j , 10 ) ;
20060: LD_VAR 0 2
20064: PPUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 10
20072: PPUSH
20073: CALL_OW 237
20077: GO 20057
20079: POP
20080: POP
// end ;
20081: GO 20041
20083: POP
20084: POP
// end ;
20085: LD_VAR 0 1
20089: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20090: LD_INT 0
20092: PPUSH
// uc_side := your_side ;
20093: LD_ADDR_OWVAR 20
20097: PUSH
20098: LD_OWVAR 2
20102: ST_TO_ADDR
// uc_nation := nation ;
20103: LD_ADDR_OWVAR 21
20107: PUSH
20108: LD_VAR 0 1
20112: ST_TO_ADDR
// InitHc ;
20113: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20117: LD_INT 0
20119: PPUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20134: LD_VAR 0 4
20138: PPUSH
20139: LD_VAR 0 5
20143: PPUSH
20144: CALL_OW 428
20148: PUSH
20149: LD_INT 0
20151: EQUAL
20152: IFFALSE 20176
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20154: CALL_OW 44
20158: PPUSH
20159: LD_VAR 0 4
20163: PPUSH
20164: LD_VAR 0 5
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 48
// end ;
20176: LD_VAR 0 6
20180: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20181: LD_INT 0
20183: PPUSH
20184: PPUSH
// uc_side := your_side ;
20185: LD_ADDR_OWVAR 20
20189: PUSH
20190: LD_OWVAR 2
20194: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20195: LD_VAR 0 1
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 3
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: IN
20222: IFFALSE 20234
// uc_nation := nation_american else
20224: LD_ADDR_OWVAR 21
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
20232: GO 20277
// if chassis in [ 11 , 12 , 13 , 14 ] then
20234: LD_VAR 0 1
20238: PUSH
20239: LD_INT 11
20241: PUSH
20242: LD_INT 12
20244: PUSH
20245: LD_INT 13
20247: PUSH
20248: LD_INT 14
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: IN
20257: IFFALSE 20269
// uc_nation := nation_arabian else
20259: LD_ADDR_OWVAR 21
20263: PUSH
20264: LD_INT 2
20266: ST_TO_ADDR
20267: GO 20277
// uc_nation := nation_russian ;
20269: LD_ADDR_OWVAR 21
20273: PUSH
20274: LD_INT 3
20276: ST_TO_ADDR
// vc_chassis := chassis ;
20277: LD_ADDR_OWVAR 37
20281: PUSH
20282: LD_VAR 0 1
20286: ST_TO_ADDR
// vc_engine := engine ;
20287: LD_ADDR_OWVAR 39
20291: PUSH
20292: LD_VAR 0 2
20296: ST_TO_ADDR
// vc_control := control ;
20297: LD_ADDR_OWVAR 38
20301: PUSH
20302: LD_VAR 0 3
20306: ST_TO_ADDR
// vc_weapon := weapon ;
20307: LD_ADDR_OWVAR 40
20311: PUSH
20312: LD_VAR 0 4
20316: ST_TO_ADDR
// un := CreateVehicle ;
20317: LD_ADDR_VAR 0 8
20321: PUSH
20322: CALL_OW 45
20326: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20327: LD_VAR 0 8
20331: PPUSH
20332: LD_INT 0
20334: PPUSH
20335: LD_INT 5
20337: PPUSH
20338: CALL_OW 12
20342: PPUSH
20343: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20347: LD_VAR 0 8
20351: PPUSH
20352: LD_VAR 0 5
20356: PPUSH
20357: LD_VAR 0 6
20361: PPUSH
20362: LD_INT 1
20364: PPUSH
20365: CALL_OW 48
// end ;
20369: LD_VAR 0 7
20373: RET
// export hInvincible ; every 1 do
20374: GO 20376
20376: DISABLE
// hInvincible := [ ] ;
20377: LD_ADDR_EXP 84
20381: PUSH
20382: EMPTY
20383: ST_TO_ADDR
20384: END
// every 10 do var i ;
20385: GO 20387
20387: DISABLE
20388: LD_INT 0
20390: PPUSH
// begin enable ;
20391: ENABLE
// if not hInvincible then
20392: LD_EXP 84
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20445
// for i in hInvincible do
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: LD_EXP 84
20410: PUSH
20411: FOR_IN
20412: IFFALSE 20443
// if GetLives ( i ) < 1000 then
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 256
20423: PUSH
20424: LD_INT 1000
20426: LESS
20427: IFFALSE 20441
// SetLives ( i , 1000 ) ;
20429: LD_VAR 0 1
20433: PPUSH
20434: LD_INT 1000
20436: PPUSH
20437: CALL_OW 234
20441: GO 20411
20443: POP
20444: POP
// end ;
20445: PPOPN 1
20447: END
// export function hHackInvincible ; var i ; begin
20448: LD_INT 0
20450: PPUSH
20451: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: LD_INT 21
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 21
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: PPUSH
20485: CALL_OW 69
20489: PUSH
20490: FOR_IN
20491: IFFALSE 20552
// if IsSelected ( i ) then
20493: LD_VAR 0 2
20497: PPUSH
20498: CALL_OW 306
20502: IFFALSE 20550
// begin if i in hInvincible then
20504: LD_VAR 0 2
20508: PUSH
20509: LD_EXP 84
20513: IN
20514: IFFALSE 20534
// hInvincible := hInvincible diff i else
20516: LD_ADDR_EXP 84
20520: PUSH
20521: LD_EXP 84
20525: PUSH
20526: LD_VAR 0 2
20530: DIFF
20531: ST_TO_ADDR
20532: GO 20550
// hInvincible := hInvincible union i ;
20534: LD_ADDR_EXP 84
20538: PUSH
20539: LD_EXP 84
20543: PUSH
20544: LD_VAR 0 2
20548: UNION
20549: ST_TO_ADDR
// end ;
20550: GO 20490
20552: POP
20553: POP
// end ;
20554: LD_VAR 0 1
20558: RET
// export function hHackInvisible ; var i , j ; begin
20559: LD_INT 0
20561: PPUSH
20562: PPUSH
20563: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20564: LD_ADDR_VAR 0 2
20568: PUSH
20569: LD_INT 21
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: PUSH
20584: FOR_IN
20585: IFFALSE 20609
// if IsSelected ( i ) then
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL_OW 306
20596: IFFALSE 20607
// ComForceInvisible ( i ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 496
20607: GO 20584
20609: POP
20610: POP
// end ;
20611: LD_VAR 0 1
20615: RET
// export function hHackChangeYourSide ; begin
20616: LD_INT 0
20618: PPUSH
// if your_side = 8 then
20619: LD_OWVAR 2
20623: PUSH
20624: LD_INT 8
20626: EQUAL
20627: IFFALSE 20639
// your_side := 0 else
20629: LD_ADDR_OWVAR 2
20633: PUSH
20634: LD_INT 0
20636: ST_TO_ADDR
20637: GO 20653
// your_side := your_side + 1 ;
20639: LD_ADDR_OWVAR 2
20643: PUSH
20644: LD_OWVAR 2
20648: PUSH
20649: LD_INT 1
20651: PLUS
20652: ST_TO_ADDR
// end ;
20653: LD_VAR 0 1
20657: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20658: LD_INT 0
20660: PPUSH
20661: PPUSH
20662: PPUSH
// for i in all_units do
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: LD_OWVAR 3
20672: PUSH
20673: FOR_IN
20674: IFFALSE 20752
// if IsSelected ( i ) then
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 306
20685: IFFALSE 20750
// begin j := GetSide ( i ) ;
20687: LD_ADDR_VAR 0 3
20691: PUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: CALL_OW 255
20701: ST_TO_ADDR
// if j = 8 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 8
20709: EQUAL
20710: IFFALSE 20722
// j := 0 else
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
20720: GO 20736
// j := j + 1 ;
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 1
20734: PLUS
20735: ST_TO_ADDR
// SetSide ( i , j ) ;
20736: LD_VAR 0 2
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: CALL_OW 235
// end ;
20750: GO 20673
20752: POP
20753: POP
// end ;
20754: LD_VAR 0 1
20758: RET
// export function hHackFog ; begin
20759: LD_INT 0
20761: PPUSH
// FogOff ( true ) ;
20762: LD_INT 1
20764: PPUSH
20765: CALL_OW 344
// end ;
20769: LD_VAR 0 1
20773: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20774: LD_INT 0
20776: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20777: LD_VAR 0 1
20781: PPUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: LD_INT 1
20797: PPUSH
20798: CALL_OW 483
// CenterOnXY ( x , y ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: CALL_OW 84
// end ;
20816: LD_VAR 0 4
20820: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20825: LD_VAR 0 1
20829: NOT
20830: PUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 488
20845: NOT
20846: OR
20847: PUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 266
20857: PUSH
20858: LD_INT 3
20860: NONEQUAL
20861: PUSH
20862: LD_VAR 0 1
20866: PPUSH
20867: CALL_OW 247
20871: PUSH
20872: LD_INT 1
20874: EQUAL
20875: NOT
20876: AND
20877: OR
20878: IFFALSE 20882
// exit ;
20880: GO 21031
// if GetType ( factory ) = unit_human then
20882: LD_VAR 0 1
20886: PPUSH
20887: CALL_OW 247
20891: PUSH
20892: LD_INT 1
20894: EQUAL
20895: IFFALSE 20912
// factory := IsInUnit ( factory ) ;
20897: LD_ADDR_VAR 0 1
20901: PUSH
20902: LD_VAR 0 1
20906: PPUSH
20907: CALL_OW 310
20911: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 266
20921: PUSH
20922: LD_INT 3
20924: NONEQUAL
20925: IFFALSE 20929
// exit ;
20927: GO 21031
// if HexInfo ( x , y ) = factory then
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_VAR 0 3
20938: PPUSH
20939: CALL_OW 428
20943: PUSH
20944: LD_VAR 0 1
20948: EQUAL
20949: IFFALSE 20976
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20951: LD_ADDR_EXP 85
20955: PUSH
20956: LD_EXP 85
20960: PPUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: LD_INT 0
20968: PPUSH
20969: CALL_OW 1
20973: ST_TO_ADDR
20974: GO 21027
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20976: LD_ADDR_EXP 85
20980: PUSH
20981: LD_EXP 85
20985: PPUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: LD_VAR 0 1
20995: PPUSH
20996: CALL_OW 255
21000: PUSH
21001: LD_VAR 0 1
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_VAR 0 3
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 1
21026: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21027: CALL 21036 0 0
// end ;
21031: LD_VAR 0 4
21035: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21036: LD_INT 0
21038: PPUSH
21039: PPUSH
21040: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21041: LD_STRING resetFactoryWaypoint();
21043: PPUSH
21044: CALL_OW 559
// if factoryWaypoints then
21048: LD_EXP 85
21052: IFFALSE 21178
// begin list := PrepareArray ( factoryWaypoints ) ;
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_EXP 85
21063: PPUSH
21064: CALL 67770 0 1
21068: ST_TO_ADDR
// for i := 1 to list do
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: DOUBLE
21075: LD_INT 1
21077: DEC
21078: ST_TO_ADDR
21079: LD_VAR 0 3
21083: PUSH
21084: FOR_TO
21085: IFFALSE 21176
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21087: LD_STRING setFactoryWaypointXY(
21089: PUSH
21090: LD_VAR 0 3
21094: PUSH
21095: LD_VAR 0 2
21099: ARRAY
21100: PUSH
21101: LD_INT 1
21103: ARRAY
21104: STR
21105: PUSH
21106: LD_STRING ,
21108: STR
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: LD_VAR 0 2
21119: ARRAY
21120: PUSH
21121: LD_INT 2
21123: ARRAY
21124: STR
21125: PUSH
21126: LD_STRING ,
21128: STR
21129: PUSH
21130: LD_VAR 0 3
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: PUSH
21141: LD_INT 3
21143: ARRAY
21144: STR
21145: PUSH
21146: LD_STRING ,
21148: STR
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_VAR 0 2
21159: ARRAY
21160: PUSH
21161: LD_INT 4
21163: ARRAY
21164: STR
21165: PUSH
21166: LD_STRING )
21168: STR
21169: PPUSH
21170: CALL_OW 559
21174: GO 21084
21176: POP
21177: POP
// end ; end ;
21178: LD_VAR 0 1
21182: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21183: LD_INT 0
21185: PPUSH
// if HexInfo ( x , y ) = warehouse then
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 428
21200: PUSH
21201: LD_VAR 0 1
21205: EQUAL
21206: IFFALSE 21233
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21208: LD_ADDR_EXP 86
21212: PUSH
21213: LD_EXP 86
21217: PPUSH
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 0
21225: PPUSH
21226: CALL_OW 1
21230: ST_TO_ADDR
21231: GO 21284
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21233: LD_ADDR_EXP 86
21237: PUSH
21238: LD_EXP 86
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 255
21257: PUSH
21258: LD_VAR 0 1
21262: PUSH
21263: LD_VAR 0 2
21267: PUSH
21268: LD_VAR 0 3
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PPUSH
21279: CALL_OW 1
21283: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21284: CALL 21293 0 0
// end ;
21288: LD_VAR 0 4
21292: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
21297: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21298: LD_STRING resetWarehouseGatheringPoints();
21300: PPUSH
21301: CALL_OW 559
// if warehouseGatheringPoints then
21305: LD_EXP 86
21309: IFFALSE 21435
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21311: LD_ADDR_VAR 0 3
21315: PUSH
21316: LD_EXP 86
21320: PPUSH
21321: CALL 67770 0 1
21325: ST_TO_ADDR
// for i := 1 to list do
21326: LD_ADDR_VAR 0 2
21330: PUSH
21331: DOUBLE
21332: LD_INT 1
21334: DEC
21335: ST_TO_ADDR
21336: LD_VAR 0 3
21340: PUSH
21341: FOR_TO
21342: IFFALSE 21433
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21344: LD_STRING setWarehouseGatheringPointXY(
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: LD_VAR 0 2
21356: ARRAY
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: STR
21362: PUSH
21363: LD_STRING ,
21365: STR
21366: PUSH
21367: LD_VAR 0 3
21371: PUSH
21372: LD_VAR 0 2
21376: ARRAY
21377: PUSH
21378: LD_INT 2
21380: ARRAY
21381: STR
21382: PUSH
21383: LD_STRING ,
21385: STR
21386: PUSH
21387: LD_VAR 0 3
21391: PUSH
21392: LD_VAR 0 2
21396: ARRAY
21397: PUSH
21398: LD_INT 3
21400: ARRAY
21401: STR
21402: PUSH
21403: LD_STRING ,
21405: STR
21406: PUSH
21407: LD_VAR 0 3
21411: PUSH
21412: LD_VAR 0 2
21416: ARRAY
21417: PUSH
21418: LD_INT 4
21420: ARRAY
21421: STR
21422: PUSH
21423: LD_STRING )
21425: STR
21426: PPUSH
21427: CALL_OW 559
21431: GO 21341
21433: POP
21434: POP
// end ; end ;
21435: LD_VAR 0 1
21439: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21440: LD_EXP 86
21444: IFFALSE 22131
21446: GO 21448
21448: DISABLE
21449: LD_INT 0
21451: PPUSH
21452: PPUSH
21453: PPUSH
21454: PPUSH
21455: PPUSH
21456: PPUSH
21457: PPUSH
21458: PPUSH
21459: PPUSH
// begin enable ;
21460: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_EXP 86
21470: PPUSH
21471: CALL 67770 0 1
21475: ST_TO_ADDR
// if not list then
21476: LD_VAR 0 3
21480: NOT
21481: IFFALSE 21485
// exit ;
21483: GO 22131
// for i := 1 to list do
21485: LD_ADDR_VAR 0 1
21489: PUSH
21490: DOUBLE
21491: LD_INT 1
21493: DEC
21494: ST_TO_ADDR
21495: LD_VAR 0 3
21499: PUSH
21500: FOR_TO
21501: IFFALSE 22129
// begin depot := list [ i ] [ 2 ] ;
21503: LD_ADDR_VAR 0 8
21507: PUSH
21508: LD_VAR 0 3
21512: PUSH
21513: LD_VAR 0 1
21517: ARRAY
21518: PUSH
21519: LD_INT 2
21521: ARRAY
21522: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21523: LD_ADDR_VAR 0 5
21527: PUSH
21528: LD_VAR 0 3
21532: PUSH
21533: LD_VAR 0 1
21537: ARRAY
21538: PUSH
21539: LD_INT 1
21541: ARRAY
21542: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21543: LD_VAR 0 8
21547: PPUSH
21548: CALL_OW 301
21552: PUSH
21553: LD_VAR 0 5
21557: PUSH
21558: LD_VAR 0 8
21562: PPUSH
21563: CALL_OW 255
21567: NONEQUAL
21568: OR
21569: IFFALSE 21598
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21571: LD_ADDR_EXP 86
21575: PUSH
21576: LD_EXP 86
21580: PPUSH
21581: LD_VAR 0 8
21585: PPUSH
21586: LD_INT 0
21588: PPUSH
21589: CALL_OW 1
21593: ST_TO_ADDR
// exit ;
21594: POP
21595: POP
21596: GO 22131
// end ; x := list [ i ] [ 3 ] ;
21598: LD_ADDR_VAR 0 6
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_VAR 0 1
21612: ARRAY
21613: PUSH
21614: LD_INT 3
21616: ARRAY
21617: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21618: LD_ADDR_VAR 0 7
21622: PUSH
21623: LD_VAR 0 3
21627: PUSH
21628: LD_VAR 0 1
21632: ARRAY
21633: PUSH
21634: LD_INT 4
21636: ARRAY
21637: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21638: LD_ADDR_VAR 0 9
21642: PUSH
21643: LD_VAR 0 6
21647: PPUSH
21648: LD_VAR 0 7
21652: PPUSH
21653: LD_INT 16
21655: PPUSH
21656: CALL 66354 0 3
21660: ST_TO_ADDR
// if not cratesNearbyPoint then
21661: LD_VAR 0 9
21665: NOT
21666: IFFALSE 21672
// exit ;
21668: POP
21669: POP
21670: GO 22131
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21672: LD_ADDR_VAR 0 4
21676: PUSH
21677: LD_INT 22
21679: PUSH
21680: LD_VAR 0 5
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 3
21691: PUSH
21692: LD_INT 60
21694: PUSH
21695: EMPTY
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 91
21704: PUSH
21705: LD_VAR 0 8
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 25
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 16
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 69
21756: PUSH
21757: LD_VAR 0 8
21761: PPUSH
21762: CALL_OW 313
21766: PPUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 60
21772: PUSH
21773: EMPTY
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 25
21795: PUSH
21796: LD_INT 16
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PPUSH
21812: CALL_OW 72
21816: UNION
21817: ST_TO_ADDR
// if tmp then
21818: LD_VAR 0 4
21822: IFFALSE 21902
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21824: LD_ADDR_VAR 0 4
21828: PUSH
21829: LD_VAR 0 4
21833: PPUSH
21834: LD_INT 3
21836: PPUSH
21837: CALL 64321 0 2
21841: ST_TO_ADDR
// for j in tmp do
21842: LD_ADDR_VAR 0 2
21846: PUSH
21847: LD_VAR 0 4
21851: PUSH
21852: FOR_IN
21853: IFFALSE 21896
// begin if IsInUnit ( j ) then
21855: LD_VAR 0 2
21859: PPUSH
21860: CALL_OW 310
21864: IFFALSE 21875
// ComExit ( j ) ;
21866: LD_VAR 0 2
21870: PPUSH
21871: CALL 64404 0 1
// AddComCollect ( j , x , y ) ;
21875: LD_VAR 0 2
21879: PPUSH
21880: LD_VAR 0 6
21884: PPUSH
21885: LD_VAR 0 7
21889: PPUSH
21890: CALL_OW 177
// end ;
21894: GO 21852
21896: POP
21897: POP
// exit ;
21898: POP
21899: POP
21900: GO 22131
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21902: LD_ADDR_VAR 0 4
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_VAR 0 5
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 91
21921: PUSH
21922: LD_VAR 0 8
21926: PUSH
21927: LD_INT 8
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 34
21940: PUSH
21941: LD_INT 12
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 34
21950: PUSH
21951: LD_INT 51
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 34
21960: PUSH
21961: LD_INT 32
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 34
21970: PUSH
21971: LD_EXP 99
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: PPUSH
21992: CALL_OW 69
21996: ST_TO_ADDR
// if tmp then
21997: LD_VAR 0 4
22001: IFFALSE 22127
// begin for j in tmp do
22003: LD_ADDR_VAR 0 2
22007: PUSH
22008: LD_VAR 0 4
22012: PUSH
22013: FOR_IN
22014: IFFALSE 22125
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22016: LD_VAR 0 2
22020: PPUSH
22021: CALL_OW 262
22025: PUSH
22026: LD_INT 3
22028: EQUAL
22029: PUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: CALL_OW 261
22039: PUSH
22040: LD_INT 20
22042: GREATER
22043: OR
22044: PUSH
22045: LD_VAR 0 2
22049: PPUSH
22050: CALL_OW 314
22054: NOT
22055: AND
22056: PUSH
22057: LD_VAR 0 2
22061: PPUSH
22062: CALL_OW 263
22066: PUSH
22067: LD_INT 1
22069: NONEQUAL
22070: PUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: CALL_OW 311
22080: OR
22081: AND
22082: IFFALSE 22123
// begin ComCollect ( j , x , y ) ;
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_VAR 0 6
22093: PPUSH
22094: LD_VAR 0 7
22098: PPUSH
22099: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22103: LD_VAR 0 2
22107: PPUSH
22108: LD_VAR 0 8
22112: PPUSH
22113: CALL_OW 172
// exit ;
22117: POP
22118: POP
22119: POP
22120: POP
22121: GO 22131
// end ;
22123: GO 22013
22125: POP
22126: POP
// end ; end ;
22127: GO 21500
22129: POP
22130: POP
// end ; end_of_file
22131: PPOPN 9
22133: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22134: LD_INT 0
22136: PPUSH
22137: PPUSH
22138: PPUSH
22139: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 264
22149: PUSH
22150: LD_EXP 102
22154: EQUAL
22155: IFFALSE 22227
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22157: LD_INT 68
22159: PPUSH
22160: LD_VAR 0 1
22164: PPUSH
22165: CALL_OW 255
22169: PPUSH
22170: CALL_OW 321
22174: PUSH
22175: LD_INT 2
22177: EQUAL
22178: IFFALSE 22190
// eff := 70 else
22180: LD_ADDR_VAR 0 4
22184: PUSH
22185: LD_INT 70
22187: ST_TO_ADDR
22188: GO 22198
// eff := 30 ;
22190: LD_ADDR_VAR 0 4
22194: PUSH
22195: LD_INT 30
22197: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22198: LD_VAR 0 1
22202: PPUSH
22203: CALL_OW 250
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 251
22217: PPUSH
22218: LD_VAR 0 4
22222: PPUSH
22223: CALL_OW 495
// end ; end ;
22227: LD_VAR 0 2
22231: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22232: LD_INT 0
22234: PPUSH
// end ;
22235: LD_VAR 0 4
22239: RET
// export function SOS_Command ( cmd ) ; begin
22240: LD_INT 0
22242: PPUSH
// end ;
22243: LD_VAR 0 2
22247: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22248: LD_INT 0
22250: PPUSH
// end ;
22251: LD_VAR 0 6
22255: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22256: LD_INT 0
22258: PPUSH
22259: PPUSH
// if not vehicle or not factory then
22260: LD_VAR 0 1
22264: NOT
22265: PUSH
22266: LD_VAR 0 2
22270: NOT
22271: OR
22272: IFFALSE 22276
// exit ;
22274: GO 22507
// if factoryWaypoints >= factory then
22276: LD_EXP 85
22280: PUSH
22281: LD_VAR 0 2
22285: GREATEREQUAL
22286: IFFALSE 22507
// if factoryWaypoints [ factory ] then
22288: LD_EXP 85
22292: PUSH
22293: LD_VAR 0 2
22297: ARRAY
22298: IFFALSE 22507
// begin if GetControl ( vehicle ) = control_manual then
22300: LD_VAR 0 1
22304: PPUSH
22305: CALL_OW 263
22309: PUSH
22310: LD_INT 1
22312: EQUAL
22313: IFFALSE 22394
// begin driver := IsDrivenBy ( vehicle ) ;
22315: LD_ADDR_VAR 0 4
22319: PUSH
22320: LD_VAR 0 1
22324: PPUSH
22325: CALL_OW 311
22329: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22330: LD_VAR 0 4
22334: PPUSH
22335: LD_EXP 85
22339: PUSH
22340: LD_VAR 0 2
22344: ARRAY
22345: PUSH
22346: LD_INT 3
22348: ARRAY
22349: PPUSH
22350: LD_EXP 85
22354: PUSH
22355: LD_VAR 0 2
22359: ARRAY
22360: PUSH
22361: LD_INT 4
22363: ARRAY
22364: PPUSH
22365: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22369: LD_VAR 0 4
22373: PPUSH
22374: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22378: LD_VAR 0 4
22382: PPUSH
22383: LD_VAR 0 2
22387: PPUSH
22388: CALL_OW 180
// end else
22392: GO 22507
// if GetControl ( vehicle ) = control_remote then
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 263
22403: PUSH
22404: LD_INT 2
22406: EQUAL
22407: IFFALSE 22468
// begin wait ( 0 0$2 ) ;
22409: LD_INT 70
22411: PPUSH
22412: CALL_OW 67
// if Connect ( vehicle ) then
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL 34715 0 1
22425: IFFALSE 22466
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_EXP 85
22436: PUSH
22437: LD_VAR 0 2
22441: ARRAY
22442: PUSH
22443: LD_INT 3
22445: ARRAY
22446: PPUSH
22447: LD_EXP 85
22451: PUSH
22452: LD_VAR 0 2
22456: ARRAY
22457: PUSH
22458: LD_INT 4
22460: ARRAY
22461: PPUSH
22462: CALL_OW 171
// end else
22466: GO 22507
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_EXP 85
22477: PUSH
22478: LD_VAR 0 2
22482: ARRAY
22483: PUSH
22484: LD_INT 3
22486: ARRAY
22487: PPUSH
22488: LD_EXP 85
22492: PUSH
22493: LD_VAR 0 2
22497: ARRAY
22498: PUSH
22499: LD_INT 4
22501: ARRAY
22502: PPUSH
22503: CALL_OW 171
// end ; end ;
22507: LD_VAR 0 3
22511: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22512: LD_INT 0
22514: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22515: LD_VAR 0 1
22519: PUSH
22520: LD_INT 250
22522: EQUAL
22523: PUSH
22524: LD_VAR 0 2
22528: PPUSH
22529: CALL_OW 264
22533: PUSH
22534: LD_EXP 105
22538: EQUAL
22539: AND
22540: IFFALSE 22561
// MinerPlaceMine ( unit , x , y ) ;
22542: LD_VAR 0 2
22546: PPUSH
22547: LD_VAR 0 4
22551: PPUSH
22552: LD_VAR 0 5
22556: PPUSH
22557: CALL 24960 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22561: LD_VAR 0 1
22565: PUSH
22566: LD_INT 251
22568: EQUAL
22569: PUSH
22570: LD_VAR 0 2
22574: PPUSH
22575: CALL_OW 264
22579: PUSH
22580: LD_EXP 105
22584: EQUAL
22585: AND
22586: IFFALSE 22607
// MinerDetonateMine ( unit , x , y ) ;
22588: LD_VAR 0 2
22592: PPUSH
22593: LD_VAR 0 4
22597: PPUSH
22598: LD_VAR 0 5
22602: PPUSH
22603: CALL 25237 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22607: LD_VAR 0 1
22611: PUSH
22612: LD_INT 252
22614: EQUAL
22615: PUSH
22616: LD_VAR 0 2
22620: PPUSH
22621: CALL_OW 264
22625: PUSH
22626: LD_EXP 105
22630: EQUAL
22631: AND
22632: IFFALSE 22653
// MinerCreateMinefield ( unit , x , y ) ;
22634: LD_VAR 0 2
22638: PPUSH
22639: LD_VAR 0 4
22643: PPUSH
22644: LD_VAR 0 5
22648: PPUSH
22649: CALL 25654 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22653: LD_VAR 0 1
22657: PUSH
22658: LD_INT 253
22660: EQUAL
22661: PUSH
22662: LD_VAR 0 2
22666: PPUSH
22667: CALL_OW 257
22671: PUSH
22672: LD_INT 5
22674: EQUAL
22675: AND
22676: IFFALSE 22697
// ComBinocular ( unit , x , y ) ;
22678: LD_VAR 0 2
22682: PPUSH
22683: LD_VAR 0 4
22687: PPUSH
22688: LD_VAR 0 5
22692: PPUSH
22693: CALL 26025 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22697: LD_VAR 0 1
22701: PUSH
22702: LD_INT 254
22704: EQUAL
22705: PUSH
22706: LD_VAR 0 2
22710: PPUSH
22711: CALL_OW 264
22715: PUSH
22716: LD_EXP 100
22720: EQUAL
22721: AND
22722: PUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: CALL_OW 263
22732: PUSH
22733: LD_INT 3
22735: EQUAL
22736: AND
22737: IFFALSE 22753
// HackDestroyVehicle ( unit , selectedUnit ) ;
22739: LD_VAR 0 2
22743: PPUSH
22744: LD_VAR 0 3
22748: PPUSH
22749: CALL 24320 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22753: LD_VAR 0 1
22757: PUSH
22758: LD_INT 255
22760: EQUAL
22761: PUSH
22762: LD_VAR 0 2
22766: PPUSH
22767: CALL_OW 264
22771: PUSH
22772: LD_INT 14
22774: PUSH
22775: LD_INT 53
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: IN
22782: AND
22783: PUSH
22784: LD_VAR 0 4
22788: PPUSH
22789: LD_VAR 0 5
22793: PPUSH
22794: CALL_OW 488
22798: AND
22799: IFFALSE 22823
// CutTreeXYR ( unit , x , y , 12 ) ;
22801: LD_VAR 0 2
22805: PPUSH
22806: LD_VAR 0 4
22810: PPUSH
22811: LD_VAR 0 5
22815: PPUSH
22816: LD_INT 12
22818: PPUSH
22819: CALL 22886 0 4
// if cmd = 256 then
22823: LD_VAR 0 1
22827: PUSH
22828: LD_INT 256
22830: EQUAL
22831: IFFALSE 22852
// SetFactoryWaypoint ( unit , x , y ) ;
22833: LD_VAR 0 2
22837: PPUSH
22838: LD_VAR 0 4
22842: PPUSH
22843: LD_VAR 0 5
22847: PPUSH
22848: CALL 20821 0 3
// if cmd = 257 then
22852: LD_VAR 0 1
22856: PUSH
22857: LD_INT 257
22859: EQUAL
22860: IFFALSE 22881
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22862: LD_VAR 0 2
22866: PPUSH
22867: LD_VAR 0 4
22871: PPUSH
22872: LD_VAR 0 5
22876: PPUSH
22877: CALL 21183 0 3
// end ;
22881: LD_VAR 0 6
22885: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22886: LD_INT 0
22888: PPUSH
22889: PPUSH
22890: PPUSH
22891: PPUSH
22892: PPUSH
22893: PPUSH
22894: PPUSH
22895: PPUSH
22896: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22897: LD_VAR 0 1
22901: NOT
22902: PUSH
22903: LD_VAR 0 2
22907: PPUSH
22908: LD_VAR 0 3
22912: PPUSH
22913: CALL_OW 488
22917: NOT
22918: OR
22919: PUSH
22920: LD_VAR 0 4
22924: NOT
22925: OR
22926: IFFALSE 22930
// exit ;
22928: GO 23270
// list := [ ] ;
22930: LD_ADDR_VAR 0 13
22934: PUSH
22935: EMPTY
22936: ST_TO_ADDR
// if x - r < 0 then
22937: LD_VAR 0 2
22941: PUSH
22942: LD_VAR 0 4
22946: MINUS
22947: PUSH
22948: LD_INT 0
22950: LESS
22951: IFFALSE 22963
// min_x := 0 else
22953: LD_ADDR_VAR 0 7
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
22961: GO 22979
// min_x := x - r ;
22963: LD_ADDR_VAR 0 7
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_VAR 0 4
22977: MINUS
22978: ST_TO_ADDR
// if y - r < 0 then
22979: LD_VAR 0 3
22983: PUSH
22984: LD_VAR 0 4
22988: MINUS
22989: PUSH
22990: LD_INT 0
22992: LESS
22993: IFFALSE 23005
// min_y := 0 else
22995: LD_ADDR_VAR 0 8
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23021
// min_y := y - r ;
23005: LD_ADDR_VAR 0 8
23009: PUSH
23010: LD_VAR 0 3
23014: PUSH
23015: LD_VAR 0 4
23019: MINUS
23020: ST_TO_ADDR
// max_x := x + r ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_VAR 0 2
23030: PUSH
23031: LD_VAR 0 4
23035: PLUS
23036: ST_TO_ADDR
// max_y := y + r ;
23037: LD_ADDR_VAR 0 10
23041: PUSH
23042: LD_VAR 0 3
23046: PUSH
23047: LD_VAR 0 4
23051: PLUS
23052: ST_TO_ADDR
// for _x = min_x to max_x do
23053: LD_ADDR_VAR 0 11
23057: PUSH
23058: DOUBLE
23059: LD_VAR 0 7
23063: DEC
23064: ST_TO_ADDR
23065: LD_VAR 0 9
23069: PUSH
23070: FOR_TO
23071: IFFALSE 23188
// for _y = min_y to max_y do
23073: LD_ADDR_VAR 0 12
23077: PUSH
23078: DOUBLE
23079: LD_VAR 0 8
23083: DEC
23084: ST_TO_ADDR
23085: LD_VAR 0 10
23089: PUSH
23090: FOR_TO
23091: IFFALSE 23184
// begin if not ValidHex ( _x , _y ) then
23093: LD_VAR 0 11
23097: PPUSH
23098: LD_VAR 0 12
23102: PPUSH
23103: CALL_OW 488
23107: NOT
23108: IFFALSE 23112
// continue ;
23110: GO 23090
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23112: LD_VAR 0 11
23116: PPUSH
23117: LD_VAR 0 12
23121: PPUSH
23122: CALL_OW 351
23126: PUSH
23127: LD_VAR 0 11
23131: PPUSH
23132: LD_VAR 0 12
23136: PPUSH
23137: CALL_OW 554
23141: AND
23142: IFFALSE 23182
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23144: LD_ADDR_VAR 0 13
23148: PUSH
23149: LD_VAR 0 13
23153: PPUSH
23154: LD_VAR 0 13
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: PPUSH
23163: LD_VAR 0 11
23167: PUSH
23168: LD_VAR 0 12
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PPUSH
23177: CALL_OW 2
23181: ST_TO_ADDR
// end ;
23182: GO 23090
23184: POP
23185: POP
23186: GO 23070
23188: POP
23189: POP
// if not list then
23190: LD_VAR 0 13
23194: NOT
23195: IFFALSE 23199
// exit ;
23197: GO 23270
// for i in list do
23199: LD_ADDR_VAR 0 6
23203: PUSH
23204: LD_VAR 0 13
23208: PUSH
23209: FOR_IN
23210: IFFALSE 23268
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23212: LD_VAR 0 1
23216: PPUSH
23217: LD_STRING M
23219: PUSH
23220: LD_VAR 0 6
23224: PUSH
23225: LD_INT 1
23227: ARRAY
23228: PUSH
23229: LD_VAR 0 6
23233: PUSH
23234: LD_INT 2
23236: ARRAY
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: PPUSH
23262: CALL_OW 447
23266: GO 23209
23268: POP
23269: POP
// end ;
23270: LD_VAR 0 5
23274: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23275: LD_EXP 88
23279: NOT
23280: IFFALSE 23330
23282: GO 23284
23284: DISABLE
// begin initHack := true ;
23285: LD_ADDR_EXP 88
23289: PUSH
23290: LD_INT 1
23292: ST_TO_ADDR
// hackTanks := [ ] ;
23293: LD_ADDR_EXP 89
23297: PUSH
23298: EMPTY
23299: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23300: LD_ADDR_EXP 90
23304: PUSH
23305: EMPTY
23306: ST_TO_ADDR
// hackLimit := 3 ;
23307: LD_ADDR_EXP 91
23311: PUSH
23312: LD_INT 3
23314: ST_TO_ADDR
// hackDist := 12 ;
23315: LD_ADDR_EXP 92
23319: PUSH
23320: LD_INT 12
23322: ST_TO_ADDR
// hackCounter := [ ] ;
23323: LD_ADDR_EXP 93
23327: PUSH
23328: EMPTY
23329: ST_TO_ADDR
// end ;
23330: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23331: LD_EXP 88
23335: PUSH
23336: LD_INT 34
23338: PUSH
23339: LD_EXP 100
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 69
23352: AND
23353: IFFALSE 23608
23355: GO 23357
23357: DISABLE
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
// begin enable ;
23362: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23363: LD_ADDR_VAR 0 1
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: LD_EXP 100
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PPUSH
23380: CALL_OW 69
23384: PUSH
23385: FOR_IN
23386: IFFALSE 23606
// begin if not i in hackTanks then
23388: LD_VAR 0 1
23392: PUSH
23393: LD_EXP 89
23397: IN
23398: NOT
23399: IFFALSE 23482
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23401: LD_ADDR_EXP 89
23405: PUSH
23406: LD_EXP 89
23410: PPUSH
23411: LD_EXP 89
23415: PUSH
23416: LD_INT 1
23418: PLUS
23419: PPUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 1
23429: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23430: LD_ADDR_EXP 90
23434: PUSH
23435: LD_EXP 90
23439: PPUSH
23440: LD_EXP 90
23444: PUSH
23445: LD_INT 1
23447: PLUS
23448: PPUSH
23449: EMPTY
23450: PPUSH
23451: CALL_OW 1
23455: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23456: LD_ADDR_EXP 93
23460: PUSH
23461: LD_EXP 93
23465: PPUSH
23466: LD_EXP 93
23470: PUSH
23471: LD_INT 1
23473: PLUS
23474: PPUSH
23475: EMPTY
23476: PPUSH
23477: CALL_OW 1
23481: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 302
23491: NOT
23492: IFFALSE 23505
// begin HackUnlinkAll ( i ) ;
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL 23611 0 1
// continue ;
23503: GO 23385
// end ; HackCheckCapturedStatus ( i ) ;
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL 24054 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23514: LD_ADDR_VAR 0 2
23518: PUSH
23519: LD_INT 81
23521: PUSH
23522: LD_VAR 0 1
23526: PPUSH
23527: CALL_OW 255
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 33
23538: PUSH
23539: LD_INT 3
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 91
23548: PUSH
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 92
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 50
23566: PUSH
23567: EMPTY
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 69
23580: ST_TO_ADDR
// if not tmp then
23581: LD_VAR 0 2
23585: NOT
23586: IFFALSE 23590
// continue ;
23588: GO 23385
// HackLink ( i , tmp ) ;
23590: LD_VAR 0 1
23594: PPUSH
23595: LD_VAR 0 2
23599: PPUSH
23600: CALL 23747 0 2
// end ;
23604: GO 23385
23606: POP
23607: POP
// end ;
23608: PPOPN 2
23610: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
// if not hack in hackTanks then
23616: LD_VAR 0 1
23620: PUSH
23621: LD_EXP 89
23625: IN
23626: NOT
23627: IFFALSE 23631
// exit ;
23629: GO 23742
// index := GetElementIndex ( hackTanks , hack ) ;
23631: LD_ADDR_VAR 0 4
23635: PUSH
23636: LD_EXP 89
23640: PPUSH
23641: LD_VAR 0 1
23645: PPUSH
23646: CALL 31529 0 2
23650: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23651: LD_EXP 90
23655: PUSH
23656: LD_VAR 0 4
23660: ARRAY
23661: IFFALSE 23742
// begin for i in hackTanksCaptured [ index ] do
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_EXP 90
23672: PUSH
23673: LD_VAR 0 4
23677: ARRAY
23678: PUSH
23679: FOR_IN
23680: IFFALSE 23706
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23682: LD_VAR 0 3
23686: PUSH
23687: LD_INT 1
23689: ARRAY
23690: PPUSH
23691: LD_VAR 0 3
23695: PUSH
23696: LD_INT 2
23698: ARRAY
23699: PPUSH
23700: CALL_OW 235
23704: GO 23679
23706: POP
23707: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23708: LD_ADDR_EXP 90
23712: PUSH
23713: LD_EXP 90
23717: PPUSH
23718: LD_VAR 0 4
23722: PPUSH
23723: EMPTY
23724: PPUSH
23725: CALL_OW 1
23729: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23730: LD_VAR 0 1
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 505
// end ; end ;
23742: LD_VAR 0 2
23746: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23747: LD_INT 0
23749: PPUSH
23750: PPUSH
23751: PPUSH
// if not hack in hackTanks or not vehicles then
23752: LD_VAR 0 1
23756: PUSH
23757: LD_EXP 89
23761: IN
23762: NOT
23763: PUSH
23764: LD_VAR 0 2
23768: NOT
23769: OR
23770: IFFALSE 23774
// exit ;
23772: GO 24049
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 2
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: LD_INT 1
23794: PPUSH
23795: CALL 32179 0 4
23799: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23800: LD_ADDR_VAR 0 5
23804: PUSH
23805: LD_EXP 89
23809: PPUSH
23810: LD_VAR 0 1
23814: PPUSH
23815: CALL 31529 0 2
23819: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23820: LD_EXP 90
23824: PUSH
23825: LD_VAR 0 5
23829: ARRAY
23830: PUSH
23831: LD_EXP 91
23835: LESS
23836: IFFALSE 24025
// begin for i := 1 to vehicles do
23838: LD_ADDR_VAR 0 4
23842: PUSH
23843: DOUBLE
23844: LD_INT 1
23846: DEC
23847: ST_TO_ADDR
23848: LD_VAR 0 2
23852: PUSH
23853: FOR_TO
23854: IFFALSE 24023
// begin if hackTanksCaptured [ index ] = hackLimit then
23856: LD_EXP 90
23860: PUSH
23861: LD_VAR 0 5
23865: ARRAY
23866: PUSH
23867: LD_EXP 91
23871: EQUAL
23872: IFFALSE 23876
// break ;
23874: GO 24023
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23876: LD_ADDR_EXP 93
23880: PUSH
23881: LD_EXP 93
23885: PPUSH
23886: LD_VAR 0 5
23890: PPUSH
23891: LD_EXP 93
23895: PUSH
23896: LD_VAR 0 5
23900: ARRAY
23901: PUSH
23902: LD_INT 1
23904: PLUS
23905: PPUSH
23906: CALL_OW 1
23910: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23911: LD_ADDR_EXP 90
23915: PUSH
23916: LD_EXP 90
23920: PPUSH
23921: LD_VAR 0 5
23925: PUSH
23926: LD_EXP 90
23930: PUSH
23931: LD_VAR 0 5
23935: ARRAY
23936: PUSH
23937: LD_INT 1
23939: PLUS
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PPUSH
23945: LD_VAR 0 2
23949: PUSH
23950: LD_VAR 0 4
23954: ARRAY
23955: PUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_VAR 0 4
23965: ARRAY
23966: PPUSH
23967: CALL_OW 255
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PPUSH
23976: CALL 31744 0 3
23980: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23981: LD_VAR 0 2
23985: PUSH
23986: LD_VAR 0 4
23990: ARRAY
23991: PPUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 255
24001: PPUSH
24002: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24006: LD_VAR 0 2
24010: PUSH
24011: LD_VAR 0 4
24015: ARRAY
24016: PPUSH
24017: CALL_OW 141
// end ;
24021: GO 23853
24023: POP
24024: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24025: LD_VAR 0 1
24029: PPUSH
24030: LD_EXP 90
24034: PUSH
24035: LD_VAR 0 5
24039: ARRAY
24040: PUSH
24041: LD_INT 0
24043: PLUS
24044: PPUSH
24045: CALL_OW 505
// end ;
24049: LD_VAR 0 3
24053: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24054: LD_INT 0
24056: PPUSH
24057: PPUSH
24058: PPUSH
24059: PPUSH
// if not hack in hackTanks then
24060: LD_VAR 0 1
24064: PUSH
24065: LD_EXP 89
24069: IN
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24315
// index := GetElementIndex ( hackTanks , hack ) ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_EXP 89
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL 31529 0 2
24094: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: DOUBLE
24101: LD_EXP 90
24105: PUSH
24106: LD_VAR 0 4
24110: ARRAY
24111: INC
24112: ST_TO_ADDR
24113: LD_INT 1
24115: PUSH
24116: FOR_DOWNTO
24117: IFFALSE 24289
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24119: LD_ADDR_VAR 0 5
24123: PUSH
24124: LD_EXP 90
24128: PUSH
24129: LD_VAR 0 4
24133: ARRAY
24134: PUSH
24135: LD_VAR 0 3
24139: ARRAY
24140: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24141: LD_VAR 0 5
24145: PUSH
24146: LD_INT 1
24148: ARRAY
24149: PPUSH
24150: CALL_OW 302
24154: NOT
24155: PUSH
24156: LD_VAR 0 5
24160: PUSH
24161: LD_INT 1
24163: ARRAY
24164: PPUSH
24165: CALL_OW 255
24169: PUSH
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 255
24179: NONEQUAL
24180: OR
24181: IFFALSE 24287
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24183: LD_VAR 0 5
24187: PUSH
24188: LD_INT 1
24190: ARRAY
24191: PPUSH
24192: CALL_OW 305
24196: PUSH
24197: LD_VAR 0 5
24201: PUSH
24202: LD_INT 1
24204: ARRAY
24205: PPUSH
24206: CALL_OW 255
24210: PUSH
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 255
24220: EQUAL
24221: AND
24222: IFFALSE 24246
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24224: LD_VAR 0 5
24228: PUSH
24229: LD_INT 1
24231: ARRAY
24232: PPUSH
24233: LD_VAR 0 5
24237: PUSH
24238: LD_INT 2
24240: ARRAY
24241: PPUSH
24242: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24246: LD_ADDR_EXP 90
24250: PUSH
24251: LD_EXP 90
24255: PPUSH
24256: LD_VAR 0 4
24260: PPUSH
24261: LD_EXP 90
24265: PUSH
24266: LD_VAR 0 4
24270: ARRAY
24271: PPUSH
24272: LD_VAR 0 3
24276: PPUSH
24277: CALL_OW 3
24281: PPUSH
24282: CALL_OW 1
24286: ST_TO_ADDR
// end ; end ;
24287: GO 24116
24289: POP
24290: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_EXP 90
24300: PUSH
24301: LD_VAR 0 4
24305: ARRAY
24306: PUSH
24307: LD_INT 0
24309: PLUS
24310: PPUSH
24311: CALL_OW 505
// end ;
24315: LD_VAR 0 2
24319: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
// if not hack in hackTanks then
24326: LD_VAR 0 1
24330: PUSH
24331: LD_EXP 89
24335: IN
24336: NOT
24337: IFFALSE 24341
// exit ;
24339: GO 24426
// index := GetElementIndex ( hackTanks , hack ) ;
24341: LD_ADDR_VAR 0 5
24345: PUSH
24346: LD_EXP 89
24350: PPUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL 31529 0 2
24360: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24361: LD_ADDR_VAR 0 4
24365: PUSH
24366: DOUBLE
24367: LD_INT 1
24369: DEC
24370: ST_TO_ADDR
24371: LD_EXP 90
24375: PUSH
24376: LD_VAR 0 5
24380: ARRAY
24381: PUSH
24382: FOR_TO
24383: IFFALSE 24424
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24385: LD_EXP 90
24389: PUSH
24390: LD_VAR 0 5
24394: ARRAY
24395: PUSH
24396: LD_VAR 0 4
24400: ARRAY
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: PUSH
24406: LD_VAR 0 2
24410: EQUAL
24411: IFFALSE 24422
// KillUnit ( vehicle ) ;
24413: LD_VAR 0 2
24417: PPUSH
24418: CALL_OW 66
24422: GO 24382
24424: POP
24425: POP
// end ;
24426: LD_VAR 0 3
24430: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24431: LD_EXP 94
24435: NOT
24436: IFFALSE 24471
24438: GO 24440
24440: DISABLE
// begin initMiner := true ;
24441: LD_ADDR_EXP 94
24445: PUSH
24446: LD_INT 1
24448: ST_TO_ADDR
// minersList := [ ] ;
24449: LD_ADDR_EXP 95
24453: PUSH
24454: EMPTY
24455: ST_TO_ADDR
// minerMinesList := [ ] ;
24456: LD_ADDR_EXP 96
24460: PUSH
24461: EMPTY
24462: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24463: LD_ADDR_EXP 97
24467: PUSH
24468: LD_INT 5
24470: ST_TO_ADDR
// end ;
24471: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24472: LD_EXP 94
24476: PUSH
24477: LD_INT 34
24479: PUSH
24480: LD_EXP 105
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PPUSH
24489: CALL_OW 69
24493: AND
24494: IFFALSE 24957
24496: GO 24498
24498: DISABLE
24499: LD_INT 0
24501: PPUSH
24502: PPUSH
24503: PPUSH
24504: PPUSH
// begin enable ;
24505: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24506: LD_ADDR_VAR 0 1
24510: PUSH
24511: LD_INT 34
24513: PUSH
24514: LD_EXP 105
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 69
24527: PUSH
24528: FOR_IN
24529: IFFALSE 24601
// begin if not i in minersList then
24531: LD_VAR 0 1
24535: PUSH
24536: LD_EXP 95
24540: IN
24541: NOT
24542: IFFALSE 24599
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24544: LD_ADDR_EXP 95
24548: PUSH
24549: LD_EXP 95
24553: PPUSH
24554: LD_EXP 95
24558: PUSH
24559: LD_INT 1
24561: PLUS
24562: PPUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 1
24572: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24573: LD_ADDR_EXP 96
24577: PUSH
24578: LD_EXP 96
24582: PPUSH
24583: LD_EXP 96
24587: PUSH
24588: LD_INT 1
24590: PLUS
24591: PPUSH
24592: EMPTY
24593: PPUSH
24594: CALL_OW 1
24598: ST_TO_ADDR
// end end ;
24599: GO 24528
24601: POP
24602: POP
// for i := minerMinesList downto 1 do
24603: LD_ADDR_VAR 0 1
24607: PUSH
24608: DOUBLE
24609: LD_EXP 96
24613: INC
24614: ST_TO_ADDR
24615: LD_INT 1
24617: PUSH
24618: FOR_DOWNTO
24619: IFFALSE 24955
// begin if IsLive ( minersList [ i ] ) then
24621: LD_EXP 95
24625: PUSH
24626: LD_VAR 0 1
24630: ARRAY
24631: PPUSH
24632: CALL_OW 300
24636: IFFALSE 24664
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24638: LD_EXP 95
24642: PUSH
24643: LD_VAR 0 1
24647: ARRAY
24648: PPUSH
24649: LD_EXP 96
24653: PUSH
24654: LD_VAR 0 1
24658: ARRAY
24659: PPUSH
24660: CALL_OW 505
// if not minerMinesList [ i ] then
24664: LD_EXP 96
24668: PUSH
24669: LD_VAR 0 1
24673: ARRAY
24674: NOT
24675: IFFALSE 24679
// continue ;
24677: GO 24618
// for j := minerMinesList [ i ] downto 1 do
24679: LD_ADDR_VAR 0 2
24683: PUSH
24684: DOUBLE
24685: LD_EXP 96
24689: PUSH
24690: LD_VAR 0 1
24694: ARRAY
24695: INC
24696: ST_TO_ADDR
24697: LD_INT 1
24699: PUSH
24700: FOR_DOWNTO
24701: IFFALSE 24951
// begin side := GetSide ( minersList [ i ] ) ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_EXP 95
24712: PUSH
24713: LD_VAR 0 1
24717: ARRAY
24718: PPUSH
24719: CALL_OW 255
24723: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24724: LD_ADDR_VAR 0 4
24728: PUSH
24729: LD_EXP 96
24733: PUSH
24734: LD_VAR 0 1
24738: ARRAY
24739: PUSH
24740: LD_VAR 0 2
24744: ARRAY
24745: PUSH
24746: LD_INT 1
24748: ARRAY
24749: PPUSH
24750: LD_EXP 96
24754: PUSH
24755: LD_VAR 0 1
24759: ARRAY
24760: PUSH
24761: LD_VAR 0 2
24765: ARRAY
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: PPUSH
24771: CALL_OW 428
24775: ST_TO_ADDR
// if not tmp then
24776: LD_VAR 0 4
24780: NOT
24781: IFFALSE 24785
// continue ;
24783: GO 24700
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24785: LD_VAR 0 4
24789: PUSH
24790: LD_INT 81
24792: PUSH
24793: LD_VAR 0 3
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PPUSH
24802: CALL_OW 69
24806: IN
24807: PUSH
24808: LD_EXP 96
24812: PUSH
24813: LD_VAR 0 1
24817: ARRAY
24818: PUSH
24819: LD_VAR 0 2
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: LD_EXP 96
24833: PUSH
24834: LD_VAR 0 1
24838: ARRAY
24839: PUSH
24840: LD_VAR 0 2
24844: ARRAY
24845: PUSH
24846: LD_INT 2
24848: ARRAY
24849: PPUSH
24850: CALL_OW 458
24854: AND
24855: IFFALSE 24949
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24857: LD_EXP 96
24861: PUSH
24862: LD_VAR 0 1
24866: ARRAY
24867: PUSH
24868: LD_VAR 0 2
24872: ARRAY
24873: PUSH
24874: LD_INT 1
24876: ARRAY
24877: PPUSH
24878: LD_EXP 96
24882: PUSH
24883: LD_VAR 0 1
24887: ARRAY
24888: PUSH
24889: LD_VAR 0 2
24893: ARRAY
24894: PUSH
24895: LD_INT 2
24897: ARRAY
24898: PPUSH
24899: LD_VAR 0 3
24903: PPUSH
24904: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24908: LD_ADDR_EXP 96
24912: PUSH
24913: LD_EXP 96
24917: PPUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: LD_EXP 96
24927: PUSH
24928: LD_VAR 0 1
24932: ARRAY
24933: PPUSH
24934: LD_VAR 0 2
24938: PPUSH
24939: CALL_OW 3
24943: PPUSH
24944: CALL_OW 1
24948: ST_TO_ADDR
// end ; end ;
24949: GO 24700
24951: POP
24952: POP
// end ;
24953: GO 24618
24955: POP
24956: POP
// end ;
24957: PPOPN 4
24959: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
// result := false ;
24964: LD_ADDR_VAR 0 4
24968: PUSH
24969: LD_INT 0
24971: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 264
24981: PUSH
24982: LD_EXP 105
24986: EQUAL
24987: NOT
24988: IFFALSE 24992
// exit ;
24990: GO 25232
// index := GetElementIndex ( minersList , unit ) ;
24992: LD_ADDR_VAR 0 5
24996: PUSH
24997: LD_EXP 95
25001: PPUSH
25002: LD_VAR 0 1
25006: PPUSH
25007: CALL 31529 0 2
25011: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25012: LD_EXP 96
25016: PUSH
25017: LD_VAR 0 5
25021: ARRAY
25022: PUSH
25023: LD_EXP 97
25027: GREATEREQUAL
25028: IFFALSE 25032
// exit ;
25030: GO 25232
// ComMoveXY ( unit , x , y ) ;
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 2
25041: PPUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25051: LD_INT 35
25053: PPUSH
25054: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25058: LD_VAR 0 1
25062: PPUSH
25063: LD_VAR 0 2
25067: PPUSH
25068: LD_VAR 0 3
25072: PPUSH
25073: CALL 62815 0 3
25077: NOT
25078: PUSH
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 314
25088: AND
25089: IFFALSE 25093
// exit ;
25091: GO 25232
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25093: LD_VAR 0 2
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: CALL_OW 428
25107: PUSH
25108: LD_VAR 0 1
25112: EQUAL
25113: PUSH
25114: LD_VAR 0 1
25118: PPUSH
25119: CALL_OW 314
25123: NOT
25124: AND
25125: IFFALSE 25051
// PlaySoundXY ( x , y , PlantMine ) ;
25127: LD_VAR 0 2
25131: PPUSH
25132: LD_VAR 0 3
25136: PPUSH
25137: LD_STRING PlantMine
25139: PPUSH
25140: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL_OW 255
25163: PPUSH
25164: LD_INT 0
25166: PPUSH
25167: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25171: LD_ADDR_EXP 96
25175: PUSH
25176: LD_EXP 96
25180: PPUSH
25181: LD_VAR 0 5
25185: PUSH
25186: LD_EXP 96
25190: PUSH
25191: LD_VAR 0 5
25195: ARRAY
25196: PUSH
25197: LD_INT 1
25199: PLUS
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PPUSH
25205: LD_VAR 0 2
25209: PUSH
25210: LD_VAR 0 3
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PPUSH
25219: CALL 31744 0 3
25223: ST_TO_ADDR
// result := true ;
25224: LD_ADDR_VAR 0 4
25228: PUSH
25229: LD_INT 1
25231: ST_TO_ADDR
// end ;
25232: LD_VAR 0 4
25236: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25237: LD_INT 0
25239: PPUSH
25240: PPUSH
25241: PPUSH
// if not unit in minersList then
25242: LD_VAR 0 1
25246: PUSH
25247: LD_EXP 95
25251: IN
25252: NOT
25253: IFFALSE 25257
// exit ;
25255: GO 25649
// index := GetElementIndex ( minersList , unit ) ;
25257: LD_ADDR_VAR 0 6
25261: PUSH
25262: LD_EXP 95
25266: PPUSH
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL 31529 0 2
25276: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25277: LD_ADDR_VAR 0 5
25281: PUSH
25282: DOUBLE
25283: LD_EXP 96
25287: PUSH
25288: LD_VAR 0 6
25292: ARRAY
25293: INC
25294: ST_TO_ADDR
25295: LD_INT 1
25297: PUSH
25298: FOR_DOWNTO
25299: IFFALSE 25460
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25301: LD_EXP 96
25305: PUSH
25306: LD_VAR 0 6
25310: ARRAY
25311: PUSH
25312: LD_VAR 0 5
25316: ARRAY
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PUSH
25322: LD_VAR 0 2
25326: EQUAL
25327: PUSH
25328: LD_EXP 96
25332: PUSH
25333: LD_VAR 0 6
25337: ARRAY
25338: PUSH
25339: LD_VAR 0 5
25343: ARRAY
25344: PUSH
25345: LD_INT 2
25347: ARRAY
25348: PUSH
25349: LD_VAR 0 3
25353: EQUAL
25354: AND
25355: IFFALSE 25458
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25357: LD_EXP 96
25361: PUSH
25362: LD_VAR 0 6
25366: ARRAY
25367: PUSH
25368: LD_VAR 0 5
25372: ARRAY
25373: PUSH
25374: LD_INT 1
25376: ARRAY
25377: PPUSH
25378: LD_EXP 96
25382: PUSH
25383: LD_VAR 0 6
25387: ARRAY
25388: PUSH
25389: LD_VAR 0 5
25393: ARRAY
25394: PUSH
25395: LD_INT 2
25397: ARRAY
25398: PPUSH
25399: LD_VAR 0 1
25403: PPUSH
25404: CALL_OW 255
25408: PPUSH
25409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25413: LD_ADDR_EXP 96
25417: PUSH
25418: LD_EXP 96
25422: PPUSH
25423: LD_VAR 0 6
25427: PPUSH
25428: LD_EXP 96
25432: PUSH
25433: LD_VAR 0 6
25437: ARRAY
25438: PPUSH
25439: LD_VAR 0 5
25443: PPUSH
25444: CALL_OW 3
25448: PPUSH
25449: CALL_OW 1
25453: ST_TO_ADDR
// exit ;
25454: POP
25455: POP
25456: GO 25649
// end ; end ;
25458: GO 25298
25460: POP
25461: POP
// for i := minerMinesList [ index ] downto 1 do
25462: LD_ADDR_VAR 0 5
25466: PUSH
25467: DOUBLE
25468: LD_EXP 96
25472: PUSH
25473: LD_VAR 0 6
25477: ARRAY
25478: INC
25479: ST_TO_ADDR
25480: LD_INT 1
25482: PUSH
25483: FOR_DOWNTO
25484: IFFALSE 25647
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25486: LD_EXP 96
25490: PUSH
25491: LD_VAR 0 6
25495: ARRAY
25496: PUSH
25497: LD_VAR 0 5
25501: ARRAY
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: PPUSH
25507: LD_EXP 96
25511: PUSH
25512: LD_VAR 0 6
25516: ARRAY
25517: PUSH
25518: LD_VAR 0 5
25522: ARRAY
25523: PUSH
25524: LD_INT 2
25526: ARRAY
25527: PPUSH
25528: LD_VAR 0 2
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: CALL_OW 298
25542: PUSH
25543: LD_INT 6
25545: LESS
25546: IFFALSE 25645
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25548: LD_EXP 96
25552: PUSH
25553: LD_VAR 0 6
25557: ARRAY
25558: PUSH
25559: LD_VAR 0 5
25563: ARRAY
25564: PUSH
25565: LD_INT 1
25567: ARRAY
25568: PPUSH
25569: LD_EXP 96
25573: PUSH
25574: LD_VAR 0 6
25578: ARRAY
25579: PUSH
25580: LD_VAR 0 5
25584: ARRAY
25585: PUSH
25586: LD_INT 2
25588: ARRAY
25589: PPUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 255
25599: PPUSH
25600: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25604: LD_ADDR_EXP 96
25608: PUSH
25609: LD_EXP 96
25613: PPUSH
25614: LD_VAR 0 6
25618: PPUSH
25619: LD_EXP 96
25623: PUSH
25624: LD_VAR 0 6
25628: ARRAY
25629: PPUSH
25630: LD_VAR 0 5
25634: PPUSH
25635: CALL_OW 3
25639: PPUSH
25640: CALL_OW 1
25644: ST_TO_ADDR
// end ; end ;
25645: GO 25483
25647: POP
25648: POP
// end ;
25649: LD_VAR 0 4
25653: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25654: LD_INT 0
25656: PPUSH
25657: PPUSH
25658: PPUSH
25659: PPUSH
25660: PPUSH
25661: PPUSH
25662: PPUSH
25663: PPUSH
25664: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 264
25674: PUSH
25675: LD_EXP 105
25679: EQUAL
25680: NOT
25681: PUSH
25682: LD_VAR 0 1
25686: PUSH
25687: LD_EXP 95
25691: IN
25692: NOT
25693: OR
25694: IFFALSE 25698
// exit ;
25696: GO 26020
// index := GetElementIndex ( minersList , unit ) ;
25698: LD_ADDR_VAR 0 6
25702: PUSH
25703: LD_EXP 95
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL 31529 0 2
25717: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25718: LD_ADDR_VAR 0 8
25722: PUSH
25723: LD_EXP 97
25727: PUSH
25728: LD_EXP 96
25732: PUSH
25733: LD_VAR 0 6
25737: ARRAY
25738: MINUS
25739: ST_TO_ADDR
// if not minesFreeAmount then
25740: LD_VAR 0 8
25744: NOT
25745: IFFALSE 25749
// exit ;
25747: GO 26020
// tmp := [ ] ;
25749: LD_ADDR_VAR 0 7
25753: PUSH
25754: EMPTY
25755: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25756: LD_ADDR_VAR 0 5
25760: PUSH
25761: DOUBLE
25762: LD_INT 1
25764: DEC
25765: ST_TO_ADDR
25766: LD_VAR 0 8
25770: PUSH
25771: FOR_TO
25772: IFFALSE 25967
// begin _d := rand ( 0 , 5 ) ;
25774: LD_ADDR_VAR 0 11
25778: PUSH
25779: LD_INT 0
25781: PPUSH
25782: LD_INT 5
25784: PPUSH
25785: CALL_OW 12
25789: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25790: LD_ADDR_VAR 0 12
25794: PUSH
25795: LD_INT 2
25797: PPUSH
25798: LD_INT 6
25800: PPUSH
25801: CALL_OW 12
25805: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25806: LD_ADDR_VAR 0 9
25810: PUSH
25811: LD_VAR 0 2
25815: PPUSH
25816: LD_VAR 0 11
25820: PPUSH
25821: LD_VAR 0 12
25825: PPUSH
25826: CALL_OW 272
25830: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25831: LD_ADDR_VAR 0 10
25835: PUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_VAR 0 11
25845: PPUSH
25846: LD_VAR 0 12
25850: PPUSH
25851: CALL_OW 273
25855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25856: LD_VAR 0 9
25860: PPUSH
25861: LD_VAR 0 10
25865: PPUSH
25866: CALL_OW 488
25870: PUSH
25871: LD_VAR 0 9
25875: PUSH
25876: LD_VAR 0 10
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_VAR 0 7
25889: IN
25890: NOT
25891: AND
25892: PUSH
25893: LD_VAR 0 9
25897: PPUSH
25898: LD_VAR 0 10
25902: PPUSH
25903: CALL_OW 458
25907: NOT
25908: AND
25909: IFFALSE 25951
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25911: LD_ADDR_VAR 0 7
25915: PUSH
25916: LD_VAR 0 7
25920: PPUSH
25921: LD_VAR 0 7
25925: PUSH
25926: LD_INT 1
25928: PLUS
25929: PPUSH
25930: LD_VAR 0 9
25934: PUSH
25935: LD_VAR 0 10
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 1
25948: ST_TO_ADDR
25949: GO 25965
// i := i - 1 ;
25951: LD_ADDR_VAR 0 5
25955: PUSH
25956: LD_VAR 0 5
25960: PUSH
25961: LD_INT 1
25963: MINUS
25964: ST_TO_ADDR
// end ;
25965: GO 25771
25967: POP
25968: POP
// for i in tmp do
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_VAR 0 7
25978: PUSH
25979: FOR_IN
25980: IFFALSE 26018
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 5
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: PPUSH
25996: LD_VAR 0 5
26000: PUSH
26001: LD_INT 2
26003: ARRAY
26004: PPUSH
26005: CALL 24960 0 3
26009: NOT
26010: IFFALSE 26016
// exit ;
26012: POP
26013: POP
26014: GO 26020
26016: GO 25979
26018: POP
26019: POP
// end ;
26020: LD_VAR 0 4
26024: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
26030: PPUSH
26031: PPUSH
26032: PPUSH
26033: PPUSH
// if not GetClass ( unit ) = class_sniper then
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 257
26043: PUSH
26044: LD_INT 5
26046: EQUAL
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26440
// dist := 8 ;
26052: LD_ADDR_VAR 0 5
26056: PUSH
26057: LD_INT 8
26059: ST_TO_ADDR
// viewRange := 12 ;
26060: LD_ADDR_VAR 0 7
26064: PUSH
26065: LD_INT 12
26067: ST_TO_ADDR
// side := GetSide ( unit ) ;
26068: LD_ADDR_VAR 0 6
26072: PUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 255
26082: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26083: LD_INT 61
26085: PPUSH
26086: LD_VAR 0 6
26090: PPUSH
26091: CALL_OW 321
26095: PUSH
26096: LD_INT 2
26098: EQUAL
26099: IFFALSE 26109
// viewRange := 16 ;
26101: LD_ADDR_VAR 0 7
26105: PUSH
26106: LD_INT 16
26108: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26109: LD_VAR 0 1
26113: PPUSH
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 3
26123: PPUSH
26124: CALL_OW 297
26128: PUSH
26129: LD_VAR 0 5
26133: GREATER
26134: IFFALSE 26213
// begin ComMoveXY ( unit , x , y ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_VAR 0 2
26145: PPUSH
26146: LD_VAR 0 3
26150: PPUSH
26151: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26155: LD_INT 35
26157: PPUSH
26158: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26162: LD_VAR 0 1
26166: PPUSH
26167: LD_VAR 0 2
26171: PPUSH
26172: LD_VAR 0 3
26176: PPUSH
26177: CALL 62815 0 3
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26440
// until GetDistUnitXY ( unit , x , y ) < dist ;
26186: LD_VAR 0 1
26190: PPUSH
26191: LD_VAR 0 2
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: CALL_OW 297
26205: PUSH
26206: LD_VAR 0 5
26210: LESS
26211: IFFALSE 26155
// end ; ComTurnXY ( unit , x , y ) ;
26213: LD_VAR 0 1
26217: PPUSH
26218: LD_VAR 0 2
26222: PPUSH
26223: LD_VAR 0 3
26227: PPUSH
26228: CALL_OW 118
// wait ( 5 ) ;
26232: LD_INT 5
26234: PPUSH
26235: CALL_OW 67
// _d := GetDir ( unit ) ;
26239: LD_ADDR_VAR 0 10
26243: PUSH
26244: LD_VAR 0 1
26248: PPUSH
26249: CALL_OW 254
26253: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26254: LD_ADDR_VAR 0 8
26258: PUSH
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL_OW 250
26268: PPUSH
26269: LD_VAR 0 10
26273: PPUSH
26274: LD_VAR 0 5
26278: PPUSH
26279: CALL_OW 272
26283: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26284: LD_ADDR_VAR 0 9
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: PPUSH
26299: LD_VAR 0 10
26303: PPUSH
26304: LD_VAR 0 5
26308: PPUSH
26309: CALL_OW 273
26313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26314: LD_VAR 0 8
26318: PPUSH
26319: LD_VAR 0 9
26323: PPUSH
26324: CALL_OW 488
26328: NOT
26329: IFFALSE 26333
// exit ;
26331: GO 26440
// ComAnimCustom ( unit , 1 ) ;
26333: LD_VAR 0 1
26337: PPUSH
26338: LD_INT 1
26340: PPUSH
26341: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26345: LD_VAR 0 8
26349: PPUSH
26350: LD_VAR 0 9
26354: PPUSH
26355: LD_VAR 0 6
26359: PPUSH
26360: LD_VAR 0 7
26364: PPUSH
26365: CALL_OW 330
// repeat wait ( 1 ) ;
26369: LD_INT 1
26371: PPUSH
26372: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 316
26385: PUSH
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL_OW 314
26395: OR
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 302
26406: NOT
26407: OR
26408: PUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 301
26418: OR
26419: IFFALSE 26369
// RemoveSeeing ( _x , _y , side ) ;
26421: LD_VAR 0 8
26425: PPUSH
26426: LD_VAR 0 9
26430: PPUSH
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 331
// end ; end_of_file
26440: LD_VAR 0 4
26444: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
26445: LD_INT 0
26447: PPUSH
// ar_miner := 81 ;
26448: LD_ADDR_EXP 105
26452: PUSH
26453: LD_INT 81
26455: ST_TO_ADDR
// ar_crane := 88 ;
26456: LD_ADDR_EXP 104
26460: PUSH
26461: LD_INT 88
26463: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26464: LD_ADDR_EXP 99
26468: PUSH
26469: LD_INT 89
26471: ST_TO_ADDR
// us_hack := 99 ;
26472: LD_ADDR_EXP 100
26476: PUSH
26477: LD_INT 99
26479: ST_TO_ADDR
// us_artillery := 97 ;
26480: LD_ADDR_EXP 101
26484: PUSH
26485: LD_INT 97
26487: ST_TO_ADDR
// ar_bio_bomb := 91 ;
26488: LD_ADDR_EXP 102
26492: PUSH
26493: LD_INT 91
26495: ST_TO_ADDR
// ar_mortar := 92 ;
26496: LD_ADDR_EXP 103
26500: PUSH
26501: LD_INT 92
26503: ST_TO_ADDR
// ru_flamethrower := 93 ;
26504: LD_ADDR_EXP 106
26508: PUSH
26509: LD_INT 93
26511: ST_TO_ADDR
// ru_radar := 98 ;
26512: LD_ADDR_EXP 98
26516: PUSH
26517: LD_INT 98
26519: ST_TO_ADDR
// tech_Artillery := 80 ;
26520: LD_ADDR_EXP 107
26524: PUSH
26525: LD_INT 80
26527: ST_TO_ADDR
// tech_RadMat := 81 ;
26528: LD_ADDR_EXP 108
26532: PUSH
26533: LD_INT 81
26535: ST_TO_ADDR
// tech_BasicTools := 82 ;
26536: LD_ADDR_EXP 109
26540: PUSH
26541: LD_INT 82
26543: ST_TO_ADDR
// tech_Cargo := 83 ;
26544: LD_ADDR_EXP 110
26548: PUSH
26549: LD_INT 83
26551: ST_TO_ADDR
// tech_Track := 84 ;
26552: LD_ADDR_EXP 111
26556: PUSH
26557: LD_INT 84
26559: ST_TO_ADDR
// tech_Crane := 85 ;
26560: LD_ADDR_EXP 112
26564: PUSH
26565: LD_INT 85
26567: ST_TO_ADDR
// tech_Bulldozer := 86 ;
26568: LD_ADDR_EXP 113
26572: PUSH
26573: LD_INT 86
26575: ST_TO_ADDR
// tech_Hovercraft := 87 ;
26576: LD_ADDR_EXP 114
26580: PUSH
26581: LD_INT 87
26583: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
26584: LD_ADDR_EXP 115
26588: PUSH
26589: LD_INT 88
26591: ST_TO_ADDR
// end ;
26592: LD_VAR 0 1
26596: RET
// every 1 do
26597: GO 26599
26599: DISABLE
// InitGlobalVariables ; end_of_file
26600: CALL 26445 0 0
26604: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26605: LD_INT 0
26607: PPUSH
26608: PPUSH
// if exist_mode then
26609: LD_VAR 0 2
26613: IFFALSE 26638
// unit := CreateCharacter ( prefix & ident ) else
26615: LD_ADDR_VAR 0 5
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_VAR 0 1
26629: STR
26630: PPUSH
26631: CALL_OW 34
26635: ST_TO_ADDR
26636: GO 26653
// unit := NewCharacter ( ident ) ;
26638: LD_ADDR_VAR 0 5
26642: PUSH
26643: LD_VAR 0 1
26647: PPUSH
26648: CALL_OW 25
26652: ST_TO_ADDR
// result := unit ;
26653: LD_ADDR_VAR 0 4
26657: PUSH
26658: LD_VAR 0 5
26662: ST_TO_ADDR
// end ;
26663: LD_VAR 0 4
26667: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26668: LD_INT 0
26670: PPUSH
26671: PPUSH
// if not side or not nation then
26672: LD_VAR 0 1
26676: NOT
26677: PUSH
26678: LD_VAR 0 2
26682: NOT
26683: OR
26684: IFFALSE 26688
// exit ;
26686: GO 27456
// case nation of nation_american :
26688: LD_VAR 0 2
26692: PUSH
26693: LD_INT 1
26695: DOUBLE
26696: EQUAL
26697: IFTRUE 26701
26699: GO 26915
26701: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26702: LD_ADDR_VAR 0 4
26706: PUSH
26707: LD_INT 35
26709: PUSH
26710: LD_INT 45
26712: PUSH
26713: LD_INT 46
26715: PUSH
26716: LD_INT 47
26718: PUSH
26719: LD_INT 82
26721: PUSH
26722: LD_INT 83
26724: PUSH
26725: LD_INT 84
26727: PUSH
26728: LD_INT 85
26730: PUSH
26731: LD_INT 86
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 6
26742: PUSH
26743: LD_INT 15
26745: PUSH
26746: LD_INT 16
26748: PUSH
26749: LD_INT 7
26751: PUSH
26752: LD_INT 12
26754: PUSH
26755: LD_INT 13
26757: PUSH
26758: LD_INT 10
26760: PUSH
26761: LD_INT 14
26763: PUSH
26764: LD_INT 20
26766: PUSH
26767: LD_INT 21
26769: PUSH
26770: LD_INT 22
26772: PUSH
26773: LD_INT 25
26775: PUSH
26776: LD_INT 32
26778: PUSH
26779: LD_INT 27
26781: PUSH
26782: LD_INT 36
26784: PUSH
26785: LD_INT 69
26787: PUSH
26788: LD_INT 39
26790: PUSH
26791: LD_INT 34
26793: PUSH
26794: LD_INT 40
26796: PUSH
26797: LD_INT 48
26799: PUSH
26800: LD_INT 49
26802: PUSH
26803: LD_INT 50
26805: PUSH
26806: LD_INT 51
26808: PUSH
26809: LD_INT 52
26811: PUSH
26812: LD_INT 53
26814: PUSH
26815: LD_INT 54
26817: PUSH
26818: LD_INT 55
26820: PUSH
26821: LD_INT 56
26823: PUSH
26824: LD_INT 57
26826: PUSH
26827: LD_INT 58
26829: PUSH
26830: LD_INT 59
26832: PUSH
26833: LD_INT 60
26835: PUSH
26836: LD_INT 61
26838: PUSH
26839: LD_INT 62
26841: PUSH
26842: LD_INT 80
26844: PUSH
26845: LD_INT 82
26847: PUSH
26848: LD_INT 83
26850: PUSH
26851: LD_INT 84
26853: PUSH
26854: LD_INT 85
26856: PUSH
26857: LD_INT 86
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
26913: GO 27380
26915: LD_INT 2
26917: DOUBLE
26918: EQUAL
26919: IFTRUE 26923
26921: GO 27149
26923: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26924: LD_ADDR_VAR 0 4
26928: PUSH
26929: LD_INT 35
26931: PUSH
26932: LD_INT 45
26934: PUSH
26935: LD_INT 46
26937: PUSH
26938: LD_INT 47
26940: PUSH
26941: LD_INT 82
26943: PUSH
26944: LD_INT 83
26946: PUSH
26947: LD_INT 84
26949: PUSH
26950: LD_INT 85
26952: PUSH
26953: LD_INT 87
26955: PUSH
26956: LD_INT 70
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 11
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: LD_INT 4
26970: PUSH
26971: LD_INT 5
26973: PUSH
26974: LD_INT 6
26976: PUSH
26977: LD_INT 15
26979: PUSH
26980: LD_INT 18
26982: PUSH
26983: LD_INT 7
26985: PUSH
26986: LD_INT 17
26988: PUSH
26989: LD_INT 8
26991: PUSH
26992: LD_INT 20
26994: PUSH
26995: LD_INT 21
26997: PUSH
26998: LD_INT 22
27000: PUSH
27001: LD_INT 72
27003: PUSH
27004: LD_INT 26
27006: PUSH
27007: LD_INT 69
27009: PUSH
27010: LD_INT 39
27012: PUSH
27013: LD_INT 40
27015: PUSH
27016: LD_INT 41
27018: PUSH
27019: LD_INT 42
27021: PUSH
27022: LD_INT 43
27024: PUSH
27025: LD_INT 48
27027: PUSH
27028: LD_INT 49
27030: PUSH
27031: LD_INT 50
27033: PUSH
27034: LD_INT 51
27036: PUSH
27037: LD_INT 52
27039: PUSH
27040: LD_INT 53
27042: PUSH
27043: LD_INT 54
27045: PUSH
27046: LD_INT 55
27048: PUSH
27049: LD_INT 56
27051: PUSH
27052: LD_INT 60
27054: PUSH
27055: LD_INT 61
27057: PUSH
27058: LD_INT 62
27060: PUSH
27061: LD_INT 66
27063: PUSH
27064: LD_INT 67
27066: PUSH
27067: LD_INT 68
27069: PUSH
27070: LD_INT 81
27072: PUSH
27073: LD_INT 82
27075: PUSH
27076: LD_INT 83
27078: PUSH
27079: LD_INT 84
27081: PUSH
27082: LD_INT 85
27084: PUSH
27085: LD_INT 87
27087: PUSH
27088: LD_INT 88
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
27147: GO 27380
27149: LD_INT 3
27151: DOUBLE
27152: EQUAL
27153: IFTRUE 27157
27155: GO 27379
27157: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27158: LD_ADDR_VAR 0 4
27162: PUSH
27163: LD_INT 46
27165: PUSH
27166: LD_INT 47
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 82
27177: PUSH
27178: LD_INT 83
27180: PUSH
27181: LD_INT 84
27183: PUSH
27184: LD_INT 85
27186: PUSH
27187: LD_INT 86
27189: PUSH
27190: LD_INT 11
27192: PUSH
27193: LD_INT 9
27195: PUSH
27196: LD_INT 20
27198: PUSH
27199: LD_INT 19
27201: PUSH
27202: LD_INT 21
27204: PUSH
27205: LD_INT 24
27207: PUSH
27208: LD_INT 22
27210: PUSH
27211: LD_INT 25
27213: PUSH
27214: LD_INT 28
27216: PUSH
27217: LD_INT 29
27219: PUSH
27220: LD_INT 30
27222: PUSH
27223: LD_INT 31
27225: PUSH
27226: LD_INT 37
27228: PUSH
27229: LD_INT 38
27231: PUSH
27232: LD_INT 32
27234: PUSH
27235: LD_INT 27
27237: PUSH
27238: LD_INT 33
27240: PUSH
27241: LD_INT 69
27243: PUSH
27244: LD_INT 39
27246: PUSH
27247: LD_INT 34
27249: PUSH
27250: LD_INT 40
27252: PUSH
27253: LD_INT 71
27255: PUSH
27256: LD_INT 23
27258: PUSH
27259: LD_INT 44
27261: PUSH
27262: LD_INT 48
27264: PUSH
27265: LD_INT 49
27267: PUSH
27268: LD_INT 50
27270: PUSH
27271: LD_INT 51
27273: PUSH
27274: LD_INT 52
27276: PUSH
27277: LD_INT 53
27279: PUSH
27280: LD_INT 54
27282: PUSH
27283: LD_INT 55
27285: PUSH
27286: LD_INT 56
27288: PUSH
27289: LD_INT 57
27291: PUSH
27292: LD_INT 58
27294: PUSH
27295: LD_INT 59
27297: PUSH
27298: LD_INT 63
27300: PUSH
27301: LD_INT 64
27303: PUSH
27304: LD_INT 65
27306: PUSH
27307: LD_INT 82
27309: PUSH
27310: LD_INT 83
27312: PUSH
27313: LD_INT 84
27315: PUSH
27316: LD_INT 85
27318: PUSH
27319: LD_INT 86
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: ST_TO_ADDR
27377: GO 27380
27379: POP
// if state > - 1 and state < 3 then
27380: LD_VAR 0 3
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: GREATER
27389: PUSH
27390: LD_VAR 0 3
27394: PUSH
27395: LD_INT 3
27397: LESS
27398: AND
27399: IFFALSE 27456
// for i in result do
27401: LD_ADDR_VAR 0 5
27405: PUSH
27406: LD_VAR 0 4
27410: PUSH
27411: FOR_IN
27412: IFFALSE 27454
// if GetTech ( i , side ) <> state then
27414: LD_VAR 0 5
27418: PPUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 321
27428: PUSH
27429: LD_VAR 0 3
27433: NONEQUAL
27434: IFFALSE 27452
// result := result diff i ;
27436: LD_ADDR_VAR 0 4
27440: PUSH
27441: LD_VAR 0 4
27445: PUSH
27446: LD_VAR 0 5
27450: DIFF
27451: ST_TO_ADDR
27452: GO 27411
27454: POP
27455: POP
// end ;
27456: LD_VAR 0 4
27460: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27461: LD_INT 0
27463: PPUSH
27464: PPUSH
27465: PPUSH
// result := true ;
27466: LD_ADDR_VAR 0 3
27470: PUSH
27471: LD_INT 1
27473: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27474: LD_ADDR_VAR 0 5
27478: PUSH
27479: LD_VAR 0 2
27483: PPUSH
27484: CALL_OW 480
27488: ST_TO_ADDR
// if not tmp then
27489: LD_VAR 0 5
27493: NOT
27494: IFFALSE 27498
// exit ;
27496: GO 27547
// for i in tmp do
27498: LD_ADDR_VAR 0 4
27502: PUSH
27503: LD_VAR 0 5
27507: PUSH
27508: FOR_IN
27509: IFFALSE 27545
// if GetTech ( i , side ) <> state_researched then
27511: LD_VAR 0 4
27515: PPUSH
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL_OW 321
27525: PUSH
27526: LD_INT 2
27528: NONEQUAL
27529: IFFALSE 27543
// begin result := false ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_INT 0
27538: ST_TO_ADDR
// exit ;
27539: POP
27540: POP
27541: GO 27547
// end ;
27543: GO 27508
27545: POP
27546: POP
// end ;
27547: LD_VAR 0 3
27551: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
27566: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27567: LD_VAR 0 1
27571: NOT
27572: PUSH
27573: LD_VAR 0 1
27577: PPUSH
27578: CALL_OW 257
27582: PUSH
27583: LD_INT 9
27585: NONEQUAL
27586: OR
27587: IFFALSE 27591
// exit ;
27589: GO 28164
// side := GetSide ( unit ) ;
27591: LD_ADDR_VAR 0 9
27595: PUSH
27596: LD_VAR 0 1
27600: PPUSH
27601: CALL_OW 255
27605: ST_TO_ADDR
// tech_space := tech_spacanom ;
27606: LD_ADDR_VAR 0 12
27610: PUSH
27611: LD_INT 29
27613: ST_TO_ADDR
// tech_time := tech_taurad ;
27614: LD_ADDR_VAR 0 13
27618: PUSH
27619: LD_INT 28
27621: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27622: LD_ADDR_VAR 0 11
27626: PUSH
27627: LD_VAR 0 1
27631: PPUSH
27632: CALL_OW 310
27636: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27637: LD_VAR 0 11
27641: PPUSH
27642: CALL_OW 247
27646: PUSH
27647: LD_INT 2
27649: EQUAL
27650: IFFALSE 27654
// exit ;
27652: GO 28164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27654: LD_ADDR_VAR 0 8
27658: PUSH
27659: LD_INT 81
27661: PUSH
27662: LD_VAR 0 9
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: LD_INT 21
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PPUSH
27692: CALL_OW 69
27696: ST_TO_ADDR
// if not tmp then
27697: LD_VAR 0 8
27701: NOT
27702: IFFALSE 27706
// exit ;
27704: GO 28164
// if in_unit then
27706: LD_VAR 0 11
27710: IFFALSE 27734
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27712: LD_ADDR_VAR 0 10
27716: PUSH
27717: LD_VAR 0 8
27721: PPUSH
27722: LD_VAR 0 11
27726: PPUSH
27727: CALL_OW 74
27731: ST_TO_ADDR
27732: GO 27754
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27734: LD_ADDR_VAR 0 10
27738: PUSH
27739: LD_VAR 0 8
27743: PPUSH
27744: LD_VAR 0 1
27748: PPUSH
27749: CALL_OW 74
27753: ST_TO_ADDR
// if not enemy then
27754: LD_VAR 0 10
27758: NOT
27759: IFFALSE 27763
// exit ;
27761: GO 28164
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27763: LD_VAR 0 11
27767: PUSH
27768: LD_VAR 0 11
27772: PPUSH
27773: LD_VAR 0 10
27777: PPUSH
27778: CALL_OW 296
27782: PUSH
27783: LD_INT 13
27785: GREATER
27786: AND
27787: PUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: LD_VAR 0 10
27797: PPUSH
27798: CALL_OW 296
27802: PUSH
27803: LD_INT 12
27805: GREATER
27806: OR
27807: IFFALSE 27811
// exit ;
27809: GO 28164
// missile := [ 1 ] ;
27811: LD_ADDR_VAR 0 14
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27822: LD_VAR 0 9
27826: PPUSH
27827: LD_VAR 0 12
27831: PPUSH
27832: CALL_OW 325
27836: IFFALSE 27865
// missile := Replace ( missile , missile + 1 , 2 ) ;
27838: LD_ADDR_VAR 0 14
27842: PUSH
27843: LD_VAR 0 14
27847: PPUSH
27848: LD_VAR 0 14
27852: PUSH
27853: LD_INT 1
27855: PLUS
27856: PPUSH
27857: LD_INT 2
27859: PPUSH
27860: CALL_OW 1
27864: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27865: LD_VAR 0 9
27869: PPUSH
27870: LD_VAR 0 13
27874: PPUSH
27875: CALL_OW 325
27879: PUSH
27880: LD_VAR 0 10
27884: PPUSH
27885: CALL_OW 255
27889: PPUSH
27890: LD_VAR 0 13
27894: PPUSH
27895: CALL_OW 325
27899: NOT
27900: AND
27901: IFFALSE 27930
// missile := Replace ( missile , missile + 1 , 3 ) ;
27903: LD_ADDR_VAR 0 14
27907: PUSH
27908: LD_VAR 0 14
27912: PPUSH
27913: LD_VAR 0 14
27917: PUSH
27918: LD_INT 1
27920: PLUS
27921: PPUSH
27922: LD_INT 3
27924: PPUSH
27925: CALL_OW 1
27929: ST_TO_ADDR
// if missile < 2 then
27930: LD_VAR 0 14
27934: PUSH
27935: LD_INT 2
27937: LESS
27938: IFFALSE 27942
// exit ;
27940: GO 28164
// x := GetX ( enemy ) ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_VAR 0 10
27951: PPUSH
27952: CALL_OW 250
27956: ST_TO_ADDR
// y := GetY ( enemy ) ;
27957: LD_ADDR_VAR 0 5
27961: PUSH
27962: LD_VAR 0 10
27966: PPUSH
27967: CALL_OW 251
27971: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27972: LD_ADDR_VAR 0 6
27976: PUSH
27977: LD_VAR 0 4
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PPUSH
27986: LD_INT 1
27988: PPUSH
27989: CALL_OW 12
27993: PLUS
27994: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27995: LD_ADDR_VAR 0 7
27999: PUSH
28000: LD_VAR 0 5
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PPUSH
28009: LD_INT 1
28011: PPUSH
28012: CALL_OW 12
28016: PLUS
28017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28018: LD_VAR 0 6
28022: PPUSH
28023: LD_VAR 0 7
28027: PPUSH
28028: CALL_OW 488
28032: NOT
28033: IFFALSE 28055
// begin _x := x ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 4
28044: ST_TO_ADDR
// _y := y ;
28045: LD_ADDR_VAR 0 7
28049: PUSH
28050: LD_VAR 0 5
28054: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_INT 1
28062: PPUSH
28063: LD_VAR 0 14
28067: PPUSH
28068: CALL_OW 12
28072: ST_TO_ADDR
// case i of 1 :
28073: LD_VAR 0 3
28077: PUSH
28078: LD_INT 1
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28103
28086: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28087: LD_VAR 0 1
28091: PPUSH
28092: LD_VAR 0 10
28096: PPUSH
28097: CALL_OW 115
28101: GO 28164
28103: LD_INT 2
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28133
28111: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28112: LD_VAR 0 1
28116: PPUSH
28117: LD_VAR 0 6
28121: PPUSH
28122: LD_VAR 0 7
28126: PPUSH
28127: CALL_OW 153
28131: GO 28164
28133: LD_INT 3
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28163
28141: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28142: LD_VAR 0 1
28146: PPUSH
28147: LD_VAR 0 6
28151: PPUSH
28152: LD_VAR 0 7
28156: PPUSH
28157: CALL_OW 154
28161: GO 28164
28163: POP
// end ;
28164: LD_VAR 0 2
28168: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28169: LD_INT 0
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
// if not unit or not building then
28177: LD_VAR 0 1
28181: NOT
28182: PUSH
28183: LD_VAR 0 2
28187: NOT
28188: OR
28189: IFFALSE 28193
// exit ;
28191: GO 28351
// x := GetX ( building ) ;
28193: LD_ADDR_VAR 0 5
28197: PUSH
28198: LD_VAR 0 2
28202: PPUSH
28203: CALL_OW 250
28207: ST_TO_ADDR
// y := GetY ( building ) ;
28208: LD_ADDR_VAR 0 6
28212: PUSH
28213: LD_VAR 0 2
28217: PPUSH
28218: CALL_OW 251
28222: ST_TO_ADDR
// for i = 0 to 5 do
28223: LD_ADDR_VAR 0 4
28227: PUSH
28228: DOUBLE
28229: LD_INT 0
28231: DEC
28232: ST_TO_ADDR
28233: LD_INT 5
28235: PUSH
28236: FOR_TO
28237: IFFALSE 28349
// begin _x := ShiftX ( x , i , 3 ) ;
28239: LD_ADDR_VAR 0 7
28243: PUSH
28244: LD_VAR 0 5
28248: PPUSH
28249: LD_VAR 0 4
28253: PPUSH
28254: LD_INT 3
28256: PPUSH
28257: CALL_OW 272
28261: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28262: LD_ADDR_VAR 0 8
28266: PUSH
28267: LD_VAR 0 6
28271: PPUSH
28272: LD_VAR 0 4
28276: PPUSH
28277: LD_INT 3
28279: PPUSH
28280: CALL_OW 273
28284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28285: LD_VAR 0 7
28289: PPUSH
28290: LD_VAR 0 8
28294: PPUSH
28295: CALL_OW 488
28299: NOT
28300: IFFALSE 28304
// continue ;
28302: GO 28236
// if HexInfo ( _x , _y ) = 0 then
28304: LD_VAR 0 7
28308: PPUSH
28309: LD_VAR 0 8
28313: PPUSH
28314: CALL_OW 428
28318: PUSH
28319: LD_INT 0
28321: EQUAL
28322: IFFALSE 28347
// begin ComMoveXY ( unit , _x , _y ) ;
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_VAR 0 7
28333: PPUSH
28334: LD_VAR 0 8
28338: PPUSH
28339: CALL_OW 111
// exit ;
28343: POP
28344: POP
28345: GO 28351
// end ; end ;
28347: GO 28236
28349: POP
28350: POP
// end ;
28351: LD_VAR 0 3
28355: RET
// export function ScanBase ( side , base_area ) ; begin
28356: LD_INT 0
28358: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_VAR 0 2
28368: PPUSH
28369: LD_INT 81
28371: PUSH
28372: LD_VAR 0 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 70
28385: ST_TO_ADDR
// end ;
28386: LD_VAR 0 3
28390: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
// result := false ;
28397: LD_ADDR_VAR 0 2
28401: PUSH
28402: LD_INT 0
28404: ST_TO_ADDR
// side := GetSide ( unit ) ;
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_VAR 0 1
28414: PPUSH
28415: CALL_OW 255
28419: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28420: LD_ADDR_VAR 0 4
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 248
28434: ST_TO_ADDR
// case nat of 1 :
28435: LD_VAR 0 4
28439: PUSH
28440: LD_INT 1
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28459
28448: POP
// tech := tech_lassight ; 2 :
28449: LD_ADDR_VAR 0 5
28453: PUSH
28454: LD_INT 12
28456: ST_TO_ADDR
28457: GO 28498
28459: LD_INT 2
28461: DOUBLE
28462: EQUAL
28463: IFTRUE 28467
28465: GO 28478
28467: POP
// tech := tech_mortar ; 3 :
28468: LD_ADDR_VAR 0 5
28472: PUSH
28473: LD_INT 41
28475: ST_TO_ADDR
28476: GO 28498
28478: LD_INT 3
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28497
28486: POP
// tech := tech_bazooka ; end ;
28487: LD_ADDR_VAR 0 5
28491: PUSH
28492: LD_INT 44
28494: ST_TO_ADDR
28495: GO 28498
28497: POP
// if Researched ( side , tech ) then
28498: LD_VAR 0 3
28502: PPUSH
28503: LD_VAR 0 5
28507: PPUSH
28508: CALL_OW 325
28512: IFFALSE 28539
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28514: LD_ADDR_VAR 0 2
28518: PUSH
28519: LD_INT 5
28521: PUSH
28522: LD_INT 8
28524: PUSH
28525: LD_INT 9
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: PUSH
28533: LD_VAR 0 4
28537: ARRAY
28538: ST_TO_ADDR
// end ;
28539: LD_VAR 0 2
28543: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
28548: PPUSH
// if not mines then
28549: LD_VAR 0 2
28553: NOT
28554: IFFALSE 28558
// exit ;
28556: GO 28702
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28558: LD_ADDR_VAR 0 5
28562: PUSH
28563: LD_INT 81
28565: PUSH
28566: LD_VAR 0 1
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 69
28600: ST_TO_ADDR
// for i in mines do
28601: LD_ADDR_VAR 0 4
28605: PUSH
28606: LD_VAR 0 2
28610: PUSH
28611: FOR_IN
28612: IFFALSE 28700
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28614: LD_VAR 0 4
28618: PUSH
28619: LD_INT 1
28621: ARRAY
28622: PPUSH
28623: LD_VAR 0 4
28627: PUSH
28628: LD_INT 2
28630: ARRAY
28631: PPUSH
28632: CALL_OW 458
28636: NOT
28637: IFFALSE 28641
// continue ;
28639: GO 28611
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28641: LD_VAR 0 4
28645: PUSH
28646: LD_INT 1
28648: ARRAY
28649: PPUSH
28650: LD_VAR 0 4
28654: PUSH
28655: LD_INT 2
28657: ARRAY
28658: PPUSH
28659: CALL_OW 428
28663: PUSH
28664: LD_VAR 0 5
28668: IN
28669: IFFALSE 28698
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28671: LD_VAR 0 4
28675: PUSH
28676: LD_INT 1
28678: ARRAY
28679: PPUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_INT 2
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL_OW 456
// end ;
28698: GO 28611
28700: POP
28701: POP
// end ;
28702: LD_VAR 0 3
28706: RET
// export function Count ( array ) ; var i ; begin
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
// result := 0 ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_INT 0
28718: ST_TO_ADDR
// for i in array do
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_VAR 0 1
28728: PUSH
28729: FOR_IN
28730: IFFALSE 28754
// if i then
28732: LD_VAR 0 3
28736: IFFALSE 28752
// result := result + 1 ;
28738: LD_ADDR_VAR 0 2
28742: PUSH
28743: LD_VAR 0 2
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: ST_TO_ADDR
28752: GO 28729
28754: POP
28755: POP
// end ;
28756: LD_VAR 0 2
28760: RET
// export function IsEmpty ( building ) ; begin
28761: LD_INT 0
28763: PPUSH
// if not building then
28764: LD_VAR 0 1
28768: NOT
28769: IFFALSE 28773
// exit ;
28771: GO 28816
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28773: LD_ADDR_VAR 0 2
28777: PUSH
28778: LD_VAR 0 1
28782: PUSH
28783: LD_INT 22
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 255
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 58
28802: PUSH
28803: EMPTY
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PPUSH
28810: CALL_OW 69
28814: IN
28815: ST_TO_ADDR
// end ;
28816: LD_VAR 0 2
28820: RET
// export function IsNotFull ( building ) ; var places ; begin
28821: LD_INT 0
28823: PPUSH
28824: PPUSH
// if not building then
28825: LD_VAR 0 1
28829: NOT
28830: IFFALSE 28834
// exit ;
28832: GO 29005
// result := false ;
28834: LD_ADDR_VAR 0 2
28838: PUSH
28839: LD_INT 0
28841: ST_TO_ADDR
// places := 0 ;
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 0
28849: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 0
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28922
28866: LD_INT 1
28868: DOUBLE
28869: EQUAL
28870: IFTRUE 28922
28872: LD_INT 6
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28922
28878: LD_INT 7
28880: DOUBLE
28881: EQUAL
28882: IFTRUE 28922
28884: LD_INT 8
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28922
28890: LD_INT 4
28892: DOUBLE
28893: EQUAL
28894: IFTRUE 28922
28896: LD_INT 5
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28922
28902: LD_INT 2
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28922
28908: LD_INT 3
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28922
28914: LD_INT 35
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28933
28922: POP
// places := 6 ; b_bunker , b_breastwork :
28923: LD_ADDR_VAR 0 3
28927: PUSH
28928: LD_INT 6
28930: ST_TO_ADDR
28931: GO 28978
28933: LD_INT 32
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28947
28939: LD_INT 31
28941: DOUBLE
28942: EQUAL
28943: IFTRUE 28947
28945: GO 28958
28947: POP
// places := 1 ; b_control_tower :
28948: LD_ADDR_VAR 0 3
28952: PUSH
28953: LD_INT 1
28955: ST_TO_ADDR
28956: GO 28978
28958: LD_INT 36
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 28977
28966: POP
// places := 3 ; end ;
28967: LD_ADDR_VAR 0 3
28971: PUSH
28972: LD_INT 3
28974: ST_TO_ADDR
28975: GO 28978
28977: POP
// if places then
28978: LD_VAR 0 3
28982: IFFALSE 29005
// result := UnitsInside ( building ) < places ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_VAR 0 1
28993: PPUSH
28994: CALL_OW 313
28998: PUSH
28999: LD_VAR 0 3
29003: LESS
29004: ST_TO_ADDR
// end ;
29005: LD_VAR 0 2
29009: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
29015: PPUSH
// tmp := [ ] ;
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: EMPTY
29022: ST_TO_ADDR
// list := [ ] ;
29023: LD_ADDR_VAR 0 5
29027: PUSH
29028: EMPTY
29029: ST_TO_ADDR
// for i = 16 to 25 do
29030: LD_ADDR_VAR 0 4
29034: PUSH
29035: DOUBLE
29036: LD_INT 16
29038: DEC
29039: ST_TO_ADDR
29040: LD_INT 25
29042: PUSH
29043: FOR_TO
29044: IFFALSE 29117
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_VAR 0 3
29055: PUSH
29056: LD_INT 22
29058: PUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 255
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 91
29075: PUSH
29076: LD_VAR 0 1
29080: PUSH
29081: LD_INT 6
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 30
29091: PUSH
29092: LD_VAR 0 4
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: PPUSH
29109: CALL_OW 69
29113: ADD
29114: ST_TO_ADDR
29115: GO 29043
29117: POP
29118: POP
// for i = 1 to tmp do
29119: LD_ADDR_VAR 0 4
29123: PUSH
29124: DOUBLE
29125: LD_INT 1
29127: DEC
29128: ST_TO_ADDR
29129: LD_VAR 0 3
29133: PUSH
29134: FOR_TO
29135: IFFALSE 29223
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_VAR 0 3
29151: PUSH
29152: LD_VAR 0 4
29156: ARRAY
29157: PPUSH
29158: CALL_OW 266
29162: PUSH
29163: LD_VAR 0 3
29167: PUSH
29168: LD_VAR 0 4
29172: ARRAY
29173: PPUSH
29174: CALL_OW 250
29178: PUSH
29179: LD_VAR 0 3
29183: PUSH
29184: LD_VAR 0 4
29188: ARRAY
29189: PPUSH
29190: CALL_OW 251
29194: PUSH
29195: LD_VAR 0 3
29199: PUSH
29200: LD_VAR 0 4
29204: ARRAY
29205: PPUSH
29206: CALL_OW 254
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: ADD
29220: ST_TO_ADDR
29221: GO 29134
29223: POP
29224: POP
// result := list ;
29225: LD_ADDR_VAR 0 2
29229: PUSH
29230: LD_VAR 0 5
29234: ST_TO_ADDR
// end ;
29235: LD_VAR 0 2
29239: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29240: LD_INT 0
29242: PPUSH
29243: PPUSH
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
// if not factory then
29249: LD_VAR 0 1
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29851
// if control = control_apeman then
29258: LD_VAR 0 4
29262: PUSH
29263: LD_INT 5
29265: EQUAL
29266: IFFALSE 29375
// begin tmp := UnitsInside ( factory ) ;
29268: LD_ADDR_VAR 0 8
29272: PUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 313
29282: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29283: LD_VAR 0 8
29287: PPUSH
29288: LD_INT 25
29290: PUSH
29291: LD_INT 12
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 72
29302: NOT
29303: IFFALSE 29313
// control := control_manual ;
29305: LD_ADDR_VAR 0 4
29309: PUSH
29310: LD_INT 1
29312: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29313: LD_ADDR_VAR 0 8
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL 29010 0 1
29327: ST_TO_ADDR
// if tmp then
29328: LD_VAR 0 8
29332: IFFALSE 29375
// begin for i in tmp do
29334: LD_ADDR_VAR 0 7
29338: PUSH
29339: LD_VAR 0 8
29343: PUSH
29344: FOR_IN
29345: IFFALSE 29373
// if i [ 1 ] = b_ext_radio then
29347: LD_VAR 0 7
29351: PUSH
29352: LD_INT 1
29354: ARRAY
29355: PUSH
29356: LD_INT 22
29358: EQUAL
29359: IFFALSE 29371
// begin control := control_remote ;
29361: LD_ADDR_VAR 0 4
29365: PUSH
29366: LD_INT 2
29368: ST_TO_ADDR
// break ;
29369: GO 29373
// end ;
29371: GO 29344
29373: POP
29374: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29375: LD_VAR 0 1
29379: PPUSH
29380: LD_VAR 0 2
29384: PPUSH
29385: LD_VAR 0 3
29389: PPUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: LD_VAR 0 5
29399: PPUSH
29400: CALL_OW 448
29404: IFFALSE 29439
// begin result := [ chassis , engine , control , weapon ] ;
29406: LD_ADDR_VAR 0 6
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: LD_VAR 0 3
29420: PUSH
29421: LD_VAR 0 4
29425: PUSH
29426: LD_VAR 0 5
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
// exit ;
29437: GO 29851
// end ; _chassis := AvailableChassisList ( factory ) ;
29439: LD_ADDR_VAR 0 9
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 475
29453: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29454: LD_ADDR_VAR 0 11
29458: PUSH
29459: LD_VAR 0 1
29463: PPUSH
29464: CALL_OW 476
29468: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29469: LD_ADDR_VAR 0 12
29473: PUSH
29474: LD_VAR 0 1
29478: PPUSH
29479: CALL_OW 477
29483: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29484: LD_ADDR_VAR 0 10
29488: PUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 478
29498: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29499: LD_VAR 0 9
29503: NOT
29504: PUSH
29505: LD_VAR 0 11
29509: NOT
29510: OR
29511: PUSH
29512: LD_VAR 0 12
29516: NOT
29517: OR
29518: PUSH
29519: LD_VAR 0 10
29523: NOT
29524: OR
29525: IFFALSE 29560
// begin result := [ chassis , engine , control , weapon ] ;
29527: LD_ADDR_VAR 0 6
29531: PUSH
29532: LD_VAR 0 2
29536: PUSH
29537: LD_VAR 0 3
29541: PUSH
29542: LD_VAR 0 4
29546: PUSH
29547: LD_VAR 0 5
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: ST_TO_ADDR
// exit ;
29558: GO 29851
// end ; if not chassis in _chassis then
29560: LD_VAR 0 2
29564: PUSH
29565: LD_VAR 0 9
29569: IN
29570: NOT
29571: IFFALSE 29597
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29573: LD_ADDR_VAR 0 2
29577: PUSH
29578: LD_VAR 0 9
29582: PUSH
29583: LD_INT 1
29585: PPUSH
29586: LD_VAR 0 9
29590: PPUSH
29591: CALL_OW 12
29595: ARRAY
29596: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29597: LD_VAR 0 2
29601: PPUSH
29602: LD_VAR 0 3
29606: PPUSH
29607: CALL 29856 0 2
29611: NOT
29612: IFFALSE 29671
// repeat engine := _engine [ 1 ] ;
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_VAR 0 11
29623: PUSH
29624: LD_INT 1
29626: ARRAY
29627: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29628: LD_ADDR_VAR 0 11
29632: PUSH
29633: LD_VAR 0 11
29637: PPUSH
29638: LD_INT 1
29640: PPUSH
29641: CALL_OW 3
29645: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29646: LD_VAR 0 2
29650: PPUSH
29651: LD_VAR 0 3
29655: PPUSH
29656: CALL 29856 0 2
29660: PUSH
29661: LD_VAR 0 11
29665: PUSH
29666: EMPTY
29667: EQUAL
29668: OR
29669: IFFALSE 29614
// if not control in _control then
29671: LD_VAR 0 4
29675: PUSH
29676: LD_VAR 0 12
29680: IN
29681: NOT
29682: IFFALSE 29708
// control := _control [ rand ( 1 , _control ) ] ;
29684: LD_ADDR_VAR 0 4
29688: PUSH
29689: LD_VAR 0 12
29693: PUSH
29694: LD_INT 1
29696: PPUSH
29697: LD_VAR 0 12
29701: PPUSH
29702: CALL_OW 12
29706: ARRAY
29707: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_VAR 0 5
29717: PPUSH
29718: CALL 30076 0 2
29722: NOT
29723: IFFALSE 29782
// repeat weapon := _weapon [ 1 ] ;
29725: LD_ADDR_VAR 0 5
29729: PUSH
29730: LD_VAR 0 10
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29739: LD_ADDR_VAR 0 10
29743: PUSH
29744: LD_VAR 0 10
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 3
29756: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29757: LD_VAR 0 2
29761: PPUSH
29762: LD_VAR 0 5
29766: PPUSH
29767: CALL 30076 0 2
29771: PUSH
29772: LD_VAR 0 10
29776: PUSH
29777: EMPTY
29778: EQUAL
29779: OR
29780: IFFALSE 29725
// result := [ ] ;
29782: LD_ADDR_VAR 0 6
29786: PUSH
29787: EMPTY
29788: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29789: LD_VAR 0 1
29793: PPUSH
29794: LD_VAR 0 2
29798: PPUSH
29799: LD_VAR 0 3
29803: PPUSH
29804: LD_VAR 0 4
29808: PPUSH
29809: LD_VAR 0 5
29813: PPUSH
29814: CALL_OW 448
29818: IFFALSE 29851
// result := [ chassis , engine , control , weapon ] ;
29820: LD_ADDR_VAR 0 6
29824: PUSH
29825: LD_VAR 0 2
29829: PUSH
29830: LD_VAR 0 3
29834: PUSH
29835: LD_VAR 0 4
29839: PUSH
29840: LD_VAR 0 5
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: ST_TO_ADDR
// end ;
29851: LD_VAR 0 6
29855: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29856: LD_INT 0
29858: PPUSH
// if not chassis or not engine then
29859: LD_VAR 0 1
29863: NOT
29864: PUSH
29865: LD_VAR 0 2
29869: NOT
29870: OR
29871: IFFALSE 29875
// exit ;
29873: GO 30071
// case engine of engine_solar :
29875: LD_VAR 0 2
29879: PUSH
29880: LD_INT 2
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29926
29888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_INT 11
29896: PUSH
29897: LD_INT 12
29899: PUSH
29900: LD_INT 13
29902: PUSH
29903: LD_INT 14
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: ST_TO_ADDR
29924: GO 30055
29926: LD_INT 1
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29996
29934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_INT 11
29942: PUSH
29943: LD_INT 12
29945: PUSH
29946: LD_INT 13
29948: PUSH
29949: LD_INT 14
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 4
29963: PUSH
29964: LD_INT 5
29966: PUSH
29967: LD_INT 21
29969: PUSH
29970: LD_INT 23
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_INT 24
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
29994: GO 30055
29996: LD_INT 3
29998: DOUBLE
29999: EQUAL
30000: IFTRUE 30004
30002: GO 30054
30004: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 13
30012: PUSH
30013: LD_INT 14
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: LD_INT 5
30027: PUSH
30028: LD_INT 21
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
30052: GO 30055
30054: POP
// result := ( chassis in result ) ;
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_VAR 0 1
30064: PUSH
30065: LD_VAR 0 3
30069: IN
30070: ST_TO_ADDR
// end ;
30071: LD_VAR 0 3
30075: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30076: LD_INT 0
30078: PPUSH
// if not chassis or not weapon then
30079: LD_VAR 0 1
30083: NOT
30084: PUSH
30085: LD_VAR 0 2
30089: NOT
30090: OR
30091: IFFALSE 30095
// exit ;
30093: GO 31157
// case weapon of us_machine_gun :
30095: LD_VAR 0 2
30099: PUSH
30100: LD_INT 2
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30138
30108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: LD_INT 5
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
30136: GO 31141
30138: LD_INT 3
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30176
30146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
30174: GO 31141
30176: LD_INT 11
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30214
30184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 3
30198: PUSH
30199: LD_INT 4
30201: PUSH
30202: LD_INT 5
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: ST_TO_ADDR
30212: GO 31141
30214: LD_INT 4
30216: DOUBLE
30217: EQUAL
30218: IFTRUE 30222
30220: GO 30248
30222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30223: LD_ADDR_VAR 0 3
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: LD_INT 5
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: ST_TO_ADDR
30246: GO 31141
30248: LD_INT 5
30250: DOUBLE
30251: EQUAL
30252: IFTRUE 30256
30254: GO 30282
30256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30257: LD_ADDR_VAR 0 3
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 3
30267: PUSH
30268: LD_INT 4
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: ST_TO_ADDR
30280: GO 31141
30282: LD_INT 9
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30290
30288: GO 30316
30290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30291: LD_ADDR_VAR 0 3
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
30314: GO 31141
30316: LD_INT 7
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30350
30324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: LD_INT 4
30338: PUSH
30339: LD_INT 5
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
30348: GO 31141
30350: LD_INT 12
30352: DOUBLE
30353: EQUAL
30354: IFTRUE 30358
30356: GO 30384
30358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30359: LD_ADDR_VAR 0 3
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 4
30372: PUSH
30373: LD_INT 5
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: ST_TO_ADDR
30382: GO 31141
30384: LD_INT 13
30386: DOUBLE
30387: EQUAL
30388: IFTRUE 30392
30390: GO 30418
30392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30393: LD_ADDR_VAR 0 3
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 4
30406: PUSH
30407: LD_INT 5
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
30416: GO 31141
30418: LD_INT 14
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30444
30426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 5
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: ST_TO_ADDR
30442: GO 31141
30444: LD_INT 6
30446: DOUBLE
30447: EQUAL
30448: IFTRUE 30452
30450: GO 30470
30452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30453: LD_ADDR_VAR 0 3
30457: PUSH
30458: LD_INT 4
30460: PUSH
30461: LD_INT 5
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: ST_TO_ADDR
30468: GO 31141
30470: LD_INT 10
30472: DOUBLE
30473: EQUAL
30474: IFTRUE 30478
30476: GO 30496
30478: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30479: LD_ADDR_VAR 0 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: LD_INT 5
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: ST_TO_ADDR
30494: GO 31141
30496: LD_INT 22
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30530
30504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: LD_INT 11
30512: PUSH
30513: LD_INT 12
30515: PUSH
30516: LD_INT 13
30518: PUSH
30519: LD_INT 14
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
30528: GO 31141
30530: LD_INT 23
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30564
30538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30539: LD_ADDR_VAR 0 3
30543: PUSH
30544: LD_INT 11
30546: PUSH
30547: LD_INT 12
30549: PUSH
30550: LD_INT 13
30552: PUSH
30553: LD_INT 14
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 31141
30564: LD_INT 24
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30598
30572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 11
30580: PUSH
30581: LD_INT 12
30583: PUSH
30584: LD_INT 13
30586: PUSH
30587: LD_INT 14
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: ST_TO_ADDR
30596: GO 31141
30598: LD_INT 30
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30632
30606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30607: LD_ADDR_VAR 0 3
30611: PUSH
30612: LD_INT 11
30614: PUSH
30615: LD_INT 12
30617: PUSH
30618: LD_INT 13
30620: PUSH
30621: LD_INT 14
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
30630: GO 31141
30632: LD_INT 25
30634: DOUBLE
30635: EQUAL
30636: IFTRUE 30640
30638: GO 30658
30640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_INT 13
30648: PUSH
30649: LD_INT 14
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: ST_TO_ADDR
30656: GO 31141
30658: LD_INT 27
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30684
30666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_INT 13
30674: PUSH
30675: LD_INT 14
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: ST_TO_ADDR
30682: GO 31141
30684: LD_EXP 103
30688: DOUBLE
30689: EQUAL
30690: IFTRUE 30694
30692: GO 30720
30694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 11
30702: PUSH
30703: LD_INT 12
30705: PUSH
30706: LD_INT 13
30708: PUSH
30709: LD_INT 14
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
30718: GO 31141
30720: LD_INT 28
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30746
30728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_INT 13
30736: PUSH
30737: LD_INT 14
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 31141
30746: LD_INT 29
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30772
30754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30755: LD_ADDR_VAR 0 3
30759: PUSH
30760: LD_INT 13
30762: PUSH
30763: LD_INT 14
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31141
30772: LD_INT 31
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30798
30780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 13
30788: PUSH
30789: LD_INT 14
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: ST_TO_ADDR
30796: GO 31141
30798: LD_INT 26
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30824
30806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30807: LD_ADDR_VAR 0 3
30811: PUSH
30812: LD_INT 13
30814: PUSH
30815: LD_INT 14
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 31141
30824: LD_INT 42
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30858
30832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 21
30840: PUSH
30841: LD_INT 22
30843: PUSH
30844: LD_INT 23
30846: PUSH
30847: LD_INT 24
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31141
30858: LD_INT 43
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30892
30866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30867: LD_ADDR_VAR 0 3
30871: PUSH
30872: LD_INT 21
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_INT 23
30880: PUSH
30881: LD_INT 24
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: ST_TO_ADDR
30890: GO 31141
30892: LD_INT 44
30894: DOUBLE
30895: EQUAL
30896: IFTRUE 30900
30898: GO 30926
30900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 22
30911: PUSH
30912: LD_INT 23
30914: PUSH
30915: LD_INT 24
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31141
30926: LD_INT 45
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30960
30934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: LD_INT 21
30942: PUSH
30943: LD_INT 22
30945: PUSH
30946: LD_INT 23
30948: PUSH
30949: LD_INT 24
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: ST_TO_ADDR
30958: GO 31141
30960: LD_INT 49
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30994
30968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_INT 21
30976: PUSH
30977: LD_INT 22
30979: PUSH
30980: LD_INT 23
30982: PUSH
30983: LD_INT 24
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
30992: GO 31141
30994: LD_INT 51
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31028
31002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 21
31010: PUSH
31011: LD_INT 22
31013: PUSH
31014: LD_INT 23
31016: PUSH
31017: LD_INT 24
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
31026: GO 31141
31028: LD_INT 52
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31062
31036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 21
31044: PUSH
31045: LD_INT 22
31047: PUSH
31048: LD_INT 23
31050: PUSH
31051: LD_INT 24
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
31060: GO 31141
31062: LD_INT 53
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31088
31070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 23
31078: PUSH
31079: LD_INT 24
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: ST_TO_ADDR
31086: GO 31141
31088: LD_INT 46
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31114
31096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: LD_INT 23
31104: PUSH
31105: LD_INT 24
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: ST_TO_ADDR
31112: GO 31141
31114: LD_INT 47
31116: DOUBLE
31117: EQUAL
31118: IFTRUE 31122
31120: GO 31140
31122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31123: LD_ADDR_VAR 0 3
31127: PUSH
31128: LD_INT 23
31130: PUSH
31131: LD_INT 24
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: ST_TO_ADDR
31138: GO 31141
31140: POP
// result := ( chassis in result ) ;
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_VAR 0 1
31150: PUSH
31151: LD_VAR 0 3
31155: IN
31156: ST_TO_ADDR
// end ;
31157: LD_VAR 0 3
31161: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31162: LD_INT 0
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
// result := array ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 1
31180: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31181: LD_VAR 0 1
31185: NOT
31186: PUSH
31187: LD_VAR 0 2
31191: NOT
31192: OR
31193: PUSH
31194: LD_VAR 0 3
31198: NOT
31199: OR
31200: PUSH
31201: LD_VAR 0 2
31205: PUSH
31206: LD_VAR 0 1
31210: GREATER
31211: OR
31212: PUSH
31213: LD_VAR 0 3
31217: PUSH
31218: LD_VAR 0 1
31222: GREATER
31223: OR
31224: IFFALSE 31228
// exit ;
31226: GO 31524
// if direction then
31228: LD_VAR 0 4
31232: IFFALSE 31296
// begin d := 1 ;
31234: LD_ADDR_VAR 0 9
31238: PUSH
31239: LD_INT 1
31241: ST_TO_ADDR
// if i_from > i_to then
31242: LD_VAR 0 2
31246: PUSH
31247: LD_VAR 0 3
31251: GREATER
31252: IFFALSE 31278
// length := ( array - i_from ) + i_to else
31254: LD_ADDR_VAR 0 11
31258: PUSH
31259: LD_VAR 0 1
31263: PUSH
31264: LD_VAR 0 2
31268: MINUS
31269: PUSH
31270: LD_VAR 0 3
31274: PLUS
31275: ST_TO_ADDR
31276: GO 31294
// length := i_to - i_from ;
31278: LD_ADDR_VAR 0 11
31282: PUSH
31283: LD_VAR 0 3
31287: PUSH
31288: LD_VAR 0 2
31292: MINUS
31293: ST_TO_ADDR
// end else
31294: GO 31357
// begin d := - 1 ;
31296: LD_ADDR_VAR 0 9
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: ST_TO_ADDR
// if i_from > i_to then
31305: LD_VAR 0 2
31309: PUSH
31310: LD_VAR 0 3
31314: GREATER
31315: IFFALSE 31335
// length := i_from - i_to else
31317: LD_ADDR_VAR 0 11
31321: PUSH
31322: LD_VAR 0 2
31326: PUSH
31327: LD_VAR 0 3
31331: MINUS
31332: ST_TO_ADDR
31333: GO 31357
// length := ( array - i_to ) + i_from ;
31335: LD_ADDR_VAR 0 11
31339: PUSH
31340: LD_VAR 0 1
31344: PUSH
31345: LD_VAR 0 3
31349: MINUS
31350: PUSH
31351: LD_VAR 0 2
31355: PLUS
31356: ST_TO_ADDR
// end ; if not length then
31357: LD_VAR 0 11
31361: NOT
31362: IFFALSE 31366
// exit ;
31364: GO 31524
// tmp := array ;
31366: LD_ADDR_VAR 0 10
31370: PUSH
31371: LD_VAR 0 1
31375: ST_TO_ADDR
// for i = 1 to length do
31376: LD_ADDR_VAR 0 6
31380: PUSH
31381: DOUBLE
31382: LD_INT 1
31384: DEC
31385: ST_TO_ADDR
31386: LD_VAR 0 11
31390: PUSH
31391: FOR_TO
31392: IFFALSE 31512
// begin for j = 1 to array do
31394: LD_ADDR_VAR 0 7
31398: PUSH
31399: DOUBLE
31400: LD_INT 1
31402: DEC
31403: ST_TO_ADDR
31404: LD_VAR 0 1
31408: PUSH
31409: FOR_TO
31410: IFFALSE 31498
// begin k := j + d ;
31412: LD_ADDR_VAR 0 8
31416: PUSH
31417: LD_VAR 0 7
31421: PUSH
31422: LD_VAR 0 9
31426: PLUS
31427: ST_TO_ADDR
// if k > array then
31428: LD_VAR 0 8
31432: PUSH
31433: LD_VAR 0 1
31437: GREATER
31438: IFFALSE 31448
// k := 1 ;
31440: LD_ADDR_VAR 0 8
31444: PUSH
31445: LD_INT 1
31447: ST_TO_ADDR
// if not k then
31448: LD_VAR 0 8
31452: NOT
31453: IFFALSE 31465
// k := array ;
31455: LD_ADDR_VAR 0 8
31459: PUSH
31460: LD_VAR 0 1
31464: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31465: LD_ADDR_VAR 0 10
31469: PUSH
31470: LD_VAR 0 10
31474: PPUSH
31475: LD_VAR 0 8
31479: PPUSH
31480: LD_VAR 0 1
31484: PUSH
31485: LD_VAR 0 7
31489: ARRAY
31490: PPUSH
31491: CALL_OW 1
31495: ST_TO_ADDR
// end ;
31496: GO 31409
31498: POP
31499: POP
// array := tmp ;
31500: LD_ADDR_VAR 0 1
31504: PUSH
31505: LD_VAR 0 10
31509: ST_TO_ADDR
// end ;
31510: GO 31391
31512: POP
31513: POP
// result := array ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: LD_VAR 0 1
31523: ST_TO_ADDR
// end ;
31524: LD_VAR 0 5
31528: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
// result := 0 ;
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 0
31540: ST_TO_ADDR
// if not array or not value in array then
31541: LD_VAR 0 1
31545: NOT
31546: PUSH
31547: LD_VAR 0 2
31551: PUSH
31552: LD_VAR 0 1
31556: IN
31557: NOT
31558: OR
31559: IFFALSE 31563
// exit ;
31561: GO 31617
// for i = 1 to array do
31563: LD_ADDR_VAR 0 4
31567: PUSH
31568: DOUBLE
31569: LD_INT 1
31571: DEC
31572: ST_TO_ADDR
31573: LD_VAR 0 1
31577: PUSH
31578: FOR_TO
31579: IFFALSE 31615
// if value = array [ i ] then
31581: LD_VAR 0 2
31585: PUSH
31586: LD_VAR 0 1
31590: PUSH
31591: LD_VAR 0 4
31595: ARRAY
31596: EQUAL
31597: IFFALSE 31613
// begin result := i ;
31599: LD_ADDR_VAR 0 3
31603: PUSH
31604: LD_VAR 0 4
31608: ST_TO_ADDR
// exit ;
31609: POP
31610: POP
31611: GO 31617
// end ;
31613: GO 31578
31615: POP
31616: POP
// end ;
31617: LD_VAR 0 3
31621: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31622: LD_INT 0
31624: PPUSH
// vc_chassis := chassis ;
31625: LD_ADDR_OWVAR 37
31629: PUSH
31630: LD_VAR 0 1
31634: ST_TO_ADDR
// vc_engine := engine ;
31635: LD_ADDR_OWVAR 39
31639: PUSH
31640: LD_VAR 0 2
31644: ST_TO_ADDR
// vc_control := control ;
31645: LD_ADDR_OWVAR 38
31649: PUSH
31650: LD_VAR 0 3
31654: ST_TO_ADDR
// vc_weapon := weapon ;
31655: LD_ADDR_OWVAR 40
31659: PUSH
31660: LD_VAR 0 4
31664: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31665: LD_ADDR_OWVAR 41
31669: PUSH
31670: LD_VAR 0 5
31674: ST_TO_ADDR
// end ;
31675: LD_VAR 0 6
31679: RET
// export function WantPlant ( unit ) ; var task ; begin
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
// result := false ;
31684: LD_ADDR_VAR 0 2
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: LD_VAR 0 1
31701: PPUSH
31702: CALL_OW 437
31706: ST_TO_ADDR
// if task then
31707: LD_VAR 0 3
31711: IFFALSE 31739
// if task [ 1 ] [ 1 ] = p then
31713: LD_VAR 0 3
31717: PUSH
31718: LD_INT 1
31720: ARRAY
31721: PUSH
31722: LD_INT 1
31724: ARRAY
31725: PUSH
31726: LD_STRING p
31728: EQUAL
31729: IFFALSE 31739
// result := true ;
31731: LD_ADDR_VAR 0 2
31735: PUSH
31736: LD_INT 1
31738: ST_TO_ADDR
// end ;
31739: LD_VAR 0 2
31743: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31744: LD_INT 0
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
// if pos < 1 then
31750: LD_VAR 0 2
31754: PUSH
31755: LD_INT 1
31757: LESS
31758: IFFALSE 31762
// exit ;
31760: GO 32065
// if pos = 1 then
31762: LD_VAR 0 2
31766: PUSH
31767: LD_INT 1
31769: EQUAL
31770: IFFALSE 31803
// result := Replace ( arr , pos [ 1 ] , value ) else
31772: LD_ADDR_VAR 0 4
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: LD_VAR 0 2
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: PPUSH
31791: LD_VAR 0 3
31795: PPUSH
31796: CALL_OW 1
31800: ST_TO_ADDR
31801: GO 32065
// begin tmp := arr ;
31803: LD_ADDR_VAR 0 6
31807: PUSH
31808: LD_VAR 0 1
31812: ST_TO_ADDR
// s_arr := [ tmp ] ;
31813: LD_ADDR_VAR 0 7
31817: PUSH
31818: LD_VAR 0 6
31822: PUSH
31823: EMPTY
31824: LIST
31825: ST_TO_ADDR
// for i = 1 to pos - 1 do
31826: LD_ADDR_VAR 0 5
31830: PUSH
31831: DOUBLE
31832: LD_INT 1
31834: DEC
31835: ST_TO_ADDR
31836: LD_VAR 0 2
31840: PUSH
31841: LD_INT 1
31843: MINUS
31844: PUSH
31845: FOR_TO
31846: IFFALSE 31891
// begin tmp := tmp [ pos [ i ] ] ;
31848: LD_ADDR_VAR 0 6
31852: PUSH
31853: LD_VAR 0 6
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 5
31867: ARRAY
31868: ARRAY
31869: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31870: LD_ADDR_VAR 0 7
31874: PUSH
31875: LD_VAR 0 7
31879: PUSH
31880: LD_VAR 0 6
31884: PUSH
31885: EMPTY
31886: LIST
31887: ADD
31888: ST_TO_ADDR
// end ;
31889: GO 31845
31891: POP
31892: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31893: LD_ADDR_VAR 0 6
31897: PUSH
31898: LD_VAR 0 6
31902: PPUSH
31903: LD_VAR 0 2
31907: PUSH
31908: LD_VAR 0 2
31912: ARRAY
31913: PPUSH
31914: LD_VAR 0 3
31918: PPUSH
31919: CALL_OW 1
31923: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31924: LD_ADDR_VAR 0 7
31928: PUSH
31929: LD_VAR 0 7
31933: PPUSH
31934: LD_VAR 0 7
31938: PPUSH
31939: LD_VAR 0 6
31943: PPUSH
31944: CALL_OW 1
31948: ST_TO_ADDR
// for i = s_arr downto 2 do
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: DOUBLE
31955: LD_VAR 0 7
31959: INC
31960: ST_TO_ADDR
31961: LD_INT 2
31963: PUSH
31964: FOR_DOWNTO
31965: IFFALSE 32049
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31967: LD_ADDR_VAR 0 6
31971: PUSH
31972: LD_VAR 0 7
31976: PUSH
31977: LD_VAR 0 5
31981: PUSH
31982: LD_INT 1
31984: MINUS
31985: ARRAY
31986: PPUSH
31987: LD_VAR 0 2
31991: PUSH
31992: LD_VAR 0 5
31996: PUSH
31997: LD_INT 1
31999: MINUS
32000: ARRAY
32001: PPUSH
32002: LD_VAR 0 7
32006: PUSH
32007: LD_VAR 0 5
32011: ARRAY
32012: PPUSH
32013: CALL_OW 1
32017: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32018: LD_ADDR_VAR 0 7
32022: PUSH
32023: LD_VAR 0 7
32027: PPUSH
32028: LD_VAR 0 5
32032: PUSH
32033: LD_INT 1
32035: MINUS
32036: PPUSH
32037: LD_VAR 0 6
32041: PPUSH
32042: CALL_OW 1
32046: ST_TO_ADDR
// end ;
32047: GO 31964
32049: POP
32050: POP
// result := s_arr [ 1 ] ;
32051: LD_ADDR_VAR 0 4
32055: PUSH
32056: LD_VAR 0 7
32060: PUSH
32061: LD_INT 1
32063: ARRAY
32064: ST_TO_ADDR
// end ; end ;
32065: LD_VAR 0 4
32069: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32070: LD_INT 0
32072: PPUSH
32073: PPUSH
// if not list then
32074: LD_VAR 0 1
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 32174
// i := list [ pos1 ] ;
32083: LD_ADDR_VAR 0 5
32087: PUSH
32088: LD_VAR 0 1
32092: PUSH
32093: LD_VAR 0 2
32097: ARRAY
32098: ST_TO_ADDR
// if not i then
32099: LD_VAR 0 5
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32174
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32108: LD_ADDR_VAR 0 1
32112: PUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: LD_VAR 0 2
32122: PPUSH
32123: LD_VAR 0 1
32127: PUSH
32128: LD_VAR 0 3
32132: ARRAY
32133: PPUSH
32134: CALL_OW 1
32138: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32139: LD_ADDR_VAR 0 1
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 1
32163: ST_TO_ADDR
// result := list ;
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: LD_VAR 0 1
32173: ST_TO_ADDR
// end ;
32174: LD_VAR 0 4
32178: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32179: LD_INT 0
32181: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32182: LD_ADDR_VAR 0 5
32186: PUSH
32187: LD_VAR 0 1
32191: PPUSH
32192: CALL_OW 250
32196: PPUSH
32197: LD_VAR 0 1
32201: PPUSH
32202: CALL_OW 251
32206: PPUSH
32207: LD_VAR 0 2
32211: PPUSH
32212: LD_VAR 0 3
32216: PPUSH
32217: LD_VAR 0 4
32221: PPUSH
32222: CALL 32232 0 5
32226: ST_TO_ADDR
// end ;
32227: LD_VAR 0 5
32231: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32232: LD_INT 0
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
// if not list then
32238: LD_VAR 0 3
32242: NOT
32243: IFFALSE 32247
// exit ;
32245: GO 32635
// result := [ ] ;
32247: LD_ADDR_VAR 0 6
32251: PUSH
32252: EMPTY
32253: ST_TO_ADDR
// for i in list do
32254: LD_ADDR_VAR 0 7
32258: PUSH
32259: LD_VAR 0 3
32263: PUSH
32264: FOR_IN
32265: IFFALSE 32467
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32267: LD_ADDR_VAR 0 9
32271: PUSH
32272: LD_VAR 0 7
32276: PPUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: LD_VAR 0 2
32286: PPUSH
32287: CALL_OW 297
32291: ST_TO_ADDR
// if not result then
32292: LD_VAR 0 6
32296: NOT
32297: IFFALSE 32323
// result := [ [ i , tmp ] ] else
32299: LD_ADDR_VAR 0 6
32303: PUSH
32304: LD_VAR 0 7
32308: PUSH
32309: LD_VAR 0 9
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: EMPTY
32319: LIST
32320: ST_TO_ADDR
32321: GO 32465
// begin if result [ result ] [ 2 ] < tmp then
32323: LD_VAR 0 6
32327: PUSH
32328: LD_VAR 0 6
32332: ARRAY
32333: PUSH
32334: LD_INT 2
32336: ARRAY
32337: PUSH
32338: LD_VAR 0 9
32342: LESS
32343: IFFALSE 32385
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32345: LD_ADDR_VAR 0 6
32349: PUSH
32350: LD_VAR 0 6
32354: PPUSH
32355: LD_VAR 0 6
32359: PUSH
32360: LD_INT 1
32362: PLUS
32363: PPUSH
32364: LD_VAR 0 7
32368: PUSH
32369: LD_VAR 0 9
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 2
32382: ST_TO_ADDR
32383: GO 32465
// for j = 1 to result do
32385: LD_ADDR_VAR 0 8
32389: PUSH
32390: DOUBLE
32391: LD_INT 1
32393: DEC
32394: ST_TO_ADDR
32395: LD_VAR 0 6
32399: PUSH
32400: FOR_TO
32401: IFFALSE 32463
// begin if tmp < result [ j ] [ 2 ] then
32403: LD_VAR 0 9
32407: PUSH
32408: LD_VAR 0 6
32412: PUSH
32413: LD_VAR 0 8
32417: ARRAY
32418: PUSH
32419: LD_INT 2
32421: ARRAY
32422: LESS
32423: IFFALSE 32461
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32425: LD_ADDR_VAR 0 6
32429: PUSH
32430: LD_VAR 0 6
32434: PPUSH
32435: LD_VAR 0 8
32439: PPUSH
32440: LD_VAR 0 7
32444: PUSH
32445: LD_VAR 0 9
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PPUSH
32454: CALL_OW 2
32458: ST_TO_ADDR
// break ;
32459: GO 32463
// end ; end ;
32461: GO 32400
32463: POP
32464: POP
// end ; end ;
32465: GO 32264
32467: POP
32468: POP
// if result and not asc then
32469: LD_VAR 0 6
32473: PUSH
32474: LD_VAR 0 4
32478: NOT
32479: AND
32480: IFFALSE 32555
// begin tmp := result ;
32482: LD_ADDR_VAR 0 9
32486: PUSH
32487: LD_VAR 0 6
32491: ST_TO_ADDR
// for i = tmp downto 1 do
32492: LD_ADDR_VAR 0 7
32496: PUSH
32497: DOUBLE
32498: LD_VAR 0 9
32502: INC
32503: ST_TO_ADDR
32504: LD_INT 1
32506: PUSH
32507: FOR_DOWNTO
32508: IFFALSE 32553
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32510: LD_ADDR_VAR 0 6
32514: PUSH
32515: LD_VAR 0 6
32519: PPUSH
32520: LD_VAR 0 9
32524: PUSH
32525: LD_VAR 0 7
32529: MINUS
32530: PUSH
32531: LD_INT 1
32533: PLUS
32534: PPUSH
32535: LD_VAR 0 9
32539: PUSH
32540: LD_VAR 0 7
32544: ARRAY
32545: PPUSH
32546: CALL_OW 1
32550: ST_TO_ADDR
32551: GO 32507
32553: POP
32554: POP
// end ; tmp := [ ] ;
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: EMPTY
32561: ST_TO_ADDR
// if mode then
32562: LD_VAR 0 5
32566: IFFALSE 32635
// begin for i = 1 to result do
32568: LD_ADDR_VAR 0 7
32572: PUSH
32573: DOUBLE
32574: LD_INT 1
32576: DEC
32577: ST_TO_ADDR
32578: LD_VAR 0 6
32582: PUSH
32583: FOR_TO
32584: IFFALSE 32623
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32586: LD_ADDR_VAR 0 9
32590: PUSH
32591: LD_VAR 0 9
32595: PPUSH
32596: LD_VAR 0 7
32600: PPUSH
32601: LD_VAR 0 6
32605: PUSH
32606: LD_VAR 0 7
32610: ARRAY
32611: PUSH
32612: LD_INT 1
32614: ARRAY
32615: PPUSH
32616: CALL_OW 1
32620: ST_TO_ADDR
32621: GO 32583
32623: POP
32624: POP
// result := tmp ;
32625: LD_ADDR_VAR 0 6
32629: PUSH
32630: LD_VAR 0 9
32634: ST_TO_ADDR
// end ; end ;
32635: LD_VAR 0 6
32639: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32640: LD_INT 0
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32648: LD_ADDR_VAR 0 5
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
// if not x or not y then
32670: LD_VAR 0 2
32674: NOT
32675: PUSH
32676: LD_VAR 0 3
32680: NOT
32681: OR
32682: IFFALSE 32686
// exit ;
32684: GO 34338
// if not range then
32686: LD_VAR 0 4
32690: NOT
32691: IFFALSE 32701
// range := 10 ;
32693: LD_ADDR_VAR 0 4
32697: PUSH
32698: LD_INT 10
32700: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32701: LD_ADDR_VAR 0 8
32705: PUSH
32706: LD_INT 81
32708: PUSH
32709: LD_VAR 0 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 92
32720: PUSH
32721: LD_VAR 0 2
32725: PUSH
32726: LD_VAR 0 3
32730: PUSH
32731: LD_VAR 0 4
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 3
32744: PUSH
32745: LD_INT 21
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: PPUSH
32764: CALL_OW 69
32768: ST_TO_ADDR
// if not tmp then
32769: LD_VAR 0 8
32773: NOT
32774: IFFALSE 32778
// exit ;
32776: GO 34338
// for i in tmp do
32778: LD_ADDR_VAR 0 6
32782: PUSH
32783: LD_VAR 0 8
32787: PUSH
32788: FOR_IN
32789: IFFALSE 34313
// begin points := [ 0 , 0 , 0 ] ;
32791: LD_ADDR_VAR 0 9
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: ST_TO_ADDR
// bpoints := 1 ;
32810: LD_ADDR_VAR 0 10
32814: PUSH
32815: LD_INT 1
32817: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 247
32827: PUSH
32828: LD_INT 1
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 33414
32836: POP
// begin if GetClass ( i ) = 1 then
32837: LD_VAR 0 6
32841: PPUSH
32842: CALL_OW 257
32846: PUSH
32847: LD_INT 1
32849: EQUAL
32850: IFFALSE 32871
// points := [ 10 , 5 , 3 ] ;
32852: LD_ADDR_VAR 0 9
32856: PUSH
32857: LD_INT 10
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: LD_INT 3
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32871: LD_VAR 0 6
32875: PPUSH
32876: CALL_OW 257
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 3
32886: PUSH
32887: LD_INT 4
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: IN
32895: IFFALSE 32916
// points := [ 3 , 2 , 1 ] ;
32897: LD_ADDR_VAR 0 9
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32916: LD_VAR 0 6
32920: PPUSH
32921: CALL_OW 257
32925: PUSH
32926: LD_INT 5
32928: EQUAL
32929: IFFALSE 32950
// points := [ 130 , 5 , 2 ] ;
32931: LD_ADDR_VAR 0 9
32935: PUSH
32936: LD_INT 130
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32950: LD_VAR 0 6
32954: PPUSH
32955: CALL_OW 257
32959: PUSH
32960: LD_INT 8
32962: EQUAL
32963: IFFALSE 32984
// points := [ 35 , 35 , 30 ] ;
32965: LD_ADDR_VAR 0 9
32969: PUSH
32970: LD_INT 35
32972: PUSH
32973: LD_INT 35
32975: PUSH
32976: LD_INT 30
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32984: LD_VAR 0 6
32988: PPUSH
32989: CALL_OW 257
32993: PUSH
32994: LD_INT 9
32996: EQUAL
32997: IFFALSE 33018
// points := [ 20 , 55 , 40 ] ;
32999: LD_ADDR_VAR 0 9
33003: PUSH
33004: LD_INT 20
33006: PUSH
33007: LD_INT 55
33009: PUSH
33010: LD_INT 40
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33018: LD_VAR 0 6
33022: PPUSH
33023: CALL_OW 257
33027: PUSH
33028: LD_INT 12
33030: PUSH
33031: LD_INT 16
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: IN
33038: IFFALSE 33059
// points := [ 5 , 3 , 2 ] ;
33040: LD_ADDR_VAR 0 9
33044: PUSH
33045: LD_INT 5
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33059: LD_VAR 0 6
33063: PPUSH
33064: CALL_OW 257
33068: PUSH
33069: LD_INT 17
33071: EQUAL
33072: IFFALSE 33093
// points := [ 100 , 50 , 75 ] ;
33074: LD_ADDR_VAR 0 9
33078: PUSH
33079: LD_INT 100
33081: PUSH
33082: LD_INT 50
33084: PUSH
33085: LD_INT 75
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33093: LD_VAR 0 6
33097: PPUSH
33098: CALL_OW 257
33102: PUSH
33103: LD_INT 15
33105: EQUAL
33106: IFFALSE 33127
// points := [ 10 , 5 , 3 ] ;
33108: LD_ADDR_VAR 0 9
33112: PUSH
33113: LD_INT 10
33115: PUSH
33116: LD_INT 5
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33127: LD_VAR 0 6
33131: PPUSH
33132: CALL_OW 257
33136: PUSH
33137: LD_INT 14
33139: EQUAL
33140: IFFALSE 33161
// points := [ 10 , 0 , 0 ] ;
33142: LD_ADDR_VAR 0 9
33146: PUSH
33147: LD_INT 10
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33161: LD_VAR 0 6
33165: PPUSH
33166: CALL_OW 257
33170: PUSH
33171: LD_INT 11
33173: EQUAL
33174: IFFALSE 33195
// points := [ 30 , 10 , 5 ] ;
33176: LD_ADDR_VAR 0 9
33180: PUSH
33181: LD_INT 30
33183: PUSH
33184: LD_INT 10
33186: PUSH
33187: LD_INT 5
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33195: LD_VAR 0 1
33199: PPUSH
33200: LD_INT 5
33202: PPUSH
33203: CALL_OW 321
33207: PUSH
33208: LD_INT 2
33210: EQUAL
33211: IFFALSE 33228
// bpoints := bpoints * 1.8 ;
33213: LD_ADDR_VAR 0 10
33217: PUSH
33218: LD_VAR 0 10
33222: PUSH
33223: LD_REAL  1.80000000000000E+0000
33226: MUL
33227: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 257
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: LD_INT 4
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: IN
33256: PUSH
33257: LD_VAR 0 1
33261: PPUSH
33262: LD_INT 51
33264: PPUSH
33265: CALL_OW 321
33269: PUSH
33270: LD_INT 2
33272: EQUAL
33273: AND
33274: IFFALSE 33291
// bpoints := bpoints * 1.2 ;
33276: LD_ADDR_VAR 0 10
33280: PUSH
33281: LD_VAR 0 10
33285: PUSH
33286: LD_REAL  1.20000000000000E+0000
33289: MUL
33290: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33291: LD_VAR 0 6
33295: PPUSH
33296: CALL_OW 257
33300: PUSH
33301: LD_INT 5
33303: PUSH
33304: LD_INT 7
33306: PUSH
33307: LD_INT 9
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: IN
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: LD_INT 52
33323: PPUSH
33324: CALL_OW 321
33328: PUSH
33329: LD_INT 2
33331: EQUAL
33332: AND
33333: IFFALSE 33350
// bpoints := bpoints * 1.5 ;
33335: LD_ADDR_VAR 0 10
33339: PUSH
33340: LD_VAR 0 10
33344: PUSH
33345: LD_REAL  1.50000000000000E+0000
33348: MUL
33349: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33350: LD_VAR 0 1
33354: PPUSH
33355: LD_INT 66
33357: PPUSH
33358: CALL_OW 321
33362: PUSH
33363: LD_INT 2
33365: EQUAL
33366: IFFALSE 33383
// bpoints := bpoints * 1.1 ;
33368: LD_ADDR_VAR 0 10
33372: PUSH
33373: LD_VAR 0 10
33377: PUSH
33378: LD_REAL  1.10000000000000E+0000
33381: MUL
33382: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33383: LD_ADDR_VAR 0 10
33387: PUSH
33388: LD_VAR 0 10
33392: PUSH
33393: LD_VAR 0 6
33397: PPUSH
33398: LD_INT 1
33400: PPUSH
33401: CALL_OW 259
33405: PUSH
33406: LD_REAL  1.15000000000000E+0000
33409: MUL
33410: MUL
33411: ST_TO_ADDR
// end ; unit_vehicle :
33412: GO 34242
33414: LD_INT 2
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 34230
33422: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33423: LD_VAR 0 6
33427: PPUSH
33428: CALL_OW 264
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 42
33438: PUSH
33439: LD_INT 24
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: IN
33447: IFFALSE 33468
// points := [ 25 , 5 , 3 ] ;
33449: LD_ADDR_VAR 0 9
33453: PUSH
33454: LD_INT 25
33456: PUSH
33457: LD_INT 5
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33468: LD_VAR 0 6
33472: PPUSH
33473: CALL_OW 264
33477: PUSH
33478: LD_INT 4
33480: PUSH
33481: LD_INT 43
33483: PUSH
33484: LD_INT 25
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: IN
33492: IFFALSE 33513
// points := [ 40 , 15 , 5 ] ;
33494: LD_ADDR_VAR 0 9
33498: PUSH
33499: LD_INT 40
33501: PUSH
33502: LD_INT 15
33504: PUSH
33505: LD_INT 5
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33513: LD_VAR 0 6
33517: PPUSH
33518: CALL_OW 264
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 23
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: IN
33533: IFFALSE 33554
// points := [ 7 , 25 , 8 ] ;
33535: LD_ADDR_VAR 0 9
33539: PUSH
33540: LD_INT 7
33542: PUSH
33543: LD_INT 25
33545: PUSH
33546: LD_INT 8
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33554: LD_VAR 0 6
33558: PPUSH
33559: CALL_OW 264
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: LD_INT 27
33569: PUSH
33570: LD_INT 44
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: IN
33578: IFFALSE 33599
// points := [ 14 , 50 , 16 ] ;
33580: LD_ADDR_VAR 0 9
33584: PUSH
33585: LD_INT 14
33587: PUSH
33588: LD_INT 50
33590: PUSH
33591: LD_INT 16
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33599: LD_VAR 0 6
33603: PPUSH
33604: CALL_OW 264
33608: PUSH
33609: LD_INT 6
33611: PUSH
33612: LD_INT 46
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: IN
33619: IFFALSE 33640
// points := [ 32 , 120 , 70 ] ;
33621: LD_ADDR_VAR 0 9
33625: PUSH
33626: LD_INT 32
33628: PUSH
33629: LD_INT 120
33631: PUSH
33632: LD_INT 70
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33640: LD_VAR 0 6
33644: PPUSH
33645: CALL_OW 264
33649: PUSH
33650: LD_INT 7
33652: PUSH
33653: LD_INT 28
33655: PUSH
33656: LD_INT 45
33658: PUSH
33659: LD_EXP 103
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: IFFALSE 33691
// points := [ 35 , 20 , 45 ] ;
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_INT 35
33679: PUSH
33680: LD_INT 20
33682: PUSH
33683: LD_INT 45
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33691: LD_VAR 0 6
33695: PPUSH
33696: CALL_OW 264
33700: PUSH
33701: LD_INT 47
33703: PUSH
33704: EMPTY
33705: LIST
33706: IN
33707: IFFALSE 33728
// points := [ 67 , 45 , 75 ] ;
33709: LD_ADDR_VAR 0 9
33713: PUSH
33714: LD_INT 67
33716: PUSH
33717: LD_INT 45
33719: PUSH
33720: LD_INT 75
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33728: LD_VAR 0 6
33732: PPUSH
33733: CALL_OW 264
33737: PUSH
33738: LD_INT 26
33740: PUSH
33741: EMPTY
33742: LIST
33743: IN
33744: IFFALSE 33765
// points := [ 120 , 30 , 80 ] ;
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_INT 120
33753: PUSH
33754: LD_INT 30
33756: PUSH
33757: LD_INT 80
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33765: LD_VAR 0 6
33769: PPUSH
33770: CALL_OW 264
33774: PUSH
33775: LD_INT 22
33777: PUSH
33778: EMPTY
33779: LIST
33780: IN
33781: IFFALSE 33802
// points := [ 40 , 1 , 1 ] ;
33783: LD_ADDR_VAR 0 9
33787: PUSH
33788: LD_INT 40
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33802: LD_VAR 0 6
33806: PPUSH
33807: CALL_OW 264
33811: PUSH
33812: LD_INT 29
33814: PUSH
33815: EMPTY
33816: LIST
33817: IN
33818: IFFALSE 33839
// points := [ 70 , 200 , 400 ] ;
33820: LD_ADDR_VAR 0 9
33824: PUSH
33825: LD_INT 70
33827: PUSH
33828: LD_INT 200
33830: PUSH
33831: LD_INT 400
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33839: LD_VAR 0 6
33843: PPUSH
33844: CALL_OW 264
33848: PUSH
33849: LD_INT 14
33851: PUSH
33852: LD_INT 53
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: IN
33859: IFFALSE 33880
// points := [ 40 , 10 , 20 ] ;
33861: LD_ADDR_VAR 0 9
33865: PUSH
33866: LD_INT 40
33868: PUSH
33869: LD_INT 10
33871: PUSH
33872: LD_INT 20
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33880: LD_VAR 0 6
33884: PPUSH
33885: CALL_OW 264
33889: PUSH
33890: LD_INT 9
33892: PUSH
33893: EMPTY
33894: LIST
33895: IN
33896: IFFALSE 33917
// points := [ 5 , 70 , 20 ] ;
33898: LD_ADDR_VAR 0 9
33902: PUSH
33903: LD_INT 5
33905: PUSH
33906: LD_INT 70
33908: PUSH
33909: LD_INT 20
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33917: LD_VAR 0 6
33921: PPUSH
33922: CALL_OW 264
33926: PUSH
33927: LD_INT 10
33929: PUSH
33930: EMPTY
33931: LIST
33932: IN
33933: IFFALSE 33954
// points := [ 35 , 110 , 70 ] ;
33935: LD_ADDR_VAR 0 9
33939: PUSH
33940: LD_INT 35
33942: PUSH
33943: LD_INT 110
33945: PUSH
33946: LD_INT 70
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33954: LD_VAR 0 6
33958: PPUSH
33959: CALL_OW 265
33963: PUSH
33964: LD_INT 25
33966: EQUAL
33967: IFFALSE 33988
// points := [ 80 , 65 , 100 ] ;
33969: LD_ADDR_VAR 0 9
33973: PUSH
33974: LD_INT 80
33976: PUSH
33977: LD_INT 65
33979: PUSH
33980: LD_INT 100
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33988: LD_VAR 0 6
33992: PPUSH
33993: CALL_OW 263
33997: PUSH
33998: LD_INT 1
34000: EQUAL
34001: IFFALSE 34036
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34003: LD_ADDR_VAR 0 10
34007: PUSH
34008: LD_VAR 0 10
34012: PUSH
34013: LD_VAR 0 6
34017: PPUSH
34018: CALL_OW 311
34022: PPUSH
34023: LD_INT 3
34025: PPUSH
34026: CALL_OW 259
34030: PUSH
34031: LD_INT 4
34033: MUL
34034: MUL
34035: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34036: LD_VAR 0 6
34040: PPUSH
34041: CALL_OW 263
34045: PUSH
34046: LD_INT 2
34048: EQUAL
34049: IFFALSE 34100
// begin j := IsControledBy ( i ) ;
34051: LD_ADDR_VAR 0 7
34055: PUSH
34056: LD_VAR 0 6
34060: PPUSH
34061: CALL_OW 312
34065: ST_TO_ADDR
// if j then
34066: LD_VAR 0 7
34070: IFFALSE 34100
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34072: LD_ADDR_VAR 0 10
34076: PUSH
34077: LD_VAR 0 10
34081: PUSH
34082: LD_VAR 0 7
34086: PPUSH
34087: LD_INT 3
34089: PPUSH
34090: CALL_OW 259
34094: PUSH
34095: LD_INT 3
34097: MUL
34098: MUL
34099: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34100: LD_VAR 0 6
34104: PPUSH
34105: CALL_OW 264
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 6
34115: PUSH
34116: LD_INT 46
34118: PUSH
34119: LD_INT 44
34121: PUSH
34122: LD_INT 47
34124: PUSH
34125: LD_INT 45
34127: PUSH
34128: LD_INT 28
34130: PUSH
34131: LD_INT 7
34133: PUSH
34134: LD_INT 27
34136: PUSH
34137: LD_INT 29
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: IN
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: LD_INT 52
34160: PPUSH
34161: CALL_OW 321
34165: PUSH
34166: LD_INT 2
34168: EQUAL
34169: AND
34170: IFFALSE 34187
// bpoints := bpoints * 1.2 ;
34172: LD_ADDR_VAR 0 10
34176: PUSH
34177: LD_VAR 0 10
34181: PUSH
34182: LD_REAL  1.20000000000000E+0000
34185: MUL
34186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 264
34196: PUSH
34197: LD_INT 6
34199: PUSH
34200: LD_INT 46
34202: PUSH
34203: LD_INT 47
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: IN
34211: IFFALSE 34228
// bpoints := bpoints * 1.2 ;
34213: LD_ADDR_VAR 0 10
34217: PUSH
34218: LD_VAR 0 10
34222: PUSH
34223: LD_REAL  1.20000000000000E+0000
34226: MUL
34227: ST_TO_ADDR
// end ; unit_building :
34228: GO 34242
34230: LD_INT 3
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34241
34238: POP
// ; end ;
34239: GO 34242
34241: POP
// for j = 1 to 3 do
34242: LD_ADDR_VAR 0 7
34246: PUSH
34247: DOUBLE
34248: LD_INT 1
34250: DEC
34251: ST_TO_ADDR
34252: LD_INT 3
34254: PUSH
34255: FOR_TO
34256: IFFALSE 34309
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34258: LD_ADDR_VAR 0 5
34262: PUSH
34263: LD_VAR 0 5
34267: PPUSH
34268: LD_VAR 0 7
34272: PPUSH
34273: LD_VAR 0 5
34277: PUSH
34278: LD_VAR 0 7
34282: ARRAY
34283: PUSH
34284: LD_VAR 0 9
34288: PUSH
34289: LD_VAR 0 7
34293: ARRAY
34294: PUSH
34295: LD_VAR 0 10
34299: MUL
34300: PLUS
34301: PPUSH
34302: CALL_OW 1
34306: ST_TO_ADDR
34307: GO 34255
34309: POP
34310: POP
// end ;
34311: GO 32788
34313: POP
34314: POP
// result := Replace ( result , 4 , tmp ) ;
34315: LD_ADDR_VAR 0 5
34319: PUSH
34320: LD_VAR 0 5
34324: PPUSH
34325: LD_INT 4
34327: PPUSH
34328: LD_VAR 0 8
34332: PPUSH
34333: CALL_OW 1
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 5
34342: RET
// export function DangerAtRange ( unit , range ) ; begin
34343: LD_INT 0
34345: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34346: LD_ADDR_VAR 0 3
34350: PUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 255
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 250
34370: PPUSH
34371: LD_VAR 0 1
34375: PPUSH
34376: CALL_OW 251
34380: PPUSH
34381: LD_VAR 0 2
34385: PPUSH
34386: CALL 32640 0 4
34390: ST_TO_ADDR
// end ;
34391: LD_VAR 0 3
34395: RET
// export function DangerInArea ( side , area ) ; begin
34396: LD_INT 0
34398: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 2
34408: PPUSH
34409: LD_INT 81
34411: PUSH
34412: LD_VAR 0 1
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PPUSH
34421: CALL_OW 70
34425: ST_TO_ADDR
// end ;
34426: LD_VAR 0 3
34430: RET
// export function IsExtension ( b ) ; begin
34431: LD_INT 0
34433: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34434: LD_ADDR_VAR 0 2
34438: PUSH
34439: LD_VAR 0 1
34443: PUSH
34444: LD_INT 23
34446: PUSH
34447: LD_INT 20
34449: PUSH
34450: LD_INT 22
34452: PUSH
34453: LD_INT 17
34455: PUSH
34456: LD_INT 24
34458: PUSH
34459: LD_INT 21
34461: PUSH
34462: LD_INT 19
34464: PUSH
34465: LD_INT 16
34467: PUSH
34468: LD_INT 25
34470: PUSH
34471: LD_INT 18
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: IN
34486: ST_TO_ADDR
// end ;
34487: LD_VAR 0 2
34491: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34492: LD_INT 0
34494: PPUSH
34495: PPUSH
34496: PPUSH
// result := [ ] ;
34497: LD_ADDR_VAR 0 4
34501: PUSH
34502: EMPTY
34503: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34504: LD_ADDR_VAR 0 5
34508: PUSH
34509: LD_VAR 0 2
34513: PPUSH
34514: LD_INT 21
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PPUSH
34524: CALL_OW 70
34528: ST_TO_ADDR
// if not tmp then
34529: LD_VAR 0 5
34533: NOT
34534: IFFALSE 34538
// exit ;
34536: GO 34602
// if checkLink then
34538: LD_VAR 0 3
34542: IFFALSE 34592
// begin for i in tmp do
34544: LD_ADDR_VAR 0 6
34548: PUSH
34549: LD_VAR 0 5
34553: PUSH
34554: FOR_IN
34555: IFFALSE 34590
// if GetBase ( i ) <> base then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 274
34566: PUSH
34567: LD_VAR 0 1
34571: NONEQUAL
34572: IFFALSE 34588
// ComLinkToBase ( base , i ) ;
34574: LD_VAR 0 1
34578: PPUSH
34579: LD_VAR 0 6
34583: PPUSH
34584: CALL_OW 169
34588: GO 34554
34590: POP
34591: POP
// end ; result := tmp ;
34592: LD_ADDR_VAR 0 4
34596: PUSH
34597: LD_VAR 0 5
34601: ST_TO_ADDR
// end ;
34602: LD_VAR 0 4
34606: RET
// export function ComComplete ( units , b ) ; var i ; begin
34607: LD_INT 0
34609: PPUSH
34610: PPUSH
// if not units then
34611: LD_VAR 0 1
34615: NOT
34616: IFFALSE 34620
// exit ;
34618: GO 34710
// for i in units do
34620: LD_ADDR_VAR 0 4
34624: PUSH
34625: LD_VAR 0 1
34629: PUSH
34630: FOR_IN
34631: IFFALSE 34708
// if BuildingStatus ( b ) = bs_build then
34633: LD_VAR 0 2
34637: PPUSH
34638: CALL_OW 461
34642: PUSH
34643: LD_INT 1
34645: EQUAL
34646: IFFALSE 34706
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34648: LD_VAR 0 4
34652: PPUSH
34653: LD_STRING h
34655: PUSH
34656: LD_VAR 0 2
34660: PPUSH
34661: CALL_OW 250
34665: PUSH
34666: LD_VAR 0 2
34670: PPUSH
34671: CALL_OW 251
34675: PUSH
34676: LD_VAR 0 2
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: PUSH
34699: EMPTY
34700: LIST
34701: PPUSH
34702: CALL_OW 446
34706: GO 34630
34708: POP
34709: POP
// end ;
34710: LD_VAR 0 3
34714: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34723: LD_VAR 0 1
34727: NOT
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 263
34738: PUSH
34739: LD_INT 2
34741: NONEQUAL
34742: OR
34743: IFFALSE 34747
// exit ;
34745: GO 35063
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34747: LD_ADDR_VAR 0 6
34751: PUSH
34752: LD_INT 22
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 255
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: LD_INT 30
34774: PUSH
34775: LD_INT 36
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 34
34784: PUSH
34785: LD_INT 31
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PPUSH
34801: CALL_OW 69
34805: ST_TO_ADDR
// if not tmp then
34806: LD_VAR 0 6
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 35063
// result := [ ] ;
34815: LD_ADDR_VAR 0 2
34819: PUSH
34820: EMPTY
34821: ST_TO_ADDR
// for i in tmp do
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_VAR 0 6
34831: PUSH
34832: FOR_IN
34833: IFFALSE 34904
// begin t := UnitsInside ( i ) ;
34835: LD_ADDR_VAR 0 4
34839: PUSH
34840: LD_VAR 0 3
34844: PPUSH
34845: CALL_OW 313
34849: ST_TO_ADDR
// if t then
34850: LD_VAR 0 4
34854: IFFALSE 34902
// for j in t do
34856: LD_ADDR_VAR 0 7
34860: PUSH
34861: LD_VAR 0 4
34865: PUSH
34866: FOR_IN
34867: IFFALSE 34900
// result := Replace ( result , result + 1 , j ) ;
34869: LD_ADDR_VAR 0 2
34873: PUSH
34874: LD_VAR 0 2
34878: PPUSH
34879: LD_VAR 0 2
34883: PUSH
34884: LD_INT 1
34886: PLUS
34887: PPUSH
34888: LD_VAR 0 7
34892: PPUSH
34893: CALL_OW 1
34897: ST_TO_ADDR
34898: GO 34866
34900: POP
34901: POP
// end ;
34902: GO 34832
34904: POP
34905: POP
// if not result then
34906: LD_VAR 0 2
34910: NOT
34911: IFFALSE 34915
// exit ;
34913: GO 35063
// mech := result [ 1 ] ;
34915: LD_ADDR_VAR 0 5
34919: PUSH
34920: LD_VAR 0 2
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: ST_TO_ADDR
// if result > 1 then
34929: LD_VAR 0 2
34933: PUSH
34934: LD_INT 1
34936: GREATER
34937: IFFALSE 35049
// begin for i = 2 to result do
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: DOUBLE
34945: LD_INT 2
34947: DEC
34948: ST_TO_ADDR
34949: LD_VAR 0 2
34953: PUSH
34954: FOR_TO
34955: IFFALSE 35047
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_VAR 0 2
34966: PUSH
34967: LD_VAR 0 3
34971: ARRAY
34972: PPUSH
34973: LD_INT 3
34975: PPUSH
34976: CALL_OW 259
34980: PUSH
34981: LD_VAR 0 2
34985: PUSH
34986: LD_VAR 0 3
34990: ARRAY
34991: PPUSH
34992: CALL_OW 432
34996: MINUS
34997: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34998: LD_VAR 0 4
35002: PUSH
35003: LD_VAR 0 5
35007: PPUSH
35008: LD_INT 3
35010: PPUSH
35011: CALL_OW 259
35015: PUSH
35016: LD_VAR 0 5
35020: PPUSH
35021: CALL_OW 432
35025: MINUS
35026: GREATEREQUAL
35027: IFFALSE 35045
// mech := result [ i ] ;
35029: LD_ADDR_VAR 0 5
35033: PUSH
35034: LD_VAR 0 2
35038: PUSH
35039: LD_VAR 0 3
35043: ARRAY
35044: ST_TO_ADDR
// end ;
35045: GO 34954
35047: POP
35048: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35049: LD_VAR 0 1
35053: PPUSH
35054: LD_VAR 0 5
35058: PPUSH
35059: CALL_OW 135
// end ;
35063: LD_VAR 0 2
35067: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
// result := [ ] ;
35083: LD_ADDR_VAR 0 7
35087: PUSH
35088: EMPTY
35089: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 266
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: IN
35110: NOT
35111: IFFALSE 35115
// exit ;
35113: GO 36749
// if name then
35115: LD_VAR 0 3
35119: IFFALSE 35135
// SetBName ( base_dep , name ) ;
35121: LD_VAR 0 1
35125: PPUSH
35126: LD_VAR 0 3
35130: PPUSH
35131: CALL_OW 500
// base := GetBase ( base_dep ) ;
35135: LD_ADDR_VAR 0 15
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 274
35149: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35150: LD_ADDR_VAR 0 16
35154: PUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 255
35164: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35165: LD_ADDR_VAR 0 17
35169: PUSH
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 248
35179: ST_TO_ADDR
// if sources then
35180: LD_VAR 0 5
35184: IFFALSE 35231
// for i = 1 to 3 do
35186: LD_ADDR_VAR 0 8
35190: PUSH
35191: DOUBLE
35192: LD_INT 1
35194: DEC
35195: ST_TO_ADDR
35196: LD_INT 3
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35229
// AddResourceType ( base , i , sources [ i ] ) ;
35202: LD_VAR 0 15
35206: PPUSH
35207: LD_VAR 0 8
35211: PPUSH
35212: LD_VAR 0 5
35216: PUSH
35217: LD_VAR 0 8
35221: ARRAY
35222: PPUSH
35223: CALL_OW 276
35227: GO 35199
35229: POP
35230: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35231: LD_ADDR_VAR 0 18
35235: PUSH
35236: LD_VAR 0 15
35240: PPUSH
35241: LD_VAR 0 2
35245: PPUSH
35246: LD_INT 1
35248: PPUSH
35249: CALL 34492 0 3
35253: ST_TO_ADDR
// InitHc ;
35254: CALL_OW 19
// InitUc ;
35258: CALL_OW 18
// uc_side := side ;
35262: LD_ADDR_OWVAR 20
35266: PUSH
35267: LD_VAR 0 16
35271: ST_TO_ADDR
// uc_nation := nation ;
35272: LD_ADDR_OWVAR 21
35276: PUSH
35277: LD_VAR 0 17
35281: ST_TO_ADDR
// if buildings then
35282: LD_VAR 0 18
35286: IFFALSE 36608
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35288: LD_ADDR_VAR 0 19
35292: PUSH
35293: LD_VAR 0 18
35297: PPUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 30
35303: PUSH
35304: LD_INT 29
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 30
35313: PUSH
35314: LD_INT 30
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: PPUSH
35326: CALL_OW 72
35330: ST_TO_ADDR
// if tmp then
35331: LD_VAR 0 19
35335: IFFALSE 35383
// for i in tmp do
35337: LD_ADDR_VAR 0 8
35341: PUSH
35342: LD_VAR 0 19
35346: PUSH
35347: FOR_IN
35348: IFFALSE 35381
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35350: LD_VAR 0 8
35354: PPUSH
35355: CALL_OW 250
35359: PPUSH
35360: LD_VAR 0 8
35364: PPUSH
35365: CALL_OW 251
35369: PPUSH
35370: LD_VAR 0 16
35374: PPUSH
35375: CALL_OW 441
35379: GO 35347
35381: POP
35382: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35383: LD_VAR 0 18
35387: PPUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 30
35393: PUSH
35394: LD_INT 32
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 30
35403: PUSH
35404: LD_INT 33
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: PPUSH
35416: CALL_OW 72
35420: IFFALSE 35508
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35422: LD_ADDR_VAR 0 8
35426: PUSH
35427: LD_VAR 0 18
35431: PPUSH
35432: LD_INT 2
35434: PUSH
35435: LD_INT 30
35437: PUSH
35438: LD_INT 32
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 30
35447: PUSH
35448: LD_INT 33
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: PPUSH
35460: CALL_OW 72
35464: PUSH
35465: FOR_IN
35466: IFFALSE 35506
// begin if not GetBWeapon ( i ) then
35468: LD_VAR 0 8
35472: PPUSH
35473: CALL_OW 269
35477: NOT
35478: IFFALSE 35504
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35480: LD_VAR 0 8
35484: PPUSH
35485: LD_VAR 0 8
35489: PPUSH
35490: LD_VAR 0 2
35494: PPUSH
35495: CALL 36754 0 2
35499: PPUSH
35500: CALL_OW 431
// end ;
35504: GO 35465
35506: POP
35507: POP
// end ; for i = 1 to personel do
35508: LD_ADDR_VAR 0 8
35512: PUSH
35513: DOUBLE
35514: LD_INT 1
35516: DEC
35517: ST_TO_ADDR
35518: LD_VAR 0 6
35522: PUSH
35523: FOR_TO
35524: IFFALSE 36588
// begin if i > 4 then
35526: LD_VAR 0 8
35530: PUSH
35531: LD_INT 4
35533: GREATER
35534: IFFALSE 35538
// break ;
35536: GO 36588
// case i of 1 :
35538: LD_VAR 0 8
35542: PUSH
35543: LD_INT 1
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35551
35549: GO 35631
35551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35552: LD_ADDR_VAR 0 12
35556: PUSH
35557: LD_VAR 0 18
35561: PPUSH
35562: LD_INT 22
35564: PUSH
35565: LD_VAR 0 16
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 58
35576: PUSH
35577: EMPTY
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 30
35585: PUSH
35586: LD_INT 32
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 30
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 30
35605: PUSH
35606: LD_INT 5
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: PPUSH
35624: CALL_OW 72
35628: ST_TO_ADDR
35629: GO 35853
35631: LD_INT 2
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35701
35639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35640: LD_ADDR_VAR 0 12
35644: PUSH
35645: LD_VAR 0 18
35649: PPUSH
35650: LD_INT 22
35652: PUSH
35653: LD_VAR 0 16
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: LD_INT 30
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 30
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PPUSH
35694: CALL_OW 72
35698: ST_TO_ADDR
35699: GO 35853
35701: LD_INT 3
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35709
35707: GO 35771
35709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35710: LD_ADDR_VAR 0 12
35714: PUSH
35715: LD_VAR 0 18
35719: PPUSH
35720: LD_INT 22
35722: PUSH
35723: LD_VAR 0 16
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 30
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 30
35747: PUSH
35748: LD_INT 3
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PPUSH
35764: CALL_OW 72
35768: ST_TO_ADDR
35769: GO 35853
35771: LD_INT 4
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35852
35779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35780: LD_ADDR_VAR 0 12
35784: PUSH
35785: LD_VAR 0 18
35789: PPUSH
35790: LD_INT 22
35792: PUSH
35793: LD_VAR 0 16
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 30
35807: PUSH
35808: LD_INT 6
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: LD_INT 7
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 30
35827: PUSH
35828: LD_INT 8
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PPUSH
35845: CALL_OW 72
35849: ST_TO_ADDR
35850: GO 35853
35852: POP
// if i = 1 then
35853: LD_VAR 0 8
35857: PUSH
35858: LD_INT 1
35860: EQUAL
35861: IFFALSE 35972
// begin tmp := [ ] ;
35863: LD_ADDR_VAR 0 19
35867: PUSH
35868: EMPTY
35869: ST_TO_ADDR
// for j in f do
35870: LD_ADDR_VAR 0 9
35874: PUSH
35875: LD_VAR 0 12
35879: PUSH
35880: FOR_IN
35881: IFFALSE 35954
// if GetBType ( j ) = b_bunker then
35883: LD_VAR 0 9
35887: PPUSH
35888: CALL_OW 266
35892: PUSH
35893: LD_INT 32
35895: EQUAL
35896: IFFALSE 35923
// tmp := Insert ( tmp , 1 , j ) else
35898: LD_ADDR_VAR 0 19
35902: PUSH
35903: LD_VAR 0 19
35907: PPUSH
35908: LD_INT 1
35910: PPUSH
35911: LD_VAR 0 9
35915: PPUSH
35916: CALL_OW 2
35920: ST_TO_ADDR
35921: GO 35952
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35923: LD_ADDR_VAR 0 19
35927: PUSH
35928: LD_VAR 0 19
35932: PPUSH
35933: LD_VAR 0 19
35937: PUSH
35938: LD_INT 1
35940: PLUS
35941: PPUSH
35942: LD_VAR 0 9
35946: PPUSH
35947: CALL_OW 2
35951: ST_TO_ADDR
35952: GO 35880
35954: POP
35955: POP
// if tmp then
35956: LD_VAR 0 19
35960: IFFALSE 35972
// f := tmp ;
35962: LD_ADDR_VAR 0 12
35966: PUSH
35967: LD_VAR 0 19
35971: ST_TO_ADDR
// end ; x := personel [ i ] ;
35972: LD_ADDR_VAR 0 13
35976: PUSH
35977: LD_VAR 0 6
35981: PUSH
35982: LD_VAR 0 8
35986: ARRAY
35987: ST_TO_ADDR
// if x = - 1 then
35988: LD_VAR 0 13
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: EQUAL
35997: IFFALSE 36206
// begin for j in f do
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_VAR 0 12
36008: PUSH
36009: FOR_IN
36010: IFFALSE 36202
// repeat InitHc ;
36012: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36016: LD_VAR 0 9
36020: PPUSH
36021: CALL_OW 266
36025: PUSH
36026: LD_INT 5
36028: EQUAL
36029: IFFALSE 36099
// begin if UnitsInside ( j ) < 3 then
36031: LD_VAR 0 9
36035: PPUSH
36036: CALL_OW 313
36040: PUSH
36041: LD_INT 3
36043: LESS
36044: IFFALSE 36080
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36046: LD_INT 0
36048: PPUSH
36049: LD_INT 5
36051: PUSH
36052: LD_INT 8
36054: PUSH
36055: LD_INT 9
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: LD_VAR 0 17
36067: ARRAY
36068: PPUSH
36069: LD_VAR 0 4
36073: PPUSH
36074: CALL_OW 380
36078: GO 36097
// PrepareHuman ( false , i , skill ) ;
36080: LD_INT 0
36082: PPUSH
36083: LD_VAR 0 8
36087: PPUSH
36088: LD_VAR 0 4
36092: PPUSH
36093: CALL_OW 380
// end else
36097: GO 36116
// PrepareHuman ( false , i , skill ) ;
36099: LD_INT 0
36101: PPUSH
36102: LD_VAR 0 8
36106: PPUSH
36107: LD_VAR 0 4
36111: PPUSH
36112: CALL_OW 380
// un := CreateHuman ;
36116: LD_ADDR_VAR 0 14
36120: PUSH
36121: CALL_OW 44
36125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36126: LD_ADDR_VAR 0 7
36130: PUSH
36131: LD_VAR 0 7
36135: PPUSH
36136: LD_INT 1
36138: PPUSH
36139: LD_VAR 0 14
36143: PPUSH
36144: CALL_OW 2
36148: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36149: LD_VAR 0 14
36153: PPUSH
36154: LD_VAR 0 9
36158: PPUSH
36159: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36163: LD_VAR 0 9
36167: PPUSH
36168: CALL_OW 313
36172: PUSH
36173: LD_INT 6
36175: EQUAL
36176: PUSH
36177: LD_VAR 0 9
36181: PPUSH
36182: CALL_OW 266
36186: PUSH
36187: LD_INT 32
36189: PUSH
36190: LD_INT 31
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: IN
36197: OR
36198: IFFALSE 36012
36200: GO 36009
36202: POP
36203: POP
// end else
36204: GO 36586
// for j = 1 to x do
36206: LD_ADDR_VAR 0 9
36210: PUSH
36211: DOUBLE
36212: LD_INT 1
36214: DEC
36215: ST_TO_ADDR
36216: LD_VAR 0 13
36220: PUSH
36221: FOR_TO
36222: IFFALSE 36584
// begin InitHc ;
36224: CALL_OW 19
// if not f then
36228: LD_VAR 0 12
36232: NOT
36233: IFFALSE 36322
// begin PrepareHuman ( false , i , skill ) ;
36235: LD_INT 0
36237: PPUSH
36238: LD_VAR 0 8
36242: PPUSH
36243: LD_VAR 0 4
36247: PPUSH
36248: CALL_OW 380
// un := CreateHuman ;
36252: LD_ADDR_VAR 0 14
36256: PUSH
36257: CALL_OW 44
36261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36262: LD_ADDR_VAR 0 7
36266: PUSH
36267: LD_VAR 0 7
36271: PPUSH
36272: LD_INT 1
36274: PPUSH
36275: LD_VAR 0 14
36279: PPUSH
36280: CALL_OW 2
36284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36285: LD_VAR 0 14
36289: PPUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 250
36299: PPUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 251
36309: PPUSH
36310: LD_INT 10
36312: PPUSH
36313: LD_INT 0
36315: PPUSH
36316: CALL_OW 50
// continue ;
36320: GO 36221
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36322: LD_VAR 0 12
36326: PUSH
36327: LD_INT 1
36329: ARRAY
36330: PPUSH
36331: CALL_OW 313
36335: PUSH
36336: LD_VAR 0 12
36340: PUSH
36341: LD_INT 1
36343: ARRAY
36344: PPUSH
36345: CALL_OW 266
36349: PUSH
36350: LD_INT 32
36352: PUSH
36353: LD_INT 31
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: IN
36360: AND
36361: PUSH
36362: LD_VAR 0 12
36366: PUSH
36367: LD_INT 1
36369: ARRAY
36370: PPUSH
36371: CALL_OW 313
36375: PUSH
36376: LD_INT 6
36378: EQUAL
36379: OR
36380: IFFALSE 36400
// f := Delete ( f , 1 ) ;
36382: LD_ADDR_VAR 0 12
36386: PUSH
36387: LD_VAR 0 12
36391: PPUSH
36392: LD_INT 1
36394: PPUSH
36395: CALL_OW 3
36399: ST_TO_ADDR
// if not f then
36400: LD_VAR 0 12
36404: NOT
36405: IFFALSE 36423
// begin x := x + 2 ;
36407: LD_ADDR_VAR 0 13
36411: PUSH
36412: LD_VAR 0 13
36416: PUSH
36417: LD_INT 2
36419: PLUS
36420: ST_TO_ADDR
// continue ;
36421: GO 36221
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36423: LD_VAR 0 12
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PPUSH
36432: CALL_OW 266
36436: PUSH
36437: LD_INT 5
36439: EQUAL
36440: IFFALSE 36514
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36442: LD_VAR 0 12
36446: PUSH
36447: LD_INT 1
36449: ARRAY
36450: PPUSH
36451: CALL_OW 313
36455: PUSH
36456: LD_INT 3
36458: LESS
36459: IFFALSE 36495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36461: LD_INT 0
36463: PPUSH
36464: LD_INT 5
36466: PUSH
36467: LD_INT 8
36469: PUSH
36470: LD_INT 9
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: PUSH
36478: LD_VAR 0 17
36482: ARRAY
36483: PPUSH
36484: LD_VAR 0 4
36488: PPUSH
36489: CALL_OW 380
36493: GO 36512
// PrepareHuman ( false , i , skill ) ;
36495: LD_INT 0
36497: PPUSH
36498: LD_VAR 0 8
36502: PPUSH
36503: LD_VAR 0 4
36507: PPUSH
36508: CALL_OW 380
// end else
36512: GO 36531
// PrepareHuman ( false , i , skill ) ;
36514: LD_INT 0
36516: PPUSH
36517: LD_VAR 0 8
36521: PPUSH
36522: LD_VAR 0 4
36526: PPUSH
36527: CALL_OW 380
// un := CreateHuman ;
36531: LD_ADDR_VAR 0 14
36535: PUSH
36536: CALL_OW 44
36540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36541: LD_ADDR_VAR 0 7
36545: PUSH
36546: LD_VAR 0 7
36550: PPUSH
36551: LD_INT 1
36553: PPUSH
36554: LD_VAR 0 14
36558: PPUSH
36559: CALL_OW 2
36563: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36564: LD_VAR 0 14
36568: PPUSH
36569: LD_VAR 0 12
36573: PUSH
36574: LD_INT 1
36576: ARRAY
36577: PPUSH
36578: CALL_OW 52
// end ;
36582: GO 36221
36584: POP
36585: POP
// end ;
36586: GO 35523
36588: POP
36589: POP
// result := result ^ buildings ;
36590: LD_ADDR_VAR 0 7
36594: PUSH
36595: LD_VAR 0 7
36599: PUSH
36600: LD_VAR 0 18
36604: ADD
36605: ST_TO_ADDR
// end else
36606: GO 36749
// begin for i = 1 to personel do
36608: LD_ADDR_VAR 0 8
36612: PUSH
36613: DOUBLE
36614: LD_INT 1
36616: DEC
36617: ST_TO_ADDR
36618: LD_VAR 0 6
36622: PUSH
36623: FOR_TO
36624: IFFALSE 36747
// begin if i > 4 then
36626: LD_VAR 0 8
36630: PUSH
36631: LD_INT 4
36633: GREATER
36634: IFFALSE 36638
// break ;
36636: GO 36747
// x := personel [ i ] ;
36638: LD_ADDR_VAR 0 13
36642: PUSH
36643: LD_VAR 0 6
36647: PUSH
36648: LD_VAR 0 8
36652: ARRAY
36653: ST_TO_ADDR
// if x = - 1 then
36654: LD_VAR 0 13
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: EQUAL
36663: IFFALSE 36667
// continue ;
36665: GO 36623
// PrepareHuman ( false , i , skill ) ;
36667: LD_INT 0
36669: PPUSH
36670: LD_VAR 0 8
36674: PPUSH
36675: LD_VAR 0 4
36679: PPUSH
36680: CALL_OW 380
// un := CreateHuman ;
36684: LD_ADDR_VAR 0 14
36688: PUSH
36689: CALL_OW 44
36693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36694: LD_VAR 0 14
36698: PPUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 250
36708: PPUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: CALL_OW 251
36718: PPUSH
36719: LD_INT 10
36721: PPUSH
36722: LD_INT 0
36724: PPUSH
36725: CALL_OW 50
// result := result ^ un ;
36729: LD_ADDR_VAR 0 7
36733: PUSH
36734: LD_VAR 0 7
36738: PUSH
36739: LD_VAR 0 14
36743: ADD
36744: ST_TO_ADDR
// end ;
36745: GO 36623
36747: POP
36748: POP
// end ; end ;
36749: LD_VAR 0 7
36753: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36754: LD_INT 0
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
// result := false ;
36772: LD_ADDR_VAR 0 3
36776: PUSH
36777: LD_INT 0
36779: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36780: LD_VAR 0 1
36784: NOT
36785: PUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 266
36795: PUSH
36796: LD_INT 32
36798: PUSH
36799: LD_INT 33
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: IN
36806: NOT
36807: OR
36808: IFFALSE 36812
// exit ;
36810: GO 37921
// nat := GetNation ( tower ) ;
36812: LD_ADDR_VAR 0 12
36816: PUSH
36817: LD_VAR 0 1
36821: PPUSH
36822: CALL_OW 248
36826: ST_TO_ADDR
// side := GetSide ( tower ) ;
36827: LD_ADDR_VAR 0 16
36831: PUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: CALL_OW 255
36841: ST_TO_ADDR
// x := GetX ( tower ) ;
36842: LD_ADDR_VAR 0 10
36846: PUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 250
36856: ST_TO_ADDR
// y := GetY ( tower ) ;
36857: LD_ADDR_VAR 0 11
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 251
36871: ST_TO_ADDR
// if not x or not y then
36872: LD_VAR 0 10
36876: NOT
36877: PUSH
36878: LD_VAR 0 11
36882: NOT
36883: OR
36884: IFFALSE 36888
// exit ;
36886: GO 37921
// weapon := 0 ;
36888: LD_ADDR_VAR 0 18
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// fac_list := [ ] ;
36896: LD_ADDR_VAR 0 17
36900: PUSH
36901: EMPTY
36902: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 274
36917: PPUSH
36918: LD_VAR 0 2
36922: PPUSH
36923: LD_INT 0
36925: PPUSH
36926: CALL 34492 0 3
36930: PPUSH
36931: LD_INT 30
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PPUSH
36941: CALL_OW 72
36945: ST_TO_ADDR
// if not factories then
36946: LD_VAR 0 6
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37921
// for i in factories do
36955: LD_ADDR_VAR 0 8
36959: PUSH
36960: LD_VAR 0 6
36964: PUSH
36965: FOR_IN
36966: IFFALSE 36991
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36968: LD_ADDR_VAR 0 17
36972: PUSH
36973: LD_VAR 0 17
36977: PUSH
36978: LD_VAR 0 8
36982: PPUSH
36983: CALL_OW 478
36987: UNION
36988: ST_TO_ADDR
36989: GO 36965
36991: POP
36992: POP
// if not fac_list then
36993: LD_VAR 0 17
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37921
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37002: LD_ADDR_VAR 0 5
37006: PUSH
37007: LD_INT 4
37009: PUSH
37010: LD_INT 5
37012: PUSH
37013: LD_INT 9
37015: PUSH
37016: LD_INT 10
37018: PUSH
37019: LD_INT 6
37021: PUSH
37022: LD_INT 7
37024: PUSH
37025: LD_INT 11
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 27
37039: PUSH
37040: LD_INT 28
37042: PUSH
37043: LD_INT 26
37045: PUSH
37046: LD_INT 30
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 43
37057: PUSH
37058: LD_INT 44
37060: PUSH
37061: LD_INT 46
37063: PUSH
37064: LD_INT 45
37066: PUSH
37067: LD_INT 47
37069: PUSH
37070: LD_INT 49
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: PUSH
37086: LD_VAR 0 12
37090: ARRAY
37091: ST_TO_ADDR
// list := list isect fac_list ;
37092: LD_ADDR_VAR 0 5
37096: PUSH
37097: LD_VAR 0 5
37101: PUSH
37102: LD_VAR 0 17
37106: ISECT
37107: ST_TO_ADDR
// if not list then
37108: LD_VAR 0 5
37112: NOT
37113: IFFALSE 37117
// exit ;
37115: GO 37921
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37117: LD_VAR 0 12
37121: PUSH
37122: LD_INT 3
37124: EQUAL
37125: PUSH
37126: LD_INT 49
37128: PUSH
37129: LD_VAR 0 5
37133: IN
37134: AND
37135: PUSH
37136: LD_INT 31
37138: PPUSH
37139: LD_VAR 0 16
37143: PPUSH
37144: CALL_OW 321
37148: PUSH
37149: LD_INT 2
37151: EQUAL
37152: AND
37153: IFFALSE 37213
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37155: LD_INT 22
37157: PUSH
37158: LD_VAR 0 16
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 35
37169: PUSH
37170: LD_INT 49
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 91
37179: PUSH
37180: LD_VAR 0 1
37184: PUSH
37185: LD_INT 10
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PPUSH
37198: CALL_OW 69
37202: NOT
37203: IFFALSE 37213
// weapon := ru_time_lapser ;
37205: LD_ADDR_VAR 0 18
37209: PUSH
37210: LD_INT 49
37212: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37213: LD_VAR 0 12
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: IN
37228: PUSH
37229: LD_INT 11
37231: PUSH
37232: LD_VAR 0 5
37236: IN
37237: PUSH
37238: LD_INT 30
37240: PUSH
37241: LD_VAR 0 5
37245: IN
37246: OR
37247: AND
37248: PUSH
37249: LD_INT 6
37251: PPUSH
37252: LD_VAR 0 16
37256: PPUSH
37257: CALL_OW 321
37261: PUSH
37262: LD_INT 2
37264: EQUAL
37265: AND
37266: IFFALSE 37431
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37268: LD_INT 22
37270: PUSH
37271: LD_VAR 0 16
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 35
37285: PUSH
37286: LD_INT 11
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 35
37295: PUSH
37296: LD_INT 30
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 91
37310: PUSH
37311: LD_VAR 0 1
37315: PUSH
37316: LD_INT 18
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: PPUSH
37329: CALL_OW 69
37333: NOT
37334: PUSH
37335: LD_INT 22
37337: PUSH
37338: LD_VAR 0 16
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 30
37352: PUSH
37353: LD_INT 32
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 30
37362: PUSH
37363: LD_INT 33
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 91
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_INT 12
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: PPUSH
37399: CALL_OW 69
37403: PUSH
37404: LD_INT 2
37406: GREATER
37407: AND
37408: IFFALSE 37431
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37410: LD_ADDR_VAR 0 18
37414: PUSH
37415: LD_INT 11
37417: PUSH
37418: LD_INT 30
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_VAR 0 12
37429: ARRAY
37430: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37431: LD_VAR 0 18
37435: NOT
37436: PUSH
37437: LD_INT 40
37439: PPUSH
37440: LD_VAR 0 16
37444: PPUSH
37445: CALL_OW 321
37449: PUSH
37450: LD_INT 2
37452: EQUAL
37453: AND
37454: PUSH
37455: LD_INT 7
37457: PUSH
37458: LD_VAR 0 5
37462: IN
37463: PUSH
37464: LD_INT 28
37466: PUSH
37467: LD_VAR 0 5
37471: IN
37472: OR
37473: PUSH
37474: LD_INT 45
37476: PUSH
37477: LD_VAR 0 5
37481: IN
37482: OR
37483: AND
37484: IFFALSE 37738
// begin hex := GetHexInfo ( x , y ) ;
37486: LD_ADDR_VAR 0 4
37490: PUSH
37491: LD_VAR 0 10
37495: PPUSH
37496: LD_VAR 0 11
37500: PPUSH
37501: CALL_OW 546
37505: ST_TO_ADDR
// if hex [ 1 ] then
37506: LD_VAR 0 4
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: IFFALSE 37518
// exit ;
37516: GO 37921
// height := hex [ 2 ] ;
37518: LD_ADDR_VAR 0 15
37522: PUSH
37523: LD_VAR 0 4
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37532: LD_ADDR_VAR 0 14
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: LD_INT 5
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// for i in tmp do
37555: LD_ADDR_VAR 0 8
37559: PUSH
37560: LD_VAR 0 14
37564: PUSH
37565: FOR_IN
37566: IFFALSE 37736
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37568: LD_ADDR_VAR 0 9
37572: PUSH
37573: LD_VAR 0 10
37577: PPUSH
37578: LD_VAR 0 8
37582: PPUSH
37583: LD_INT 5
37585: PPUSH
37586: CALL_OW 272
37590: PUSH
37591: LD_VAR 0 11
37595: PPUSH
37596: LD_VAR 0 8
37600: PPUSH
37601: LD_INT 5
37603: PPUSH
37604: CALL_OW 273
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37613: LD_VAR 0 9
37617: PUSH
37618: LD_INT 1
37620: ARRAY
37621: PPUSH
37622: LD_VAR 0 9
37626: PUSH
37627: LD_INT 2
37629: ARRAY
37630: PPUSH
37631: CALL_OW 488
37635: IFFALSE 37734
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_VAR 0 9
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: LD_VAR 0 9
37655: PUSH
37656: LD_INT 2
37658: ARRAY
37659: PPUSH
37660: CALL_OW 546
37664: ST_TO_ADDR
// if hex [ 1 ] then
37665: LD_VAR 0 4
37669: PUSH
37670: LD_INT 1
37672: ARRAY
37673: IFFALSE 37677
// continue ;
37675: GO 37565
// h := hex [ 2 ] ;
37677: LD_ADDR_VAR 0 13
37681: PUSH
37682: LD_VAR 0 4
37686: PUSH
37687: LD_INT 2
37689: ARRAY
37690: ST_TO_ADDR
// if h + 7 < height then
37691: LD_VAR 0 13
37695: PUSH
37696: LD_INT 7
37698: PLUS
37699: PUSH
37700: LD_VAR 0 15
37704: LESS
37705: IFFALSE 37734
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37707: LD_ADDR_VAR 0 18
37711: PUSH
37712: LD_INT 7
37714: PUSH
37715: LD_INT 28
37717: PUSH
37718: LD_INT 45
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: PUSH
37726: LD_VAR 0 12
37730: ARRAY
37731: ST_TO_ADDR
// break ;
37732: GO 37736
// end ; end ; end ;
37734: GO 37565
37736: POP
37737: POP
// end ; if not weapon then
37738: LD_VAR 0 18
37742: NOT
37743: IFFALSE 37803
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37745: LD_ADDR_VAR 0 5
37749: PUSH
37750: LD_VAR 0 5
37754: PUSH
37755: LD_INT 11
37757: PUSH
37758: LD_INT 30
37760: PUSH
37761: LD_INT 49
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: DIFF
37769: ST_TO_ADDR
// if not list then
37770: LD_VAR 0 5
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37921
// weapon := list [ rand ( 1 , list ) ] ;
37779: LD_ADDR_VAR 0 18
37783: PUSH
37784: LD_VAR 0 5
37788: PUSH
37789: LD_INT 1
37791: PPUSH
37792: LD_VAR 0 5
37796: PPUSH
37797: CALL_OW 12
37801: ARRAY
37802: ST_TO_ADDR
// end ; if weapon then
37803: LD_VAR 0 18
37807: IFFALSE 37921
// begin tmp := CostOfWeapon ( weapon ) ;
37809: LD_ADDR_VAR 0 14
37813: PUSH
37814: LD_VAR 0 18
37818: PPUSH
37819: CALL_OW 451
37823: ST_TO_ADDR
// j := GetBase ( tower ) ;
37824: LD_ADDR_VAR 0 9
37828: PUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 274
37838: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37839: LD_VAR 0 9
37843: PPUSH
37844: LD_INT 1
37846: PPUSH
37847: CALL_OW 275
37851: PUSH
37852: LD_VAR 0 14
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: GREATEREQUAL
37861: PUSH
37862: LD_VAR 0 9
37866: PPUSH
37867: LD_INT 2
37869: PPUSH
37870: CALL_OW 275
37874: PUSH
37875: LD_VAR 0 14
37879: PUSH
37880: LD_INT 2
37882: ARRAY
37883: GREATEREQUAL
37884: AND
37885: PUSH
37886: LD_VAR 0 9
37890: PPUSH
37891: LD_INT 3
37893: PPUSH
37894: CALL_OW 275
37898: PUSH
37899: LD_VAR 0 14
37903: PUSH
37904: LD_INT 3
37906: ARRAY
37907: GREATEREQUAL
37908: AND
37909: IFFALSE 37921
// result := weapon ;
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_VAR 0 18
37920: ST_TO_ADDR
// end ; end ;
37921: LD_VAR 0 3
37925: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37926: LD_INT 0
37928: PPUSH
37929: PPUSH
// result := true ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_INT 1
37937: ST_TO_ADDR
// if array1 = array2 then
37938: LD_VAR 0 1
37942: PUSH
37943: LD_VAR 0 2
37947: EQUAL
37948: IFFALSE 38008
// begin for i = 1 to array1 do
37950: LD_ADDR_VAR 0 4
37954: PUSH
37955: DOUBLE
37956: LD_INT 1
37958: DEC
37959: ST_TO_ADDR
37960: LD_VAR 0 1
37964: PUSH
37965: FOR_TO
37966: IFFALSE 38004
// if array1 [ i ] <> array2 [ i ] then
37968: LD_VAR 0 1
37972: PUSH
37973: LD_VAR 0 4
37977: ARRAY
37978: PUSH
37979: LD_VAR 0 2
37983: PUSH
37984: LD_VAR 0 4
37988: ARRAY
37989: NONEQUAL
37990: IFFALSE 38002
// begin result := false ;
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: LD_INT 0
37999: ST_TO_ADDR
// break ;
38000: GO 38004
// end ;
38002: GO 37965
38004: POP
38005: POP
// end else
38006: GO 38016
// result := false ;
38008: LD_ADDR_VAR 0 3
38012: PUSH
38013: LD_INT 0
38015: ST_TO_ADDR
// end ;
38016: LD_VAR 0 3
38020: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
// if not array1 or not array2 then
38025: LD_VAR 0 1
38029: NOT
38030: PUSH
38031: LD_VAR 0 2
38035: NOT
38036: OR
38037: IFFALSE 38041
// exit ;
38039: GO 38105
// result := true ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_INT 1
38048: ST_TO_ADDR
// for i = 1 to array1 do
38049: LD_ADDR_VAR 0 4
38053: PUSH
38054: DOUBLE
38055: LD_INT 1
38057: DEC
38058: ST_TO_ADDR
38059: LD_VAR 0 1
38063: PUSH
38064: FOR_TO
38065: IFFALSE 38103
// if array1 [ i ] <> array2 [ i ] then
38067: LD_VAR 0 1
38071: PUSH
38072: LD_VAR 0 4
38076: ARRAY
38077: PUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 4
38087: ARRAY
38088: NONEQUAL
38089: IFFALSE 38101
// begin result := false ;
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_INT 0
38098: ST_TO_ADDR
// break ;
38099: GO 38103
// end ;
38101: GO 38064
38103: POP
38104: POP
// end ;
38105: LD_VAR 0 3
38109: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
38114: PPUSH
// pom := GetBase ( fac ) ;
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL_OW 274
38129: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38130: LD_ADDR_VAR 0 4
38134: PUSH
38135: LD_VAR 0 2
38139: PUSH
38140: LD_INT 1
38142: ARRAY
38143: PPUSH
38144: LD_VAR 0 2
38148: PUSH
38149: LD_INT 2
38151: ARRAY
38152: PPUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 3
38160: ARRAY
38161: PPUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_INT 4
38169: ARRAY
38170: PPUSH
38171: CALL_OW 449
38175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38176: LD_ADDR_VAR 0 3
38180: PUSH
38181: LD_VAR 0 5
38185: PPUSH
38186: LD_INT 1
38188: PPUSH
38189: CALL_OW 275
38193: PUSH
38194: LD_VAR 0 4
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: GREATEREQUAL
38203: PUSH
38204: LD_VAR 0 5
38208: PPUSH
38209: LD_INT 2
38211: PPUSH
38212: CALL_OW 275
38216: PUSH
38217: LD_VAR 0 4
38221: PUSH
38222: LD_INT 2
38224: ARRAY
38225: GREATEREQUAL
38226: AND
38227: PUSH
38228: LD_VAR 0 5
38232: PPUSH
38233: LD_INT 3
38235: PPUSH
38236: CALL_OW 275
38240: PUSH
38241: LD_VAR 0 4
38245: PUSH
38246: LD_INT 3
38248: ARRAY
38249: GREATEREQUAL
38250: AND
38251: ST_TO_ADDR
// end ;
38252: LD_VAR 0 3
38256: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38257: LD_INT 0
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
// pom := GetBase ( building ) ;
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 274
38277: ST_TO_ADDR
// if not pom then
38278: LD_VAR 0 3
38282: NOT
38283: IFFALSE 38287
// exit ;
38285: GO 38457
// btype := GetBType ( building ) ;
38287: LD_ADDR_VAR 0 5
38291: PUSH
38292: LD_VAR 0 1
38296: PPUSH
38297: CALL_OW 266
38301: ST_TO_ADDR
// if btype = b_armoury then
38302: LD_VAR 0 5
38306: PUSH
38307: LD_INT 4
38309: EQUAL
38310: IFFALSE 38320
// btype := b_barracks ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_INT 5
38319: ST_TO_ADDR
// if btype = b_depot then
38320: LD_VAR 0 5
38324: PUSH
38325: LD_INT 0
38327: EQUAL
38328: IFFALSE 38338
// btype := b_warehouse ;
38330: LD_ADDR_VAR 0 5
38334: PUSH
38335: LD_INT 1
38337: ST_TO_ADDR
// if btype = b_workshop then
38338: LD_VAR 0 5
38342: PUSH
38343: LD_INT 2
38345: EQUAL
38346: IFFALSE 38356
// btype := b_factory ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_INT 3
38355: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38356: LD_ADDR_VAR 0 4
38360: PUSH
38361: LD_VAR 0 5
38365: PPUSH
38366: LD_VAR 0 1
38370: PPUSH
38371: CALL_OW 248
38375: PPUSH
38376: CALL_OW 450
38380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38381: LD_ADDR_VAR 0 2
38385: PUSH
38386: LD_VAR 0 3
38390: PPUSH
38391: LD_INT 1
38393: PPUSH
38394: CALL_OW 275
38398: PUSH
38399: LD_VAR 0 4
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: GREATEREQUAL
38408: PUSH
38409: LD_VAR 0 3
38413: PPUSH
38414: LD_INT 2
38416: PPUSH
38417: CALL_OW 275
38421: PUSH
38422: LD_VAR 0 4
38426: PUSH
38427: LD_INT 2
38429: ARRAY
38430: GREATEREQUAL
38431: AND
38432: PUSH
38433: LD_VAR 0 3
38437: PPUSH
38438: LD_INT 3
38440: PPUSH
38441: CALL_OW 275
38445: PUSH
38446: LD_VAR 0 4
38450: PUSH
38451: LD_INT 3
38453: ARRAY
38454: GREATEREQUAL
38455: AND
38456: ST_TO_ADDR
// end ;
38457: LD_VAR 0 2
38461: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38462: LD_INT 0
38464: PPUSH
38465: PPUSH
38466: PPUSH
// pom := GetBase ( building ) ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 274
38481: ST_TO_ADDR
// if not pom then
38482: LD_VAR 0 4
38486: NOT
38487: IFFALSE 38491
// exit ;
38489: GO 38592
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38491: LD_ADDR_VAR 0 5
38495: PUSH
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 248
38510: PPUSH
38511: CALL_OW 450
38515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38516: LD_ADDR_VAR 0 3
38520: PUSH
38521: LD_VAR 0 4
38525: PPUSH
38526: LD_INT 1
38528: PPUSH
38529: CALL_OW 275
38533: PUSH
38534: LD_VAR 0 5
38538: PUSH
38539: LD_INT 1
38541: ARRAY
38542: GREATEREQUAL
38543: PUSH
38544: LD_VAR 0 4
38548: PPUSH
38549: LD_INT 2
38551: PPUSH
38552: CALL_OW 275
38556: PUSH
38557: LD_VAR 0 5
38561: PUSH
38562: LD_INT 2
38564: ARRAY
38565: GREATEREQUAL
38566: AND
38567: PUSH
38568: LD_VAR 0 4
38572: PPUSH
38573: LD_INT 3
38575: PPUSH
38576: CALL_OW 275
38580: PUSH
38581: LD_VAR 0 5
38585: PUSH
38586: LD_INT 3
38588: ARRAY
38589: GREATEREQUAL
38590: AND
38591: ST_TO_ADDR
// end ;
38592: LD_VAR 0 3
38596: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38597: LD_INT 0
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
// result := false ;
38610: LD_ADDR_VAR 0 8
38614: PUSH
38615: LD_INT 0
38617: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38618: LD_VAR 0 5
38622: NOT
38623: PUSH
38624: LD_VAR 0 1
38628: NOT
38629: OR
38630: PUSH
38631: LD_VAR 0 2
38635: NOT
38636: OR
38637: PUSH
38638: LD_VAR 0 3
38642: NOT
38643: OR
38644: IFFALSE 38648
// exit ;
38646: GO 39462
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38648: LD_ADDR_VAR 0 14
38652: PUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: LD_VAR 0 2
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: LD_VAR 0 5
38677: PUSH
38678: LD_INT 1
38680: ARRAY
38681: PPUSH
38682: CALL_OW 248
38686: PPUSH
38687: LD_INT 0
38689: PPUSH
38690: CALL 40699 0 6
38694: ST_TO_ADDR
// if not hexes then
38695: LD_VAR 0 14
38699: NOT
38700: IFFALSE 38704
// exit ;
38702: GO 39462
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38704: LD_ADDR_VAR 0 17
38708: PUSH
38709: LD_VAR 0 5
38713: PPUSH
38714: LD_INT 22
38716: PUSH
38717: LD_VAR 0 13
38721: PPUSH
38722: CALL_OW 255
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 30
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 30
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PPUSH
38763: CALL_OW 72
38767: ST_TO_ADDR
// for i = 1 to hexes do
38768: LD_ADDR_VAR 0 9
38772: PUSH
38773: DOUBLE
38774: LD_INT 1
38776: DEC
38777: ST_TO_ADDR
38778: LD_VAR 0 14
38782: PUSH
38783: FOR_TO
38784: IFFALSE 39460
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38786: LD_ADDR_VAR 0 13
38790: PUSH
38791: LD_VAR 0 14
38795: PUSH
38796: LD_VAR 0 9
38800: ARRAY
38801: PUSH
38802: LD_INT 1
38804: ARRAY
38805: PPUSH
38806: LD_VAR 0 14
38810: PUSH
38811: LD_VAR 0 9
38815: ARRAY
38816: PUSH
38817: LD_INT 2
38819: ARRAY
38820: PPUSH
38821: CALL_OW 428
38825: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38826: LD_VAR 0 14
38830: PUSH
38831: LD_VAR 0 9
38835: ARRAY
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: PPUSH
38841: LD_VAR 0 14
38845: PUSH
38846: LD_VAR 0 9
38850: ARRAY
38851: PUSH
38852: LD_INT 2
38854: ARRAY
38855: PPUSH
38856: CALL_OW 351
38860: PUSH
38861: LD_VAR 0 14
38865: PUSH
38866: LD_VAR 0 9
38870: ARRAY
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: PPUSH
38876: LD_VAR 0 14
38880: PUSH
38881: LD_VAR 0 9
38885: ARRAY
38886: PUSH
38887: LD_INT 2
38889: ARRAY
38890: PPUSH
38891: CALL_OW 488
38895: NOT
38896: OR
38897: PUSH
38898: LD_VAR 0 13
38902: PPUSH
38903: CALL_OW 247
38907: PUSH
38908: LD_INT 3
38910: EQUAL
38911: OR
38912: IFFALSE 38918
// exit ;
38914: POP
38915: POP
38916: GO 39462
// if not tmp then
38918: LD_VAR 0 13
38922: NOT
38923: IFFALSE 38927
// continue ;
38925: GO 38783
// result := true ;
38927: LD_ADDR_VAR 0 8
38931: PUSH
38932: LD_INT 1
38934: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38935: LD_VAR 0 6
38939: PUSH
38940: LD_VAR 0 13
38944: PPUSH
38945: CALL_OW 247
38949: PUSH
38950: LD_INT 2
38952: EQUAL
38953: AND
38954: PUSH
38955: LD_VAR 0 13
38959: PPUSH
38960: CALL_OW 263
38964: PUSH
38965: LD_INT 1
38967: EQUAL
38968: AND
38969: IFFALSE 39133
// begin if IsDrivenBy ( tmp ) then
38971: LD_VAR 0 13
38975: PPUSH
38976: CALL_OW 311
38980: IFFALSE 38984
// continue ;
38982: GO 38783
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38984: LD_VAR 0 6
38988: PPUSH
38989: LD_INT 3
38991: PUSH
38992: LD_INT 60
38994: PUSH
38995: EMPTY
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: LD_INT 55
39007: PUSH
39008: EMPTY
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 72
39023: IFFALSE 39131
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39025: LD_ADDR_VAR 0 18
39029: PUSH
39030: LD_VAR 0 6
39034: PPUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 60
39040: PUSH
39041: EMPTY
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 55
39053: PUSH
39054: EMPTY
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PPUSH
39065: CALL_OW 72
39069: PUSH
39070: LD_INT 1
39072: ARRAY
39073: ST_TO_ADDR
// if IsInUnit ( driver ) then
39074: LD_VAR 0 18
39078: PPUSH
39079: CALL_OW 310
39083: IFFALSE 39094
// ComExit ( driver ) ;
39085: LD_VAR 0 18
39089: PPUSH
39090: CALL 64404 0 1
// AddComEnterUnit ( driver , tmp ) ;
39094: LD_VAR 0 18
39098: PPUSH
39099: LD_VAR 0 13
39103: PPUSH
39104: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39108: LD_VAR 0 18
39112: PPUSH
39113: LD_VAR 0 7
39117: PPUSH
39118: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39122: LD_VAR 0 18
39126: PPUSH
39127: CALL_OW 181
// end ; continue ;
39131: GO 38783
// end ; if not cleaners or not tmp in cleaners then
39133: LD_VAR 0 6
39137: NOT
39138: PUSH
39139: LD_VAR 0 13
39143: PUSH
39144: LD_VAR 0 6
39148: IN
39149: NOT
39150: OR
39151: IFFALSE 39458
// begin if dep then
39153: LD_VAR 0 17
39157: IFFALSE 39293
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39159: LD_ADDR_VAR 0 16
39163: PUSH
39164: LD_VAR 0 17
39168: PUSH
39169: LD_INT 1
39171: ARRAY
39172: PPUSH
39173: CALL_OW 250
39177: PPUSH
39178: LD_VAR 0 17
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PPUSH
39187: CALL_OW 254
39191: PPUSH
39192: LD_INT 5
39194: PPUSH
39195: CALL_OW 272
39199: PUSH
39200: LD_VAR 0 17
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL_OW 251
39213: PPUSH
39214: LD_VAR 0 17
39218: PUSH
39219: LD_INT 1
39221: ARRAY
39222: PPUSH
39223: CALL_OW 254
39227: PPUSH
39228: LD_INT 5
39230: PPUSH
39231: CALL_OW 273
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39240: LD_VAR 0 16
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: LD_VAR 0 16
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL_OW 488
39262: IFFALSE 39293
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39264: LD_VAR 0 13
39268: PPUSH
39269: LD_VAR 0 16
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 16
39282: PUSH
39283: LD_INT 2
39285: ARRAY
39286: PPUSH
39287: CALL_OW 111
// continue ;
39291: GO 38783
// end ; end ; r := GetDir ( tmp ) ;
39293: LD_ADDR_VAR 0 15
39297: PUSH
39298: LD_VAR 0 13
39302: PPUSH
39303: CALL_OW 254
39307: ST_TO_ADDR
// if r = 5 then
39308: LD_VAR 0 15
39312: PUSH
39313: LD_INT 5
39315: EQUAL
39316: IFFALSE 39326
// r := 0 ;
39318: LD_ADDR_VAR 0 15
39322: PUSH
39323: LD_INT 0
39325: ST_TO_ADDR
// for j = r to 5 do
39326: LD_ADDR_VAR 0 10
39330: PUSH
39331: DOUBLE
39332: LD_VAR 0 15
39336: DEC
39337: ST_TO_ADDR
39338: LD_INT 5
39340: PUSH
39341: FOR_TO
39342: IFFALSE 39456
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39344: LD_ADDR_VAR 0 11
39348: PUSH
39349: LD_VAR 0 13
39353: PPUSH
39354: CALL_OW 250
39358: PPUSH
39359: LD_VAR 0 10
39363: PPUSH
39364: LD_INT 2
39366: PPUSH
39367: CALL_OW 272
39371: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39372: LD_ADDR_VAR 0 12
39376: PUSH
39377: LD_VAR 0 13
39381: PPUSH
39382: CALL_OW 251
39386: PPUSH
39387: LD_VAR 0 10
39391: PPUSH
39392: LD_INT 2
39394: PPUSH
39395: CALL_OW 273
39399: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39400: LD_VAR 0 11
39404: PPUSH
39405: LD_VAR 0 12
39409: PPUSH
39410: CALL_OW 488
39414: PUSH
39415: LD_VAR 0 11
39419: PPUSH
39420: LD_VAR 0 12
39424: PPUSH
39425: CALL_OW 428
39429: NOT
39430: AND
39431: IFFALSE 39454
// begin ComMoveXY ( tmp , _x , _y ) ;
39433: LD_VAR 0 13
39437: PPUSH
39438: LD_VAR 0 11
39442: PPUSH
39443: LD_VAR 0 12
39447: PPUSH
39448: CALL_OW 111
// break ;
39452: GO 39456
// end ; end ;
39454: GO 39341
39456: POP
39457: POP
// end ; end ;
39458: GO 38783
39460: POP
39461: POP
// end ;
39462: LD_VAR 0 8
39466: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39467: LD_INT 0
39469: PPUSH
// result := true ;
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_INT 1
39477: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39478: LD_VAR 0 2
39482: PUSH
39483: LD_INT 24
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39497
39489: LD_INT 33
39491: DOUBLE
39492: EQUAL
39493: IFTRUE 39497
39495: GO 39522
39497: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39498: LD_ADDR_VAR 0 3
39502: PUSH
39503: LD_INT 32
39505: PPUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 321
39515: PUSH
39516: LD_INT 2
39518: EQUAL
39519: ST_TO_ADDR
39520: GO 39842
39522: LD_INT 20
39524: DOUBLE
39525: EQUAL
39526: IFTRUE 39530
39528: GO 39555
39530: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39531: LD_ADDR_VAR 0 3
39535: PUSH
39536: LD_INT 6
39538: PPUSH
39539: LD_VAR 0 1
39543: PPUSH
39544: CALL_OW 321
39548: PUSH
39549: LD_INT 2
39551: EQUAL
39552: ST_TO_ADDR
39553: GO 39842
39555: LD_INT 22
39557: DOUBLE
39558: EQUAL
39559: IFTRUE 39569
39561: LD_INT 36
39563: DOUBLE
39564: EQUAL
39565: IFTRUE 39569
39567: GO 39594
39569: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_INT 15
39577: PPUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 321
39587: PUSH
39588: LD_INT 2
39590: EQUAL
39591: ST_TO_ADDR
39592: GO 39842
39594: LD_INT 30
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39627
39602: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39603: LD_ADDR_VAR 0 3
39607: PUSH
39608: LD_INT 20
39610: PPUSH
39611: LD_VAR 0 1
39615: PPUSH
39616: CALL_OW 321
39620: PUSH
39621: LD_INT 2
39623: EQUAL
39624: ST_TO_ADDR
39625: GO 39842
39627: LD_INT 28
39629: DOUBLE
39630: EQUAL
39631: IFTRUE 39641
39633: LD_INT 21
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 39666
39641: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_INT 21
39649: PPUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 321
39659: PUSH
39660: LD_INT 2
39662: EQUAL
39663: ST_TO_ADDR
39664: GO 39842
39666: LD_INT 16
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39701
39674: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_EXP 111
39684: PPUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 321
39694: PUSH
39695: LD_INT 2
39697: EQUAL
39698: ST_TO_ADDR
39699: GO 39842
39701: LD_INT 19
39703: DOUBLE
39704: EQUAL
39705: IFTRUE 39715
39707: LD_INT 23
39709: DOUBLE
39710: EQUAL
39711: IFTRUE 39715
39713: GO 39742
39715: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_EXP 110
39725: PPUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 321
39735: PUSH
39736: LD_INT 2
39738: EQUAL
39739: ST_TO_ADDR
39740: GO 39842
39742: LD_INT 17
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39775
39750: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_INT 39
39758: PPUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 321
39768: PUSH
39769: LD_INT 2
39771: EQUAL
39772: ST_TO_ADDR
39773: GO 39842
39775: LD_INT 18
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39808
39783: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_INT 40
39791: PPUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 321
39801: PUSH
39802: LD_INT 2
39804: EQUAL
39805: ST_TO_ADDR
39806: GO 39842
39808: LD_INT 27
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39816
39814: GO 39841
39816: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 35
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 321
39834: PUSH
39835: LD_INT 2
39837: EQUAL
39838: ST_TO_ADDR
39839: GO 39842
39841: POP
// end ;
39842: LD_VAR 0 3
39846: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39847: LD_INT 0
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
// result := false ;
39860: LD_ADDR_VAR 0 6
39864: PUSH
39865: LD_INT 0
39867: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39868: LD_VAR 0 1
39872: NOT
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 266
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: IN
39894: NOT
39895: OR
39896: PUSH
39897: LD_VAR 0 2
39901: NOT
39902: OR
39903: PUSH
39904: LD_VAR 0 5
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: LD_INT 5
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: IN
39935: NOT
39936: OR
39937: PUSH
39938: LD_VAR 0 3
39942: PPUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: CALL_OW 488
39952: NOT
39953: OR
39954: IFFALSE 39958
// exit ;
39956: GO 40694
// side := GetSide ( depot ) ;
39958: LD_ADDR_VAR 0 9
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 255
39972: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39973: LD_VAR 0 9
39977: PPUSH
39978: LD_VAR 0 2
39982: PPUSH
39983: CALL 39467 0 2
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40694
// pom := GetBase ( depot ) ;
39992: LD_ADDR_VAR 0 10
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: CALL_OW 274
40006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40007: LD_ADDR_VAR 0 11
40011: PUSH
40012: LD_VAR 0 2
40016: PPUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 248
40026: PPUSH
40027: CALL_OW 450
40031: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40032: LD_VAR 0 10
40036: PPUSH
40037: LD_INT 1
40039: PPUSH
40040: CALL_OW 275
40044: PUSH
40045: LD_VAR 0 11
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: GREATEREQUAL
40054: PUSH
40055: LD_VAR 0 10
40059: PPUSH
40060: LD_INT 2
40062: PPUSH
40063: CALL_OW 275
40067: PUSH
40068: LD_VAR 0 11
40072: PUSH
40073: LD_INT 2
40075: ARRAY
40076: GREATEREQUAL
40077: AND
40078: PUSH
40079: LD_VAR 0 10
40083: PPUSH
40084: LD_INT 3
40086: PPUSH
40087: CALL_OW 275
40091: PUSH
40092: LD_VAR 0 11
40096: PUSH
40097: LD_INT 3
40099: ARRAY
40100: GREATEREQUAL
40101: AND
40102: NOT
40103: IFFALSE 40107
// exit ;
40105: GO 40694
// if GetBType ( depot ) = b_depot then
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 266
40116: PUSH
40117: LD_INT 0
40119: EQUAL
40120: IFFALSE 40132
// dist := 28 else
40122: LD_ADDR_VAR 0 14
40126: PUSH
40127: LD_INT 28
40129: ST_TO_ADDR
40130: GO 40140
// dist := 36 ;
40132: LD_ADDR_VAR 0 14
40136: PUSH
40137: LD_INT 36
40139: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40140: LD_VAR 0 1
40144: PPUSH
40145: LD_VAR 0 3
40149: PPUSH
40150: LD_VAR 0 4
40154: PPUSH
40155: CALL_OW 297
40159: PUSH
40160: LD_VAR 0 14
40164: GREATER
40165: IFFALSE 40169
// exit ;
40167: GO 40694
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40169: LD_ADDR_VAR 0 12
40173: PUSH
40174: LD_VAR 0 2
40178: PPUSH
40179: LD_VAR 0 3
40183: PPUSH
40184: LD_VAR 0 4
40188: PPUSH
40189: LD_VAR 0 5
40193: PPUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: CALL_OW 248
40203: PPUSH
40204: LD_INT 0
40206: PPUSH
40207: CALL 40699 0 6
40211: ST_TO_ADDR
// if not hexes then
40212: LD_VAR 0 12
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 40694
// hex := GetHexInfo ( x , y ) ;
40221: LD_ADDR_VAR 0 15
40225: PUSH
40226: LD_VAR 0 3
40230: PPUSH
40231: LD_VAR 0 4
40235: PPUSH
40236: CALL_OW 546
40240: ST_TO_ADDR
// if hex [ 1 ] then
40241: LD_VAR 0 15
40245: PUSH
40246: LD_INT 1
40248: ARRAY
40249: IFFALSE 40253
// exit ;
40251: GO 40694
// height := hex [ 2 ] ;
40253: LD_ADDR_VAR 0 13
40257: PUSH
40258: LD_VAR 0 15
40262: PUSH
40263: LD_INT 2
40265: ARRAY
40266: ST_TO_ADDR
// for i = 1 to hexes do
40267: LD_ADDR_VAR 0 7
40271: PUSH
40272: DOUBLE
40273: LD_INT 1
40275: DEC
40276: ST_TO_ADDR
40277: LD_VAR 0 12
40281: PUSH
40282: FOR_TO
40283: IFFALSE 40613
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40285: LD_VAR 0 12
40289: PUSH
40290: LD_VAR 0 7
40294: ARRAY
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: PPUSH
40300: LD_VAR 0 12
40304: PUSH
40305: LD_VAR 0 7
40309: ARRAY
40310: PUSH
40311: LD_INT 2
40313: ARRAY
40314: PPUSH
40315: CALL_OW 488
40319: NOT
40320: PUSH
40321: LD_VAR 0 12
40325: PUSH
40326: LD_VAR 0 7
40330: ARRAY
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: PPUSH
40336: LD_VAR 0 12
40340: PUSH
40341: LD_VAR 0 7
40345: ARRAY
40346: PUSH
40347: LD_INT 2
40349: ARRAY
40350: PPUSH
40351: CALL_OW 428
40355: PUSH
40356: LD_INT 0
40358: GREATER
40359: OR
40360: PUSH
40361: LD_VAR 0 12
40365: PUSH
40366: LD_VAR 0 7
40370: ARRAY
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: PPUSH
40376: LD_VAR 0 12
40380: PUSH
40381: LD_VAR 0 7
40385: ARRAY
40386: PUSH
40387: LD_INT 2
40389: ARRAY
40390: PPUSH
40391: CALL_OW 351
40395: OR
40396: IFFALSE 40402
// exit ;
40398: POP
40399: POP
40400: GO 40694
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40402: LD_ADDR_VAR 0 8
40406: PUSH
40407: LD_VAR 0 12
40411: PUSH
40412: LD_VAR 0 7
40416: ARRAY
40417: PUSH
40418: LD_INT 1
40420: ARRAY
40421: PPUSH
40422: LD_VAR 0 12
40426: PUSH
40427: LD_VAR 0 7
40431: ARRAY
40432: PUSH
40433: LD_INT 2
40435: ARRAY
40436: PPUSH
40437: CALL_OW 546
40441: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40442: LD_VAR 0 8
40446: PUSH
40447: LD_INT 1
40449: ARRAY
40450: PUSH
40451: LD_VAR 0 8
40455: PUSH
40456: LD_INT 2
40458: ARRAY
40459: PUSH
40460: LD_VAR 0 13
40464: PUSH
40465: LD_INT 2
40467: PLUS
40468: GREATER
40469: OR
40470: PUSH
40471: LD_VAR 0 8
40475: PUSH
40476: LD_INT 2
40478: ARRAY
40479: PUSH
40480: LD_VAR 0 13
40484: PUSH
40485: LD_INT 2
40487: MINUS
40488: LESS
40489: OR
40490: PUSH
40491: LD_VAR 0 8
40495: PUSH
40496: LD_INT 3
40498: ARRAY
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 8
40505: PUSH
40506: LD_INT 9
40508: PUSH
40509: LD_INT 10
40511: PUSH
40512: LD_INT 11
40514: PUSH
40515: LD_INT 12
40517: PUSH
40518: LD_INT 13
40520: PUSH
40521: LD_INT 16
40523: PUSH
40524: LD_INT 17
40526: PUSH
40527: LD_INT 18
40529: PUSH
40530: LD_INT 19
40532: PUSH
40533: LD_INT 20
40535: PUSH
40536: LD_INT 21
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: IN
40554: NOT
40555: OR
40556: PUSH
40557: LD_VAR 0 8
40561: PUSH
40562: LD_INT 5
40564: ARRAY
40565: NOT
40566: OR
40567: PUSH
40568: LD_VAR 0 8
40572: PUSH
40573: LD_INT 6
40575: ARRAY
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 7
40585: PUSH
40586: LD_INT 9
40588: PUSH
40589: LD_INT 10
40591: PUSH
40592: LD_INT 11
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: IN
40603: NOT
40604: OR
40605: IFFALSE 40611
// exit ;
40607: POP
40608: POP
40609: GO 40694
// end ;
40611: GO 40282
40613: POP
40614: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40615: LD_VAR 0 9
40619: PPUSH
40620: LD_VAR 0 3
40624: PPUSH
40625: LD_VAR 0 4
40629: PPUSH
40630: LD_INT 20
40632: PPUSH
40633: CALL 32640 0 4
40637: PUSH
40638: LD_INT 4
40640: ARRAY
40641: IFFALSE 40645
// exit ;
40643: GO 40694
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40645: LD_VAR 0 2
40649: PUSH
40650: LD_INT 29
40652: PUSH
40653: LD_INT 30
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: IN
40660: PUSH
40661: LD_VAR 0 3
40665: PPUSH
40666: LD_VAR 0 4
40670: PPUSH
40671: LD_VAR 0 9
40675: PPUSH
40676: CALL_OW 440
40680: NOT
40681: AND
40682: IFFALSE 40686
// exit ;
40684: GO 40694
// result := true ;
40686: LD_ADDR_VAR 0 6
40690: PUSH
40691: LD_INT 1
40693: ST_TO_ADDR
// end ;
40694: LD_VAR 0 6
40698: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40699: LD_INT 0
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
// result = [ ] ;
40759: LD_ADDR_VAR 0 7
40763: PUSH
40764: EMPTY
40765: ST_TO_ADDR
// temp_list = [ ] ;
40766: LD_ADDR_VAR 0 9
40770: PUSH
40771: EMPTY
40772: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40773: LD_VAR 0 4
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 3
40789: PUSH
40790: LD_INT 4
40792: PUSH
40793: LD_INT 5
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: IN
40804: NOT
40805: PUSH
40806: LD_VAR 0 1
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: IN
40821: PUSH
40822: LD_VAR 0 5
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: IN
40841: NOT
40842: AND
40843: OR
40844: IFFALSE 40848
// exit ;
40846: GO 59239
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40848: LD_VAR 0 1
40852: PUSH
40853: LD_INT 6
40855: PUSH
40856: LD_INT 7
40858: PUSH
40859: LD_INT 8
40861: PUSH
40862: LD_INT 13
40864: PUSH
40865: LD_INT 12
40867: PUSH
40868: LD_INT 15
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: LD_INT 14
40876: PUSH
40877: LD_INT 10
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: IN
40891: IFFALSE 40901
// btype = b_lab ;
40893: LD_ADDR_VAR 0 1
40897: PUSH
40898: LD_INT 6
40900: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40901: LD_VAR 0 6
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: IN
40920: NOT
40921: PUSH
40922: LD_VAR 0 1
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 6
40941: PUSH
40942: LD_INT 36
40944: PUSH
40945: LD_INT 4
40947: PUSH
40948: LD_INT 5
40950: PUSH
40951: LD_INT 31
40953: PUSH
40954: LD_INT 32
40956: PUSH
40957: LD_INT 33
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: NOT
40974: PUSH
40975: LD_VAR 0 6
40979: PUSH
40980: LD_INT 1
40982: EQUAL
40983: AND
40984: OR
40985: PUSH
40986: LD_VAR 0 1
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: IN
41001: NOT
41002: PUSH
41003: LD_VAR 0 6
41007: PUSH
41008: LD_INT 2
41010: EQUAL
41011: AND
41012: OR
41013: IFFALSE 41023
// mode = 0 ;
41015: LD_ADDR_VAR 0 6
41019: PUSH
41020: LD_INT 0
41022: ST_TO_ADDR
// case mode of 0 :
41023: LD_VAR 0 6
41027: PUSH
41028: LD_INT 0
41030: DOUBLE
41031: EQUAL
41032: IFTRUE 41036
41034: GO 52489
41036: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41037: LD_ADDR_VAR 0 11
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 3
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41230: LD_ADDR_VAR 0 12
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41426: LD_ADDR_VAR 0 13
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: LD_INT 3
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 3
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41625: LD_ADDR_VAR 0 14
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41821: LD_ADDR_VAR 0 15
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42014: LD_ADDR_VAR 0 16
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42207: LD_ADDR_VAR 0 17
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42437: LD_ADDR_VAR 0 18
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42667: LD_ADDR_VAR 0 19
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42897: LD_ADDR_VAR 0 20
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43127: LD_ADDR_VAR 0 21
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43357: LD_ADDR_VAR 0 22
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43587: LD_ADDR_VAR 0 23
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 3
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43867: LD_ADDR_VAR 0 24
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44143: LD_ADDR_VAR 0 25
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 3
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 3
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44417: LD_ADDR_VAR 0 26
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44693: LD_ADDR_VAR 0 27
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44973: LD_ADDR_VAR 0 28
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45255: LD_ADDR_VAR 0 29
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45534: LD_ADDR_VAR 0 30
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45812: LD_ADDR_VAR 0 31
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 3
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46090: LD_ADDR_VAR 0 32
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46368: LD_ADDR_VAR 0 33
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46647: LD_ADDR_VAR 0 34
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 3
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46927: LD_ADDR_VAR 0 35
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47039: LD_ADDR_VAR 0 36
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47151: LD_ADDR_VAR 0 37
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47263: LD_ADDR_VAR 0 38
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47375: LD_ADDR_VAR 0 39
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47487: LD_ADDR_VAR 0 40
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47599: LD_ADDR_VAR 0 41
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47949: LD_ADDR_VAR 0 42
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 3
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48299: LD_ADDR_VAR 0 43
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48647: LD_ADDR_VAR 0 44
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48997: LD_ADDR_VAR 0 45
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49347: LD_ADDR_VAR 0 46
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49695: LD_ADDR_VAR 0 47
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49846: LD_ADDR_VAR 0 48
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49993: LD_ADDR_VAR 0 49
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50137: LD_ADDR_VAR 0 50
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50281: LD_ADDR_VAR 0 51
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50428: LD_ADDR_VAR 0 52
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50579: LD_ADDR_VAR 0 53
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50809: LD_ADDR_VAR 0 54
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51039: LD_ADDR_VAR 0 55
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51269: LD_ADDR_VAR 0 56
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51499: LD_ADDR_VAR 0 57
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51729: LD_ADDR_VAR 0 58
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51959: LD_ADDR_VAR 0 59
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52047: LD_ADDR_VAR 0 60
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52135: LD_ADDR_VAR 0 61
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52223: LD_ADDR_VAR 0 62
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52311: LD_ADDR_VAR 0 63
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52399: LD_ADDR_VAR 0 64
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// end ; 1 :
52487: GO 58384
52489: LD_INT 1
52491: DOUBLE
52492: EQUAL
52493: IFTRUE 52497
52495: GO 55120
52497: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52498: LD_ADDR_VAR 0 11
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52542: LD_ADDR_VAR 0 12
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52583: LD_ADDR_VAR 0 13
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52623: LD_ADDR_VAR 0 14
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52664: LD_ADDR_VAR 0 15
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52708: LD_ADDR_VAR 0 16
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52754: LD_ADDR_VAR 0 17
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52798: LD_ADDR_VAR 0 18
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52839: LD_ADDR_VAR 0 19
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52879: LD_ADDR_VAR 0 20
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52920: LD_ADDR_VAR 0 21
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52964: LD_ADDR_VAR 0 22
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: LD_INT 3
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53010: LD_ADDR_VAR 0 23
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 4
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53054: LD_ADDR_VAR 0 24
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 4
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53095: LD_ADDR_VAR 0 25
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53135: LD_ADDR_VAR 0 26
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53176: LD_ADDR_VAR 0 27
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53220: LD_ADDR_VAR 0 28
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53266: LD_ADDR_VAR 0 29
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 4
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 4
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 5
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 5
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 6
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 6
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 5
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53421: LD_ADDR_VAR 0 30
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 4
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 5
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 5
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 5
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 6
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 6
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53564: LD_ADDR_VAR 0 31
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: LD_INT 4
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: LD_INT 4
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: LD_INT 5
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: LD_INT 5
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 6
53661: PUSH
53662: LD_INT 5
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 6
53671: PUSH
53672: LD_INT 6
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 5
53681: PUSH
53682: LD_INT 6
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53703: LD_ADDR_VAR 0 32
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 5
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 4
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 6
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 6
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 5
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53846: LD_ADDR_VAR 0 33
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 4
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 4
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 5
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 5
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 5
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 6
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 6
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54001: LD_ADDR_VAR 0 34
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 3
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: LD_INT 4
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 4
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 4
54068: NEG
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: NEG
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 5
54104: NEG
54105: PUSH
54106: LD_INT 5
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 5
54116: NEG
54117: PUSH
54118: LD_INT 6
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 6
54128: NEG
54129: PUSH
54130: LD_INT 5
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 6
54140: NEG
54141: PUSH
54142: LD_INT 6
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54164: LD_ADDR_VAR 0 41
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54208: LD_ADDR_VAR 0 42
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54249: LD_ADDR_VAR 0 43
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54289: LD_ADDR_VAR 0 44
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54330: LD_ADDR_VAR 0 45
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: LIST
54373: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54374: LD_ADDR_VAR 0 46
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54420: LD_ADDR_VAR 0 47
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54453: LD_ADDR_VAR 0 48
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54484: LD_ADDR_VAR 0 49
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54513: LD_ADDR_VAR 0 50
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54542: LD_ADDR_VAR 0 51
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54573: LD_ADDR_VAR 0 52
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54606: LD_ADDR_VAR 0 53
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54650: LD_ADDR_VAR 0 54
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54691: LD_ADDR_VAR 0 55
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54731: LD_ADDR_VAR 0 56
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54772: LD_ADDR_VAR 0 57
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54816: LD_ADDR_VAR 0 58
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 3
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54862: LD_ADDR_VAR 0 59
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54906: LD_ADDR_VAR 0 60
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54947: LD_ADDR_VAR 0 61
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54987: LD_ADDR_VAR 0 62
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55028: LD_ADDR_VAR 0 63
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55072: LD_ADDR_VAR 0 64
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// end ; 2 :
55118: GO 58384
55120: LD_INT 2
55122: DOUBLE
55123: EQUAL
55124: IFTRUE 55128
55126: GO 58383
55128: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55129: LD_ADDR_VAR 0 29
55133: PUSH
55134: LD_INT 4
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 4
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 5
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 4
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 4
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 4
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 5
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 4
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 5
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 3
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 4
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 4
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 4
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: NEG
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: LD_INT 5
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 4
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 5
55574: NEG
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 5
55586: NEG
55587: PUSH
55588: LD_INT 5
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: LD_INT 5
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 5
55610: NEG
55611: PUSH
55612: LD_INT 3
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55667: LD_ADDR_VAR 0 30
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: LD_INT 4
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 5
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 4
55857: NEG
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 5
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 5
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 5
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 4
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: LD_INT 4
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 4
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 4
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 5
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 5
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56214: LD_ADDR_VAR 0 31
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 5
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 5
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 4
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: NEG
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: LD_INT 4
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 4
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 5
56476: NEG
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 5
56488: NEG
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: LD_INT 5
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 5
56512: NEG
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 4
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 4
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 5
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 5
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 5
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56764: LD_ADDR_VAR 0 32
56768: PUSH
56769: LD_INT 4
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 4
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 5
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 5
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 4
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 3
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 4
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 4
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 5
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: LD_INT 5
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 5
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57311: LD_ADDR_VAR 0 33
57315: PUSH
57316: LD_INT 4
57318: NEG
57319: PUSH
57320: LD_INT 4
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 4
57330: NEG
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 4
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 5
57378: NEG
57379: PUSH
57380: LD_INT 4
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: LD_INT 5
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: LD_INT 5
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 5
57414: NEG
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 4
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 4
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 5
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 4
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 4
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57849: LD_ADDR_VAR 0 34
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 4
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 5
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 5
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 5
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 5
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 5
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 4
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 4
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 4
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 5
58290: NEG
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 5
58301: NEG
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 5
58313: NEG
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// end ; end ;
58381: GO 58384
58383: POP
// case btype of b_depot , b_warehouse :
58384: LD_VAR 0 1
58388: PUSH
58389: LD_INT 0
58391: DOUBLE
58392: EQUAL
58393: IFTRUE 58403
58395: LD_INT 1
58397: DOUBLE
58398: EQUAL
58399: IFTRUE 58403
58401: GO 58604
58403: POP
// case nation of nation_american :
58404: LD_VAR 0 5
58408: PUSH
58409: LD_INT 1
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58417
58415: GO 58473
58417: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58418: LD_ADDR_VAR 0 9
58422: PUSH
58423: LD_VAR 0 11
58427: PUSH
58428: LD_VAR 0 12
58432: PUSH
58433: LD_VAR 0 13
58437: PUSH
58438: LD_VAR 0 14
58442: PUSH
58443: LD_VAR 0 15
58447: PUSH
58448: LD_VAR 0 16
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: PUSH
58461: LD_VAR 0 4
58465: PUSH
58466: LD_INT 1
58468: PLUS
58469: ARRAY
58470: ST_TO_ADDR
58471: GO 58602
58473: LD_INT 2
58475: DOUBLE
58476: EQUAL
58477: IFTRUE 58481
58479: GO 58537
58481: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58482: LD_ADDR_VAR 0 9
58486: PUSH
58487: LD_VAR 0 17
58491: PUSH
58492: LD_VAR 0 18
58496: PUSH
58497: LD_VAR 0 19
58501: PUSH
58502: LD_VAR 0 20
58506: PUSH
58507: LD_VAR 0 21
58511: PUSH
58512: LD_VAR 0 22
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: PUSH
58525: LD_VAR 0 4
58529: PUSH
58530: LD_INT 1
58532: PLUS
58533: ARRAY
58534: ST_TO_ADDR
58535: GO 58602
58537: LD_INT 3
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58545
58543: GO 58601
58545: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58546: LD_ADDR_VAR 0 9
58550: PUSH
58551: LD_VAR 0 23
58555: PUSH
58556: LD_VAR 0 24
58560: PUSH
58561: LD_VAR 0 25
58565: PUSH
58566: LD_VAR 0 26
58570: PUSH
58571: LD_VAR 0 27
58575: PUSH
58576: LD_VAR 0 28
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: PUSH
58589: LD_VAR 0 4
58593: PUSH
58594: LD_INT 1
58596: PLUS
58597: ARRAY
58598: ST_TO_ADDR
58599: GO 58602
58601: POP
58602: GO 59157
58604: LD_INT 2
58606: DOUBLE
58607: EQUAL
58608: IFTRUE 58618
58610: LD_INT 3
58612: DOUBLE
58613: EQUAL
58614: IFTRUE 58618
58616: GO 58674
58618: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58619: LD_ADDR_VAR 0 9
58623: PUSH
58624: LD_VAR 0 29
58628: PUSH
58629: LD_VAR 0 30
58633: PUSH
58634: LD_VAR 0 31
58638: PUSH
58639: LD_VAR 0 32
58643: PUSH
58644: LD_VAR 0 33
58648: PUSH
58649: LD_VAR 0 34
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: PUSH
58662: LD_VAR 0 4
58666: PUSH
58667: LD_INT 1
58669: PLUS
58670: ARRAY
58671: ST_TO_ADDR
58672: GO 59157
58674: LD_INT 16
58676: DOUBLE
58677: EQUAL
58678: IFTRUE 58736
58680: LD_INT 17
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58736
58686: LD_INT 18
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58736
58692: LD_INT 19
58694: DOUBLE
58695: EQUAL
58696: IFTRUE 58736
58698: LD_INT 22
58700: DOUBLE
58701: EQUAL
58702: IFTRUE 58736
58704: LD_INT 20
58706: DOUBLE
58707: EQUAL
58708: IFTRUE 58736
58710: LD_INT 21
58712: DOUBLE
58713: EQUAL
58714: IFTRUE 58736
58716: LD_INT 23
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58736
58722: LD_INT 24
58724: DOUBLE
58725: EQUAL
58726: IFTRUE 58736
58728: LD_INT 25
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58736
58734: GO 58792
58736: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58737: LD_ADDR_VAR 0 9
58741: PUSH
58742: LD_VAR 0 35
58746: PUSH
58747: LD_VAR 0 36
58751: PUSH
58752: LD_VAR 0 37
58756: PUSH
58757: LD_VAR 0 38
58761: PUSH
58762: LD_VAR 0 39
58766: PUSH
58767: LD_VAR 0 40
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: PUSH
58780: LD_VAR 0 4
58784: PUSH
58785: LD_INT 1
58787: PLUS
58788: ARRAY
58789: ST_TO_ADDR
58790: GO 59157
58792: LD_INT 6
58794: DOUBLE
58795: EQUAL
58796: IFTRUE 58848
58798: LD_INT 7
58800: DOUBLE
58801: EQUAL
58802: IFTRUE 58848
58804: LD_INT 8
58806: DOUBLE
58807: EQUAL
58808: IFTRUE 58848
58810: LD_INT 13
58812: DOUBLE
58813: EQUAL
58814: IFTRUE 58848
58816: LD_INT 12
58818: DOUBLE
58819: EQUAL
58820: IFTRUE 58848
58822: LD_INT 15
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58848
58828: LD_INT 11
58830: DOUBLE
58831: EQUAL
58832: IFTRUE 58848
58834: LD_INT 14
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58848
58840: LD_INT 10
58842: DOUBLE
58843: EQUAL
58844: IFTRUE 58848
58846: GO 58904
58848: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58849: LD_ADDR_VAR 0 9
58853: PUSH
58854: LD_VAR 0 41
58858: PUSH
58859: LD_VAR 0 42
58863: PUSH
58864: LD_VAR 0 43
58868: PUSH
58869: LD_VAR 0 44
58873: PUSH
58874: LD_VAR 0 45
58878: PUSH
58879: LD_VAR 0 46
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: PUSH
58892: LD_VAR 0 4
58896: PUSH
58897: LD_INT 1
58899: PLUS
58900: ARRAY
58901: ST_TO_ADDR
58902: GO 59157
58904: LD_INT 36
58906: DOUBLE
58907: EQUAL
58908: IFTRUE 58912
58910: GO 58968
58912: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58913: LD_ADDR_VAR 0 9
58917: PUSH
58918: LD_VAR 0 47
58922: PUSH
58923: LD_VAR 0 48
58927: PUSH
58928: LD_VAR 0 49
58932: PUSH
58933: LD_VAR 0 50
58937: PUSH
58938: LD_VAR 0 51
58942: PUSH
58943: LD_VAR 0 52
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: PUSH
58956: LD_VAR 0 4
58960: PUSH
58961: LD_INT 1
58963: PLUS
58964: ARRAY
58965: ST_TO_ADDR
58966: GO 59157
58968: LD_INT 4
58970: DOUBLE
58971: EQUAL
58972: IFTRUE 58994
58974: LD_INT 5
58976: DOUBLE
58977: EQUAL
58978: IFTRUE 58994
58980: LD_INT 34
58982: DOUBLE
58983: EQUAL
58984: IFTRUE 58994
58986: LD_INT 37
58988: DOUBLE
58989: EQUAL
58990: IFTRUE 58994
58992: GO 59050
58994: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58995: LD_ADDR_VAR 0 9
58999: PUSH
59000: LD_VAR 0 53
59004: PUSH
59005: LD_VAR 0 54
59009: PUSH
59010: LD_VAR 0 55
59014: PUSH
59015: LD_VAR 0 56
59019: PUSH
59020: LD_VAR 0 57
59024: PUSH
59025: LD_VAR 0 58
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: PUSH
59038: LD_VAR 0 4
59042: PUSH
59043: LD_INT 1
59045: PLUS
59046: ARRAY
59047: ST_TO_ADDR
59048: GO 59157
59050: LD_INT 31
59052: DOUBLE
59053: EQUAL
59054: IFTRUE 59100
59056: LD_INT 32
59058: DOUBLE
59059: EQUAL
59060: IFTRUE 59100
59062: LD_INT 33
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59100
59068: LD_INT 27
59070: DOUBLE
59071: EQUAL
59072: IFTRUE 59100
59074: LD_INT 26
59076: DOUBLE
59077: EQUAL
59078: IFTRUE 59100
59080: LD_INT 28
59082: DOUBLE
59083: EQUAL
59084: IFTRUE 59100
59086: LD_INT 29
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59100
59092: LD_INT 30
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59100
59098: GO 59156
59100: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59101: LD_ADDR_VAR 0 9
59105: PUSH
59106: LD_VAR 0 59
59110: PUSH
59111: LD_VAR 0 60
59115: PUSH
59116: LD_VAR 0 61
59120: PUSH
59121: LD_VAR 0 62
59125: PUSH
59126: LD_VAR 0 63
59130: PUSH
59131: LD_VAR 0 64
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: LD_VAR 0 4
59148: PUSH
59149: LD_INT 1
59151: PLUS
59152: ARRAY
59153: ST_TO_ADDR
59154: GO 59157
59156: POP
// temp_list2 = [ ] ;
59157: LD_ADDR_VAR 0 10
59161: PUSH
59162: EMPTY
59163: ST_TO_ADDR
// for i in temp_list do
59164: LD_ADDR_VAR 0 8
59168: PUSH
59169: LD_VAR 0 9
59173: PUSH
59174: FOR_IN
59175: IFFALSE 59227
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59177: LD_ADDR_VAR 0 10
59181: PUSH
59182: LD_VAR 0 10
59186: PUSH
59187: LD_VAR 0 8
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PUSH
59196: LD_VAR 0 2
59200: PLUS
59201: PUSH
59202: LD_VAR 0 8
59206: PUSH
59207: LD_INT 2
59209: ARRAY
59210: PUSH
59211: LD_VAR 0 3
59215: PLUS
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: ADD
59224: ST_TO_ADDR
59225: GO 59174
59227: POP
59228: POP
// result = temp_list2 ;
59229: LD_ADDR_VAR 0 7
59233: PUSH
59234: LD_VAR 0 10
59238: ST_TO_ADDR
// end ;
59239: LD_VAR 0 7
59243: RET
// export function EnemyInRange ( unit , dist ) ; begin
59244: LD_INT 0
59246: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59247: LD_ADDR_VAR 0 3
59251: PUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 255
59261: PPUSH
59262: LD_VAR 0 1
59266: PPUSH
59267: CALL_OW 250
59271: PPUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 251
59281: PPUSH
59282: LD_VAR 0 2
59286: PPUSH
59287: CALL 32640 0 4
59291: PUSH
59292: LD_INT 4
59294: ARRAY
59295: ST_TO_ADDR
// end ;
59296: LD_VAR 0 3
59300: RET
// export function PlayerSeeMe ( unit ) ; begin
59301: LD_INT 0
59303: PPUSH
// result := See ( your_side , unit ) ;
59304: LD_ADDR_VAR 0 2
59308: PUSH
59309: LD_OWVAR 2
59313: PPUSH
59314: LD_VAR 0 1
59318: PPUSH
59319: CALL_OW 292
59323: ST_TO_ADDR
// end ;
59324: LD_VAR 0 2
59328: RET
// export function ReverseDir ( unit ) ; begin
59329: LD_INT 0
59331: PPUSH
// if not unit then
59332: LD_VAR 0 1
59336: NOT
59337: IFFALSE 59341
// exit ;
59339: GO 59364
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59341: LD_ADDR_VAR 0 2
59345: PUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 254
59355: PUSH
59356: LD_INT 3
59358: PLUS
59359: PUSH
59360: LD_INT 6
59362: MOD
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 2
59368: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
59374: PPUSH
59375: PPUSH
// if not hexes then
59376: LD_VAR 0 2
59380: NOT
59381: IFFALSE 59385
// exit ;
59383: GO 59533
// dist := 9999 ;
59385: LD_ADDR_VAR 0 5
59389: PUSH
59390: LD_INT 9999
59392: ST_TO_ADDR
// for i = 1 to hexes do
59393: LD_ADDR_VAR 0 4
59397: PUSH
59398: DOUBLE
59399: LD_INT 1
59401: DEC
59402: ST_TO_ADDR
59403: LD_VAR 0 2
59407: PUSH
59408: FOR_TO
59409: IFFALSE 59521
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_VAR 0 4
59425: ARRAY
59426: PUSH
59427: LD_INT 1
59429: ARRAY
59430: PPUSH
59431: LD_VAR 0 2
59435: PUSH
59436: LD_VAR 0 4
59440: ARRAY
59441: PUSH
59442: LD_INT 2
59444: ARRAY
59445: PPUSH
59446: CALL_OW 297
59450: PUSH
59451: LD_VAR 0 5
59455: LESS
59456: IFFALSE 59519
// begin hex := hexes [ i ] ;
59458: LD_ADDR_VAR 0 7
59462: PUSH
59463: LD_VAR 0 2
59467: PUSH
59468: LD_VAR 0 4
59472: ARRAY
59473: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59474: LD_ADDR_VAR 0 5
59478: PUSH
59479: LD_VAR 0 1
59483: PPUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_VAR 0 4
59493: ARRAY
59494: PUSH
59495: LD_INT 1
59497: ARRAY
59498: PPUSH
59499: LD_VAR 0 2
59503: PUSH
59504: LD_VAR 0 4
59508: ARRAY
59509: PUSH
59510: LD_INT 2
59512: ARRAY
59513: PPUSH
59514: CALL_OW 297
59518: ST_TO_ADDR
// end ; end ;
59519: GO 59408
59521: POP
59522: POP
// result := hex ;
59523: LD_ADDR_VAR 0 3
59527: PUSH
59528: LD_VAR 0 7
59532: ST_TO_ADDR
// end ;
59533: LD_VAR 0 3
59537: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59538: LD_INT 0
59540: PPUSH
59541: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59542: LD_VAR 0 1
59546: NOT
59547: PUSH
59548: LD_VAR 0 1
59552: PUSH
59553: LD_INT 21
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 23
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 69
59581: IN
59582: NOT
59583: OR
59584: IFFALSE 59588
// exit ;
59586: GO 59635
// for i = 1 to 3 do
59588: LD_ADDR_VAR 0 3
59592: PUSH
59593: DOUBLE
59594: LD_INT 1
59596: DEC
59597: ST_TO_ADDR
59598: LD_INT 3
59600: PUSH
59601: FOR_TO
59602: IFFALSE 59633
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59604: LD_VAR 0 1
59608: PPUSH
59609: CALL_OW 250
59613: PPUSH
59614: LD_VAR 0 1
59618: PPUSH
59619: CALL_OW 251
59623: PPUSH
59624: LD_INT 1
59626: PPUSH
59627: CALL_OW 453
59631: GO 59601
59633: POP
59634: POP
// end ;
59635: LD_VAR 0 2
59639: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59640: LD_INT 0
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
59647: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59648: LD_VAR 0 1
59652: NOT
59653: PUSH
59654: LD_VAR 0 2
59658: NOT
59659: OR
59660: PUSH
59661: LD_VAR 0 1
59665: PPUSH
59666: CALL_OW 314
59670: OR
59671: IFFALSE 59675
// exit ;
59673: GO 60116
// x := GetX ( enemy_unit ) ;
59675: LD_ADDR_VAR 0 7
59679: PUSH
59680: LD_VAR 0 2
59684: PPUSH
59685: CALL_OW 250
59689: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59690: LD_ADDR_VAR 0 8
59694: PUSH
59695: LD_VAR 0 2
59699: PPUSH
59700: CALL_OW 251
59704: ST_TO_ADDR
// if not x or not y then
59705: LD_VAR 0 7
59709: NOT
59710: PUSH
59711: LD_VAR 0 8
59715: NOT
59716: OR
59717: IFFALSE 59721
// exit ;
59719: GO 60116
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59721: LD_ADDR_VAR 0 6
59725: PUSH
59726: LD_VAR 0 7
59730: PPUSH
59731: LD_INT 0
59733: PPUSH
59734: LD_INT 4
59736: PPUSH
59737: CALL_OW 272
59741: PUSH
59742: LD_VAR 0 8
59746: PPUSH
59747: LD_INT 0
59749: PPUSH
59750: LD_INT 4
59752: PPUSH
59753: CALL_OW 273
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_VAR 0 7
59766: PPUSH
59767: LD_INT 1
59769: PPUSH
59770: LD_INT 4
59772: PPUSH
59773: CALL_OW 272
59777: PUSH
59778: LD_VAR 0 8
59782: PPUSH
59783: LD_INT 1
59785: PPUSH
59786: LD_INT 4
59788: PPUSH
59789: CALL_OW 273
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_VAR 0 7
59802: PPUSH
59803: LD_INT 2
59805: PPUSH
59806: LD_INT 4
59808: PPUSH
59809: CALL_OW 272
59813: PUSH
59814: LD_VAR 0 8
59818: PPUSH
59819: LD_INT 2
59821: PPUSH
59822: LD_INT 4
59824: PPUSH
59825: CALL_OW 273
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_VAR 0 7
59838: PPUSH
59839: LD_INT 3
59841: PPUSH
59842: LD_INT 4
59844: PPUSH
59845: CALL_OW 272
59849: PUSH
59850: LD_VAR 0 8
59854: PPUSH
59855: LD_INT 3
59857: PPUSH
59858: LD_INT 4
59860: PPUSH
59861: CALL_OW 273
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 7
59874: PPUSH
59875: LD_INT 4
59877: PPUSH
59878: LD_INT 4
59880: PPUSH
59881: CALL_OW 272
59885: PUSH
59886: LD_VAR 0 8
59890: PPUSH
59891: LD_INT 4
59893: PPUSH
59894: LD_INT 4
59896: PPUSH
59897: CALL_OW 273
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_VAR 0 7
59910: PPUSH
59911: LD_INT 5
59913: PPUSH
59914: LD_INT 4
59916: PPUSH
59917: CALL_OW 272
59921: PUSH
59922: LD_VAR 0 8
59926: PPUSH
59927: LD_INT 5
59929: PPUSH
59930: LD_INT 4
59932: PPUSH
59933: CALL_OW 273
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// for i = tmp downto 1 do
59950: LD_ADDR_VAR 0 4
59954: PUSH
59955: DOUBLE
59956: LD_VAR 0 6
59960: INC
59961: ST_TO_ADDR
59962: LD_INT 1
59964: PUSH
59965: FOR_DOWNTO
59966: IFFALSE 60067
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59968: LD_VAR 0 6
59972: PUSH
59973: LD_VAR 0 4
59977: ARRAY
59978: PUSH
59979: LD_INT 1
59981: ARRAY
59982: PPUSH
59983: LD_VAR 0 6
59987: PUSH
59988: LD_VAR 0 4
59992: ARRAY
59993: PUSH
59994: LD_INT 2
59996: ARRAY
59997: PPUSH
59998: CALL_OW 488
60002: NOT
60003: PUSH
60004: LD_VAR 0 6
60008: PUSH
60009: LD_VAR 0 4
60013: ARRAY
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: LD_VAR 0 6
60023: PUSH
60024: LD_VAR 0 4
60028: ARRAY
60029: PUSH
60030: LD_INT 2
60032: ARRAY
60033: PPUSH
60034: CALL_OW 428
60038: PUSH
60039: LD_INT 0
60041: NONEQUAL
60042: OR
60043: IFFALSE 60065
// tmp := Delete ( tmp , i ) ;
60045: LD_ADDR_VAR 0 6
60049: PUSH
60050: LD_VAR 0 6
60054: PPUSH
60055: LD_VAR 0 4
60059: PPUSH
60060: CALL_OW 3
60064: ST_TO_ADDR
60065: GO 59965
60067: POP
60068: POP
// j := GetClosestHex ( unit , tmp ) ;
60069: LD_ADDR_VAR 0 5
60073: PUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: LD_VAR 0 6
60083: PPUSH
60084: CALL 59369 0 2
60088: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60089: LD_VAR 0 1
60093: PPUSH
60094: LD_VAR 0 5
60098: PUSH
60099: LD_INT 1
60101: ARRAY
60102: PPUSH
60103: LD_VAR 0 5
60107: PUSH
60108: LD_INT 2
60110: ARRAY
60111: PPUSH
60112: CALL_OW 111
// end ;
60116: LD_VAR 0 3
60120: RET
// export function PrepareApemanSoldier ( ) ; begin
60121: LD_INT 0
60123: PPUSH
// uc_nation := 0 ;
60124: LD_ADDR_OWVAR 21
60128: PUSH
60129: LD_INT 0
60131: ST_TO_ADDR
// hc_sex := sex_male ;
60132: LD_ADDR_OWVAR 27
60136: PUSH
60137: LD_INT 1
60139: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60140: LD_ADDR_OWVAR 28
60144: PUSH
60145: LD_INT 15
60147: ST_TO_ADDR
// hc_gallery :=  ;
60148: LD_ADDR_OWVAR 33
60152: PUSH
60153: LD_STRING 
60155: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60156: LD_ADDR_OWVAR 31
60160: PUSH
60161: LD_INT 0
60163: PPUSH
60164: LD_INT 3
60166: PPUSH
60167: CALL_OW 12
60171: PUSH
60172: LD_INT 0
60174: PPUSH
60175: LD_INT 3
60177: PPUSH
60178: CALL_OW 12
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: ST_TO_ADDR
// end ;
60195: LD_VAR 0 1
60199: RET
// export function PrepareApemanEngineer ( ) ; begin
60200: LD_INT 0
60202: PPUSH
// uc_nation := 0 ;
60203: LD_ADDR_OWVAR 21
60207: PUSH
60208: LD_INT 0
60210: ST_TO_ADDR
// hc_sex := sex_male ;
60211: LD_ADDR_OWVAR 27
60215: PUSH
60216: LD_INT 1
60218: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60219: LD_ADDR_OWVAR 28
60223: PUSH
60224: LD_INT 16
60226: ST_TO_ADDR
// hc_gallery :=  ;
60227: LD_ADDR_OWVAR 33
60231: PUSH
60232: LD_STRING 
60234: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60235: LD_ADDR_OWVAR 31
60239: PUSH
60240: LD_INT 0
60242: PPUSH
60243: LD_INT 3
60245: PPUSH
60246: CALL_OW 12
60250: PUSH
60251: LD_INT 0
60253: PPUSH
60254: LD_INT 3
60256: PPUSH
60257: CALL_OW 12
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// end ;
60274: LD_VAR 0 1
60278: RET
// export function PrepareApeman ( agressivity ) ; begin
60279: LD_INT 0
60281: PPUSH
// uc_side := 0 ;
60282: LD_ADDR_OWVAR 20
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// uc_nation := 0 ;
60290: LD_ADDR_OWVAR 21
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// hc_sex := sex_male ;
60298: LD_ADDR_OWVAR 27
60302: PUSH
60303: LD_INT 1
60305: ST_TO_ADDR
// hc_class := class_apeman ;
60306: LD_ADDR_OWVAR 28
60310: PUSH
60311: LD_INT 12
60313: ST_TO_ADDR
// hc_gallery :=  ;
60314: LD_ADDR_OWVAR 33
60318: PUSH
60319: LD_STRING 
60321: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60322: LD_ADDR_OWVAR 35
60326: PUSH
60327: LD_VAR 0 1
60331: NEG
60332: PPUSH
60333: LD_VAR 0 1
60337: PPUSH
60338: CALL_OW 12
60342: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60343: LD_ADDR_OWVAR 31
60347: PUSH
60348: LD_INT 0
60350: PPUSH
60351: LD_INT 3
60353: PPUSH
60354: CALL_OW 12
60358: PUSH
60359: LD_INT 0
60361: PPUSH
60362: LD_INT 3
60364: PPUSH
60365: CALL_OW 12
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// end ;
60382: LD_VAR 0 2
60386: RET
// export function PrepareTiger ( agressivity ) ; begin
60387: LD_INT 0
60389: PPUSH
// uc_side := 0 ;
60390: LD_ADDR_OWVAR 20
60394: PUSH
60395: LD_INT 0
60397: ST_TO_ADDR
// uc_nation := 0 ;
60398: LD_ADDR_OWVAR 21
60402: PUSH
60403: LD_INT 0
60405: ST_TO_ADDR
// hc_class := class_tiger ;
60406: LD_ADDR_OWVAR 28
60410: PUSH
60411: LD_INT 14
60413: ST_TO_ADDR
// hc_gallery :=  ;
60414: LD_ADDR_OWVAR 33
60418: PUSH
60419: LD_STRING 
60421: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60422: LD_ADDR_OWVAR 35
60426: PUSH
60427: LD_VAR 0 1
60431: NEG
60432: PPUSH
60433: LD_VAR 0 1
60437: PPUSH
60438: CALL_OW 12
60442: ST_TO_ADDR
// end ;
60443: LD_VAR 0 2
60447: RET
// export function PrepareEnchidna ( ) ; begin
60448: LD_INT 0
60450: PPUSH
// uc_side := 0 ;
60451: LD_ADDR_OWVAR 20
60455: PUSH
60456: LD_INT 0
60458: ST_TO_ADDR
// uc_nation := 0 ;
60459: LD_ADDR_OWVAR 21
60463: PUSH
60464: LD_INT 0
60466: ST_TO_ADDR
// hc_class := class_baggie ;
60467: LD_ADDR_OWVAR 28
60471: PUSH
60472: LD_INT 13
60474: ST_TO_ADDR
// hc_gallery :=  ;
60475: LD_ADDR_OWVAR 33
60479: PUSH
60480: LD_STRING 
60482: ST_TO_ADDR
// end ;
60483: LD_VAR 0 1
60487: RET
// export function PrepareFrog ( ) ; begin
60488: LD_INT 0
60490: PPUSH
// uc_side := 0 ;
60491: LD_ADDR_OWVAR 20
60495: PUSH
60496: LD_INT 0
60498: ST_TO_ADDR
// uc_nation := 0 ;
60499: LD_ADDR_OWVAR 21
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// hc_class := class_frog ;
60507: LD_ADDR_OWVAR 28
60511: PUSH
60512: LD_INT 19
60514: ST_TO_ADDR
// hc_gallery :=  ;
60515: LD_ADDR_OWVAR 33
60519: PUSH
60520: LD_STRING 
60522: ST_TO_ADDR
// end ;
60523: LD_VAR 0 1
60527: RET
// export function PrepareFish ( ) ; begin
60528: LD_INT 0
60530: PPUSH
// uc_side := 0 ;
60531: LD_ADDR_OWVAR 20
60535: PUSH
60536: LD_INT 0
60538: ST_TO_ADDR
// uc_nation := 0 ;
60539: LD_ADDR_OWVAR 21
60543: PUSH
60544: LD_INT 0
60546: ST_TO_ADDR
// hc_class := class_fish ;
60547: LD_ADDR_OWVAR 28
60551: PUSH
60552: LD_INT 20
60554: ST_TO_ADDR
// hc_gallery :=  ;
60555: LD_ADDR_OWVAR 33
60559: PUSH
60560: LD_STRING 
60562: ST_TO_ADDR
// end ;
60563: LD_VAR 0 1
60567: RET
// export function PrepareBird ( ) ; begin
60568: LD_INT 0
60570: PPUSH
// uc_side := 0 ;
60571: LD_ADDR_OWVAR 20
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// uc_nation := 0 ;
60579: LD_ADDR_OWVAR 21
60583: PUSH
60584: LD_INT 0
60586: ST_TO_ADDR
// hc_class := class_phororhacos ;
60587: LD_ADDR_OWVAR 28
60591: PUSH
60592: LD_INT 18
60594: ST_TO_ADDR
// hc_gallery :=  ;
60595: LD_ADDR_OWVAR 33
60599: PUSH
60600: LD_STRING 
60602: ST_TO_ADDR
// end ;
60603: LD_VAR 0 1
60607: RET
// export function PrepareHorse ( ) ; begin
60608: LD_INT 0
60610: PPUSH
// uc_side := 0 ;
60611: LD_ADDR_OWVAR 20
60615: PUSH
60616: LD_INT 0
60618: ST_TO_ADDR
// uc_nation := 0 ;
60619: LD_ADDR_OWVAR 21
60623: PUSH
60624: LD_INT 0
60626: ST_TO_ADDR
// hc_class := class_horse ;
60627: LD_ADDR_OWVAR 28
60631: PUSH
60632: LD_INT 21
60634: ST_TO_ADDR
// hc_gallery :=  ;
60635: LD_ADDR_OWVAR 33
60639: PUSH
60640: LD_STRING 
60642: ST_TO_ADDR
// end ;
60643: LD_VAR 0 1
60647: RET
// export function PrepareMastodont ( ) ; begin
60648: LD_INT 0
60650: PPUSH
// uc_side := 0 ;
60651: LD_ADDR_OWVAR 20
60655: PUSH
60656: LD_INT 0
60658: ST_TO_ADDR
// uc_nation := 0 ;
60659: LD_ADDR_OWVAR 21
60663: PUSH
60664: LD_INT 0
60666: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60667: LD_ADDR_OWVAR 37
60671: PUSH
60672: LD_INT 31
60674: ST_TO_ADDR
// vc_control := control_rider ;
60675: LD_ADDR_OWVAR 38
60679: PUSH
60680: LD_INT 4
60682: ST_TO_ADDR
// end ;
60683: LD_VAR 0 1
60687: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60688: LD_INT 0
60690: PPUSH
60691: PPUSH
60692: PPUSH
// uc_side = 0 ;
60693: LD_ADDR_OWVAR 20
60697: PUSH
60698: LD_INT 0
60700: ST_TO_ADDR
// uc_nation = 0 ;
60701: LD_ADDR_OWVAR 21
60705: PUSH
60706: LD_INT 0
60708: ST_TO_ADDR
// InitHc_All ( ) ;
60709: CALL_OW 584
// InitVc ;
60713: CALL_OW 20
// if mastodonts then
60717: LD_VAR 0 6
60721: IFFALSE 60788
// for i = 1 to mastodonts do
60723: LD_ADDR_VAR 0 11
60727: PUSH
60728: DOUBLE
60729: LD_INT 1
60731: DEC
60732: ST_TO_ADDR
60733: LD_VAR 0 6
60737: PUSH
60738: FOR_TO
60739: IFFALSE 60786
// begin vc_chassis := 31 ;
60741: LD_ADDR_OWVAR 37
60745: PUSH
60746: LD_INT 31
60748: ST_TO_ADDR
// vc_control := control_rider ;
60749: LD_ADDR_OWVAR 38
60753: PUSH
60754: LD_INT 4
60756: ST_TO_ADDR
// animal := CreateVehicle ;
60757: LD_ADDR_VAR 0 12
60761: PUSH
60762: CALL_OW 45
60766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60767: LD_VAR 0 12
60771: PPUSH
60772: LD_VAR 0 8
60776: PPUSH
60777: LD_INT 0
60779: PPUSH
60780: CALL 62923 0 3
// end ;
60784: GO 60738
60786: POP
60787: POP
// if horses then
60788: LD_VAR 0 5
60792: IFFALSE 60859
// for i = 1 to horses do
60794: LD_ADDR_VAR 0 11
60798: PUSH
60799: DOUBLE
60800: LD_INT 1
60802: DEC
60803: ST_TO_ADDR
60804: LD_VAR 0 5
60808: PUSH
60809: FOR_TO
60810: IFFALSE 60857
// begin hc_class := 21 ;
60812: LD_ADDR_OWVAR 28
60816: PUSH
60817: LD_INT 21
60819: ST_TO_ADDR
// hc_gallery :=  ;
60820: LD_ADDR_OWVAR 33
60824: PUSH
60825: LD_STRING 
60827: ST_TO_ADDR
// animal := CreateHuman ;
60828: LD_ADDR_VAR 0 12
60832: PUSH
60833: CALL_OW 44
60837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60838: LD_VAR 0 12
60842: PPUSH
60843: LD_VAR 0 8
60847: PPUSH
60848: LD_INT 0
60850: PPUSH
60851: CALL 62923 0 3
// end ;
60855: GO 60809
60857: POP
60858: POP
// if birds then
60859: LD_VAR 0 1
60863: IFFALSE 60930
// for i = 1 to birds do
60865: LD_ADDR_VAR 0 11
60869: PUSH
60870: DOUBLE
60871: LD_INT 1
60873: DEC
60874: ST_TO_ADDR
60875: LD_VAR 0 1
60879: PUSH
60880: FOR_TO
60881: IFFALSE 60928
// begin hc_class = 18 ;
60883: LD_ADDR_OWVAR 28
60887: PUSH
60888: LD_INT 18
60890: ST_TO_ADDR
// hc_gallery =  ;
60891: LD_ADDR_OWVAR 33
60895: PUSH
60896: LD_STRING 
60898: ST_TO_ADDR
// animal := CreateHuman ;
60899: LD_ADDR_VAR 0 12
60903: PUSH
60904: CALL_OW 44
60908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60909: LD_VAR 0 12
60913: PPUSH
60914: LD_VAR 0 8
60918: PPUSH
60919: LD_INT 0
60921: PPUSH
60922: CALL 62923 0 3
// end ;
60926: GO 60880
60928: POP
60929: POP
// if tigers then
60930: LD_VAR 0 2
60934: IFFALSE 61018
// for i = 1 to tigers do
60936: LD_ADDR_VAR 0 11
60940: PUSH
60941: DOUBLE
60942: LD_INT 1
60944: DEC
60945: ST_TO_ADDR
60946: LD_VAR 0 2
60950: PUSH
60951: FOR_TO
60952: IFFALSE 61016
// begin hc_class = class_tiger ;
60954: LD_ADDR_OWVAR 28
60958: PUSH
60959: LD_INT 14
60961: ST_TO_ADDR
// hc_gallery =  ;
60962: LD_ADDR_OWVAR 33
60966: PUSH
60967: LD_STRING 
60969: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60970: LD_ADDR_OWVAR 35
60974: PUSH
60975: LD_INT 7
60977: NEG
60978: PPUSH
60979: LD_INT 7
60981: PPUSH
60982: CALL_OW 12
60986: ST_TO_ADDR
// animal := CreateHuman ;
60987: LD_ADDR_VAR 0 12
60991: PUSH
60992: CALL_OW 44
60996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60997: LD_VAR 0 12
61001: PPUSH
61002: LD_VAR 0 8
61006: PPUSH
61007: LD_INT 0
61009: PPUSH
61010: CALL 62923 0 3
// end ;
61014: GO 60951
61016: POP
61017: POP
// if apemans then
61018: LD_VAR 0 3
61022: IFFALSE 61145
// for i = 1 to apemans do
61024: LD_ADDR_VAR 0 11
61028: PUSH
61029: DOUBLE
61030: LD_INT 1
61032: DEC
61033: ST_TO_ADDR
61034: LD_VAR 0 3
61038: PUSH
61039: FOR_TO
61040: IFFALSE 61143
// begin hc_class = class_apeman ;
61042: LD_ADDR_OWVAR 28
61046: PUSH
61047: LD_INT 12
61049: ST_TO_ADDR
// hc_gallery =  ;
61050: LD_ADDR_OWVAR 33
61054: PUSH
61055: LD_STRING 
61057: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61058: LD_ADDR_OWVAR 35
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PPUSH
61067: LD_INT 2
61069: PPUSH
61070: CALL_OW 12
61074: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61075: LD_ADDR_OWVAR 31
61079: PUSH
61080: LD_INT 1
61082: PPUSH
61083: LD_INT 3
61085: PPUSH
61086: CALL_OW 12
61090: PUSH
61091: LD_INT 1
61093: PPUSH
61094: LD_INT 3
61096: PPUSH
61097: CALL_OW 12
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// animal := CreateHuman ;
61114: LD_ADDR_VAR 0 12
61118: PUSH
61119: CALL_OW 44
61123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61124: LD_VAR 0 12
61128: PPUSH
61129: LD_VAR 0 8
61133: PPUSH
61134: LD_INT 0
61136: PPUSH
61137: CALL 62923 0 3
// end ;
61141: GO 61039
61143: POP
61144: POP
// if enchidnas then
61145: LD_VAR 0 4
61149: IFFALSE 61216
// for i = 1 to enchidnas do
61151: LD_ADDR_VAR 0 11
61155: PUSH
61156: DOUBLE
61157: LD_INT 1
61159: DEC
61160: ST_TO_ADDR
61161: LD_VAR 0 4
61165: PUSH
61166: FOR_TO
61167: IFFALSE 61214
// begin hc_class = 13 ;
61169: LD_ADDR_OWVAR 28
61173: PUSH
61174: LD_INT 13
61176: ST_TO_ADDR
// hc_gallery =  ;
61177: LD_ADDR_OWVAR 33
61181: PUSH
61182: LD_STRING 
61184: ST_TO_ADDR
// animal := CreateHuman ;
61185: LD_ADDR_VAR 0 12
61189: PUSH
61190: CALL_OW 44
61194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61195: LD_VAR 0 12
61199: PPUSH
61200: LD_VAR 0 8
61204: PPUSH
61205: LD_INT 0
61207: PPUSH
61208: CALL 62923 0 3
// end ;
61212: GO 61166
61214: POP
61215: POP
// if fishes then
61216: LD_VAR 0 7
61220: IFFALSE 61287
// for i = 1 to fishes do
61222: LD_ADDR_VAR 0 11
61226: PUSH
61227: DOUBLE
61228: LD_INT 1
61230: DEC
61231: ST_TO_ADDR
61232: LD_VAR 0 7
61236: PUSH
61237: FOR_TO
61238: IFFALSE 61285
// begin hc_class = 20 ;
61240: LD_ADDR_OWVAR 28
61244: PUSH
61245: LD_INT 20
61247: ST_TO_ADDR
// hc_gallery =  ;
61248: LD_ADDR_OWVAR 33
61252: PUSH
61253: LD_STRING 
61255: ST_TO_ADDR
// animal := CreateHuman ;
61256: LD_ADDR_VAR 0 12
61260: PUSH
61261: CALL_OW 44
61265: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61266: LD_VAR 0 12
61270: PPUSH
61271: LD_VAR 0 9
61275: PPUSH
61276: LD_INT 0
61278: PPUSH
61279: CALL 62923 0 3
// end ;
61283: GO 61237
61285: POP
61286: POP
// end ;
61287: LD_VAR 0 10
61291: RET
// export function WantHeal ( sci , unit ) ; begin
61292: LD_INT 0
61294: PPUSH
// if GetTaskList ( sci ) > 0 then
61295: LD_VAR 0 1
61299: PPUSH
61300: CALL_OW 437
61304: PUSH
61305: LD_INT 0
61307: GREATER
61308: IFFALSE 61378
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61310: LD_VAR 0 1
61314: PPUSH
61315: CALL_OW 437
61319: PUSH
61320: LD_INT 1
61322: ARRAY
61323: PUSH
61324: LD_INT 1
61326: ARRAY
61327: PUSH
61328: LD_STRING l
61330: EQUAL
61331: PUSH
61332: LD_VAR 0 1
61336: PPUSH
61337: CALL_OW 437
61341: PUSH
61342: LD_INT 1
61344: ARRAY
61345: PUSH
61346: LD_INT 4
61348: ARRAY
61349: PUSH
61350: LD_VAR 0 2
61354: EQUAL
61355: AND
61356: IFFALSE 61368
// result := true else
61358: LD_ADDR_VAR 0 3
61362: PUSH
61363: LD_INT 1
61365: ST_TO_ADDR
61366: GO 61376
// result := false ;
61368: LD_ADDR_VAR 0 3
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// end else
61376: GO 61386
// result := false ;
61378: LD_ADDR_VAR 0 3
61382: PUSH
61383: LD_INT 0
61385: ST_TO_ADDR
// end ;
61386: LD_VAR 0 3
61390: RET
// export function HealTarget ( sci ) ; begin
61391: LD_INT 0
61393: PPUSH
// if not sci then
61394: LD_VAR 0 1
61398: NOT
61399: IFFALSE 61403
// exit ;
61401: GO 61468
// result := 0 ;
61403: LD_ADDR_VAR 0 2
61407: PUSH
61408: LD_INT 0
61410: ST_TO_ADDR
// if GetTaskList ( sci ) then
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 437
61420: IFFALSE 61468
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 437
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: PUSH
61436: LD_INT 1
61438: ARRAY
61439: PUSH
61440: LD_STRING l
61442: EQUAL
61443: IFFALSE 61468
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61445: LD_ADDR_VAR 0 2
61449: PUSH
61450: LD_VAR 0 1
61454: PPUSH
61455: CALL_OW 437
61459: PUSH
61460: LD_INT 1
61462: ARRAY
61463: PUSH
61464: LD_INT 4
61466: ARRAY
61467: ST_TO_ADDR
// end ;
61468: LD_VAR 0 2
61472: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61473: LD_INT 0
61475: PPUSH
61476: PPUSH
61477: PPUSH
61478: PPUSH
// if not base_units then
61479: LD_VAR 0 1
61483: NOT
61484: IFFALSE 61488
// exit ;
61486: GO 61575
// result := false ;
61488: LD_ADDR_VAR 0 2
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61496: LD_ADDR_VAR 0 5
61500: PUSH
61501: LD_VAR 0 1
61505: PPUSH
61506: LD_INT 21
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PPUSH
61516: CALL_OW 72
61520: ST_TO_ADDR
// if not tmp then
61521: LD_VAR 0 5
61525: NOT
61526: IFFALSE 61530
// exit ;
61528: GO 61575
// for i in tmp do
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: LD_VAR 0 5
61539: PUSH
61540: FOR_IN
61541: IFFALSE 61573
// begin result := EnemyInRange ( i , 22 ) ;
61543: LD_ADDR_VAR 0 2
61547: PUSH
61548: LD_VAR 0 3
61552: PPUSH
61553: LD_INT 22
61555: PPUSH
61556: CALL 59244 0 2
61560: ST_TO_ADDR
// if result then
61561: LD_VAR 0 2
61565: IFFALSE 61571
// exit ;
61567: POP
61568: POP
61569: GO 61575
// end ;
61571: GO 61540
61573: POP
61574: POP
// end ;
61575: LD_VAR 0 2
61579: RET
// export function FilterByTag ( units , tag ) ; begin
61580: LD_INT 0
61582: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: LD_INT 120
61595: PUSH
61596: LD_VAR 0 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PPUSH
61605: CALL_OW 72
61609: ST_TO_ADDR
// end ;
61610: LD_VAR 0 3
61614: RET
// export function IsDriver ( un ) ; begin
61615: LD_INT 0
61617: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61618: LD_ADDR_VAR 0 2
61622: PUSH
61623: LD_VAR 0 1
61627: PUSH
61628: LD_INT 55
61630: PUSH
61631: EMPTY
61632: LIST
61633: PPUSH
61634: CALL_OW 69
61638: IN
61639: ST_TO_ADDR
// end ;
61640: LD_VAR 0 2
61644: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61645: LD_INT 0
61647: PPUSH
61648: PPUSH
// list := [ ] ;
61649: LD_ADDR_VAR 0 5
61653: PUSH
61654: EMPTY
61655: ST_TO_ADDR
// case d of 0 :
61656: LD_VAR 0 3
61660: PUSH
61661: LD_INT 0
61663: DOUBLE
61664: EQUAL
61665: IFTRUE 61669
61667: GO 61802
61669: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: LD_VAR 0 1
61679: PUSH
61680: LD_INT 4
61682: MINUS
61683: PUSH
61684: LD_VAR 0 2
61688: PUSH
61689: LD_INT 4
61691: MINUS
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: LD_INT 3
61708: MINUS
61709: PUSH
61710: LD_VAR 0 2
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_VAR 0 1
61727: PUSH
61728: LD_INT 4
61730: PLUS
61731: PUSH
61732: LD_VAR 0 2
61736: PUSH
61737: LD_INT 4
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: PUSH
61745: LD_VAR 0 1
61749: PUSH
61750: LD_INT 3
61752: PLUS
61753: PUSH
61754: LD_VAR 0 2
61758: PUSH
61759: LD_INT 3
61761: PLUS
61762: PUSH
61763: LD_INT 5
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: PUSH
61771: LD_VAR 0 1
61775: PUSH
61776: LD_VAR 0 2
61780: PUSH
61781: LD_INT 4
61783: PLUS
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// end ; 1 :
61800: GO 62500
61802: LD_INT 1
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61810
61808: GO 61943
61810: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61811: LD_ADDR_VAR 0 5
61815: PUSH
61816: LD_VAR 0 1
61820: PUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_INT 4
61828: MINUS
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: LD_INT 3
61845: MINUS
61846: PUSH
61847: LD_VAR 0 2
61851: PUSH
61852: LD_INT 3
61854: MINUS
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: PUSH
61864: LD_VAR 0 1
61868: PUSH
61869: LD_INT 4
61871: MINUS
61872: PUSH
61873: LD_VAR 0 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 1
61890: PUSH
61891: LD_VAR 0 2
61895: PUSH
61896: LD_INT 3
61898: PLUS
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_INT 4
61915: PLUS
61916: PUSH
61917: LD_VAR 0 2
61921: PUSH
61922: LD_INT 4
61924: PLUS
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// end ; 2 :
61941: GO 62500
61943: LD_INT 2
61945: DOUBLE
61946: EQUAL
61947: IFTRUE 61951
61949: GO 62080
61951: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61952: LD_ADDR_VAR 0 5
61956: PUSH
61957: LD_VAR 0 1
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 3
61969: MINUS
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 1
61983: PUSH
61984: LD_INT 4
61986: PLUS
61987: PUSH
61988: LD_VAR 0 2
61992: PUSH
61993: LD_INT 4
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: LD_VAR 0 1
62005: PUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 4
62013: PLUS
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: PUSH
62023: LD_VAR 0 1
62027: PUSH
62028: LD_INT 3
62030: MINUS
62031: PUSH
62032: LD_VAR 0 2
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: PUSH
62045: LD_VAR 0 1
62049: PUSH
62050: LD_INT 4
62052: MINUS
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_INT 4
62061: MINUS
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// end ; 3 :
62078: GO 62500
62080: LD_INT 3
62082: DOUBLE
62083: EQUAL
62084: IFTRUE 62088
62086: GO 62221
62088: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62089: LD_ADDR_VAR 0 5
62093: PUSH
62094: LD_VAR 0 1
62098: PUSH
62099: LD_INT 3
62101: PLUS
62102: PUSH
62103: LD_VAR 0 2
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 1
62120: PUSH
62121: LD_INT 4
62123: PLUS
62124: PUSH
62125: LD_VAR 0 2
62129: PUSH
62130: LD_INT 4
62132: PLUS
62133: PUSH
62134: LD_INT 5
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: LD_INT 4
62149: MINUS
62150: PUSH
62151: LD_VAR 0 2
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_VAR 0 2
62173: PUSH
62174: LD_INT 4
62176: MINUS
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 3
62193: MINUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 3
62202: MINUS
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: ST_TO_ADDR
// end ; 4 :
62219: GO 62500
62221: LD_INT 4
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62229
62227: GO 62362
62229: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62230: LD_ADDR_VAR 0 5
62234: PUSH
62235: LD_VAR 0 1
62239: PUSH
62240: LD_VAR 0 2
62244: PUSH
62245: LD_INT 4
62247: PLUS
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: LD_VAR 0 1
62261: PUSH
62262: LD_INT 3
62264: PLUS
62265: PUSH
62266: LD_VAR 0 2
62270: PUSH
62271: LD_INT 3
62273: PLUS
62274: PUSH
62275: LD_INT 5
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: LIST
62282: PUSH
62283: LD_VAR 0 1
62287: PUSH
62288: LD_INT 4
62290: PLUS
62291: PUSH
62292: LD_VAR 0 2
62296: PUSH
62297: LD_INT 4
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 3
62317: MINUS
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_INT 4
62334: MINUS
62335: PUSH
62336: LD_VAR 0 2
62340: PUSH
62341: LD_INT 4
62343: MINUS
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// end ; 5 :
62360: GO 62500
62362: LD_INT 5
62364: DOUBLE
62365: EQUAL
62366: IFTRUE 62370
62368: GO 62499
62370: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62371: LD_ADDR_VAR 0 5
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_INT 4
62383: MINUS
62384: PUSH
62385: LD_VAR 0 2
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: PUSH
62398: LD_VAR 0 1
62402: PUSH
62403: LD_VAR 0 2
62407: PUSH
62408: LD_INT 4
62410: MINUS
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: LIST
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: LD_INT 4
62427: PLUS
62428: PUSH
62429: LD_VAR 0 2
62433: PUSH
62434: LD_INT 4
62436: PLUS
62437: PUSH
62438: LD_INT 5
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: PUSH
62446: LD_VAR 0 1
62450: PUSH
62451: LD_INT 3
62453: PLUS
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 3
62480: PLUS
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// end ; end ;
62497: GO 62500
62499: POP
// result := list ;
62500: LD_ADDR_VAR 0 4
62504: PUSH
62505: LD_VAR 0 5
62509: ST_TO_ADDR
// end ;
62510: LD_VAR 0 4
62514: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62515: LD_INT 0
62517: PPUSH
62518: PPUSH
62519: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62520: LD_VAR 0 1
62524: NOT
62525: PUSH
62526: LD_VAR 0 2
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: IN
62549: NOT
62550: OR
62551: IFFALSE 62555
// exit ;
62553: GO 62647
// tmp := [ ] ;
62555: LD_ADDR_VAR 0 5
62559: PUSH
62560: EMPTY
62561: ST_TO_ADDR
// for i in units do
62562: LD_ADDR_VAR 0 4
62566: PUSH
62567: LD_VAR 0 1
62571: PUSH
62572: FOR_IN
62573: IFFALSE 62616
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62575: LD_ADDR_VAR 0 5
62579: PUSH
62580: LD_VAR 0 5
62584: PPUSH
62585: LD_VAR 0 5
62589: PUSH
62590: LD_INT 1
62592: PLUS
62593: PPUSH
62594: LD_VAR 0 4
62598: PPUSH
62599: LD_VAR 0 2
62603: PPUSH
62604: CALL_OW 259
62608: PPUSH
62609: CALL_OW 2
62613: ST_TO_ADDR
62614: GO 62572
62616: POP
62617: POP
// if not tmp then
62618: LD_VAR 0 5
62622: NOT
62623: IFFALSE 62627
// exit ;
62625: GO 62647
// result := SortListByListDesc ( units , tmp ) ;
62627: LD_ADDR_VAR 0 3
62631: PUSH
62632: LD_VAR 0 1
62636: PPUSH
62637: LD_VAR 0 5
62641: PPUSH
62642: CALL_OW 77
62646: ST_TO_ADDR
// end ;
62647: LD_VAR 0 3
62651: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62652: LD_INT 0
62654: PPUSH
62655: PPUSH
62656: PPUSH
// result := false ;
62657: LD_ADDR_VAR 0 3
62661: PUSH
62662: LD_INT 0
62664: ST_TO_ADDR
// x := GetX ( building ) ;
62665: LD_ADDR_VAR 0 4
62669: PUSH
62670: LD_VAR 0 2
62674: PPUSH
62675: CALL_OW 250
62679: ST_TO_ADDR
// y := GetY ( building ) ;
62680: LD_ADDR_VAR 0 5
62684: PUSH
62685: LD_VAR 0 2
62689: PPUSH
62690: CALL_OW 251
62694: ST_TO_ADDR
// if not building or not x or not y then
62695: LD_VAR 0 2
62699: NOT
62700: PUSH
62701: LD_VAR 0 4
62705: NOT
62706: OR
62707: PUSH
62708: LD_VAR 0 5
62712: NOT
62713: OR
62714: IFFALSE 62718
// exit ;
62716: GO 62810
// if GetTaskList ( unit ) then
62718: LD_VAR 0 1
62722: PPUSH
62723: CALL_OW 437
62727: IFFALSE 62810
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62729: LD_STRING e
62731: PUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: CALL_OW 437
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: EQUAL
62750: PUSH
62751: LD_VAR 0 4
62755: PUSH
62756: LD_VAR 0 1
62760: PPUSH
62761: CALL_OW 437
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PUSH
62770: LD_INT 2
62772: ARRAY
62773: EQUAL
62774: AND
62775: PUSH
62776: LD_VAR 0 5
62780: PUSH
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 437
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PUSH
62795: LD_INT 3
62797: ARRAY
62798: EQUAL
62799: AND
62800: IFFALSE 62810
// result := true end ;
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: LD_INT 1
62809: ST_TO_ADDR
// end ;
62810: LD_VAR 0 3
62814: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62815: LD_INT 0
62817: PPUSH
// result := false ;
62818: LD_ADDR_VAR 0 4
62822: PUSH
62823: LD_INT 0
62825: ST_TO_ADDR
// if GetTaskList ( unit ) then
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 437
62835: IFFALSE 62918
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62837: LD_STRING M
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: CALL_OW 437
62849: PUSH
62850: LD_INT 1
62852: ARRAY
62853: PUSH
62854: LD_INT 1
62856: ARRAY
62857: EQUAL
62858: PUSH
62859: LD_VAR 0 2
62863: PUSH
62864: LD_VAR 0 1
62868: PPUSH
62869: CALL_OW 437
62873: PUSH
62874: LD_INT 1
62876: ARRAY
62877: PUSH
62878: LD_INT 2
62880: ARRAY
62881: EQUAL
62882: AND
62883: PUSH
62884: LD_VAR 0 3
62888: PUSH
62889: LD_VAR 0 1
62893: PPUSH
62894: CALL_OW 437
62898: PUSH
62899: LD_INT 1
62901: ARRAY
62902: PUSH
62903: LD_INT 3
62905: ARRAY
62906: EQUAL
62907: AND
62908: IFFALSE 62918
// result := true ;
62910: LD_ADDR_VAR 0 4
62914: PUSH
62915: LD_INT 1
62917: ST_TO_ADDR
// end ; end ;
62918: LD_VAR 0 4
62922: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62923: LD_INT 0
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
// if not unit or not area then
62929: LD_VAR 0 1
62933: NOT
62934: PUSH
62935: LD_VAR 0 2
62939: NOT
62940: OR
62941: IFFALSE 62945
// exit ;
62943: GO 63109
// tmp := AreaToList ( area , i ) ;
62945: LD_ADDR_VAR 0 6
62949: PUSH
62950: LD_VAR 0 2
62954: PPUSH
62955: LD_VAR 0 5
62959: PPUSH
62960: CALL_OW 517
62964: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62965: LD_ADDR_VAR 0 5
62969: PUSH
62970: DOUBLE
62971: LD_INT 1
62973: DEC
62974: ST_TO_ADDR
62975: LD_VAR 0 6
62979: PUSH
62980: LD_INT 1
62982: ARRAY
62983: PUSH
62984: FOR_TO
62985: IFFALSE 63107
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62987: LD_ADDR_VAR 0 7
62991: PUSH
62992: LD_VAR 0 6
62996: PUSH
62997: LD_INT 1
62999: ARRAY
63000: PUSH
63001: LD_VAR 0 5
63005: ARRAY
63006: PUSH
63007: LD_VAR 0 6
63011: PUSH
63012: LD_INT 2
63014: ARRAY
63015: PUSH
63016: LD_VAR 0 5
63020: ARRAY
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63026: LD_VAR 0 7
63030: PUSH
63031: LD_INT 1
63033: ARRAY
63034: PPUSH
63035: LD_VAR 0 7
63039: PUSH
63040: LD_INT 2
63042: ARRAY
63043: PPUSH
63044: CALL_OW 428
63048: PUSH
63049: LD_INT 0
63051: EQUAL
63052: IFFALSE 63105
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63054: LD_VAR 0 1
63058: PPUSH
63059: LD_VAR 0 7
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: PPUSH
63068: LD_VAR 0 7
63072: PUSH
63073: LD_INT 2
63075: ARRAY
63076: PPUSH
63077: LD_VAR 0 3
63081: PPUSH
63082: CALL_OW 48
// result := IsPlaced ( unit ) ;
63086: LD_ADDR_VAR 0 4
63090: PUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 305
63100: ST_TO_ADDR
// exit ;
63101: POP
63102: POP
63103: GO 63109
// end ; end ;
63105: GO 62984
63107: POP
63108: POP
// end ;
63109: LD_VAR 0 4
63113: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
// if not side or side > 8 then
63119: LD_VAR 0 1
63123: NOT
63124: PUSH
63125: LD_VAR 0 1
63129: PUSH
63130: LD_INT 8
63132: GREATER
63133: OR
63134: IFFALSE 63138
// exit ;
63136: GO 63325
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63138: LD_ADDR_VAR 0 4
63142: PUSH
63143: LD_INT 22
63145: PUSH
63146: LD_VAR 0 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 21
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PPUSH
63169: CALL_OW 69
63173: ST_TO_ADDR
// if not tmp then
63174: LD_VAR 0 4
63178: NOT
63179: IFFALSE 63183
// exit ;
63181: GO 63325
// enable_addtolog := true ;
63183: LD_ADDR_OWVAR 81
63187: PUSH
63188: LD_INT 1
63190: ST_TO_ADDR
// AddToLog ( [ ) ;
63191: LD_STRING [
63193: PPUSH
63194: CALL_OW 561
// for i in tmp do
63198: LD_ADDR_VAR 0 3
63202: PUSH
63203: LD_VAR 0 4
63207: PUSH
63208: FOR_IN
63209: IFFALSE 63316
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63211: LD_STRING [
63213: PUSH
63214: LD_VAR 0 3
63218: PPUSH
63219: CALL_OW 266
63223: STR
63224: PUSH
63225: LD_STRING , 
63227: STR
63228: PUSH
63229: LD_VAR 0 3
63233: PPUSH
63234: CALL_OW 250
63238: STR
63239: PUSH
63240: LD_STRING , 
63242: STR
63243: PUSH
63244: LD_VAR 0 3
63248: PPUSH
63249: CALL_OW 251
63253: STR
63254: PUSH
63255: LD_STRING , 
63257: STR
63258: PUSH
63259: LD_VAR 0 3
63263: PPUSH
63264: CALL_OW 254
63268: STR
63269: PUSH
63270: LD_STRING , 
63272: STR
63273: PUSH
63274: LD_VAR 0 3
63278: PPUSH
63279: LD_INT 1
63281: PPUSH
63282: CALL_OW 268
63286: STR
63287: PUSH
63288: LD_STRING , 
63290: STR
63291: PUSH
63292: LD_VAR 0 3
63296: PPUSH
63297: LD_INT 2
63299: PPUSH
63300: CALL_OW 268
63304: STR
63305: PUSH
63306: LD_STRING ],
63308: STR
63309: PPUSH
63310: CALL_OW 561
// end ;
63314: GO 63208
63316: POP
63317: POP
// AddToLog ( ]; ) ;
63318: LD_STRING ];
63320: PPUSH
63321: CALL_OW 561
// end ;
63325: LD_VAR 0 2
63329: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63330: LD_INT 0
63332: PPUSH
63333: PPUSH
63334: PPUSH
63335: PPUSH
63336: PPUSH
// if not area or not rate or not max then
63337: LD_VAR 0 1
63341: NOT
63342: PUSH
63343: LD_VAR 0 2
63347: NOT
63348: OR
63349: PUSH
63350: LD_VAR 0 4
63354: NOT
63355: OR
63356: IFFALSE 63360
// exit ;
63358: GO 63549
// while 1 do
63360: LD_INT 1
63362: IFFALSE 63549
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63364: LD_ADDR_VAR 0 9
63368: PUSH
63369: LD_VAR 0 1
63373: PPUSH
63374: LD_INT 1
63376: PPUSH
63377: CALL_OW 287
63381: PUSH
63382: LD_INT 10
63384: MUL
63385: ST_TO_ADDR
// r := rate / 10 ;
63386: LD_ADDR_VAR 0 7
63390: PUSH
63391: LD_VAR 0 2
63395: PUSH
63396: LD_INT 10
63398: DIVREAL
63399: ST_TO_ADDR
// time := 1 1$00 ;
63400: LD_ADDR_VAR 0 8
63404: PUSH
63405: LD_INT 2100
63407: ST_TO_ADDR
// if amount < min then
63408: LD_VAR 0 9
63412: PUSH
63413: LD_VAR 0 3
63417: LESS
63418: IFFALSE 63436
// r := r * 2 else
63420: LD_ADDR_VAR 0 7
63424: PUSH
63425: LD_VAR 0 7
63429: PUSH
63430: LD_INT 2
63432: MUL
63433: ST_TO_ADDR
63434: GO 63462
// if amount > max then
63436: LD_VAR 0 9
63440: PUSH
63441: LD_VAR 0 4
63445: GREATER
63446: IFFALSE 63462
// r := r / 2 ;
63448: LD_ADDR_VAR 0 7
63452: PUSH
63453: LD_VAR 0 7
63457: PUSH
63458: LD_INT 2
63460: DIVREAL
63461: ST_TO_ADDR
// time := time / r ;
63462: LD_ADDR_VAR 0 8
63466: PUSH
63467: LD_VAR 0 8
63471: PUSH
63472: LD_VAR 0 7
63476: DIVREAL
63477: ST_TO_ADDR
// if time < 0 then
63478: LD_VAR 0 8
63482: PUSH
63483: LD_INT 0
63485: LESS
63486: IFFALSE 63503
// time := time * - 1 ;
63488: LD_ADDR_VAR 0 8
63492: PUSH
63493: LD_VAR 0 8
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: MUL
63502: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63503: LD_VAR 0 8
63507: PUSH
63508: LD_INT 35
63510: PPUSH
63511: LD_INT 875
63513: PPUSH
63514: CALL_OW 12
63518: PLUS
63519: PPUSH
63520: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63524: LD_INT 1
63526: PPUSH
63527: LD_INT 5
63529: PPUSH
63530: CALL_OW 12
63534: PPUSH
63535: LD_VAR 0 1
63539: PPUSH
63540: LD_INT 1
63542: PPUSH
63543: CALL_OW 55
// end ;
63547: GO 63360
// end ;
63549: LD_VAR 0 5
63553: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63554: LD_INT 0
63556: PPUSH
63557: PPUSH
63558: PPUSH
63559: PPUSH
63560: PPUSH
63561: PPUSH
63562: PPUSH
63563: PPUSH
// if not turrets or not factories then
63564: LD_VAR 0 1
63568: NOT
63569: PUSH
63570: LD_VAR 0 2
63574: NOT
63575: OR
63576: IFFALSE 63580
// exit ;
63578: GO 63887
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63580: LD_ADDR_VAR 0 10
63584: PUSH
63585: LD_INT 5
63587: PUSH
63588: LD_INT 6
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: LD_INT 5
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 24
63622: PUSH
63623: LD_INT 25
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 23
63632: PUSH
63633: LD_INT 27
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 42
63646: PUSH
63647: LD_INT 43
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 44
63656: PUSH
63657: LD_INT 46
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 45
63666: PUSH
63667: LD_INT 47
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: ST_TO_ADDR
// result := [ ] ;
63684: LD_ADDR_VAR 0 3
63688: PUSH
63689: EMPTY
63690: ST_TO_ADDR
// for i in turrets do
63691: LD_ADDR_VAR 0 4
63695: PUSH
63696: LD_VAR 0 1
63700: PUSH
63701: FOR_IN
63702: IFFALSE 63885
// begin nat := GetNation ( i ) ;
63704: LD_ADDR_VAR 0 7
63708: PUSH
63709: LD_VAR 0 4
63713: PPUSH
63714: CALL_OW 248
63718: ST_TO_ADDR
// weapon := 0 ;
63719: LD_ADDR_VAR 0 8
63723: PUSH
63724: LD_INT 0
63726: ST_TO_ADDR
// if not nat then
63727: LD_VAR 0 7
63731: NOT
63732: IFFALSE 63736
// continue ;
63734: GO 63701
// for j in list [ nat ] do
63736: LD_ADDR_VAR 0 5
63740: PUSH
63741: LD_VAR 0 10
63745: PUSH
63746: LD_VAR 0 7
63750: ARRAY
63751: PUSH
63752: FOR_IN
63753: IFFALSE 63794
// if GetBWeapon ( i ) = j [ 1 ] then
63755: LD_VAR 0 4
63759: PPUSH
63760: CALL_OW 269
63764: PUSH
63765: LD_VAR 0 5
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: EQUAL
63774: IFFALSE 63792
// begin weapon := j [ 2 ] ;
63776: LD_ADDR_VAR 0 8
63780: PUSH
63781: LD_VAR 0 5
63785: PUSH
63786: LD_INT 2
63788: ARRAY
63789: ST_TO_ADDR
// break ;
63790: GO 63794
// end ;
63792: GO 63752
63794: POP
63795: POP
// if not weapon then
63796: LD_VAR 0 8
63800: NOT
63801: IFFALSE 63805
// continue ;
63803: GO 63701
// for k in factories do
63805: LD_ADDR_VAR 0 6
63809: PUSH
63810: LD_VAR 0 2
63814: PUSH
63815: FOR_IN
63816: IFFALSE 63881
// begin weapons := AvailableWeaponList ( k ) ;
63818: LD_ADDR_VAR 0 9
63822: PUSH
63823: LD_VAR 0 6
63827: PPUSH
63828: CALL_OW 478
63832: ST_TO_ADDR
// if not weapons then
63833: LD_VAR 0 9
63837: NOT
63838: IFFALSE 63842
// continue ;
63840: GO 63815
// if weapon in weapons then
63842: LD_VAR 0 8
63846: PUSH
63847: LD_VAR 0 9
63851: IN
63852: IFFALSE 63879
// begin result := [ i , weapon ] ;
63854: LD_ADDR_VAR 0 3
63858: PUSH
63859: LD_VAR 0 4
63863: PUSH
63864: LD_VAR 0 8
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// exit ;
63873: POP
63874: POP
63875: POP
63876: POP
63877: GO 63887
// end ; end ;
63879: GO 63815
63881: POP
63882: POP
// end ;
63883: GO 63701
63885: POP
63886: POP
// end ;
63887: LD_VAR 0 3
63891: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63892: LD_INT 0
63894: PPUSH
// if not side or side > 8 then
63895: LD_VAR 0 3
63899: NOT
63900: PUSH
63901: LD_VAR 0 3
63905: PUSH
63906: LD_INT 8
63908: GREATER
63909: OR
63910: IFFALSE 63914
// exit ;
63912: GO 63973
// if not range then
63914: LD_VAR 0 4
63918: NOT
63919: IFFALSE 63930
// range := - 12 ;
63921: LD_ADDR_VAR 0 4
63925: PUSH
63926: LD_INT 12
63928: NEG
63929: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63930: LD_VAR 0 1
63934: PPUSH
63935: LD_VAR 0 2
63939: PPUSH
63940: LD_VAR 0 3
63944: PPUSH
63945: LD_VAR 0 4
63949: PPUSH
63950: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63954: LD_VAR 0 1
63958: PPUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: CALL_OW 331
// end ;
63973: LD_VAR 0 5
63977: RET
// export function Video ( mode ) ; begin
63978: LD_INT 0
63980: PPUSH
// ingame_video = mode ;
63981: LD_ADDR_OWVAR 52
63985: PUSH
63986: LD_VAR 0 1
63990: ST_TO_ADDR
// interface_hidden = mode ;
63991: LD_ADDR_OWVAR 54
63995: PUSH
63996: LD_VAR 0 1
64000: ST_TO_ADDR
// end ;
64001: LD_VAR 0 2
64005: RET
// export function Join ( array , element ) ; begin
64006: LD_INT 0
64008: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64009: LD_ADDR_VAR 0 3
64013: PUSH
64014: LD_VAR 0 1
64018: PPUSH
64019: LD_VAR 0 1
64023: PUSH
64024: LD_INT 1
64026: PLUS
64027: PPUSH
64028: LD_VAR 0 2
64032: PPUSH
64033: CALL_OW 1
64037: ST_TO_ADDR
// end ;
64038: LD_VAR 0 3
64042: RET
// export function JoinUnion ( array , element ) ; begin
64043: LD_INT 0
64045: PPUSH
// result := array union element ;
64046: LD_ADDR_VAR 0 3
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_VAR 0 2
64060: UNION
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 3
64066: RET
// export function GetBehemoths ( side ) ; begin
64067: LD_INT 0
64069: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64070: LD_ADDR_VAR 0 2
64074: PUSH
64075: LD_INT 22
64077: PUSH
64078: LD_VAR 0 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 31
64089: PUSH
64090: LD_INT 25
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PPUSH
64101: CALL_OW 69
64105: ST_TO_ADDR
// end ;
64106: LD_VAR 0 2
64110: RET
// export function Shuffle ( array ) ; var i , index ; begin
64111: LD_INT 0
64113: PPUSH
64114: PPUSH
64115: PPUSH
// result := [ ] ;
64116: LD_ADDR_VAR 0 2
64120: PUSH
64121: EMPTY
64122: ST_TO_ADDR
// if not array then
64123: LD_VAR 0 1
64127: NOT
64128: IFFALSE 64132
// exit ;
64130: GO 64231
// Randomize ;
64132: CALL_OW 10
// for i = array downto 1 do
64136: LD_ADDR_VAR 0 3
64140: PUSH
64141: DOUBLE
64142: LD_VAR 0 1
64146: INC
64147: ST_TO_ADDR
64148: LD_INT 1
64150: PUSH
64151: FOR_DOWNTO
64152: IFFALSE 64229
// begin index := rand ( 1 , array ) ;
64154: LD_ADDR_VAR 0 4
64158: PUSH
64159: LD_INT 1
64161: PPUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: CALL_OW 12
64171: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64172: LD_ADDR_VAR 0 2
64176: PUSH
64177: LD_VAR 0 2
64181: PPUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_INT 1
64189: PLUS
64190: PPUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_VAR 0 4
64200: ARRAY
64201: PPUSH
64202: CALL_OW 2
64206: ST_TO_ADDR
// array := Delete ( array , index ) ;
64207: LD_ADDR_VAR 0 1
64211: PUSH
64212: LD_VAR 0 1
64216: PPUSH
64217: LD_VAR 0 4
64221: PPUSH
64222: CALL_OW 3
64226: ST_TO_ADDR
// end ;
64227: GO 64151
64229: POP
64230: POP
// end ;
64231: LD_VAR 0 2
64235: RET
// export function GetBaseMaterials ( base ) ; begin
64236: LD_INT 0
64238: PPUSH
// result := [ 0 , 0 , 0 ] ;
64239: LD_ADDR_VAR 0 2
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// if not base then
64258: LD_VAR 0 1
64262: NOT
64263: IFFALSE 64267
// exit ;
64265: GO 64316
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64267: LD_ADDR_VAR 0 2
64271: PUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: LD_INT 1
64279: PPUSH
64280: CALL_OW 275
64284: PUSH
64285: LD_VAR 0 1
64289: PPUSH
64290: LD_INT 2
64292: PPUSH
64293: CALL_OW 275
64297: PUSH
64298: LD_VAR 0 1
64302: PPUSH
64303: LD_INT 3
64305: PPUSH
64306: CALL_OW 275
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// end ;
64316: LD_VAR 0 2
64320: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64321: LD_INT 0
64323: PPUSH
64324: PPUSH
// result := array ;
64325: LD_ADDR_VAR 0 3
64329: PUSH
64330: LD_VAR 0 1
64334: ST_TO_ADDR
// if size >= result then
64335: LD_VAR 0 2
64339: PUSH
64340: LD_VAR 0 3
64344: GREATEREQUAL
64345: IFFALSE 64349
// exit ;
64347: GO 64399
// if size then
64349: LD_VAR 0 2
64353: IFFALSE 64399
// for i := array downto size do
64355: LD_ADDR_VAR 0 4
64359: PUSH
64360: DOUBLE
64361: LD_VAR 0 1
64365: INC
64366: ST_TO_ADDR
64367: LD_VAR 0 2
64371: PUSH
64372: FOR_DOWNTO
64373: IFFALSE 64397
// result := Delete ( result , result ) ;
64375: LD_ADDR_VAR 0 3
64379: PUSH
64380: LD_VAR 0 3
64384: PPUSH
64385: LD_VAR 0 3
64389: PPUSH
64390: CALL_OW 3
64394: ST_TO_ADDR
64395: GO 64372
64397: POP
64398: POP
// end ;
64399: LD_VAR 0 3
64403: RET
// export function ComExit ( unit ) ; var tmp ; begin
64404: LD_INT 0
64406: PPUSH
64407: PPUSH
// if not IsInUnit ( unit ) then
64408: LD_VAR 0 1
64412: PPUSH
64413: CALL_OW 310
64417: NOT
64418: IFFALSE 64422
// exit ;
64420: GO 64482
// tmp := IsInUnit ( unit ) ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 310
64436: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64437: LD_VAR 0 3
64441: PPUSH
64442: CALL_OW 247
64446: PUSH
64447: LD_INT 2
64449: EQUAL
64450: IFFALSE 64463
// ComExitVehicle ( unit ) else
64452: LD_VAR 0 1
64456: PPUSH
64457: CALL_OW 121
64461: GO 64472
// ComExitBuilding ( unit ) ;
64463: LD_VAR 0 1
64467: PPUSH
64468: CALL_OW 122
// result := tmp ;
64472: LD_ADDR_VAR 0 2
64476: PUSH
64477: LD_VAR 0 3
64481: ST_TO_ADDR
// end ;
64482: LD_VAR 0 2
64486: RET
// export function ComExitAll ( units ) ; var i ; begin
64487: LD_INT 0
64489: PPUSH
64490: PPUSH
// if not units then
64491: LD_VAR 0 1
64495: NOT
64496: IFFALSE 64500
// exit ;
64498: GO 64526
// for i in units do
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: FOR_IN
64511: IFFALSE 64524
// ComExit ( i ) ;
64513: LD_VAR 0 3
64517: PPUSH
64518: CALL 64404 0 1
64522: GO 64510
64524: POP
64525: POP
// end ;
64526: LD_VAR 0 2
64530: RET
// export function ResetHc ; begin
64531: LD_INT 0
64533: PPUSH
// InitHc ;
64534: CALL_OW 19
// hc_importance := 0 ;
64538: LD_ADDR_OWVAR 32
64542: PUSH
64543: LD_INT 0
64545: ST_TO_ADDR
// end ;
64546: LD_VAR 0 1
64550: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64551: LD_INT 0
64553: PPUSH
64554: PPUSH
64555: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64556: LD_ADDR_VAR 0 6
64560: PUSH
64561: LD_VAR 0 1
64565: PUSH
64566: LD_VAR 0 3
64570: PLUS
64571: PUSH
64572: LD_INT 2
64574: DIV
64575: ST_TO_ADDR
// if _x < 0 then
64576: LD_VAR 0 6
64580: PUSH
64581: LD_INT 0
64583: LESS
64584: IFFALSE 64601
// _x := _x * - 1 ;
64586: LD_ADDR_VAR 0 6
64590: PUSH
64591: LD_VAR 0 6
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: MUL
64600: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64601: LD_ADDR_VAR 0 7
64605: PUSH
64606: LD_VAR 0 2
64610: PUSH
64611: LD_VAR 0 4
64615: PLUS
64616: PUSH
64617: LD_INT 2
64619: DIV
64620: ST_TO_ADDR
// if _y < 0 then
64621: LD_VAR 0 7
64625: PUSH
64626: LD_INT 0
64628: LESS
64629: IFFALSE 64646
// _y := _y * - 1 ;
64631: LD_ADDR_VAR 0 7
64635: PUSH
64636: LD_VAR 0 7
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: MUL
64645: ST_TO_ADDR
// result := [ _x , _y ] ;
64646: LD_ADDR_VAR 0 5
64650: PUSH
64651: LD_VAR 0 6
64655: PUSH
64656: LD_VAR 0 7
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// end ;
64665: LD_VAR 0 5
64669: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64670: LD_INT 0
64672: PPUSH
64673: PPUSH
64674: PPUSH
64675: PPUSH
// task := GetTaskList ( unit ) ;
64676: LD_ADDR_VAR 0 7
64680: PUSH
64681: LD_VAR 0 1
64685: PPUSH
64686: CALL_OW 437
64690: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64691: LD_VAR 0 7
64695: NOT
64696: PUSH
64697: LD_VAR 0 1
64701: PPUSH
64702: LD_VAR 0 2
64706: PPUSH
64707: CALL_OW 308
64711: NOT
64712: AND
64713: IFFALSE 64717
// exit ;
64715: GO 64835
// if IsInArea ( unit , area ) then
64717: LD_VAR 0 1
64721: PPUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: CALL_OW 308
64731: IFFALSE 64749
// begin ComMoveToArea ( unit , goAway ) ;
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_VAR 0 3
64742: PPUSH
64743: CALL_OW 113
// exit ;
64747: GO 64835
// end ; if task [ 1 ] [ 1 ] <> M then
64749: LD_VAR 0 7
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: PUSH
64762: LD_STRING M
64764: NONEQUAL
64765: IFFALSE 64769
// exit ;
64767: GO 64835
// x := task [ 1 ] [ 2 ] ;
64769: LD_ADDR_VAR 0 5
64773: PUSH
64774: LD_VAR 0 7
64778: PUSH
64779: LD_INT 1
64781: ARRAY
64782: PUSH
64783: LD_INT 2
64785: ARRAY
64786: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64787: LD_ADDR_VAR 0 6
64791: PUSH
64792: LD_VAR 0 7
64796: PUSH
64797: LD_INT 1
64799: ARRAY
64800: PUSH
64801: LD_INT 3
64803: ARRAY
64804: ST_TO_ADDR
// if InArea ( x , y , area ) then
64805: LD_VAR 0 5
64809: PPUSH
64810: LD_VAR 0 6
64814: PPUSH
64815: LD_VAR 0 2
64819: PPUSH
64820: CALL_OW 309
64824: IFFALSE 64835
// ComStop ( unit ) ;
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 141
// end ;
64835: LD_VAR 0 4
64839: RET
// export function Abs ( value ) ; begin
64840: LD_INT 0
64842: PPUSH
// result := value ;
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: LD_VAR 0 1
64852: ST_TO_ADDR
// if value < 0 then
64853: LD_VAR 0 1
64857: PUSH
64858: LD_INT 0
64860: LESS
64861: IFFALSE 64878
// result := value * - 1 ;
64863: LD_ADDR_VAR 0 2
64867: PUSH
64868: LD_VAR 0 1
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: MUL
64877: ST_TO_ADDR
// end ;
64878: LD_VAR 0 2
64882: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64883: LD_INT 0
64885: PPUSH
64886: PPUSH
64887: PPUSH
64888: PPUSH
64889: PPUSH
64890: PPUSH
64891: PPUSH
64892: PPUSH
// if not unit or not building then
64893: LD_VAR 0 1
64897: NOT
64898: PUSH
64899: LD_VAR 0 2
64903: NOT
64904: OR
64905: IFFALSE 64909
// exit ;
64907: GO 65135
// x := GetX ( building ) ;
64909: LD_ADDR_VAR 0 4
64913: PUSH
64914: LD_VAR 0 2
64918: PPUSH
64919: CALL_OW 250
64923: ST_TO_ADDR
// y := GetY ( building ) ;
64924: LD_ADDR_VAR 0 6
64928: PUSH
64929: LD_VAR 0 2
64933: PPUSH
64934: CALL_OW 251
64938: ST_TO_ADDR
// d := GetDir ( building ) ;
64939: LD_ADDR_VAR 0 8
64943: PUSH
64944: LD_VAR 0 2
64948: PPUSH
64949: CALL_OW 254
64953: ST_TO_ADDR
// r := 4 ;
64954: LD_ADDR_VAR 0 9
64958: PUSH
64959: LD_INT 4
64961: ST_TO_ADDR
// for i := 1 to 5 do
64962: LD_ADDR_VAR 0 10
64966: PUSH
64967: DOUBLE
64968: LD_INT 1
64970: DEC
64971: ST_TO_ADDR
64972: LD_INT 5
64974: PUSH
64975: FOR_TO
64976: IFFALSE 65133
// begin _x := ShiftX ( x , d , r + i ) ;
64978: LD_ADDR_VAR 0 5
64982: PUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: LD_VAR 0 8
64992: PPUSH
64993: LD_VAR 0 9
64997: PUSH
64998: LD_VAR 0 10
65002: PLUS
65003: PPUSH
65004: CALL_OW 272
65008: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65009: LD_ADDR_VAR 0 7
65013: PUSH
65014: LD_VAR 0 6
65018: PPUSH
65019: LD_VAR 0 8
65023: PPUSH
65024: LD_VAR 0 9
65028: PUSH
65029: LD_VAR 0 10
65033: PLUS
65034: PPUSH
65035: CALL_OW 273
65039: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65040: LD_VAR 0 5
65044: PPUSH
65045: LD_VAR 0 7
65049: PPUSH
65050: CALL_OW 488
65054: PUSH
65055: LD_VAR 0 5
65059: PPUSH
65060: LD_VAR 0 7
65064: PPUSH
65065: CALL_OW 428
65069: PPUSH
65070: CALL_OW 247
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: IN
65085: NOT
65086: AND
65087: IFFALSE 65131
// begin ComMoveXY ( unit , _x , _y ) ;
65089: LD_VAR 0 1
65093: PPUSH
65094: LD_VAR 0 5
65098: PPUSH
65099: LD_VAR 0 7
65103: PPUSH
65104: CALL_OW 111
// result := [ _x , _y ] ;
65108: LD_ADDR_VAR 0 3
65112: PUSH
65113: LD_VAR 0 5
65117: PUSH
65118: LD_VAR 0 7
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// exit ;
65127: POP
65128: POP
65129: GO 65135
// end ; end ;
65131: GO 64975
65133: POP
65134: POP
// end ;
65135: LD_VAR 0 3
65139: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65140: LD_INT 0
65142: PPUSH
65143: PPUSH
65144: PPUSH
// result := 0 ;
65145: LD_ADDR_VAR 0 3
65149: PUSH
65150: LD_INT 0
65152: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 0
65160: LESS
65161: PUSH
65162: LD_VAR 0 1
65166: PUSH
65167: LD_INT 8
65169: GREATER
65170: OR
65171: PUSH
65172: LD_VAR 0 2
65176: PUSH
65177: LD_INT 0
65179: LESS
65180: OR
65181: PUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_INT 8
65189: GREATER
65190: OR
65191: IFFALSE 65195
// exit ;
65193: GO 65270
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65195: LD_ADDR_VAR 0 4
65199: PUSH
65200: LD_INT 22
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PPUSH
65212: CALL_OW 69
65216: PUSH
65217: FOR_IN
65218: IFFALSE 65268
// begin un := UnitShoot ( i ) ;
65220: LD_ADDR_VAR 0 5
65224: PUSH
65225: LD_VAR 0 4
65229: PPUSH
65230: CALL_OW 504
65234: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65235: LD_VAR 0 5
65239: PPUSH
65240: CALL_OW 255
65244: PUSH
65245: LD_VAR 0 1
65249: EQUAL
65250: IFFALSE 65266
// begin result := un ;
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: LD_VAR 0 5
65261: ST_TO_ADDR
// exit ;
65262: POP
65263: POP
65264: GO 65270
// end ; end ;
65266: GO 65217
65268: POP
65269: POP
// end ;
65270: LD_VAR 0 3
65274: RET
// export function GetCargoBay ( units ) ; begin
65275: LD_INT 0
65277: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65278: LD_ADDR_VAR 0 2
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: LD_INT 2
65290: PUSH
65291: LD_INT 34
65293: PUSH
65294: LD_INT 12
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 34
65303: PUSH
65304: LD_INT 51
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 34
65313: PUSH
65314: LD_INT 32
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 34
65323: PUSH
65324: LD_EXP 99
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: PPUSH
65340: CALL_OW 72
65344: ST_TO_ADDR
// end ;
65345: LD_VAR 0 2
65349: RET
// export function Negate ( value ) ; begin
65350: LD_INT 0
65352: PPUSH
// result := not value ;
65353: LD_ADDR_VAR 0 2
65357: PUSH
65358: LD_VAR 0 1
65362: NOT
65363: ST_TO_ADDR
// end ;
65364: LD_VAR 0 2
65368: RET
// export function Inc ( value ) ; begin
65369: LD_INT 0
65371: PPUSH
// result := value + 1 ;
65372: LD_ADDR_VAR 0 2
65376: PUSH
65377: LD_VAR 0 1
65381: PUSH
65382: LD_INT 1
65384: PLUS
65385: ST_TO_ADDR
// end ;
65386: LD_VAR 0 2
65390: RET
// export function Dec ( value ) ; begin
65391: LD_INT 0
65393: PPUSH
// result := value - 1 ;
65394: LD_ADDR_VAR 0 2
65398: PUSH
65399: LD_VAR 0 1
65403: PUSH
65404: LD_INT 1
65406: MINUS
65407: ST_TO_ADDR
// end ;
65408: LD_VAR 0 2
65412: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65413: LD_INT 0
65415: PPUSH
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
65420: PPUSH
65421: PPUSH
65422: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65423: LD_VAR 0 1
65427: PPUSH
65428: LD_VAR 0 2
65432: PPUSH
65433: CALL_OW 488
65437: NOT
65438: PUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: LD_VAR 0 4
65448: PPUSH
65449: CALL_OW 488
65453: NOT
65454: OR
65455: IFFALSE 65468
// begin result := - 1 ;
65457: LD_ADDR_VAR 0 5
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: ST_TO_ADDR
// exit ;
65466: GO 65703
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65468: LD_ADDR_VAR 0 12
65472: PUSH
65473: LD_VAR 0 1
65477: PPUSH
65478: LD_VAR 0 2
65482: PPUSH
65483: LD_VAR 0 3
65487: PPUSH
65488: LD_VAR 0 4
65492: PPUSH
65493: CALL 64551 0 4
65497: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65498: LD_ADDR_VAR 0 11
65502: PUSH
65503: LD_VAR 0 1
65507: PPUSH
65508: LD_VAR 0 2
65512: PPUSH
65513: LD_VAR 0 12
65517: PUSH
65518: LD_INT 1
65520: ARRAY
65521: PPUSH
65522: LD_VAR 0 12
65526: PUSH
65527: LD_INT 2
65529: ARRAY
65530: PPUSH
65531: CALL_OW 298
65535: ST_TO_ADDR
// distance := 9999 ;
65536: LD_ADDR_VAR 0 10
65540: PUSH
65541: LD_INT 9999
65543: ST_TO_ADDR
// for i := 0 to 5 do
65544: LD_ADDR_VAR 0 6
65548: PUSH
65549: DOUBLE
65550: LD_INT 0
65552: DEC
65553: ST_TO_ADDR
65554: LD_INT 5
65556: PUSH
65557: FOR_TO
65558: IFFALSE 65701
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65560: LD_ADDR_VAR 0 7
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_VAR 0 6
65574: PPUSH
65575: LD_VAR 0 11
65579: PPUSH
65580: CALL_OW 272
65584: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65585: LD_ADDR_VAR 0 8
65589: PUSH
65590: LD_VAR 0 2
65594: PPUSH
65595: LD_VAR 0 6
65599: PPUSH
65600: LD_VAR 0 11
65604: PPUSH
65605: CALL_OW 273
65609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65610: LD_VAR 0 7
65614: PPUSH
65615: LD_VAR 0 8
65619: PPUSH
65620: CALL_OW 488
65624: NOT
65625: IFFALSE 65629
// continue ;
65627: GO 65557
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65629: LD_ADDR_VAR 0 9
65633: PUSH
65634: LD_VAR 0 12
65638: PUSH
65639: LD_INT 1
65641: ARRAY
65642: PPUSH
65643: LD_VAR 0 12
65647: PUSH
65648: LD_INT 2
65650: ARRAY
65651: PPUSH
65652: LD_VAR 0 7
65656: PPUSH
65657: LD_VAR 0 8
65661: PPUSH
65662: CALL_OW 298
65666: ST_TO_ADDR
// if tmp < distance then
65667: LD_VAR 0 9
65671: PUSH
65672: LD_VAR 0 10
65676: LESS
65677: IFFALSE 65699
// begin result := i ;
65679: LD_ADDR_VAR 0 5
65683: PUSH
65684: LD_VAR 0 6
65688: ST_TO_ADDR
// distance := tmp ;
65689: LD_ADDR_VAR 0 10
65693: PUSH
65694: LD_VAR 0 9
65698: ST_TO_ADDR
// end ; end ;
65699: GO 65557
65701: POP
65702: POP
// end ;
65703: LD_VAR 0 5
65707: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65708: LD_INT 0
65710: PPUSH
65711: PPUSH
// if not driver or not IsInUnit ( driver ) then
65712: LD_VAR 0 1
65716: NOT
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 310
65727: NOT
65728: OR
65729: IFFALSE 65733
// exit ;
65731: GO 65823
// vehicle := IsInUnit ( driver ) ;
65733: LD_ADDR_VAR 0 3
65737: PUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 310
65747: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65748: LD_VAR 0 1
65752: PPUSH
65753: LD_STRING \
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: PUSH
65783: LD_STRING E
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_VAR 0 3
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PPUSH
65819: CALL_OW 446
// end ;
65823: LD_VAR 0 2
65827: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65828: LD_INT 0
65830: PPUSH
65831: PPUSH
// if not driver or not IsInUnit ( driver ) then
65832: LD_VAR 0 1
65836: NOT
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: CALL_OW 310
65847: NOT
65848: OR
65849: IFFALSE 65853
// exit ;
65851: GO 65943
// vehicle := IsInUnit ( driver ) ;
65853: LD_ADDR_VAR 0 3
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: CALL_OW 310
65867: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_STRING \
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: PUSH
65903: LD_STRING E
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_VAR 0 3
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PPUSH
65939: CALL_OW 447
// end ;
65943: LD_VAR 0 2
65947: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65948: LD_INT 0
65950: PPUSH
65951: PPUSH
65952: PPUSH
// tmp := [ ] ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: EMPTY
65959: ST_TO_ADDR
// for i in units do
65960: LD_ADDR_VAR 0 4
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: FOR_IN
65971: IFFALSE 66009
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65973: LD_ADDR_VAR 0 5
65977: PUSH
65978: LD_VAR 0 5
65982: PPUSH
65983: LD_VAR 0 5
65987: PUSH
65988: LD_INT 1
65990: PLUS
65991: PPUSH
65992: LD_VAR 0 4
65996: PPUSH
65997: CALL_OW 256
66001: PPUSH
66002: CALL_OW 2
66006: ST_TO_ADDR
66007: GO 65970
66009: POP
66010: POP
// if not tmp then
66011: LD_VAR 0 5
66015: NOT
66016: IFFALSE 66020
// exit ;
66018: GO 66068
// if asc then
66020: LD_VAR 0 2
66024: IFFALSE 66048
// result := SortListByListAsc ( units , tmp ) else
66026: LD_ADDR_VAR 0 3
66030: PUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: LD_VAR 0 5
66040: PPUSH
66041: CALL_OW 76
66045: ST_TO_ADDR
66046: GO 66068
// result := SortListByListDesc ( units , tmp ) ;
66048: LD_ADDR_VAR 0 3
66052: PUSH
66053: LD_VAR 0 1
66057: PPUSH
66058: LD_VAR 0 5
66062: PPUSH
66063: CALL_OW 77
66067: ST_TO_ADDR
// end ;
66068: LD_VAR 0 3
66072: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66073: LD_INT 0
66075: PPUSH
66076: PPUSH
// task := GetTaskList ( mech ) ;
66077: LD_ADDR_VAR 0 4
66081: PUSH
66082: LD_VAR 0 1
66086: PPUSH
66087: CALL_OW 437
66091: ST_TO_ADDR
// if not task then
66092: LD_VAR 0 4
66096: NOT
66097: IFFALSE 66101
// exit ;
66099: GO 66143
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66101: LD_ADDR_VAR 0 3
66105: PUSH
66106: LD_VAR 0 4
66110: PUSH
66111: LD_INT 1
66113: ARRAY
66114: PUSH
66115: LD_INT 1
66117: ARRAY
66118: PUSH
66119: LD_STRING r
66121: EQUAL
66122: PUSH
66123: LD_VAR 0 4
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: PUSH
66132: LD_INT 4
66134: ARRAY
66135: PUSH
66136: LD_VAR 0 2
66140: EQUAL
66141: AND
66142: ST_TO_ADDR
// end ;
66143: LD_VAR 0 3
66147: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66148: LD_INT 0
66150: PPUSH
// SetDir ( unit , d ) ;
66151: LD_VAR 0 1
66155: PPUSH
66156: LD_VAR 0 4
66160: PPUSH
66161: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66165: LD_VAR 0 1
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_VAR 0 3
66179: PPUSH
66180: LD_VAR 0 5
66184: PPUSH
66185: CALL_OW 48
// end ;
66189: LD_VAR 0 6
66193: RET
// export function ToNaturalNumber ( number ) ; begin
66194: LD_INT 0
66196: PPUSH
// result := number div 1 ;
66197: LD_ADDR_VAR 0 2
66201: PUSH
66202: LD_VAR 0 1
66206: PUSH
66207: LD_INT 1
66209: DIV
66210: ST_TO_ADDR
// if number < 0 then
66211: LD_VAR 0 1
66215: PUSH
66216: LD_INT 0
66218: LESS
66219: IFFALSE 66229
// result := 0 ;
66221: LD_ADDR_VAR 0 2
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
// end ;
66229: LD_VAR 0 2
66233: RET
// export function SortByClass ( units , class ) ; var un ; begin
66234: LD_INT 0
66236: PPUSH
66237: PPUSH
// if not units or not class then
66238: LD_VAR 0 1
66242: NOT
66243: PUSH
66244: LD_VAR 0 2
66248: NOT
66249: OR
66250: IFFALSE 66254
// exit ;
66252: GO 66349
// result := [ ] ;
66254: LD_ADDR_VAR 0 3
66258: PUSH
66259: EMPTY
66260: ST_TO_ADDR
// for un in units do
66261: LD_ADDR_VAR 0 4
66265: PUSH
66266: LD_VAR 0 1
66270: PUSH
66271: FOR_IN
66272: IFFALSE 66347
// if GetClass ( un ) = class then
66274: LD_VAR 0 4
66278: PPUSH
66279: CALL_OW 257
66283: PUSH
66284: LD_VAR 0 2
66288: EQUAL
66289: IFFALSE 66316
// result := Insert ( result , 1 , un ) else
66291: LD_ADDR_VAR 0 3
66295: PUSH
66296: LD_VAR 0 3
66300: PPUSH
66301: LD_INT 1
66303: PPUSH
66304: LD_VAR 0 4
66308: PPUSH
66309: CALL_OW 2
66313: ST_TO_ADDR
66314: GO 66345
// result := Replace ( result , result + 1 , un ) ;
66316: LD_ADDR_VAR 0 3
66320: PUSH
66321: LD_VAR 0 3
66325: PPUSH
66326: LD_VAR 0 3
66330: PUSH
66331: LD_INT 1
66333: PLUS
66334: PPUSH
66335: LD_VAR 0 4
66339: PPUSH
66340: CALL_OW 1
66344: ST_TO_ADDR
66345: GO 66271
66347: POP
66348: POP
// end ;
66349: LD_VAR 0 3
66353: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66354: LD_INT 0
66356: PPUSH
66357: PPUSH
66358: PPUSH
66359: PPUSH
66360: PPUSH
66361: PPUSH
66362: PPUSH
// result := [ ] ;
66363: LD_ADDR_VAR 0 4
66367: PUSH
66368: EMPTY
66369: ST_TO_ADDR
// if x - r < 0 then
66370: LD_VAR 0 1
66374: PUSH
66375: LD_VAR 0 3
66379: MINUS
66380: PUSH
66381: LD_INT 0
66383: LESS
66384: IFFALSE 66396
// min_x := 0 else
66386: LD_ADDR_VAR 0 8
66390: PUSH
66391: LD_INT 0
66393: ST_TO_ADDR
66394: GO 66412
// min_x := x - r ;
66396: LD_ADDR_VAR 0 8
66400: PUSH
66401: LD_VAR 0 1
66405: PUSH
66406: LD_VAR 0 3
66410: MINUS
66411: ST_TO_ADDR
// if y - r < 0 then
66412: LD_VAR 0 2
66416: PUSH
66417: LD_VAR 0 3
66421: MINUS
66422: PUSH
66423: LD_INT 0
66425: LESS
66426: IFFALSE 66438
// min_y := 0 else
66428: LD_ADDR_VAR 0 7
66432: PUSH
66433: LD_INT 0
66435: ST_TO_ADDR
66436: GO 66454
// min_y := y - r ;
66438: LD_ADDR_VAR 0 7
66442: PUSH
66443: LD_VAR 0 2
66447: PUSH
66448: LD_VAR 0 3
66452: MINUS
66453: ST_TO_ADDR
// max_x := x + r ;
66454: LD_ADDR_VAR 0 9
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: LD_VAR 0 3
66468: PLUS
66469: ST_TO_ADDR
// max_y := y + r ;
66470: LD_ADDR_VAR 0 10
66474: PUSH
66475: LD_VAR 0 2
66479: PUSH
66480: LD_VAR 0 3
66484: PLUS
66485: ST_TO_ADDR
// for _x = min_x to max_x do
66486: LD_ADDR_VAR 0 5
66490: PUSH
66491: DOUBLE
66492: LD_VAR 0 8
66496: DEC
66497: ST_TO_ADDR
66498: LD_VAR 0 9
66502: PUSH
66503: FOR_TO
66504: IFFALSE 66605
// for _y = min_y to max_y do
66506: LD_ADDR_VAR 0 6
66510: PUSH
66511: DOUBLE
66512: LD_VAR 0 7
66516: DEC
66517: ST_TO_ADDR
66518: LD_VAR 0 10
66522: PUSH
66523: FOR_TO
66524: IFFALSE 66601
// begin if not ValidHex ( _x , _y ) then
66526: LD_VAR 0 5
66530: PPUSH
66531: LD_VAR 0 6
66535: PPUSH
66536: CALL_OW 488
66540: NOT
66541: IFFALSE 66545
// continue ;
66543: GO 66523
// if GetResourceTypeXY ( _x , _y ) then
66545: LD_VAR 0 5
66549: PPUSH
66550: LD_VAR 0 6
66554: PPUSH
66555: CALL_OW 283
66559: IFFALSE 66599
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66561: LD_ADDR_VAR 0 4
66565: PUSH
66566: LD_VAR 0 4
66570: PPUSH
66571: LD_VAR 0 4
66575: PUSH
66576: LD_INT 1
66578: PLUS
66579: PPUSH
66580: LD_VAR 0 5
66584: PUSH
66585: LD_VAR 0 6
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PPUSH
66594: CALL_OW 1
66598: ST_TO_ADDR
// end ;
66599: GO 66523
66601: POP
66602: POP
66603: GO 66503
66605: POP
66606: POP
// end ;
66607: LD_VAR 0 4
66611: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66612: LD_INT 0
66614: PPUSH
66615: PPUSH
66616: PPUSH
66617: PPUSH
66618: PPUSH
66619: PPUSH
66620: PPUSH
66621: PPUSH
// if not units then
66622: LD_VAR 0 1
66626: NOT
66627: IFFALSE 66631
// exit ;
66629: GO 67157
// result := UnitFilter ( units , [ f_ok ] ) ;
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: LD_VAR 0 1
66640: PPUSH
66641: LD_INT 50
66643: PUSH
66644: EMPTY
66645: LIST
66646: PPUSH
66647: CALL_OW 72
66651: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66652: LD_ADDR_VAR 0 8
66656: PUSH
66657: LD_VAR 0 1
66661: PUSH
66662: LD_INT 1
66664: ARRAY
66665: PPUSH
66666: CALL_OW 255
66670: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66671: LD_ADDR_VAR 0 10
66675: PUSH
66676: LD_INT 29
66678: PUSH
66679: LD_EXP 102
66683: PUSH
66684: LD_INT 49
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: ST_TO_ADDR
// if not result then
66692: LD_VAR 0 3
66696: NOT
66697: IFFALSE 66701
// exit ;
66699: GO 67157
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66701: LD_ADDR_VAR 0 5
66705: PUSH
66706: LD_INT 81
66708: PUSH
66709: LD_VAR 0 8
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PPUSH
66718: CALL_OW 69
66722: ST_TO_ADDR
// for i in result do
66723: LD_ADDR_VAR 0 4
66727: PUSH
66728: LD_VAR 0 3
66732: PUSH
66733: FOR_IN
66734: IFFALSE 67155
// begin tag := GetTag ( i ) + 1 ;
66736: LD_ADDR_VAR 0 9
66740: PUSH
66741: LD_VAR 0 4
66745: PPUSH
66746: CALL_OW 110
66750: PUSH
66751: LD_INT 1
66753: PLUS
66754: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66755: LD_ADDR_VAR 0 7
66759: PUSH
66760: LD_VAR 0 4
66764: PPUSH
66765: CALL_OW 250
66769: PPUSH
66770: LD_VAR 0 4
66774: PPUSH
66775: CALL_OW 251
66779: PPUSH
66780: LD_INT 6
66782: PPUSH
66783: CALL 66354 0 3
66787: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66788: LD_VAR 0 4
66792: PPUSH
66793: CALL_OW 247
66797: PUSH
66798: LD_INT 2
66800: EQUAL
66801: PUSH
66802: LD_VAR 0 7
66806: AND
66807: PUSH
66808: LD_VAR 0 4
66812: PPUSH
66813: CALL_OW 264
66817: PUSH
66818: LD_VAR 0 10
66822: IN
66823: NOT
66824: AND
66825: IFFALSE 66864
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66827: LD_VAR 0 4
66831: PPUSH
66832: LD_VAR 0 7
66836: PUSH
66837: LD_INT 1
66839: ARRAY
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PPUSH
66845: LD_VAR 0 7
66849: PUSH
66850: LD_INT 1
66852: ARRAY
66853: PUSH
66854: LD_INT 2
66856: ARRAY
66857: PPUSH
66858: CALL_OW 116
66862: GO 67153
// if path > tag then
66864: LD_VAR 0 2
66868: PUSH
66869: LD_VAR 0 9
66873: GREATER
66874: IFFALSE 67082
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66876: LD_ADDR_VAR 0 6
66880: PUSH
66881: LD_VAR 0 5
66885: PPUSH
66886: LD_INT 91
66888: PUSH
66889: LD_VAR 0 4
66893: PUSH
66894: LD_INT 8
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: PPUSH
66902: CALL_OW 72
66906: ST_TO_ADDR
// if nearEnemy then
66907: LD_VAR 0 6
66911: IFFALSE 66980
// begin if GetWeapon ( i ) = ru_time_lapser then
66913: LD_VAR 0 4
66917: PPUSH
66918: CALL_OW 264
66922: PUSH
66923: LD_INT 49
66925: EQUAL
66926: IFFALSE 66954
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66928: LD_VAR 0 4
66932: PPUSH
66933: LD_VAR 0 6
66937: PPUSH
66938: LD_VAR 0 4
66942: PPUSH
66943: CALL_OW 74
66947: PPUSH
66948: CALL_OW 112
66952: GO 66978
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66954: LD_VAR 0 4
66958: PPUSH
66959: LD_VAR 0 6
66963: PPUSH
66964: LD_VAR 0 4
66968: PPUSH
66969: CALL_OW 74
66973: PPUSH
66974: CALL_OW 115
// end else
66978: GO 67080
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66980: LD_VAR 0 4
66984: PPUSH
66985: LD_VAR 0 2
66989: PUSH
66990: LD_VAR 0 9
66994: ARRAY
66995: PUSH
66996: LD_INT 1
66998: ARRAY
66999: PPUSH
67000: LD_VAR 0 2
67004: PUSH
67005: LD_VAR 0 9
67009: ARRAY
67010: PUSH
67011: LD_INT 2
67013: ARRAY
67014: PPUSH
67015: CALL_OW 297
67019: PUSH
67020: LD_INT 6
67022: GREATER
67023: IFFALSE 67066
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67025: LD_VAR 0 4
67029: PPUSH
67030: LD_VAR 0 2
67034: PUSH
67035: LD_VAR 0 9
67039: ARRAY
67040: PUSH
67041: LD_INT 1
67043: ARRAY
67044: PPUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_VAR 0 9
67054: ARRAY
67055: PUSH
67056: LD_INT 2
67058: ARRAY
67059: PPUSH
67060: CALL_OW 114
67064: GO 67080
// SetTag ( i , tag ) ;
67066: LD_VAR 0 4
67070: PPUSH
67071: LD_VAR 0 9
67075: PPUSH
67076: CALL_OW 109
// end else
67080: GO 67153
// if enemy then
67082: LD_VAR 0 5
67086: IFFALSE 67153
// begin if GetWeapon ( i ) = ru_time_lapser then
67088: LD_VAR 0 4
67092: PPUSH
67093: CALL_OW 264
67097: PUSH
67098: LD_INT 49
67100: EQUAL
67101: IFFALSE 67129
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67103: LD_VAR 0 4
67107: PPUSH
67108: LD_VAR 0 5
67112: PPUSH
67113: LD_VAR 0 4
67117: PPUSH
67118: CALL_OW 74
67122: PPUSH
67123: CALL_OW 112
67127: GO 67153
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67129: LD_VAR 0 4
67133: PPUSH
67134: LD_VAR 0 5
67138: PPUSH
67139: LD_VAR 0 4
67143: PPUSH
67144: CALL_OW 74
67148: PPUSH
67149: CALL_OW 115
// end ; end ;
67153: GO 66733
67155: POP
67156: POP
// end ;
67157: LD_VAR 0 3
67161: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67162: LD_INT 0
67164: PPUSH
67165: PPUSH
67166: PPUSH
// if not unit or IsInUnit ( unit ) then
67167: LD_VAR 0 1
67171: NOT
67172: PUSH
67173: LD_VAR 0 1
67177: PPUSH
67178: CALL_OW 310
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67278
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67187: LD_ADDR_VAR 0 4
67191: PUSH
67192: LD_VAR 0 1
67196: PPUSH
67197: CALL_OW 250
67201: PPUSH
67202: LD_VAR 0 2
67206: PPUSH
67207: LD_INT 1
67209: PPUSH
67210: CALL_OW 272
67214: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67215: LD_ADDR_VAR 0 5
67219: PUSH
67220: LD_VAR 0 1
67224: PPUSH
67225: CALL_OW 251
67229: PPUSH
67230: LD_VAR 0 2
67234: PPUSH
67235: LD_INT 1
67237: PPUSH
67238: CALL_OW 273
67242: ST_TO_ADDR
// if ValidHex ( x , y ) then
67243: LD_VAR 0 4
67247: PPUSH
67248: LD_VAR 0 5
67252: PPUSH
67253: CALL_OW 488
67257: IFFALSE 67278
// ComTurnXY ( unit , x , y ) ;
67259: LD_VAR 0 1
67263: PPUSH
67264: LD_VAR 0 4
67268: PPUSH
67269: LD_VAR 0 5
67273: PPUSH
67274: CALL_OW 118
// end ;
67278: LD_VAR 0 3
67282: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67283: LD_INT 0
67285: PPUSH
67286: PPUSH
// result := false ;
67287: LD_ADDR_VAR 0 3
67291: PUSH
67292: LD_INT 0
67294: ST_TO_ADDR
// if not units then
67295: LD_VAR 0 2
67299: NOT
67300: IFFALSE 67304
// exit ;
67302: GO 67349
// for i in units do
67304: LD_ADDR_VAR 0 4
67308: PUSH
67309: LD_VAR 0 2
67313: PUSH
67314: FOR_IN
67315: IFFALSE 67347
// if See ( side , i ) then
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_VAR 0 4
67326: PPUSH
67327: CALL_OW 292
67331: IFFALSE 67345
// begin result := true ;
67333: LD_ADDR_VAR 0 3
67337: PUSH
67338: LD_INT 1
67340: ST_TO_ADDR
// exit ;
67341: POP
67342: POP
67343: GO 67349
// end ;
67345: GO 67314
67347: POP
67348: POP
// end ;
67349: LD_VAR 0 3
67353: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67354: LD_INT 0
67356: PPUSH
67357: PPUSH
67358: PPUSH
67359: PPUSH
// if not unit or not points then
67360: LD_VAR 0 1
67364: NOT
67365: PUSH
67366: LD_VAR 0 2
67370: NOT
67371: OR
67372: IFFALSE 67376
// exit ;
67374: GO 67466
// dist := 99999 ;
67376: LD_ADDR_VAR 0 5
67380: PUSH
67381: LD_INT 99999
67383: ST_TO_ADDR
// for i in points do
67384: LD_ADDR_VAR 0 4
67388: PUSH
67389: LD_VAR 0 2
67393: PUSH
67394: FOR_IN
67395: IFFALSE 67464
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67397: LD_ADDR_VAR 0 6
67401: PUSH
67402: LD_VAR 0 1
67406: PPUSH
67407: LD_VAR 0 4
67411: PUSH
67412: LD_INT 1
67414: ARRAY
67415: PPUSH
67416: LD_VAR 0 4
67420: PUSH
67421: LD_INT 2
67423: ARRAY
67424: PPUSH
67425: CALL_OW 297
67429: ST_TO_ADDR
// if tmpDist < dist then
67430: LD_VAR 0 6
67434: PUSH
67435: LD_VAR 0 5
67439: LESS
67440: IFFALSE 67462
// begin result := i ;
67442: LD_ADDR_VAR 0 3
67446: PUSH
67447: LD_VAR 0 4
67451: ST_TO_ADDR
// dist := tmpDist ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 6
67461: ST_TO_ADDR
// end ; end ;
67462: GO 67394
67464: POP
67465: POP
// end ;
67466: LD_VAR 0 3
67470: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67471: LD_INT 0
67473: PPUSH
// uc_side := side ;
67474: LD_ADDR_OWVAR 20
67478: PUSH
67479: LD_VAR 0 1
67483: ST_TO_ADDR
// uc_nation := 3 ;
67484: LD_ADDR_OWVAR 21
67488: PUSH
67489: LD_INT 3
67491: ST_TO_ADDR
// vc_chassis := 25 ;
67492: LD_ADDR_OWVAR 37
67496: PUSH
67497: LD_INT 25
67499: ST_TO_ADDR
// vc_engine := engine_siberite ;
67500: LD_ADDR_OWVAR 39
67504: PUSH
67505: LD_INT 3
67507: ST_TO_ADDR
// vc_control := control_computer ;
67508: LD_ADDR_OWVAR 38
67512: PUSH
67513: LD_INT 3
67515: ST_TO_ADDR
// vc_weapon := 59 ;
67516: LD_ADDR_OWVAR 40
67520: PUSH
67521: LD_INT 59
67523: ST_TO_ADDR
// result := CreateVehicle ;
67524: LD_ADDR_VAR 0 5
67528: PUSH
67529: CALL_OW 45
67533: ST_TO_ADDR
// SetDir ( result , d ) ;
67534: LD_VAR 0 5
67538: PPUSH
67539: LD_VAR 0 4
67543: PPUSH
67544: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67548: LD_VAR 0 5
67552: PPUSH
67553: LD_VAR 0 2
67557: PPUSH
67558: LD_VAR 0 3
67562: PPUSH
67563: LD_INT 0
67565: PPUSH
67566: CALL_OW 48
// end ;
67570: LD_VAR 0 5
67574: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67575: LD_INT 0
67577: PPUSH
67578: PPUSH
67579: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67580: LD_ADDR_VAR 0 2
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67603: LD_VAR 0 1
67607: NOT
67608: PUSH
67609: LD_VAR 0 1
67613: PPUSH
67614: CALL_OW 264
67618: PUSH
67619: LD_INT 12
67621: PUSH
67622: LD_INT 51
67624: PUSH
67625: LD_INT 32
67627: PUSH
67628: LD_EXP 99
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: IN
67639: NOT
67640: OR
67641: IFFALSE 67645
// exit ;
67643: GO 67743
// for i := 1 to 3 do
67645: LD_ADDR_VAR 0 3
67649: PUSH
67650: DOUBLE
67651: LD_INT 1
67653: DEC
67654: ST_TO_ADDR
67655: LD_INT 3
67657: PUSH
67658: FOR_TO
67659: IFFALSE 67741
// begin tmp := GetCargo ( cargo , i ) ;
67661: LD_ADDR_VAR 0 4
67665: PUSH
67666: LD_VAR 0 1
67670: PPUSH
67671: LD_VAR 0 3
67675: PPUSH
67676: CALL_OW 289
67680: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: LD_VAR 0 2
67690: PPUSH
67691: LD_VAR 0 3
67695: PPUSH
67696: LD_VAR 0 4
67700: PPUSH
67701: CALL_OW 1
67705: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67706: LD_ADDR_VAR 0 2
67710: PUSH
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_INT 4
67718: PPUSH
67719: LD_VAR 0 2
67723: PUSH
67724: LD_INT 4
67726: ARRAY
67727: PUSH
67728: LD_VAR 0 4
67732: PLUS
67733: PPUSH
67734: CALL_OW 1
67738: ST_TO_ADDR
// end ;
67739: GO 67658
67741: POP
67742: POP
// end ;
67743: LD_VAR 0 2
67747: RET
// export function Length ( array ) ; begin
67748: LD_INT 0
67750: PPUSH
// result := array + 0 ;
67751: LD_ADDR_VAR 0 2
67755: PUSH
67756: LD_VAR 0 1
67760: PUSH
67761: LD_INT 0
67763: PLUS
67764: ST_TO_ADDR
// end ;
67765: LD_VAR 0 2
67769: RET
// export function PrepareArray ( array ) ; begin
67770: LD_INT 0
67772: PPUSH
// result := array diff 0 ;
67773: LD_ADDR_VAR 0 2
67777: PUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 0
67785: DIFF
67786: ST_TO_ADDR
// if not result [ 1 ] then
67787: LD_VAR 0 2
67791: PUSH
67792: LD_INT 1
67794: ARRAY
67795: NOT
67796: IFFALSE 67816
// result := Delete ( result , 1 ) ;
67798: LD_ADDR_VAR 0 2
67802: PUSH
67803: LD_VAR 0 2
67807: PPUSH
67808: LD_INT 1
67810: PPUSH
67811: CALL_OW 3
67815: ST_TO_ADDR
// end ; end_of_file
67816: LD_VAR 0 2
67820: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67821: LD_VAR 0 1
67825: PUSH
67826: LD_INT 200
67828: DOUBLE
67829: GREATEREQUAL
67830: IFFALSE 67838
67832: LD_INT 299
67834: DOUBLE
67835: LESSEQUAL
67836: IFTRUE 67840
67838: GO 67872
67840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 2
67850: PPUSH
67851: LD_VAR 0 3
67855: PPUSH
67856: LD_VAR 0 4
67860: PPUSH
67861: LD_VAR 0 5
67865: PPUSH
67866: CALL 22512 0 5
67870: GO 67949
67872: LD_INT 300
67874: DOUBLE
67875: GREATEREQUAL
67876: IFFALSE 67884
67878: LD_INT 399
67880: DOUBLE
67881: LESSEQUAL
67882: IFTRUE 67886
67884: GO 67948
67886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67887: LD_VAR 0 1
67891: PPUSH
67892: LD_VAR 0 2
67896: PPUSH
67897: LD_VAR 0 3
67901: PPUSH
67902: LD_VAR 0 4
67906: PPUSH
67907: LD_VAR 0 5
67911: PPUSH
67912: LD_VAR 0 6
67916: PPUSH
67917: LD_VAR 0 7
67921: PPUSH
67922: LD_VAR 0 8
67926: PPUSH
67927: LD_VAR 0 9
67931: PPUSH
67932: LD_VAR 0 10
67936: PPUSH
67937: LD_VAR 0 11
67941: PPUSH
67942: CALL 18841 0 11
67946: GO 67949
67948: POP
// end ;
67949: PPOPN 11
67951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67952: LD_VAR 0 1
67956: PPUSH
67957: LD_VAR 0 2
67961: PPUSH
67962: LD_VAR 0 3
67966: PPUSH
67967: LD_VAR 0 4
67971: PPUSH
67972: LD_VAR 0 5
67976: PPUSH
67977: CALL 22248 0 5
// end ; end_of_file
67981: PPOPN 5
67983: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 2
67993: PPUSH
67994: LD_VAR 0 3
67998: PPUSH
67999: LD_VAR 0 4
68003: PPUSH
68004: LD_VAR 0 5
68008: PPUSH
68009: LD_VAR 0 6
68013: PPUSH
68014: CALL 6534 0 6
// end ;
68018: PPOPN 6
68020: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68021: LD_INT 0
68023: PPUSH
// begin if not units then
68024: LD_VAR 0 1
68028: NOT
68029: IFFALSE 68033
// exit ;
68031: GO 68033
// end ;
68033: PPOPN 7
68035: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68036: CALL 6505 0 0
// end ;
68040: PPOPN 1
68042: END
