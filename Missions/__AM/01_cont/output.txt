// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 21518 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 21518 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 21518 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 21518 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 6
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4364
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// DialogueOn ;
4191: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4195: LD_EXP 17
4199: PPUSH
4200: LD_STRING D2-Bobby-3
4202: PPUSH
4203: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4207: LD_EXP 16
4211: PPUSH
4212: LD_STRING D2-JMM-4
4214: PPUSH
4215: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4219: LD_EXP 17
4223: PPUSH
4224: LD_STRING D2-Bobby-4
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4231: LD_EXP 16
4235: PPUSH
4236: LD_STRING D2-JMM-5
4238: PPUSH
4239: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4243: LD_EXP 17
4247: PPUSH
4248: LD_STRING D2-Bobby-5
4250: PPUSH
4251: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4255: LD_EXP 16
4259: PPUSH
4260: LD_STRING D2-JMM-6
4262: PPUSH
4263: CALL_OW 88
// if not powell_contact then
4267: LD_EXP 5
4271: NOT
4272: IFFALSE 4298
// begin Say ( Bobby , D2-Bobby-6 ) ;
4274: LD_EXP 17
4278: PPUSH
4279: LD_STRING D2-Bobby-6
4281: PPUSH
4282: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4286: LD_EXP 16
4290: PPUSH
4291: LD_STRING D2-JMM-7
4293: PPUSH
4294: CALL_OW 88
// end ; DialogueOff ;
4298: CALL_OW 7
// InGameOff ;
4302: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4306: LD_EXP 17
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4318: LD_EXP 16
4322: PUSH
4323: LD_EXP 17
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PPUSH
4332: CALL_OW 139
// bobby_in_squad := true ;
4336: LD_ADDR_EXP 4
4340: PUSH
4341: LD_INT 1
4343: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4344: LD_EXP 5
4348: PUSH
4349: LD_EXP 7
4353: NOT
4354: AND
4355: IFFALSE 4364
// ChangeMissionObjectives ( M2b ) ;
4357: LD_STRING M2b
4359: PPUSH
4360: CALL_OW 337
// end ;
4364: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4365: LD_EXP 3
4369: PUSH
4370: LD_OWVAR 67
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4413
4381: GO 4383
4383: DISABLE
// begin wait ( 1 1$00 ) ;
4384: LD_INT 2100
4386: PPUSH
4387: CALL_OW 67
// if not bobby_in_squad then
4391: LD_EXP 4
4395: NOT
4396: IFFALSE 4413
// ComMoveXY ( Bobby , 75 , 83 ) ;
4398: LD_EXP 17
4402: PPUSH
4403: LD_INT 75
4405: PPUSH
4406: LD_INT 83
4408: PPUSH
4409: CALL_OW 111
// end ;
4413: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4414: LD_EXP 7
4418: PUSH
4419: LD_EXP 4
4423: NOT
4424: AND
4425: IFFALSE 4454
4427: GO 4429
4429: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4430: LD_EXP 17
4434: PPUSH
4435: LD_INT 105
4437: PPUSH
4438: LD_INT 97
4440: PPUSH
4441: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4445: LD_EXP 17
4449: PPUSH
4450: CALL_OW 197
// end ;
4454: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4455: LD_EXP 16
4459: PPUSH
4460: LD_INT 6
4462: PPUSH
4463: CALL_OW 308
4467: PUSH
4468: LD_EXP 16
4472: PPUSH
4473: LD_EXP 17
4477: PPUSH
4478: CALL_OW 296
4482: PUSH
4483: LD_INT 7
4485: LESS
4486: AND
4487: PUSH
4488: LD_EXP 4
4492: AND
4493: IFFALSE 4540
4495: GO 4497
4497: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4498: LD_EXP 16
4502: PUSH
4503: LD_EXP 17
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4516: LD_EXP 16
4520: PPUSH
4521: LD_STRING D2a-JMM-1
4523: PPUSH
4524: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4528: LD_EXP 17
4532: PPUSH
4533: LD_STRING D2a-Bobby-1
4535: PPUSH
4536: CALL_OW 88
// end ;
4540: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4541: LD_EXP 15
4545: PUSH
4546: LD_INT 3
4548: PPUSH
4549: LD_EXP 16
4553: PPUSH
4554: CALL_OW 292
4558: NOT
4559: AND
4560: IFFALSE 4731
4562: GO 4564
4564: DISABLE
// begin wait ( 0 0$5 ) ;
4565: LD_INT 175
4567: PPUSH
4568: CALL_OW 67
// InGameOn ;
4572: CALL_OW 8
// DialogueOn ;
4576: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4580: LD_EXP 19
4584: PPUSH
4585: LD_STRING D3-Pow-1
4587: PPUSH
4588: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4592: LD_EXP 16
4596: PPUSH
4597: LD_STRING D3-JMM-1
4599: PPUSH
4600: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4604: LD_EXP 19
4608: PPUSH
4609: LD_STRING D3-Pow-2
4611: PPUSH
4612: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4616: LD_EXP 16
4620: PPUSH
4621: LD_STRING D3-JMM-2
4623: PPUSH
4624: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4628: LD_EXP 19
4632: PPUSH
4633: LD_STRING D3-Pow-3
4635: PPUSH
4636: CALL_OW 586
// DialogueOff ;
4640: CALL_OW 7
// InGameOff ;
4644: CALL_OW 9
// powell_contact := true ;
4648: LD_ADDR_EXP 5
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4656: LD_INT 10
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 424
// uc_side := 4 ;
4666: LD_ADDR_OWVAR 20
4670: PUSH
4671: LD_INT 4
4673: ST_TO_ADDR
// uc_nation := 1 ;
4674: LD_ADDR_OWVAR 21
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4682: LD_ADDR_EXP 19
4686: PUSH
4687: LD_STRING Powell
4689: PPUSH
4690: LD_INT 0
4692: PPUSH
4693: LD_STRING 
4695: PPUSH
4696: CALL 21518 0 3
4700: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4701: LD_STRING M2
4703: PPUSH
4704: CALL_OW 337
// if not bobby_in_squad then
4708: LD_EXP 4
4712: NOT
4713: IFFALSE 4724
// ChangeMissionObjectives ( M2a ) else
4715: LD_STRING M2a
4717: PPUSH
4718: CALL_OW 337
4722: GO 4731
// ChangeMissionObjectives ( M2b ) ;
4724: LD_STRING M2b
4726: PPUSH
4727: CALL_OW 337
// end ;
4731: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4732: LD_EXP 16
4736: PPUSH
4737: LD_INT 7
4739: PPUSH
4740: CALL_OW 308
4744: IFFALSE 4879
4746: GO 4748
4748: DISABLE
// begin DialogueOn ;
4749: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4753: LD_EXP 20
4757: PPUSH
4758: LD_STRING D4-Rus3-1
4760: PPUSH
4761: CALL_OW 586
// DialogueOff ;
4765: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4769: LD_STRING M3a
4771: PPUSH
4772: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4776: LD_INT 11
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL_OW 424
// Wait ( 0 0$02 ) ;
4786: LD_INT 70
4788: PPUSH
4789: CALL_OW 67
// DialogueOn ;
4793: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4797: LD_EXP 19
4801: PPUSH
4802: LD_STRING D4-Pow-1
4804: PPUSH
4805: CALL_OW 586
// DialogueOff ;
4809: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4813: LD_STRING M3b
4815: PPUSH
4816: CALL_OW 337
// case Query ( Q1 ) of 1 :
4820: LD_STRING Q1
4822: PPUSH
4823: CALL_OW 97
4827: PUSH
4828: LD_INT 1
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4836
4834: GO 4867
4836: POP
// begin macmilan_use_radio := true ;
4837: LD_ADDR_EXP 6
4841: PUSH
4842: LD_INT 1
4844: ST_TO_ADDR
// DialogueOn ;
4845: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4849: LD_EXP 16
4853: PPUSH
4854: LD_STRING D4a-JMM-1
4856: PPUSH
4857: CALL_OW 88
// DialogueOff ;
4861: CALL_OW 7
// end ; 2 :
4865: GO 4879
4867: LD_INT 2
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 4878
4875: POP
// ; end ;
4876: GO 4879
4878: POP
// end ;
4879: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4880: LD_EXP 16
4884: PPUSH
4885: LD_EXP 18
4889: PPUSH
4890: CALL_OW 296
4894: PUSH
4895: LD_INT 8
4897: LESS
4898: PUSH
4899: LD_EXP 18
4903: PPUSH
4904: CALL_OW 302
4908: AND
4909: IFFALSE 5200
4911: GO 4913
4913: DISABLE
// begin InGameOn ;
4914: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4918: LD_EXP 16
4922: PPUSH
4923: LD_EXP 18
4927: PPUSH
4928: CALL_OW 250
4932: PPUSH
4933: LD_EXP 18
4937: PPUSH
4938: CALL_OW 251
4942: PPUSH
4943: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4947: LD_EXP 17
4951: PPUSH
4952: CALL_OW 302
4956: PUSH
4957: LD_EXP 4
4961: AND
4962: IFFALSE 4993
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4964: LD_EXP 17
4968: PPUSH
4969: LD_EXP 16
4973: PPUSH
4974: CALL_OW 250
4978: PPUSH
4979: LD_EXP 16
4983: PPUSH
4984: CALL_OW 251
4988: PPUSH
4989: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4993: LD_EXP 16
4997: PPUSH
4998: LD_STRING D5-JMM-1
5000: PPUSH
5001: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5005: LD_INT 10
5007: PPUSH
5008: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5012: LD_EXP 16
5016: PPUSH
5017: LD_EXP 18
5021: PPUSH
5022: CALL_OW 119
// ComWalk ( Cyrus ) ;
5026: LD_EXP 18
5030: PPUSH
5031: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5035: LD_EXP 18
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5049: LD_EXP 18
5053: PPUSH
5054: LD_STRING D5-Cyrus-1
5056: PPUSH
5057: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5061: LD_EXP 17
5065: PPUSH
5066: CALL_OW 302
5070: PUSH
5071: LD_EXP 4
5075: AND
5076: IFFALSE 5116
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5078: LD_EXP 17
5082: PPUSH
5083: LD_EXP 18
5087: PPUSH
5088: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5092: LD_EXP 17
5096: PPUSH
5097: LD_STRING D5-Bobby-1
5099: PPUSH
5100: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5104: LD_EXP 16
5108: PPUSH
5109: LD_STRING D5-JMM-2
5111: PPUSH
5112: CALL_OW 88
// end ; InGameOff ;
5116: CALL_OW 9
// cyrus_in_squad := true ;
5120: LD_ADDR_EXP 7
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5128: LD_EXP 18
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5140: LD_EXP 5
5144: PUSH
5145: LD_EXP 4
5149: NOT
5150: AND
5151: IFFALSE 5160
// ChangeMissionObjectives ( M2b ) ;
5153: LD_STRING M2b
5155: PPUSH
5156: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5160: LD_EXP 4
5164: NOT
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 255
5175: PUSH
5176: LD_INT 4
5178: EQUAL
5179: AND
5180: PUSH
5181: LD_EXP 17
5185: PPUSH
5186: CALL_OW 302
5190: AND
5191: IFFALSE 5200
// SetAchievement ( ACH_CYRUS ) ;
5193: LD_STRING ACH_CYRUS
5195: PPUSH
5196: CALL_OW 543
// end ;
5200: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5201: LD_EXP 4
5205: PUSH
5206: LD_EXP 7
5210: AND
5211: IFFALSE 5223
5213: GO 5215
5215: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5216: LD_STRING M2c
5218: PPUSH
5219: CALL_OW 337
5223: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5224: LD_EXP 16
5228: PPUSH
5229: LD_INT 8
5231: PPUSH
5232: CALL_OW 308
5236: IFFALSE 5288
5238: GO 5240
5240: DISABLE
// begin macmilan_in_trap := true ;
5241: LD_ADDR_EXP 9
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// DialogueOn ;
5256: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5260: LD_EXP 26
5264: PPUSH
5265: LD_STRING D5-Pok-1
5267: PPUSH
5268: CALL_OW 88
// DialogueOff ;
5272: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5276: LD_EXP 16
5280: PPUSH
5281: LD_STRING D4b-JMM-1
5283: PPUSH
5284: CALL_OW 88
// end ;
5288: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5289: LD_EXP 16
5293: PPUSH
5294: LD_EXP 24
5298: PUSH
5299: LD_EXP 24
5303: ARRAY
5304: PPUSH
5305: CALL_OW 296
5309: PUSH
5310: LD_INT 12
5312: LESS
5313: PUSH
5314: LD_EXP 24
5318: PPUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 24
5324: PUSH
5325: LD_INT 990
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 72
5340: OR
5341: IFFALSE 5571
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_INT 300
5357: PUSH
5358: LD_INT 250
5360: PUSH
5361: LD_INT 200
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_OWVAR 67
5373: ARRAY
5374: ST_TO_ADDR
// for i in russian_meta_guards do
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_EXP 24
5384: PUSH
5385: FOR_IN
5386: IFFALSE 5426
// if IsOk ( i ) then
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 302
5397: IFFALSE 5424
// SetLives ( i , GetLives ( i ) - hp ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 256
5413: PUSH
5414: LD_VAR 0 2
5418: MINUS
5419: PPUSH
5420: CALL_OW 234
5424: GO 5385
5426: POP
5427: POP
// DialogueOn ;
5428: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5432: LD_EXP 24
5436: PUSH
5437: LD_EXP 24
5441: ARRAY
5442: PPUSH
5443: LD_STRING D6-FRus1-1
5445: PPUSH
5446: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5450: LD_EXP 16
5454: PPUSH
5455: LD_STRING D6-JMM-1
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5462: LD_EXP 18
5466: PPUSH
5467: CALL_OW 302
5471: PUSH
5472: LD_EXP 7
5476: AND
5477: IFFALSE 5491
// Say ( Cyrus , D6-Cyrus-1 ) ;
5479: LD_EXP 18
5483: PPUSH
5484: LD_STRING D6-Cyrus-1
5486: PPUSH
5487: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5491: LD_EXP 17
5495: PPUSH
5496: CALL_OW 302
5500: PUSH
5501: LD_EXP 4
5505: AND
5506: IFFALSE 5520
// Say ( Bobby , D6-Bobby-1 ) ;
5508: LD_EXP 17
5512: PPUSH
5513: LD_STRING D6-Bobby-1
5515: PPUSH
5516: CALL_OW 88
// DialogueOff ;
5520: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5524: LD_INT 140
5526: PUSH
5527: LD_INT 105
5529: PUSH
5530: LD_INT 70
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: PUSH
5538: LD_OWVAR 67
5542: ARRAY
5543: PPUSH
5544: CALL_OW 67
// meta_action := true ;
5548: LD_ADDR_EXP 10
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5556: LD_EXP 24
5560: PPUSH
5561: LD_INT 94
5563: PPUSH
5564: LD_INT 8
5566: PPUSH
5567: CALL_OW 114
// end ;
5571: PPOPN 2
5573: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5574: LD_EXP 16
5578: PPUSH
5579: LD_INT 93
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: CALL_OW 297
5589: PUSH
5590: LD_INT 5
5592: LESS
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 1
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 69
5608: PUSH
5609: LD_INT 1
5611: GREATER
5612: AND
5613: IFFALSE 5630
5615: GO 5617
5617: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5618: LD_EXP 16
5622: PPUSH
5623: LD_STRING D6a-JMM-1
5625: PPUSH
5626: CALL_OW 88
5630: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_EXP 16
5640: EQUAL
5641: IFFALSE 5650
// YouLost ( JMM ) ;
5643: LD_STRING JMM
5645: PPUSH
5646: CALL_OW 104
// end ;
5650: PPOPN 1
5652: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5653: LD_VAR 0 1
5657: PUSH
5658: LD_EXP 16
5662: EQUAL
5663: IFFALSE 5672
// YouLost ( JMM ) ;
5665: LD_STRING JMM
5667: PPUSH
5668: CALL_OW 104
// end ;
5672: PPOPN 1
5674: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 10
5682: PPUSH
5683: CALL_OW 308
5687: IFFALSE 5736
5689: GO 5691
5691: DISABLE
// begin bobby_saved := true ;
5692: LD_ADDR_EXP 12
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5700: LD_EXP 17
5704: PPUSH
5705: CALL_OW 256
5709: PPUSH
5710: LD_STRING 01_BobbyLifePoints_1
5712: PPUSH
5713: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5717: LD_EXP 17
5721: PPUSH
5722: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5726: LD_STRING Bobby
5728: PPUSH
5729: LD_INT 1
5731: PPUSH
5732: CALL_OW 101
// end ;
5736: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5737: LD_EXP 18
5741: PPUSH
5742: LD_INT 10
5744: PPUSH
5745: CALL_OW 308
5749: IFFALSE 5798
5751: GO 5753
5753: DISABLE
// begin cyrus_saved := true ;
5754: LD_ADDR_EXP 13
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5762: LD_EXP 18
5766: PPUSH
5767: CALL_OW 256
5771: PPUSH
5772: LD_STRING 01_CyrusLifePoints_1
5774: PPUSH
5775: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5779: LD_EXP 18
5783: PPUSH
5784: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5788: LD_STRING Cyrus
5790: PPUSH
5791: LD_INT 1
5793: PPUSH
5794: CALL_OW 101
// end ;
5798: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5799: LD_EXP 16
5803: PPUSH
5804: LD_INT 10
5806: PPUSH
5807: CALL_OW 308
5811: IFFALSE 6419
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
// begin if macmilan_use_radio then
5824: LD_EXP 6
5828: IFFALSE 5837
// SetAchievement ( ACH_RADIO ) ;
5830: LD_STRING ACH_RADIO
5832: PPUSH
5833: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5837: LD_EXP 13
5841: NOT
5842: PUSH
5843: LD_EXP 7
5847: AND
5848: PUSH
5849: LD_EXP 18
5853: PPUSH
5854: CALL_OW 302
5858: AND
5859: PUSH
5860: LD_EXP 12
5864: NOT
5865: PUSH
5866: LD_EXP 4
5870: AND
5871: PUSH
5872: LD_EXP 17
5876: PPUSH
5877: CALL_OW 302
5881: AND
5882: OR
5883: IFFALSE 5924
// case Query ( Q2 ) of 1 :
5885: LD_STRING Q2
5887: PPUSH
5888: CALL_OW 97
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5912
5901: POP
// wait_for_them := true ; 2 :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
5910: GO 5924
5912: LD_INT 2
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5923
5920: POP
// ; end ;
5921: GO 5924
5923: POP
// if wait_for_them then
5924: LD_VAR 0 3
5928: IFFALSE 6041
// repeat wait ( 0 0$01 ) ;
5930: LD_INT 35
5932: PPUSH
5933: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5937: LD_EXP 13
5941: PUSH
5942: LD_EXP 12
5946: AND
5947: PUSH
5948: LD_EXP 13
5952: PUSH
5953: LD_EXP 4
5957: NOT
5958: PUSH
5959: LD_EXP 17
5963: PPUSH
5964: CALL_OW 303
5968: OR
5969: PUSH
5970: LD_EXP 17
5974: PPUSH
5975: CALL_OW 301
5979: OR
5980: AND
5981: OR
5982: PUSH
5983: LD_EXP 12
5987: PUSH
5988: LD_EXP 7
5992: NOT
5993: PUSH
5994: LD_EXP 18
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 18
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 17
6022: PPUSH
6023: CALL_OW 301
6027: PUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 301
6037: AND
6038: OR
6039: IFFALSE 5930
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6041: LD_EXP 16
6045: PPUSH
6046: CALL_OW 256
6050: PPUSH
6051: LD_STRING 01_JMMLifePoints_1
6053: PPUSH
6054: CALL_OW 39
// RemoveUnit ( JMM ) ;
6058: LD_EXP 16
6062: PPUSH
6063: CALL_OW 64
// to_reward := [ JMM ] ;
6067: LD_ADDR_VAR 0 2
6071: PUSH
6072: LD_EXP 16
6076: PUSH
6077: EMPTY
6078: LIST
6079: ST_TO_ADDR
// if bobby_saved then
6080: LD_EXP 12
6084: IFFALSE 6102
// to_reward := to_reward ^ Bobby ;
6086: LD_ADDR_VAR 0 2
6090: PUSH
6091: LD_VAR 0 2
6095: PUSH
6096: LD_EXP 17
6100: ADD
6101: ST_TO_ADDR
// if cyrus_saved then
6102: LD_EXP 13
6106: IFFALSE 6124
// to_reward := to_reward ^ Cyrus ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_VAR 0 2
6117: PUSH
6118: LD_EXP 18
6122: ADD
6123: ST_TO_ADDR
// m1 := true ;
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// m2 := bobby_saved ;
6132: LD_ADDR_VAR 0 5
6136: PUSH
6137: LD_EXP 12
6141: ST_TO_ADDR
// m3 := cyrus_saved ;
6142: LD_ADDR_VAR 0 6
6146: PUSH
6147: LD_EXP 13
6151: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6152: LD_STRING JMM
6154: PPUSH
6155: LD_INT 1
6157: PPUSH
6158: CALL_OW 101
// if not bobby_in_squad then
6162: LD_EXP 4
6166: NOT
6167: IFFALSE 6180
// AddMedal ( Bobby , - 1 ) ;
6169: LD_STRING Bobby
6171: PPUSH
6172: LD_INT 1
6174: NEG
6175: PPUSH
6176: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6180: LD_EXP 12
6184: NOT
6185: PUSH
6186: LD_EXP 17
6190: PPUSH
6191: CALL_OW 303
6195: PUSH
6196: LD_EXP 17
6200: PPUSH
6201: CALL_OW 301
6205: OR
6206: AND
6207: IFFALSE 6220
// AddMedal ( Bobby , - 2 ) ;
6209: LD_STRING Bobby
6211: PPUSH
6212: LD_INT 2
6214: NEG
6215: PPUSH
6216: CALL_OW 101
// if not cyrus_in_squad then
6220: LD_EXP 7
6224: NOT
6225: IFFALSE 6238
// AddMedal ( Cyrus , - 1 ) ;
6227: LD_STRING Cyrus
6229: PPUSH
6230: LD_INT 1
6232: NEG
6233: PPUSH
6234: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6238: LD_EXP 13
6242: NOT
6243: PUSH
6244: LD_EXP 18
6248: PPUSH
6249: CALL_OW 303
6253: PUSH
6254: LD_EXP 18
6258: PPUSH
6259: CALL_OW 301
6263: OR
6264: AND
6265: IFFALSE 6278
// AddMedal ( Cyrus , - 2 ) ;
6267: LD_STRING Cyrus
6269: PPUSH
6270: LD_INT 2
6272: NEG
6273: PPUSH
6274: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6278: LD_OWVAR 67
6282: PUSH
6283: LD_INT 3
6285: EQUAL
6286: PUSH
6287: LD_VAR 0 4
6291: AND
6292: PUSH
6293: LD_VAR 0 5
6297: AND
6298: PUSH
6299: LD_VAR 0 6
6303: AND
6304: IFFALSE 6316
// SetAchievementEX ( ACH_AMER , 1 ) ;
6306: LD_STRING ACH_AMER
6308: PPUSH
6309: LD_INT 1
6311: PPUSH
6312: CALL_OW 564
// GiveMedals ( MAIN ) ;
6316: LD_STRING MAIN
6318: PPUSH
6319: CALL_OW 102
// RewardPeople ( to_reward ) ;
6323: LD_VAR 0 2
6327: PPUSH
6328: CALL_OW 43
// if bobby_saved then
6332: LD_EXP 12
6336: IFFALSE 6356
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_EXP 2
6347: PUSH
6348: LD_STRING Bobby
6350: STR
6351: PPUSH
6352: CALL_OW 38
// if cyrus_saved then
6356: LD_EXP 13
6360: IFFALSE 6380
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6362: LD_EXP 18
6366: PPUSH
6367: LD_EXP 2
6371: PUSH
6372: LD_STRING Cyrus
6374: STR
6375: PPUSH
6376: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6380: LD_EXP 16
6384: PPUSH
6385: LD_EXP 2
6389: PUSH
6390: LD_STRING JMM
6392: STR
6393: PPUSH
6394: CALL_OW 38
// if tick <= 3 3$00 then
6398: LD_OWVAR 1
6402: PUSH
6403: LD_INT 6300
6405: LESSEQUAL
6406: IFFALSE 6415
// SetAchievement ( ACH_ASPEED_1 ) ;
6408: LD_STRING ACH_ASPEED_1
6410: PPUSH
6411: CALL_OW 543
// YouWin ;
6415: CALL_OW 103
// end ; end_of_file end_of_file
6419: PPOPN 6
6421: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6422: LD_VAR 0 2
6426: PUSH
6427: LD_INT 100
6429: EQUAL
6430: IFFALSE 7379
// begin if not StreamModeActive then
6432: LD_EXP 27
6436: NOT
6437: IFFALSE 6447
// StreamModeActive := true ;
6439: LD_ADDR_EXP 27
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// if p3 = 0 then
6447: LD_VAR 0 3
6451: PUSH
6452: LD_INT 0
6454: EQUAL
6455: IFFALSE 6461
// InitStreamMode ;
6457: CALL 7537 0 0
// if p3 = 1 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 1
6468: EQUAL
6469: IFFALSE 6479
// sRocket := true ;
6471: LD_ADDR_EXP 32
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 2 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 2
6486: EQUAL
6487: IFFALSE 6497
// sSpeed := true ;
6489: LD_ADDR_EXP 31
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 3 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 3
6504: EQUAL
6505: IFFALSE 6515
// sEngine := true ;
6507: LD_ADDR_EXP 33
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 4 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 4
6522: EQUAL
6523: IFFALSE 6533
// sSpec := true ;
6525: LD_ADDR_EXP 30
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 5 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 5
6540: EQUAL
6541: IFFALSE 6551
// sLevel := true ;
6543: LD_ADDR_EXP 34
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 6 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 6
6558: EQUAL
6559: IFFALSE 6569
// sArmoury := true ;
6561: LD_ADDR_EXP 35
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 7 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 7
6576: EQUAL
6577: IFFALSE 6587
// sRadar := true ;
6579: LD_ADDR_EXP 36
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 8 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 8
6594: EQUAL
6595: IFFALSE 6605
// sBunker := true ;
6597: LD_ADDR_EXP 37
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 9 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 9
6612: EQUAL
6613: IFFALSE 6623
// sHack := true ;
6615: LD_ADDR_EXP 38
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 10 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 10
6630: EQUAL
6631: IFFALSE 6641
// sFire := true ;
6633: LD_ADDR_EXP 39
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 11 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 11
6648: EQUAL
6649: IFFALSE 6659
// sRefresh := true ;
6651: LD_ADDR_EXP 40
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 12 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 12
6666: EQUAL
6667: IFFALSE 6677
// sExp := true ;
6669: LD_ADDR_EXP 41
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// if p3 = 13 then
6677: LD_VAR 0 3
6681: PUSH
6682: LD_INT 13
6684: EQUAL
6685: IFFALSE 6695
// sDepot := true ;
6687: LD_ADDR_EXP 42
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// if p3 = 14 then
6695: LD_VAR 0 3
6699: PUSH
6700: LD_INT 14
6702: EQUAL
6703: IFFALSE 6713
// sFlag := true ;
6705: LD_ADDR_EXP 43
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// if p3 = 15 then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 15
6720: EQUAL
6721: IFFALSE 6731
// sKamikadze := true ;
6723: LD_ADDR_EXP 51
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if p3 = 16 then
6731: LD_VAR 0 3
6735: PUSH
6736: LD_INT 16
6738: EQUAL
6739: IFFALSE 6749
// sTroll := true ;
6741: LD_ADDR_EXP 52
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// if p3 = 17 then
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 17
6756: EQUAL
6757: IFFALSE 6767
// sSlow := true ;
6759: LD_ADDR_EXP 53
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// if p3 = 18 then
6767: LD_VAR 0 3
6771: PUSH
6772: LD_INT 18
6774: EQUAL
6775: IFFALSE 6785
// sLack := true ;
6777: LD_ADDR_EXP 54
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// if p3 = 19 then
6785: LD_VAR 0 3
6789: PUSH
6790: LD_INT 19
6792: EQUAL
6793: IFFALSE 6803
// sTank := true ;
6795: LD_ADDR_EXP 56
6799: PUSH
6800: LD_INT 1
6802: ST_TO_ADDR
// if p3 = 20 then
6803: LD_VAR 0 3
6807: PUSH
6808: LD_INT 20
6810: EQUAL
6811: IFFALSE 6821
// sRemote := true ;
6813: LD_ADDR_EXP 57
6817: PUSH
6818: LD_INT 1
6820: ST_TO_ADDR
// if p3 = 21 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 21
6828: EQUAL
6829: IFFALSE 6839
// sPowell := true ;
6831: LD_ADDR_EXP 58
6835: PUSH
6836: LD_INT 1
6838: ST_TO_ADDR
// if p3 = 22 then
6839: LD_VAR 0 3
6843: PUSH
6844: LD_INT 22
6846: EQUAL
6847: IFFALSE 6857
// sTeleport := true ;
6849: LD_ADDR_EXP 61
6853: PUSH
6854: LD_INT 1
6856: ST_TO_ADDR
// if p3 = 23 then
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 23
6864: EQUAL
6865: IFFALSE 6875
// sOilTower := true ;
6867: LD_ADDR_EXP 63
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// if p3 = 24 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 24
6882: EQUAL
6883: IFFALSE 6893
// sShovel := true ;
6885: LD_ADDR_EXP 64
6889: PUSH
6890: LD_INT 1
6892: ST_TO_ADDR
// if p3 = 25 then
6893: LD_VAR 0 3
6897: PUSH
6898: LD_INT 25
6900: EQUAL
6901: IFFALSE 6911
// sSheik := true ;
6903: LD_ADDR_EXP 65
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// if p3 = 26 then
6911: LD_VAR 0 3
6915: PUSH
6916: LD_INT 26
6918: EQUAL
6919: IFFALSE 6929
// sEarthquake := true ;
6921: LD_ADDR_EXP 67
6925: PUSH
6926: LD_INT 1
6928: ST_TO_ADDR
// if p3 = 27 then
6929: LD_VAR 0 3
6933: PUSH
6934: LD_INT 27
6936: EQUAL
6937: IFFALSE 6947
// sAI := true ;
6939: LD_ADDR_EXP 68
6943: PUSH
6944: LD_INT 1
6946: ST_TO_ADDR
// if p3 = 28 then
6947: LD_VAR 0 3
6951: PUSH
6952: LD_INT 28
6954: EQUAL
6955: IFFALSE 6965
// sCargo := true ;
6957: LD_ADDR_EXP 71
6961: PUSH
6962: LD_INT 1
6964: ST_TO_ADDR
// if p3 = 29 then
6965: LD_VAR 0 3
6969: PUSH
6970: LD_INT 29
6972: EQUAL
6973: IFFALSE 6983
// sDLaser := true ;
6975: LD_ADDR_EXP 72
6979: PUSH
6980: LD_INT 1
6982: ST_TO_ADDR
// if p3 = 30 then
6983: LD_VAR 0 3
6987: PUSH
6988: LD_INT 30
6990: EQUAL
6991: IFFALSE 7001
// sExchange := true ;
6993: LD_ADDR_EXP 73
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// if p3 = 31 then
7001: LD_VAR 0 3
7005: PUSH
7006: LD_INT 31
7008: EQUAL
7009: IFFALSE 7019
// sFac := true ;
7011: LD_ADDR_EXP 74
7015: PUSH
7016: LD_INT 1
7018: ST_TO_ADDR
// if p3 = 32 then
7019: LD_VAR 0 3
7023: PUSH
7024: LD_INT 32
7026: EQUAL
7027: IFFALSE 7037
// sPower := true ;
7029: LD_ADDR_EXP 75
7033: PUSH
7034: LD_INT 1
7036: ST_TO_ADDR
// if p3 = 33 then
7037: LD_VAR 0 3
7041: PUSH
7042: LD_INT 33
7044: EQUAL
7045: IFFALSE 7055
// sRandom := true ;
7047: LD_ADDR_EXP 76
7051: PUSH
7052: LD_INT 1
7054: ST_TO_ADDR
// if p3 = 34 then
7055: LD_VAR 0 3
7059: PUSH
7060: LD_INT 34
7062: EQUAL
7063: IFFALSE 7073
// sShield := true ;
7065: LD_ADDR_EXP 77
7069: PUSH
7070: LD_INT 1
7072: ST_TO_ADDR
// if p3 = 35 then
7073: LD_VAR 0 3
7077: PUSH
7078: LD_INT 35
7080: EQUAL
7081: IFFALSE 7091
// sTime := true ;
7083: LD_ADDR_EXP 78
7087: PUSH
7088: LD_INT 1
7090: ST_TO_ADDR
// if p3 = 36 then
7091: LD_VAR 0 3
7095: PUSH
7096: LD_INT 36
7098: EQUAL
7099: IFFALSE 7109
// sTools := true ;
7101: LD_ADDR_EXP 79
7105: PUSH
7106: LD_INT 1
7108: ST_TO_ADDR
// if p3 = 101 then
7109: LD_VAR 0 3
7113: PUSH
7114: LD_INT 101
7116: EQUAL
7117: IFFALSE 7127
// sSold := true ;
7119: LD_ADDR_EXP 44
7123: PUSH
7124: LD_INT 1
7126: ST_TO_ADDR
// if p3 = 102 then
7127: LD_VAR 0 3
7131: PUSH
7132: LD_INT 102
7134: EQUAL
7135: IFFALSE 7145
// sDiff := true ;
7137: LD_ADDR_EXP 45
7141: PUSH
7142: LD_INT 1
7144: ST_TO_ADDR
// if p3 = 103 then
7145: LD_VAR 0 3
7149: PUSH
7150: LD_INT 103
7152: EQUAL
7153: IFFALSE 7163
// sFog := true ;
7155: LD_ADDR_EXP 48
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// if p3 = 104 then
7163: LD_VAR 0 3
7167: PUSH
7168: LD_INT 104
7170: EQUAL
7171: IFFALSE 7181
// sReset := true ;
7173: LD_ADDR_EXP 49
7177: PUSH
7178: LD_INT 1
7180: ST_TO_ADDR
// if p3 = 105 then
7181: LD_VAR 0 3
7185: PUSH
7186: LD_INT 105
7188: EQUAL
7189: IFFALSE 7199
// sSun := true ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// if p3 = 106 then
7199: LD_VAR 0 3
7203: PUSH
7204: LD_INT 106
7206: EQUAL
7207: IFFALSE 7217
// sTiger := true ;
7209: LD_ADDR_EXP 46
7213: PUSH
7214: LD_INT 1
7216: ST_TO_ADDR
// if p3 = 107 then
7217: LD_VAR 0 3
7221: PUSH
7222: LD_INT 107
7224: EQUAL
7225: IFFALSE 7235
// sBomb := true ;
7227: LD_ADDR_EXP 47
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// if p3 = 108 then
7235: LD_VAR 0 3
7239: PUSH
7240: LD_INT 108
7242: EQUAL
7243: IFFALSE 7253
// sWound := true ;
7245: LD_ADDR_EXP 55
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// if p3 = 109 then
7253: LD_VAR 0 3
7257: PUSH
7258: LD_INT 109
7260: EQUAL
7261: IFFALSE 7271
// sBetray := true ;
7263: LD_ADDR_EXP 59
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// if p3 = 110 then
7271: LD_VAR 0 3
7275: PUSH
7276: LD_INT 110
7278: EQUAL
7279: IFFALSE 7289
// sContamin := true ;
7281: LD_ADDR_EXP 60
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// if p3 = 111 then
7289: LD_VAR 0 3
7293: PUSH
7294: LD_INT 111
7296: EQUAL
7297: IFFALSE 7307
// sOil := true ;
7299: LD_ADDR_EXP 62
7303: PUSH
7304: LD_INT 1
7306: ST_TO_ADDR
// if p3 = 112 then
7307: LD_VAR 0 3
7311: PUSH
7312: LD_INT 112
7314: EQUAL
7315: IFFALSE 7325
// sStu := true ;
7317: LD_ADDR_EXP 66
7321: PUSH
7322: LD_INT 1
7324: ST_TO_ADDR
// if p3 = 113 then
7325: LD_VAR 0 3
7329: PUSH
7330: LD_INT 113
7332: EQUAL
7333: IFFALSE 7343
// sBazooka := true ;
7335: LD_ADDR_EXP 69
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// if p3 = 114 then
7343: LD_VAR 0 3
7347: PUSH
7348: LD_INT 114
7350: EQUAL
7351: IFFALSE 7361
// sMortar := true ;
7353: LD_ADDR_EXP 70
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
// if p3 = 115 then
7361: LD_VAR 0 3
7365: PUSH
7366: LD_INT 115
7368: EQUAL
7369: IFFALSE 7379
// sRanger := true ;
7371: LD_ADDR_EXP 80
7375: PUSH
7376: LD_INT 1
7378: ST_TO_ADDR
// end ; if p2 = 101 then
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 101
7386: EQUAL
7387: IFFALSE 7515
// begin case p3 of 1 :
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 1
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7409
7402: POP
// hHackUnlimitedResources ; 2 :
7403: CALL 18550 0 0
7407: GO 7515
7409: LD_INT 2
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackSetLevel10 ; 3 :
7418: CALL 18683 0 0
7422: GO 7515
7424: LD_INT 3
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7439
7432: POP
// hHackSetLevel10YourUnits ; 4 :
7433: CALL 18768 0 0
7437: GO 7515
7439: LD_INT 4
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7454
7447: POP
// hHackInvincible ; 5 :
7448: CALL 19216 0 0
7452: GO 7515
7454: LD_INT 5
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackInvisible ; 6 :
7463: CALL 19327 0 0
7467: GO 7515
7469: LD_INT 6
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackChangeYourSide ; 7 :
7478: CALL 19384 0 0
7482: GO 7515
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackChangeUnitSide ; 8 :
7493: CALL 19426 0 0
7497: GO 7515
7499: LD_INT 8
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7514
7507: POP
// hHackFog ; end ;
7508: CALL 19527 0 0
7512: GO 7515
7514: POP
// end ; end ;
7515: PPOPN 6
7517: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7518: GO 7520
7520: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7521: LD_STRING initStreamRollete();
7523: PPUSH
7524: CALL_OW 559
// InitStreamMode ;
7528: CALL 7537 0 0
// DefineStreamItems ( ) ;
7532: CALL 7977 0 0
// end ;
7536: END
// function InitStreamMode ; begin
7537: LD_INT 0
7539: PPUSH
// streamModeActive := false ;
7540: LD_ADDR_EXP 27
7544: PUSH
7545: LD_INT 0
7547: ST_TO_ADDR
// normalCounter := 36 ;
7548: LD_ADDR_EXP 28
7552: PUSH
7553: LD_INT 36
7555: ST_TO_ADDR
// hardcoreCounter := 16 ;
7556: LD_ADDR_EXP 29
7560: PUSH
7561: LD_INT 16
7563: ST_TO_ADDR
// sRocket := false ;
7564: LD_ADDR_EXP 32
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// sSpeed := false ;
7572: LD_ADDR_EXP 31
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// sEngine := false ;
7580: LD_ADDR_EXP 33
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// sSpec := false ;
7588: LD_ADDR_EXP 30
7592: PUSH
7593: LD_INT 0
7595: ST_TO_ADDR
// sLevel := false ;
7596: LD_ADDR_EXP 34
7600: PUSH
7601: LD_INT 0
7603: ST_TO_ADDR
// sArmoury := false ;
7604: LD_ADDR_EXP 35
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// sRadar := false ;
7612: LD_ADDR_EXP 36
7616: PUSH
7617: LD_INT 0
7619: ST_TO_ADDR
// sBunker := false ;
7620: LD_ADDR_EXP 37
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// sHack := false ;
7628: LD_ADDR_EXP 38
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// sFire := false ;
7636: LD_ADDR_EXP 39
7640: PUSH
7641: LD_INT 0
7643: ST_TO_ADDR
// sRefresh := false ;
7644: LD_ADDR_EXP 40
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// sExp := false ;
7652: LD_ADDR_EXP 41
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// sDepot := false ;
7660: LD_ADDR_EXP 42
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// sFlag := false ;
7668: LD_ADDR_EXP 43
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// sKamikadze := false ;
7676: LD_ADDR_EXP 51
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// sTroll := false ;
7684: LD_ADDR_EXP 52
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// sSlow := false ;
7692: LD_ADDR_EXP 53
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// sLack := false ;
7700: LD_ADDR_EXP 54
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// sTank := false ;
7708: LD_ADDR_EXP 56
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// sRemote := false ;
7716: LD_ADDR_EXP 57
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// sPowell := false ;
7724: LD_ADDR_EXP 58
7728: PUSH
7729: LD_INT 0
7731: ST_TO_ADDR
// sTeleport := false ;
7732: LD_ADDR_EXP 61
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// sOilTower := false ;
7740: LD_ADDR_EXP 63
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// sShovel := false ;
7748: LD_ADDR_EXP 64
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// sSheik := false ;
7756: LD_ADDR_EXP 65
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// sEarthquake := false ;
7764: LD_ADDR_EXP 67
7768: PUSH
7769: LD_INT 0
7771: ST_TO_ADDR
// sAI := false ;
7772: LD_ADDR_EXP 68
7776: PUSH
7777: LD_INT 0
7779: ST_TO_ADDR
// sCargo := false ;
7780: LD_ADDR_EXP 71
7784: PUSH
7785: LD_INT 0
7787: ST_TO_ADDR
// sDLaser := false ;
7788: LD_ADDR_EXP 72
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// sExchange := false ;
7796: LD_ADDR_EXP 73
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// sFac := false ;
7804: LD_ADDR_EXP 74
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// sPower := false ;
7812: LD_ADDR_EXP 75
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// sRandom := false ;
7820: LD_ADDR_EXP 76
7824: PUSH
7825: LD_INT 0
7827: ST_TO_ADDR
// sShield := false ;
7828: LD_ADDR_EXP 77
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// sTime := false ;
7836: LD_ADDR_EXP 78
7840: PUSH
7841: LD_INT 0
7843: ST_TO_ADDR
// sTools := false ;
7844: LD_ADDR_EXP 79
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// sSold := false ;
7852: LD_ADDR_EXP 44
7856: PUSH
7857: LD_INT 0
7859: ST_TO_ADDR
// sDiff := false ;
7860: LD_ADDR_EXP 45
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// sFog := false ;
7868: LD_ADDR_EXP 48
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// sReset := false ;
7876: LD_ADDR_EXP 49
7880: PUSH
7881: LD_INT 0
7883: ST_TO_ADDR
// sSun := false ;
7884: LD_ADDR_EXP 50
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// sTiger := false ;
7892: LD_ADDR_EXP 46
7896: PUSH
7897: LD_INT 0
7899: ST_TO_ADDR
// sBomb := false ;
7900: LD_ADDR_EXP 47
7904: PUSH
7905: LD_INT 0
7907: ST_TO_ADDR
// sWound := false ;
7908: LD_ADDR_EXP 55
7912: PUSH
7913: LD_INT 0
7915: ST_TO_ADDR
// sBetray := false ;
7916: LD_ADDR_EXP 59
7920: PUSH
7921: LD_INT 0
7923: ST_TO_ADDR
// sContamin := false ;
7924: LD_ADDR_EXP 60
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// sOil := false ;
7932: LD_ADDR_EXP 62
7936: PUSH
7937: LD_INT 0
7939: ST_TO_ADDR
// sStu := false ;
7940: LD_ADDR_EXP 66
7944: PUSH
7945: LD_INT 0
7947: ST_TO_ADDR
// sBazooka := false ;
7948: LD_ADDR_EXP 69
7952: PUSH
7953: LD_INT 0
7955: ST_TO_ADDR
// sMortar := false ;
7956: LD_ADDR_EXP 70
7960: PUSH
7961: LD_INT 0
7963: ST_TO_ADDR
// sRanger := false ;
7964: LD_ADDR_EXP 80
7968: PUSH
7969: LD_INT 0
7971: ST_TO_ADDR
// end ;
7972: LD_VAR 0 1
7976: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
7981: PPUSH
7982: PPUSH
7983: PPUSH
// result := [ ] ;
7984: LD_ADDR_VAR 0 1
7988: PUSH
7989: EMPTY
7990: ST_TO_ADDR
// if campaign_id = 1 then
7991: LD_OWVAR 69
7995: PUSH
7996: LD_INT 1
7998: EQUAL
7999: IFFALSE 10937
// begin case mission_number of 1 :
8001: LD_OWVAR 70
8005: PUSH
8006: LD_INT 1
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8078
8014: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8015: LD_ADDR_VAR 0 1
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: LD_INT 4
8025: PUSH
8026: LD_INT 11
8028: PUSH
8029: LD_INT 12
8031: PUSH
8032: LD_INT 15
8034: PUSH
8035: LD_INT 16
8037: PUSH
8038: LD_INT 22
8040: PUSH
8041: LD_INT 23
8043: PUSH
8044: LD_INT 26
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 101
8060: PUSH
8061: LD_INT 102
8063: PUSH
8064: LD_INT 106
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 10935
8078: LD_INT 2
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8158
8086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 11
8100: PUSH
8101: LD_INT 12
8103: PUSH
8104: LD_INT 15
8106: PUSH
8107: LD_INT 16
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 101
8132: PUSH
8133: LD_INT 102
8135: PUSH
8136: LD_INT 105
8138: PUSH
8139: LD_INT 106
8141: PUSH
8142: LD_INT 108
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 10935
8158: LD_INT 3
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8242
8166: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 4
8177: PUSH
8178: LD_INT 5
8180: PUSH
8181: LD_INT 11
8183: PUSH
8184: LD_INT 12
8186: PUSH
8187: LD_INT 15
8189: PUSH
8190: LD_INT 16
8192: PUSH
8193: LD_INT 22
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 101
8216: PUSH
8217: LD_INT 102
8219: PUSH
8220: LD_INT 105
8222: PUSH
8223: LD_INT 106
8225: PUSH
8226: LD_INT 108
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: ST_TO_ADDR
8240: GO 10935
8242: LD_INT 4
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8334
8250: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8251: LD_ADDR_VAR 0 1
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 4
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 8
8267: PUSH
8268: LD_INT 11
8270: PUSH
8271: LD_INT 12
8273: PUSH
8274: LD_INT 15
8276: PUSH
8277: LD_INT 16
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 23
8285: PUSH
8286: LD_INT 26
8288: PUSH
8289: LD_INT 36
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 101
8308: PUSH
8309: LD_INT 102
8311: PUSH
8312: LD_INT 105
8314: PUSH
8315: LD_INT 106
8317: PUSH
8318: LD_INT 108
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
8332: GO 10935
8334: LD_INT 5
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8442
8342: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: LD_INT 4
8353: PUSH
8354: LD_INT 5
8356: PUSH
8357: LD_INT 6
8359: PUSH
8360: LD_INT 8
8362: PUSH
8363: LD_INT 11
8365: PUSH
8366: LD_INT 12
8368: PUSH
8369: LD_INT 15
8371: PUSH
8372: LD_INT 16
8374: PUSH
8375: LD_INT 22
8377: PUSH
8378: LD_INT 23
8380: PUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 26
8386: PUSH
8387: LD_INT 36
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 101
8408: PUSH
8409: LD_INT 102
8411: PUSH
8412: LD_INT 105
8414: PUSH
8415: LD_INT 106
8417: PUSH
8418: LD_INT 108
8420: PUSH
8421: LD_INT 109
8423: PUSH
8424: LD_INT 112
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: ST_TO_ADDR
8440: GO 10935
8442: LD_INT 6
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8570
8450: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 4
8461: PUSH
8462: LD_INT 5
8464: PUSH
8465: LD_INT 6
8467: PUSH
8468: LD_INT 8
8470: PUSH
8471: LD_INT 11
8473: PUSH
8474: LD_INT 12
8476: PUSH
8477: LD_INT 15
8479: PUSH
8480: LD_INT 16
8482: PUSH
8483: LD_INT 20
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 23
8494: PUSH
8495: LD_INT 25
8497: PUSH
8498: LD_INT 26
8500: PUSH
8501: LD_INT 30
8503: PUSH
8504: LD_INT 31
8506: PUSH
8507: LD_INT 32
8509: PUSH
8510: LD_INT 36
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 105
8542: PUSH
8543: LD_INT 106
8545: PUSH
8546: LD_INT 108
8548: PUSH
8549: LD_INT 109
8551: PUSH
8552: LD_INT 112
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: ST_TO_ADDR
8568: GO 10935
8570: LD_INT 7
8572: DOUBLE
8573: EQUAL
8574: IFTRUE 8578
8576: GO 8678
8578: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 4
8589: PUSH
8590: LD_INT 5
8592: PUSH
8593: LD_INT 7
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 12
8601: PUSH
8602: LD_INT 15
8604: PUSH
8605: LD_INT 16
8607: PUSH
8608: LD_INT 20
8610: PUSH
8611: LD_INT 21
8613: PUSH
8614: LD_INT 22
8616: PUSH
8617: LD_INT 23
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 26
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 101
8644: PUSH
8645: LD_INT 102
8647: PUSH
8648: LD_INT 103
8650: PUSH
8651: LD_INT 105
8653: PUSH
8654: LD_INT 106
8656: PUSH
8657: LD_INT 108
8659: PUSH
8660: LD_INT 112
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: ST_TO_ADDR
8676: GO 10935
8678: LD_INT 8
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8814
8686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: LD_INT 4
8697: PUSH
8698: LD_INT 5
8700: PUSH
8701: LD_INT 6
8703: PUSH
8704: LD_INT 7
8706: PUSH
8707: LD_INT 8
8709: PUSH
8710: LD_INT 11
8712: PUSH
8713: LD_INT 12
8715: PUSH
8716: LD_INT 15
8718: PUSH
8719: LD_INT 16
8721: PUSH
8722: LD_INT 20
8724: PUSH
8725: LD_INT 21
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 23
8733: PUSH
8734: LD_INT 25
8736: PUSH
8737: LD_INT 26
8739: PUSH
8740: LD_INT 30
8742: PUSH
8743: LD_INT 31
8745: PUSH
8746: LD_INT 32
8748: PUSH
8749: LD_INT 36
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 102
8779: PUSH
8780: LD_INT 103
8782: PUSH
8783: LD_INT 105
8785: PUSH
8786: LD_INT 106
8788: PUSH
8789: LD_INT 108
8791: PUSH
8792: LD_INT 109
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: ST_TO_ADDR
8812: GO 10935
8814: LD_INT 9
8816: DOUBLE
8817: EQUAL
8818: IFTRUE 8822
8820: GO 8958
8822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_INT 2
8830: PUSH
8831: LD_INT 4
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 6
8839: PUSH
8840: LD_INT 7
8842: PUSH
8843: LD_INT 8
8845: PUSH
8846: LD_INT 11
8848: PUSH
8849: LD_INT 12
8851: PUSH
8852: LD_INT 15
8854: PUSH
8855: LD_INT 16
8857: PUSH
8858: LD_INT 20
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 22
8866: PUSH
8867: LD_INT 23
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 26
8875: PUSH
8876: LD_INT 28
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 31
8884: PUSH
8885: LD_INT 32
8887: PUSH
8888: LD_INT 36
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 101
8916: PUSH
8917: LD_INT 102
8919: PUSH
8920: LD_INT 103
8922: PUSH
8923: LD_INT 105
8925: PUSH
8926: LD_INT 106
8928: PUSH
8929: LD_INT 108
8931: PUSH
8932: LD_INT 109
8934: PUSH
8935: LD_INT 112
8937: PUSH
8938: LD_INT 114
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 10935
8958: LD_INT 10
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9150
8966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 4
8977: PUSH
8978: LD_INT 5
8980: PUSH
8981: LD_INT 6
8983: PUSH
8984: LD_INT 7
8986: PUSH
8987: LD_INT 8
8989: PUSH
8990: LD_INT 9
8992: PUSH
8993: LD_INT 10
8995: PUSH
8996: LD_INT 11
8998: PUSH
8999: LD_INT 12
9001: PUSH
9002: LD_INT 13
9004: PUSH
9005: LD_INT 14
9007: PUSH
9008: LD_INT 15
9010: PUSH
9011: LD_INT 16
9013: PUSH
9014: LD_INT 17
9016: PUSH
9017: LD_INT 18
9019: PUSH
9020: LD_INT 19
9022: PUSH
9023: LD_INT 20
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 23
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: LD_INT 25
9040: PUSH
9041: LD_INT 26
9043: PUSH
9044: LD_INT 28
9046: PUSH
9047: LD_INT 30
9049: PUSH
9050: LD_INT 31
9052: PUSH
9053: LD_INT 32
9055: PUSH
9056: LD_INT 36
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 101
9092: PUSH
9093: LD_INT 102
9095: PUSH
9096: LD_INT 103
9098: PUSH
9099: LD_INT 104
9101: PUSH
9102: LD_INT 105
9104: PUSH
9105: LD_INT 106
9107: PUSH
9108: LD_INT 107
9110: PUSH
9111: LD_INT 108
9113: PUSH
9114: LD_INT 109
9116: PUSH
9117: LD_INT 110
9119: PUSH
9120: LD_INT 111
9122: PUSH
9123: LD_INT 112
9125: PUSH
9126: LD_INT 114
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: ST_TO_ADDR
9148: GO 10935
9150: LD_INT 11
9152: DOUBLE
9153: EQUAL
9154: IFTRUE 9158
9156: GO 9350
9158: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_INT 2
9166: PUSH
9167: LD_INT 3
9169: PUSH
9170: LD_INT 4
9172: PUSH
9173: LD_INT 5
9175: PUSH
9176: LD_INT 6
9178: PUSH
9179: LD_INT 7
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: LD_INT 9
9187: PUSH
9188: LD_INT 10
9190: PUSH
9191: LD_INT 11
9193: PUSH
9194: LD_INT 12
9196: PUSH
9197: LD_INT 13
9199: PUSH
9200: LD_INT 14
9202: PUSH
9203: LD_INT 15
9205: PUSH
9206: LD_INT 16
9208: PUSH
9209: LD_INT 17
9211: PUSH
9212: LD_INT 18
9214: PUSH
9215: LD_INT 19
9217: PUSH
9218: LD_INT 20
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 22
9226: PUSH
9227: LD_INT 23
9229: PUSH
9230: LD_INT 24
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 26
9238: PUSH
9239: LD_INT 28
9241: PUSH
9242: LD_INT 30
9244: PUSH
9245: LD_INT 31
9247: PUSH
9248: LD_INT 32
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 36
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 101
9292: PUSH
9293: LD_INT 102
9295: PUSH
9296: LD_INT 103
9298: PUSH
9299: LD_INT 104
9301: PUSH
9302: LD_INT 105
9304: PUSH
9305: LD_INT 106
9307: PUSH
9308: LD_INT 107
9310: PUSH
9311: LD_INT 108
9313: PUSH
9314: LD_INT 109
9316: PUSH
9317: LD_INT 110
9319: PUSH
9320: LD_INT 111
9322: PUSH
9323: LD_INT 112
9325: PUSH
9326: LD_INT 114
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: ST_TO_ADDR
9348: GO 10935
9350: LD_INT 12
9352: DOUBLE
9353: EQUAL
9354: IFTRUE 9358
9356: GO 9566
9358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: LD_INT 3
9372: PUSH
9373: LD_INT 4
9375: PUSH
9376: LD_INT 5
9378: PUSH
9379: LD_INT 6
9381: PUSH
9382: LD_INT 7
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: LD_INT 9
9390: PUSH
9391: LD_INT 10
9393: PUSH
9394: LD_INT 11
9396: PUSH
9397: LD_INT 12
9399: PUSH
9400: LD_INT 13
9402: PUSH
9403: LD_INT 14
9405: PUSH
9406: LD_INT 15
9408: PUSH
9409: LD_INT 16
9411: PUSH
9412: LD_INT 17
9414: PUSH
9415: LD_INT 18
9417: PUSH
9418: LD_INT 19
9420: PUSH
9421: LD_INT 20
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 22
9429: PUSH
9430: LD_INT 23
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 25
9438: PUSH
9439: LD_INT 26
9441: PUSH
9442: LD_INT 27
9444: PUSH
9445: LD_INT 28
9447: PUSH
9448: LD_INT 30
9450: PUSH
9451: LD_INT 31
9453: PUSH
9454: LD_INT 32
9456: PUSH
9457: LD_INT 33
9459: PUSH
9460: LD_INT 34
9462: PUSH
9463: LD_INT 36
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 101
9504: PUSH
9505: LD_INT 102
9507: PUSH
9508: LD_INT 103
9510: PUSH
9511: LD_INT 104
9513: PUSH
9514: LD_INT 105
9516: PUSH
9517: LD_INT 106
9519: PUSH
9520: LD_INT 107
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: LD_INT 109
9528: PUSH
9529: LD_INT 110
9531: PUSH
9532: LD_INT 111
9534: PUSH
9535: LD_INT 112
9537: PUSH
9538: LD_INT 113
9540: PUSH
9541: LD_INT 114
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: ST_TO_ADDR
9564: GO 10935
9566: LD_INT 13
9568: DOUBLE
9569: EQUAL
9570: IFTRUE 9574
9572: GO 9770
9574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9575: LD_ADDR_VAR 0 1
9579: PUSH
9580: LD_INT 1
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: LD_INT 4
9591: PUSH
9592: LD_INT 5
9594: PUSH
9595: LD_INT 8
9597: PUSH
9598: LD_INT 9
9600: PUSH
9601: LD_INT 10
9603: PUSH
9604: LD_INT 11
9606: PUSH
9607: LD_INT 12
9609: PUSH
9610: LD_INT 14
9612: PUSH
9613: LD_INT 15
9615: PUSH
9616: LD_INT 16
9618: PUSH
9619: LD_INT 17
9621: PUSH
9622: LD_INT 18
9624: PUSH
9625: LD_INT 19
9627: PUSH
9628: LD_INT 20
9630: PUSH
9631: LD_INT 21
9633: PUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 23
9639: PUSH
9640: LD_INT 24
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 26
9648: PUSH
9649: LD_INT 27
9651: PUSH
9652: LD_INT 28
9654: PUSH
9655: LD_INT 30
9657: PUSH
9658: LD_INT 31
9660: PUSH
9661: LD_INT 32
9663: PUSH
9664: LD_INT 33
9666: PUSH
9667: LD_INT 34
9669: PUSH
9670: LD_INT 36
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 101
9708: PUSH
9709: LD_INT 102
9711: PUSH
9712: LD_INT 103
9714: PUSH
9715: LD_INT 104
9717: PUSH
9718: LD_INT 105
9720: PUSH
9721: LD_INT 106
9723: PUSH
9724: LD_INT 107
9726: PUSH
9727: LD_INT 108
9729: PUSH
9730: LD_INT 109
9732: PUSH
9733: LD_INT 110
9735: PUSH
9736: LD_INT 111
9738: PUSH
9739: LD_INT 112
9741: PUSH
9742: LD_INT 113
9744: PUSH
9745: LD_INT 114
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: ST_TO_ADDR
9768: GO 10935
9770: LD_INT 14
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9990
9778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9779: LD_ADDR_VAR 0 1
9783: PUSH
9784: LD_INT 1
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: LD_INT 4
9795: PUSH
9796: LD_INT 5
9798: PUSH
9799: LD_INT 6
9801: PUSH
9802: LD_INT 7
9804: PUSH
9805: LD_INT 8
9807: PUSH
9808: LD_INT 9
9810: PUSH
9811: LD_INT 10
9813: PUSH
9814: LD_INT 11
9816: PUSH
9817: LD_INT 12
9819: PUSH
9820: LD_INT 13
9822: PUSH
9823: LD_INT 14
9825: PUSH
9826: LD_INT 15
9828: PUSH
9829: LD_INT 16
9831: PUSH
9832: LD_INT 17
9834: PUSH
9835: LD_INT 18
9837: PUSH
9838: LD_INT 19
9840: PUSH
9841: LD_INT 20
9843: PUSH
9844: LD_INT 21
9846: PUSH
9847: LD_INT 22
9849: PUSH
9850: LD_INT 23
9852: PUSH
9853: LD_INT 24
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 27
9864: PUSH
9865: LD_INT 28
9867: PUSH
9868: LD_INT 29
9870: PUSH
9871: LD_INT 30
9873: PUSH
9874: LD_INT 31
9876: PUSH
9877: LD_INT 32
9879: PUSH
9880: LD_INT 33
9882: PUSH
9883: LD_INT 34
9885: PUSH
9886: LD_INT 36
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 101
9928: PUSH
9929: LD_INT 102
9931: PUSH
9932: LD_INT 103
9934: PUSH
9935: LD_INT 104
9937: PUSH
9938: LD_INT 105
9940: PUSH
9941: LD_INT 106
9943: PUSH
9944: LD_INT 107
9946: PUSH
9947: LD_INT 108
9949: PUSH
9950: LD_INT 109
9952: PUSH
9953: LD_INT 110
9955: PUSH
9956: LD_INT 111
9958: PUSH
9959: LD_INT 112
9961: PUSH
9962: LD_INT 113
9964: PUSH
9965: LD_INT 114
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: ST_TO_ADDR
9988: GO 10935
9990: LD_INT 15
9992: DOUBLE
9993: EQUAL
9994: IFTRUE 9998
9996: GO 10210
9998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9999: LD_ADDR_VAR 0 1
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 3
10012: PUSH
10013: LD_INT 4
10015: PUSH
10016: LD_INT 5
10018: PUSH
10019: LD_INT 6
10021: PUSH
10022: LD_INT 7
10024: PUSH
10025: LD_INT 8
10027: PUSH
10028: LD_INT 9
10030: PUSH
10031: LD_INT 10
10033: PUSH
10034: LD_INT 11
10036: PUSH
10037: LD_INT 12
10039: PUSH
10040: LD_INT 13
10042: PUSH
10043: LD_INT 14
10045: PUSH
10046: LD_INT 15
10048: PUSH
10049: LD_INT 16
10051: PUSH
10052: LD_INT 17
10054: PUSH
10055: LD_INT 18
10057: PUSH
10058: LD_INT 19
10060: PUSH
10061: LD_INT 20
10063: PUSH
10064: LD_INT 21
10066: PUSH
10067: LD_INT 22
10069: PUSH
10070: LD_INT 23
10072: PUSH
10073: LD_INT 24
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: LD_INT 27
10084: PUSH
10085: LD_INT 28
10087: PUSH
10088: LD_INT 29
10090: PUSH
10091: LD_INT 30
10093: PUSH
10094: LD_INT 31
10096: PUSH
10097: LD_INT 32
10099: PUSH
10100: LD_INT 33
10102: PUSH
10103: LD_INT 34
10105: PUSH
10106: LD_INT 36
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 101
10148: PUSH
10149: LD_INT 102
10151: PUSH
10152: LD_INT 103
10154: PUSH
10155: LD_INT 104
10157: PUSH
10158: LD_INT 105
10160: PUSH
10161: LD_INT 106
10163: PUSH
10164: LD_INT 107
10166: PUSH
10167: LD_INT 108
10169: PUSH
10170: LD_INT 109
10172: PUSH
10173: LD_INT 110
10175: PUSH
10176: LD_INT 111
10178: PUSH
10179: LD_INT 112
10181: PUSH
10182: LD_INT 113
10184: PUSH
10185: LD_INT 114
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: ST_TO_ADDR
10208: GO 10935
10210: LD_INT 16
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10342
10218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: LD_INT 7
10235: PUSH
10236: LD_INT 11
10238: PUSH
10239: LD_INT 12
10241: PUSH
10242: LD_INT 15
10244: PUSH
10245: LD_INT 16
10247: PUSH
10248: LD_INT 20
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 25
10262: PUSH
10263: LD_INT 26
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 31
10271: PUSH
10272: LD_INT 32
10274: PUSH
10275: LD_INT 33
10277: PUSH
10278: LD_INT 34
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 101
10304: PUSH
10305: LD_INT 102
10307: PUSH
10308: LD_INT 103
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 112
10319: PUSH
10320: LD_INT 113
10322: PUSH
10323: LD_INT 114
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: ST_TO_ADDR
10340: GO 10935
10342: LD_INT 17
10344: DOUBLE
10345: EQUAL
10346: IFTRUE 10350
10348: GO 10562
10350: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10351: LD_ADDR_VAR 0 1
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: LD_INT 3
10364: PUSH
10365: LD_INT 4
10367: PUSH
10368: LD_INT 5
10370: PUSH
10371: LD_INT 6
10373: PUSH
10374: LD_INT 7
10376: PUSH
10377: LD_INT 8
10379: PUSH
10380: LD_INT 9
10382: PUSH
10383: LD_INT 10
10385: PUSH
10386: LD_INT 11
10388: PUSH
10389: LD_INT 12
10391: PUSH
10392: LD_INT 13
10394: PUSH
10395: LD_INT 14
10397: PUSH
10398: LD_INT 15
10400: PUSH
10401: LD_INT 16
10403: PUSH
10404: LD_INT 17
10406: PUSH
10407: LD_INT 18
10409: PUSH
10410: LD_INT 19
10412: PUSH
10413: LD_INT 20
10415: PUSH
10416: LD_INT 21
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 24
10427: PUSH
10428: LD_INT 25
10430: PUSH
10431: LD_INT 26
10433: PUSH
10434: LD_INT 27
10436: PUSH
10437: LD_INT 28
10439: PUSH
10440: LD_INT 29
10442: PUSH
10443: LD_INT 30
10445: PUSH
10446: LD_INT 31
10448: PUSH
10449: LD_INT 32
10451: PUSH
10452: LD_INT 33
10454: PUSH
10455: LD_INT 34
10457: PUSH
10458: LD_INT 36
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 102
10503: PUSH
10504: LD_INT 103
10506: PUSH
10507: LD_INT 104
10509: PUSH
10510: LD_INT 105
10512: PUSH
10513: LD_INT 106
10515: PUSH
10516: LD_INT 107
10518: PUSH
10519: LD_INT 108
10521: PUSH
10522: LD_INT 109
10524: PUSH
10525: LD_INT 110
10527: PUSH
10528: LD_INT 111
10530: PUSH
10531: LD_INT 112
10533: PUSH
10534: LD_INT 113
10536: PUSH
10537: LD_INT 114
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: ST_TO_ADDR
10560: GO 10935
10562: LD_INT 18
10564: DOUBLE
10565: EQUAL
10566: IFTRUE 10570
10568: GO 10706
10570: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10571: LD_ADDR_VAR 0 1
10575: PUSH
10576: LD_INT 2
10578: PUSH
10579: LD_INT 4
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: LD_INT 7
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 31
10623: PUSH
10624: LD_INT 32
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 35
10635: PUSH
10636: LD_INT 36
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 101
10664: PUSH
10665: LD_INT 102
10667: PUSH
10668: LD_INT 103
10670: PUSH
10671: LD_INT 106
10673: PUSH
10674: LD_INT 108
10676: PUSH
10677: LD_INT 112
10679: PUSH
10680: LD_INT 113
10682: PUSH
10683: LD_INT 114
10685: PUSH
10686: LD_INT 115
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: ST_TO_ADDR
10704: GO 10935
10706: LD_INT 19
10708: DOUBLE
10709: EQUAL
10710: IFTRUE 10714
10712: GO 10934
10714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10715: LD_ADDR_VAR 0 1
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: LD_INT 2
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: LD_INT 4
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: LD_INT 6
10737: PUSH
10738: LD_INT 7
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 9
10746: PUSH
10747: LD_INT 10
10749: PUSH
10750: LD_INT 11
10752: PUSH
10753: LD_INT 12
10755: PUSH
10756: LD_INT 13
10758: PUSH
10759: LD_INT 14
10761: PUSH
10762: LD_INT 15
10764: PUSH
10765: LD_INT 16
10767: PUSH
10768: LD_INT 17
10770: PUSH
10771: LD_INT 18
10773: PUSH
10774: LD_INT 19
10776: PUSH
10777: LD_INT 20
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_INT 23
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 26
10797: PUSH
10798: LD_INT 27
10800: PUSH
10801: LD_INT 28
10803: PUSH
10804: LD_INT 29
10806: PUSH
10807: LD_INT 30
10809: PUSH
10810: LD_INT 31
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: LD_INT 33
10818: PUSH
10819: LD_INT 34
10821: PUSH
10822: LD_INT 35
10824: PUSH
10825: LD_INT 36
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 101
10868: PUSH
10869: LD_INT 102
10871: PUSH
10872: LD_INT 103
10874: PUSH
10875: LD_INT 104
10877: PUSH
10878: LD_INT 105
10880: PUSH
10881: LD_INT 106
10883: PUSH
10884: LD_INT 107
10886: PUSH
10887: LD_INT 108
10889: PUSH
10890: LD_INT 109
10892: PUSH
10893: LD_INT 110
10895: PUSH
10896: LD_INT 111
10898: PUSH
10899: LD_INT 112
10901: PUSH
10902: LD_INT 113
10904: PUSH
10905: LD_INT 114
10907: PUSH
10908: LD_INT 115
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
10932: GO 10935
10934: POP
// end else
10935: GO 11154
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10937: LD_ADDR_VAR 0 1
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 3
10950: PUSH
10951: LD_INT 4
10953: PUSH
10954: LD_INT 5
10956: PUSH
10957: LD_INT 6
10959: PUSH
10960: LD_INT 7
10962: PUSH
10963: LD_INT 8
10965: PUSH
10966: LD_INT 9
10968: PUSH
10969: LD_INT 10
10971: PUSH
10972: LD_INT 11
10974: PUSH
10975: LD_INT 12
10977: PUSH
10978: LD_INT 13
10980: PUSH
10981: LD_INT 14
10983: PUSH
10984: LD_INT 15
10986: PUSH
10987: LD_INT 16
10989: PUSH
10990: LD_INT 17
10992: PUSH
10993: LD_INT 18
10995: PUSH
10996: LD_INT 19
10998: PUSH
10999: LD_INT 20
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 23
11010: PUSH
11011: LD_INT 24
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 26
11019: PUSH
11020: LD_INT 27
11022: PUSH
11023: LD_INT 28
11025: PUSH
11026: LD_INT 29
11028: PUSH
11029: LD_INT 30
11031: PUSH
11032: LD_INT 31
11034: PUSH
11035: LD_INT 32
11037: PUSH
11038: LD_INT 33
11040: PUSH
11041: LD_INT 34
11043: PUSH
11044: LD_INT 35
11046: PUSH
11047: LD_INT 36
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 102
11093: PUSH
11094: LD_INT 103
11096: PUSH
11097: LD_INT 104
11099: PUSH
11100: LD_INT 105
11102: PUSH
11103: LD_INT 106
11105: PUSH
11106: LD_INT 107
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 109
11114: PUSH
11115: LD_INT 110
11117: PUSH
11118: LD_INT 111
11120: PUSH
11121: LD_INT 112
11123: PUSH
11124: LD_INT 113
11126: PUSH
11127: LD_INT 114
11129: PUSH
11130: LD_INT 115
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: ST_TO_ADDR
// if result then
11154: LD_VAR 0 1
11158: IFFALSE 11447
// begin normal :=  ;
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_STRING 
11167: ST_TO_ADDR
// hardcore :=  ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: LD_STRING 
11175: ST_TO_ADDR
// for i = 1 to normalCounter do
11176: LD_ADDR_VAR 0 5
11180: PUSH
11181: DOUBLE
11182: LD_INT 1
11184: DEC
11185: ST_TO_ADDR
11186: LD_EXP 28
11190: PUSH
11191: FOR_TO
11192: IFFALSE 11293
// begin tmp := 0 ;
11194: LD_ADDR_VAR 0 2
11198: PUSH
11199: LD_STRING 0
11201: ST_TO_ADDR
// if result [ 1 ] then
11202: LD_VAR 0 1
11206: PUSH
11207: LD_INT 1
11209: ARRAY
11210: IFFALSE 11275
// if result [ 1 ] [ 1 ] = i then
11212: LD_VAR 0 1
11216: PUSH
11217: LD_INT 1
11219: ARRAY
11220: PUSH
11221: LD_INT 1
11223: ARRAY
11224: PUSH
11225: LD_VAR 0 5
11229: EQUAL
11230: IFFALSE 11275
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_VAR 0 1
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 1
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 3
11261: PPUSH
11262: CALL_OW 1
11266: ST_TO_ADDR
// tmp := 1 ;
11267: LD_ADDR_VAR 0 2
11271: PUSH
11272: LD_STRING 1
11274: ST_TO_ADDR
// end ; normal := normal & tmp ;
11275: LD_ADDR_VAR 0 3
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 2
11289: STR
11290: ST_TO_ADDR
// end ;
11291: GO 11191
11293: POP
11294: POP
// for i = 1 to hardcoreCounter do
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_EXP 29
11309: PUSH
11310: FOR_TO
11311: IFFALSE 11416
// begin tmp := 0 ;
11313: LD_ADDR_VAR 0 2
11317: PUSH
11318: LD_STRING 0
11320: ST_TO_ADDR
// if result [ 2 ] then
11321: LD_VAR 0 1
11325: PUSH
11326: LD_INT 2
11328: ARRAY
11329: IFFALSE 11398
// if result [ 2 ] [ 1 ] = 100 + i then
11331: LD_VAR 0 1
11335: PUSH
11336: LD_INT 2
11338: ARRAY
11339: PUSH
11340: LD_INT 1
11342: ARRAY
11343: PUSH
11344: LD_INT 100
11346: PUSH
11347: LD_VAR 0 5
11351: PLUS
11352: EQUAL
11353: IFFALSE 11398
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11355: LD_ADDR_VAR 0 1
11359: PUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: LD_VAR 0 1
11372: PUSH
11373: LD_INT 2
11375: ARRAY
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 3
11384: PPUSH
11385: CALL_OW 1
11389: ST_TO_ADDR
// tmp := 1 ;
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: LD_STRING 1
11397: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_VAR 0 4
11407: PUSH
11408: LD_VAR 0 2
11412: STR
11413: ST_TO_ADDR
// end ;
11414: GO 11310
11416: POP
11417: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11418: LD_STRING getStreamItemsFromMission("
11420: PUSH
11421: LD_VAR 0 3
11425: STR
11426: PUSH
11427: LD_STRING ","
11429: STR
11430: PUSH
11431: LD_VAR 0 4
11435: STR
11436: PUSH
11437: LD_STRING ")
11439: STR
11440: PPUSH
11441: CALL_OW 559
// end else
11445: GO 11454
// ToLua ( getStreamItemsFromMission("","") ) ;
11447: LD_STRING getStreamItemsFromMission("","")
11449: PPUSH
11450: CALL_OW 559
// end ;
11454: LD_VAR 0 1
11458: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11459: LD_EXP 27
11463: PUSH
11464: LD_EXP 32
11468: AND
11469: IFFALSE 11593
11471: GO 11473
11473: DISABLE
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
// begin enable ;
11478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: LD_OWVAR 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 2
11498: PUSH
11499: LD_INT 34
11501: PUSH
11502: LD_INT 7
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 34
11511: PUSH
11512: LD_INT 45
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 34
11521: PUSH
11522: LD_INT 28
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 34
11531: PUSH
11532: LD_INT 47
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: ST_TO_ADDR
// if not tmp then
11555: LD_VAR 0 2
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11593
// for i in tmp do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_VAR 0 2
11573: PUSH
11574: FOR_IN
11575: IFFALSE 11591
// begin SetLives ( i , 0 ) ;
11577: LD_VAR 0 1
11581: PPUSH
11582: LD_INT 0
11584: PPUSH
11585: CALL_OW 234
// end ;
11589: GO 11574
11591: POP
11592: POP
// end ;
11593: PPOPN 2
11595: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11596: LD_EXP 27
11600: PUSH
11601: LD_EXP 33
11605: AND
11606: IFFALSE 11690
11608: GO 11610
11610: DISABLE
11611: LD_INT 0
11613: PPUSH
11614: PPUSH
// begin enable ;
11615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_OWVAR 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 32
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if not tmp then
11652: LD_VAR 0 2
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11690
// for i in tmp do
11661: LD_ADDR_VAR 0 1
11665: PUSH
11666: LD_VAR 0 2
11670: PUSH
11671: FOR_IN
11672: IFFALSE 11688
// begin SetLives ( i , 0 ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_INT 0
11681: PPUSH
11682: CALL_OW 234
// end ;
11686: GO 11671
11688: POP
11689: POP
// end ;
11690: PPOPN 2
11692: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11693: LD_EXP 27
11697: PUSH
11698: LD_EXP 30
11702: AND
11703: IFFALSE 11796
11705: GO 11707
11707: DISABLE
11708: LD_INT 0
11710: PPUSH
// begin enable ;
11711: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_INT 22
11719: PUSH
11720: LD_OWVAR 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 5
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 9
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 25
11754: PUSH
11755: LD_INT 8
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11794
// begin SetClass ( i , 1 ) ;
11780: LD_VAR 0 1
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 336
// end ;
11792: GO 11777
11794: POP
11795: POP
// end ;
11796: PPOPN 1
11798: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11799: LD_EXP 27
11803: PUSH
11804: LD_EXP 31
11808: AND
11809: PUSH
11810: LD_OWVAR 65
11814: PUSH
11815: LD_INT 7
11817: LESS
11818: AND
11819: IFFALSE 11833
11821: GO 11823
11823: DISABLE
// begin enable ;
11824: ENABLE
// game_speed := 7 ;
11825: LD_ADDR_OWVAR 65
11829: PUSH
11830: LD_INT 7
11832: ST_TO_ADDR
// end ;
11833: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11834: LD_EXP 27
11838: PUSH
11839: LD_EXP 34
11843: AND
11844: IFFALSE 12046
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
11852: PPUSH
11853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 81
11861: PUSH
11862: LD_OWVAR 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 69
11889: ST_TO_ADDR
// if not tmp then
11890: LD_VAR 0 3
11894: NOT
11895: IFFALSE 11899
// exit ;
11897: GO 12046
// if tmp > 5 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 5
11906: GREATER
11907: IFFALSE 11919
// k := 5 else
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: LD_INT 5
11916: ST_TO_ADDR
11917: GO 11929
// k := tmp ;
11919: LD_ADDR_VAR 0 2
11923: PUSH
11924: LD_VAR 0 3
11928: ST_TO_ADDR
// for i := 1 to k do
11929: LD_ADDR_VAR 0 1
11933: PUSH
11934: DOUBLE
11935: LD_INT 1
11937: DEC
11938: ST_TO_ADDR
11939: LD_VAR 0 2
11943: PUSH
11944: FOR_TO
11945: IFFALSE 12044
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11947: LD_VAR 0 3
11951: PUSH
11952: LD_VAR 0 1
11956: ARRAY
11957: PPUSH
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 4
11965: MOD
11966: PUSH
11967: LD_INT 1
11969: PLUS
11970: PPUSH
11971: CALL_OW 259
11975: PUSH
11976: LD_INT 10
11978: LESS
11979: IFFALSE 12042
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11981: LD_VAR 0 3
11985: PUSH
11986: LD_VAR 0 1
11990: ARRAY
11991: PPUSH
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 4
11999: MOD
12000: PUSH
12001: LD_INT 1
12003: PLUS
12004: PPUSH
12005: LD_VAR 0 3
12009: PUSH
12010: LD_VAR 0 1
12014: ARRAY
12015: PPUSH
12016: LD_VAR 0 1
12020: PUSH
12021: LD_INT 4
12023: MOD
12024: PUSH
12025: LD_INT 1
12027: PLUS
12028: PPUSH
12029: CALL_OW 259
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: CALL_OW 237
12042: GO 11944
12044: POP
12045: POP
// end ;
12046: PPOPN 3
12048: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12049: LD_EXP 27
12053: PUSH
12054: LD_EXP 35
12058: AND
12059: IFFALSE 12079
12061: GO 12063
12063: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12064: LD_INT 4
12066: PPUSH
12067: LD_OWVAR 2
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 324
12079: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12080: LD_EXP 27
12084: PUSH
12085: LD_EXP 64
12089: AND
12090: IFFALSE 12110
12092: GO 12094
12094: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12095: LD_INT 19
12097: PPUSH
12098: LD_OWVAR 2
12102: PPUSH
12103: LD_INT 0
12105: PPUSH
12106: CALL_OW 324
12110: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12111: LD_EXP 27
12115: PUSH
12116: LD_EXP 36
12120: AND
12121: IFFALSE 12223
12123: GO 12125
12125: DISABLE
12126: LD_INT 0
12128: PPUSH
12129: PPUSH
// begin enable ;
12130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: LD_INT 22
12138: PUSH
12139: LD_OWVAR 2
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: LD_INT 34
12153: PUSH
12154: LD_INT 11
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 34
12163: PUSH
12164: LD_INT 30
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: ST_TO_ADDR
// if not tmp then
12185: LD_VAR 0 2
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12223
// for i in tmp do
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_VAR 0 2
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12221
// begin SetLives ( i , 0 ) ;
12207: LD_VAR 0 1
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 234
// end ;
12219: GO 12204
12221: POP
12222: POP
// end ;
12223: PPOPN 2
12225: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12226: LD_EXP 27
12230: PUSH
12231: LD_EXP 37
12235: AND
12236: IFFALSE 12256
12238: GO 12240
12240: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12241: LD_INT 32
12243: PPUSH
12244: LD_OWVAR 2
12248: PPUSH
12249: LD_INT 0
12251: PPUSH
12252: CALL_OW 324
12256: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12257: LD_EXP 27
12261: PUSH
12262: LD_EXP 38
12266: AND
12267: IFFALSE 12448
12269: GO 12271
12271: DISABLE
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
12276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_OWVAR 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 69
12312: ST_TO_ADDR
// if not tmp then
12313: LD_VAR 0 2
12317: NOT
12318: IFFALSE 12322
// exit ;
12320: GO 12448
// side := 0 ;
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// for i := 1 to 8 do
12330: LD_ADDR_VAR 0 1
12334: PUSH
12335: DOUBLE
12336: LD_INT 1
12338: DEC
12339: ST_TO_ADDR
12340: LD_INT 8
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12392
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12346: LD_OWVAR 2
12350: PUSH
12351: LD_VAR 0 1
12355: NONEQUAL
12356: PUSH
12357: LD_OWVAR 2
12361: PPUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 81
12371: PUSH
12372: LD_INT 2
12374: EQUAL
12375: AND
12376: IFFALSE 12390
// begin side := i ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_VAR 0 1
12387: ST_TO_ADDR
// break ;
12388: GO 12392
// end ;
12390: GO 12343
12392: POP
12393: POP
// if not side then
12394: LD_VAR 0 3
12398: NOT
12399: IFFALSE 12403
// exit ;
12401: GO 12448
// for i := 1 to tmp do
12403: LD_ADDR_VAR 0 1
12407: PUSH
12408: DOUBLE
12409: LD_INT 1
12411: DEC
12412: ST_TO_ADDR
12413: LD_VAR 0 2
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12446
// if Prob ( 60 ) then
12421: LD_INT 60
12423: PPUSH
12424: CALL_OW 13
12428: IFFALSE 12444
// SetSide ( i , side ) ;
12430: LD_VAR 0 1
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: CALL_OW 235
12444: GO 12418
12446: POP
12447: POP
// end ;
12448: PPOPN 3
12450: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12451: LD_EXP 27
12455: PUSH
12456: LD_EXP 40
12460: AND
12461: IFFALSE 12580
12463: GO 12465
12465: DISABLE
12466: LD_INT 0
12468: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12469: LD_ADDR_VAR 0 1
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_OWVAR 2
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 21
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: LD_INT 23
12501: PUSH
12502: LD_INT 0
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: PUSH
12523: FOR_IN
12524: IFFALSE 12578
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12526: LD_VAR 0 1
12530: PPUSH
12531: CALL_OW 257
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 3
12544: PUSH
12545: LD_INT 4
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: IN
12554: IFFALSE 12576
// SetClass ( un , rand ( 1 , 4 ) ) ;
12556: LD_VAR 0 1
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: LD_INT 4
12566: PPUSH
12567: CALL_OW 12
12571: PPUSH
12572: CALL_OW 336
12576: GO 12523
12578: POP
12579: POP
// end ;
12580: PPOPN 1
12582: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12583: LD_EXP 27
12587: PUSH
12588: LD_EXP 39
12592: AND
12593: IFFALSE 12672
12595: GO 12597
12597: DISABLE
12598: LD_INT 0
12600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 21
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PPUSH
12632: CALL_OW 69
12636: ST_TO_ADDR
// if not tmp then
12637: LD_VAR 0 1
12641: NOT
12642: IFFALSE 12646
// exit ;
12644: GO 12672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12646: LD_VAR 0 1
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_VAR 0 1
12658: PPUSH
12659: CALL_OW 12
12663: ARRAY
12664: PPUSH
12665: LD_INT 100
12667: PPUSH
12668: CALL_OW 234
// end ;
12672: PPOPN 1
12674: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12675: LD_EXP 27
12679: PUSH
12680: LD_EXP 41
12684: AND
12685: IFFALSE 12783
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12693: LD_ADDR_VAR 0 1
12697: PUSH
12698: LD_INT 22
12700: PUSH
12701: LD_OWVAR 2
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: ST_TO_ADDR
// if not tmp then
12729: LD_VAR 0 1
12733: NOT
12734: IFFALSE 12738
// exit ;
12736: GO 12783
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12738: LD_VAR 0 1
12742: PUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 12
12755: ARRAY
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 3000
12770: PPUSH
12771: LD_INT 9000
12773: PPUSH
12774: CALL_OW 12
12778: PPUSH
12779: CALL_OW 492
// end ;
12783: PPOPN 1
12785: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12786: LD_EXP 27
12790: PUSH
12791: LD_EXP 42
12795: AND
12796: IFFALSE 12816
12798: GO 12800
12800: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12801: LD_INT 1
12803: PPUSH
12804: LD_OWVAR 2
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 324
12816: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12817: LD_EXP 27
12821: PUSH
12822: LD_EXP 43
12826: AND
12827: IFFALSE 12910
12829: GO 12831
12831: DISABLE
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12836: LD_ADDR_VAR 0 2
12840: PUSH
12841: LD_INT 22
12843: PUSH
12844: LD_OWVAR 2
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 21
12855: PUSH
12856: LD_INT 3
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: ST_TO_ADDR
// if not tmp then
12872: LD_VAR 0 2
12876: NOT
12877: IFFALSE 12881
// exit ;
12879: GO 12910
// for i in tmp do
12881: LD_ADDR_VAR 0 1
12885: PUSH
12886: LD_VAR 0 2
12890: PUSH
12891: FOR_IN
12892: IFFALSE 12908
// SetBLevel ( i , 10 ) ;
12894: LD_VAR 0 1
12898: PPUSH
12899: LD_INT 10
12901: PPUSH
12902: CALL_OW 241
12906: GO 12891
12908: POP
12909: POP
// end ;
12910: PPOPN 2
12912: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12913: LD_EXP 27
12917: PUSH
12918: LD_EXP 44
12922: AND
12923: IFFALSE 13034
12925: GO 12927
12927: DISABLE
12928: LD_INT 0
12930: PPUSH
12931: PPUSH
12932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_INT 22
12940: PUSH
12941: LD_OWVAR 2
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: ST_TO_ADDR
// if not tmp then
12969: LD_VAR 0 3
12973: NOT
12974: IFFALSE 12978
// exit ;
12976: GO 13034
// un := tmp [ rand ( 1 , tmp ) ] ;
12978: LD_ADDR_VAR 0 2
12982: PUSH
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: CALL_OW 12
13000: ARRAY
13001: ST_TO_ADDR
// if Crawls ( un ) then
13002: LD_VAR 0 2
13006: PPUSH
13007: CALL_OW 318
13011: IFFALSE 13022
// ComWalk ( un ) ;
13013: LD_VAR 0 2
13017: PPUSH
13018: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13022: LD_VAR 0 2
13026: PPUSH
13027: LD_INT 5
13029: PPUSH
13030: CALL_OW 336
// end ;
13034: PPOPN 3
13036: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13037: LD_EXP 27
13041: PUSH
13042: LD_EXP 45
13046: AND
13047: PUSH
13048: LD_OWVAR 67
13052: PUSH
13053: LD_INT 3
13055: LESS
13056: AND
13057: IFFALSE 13076
13059: GO 13061
13061: DISABLE
// Difficulty := Difficulty + 1 ;
13062: LD_ADDR_OWVAR 67
13066: PUSH
13067: LD_OWVAR 67
13071: PUSH
13072: LD_INT 1
13074: PLUS
13075: ST_TO_ADDR
13076: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13077: LD_EXP 27
13081: PUSH
13082: LD_EXP 46
13086: AND
13087: IFFALSE 13190
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
// begin for i := 1 to 5 do
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_INT 5
13107: PUSH
13108: FOR_TO
13109: IFFALSE 13188
// begin uc_nation := nation_nature ;
13111: LD_ADDR_OWVAR 21
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// uc_side := 0 ;
13119: LD_ADDR_OWVAR 20
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13127: LD_ADDR_OWVAR 29
13131: PUSH
13132: LD_INT 12
13134: PUSH
13135: LD_INT 12
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: ST_TO_ADDR
// hc_agressivity := 20 ;
13142: LD_ADDR_OWVAR 35
13146: PUSH
13147: LD_INT 20
13149: ST_TO_ADDR
// hc_class := class_tiger ;
13150: LD_ADDR_OWVAR 28
13154: PUSH
13155: LD_INT 14
13157: ST_TO_ADDR
// hc_gallery :=  ;
13158: LD_ADDR_OWVAR 33
13162: PUSH
13163: LD_STRING 
13165: ST_TO_ADDR
// hc_name :=  ;
13166: LD_ADDR_OWVAR 26
13170: PUSH
13171: LD_STRING 
13173: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13174: CALL_OW 44
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 51
// end ;
13186: GO 13108
13188: POP
13189: POP
// end ;
13190: PPOPN 1
13192: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13193: LD_EXP 27
13197: PUSH
13198: LD_EXP 47
13202: AND
13203: IFFALSE 13212
13205: GO 13207
13207: DISABLE
// StreamSibBomb ;
13208: CALL 13213 0 0
13212: END
// export function StreamSibBomb ; var i , x , y ; begin
13213: LD_INT 0
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
// result := false ;
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// for i := 1 to 16 do
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_INT 16
13239: PUSH
13240: FOR_TO
13241: IFFALSE 13440
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 10
13250: PUSH
13251: LD_INT 20
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 40
13259: PUSH
13260: LD_INT 50
13262: PUSH
13263: LD_INT 60
13265: PUSH
13266: LD_INT 70
13268: PUSH
13269: LD_INT 80
13271: PUSH
13272: LD_INT 90
13274: PUSH
13275: LD_INT 100
13277: PUSH
13278: LD_INT 110
13280: PUSH
13281: LD_INT 120
13283: PUSH
13284: LD_INT 130
13286: PUSH
13287: LD_INT 140
13289: PUSH
13290: LD_INT 150
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 1
13312: PPUSH
13313: LD_INT 15
13315: PPUSH
13316: CALL_OW 12
13320: ARRAY
13321: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13322: LD_ADDR_VAR 0 4
13326: PUSH
13327: LD_INT 10
13329: PUSH
13330: LD_INT 20
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 40
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 60
13344: PUSH
13345: LD_INT 70
13347: PUSH
13348: LD_INT 80
13350: PUSH
13351: LD_INT 90
13353: PUSH
13354: LD_INT 100
13356: PUSH
13357: LD_INT 110
13359: PUSH
13360: LD_INT 120
13362: PUSH
13363: LD_INT 130
13365: PUSH
13366: LD_INT 140
13368: PUSH
13369: LD_INT 150
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 1
13391: PPUSH
13392: LD_INT 15
13394: PPUSH
13395: CALL_OW 12
13399: ARRAY
13400: ST_TO_ADDR
// if ValidHex ( x , y ) then
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_VAR 0 4
13410: PPUSH
13411: CALL_OW 488
13415: IFFALSE 13438
// begin result := [ x , y ] ;
13417: LD_ADDR_VAR 0 1
13421: PUSH
13422: LD_VAR 0 3
13426: PUSH
13427: LD_VAR 0 4
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: ST_TO_ADDR
// break ;
13436: GO 13440
// end ; end ;
13438: GO 13240
13440: POP
13441: POP
// if result then
13442: LD_VAR 0 1
13446: IFFALSE 13506
// begin ToLua ( playSibBomb() ) ;
13448: LD_STRING playSibBomb()
13450: PPUSH
13451: CALL_OW 559
// wait ( 0 0$14 ) ;
13455: LD_INT 490
13457: PPUSH
13458: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13462: LD_VAR 0 1
13466: PUSH
13467: LD_INT 1
13469: ARRAY
13470: PPUSH
13471: LD_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: ARRAY
13479: PPUSH
13480: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13484: LD_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 1
13497: PUSH
13498: LD_INT 2
13500: ARRAY
13501: PPUSH
13502: CALL_OW 429
// end ; end ;
13506: LD_VAR 0 1
13510: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13511: LD_EXP 27
13515: PUSH
13516: LD_EXP 49
13520: AND
13521: IFFALSE 13533
13523: GO 13525
13525: DISABLE
// YouLost (  ) ;
13526: LD_STRING 
13528: PPUSH
13529: CALL_OW 104
13533: END
// every 0 0$1 trigger StreamModeActive and sFog do
13534: LD_EXP 27
13538: PUSH
13539: LD_EXP 48
13543: AND
13544: IFFALSE 13558
13546: GO 13548
13548: DISABLE
// FogOff ( your_side ) ;
13549: LD_OWVAR 2
13553: PPUSH
13554: CALL_OW 344
13558: END
// every 0 0$1 trigger StreamModeActive and sSun do
13559: LD_EXP 27
13563: PUSH
13564: LD_EXP 50
13568: AND
13569: IFFALSE 13597
13571: GO 13573
13573: DISABLE
// begin solar_recharge_percent := 0 ;
13574: LD_ADDR_OWVAR 79
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13582: LD_INT 10500
13584: PPUSH
13585: CALL_OW 67
// solar_recharge_percent := 100 ;
13589: LD_ADDR_OWVAR 79
13593: PUSH
13594: LD_INT 100
13596: ST_TO_ADDR
// end ;
13597: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13598: LD_EXP 27
13602: PUSH
13603: LD_EXP 51
13607: AND
13608: IFFALSE 13847
13610: GO 13612
13612: DISABLE
13613: LD_INT 0
13615: PPUSH
13616: PPUSH
13617: PPUSH
// begin tmp := [ ] ;
13618: LD_ADDR_VAR 0 3
13622: PUSH
13623: EMPTY
13624: ST_TO_ADDR
// for i := 1 to 6 do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: DOUBLE
13631: LD_INT 1
13633: DEC
13634: ST_TO_ADDR
13635: LD_INT 6
13637: PUSH
13638: FOR_TO
13639: IFFALSE 13744
// begin uc_nation := nation_nature ;
13641: LD_ADDR_OWVAR 21
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// uc_side := 0 ;
13649: LD_ADDR_OWVAR 20
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13657: LD_ADDR_OWVAR 29
13661: PUSH
13662: LD_INT 12
13664: PUSH
13665: LD_INT 12
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: ST_TO_ADDR
// hc_agressivity := 20 ;
13672: LD_ADDR_OWVAR 35
13676: PUSH
13677: LD_INT 20
13679: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13680: LD_ADDR_OWVAR 28
13684: PUSH
13685: LD_INT 17
13687: ST_TO_ADDR
// hc_gallery :=  ;
13688: LD_ADDR_OWVAR 33
13692: PUSH
13693: LD_STRING 
13695: ST_TO_ADDR
// hc_name :=  ;
13696: LD_ADDR_OWVAR 26
13700: PUSH
13701: LD_STRING 
13703: ST_TO_ADDR
// un := CreateHuman ;
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: CALL_OW 44
13713: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13714: LD_VAR 0 2
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: CALL_OW 51
// tmp := tmp ^ un ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_VAR 0 3
13735: PUSH
13736: LD_VAR 0 2
13740: ADD
13741: ST_TO_ADDR
// end ;
13742: GO 13638
13744: POP
13745: POP
// repeat wait ( 0 0$1 ) ;
13746: LD_INT 35
13748: PPUSH
13749: CALL_OW 67
// for un in tmp do
13753: LD_ADDR_VAR 0 2
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: FOR_IN
13764: IFFALSE 13838
// begin if IsDead ( un ) then
13766: LD_VAR 0 2
13770: PPUSH
13771: CALL_OW 301
13775: IFFALSE 13795
// begin tmp := tmp diff un ;
13777: LD_ADDR_VAR 0 3
13781: PUSH
13782: LD_VAR 0 3
13786: PUSH
13787: LD_VAR 0 2
13791: DIFF
13792: ST_TO_ADDR
// continue ;
13793: GO 13763
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_INT 3
13802: PUSH
13803: LD_INT 22
13805: PUSH
13806: LD_INT 0
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: PPUSH
13822: LD_VAR 0 2
13826: PPUSH
13827: CALL_OW 74
13831: PPUSH
13832: CALL_OW 115
// end ;
13836: GO 13763
13838: POP
13839: POP
// until not tmp ;
13840: LD_VAR 0 3
13844: NOT
13845: IFFALSE 13746
// end ;
13847: PPOPN 3
13849: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13850: LD_EXP 27
13854: PUSH
13855: LD_EXP 52
13859: AND
13860: IFFALSE 13914
13862: GO 13864
13864: DISABLE
// begin ToLua ( displayTroll(); ) ;
13865: LD_STRING displayTroll();
13867: PPUSH
13868: CALL_OW 559
// wait ( 3 3$00 ) ;
13872: LD_INT 6300
13874: PPUSH
13875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13879: LD_STRING hideTroll();
13881: PPUSH
13882: CALL_OW 559
// wait ( 1 1$00 ) ;
13886: LD_INT 2100
13888: PPUSH
13889: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13893: LD_STRING displayTroll();
13895: PPUSH
13896: CALL_OW 559
// wait ( 1 1$00 ) ;
13900: LD_INT 2100
13902: PPUSH
13903: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13907: LD_STRING hideTroll();
13909: PPUSH
13910: CALL_OW 559
// end ;
13914: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13915: LD_EXP 27
13919: PUSH
13920: LD_EXP 53
13924: AND
13925: IFFALSE 13988
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
// begin p := 0 ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// repeat game_speed := 1 ;
13941: LD_ADDR_OWVAR 65
13945: PUSH
13946: LD_INT 1
13948: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13949: LD_INT 35
13951: PPUSH
13952: CALL_OW 67
// p := p + 1 ;
13956: LD_ADDR_VAR 0 1
13960: PUSH
13961: LD_VAR 0 1
13965: PUSH
13966: LD_INT 1
13968: PLUS
13969: ST_TO_ADDR
// until p >= 60 ;
13970: LD_VAR 0 1
13974: PUSH
13975: LD_INT 60
13977: GREATEREQUAL
13978: IFFALSE 13941
// game_speed := 4 ;
13980: LD_ADDR_OWVAR 65
13984: PUSH
13985: LD_INT 4
13987: ST_TO_ADDR
// end ;
13988: PPOPN 1
13990: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13991: LD_EXP 27
13995: PUSH
13996: LD_EXP 54
14000: AND
14001: IFFALSE 14147
14003: GO 14005
14005: DISABLE
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14010: LD_ADDR_VAR 0 1
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_OWVAR 2
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_INT 0
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 30
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: ST_TO_ADDR
// if not depot then
14064: LD_VAR 0 1
14068: NOT
14069: IFFALSE 14073
// exit ;
14071: GO 14147
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 1
14082: PUSH
14083: LD_INT 1
14085: PPUSH
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: PPUSH
14097: CALL_OW 274
14101: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14102: LD_VAR 0 2
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14117: LD_VAR 0 2
14121: PPUSH
14122: LD_INT 2
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14132: LD_VAR 0 2
14136: PPUSH
14137: LD_INT 3
14139: PPUSH
14140: LD_INT 0
14142: PPUSH
14143: CALL_OW 277
// end ;
14147: PPOPN 2
14149: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14150: LD_EXP 27
14154: PUSH
14155: LD_EXP 55
14159: AND
14160: IFFALSE 14257
14162: GO 14164
14164: DISABLE
14165: LD_INT 0
14167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14168: LD_ADDR_VAR 0 1
14172: PUSH
14173: LD_INT 22
14175: PUSH
14176: LD_OWVAR 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 21
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 3
14197: PUSH
14198: LD_INT 23
14200: PUSH
14201: LD_INT 0
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if not tmp then
14222: LD_VAR 0 1
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14231: LD_VAR 0 1
14235: PUSH
14236: LD_INT 1
14238: PPUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 12
14248: ARRAY
14249: PPUSH
14250: LD_INT 200
14252: PPUSH
14253: CALL_OW 234
// end ;
14257: PPOPN 1
14259: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14260: LD_EXP 27
14264: PUSH
14265: LD_EXP 56
14269: AND
14270: IFFALSE 14349
14272: GO 14274
14274: DISABLE
14275: LD_INT 0
14277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_OWVAR 2
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// if not tmp then
14314: LD_VAR 0 1
14318: NOT
14319: IFFALSE 14323
// exit ;
14321: GO 14349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14323: LD_VAR 0 1
14327: PUSH
14328: LD_INT 1
14330: PPUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: PPUSH
14342: LD_INT 60
14344: PPUSH
14345: CALL_OW 234
// end ;
14349: PPOPN 1
14351: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14352: LD_EXP 27
14356: PUSH
14357: LD_EXP 57
14361: AND
14362: IFFALSE 14461
14364: GO 14366
14366: DISABLE
14367: LD_INT 0
14369: PPUSH
14370: PPUSH
// begin enable ;
14371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_OWVAR 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 61
14391: PUSH
14392: EMPTY
14393: LIST
14394: PUSH
14395: LD_INT 33
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if not tmp then
14415: LD_VAR 0 1
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14461
// for i in tmp do
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_VAR 0 1
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14459
// if IsControledBy ( i ) then
14437: LD_VAR 0 2
14441: PPUSH
14442: CALL_OW 312
14446: IFFALSE 14457
// ComUnlink ( i ) ;
14448: LD_VAR 0 2
14452: PPUSH
14453: CALL_OW 136
14457: GO 14434
14459: POP
14460: POP
// end ;
14461: PPOPN 2
14463: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14464: LD_EXP 27
14468: PUSH
14469: LD_EXP 58
14473: AND
14474: IFFALSE 14614
14476: GO 14478
14478: DISABLE
14479: LD_INT 0
14481: PPUSH
14482: PPUSH
// begin ToLua ( displayPowell(); ) ;
14483: LD_STRING displayPowell();
14485: PPUSH
14486: CALL_OW 559
// uc_side := 0 ;
14490: LD_ADDR_OWVAR 20
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// uc_nation := 2 ;
14498: LD_ADDR_OWVAR 21
14502: PUSH
14503: LD_INT 2
14505: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14506: LD_ADDR_OWVAR 37
14510: PUSH
14511: LD_INT 14
14513: ST_TO_ADDR
// vc_engine := engine_siberite ;
14514: LD_ADDR_OWVAR 39
14518: PUSH
14519: LD_INT 3
14521: ST_TO_ADDR
// vc_control := control_apeman ;
14522: LD_ADDR_OWVAR 38
14526: PUSH
14527: LD_INT 5
14529: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14530: LD_ADDR_OWVAR 40
14534: PUSH
14535: LD_INT 29
14537: ST_TO_ADDR
// un := CreateVehicle ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 45
14547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14560: LD_INT 35
14562: PPUSH
14563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14567: LD_VAR 0 2
14571: PPUSH
14572: LD_INT 22
14574: PUSH
14575: LD_OWVAR 2
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: PPUSH
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 74
14598: PPUSH
14599: CALL_OW 115
// until IsDead ( un ) ;
14603: LD_VAR 0 2
14607: PPUSH
14608: CALL_OW 301
14612: IFFALSE 14560
// end ;
14614: PPOPN 2
14616: END
// every 0 0$1 trigger StreamModeActive and sStu do
14617: LD_EXP 27
14621: PUSH
14622: LD_EXP 66
14626: AND
14627: IFFALSE 14643
14629: GO 14631
14631: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14632: LD_STRING displayStucuk();
14634: PPUSH
14635: CALL_OW 559
// ResetFog ;
14639: CALL_OW 335
// end ;
14643: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14644: LD_EXP 27
14648: PUSH
14649: LD_EXP 59
14653: AND
14654: IFFALSE 14795
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14663: LD_ADDR_VAR 0 2
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 2
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14795
// un := tmp [ rand ( 1 , tmp ) ] ;
14708: LD_ADDR_VAR 0 1
14712: PUSH
14713: LD_VAR 0 2
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_VAR 0 2
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: LD_OWVAR 3
14753: PUSH
14754: LD_VAR 0 1
14758: DIFF
14759: PPUSH
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 74
14769: PPUSH
14770: CALL_OW 115
// wait ( 0 0$20 ) ;
14774: LD_INT 700
14776: PPUSH
14777: CALL_OW 67
// SetSide ( un , your_side ) ;
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_OWVAR 2
14790: PPUSH
14791: CALL_OW 235
// end ;
14795: PPOPN 2
14797: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14798: LD_EXP 27
14802: PUSH
14803: LD_EXP 60
14807: AND
14808: IFFALSE 14914
14810: GO 14812
14812: DISABLE
14813: LD_INT 0
14815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: LD_INT 22
14823: PUSH
14824: LD_OWVAR 2
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 30
14838: PUSH
14839: LD_INT 0
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 30
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not depot then
14870: LD_VAR 0 1
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14914
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14879: LD_VAR 0 1
14883: PUSH
14884: LD_INT 1
14886: ARRAY
14887: PPUSH
14888: CALL_OW 250
14892: PPUSH
14893: LD_VAR 0 1
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: CALL_OW 251
14906: PPUSH
14907: LD_INT 70
14909: PPUSH
14910: CALL_OW 495
// end ;
14914: PPOPN 1
14916: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14917: LD_EXP 27
14921: PUSH
14922: LD_EXP 61
14926: AND
14927: IFFALSE 15138
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
14936: PPUSH
14937: PPUSH
14938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14939: LD_ADDR_VAR 0 5
14943: PUSH
14944: LD_INT 22
14946: PUSH
14947: LD_OWVAR 2
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: ST_TO_ADDR
// if not tmp then
14975: LD_VAR 0 5
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15138
// for i in tmp do
14984: LD_ADDR_VAR 0 1
14988: PUSH
14989: LD_VAR 0 5
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15136
// begin d := rand ( 0 , 5 ) ;
14997: LD_ADDR_VAR 0 4
15001: PUSH
15002: LD_INT 0
15004: PPUSH
15005: LD_INT 5
15007: PPUSH
15008: CALL_OW 12
15012: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 250
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: LD_INT 3
15035: PPUSH
15036: LD_INT 12
15038: PPUSH
15039: CALL_OW 12
15043: PPUSH
15044: CALL_OW 272
15048: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 251
15063: PPUSH
15064: LD_VAR 0 4
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: LD_INT 12
15074: PPUSH
15075: CALL_OW 12
15079: PPUSH
15080: CALL_OW 273
15084: ST_TO_ADDR
// if ValidHex ( x , y ) then
15085: LD_VAR 0 2
15089: PPUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: CALL_OW 488
15099: IFFALSE 15134
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 3
15118: PPUSH
15119: LD_INT 6
15121: PPUSH
15122: CALL_OW 12
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 483
// end ;
15134: GO 14994
15136: POP
15137: POP
// end ;
15138: PPOPN 5
15140: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15141: LD_EXP 27
15145: PUSH
15146: LD_EXP 62
15150: AND
15151: IFFALSE 15245
15153: GO 15155
15155: DISABLE
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15160: LD_ADDR_VAR 0 2
15164: PUSH
15165: LD_INT 22
15167: PUSH
15168: LD_OWVAR 2
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 32
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: ST_TO_ADDR
// if not tmp then
15207: LD_VAR 0 2
15211: NOT
15212: IFFALSE 15216
// exit ;
15214: GO 15245
// for i in tmp do
15216: LD_ADDR_VAR 0 1
15220: PUSH
15221: LD_VAR 0 2
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15243
// SetFuel ( i , 0 ) ;
15229: LD_VAR 0 1
15233: PPUSH
15234: LD_INT 0
15236: PPUSH
15237: CALL_OW 240
15241: GO 15226
15243: POP
15244: POP
// end ;
15245: PPOPN 2
15247: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15248: LD_EXP 27
15252: PUSH
15253: LD_EXP 63
15257: AND
15258: IFFALSE 15324
15260: GO 15262
15262: DISABLE
15263: LD_INT 0
15265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: LD_INT 22
15273: PUSH
15274: LD_OWVAR 2
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 30
15285: PUSH
15286: LD_INT 29
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 69
15301: ST_TO_ADDR
// if not tmp then
15302: LD_VAR 0 1
15306: NOT
15307: IFFALSE 15311
// exit ;
15309: GO 15324
// DestroyUnit ( tmp [ 1 ] ) ;
15311: LD_VAR 0 1
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: CALL_OW 65
// end ;
15324: PPOPN 1
15326: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15327: LD_EXP 27
15331: PUSH
15332: LD_EXP 65
15336: AND
15337: IFFALSE 15466
15339: GO 15341
15341: DISABLE
15342: LD_INT 0
15344: PPUSH
// begin uc_side := 0 ;
15345: LD_ADDR_OWVAR 20
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// uc_nation := nation_arabian ;
15353: LD_ADDR_OWVAR 21
15357: PUSH
15358: LD_INT 2
15360: ST_TO_ADDR
// hc_gallery :=  ;
15361: LD_ADDR_OWVAR 33
15365: PUSH
15366: LD_STRING 
15368: ST_TO_ADDR
// hc_name :=  ;
15369: LD_ADDR_OWVAR 26
15373: PUSH
15374: LD_STRING 
15376: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 11
15382: PPUSH
15383: LD_INT 10
15385: PPUSH
15386: CALL_OW 380
// un := CreateHuman ;
15390: LD_ADDR_VAR 0 1
15394: PUSH
15395: CALL_OW 44
15399: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15400: LD_VAR 0 1
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15412: LD_INT 35
15414: PPUSH
15415: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15419: LD_VAR 0 1
15423: PPUSH
15424: LD_INT 22
15426: PUSH
15427: LD_OWVAR 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PPUSH
15436: CALL_OW 69
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 74
15450: PPUSH
15451: CALL_OW 115
// until IsDead ( un ) ;
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 301
15464: IFFALSE 15412
// end ;
15466: PPOPN 1
15468: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15469: LD_EXP 27
15473: PUSH
15474: LD_EXP 67
15478: AND
15479: IFFALSE 15491
15481: GO 15483
15483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15484: LD_STRING earthquake(getX(game), 0, 32)
15486: PPUSH
15487: CALL_OW 559
15491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15492: LD_EXP 27
15496: PUSH
15497: LD_EXP 68
15501: AND
15502: IFFALSE 15593
15504: GO 15506
15506: DISABLE
15507: LD_INT 0
15509: PPUSH
// begin enable ;
15510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_OWVAR 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 33
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: ST_TO_ADDR
// if not tmp then
15558: LD_VAR 0 1
15562: NOT
15563: IFFALSE 15567
// exit ;
15565: GO 15593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 12
15584: ARRAY
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 234
// end ;
15593: PPOPN 1
15595: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15596: LD_EXP 27
15600: PUSH
15601: LD_EXP 69
15605: AND
15606: IFFALSE 15747
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
15615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 25
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: ST_TO_ADDR
// if not tmp then
15652: LD_VAR 0 3
15656: NOT
15657: IFFALSE 15661
// exit ;
15659: GO 15747
// un := tmp [ rand ( 1 , tmp ) ] ;
15661: LD_ADDR_VAR 0 2
15665: PUSH
15666: LD_VAR 0 3
15670: PUSH
15671: LD_INT 1
15673: PPUSH
15674: LD_VAR 0 3
15678: PPUSH
15679: CALL_OW 12
15683: ARRAY
15684: ST_TO_ADDR
// if Crawls ( un ) then
15685: LD_VAR 0 2
15689: PPUSH
15690: CALL_OW 318
15694: IFFALSE 15705
// ComWalk ( un ) ;
15696: LD_VAR 0 2
15700: PPUSH
15701: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_INT 9
15712: PPUSH
15713: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15717: LD_INT 28
15719: PPUSH
15720: LD_OWVAR 2
15724: PPUSH
15725: LD_INT 2
15727: PPUSH
15728: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15732: LD_INT 29
15734: PPUSH
15735: LD_OWVAR 2
15739: PPUSH
15740: LD_INT 2
15742: PPUSH
15743: CALL_OW 322
// end ;
15747: PPOPN 3
15749: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15750: LD_EXP 27
15754: PUSH
15755: LD_EXP 70
15759: AND
15760: IFFALSE 15871
15762: GO 15764
15764: DISABLE
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15770: LD_ADDR_VAR 0 3
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_OWVAR 2
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 25
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 69
15805: ST_TO_ADDR
// if not tmp then
15806: LD_VAR 0 3
15810: NOT
15811: IFFALSE 15815
// exit ;
15813: GO 15871
// un := tmp [ rand ( 1 , tmp ) ] ;
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: LD_INT 1
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: CALL_OW 12
15837: ARRAY
15838: ST_TO_ADDR
// if Crawls ( un ) then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 318
15848: IFFALSE 15859
// ComWalk ( un ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15859: LD_VAR 0 2
15863: PPUSH
15864: LD_INT 8
15866: PPUSH
15867: CALL_OW 336
// end ;
15871: PPOPN 3
15873: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15874: LD_EXP 27
15878: PUSH
15879: LD_EXP 71
15883: AND
15884: IFFALSE 16028
15886: GO 15888
15888: DISABLE
15889: LD_INT 0
15891: PPUSH
15892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_OWVAR 2
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 21
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: LD_INT 34
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 34
15935: PUSH
15936: LD_INT 51
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 34
15945: PUSH
15946: LD_INT 32
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: ST_TO_ADDR
// if not tmp then
15969: LD_VAR 0 2
15973: NOT
15974: IFFALSE 15978
// exit ;
15976: GO 16028
// for i in tmp do
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_VAR 0 2
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16026
// if GetCargo ( i , mat_artifact ) = 0 then
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_INT 4
15998: PPUSH
15999: CALL_OW 289
16003: PUSH
16004: LD_INT 0
16006: EQUAL
16007: IFFALSE 16024
// SetCargo ( i , mat_siberit , 100 ) ;
16009: LD_VAR 0 1
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 100
16019: PPUSH
16020: CALL_OW 290
16024: GO 15988
16026: POP
16027: POP
// end ;
16028: PPOPN 2
16030: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16031: LD_EXP 27
16035: PUSH
16036: LD_EXP 72
16040: AND
16041: IFFALSE 16224
16043: GO 16045
16045: DISABLE
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_OWVAR 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PPUSH
16067: CALL_OW 69
16071: ST_TO_ADDR
// if not tmp then
16072: LD_VAR 0 2
16076: NOT
16077: IFFALSE 16081
// exit ;
16079: GO 16224
// for i := 1 to 2 do
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_INT 2
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16222
// begin uc_side := your_side ;
16097: LD_ADDR_OWVAR 20
16101: PUSH
16102: LD_OWVAR 2
16106: ST_TO_ADDR
// uc_nation := nation_american ;
16107: LD_ADDR_OWVAR 21
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// vc_chassis := us_morphling ;
16115: LD_ADDR_OWVAR 37
16119: PUSH
16120: LD_INT 5
16122: ST_TO_ADDR
// vc_engine := engine_siberite ;
16123: LD_ADDR_OWVAR 39
16127: PUSH
16128: LD_INT 3
16130: ST_TO_ADDR
// vc_control := control_computer ;
16131: LD_ADDR_OWVAR 38
16135: PUSH
16136: LD_INT 3
16138: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16139: LD_ADDR_OWVAR 40
16143: PUSH
16144: LD_INT 10
16146: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 1
16154: ARRAY
16155: PPUSH
16156: CALL_OW 310
16160: NOT
16161: IFFALSE 16208
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16163: CALL_OW 45
16167: PPUSH
16168: LD_VAR 0 2
16172: PUSH
16173: LD_INT 1
16175: ARRAY
16176: PPUSH
16177: CALL_OW 250
16181: PPUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 1
16189: ARRAY
16190: PPUSH
16191: CALL_OW 251
16195: PPUSH
16196: LD_INT 12
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 50
16206: GO 16220
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16208: CALL_OW 45
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: CALL_OW 51
// end ;
16220: GO 16094
16222: POP
16223: POP
// end ;
16224: PPOPN 2
16226: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16227: LD_EXP 27
16231: PUSH
16232: LD_EXP 73
16236: AND
16237: IFFALSE 16459
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16250: LD_ADDR_VAR 0 6
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_OWVAR 2
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: ST_TO_ADDR
// if not tmp then
16304: LD_VAR 0 6
16308: NOT
16309: IFFALSE 16313
// exit ;
16311: GO 16459
// s1 := rand ( 1 , 4 ) ;
16313: LD_ADDR_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: PPUSH
16321: LD_INT 4
16323: PPUSH
16324: CALL_OW 12
16328: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16329: LD_ADDR_VAR 0 4
16333: PUSH
16334: LD_VAR 0 6
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: LD_VAR 0 2
16347: PPUSH
16348: CALL_OW 259
16352: ST_TO_ADDR
// if s1 = 1 then
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 1
16360: EQUAL
16361: IFFALSE 16381
// s2 := rand ( 2 , 4 ) else
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 2
16370: PPUSH
16371: LD_INT 4
16373: PPUSH
16374: CALL_OW 12
16378: ST_TO_ADDR
16379: GO 16389
// s2 := 1 ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 1
16388: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16389: LD_ADDR_VAR 0 5
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: CALL_OW 259
16412: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16413: LD_VAR 0 6
16417: PUSH
16418: LD_INT 1
16420: ARRAY
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: LD_VAR 0 5
16431: PPUSH
16432: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16436: LD_VAR 0 6
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_VAR 0 4
16454: PPUSH
16455: CALL_OW 237
// end ;
16459: PPOPN 6
16461: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16462: LD_EXP 27
16466: PUSH
16467: LD_EXP 74
16471: AND
16472: IFFALSE 16551
16474: GO 16476
16476: DISABLE
16477: LD_INT 0
16479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 30
16499: PUSH
16500: LD_INT 3
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 69
16515: ST_TO_ADDR
// if not tmp then
16516: LD_VAR 0 1
16520: NOT
16521: IFFALSE 16525
// exit ;
16523: GO 16551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16525: LD_VAR 0 1
16529: PUSH
16530: LD_INT 1
16532: PPUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 234
// end ;
16551: PPOPN 1
16553: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16554: LD_EXP 27
16558: PUSH
16559: LD_EXP 75
16563: AND
16564: IFFALSE 16676
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 30
16595: PUSH
16596: LD_INT 27
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 30
16605: PUSH
16606: LD_INT 26
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 30
16615: PUSH
16616: LD_INT 28
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: ST_TO_ADDR
// if not tmp then
16638: LD_VAR 0 2
16642: NOT
16643: IFFALSE 16647
// exit ;
16645: GO 16676
// for i in tmp do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_IN
16658: IFFALSE 16674
// SetLives ( i , 1 ) ;
16660: LD_VAR 0 1
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 234
16672: GO 16657
16674: POP
16675: POP
// end ;
16676: PPOPN 2
16678: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16679: LD_EXP 27
16683: PUSH
16684: LD_EXP 76
16688: AND
16689: IFFALSE 16963
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
16698: PPUSH
// begin i := rand ( 1 , 7 ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_INT 7
16709: PPUSH
16710: CALL_OW 12
16714: ST_TO_ADDR
// case i of 1 :
16715: LD_VAR 0 1
16719: PUSH
16720: LD_INT 1
16722: DOUBLE
16723: EQUAL
16724: IFTRUE 16728
16726: GO 16738
16728: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16729: LD_STRING earthquake(getX(game), 0, 32)
16731: PPUSH
16732: CALL_OW 559
16736: GO 16963
16738: LD_INT 2
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16760
16746: POP
// begin ToLua ( displayStucuk(); ) ;
16747: LD_STRING displayStucuk();
16749: PPUSH
16750: CALL_OW 559
// ResetFog ;
16754: CALL_OW 335
// end ; 3 :
16758: GO 16963
16760: LD_INT 3
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16872
16768: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 22
16776: PUSH
16777: LD_OWVAR 2
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 25
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// if not tmp then
16805: LD_VAR 0 2
16809: NOT
16810: IFFALSE 16814
// exit ;
16812: GO 16963
// un := tmp [ rand ( 1 , tmp ) ] ;
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: LD_VAR 0 2
16823: PUSH
16824: LD_INT 1
16826: PPUSH
16827: LD_VAR 0 2
16831: PPUSH
16832: CALL_OW 12
16836: ARRAY
16837: ST_TO_ADDR
// if Crawls ( un ) then
16838: LD_VAR 0 3
16842: PPUSH
16843: CALL_OW 318
16847: IFFALSE 16858
// ComWalk ( un ) ;
16849: LD_VAR 0 3
16853: PPUSH
16854: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 8
16865: PPUSH
16866: CALL_OW 336
// end ; 4 :
16870: GO 16963
16872: LD_INT 4
16874: DOUBLE
16875: EQUAL
16876: IFTRUE 16880
16878: GO 16941
16880: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_OWVAR 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 30
16900: PUSH
16901: LD_INT 29
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PPUSH
16912: CALL_OW 69
16916: ST_TO_ADDR
// if not tmp then
16917: LD_VAR 0 2
16921: NOT
16922: IFFALSE 16926
// exit ;
16924: GO 16963
// DestroyUnit ( tmp [ 1 ] ) ;
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: CALL_OW 65
// end ; 5 .. 7 :
16939: GO 16963
16941: LD_INT 5
16943: DOUBLE
16944: GREATEREQUAL
16945: IFFALSE 16953
16947: LD_INT 7
16949: DOUBLE
16950: LESSEQUAL
16951: IFTRUE 16955
16953: GO 16962
16955: POP
// StreamSibBomb ; end ;
16956: CALL 13213 0 0
16960: GO 16963
16962: POP
// end ;
16963: PPOPN 3
16965: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16966: LD_EXP 27
16970: PUSH
16971: LD_EXP 77
16975: AND
16976: IFFALSE 17132
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
16985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16986: LD_ADDR_VAR 0 2
16990: PUSH
16991: LD_INT 81
16993: PUSH
16994: LD_OWVAR 2
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 21
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: ST_TO_ADDR
// if not tmp then
17040: LD_VAR 0 2
17044: NOT
17045: IFFALSE 17049
// exit ;
17047: GO 17132
// p := 0 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// p := p + 1 ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 3
17073: PUSH
17074: LD_INT 1
17076: PLUS
17077: ST_TO_ADDR
// for i in tmp do
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: LD_VAR 0 2
17087: PUSH
17088: FOR_IN
17089: IFFALSE 17120
// if GetLives ( i ) < 1000 then
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 256
17100: PUSH
17101: LD_INT 1000
17103: LESS
17104: IFFALSE 17118
// SetLives ( i , 1000 ) ;
17106: LD_VAR 0 1
17110: PPUSH
17111: LD_INT 1000
17113: PPUSH
17114: CALL_OW 234
17118: GO 17088
17120: POP
17121: POP
// until p > 20 ;
17122: LD_VAR 0 3
17126: PUSH
17127: LD_INT 20
17129: GREATER
17130: IFFALSE 17057
// end ;
17132: PPOPN 3
17134: END
// every 0 0$1 trigger StreamModeActive and sTime do
17135: LD_EXP 27
17139: PUSH
17140: LD_EXP 78
17144: AND
17145: IFFALSE 17180
17147: GO 17149
17149: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17150: LD_INT 28
17152: PPUSH
17153: LD_OWVAR 2
17157: PPUSH
17158: LD_INT 2
17160: PPUSH
17161: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17165: LD_INT 30
17167: PPUSH
17168: LD_OWVAR 2
17172: PPUSH
17173: LD_INT 2
17175: PPUSH
17176: CALL_OW 322
// end ;
17180: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17181: LD_EXP 27
17185: PUSH
17186: LD_EXP 79
17190: AND
17191: IFFALSE 17312
17193: GO 17195
17195: DISABLE
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: LD_INT 22
17207: PUSH
17208: LD_OWVAR 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: LD_INT 23
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: ST_TO_ADDR
// if not tmp then
17254: LD_VAR 0 2
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17312
// for i in tmp do
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_VAR 0 2
17272: PUSH
17273: FOR_IN
17274: IFFALSE 17310
// begin if Crawls ( i ) then
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 318
17285: IFFALSE 17296
// ComWalk ( i ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 138
// SetClass ( i , 2 ) ;
17296: LD_VAR 0 1
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: CALL_OW 336
// end ;
17308: GO 17273
17310: POP
17311: POP
// end ;
17312: PPOPN 2
17314: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17315: LD_EXP 27
17319: PUSH
17320: LD_EXP 80
17324: AND
17325: IFFALSE 17606
17327: GO 17329
17329: DISABLE
17330: LD_INT 0
17332: PPUSH
17333: PPUSH
17334: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17335: LD_OWVAR 2
17339: PPUSH
17340: LD_INT 9
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17353: LD_INT 9
17355: PPUSH
17356: LD_OWVAR 2
17360: PPUSH
17361: CALL_OW 343
// uc_side := 9 ;
17365: LD_ADDR_OWVAR 20
17369: PUSH
17370: LD_INT 9
17372: ST_TO_ADDR
// uc_nation := 2 ;
17373: LD_ADDR_OWVAR 21
17377: PUSH
17378: LD_INT 2
17380: ST_TO_ADDR
// hc_name := Dark Warrior ;
17381: LD_ADDR_OWVAR 26
17385: PUSH
17386: LD_STRING Dark Warrior
17388: ST_TO_ADDR
// hc_gallery :=  ;
17389: LD_ADDR_OWVAR 33
17393: PUSH
17394: LD_STRING 
17396: ST_TO_ADDR
// hc_noskilllimit := true ;
17397: LD_ADDR_OWVAR 76
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17405: LD_ADDR_OWVAR 31
17409: PUSH
17410: LD_INT 30
17412: PUSH
17413: LD_INT 30
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: ST_TO_ADDR
// un := CreateHuman ;
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: CALL_OW 44
17437: ST_TO_ADDR
// hc_noskilllimit := false ;
17438: LD_ADDR_OWVAR 76
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 51
// p := 0 ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 0
17465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17466: LD_INT 35
17468: PPUSH
17469: CALL_OW 67
// p := p + 1 ;
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_INT 1
17485: PLUS
17486: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 256
17496: PUSH
17497: LD_INT 1000
17499: LESS
17500: IFFALSE 17514
// SetLives ( un , 1000 ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1000
17509: PPUSH
17510: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17514: LD_VAR 0 3
17518: PPUSH
17519: LD_INT 81
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 91
17533: PUSH
17534: LD_VAR 0 3
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: CALL_OW 74
17565: PPUSH
17566: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 60
17577: GREATER
17578: PUSH
17579: LD_VAR 0 3
17583: PPUSH
17584: CALL_OW 301
17588: OR
17589: IFFALSE 17466
// if un then
17591: LD_VAR 0 3
17595: IFFALSE 17606
// RemoveUnit ( un ) ;
17597: LD_VAR 0 3
17601: PPUSH
17602: CALL_OW 64
// end ;
17606: PPOPN 3
17608: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17609: LD_INT 0
17611: PPUSH
// case cmd of 301 :
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 301
17619: DOUBLE
17620: EQUAL
17621: IFTRUE 17625
17623: GO 17657
17625: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17626: LD_VAR 0 6
17630: PPUSH
17631: LD_VAR 0 7
17635: PPUSH
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_VAR 0 4
17645: PPUSH
17646: LD_VAR 0 5
17650: PPUSH
17651: CALL 18858 0 5
17655: GO 17778
17657: LD_INT 302
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17702
17665: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_VAR 0 7
17675: PPUSH
17676: LD_VAR 0 8
17680: PPUSH
17681: LD_VAR 0 9
17685: PPUSH
17686: LD_VAR 0 4
17690: PPUSH
17691: LD_VAR 0 5
17695: PPUSH
17696: CALL 18949 0 6
17700: GO 17778
17702: LD_INT 303
17704: DOUBLE
17705: EQUAL
17706: IFTRUE 17710
17708: GO 17747
17710: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17711: LD_VAR 0 6
17715: PPUSH
17716: LD_VAR 0 7
17720: PPUSH
17721: LD_VAR 0 8
17725: PPUSH
17726: LD_VAR 0 9
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: LD_VAR 0 5
17740: PPUSH
17741: CALL 17783 0 6
17745: GO 17778
17747: LD_INT 304
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17777
17755: POP
// hHackTeleport ( unit , x , y ) ; end ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 4
17765: PPUSH
17766: LD_VAR 0 5
17770: PPUSH
17771: CALL 19542 0 3
17775: GO 17778
17777: POP
// end ;
17778: LD_VAR 0 12
17782: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17787: LD_VAR 0 1
17791: PUSH
17792: LD_INT 1
17794: LESS
17795: PUSH
17796: LD_VAR 0 1
17800: PUSH
17801: LD_INT 3
17803: GREATER
17804: OR
17805: PUSH
17806: LD_VAR 0 5
17810: PPUSH
17811: LD_VAR 0 6
17815: PPUSH
17816: CALL_OW 428
17820: OR
17821: IFFALSE 17825
// exit ;
17823: GO 18545
// uc_side := your_side ;
17825: LD_ADDR_OWVAR 20
17829: PUSH
17830: LD_OWVAR 2
17834: ST_TO_ADDR
// uc_nation := nation ;
17835: LD_ADDR_OWVAR 21
17839: PUSH
17840: LD_VAR 0 1
17844: ST_TO_ADDR
// bc_level = 1 ;
17845: LD_ADDR_OWVAR 43
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// case btype of 1 :
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 1
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17877
17866: POP
// bc_type := b_depot ; 2 :
17867: LD_ADDR_OWVAR 42
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
17875: GO 18489
17877: LD_INT 2
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_warehouse ; 3 :
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 1
17893: ST_TO_ADDR
17894: GO 18489
17896: LD_INT 3
17898: DOUBLE
17899: EQUAL
17900: IFTRUE 17904
17902: GO 17915
17904: POP
// bc_type := b_lab ; 4 .. 9 :
17905: LD_ADDR_OWVAR 42
17909: PUSH
17910: LD_INT 6
17912: ST_TO_ADDR
17913: GO 18489
17915: LD_INT 4
17917: DOUBLE
17918: GREATEREQUAL
17919: IFFALSE 17927
17921: LD_INT 9
17923: DOUBLE
17924: LESSEQUAL
17925: IFTRUE 17929
17927: GO 17981
17929: POP
// begin bc_type := b_lab_half ;
17930: LD_ADDR_OWVAR 42
17934: PUSH
17935: LD_INT 7
17937: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17938: LD_ADDR_OWVAR 44
17942: PUSH
17943: LD_INT 10
17945: PUSH
17946: LD_INT 11
17948: PUSH
17949: LD_INT 12
17951: PUSH
17952: LD_INT 15
17954: PUSH
17955: LD_INT 14
17957: PUSH
17958: LD_INT 13
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: LD_VAR 0 2
17973: PUSH
17974: LD_INT 3
17976: MINUS
17977: ARRAY
17978: ST_TO_ADDR
// end ; 10 .. 13 :
17979: GO 18489
17981: LD_INT 10
17983: DOUBLE
17984: GREATEREQUAL
17985: IFFALSE 17993
17987: LD_INT 13
17989: DOUBLE
17990: LESSEQUAL
17991: IFTRUE 17995
17993: GO 18072
17995: POP
// begin bc_type := b_lab_full ;
17996: LD_ADDR_OWVAR 42
18000: PUSH
18001: LD_INT 8
18003: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18004: LD_ADDR_OWVAR 44
18008: PUSH
18009: LD_INT 10
18011: PUSH
18012: LD_INT 12
18014: PUSH
18015: LD_INT 14
18017: PUSH
18018: LD_INT 13
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: LD_VAR 0 2
18031: PUSH
18032: LD_INT 9
18034: MINUS
18035: ARRAY
18036: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18037: LD_ADDR_OWVAR 45
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: LD_INT 15
18047: PUSH
18048: LD_INT 12
18050: PUSH
18051: LD_INT 15
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 9
18067: MINUS
18068: ARRAY
18069: ST_TO_ADDR
// end ; 14 :
18070: GO 18489
18072: LD_INT 14
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18091
18080: POP
// bc_type := b_workshop ; 15 :
18081: LD_ADDR_OWVAR 42
18085: PUSH
18086: LD_INT 2
18088: ST_TO_ADDR
18089: GO 18489
18091: LD_INT 15
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18099
18097: GO 18110
18099: POP
// bc_type := b_factory ; 16 :
18100: LD_ADDR_OWVAR 42
18104: PUSH
18105: LD_INT 3
18107: ST_TO_ADDR
18108: GO 18489
18110: LD_INT 16
18112: DOUBLE
18113: EQUAL
18114: IFTRUE 18118
18116: GO 18129
18118: POP
// bc_type := b_ext_gun ; 17 :
18119: LD_ADDR_OWVAR 42
18123: PUSH
18124: LD_INT 17
18126: ST_TO_ADDR
18127: GO 18489
18129: LD_INT 17
18131: DOUBLE
18132: EQUAL
18133: IFTRUE 18137
18135: GO 18165
18137: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18138: LD_ADDR_OWVAR 42
18142: PUSH
18143: LD_INT 19
18145: PUSH
18146: LD_INT 23
18148: PUSH
18149: LD_INT 19
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: LD_VAR 0 1
18161: ARRAY
18162: ST_TO_ADDR
18163: GO 18489
18165: LD_INT 18
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18184
18173: POP
// bc_type := b_ext_radar ; 19 :
18174: LD_ADDR_OWVAR 42
18178: PUSH
18179: LD_INT 20
18181: ST_TO_ADDR
18182: GO 18489
18184: LD_INT 19
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18203
18192: POP
// bc_type := b_ext_radio ; 20 :
18193: LD_ADDR_OWVAR 42
18197: PUSH
18198: LD_INT 22
18200: ST_TO_ADDR
18201: GO 18489
18203: LD_INT 20
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18222
18211: POP
// bc_type := b_ext_siberium ; 21 :
18212: LD_ADDR_OWVAR 42
18216: PUSH
18217: LD_INT 21
18219: ST_TO_ADDR
18220: GO 18489
18222: LD_INT 21
18224: DOUBLE
18225: EQUAL
18226: IFTRUE 18230
18228: GO 18241
18230: POP
// bc_type := b_ext_computer ; 22 :
18231: LD_ADDR_OWVAR 42
18235: PUSH
18236: LD_INT 24
18238: ST_TO_ADDR
18239: GO 18489
18241: LD_INT 22
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18260
18249: POP
// bc_type := b_ext_track ; 23 :
18250: LD_ADDR_OWVAR 42
18254: PUSH
18255: LD_INT 16
18257: ST_TO_ADDR
18258: GO 18489
18260: LD_INT 23
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18279
18268: POP
// bc_type := b_ext_laser ; 24 :
18269: LD_ADDR_OWVAR 42
18273: PUSH
18274: LD_INT 25
18276: ST_TO_ADDR
18277: GO 18489
18279: LD_INT 24
18281: DOUBLE
18282: EQUAL
18283: IFTRUE 18287
18285: GO 18298
18287: POP
// bc_type := b_control_tower ; 25 :
18288: LD_ADDR_OWVAR 42
18292: PUSH
18293: LD_INT 36
18295: ST_TO_ADDR
18296: GO 18489
18298: LD_INT 25
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18317
18306: POP
// bc_type := b_breastwork ; 26 :
18307: LD_ADDR_OWVAR 42
18311: PUSH
18312: LD_INT 31
18314: ST_TO_ADDR
18315: GO 18489
18317: LD_INT 26
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18336
18325: POP
// bc_type := b_bunker ; 27 :
18326: LD_ADDR_OWVAR 42
18330: PUSH
18331: LD_INT 32
18333: ST_TO_ADDR
18334: GO 18489
18336: LD_INT 27
18338: DOUBLE
18339: EQUAL
18340: IFTRUE 18344
18342: GO 18355
18344: POP
// bc_type := b_turret ; 28 :
18345: LD_ADDR_OWVAR 42
18349: PUSH
18350: LD_INT 33
18352: ST_TO_ADDR
18353: GO 18489
18355: LD_INT 28
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18374
18363: POP
// bc_type := b_armoury ; 29 :
18364: LD_ADDR_OWVAR 42
18368: PUSH
18369: LD_INT 4
18371: ST_TO_ADDR
18372: GO 18489
18374: LD_INT 29
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18393
18382: POP
// bc_type := b_barracks ; 30 :
18383: LD_ADDR_OWVAR 42
18387: PUSH
18388: LD_INT 5
18390: ST_TO_ADDR
18391: GO 18489
18393: LD_INT 30
18395: DOUBLE
18396: EQUAL
18397: IFTRUE 18401
18399: GO 18412
18401: POP
// bc_type := b_solar_power ; 31 :
18402: LD_ADDR_OWVAR 42
18406: PUSH
18407: LD_INT 27
18409: ST_TO_ADDR
18410: GO 18489
18412: LD_INT 31
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18431
18420: POP
// bc_type := b_oil_power ; 32 :
18421: LD_ADDR_OWVAR 42
18425: PUSH
18426: LD_INT 26
18428: ST_TO_ADDR
18429: GO 18489
18431: LD_INT 32
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18450
18439: POP
// bc_type := b_siberite_power ; 33 :
18440: LD_ADDR_OWVAR 42
18444: PUSH
18445: LD_INT 28
18447: ST_TO_ADDR
18448: GO 18489
18450: LD_INT 33
18452: DOUBLE
18453: EQUAL
18454: IFTRUE 18458
18456: GO 18469
18458: POP
// bc_type := b_oil_mine ; 34 :
18459: LD_ADDR_OWVAR 42
18463: PUSH
18464: LD_INT 29
18466: ST_TO_ADDR
18467: GO 18489
18469: LD_INT 34
18471: DOUBLE
18472: EQUAL
18473: IFTRUE 18477
18475: GO 18488
18477: POP
// bc_type := b_siberite_mine ; end ;
18478: LD_ADDR_OWVAR 42
18482: PUSH
18483: LD_INT 30
18485: ST_TO_ADDR
18486: GO 18489
18488: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18489: LD_ADDR_VAR 0 8
18493: PUSH
18494: LD_VAR 0 5
18498: PPUSH
18499: LD_VAR 0 6
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: CALL_OW 47
18513: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18514: LD_OWVAR 42
18518: PUSH
18519: LD_INT 32
18521: PUSH
18522: LD_INT 33
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: IN
18529: IFFALSE 18545
// PlaceWeaponTurret ( b , weapon ) ;
18531: LD_VAR 0 8
18535: PPUSH
18536: LD_VAR 0 4
18540: PPUSH
18541: CALL_OW 431
// end ;
18545: LD_VAR 0 7
18549: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18550: LD_INT 0
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18556: LD_ADDR_VAR 0 4
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_OWVAR 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 30
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: ST_TO_ADDR
// if not tmp then
18610: LD_VAR 0 4
18614: NOT
18615: IFFALSE 18619
// exit ;
18617: GO 18678
// for i in tmp do
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_VAR 0 4
18628: PUSH
18629: FOR_IN
18630: IFFALSE 18676
// for j = 1 to 3 do
18632: LD_ADDR_VAR 0 3
18636: PUSH
18637: DOUBLE
18638: LD_INT 1
18640: DEC
18641: ST_TO_ADDR
18642: LD_INT 3
18644: PUSH
18645: FOR_TO
18646: IFFALSE 18672
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18648: LD_VAR 0 2
18652: PPUSH
18653: CALL_OW 274
18657: PPUSH
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 99999
18665: PPUSH
18666: CALL_OW 277
18670: GO 18645
18672: POP
18673: POP
18674: GO 18629
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 1
18682: RET
// export function hHackSetLevel10 ; var i , j ; begin
18683: LD_INT 0
18685: PPUSH
18686: PPUSH
18687: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18688: LD_ADDR_VAR 0 2
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 69
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18761
// if IsSelected ( i ) then
18711: LD_VAR 0 2
18715: PPUSH
18716: CALL_OW 306
18720: IFFALSE 18759
// begin for j := 1 to 4 do
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: DOUBLE
18728: LD_INT 1
18730: DEC
18731: ST_TO_ADDR
18732: LD_INT 4
18734: PUSH
18735: FOR_TO
18736: IFFALSE 18757
// SetSkill ( i , j , 10 ) ;
18738: LD_VAR 0 2
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 10
18750: PPUSH
18751: CALL_OW 237
18755: GO 18735
18757: POP
18758: POP
// end ;
18759: GO 18708
18761: POP
18762: POP
// end ;
18763: LD_VAR 0 1
18767: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18768: LD_INT 0
18770: PPUSH
18771: PPUSH
18772: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18773: LD_ADDR_VAR 0 2
18777: PUSH
18778: LD_INT 22
18780: PUSH
18781: LD_OWVAR 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 21
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18851
// begin for j := 1 to 4 do
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: DOUBLE
18818: LD_INT 1
18820: DEC
18821: ST_TO_ADDR
18822: LD_INT 4
18824: PUSH
18825: FOR_TO
18826: IFFALSE 18847
// SetSkill ( i , j , 10 ) ;
18828: LD_VAR 0 2
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: LD_INT 10
18840: PPUSH
18841: CALL_OW 237
18845: GO 18825
18847: POP
18848: POP
// end ;
18849: GO 18809
18851: POP
18852: POP
// end ;
18853: LD_VAR 0 1
18857: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18858: LD_INT 0
18860: PPUSH
// uc_side := your_side ;
18861: LD_ADDR_OWVAR 20
18865: PUSH
18866: LD_OWVAR 2
18870: ST_TO_ADDR
// uc_nation := nation ;
18871: LD_ADDR_OWVAR 21
18875: PUSH
18876: LD_VAR 0 1
18880: ST_TO_ADDR
// InitHc ;
18881: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18885: LD_INT 0
18887: PPUSH
18888: LD_VAR 0 2
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18902: LD_VAR 0 4
18906: PPUSH
18907: LD_VAR 0 5
18911: PPUSH
18912: CALL_OW 428
18916: PUSH
18917: LD_INT 0
18919: EQUAL
18920: IFFALSE 18944
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18922: CALL_OW 44
18926: PPUSH
18927: LD_VAR 0 4
18931: PPUSH
18932: LD_VAR 0 5
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 48
// end ;
18944: LD_VAR 0 6
18948: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
// uc_side := your_side ;
18953: LD_ADDR_OWVAR 20
18957: PUSH
18958: LD_OWVAR 2
18962: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 3
18976: PUSH
18977: LD_INT 4
18979: PUSH
18980: LD_INT 5
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: IN
18990: IFFALSE 19002
// uc_nation := nation_american else
18992: LD_ADDR_OWVAR 21
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
19000: GO 19045
// if chassis in [ 11 , 12 , 13 , 14 ] then
19002: LD_VAR 0 1
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: LD_INT 13
19015: PUSH
19016: LD_INT 14
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: IN
19025: IFFALSE 19037
// uc_nation := nation_arabian else
19027: LD_ADDR_OWVAR 21
19031: PUSH
19032: LD_INT 2
19034: ST_TO_ADDR
19035: GO 19045
// uc_nation := nation_russian ;
19037: LD_ADDR_OWVAR 21
19041: PUSH
19042: LD_INT 3
19044: ST_TO_ADDR
// vc_chassis := chassis ;
19045: LD_ADDR_OWVAR 37
19049: PUSH
19050: LD_VAR 0 1
19054: ST_TO_ADDR
// vc_engine := engine ;
19055: LD_ADDR_OWVAR 39
19059: PUSH
19060: LD_VAR 0 2
19064: ST_TO_ADDR
// vc_control := control ;
19065: LD_ADDR_OWVAR 38
19069: PUSH
19070: LD_VAR 0 3
19074: ST_TO_ADDR
// vc_weapon := weapon ;
19075: LD_ADDR_OWVAR 40
19079: PUSH
19080: LD_VAR 0 4
19084: ST_TO_ADDR
// un := CreateVehicle ;
19085: LD_ADDR_VAR 0 8
19089: PUSH
19090: CALL_OW 45
19094: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19095: LD_VAR 0 8
19099: PPUSH
19100: LD_INT 0
19102: PPUSH
19103: LD_INT 5
19105: PPUSH
19106: CALL_OW 12
19110: PPUSH
19111: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19115: LD_VAR 0 8
19119: PPUSH
19120: LD_VAR 0 5
19124: PPUSH
19125: LD_VAR 0 6
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: CALL_OW 48
// end ;
19137: LD_VAR 0 7
19141: RET
// export hInvincible ; every 1 do
19142: GO 19144
19144: DISABLE
// hInvincible := [ ] ;
19145: LD_ADDR_EXP 81
19149: PUSH
19150: EMPTY
19151: ST_TO_ADDR
19152: END
// every 10 do var i ;
19153: GO 19155
19155: DISABLE
19156: LD_INT 0
19158: PPUSH
// begin enable ;
19159: ENABLE
// if not hInvincible then
19160: LD_EXP 81
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19213
// for i in hInvincible do
19169: LD_ADDR_VAR 0 1
19173: PUSH
19174: LD_EXP 81
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19211
// if GetLives ( i ) < 1000 then
19182: LD_VAR 0 1
19186: PPUSH
19187: CALL_OW 256
19191: PUSH
19192: LD_INT 1000
19194: LESS
19195: IFFALSE 19209
// SetLives ( i , 1000 ) ;
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_INT 1000
19204: PPUSH
19205: CALL_OW 234
19209: GO 19179
19211: POP
19212: POP
// end ;
19213: PPOPN 1
19215: END
// export function hHackInvincible ; var i ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19220: LD_ADDR_VAR 0 2
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: FOR_IN
19259: IFFALSE 19320
// if IsSelected ( i ) then
19261: LD_VAR 0 2
19265: PPUSH
19266: CALL_OW 306
19270: IFFALSE 19318
// begin if i in hInvincible then
19272: LD_VAR 0 2
19276: PUSH
19277: LD_EXP 81
19281: IN
19282: IFFALSE 19302
// hInvincible := hInvincible diff i else
19284: LD_ADDR_EXP 81
19288: PUSH
19289: LD_EXP 81
19293: PUSH
19294: LD_VAR 0 2
19298: DIFF
19299: ST_TO_ADDR
19300: GO 19318
// hInvincible := hInvincible union i ;
19302: LD_ADDR_EXP 81
19306: PUSH
19307: LD_EXP 81
19311: PUSH
19312: LD_VAR 0 2
19316: UNION
19317: ST_TO_ADDR
// end ;
19318: GO 19258
19320: POP
19321: POP
// end ;
19322: LD_VAR 0 1
19326: RET
// export function hHackInvisible ; var i , j ; begin
19327: LD_INT 0
19329: PPUSH
19330: PPUSH
19331: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19332: LD_ADDR_VAR 0 2
19336: PUSH
19337: LD_INT 21
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 69
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19377
// if IsSelected ( i ) then
19355: LD_VAR 0 2
19359: PPUSH
19360: CALL_OW 306
19364: IFFALSE 19375
// ComForceInvisible ( i ) ;
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 496
19375: GO 19352
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 1
19383: RET
// export function hHackChangeYourSide ; begin
19384: LD_INT 0
19386: PPUSH
// if your_side = 8 then
19387: LD_OWVAR 2
19391: PUSH
19392: LD_INT 8
19394: EQUAL
19395: IFFALSE 19407
// your_side := 0 else
19397: LD_ADDR_OWVAR 2
19401: PUSH
19402: LD_INT 0
19404: ST_TO_ADDR
19405: GO 19421
// your_side := your_side + 1 ;
19407: LD_ADDR_OWVAR 2
19411: PUSH
19412: LD_OWVAR 2
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ;
19421: LD_VAR 0 1
19425: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19426: LD_INT 0
19428: PPUSH
19429: PPUSH
19430: PPUSH
// for i in all_units do
19431: LD_ADDR_VAR 0 2
19435: PUSH
19436: LD_OWVAR 3
19440: PUSH
19441: FOR_IN
19442: IFFALSE 19520
// if IsSelected ( i ) then
19444: LD_VAR 0 2
19448: PPUSH
19449: CALL_OW 306
19453: IFFALSE 19518
// begin j := GetSide ( i ) ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: LD_VAR 0 2
19464: PPUSH
19465: CALL_OW 255
19469: ST_TO_ADDR
// if j = 8 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 8
19477: EQUAL
19478: IFFALSE 19490
// j := 0 else
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
19488: GO 19504
// j := j + 1 ;
19490: LD_ADDR_VAR 0 3
19494: PUSH
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 1
19502: PLUS
19503: ST_TO_ADDR
// SetSide ( i , j ) ;
19504: LD_VAR 0 2
19508: PPUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 235
// end ;
19518: GO 19441
19520: POP
19521: POP
// end ;
19522: LD_VAR 0 1
19526: RET
// export function hHackFog ; begin
19527: LD_INT 0
19529: PPUSH
// FogOff ( true ) ;
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 344
// end ;
19537: LD_VAR 0 1
19541: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19542: LD_INT 0
19544: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19545: LD_VAR 0 1
19549: PPUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: LD_INT 1
19565: PPUSH
19566: CALL_OW 483
// CenterOnXY ( x , y ) ;
19570: LD_VAR 0 2
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: CALL_OW 84
// end ; end_of_file
19584: LD_VAR 0 4
19588: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 264
19604: PUSH
19605: LD_EXP 92
19609: EQUAL
19610: IFFALSE 19682
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19612: LD_INT 68
19614: PPUSH
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL_OW 255
19624: PPUSH
19625: CALL_OW 321
19629: PUSH
19630: LD_INT 2
19632: EQUAL
19633: IFFALSE 19645
// eff := 70 else
19635: LD_ADDR_VAR 0 4
19639: PUSH
19640: LD_INT 70
19642: ST_TO_ADDR
19643: GO 19653
// eff := 30 ;
19645: LD_ADDR_VAR 0 4
19649: PUSH
19650: LD_INT 30
19652: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19653: LD_VAR 0 1
19657: PPUSH
19658: CALL_OW 250
19662: PPUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL_OW 251
19672: PPUSH
19673: LD_VAR 0 4
19677: PPUSH
19678: CALL_OW 495
// end ; end ;
19682: LD_VAR 0 2
19686: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19687: LD_INT 0
19689: PPUSH
// end ;
19690: LD_VAR 0 4
19694: RET
// export function SOS_Command ( cmd ) ; begin
19695: LD_INT 0
19697: PPUSH
// end ;
19698: LD_VAR 0 2
19702: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19703: LD_INT 0
19705: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 254
19713: EQUAL
19714: PUSH
19715: LD_VAR 0 2
19719: PPUSH
19720: CALL_OW 264
19724: PUSH
19725: LD_EXP 90
19729: EQUAL
19730: AND
19731: PUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: CALL_OW 263
19741: PUSH
19742: LD_INT 3
19744: EQUAL
19745: AND
19746: IFFALSE 19762
// HackDestroyVehicle ( unit , selectedUnit ) ;
19748: LD_VAR 0 2
19752: PPUSH
19753: LD_VAR 0 3
19757: PPUSH
19758: CALL 21271 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19762: LD_VAR 0 1
19766: PUSH
19767: LD_INT 255
19769: EQUAL
19770: PUSH
19771: LD_VAR 0 2
19775: PPUSH
19776: CALL_OW 264
19780: PUSH
19781: LD_INT 14
19783: PUSH
19784: LD_INT 53
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: IN
19791: AND
19792: PUSH
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_VAR 0 5
19802: PPUSH
19803: CALL_OW 488
19807: AND
19808: IFFALSE 19832
// CutTreeXYR ( unit , x , y , 12 ) ;
19810: LD_VAR 0 2
19814: PPUSH
19815: LD_VAR 0 4
19819: PPUSH
19820: LD_VAR 0 5
19824: PPUSH
19825: LD_INT 12
19827: PPUSH
19828: CALL 19837 0 4
// end ;
19832: LD_VAR 0 6
19836: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19837: LD_INT 0
19839: PPUSH
19840: PPUSH
19841: PPUSH
19842: PPUSH
19843: PPUSH
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19848: LD_VAR 0 1
19852: NOT
19853: PUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: CALL_OW 488
19868: NOT
19869: OR
19870: PUSH
19871: LD_VAR 0 4
19875: NOT
19876: OR
19877: IFFALSE 19881
// exit ;
19879: GO 20221
// list := [ ] ;
19881: LD_ADDR_VAR 0 13
19885: PUSH
19886: EMPTY
19887: ST_TO_ADDR
// if x - r < 0 then
19888: LD_VAR 0 2
19892: PUSH
19893: LD_VAR 0 4
19897: MINUS
19898: PUSH
19899: LD_INT 0
19901: LESS
19902: IFFALSE 19914
// min_x := 0 else
19904: LD_ADDR_VAR 0 7
19908: PUSH
19909: LD_INT 0
19911: ST_TO_ADDR
19912: GO 19930
// min_x := x - r ;
19914: LD_ADDR_VAR 0 7
19918: PUSH
19919: LD_VAR 0 2
19923: PUSH
19924: LD_VAR 0 4
19928: MINUS
19929: ST_TO_ADDR
// if y - r < 0 then
19930: LD_VAR 0 3
19934: PUSH
19935: LD_VAR 0 4
19939: MINUS
19940: PUSH
19941: LD_INT 0
19943: LESS
19944: IFFALSE 19956
// min_y := 0 else
19946: LD_ADDR_VAR 0 8
19950: PUSH
19951: LD_INT 0
19953: ST_TO_ADDR
19954: GO 19972
// min_y := y - r ;
19956: LD_ADDR_VAR 0 8
19960: PUSH
19961: LD_VAR 0 3
19965: PUSH
19966: LD_VAR 0 4
19970: MINUS
19971: ST_TO_ADDR
// max_x := x + r ;
19972: LD_ADDR_VAR 0 9
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_VAR 0 4
19986: PLUS
19987: ST_TO_ADDR
// max_y := y + r ;
19988: LD_ADDR_VAR 0 10
19992: PUSH
19993: LD_VAR 0 3
19997: PUSH
19998: LD_VAR 0 4
20002: PLUS
20003: ST_TO_ADDR
// for _x = min_x to max_x do
20004: LD_ADDR_VAR 0 11
20008: PUSH
20009: DOUBLE
20010: LD_VAR 0 7
20014: DEC
20015: ST_TO_ADDR
20016: LD_VAR 0 9
20020: PUSH
20021: FOR_TO
20022: IFFALSE 20139
// for _y = min_y to max_y do
20024: LD_ADDR_VAR 0 12
20028: PUSH
20029: DOUBLE
20030: LD_VAR 0 8
20034: DEC
20035: ST_TO_ADDR
20036: LD_VAR 0 10
20040: PUSH
20041: FOR_TO
20042: IFFALSE 20135
// begin if not ValidHex ( _x , _y ) then
20044: LD_VAR 0 11
20048: PPUSH
20049: LD_VAR 0 12
20053: PPUSH
20054: CALL_OW 488
20058: NOT
20059: IFFALSE 20063
// continue ;
20061: GO 20041
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20063: LD_VAR 0 11
20067: PPUSH
20068: LD_VAR 0 12
20072: PPUSH
20073: CALL_OW 351
20077: PUSH
20078: LD_VAR 0 11
20082: PPUSH
20083: LD_VAR 0 12
20087: PPUSH
20088: CALL_OW 554
20092: AND
20093: IFFALSE 20133
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20095: LD_ADDR_VAR 0 13
20099: PUSH
20100: LD_VAR 0 13
20104: PPUSH
20105: LD_VAR 0 13
20109: PUSH
20110: LD_INT 1
20112: PLUS
20113: PPUSH
20114: LD_VAR 0 11
20118: PUSH
20119: LD_VAR 0 12
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 2
20132: ST_TO_ADDR
// end ;
20133: GO 20041
20135: POP
20136: POP
20137: GO 20021
20139: POP
20140: POP
// if not list then
20141: LD_VAR 0 13
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20221
// for i in list do
20150: LD_ADDR_VAR 0 6
20154: PUSH
20155: LD_VAR 0 13
20159: PUSH
20160: FOR_IN
20161: IFFALSE 20219
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20163: LD_VAR 0 1
20167: PPUSH
20168: LD_STRING M
20170: PUSH
20171: LD_VAR 0 6
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: PUSH
20180: LD_VAR 0 6
20184: PUSH
20185: LD_INT 2
20187: ARRAY
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: PPUSH
20213: CALL_OW 447
20217: GO 20160
20219: POP
20220: POP
// end ;
20221: LD_VAR 0 5
20225: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20226: LD_EXP 82
20230: NOT
20231: IFFALSE 20281
20233: GO 20235
20235: DISABLE
// begin initHack := true ;
20236: LD_ADDR_EXP 82
20240: PUSH
20241: LD_INT 1
20243: ST_TO_ADDR
// hackTanks := [ ] ;
20244: LD_ADDR_EXP 83
20248: PUSH
20249: EMPTY
20250: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20251: LD_ADDR_EXP 84
20255: PUSH
20256: EMPTY
20257: ST_TO_ADDR
// hackLimit := 3 ;
20258: LD_ADDR_EXP 85
20262: PUSH
20263: LD_INT 3
20265: ST_TO_ADDR
// hackDist := 12 ;
20266: LD_ADDR_EXP 86
20270: PUSH
20271: LD_INT 12
20273: ST_TO_ADDR
// hackCounter := [ ] ;
20274: LD_ADDR_EXP 87
20278: PUSH
20279: EMPTY
20280: ST_TO_ADDR
// end ;
20281: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20282: LD_EXP 82
20286: PUSH
20287: LD_INT 34
20289: PUSH
20290: LD_EXP 90
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: CALL_OW 69
20303: AND
20304: IFFALSE 20559
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
20312: PPUSH
// begin enable ;
20313: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20314: LD_ADDR_VAR 0 1
20318: PUSH
20319: LD_INT 34
20321: PUSH
20322: LD_EXP 90
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 69
20335: PUSH
20336: FOR_IN
20337: IFFALSE 20557
// begin if not i in hackTanks then
20339: LD_VAR 0 1
20343: PUSH
20344: LD_EXP 83
20348: IN
20349: NOT
20350: IFFALSE 20433
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20352: LD_ADDR_EXP 83
20356: PUSH
20357: LD_EXP 83
20361: PPUSH
20362: LD_EXP 83
20366: PUSH
20367: LD_INT 1
20369: PLUS
20370: PPUSH
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 1
20380: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20381: LD_ADDR_EXP 84
20385: PUSH
20386: LD_EXP 84
20390: PPUSH
20391: LD_EXP 84
20395: PUSH
20396: LD_INT 1
20398: PLUS
20399: PPUSH
20400: EMPTY
20401: PPUSH
20402: CALL_OW 1
20406: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20407: LD_ADDR_EXP 87
20411: PUSH
20412: LD_EXP 87
20416: PPUSH
20417: LD_EXP 87
20421: PUSH
20422: LD_INT 1
20424: PLUS
20425: PPUSH
20426: EMPTY
20427: PPUSH
20428: CALL_OW 1
20432: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20433: LD_VAR 0 1
20437: PPUSH
20438: CALL_OW 302
20442: NOT
20443: IFFALSE 20456
// begin HackUnlinkAll ( i ) ;
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL 20562 0 1
// continue ;
20454: GO 20336
// end ; HackCheckCapturedStatus ( i ) ;
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL 21005 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_INT 81
20472: PUSH
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 255
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 33
20489: PUSH
20490: LD_INT 3
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 91
20499: PUSH
20500: LD_VAR 0 1
20504: PUSH
20505: LD_EXP 86
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 50
20517: PUSH
20518: EMPTY
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: ST_TO_ADDR
// if not tmp then
20532: LD_VAR 0 2
20536: NOT
20537: IFFALSE 20541
// continue ;
20539: GO 20336
// HackLink ( i , tmp ) ;
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL 20698 0 2
// end ;
20555: GO 20336
20557: POP
20558: POP
// end ;
20559: PPOPN 2
20561: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20562: LD_INT 0
20564: PPUSH
20565: PPUSH
20566: PPUSH
// if not hack in hackTanks then
20567: LD_VAR 0 1
20571: PUSH
20572: LD_EXP 83
20576: IN
20577: NOT
20578: IFFALSE 20582
// exit ;
20580: GO 20693
// index := GetElementIndex ( hackTanks , hack ) ;
20582: LD_ADDR_VAR 0 4
20586: PUSH
20587: LD_EXP 83
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL 26249 0 2
20601: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20602: LD_EXP 84
20606: PUSH
20607: LD_VAR 0 4
20611: ARRAY
20612: IFFALSE 20693
// begin for i in hackTanksCaptured [ index ] do
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: LD_EXP 84
20623: PUSH
20624: LD_VAR 0 4
20628: ARRAY
20629: PUSH
20630: FOR_IN
20631: IFFALSE 20657
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20633: LD_VAR 0 3
20637: PUSH
20638: LD_INT 1
20640: ARRAY
20641: PPUSH
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 2
20649: ARRAY
20650: PPUSH
20651: CALL_OW 235
20655: GO 20630
20657: POP
20658: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20659: LD_ADDR_EXP 84
20663: PUSH
20664: LD_EXP 84
20668: PPUSH
20669: LD_VAR 0 4
20673: PPUSH
20674: EMPTY
20675: PPUSH
20676: CALL_OW 1
20680: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_INT 0
20688: PPUSH
20689: CALL_OW 505
// end ; end ;
20693: LD_VAR 0 2
20697: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20698: LD_INT 0
20700: PPUSH
20701: PPUSH
20702: PPUSH
// if not hack in hackTanks or not vehicles then
20703: LD_VAR 0 1
20707: PUSH
20708: LD_EXP 83
20712: IN
20713: NOT
20714: PUSH
20715: LD_VAR 0 2
20719: NOT
20720: OR
20721: IFFALSE 20725
// exit ;
20723: GO 21000
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_VAR 0 1
20734: PPUSH
20735: LD_VAR 0 2
20739: PPUSH
20740: LD_INT 1
20742: PPUSH
20743: LD_INT 1
20745: PPUSH
20746: CALL 26899 0 4
20750: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20751: LD_ADDR_VAR 0 5
20755: PUSH
20756: LD_EXP 83
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL 26249 0 2
20770: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20771: LD_EXP 84
20775: PUSH
20776: LD_VAR 0 5
20780: ARRAY
20781: PUSH
20782: LD_EXP 85
20786: LESS
20787: IFFALSE 20976
// begin for i := 1 to vehicles do
20789: LD_ADDR_VAR 0 4
20793: PUSH
20794: DOUBLE
20795: LD_INT 1
20797: DEC
20798: ST_TO_ADDR
20799: LD_VAR 0 2
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20974
// begin if hackTanksCaptured [ index ] = hackLimit then
20807: LD_EXP 84
20811: PUSH
20812: LD_VAR 0 5
20816: ARRAY
20817: PUSH
20818: LD_EXP 85
20822: EQUAL
20823: IFFALSE 20827
// break ;
20825: GO 20974
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20827: LD_ADDR_EXP 87
20831: PUSH
20832: LD_EXP 87
20836: PPUSH
20837: LD_VAR 0 5
20841: PPUSH
20842: LD_EXP 87
20846: PUSH
20847: LD_VAR 0 5
20851: ARRAY
20852: PUSH
20853: LD_INT 1
20855: PLUS
20856: PPUSH
20857: CALL_OW 1
20861: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20862: LD_ADDR_EXP 84
20866: PUSH
20867: LD_EXP 84
20871: PPUSH
20872: LD_VAR 0 5
20876: PUSH
20877: LD_EXP 84
20881: PUSH
20882: LD_VAR 0 5
20886: ARRAY
20887: PUSH
20888: LD_INT 1
20890: PLUS
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PPUSH
20896: LD_VAR 0 2
20900: PUSH
20901: LD_VAR 0 4
20905: ARRAY
20906: PUSH
20907: LD_VAR 0 2
20911: PUSH
20912: LD_VAR 0 4
20916: ARRAY
20917: PPUSH
20918: CALL_OW 255
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL 26464 0 3
20931: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20932: LD_VAR 0 2
20936: PUSH
20937: LD_VAR 0 4
20941: ARRAY
20942: PPUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 255
20952: PPUSH
20953: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20957: LD_VAR 0 2
20961: PUSH
20962: LD_VAR 0 4
20966: ARRAY
20967: PPUSH
20968: CALL_OW 141
// end ;
20972: GO 20804
20974: POP
20975: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20976: LD_VAR 0 1
20980: PPUSH
20981: LD_EXP 84
20985: PUSH
20986: LD_VAR 0 5
20990: ARRAY
20991: PUSH
20992: LD_INT 0
20994: PLUS
20995: PPUSH
20996: CALL_OW 505
// end ;
21000: LD_VAR 0 3
21004: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21005: LD_INT 0
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
// if not hack in hackTanks then
21011: LD_VAR 0 1
21015: PUSH
21016: LD_EXP 83
21020: IN
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21266
// index := GetElementIndex ( hackTanks , hack ) ;
21026: LD_ADDR_VAR 0 4
21030: PUSH
21031: LD_EXP 83
21035: PPUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL 26249 0 2
21045: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21046: LD_ADDR_VAR 0 3
21050: PUSH
21051: DOUBLE
21052: LD_EXP 84
21056: PUSH
21057: LD_VAR 0 4
21061: ARRAY
21062: INC
21063: ST_TO_ADDR
21064: LD_INT 1
21066: PUSH
21067: FOR_DOWNTO
21068: IFFALSE 21240
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21070: LD_ADDR_VAR 0 5
21074: PUSH
21075: LD_EXP 84
21079: PUSH
21080: LD_VAR 0 4
21084: ARRAY
21085: PUSH
21086: LD_VAR 0 3
21090: ARRAY
21091: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21092: LD_VAR 0 5
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: CALL_OW 302
21105: NOT
21106: PUSH
21107: LD_VAR 0 5
21111: PUSH
21112: LD_INT 1
21114: ARRAY
21115: PPUSH
21116: CALL_OW 255
21120: PUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 255
21130: NONEQUAL
21131: OR
21132: IFFALSE 21238
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21134: LD_VAR 0 5
21138: PUSH
21139: LD_INT 1
21141: ARRAY
21142: PPUSH
21143: CALL_OW 305
21147: PUSH
21148: LD_VAR 0 5
21152: PUSH
21153: LD_INT 1
21155: ARRAY
21156: PPUSH
21157: CALL_OW 255
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 255
21171: EQUAL
21172: AND
21173: IFFALSE 21197
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21175: LD_VAR 0 5
21179: PUSH
21180: LD_INT 1
21182: ARRAY
21183: PPUSH
21184: LD_VAR 0 5
21188: PUSH
21189: LD_INT 2
21191: ARRAY
21192: PPUSH
21193: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21197: LD_ADDR_EXP 84
21201: PUSH
21202: LD_EXP 84
21206: PPUSH
21207: LD_VAR 0 4
21211: PPUSH
21212: LD_EXP 84
21216: PUSH
21217: LD_VAR 0 4
21221: ARRAY
21222: PPUSH
21223: LD_VAR 0 3
21227: PPUSH
21228: CALL_OW 3
21232: PPUSH
21233: CALL_OW 1
21237: ST_TO_ADDR
// end ; end ;
21238: GO 21067
21240: POP
21241: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21242: LD_VAR 0 1
21246: PPUSH
21247: LD_EXP 84
21251: PUSH
21252: LD_VAR 0 4
21256: ARRAY
21257: PUSH
21258: LD_INT 0
21260: PLUS
21261: PPUSH
21262: CALL_OW 505
// end ;
21266: LD_VAR 0 2
21270: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21271: LD_INT 0
21273: PPUSH
21274: PPUSH
21275: PPUSH
21276: PPUSH
// if not hack in hackTanks then
21277: LD_VAR 0 1
21281: PUSH
21282: LD_EXP 83
21286: IN
21287: NOT
21288: IFFALSE 21292
// exit ;
21290: GO 21377
// index := GetElementIndex ( hackTanks , hack ) ;
21292: LD_ADDR_VAR 0 5
21296: PUSH
21297: LD_EXP 83
21301: PPUSH
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL 26249 0 2
21311: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21312: LD_ADDR_VAR 0 4
21316: PUSH
21317: DOUBLE
21318: LD_INT 1
21320: DEC
21321: ST_TO_ADDR
21322: LD_EXP 84
21326: PUSH
21327: LD_VAR 0 5
21331: ARRAY
21332: PUSH
21333: FOR_TO
21334: IFFALSE 21375
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21336: LD_EXP 84
21340: PUSH
21341: LD_VAR 0 5
21345: ARRAY
21346: PUSH
21347: LD_VAR 0 4
21351: ARRAY
21352: PUSH
21353: LD_INT 1
21355: ARRAY
21356: PUSH
21357: LD_VAR 0 2
21361: EQUAL
21362: IFFALSE 21373
// KillUnit ( vehicle ) ;
21364: LD_VAR 0 2
21368: PPUSH
21369: CALL_OW 66
21373: GO 21333
21375: POP
21376: POP
// end ; end_of_file
21377: LD_VAR 0 3
21381: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
21382: LD_INT 0
21384: PPUSH
// ar_crane := 88 ;
21385: LD_ADDR_EXP 94
21389: PUSH
21390: LD_INT 88
21392: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21393: LD_ADDR_EXP 89
21397: PUSH
21398: LD_INT 89
21400: ST_TO_ADDR
// us_hack := 99 ;
21401: LD_ADDR_EXP 90
21405: PUSH
21406: LD_INT 99
21408: ST_TO_ADDR
// us_artillery := 97 ;
21409: LD_ADDR_EXP 91
21413: PUSH
21414: LD_INT 97
21416: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21417: LD_ADDR_EXP 92
21421: PUSH
21422: LD_INT 91
21424: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21425: LD_ADDR_EXP 93
21429: PUSH
21430: LD_INT 92
21432: ST_TO_ADDR
// ru_radar := 98 ;
21433: LD_ADDR_EXP 88
21437: PUSH
21438: LD_INT 98
21440: ST_TO_ADDR
// tech_Artillery := 80 ;
21441: LD_ADDR_EXP 95
21445: PUSH
21446: LD_INT 80
21448: ST_TO_ADDR
// tech_RadMat := 81 ;
21449: LD_ADDR_EXP 96
21453: PUSH
21454: LD_INT 81
21456: ST_TO_ADDR
// tech_BasicTools := 82 ;
21457: LD_ADDR_EXP 97
21461: PUSH
21462: LD_INT 82
21464: ST_TO_ADDR
// tech_Cargo := 83 ;
21465: LD_ADDR_EXP 98
21469: PUSH
21470: LD_INT 83
21472: ST_TO_ADDR
// tech_Track := 84 ;
21473: LD_ADDR_EXP 99
21477: PUSH
21478: LD_INT 84
21480: ST_TO_ADDR
// tech_Crane := 85 ;
21481: LD_ADDR_EXP 100
21485: PUSH
21486: LD_INT 85
21488: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21489: LD_ADDR_EXP 101
21493: PUSH
21494: LD_INT 86
21496: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21497: LD_ADDR_EXP 102
21501: PUSH
21502: LD_INT 87
21504: ST_TO_ADDR
// end ;
21505: LD_VAR 0 1
21509: RET
// every 1 do
21510: GO 21512
21512: DISABLE
// InitGlobalVariables ; end_of_file
21513: CALL 21382 0 0
21517: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21518: LD_INT 0
21520: PPUSH
21521: PPUSH
// if exist_mode then
21522: LD_VAR 0 2
21526: IFFALSE 21551
// unit := CreateCharacter ( prefix & ident ) else
21528: LD_ADDR_VAR 0 5
21532: PUSH
21533: LD_VAR 0 3
21537: PUSH
21538: LD_VAR 0 1
21542: STR
21543: PPUSH
21544: CALL_OW 34
21548: ST_TO_ADDR
21549: GO 21566
// unit := NewCharacter ( ident ) ;
21551: LD_ADDR_VAR 0 5
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 25
21565: ST_TO_ADDR
// result := unit ;
21566: LD_ADDR_VAR 0 4
21570: PUSH
21571: LD_VAR 0 5
21575: ST_TO_ADDR
// end ;
21576: LD_VAR 0 4
21580: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
// if not side or not nation then
21585: LD_VAR 0 1
21589: NOT
21590: PUSH
21591: LD_VAR 0 2
21595: NOT
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 22365
// case nation of nation_american :
21601: LD_VAR 0 2
21605: PUSH
21606: LD_INT 1
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21828
21614: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21615: LD_ADDR_VAR 0 4
21619: PUSH
21620: LD_INT 35
21622: PUSH
21623: LD_INT 45
21625: PUSH
21626: LD_INT 46
21628: PUSH
21629: LD_INT 47
21631: PUSH
21632: LD_INT 82
21634: PUSH
21635: LD_INT 83
21637: PUSH
21638: LD_INT 84
21640: PUSH
21641: LD_INT 85
21643: PUSH
21644: LD_INT 86
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 6
21655: PUSH
21656: LD_INT 15
21658: PUSH
21659: LD_INT 16
21661: PUSH
21662: LD_INT 7
21664: PUSH
21665: LD_INT 12
21667: PUSH
21668: LD_INT 13
21670: PUSH
21671: LD_INT 10
21673: PUSH
21674: LD_INT 14
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 25
21688: PUSH
21689: LD_INT 32
21691: PUSH
21692: LD_INT 27
21694: PUSH
21695: LD_INT 36
21697: PUSH
21698: LD_INT 69
21700: PUSH
21701: LD_INT 39
21703: PUSH
21704: LD_INT 34
21706: PUSH
21707: LD_INT 40
21709: PUSH
21710: LD_INT 48
21712: PUSH
21713: LD_INT 49
21715: PUSH
21716: LD_INT 50
21718: PUSH
21719: LD_INT 51
21721: PUSH
21722: LD_INT 52
21724: PUSH
21725: LD_INT 53
21727: PUSH
21728: LD_INT 54
21730: PUSH
21731: LD_INT 55
21733: PUSH
21734: LD_INT 56
21736: PUSH
21737: LD_INT 57
21739: PUSH
21740: LD_INT 58
21742: PUSH
21743: LD_INT 59
21745: PUSH
21746: LD_INT 60
21748: PUSH
21749: LD_INT 61
21751: PUSH
21752: LD_INT 62
21754: PUSH
21755: LD_INT 80
21757: PUSH
21758: LD_INT 82
21760: PUSH
21761: LD_INT 83
21763: PUSH
21764: LD_INT 84
21766: PUSH
21767: LD_INT 85
21769: PUSH
21770: LD_INT 86
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: ST_TO_ADDR
21826: GO 22289
21828: LD_INT 2
21830: DOUBLE
21831: EQUAL
21832: IFTRUE 21836
21834: GO 22058
21836: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: LD_INT 35
21844: PUSH
21845: LD_INT 45
21847: PUSH
21848: LD_INT 46
21850: PUSH
21851: LD_INT 47
21853: PUSH
21854: LD_INT 82
21856: PUSH
21857: LD_INT 83
21859: PUSH
21860: LD_INT 84
21862: PUSH
21863: LD_INT 85
21865: PUSH
21866: LD_INT 87
21868: PUSH
21869: LD_INT 70
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: LD_INT 11
21877: PUSH
21878: LD_INT 3
21880: PUSH
21881: LD_INT 4
21883: PUSH
21884: LD_INT 5
21886: PUSH
21887: LD_INT 6
21889: PUSH
21890: LD_INT 15
21892: PUSH
21893: LD_INT 18
21895: PUSH
21896: LD_INT 7
21898: PUSH
21899: LD_INT 17
21901: PUSH
21902: LD_INT 8
21904: PUSH
21905: LD_INT 20
21907: PUSH
21908: LD_INT 21
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_INT 72
21916: PUSH
21917: LD_INT 26
21919: PUSH
21920: LD_INT 69
21922: PUSH
21923: LD_INT 39
21925: PUSH
21926: LD_INT 40
21928: PUSH
21929: LD_INT 41
21931: PUSH
21932: LD_INT 42
21934: PUSH
21935: LD_INT 43
21937: PUSH
21938: LD_INT 48
21940: PUSH
21941: LD_INT 49
21943: PUSH
21944: LD_INT 50
21946: PUSH
21947: LD_INT 51
21949: PUSH
21950: LD_INT 52
21952: PUSH
21953: LD_INT 53
21955: PUSH
21956: LD_INT 54
21958: PUSH
21959: LD_INT 55
21961: PUSH
21962: LD_INT 56
21964: PUSH
21965: LD_INT 60
21967: PUSH
21968: LD_INT 61
21970: PUSH
21971: LD_INT 62
21973: PUSH
21974: LD_INT 66
21976: PUSH
21977: LD_INT 67
21979: PUSH
21980: LD_INT 68
21982: PUSH
21983: LD_INT 81
21985: PUSH
21986: LD_INT 82
21988: PUSH
21989: LD_INT 83
21991: PUSH
21992: LD_INT 84
21994: PUSH
21995: LD_INT 85
21997: PUSH
21998: LD_INT 87
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: ST_TO_ADDR
22056: GO 22289
22058: LD_INT 3
22060: DOUBLE
22061: EQUAL
22062: IFTRUE 22066
22064: GO 22288
22066: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22067: LD_ADDR_VAR 0 4
22071: PUSH
22072: LD_INT 46
22074: PUSH
22075: LD_INT 47
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 82
22086: PUSH
22087: LD_INT 83
22089: PUSH
22090: LD_INT 84
22092: PUSH
22093: LD_INT 85
22095: PUSH
22096: LD_INT 86
22098: PUSH
22099: LD_INT 11
22101: PUSH
22102: LD_INT 9
22104: PUSH
22105: LD_INT 20
22107: PUSH
22108: LD_INT 19
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 24
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 28
22125: PUSH
22126: LD_INT 29
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 31
22134: PUSH
22135: LD_INT 37
22137: PUSH
22138: LD_INT 38
22140: PUSH
22141: LD_INT 32
22143: PUSH
22144: LD_INT 27
22146: PUSH
22147: LD_INT 33
22149: PUSH
22150: LD_INT 69
22152: PUSH
22153: LD_INT 39
22155: PUSH
22156: LD_INT 34
22158: PUSH
22159: LD_INT 40
22161: PUSH
22162: LD_INT 71
22164: PUSH
22165: LD_INT 23
22167: PUSH
22168: LD_INT 44
22170: PUSH
22171: LD_INT 48
22173: PUSH
22174: LD_INT 49
22176: PUSH
22177: LD_INT 50
22179: PUSH
22180: LD_INT 51
22182: PUSH
22183: LD_INT 52
22185: PUSH
22186: LD_INT 53
22188: PUSH
22189: LD_INT 54
22191: PUSH
22192: LD_INT 55
22194: PUSH
22195: LD_INT 56
22197: PUSH
22198: LD_INT 57
22200: PUSH
22201: LD_INT 58
22203: PUSH
22204: LD_INT 59
22206: PUSH
22207: LD_INT 63
22209: PUSH
22210: LD_INT 64
22212: PUSH
22213: LD_INT 65
22215: PUSH
22216: LD_INT 82
22218: PUSH
22219: LD_INT 83
22221: PUSH
22222: LD_INT 84
22224: PUSH
22225: LD_INT 85
22227: PUSH
22228: LD_INT 86
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: ST_TO_ADDR
22286: GO 22289
22288: POP
// if state > - 1 and state < 3 then
22289: LD_VAR 0 3
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: GREATER
22298: PUSH
22299: LD_VAR 0 3
22303: PUSH
22304: LD_INT 3
22306: LESS
22307: AND
22308: IFFALSE 22365
// for i in result do
22310: LD_ADDR_VAR 0 5
22314: PUSH
22315: LD_VAR 0 4
22319: PUSH
22320: FOR_IN
22321: IFFALSE 22363
// if GetTech ( i , side ) <> state then
22323: LD_VAR 0 5
22327: PPUSH
22328: LD_VAR 0 1
22332: PPUSH
22333: CALL_OW 321
22337: PUSH
22338: LD_VAR 0 3
22342: NONEQUAL
22343: IFFALSE 22361
// result := result diff i ;
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: LD_VAR 0 4
22354: PUSH
22355: LD_VAR 0 5
22359: DIFF
22360: ST_TO_ADDR
22361: GO 22320
22363: POP
22364: POP
// end ;
22365: LD_VAR 0 4
22369: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
22374: PPUSH
// result := true ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_INT 1
22382: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22383: LD_ADDR_VAR 0 5
22387: PUSH
22388: LD_VAR 0 2
22392: PPUSH
22393: CALL_OW 480
22397: ST_TO_ADDR
// if not tmp then
22398: LD_VAR 0 5
22402: NOT
22403: IFFALSE 22407
// exit ;
22405: GO 22456
// for i in tmp do
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_VAR 0 5
22416: PUSH
22417: FOR_IN
22418: IFFALSE 22454
// if GetTech ( i , side ) <> state_researched then
22420: LD_VAR 0 4
22424: PPUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 321
22434: PUSH
22435: LD_INT 2
22437: NONEQUAL
22438: IFFALSE 22452
// begin result := false ;
22440: LD_ADDR_VAR 0 3
22444: PUSH
22445: LD_INT 0
22447: ST_TO_ADDR
// exit ;
22448: POP
22449: POP
22450: GO 22456
// end ;
22452: GO 22417
22454: POP
22455: POP
// end ;
22456: LD_VAR 0 3
22460: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22461: LD_INT 0
22463: PPUSH
22464: PPUSH
22465: PPUSH
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22476: LD_VAR 0 1
22480: NOT
22481: PUSH
22482: LD_VAR 0 1
22486: PPUSH
22487: CALL_OW 257
22491: PUSH
22492: LD_INT 9
22494: NONEQUAL
22495: OR
22496: IFFALSE 22500
// exit ;
22498: GO 23073
// side := GetSide ( unit ) ;
22500: LD_ADDR_VAR 0 9
22504: PUSH
22505: LD_VAR 0 1
22509: PPUSH
22510: CALL_OW 255
22514: ST_TO_ADDR
// tech_space := tech_spacanom ;
22515: LD_ADDR_VAR 0 12
22519: PUSH
22520: LD_INT 29
22522: ST_TO_ADDR
// tech_time := tech_taurad ;
22523: LD_ADDR_VAR 0 13
22527: PUSH
22528: LD_INT 28
22530: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22531: LD_ADDR_VAR 0 11
22535: PUSH
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 310
22545: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22546: LD_VAR 0 11
22550: PPUSH
22551: CALL_OW 247
22555: PUSH
22556: LD_INT 2
22558: EQUAL
22559: IFFALSE 22563
// exit ;
22561: GO 23073
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22563: LD_ADDR_VAR 0 8
22567: PUSH
22568: LD_INT 81
22570: PUSH
22571: LD_VAR 0 9
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 3
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 3
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 69
22605: ST_TO_ADDR
// if not tmp then
22606: LD_VAR 0 8
22610: NOT
22611: IFFALSE 22615
// exit ;
22613: GO 23073
// if in_unit then
22615: LD_VAR 0 11
22619: IFFALSE 22643
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22621: LD_ADDR_VAR 0 10
22625: PUSH
22626: LD_VAR 0 8
22630: PPUSH
22631: LD_VAR 0 11
22635: PPUSH
22636: CALL_OW 74
22640: ST_TO_ADDR
22641: GO 22663
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22643: LD_ADDR_VAR 0 10
22647: PUSH
22648: LD_VAR 0 8
22652: PPUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 74
22662: ST_TO_ADDR
// if not enemy then
22663: LD_VAR 0 10
22667: NOT
22668: IFFALSE 22672
// exit ;
22670: GO 23073
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22672: LD_VAR 0 11
22676: PUSH
22677: LD_VAR 0 11
22681: PPUSH
22682: LD_VAR 0 10
22686: PPUSH
22687: CALL_OW 296
22691: PUSH
22692: LD_INT 13
22694: GREATER
22695: AND
22696: PUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: LD_VAR 0 10
22706: PPUSH
22707: CALL_OW 296
22711: PUSH
22712: LD_INT 12
22714: GREATER
22715: OR
22716: IFFALSE 22720
// exit ;
22718: GO 23073
// missile := [ 1 ] ;
22720: LD_ADDR_VAR 0 14
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22731: LD_VAR 0 9
22735: PPUSH
22736: LD_VAR 0 12
22740: PPUSH
22741: CALL_OW 325
22745: IFFALSE 22774
// missile := Insert ( missile , missile + 1 , 2 ) ;
22747: LD_ADDR_VAR 0 14
22751: PUSH
22752: LD_VAR 0 14
22756: PPUSH
22757: LD_VAR 0 14
22761: PUSH
22762: LD_INT 1
22764: PLUS
22765: PPUSH
22766: LD_INT 2
22768: PPUSH
22769: CALL_OW 2
22773: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22774: LD_VAR 0 9
22778: PPUSH
22779: LD_VAR 0 13
22783: PPUSH
22784: CALL_OW 325
22788: PUSH
22789: LD_VAR 0 10
22793: PPUSH
22794: CALL_OW 255
22798: PPUSH
22799: LD_VAR 0 13
22803: PPUSH
22804: CALL_OW 325
22808: NOT
22809: AND
22810: IFFALSE 22839
// missile := Insert ( missile , missile + 1 , 3 ) ;
22812: LD_ADDR_VAR 0 14
22816: PUSH
22817: LD_VAR 0 14
22821: PPUSH
22822: LD_VAR 0 14
22826: PUSH
22827: LD_INT 1
22829: PLUS
22830: PPUSH
22831: LD_INT 3
22833: PPUSH
22834: CALL_OW 2
22838: ST_TO_ADDR
// if missile < 2 then
22839: LD_VAR 0 14
22843: PUSH
22844: LD_INT 2
22846: LESS
22847: IFFALSE 22851
// exit ;
22849: GO 23073
// x := GetX ( enemy ) ;
22851: LD_ADDR_VAR 0 4
22855: PUSH
22856: LD_VAR 0 10
22860: PPUSH
22861: CALL_OW 250
22865: ST_TO_ADDR
// y := GetY ( enemy ) ;
22866: LD_ADDR_VAR 0 5
22870: PUSH
22871: LD_VAR 0 10
22875: PPUSH
22876: CALL_OW 251
22880: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22881: LD_ADDR_VAR 0 6
22885: PUSH
22886: LD_VAR 0 4
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PPUSH
22895: LD_INT 1
22897: PPUSH
22898: CALL_OW 12
22902: PLUS
22903: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22904: LD_ADDR_VAR 0 7
22908: PUSH
22909: LD_VAR 0 5
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 12
22925: PLUS
22926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22927: LD_VAR 0 6
22931: PPUSH
22932: LD_VAR 0 7
22936: PPUSH
22937: CALL_OW 488
22941: NOT
22942: IFFALSE 22964
// begin _x := x ;
22944: LD_ADDR_VAR 0 6
22948: PUSH
22949: LD_VAR 0 4
22953: ST_TO_ADDR
// _y := y ;
22954: LD_ADDR_VAR 0 7
22958: PUSH
22959: LD_VAR 0 5
22963: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22964: LD_ADDR_VAR 0 3
22968: PUSH
22969: LD_INT 1
22971: PPUSH
22972: LD_VAR 0 14
22976: PPUSH
22977: CALL_OW 12
22981: ST_TO_ADDR
// case i of 1 :
22982: LD_VAR 0 3
22986: PUSH
22987: LD_INT 1
22989: DOUBLE
22990: EQUAL
22991: IFTRUE 22995
22993: GO 23012
22995: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22996: LD_VAR 0 1
23000: PPUSH
23001: LD_VAR 0 10
23005: PPUSH
23006: CALL_OW 115
23010: GO 23073
23012: LD_INT 2
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23042
23020: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_VAR 0 6
23030: PPUSH
23031: LD_VAR 0 7
23035: PPUSH
23036: CALL_OW 153
23040: GO 23073
23042: LD_INT 3
23044: DOUBLE
23045: EQUAL
23046: IFTRUE 23050
23048: GO 23072
23050: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23051: LD_VAR 0 1
23055: PPUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: LD_VAR 0 7
23065: PPUSH
23066: CALL_OW 154
23070: GO 23073
23072: POP
// end ;
23073: LD_VAR 0 2
23077: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23078: LD_INT 0
23080: PPUSH
23081: PPUSH
23082: PPUSH
23083: PPUSH
23084: PPUSH
23085: PPUSH
// if not unit or not building then
23086: LD_VAR 0 1
23090: NOT
23091: PUSH
23092: LD_VAR 0 2
23096: NOT
23097: OR
23098: IFFALSE 23102
// exit ;
23100: GO 23260
// x := GetX ( building ) ;
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 250
23116: ST_TO_ADDR
// y := GetY ( building ) ;
23117: LD_ADDR_VAR 0 6
23121: PUSH
23122: LD_VAR 0 2
23126: PPUSH
23127: CALL_OW 251
23131: ST_TO_ADDR
// for i = 0 to 5 do
23132: LD_ADDR_VAR 0 4
23136: PUSH
23137: DOUBLE
23138: LD_INT 0
23140: DEC
23141: ST_TO_ADDR
23142: LD_INT 5
23144: PUSH
23145: FOR_TO
23146: IFFALSE 23258
// begin _x := ShiftX ( x , i , 3 ) ;
23148: LD_ADDR_VAR 0 7
23152: PUSH
23153: LD_VAR 0 5
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: LD_INT 3
23165: PPUSH
23166: CALL_OW 272
23170: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23171: LD_ADDR_VAR 0 8
23175: PUSH
23176: LD_VAR 0 6
23180: PPUSH
23181: LD_VAR 0 4
23185: PPUSH
23186: LD_INT 3
23188: PPUSH
23189: CALL_OW 273
23193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23194: LD_VAR 0 7
23198: PPUSH
23199: LD_VAR 0 8
23203: PPUSH
23204: CALL_OW 488
23208: NOT
23209: IFFALSE 23213
// continue ;
23211: GO 23145
// if HexInfo ( _x , _y ) = 0 then
23213: LD_VAR 0 7
23217: PPUSH
23218: LD_VAR 0 8
23222: PPUSH
23223: CALL_OW 428
23227: PUSH
23228: LD_INT 0
23230: EQUAL
23231: IFFALSE 23256
// begin ComMoveXY ( unit , _x , _y ) ;
23233: LD_VAR 0 1
23237: PPUSH
23238: LD_VAR 0 7
23242: PPUSH
23243: LD_VAR 0 8
23247: PPUSH
23248: CALL_OW 111
// exit ;
23252: POP
23253: POP
23254: GO 23260
// end ; end ;
23256: GO 23145
23258: POP
23259: POP
// end ;
23260: LD_VAR 0 3
23264: RET
// export function ScanBase ( side , base_area ) ; begin
23265: LD_INT 0
23267: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: LD_INT 81
23280: PUSH
23281: LD_VAR 0 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PPUSH
23290: CALL_OW 70
23294: ST_TO_ADDR
// end ;
23295: LD_VAR 0 3
23299: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23300: LD_INT 0
23302: PPUSH
23303: PPUSH
23304: PPUSH
23305: PPUSH
// result := false ;
23306: LD_ADDR_VAR 0 2
23310: PUSH
23311: LD_INT 0
23313: ST_TO_ADDR
// side := GetSide ( unit ) ;
23314: LD_ADDR_VAR 0 3
23318: PUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 255
23328: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23329: LD_ADDR_VAR 0 4
23333: PUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 248
23343: ST_TO_ADDR
// case nat of 1 :
23344: LD_VAR 0 4
23348: PUSH
23349: LD_INT 1
23351: DOUBLE
23352: EQUAL
23353: IFTRUE 23357
23355: GO 23368
23357: POP
// tech := tech_lassight ; 2 :
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_INT 12
23365: ST_TO_ADDR
23366: GO 23407
23368: LD_INT 2
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23387
23376: POP
// tech := tech_mortar ; 3 :
23377: LD_ADDR_VAR 0 5
23381: PUSH
23382: LD_INT 41
23384: ST_TO_ADDR
23385: GO 23407
23387: LD_INT 3
23389: DOUBLE
23390: EQUAL
23391: IFTRUE 23395
23393: GO 23406
23395: POP
// tech := tech_bazooka ; end ;
23396: LD_ADDR_VAR 0 5
23400: PUSH
23401: LD_INT 44
23403: ST_TO_ADDR
23404: GO 23407
23406: POP
// if Researched ( side , tech ) then
23407: LD_VAR 0 3
23411: PPUSH
23412: LD_VAR 0 5
23416: PPUSH
23417: CALL_OW 325
23421: IFFALSE 23448
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23423: LD_ADDR_VAR 0 2
23427: PUSH
23428: LD_INT 5
23430: PUSH
23431: LD_INT 8
23433: PUSH
23434: LD_INT 9
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: LD_VAR 0 4
23446: ARRAY
23447: ST_TO_ADDR
// end ;
23448: LD_VAR 0 2
23452: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23453: LD_INT 0
23455: PPUSH
23456: PPUSH
23457: PPUSH
// if not mines then
23458: LD_VAR 0 2
23462: NOT
23463: IFFALSE 23467
// exit ;
23465: GO 23611
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23467: LD_ADDR_VAR 0 5
23471: PUSH
23472: LD_INT 81
23474: PUSH
23475: LD_VAR 0 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 3
23486: PUSH
23487: LD_INT 21
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 69
23509: ST_TO_ADDR
// for i in mines do
23510: LD_ADDR_VAR 0 4
23514: PUSH
23515: LD_VAR 0 2
23519: PUSH
23520: FOR_IN
23521: IFFALSE 23609
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23523: LD_VAR 0 4
23527: PUSH
23528: LD_INT 1
23530: ARRAY
23531: PPUSH
23532: LD_VAR 0 4
23536: PUSH
23537: LD_INT 2
23539: ARRAY
23540: PPUSH
23541: CALL_OW 458
23545: NOT
23546: IFFALSE 23550
// continue ;
23548: GO 23520
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23550: LD_VAR 0 4
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: PPUSH
23559: LD_VAR 0 4
23563: PUSH
23564: LD_INT 2
23566: ARRAY
23567: PPUSH
23568: CALL_OW 428
23572: PUSH
23573: LD_VAR 0 5
23577: IN
23578: IFFALSE 23607
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23580: LD_VAR 0 4
23584: PUSH
23585: LD_INT 1
23587: ARRAY
23588: PPUSH
23589: LD_VAR 0 4
23593: PUSH
23594: LD_INT 2
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 1
23602: PPUSH
23603: CALL_OW 456
// end ;
23607: GO 23520
23609: POP
23610: POP
// end ;
23611: LD_VAR 0 3
23615: RET
// export function Count ( array ) ; var i ; begin
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
// result := 0 ;
23620: LD_ADDR_VAR 0 2
23624: PUSH
23625: LD_INT 0
23627: ST_TO_ADDR
// for i in array do
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: LD_VAR 0 1
23637: PUSH
23638: FOR_IN
23639: IFFALSE 23663
// if i then
23641: LD_VAR 0 3
23645: IFFALSE 23661
// result := result + 1 ;
23647: LD_ADDR_VAR 0 2
23651: PUSH
23652: LD_VAR 0 2
23656: PUSH
23657: LD_INT 1
23659: PLUS
23660: ST_TO_ADDR
23661: GO 23638
23663: POP
23664: POP
// end ;
23665: LD_VAR 0 2
23669: RET
// export function IsEmpty ( building ) ; begin
23670: LD_INT 0
23672: PPUSH
// if not building then
23673: LD_VAR 0 1
23677: NOT
23678: IFFALSE 23682
// exit ;
23680: GO 23725
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_VAR 0 1
23691: PUSH
23692: LD_INT 22
23694: PUSH
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 255
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 58
23711: PUSH
23712: EMPTY
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 69
23723: IN
23724: ST_TO_ADDR
// end ;
23725: LD_VAR 0 2
23729: RET
// export function IsNotFull ( building ) ; begin
23730: LD_INT 0
23732: PPUSH
// if not building then
23733: LD_VAR 0 1
23737: NOT
23738: IFFALSE 23742
// exit ;
23740: GO 23761
// result := UnitsInside ( building ) < 6 ;
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL_OW 313
23756: PUSH
23757: LD_INT 6
23759: LESS
23760: ST_TO_ADDR
// end ;
23761: LD_VAR 0 2
23765: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23766: LD_INT 0
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
// tmp := [ ] ;
23772: LD_ADDR_VAR 0 3
23776: PUSH
23777: EMPTY
23778: ST_TO_ADDR
// list := [ ] ;
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: EMPTY
23785: ST_TO_ADDR
// for i = 16 to 25 do
23786: LD_ADDR_VAR 0 4
23790: PUSH
23791: DOUBLE
23792: LD_INT 16
23794: DEC
23795: ST_TO_ADDR
23796: LD_INT 25
23798: PUSH
23799: FOR_TO
23800: IFFALSE 23873
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23802: LD_ADDR_VAR 0 3
23806: PUSH
23807: LD_VAR 0 3
23811: PUSH
23812: LD_INT 22
23814: PUSH
23815: LD_VAR 0 1
23819: PPUSH
23820: CALL_OW 255
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 91
23831: PUSH
23832: LD_VAR 0 1
23836: PUSH
23837: LD_INT 6
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_VAR 0 4
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: ADD
23870: ST_TO_ADDR
23871: GO 23799
23873: POP
23874: POP
// for i = 1 to tmp do
23875: LD_ADDR_VAR 0 4
23879: PUSH
23880: DOUBLE
23881: LD_INT 1
23883: DEC
23884: ST_TO_ADDR
23885: LD_VAR 0 3
23889: PUSH
23890: FOR_TO
23891: IFFALSE 23979
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23893: LD_ADDR_VAR 0 5
23897: PUSH
23898: LD_VAR 0 5
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_VAR 0 4
23912: ARRAY
23913: PPUSH
23914: CALL_OW 266
23918: PUSH
23919: LD_VAR 0 3
23923: PUSH
23924: LD_VAR 0 4
23928: ARRAY
23929: PPUSH
23930: CALL_OW 250
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_VAR 0 4
23944: ARRAY
23945: PPUSH
23946: CALL_OW 251
23950: PUSH
23951: LD_VAR 0 3
23955: PUSH
23956: LD_VAR 0 4
23960: ARRAY
23961: PPUSH
23962: CALL_OW 254
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: ADD
23976: ST_TO_ADDR
23977: GO 23890
23979: POP
23980: POP
// result := list ;
23981: LD_ADDR_VAR 0 2
23985: PUSH
23986: LD_VAR 0 5
23990: ST_TO_ADDR
// end ;
23991: LD_VAR 0 2
23995: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23996: LD_INT 0
23998: PPUSH
23999: PPUSH
24000: PPUSH
24001: PPUSH
24002: PPUSH
24003: PPUSH
24004: PPUSH
// if not factory then
24005: LD_VAR 0 1
24009: NOT
24010: IFFALSE 24014
// exit ;
24012: GO 24607
// if control = control_apeman then
24014: LD_VAR 0 4
24018: PUSH
24019: LD_INT 5
24021: EQUAL
24022: IFFALSE 24131
// begin tmp := UnitsInside ( factory ) ;
24024: LD_ADDR_VAR 0 8
24028: PUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 313
24038: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24039: LD_VAR 0 8
24043: PPUSH
24044: LD_INT 25
24046: PUSH
24047: LD_INT 12
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 72
24058: NOT
24059: IFFALSE 24069
// control := control_manual ;
24061: LD_ADDR_VAR 0 4
24065: PUSH
24066: LD_INT 1
24068: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24069: LD_ADDR_VAR 0 8
24073: PUSH
24074: LD_VAR 0 1
24078: PPUSH
24079: CALL 23766 0 1
24083: ST_TO_ADDR
// if tmp then
24084: LD_VAR 0 8
24088: IFFALSE 24131
// begin for i in tmp do
24090: LD_ADDR_VAR 0 7
24094: PUSH
24095: LD_VAR 0 8
24099: PUSH
24100: FOR_IN
24101: IFFALSE 24129
// if i [ 1 ] = b_ext_radio then
24103: LD_VAR 0 7
24107: PUSH
24108: LD_INT 1
24110: ARRAY
24111: PUSH
24112: LD_INT 22
24114: EQUAL
24115: IFFALSE 24127
// begin control := control_remote ;
24117: LD_ADDR_VAR 0 4
24121: PUSH
24122: LD_INT 2
24124: ST_TO_ADDR
// break ;
24125: GO 24129
// end ;
24127: GO 24100
24129: POP
24130: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_VAR 0 2
24140: PPUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: LD_VAR 0 4
24150: PPUSH
24151: LD_VAR 0 5
24155: PPUSH
24156: CALL_OW 448
24160: IFFALSE 24195
// begin result := [ chassis , engine , control , weapon ] ;
24162: LD_ADDR_VAR 0 6
24166: PUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_VAR 0 3
24176: PUSH
24177: LD_VAR 0 4
24181: PUSH
24182: LD_VAR 0 5
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: ST_TO_ADDR
// exit ;
24193: GO 24607
// end ; _chassis := AvailableChassisList ( factory ) ;
24195: LD_ADDR_VAR 0 9
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 475
24209: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24210: LD_ADDR_VAR 0 11
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 476
24224: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24225: LD_ADDR_VAR 0 12
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 477
24239: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24240: LD_ADDR_VAR 0 10
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 478
24254: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24255: LD_VAR 0 9
24259: NOT
24260: PUSH
24261: LD_VAR 0 11
24265: NOT
24266: OR
24267: PUSH
24268: LD_VAR 0 12
24272: NOT
24273: OR
24274: PUSH
24275: LD_VAR 0 10
24279: NOT
24280: OR
24281: IFFALSE 24316
// begin result := [ chassis , engine , control , weapon ] ;
24283: LD_ADDR_VAR 0 6
24287: PUSH
24288: LD_VAR 0 2
24292: PUSH
24293: LD_VAR 0 3
24297: PUSH
24298: LD_VAR 0 4
24302: PUSH
24303: LD_VAR 0 5
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: ST_TO_ADDR
// exit ;
24314: GO 24607
// end ; if not chassis in _chassis then
24316: LD_VAR 0 2
24320: PUSH
24321: LD_VAR 0 9
24325: IN
24326: NOT
24327: IFFALSE 24353
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24329: LD_ADDR_VAR 0 2
24333: PUSH
24334: LD_VAR 0 9
24338: PUSH
24339: LD_INT 1
24341: PPUSH
24342: LD_VAR 0 9
24346: PPUSH
24347: CALL_OW 12
24351: ARRAY
24352: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_VAR 0 3
24362: PPUSH
24363: CALL 24612 0 2
24367: NOT
24368: IFFALSE 24427
// repeat engine := _engine [ 1 ] ;
24370: LD_ADDR_VAR 0 3
24374: PUSH
24375: LD_VAR 0 11
24379: PUSH
24380: LD_INT 1
24382: ARRAY
24383: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24384: LD_ADDR_VAR 0 11
24388: PUSH
24389: LD_VAR 0 11
24393: PPUSH
24394: LD_INT 1
24396: PPUSH
24397: CALL_OW 3
24401: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL 24612 0 2
24416: PUSH
24417: LD_VAR 0 11
24421: PUSH
24422: EMPTY
24423: EQUAL
24424: OR
24425: IFFALSE 24370
// if not control in _control then
24427: LD_VAR 0 4
24431: PUSH
24432: LD_VAR 0 12
24436: IN
24437: NOT
24438: IFFALSE 24464
// control := _control [ rand ( 1 , _control ) ] ;
24440: LD_ADDR_VAR 0 4
24444: PUSH
24445: LD_VAR 0 12
24449: PUSH
24450: LD_INT 1
24452: PPUSH
24453: LD_VAR 0 12
24457: PPUSH
24458: CALL_OW 12
24462: ARRAY
24463: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24464: LD_VAR 0 2
24468: PPUSH
24469: LD_VAR 0 5
24473: PPUSH
24474: CALL 24832 0 2
24478: NOT
24479: IFFALSE 24538
// repeat weapon := _weapon [ 1 ] ;
24481: LD_ADDR_VAR 0 5
24485: PUSH
24486: LD_VAR 0 10
24490: PUSH
24491: LD_INT 1
24493: ARRAY
24494: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24495: LD_ADDR_VAR 0 10
24499: PUSH
24500: LD_VAR 0 10
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: CALL_OW 3
24512: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24513: LD_VAR 0 2
24517: PPUSH
24518: LD_VAR 0 5
24522: PPUSH
24523: CALL 24832 0 2
24527: PUSH
24528: LD_VAR 0 10
24532: PUSH
24533: EMPTY
24534: EQUAL
24535: OR
24536: IFFALSE 24481
// result := [ ] ;
24538: LD_ADDR_VAR 0 6
24542: PUSH
24543: EMPTY
24544: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24545: LD_VAR 0 1
24549: PPUSH
24550: LD_VAR 0 2
24554: PPUSH
24555: LD_VAR 0 3
24559: PPUSH
24560: LD_VAR 0 4
24564: PPUSH
24565: LD_VAR 0 5
24569: PPUSH
24570: CALL_OW 448
24574: IFFALSE 24607
// result := [ chassis , engine , control , weapon ] ;
24576: LD_ADDR_VAR 0 6
24580: PUSH
24581: LD_VAR 0 2
24585: PUSH
24586: LD_VAR 0 3
24590: PUSH
24591: LD_VAR 0 4
24595: PUSH
24596: LD_VAR 0 5
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: ST_TO_ADDR
// end ;
24607: LD_VAR 0 6
24611: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24612: LD_INT 0
24614: PPUSH
// if not chassis or not engine then
24615: LD_VAR 0 1
24619: NOT
24620: PUSH
24621: LD_VAR 0 2
24625: NOT
24626: OR
24627: IFFALSE 24631
// exit ;
24629: GO 24827
// case engine of engine_solar :
24631: LD_VAR 0 2
24635: PUSH
24636: LD_INT 2
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24682
24644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_INT 11
24652: PUSH
24653: LD_INT 12
24655: PUSH
24656: LD_INT 13
24658: PUSH
24659: LD_INT 14
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 3
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
24680: GO 24811
24682: LD_INT 1
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24752
24690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 11
24698: PUSH
24699: LD_INT 12
24701: PUSH
24702: LD_INT 13
24704: PUSH
24705: LD_INT 14
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: LD_INT 4
24719: PUSH
24720: LD_INT 5
24722: PUSH
24723: LD_INT 21
24725: PUSH
24726: LD_INT 23
24728: PUSH
24729: LD_INT 22
24731: PUSH
24732: LD_INT 24
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 24811
24752: LD_INT 3
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24810
24760: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 13
24768: PUSH
24769: LD_INT 14
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: LD_INT 4
24780: PUSH
24781: LD_INT 5
24783: PUSH
24784: LD_INT 21
24786: PUSH
24787: LD_INT 22
24789: PUSH
24790: LD_INT 23
24792: PUSH
24793: LD_INT 24
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
24808: GO 24811
24810: POP
// result := ( chassis in result ) ;
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_VAR 0 1
24820: PUSH
24821: LD_VAR 0 3
24825: IN
24826: ST_TO_ADDR
// end ;
24827: LD_VAR 0 3
24831: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24832: LD_INT 0
24834: PPUSH
// if not chassis or not weapon then
24835: LD_VAR 0 1
24839: NOT
24840: PUSH
24841: LD_VAR 0 2
24845: NOT
24846: OR
24847: IFFALSE 24851
// exit ;
24849: GO 25877
// case weapon of us_machine_gun :
24851: LD_VAR 0 2
24855: PUSH
24856: LD_INT 2
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24894
24864: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: LD_INT 4
24881: PUSH
24882: LD_INT 5
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: ST_TO_ADDR
24892: GO 25861
24894: LD_INT 3
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 24932
24902: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 4
24919: PUSH
24920: LD_INT 5
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
24930: GO 25861
24932: LD_INT 11
24934: DOUBLE
24935: EQUAL
24936: IFTRUE 24940
24938: GO 24970
24940: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: LD_INT 3
24954: PUSH
24955: LD_INT 4
24957: PUSH
24958: LD_INT 5
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: ST_TO_ADDR
24968: GO 25861
24970: LD_INT 4
24972: DOUBLE
24973: EQUAL
24974: IFTRUE 24978
24976: GO 25004
24978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 4
24992: PUSH
24993: LD_INT 5
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: ST_TO_ADDR
25002: GO 25861
25004: LD_INT 5
25006: DOUBLE
25007: EQUAL
25008: IFTRUE 25012
25010: GO 25038
25012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: LD_INT 3
25023: PUSH
25024: LD_INT 4
25026: PUSH
25027: LD_INT 5
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: ST_TO_ADDR
25036: GO 25861
25038: LD_INT 9
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25072
25046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 4
25060: PUSH
25061: LD_INT 5
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: ST_TO_ADDR
25070: GO 25861
25072: LD_INT 7
25074: DOUBLE
25075: EQUAL
25076: IFTRUE 25080
25078: GO 25106
25080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25081: LD_ADDR_VAR 0 3
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: LD_INT 4
25094: PUSH
25095: LD_INT 5
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: ST_TO_ADDR
25104: GO 25861
25106: LD_INT 12
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25140
25114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: LD_INT 4
25128: PUSH
25129: LD_INT 5
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: ST_TO_ADDR
25138: GO 25861
25140: LD_INT 13
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25174
25148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: LD_INT 3
25159: PUSH
25160: LD_INT 4
25162: PUSH
25163: LD_INT 5
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: ST_TO_ADDR
25172: GO 25861
25174: LD_INT 14
25176: DOUBLE
25177: EQUAL
25178: IFTRUE 25182
25180: GO 25200
25182: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25183: LD_ADDR_VAR 0 3
25187: PUSH
25188: LD_INT 4
25190: PUSH
25191: LD_INT 5
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25861
25200: LD_INT 6
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25226
25208: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 4
25216: PUSH
25217: LD_INT 5
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: ST_TO_ADDR
25224: GO 25861
25226: LD_INT 10
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25252
25234: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_INT 4
25242: PUSH
25243: LD_INT 5
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: ST_TO_ADDR
25250: GO 25861
25252: LD_INT 22
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25286
25260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 11
25268: PUSH
25269: LD_INT 12
25271: PUSH
25272: LD_INT 13
25274: PUSH
25275: LD_INT 14
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 25861
25286: LD_INT 23
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25320
25294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_INT 11
25302: PUSH
25303: LD_INT 12
25305: PUSH
25306: LD_INT 13
25308: PUSH
25309: LD_INT 14
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 25861
25320: LD_INT 24
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25354
25328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 11
25336: PUSH
25337: LD_INT 12
25339: PUSH
25340: LD_INT 13
25342: PUSH
25343: LD_INT 14
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
25352: GO 25861
25354: LD_INT 30
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25388
25362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 11
25370: PUSH
25371: LD_INT 12
25373: PUSH
25374: LD_INT 13
25376: PUSH
25377: LD_INT 14
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
25386: GO 25861
25388: LD_INT 25
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25414
25396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 13
25404: PUSH
25405: LD_INT 14
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: ST_TO_ADDR
25412: GO 25861
25414: LD_INT 27
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25440
25422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25423: LD_ADDR_VAR 0 3
25427: PUSH
25428: LD_INT 13
25430: PUSH
25431: LD_INT 14
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: ST_TO_ADDR
25438: GO 25861
25440: LD_INT 28
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25466
25448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_INT 13
25456: PUSH
25457: LD_INT 14
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: ST_TO_ADDR
25464: GO 25861
25466: LD_INT 29
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 25492
25474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_INT 13
25482: PUSH
25483: LD_INT 14
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: ST_TO_ADDR
25490: GO 25861
25492: LD_INT 31
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25518
25500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_INT 13
25508: PUSH
25509: LD_INT 14
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: ST_TO_ADDR
25516: GO 25861
25518: LD_INT 26
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25544
25526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 13
25534: PUSH
25535: LD_INT 14
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: ST_TO_ADDR
25542: GO 25861
25544: LD_INT 42
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25578
25552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25553: LD_ADDR_VAR 0 3
25557: PUSH
25558: LD_INT 21
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_INT 23
25566: PUSH
25567: LD_INT 24
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: ST_TO_ADDR
25576: GO 25861
25578: LD_INT 43
25580: DOUBLE
25581: EQUAL
25582: IFTRUE 25586
25584: GO 25612
25586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25587: LD_ADDR_VAR 0 3
25591: PUSH
25592: LD_INT 21
25594: PUSH
25595: LD_INT 22
25597: PUSH
25598: LD_INT 23
25600: PUSH
25601: LD_INT 24
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
25610: GO 25861
25612: LD_INT 44
25614: DOUBLE
25615: EQUAL
25616: IFTRUE 25620
25618: GO 25646
25620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 21
25628: PUSH
25629: LD_INT 22
25631: PUSH
25632: LD_INT 23
25634: PUSH
25635: LD_INT 24
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: ST_TO_ADDR
25644: GO 25861
25646: LD_INT 45
25648: DOUBLE
25649: EQUAL
25650: IFTRUE 25654
25652: GO 25680
25654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_INT 23
25668: PUSH
25669: LD_INT 24
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
25678: GO 25861
25680: LD_INT 49
25682: DOUBLE
25683: EQUAL
25684: IFTRUE 25688
25686: GO 25714
25688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25689: LD_ADDR_VAR 0 3
25693: PUSH
25694: LD_INT 21
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_INT 23
25702: PUSH
25703: LD_INT 24
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 25861
25714: LD_INT 51
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25748
25722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_INT 21
25730: PUSH
25731: LD_INT 22
25733: PUSH
25734: LD_INT 23
25736: PUSH
25737: LD_INT 24
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: ST_TO_ADDR
25746: GO 25861
25748: LD_INT 52
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25782
25756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25757: LD_ADDR_VAR 0 3
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 22
25767: PUSH
25768: LD_INT 23
25770: PUSH
25771: LD_INT 24
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: ST_TO_ADDR
25780: GO 25861
25782: LD_INT 53
25784: DOUBLE
25785: EQUAL
25786: IFTRUE 25790
25788: GO 25808
25790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_INT 23
25798: PUSH
25799: LD_INT 24
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: ST_TO_ADDR
25806: GO 25861
25808: LD_INT 46
25810: DOUBLE
25811: EQUAL
25812: IFTRUE 25816
25814: GO 25834
25816: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25817: LD_ADDR_VAR 0 3
25821: PUSH
25822: LD_INT 23
25824: PUSH
25825: LD_INT 24
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: ST_TO_ADDR
25832: GO 25861
25834: LD_INT 47
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25860
25842: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25843: LD_ADDR_VAR 0 3
25847: PUSH
25848: LD_INT 23
25850: PUSH
25851: LD_INT 24
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: ST_TO_ADDR
25858: GO 25861
25860: POP
// result := ( chassis in result ) ;
25861: LD_ADDR_VAR 0 3
25865: PUSH
25866: LD_VAR 0 1
25870: PUSH
25871: LD_VAR 0 3
25875: IN
25876: ST_TO_ADDR
// end ;
25877: LD_VAR 0 3
25881: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25882: LD_INT 0
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
25889: PPUSH
25890: PPUSH
// result := array ;
25891: LD_ADDR_VAR 0 5
25895: PUSH
25896: LD_VAR 0 1
25900: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25901: LD_VAR 0 1
25905: NOT
25906: PUSH
25907: LD_VAR 0 2
25911: NOT
25912: OR
25913: PUSH
25914: LD_VAR 0 3
25918: NOT
25919: OR
25920: PUSH
25921: LD_VAR 0 2
25925: PUSH
25926: LD_VAR 0 1
25930: GREATER
25931: OR
25932: PUSH
25933: LD_VAR 0 3
25937: PUSH
25938: LD_VAR 0 1
25942: GREATER
25943: OR
25944: IFFALSE 25948
// exit ;
25946: GO 26244
// if direction then
25948: LD_VAR 0 4
25952: IFFALSE 26016
// begin d := 1 ;
25954: LD_ADDR_VAR 0 9
25958: PUSH
25959: LD_INT 1
25961: ST_TO_ADDR
// if i_from > i_to then
25962: LD_VAR 0 2
25966: PUSH
25967: LD_VAR 0 3
25971: GREATER
25972: IFFALSE 25998
// length := ( array - i_from ) + i_to else
25974: LD_ADDR_VAR 0 11
25978: PUSH
25979: LD_VAR 0 1
25983: PUSH
25984: LD_VAR 0 2
25988: MINUS
25989: PUSH
25990: LD_VAR 0 3
25994: PLUS
25995: ST_TO_ADDR
25996: GO 26014
// length := i_to - i_from ;
25998: LD_ADDR_VAR 0 11
26002: PUSH
26003: LD_VAR 0 3
26007: PUSH
26008: LD_VAR 0 2
26012: MINUS
26013: ST_TO_ADDR
// end else
26014: GO 26077
// begin d := - 1 ;
26016: LD_ADDR_VAR 0 9
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: ST_TO_ADDR
// if i_from > i_to then
26025: LD_VAR 0 2
26029: PUSH
26030: LD_VAR 0 3
26034: GREATER
26035: IFFALSE 26055
// length := i_from - i_to else
26037: LD_ADDR_VAR 0 11
26041: PUSH
26042: LD_VAR 0 2
26046: PUSH
26047: LD_VAR 0 3
26051: MINUS
26052: ST_TO_ADDR
26053: GO 26077
// length := ( array - i_to ) + i_from ;
26055: LD_ADDR_VAR 0 11
26059: PUSH
26060: LD_VAR 0 1
26064: PUSH
26065: LD_VAR 0 3
26069: MINUS
26070: PUSH
26071: LD_VAR 0 2
26075: PLUS
26076: ST_TO_ADDR
// end ; if not length then
26077: LD_VAR 0 11
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26244
// tmp := array ;
26086: LD_ADDR_VAR 0 10
26090: PUSH
26091: LD_VAR 0 1
26095: ST_TO_ADDR
// for i = 1 to length do
26096: LD_ADDR_VAR 0 6
26100: PUSH
26101: DOUBLE
26102: LD_INT 1
26104: DEC
26105: ST_TO_ADDR
26106: LD_VAR 0 11
26110: PUSH
26111: FOR_TO
26112: IFFALSE 26232
// begin for j = 1 to array do
26114: LD_ADDR_VAR 0 7
26118: PUSH
26119: DOUBLE
26120: LD_INT 1
26122: DEC
26123: ST_TO_ADDR
26124: LD_VAR 0 1
26128: PUSH
26129: FOR_TO
26130: IFFALSE 26218
// begin k := j + d ;
26132: LD_ADDR_VAR 0 8
26136: PUSH
26137: LD_VAR 0 7
26141: PUSH
26142: LD_VAR 0 9
26146: PLUS
26147: ST_TO_ADDR
// if k > array then
26148: LD_VAR 0 8
26152: PUSH
26153: LD_VAR 0 1
26157: GREATER
26158: IFFALSE 26168
// k := 1 ;
26160: LD_ADDR_VAR 0 8
26164: PUSH
26165: LD_INT 1
26167: ST_TO_ADDR
// if not k then
26168: LD_VAR 0 8
26172: NOT
26173: IFFALSE 26185
// k := array ;
26175: LD_ADDR_VAR 0 8
26179: PUSH
26180: LD_VAR 0 1
26184: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26185: LD_ADDR_VAR 0 10
26189: PUSH
26190: LD_VAR 0 10
26194: PPUSH
26195: LD_VAR 0 8
26199: PPUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_VAR 0 7
26209: ARRAY
26210: PPUSH
26211: CALL_OW 1
26215: ST_TO_ADDR
// end ;
26216: GO 26129
26218: POP
26219: POP
// array := tmp ;
26220: LD_ADDR_VAR 0 1
26224: PUSH
26225: LD_VAR 0 10
26229: ST_TO_ADDR
// end ;
26230: GO 26111
26232: POP
26233: POP
// result := array ;
26234: LD_ADDR_VAR 0 5
26238: PUSH
26239: LD_VAR 0 1
26243: ST_TO_ADDR
// end ;
26244: LD_VAR 0 5
26248: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26249: LD_INT 0
26251: PPUSH
26252: PPUSH
// result := 0 ;
26253: LD_ADDR_VAR 0 3
26257: PUSH
26258: LD_INT 0
26260: ST_TO_ADDR
// if not array or not value in array then
26261: LD_VAR 0 1
26265: NOT
26266: PUSH
26267: LD_VAR 0 2
26271: PUSH
26272: LD_VAR 0 1
26276: IN
26277: NOT
26278: OR
26279: IFFALSE 26283
// exit ;
26281: GO 26337
// for i = 1 to array do
26283: LD_ADDR_VAR 0 4
26287: PUSH
26288: DOUBLE
26289: LD_INT 1
26291: DEC
26292: ST_TO_ADDR
26293: LD_VAR 0 1
26297: PUSH
26298: FOR_TO
26299: IFFALSE 26335
// if value = array [ i ] then
26301: LD_VAR 0 2
26305: PUSH
26306: LD_VAR 0 1
26310: PUSH
26311: LD_VAR 0 4
26315: ARRAY
26316: EQUAL
26317: IFFALSE 26333
// begin result := i ;
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_VAR 0 4
26328: ST_TO_ADDR
// exit ;
26329: POP
26330: POP
26331: GO 26337
// end ;
26333: GO 26298
26335: POP
26336: POP
// end ;
26337: LD_VAR 0 3
26341: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26342: LD_INT 0
26344: PPUSH
// vc_chassis := chassis ;
26345: LD_ADDR_OWVAR 37
26349: PUSH
26350: LD_VAR 0 1
26354: ST_TO_ADDR
// vc_engine := engine ;
26355: LD_ADDR_OWVAR 39
26359: PUSH
26360: LD_VAR 0 2
26364: ST_TO_ADDR
// vc_control := control ;
26365: LD_ADDR_OWVAR 38
26369: PUSH
26370: LD_VAR 0 3
26374: ST_TO_ADDR
// vc_weapon := weapon ;
26375: LD_ADDR_OWVAR 40
26379: PUSH
26380: LD_VAR 0 4
26384: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26385: LD_ADDR_OWVAR 41
26389: PUSH
26390: LD_VAR 0 5
26394: ST_TO_ADDR
// end ;
26395: LD_VAR 0 6
26399: RET
// export function WantPlant ( unit ) ; var task ; begin
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
// result := false ;
26404: LD_ADDR_VAR 0 2
26408: PUSH
26409: LD_INT 0
26411: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26412: LD_ADDR_VAR 0 3
26416: PUSH
26417: LD_VAR 0 1
26421: PPUSH
26422: CALL_OW 437
26426: ST_TO_ADDR
// if task then
26427: LD_VAR 0 3
26431: IFFALSE 26459
// if task [ 1 ] [ 1 ] = p then
26433: LD_VAR 0 3
26437: PUSH
26438: LD_INT 1
26440: ARRAY
26441: PUSH
26442: LD_INT 1
26444: ARRAY
26445: PUSH
26446: LD_STRING p
26448: EQUAL
26449: IFFALSE 26459
// result := true ;
26451: LD_ADDR_VAR 0 2
26455: PUSH
26456: LD_INT 1
26458: ST_TO_ADDR
// end ;
26459: LD_VAR 0 2
26463: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
// if pos < 1 then
26470: LD_VAR 0 2
26474: PUSH
26475: LD_INT 1
26477: LESS
26478: IFFALSE 26482
// exit ;
26480: GO 26785
// if pos = 1 then
26482: LD_VAR 0 2
26486: PUSH
26487: LD_INT 1
26489: EQUAL
26490: IFFALSE 26523
// result := Replace ( arr , pos [ 1 ] , value ) else
26492: LD_ADDR_VAR 0 4
26496: PUSH
26497: LD_VAR 0 1
26501: PPUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_INT 1
26509: ARRAY
26510: PPUSH
26511: LD_VAR 0 3
26515: PPUSH
26516: CALL_OW 1
26520: ST_TO_ADDR
26521: GO 26785
// begin tmp := arr ;
26523: LD_ADDR_VAR 0 6
26527: PUSH
26528: LD_VAR 0 1
26532: ST_TO_ADDR
// s_arr := [ tmp ] ;
26533: LD_ADDR_VAR 0 7
26537: PUSH
26538: LD_VAR 0 6
26542: PUSH
26543: EMPTY
26544: LIST
26545: ST_TO_ADDR
// for i = 1 to pos - 1 do
26546: LD_ADDR_VAR 0 5
26550: PUSH
26551: DOUBLE
26552: LD_INT 1
26554: DEC
26555: ST_TO_ADDR
26556: LD_VAR 0 2
26560: PUSH
26561: LD_INT 1
26563: MINUS
26564: PUSH
26565: FOR_TO
26566: IFFALSE 26611
// begin tmp := tmp [ pos [ i ] ] ;
26568: LD_ADDR_VAR 0 6
26572: PUSH
26573: LD_VAR 0 6
26577: PUSH
26578: LD_VAR 0 2
26582: PUSH
26583: LD_VAR 0 5
26587: ARRAY
26588: ARRAY
26589: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26590: LD_ADDR_VAR 0 7
26594: PUSH
26595: LD_VAR 0 7
26599: PUSH
26600: LD_VAR 0 6
26604: PUSH
26605: EMPTY
26606: LIST
26607: ADD
26608: ST_TO_ADDR
// end ;
26609: GO 26565
26611: POP
26612: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26613: LD_ADDR_VAR 0 6
26617: PUSH
26618: LD_VAR 0 6
26622: PPUSH
26623: LD_VAR 0 2
26627: PUSH
26628: LD_VAR 0 2
26632: ARRAY
26633: PPUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: CALL_OW 1
26643: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26644: LD_ADDR_VAR 0 7
26648: PUSH
26649: LD_VAR 0 7
26653: PPUSH
26654: LD_VAR 0 7
26658: PPUSH
26659: LD_VAR 0 6
26663: PPUSH
26664: CALL_OW 1
26668: ST_TO_ADDR
// for i = s_arr downto 2 do
26669: LD_ADDR_VAR 0 5
26673: PUSH
26674: DOUBLE
26675: LD_VAR 0 7
26679: INC
26680: ST_TO_ADDR
26681: LD_INT 2
26683: PUSH
26684: FOR_DOWNTO
26685: IFFALSE 26769
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26687: LD_ADDR_VAR 0 6
26691: PUSH
26692: LD_VAR 0 7
26696: PUSH
26697: LD_VAR 0 5
26701: PUSH
26702: LD_INT 1
26704: MINUS
26705: ARRAY
26706: PPUSH
26707: LD_VAR 0 2
26711: PUSH
26712: LD_VAR 0 5
26716: PUSH
26717: LD_INT 1
26719: MINUS
26720: ARRAY
26721: PPUSH
26722: LD_VAR 0 7
26726: PUSH
26727: LD_VAR 0 5
26731: ARRAY
26732: PPUSH
26733: CALL_OW 1
26737: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26738: LD_ADDR_VAR 0 7
26742: PUSH
26743: LD_VAR 0 7
26747: PPUSH
26748: LD_VAR 0 5
26752: PUSH
26753: LD_INT 1
26755: MINUS
26756: PPUSH
26757: LD_VAR 0 6
26761: PPUSH
26762: CALL_OW 1
26766: ST_TO_ADDR
// end ;
26767: GO 26684
26769: POP
26770: POP
// result := s_arr [ 1 ] ;
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 7
26780: PUSH
26781: LD_INT 1
26783: ARRAY
26784: ST_TO_ADDR
// end ; end ;
26785: LD_VAR 0 4
26789: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
// if not list then
26794: LD_VAR 0 1
26798: NOT
26799: IFFALSE 26803
// exit ;
26801: GO 26894
// i := list [ pos1 ] ;
26803: LD_ADDR_VAR 0 5
26807: PUSH
26808: LD_VAR 0 1
26812: PUSH
26813: LD_VAR 0 2
26817: ARRAY
26818: ST_TO_ADDR
// if not i then
26819: LD_VAR 0 5
26823: NOT
26824: IFFALSE 26828
// exit ;
26826: GO 26894
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26828: LD_ADDR_VAR 0 1
26832: PUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_VAR 0 2
26842: PPUSH
26843: LD_VAR 0 1
26847: PUSH
26848: LD_VAR 0 3
26852: ARRAY
26853: PPUSH
26854: CALL_OW 1
26858: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26859: LD_ADDR_VAR 0 1
26863: PUSH
26864: LD_VAR 0 1
26868: PPUSH
26869: LD_VAR 0 3
26873: PPUSH
26874: LD_VAR 0 5
26878: PPUSH
26879: CALL_OW 1
26883: ST_TO_ADDR
// result := list ;
26884: LD_ADDR_VAR 0 4
26888: PUSH
26889: LD_VAR 0 1
26893: ST_TO_ADDR
// end ;
26894: LD_VAR 0 4
26898: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26899: LD_INT 0
26901: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26902: LD_ADDR_VAR 0 5
26906: PUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 250
26916: PPUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL_OW 251
26926: PPUSH
26927: LD_VAR 0 2
26931: PPUSH
26932: LD_VAR 0 3
26936: PPUSH
26937: LD_VAR 0 4
26941: PPUSH
26942: CALL 26952 0 5
26946: ST_TO_ADDR
// end ;
26947: LD_VAR 0 5
26951: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26952: LD_INT 0
26954: PPUSH
26955: PPUSH
26956: PPUSH
26957: PPUSH
// if not list then
26958: LD_VAR 0 3
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 27355
// result := [ ] ;
26967: LD_ADDR_VAR 0 6
26971: PUSH
26972: EMPTY
26973: ST_TO_ADDR
// for i in list do
26974: LD_ADDR_VAR 0 7
26978: PUSH
26979: LD_VAR 0 3
26983: PUSH
26984: FOR_IN
26985: IFFALSE 27187
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26987: LD_ADDR_VAR 0 9
26991: PUSH
26992: LD_VAR 0 7
26996: PPUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: LD_VAR 0 2
27006: PPUSH
27007: CALL_OW 297
27011: ST_TO_ADDR
// if not result then
27012: LD_VAR 0 6
27016: NOT
27017: IFFALSE 27043
// result := [ [ i , tmp ] ] else
27019: LD_ADDR_VAR 0 6
27023: PUSH
27024: LD_VAR 0 7
27028: PUSH
27029: LD_VAR 0 9
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: EMPTY
27039: LIST
27040: ST_TO_ADDR
27041: GO 27185
// begin if result [ result ] [ 2 ] < tmp then
27043: LD_VAR 0 6
27047: PUSH
27048: LD_VAR 0 6
27052: ARRAY
27053: PUSH
27054: LD_INT 2
27056: ARRAY
27057: PUSH
27058: LD_VAR 0 9
27062: LESS
27063: IFFALSE 27105
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27065: LD_ADDR_VAR 0 6
27069: PUSH
27070: LD_VAR 0 6
27074: PPUSH
27075: LD_VAR 0 6
27079: PUSH
27080: LD_INT 1
27082: PLUS
27083: PPUSH
27084: LD_VAR 0 7
27088: PUSH
27089: LD_VAR 0 9
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 2
27102: ST_TO_ADDR
27103: GO 27185
// for j = 1 to result do
27105: LD_ADDR_VAR 0 8
27109: PUSH
27110: DOUBLE
27111: LD_INT 1
27113: DEC
27114: ST_TO_ADDR
27115: LD_VAR 0 6
27119: PUSH
27120: FOR_TO
27121: IFFALSE 27183
// begin if tmp < result [ j ] [ 2 ] then
27123: LD_VAR 0 9
27127: PUSH
27128: LD_VAR 0 6
27132: PUSH
27133: LD_VAR 0 8
27137: ARRAY
27138: PUSH
27139: LD_INT 2
27141: ARRAY
27142: LESS
27143: IFFALSE 27181
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27145: LD_ADDR_VAR 0 6
27149: PUSH
27150: LD_VAR 0 6
27154: PPUSH
27155: LD_VAR 0 8
27159: PPUSH
27160: LD_VAR 0 7
27164: PUSH
27165: LD_VAR 0 9
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 2
27178: ST_TO_ADDR
// break ;
27179: GO 27183
// end ; end ;
27181: GO 27120
27183: POP
27184: POP
// end ; end ;
27185: GO 26984
27187: POP
27188: POP
// if result and not asc then
27189: LD_VAR 0 6
27193: PUSH
27194: LD_VAR 0 4
27198: NOT
27199: AND
27200: IFFALSE 27275
// begin tmp := result ;
27202: LD_ADDR_VAR 0 9
27206: PUSH
27207: LD_VAR 0 6
27211: ST_TO_ADDR
// for i = tmp downto 1 do
27212: LD_ADDR_VAR 0 7
27216: PUSH
27217: DOUBLE
27218: LD_VAR 0 9
27222: INC
27223: ST_TO_ADDR
27224: LD_INT 1
27226: PUSH
27227: FOR_DOWNTO
27228: IFFALSE 27273
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27230: LD_ADDR_VAR 0 6
27234: PUSH
27235: LD_VAR 0 6
27239: PPUSH
27240: LD_VAR 0 9
27244: PUSH
27245: LD_VAR 0 7
27249: MINUS
27250: PUSH
27251: LD_INT 1
27253: PLUS
27254: PPUSH
27255: LD_VAR 0 9
27259: PUSH
27260: LD_VAR 0 7
27264: ARRAY
27265: PPUSH
27266: CALL_OW 1
27270: ST_TO_ADDR
27271: GO 27227
27273: POP
27274: POP
// end ; tmp := [ ] ;
27275: LD_ADDR_VAR 0 9
27279: PUSH
27280: EMPTY
27281: ST_TO_ADDR
// if mode then
27282: LD_VAR 0 5
27286: IFFALSE 27355
// begin for i = 1 to result do
27288: LD_ADDR_VAR 0 7
27292: PUSH
27293: DOUBLE
27294: LD_INT 1
27296: DEC
27297: ST_TO_ADDR
27298: LD_VAR 0 6
27302: PUSH
27303: FOR_TO
27304: IFFALSE 27343
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27306: LD_ADDR_VAR 0 9
27310: PUSH
27311: LD_VAR 0 9
27315: PPUSH
27316: LD_VAR 0 7
27320: PPUSH
27321: LD_VAR 0 6
27325: PUSH
27326: LD_VAR 0 7
27330: ARRAY
27331: PUSH
27332: LD_INT 1
27334: ARRAY
27335: PPUSH
27336: CALL_OW 1
27340: ST_TO_ADDR
27341: GO 27303
27343: POP
27344: POP
// result := tmp ;
27345: LD_ADDR_VAR 0 6
27349: PUSH
27350: LD_VAR 0 9
27354: ST_TO_ADDR
// end ; end ;
27355: LD_VAR 0 6
27359: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27360: LD_INT 0
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: ST_TO_ADDR
// if not x or not y then
27390: LD_VAR 0 2
27394: NOT
27395: PUSH
27396: LD_VAR 0 3
27400: NOT
27401: OR
27402: IFFALSE 27406
// exit ;
27404: GO 29052
// if not range then
27406: LD_VAR 0 4
27410: NOT
27411: IFFALSE 27421
// range := 10 ;
27413: LD_ADDR_VAR 0 4
27417: PUSH
27418: LD_INT 10
27420: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27421: LD_ADDR_VAR 0 8
27425: PUSH
27426: LD_INT 81
27428: PUSH
27429: LD_VAR 0 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 92
27440: PUSH
27441: LD_VAR 0 2
27445: PUSH
27446: LD_VAR 0 3
27450: PUSH
27451: LD_VAR 0 4
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 3
27464: PUSH
27465: LD_INT 21
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: PPUSH
27484: CALL_OW 69
27488: ST_TO_ADDR
// if not tmp then
27489: LD_VAR 0 8
27493: NOT
27494: IFFALSE 27498
// exit ;
27496: GO 29052
// for i in tmp do
27498: LD_ADDR_VAR 0 6
27502: PUSH
27503: LD_VAR 0 8
27507: PUSH
27508: FOR_IN
27509: IFFALSE 29027
// begin points := [ 0 , 0 , 0 ] ;
27511: LD_ADDR_VAR 0 9
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// bpoints := 1 ;
27530: LD_ADDR_VAR 0 10
27534: PUSH
27535: LD_INT 1
27537: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27538: LD_VAR 0 6
27542: PPUSH
27543: CALL_OW 247
27547: PUSH
27548: LD_INT 1
27550: DOUBLE
27551: EQUAL
27552: IFTRUE 27556
27554: GO 28134
27556: POP
// begin if GetClass ( i ) = 1 then
27557: LD_VAR 0 6
27561: PPUSH
27562: CALL_OW 257
27566: PUSH
27567: LD_INT 1
27569: EQUAL
27570: IFFALSE 27591
// points := [ 10 , 5 , 3 ] ;
27572: LD_ADDR_VAR 0 9
27576: PUSH
27577: LD_INT 10
27579: PUSH
27580: LD_INT 5
27582: PUSH
27583: LD_INT 3
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27591: LD_VAR 0 6
27595: PPUSH
27596: CALL_OW 257
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: IN
27615: IFFALSE 27636
// points := [ 3 , 2 , 1 ] ;
27617: LD_ADDR_VAR 0 9
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27636: LD_VAR 0 6
27640: PPUSH
27641: CALL_OW 257
27645: PUSH
27646: LD_INT 5
27648: EQUAL
27649: IFFALSE 27670
// points := [ 130 , 5 , 2 ] ;
27651: LD_ADDR_VAR 0 9
27655: PUSH
27656: LD_INT 130
27658: PUSH
27659: LD_INT 5
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27670: LD_VAR 0 6
27674: PPUSH
27675: CALL_OW 257
27679: PUSH
27680: LD_INT 8
27682: EQUAL
27683: IFFALSE 27704
// points := [ 35 , 35 , 30 ] ;
27685: LD_ADDR_VAR 0 9
27689: PUSH
27690: LD_INT 35
27692: PUSH
27693: LD_INT 35
27695: PUSH
27696: LD_INT 30
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27704: LD_VAR 0 6
27708: PPUSH
27709: CALL_OW 257
27713: PUSH
27714: LD_INT 9
27716: EQUAL
27717: IFFALSE 27738
// points := [ 20 , 55 , 40 ] ;
27719: LD_ADDR_VAR 0 9
27723: PUSH
27724: LD_INT 20
27726: PUSH
27727: LD_INT 55
27729: PUSH
27730: LD_INT 40
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27738: LD_VAR 0 6
27742: PPUSH
27743: CALL_OW 257
27747: PUSH
27748: LD_INT 12
27750: PUSH
27751: LD_INT 16
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: IN
27758: IFFALSE 27779
// points := [ 5 , 3 , 2 ] ;
27760: LD_ADDR_VAR 0 9
27764: PUSH
27765: LD_INT 5
27767: PUSH
27768: LD_INT 3
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27779: LD_VAR 0 6
27783: PPUSH
27784: CALL_OW 257
27788: PUSH
27789: LD_INT 17
27791: EQUAL
27792: IFFALSE 27813
// points := [ 100 , 50 , 75 ] ;
27794: LD_ADDR_VAR 0 9
27798: PUSH
27799: LD_INT 100
27801: PUSH
27802: LD_INT 50
27804: PUSH
27805: LD_INT 75
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27813: LD_VAR 0 6
27817: PPUSH
27818: CALL_OW 257
27822: PUSH
27823: LD_INT 15
27825: EQUAL
27826: IFFALSE 27847
// points := [ 10 , 5 , 3 ] ;
27828: LD_ADDR_VAR 0 9
27832: PUSH
27833: LD_INT 10
27835: PUSH
27836: LD_INT 5
27838: PUSH
27839: LD_INT 3
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 257
27856: PUSH
27857: LD_INT 14
27859: EQUAL
27860: IFFALSE 27881
// points := [ 10 , 0 , 0 ] ;
27862: LD_ADDR_VAR 0 9
27866: PUSH
27867: LD_INT 10
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27881: LD_VAR 0 6
27885: PPUSH
27886: CALL_OW 257
27890: PUSH
27891: LD_INT 11
27893: EQUAL
27894: IFFALSE 27915
// points := [ 30 , 10 , 5 ] ;
27896: LD_ADDR_VAR 0 9
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 10
27906: PUSH
27907: LD_INT 5
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27915: LD_VAR 0 1
27919: PPUSH
27920: LD_INT 5
27922: PPUSH
27923: CALL_OW 321
27927: PUSH
27928: LD_INT 2
27930: EQUAL
27931: IFFALSE 27948
// bpoints := bpoints * 1.8 ;
27933: LD_ADDR_VAR 0 10
27937: PUSH
27938: LD_VAR 0 10
27942: PUSH
27943: LD_REAL  1.80000000000000E+0000
27946: MUL
27947: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27948: LD_VAR 0 6
27952: PPUSH
27953: CALL_OW 257
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 4
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: IN
27976: PUSH
27977: LD_VAR 0 1
27981: PPUSH
27982: LD_INT 51
27984: PPUSH
27985: CALL_OW 321
27989: PUSH
27990: LD_INT 2
27992: EQUAL
27993: AND
27994: IFFALSE 28011
// bpoints := bpoints * 1.2 ;
27996: LD_ADDR_VAR 0 10
28000: PUSH
28001: LD_VAR 0 10
28005: PUSH
28006: LD_REAL  1.20000000000000E+0000
28009: MUL
28010: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28011: LD_VAR 0 6
28015: PPUSH
28016: CALL_OW 257
28020: PUSH
28021: LD_INT 5
28023: PUSH
28024: LD_INT 7
28026: PUSH
28027: LD_INT 9
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: IN
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_INT 52
28043: PPUSH
28044: CALL_OW 321
28048: PUSH
28049: LD_INT 2
28051: EQUAL
28052: AND
28053: IFFALSE 28070
// bpoints := bpoints * 1.5 ;
28055: LD_ADDR_VAR 0 10
28059: PUSH
28060: LD_VAR 0 10
28064: PUSH
28065: LD_REAL  1.50000000000000E+0000
28068: MUL
28069: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_INT 66
28077: PPUSH
28078: CALL_OW 321
28082: PUSH
28083: LD_INT 2
28085: EQUAL
28086: IFFALSE 28103
// bpoints := bpoints * 1.1 ;
28088: LD_ADDR_VAR 0 10
28092: PUSH
28093: LD_VAR 0 10
28097: PUSH
28098: LD_REAL  1.10000000000000E+0000
28101: MUL
28102: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28103: LD_ADDR_VAR 0 10
28107: PUSH
28108: LD_VAR 0 10
28112: PUSH
28113: LD_VAR 0 6
28117: PPUSH
28118: LD_INT 1
28120: PPUSH
28121: CALL_OW 259
28125: PUSH
28126: LD_REAL  1.15000000000000E+0000
28129: MUL
28130: MUL
28131: ST_TO_ADDR
// end ; unit_vehicle :
28132: GO 28956
28134: LD_INT 2
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28944
28142: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28143: LD_VAR 0 6
28147: PPUSH
28148: CALL_OW 264
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 42
28158: PUSH
28159: LD_INT 24
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: IN
28167: IFFALSE 28188
// points := [ 25 , 5 , 3 ] ;
28169: LD_ADDR_VAR 0 9
28173: PUSH
28174: LD_INT 25
28176: PUSH
28177: LD_INT 5
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28188: LD_VAR 0 6
28192: PPUSH
28193: CALL_OW 264
28197: PUSH
28198: LD_INT 4
28200: PUSH
28201: LD_INT 43
28203: PUSH
28204: LD_INT 25
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: IN
28212: IFFALSE 28233
// points := [ 40 , 15 , 5 ] ;
28214: LD_ADDR_VAR 0 9
28218: PUSH
28219: LD_INT 40
28221: PUSH
28222: LD_INT 15
28224: PUSH
28225: LD_INT 5
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 264
28242: PUSH
28243: LD_INT 3
28245: PUSH
28246: LD_INT 23
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: IN
28253: IFFALSE 28274
// points := [ 7 , 25 , 8 ] ;
28255: LD_ADDR_VAR 0 9
28259: PUSH
28260: LD_INT 7
28262: PUSH
28263: LD_INT 25
28265: PUSH
28266: LD_INT 8
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28274: LD_VAR 0 6
28278: PPUSH
28279: CALL_OW 264
28283: PUSH
28284: LD_INT 5
28286: PUSH
28287: LD_INT 27
28289: PUSH
28290: LD_INT 44
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: IN
28298: IFFALSE 28319
// points := [ 14 , 50 , 16 ] ;
28300: LD_ADDR_VAR 0 9
28304: PUSH
28305: LD_INT 14
28307: PUSH
28308: LD_INT 50
28310: PUSH
28311: LD_INT 16
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28319: LD_VAR 0 6
28323: PPUSH
28324: CALL_OW 264
28328: PUSH
28329: LD_INT 6
28331: PUSH
28332: LD_INT 46
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: IN
28339: IFFALSE 28360
// points := [ 32 , 120 , 70 ] ;
28341: LD_ADDR_VAR 0 9
28345: PUSH
28346: LD_INT 32
28348: PUSH
28349: LD_INT 120
28351: PUSH
28352: LD_INT 70
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28360: LD_VAR 0 6
28364: PPUSH
28365: CALL_OW 264
28369: PUSH
28370: LD_INT 7
28372: PUSH
28373: LD_INT 28
28375: PUSH
28376: LD_INT 45
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: IN
28384: IFFALSE 28405
// points := [ 35 , 20 , 45 ] ;
28386: LD_ADDR_VAR 0 9
28390: PUSH
28391: LD_INT 35
28393: PUSH
28394: LD_INT 20
28396: PUSH
28397: LD_INT 45
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28405: LD_VAR 0 6
28409: PPUSH
28410: CALL_OW 264
28414: PUSH
28415: LD_INT 47
28417: PUSH
28418: EMPTY
28419: LIST
28420: IN
28421: IFFALSE 28442
// points := [ 67 , 45 , 75 ] ;
28423: LD_ADDR_VAR 0 9
28427: PUSH
28428: LD_INT 67
28430: PUSH
28431: LD_INT 45
28433: PUSH
28434: LD_INT 75
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28442: LD_VAR 0 6
28446: PPUSH
28447: CALL_OW 264
28451: PUSH
28452: LD_INT 26
28454: PUSH
28455: EMPTY
28456: LIST
28457: IN
28458: IFFALSE 28479
// points := [ 120 , 30 , 80 ] ;
28460: LD_ADDR_VAR 0 9
28464: PUSH
28465: LD_INT 120
28467: PUSH
28468: LD_INT 30
28470: PUSH
28471: LD_INT 80
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28479: LD_VAR 0 6
28483: PPUSH
28484: CALL_OW 264
28488: PUSH
28489: LD_INT 22
28491: PUSH
28492: EMPTY
28493: LIST
28494: IN
28495: IFFALSE 28516
// points := [ 40 , 1 , 1 ] ;
28497: LD_ADDR_VAR 0 9
28501: PUSH
28502: LD_INT 40
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28516: LD_VAR 0 6
28520: PPUSH
28521: CALL_OW 264
28525: PUSH
28526: LD_INT 29
28528: PUSH
28529: EMPTY
28530: LIST
28531: IN
28532: IFFALSE 28553
// points := [ 70 , 200 , 400 ] ;
28534: LD_ADDR_VAR 0 9
28538: PUSH
28539: LD_INT 70
28541: PUSH
28542: LD_INT 200
28544: PUSH
28545: LD_INT 400
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28553: LD_VAR 0 6
28557: PPUSH
28558: CALL_OW 264
28562: PUSH
28563: LD_INT 14
28565: PUSH
28566: LD_INT 53
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: IN
28573: IFFALSE 28594
// points := [ 40 , 10 , 20 ] ;
28575: LD_ADDR_VAR 0 9
28579: PUSH
28580: LD_INT 40
28582: PUSH
28583: LD_INT 10
28585: PUSH
28586: LD_INT 20
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28594: LD_VAR 0 6
28598: PPUSH
28599: CALL_OW 264
28603: PUSH
28604: LD_INT 9
28606: PUSH
28607: EMPTY
28608: LIST
28609: IN
28610: IFFALSE 28631
// points := [ 5 , 70 , 20 ] ;
28612: LD_ADDR_VAR 0 9
28616: PUSH
28617: LD_INT 5
28619: PUSH
28620: LD_INT 70
28622: PUSH
28623: LD_INT 20
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28631: LD_VAR 0 6
28635: PPUSH
28636: CALL_OW 264
28640: PUSH
28641: LD_INT 10
28643: PUSH
28644: EMPTY
28645: LIST
28646: IN
28647: IFFALSE 28668
// points := [ 35 , 110 , 70 ] ;
28649: LD_ADDR_VAR 0 9
28653: PUSH
28654: LD_INT 35
28656: PUSH
28657: LD_INT 110
28659: PUSH
28660: LD_INT 70
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28668: LD_VAR 0 6
28672: PPUSH
28673: CALL_OW 265
28677: PUSH
28678: LD_INT 25
28680: EQUAL
28681: IFFALSE 28702
// points := [ 80 , 65 , 100 ] ;
28683: LD_ADDR_VAR 0 9
28687: PUSH
28688: LD_INT 80
28690: PUSH
28691: LD_INT 65
28693: PUSH
28694: LD_INT 100
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: LIST
28701: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28702: LD_VAR 0 6
28706: PPUSH
28707: CALL_OW 263
28711: PUSH
28712: LD_INT 1
28714: EQUAL
28715: IFFALSE 28750
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28717: LD_ADDR_VAR 0 10
28721: PUSH
28722: LD_VAR 0 10
28726: PUSH
28727: LD_VAR 0 6
28731: PPUSH
28732: CALL_OW 311
28736: PPUSH
28737: LD_INT 3
28739: PPUSH
28740: CALL_OW 259
28744: PUSH
28745: LD_INT 4
28747: MUL
28748: MUL
28749: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28750: LD_VAR 0 6
28754: PPUSH
28755: CALL_OW 263
28759: PUSH
28760: LD_INT 2
28762: EQUAL
28763: IFFALSE 28814
// begin j := IsControledBy ( i ) ;
28765: LD_ADDR_VAR 0 7
28769: PUSH
28770: LD_VAR 0 6
28774: PPUSH
28775: CALL_OW 312
28779: ST_TO_ADDR
// if j then
28780: LD_VAR 0 7
28784: IFFALSE 28814
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28786: LD_ADDR_VAR 0 10
28790: PUSH
28791: LD_VAR 0 10
28795: PUSH
28796: LD_VAR 0 7
28800: PPUSH
28801: LD_INT 3
28803: PPUSH
28804: CALL_OW 259
28808: PUSH
28809: LD_INT 3
28811: MUL
28812: MUL
28813: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28814: LD_VAR 0 6
28818: PPUSH
28819: CALL_OW 264
28823: PUSH
28824: LD_INT 5
28826: PUSH
28827: LD_INT 6
28829: PUSH
28830: LD_INT 46
28832: PUSH
28833: LD_INT 44
28835: PUSH
28836: LD_INT 47
28838: PUSH
28839: LD_INT 45
28841: PUSH
28842: LD_INT 28
28844: PUSH
28845: LD_INT 7
28847: PUSH
28848: LD_INT 27
28850: PUSH
28851: LD_INT 29
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: IN
28866: PUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: LD_INT 52
28874: PPUSH
28875: CALL_OW 321
28879: PUSH
28880: LD_INT 2
28882: EQUAL
28883: AND
28884: IFFALSE 28901
// bpoints := bpoints * 1.2 ;
28886: LD_ADDR_VAR 0 10
28890: PUSH
28891: LD_VAR 0 10
28895: PUSH
28896: LD_REAL  1.20000000000000E+0000
28899: MUL
28900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28901: LD_VAR 0 6
28905: PPUSH
28906: CALL_OW 264
28910: PUSH
28911: LD_INT 6
28913: PUSH
28914: LD_INT 46
28916: PUSH
28917: LD_INT 47
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: IN
28925: IFFALSE 28942
// bpoints := bpoints * 1.2 ;
28927: LD_ADDR_VAR 0 10
28931: PUSH
28932: LD_VAR 0 10
28936: PUSH
28937: LD_REAL  1.20000000000000E+0000
28940: MUL
28941: ST_TO_ADDR
// end ; unit_building :
28942: GO 28956
28944: LD_INT 3
28946: DOUBLE
28947: EQUAL
28948: IFTRUE 28952
28950: GO 28955
28952: POP
// ; end ;
28953: GO 28956
28955: POP
// for j = 1 to 3 do
28956: LD_ADDR_VAR 0 7
28960: PUSH
28961: DOUBLE
28962: LD_INT 1
28964: DEC
28965: ST_TO_ADDR
28966: LD_INT 3
28968: PUSH
28969: FOR_TO
28970: IFFALSE 29023
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28972: LD_ADDR_VAR 0 5
28976: PUSH
28977: LD_VAR 0 5
28981: PPUSH
28982: LD_VAR 0 7
28986: PPUSH
28987: LD_VAR 0 5
28991: PUSH
28992: LD_VAR 0 7
28996: ARRAY
28997: PUSH
28998: LD_VAR 0 9
29002: PUSH
29003: LD_VAR 0 7
29007: ARRAY
29008: PUSH
29009: LD_VAR 0 10
29013: MUL
29014: PLUS
29015: PPUSH
29016: CALL_OW 1
29020: ST_TO_ADDR
29021: GO 28969
29023: POP
29024: POP
// end ;
29025: GO 27508
29027: POP
29028: POP
// result := Replace ( result , 4 , tmp ) ;
29029: LD_ADDR_VAR 0 5
29033: PUSH
29034: LD_VAR 0 5
29038: PPUSH
29039: LD_INT 4
29041: PPUSH
29042: LD_VAR 0 8
29046: PPUSH
29047: CALL_OW 1
29051: ST_TO_ADDR
// end ;
29052: LD_VAR 0 5
29056: RET
// export function DangerAtRange ( unit , range ) ; begin
29057: LD_INT 0
29059: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29060: LD_ADDR_VAR 0 3
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 255
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 250
29084: PPUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 251
29094: PPUSH
29095: LD_VAR 0 2
29099: PPUSH
29100: CALL 27360 0 4
29104: ST_TO_ADDR
// end ;
29105: LD_VAR 0 3
29109: RET
// export function DangerInArea ( side , area ) ; begin
29110: LD_INT 0
29112: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_VAR 0 2
29122: PPUSH
29123: LD_INT 81
29125: PUSH
29126: LD_VAR 0 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PPUSH
29135: CALL_OW 70
29139: ST_TO_ADDR
// end ;
29140: LD_VAR 0 3
29144: RET
// export function IsExtension ( b ) ; begin
29145: LD_INT 0
29147: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_VAR 0 1
29157: PUSH
29158: LD_INT 23
29160: PUSH
29161: LD_INT 20
29163: PUSH
29164: LD_INT 22
29166: PUSH
29167: LD_INT 17
29169: PUSH
29170: LD_INT 24
29172: PUSH
29173: LD_INT 21
29175: PUSH
29176: LD_INT 19
29178: PUSH
29179: LD_INT 16
29181: PUSH
29182: LD_INT 25
29184: PUSH
29185: LD_INT 18
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: IN
29200: ST_TO_ADDR
// end ;
29201: LD_VAR 0 2
29205: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29206: LD_INT 0
29208: PPUSH
29209: PPUSH
29210: PPUSH
// result := [ ] ;
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: EMPTY
29217: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29218: LD_ADDR_VAR 0 4
29222: PUSH
29223: LD_VAR 0 2
29227: PPUSH
29228: LD_INT 21
29230: PUSH
29231: LD_INT 3
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 70
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 4
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29310
// for i in tmp do
29252: LD_ADDR_VAR 0 5
29256: PUSH
29257: LD_VAR 0 4
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29298
// if GetBase ( i ) <> base then
29265: LD_VAR 0 5
29269: PPUSH
29270: CALL_OW 274
29274: PUSH
29275: LD_VAR 0 1
29279: NONEQUAL
29280: IFFALSE 29296
// ComLinkToBase ( base , i ) ;
29282: LD_VAR 0 1
29286: PPUSH
29287: LD_VAR 0 5
29291: PPUSH
29292: CALL_OW 169
29296: GO 29262
29298: POP
29299: POP
// result := tmp ;
29300: LD_ADDR_VAR 0 3
29304: PUSH
29305: LD_VAR 0 4
29309: ST_TO_ADDR
// end ;
29310: LD_VAR 0 3
29314: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29315: LD_INT 0
29317: PPUSH
29318: PPUSH
// if BuildingStatus ( b ) = bs_build then
29319: LD_VAR 0 2
29323: PPUSH
29324: CALL_OW 461
29328: PUSH
29329: LD_INT 1
29331: EQUAL
29332: IFFALSE 29392
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29334: LD_VAR 0 1
29338: PPUSH
29339: LD_STRING h
29341: PUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: CALL_OW 250
29351: PUSH
29352: LD_VAR 0 2
29356: PPUSH
29357: CALL_OW 251
29361: PUSH
29362: LD_VAR 0 2
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: PPUSH
29388: CALL_OW 446
// end ;
29392: LD_VAR 0 3
29396: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29405: LD_VAR 0 1
29409: NOT
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 263
29420: PUSH
29421: LD_INT 2
29423: EQUAL
29424: NOT
29425: OR
29426: IFFALSE 29430
// exit ;
29428: GO 29746
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29430: LD_ADDR_VAR 0 6
29434: PUSH
29435: LD_INT 22
29437: PUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 255
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 30
29457: PUSH
29458: LD_INT 36
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 34
29467: PUSH
29468: LD_INT 31
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PPUSH
29484: CALL_OW 69
29488: ST_TO_ADDR
// if not tmp then
29489: LD_VAR 0 6
29493: NOT
29494: IFFALSE 29498
// exit ;
29496: GO 29746
// result := [ ] ;
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: EMPTY
29504: ST_TO_ADDR
// for i in tmp do
29505: LD_ADDR_VAR 0 3
29509: PUSH
29510: LD_VAR 0 6
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29587
// begin t := UnitsInside ( i ) ;
29518: LD_ADDR_VAR 0 4
29522: PUSH
29523: LD_VAR 0 3
29527: PPUSH
29528: CALL_OW 313
29532: ST_TO_ADDR
// if t then
29533: LD_VAR 0 4
29537: IFFALSE 29585
// for j in t do
29539: LD_ADDR_VAR 0 7
29543: PUSH
29544: LD_VAR 0 4
29548: PUSH
29549: FOR_IN
29550: IFFALSE 29583
// result := Insert ( result , result + 1 , j ) ;
29552: LD_ADDR_VAR 0 2
29556: PUSH
29557: LD_VAR 0 2
29561: PPUSH
29562: LD_VAR 0 2
29566: PUSH
29567: LD_INT 1
29569: PLUS
29570: PPUSH
29571: LD_VAR 0 7
29575: PPUSH
29576: CALL_OW 2
29580: ST_TO_ADDR
29581: GO 29549
29583: POP
29584: POP
// end ;
29585: GO 29515
29587: POP
29588: POP
// if not result then
29589: LD_VAR 0 2
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 29746
// mech := result [ 1 ] ;
29598: LD_ADDR_VAR 0 5
29602: PUSH
29603: LD_VAR 0 2
29607: PUSH
29608: LD_INT 1
29610: ARRAY
29611: ST_TO_ADDR
// if result > 1 then
29612: LD_VAR 0 2
29616: PUSH
29617: LD_INT 1
29619: GREATER
29620: IFFALSE 29732
// for i = 2 to result do
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: DOUBLE
29628: LD_INT 2
29630: DEC
29631: ST_TO_ADDR
29632: LD_VAR 0 2
29636: PUSH
29637: FOR_TO
29638: IFFALSE 29730
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29640: LD_ADDR_VAR 0 4
29644: PUSH
29645: LD_VAR 0 2
29649: PUSH
29650: LD_VAR 0 3
29654: ARRAY
29655: PPUSH
29656: LD_INT 3
29658: PPUSH
29659: CALL_OW 259
29663: PUSH
29664: LD_VAR 0 2
29668: PUSH
29669: LD_VAR 0 3
29673: ARRAY
29674: PPUSH
29675: CALL_OW 432
29679: MINUS
29680: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29681: LD_VAR 0 4
29685: PUSH
29686: LD_VAR 0 5
29690: PPUSH
29691: LD_INT 3
29693: PPUSH
29694: CALL_OW 259
29698: PUSH
29699: LD_VAR 0 5
29703: PPUSH
29704: CALL_OW 432
29708: MINUS
29709: GREATEREQUAL
29710: IFFALSE 29728
// mech := result [ i ] ;
29712: LD_ADDR_VAR 0 5
29716: PUSH
29717: LD_VAR 0 2
29721: PUSH
29722: LD_VAR 0 3
29726: ARRAY
29727: ST_TO_ADDR
// end ;
29728: GO 29637
29730: POP
29731: POP
// ComLinkTo ( vehicle , mech ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_VAR 0 5
29741: PPUSH
29742: CALL_OW 135
// end ;
29746: LD_VAR 0 2
29750: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29751: LD_INT 0
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
29763: PPUSH
29764: PPUSH
29765: PPUSH
// result := [ ] ;
29766: LD_ADDR_VAR 0 7
29770: PUSH
29771: EMPTY
29772: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29773: LD_VAR 0 1
29777: PPUSH
29778: CALL_OW 266
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: IN
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 31429
// if name then
29798: LD_VAR 0 3
29802: IFFALSE 29818
// SetBName ( base_dep , name ) ;
29804: LD_VAR 0 1
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: CALL_OW 500
// base := GetBase ( base_dep ) ;
29818: LD_ADDR_VAR 0 15
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 274
29832: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29833: LD_ADDR_VAR 0 16
29837: PUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 255
29847: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29848: LD_ADDR_VAR 0 17
29852: PUSH
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 248
29862: ST_TO_ADDR
// if sources then
29863: LD_VAR 0 5
29867: IFFALSE 29914
// for i = 1 to 3 do
29869: LD_ADDR_VAR 0 8
29873: PUSH
29874: DOUBLE
29875: LD_INT 1
29877: DEC
29878: ST_TO_ADDR
29879: LD_INT 3
29881: PUSH
29882: FOR_TO
29883: IFFALSE 29912
// AddResourceType ( base , i , sources [ i ] ) ;
29885: LD_VAR 0 15
29889: PPUSH
29890: LD_VAR 0 8
29894: PPUSH
29895: LD_VAR 0 5
29899: PUSH
29900: LD_VAR 0 8
29904: ARRAY
29905: PPUSH
29906: CALL_OW 276
29910: GO 29882
29912: POP
29913: POP
// buildings := GetBaseBuildings ( base , area ) ;
29914: LD_ADDR_VAR 0 18
29918: PUSH
29919: LD_VAR 0 15
29923: PPUSH
29924: LD_VAR 0 2
29928: PPUSH
29929: CALL 29206 0 2
29933: ST_TO_ADDR
// InitHc ;
29934: CALL_OW 19
// InitUc ;
29938: CALL_OW 18
// uc_side := side ;
29942: LD_ADDR_OWVAR 20
29946: PUSH
29947: LD_VAR 0 16
29951: ST_TO_ADDR
// uc_nation := nation ;
29952: LD_ADDR_OWVAR 21
29956: PUSH
29957: LD_VAR 0 17
29961: ST_TO_ADDR
// if buildings then
29962: LD_VAR 0 18
29966: IFFALSE 31288
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29968: LD_ADDR_VAR 0 19
29972: PUSH
29973: LD_VAR 0 18
29977: PPUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 30
29983: PUSH
29984: LD_INT 29
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 30
29993: PUSH
29994: LD_INT 30
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 72
30010: ST_TO_ADDR
// if tmp then
30011: LD_VAR 0 19
30015: IFFALSE 30063
// for i in tmp do
30017: LD_ADDR_VAR 0 8
30021: PUSH
30022: LD_VAR 0 19
30026: PUSH
30027: FOR_IN
30028: IFFALSE 30061
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30030: LD_VAR 0 8
30034: PPUSH
30035: CALL_OW 250
30039: PPUSH
30040: LD_VAR 0 8
30044: PPUSH
30045: CALL_OW 251
30049: PPUSH
30050: LD_VAR 0 16
30054: PPUSH
30055: CALL_OW 441
30059: GO 30027
30061: POP
30062: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30063: LD_VAR 0 18
30067: PPUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 30
30073: PUSH
30074: LD_INT 32
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 30
30083: PUSH
30084: LD_INT 33
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 72
30100: IFFALSE 30188
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30102: LD_ADDR_VAR 0 8
30106: PUSH
30107: LD_VAR 0 18
30111: PPUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 30
30117: PUSH
30118: LD_INT 32
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 30
30127: PUSH
30128: LD_INT 33
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: PPUSH
30140: CALL_OW 72
30144: PUSH
30145: FOR_IN
30146: IFFALSE 30186
// begin if not GetBWeapon ( i ) then
30148: LD_VAR 0 8
30152: PPUSH
30153: CALL_OW 269
30157: NOT
30158: IFFALSE 30184
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30160: LD_VAR 0 8
30164: PPUSH
30165: LD_VAR 0 8
30169: PPUSH
30170: LD_VAR 0 2
30174: PPUSH
30175: CALL 31434 0 2
30179: PPUSH
30180: CALL_OW 431
// end ;
30184: GO 30145
30186: POP
30187: POP
// end ; for i = 1 to personel do
30188: LD_ADDR_VAR 0 8
30192: PUSH
30193: DOUBLE
30194: LD_INT 1
30196: DEC
30197: ST_TO_ADDR
30198: LD_VAR 0 6
30202: PUSH
30203: FOR_TO
30204: IFFALSE 31268
// begin if i > 4 then
30206: LD_VAR 0 8
30210: PUSH
30211: LD_INT 4
30213: GREATER
30214: IFFALSE 30218
// break ;
30216: GO 31268
// case i of 1 :
30218: LD_VAR 0 8
30222: PUSH
30223: LD_INT 1
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30311
30231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30232: LD_ADDR_VAR 0 12
30236: PUSH
30237: LD_VAR 0 18
30241: PPUSH
30242: LD_INT 22
30244: PUSH
30245: LD_VAR 0 16
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 58
30256: PUSH
30257: EMPTY
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 30
30265: PUSH
30266: LD_INT 32
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 30
30275: PUSH
30276: LD_INT 4
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 30
30285: PUSH
30286: LD_INT 5
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 72
30308: ST_TO_ADDR
30309: GO 30533
30311: LD_INT 2
30313: DOUBLE
30314: EQUAL
30315: IFTRUE 30319
30317: GO 30381
30319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30320: LD_ADDR_VAR 0 12
30324: PUSH
30325: LD_VAR 0 18
30329: PPUSH
30330: LD_INT 22
30332: PUSH
30333: LD_VAR 0 16
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 30
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 30
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PPUSH
30374: CALL_OW 72
30378: ST_TO_ADDR
30379: GO 30533
30381: LD_INT 3
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30451
30389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30390: LD_ADDR_VAR 0 12
30394: PUSH
30395: LD_VAR 0 18
30399: PPUSH
30400: LD_INT 22
30402: PUSH
30403: LD_VAR 0 16
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 30
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PPUSH
30444: CALL_OW 72
30448: ST_TO_ADDR
30449: GO 30533
30451: LD_INT 4
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30532
30459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30460: LD_ADDR_VAR 0 12
30464: PUSH
30465: LD_VAR 0 18
30469: PPUSH
30470: LD_INT 22
30472: PUSH
30473: LD_VAR 0 16
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: LD_INT 30
30487: PUSH
30488: LD_INT 6
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 30
30497: PUSH
30498: LD_INT 7
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 30
30507: PUSH
30508: LD_INT 8
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 72
30529: ST_TO_ADDR
30530: GO 30533
30532: POP
// if i = 1 then
30533: LD_VAR 0 8
30537: PUSH
30538: LD_INT 1
30540: EQUAL
30541: IFFALSE 30652
// begin tmp := [ ] ;
30543: LD_ADDR_VAR 0 19
30547: PUSH
30548: EMPTY
30549: ST_TO_ADDR
// for j in f do
30550: LD_ADDR_VAR 0 9
30554: PUSH
30555: LD_VAR 0 12
30559: PUSH
30560: FOR_IN
30561: IFFALSE 30634
// if GetBType ( j ) = b_bunker then
30563: LD_VAR 0 9
30567: PPUSH
30568: CALL_OW 266
30572: PUSH
30573: LD_INT 32
30575: EQUAL
30576: IFFALSE 30603
// tmp := Insert ( tmp , 1 , j ) else
30578: LD_ADDR_VAR 0 19
30582: PUSH
30583: LD_VAR 0 19
30587: PPUSH
30588: LD_INT 1
30590: PPUSH
30591: LD_VAR 0 9
30595: PPUSH
30596: CALL_OW 2
30600: ST_TO_ADDR
30601: GO 30632
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30603: LD_ADDR_VAR 0 19
30607: PUSH
30608: LD_VAR 0 19
30612: PPUSH
30613: LD_VAR 0 19
30617: PUSH
30618: LD_INT 1
30620: PLUS
30621: PPUSH
30622: LD_VAR 0 9
30626: PPUSH
30627: CALL_OW 2
30631: ST_TO_ADDR
30632: GO 30560
30634: POP
30635: POP
// if tmp then
30636: LD_VAR 0 19
30640: IFFALSE 30652
// f := tmp ;
30642: LD_ADDR_VAR 0 12
30646: PUSH
30647: LD_VAR 0 19
30651: ST_TO_ADDR
// end ; x := personel [ i ] ;
30652: LD_ADDR_VAR 0 13
30656: PUSH
30657: LD_VAR 0 6
30661: PUSH
30662: LD_VAR 0 8
30666: ARRAY
30667: ST_TO_ADDR
// if x = - 1 then
30668: LD_VAR 0 13
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: EQUAL
30677: IFFALSE 30886
// begin for j in f do
30679: LD_ADDR_VAR 0 9
30683: PUSH
30684: LD_VAR 0 12
30688: PUSH
30689: FOR_IN
30690: IFFALSE 30882
// repeat InitHc ;
30692: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30696: LD_VAR 0 9
30700: PPUSH
30701: CALL_OW 266
30705: PUSH
30706: LD_INT 5
30708: EQUAL
30709: IFFALSE 30779
// begin if UnitsInside ( j ) < 3 then
30711: LD_VAR 0 9
30715: PPUSH
30716: CALL_OW 313
30720: PUSH
30721: LD_INT 3
30723: LESS
30724: IFFALSE 30760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30726: LD_INT 0
30728: PPUSH
30729: LD_INT 5
30731: PUSH
30732: LD_INT 8
30734: PUSH
30735: LD_INT 9
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: PUSH
30743: LD_VAR 0 17
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 4
30753: PPUSH
30754: CALL_OW 380
30758: GO 30777
// PrepareHuman ( false , i , skill ) ;
30760: LD_INT 0
30762: PPUSH
30763: LD_VAR 0 8
30767: PPUSH
30768: LD_VAR 0 4
30772: PPUSH
30773: CALL_OW 380
// end else
30777: GO 30796
// PrepareHuman ( false , i , skill ) ;
30779: LD_INT 0
30781: PPUSH
30782: LD_VAR 0 8
30786: PPUSH
30787: LD_VAR 0 4
30791: PPUSH
30792: CALL_OW 380
// un := CreateHuman ;
30796: LD_ADDR_VAR 0 14
30800: PUSH
30801: CALL_OW 44
30805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30806: LD_ADDR_VAR 0 7
30810: PUSH
30811: LD_VAR 0 7
30815: PPUSH
30816: LD_INT 1
30818: PPUSH
30819: LD_VAR 0 14
30823: PPUSH
30824: CALL_OW 2
30828: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30829: LD_VAR 0 14
30833: PPUSH
30834: LD_VAR 0 9
30838: PPUSH
30839: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30843: LD_VAR 0 9
30847: PPUSH
30848: CALL_OW 313
30852: PUSH
30853: LD_INT 6
30855: EQUAL
30856: PUSH
30857: LD_VAR 0 9
30861: PPUSH
30862: CALL_OW 266
30866: PUSH
30867: LD_INT 32
30869: PUSH
30870: LD_INT 31
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: IN
30877: OR
30878: IFFALSE 30692
30880: GO 30689
30882: POP
30883: POP
// end else
30884: GO 31266
// for j = 1 to x do
30886: LD_ADDR_VAR 0 9
30890: PUSH
30891: DOUBLE
30892: LD_INT 1
30894: DEC
30895: ST_TO_ADDR
30896: LD_VAR 0 13
30900: PUSH
30901: FOR_TO
30902: IFFALSE 31264
// begin InitHc ;
30904: CALL_OW 19
// if not f then
30908: LD_VAR 0 12
30912: NOT
30913: IFFALSE 31002
// begin PrepareHuman ( false , i , skill ) ;
30915: LD_INT 0
30917: PPUSH
30918: LD_VAR 0 8
30922: PPUSH
30923: LD_VAR 0 4
30927: PPUSH
30928: CALL_OW 380
// un := CreateHuman ;
30932: LD_ADDR_VAR 0 14
30936: PUSH
30937: CALL_OW 44
30941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 7
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: LD_VAR 0 14
30959: PPUSH
30960: CALL_OW 2
30964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30965: LD_VAR 0 14
30969: PPUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 250
30979: PPUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: CALL_OW 251
30989: PPUSH
30990: LD_INT 10
30992: PPUSH
30993: LD_INT 0
30995: PPUSH
30996: CALL_OW 50
// continue ;
31000: GO 30901
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31002: LD_VAR 0 12
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: PPUSH
31011: CALL_OW 313
31015: PUSH
31016: LD_VAR 0 12
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: CALL_OW 266
31029: PUSH
31030: LD_INT 32
31032: PUSH
31033: LD_INT 31
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: IN
31040: AND
31041: PUSH
31042: LD_VAR 0 12
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: CALL_OW 313
31055: PUSH
31056: LD_INT 6
31058: EQUAL
31059: OR
31060: IFFALSE 31080
// f := Delete ( f , 1 ) ;
31062: LD_ADDR_VAR 0 12
31066: PUSH
31067: LD_VAR 0 12
31071: PPUSH
31072: LD_INT 1
31074: PPUSH
31075: CALL_OW 3
31079: ST_TO_ADDR
// if not f then
31080: LD_VAR 0 12
31084: NOT
31085: IFFALSE 31103
// begin x := x + 2 ;
31087: LD_ADDR_VAR 0 13
31091: PUSH
31092: LD_VAR 0 13
31096: PUSH
31097: LD_INT 2
31099: PLUS
31100: ST_TO_ADDR
// continue ;
31101: GO 30901
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31103: LD_VAR 0 12
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: CALL_OW 266
31116: PUSH
31117: LD_INT 5
31119: EQUAL
31120: IFFALSE 31194
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31122: LD_VAR 0 12
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: CALL_OW 313
31135: PUSH
31136: LD_INT 3
31138: LESS
31139: IFFALSE 31175
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31141: LD_INT 0
31143: PPUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 8
31149: PUSH
31150: LD_INT 9
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: PUSH
31158: LD_VAR 0 17
31162: ARRAY
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: CALL_OW 380
31173: GO 31192
// PrepareHuman ( false , i , skill ) ;
31175: LD_INT 0
31177: PPUSH
31178: LD_VAR 0 8
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: CALL_OW 380
// end else
31192: GO 31211
// PrepareHuman ( false , i , skill ) ;
31194: LD_INT 0
31196: PPUSH
31197: LD_VAR 0 8
31201: PPUSH
31202: LD_VAR 0 4
31206: PPUSH
31207: CALL_OW 380
// un := CreateHuman ;
31211: LD_ADDR_VAR 0 14
31215: PUSH
31216: CALL_OW 44
31220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31221: LD_ADDR_VAR 0 7
31225: PUSH
31226: LD_VAR 0 7
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: LD_VAR 0 14
31238: PPUSH
31239: CALL_OW 2
31243: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31244: LD_VAR 0 14
31248: PPUSH
31249: LD_VAR 0 12
31253: PUSH
31254: LD_INT 1
31256: ARRAY
31257: PPUSH
31258: CALL_OW 52
// end ;
31262: GO 30901
31264: POP
31265: POP
// end ;
31266: GO 30203
31268: POP
31269: POP
// result := result ^ buildings ;
31270: LD_ADDR_VAR 0 7
31274: PUSH
31275: LD_VAR 0 7
31279: PUSH
31280: LD_VAR 0 18
31284: ADD
31285: ST_TO_ADDR
// end else
31286: GO 31429
// begin for i = 1 to personel do
31288: LD_ADDR_VAR 0 8
31292: PUSH
31293: DOUBLE
31294: LD_INT 1
31296: DEC
31297: ST_TO_ADDR
31298: LD_VAR 0 6
31302: PUSH
31303: FOR_TO
31304: IFFALSE 31427
// begin if i > 4 then
31306: LD_VAR 0 8
31310: PUSH
31311: LD_INT 4
31313: GREATER
31314: IFFALSE 31318
// break ;
31316: GO 31427
// x := personel [ i ] ;
31318: LD_ADDR_VAR 0 13
31322: PUSH
31323: LD_VAR 0 6
31327: PUSH
31328: LD_VAR 0 8
31332: ARRAY
31333: ST_TO_ADDR
// if x = - 1 then
31334: LD_VAR 0 13
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: EQUAL
31343: IFFALSE 31347
// continue ;
31345: GO 31303
// PrepareHuman ( false , i , skill ) ;
31347: LD_INT 0
31349: PPUSH
31350: LD_VAR 0 8
31354: PPUSH
31355: LD_VAR 0 4
31359: PPUSH
31360: CALL_OW 380
// un := CreateHuman ;
31364: LD_ADDR_VAR 0 14
31368: PUSH
31369: CALL_OW 44
31373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31374: LD_VAR 0 14
31378: PPUSH
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 250
31388: PPUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 251
31398: PPUSH
31399: LD_INT 10
31401: PPUSH
31402: LD_INT 0
31404: PPUSH
31405: CALL_OW 50
// result := result ^ un ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 7
31418: PUSH
31419: LD_VAR 0 14
31423: ADD
31424: ST_TO_ADDR
// end ;
31425: GO 31303
31427: POP
31428: POP
// end ; end ;
31429: LD_VAR 0 7
31433: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31434: LD_INT 0
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
31451: PPUSH
// result := false ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_INT 0
31459: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31460: LD_VAR 0 1
31464: NOT
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 266
31475: PUSH
31476: LD_INT 32
31478: PUSH
31479: LD_INT 33
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: IN
31486: NOT
31487: OR
31488: IFFALSE 31492
// exit ;
31490: GO 32628
// nat := GetNation ( tower ) ;
31492: LD_ADDR_VAR 0 12
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 248
31506: ST_TO_ADDR
// side := GetSide ( tower ) ;
31507: LD_ADDR_VAR 0 16
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 255
31521: ST_TO_ADDR
// x := GetX ( tower ) ;
31522: LD_ADDR_VAR 0 10
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 250
31536: ST_TO_ADDR
// y := GetY ( tower ) ;
31537: LD_ADDR_VAR 0 11
31541: PUSH
31542: LD_VAR 0 1
31546: PPUSH
31547: CALL_OW 251
31551: ST_TO_ADDR
// if not x or not y then
31552: LD_VAR 0 10
31556: NOT
31557: PUSH
31558: LD_VAR 0 11
31562: NOT
31563: OR
31564: IFFALSE 31568
// exit ;
31566: GO 32628
// weapon := 0 ;
31568: LD_ADDR_VAR 0 18
31572: PUSH
31573: LD_INT 0
31575: ST_TO_ADDR
// fac_list := [ ] ;
31576: LD_ADDR_VAR 0 17
31580: PUSH
31581: EMPTY
31582: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31583: LD_ADDR_VAR 0 6
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 274
31597: PPUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL 29206 0 2
31607: PPUSH
31608: LD_INT 30
31610: PUSH
31611: LD_INT 3
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PPUSH
31618: CALL_OW 72
31622: ST_TO_ADDR
// if not factories then
31623: LD_VAR 0 6
31627: NOT
31628: IFFALSE 31632
// exit ;
31630: GO 32628
// for i in factories do
31632: LD_ADDR_VAR 0 8
31636: PUSH
31637: LD_VAR 0 6
31641: PUSH
31642: FOR_IN
31643: IFFALSE 31668
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31645: LD_ADDR_VAR 0 17
31649: PUSH
31650: LD_VAR 0 17
31654: PUSH
31655: LD_VAR 0 8
31659: PPUSH
31660: CALL_OW 478
31664: UNION
31665: ST_TO_ADDR
31666: GO 31642
31668: POP
31669: POP
// if not fac_list then
31670: LD_VAR 0 17
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 32628
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31679: LD_ADDR_VAR 0 5
31683: PUSH
31684: LD_INT 4
31686: PUSH
31687: LD_INT 5
31689: PUSH
31690: LD_INT 9
31692: PUSH
31693: LD_INT 10
31695: PUSH
31696: LD_INT 6
31698: PUSH
31699: LD_INT 7
31701: PUSH
31702: LD_INT 11
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 27
31716: PUSH
31717: LD_INT 28
31719: PUSH
31720: LD_INT 26
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 43
31734: PUSH
31735: LD_INT 44
31737: PUSH
31738: LD_INT 46
31740: PUSH
31741: LD_INT 45
31743: PUSH
31744: LD_INT 47
31746: PUSH
31747: LD_INT 49
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: LD_VAR 0 12
31767: ARRAY
31768: ST_TO_ADDR
// for i in list do
31769: LD_ADDR_VAR 0 8
31773: PUSH
31774: LD_VAR 0 5
31778: PUSH
31779: FOR_IN
31780: IFFALSE 31813
// if not i in fac_list then
31782: LD_VAR 0 8
31786: PUSH
31787: LD_VAR 0 17
31791: IN
31792: NOT
31793: IFFALSE 31811
// list := list diff i ;
31795: LD_ADDR_VAR 0 5
31799: PUSH
31800: LD_VAR 0 5
31804: PUSH
31805: LD_VAR 0 8
31809: DIFF
31810: ST_TO_ADDR
31811: GO 31779
31813: POP
31814: POP
// if not list then
31815: LD_VAR 0 5
31819: NOT
31820: IFFALSE 31824
// exit ;
31822: GO 32628
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31824: LD_VAR 0 12
31828: PUSH
31829: LD_INT 3
31831: EQUAL
31832: PUSH
31833: LD_INT 49
31835: PUSH
31836: LD_VAR 0 5
31840: IN
31841: AND
31842: PUSH
31843: LD_INT 31
31845: PPUSH
31846: LD_VAR 0 16
31850: PPUSH
31851: CALL_OW 321
31855: PUSH
31856: LD_INT 2
31858: EQUAL
31859: AND
31860: IFFALSE 31920
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31862: LD_INT 22
31864: PUSH
31865: LD_VAR 0 16
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 35
31876: PUSH
31877: LD_INT 49
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 91
31886: PUSH
31887: LD_VAR 0 1
31891: PUSH
31892: LD_INT 10
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: PPUSH
31905: CALL_OW 69
31909: NOT
31910: IFFALSE 31920
// weapon := ru_time_lapser ;
31912: LD_ADDR_VAR 0 18
31916: PUSH
31917: LD_INT 49
31919: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31920: LD_VAR 0 12
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: IN
31935: PUSH
31936: LD_INT 11
31938: PUSH
31939: LD_VAR 0 5
31943: IN
31944: PUSH
31945: LD_INT 30
31947: PUSH
31948: LD_VAR 0 5
31952: IN
31953: OR
31954: AND
31955: PUSH
31956: LD_INT 6
31958: PPUSH
31959: LD_VAR 0 16
31963: PPUSH
31964: CALL_OW 321
31968: PUSH
31969: LD_INT 2
31971: EQUAL
31972: AND
31973: IFFALSE 32138
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31975: LD_INT 22
31977: PUSH
31978: LD_VAR 0 16
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: LD_INT 35
31992: PUSH
31993: LD_INT 11
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 35
32002: PUSH
32003: LD_INT 30
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 91
32017: PUSH
32018: LD_VAR 0 1
32022: PUSH
32023: LD_INT 18
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: PPUSH
32036: CALL_OW 69
32040: NOT
32041: PUSH
32042: LD_INT 22
32044: PUSH
32045: LD_VAR 0 16
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 30
32059: PUSH
32060: LD_INT 32
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 30
32069: PUSH
32070: LD_INT 33
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 91
32084: PUSH
32085: LD_VAR 0 1
32089: PUSH
32090: LD_INT 12
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: PPUSH
32106: CALL_OW 69
32110: PUSH
32111: LD_INT 2
32113: GREATER
32114: AND
32115: IFFALSE 32138
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32117: LD_ADDR_VAR 0 18
32121: PUSH
32122: LD_INT 11
32124: PUSH
32125: LD_INT 30
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_VAR 0 12
32136: ARRAY
32137: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32138: LD_VAR 0 18
32142: NOT
32143: PUSH
32144: LD_INT 40
32146: PPUSH
32147: LD_VAR 0 16
32151: PPUSH
32152: CALL_OW 321
32156: PUSH
32157: LD_INT 2
32159: EQUAL
32160: AND
32161: PUSH
32162: LD_INT 7
32164: PUSH
32165: LD_VAR 0 5
32169: IN
32170: PUSH
32171: LD_INT 28
32173: PUSH
32174: LD_VAR 0 5
32178: IN
32179: OR
32180: PUSH
32181: LD_INT 45
32183: PUSH
32184: LD_VAR 0 5
32188: IN
32189: OR
32190: AND
32191: IFFALSE 32445
// begin hex := GetHexInfo ( x , y ) ;
32193: LD_ADDR_VAR 0 4
32197: PUSH
32198: LD_VAR 0 10
32202: PPUSH
32203: LD_VAR 0 11
32207: PPUSH
32208: CALL_OW 546
32212: ST_TO_ADDR
// if hex [ 1 ] then
32213: LD_VAR 0 4
32217: PUSH
32218: LD_INT 1
32220: ARRAY
32221: IFFALSE 32225
// exit ;
32223: GO 32628
// height := hex [ 2 ] ;
32225: LD_ADDR_VAR 0 15
32229: PUSH
32230: LD_VAR 0 4
32234: PUSH
32235: LD_INT 2
32237: ARRAY
32238: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32239: LD_ADDR_VAR 0 14
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: ST_TO_ADDR
// for i in tmp do
32262: LD_ADDR_VAR 0 8
32266: PUSH
32267: LD_VAR 0 14
32271: PUSH
32272: FOR_IN
32273: IFFALSE 32443
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32275: LD_ADDR_VAR 0 9
32279: PUSH
32280: LD_VAR 0 10
32284: PPUSH
32285: LD_VAR 0 8
32289: PPUSH
32290: LD_INT 5
32292: PPUSH
32293: CALL_OW 272
32297: PUSH
32298: LD_VAR 0 11
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_INT 5
32310: PPUSH
32311: CALL_OW 273
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32320: LD_VAR 0 9
32324: PUSH
32325: LD_INT 1
32327: ARRAY
32328: PPUSH
32329: LD_VAR 0 9
32333: PUSH
32334: LD_INT 2
32336: ARRAY
32337: PPUSH
32338: CALL_OW 488
32342: IFFALSE 32441
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32344: LD_ADDR_VAR 0 4
32348: PUSH
32349: LD_VAR 0 9
32353: PUSH
32354: LD_INT 1
32356: ARRAY
32357: PPUSH
32358: LD_VAR 0 9
32362: PUSH
32363: LD_INT 2
32365: ARRAY
32366: PPUSH
32367: CALL_OW 546
32371: ST_TO_ADDR
// if hex [ 1 ] then
32372: LD_VAR 0 4
32376: PUSH
32377: LD_INT 1
32379: ARRAY
32380: IFFALSE 32384
// continue ;
32382: GO 32272
// h := hex [ 2 ] ;
32384: LD_ADDR_VAR 0 13
32388: PUSH
32389: LD_VAR 0 4
32393: PUSH
32394: LD_INT 2
32396: ARRAY
32397: ST_TO_ADDR
// if h + 7 < height then
32398: LD_VAR 0 13
32402: PUSH
32403: LD_INT 7
32405: PLUS
32406: PUSH
32407: LD_VAR 0 15
32411: LESS
32412: IFFALSE 32441
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32414: LD_ADDR_VAR 0 18
32418: PUSH
32419: LD_INT 7
32421: PUSH
32422: LD_INT 28
32424: PUSH
32425: LD_INT 45
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: PUSH
32433: LD_VAR 0 12
32437: ARRAY
32438: ST_TO_ADDR
// break ;
32439: GO 32443
// end ; end ; end ;
32441: GO 32272
32443: POP
32444: POP
// end ; if not weapon then
32445: LD_VAR 0 18
32449: NOT
32450: IFFALSE 32510
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32452: LD_ADDR_VAR 0 5
32456: PUSH
32457: LD_VAR 0 5
32461: PUSH
32462: LD_INT 11
32464: PUSH
32465: LD_INT 30
32467: PUSH
32468: LD_INT 49
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: DIFF
32476: ST_TO_ADDR
// if not list then
32477: LD_VAR 0 5
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32628
// weapon := list [ rand ( 1 , list ) ] ;
32486: LD_ADDR_VAR 0 18
32490: PUSH
32491: LD_VAR 0 5
32495: PUSH
32496: LD_INT 1
32498: PPUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: CALL_OW 12
32508: ARRAY
32509: ST_TO_ADDR
// end ; if weapon then
32510: LD_VAR 0 18
32514: IFFALSE 32628
// begin tmp := CostOfWeapon ( weapon ) ;
32516: LD_ADDR_VAR 0 14
32520: PUSH
32521: LD_VAR 0 18
32525: PPUSH
32526: CALL_OW 451
32530: ST_TO_ADDR
// j := GetBase ( tower ) ;
32531: LD_ADDR_VAR 0 9
32535: PUSH
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 274
32545: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32546: LD_VAR 0 9
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 275
32558: PUSH
32559: LD_VAR 0 14
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: GREATEREQUAL
32568: PUSH
32569: LD_VAR 0 9
32573: PPUSH
32574: LD_INT 2
32576: PPUSH
32577: CALL_OW 275
32581: PUSH
32582: LD_VAR 0 14
32586: PUSH
32587: LD_INT 2
32589: ARRAY
32590: GREATEREQUAL
32591: AND
32592: PUSH
32593: LD_VAR 0 9
32597: PPUSH
32598: LD_INT 3
32600: PPUSH
32601: CALL_OW 275
32605: PUSH
32606: LD_VAR 0 14
32610: PUSH
32611: LD_INT 3
32613: ARRAY
32614: GREATEREQUAL
32615: AND
32616: IFFALSE 32628
// result := weapon ;
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_VAR 0 18
32627: ST_TO_ADDR
// end ; end ;
32628: LD_VAR 0 3
32632: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
// result := true ;
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 1
32644: ST_TO_ADDR
// if array1 = array2 then
32645: LD_VAR 0 1
32649: PUSH
32650: LD_VAR 0 2
32654: EQUAL
32655: IFFALSE 32715
// begin for i = 1 to array1 do
32657: LD_ADDR_VAR 0 4
32661: PUSH
32662: DOUBLE
32663: LD_INT 1
32665: DEC
32666: ST_TO_ADDR
32667: LD_VAR 0 1
32671: PUSH
32672: FOR_TO
32673: IFFALSE 32711
// if array1 [ i ] <> array2 [ i ] then
32675: LD_VAR 0 1
32679: PUSH
32680: LD_VAR 0 4
32684: ARRAY
32685: PUSH
32686: LD_VAR 0 2
32690: PUSH
32691: LD_VAR 0 4
32695: ARRAY
32696: NONEQUAL
32697: IFFALSE 32709
// begin result := false ;
32699: LD_ADDR_VAR 0 3
32703: PUSH
32704: LD_INT 0
32706: ST_TO_ADDR
// break ;
32707: GO 32711
// end ;
32709: GO 32672
32711: POP
32712: POP
// end else
32713: GO 32723
// result := false ;
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 0
32722: ST_TO_ADDR
// end ;
32723: LD_VAR 0 3
32727: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
32732: PPUSH
// pom := GetBase ( fac ) ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_VAR 0 1
32742: PPUSH
32743: CALL_OW 274
32747: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32748: LD_ADDR_VAR 0 4
32752: PUSH
32753: LD_VAR 0 2
32757: PUSH
32758: LD_INT 1
32760: ARRAY
32761: PPUSH
32762: LD_VAR 0 2
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: PPUSH
32771: LD_VAR 0 2
32775: PUSH
32776: LD_INT 3
32778: ARRAY
32779: PPUSH
32780: LD_VAR 0 2
32784: PUSH
32785: LD_INT 4
32787: ARRAY
32788: PPUSH
32789: CALL_OW 449
32793: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32794: LD_ADDR_VAR 0 3
32798: PUSH
32799: LD_VAR 0 5
32803: PPUSH
32804: LD_INT 1
32806: PPUSH
32807: CALL_OW 275
32811: PUSH
32812: LD_VAR 0 4
32816: PUSH
32817: LD_INT 1
32819: ARRAY
32820: GREATEREQUAL
32821: PUSH
32822: LD_VAR 0 5
32826: PPUSH
32827: LD_INT 2
32829: PPUSH
32830: CALL_OW 275
32834: PUSH
32835: LD_VAR 0 4
32839: PUSH
32840: LD_INT 2
32842: ARRAY
32843: GREATEREQUAL
32844: AND
32845: PUSH
32846: LD_VAR 0 5
32850: PPUSH
32851: LD_INT 3
32853: PPUSH
32854: CALL_OW 275
32858: PUSH
32859: LD_VAR 0 4
32863: PUSH
32864: LD_INT 3
32866: ARRAY
32867: GREATEREQUAL
32868: AND
32869: ST_TO_ADDR
// end ;
32870: LD_VAR 0 3
32874: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32875: LD_INT 0
32877: PPUSH
32878: PPUSH
32879: PPUSH
32880: PPUSH
// pom := GetBase ( building ) ;
32881: LD_ADDR_VAR 0 3
32885: PUSH
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 274
32895: ST_TO_ADDR
// if not pom then
32896: LD_VAR 0 3
32900: NOT
32901: IFFALSE 32905
// exit ;
32903: GO 33075
// btype := GetBType ( building ) ;
32905: LD_ADDR_VAR 0 5
32909: PUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 266
32919: ST_TO_ADDR
// if btype = b_armoury then
32920: LD_VAR 0 5
32924: PUSH
32925: LD_INT 4
32927: EQUAL
32928: IFFALSE 32938
// btype := b_barracks ;
32930: LD_ADDR_VAR 0 5
32934: PUSH
32935: LD_INT 5
32937: ST_TO_ADDR
// if btype = b_depot then
32938: LD_VAR 0 5
32942: PUSH
32943: LD_INT 0
32945: EQUAL
32946: IFFALSE 32956
// btype := b_warehouse ;
32948: LD_ADDR_VAR 0 5
32952: PUSH
32953: LD_INT 1
32955: ST_TO_ADDR
// if btype = b_workshop then
32956: LD_VAR 0 5
32960: PUSH
32961: LD_INT 2
32963: EQUAL
32964: IFFALSE 32974
// btype := b_factory ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_INT 3
32973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32974: LD_ADDR_VAR 0 4
32978: PUSH
32979: LD_VAR 0 5
32983: PPUSH
32984: LD_VAR 0 1
32988: PPUSH
32989: CALL_OW 248
32993: PPUSH
32994: CALL_OW 450
32998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32999: LD_ADDR_VAR 0 2
33003: PUSH
33004: LD_VAR 0 3
33008: PPUSH
33009: LD_INT 1
33011: PPUSH
33012: CALL_OW 275
33016: PUSH
33017: LD_VAR 0 4
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: GREATEREQUAL
33026: PUSH
33027: LD_VAR 0 3
33031: PPUSH
33032: LD_INT 2
33034: PPUSH
33035: CALL_OW 275
33039: PUSH
33040: LD_VAR 0 4
33044: PUSH
33045: LD_INT 2
33047: ARRAY
33048: GREATEREQUAL
33049: AND
33050: PUSH
33051: LD_VAR 0 3
33055: PPUSH
33056: LD_INT 3
33058: PPUSH
33059: CALL_OW 275
33063: PUSH
33064: LD_VAR 0 4
33068: PUSH
33069: LD_INT 3
33071: ARRAY
33072: GREATEREQUAL
33073: AND
33074: ST_TO_ADDR
// end ;
33075: LD_VAR 0 2
33079: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
// pom := GetBase ( building ) ;
33085: LD_ADDR_VAR 0 4
33089: PUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: CALL_OW 274
33099: ST_TO_ADDR
// if not pom then
33100: LD_VAR 0 4
33104: NOT
33105: IFFALSE 33109
// exit ;
33107: GO 33210
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33109: LD_ADDR_VAR 0 5
33113: PUSH
33114: LD_VAR 0 2
33118: PPUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 248
33128: PPUSH
33129: CALL_OW 450
33133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_VAR 0 4
33143: PPUSH
33144: LD_INT 1
33146: PPUSH
33147: CALL_OW 275
33151: PUSH
33152: LD_VAR 0 5
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: GREATEREQUAL
33161: PUSH
33162: LD_VAR 0 4
33166: PPUSH
33167: LD_INT 2
33169: PPUSH
33170: CALL_OW 275
33174: PUSH
33175: LD_VAR 0 5
33179: PUSH
33180: LD_INT 2
33182: ARRAY
33183: GREATEREQUAL
33184: AND
33185: PUSH
33186: LD_VAR 0 4
33190: PPUSH
33191: LD_INT 3
33193: PPUSH
33194: CALL_OW 275
33198: PUSH
33199: LD_VAR 0 5
33203: PUSH
33204: LD_INT 3
33206: ARRAY
33207: GREATEREQUAL
33208: AND
33209: ST_TO_ADDR
// end ;
33210: LD_VAR 0 3
33214: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33215: LD_INT 0
33217: PPUSH
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
// result := false ;
33227: LD_ADDR_VAR 0 6
33231: PUSH
33232: LD_INT 0
33234: ST_TO_ADDR
// if not base or not btype or not x or not y then
33235: LD_VAR 0 1
33239: NOT
33240: PUSH
33241: LD_VAR 0 2
33245: NOT
33246: OR
33247: PUSH
33248: LD_VAR 0 3
33252: NOT
33253: OR
33254: PUSH
33255: LD_VAR 0 4
33259: NOT
33260: OR
33261: IFFALSE 33265
// exit ;
33263: GO 33874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33265: LD_ADDR_VAR 0 12
33269: PUSH
33270: LD_VAR 0 2
33274: PPUSH
33275: LD_VAR 0 3
33279: PPUSH
33280: LD_VAR 0 4
33284: PPUSH
33285: LD_VAR 0 5
33289: PPUSH
33290: LD_VAR 0 1
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: CALL_OW 248
33303: PPUSH
33304: LD_INT 0
33306: PPUSH
33307: CALL 34711 0 6
33311: ST_TO_ADDR
// if not hexes then
33312: LD_VAR 0 12
33316: NOT
33317: IFFALSE 33321
// exit ;
33319: GO 33874
// for i = 1 to hexes do
33321: LD_ADDR_VAR 0 7
33325: PUSH
33326: DOUBLE
33327: LD_INT 1
33329: DEC
33330: ST_TO_ADDR
33331: LD_VAR 0 12
33335: PUSH
33336: FOR_TO
33337: IFFALSE 33872
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33339: LD_ADDR_VAR 0 11
33343: PUSH
33344: LD_VAR 0 12
33348: PUSH
33349: LD_VAR 0 7
33353: ARRAY
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: PPUSH
33359: LD_VAR 0 12
33363: PUSH
33364: LD_VAR 0 7
33368: ARRAY
33369: PUSH
33370: LD_INT 2
33372: ARRAY
33373: PPUSH
33374: CALL_OW 428
33378: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33379: LD_VAR 0 12
33383: PUSH
33384: LD_VAR 0 7
33388: ARRAY
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: PPUSH
33394: LD_VAR 0 12
33398: PUSH
33399: LD_VAR 0 7
33403: ARRAY
33404: PUSH
33405: LD_INT 2
33407: ARRAY
33408: PPUSH
33409: CALL_OW 351
33413: PUSH
33414: LD_VAR 0 12
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PUSH
33425: LD_INT 1
33427: ARRAY
33428: PPUSH
33429: LD_VAR 0 12
33433: PUSH
33434: LD_VAR 0 7
33438: ARRAY
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: PPUSH
33444: CALL_OW 488
33448: NOT
33449: OR
33450: PUSH
33451: LD_VAR 0 11
33455: PPUSH
33456: CALL_OW 247
33460: PUSH
33461: LD_INT 3
33463: EQUAL
33464: OR
33465: IFFALSE 33471
// exit ;
33467: POP
33468: POP
33469: GO 33874
// if not tmp or not tmp in base then
33471: LD_VAR 0 11
33475: NOT
33476: PUSH
33477: LD_VAR 0 11
33481: PUSH
33482: LD_VAR 0 1
33486: IN
33487: NOT
33488: OR
33489: IFFALSE 33493
// continue ;
33491: GO 33336
// result := true ;
33493: LD_ADDR_VAR 0 6
33497: PUSH
33498: LD_INT 1
33500: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33501: LD_ADDR_VAR 0 15
33505: PUSH
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_INT 22
33513: PUSH
33514: LD_VAR 0 11
33518: PPUSH
33519: CALL_OW 255
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 30
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 30
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PPUSH
33560: CALL_OW 72
33564: ST_TO_ADDR
// if dep then
33565: LD_VAR 0 15
33569: IFFALSE 33705
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33571: LD_ADDR_VAR 0 14
33575: PUSH
33576: LD_VAR 0 15
33580: PUSH
33581: LD_INT 1
33583: ARRAY
33584: PPUSH
33585: CALL_OW 250
33589: PPUSH
33590: LD_VAR 0 15
33594: PUSH
33595: LD_INT 1
33597: ARRAY
33598: PPUSH
33599: CALL_OW 254
33603: PPUSH
33604: LD_INT 5
33606: PPUSH
33607: CALL_OW 272
33611: PUSH
33612: LD_VAR 0 15
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: PPUSH
33621: CALL_OW 251
33625: PPUSH
33626: LD_VAR 0 15
33630: PUSH
33631: LD_INT 1
33633: ARRAY
33634: PPUSH
33635: CALL_OW 254
33639: PPUSH
33640: LD_INT 5
33642: PPUSH
33643: CALL_OW 273
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33652: LD_VAR 0 14
33656: PUSH
33657: LD_INT 1
33659: ARRAY
33660: PPUSH
33661: LD_VAR 0 14
33665: PUSH
33666: LD_INT 2
33668: ARRAY
33669: PPUSH
33670: CALL_OW 488
33674: IFFALSE 33705
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33676: LD_VAR 0 11
33680: PPUSH
33681: LD_VAR 0 14
33685: PUSH
33686: LD_INT 1
33688: ARRAY
33689: PPUSH
33690: LD_VAR 0 14
33694: PUSH
33695: LD_INT 2
33697: ARRAY
33698: PPUSH
33699: CALL_OW 111
// continue ;
33703: GO 33336
// end ; end ; r := GetDir ( tmp ) ;
33705: LD_ADDR_VAR 0 13
33709: PUSH
33710: LD_VAR 0 11
33714: PPUSH
33715: CALL_OW 254
33719: ST_TO_ADDR
// if r = 5 then
33720: LD_VAR 0 13
33724: PUSH
33725: LD_INT 5
33727: EQUAL
33728: IFFALSE 33738
// r := 0 ;
33730: LD_ADDR_VAR 0 13
33734: PUSH
33735: LD_INT 0
33737: ST_TO_ADDR
// for j = r to 5 do
33738: LD_ADDR_VAR 0 8
33742: PUSH
33743: DOUBLE
33744: LD_VAR 0 13
33748: DEC
33749: ST_TO_ADDR
33750: LD_INT 5
33752: PUSH
33753: FOR_TO
33754: IFFALSE 33868
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33756: LD_ADDR_VAR 0 9
33760: PUSH
33761: LD_VAR 0 11
33765: PPUSH
33766: CALL_OW 250
33770: PPUSH
33771: LD_VAR 0 8
33775: PPUSH
33776: LD_INT 2
33778: PPUSH
33779: CALL_OW 272
33783: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33784: LD_ADDR_VAR 0 10
33788: PUSH
33789: LD_VAR 0 11
33793: PPUSH
33794: CALL_OW 251
33798: PPUSH
33799: LD_VAR 0 8
33803: PPUSH
33804: LD_INT 2
33806: PPUSH
33807: CALL_OW 273
33811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33812: LD_VAR 0 9
33816: PPUSH
33817: LD_VAR 0 10
33821: PPUSH
33822: CALL_OW 488
33826: PUSH
33827: LD_VAR 0 9
33831: PPUSH
33832: LD_VAR 0 10
33836: PPUSH
33837: CALL_OW 428
33841: NOT
33842: AND
33843: IFFALSE 33866
// begin ComMoveXY ( tmp , _x , _y ) ;
33845: LD_VAR 0 11
33849: PPUSH
33850: LD_VAR 0 9
33854: PPUSH
33855: LD_VAR 0 10
33859: PPUSH
33860: CALL_OW 111
// break ;
33864: GO 33868
// end ; end ;
33866: GO 33753
33868: POP
33869: POP
// end ;
33870: GO 33336
33872: POP
33873: POP
// end ;
33874: LD_VAR 0 6
33878: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33879: LD_INT 0
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
// result := false ;
33891: LD_ADDR_VAR 0 6
33895: PUSH
33896: LD_INT 0
33898: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33899: LD_VAR 0 1
33903: NOT
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 266
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: IN
33925: NOT
33926: OR
33927: PUSH
33928: LD_VAR 0 2
33932: NOT
33933: OR
33934: PUSH
33935: LD_VAR 0 5
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: IN
33966: NOT
33967: OR
33968: PUSH
33969: LD_VAR 0 3
33973: PPUSH
33974: LD_VAR 0 4
33978: PPUSH
33979: CALL_OW 488
33983: NOT
33984: OR
33985: IFFALSE 33989
// exit ;
33987: GO 34706
// pom := GetBase ( depot ) ;
33989: LD_ADDR_VAR 0 10
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 274
34003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34004: LD_ADDR_VAR 0 11
34008: PUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 248
34023: PPUSH
34024: CALL_OW 450
34028: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34029: LD_VAR 0 10
34033: PPUSH
34034: LD_INT 1
34036: PPUSH
34037: CALL_OW 275
34041: PUSH
34042: LD_VAR 0 11
34046: PUSH
34047: LD_INT 1
34049: ARRAY
34050: GREATEREQUAL
34051: PUSH
34052: LD_VAR 0 10
34056: PPUSH
34057: LD_INT 2
34059: PPUSH
34060: CALL_OW 275
34064: PUSH
34065: LD_VAR 0 11
34069: PUSH
34070: LD_INT 2
34072: ARRAY
34073: GREATEREQUAL
34074: AND
34075: PUSH
34076: LD_VAR 0 10
34080: PPUSH
34081: LD_INT 3
34083: PPUSH
34084: CALL_OW 275
34088: PUSH
34089: LD_VAR 0 11
34093: PUSH
34094: LD_INT 3
34096: ARRAY
34097: GREATEREQUAL
34098: AND
34099: NOT
34100: IFFALSE 34104
// exit ;
34102: GO 34706
// if GetBType ( depot ) = b_depot then
34104: LD_VAR 0 1
34108: PPUSH
34109: CALL_OW 266
34113: PUSH
34114: LD_INT 0
34116: EQUAL
34117: IFFALSE 34129
// dist := 28 else
34119: LD_ADDR_VAR 0 14
34123: PUSH
34124: LD_INT 28
34126: ST_TO_ADDR
34127: GO 34137
// dist := 36 ;
34129: LD_ADDR_VAR 0 14
34133: PUSH
34134: LD_INT 36
34136: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34137: LD_VAR 0 1
34141: PPUSH
34142: LD_VAR 0 3
34146: PPUSH
34147: LD_VAR 0 4
34151: PPUSH
34152: CALL_OW 297
34156: PUSH
34157: LD_VAR 0 14
34161: GREATER
34162: IFFALSE 34166
// exit ;
34164: GO 34706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34166: LD_ADDR_VAR 0 12
34170: PUSH
34171: LD_VAR 0 2
34175: PPUSH
34176: LD_VAR 0 3
34180: PPUSH
34181: LD_VAR 0 4
34185: PPUSH
34186: LD_VAR 0 5
34190: PPUSH
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 248
34200: PPUSH
34201: LD_INT 0
34203: PPUSH
34204: CALL 34711 0 6
34208: ST_TO_ADDR
// if not hexes then
34209: LD_VAR 0 12
34213: NOT
34214: IFFALSE 34218
// exit ;
34216: GO 34706
// hex := GetHexInfo ( x , y ) ;
34218: LD_ADDR_VAR 0 15
34222: PUSH
34223: LD_VAR 0 3
34227: PPUSH
34228: LD_VAR 0 4
34232: PPUSH
34233: CALL_OW 546
34237: ST_TO_ADDR
// if hex [ 1 ] then
34238: LD_VAR 0 15
34242: PUSH
34243: LD_INT 1
34245: ARRAY
34246: IFFALSE 34250
// exit ;
34248: GO 34706
// height := hex [ 2 ] ;
34250: LD_ADDR_VAR 0 13
34254: PUSH
34255: LD_VAR 0 15
34259: PUSH
34260: LD_INT 2
34262: ARRAY
34263: ST_TO_ADDR
// for i = 1 to hexes do
34264: LD_ADDR_VAR 0 7
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 12
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34610
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34282: LD_VAR 0 12
34286: PUSH
34287: LD_VAR 0 7
34291: ARRAY
34292: PUSH
34293: LD_INT 1
34295: ARRAY
34296: PPUSH
34297: LD_VAR 0 12
34301: PUSH
34302: LD_VAR 0 7
34306: ARRAY
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: PPUSH
34312: CALL_OW 488
34316: NOT
34317: PUSH
34318: LD_VAR 0 12
34322: PUSH
34323: LD_VAR 0 7
34327: ARRAY
34328: PUSH
34329: LD_INT 1
34331: ARRAY
34332: PPUSH
34333: LD_VAR 0 12
34337: PUSH
34338: LD_VAR 0 7
34342: ARRAY
34343: PUSH
34344: LD_INT 2
34346: ARRAY
34347: PPUSH
34348: CALL_OW 428
34352: PUSH
34353: LD_INT 0
34355: GREATER
34356: OR
34357: PUSH
34358: LD_VAR 0 12
34362: PUSH
34363: LD_VAR 0 7
34367: ARRAY
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: LD_VAR 0 12
34377: PUSH
34378: LD_VAR 0 7
34382: ARRAY
34383: PUSH
34384: LD_INT 2
34386: ARRAY
34387: PPUSH
34388: CALL_OW 351
34392: OR
34393: IFFALSE 34399
// exit ;
34395: POP
34396: POP
34397: GO 34706
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34399: LD_ADDR_VAR 0 8
34403: PUSH
34404: LD_VAR 0 12
34408: PUSH
34409: LD_VAR 0 7
34413: ARRAY
34414: PUSH
34415: LD_INT 1
34417: ARRAY
34418: PPUSH
34419: LD_VAR 0 12
34423: PUSH
34424: LD_VAR 0 7
34428: ARRAY
34429: PUSH
34430: LD_INT 2
34432: ARRAY
34433: PPUSH
34434: CALL_OW 546
34438: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34439: LD_VAR 0 8
34443: PUSH
34444: LD_INT 1
34446: ARRAY
34447: PUSH
34448: LD_VAR 0 8
34452: PUSH
34453: LD_INT 2
34455: ARRAY
34456: PUSH
34457: LD_VAR 0 13
34461: PUSH
34462: LD_INT 2
34464: PLUS
34465: GREATER
34466: OR
34467: PUSH
34468: LD_VAR 0 8
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PUSH
34477: LD_VAR 0 13
34481: PUSH
34482: LD_INT 2
34484: MINUS
34485: LESS
34486: OR
34487: PUSH
34488: LD_VAR 0 8
34492: PUSH
34493: LD_INT 3
34495: ARRAY
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 8
34502: PUSH
34503: LD_INT 9
34505: PUSH
34506: LD_INT 10
34508: PUSH
34509: LD_INT 11
34511: PUSH
34512: LD_INT 12
34514: PUSH
34515: LD_INT 13
34517: PUSH
34518: LD_INT 16
34520: PUSH
34521: LD_INT 17
34523: PUSH
34524: LD_INT 18
34526: PUSH
34527: LD_INT 19
34529: PUSH
34530: LD_INT 20
34532: PUSH
34533: LD_INT 21
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: IN
34551: NOT
34552: OR
34553: PUSH
34554: LD_VAR 0 8
34558: PUSH
34559: LD_INT 5
34561: ARRAY
34562: NOT
34563: OR
34564: PUSH
34565: LD_VAR 0 8
34569: PUSH
34570: LD_INT 6
34572: ARRAY
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 7
34582: PUSH
34583: LD_INT 9
34585: PUSH
34586: LD_INT 10
34588: PUSH
34589: LD_INT 11
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: IN
34600: NOT
34601: OR
34602: IFFALSE 34608
// exit ;
34604: POP
34605: POP
34606: GO 34706
// end ;
34608: GO 34279
34610: POP
34611: POP
// side := GetSide ( depot ) ;
34612: LD_ADDR_VAR 0 9
34616: PUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 255
34626: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34627: LD_VAR 0 9
34631: PPUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: LD_VAR 0 4
34641: PPUSH
34642: LD_INT 20
34644: PPUSH
34645: CALL 27360 0 4
34649: PUSH
34650: LD_INT 4
34652: ARRAY
34653: IFFALSE 34657
// exit ;
34655: GO 34706
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34657: LD_VAR 0 2
34661: PUSH
34662: LD_INT 29
34664: PUSH
34665: LD_INT 30
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: IN
34672: PUSH
34673: LD_VAR 0 3
34677: PPUSH
34678: LD_VAR 0 4
34682: PPUSH
34683: LD_VAR 0 9
34687: PPUSH
34688: CALL_OW 440
34692: NOT
34693: AND
34694: IFFALSE 34698
// exit ;
34696: GO 34706
// result := true ;
34698: LD_ADDR_VAR 0 6
34702: PUSH
34703: LD_INT 1
34705: ST_TO_ADDR
// end ;
34706: LD_VAR 0 6
34710: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34711: LD_INT 0
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
// result = [ ] ;
34771: LD_ADDR_VAR 0 7
34775: PUSH
34776: EMPTY
34777: ST_TO_ADDR
// temp_list = [ ] ;
34778: LD_ADDR_VAR 0 9
34782: PUSH
34783: EMPTY
34784: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34785: LD_VAR 0 4
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: IN
34816: NOT
34817: PUSH
34818: LD_VAR 0 1
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: IN
34833: PUSH
34834: LD_VAR 0 5
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: IN
34853: NOT
34854: AND
34855: OR
34856: IFFALSE 34860
// exit ;
34858: GO 53251
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34860: LD_VAR 0 1
34864: PUSH
34865: LD_INT 6
34867: PUSH
34868: LD_INT 7
34870: PUSH
34871: LD_INT 8
34873: PUSH
34874: LD_INT 13
34876: PUSH
34877: LD_INT 12
34879: PUSH
34880: LD_INT 15
34882: PUSH
34883: LD_INT 11
34885: PUSH
34886: LD_INT 14
34888: PUSH
34889: LD_INT 10
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: IN
34903: IFFALSE 34913
// btype = b_lab ;
34905: LD_ADDR_VAR 0 1
34909: PUSH
34910: LD_INT 6
34912: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34913: LD_VAR 0 6
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: IN
34932: NOT
34933: PUSH
34934: LD_VAR 0 1
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 6
34953: PUSH
34954: LD_INT 36
34956: PUSH
34957: LD_INT 4
34959: PUSH
34960: LD_INT 5
34962: PUSH
34963: LD_INT 31
34965: PUSH
34966: LD_INT 32
34968: PUSH
34969: LD_INT 33
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: IN
34985: NOT
34986: PUSH
34987: LD_VAR 0 6
34991: PUSH
34992: LD_INT 1
34994: EQUAL
34995: AND
34996: OR
34997: PUSH
34998: LD_VAR 0 1
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: IN
35013: NOT
35014: PUSH
35015: LD_VAR 0 6
35019: PUSH
35020: LD_INT 2
35022: EQUAL
35023: AND
35024: OR
35025: IFFALSE 35035
// mode = 0 ;
35027: LD_ADDR_VAR 0 6
35031: PUSH
35032: LD_INT 0
35034: ST_TO_ADDR
// case mode of 0 :
35035: LD_VAR 0 6
35039: PUSH
35040: LD_INT 0
35042: DOUBLE
35043: EQUAL
35044: IFTRUE 35048
35046: GO 46501
35048: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35049: LD_ADDR_VAR 0 11
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: LD_INT 3
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 3
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35242: LD_ADDR_VAR 0 12
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: NEG
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: NEG
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35438: LD_ADDR_VAR 0 13
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: LD_INT 3
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 3
35597: NEG
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: LD_INT 3
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35637: LD_ADDR_VAR 0 14
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 3
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 3
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35833: LD_ADDR_VAR 0 15
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 2
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 3
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36026: LD_ADDR_VAR 0 16
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: LD_INT 3
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36219: LD_ADDR_VAR 0 17
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36449: LD_ADDR_VAR 0 18
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 2
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36679: LD_ADDR_VAR 0 19
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36909: LD_ADDR_VAR 0 20
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37139: LD_ADDR_VAR 0 21
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37369: LD_ADDR_VAR 0 22
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37599: LD_ADDR_VAR 0 23
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37879: LD_ADDR_VAR 0 24
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 2
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 3
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38155: LD_ADDR_VAR 0 25
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38429: LD_ADDR_VAR 0 26
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38705: LD_ADDR_VAR 0 27
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38985: LD_ADDR_VAR 0 28
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 2
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 3
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 3
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39267: LD_ADDR_VAR 0 29
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: NEG
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39546: LD_ADDR_VAR 0 30
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39824: LD_ADDR_VAR 0 31
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 3
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 3
40067: NEG
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40102: LD_ADDR_VAR 0 32
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 3
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40380: LD_ADDR_VAR 0 33
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: NEG
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40659: LD_ADDR_VAR 0 34
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 3
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 3
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40939: LD_ADDR_VAR 0 35
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41051: LD_ADDR_VAR 0 36
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41163: LD_ADDR_VAR 0 37
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41275: LD_ADDR_VAR 0 38
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41387: LD_ADDR_VAR 0 39
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41499: LD_ADDR_VAR 0 40
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41611: LD_ADDR_VAR 0 41
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 3
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41961: LD_ADDR_VAR 0 42
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42311: LD_ADDR_VAR 0 43
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 3
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42659: LD_ADDR_VAR 0 44
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: LD_INT 3
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: LD_INT 3
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43009: LD_ADDR_VAR 0 45
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43359: LD_ADDR_VAR 0 46
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 3
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 3
43655: NEG
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43707: LD_ADDR_VAR 0 47
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43858: LD_ADDR_VAR 0 48
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44005: LD_ADDR_VAR 0 49
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44149: LD_ADDR_VAR 0 50
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44293: LD_ADDR_VAR 0 51
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44440: LD_ADDR_VAR 0 52
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44591: LD_ADDR_VAR 0 53
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44821: LD_ADDR_VAR 0 54
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45051: LD_ADDR_VAR 0 55
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45281: LD_ADDR_VAR 0 56
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45511: LD_ADDR_VAR 0 57
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45741: LD_ADDR_VAR 0 58
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45971: LD_ADDR_VAR 0 59
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46059: LD_ADDR_VAR 0 60
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46147: LD_ADDR_VAR 0 61
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46235: LD_ADDR_VAR 0 62
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46323: LD_ADDR_VAR 0 63
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46411: LD_ADDR_VAR 0 64
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// end ; 1 :
46499: GO 52396
46501: LD_INT 1
46503: DOUBLE
46504: EQUAL
46505: IFTRUE 46509
46507: GO 49132
46509: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46510: LD_ADDR_VAR 0 11
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 3
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46554: LD_ADDR_VAR 0 12
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46595: LD_ADDR_VAR 0 13
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46635: LD_ADDR_VAR 0 14
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46676: LD_ADDR_VAR 0 15
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46720: LD_ADDR_VAR 0 16
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46766: LD_ADDR_VAR 0 17
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46810: LD_ADDR_VAR 0 18
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46851: LD_ADDR_VAR 0 19
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46891: LD_ADDR_VAR 0 20
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46932: LD_ADDR_VAR 0 21
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46976: LD_ADDR_VAR 0 22
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: NEG
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47022: LD_ADDR_VAR 0 23
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 4
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 3
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47066: LD_ADDR_VAR 0 24
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 4
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47107: LD_ADDR_VAR 0 25
47111: PUSH
47112: LD_INT 3
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 4
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 4
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47147: LD_ADDR_VAR 0 26
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 4
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47188: LD_ADDR_VAR 0 27
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 4
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47232: LD_ADDR_VAR 0 28
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 3
47251: NEG
47252: PUSH
47253: LD_INT 4
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 4
47263: NEG
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47278: LD_ADDR_VAR 0 29
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 4
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 4
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 5
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 5
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 4
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 6
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 6
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 5
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47433: LD_ADDR_VAR 0 30
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 4
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 4
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 4
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 5
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 5
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 5
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 6
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 6
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47576: LD_ADDR_VAR 0 31
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 4
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 4
47623: PUSH
47624: LD_INT 4
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 5
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 5
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: LD_INT 5
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 6
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 6
47683: PUSH
47684: LD_INT 6
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: LD_INT 6
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47715: LD_ADDR_VAR 0 32
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 5
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 6
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 6
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 5
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47858: LD_ADDR_VAR 0 33
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 4
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 4
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 4
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 5
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 5
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 5
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 6
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 6
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48013: LD_ADDR_VAR 0 34
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: LD_INT 4
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 4
48068: NEG
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 4
48080: NEG
48081: PUSH
48082: LD_INT 4
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 4
48092: NEG
48093: PUSH
48094: LD_INT 5
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 5
48104: NEG
48105: PUSH
48106: LD_INT 4
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 5
48116: NEG
48117: PUSH
48118: LD_INT 5
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 5
48128: NEG
48129: PUSH
48130: LD_INT 6
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 6
48140: NEG
48141: PUSH
48142: LD_INT 5
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 6
48152: NEG
48153: PUSH
48154: LD_INT 6
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48176: LD_ADDR_VAR 0 41
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48220: LD_ADDR_VAR 0 42
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48261: LD_ADDR_VAR 0 43
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 3
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48301: LD_ADDR_VAR 0 44
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48342: LD_ADDR_VAR 0 45
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48386: LD_ADDR_VAR 0 46
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48432: LD_ADDR_VAR 0 47
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48465: LD_ADDR_VAR 0 48
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48496: LD_ADDR_VAR 0 49
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48525: LD_ADDR_VAR 0 50
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48554: LD_ADDR_VAR 0 51
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48585: LD_ADDR_VAR 0 52
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48618: LD_ADDR_VAR 0 53
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48662: LD_ADDR_VAR 0 54
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48703: LD_ADDR_VAR 0 55
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48743: LD_ADDR_VAR 0 56
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48784: LD_ADDR_VAR 0 57
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48828: LD_ADDR_VAR 0 58
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48874: LD_ADDR_VAR 0 59
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48918: LD_ADDR_VAR 0 60
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48959: LD_ADDR_VAR 0 61
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48999: LD_ADDR_VAR 0 62
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49040: LD_ADDR_VAR 0 63
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49084: LD_ADDR_VAR 0 64
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// end ; 2 :
49130: GO 52396
49132: LD_INT 2
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49140
49138: GO 52395
49140: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49141: LD_ADDR_VAR 0 29
49145: PUSH
49146: LD_INT 4
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 4
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 5
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 5
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 4
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 4
49271: PUSH
49272: LD_INT 4
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: LD_INT 4
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 4
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 4
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 5
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 5
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 5
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 4
49480: NEG
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 4
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 4
49503: NEG
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 4
49526: NEG
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 4
49538: NEG
49539: PUSH
49540: LD_INT 5
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 4
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 5
49586: NEG
49587: PUSH
49588: LD_INT 4
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 5
49598: NEG
49599: PUSH
49600: LD_INT 5
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 3
49610: NEG
49611: PUSH
49612: LD_INT 5
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 5
49622: NEG
49623: PUSH
49624: LD_INT 3
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49679: LD_ADDR_VAR 0 30
49683: PUSH
49684: LD_INT 4
49686: PUSH
49687: LD_INT 4
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 4
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 5
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 5
49716: PUSH
49717: LD_INT 5
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 4
49726: PUSH
49727: LD_INT 5
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: LD_INT 4
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: LD_INT 3
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: LD_INT 5
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 4
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 4
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 4
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 4
49869: NEG
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 4
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 4
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 5
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 5
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 5
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 4
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 4
50031: NEG
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 4
50043: NEG
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 4
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 4
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 4
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 4
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 4
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 5
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: LD_INT 5
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50226: LD_ADDR_VAR 0 31
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 5
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 5
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 5
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 4
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 4
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 4
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 4
50428: NEG
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 4
50440: NEG
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 4
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 4
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 5
50488: NEG
50489: PUSH
50490: LD_INT 4
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 5
50500: NEG
50501: PUSH
50502: LD_INT 5
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 5
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 5
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 4
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 4
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 4
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 4
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 5
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 5
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 5
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50776: LD_ADDR_VAR 0 32
50780: PUSH
50781: LD_INT 4
50783: NEG
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 4
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 4
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 5
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 5
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 5
50862: NEG
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: LD_INT 4
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 4
50957: NEG
50958: PUSH
50959: LD_INT 4
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 4
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 4
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 4
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 5
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 4
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 5
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 5
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 4
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: LD_INT 4
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 4
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 5
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 4
51228: PUSH
51229: LD_INT 5
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 5
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: LD_INT 5
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51323: LD_ADDR_VAR 0 33
51327: PUSH
51328: LD_INT 4
51330: NEG
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 4
51342: NEG
51343: PUSH
51344: LD_INT 5
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 4
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 5
51390: NEG
51391: PUSH
51392: LD_INT 4
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 5
51402: NEG
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 5
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 5
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 5
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 4
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: PUSH
51664: LD_INT 4
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 4
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 4
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 4
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 5
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 5
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 4
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 5
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51861: LD_ADDR_VAR 0 34
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 4
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 5
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 3
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 4
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 5
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 5
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 4
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 4
52063: PUSH
52064: LD_INT 4
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 5
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 5
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 4
52103: PUSH
52104: LD_INT 5
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 5
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 4
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 4
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 4
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 5
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 5
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// end ; end ;
52393: GO 52396
52395: POP
// case btype of b_depot , b_warehouse :
52396: LD_VAR 0 1
52400: PUSH
52401: LD_INT 0
52403: DOUBLE
52404: EQUAL
52405: IFTRUE 52415
52407: LD_INT 1
52409: DOUBLE
52410: EQUAL
52411: IFTRUE 52415
52413: GO 52616
52415: POP
// case nation of nation_american :
52416: LD_VAR 0 5
52420: PUSH
52421: LD_INT 1
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52429
52427: GO 52485
52429: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52430: LD_ADDR_VAR 0 9
52434: PUSH
52435: LD_VAR 0 11
52439: PUSH
52440: LD_VAR 0 12
52444: PUSH
52445: LD_VAR 0 13
52449: PUSH
52450: LD_VAR 0 14
52454: PUSH
52455: LD_VAR 0 15
52459: PUSH
52460: LD_VAR 0 16
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: PUSH
52473: LD_VAR 0 4
52477: PUSH
52478: LD_INT 1
52480: PLUS
52481: ARRAY
52482: ST_TO_ADDR
52483: GO 52614
52485: LD_INT 2
52487: DOUBLE
52488: EQUAL
52489: IFTRUE 52493
52491: GO 52549
52493: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52494: LD_ADDR_VAR 0 9
52498: PUSH
52499: LD_VAR 0 17
52503: PUSH
52504: LD_VAR 0 18
52508: PUSH
52509: LD_VAR 0 19
52513: PUSH
52514: LD_VAR 0 20
52518: PUSH
52519: LD_VAR 0 21
52523: PUSH
52524: LD_VAR 0 22
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: PUSH
52537: LD_VAR 0 4
52541: PUSH
52542: LD_INT 1
52544: PLUS
52545: ARRAY
52546: ST_TO_ADDR
52547: GO 52614
52549: LD_INT 3
52551: DOUBLE
52552: EQUAL
52553: IFTRUE 52557
52555: GO 52613
52557: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52558: LD_ADDR_VAR 0 9
52562: PUSH
52563: LD_VAR 0 23
52567: PUSH
52568: LD_VAR 0 24
52572: PUSH
52573: LD_VAR 0 25
52577: PUSH
52578: LD_VAR 0 26
52582: PUSH
52583: LD_VAR 0 27
52587: PUSH
52588: LD_VAR 0 28
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: PUSH
52601: LD_VAR 0 4
52605: PUSH
52606: LD_INT 1
52608: PLUS
52609: ARRAY
52610: ST_TO_ADDR
52611: GO 52614
52613: POP
52614: GO 53169
52616: LD_INT 2
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52630
52622: LD_INT 3
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52630
52628: GO 52686
52630: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52631: LD_ADDR_VAR 0 9
52635: PUSH
52636: LD_VAR 0 29
52640: PUSH
52641: LD_VAR 0 30
52645: PUSH
52646: LD_VAR 0 31
52650: PUSH
52651: LD_VAR 0 32
52655: PUSH
52656: LD_VAR 0 33
52660: PUSH
52661: LD_VAR 0 34
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: PUSH
52674: LD_VAR 0 4
52678: PUSH
52679: LD_INT 1
52681: PLUS
52682: ARRAY
52683: ST_TO_ADDR
52684: GO 53169
52686: LD_INT 16
52688: DOUBLE
52689: EQUAL
52690: IFTRUE 52748
52692: LD_INT 17
52694: DOUBLE
52695: EQUAL
52696: IFTRUE 52748
52698: LD_INT 18
52700: DOUBLE
52701: EQUAL
52702: IFTRUE 52748
52704: LD_INT 19
52706: DOUBLE
52707: EQUAL
52708: IFTRUE 52748
52710: LD_INT 22
52712: DOUBLE
52713: EQUAL
52714: IFTRUE 52748
52716: LD_INT 20
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52748
52722: LD_INT 21
52724: DOUBLE
52725: EQUAL
52726: IFTRUE 52748
52728: LD_INT 23
52730: DOUBLE
52731: EQUAL
52732: IFTRUE 52748
52734: LD_INT 24
52736: DOUBLE
52737: EQUAL
52738: IFTRUE 52748
52740: LD_INT 25
52742: DOUBLE
52743: EQUAL
52744: IFTRUE 52748
52746: GO 52804
52748: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52749: LD_ADDR_VAR 0 9
52753: PUSH
52754: LD_VAR 0 35
52758: PUSH
52759: LD_VAR 0 36
52763: PUSH
52764: LD_VAR 0 37
52768: PUSH
52769: LD_VAR 0 38
52773: PUSH
52774: LD_VAR 0 39
52778: PUSH
52779: LD_VAR 0 40
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: PUSH
52792: LD_VAR 0 4
52796: PUSH
52797: LD_INT 1
52799: PLUS
52800: ARRAY
52801: ST_TO_ADDR
52802: GO 53169
52804: LD_INT 6
52806: DOUBLE
52807: EQUAL
52808: IFTRUE 52860
52810: LD_INT 7
52812: DOUBLE
52813: EQUAL
52814: IFTRUE 52860
52816: LD_INT 8
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52860
52822: LD_INT 13
52824: DOUBLE
52825: EQUAL
52826: IFTRUE 52860
52828: LD_INT 12
52830: DOUBLE
52831: EQUAL
52832: IFTRUE 52860
52834: LD_INT 15
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52860
52840: LD_INT 11
52842: DOUBLE
52843: EQUAL
52844: IFTRUE 52860
52846: LD_INT 14
52848: DOUBLE
52849: EQUAL
52850: IFTRUE 52860
52852: LD_INT 10
52854: DOUBLE
52855: EQUAL
52856: IFTRUE 52860
52858: GO 52916
52860: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52861: LD_ADDR_VAR 0 9
52865: PUSH
52866: LD_VAR 0 41
52870: PUSH
52871: LD_VAR 0 42
52875: PUSH
52876: LD_VAR 0 43
52880: PUSH
52881: LD_VAR 0 44
52885: PUSH
52886: LD_VAR 0 45
52890: PUSH
52891: LD_VAR 0 46
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: PUSH
52904: LD_VAR 0 4
52908: PUSH
52909: LD_INT 1
52911: PLUS
52912: ARRAY
52913: ST_TO_ADDR
52914: GO 53169
52916: LD_INT 36
52918: DOUBLE
52919: EQUAL
52920: IFTRUE 52924
52922: GO 52980
52924: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52925: LD_ADDR_VAR 0 9
52929: PUSH
52930: LD_VAR 0 47
52934: PUSH
52935: LD_VAR 0 48
52939: PUSH
52940: LD_VAR 0 49
52944: PUSH
52945: LD_VAR 0 50
52949: PUSH
52950: LD_VAR 0 51
52954: PUSH
52955: LD_VAR 0 52
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: PUSH
52968: LD_VAR 0 4
52972: PUSH
52973: LD_INT 1
52975: PLUS
52976: ARRAY
52977: ST_TO_ADDR
52978: GO 53169
52980: LD_INT 4
52982: DOUBLE
52983: EQUAL
52984: IFTRUE 53006
52986: LD_INT 5
52988: DOUBLE
52989: EQUAL
52990: IFTRUE 53006
52992: LD_INT 34
52994: DOUBLE
52995: EQUAL
52996: IFTRUE 53006
52998: LD_INT 37
53000: DOUBLE
53001: EQUAL
53002: IFTRUE 53006
53004: GO 53062
53006: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53007: LD_ADDR_VAR 0 9
53011: PUSH
53012: LD_VAR 0 53
53016: PUSH
53017: LD_VAR 0 54
53021: PUSH
53022: LD_VAR 0 55
53026: PUSH
53027: LD_VAR 0 56
53031: PUSH
53032: LD_VAR 0 57
53036: PUSH
53037: LD_VAR 0 58
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_VAR 0 4
53054: PUSH
53055: LD_INT 1
53057: PLUS
53058: ARRAY
53059: ST_TO_ADDR
53060: GO 53169
53062: LD_INT 31
53064: DOUBLE
53065: EQUAL
53066: IFTRUE 53112
53068: LD_INT 32
53070: DOUBLE
53071: EQUAL
53072: IFTRUE 53112
53074: LD_INT 33
53076: DOUBLE
53077: EQUAL
53078: IFTRUE 53112
53080: LD_INT 27
53082: DOUBLE
53083: EQUAL
53084: IFTRUE 53112
53086: LD_INT 26
53088: DOUBLE
53089: EQUAL
53090: IFTRUE 53112
53092: LD_INT 28
53094: DOUBLE
53095: EQUAL
53096: IFTRUE 53112
53098: LD_INT 29
53100: DOUBLE
53101: EQUAL
53102: IFTRUE 53112
53104: LD_INT 30
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 53168
53112: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53113: LD_ADDR_VAR 0 9
53117: PUSH
53118: LD_VAR 0 59
53122: PUSH
53123: LD_VAR 0 60
53127: PUSH
53128: LD_VAR 0 61
53132: PUSH
53133: LD_VAR 0 62
53137: PUSH
53138: LD_VAR 0 63
53142: PUSH
53143: LD_VAR 0 64
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: PUSH
53156: LD_VAR 0 4
53160: PUSH
53161: LD_INT 1
53163: PLUS
53164: ARRAY
53165: ST_TO_ADDR
53166: GO 53169
53168: POP
// temp_list2 = [ ] ;
53169: LD_ADDR_VAR 0 10
53173: PUSH
53174: EMPTY
53175: ST_TO_ADDR
// for i in temp_list do
53176: LD_ADDR_VAR 0 8
53180: PUSH
53181: LD_VAR 0 9
53185: PUSH
53186: FOR_IN
53187: IFFALSE 53239
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53189: LD_ADDR_VAR 0 10
53193: PUSH
53194: LD_VAR 0 10
53198: PUSH
53199: LD_VAR 0 8
53203: PUSH
53204: LD_INT 1
53206: ARRAY
53207: PUSH
53208: LD_VAR 0 2
53212: PLUS
53213: PUSH
53214: LD_VAR 0 8
53218: PUSH
53219: LD_INT 2
53221: ARRAY
53222: PUSH
53223: LD_VAR 0 3
53227: PLUS
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: ADD
53236: ST_TO_ADDR
53237: GO 53186
53239: POP
53240: POP
// result = temp_list2 ;
53241: LD_ADDR_VAR 0 7
53245: PUSH
53246: LD_VAR 0 10
53250: ST_TO_ADDR
// end ;
53251: LD_VAR 0 7
53255: RET
// export function EnemyInRange ( unit , dist ) ; begin
53256: LD_INT 0
53258: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 255
53273: PPUSH
53274: LD_VAR 0 1
53278: PPUSH
53279: CALL_OW 250
53283: PPUSH
53284: LD_VAR 0 1
53288: PPUSH
53289: CALL_OW 251
53293: PPUSH
53294: LD_VAR 0 2
53298: PPUSH
53299: CALL 27360 0 4
53303: PUSH
53304: LD_INT 4
53306: ARRAY
53307: ST_TO_ADDR
// end ;
53308: LD_VAR 0 3
53312: RET
// export function PlayerSeeMe ( unit ) ; begin
53313: LD_INT 0
53315: PPUSH
// result := See ( your_side , unit ) ;
53316: LD_ADDR_VAR 0 2
53320: PUSH
53321: LD_OWVAR 2
53325: PPUSH
53326: LD_VAR 0 1
53330: PPUSH
53331: CALL_OW 292
53335: ST_TO_ADDR
// end ;
53336: LD_VAR 0 2
53340: RET
// export function ReverseDir ( unit ) ; begin
53341: LD_INT 0
53343: PPUSH
// if not unit then
53344: LD_VAR 0 1
53348: NOT
53349: IFFALSE 53353
// exit ;
53351: GO 53376
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53353: LD_ADDR_VAR 0 2
53357: PUSH
53358: LD_VAR 0 1
53362: PPUSH
53363: CALL_OW 254
53367: PUSH
53368: LD_INT 3
53370: PLUS
53371: PUSH
53372: LD_INT 6
53374: MOD
53375: ST_TO_ADDR
// end ;
53376: LD_VAR 0 2
53380: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53381: LD_INT 0
53383: PPUSH
53384: PPUSH
53385: PPUSH
53386: PPUSH
53387: PPUSH
// if not hexes then
53388: LD_VAR 0 2
53392: NOT
53393: IFFALSE 53397
// exit ;
53395: GO 53545
// dist := 9999 ;
53397: LD_ADDR_VAR 0 5
53401: PUSH
53402: LD_INT 9999
53404: ST_TO_ADDR
// for i = 1 to hexes do
53405: LD_ADDR_VAR 0 4
53409: PUSH
53410: DOUBLE
53411: LD_INT 1
53413: DEC
53414: ST_TO_ADDR
53415: LD_VAR 0 2
53419: PUSH
53420: FOR_TO
53421: IFFALSE 53533
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_VAR 0 2
53432: PUSH
53433: LD_VAR 0 4
53437: ARRAY
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PPUSH
53443: LD_VAR 0 2
53447: PUSH
53448: LD_VAR 0 4
53452: ARRAY
53453: PUSH
53454: LD_INT 2
53456: ARRAY
53457: PPUSH
53458: CALL_OW 297
53462: PUSH
53463: LD_VAR 0 5
53467: LESS
53468: IFFALSE 53531
// begin hex := hexes [ i ] ;
53470: LD_ADDR_VAR 0 7
53474: PUSH
53475: LD_VAR 0 2
53479: PUSH
53480: LD_VAR 0 4
53484: ARRAY
53485: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53486: LD_ADDR_VAR 0 5
53490: PUSH
53491: LD_VAR 0 1
53495: PPUSH
53496: LD_VAR 0 2
53500: PUSH
53501: LD_VAR 0 4
53505: ARRAY
53506: PUSH
53507: LD_INT 1
53509: ARRAY
53510: PPUSH
53511: LD_VAR 0 2
53515: PUSH
53516: LD_VAR 0 4
53520: ARRAY
53521: PUSH
53522: LD_INT 2
53524: ARRAY
53525: PPUSH
53526: CALL_OW 297
53530: ST_TO_ADDR
// end ; end ;
53531: GO 53420
53533: POP
53534: POP
// result := hex ;
53535: LD_ADDR_VAR 0 3
53539: PUSH
53540: LD_VAR 0 7
53544: ST_TO_ADDR
// end ;
53545: LD_VAR 0 3
53549: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53550: LD_INT 0
53552: PPUSH
53553: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53554: LD_VAR 0 1
53558: NOT
53559: PUSH
53560: LD_VAR 0 1
53564: PUSH
53565: LD_INT 21
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 23
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PPUSH
53589: CALL_OW 69
53593: IN
53594: NOT
53595: OR
53596: IFFALSE 53600
// exit ;
53598: GO 53647
// for i = 1 to 3 do
53600: LD_ADDR_VAR 0 3
53604: PUSH
53605: DOUBLE
53606: LD_INT 1
53608: DEC
53609: ST_TO_ADDR
53610: LD_INT 3
53612: PUSH
53613: FOR_TO
53614: IFFALSE 53645
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53616: LD_VAR 0 1
53620: PPUSH
53621: CALL_OW 250
53625: PPUSH
53626: LD_VAR 0 1
53630: PPUSH
53631: CALL_OW 251
53635: PPUSH
53636: LD_INT 1
53638: PPUSH
53639: CALL_OW 453
53643: GO 53613
53645: POP
53646: POP
// end ;
53647: LD_VAR 0 2
53651: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53652: LD_INT 0
53654: PPUSH
53655: PPUSH
53656: PPUSH
53657: PPUSH
53658: PPUSH
53659: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53660: LD_VAR 0 1
53664: NOT
53665: PUSH
53666: LD_VAR 0 2
53670: NOT
53671: OR
53672: PUSH
53673: LD_VAR 0 1
53677: PPUSH
53678: CALL_OW 314
53682: OR
53683: IFFALSE 53687
// exit ;
53685: GO 54128
// x := GetX ( enemy_unit ) ;
53687: LD_ADDR_VAR 0 7
53691: PUSH
53692: LD_VAR 0 2
53696: PPUSH
53697: CALL_OW 250
53701: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53702: LD_ADDR_VAR 0 8
53706: PUSH
53707: LD_VAR 0 2
53711: PPUSH
53712: CALL_OW 251
53716: ST_TO_ADDR
// if not x or not y then
53717: LD_VAR 0 7
53721: NOT
53722: PUSH
53723: LD_VAR 0 8
53727: NOT
53728: OR
53729: IFFALSE 53733
// exit ;
53731: GO 54128
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53733: LD_ADDR_VAR 0 6
53737: PUSH
53738: LD_VAR 0 7
53742: PPUSH
53743: LD_INT 0
53745: PPUSH
53746: LD_INT 4
53748: PPUSH
53749: CALL_OW 272
53753: PUSH
53754: LD_VAR 0 8
53758: PPUSH
53759: LD_INT 0
53761: PPUSH
53762: LD_INT 4
53764: PPUSH
53765: CALL_OW 273
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 7
53778: PPUSH
53779: LD_INT 1
53781: PPUSH
53782: LD_INT 4
53784: PPUSH
53785: CALL_OW 272
53789: PUSH
53790: LD_VAR 0 8
53794: PPUSH
53795: LD_INT 1
53797: PPUSH
53798: LD_INT 4
53800: PPUSH
53801: CALL_OW 273
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_VAR 0 7
53814: PPUSH
53815: LD_INT 2
53817: PPUSH
53818: LD_INT 4
53820: PPUSH
53821: CALL_OW 272
53825: PUSH
53826: LD_VAR 0 8
53830: PPUSH
53831: LD_INT 2
53833: PPUSH
53834: LD_INT 4
53836: PPUSH
53837: CALL_OW 273
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_VAR 0 7
53850: PPUSH
53851: LD_INT 3
53853: PPUSH
53854: LD_INT 4
53856: PPUSH
53857: CALL_OW 272
53861: PUSH
53862: LD_VAR 0 8
53866: PPUSH
53867: LD_INT 3
53869: PPUSH
53870: LD_INT 4
53872: PPUSH
53873: CALL_OW 273
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_VAR 0 7
53886: PPUSH
53887: LD_INT 4
53889: PPUSH
53890: LD_INT 4
53892: PPUSH
53893: CALL_OW 272
53897: PUSH
53898: LD_VAR 0 8
53902: PPUSH
53903: LD_INT 4
53905: PPUSH
53906: LD_INT 4
53908: PPUSH
53909: CALL_OW 273
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_VAR 0 7
53922: PPUSH
53923: LD_INT 5
53925: PPUSH
53926: LD_INT 4
53928: PPUSH
53929: CALL_OW 272
53933: PUSH
53934: LD_VAR 0 8
53938: PPUSH
53939: LD_INT 5
53941: PPUSH
53942: LD_INT 4
53944: PPUSH
53945: CALL_OW 273
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// for i = tmp downto 1 do
53962: LD_ADDR_VAR 0 4
53966: PUSH
53967: DOUBLE
53968: LD_VAR 0 6
53972: INC
53973: ST_TO_ADDR
53974: LD_INT 1
53976: PUSH
53977: FOR_DOWNTO
53978: IFFALSE 54079
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53980: LD_VAR 0 6
53984: PUSH
53985: LD_VAR 0 4
53989: ARRAY
53990: PUSH
53991: LD_INT 1
53993: ARRAY
53994: PPUSH
53995: LD_VAR 0 6
53999: PUSH
54000: LD_VAR 0 4
54004: ARRAY
54005: PUSH
54006: LD_INT 2
54008: ARRAY
54009: PPUSH
54010: CALL_OW 488
54014: NOT
54015: PUSH
54016: LD_VAR 0 6
54020: PUSH
54021: LD_VAR 0 4
54025: ARRAY
54026: PUSH
54027: LD_INT 1
54029: ARRAY
54030: PPUSH
54031: LD_VAR 0 6
54035: PUSH
54036: LD_VAR 0 4
54040: ARRAY
54041: PUSH
54042: LD_INT 2
54044: ARRAY
54045: PPUSH
54046: CALL_OW 428
54050: PUSH
54051: LD_INT 0
54053: NONEQUAL
54054: OR
54055: IFFALSE 54077
// tmp := Delete ( tmp , i ) ;
54057: LD_ADDR_VAR 0 6
54061: PUSH
54062: LD_VAR 0 6
54066: PPUSH
54067: LD_VAR 0 4
54071: PPUSH
54072: CALL_OW 3
54076: ST_TO_ADDR
54077: GO 53977
54079: POP
54080: POP
// j := GetClosestHex ( unit , tmp ) ;
54081: LD_ADDR_VAR 0 5
54085: PUSH
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 6
54095: PPUSH
54096: CALL 53381 0 2
54100: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54101: LD_VAR 0 1
54105: PPUSH
54106: LD_VAR 0 5
54110: PUSH
54111: LD_INT 1
54113: ARRAY
54114: PPUSH
54115: LD_VAR 0 5
54119: PUSH
54120: LD_INT 2
54122: ARRAY
54123: PPUSH
54124: CALL_OW 111
// end ;
54128: LD_VAR 0 3
54132: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54133: LD_INT 0
54135: PPUSH
54136: PPUSH
54137: PPUSH
// uc_side = 0 ;
54138: LD_ADDR_OWVAR 20
54142: PUSH
54143: LD_INT 0
54145: ST_TO_ADDR
// uc_nation = 0 ;
54146: LD_ADDR_OWVAR 21
54150: PUSH
54151: LD_INT 0
54153: ST_TO_ADDR
// InitHc ;
54154: CALL_OW 19
// InitVc ;
54158: CALL_OW 20
// if mastodonts then
54162: LD_VAR 0 6
54166: IFFALSE 54233
// for i = 1 to mastodonts do
54168: LD_ADDR_VAR 0 11
54172: PUSH
54173: DOUBLE
54174: LD_INT 1
54176: DEC
54177: ST_TO_ADDR
54178: LD_VAR 0 6
54182: PUSH
54183: FOR_TO
54184: IFFALSE 54231
// begin vc_chassis := 31 ;
54186: LD_ADDR_OWVAR 37
54190: PUSH
54191: LD_INT 31
54193: ST_TO_ADDR
// vc_control := control_rider ;
54194: LD_ADDR_OWVAR 38
54198: PUSH
54199: LD_INT 4
54201: ST_TO_ADDR
// animal := CreateVehicle ;
54202: LD_ADDR_VAR 0 12
54206: PUSH
54207: CALL_OW 45
54211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54212: LD_VAR 0 12
54216: PPUSH
54217: LD_VAR 0 8
54221: PPUSH
54222: LD_INT 0
54224: PPUSH
54225: CALL 56302 0 3
// end ;
54229: GO 54183
54231: POP
54232: POP
// if horses then
54233: LD_VAR 0 5
54237: IFFALSE 54304
// for i = 1 to horses do
54239: LD_ADDR_VAR 0 11
54243: PUSH
54244: DOUBLE
54245: LD_INT 1
54247: DEC
54248: ST_TO_ADDR
54249: LD_VAR 0 5
54253: PUSH
54254: FOR_TO
54255: IFFALSE 54302
// begin hc_class := 21 ;
54257: LD_ADDR_OWVAR 28
54261: PUSH
54262: LD_INT 21
54264: ST_TO_ADDR
// hc_gallery :=  ;
54265: LD_ADDR_OWVAR 33
54269: PUSH
54270: LD_STRING 
54272: ST_TO_ADDR
// animal := CreateHuman ;
54273: LD_ADDR_VAR 0 12
54277: PUSH
54278: CALL_OW 44
54282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54283: LD_VAR 0 12
54287: PPUSH
54288: LD_VAR 0 8
54292: PPUSH
54293: LD_INT 0
54295: PPUSH
54296: CALL 56302 0 3
// end ;
54300: GO 54254
54302: POP
54303: POP
// if birds then
54304: LD_VAR 0 1
54308: IFFALSE 54375
// for i = 1 to birds do
54310: LD_ADDR_VAR 0 11
54314: PUSH
54315: DOUBLE
54316: LD_INT 1
54318: DEC
54319: ST_TO_ADDR
54320: LD_VAR 0 1
54324: PUSH
54325: FOR_TO
54326: IFFALSE 54373
// begin hc_class = 18 ;
54328: LD_ADDR_OWVAR 28
54332: PUSH
54333: LD_INT 18
54335: ST_TO_ADDR
// hc_gallery =  ;
54336: LD_ADDR_OWVAR 33
54340: PUSH
54341: LD_STRING 
54343: ST_TO_ADDR
// animal := CreateHuman ;
54344: LD_ADDR_VAR 0 12
54348: PUSH
54349: CALL_OW 44
54353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54354: LD_VAR 0 12
54358: PPUSH
54359: LD_VAR 0 8
54363: PPUSH
54364: LD_INT 0
54366: PPUSH
54367: CALL 56302 0 3
// end ;
54371: GO 54325
54373: POP
54374: POP
// if tigers then
54375: LD_VAR 0 2
54379: IFFALSE 54463
// for i = 1 to tigers do
54381: LD_ADDR_VAR 0 11
54385: PUSH
54386: DOUBLE
54387: LD_INT 1
54389: DEC
54390: ST_TO_ADDR
54391: LD_VAR 0 2
54395: PUSH
54396: FOR_TO
54397: IFFALSE 54461
// begin hc_class = class_tiger ;
54399: LD_ADDR_OWVAR 28
54403: PUSH
54404: LD_INT 14
54406: ST_TO_ADDR
// hc_gallery =  ;
54407: LD_ADDR_OWVAR 33
54411: PUSH
54412: LD_STRING 
54414: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54415: LD_ADDR_OWVAR 35
54419: PUSH
54420: LD_INT 7
54422: NEG
54423: PPUSH
54424: LD_INT 7
54426: PPUSH
54427: CALL_OW 12
54431: ST_TO_ADDR
// animal := CreateHuman ;
54432: LD_ADDR_VAR 0 12
54436: PUSH
54437: CALL_OW 44
54441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54442: LD_VAR 0 12
54446: PPUSH
54447: LD_VAR 0 8
54451: PPUSH
54452: LD_INT 0
54454: PPUSH
54455: CALL 56302 0 3
// end ;
54459: GO 54396
54461: POP
54462: POP
// if apemans then
54463: LD_VAR 0 3
54467: IFFALSE 54590
// for i = 1 to apemans do
54469: LD_ADDR_VAR 0 11
54473: PUSH
54474: DOUBLE
54475: LD_INT 1
54477: DEC
54478: ST_TO_ADDR
54479: LD_VAR 0 3
54483: PUSH
54484: FOR_TO
54485: IFFALSE 54588
// begin hc_class = class_apeman ;
54487: LD_ADDR_OWVAR 28
54491: PUSH
54492: LD_INT 12
54494: ST_TO_ADDR
// hc_gallery =  ;
54495: LD_ADDR_OWVAR 33
54499: PUSH
54500: LD_STRING 
54502: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54503: LD_ADDR_OWVAR 35
54507: PUSH
54508: LD_INT 5
54510: NEG
54511: PPUSH
54512: LD_INT 5
54514: PPUSH
54515: CALL_OW 12
54519: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54520: LD_ADDR_OWVAR 31
54524: PUSH
54525: LD_INT 1
54527: PPUSH
54528: LD_INT 3
54530: PPUSH
54531: CALL_OW 12
54535: PUSH
54536: LD_INT 1
54538: PPUSH
54539: LD_INT 3
54541: PPUSH
54542: CALL_OW 12
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// animal := CreateHuman ;
54559: LD_ADDR_VAR 0 12
54563: PUSH
54564: CALL_OW 44
54568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54569: LD_VAR 0 12
54573: PPUSH
54574: LD_VAR 0 8
54578: PPUSH
54579: LD_INT 0
54581: PPUSH
54582: CALL 56302 0 3
// end ;
54586: GO 54484
54588: POP
54589: POP
// if enchidnas then
54590: LD_VAR 0 4
54594: IFFALSE 54661
// for i = 1 to enchidnas do
54596: LD_ADDR_VAR 0 11
54600: PUSH
54601: DOUBLE
54602: LD_INT 1
54604: DEC
54605: ST_TO_ADDR
54606: LD_VAR 0 4
54610: PUSH
54611: FOR_TO
54612: IFFALSE 54659
// begin hc_class = 13 ;
54614: LD_ADDR_OWVAR 28
54618: PUSH
54619: LD_INT 13
54621: ST_TO_ADDR
// hc_gallery =  ;
54622: LD_ADDR_OWVAR 33
54626: PUSH
54627: LD_STRING 
54629: ST_TO_ADDR
// animal := CreateHuman ;
54630: LD_ADDR_VAR 0 12
54634: PUSH
54635: CALL_OW 44
54639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54640: LD_VAR 0 12
54644: PPUSH
54645: LD_VAR 0 8
54649: PPUSH
54650: LD_INT 0
54652: PPUSH
54653: CALL 56302 0 3
// end ;
54657: GO 54611
54659: POP
54660: POP
// if fishes then
54661: LD_VAR 0 7
54665: IFFALSE 54732
// for i = 1 to fishes do
54667: LD_ADDR_VAR 0 11
54671: PUSH
54672: DOUBLE
54673: LD_INT 1
54675: DEC
54676: ST_TO_ADDR
54677: LD_VAR 0 7
54681: PUSH
54682: FOR_TO
54683: IFFALSE 54730
// begin hc_class = 20 ;
54685: LD_ADDR_OWVAR 28
54689: PUSH
54690: LD_INT 20
54692: ST_TO_ADDR
// hc_gallery =  ;
54693: LD_ADDR_OWVAR 33
54697: PUSH
54698: LD_STRING 
54700: ST_TO_ADDR
// animal := CreateHuman ;
54701: LD_ADDR_VAR 0 12
54705: PUSH
54706: CALL_OW 44
54710: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54711: LD_VAR 0 12
54715: PPUSH
54716: LD_VAR 0 9
54720: PPUSH
54721: LD_INT 0
54723: PPUSH
54724: CALL 56302 0 3
// end ;
54728: GO 54682
54730: POP
54731: POP
// end ;
54732: LD_VAR 0 10
54736: RET
// export function WantHeal ( sci , unit ) ; begin
54737: LD_INT 0
54739: PPUSH
// if GetTaskList ( sci ) > 0 then
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 437
54749: PUSH
54750: LD_INT 0
54752: GREATER
54753: IFFALSE 54823
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL_OW 437
54764: PUSH
54765: LD_INT 1
54767: ARRAY
54768: PUSH
54769: LD_INT 1
54771: ARRAY
54772: PUSH
54773: LD_STRING l
54775: EQUAL
54776: PUSH
54777: LD_VAR 0 1
54781: PPUSH
54782: CALL_OW 437
54786: PUSH
54787: LD_INT 1
54789: ARRAY
54790: PUSH
54791: LD_INT 4
54793: ARRAY
54794: PUSH
54795: LD_VAR 0 2
54799: EQUAL
54800: AND
54801: IFFALSE 54813
// result := true else
54803: LD_ADDR_VAR 0 3
54807: PUSH
54808: LD_INT 1
54810: ST_TO_ADDR
54811: GO 54821
// result := false ;
54813: LD_ADDR_VAR 0 3
54817: PUSH
54818: LD_INT 0
54820: ST_TO_ADDR
// end else
54821: GO 54831
// result := false ;
54823: LD_ADDR_VAR 0 3
54827: PUSH
54828: LD_INT 0
54830: ST_TO_ADDR
// end ;
54831: LD_VAR 0 3
54835: RET
// export function HealTarget ( sci ) ; begin
54836: LD_INT 0
54838: PPUSH
// if not sci then
54839: LD_VAR 0 1
54843: NOT
54844: IFFALSE 54848
// exit ;
54846: GO 54913
// result := 0 ;
54848: LD_ADDR_VAR 0 2
54852: PUSH
54853: LD_INT 0
54855: ST_TO_ADDR
// if GetTaskList ( sci ) then
54856: LD_VAR 0 1
54860: PPUSH
54861: CALL_OW 437
54865: IFFALSE 54913
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 437
54876: PUSH
54877: LD_INT 1
54879: ARRAY
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_STRING l
54887: EQUAL
54888: IFFALSE 54913
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54890: LD_ADDR_VAR 0 2
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 437
54904: PUSH
54905: LD_INT 1
54907: ARRAY
54908: PUSH
54909: LD_INT 4
54911: ARRAY
54912: ST_TO_ADDR
// end ;
54913: LD_VAR 0 2
54917: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54918: LD_INT 0
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
// if not base_units then
54924: LD_VAR 0 1
54928: NOT
54929: IFFALSE 54933
// exit ;
54931: GO 55020
// result := false ;
54933: LD_ADDR_VAR 0 2
54937: PUSH
54938: LD_INT 0
54940: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54941: LD_ADDR_VAR 0 5
54945: PUSH
54946: LD_VAR 0 1
54950: PPUSH
54951: LD_INT 21
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PPUSH
54961: CALL_OW 72
54965: ST_TO_ADDR
// if not tmp then
54966: LD_VAR 0 5
54970: NOT
54971: IFFALSE 54975
// exit ;
54973: GO 55020
// for i in tmp do
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_VAR 0 5
54984: PUSH
54985: FOR_IN
54986: IFFALSE 55018
// begin result := EnemyInRange ( i , 22 ) ;
54988: LD_ADDR_VAR 0 2
54992: PUSH
54993: LD_VAR 0 3
54997: PPUSH
54998: LD_INT 22
55000: PPUSH
55001: CALL 53256 0 2
55005: ST_TO_ADDR
// if result then
55006: LD_VAR 0 2
55010: IFFALSE 55016
// exit ;
55012: POP
55013: POP
55014: GO 55020
// end ;
55016: GO 54985
55018: POP
55019: POP
// end ;
55020: LD_VAR 0 2
55024: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55025: LD_INT 0
55027: PPUSH
55028: PPUSH
// if not units then
55029: LD_VAR 0 1
55033: NOT
55034: IFFALSE 55038
// exit ;
55036: GO 55108
// result := [ ] ;
55038: LD_ADDR_VAR 0 3
55042: PUSH
55043: EMPTY
55044: ST_TO_ADDR
// for i in units do
55045: LD_ADDR_VAR 0 4
55049: PUSH
55050: LD_VAR 0 1
55054: PUSH
55055: FOR_IN
55056: IFFALSE 55106
// if GetTag ( i ) = tag then
55058: LD_VAR 0 4
55062: PPUSH
55063: CALL_OW 110
55067: PUSH
55068: LD_VAR 0 2
55072: EQUAL
55073: IFFALSE 55104
// result := Insert ( result , result + 1 , i ) ;
55075: LD_ADDR_VAR 0 3
55079: PUSH
55080: LD_VAR 0 3
55084: PPUSH
55085: LD_VAR 0 3
55089: PUSH
55090: LD_INT 1
55092: PLUS
55093: PPUSH
55094: LD_VAR 0 4
55098: PPUSH
55099: CALL_OW 2
55103: ST_TO_ADDR
55104: GO 55055
55106: POP
55107: POP
// end ;
55108: LD_VAR 0 3
55112: RET
// export function IsDriver ( un ) ; begin
55113: LD_INT 0
55115: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55116: LD_ADDR_VAR 0 2
55120: PUSH
55121: LD_VAR 0 1
55125: PUSH
55126: LD_INT 55
55128: PUSH
55129: EMPTY
55130: LIST
55131: PPUSH
55132: CALL_OW 69
55136: IN
55137: ST_TO_ADDR
// end ;
55138: LD_VAR 0 2
55142: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55143: LD_INT 0
55145: PPUSH
55146: PPUSH
// list := [ ] ;
55147: LD_ADDR_VAR 0 5
55151: PUSH
55152: EMPTY
55153: ST_TO_ADDR
// case d of 0 :
55154: LD_VAR 0 3
55158: PUSH
55159: LD_INT 0
55161: DOUBLE
55162: EQUAL
55163: IFTRUE 55167
55165: GO 55300
55167: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55168: LD_ADDR_VAR 0 5
55172: PUSH
55173: LD_VAR 0 1
55177: PUSH
55178: LD_INT 4
55180: MINUS
55181: PUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 4
55189: MINUS
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_INT 3
55206: MINUS
55207: PUSH
55208: LD_VAR 0 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: PUSH
55221: LD_VAR 0 1
55225: PUSH
55226: LD_INT 4
55228: PLUS
55229: PUSH
55230: LD_VAR 0 2
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: PUSH
55243: LD_VAR 0 1
55247: PUSH
55248: LD_INT 3
55250: PLUS
55251: PUSH
55252: LD_VAR 0 2
55256: PUSH
55257: LD_INT 3
55259: PLUS
55260: PUSH
55261: LD_INT 5
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: PUSH
55269: LD_VAR 0 1
55273: PUSH
55274: LD_VAR 0 2
55278: PUSH
55279: LD_INT 4
55281: PLUS
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: ST_TO_ADDR
// end ; 1 :
55298: GO 55998
55300: LD_INT 1
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55308
55306: GO 55441
55308: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55309: LD_ADDR_VAR 0 5
55313: PUSH
55314: LD_VAR 0 1
55318: PUSH
55319: LD_VAR 0 2
55323: PUSH
55324: LD_INT 4
55326: MINUS
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: PUSH
55336: LD_VAR 0 1
55340: PUSH
55341: LD_INT 3
55343: MINUS
55344: PUSH
55345: LD_VAR 0 2
55349: PUSH
55350: LD_INT 3
55352: MINUS
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: PUSH
55362: LD_VAR 0 1
55366: PUSH
55367: LD_INT 4
55369: MINUS
55370: PUSH
55371: LD_VAR 0 2
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: PUSH
55384: LD_VAR 0 1
55388: PUSH
55389: LD_VAR 0 2
55393: PUSH
55394: LD_INT 3
55396: PLUS
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: LD_VAR 0 1
55410: PUSH
55411: LD_INT 4
55413: PLUS
55414: PUSH
55415: LD_VAR 0 2
55419: PUSH
55420: LD_INT 4
55422: PLUS
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// end ; 2 :
55439: GO 55998
55441: LD_INT 2
55443: DOUBLE
55444: EQUAL
55445: IFTRUE 55449
55447: GO 55578
55449: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55450: LD_ADDR_VAR 0 5
55454: PUSH
55455: LD_VAR 0 1
55459: PUSH
55460: LD_VAR 0 2
55464: PUSH
55465: LD_INT 3
55467: MINUS
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: PUSH
55477: LD_VAR 0 1
55481: PUSH
55482: LD_INT 4
55484: PLUS
55485: PUSH
55486: LD_VAR 0 2
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: PUSH
55499: LD_VAR 0 1
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: LD_INT 4
55511: PLUS
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: PUSH
55521: LD_VAR 0 1
55525: PUSH
55526: LD_INT 3
55528: MINUS
55529: PUSH
55530: LD_VAR 0 2
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: PUSH
55543: LD_VAR 0 1
55547: PUSH
55548: LD_INT 4
55550: MINUS
55551: PUSH
55552: LD_VAR 0 2
55556: PUSH
55557: LD_INT 4
55559: MINUS
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// end ; 3 :
55576: GO 55998
55578: LD_INT 3
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55586
55584: GO 55719
55586: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55587: LD_ADDR_VAR 0 5
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_INT 3
55599: PLUS
55600: PUSH
55601: LD_VAR 0 2
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_INT 4
55621: PLUS
55622: PUSH
55623: LD_VAR 0 2
55627: PUSH
55628: LD_INT 4
55630: PLUS
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: PUSH
55640: LD_VAR 0 1
55644: PUSH
55645: LD_INT 4
55647: MINUS
55648: PUSH
55649: LD_VAR 0 2
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_VAR 0 1
55666: PUSH
55667: LD_VAR 0 2
55671: PUSH
55672: LD_INT 4
55674: MINUS
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: LD_VAR 0 1
55688: PUSH
55689: LD_INT 3
55691: MINUS
55692: PUSH
55693: LD_VAR 0 2
55697: PUSH
55698: LD_INT 3
55700: MINUS
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// end ; 4 :
55717: GO 55998
55719: LD_INT 4
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55727
55725: GO 55860
55727: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55728: LD_ADDR_VAR 0 5
55732: PUSH
55733: LD_VAR 0 1
55737: PUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_INT 4
55745: PLUS
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 3
55762: PLUS
55763: PUSH
55764: LD_VAR 0 2
55768: PUSH
55769: LD_INT 3
55771: PLUS
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: LD_VAR 0 1
55785: PUSH
55786: LD_INT 4
55788: PLUS
55789: PUSH
55790: LD_VAR 0 2
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: PUSH
55803: LD_VAR 0 1
55807: PUSH
55808: LD_VAR 0 2
55812: PUSH
55813: LD_INT 3
55815: MINUS
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: PUSH
55825: LD_VAR 0 1
55829: PUSH
55830: LD_INT 4
55832: MINUS
55833: PUSH
55834: LD_VAR 0 2
55838: PUSH
55839: LD_INT 4
55841: MINUS
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// end ; 5 :
55858: GO 55998
55860: LD_INT 5
55862: DOUBLE
55863: EQUAL
55864: IFTRUE 55868
55866: GO 55997
55868: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55869: LD_ADDR_VAR 0 5
55873: PUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 4
55881: MINUS
55882: PUSH
55883: LD_VAR 0 2
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: PUSH
55896: LD_VAR 0 1
55900: PUSH
55901: LD_VAR 0 2
55905: PUSH
55906: LD_INT 4
55908: MINUS
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: PUSH
55918: LD_VAR 0 1
55922: PUSH
55923: LD_INT 4
55925: PLUS
55926: PUSH
55927: LD_VAR 0 2
55931: PUSH
55932: LD_INT 4
55934: PLUS
55935: PUSH
55936: LD_INT 5
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: PUSH
55944: LD_VAR 0 1
55948: PUSH
55949: LD_INT 3
55951: PLUS
55952: PUSH
55953: LD_VAR 0 2
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: PUSH
55966: LD_VAR 0 1
55970: PUSH
55971: LD_VAR 0 2
55975: PUSH
55976: LD_INT 3
55978: PLUS
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// end ; end ;
55995: GO 55998
55997: POP
// result := list ;
55998: LD_ADDR_VAR 0 4
56002: PUSH
56003: LD_VAR 0 5
56007: ST_TO_ADDR
// end ;
56008: LD_VAR 0 4
56012: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56013: LD_INT 0
56015: PPUSH
56016: PPUSH
56017: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56018: LD_VAR 0 1
56022: NOT
56023: PUSH
56024: LD_VAR 0 2
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: IN
56047: NOT
56048: OR
56049: IFFALSE 56053
// exit ;
56051: GO 56145
// tmp := [ ] ;
56053: LD_ADDR_VAR 0 5
56057: PUSH
56058: EMPTY
56059: ST_TO_ADDR
// for i in units do
56060: LD_ADDR_VAR 0 4
56064: PUSH
56065: LD_VAR 0 1
56069: PUSH
56070: FOR_IN
56071: IFFALSE 56114
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56073: LD_ADDR_VAR 0 5
56077: PUSH
56078: LD_VAR 0 5
56082: PPUSH
56083: LD_VAR 0 5
56087: PUSH
56088: LD_INT 1
56090: PLUS
56091: PPUSH
56092: LD_VAR 0 4
56096: PPUSH
56097: LD_VAR 0 2
56101: PPUSH
56102: CALL_OW 259
56106: PPUSH
56107: CALL_OW 2
56111: ST_TO_ADDR
56112: GO 56070
56114: POP
56115: POP
// if not tmp then
56116: LD_VAR 0 5
56120: NOT
56121: IFFALSE 56125
// exit ;
56123: GO 56145
// result := SortListByListDesc ( units , tmp ) ;
56125: LD_ADDR_VAR 0 3
56129: PUSH
56130: LD_VAR 0 1
56134: PPUSH
56135: LD_VAR 0 5
56139: PPUSH
56140: CALL_OW 77
56144: ST_TO_ADDR
// end ;
56145: LD_VAR 0 3
56149: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56150: LD_INT 0
56152: PPUSH
56153: PPUSH
56154: PPUSH
// x := GetX ( building ) ;
56155: LD_ADDR_VAR 0 4
56159: PUSH
56160: LD_VAR 0 2
56164: PPUSH
56165: CALL_OW 250
56169: ST_TO_ADDR
// y := GetY ( building ) ;
56170: LD_ADDR_VAR 0 5
56174: PUSH
56175: LD_VAR 0 2
56179: PPUSH
56180: CALL_OW 251
56184: ST_TO_ADDR
// if GetTaskList ( unit ) then
56185: LD_VAR 0 1
56189: PPUSH
56190: CALL_OW 437
56194: IFFALSE 56289
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56196: LD_STRING e
56198: PUSH
56199: LD_VAR 0 1
56203: PPUSH
56204: CALL_OW 437
56208: PUSH
56209: LD_INT 1
56211: ARRAY
56212: PUSH
56213: LD_INT 1
56215: ARRAY
56216: EQUAL
56217: PUSH
56218: LD_VAR 0 4
56222: PUSH
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 437
56232: PUSH
56233: LD_INT 1
56235: ARRAY
56236: PUSH
56237: LD_INT 2
56239: ARRAY
56240: EQUAL
56241: AND
56242: PUSH
56243: LD_VAR 0 5
56247: PUSH
56248: LD_VAR 0 1
56252: PPUSH
56253: CALL_OW 437
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: PUSH
56262: LD_INT 3
56264: ARRAY
56265: EQUAL
56266: AND
56267: IFFALSE 56279
// result := true else
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_INT 1
56276: ST_TO_ADDR
56277: GO 56287
// result := false ;
56279: LD_ADDR_VAR 0 3
56283: PUSH
56284: LD_INT 0
56286: ST_TO_ADDR
// end else
56287: GO 56297
// result := false ;
56289: LD_ADDR_VAR 0 3
56293: PUSH
56294: LD_INT 0
56296: ST_TO_ADDR
// end ;
56297: LD_VAR 0 3
56301: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56302: LD_INT 0
56304: PPUSH
56305: PPUSH
56306: PPUSH
56307: PPUSH
// if not unit or not area then
56308: LD_VAR 0 1
56312: NOT
56313: PUSH
56314: LD_VAR 0 2
56318: NOT
56319: OR
56320: IFFALSE 56324
// exit ;
56322: GO 56488
// tmp := AreaToList ( area , i ) ;
56324: LD_ADDR_VAR 0 6
56328: PUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: LD_VAR 0 5
56338: PPUSH
56339: CALL_OW 517
56343: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56344: LD_ADDR_VAR 0 5
56348: PUSH
56349: DOUBLE
56350: LD_INT 1
56352: DEC
56353: ST_TO_ADDR
56354: LD_VAR 0 6
56358: PUSH
56359: LD_INT 1
56361: ARRAY
56362: PUSH
56363: FOR_TO
56364: IFFALSE 56486
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56366: LD_ADDR_VAR 0 7
56370: PUSH
56371: LD_VAR 0 6
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: PUSH
56380: LD_VAR 0 5
56384: ARRAY
56385: PUSH
56386: LD_VAR 0 6
56390: PUSH
56391: LD_INT 2
56393: ARRAY
56394: PUSH
56395: LD_VAR 0 5
56399: ARRAY
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56405: LD_VAR 0 7
56409: PUSH
56410: LD_INT 1
56412: ARRAY
56413: PPUSH
56414: LD_VAR 0 7
56418: PUSH
56419: LD_INT 2
56421: ARRAY
56422: PPUSH
56423: CALL_OW 428
56427: PUSH
56428: LD_INT 0
56430: EQUAL
56431: IFFALSE 56484
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56433: LD_VAR 0 1
56437: PPUSH
56438: LD_VAR 0 7
56442: PUSH
56443: LD_INT 1
56445: ARRAY
56446: PPUSH
56447: LD_VAR 0 7
56451: PUSH
56452: LD_INT 2
56454: ARRAY
56455: PPUSH
56456: LD_VAR 0 3
56460: PPUSH
56461: CALL_OW 48
// result := IsPlaced ( unit ) ;
56465: LD_ADDR_VAR 0 4
56469: PUSH
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL_OW 305
56479: ST_TO_ADDR
// exit ;
56480: POP
56481: POP
56482: GO 56488
// end ; end ;
56484: GO 56363
56486: POP
56487: POP
// end ;
56488: LD_VAR 0 4
56492: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56493: LD_INT 0
56495: PPUSH
56496: PPUSH
56497: PPUSH
// if not side or side > 8 then
56498: LD_VAR 0 1
56502: NOT
56503: PUSH
56504: LD_VAR 0 1
56508: PUSH
56509: LD_INT 8
56511: GREATER
56512: OR
56513: IFFALSE 56517
// exit ;
56515: GO 56704
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56517: LD_ADDR_VAR 0 4
56521: PUSH
56522: LD_INT 22
56524: PUSH
56525: LD_VAR 0 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 21
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PPUSH
56548: CALL_OW 69
56552: ST_TO_ADDR
// if not tmp then
56553: LD_VAR 0 4
56557: NOT
56558: IFFALSE 56562
// exit ;
56560: GO 56704
// enable_addtolog := true ;
56562: LD_ADDR_OWVAR 81
56566: PUSH
56567: LD_INT 1
56569: ST_TO_ADDR
// AddToLog ( [ ) ;
56570: LD_STRING [
56572: PPUSH
56573: CALL_OW 561
// for i in tmp do
56577: LD_ADDR_VAR 0 3
56581: PUSH
56582: LD_VAR 0 4
56586: PUSH
56587: FOR_IN
56588: IFFALSE 56695
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56590: LD_STRING [
56592: PUSH
56593: LD_VAR 0 3
56597: PPUSH
56598: CALL_OW 266
56602: STR
56603: PUSH
56604: LD_STRING , 
56606: STR
56607: PUSH
56608: LD_VAR 0 3
56612: PPUSH
56613: CALL_OW 250
56617: STR
56618: PUSH
56619: LD_STRING , 
56621: STR
56622: PUSH
56623: LD_VAR 0 3
56627: PPUSH
56628: CALL_OW 251
56632: STR
56633: PUSH
56634: LD_STRING , 
56636: STR
56637: PUSH
56638: LD_VAR 0 3
56642: PPUSH
56643: CALL_OW 254
56647: STR
56648: PUSH
56649: LD_STRING , 
56651: STR
56652: PUSH
56653: LD_VAR 0 3
56657: PPUSH
56658: LD_INT 1
56660: PPUSH
56661: CALL_OW 268
56665: STR
56666: PUSH
56667: LD_STRING , 
56669: STR
56670: PUSH
56671: LD_VAR 0 3
56675: PPUSH
56676: LD_INT 2
56678: PPUSH
56679: CALL_OW 268
56683: STR
56684: PUSH
56685: LD_STRING ],
56687: STR
56688: PPUSH
56689: CALL_OW 561
// end ;
56693: GO 56587
56695: POP
56696: POP
// AddToLog ( ]; ) ;
56697: LD_STRING ];
56699: PPUSH
56700: CALL_OW 561
// end ;
56704: LD_VAR 0 2
56708: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56709: LD_INT 0
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
56715: PPUSH
// if not area or not rate or not max then
56716: LD_VAR 0 1
56720: NOT
56721: PUSH
56722: LD_VAR 0 2
56726: NOT
56727: OR
56728: PUSH
56729: LD_VAR 0 4
56733: NOT
56734: OR
56735: IFFALSE 56739
// exit ;
56737: GO 56931
// while 1 do
56739: LD_INT 1
56741: IFFALSE 56931
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56743: LD_ADDR_VAR 0 9
56747: PUSH
56748: LD_VAR 0 1
56752: PPUSH
56753: LD_INT 1
56755: PPUSH
56756: CALL_OW 287
56760: PUSH
56761: LD_INT 10
56763: MUL
56764: ST_TO_ADDR
// r := rate / 10 ;
56765: LD_ADDR_VAR 0 7
56769: PUSH
56770: LD_VAR 0 2
56774: PUSH
56775: LD_INT 10
56777: DIVREAL
56778: ST_TO_ADDR
// time := 1 1$00 ;
56779: LD_ADDR_VAR 0 8
56783: PUSH
56784: LD_INT 2100
56786: ST_TO_ADDR
// if amount < min then
56787: LD_VAR 0 9
56791: PUSH
56792: LD_VAR 0 3
56796: LESS
56797: IFFALSE 56815
// r := r * 2 else
56799: LD_ADDR_VAR 0 7
56803: PUSH
56804: LD_VAR 0 7
56808: PUSH
56809: LD_INT 2
56811: MUL
56812: ST_TO_ADDR
56813: GO 56841
// if amount > max then
56815: LD_VAR 0 9
56819: PUSH
56820: LD_VAR 0 4
56824: GREATER
56825: IFFALSE 56841
// r := r / 2 ;
56827: LD_ADDR_VAR 0 7
56831: PUSH
56832: LD_VAR 0 7
56836: PUSH
56837: LD_INT 2
56839: DIVREAL
56840: ST_TO_ADDR
// time := time / r ;
56841: LD_ADDR_VAR 0 8
56845: PUSH
56846: LD_VAR 0 8
56850: PUSH
56851: LD_VAR 0 7
56855: DIVREAL
56856: ST_TO_ADDR
// if time < 0 then
56857: LD_VAR 0 8
56861: PUSH
56862: LD_INT 0
56864: LESS
56865: IFFALSE 56882
// time := time * - 1 ;
56867: LD_ADDR_VAR 0 8
56871: PUSH
56872: LD_VAR 0 8
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: MUL
56881: ST_TO_ADDR
// wait ( time ) ;
56882: LD_VAR 0 8
56886: PPUSH
56887: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56891: LD_INT 35
56893: PPUSH
56894: LD_INT 875
56896: PPUSH
56897: CALL_OW 12
56901: PPUSH
56902: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56906: LD_INT 1
56908: PPUSH
56909: LD_INT 5
56911: PPUSH
56912: CALL_OW 12
56916: PPUSH
56917: LD_VAR 0 1
56921: PPUSH
56922: LD_INT 1
56924: PPUSH
56925: CALL_OW 55
// end ;
56929: GO 56739
// end ;
56931: LD_VAR 0 5
56935: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56936: LD_INT 0
56938: PPUSH
56939: PPUSH
56940: PPUSH
56941: PPUSH
56942: PPUSH
56943: PPUSH
56944: PPUSH
56945: PPUSH
// if not turrets or not factories then
56946: LD_VAR 0 1
56950: NOT
56951: PUSH
56952: LD_VAR 0 2
56956: NOT
56957: OR
56958: IFFALSE 56962
// exit ;
56960: GO 57269
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56962: LD_ADDR_VAR 0 10
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: LD_INT 6
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 5
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 24
57004: PUSH
57005: LD_INT 25
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 23
57014: PUSH
57015: LD_INT 27
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 42
57028: PUSH
57029: LD_INT 43
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 44
57038: PUSH
57039: LD_INT 46
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 45
57048: PUSH
57049: LD_INT 47
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// result := [ ] ;
57066: LD_ADDR_VAR 0 3
57070: PUSH
57071: EMPTY
57072: ST_TO_ADDR
// for i in turrets do
57073: LD_ADDR_VAR 0 4
57077: PUSH
57078: LD_VAR 0 1
57082: PUSH
57083: FOR_IN
57084: IFFALSE 57267
// begin nat := GetNation ( i ) ;
57086: LD_ADDR_VAR 0 7
57090: PUSH
57091: LD_VAR 0 4
57095: PPUSH
57096: CALL_OW 248
57100: ST_TO_ADDR
// weapon := 0 ;
57101: LD_ADDR_VAR 0 8
57105: PUSH
57106: LD_INT 0
57108: ST_TO_ADDR
// if not nat then
57109: LD_VAR 0 7
57113: NOT
57114: IFFALSE 57118
// continue ;
57116: GO 57083
// for j in list [ nat ] do
57118: LD_ADDR_VAR 0 5
57122: PUSH
57123: LD_VAR 0 10
57127: PUSH
57128: LD_VAR 0 7
57132: ARRAY
57133: PUSH
57134: FOR_IN
57135: IFFALSE 57176
// if GetBWeapon ( i ) = j [ 1 ] then
57137: LD_VAR 0 4
57141: PPUSH
57142: CALL_OW 269
57146: PUSH
57147: LD_VAR 0 5
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: EQUAL
57156: IFFALSE 57174
// begin weapon := j [ 2 ] ;
57158: LD_ADDR_VAR 0 8
57162: PUSH
57163: LD_VAR 0 5
57167: PUSH
57168: LD_INT 2
57170: ARRAY
57171: ST_TO_ADDR
// break ;
57172: GO 57176
// end ;
57174: GO 57134
57176: POP
57177: POP
// if not weapon then
57178: LD_VAR 0 8
57182: NOT
57183: IFFALSE 57187
// continue ;
57185: GO 57083
// for k in factories do
57187: LD_ADDR_VAR 0 6
57191: PUSH
57192: LD_VAR 0 2
57196: PUSH
57197: FOR_IN
57198: IFFALSE 57263
// begin weapons := AvailableWeaponList ( k ) ;
57200: LD_ADDR_VAR 0 9
57204: PUSH
57205: LD_VAR 0 6
57209: PPUSH
57210: CALL_OW 478
57214: ST_TO_ADDR
// if not weapons then
57215: LD_VAR 0 9
57219: NOT
57220: IFFALSE 57224
// continue ;
57222: GO 57197
// if weapon in weapons then
57224: LD_VAR 0 8
57228: PUSH
57229: LD_VAR 0 9
57233: IN
57234: IFFALSE 57261
// begin result := [ i , weapon ] ;
57236: LD_ADDR_VAR 0 3
57240: PUSH
57241: LD_VAR 0 4
57245: PUSH
57246: LD_VAR 0 8
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// exit ;
57255: POP
57256: POP
57257: POP
57258: POP
57259: GO 57269
// end ; end ;
57261: GO 57197
57263: POP
57264: POP
// end ;
57265: GO 57083
57267: POP
57268: POP
// end ;
57269: LD_VAR 0 3
57273: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57274: LD_INT 0
57276: PPUSH
// if not side or side > 8 then
57277: LD_VAR 0 3
57281: NOT
57282: PUSH
57283: LD_VAR 0 3
57287: PUSH
57288: LD_INT 8
57290: GREATER
57291: OR
57292: IFFALSE 57296
// exit ;
57294: GO 57355
// if not range then
57296: LD_VAR 0 4
57300: NOT
57301: IFFALSE 57312
// range := - 12 ;
57303: LD_ADDR_VAR 0 4
57307: PUSH
57308: LD_INT 12
57310: NEG
57311: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57312: LD_VAR 0 1
57316: PPUSH
57317: LD_VAR 0 2
57321: PPUSH
57322: LD_VAR 0 3
57326: PPUSH
57327: LD_VAR 0 4
57331: PPUSH
57332: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57336: LD_VAR 0 1
57340: PPUSH
57341: LD_VAR 0 2
57345: PPUSH
57346: LD_VAR 0 3
57350: PPUSH
57351: CALL_OW 331
// end ;
57355: LD_VAR 0 5
57359: RET
// export function Video ( mode ) ; begin
57360: LD_INT 0
57362: PPUSH
// ingame_video = mode ;
57363: LD_ADDR_OWVAR 52
57367: PUSH
57368: LD_VAR 0 1
57372: ST_TO_ADDR
// interface_hidden = mode ;
57373: LD_ADDR_OWVAR 54
57377: PUSH
57378: LD_VAR 0 1
57382: ST_TO_ADDR
// end ;
57383: LD_VAR 0 2
57387: RET
// export function Join ( array , element ) ; begin
57388: LD_INT 0
57390: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57391: LD_ADDR_VAR 0 3
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: LD_VAR 0 1
57405: PUSH
57406: LD_INT 1
57408: PLUS
57409: PPUSH
57410: LD_VAR 0 2
57414: PPUSH
57415: CALL_OW 1
57419: ST_TO_ADDR
// end ;
57420: LD_VAR 0 3
57424: RET
// export function JoinUnion ( array , element ) ; begin
57425: LD_INT 0
57427: PPUSH
// result := array union element ;
57428: LD_ADDR_VAR 0 3
57432: PUSH
57433: LD_VAR 0 1
57437: PUSH
57438: LD_VAR 0 2
57442: UNION
57443: ST_TO_ADDR
// end ;
57444: LD_VAR 0 3
57448: RET
// export function GetBehemoths ( side ) ; begin
57449: LD_INT 0
57451: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57452: LD_ADDR_VAR 0 2
57456: PUSH
57457: LD_INT 22
57459: PUSH
57460: LD_VAR 0 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 31
57471: PUSH
57472: LD_INT 25
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PPUSH
57483: CALL_OW 69
57487: ST_TO_ADDR
// end ;
57488: LD_VAR 0 2
57492: RET
// export function Shuffle ( array ) ; var i , index ; begin
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
57497: PPUSH
// result := [ ] ;
57498: LD_ADDR_VAR 0 2
57502: PUSH
57503: EMPTY
57504: ST_TO_ADDR
// if not array then
57505: LD_VAR 0 1
57509: NOT
57510: IFFALSE 57514
// exit ;
57512: GO 57613
// Randomize ;
57514: CALL_OW 10
// for i = array downto 1 do
57518: LD_ADDR_VAR 0 3
57522: PUSH
57523: DOUBLE
57524: LD_VAR 0 1
57528: INC
57529: ST_TO_ADDR
57530: LD_INT 1
57532: PUSH
57533: FOR_DOWNTO
57534: IFFALSE 57611
// begin index := rand ( 1 , array ) ;
57536: LD_ADDR_VAR 0 4
57540: PUSH
57541: LD_INT 1
57543: PPUSH
57544: LD_VAR 0 1
57548: PPUSH
57549: CALL_OW 12
57553: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57554: LD_ADDR_VAR 0 2
57558: PUSH
57559: LD_VAR 0 2
57563: PPUSH
57564: LD_VAR 0 2
57568: PUSH
57569: LD_INT 1
57571: PLUS
57572: PPUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_VAR 0 4
57582: ARRAY
57583: PPUSH
57584: CALL_OW 2
57588: ST_TO_ADDR
// array := Delete ( array , index ) ;
57589: LD_ADDR_VAR 0 1
57593: PUSH
57594: LD_VAR 0 1
57598: PPUSH
57599: LD_VAR 0 4
57603: PPUSH
57604: CALL_OW 3
57608: ST_TO_ADDR
// end ;
57609: GO 57533
57611: POP
57612: POP
// end ;
57613: LD_VAR 0 2
57617: RET
// export function GetBaseMaterials ( base ) ; begin
57618: LD_INT 0
57620: PPUSH
// result := [ 0 , 0 , 0 ] ;
57621: LD_ADDR_VAR 0 2
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// if not base then
57640: LD_VAR 0 1
57644: NOT
57645: IFFALSE 57649
// exit ;
57647: GO 57698
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57649: LD_ADDR_VAR 0 2
57653: PUSH
57654: LD_VAR 0 1
57658: PPUSH
57659: LD_INT 1
57661: PPUSH
57662: CALL_OW 275
57666: PUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: LD_INT 2
57674: PPUSH
57675: CALL_OW 275
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: LD_INT 3
57687: PPUSH
57688: CALL_OW 275
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// end ;
57698: LD_VAR 0 2
57702: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57703: LD_INT 0
57705: PPUSH
57706: PPUSH
// result := array ;
57707: LD_ADDR_VAR 0 3
57711: PUSH
57712: LD_VAR 0 1
57716: ST_TO_ADDR
// if size > 0 then
57717: LD_VAR 0 2
57721: PUSH
57722: LD_INT 0
57724: GREATER
57725: IFFALSE 57771
// for i := array downto size do
57727: LD_ADDR_VAR 0 4
57731: PUSH
57732: DOUBLE
57733: LD_VAR 0 1
57737: INC
57738: ST_TO_ADDR
57739: LD_VAR 0 2
57743: PUSH
57744: FOR_DOWNTO
57745: IFFALSE 57769
// result := Delete ( result , result ) ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_VAR 0 3
57756: PPUSH
57757: LD_VAR 0 3
57761: PPUSH
57762: CALL_OW 3
57766: ST_TO_ADDR
57767: GO 57744
57769: POP
57770: POP
// end ;
57771: LD_VAR 0 3
57775: RET
// export function ComExit ( unit ) ; var tmp ; begin
57776: LD_INT 0
57778: PPUSH
57779: PPUSH
// if not IsInUnit ( unit ) then
57780: LD_VAR 0 1
57784: PPUSH
57785: CALL_OW 310
57789: NOT
57790: IFFALSE 57794
// exit ;
57792: GO 57854
// tmp := IsInUnit ( unit ) ;
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: LD_VAR 0 1
57803: PPUSH
57804: CALL_OW 310
57808: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57809: LD_VAR 0 3
57813: PPUSH
57814: CALL_OW 247
57818: PUSH
57819: LD_INT 2
57821: EQUAL
57822: IFFALSE 57835
// ComExitVehicle ( unit ) else
57824: LD_VAR 0 1
57828: PPUSH
57829: CALL_OW 121
57833: GO 57844
// ComExitBuilding ( unit ) ;
57835: LD_VAR 0 1
57839: PPUSH
57840: CALL_OW 122
// result := tmp ;
57844: LD_ADDR_VAR 0 2
57848: PUSH
57849: LD_VAR 0 3
57853: ST_TO_ADDR
// end ;
57854: LD_VAR 0 2
57858: RET
// export function ResetHc ; begin
57859: LD_INT 0
57861: PPUSH
// InitHc ;
57862: CALL_OW 19
// hc_importance := 0 ;
57866: LD_ADDR_OWVAR 32
57870: PUSH
57871: LD_INT 0
57873: ST_TO_ADDR
// end ; end_of_file
57874: LD_VAR 0 1
57878: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57879: LD_VAR 0 1
57883: PUSH
57884: LD_INT 200
57886: DOUBLE
57887: GREATEREQUAL
57888: IFFALSE 57896
57890: LD_INT 299
57892: DOUBLE
57893: LESSEQUAL
57894: IFTRUE 57898
57896: GO 57930
57898: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57899: LD_VAR 0 1
57903: PPUSH
57904: LD_VAR 0 2
57908: PPUSH
57909: LD_VAR 0 3
57913: PPUSH
57914: LD_VAR 0 4
57918: PPUSH
57919: LD_VAR 0 5
57923: PPUSH
57924: CALL 19703 0 5
57928: GO 58007
57930: LD_INT 300
57932: DOUBLE
57933: GREATEREQUAL
57934: IFFALSE 57942
57936: LD_INT 399
57938: DOUBLE
57939: LESSEQUAL
57940: IFTRUE 57944
57942: GO 58006
57944: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_VAR 0 2
57954: PPUSH
57955: LD_VAR 0 3
57959: PPUSH
57960: LD_VAR 0 4
57964: PPUSH
57965: LD_VAR 0 5
57969: PPUSH
57970: LD_VAR 0 6
57974: PPUSH
57975: LD_VAR 0 7
57979: PPUSH
57980: LD_VAR 0 8
57984: PPUSH
57985: LD_VAR 0 9
57989: PPUSH
57990: LD_VAR 0 10
57994: PPUSH
57995: LD_VAR 0 11
57999: PPUSH
58000: CALL 17609 0 11
58004: GO 58007
58006: POP
// end ;
58007: PPOPN 11
58009: END
