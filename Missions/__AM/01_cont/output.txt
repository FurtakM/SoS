// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 28279 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 28279 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 28279 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 28279 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 68 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 68
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 66011 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 70080 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 70080 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 70080 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 70080 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 70080 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 70080 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 28279 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 70080 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5951
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
5796: LD_INT 22
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 50
5808: PUSH
5809: EMPTY
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_INT 1
5823: GREATER
5824: IFFALSE 5838
// Say ( JMM , D6-JMM-1 ) ;
5826: LD_EXP 16
5830: PPUSH
5831: LD_STRING D6-JMM-1
5833: PPUSH
5834: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5838: LD_EXP 18
5842: PPUSH
5843: CALL_OW 302
5847: PUSH
5848: LD_EXP 7
5852: AND
5853: IFFALSE 5867
// Say ( Cyrus , D6-Cyrus-1 ) ;
5855: LD_EXP 18
5859: PPUSH
5860: LD_STRING D6-Cyrus-1
5862: PPUSH
5863: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5867: LD_EXP 17
5871: PPUSH
5872: CALL_OW 302
5876: PUSH
5877: LD_EXP 4
5881: AND
5882: IFFALSE 5896
// Say ( Bobby , D6-Bobby-1 ) ;
5884: LD_EXP 17
5888: PPUSH
5889: LD_STRING D6-Bobby-1
5891: PPUSH
5892: CALL_OW 88
// DialogueOff ;
5896: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5900: LD_INT 140
5902: PUSH
5903: LD_INT 105
5905: PUSH
5906: LD_INT 70
5908: PUSH
5909: LD_INT 70
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_OWVAR 67
5922: ARRAY
5923: PPUSH
5924: CALL_OW 67
// meta_action := true ;
5928: LD_ADDR_EXP 10
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5936: LD_EXP 24
5940: PPUSH
5941: LD_INT 94
5943: PPUSH
5944: LD_INT 8
5946: PPUSH
5947: CALL_OW 114
// end ;
5951: PPOPN 2
5953: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5954: LD_EXP 16
5958: PPUSH
5959: LD_INT 14
5961: PPUSH
5962: CALL_OW 308
5966: IFFALSE 5978
5968: GO 5970
5970: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5971: LD_STRING ACH_SECRET
5973: PPUSH
5974: CALL_OW 543
5978: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 93
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: CALL_OW 297
5994: PUSH
5995: LD_INT 5
5997: LESS
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: LD_INT 1
6016: GREATER
6017: AND
6018: IFFALSE 6035
6020: GO 6022
6022: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING D6a-JMM-1
6030: PPUSH
6031: CALL_OW 88
6035: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6036: LD_EXP 17
6040: PPUSH
6041: LD_INT 10
6043: PPUSH
6044: CALL_OW 308
6048: PUSH
6049: LD_EXP 17
6053: PPUSH
6054: LD_INT 12
6056: PPUSH
6057: CALL_OW 308
6061: OR
6062: IFFALSE 6118
6064: GO 6066
6066: DISABLE
// begin bobby_saved := true ;
6067: LD_ADDR_EXP 12
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6075: LD_EXP 17
6079: PPUSH
6080: CALL_OW 256
6084: PPUSH
6085: LD_STRING 01_BobbyLifePoints_1
6087: PPUSH
6088: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6092: LD_EXP 17
6096: PPUSH
6097: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6101: LD_STRING Bobby
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6111: LD_STRING enableBioCharacter(BIO_BOBBY)
6113: PPUSH
6114: CALL_OW 559
// end ;
6118: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6119: LD_EXP 18
6123: PPUSH
6124: LD_INT 10
6126: PPUSH
6127: CALL_OW 308
6131: PUSH
6132: LD_EXP 18
6136: PPUSH
6137: LD_INT 12
6139: PPUSH
6140: CALL_OW 308
6144: OR
6145: IFFALSE 6201
6147: GO 6149
6149: DISABLE
// begin cyrus_saved := true ;
6150: LD_ADDR_EXP 13
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6158: LD_EXP 18
6162: PPUSH
6163: CALL_OW 256
6167: PPUSH
6168: LD_STRING 01_CyrusLifePoints_1
6170: PPUSH
6171: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6175: LD_EXP 18
6179: PPUSH
6180: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6184: LD_STRING Cyrus
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6194: LD_STRING enableBioCharacter(BIO_CYRUS)
6196: PPUSH
6197: CALL_OW 559
// end ;
6201: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6202: LD_EXP 16
6206: PPUSH
6207: LD_INT 10
6209: PPUSH
6210: CALL_OW 308
6214: PUSH
6215: LD_EXP 16
6219: PPUSH
6220: LD_INT 12
6222: PPUSH
6223: CALL_OW 308
6227: OR
6228: IFFALSE 6857
6230: GO 6232
6232: DISABLE
6233: LD_INT 0
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
// begin if macmilan_use_radio then
6241: LD_EXP 6
6245: IFFALSE 6254
// SetAchievement ( ACH_RADIO ) ;
6247: LD_STRING ACH_RADIO
6249: PPUSH
6250: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6254: LD_EXP 13
6258: NOT
6259: PUSH
6260: LD_EXP 7
6264: AND
6265: PUSH
6266: LD_EXP 18
6270: PPUSH
6271: CALL_OW 302
6275: AND
6276: PUSH
6277: LD_EXP 12
6281: NOT
6282: PUSH
6283: LD_EXP 4
6287: AND
6288: PUSH
6289: LD_EXP 17
6293: PPUSH
6294: CALL_OW 302
6298: AND
6299: OR
6300: IFFALSE 6341
// case Query ( Q2 ) of 1 :
6302: LD_STRING Q2
6304: PPUSH
6305: CALL_OW 97
6309: PUSH
6310: LD_INT 1
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// wait_for_them := true ; 2 :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
6327: GO 6341
6329: LD_INT 2
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6340
6337: POP
// ; end ;
6338: GO 6341
6340: POP
// if wait_for_them then
6341: LD_VAR 0 3
6345: IFFALSE 6458
// repeat wait ( 0 0$01 ) ;
6347: LD_INT 35
6349: PPUSH
6350: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6354: LD_EXP 13
6358: PUSH
6359: LD_EXP 12
6363: AND
6364: PUSH
6365: LD_EXP 13
6369: PUSH
6370: LD_EXP 4
6374: NOT
6375: PUSH
6376: LD_EXP 17
6380: PPUSH
6381: CALL_OW 303
6385: OR
6386: PUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 301
6396: OR
6397: AND
6398: OR
6399: PUSH
6400: LD_EXP 12
6404: PUSH
6405: LD_EXP 7
6409: NOT
6410: PUSH
6411: LD_EXP 18
6415: PPUSH
6416: CALL_OW 303
6420: OR
6421: PUSH
6422: LD_EXP 18
6426: PPUSH
6427: CALL_OW 301
6431: OR
6432: AND
6433: OR
6434: PUSH
6435: LD_EXP 17
6439: PPUSH
6440: CALL_OW 301
6444: PUSH
6445: LD_EXP 18
6449: PPUSH
6450: CALL_OW 301
6454: AND
6455: OR
6456: IFFALSE 6347
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6458: LD_EXP 16
6462: PPUSH
6463: CALL_OW 256
6467: PPUSH
6468: LD_STRING 01_JMMLifePoints_1
6470: PPUSH
6471: CALL_OW 39
// RemoveUnit ( JMM ) ;
6475: LD_EXP 16
6479: PPUSH
6480: CALL_OW 64
// to_reward := [ JMM ] ;
6484: LD_ADDR_VAR 0 2
6488: PUSH
6489: LD_EXP 16
6493: PUSH
6494: EMPTY
6495: LIST
6496: ST_TO_ADDR
// if bobby_saved then
6497: LD_EXP 12
6501: IFFALSE 6519
// to_reward := to_reward ^ Bobby ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_EXP 17
6517: ADD
6518: ST_TO_ADDR
// if cyrus_saved then
6519: LD_EXP 13
6523: IFFALSE 6541
// to_reward := to_reward ^ Cyrus ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_VAR 0 2
6534: PUSH
6535: LD_EXP 18
6539: ADD
6540: ST_TO_ADDR
// m1 := true ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// m2 := bobby_saved ;
6549: LD_ADDR_VAR 0 5
6553: PUSH
6554: LD_EXP 12
6558: ST_TO_ADDR
// m3 := cyrus_saved ;
6559: LD_ADDR_VAR 0 6
6563: PUSH
6564: LD_EXP 13
6568: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6569: LD_STRING JMM
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 101
// if not bobby_in_squad then
6579: LD_EXP 4
6583: NOT
6584: IFFALSE 6597
// AddMedal ( Bobby , - 1 ) ;
6586: LD_STRING Bobby
6588: PPUSH
6589: LD_INT 1
6591: NEG
6592: PPUSH
6593: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6597: LD_EXP 12
6601: NOT
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: CALL_OW 303
6612: PUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 301
6622: OR
6623: AND
6624: IFFALSE 6637
// AddMedal ( Bobby , - 2 ) ;
6626: LD_STRING Bobby
6628: PPUSH
6629: LD_INT 2
6631: NEG
6632: PPUSH
6633: CALL_OW 101
// if not cyrus_in_squad then
6637: LD_EXP 7
6641: NOT
6642: IFFALSE 6655
// AddMedal ( Cyrus , - 1 ) ;
6644: LD_STRING Cyrus
6646: PPUSH
6647: LD_INT 1
6649: NEG
6650: PPUSH
6651: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6655: LD_EXP 13
6659: NOT
6660: PUSH
6661: LD_EXP 18
6665: PPUSH
6666: CALL_OW 303
6670: PUSH
6671: LD_EXP 18
6675: PPUSH
6676: CALL_OW 301
6680: OR
6681: AND
6682: IFFALSE 6695
// AddMedal ( Cyrus , - 2 ) ;
6684: LD_STRING Cyrus
6686: PPUSH
6687: LD_INT 2
6689: NEG
6690: PPUSH
6691: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6695: LD_OWVAR 67
6699: PUSH
6700: LD_INT 3
6702: GREATEREQUAL
6703: PUSH
6704: LD_VAR 0 4
6708: AND
6709: PUSH
6710: LD_VAR 0 5
6714: AND
6715: PUSH
6716: LD_VAR 0 6
6720: AND
6721: IFFALSE 6733
// SetAchievementEX ( ACH_AMER , 1 ) ;
6723: LD_STRING ACH_AMER
6725: PPUSH
6726: LD_INT 1
6728: PPUSH
6729: CALL_OW 564
// GiveMedals ( MAIN ) ;
6733: LD_STRING MAIN
6735: PPUSH
6736: CALL_OW 102
// RewardPeople ( to_reward ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: CALL_OW 43
// if bobby_saved then
6749: LD_EXP 12
6753: IFFALSE 6773
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6755: LD_EXP 17
6759: PPUSH
6760: LD_EXP 2
6764: PUSH
6765: LD_STRING Bobby
6767: STR
6768: PPUSH
6769: CALL_OW 38
// if cyrus_saved then
6773: LD_EXP 13
6777: IFFALSE 6797
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6779: LD_EXP 18
6783: PPUSH
6784: LD_EXP 2
6788: PUSH
6789: LD_STRING Cyrus
6791: STR
6792: PPUSH
6793: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6797: LD_EXP 16
6801: PPUSH
6802: LD_EXP 2
6806: PUSH
6807: LD_STRING JMM
6809: STR
6810: PPUSH
6811: CALL_OW 38
// if tick <= 3 3$00 then
6815: LD_OWVAR 1
6819: PUSH
6820: LD_INT 6300
6822: LESSEQUAL
6823: IFFALSE 6832
// SetAchievement ( ACH_ASPEED_1 ) ;
6825: LD_STRING ACH_ASPEED_1
6827: PPUSH
6828: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6832: LD_STRING enableBioCharacter(BIO_JMM)
6834: PPUSH
6835: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6839: LD_STRING enableBioCharacter(BIO_JOAN)
6841: PPUSH
6842: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6846: LD_STRING enableBioCharacter(BIO_BARN)
6848: PPUSH
6849: CALL_OW 559
// YouWin ;
6853: CALL_OW 103
// end ; end_of_file
6857: PPOPN 6
6859: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6860: LD_VAR 0 1
6864: PUSH
6865: LD_EXP 16
6869: EQUAL
6870: IFFALSE 6879
// YouLost ( JMM ) ;
6872: LD_STRING JMM
6874: PPUSH
6875: CALL_OW 104
// end ;
6879: PPOPN 1
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL 23053 0 2
// end ;
6896: PPOPN 2
6898: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
6899: LD_INT 0
6901: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
6902: LD_VAR 0 1
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 23
6919: PUSH
6920: LD_INT 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: IN
6947: PUSH
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 1
6955: EQUAL
6956: AND
6957: IFFALSE 7014
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7012
// ComAttackUnit ( i , JMM ) ;
6996: LD_VAR 0 4
7000: PPUSH
7001: LD_EXP 16
7005: PPUSH
7006: CALL_OW 115
7010: GO 6993
7012: POP
7013: POP
// end ;
7014: PPOPN 4
7016: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL 22995 0 1
// if un = JMM then
7026: LD_VAR 0 1
7030: PUSH
7031: LD_EXP 16
7035: EQUAL
7036: IFFALSE 7045
// YouLost ( JMM ) ;
7038: LD_STRING JMM
7040: PPUSH
7041: CALL_OW 104
// end ; end_of_file end_of_file
7045: PPOPN 1
7047: END
// export globalGameSaveCounter ; every 0 0$1 do
7048: GO 7050
7050: DISABLE
// begin enable ;
7051: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7052: LD_STRING updateTimer(
7054: PUSH
7055: LD_OWVAR 1
7059: STR
7060: PUSH
7061: LD_STRING );
7063: STR
7064: PPUSH
7065: CALL_OW 559
// end ;
7069: END
// every 0 0$1 do
7070: GO 7072
7072: DISABLE
// begin globalGameSaveCounter := 0 ;
7073: LD_ADDR_EXP 28
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7081: LD_STRING setGameSaveCounter(0)
7083: PPUSH
7084: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7088: LD_STRING initStreamRollete();
7090: PPUSH
7091: CALL_OW 559
// InitStreamMode ;
7095: CALL 8438 0 0
// DefineStreamItems ( false ) ;
7099: LD_INT 0
7101: PPUSH
7102: CALL 8902 0 1
// end ;
7106: END
// export function SOS_MapStart ( ) ; begin
7107: LD_INT 0
7109: PPUSH
// if streamModeActive then
7110: LD_EXP 29
7114: IFFALSE 7123
// DefineStreamItems ( true ) ;
7116: LD_INT 1
7118: PPUSH
7119: CALL 8902 0 1
// UpdateLuaVariables ( ) ;
7123: CALL 7140 0 0
// UpdateFactoryWaypoints ( ) ;
7127: CALL 21904 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7131: CALL 22156 0 0
// end ;
7135: LD_VAR 0 1
7139: RET
// function UpdateLuaVariables ( ) ; begin
7140: LD_INT 0
7142: PPUSH
// if globalGameSaveCounter then
7143: LD_EXP 28
7147: IFFALSE 7181
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7149: LD_ADDR_EXP 28
7153: PUSH
7154: LD_EXP 28
7158: PPUSH
7159: CALL 67372 0 1
7163: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7164: LD_STRING setGameSaveCounter(
7166: PUSH
7167: LD_EXP 28
7171: STR
7172: PUSH
7173: LD_STRING )
7175: STR
7176: PPUSH
7177: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7181: LD_STRING setGameDifficulty(
7183: PUSH
7184: LD_OWVAR 67
7188: STR
7189: PUSH
7190: LD_STRING )
7192: STR
7193: PPUSH
7194: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7198: LD_STRING displayDifficulty(
7200: PUSH
7201: LD_OWVAR 67
7205: STR
7206: PUSH
7207: LD_STRING )
7209: STR
7210: PPUSH
7211: CALL_OW 559
// end ;
7215: LD_VAR 0 1
7219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7220: LD_INT 0
7222: PPUSH
// if p2 = stream_mode then
7223: LD_VAR 0 2
7227: PUSH
7228: LD_INT 100
7230: EQUAL
7231: IFFALSE 8234
// begin if not StreamModeActive then
7233: LD_EXP 29
7237: NOT
7238: IFFALSE 7248
// StreamModeActive := true ;
7240: LD_ADDR_EXP 29
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// if p3 = 0 then
7248: LD_VAR 0 3
7252: PUSH
7253: LD_INT 0
7255: EQUAL
7256: IFFALSE 7262
// InitStreamMode ;
7258: CALL 8438 0 0
// if p3 = 1 then
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: IFFALSE 7280
// sRocket := true ;
7272: LD_ADDR_EXP 34
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// if p3 = 2 then
7280: LD_VAR 0 3
7284: PUSH
7285: LD_INT 2
7287: EQUAL
7288: IFFALSE 7298
// sSpeed := true ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// if p3 = 3 then
7298: LD_VAR 0 3
7302: PUSH
7303: LD_INT 3
7305: EQUAL
7306: IFFALSE 7316
// sEngine := true ;
7308: LD_ADDR_EXP 35
7312: PUSH
7313: LD_INT 1
7315: ST_TO_ADDR
// if p3 = 4 then
7316: LD_VAR 0 3
7320: PUSH
7321: LD_INT 4
7323: EQUAL
7324: IFFALSE 7334
// sSpec := true ;
7326: LD_ADDR_EXP 32
7330: PUSH
7331: LD_INT 1
7333: ST_TO_ADDR
// if p3 = 5 then
7334: LD_VAR 0 3
7338: PUSH
7339: LD_INT 5
7341: EQUAL
7342: IFFALSE 7352
// sLevel := true ;
7344: LD_ADDR_EXP 36
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// if p3 = 6 then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 6
7359: EQUAL
7360: IFFALSE 7370
// sArmoury := true ;
7362: LD_ADDR_EXP 37
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// if p3 = 7 then
7370: LD_VAR 0 3
7374: PUSH
7375: LD_INT 7
7377: EQUAL
7378: IFFALSE 7388
// sRadar := true ;
7380: LD_ADDR_EXP 38
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 8 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 8
7395: EQUAL
7396: IFFALSE 7406
// sBunker := true ;
7398: LD_ADDR_EXP 39
7402: PUSH
7403: LD_INT 1
7405: ST_TO_ADDR
// if p3 = 9 then
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 9
7413: EQUAL
7414: IFFALSE 7424
// sHack := true ;
7416: LD_ADDR_EXP 40
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// if p3 = 10 then
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 10
7431: EQUAL
7432: IFFALSE 7442
// sFire := true ;
7434: LD_ADDR_EXP 41
7438: PUSH
7439: LD_INT 1
7441: ST_TO_ADDR
// if p3 = 11 then
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 11
7449: EQUAL
7450: IFFALSE 7460
// sRefresh := true ;
7452: LD_ADDR_EXP 42
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// if p3 = 12 then
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 12
7467: EQUAL
7468: IFFALSE 7478
// sExp := true ;
7470: LD_ADDR_EXP 43
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// if p3 = 13 then
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 13
7485: EQUAL
7486: IFFALSE 7496
// sDepot := true ;
7488: LD_ADDR_EXP 44
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// if p3 = 14 then
7496: LD_VAR 0 3
7500: PUSH
7501: LD_INT 14
7503: EQUAL
7504: IFFALSE 7514
// sFlag := true ;
7506: LD_ADDR_EXP 45
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// if p3 = 15 then
7514: LD_VAR 0 3
7518: PUSH
7519: LD_INT 15
7521: EQUAL
7522: IFFALSE 7532
// sKamikadze := true ;
7524: LD_ADDR_EXP 53
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// if p3 = 16 then
7532: LD_VAR 0 3
7536: PUSH
7537: LD_INT 16
7539: EQUAL
7540: IFFALSE 7550
// sTroll := true ;
7542: LD_ADDR_EXP 54
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// if p3 = 17 then
7550: LD_VAR 0 3
7554: PUSH
7555: LD_INT 17
7557: EQUAL
7558: IFFALSE 7568
// sSlow := true ;
7560: LD_ADDR_EXP 55
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// if p3 = 18 then
7568: LD_VAR 0 3
7572: PUSH
7573: LD_INT 18
7575: EQUAL
7576: IFFALSE 7586
// sLack := true ;
7578: LD_ADDR_EXP 56
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if p3 = 19 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 19
7593: EQUAL
7594: IFFALSE 7604
// sTank := true ;
7596: LD_ADDR_EXP 58
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if p3 = 20 then
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 20
7611: EQUAL
7612: IFFALSE 7622
// sRemote := true ;
7614: LD_ADDR_EXP 59
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 21 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 21
7629: EQUAL
7630: IFFALSE 7640
// sPowell := true ;
7632: LD_ADDR_EXP 60
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if p3 = 22 then
7640: LD_VAR 0 3
7644: PUSH
7645: LD_INT 22
7647: EQUAL
7648: IFFALSE 7658
// sTeleport := true ;
7650: LD_ADDR_EXP 63
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// if p3 = 23 then
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 23
7665: EQUAL
7666: IFFALSE 7676
// sOilTower := true ;
7668: LD_ADDR_EXP 65
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 24 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 24
7683: EQUAL
7684: IFFALSE 7694
// sShovel := true ;
7686: LD_ADDR_EXP 66
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if p3 = 25 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 25
7701: EQUAL
7702: IFFALSE 7712
// sSheik := true ;
7704: LD_ADDR_EXP 67
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if p3 = 26 then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 26
7719: EQUAL
7720: IFFALSE 7730
// sEarthquake := true ;
7722: LD_ADDR_EXP 69
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// if p3 = 27 then
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 27
7737: EQUAL
7738: IFFALSE 7748
// sAI := true ;
7740: LD_ADDR_EXP 70
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if p3 = 28 then
7748: LD_VAR 0 3
7752: PUSH
7753: LD_INT 28
7755: EQUAL
7756: IFFALSE 7766
// sCargo := true ;
7758: LD_ADDR_EXP 73
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// if p3 = 29 then
7766: LD_VAR 0 3
7770: PUSH
7771: LD_INT 29
7773: EQUAL
7774: IFFALSE 7784
// sDLaser := true ;
7776: LD_ADDR_EXP 74
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 30 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 30
7791: EQUAL
7792: IFFALSE 7802
// sExchange := true ;
7794: LD_ADDR_EXP 75
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 31 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 31
7809: EQUAL
7810: IFFALSE 7820
// sFac := true ;
7812: LD_ADDR_EXP 76
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// if p3 = 32 then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 32
7827: EQUAL
7828: IFFALSE 7838
// sPower := true ;
7830: LD_ADDR_EXP 77
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// if p3 = 33 then
7838: LD_VAR 0 3
7842: PUSH
7843: LD_INT 33
7845: EQUAL
7846: IFFALSE 7856
// sRandom := true ;
7848: LD_ADDR_EXP 78
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// if p3 = 34 then
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 34
7863: EQUAL
7864: IFFALSE 7874
// sShield := true ;
7866: LD_ADDR_EXP 79
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// if p3 = 35 then
7874: LD_VAR 0 3
7878: PUSH
7879: LD_INT 35
7881: EQUAL
7882: IFFALSE 7892
// sTime := true ;
7884: LD_ADDR_EXP 80
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// if p3 = 36 then
7892: LD_VAR 0 3
7896: PUSH
7897: LD_INT 36
7899: EQUAL
7900: IFFALSE 7910
// sTools := true ;
7902: LD_ADDR_EXP 81
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// if p3 = 101 then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 101
7917: EQUAL
7918: IFFALSE 7928
// sSold := true ;
7920: LD_ADDR_EXP 46
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// if p3 = 102 then
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 102
7935: EQUAL
7936: IFFALSE 7946
// sDiff := true ;
7938: LD_ADDR_EXP 47
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// if p3 = 103 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 103
7953: EQUAL
7954: IFFALSE 7964
// sFog := true ;
7956: LD_ADDR_EXP 50
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 104 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 104
7971: EQUAL
7972: IFFALSE 7982
// sReset := true ;
7974: LD_ADDR_EXP 51
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// if p3 = 105 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 105
7989: EQUAL
7990: IFFALSE 8000
// sSun := true ;
7992: LD_ADDR_EXP 52
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 106 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 106
8007: EQUAL
8008: IFFALSE 8018
// sTiger := true ;
8010: LD_ADDR_EXP 48
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// if p3 = 107 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 107
8025: EQUAL
8026: IFFALSE 8036
// sBomb := true ;
8028: LD_ADDR_EXP 49
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// if p3 = 108 then
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 108
8043: EQUAL
8044: IFFALSE 8054
// sWound := true ;
8046: LD_ADDR_EXP 57
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if p3 = 109 then
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 109
8061: EQUAL
8062: IFFALSE 8072
// sBetray := true ;
8064: LD_ADDR_EXP 61
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// if p3 = 110 then
8072: LD_VAR 0 3
8076: PUSH
8077: LD_INT 110
8079: EQUAL
8080: IFFALSE 8090
// sContamin := true ;
8082: LD_ADDR_EXP 62
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// if p3 = 111 then
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 111
8097: EQUAL
8098: IFFALSE 8108
// sOil := true ;
8100: LD_ADDR_EXP 64
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// if p3 = 112 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 112
8115: EQUAL
8116: IFFALSE 8126
// sStu := true ;
8118: LD_ADDR_EXP 68
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// if p3 = 113 then
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 113
8133: EQUAL
8134: IFFALSE 8144
// sBazooka := true ;
8136: LD_ADDR_EXP 71
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 114 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 114
8151: EQUAL
8152: IFFALSE 8162
// sMortar := true ;
8154: LD_ADDR_EXP 72
8158: PUSH
8159: LD_INT 1
8161: ST_TO_ADDR
// if p3 = 115 then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 115
8169: EQUAL
8170: IFFALSE 8180
// sRanger := true ;
8172: LD_ADDR_EXP 82
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if p3 = 116 then
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 116
8187: EQUAL
8188: IFFALSE 8198
// sComputer := true ;
8190: LD_ADDR_EXP 83
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if p3 = 117 then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 117
8205: EQUAL
8206: IFFALSE 8216
// s30 := true ;
8208: LD_ADDR_EXP 84
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// if p3 = 118 then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 118
8223: EQUAL
8224: IFFALSE 8234
// s60 := true ;
8226: LD_ADDR_EXP 85
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// end ; if p2 = hack_mode then
8234: LD_VAR 0 2
8238: PUSH
8239: LD_INT 101
8241: EQUAL
8242: IFFALSE 8370
// begin case p3 of 1 :
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 1
8251: DOUBLE
8252: EQUAL
8253: IFTRUE 8257
8255: GO 8264
8257: POP
// hHackUnlimitedResources ; 2 :
8258: CALL 20517 0 0
8262: GO 8370
8264: LD_INT 2
8266: DOUBLE
8267: EQUAL
8268: IFTRUE 8272
8270: GO 8279
8272: POP
// hHackSetLevel10 ; 3 :
8273: CALL 20650 0 0
8277: GO 8370
8279: LD_INT 3
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8294
8287: POP
// hHackSetLevel10YourUnits ; 4 :
8288: CALL 20735 0 0
8292: GO 8370
8294: LD_INT 4
8296: DOUBLE
8297: EQUAL
8298: IFTRUE 8302
8300: GO 8309
8302: POP
// hHackInvincible ; 5 :
8303: CALL 21183 0 0
8307: GO 8370
8309: LD_INT 5
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8324
8317: POP
// hHackInvisible ; 6 :
8318: CALL 21294 0 0
8322: GO 8370
8324: LD_INT 6
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8339
8332: POP
// hHackChangeYourSide ; 7 :
8333: CALL 21351 0 0
8337: GO 8370
8339: LD_INT 7
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8354
8347: POP
// hHackChangeUnitSide ; 8 :
8348: CALL 21393 0 0
8352: GO 8370
8354: LD_INT 8
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8369
8362: POP
// hHackFog ; end ;
8363: CALL 21494 0 0
8367: GO 8370
8369: POP
// end ; if p2 = game_save_mode then
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 102
8377: EQUAL
8378: IFFALSE 8433
// begin if p3 = 1 then
8380: LD_VAR 0 3
8384: PUSH
8385: LD_INT 1
8387: EQUAL
8388: IFFALSE 8400
// globalGameSaveCounter := p4 ;
8390: LD_ADDR_EXP 28
8394: PUSH
8395: LD_VAR 0 4
8399: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8400: LD_VAR 0 3
8404: PUSH
8405: LD_INT 2
8407: EQUAL
8408: PUSH
8409: LD_EXP 28
8413: AND
8414: IFFALSE 8433
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8416: LD_STRING setGameSaveCounter(
8418: PUSH
8419: LD_EXP 28
8423: STR
8424: PUSH
8425: LD_STRING )
8427: STR
8428: PPUSH
8429: CALL_OW 559
// end ; end ;
8433: LD_VAR 0 7
8437: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8438: LD_INT 0
8440: PPUSH
// streamModeActive := false ;
8441: LD_ADDR_EXP 29
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// normalCounter := 36 ;
8449: LD_ADDR_EXP 30
8453: PUSH
8454: LD_INT 36
8456: ST_TO_ADDR
// hardcoreCounter := 18 ;
8457: LD_ADDR_EXP 31
8461: PUSH
8462: LD_INT 18
8464: ST_TO_ADDR
// sRocket := false ;
8465: LD_ADDR_EXP 34
8469: PUSH
8470: LD_INT 0
8472: ST_TO_ADDR
// sSpeed := false ;
8473: LD_ADDR_EXP 33
8477: PUSH
8478: LD_INT 0
8480: ST_TO_ADDR
// sEngine := false ;
8481: LD_ADDR_EXP 35
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// sSpec := false ;
8489: LD_ADDR_EXP 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// sLevel := false ;
8497: LD_ADDR_EXP 36
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// sArmoury := false ;
8505: LD_ADDR_EXP 37
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// sRadar := false ;
8513: LD_ADDR_EXP 38
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// sBunker := false ;
8521: LD_ADDR_EXP 39
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sHack := false ;
8529: LD_ADDR_EXP 40
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sFire := false ;
8537: LD_ADDR_EXP 41
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sRefresh := false ;
8545: LD_ADDR_EXP 42
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sExp := false ;
8553: LD_ADDR_EXP 43
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sDepot := false ;
8561: LD_ADDR_EXP 44
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sFlag := false ;
8569: LD_ADDR_EXP 45
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sKamikadze := false ;
8577: LD_ADDR_EXP 53
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sTroll := false ;
8585: LD_ADDR_EXP 54
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sSlow := false ;
8593: LD_ADDR_EXP 55
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sLack := false ;
8601: LD_ADDR_EXP 56
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// sTank := false ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// sRemote := false ;
8617: LD_ADDR_EXP 59
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// sPowell := false ;
8625: LD_ADDR_EXP 60
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// sTeleport := false ;
8633: LD_ADDR_EXP 63
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// sOilTower := false ;
8641: LD_ADDR_EXP 65
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// sShovel := false ;
8649: LD_ADDR_EXP 66
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// sSheik := false ;
8657: LD_ADDR_EXP 67
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sEarthquake := false ;
8665: LD_ADDR_EXP 69
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sAI := false ;
8673: LD_ADDR_EXP 70
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sCargo := false ;
8681: LD_ADDR_EXP 73
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sDLaser := false ;
8689: LD_ADDR_EXP 74
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sExchange := false ;
8697: LD_ADDR_EXP 75
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sFac := false ;
8705: LD_ADDR_EXP 76
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sPower := false ;
8713: LD_ADDR_EXP 77
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sRandom := false ;
8721: LD_ADDR_EXP 78
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sShield := false ;
8729: LD_ADDR_EXP 79
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sTime := false ;
8737: LD_ADDR_EXP 80
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sTools := false ;
8745: LD_ADDR_EXP 81
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sSold := false ;
8753: LD_ADDR_EXP 46
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sDiff := false ;
8761: LD_ADDR_EXP 47
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sFog := false ;
8769: LD_ADDR_EXP 50
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sReset := false ;
8777: LD_ADDR_EXP 51
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sSun := false ;
8785: LD_ADDR_EXP 52
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sTiger := false ;
8793: LD_ADDR_EXP 48
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sBomb := false ;
8801: LD_ADDR_EXP 49
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sWound := false ;
8809: LD_ADDR_EXP 57
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sBetray := false ;
8817: LD_ADDR_EXP 61
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sContamin := false ;
8825: LD_ADDR_EXP 62
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sOil := false ;
8833: LD_ADDR_EXP 64
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sStu := false ;
8841: LD_ADDR_EXP 68
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sBazooka := false ;
8849: LD_ADDR_EXP 71
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sMortar := false ;
8857: LD_ADDR_EXP 72
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sRanger := false ;
8865: LD_ADDR_EXP 82
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sComputer := false ;
8873: LD_ADDR_EXP 83
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// s30 := false ;
8881: LD_ADDR_EXP 84
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// s60 := false ;
8889: LD_ADDR_EXP 85
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// end ;
8897: LD_VAR 0 1
8901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
// result := [ ] ;
8911: LD_ADDR_VAR 0 2
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// if campaign_id = 1 then
8918: LD_OWVAR 69
8922: PUSH
8923: LD_INT 1
8925: EQUAL
8926: IFFALSE 12092
// begin case mission_number of 1 :
8928: LD_OWVAR 70
8932: PUSH
8933: LD_INT 1
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9017
8941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 4
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 15
8961: PUSH
8962: LD_INT 16
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 26
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 101
8987: PUSH
8988: LD_INT 102
8990: PUSH
8991: LD_INT 106
8993: PUSH
8994: LD_INT 116
8996: PUSH
8997: LD_INT 117
8999: PUSH
9000: LD_INT 118
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: ST_TO_ADDR
9015: GO 12090
9017: LD_INT 2
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9109
9025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: LD_INT 11
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: LD_INT 16
9048: PUSH
9049: LD_INT 22
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 26
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 105
9077: PUSH
9078: LD_INT 106
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 116
9086: PUSH
9087: LD_INT 117
9089: PUSH
9090: LD_INT 118
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: ST_TO_ADDR
9107: GO 12090
9109: LD_INT 3
9111: DOUBLE
9112: EQUAL
9113: IFTRUE 9117
9115: GO 9205
9117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 4
9128: PUSH
9129: LD_INT 5
9131: PUSH
9132: LD_INT 11
9134: PUSH
9135: LD_INT 12
9137: PUSH
9138: LD_INT 15
9140: PUSH
9141: LD_INT 16
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 26
9149: PUSH
9150: LD_INT 36
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 102
9170: PUSH
9171: LD_INT 105
9173: PUSH
9174: LD_INT 106
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 116
9182: PUSH
9183: LD_INT 117
9185: PUSH
9186: LD_INT 118
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: ST_TO_ADDR
9203: GO 12090
9205: LD_INT 4
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9309
9213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: LD_INT 5
9227: PUSH
9228: LD_INT 8
9230: PUSH
9231: LD_INT 11
9233: PUSH
9234: LD_INT 12
9236: PUSH
9237: LD_INT 15
9239: PUSH
9240: LD_INT 16
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 23
9248: PUSH
9249: LD_INT 26
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 101
9271: PUSH
9272: LD_INT 102
9274: PUSH
9275: LD_INT 105
9277: PUSH
9278: LD_INT 106
9280: PUSH
9281: LD_INT 108
9283: PUSH
9284: LD_INT 116
9286: PUSH
9287: LD_INT 117
9289: PUSH
9290: LD_INT 118
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: ST_TO_ADDR
9307: GO 12090
9309: LD_INT 5
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9429
9317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: LD_INT 4
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: LD_INT 11
9340: PUSH
9341: LD_INT 12
9343: PUSH
9344: LD_INT 15
9346: PUSH
9347: LD_INT 16
9349: PUSH
9350: LD_INT 22
9352: PUSH
9353: LD_INT 23
9355: PUSH
9356: LD_INT 25
9358: PUSH
9359: LD_INT 26
9361: PUSH
9362: LD_INT 36
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 101
9383: PUSH
9384: LD_INT 102
9386: PUSH
9387: LD_INT 105
9389: PUSH
9390: LD_INT 106
9392: PUSH
9393: LD_INT 108
9395: PUSH
9396: LD_INT 109
9398: PUSH
9399: LD_INT 112
9401: PUSH
9402: LD_INT 116
9404: PUSH
9405: LD_INT 117
9407: PUSH
9408: LD_INT 118
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: ST_TO_ADDR
9427: GO 12090
9429: LD_INT 6
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9569
9437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9438: LD_ADDR_VAR 0 2
9442: PUSH
9443: LD_INT 2
9445: PUSH
9446: LD_INT 4
9448: PUSH
9449: LD_INT 5
9451: PUSH
9452: LD_INT 6
9454: PUSH
9455: LD_INT 8
9457: PUSH
9458: LD_INT 11
9460: PUSH
9461: LD_INT 12
9463: PUSH
9464: LD_INT 15
9466: PUSH
9467: LD_INT 16
9469: PUSH
9470: LD_INT 20
9472: PUSH
9473: LD_INT 21
9475: PUSH
9476: LD_INT 22
9478: PUSH
9479: LD_INT 23
9481: PUSH
9482: LD_INT 25
9484: PUSH
9485: LD_INT 26
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 101
9523: PUSH
9524: LD_INT 102
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 108
9535: PUSH
9536: LD_INT 109
9538: PUSH
9539: LD_INT 112
9541: PUSH
9542: LD_INT 116
9544: PUSH
9545: LD_INT 117
9547: PUSH
9548: LD_INT 118
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: ST_TO_ADDR
9567: GO 12090
9569: LD_INT 7
9571: DOUBLE
9572: EQUAL
9573: IFTRUE 9577
9575: GO 9689
9577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9578: LD_ADDR_VAR 0 2
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 4
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: LD_INT 7
9594: PUSH
9595: LD_INT 11
9597: PUSH
9598: LD_INT 12
9600: PUSH
9601: LD_INT 15
9603: PUSH
9604: LD_INT 16
9606: PUSH
9607: LD_INT 20
9609: PUSH
9610: LD_INT 21
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_INT 23
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 26
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 101
9643: PUSH
9644: LD_INT 102
9646: PUSH
9647: LD_INT 103
9649: PUSH
9650: LD_INT 105
9652: PUSH
9653: LD_INT 106
9655: PUSH
9656: LD_INT 108
9658: PUSH
9659: LD_INT 112
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: ST_TO_ADDR
9687: GO 12090
9689: LD_INT 8
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9837
9697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 4
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 6
9714: PUSH
9715: LD_INT 7
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: LD_INT 11
9723: PUSH
9724: LD_INT 12
9726: PUSH
9727: LD_INT 15
9729: PUSH
9730: LD_INT 16
9732: PUSH
9733: LD_INT 20
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 22
9741: PUSH
9742: LD_INT 23
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 31
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: LD_INT 36
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 101
9787: PUSH
9788: LD_INT 102
9790: PUSH
9791: LD_INT 103
9793: PUSH
9794: LD_INT 105
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 109
9805: PUSH
9806: LD_INT 112
9808: PUSH
9809: LD_INT 116
9811: PUSH
9812: LD_INT 117
9814: PUSH
9815: LD_INT 118
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: ST_TO_ADDR
9835: GO 12090
9837: LD_INT 9
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9993
9845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 4
9856: PUSH
9857: LD_INT 5
9859: PUSH
9860: LD_INT 6
9862: PUSH
9863: LD_INT 7
9865: PUSH
9866: LD_INT 8
9868: PUSH
9869: LD_INT 11
9871: PUSH
9872: LD_INT 12
9874: PUSH
9875: LD_INT 15
9877: PUSH
9878: LD_INT 16
9880: PUSH
9881: LD_INT 20
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_INT 23
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 26
9898: PUSH
9899: LD_INT 28
9901: PUSH
9902: LD_INT 30
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: LD_INT 32
9910: PUSH
9911: LD_INT 36
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 101
9939: PUSH
9940: LD_INT 102
9942: PUSH
9943: LD_INT 103
9945: PUSH
9946: LD_INT 105
9948: PUSH
9949: LD_INT 106
9951: PUSH
9952: LD_INT 108
9954: PUSH
9955: LD_INT 109
9957: PUSH
9958: LD_INT 112
9960: PUSH
9961: LD_INT 114
9963: PUSH
9964: LD_INT 116
9966: PUSH
9967: LD_INT 117
9969: PUSH
9970: LD_INT 118
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: ST_TO_ADDR
9991: GO 12090
9993: LD_INT 10
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10001
9999: GO 10197
10001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 4
10012: PUSH
10013: LD_INT 5
10015: PUSH
10016: LD_INT 6
10018: PUSH
10019: LD_INT 7
10021: PUSH
10022: LD_INT 8
10024: PUSH
10025: LD_INT 9
10027: PUSH
10028: LD_INT 10
10030: PUSH
10031: LD_INT 11
10033: PUSH
10034: LD_INT 12
10036: PUSH
10037: LD_INT 13
10039: PUSH
10040: LD_INT 14
10042: PUSH
10043: LD_INT 15
10045: PUSH
10046: LD_INT 16
10048: PUSH
10049: LD_INT 17
10051: PUSH
10052: LD_INT 18
10054: PUSH
10055: LD_INT 19
10057: PUSH
10058: LD_INT 20
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_INT 23
10069: PUSH
10070: LD_INT 24
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 26
10078: PUSH
10079: LD_INT 28
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 36
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 101
10127: PUSH
10128: LD_INT 102
10130: PUSH
10131: LD_INT 103
10133: PUSH
10134: LD_INT 104
10136: PUSH
10137: LD_INT 105
10139: PUSH
10140: LD_INT 106
10142: PUSH
10143: LD_INT 107
10145: PUSH
10146: LD_INT 108
10148: PUSH
10149: LD_INT 109
10151: PUSH
10152: LD_INT 110
10154: PUSH
10155: LD_INT 111
10157: PUSH
10158: LD_INT 112
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 117
10169: PUSH
10170: LD_INT 118
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
10195: GO 12090
10197: LD_INT 11
10199: DOUBLE
10200: EQUAL
10201: IFTRUE 10205
10203: GO 10409
10205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 3
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 6
10225: PUSH
10226: LD_INT 7
10228: PUSH
10229: LD_INT 8
10231: PUSH
10232: LD_INT 9
10234: PUSH
10235: LD_INT 10
10237: PUSH
10238: LD_INT 11
10240: PUSH
10241: LD_INT 12
10243: PUSH
10244: LD_INT 13
10246: PUSH
10247: LD_INT 14
10249: PUSH
10250: LD_INT 15
10252: PUSH
10253: LD_INT 16
10255: PUSH
10256: LD_INT 17
10258: PUSH
10259: LD_INT 18
10261: PUSH
10262: LD_INT 19
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 28
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 31
10294: PUSH
10295: LD_INT 32
10297: PUSH
10298: LD_INT 34
10300: PUSH
10301: LD_INT 36
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 104
10348: PUSH
10349: LD_INT 105
10351: PUSH
10352: LD_INT 106
10354: PUSH
10355: LD_INT 107
10357: PUSH
10358: LD_INT 108
10360: PUSH
10361: LD_INT 109
10363: PUSH
10364: LD_INT 110
10366: PUSH
10367: LD_INT 111
10369: PUSH
10370: LD_INT 112
10372: PUSH
10373: LD_INT 114
10375: PUSH
10376: LD_INT 116
10378: PUSH
10379: LD_INT 117
10381: PUSH
10382: LD_INT 118
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: ST_TO_ADDR
10407: GO 12090
10409: LD_INT 12
10411: DOUBLE
10412: EQUAL
10413: IFTRUE 10417
10415: GO 10637
10417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: LD_INT 6
10440: PUSH
10441: LD_INT 7
10443: PUSH
10444: LD_INT 8
10446: PUSH
10447: LD_INT 9
10449: PUSH
10450: LD_INT 10
10452: PUSH
10453: LD_INT 11
10455: PUSH
10456: LD_INT 12
10458: PUSH
10459: LD_INT 13
10461: PUSH
10462: LD_INT 14
10464: PUSH
10465: LD_INT 15
10467: PUSH
10468: LD_INT 16
10470: PUSH
10471: LD_INT 17
10473: PUSH
10474: LD_INT 18
10476: PUSH
10477: LD_INT 19
10479: PUSH
10480: LD_INT 20
10482: PUSH
10483: LD_INT 21
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 23
10491: PUSH
10492: LD_INT 24
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 26
10500: PUSH
10501: LD_INT 27
10503: PUSH
10504: LD_INT 28
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: LD_INT 31
10512: PUSH
10513: LD_INT 32
10515: PUSH
10516: LD_INT 33
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 36
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 101
10563: PUSH
10564: LD_INT 102
10566: PUSH
10567: LD_INT 103
10569: PUSH
10570: LD_INT 104
10572: PUSH
10573: LD_INT 105
10575: PUSH
10576: LD_INT 106
10578: PUSH
10579: LD_INT 107
10581: PUSH
10582: LD_INT 108
10584: PUSH
10585: LD_INT 109
10587: PUSH
10588: LD_INT 110
10590: PUSH
10591: LD_INT 111
10593: PUSH
10594: LD_INT 112
10596: PUSH
10597: LD_INT 113
10599: PUSH
10600: LD_INT 114
10602: PUSH
10603: LD_INT 116
10605: PUSH
10606: LD_INT 117
10608: PUSH
10609: LD_INT 118
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 12090
10637: LD_INT 13
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10853
10645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: LD_INT 5
10665: PUSH
10666: LD_INT 8
10668: PUSH
10669: LD_INT 9
10671: PUSH
10672: LD_INT 10
10674: PUSH
10675: LD_INT 11
10677: PUSH
10678: LD_INT 12
10680: PUSH
10681: LD_INT 14
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 16
10689: PUSH
10690: LD_INT 17
10692: PUSH
10693: LD_INT 18
10695: PUSH
10696: LD_INT 19
10698: PUSH
10699: LD_INT 20
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 23
10710: PUSH
10711: LD_INT 24
10713: PUSH
10714: LD_INT 25
10716: PUSH
10717: LD_INT 26
10719: PUSH
10720: LD_INT 27
10722: PUSH
10723: LD_INT 28
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_INT 31
10731: PUSH
10732: LD_INT 32
10734: PUSH
10735: LD_INT 33
10737: PUSH
10738: LD_INT 34
10740: PUSH
10741: LD_INT 36
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 101
10779: PUSH
10780: LD_INT 102
10782: PUSH
10783: LD_INT 103
10785: PUSH
10786: LD_INT 104
10788: PUSH
10789: LD_INT 105
10791: PUSH
10792: LD_INT 106
10794: PUSH
10795: LD_INT 107
10797: PUSH
10798: LD_INT 108
10800: PUSH
10801: LD_INT 109
10803: PUSH
10804: LD_INT 110
10806: PUSH
10807: LD_INT 111
10809: PUSH
10810: LD_INT 112
10812: PUSH
10813: LD_INT 113
10815: PUSH
10816: LD_INT 114
10818: PUSH
10819: LD_INT 116
10821: PUSH
10822: LD_INT 117
10824: PUSH
10825: LD_INT 118
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: ST_TO_ADDR
10851: GO 12090
10853: LD_INT 14
10855: DOUBLE
10856: EQUAL
10857: IFTRUE 10861
10859: GO 11085
10861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 3
10875: PUSH
10876: LD_INT 4
10878: PUSH
10879: LD_INT 5
10881: PUSH
10882: LD_INT 6
10884: PUSH
10885: LD_INT 7
10887: PUSH
10888: LD_INT 8
10890: PUSH
10891: LD_INT 9
10893: PUSH
10894: LD_INT 10
10896: PUSH
10897: LD_INT 11
10899: PUSH
10900: LD_INT 12
10902: PUSH
10903: LD_INT 13
10905: PUSH
10906: LD_INT 14
10908: PUSH
10909: LD_INT 15
10911: PUSH
10912: LD_INT 16
10914: PUSH
10915: LD_INT 17
10917: PUSH
10918: LD_INT 18
10920: PUSH
10921: LD_INT 19
10923: PUSH
10924: LD_INT 20
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 22
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 27
10947: PUSH
10948: LD_INT 28
10950: PUSH
10951: LD_INT 29
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 31
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: LD_INT 33
10965: PUSH
10966: LD_INT 34
10968: PUSH
10969: LD_INT 36
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 101
11011: PUSH
11012: LD_INT 102
11014: PUSH
11015: LD_INT 103
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 105
11023: PUSH
11024: LD_INT 106
11026: PUSH
11027: LD_INT 107
11029: PUSH
11030: LD_INT 108
11032: PUSH
11033: LD_INT 109
11035: PUSH
11036: LD_INT 110
11038: PUSH
11039: LD_INT 111
11041: PUSH
11042: LD_INT 112
11044: PUSH
11045: LD_INT 113
11047: PUSH
11048: LD_INT 114
11050: PUSH
11051: LD_INT 116
11053: PUSH
11054: LD_INT 117
11056: PUSH
11057: LD_INT 118
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: ST_TO_ADDR
11083: GO 12090
11085: LD_INT 15
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11317
11093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11094: LD_ADDR_VAR 0 2
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 7
11119: PUSH
11120: LD_INT 8
11122: PUSH
11123: LD_INT 9
11125: PUSH
11126: LD_INT 10
11128: PUSH
11129: LD_INT 11
11131: PUSH
11132: LD_INT 12
11134: PUSH
11135: LD_INT 13
11137: PUSH
11138: LD_INT 14
11140: PUSH
11141: LD_INT 15
11143: PUSH
11144: LD_INT 16
11146: PUSH
11147: LD_INT 17
11149: PUSH
11150: LD_INT 18
11152: PUSH
11153: LD_INT 19
11155: PUSH
11156: LD_INT 20
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 27
11179: PUSH
11180: LD_INT 28
11182: PUSH
11183: LD_INT 29
11185: PUSH
11186: LD_INT 30
11188: PUSH
11189: LD_INT 31
11191: PUSH
11192: LD_INT 32
11194: PUSH
11195: LD_INT 33
11197: PUSH
11198: LD_INT 34
11200: PUSH
11201: LD_INT 36
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 104
11252: PUSH
11253: LD_INT 105
11255: PUSH
11256: LD_INT 106
11258: PUSH
11259: LD_INT 107
11261: PUSH
11262: LD_INT 108
11264: PUSH
11265: LD_INT 109
11267: PUSH
11268: LD_INT 110
11270: PUSH
11271: LD_INT 111
11273: PUSH
11274: LD_INT 112
11276: PUSH
11277: LD_INT 113
11279: PUSH
11280: LD_INT 114
11282: PUSH
11283: LD_INT 116
11285: PUSH
11286: LD_INT 117
11288: PUSH
11289: LD_INT 118
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
11315: GO 12090
11317: LD_INT 16
11319: DOUBLE
11320: EQUAL
11321: IFTRUE 11325
11323: GO 11461
11325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 4
11336: PUSH
11337: LD_INT 5
11339: PUSH
11340: LD_INT 7
11342: PUSH
11343: LD_INT 11
11345: PUSH
11346: LD_INT 12
11348: PUSH
11349: LD_INT 15
11351: PUSH
11352: LD_INT 16
11354: PUSH
11355: LD_INT 20
11357: PUSH
11358: LD_INT 21
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 23
11366: PUSH
11367: LD_INT 25
11369: PUSH
11370: LD_INT 26
11372: PUSH
11373: LD_INT 30
11375: PUSH
11376: LD_INT 31
11378: PUSH
11379: LD_INT 32
11381: PUSH
11382: LD_INT 33
11384: PUSH
11385: LD_INT 34
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 101
11411: PUSH
11412: LD_INT 102
11414: PUSH
11415: LD_INT 103
11417: PUSH
11418: LD_INT 106
11420: PUSH
11421: LD_INT 108
11423: PUSH
11424: LD_INT 112
11426: PUSH
11427: LD_INT 113
11429: PUSH
11430: LD_INT 114
11432: PUSH
11433: LD_INT 116
11435: PUSH
11436: LD_INT 117
11438: PUSH
11439: LD_INT 118
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 12090
11461: LD_INT 17
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11693
11469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11470: LD_ADDR_VAR 0 2
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 3
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: LD_INT 6
11492: PUSH
11493: LD_INT 7
11495: PUSH
11496: LD_INT 8
11498: PUSH
11499: LD_INT 9
11501: PUSH
11502: LD_INT 10
11504: PUSH
11505: LD_INT 11
11507: PUSH
11508: LD_INT 12
11510: PUSH
11511: LD_INT 13
11513: PUSH
11514: LD_INT 14
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 17
11525: PUSH
11526: LD_INT 18
11528: PUSH
11529: LD_INT 19
11531: PUSH
11532: LD_INT 20
11534: PUSH
11535: LD_INT 21
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_INT 23
11543: PUSH
11544: LD_INT 24
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 26
11552: PUSH
11553: LD_INT 27
11555: PUSH
11556: LD_INT 28
11558: PUSH
11559: LD_INT 29
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 31
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: LD_INT 33
11573: PUSH
11574: LD_INT 34
11576: PUSH
11577: LD_INT 36
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 101
11619: PUSH
11620: LD_INT 102
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 104
11628: PUSH
11629: LD_INT 105
11631: PUSH
11632: LD_INT 106
11634: PUSH
11635: LD_INT 107
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 109
11643: PUSH
11644: LD_INT 110
11646: PUSH
11647: LD_INT 111
11649: PUSH
11650: LD_INT 112
11652: PUSH
11653: LD_INT 113
11655: PUSH
11656: LD_INT 114
11658: PUSH
11659: LD_INT 116
11661: PUSH
11662: LD_INT 117
11664: PUSH
11665: LD_INT 118
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: ST_TO_ADDR
11691: GO 12090
11693: LD_INT 18
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11701
11699: GO 11849
11701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11702: LD_ADDR_VAR 0 2
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: LD_INT 7
11718: PUSH
11719: LD_INT 11
11721: PUSH
11722: LD_INT 12
11724: PUSH
11725: LD_INT 15
11727: PUSH
11728: LD_INT 16
11730: PUSH
11731: LD_INT 20
11733: PUSH
11734: LD_INT 21
11736: PUSH
11737: LD_INT 22
11739: PUSH
11740: LD_INT 23
11742: PUSH
11743: LD_INT 25
11745: PUSH
11746: LD_INT 26
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: LD_INT 32
11757: PUSH
11758: LD_INT 33
11760: PUSH
11761: LD_INT 34
11763: PUSH
11764: LD_INT 35
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 101
11795: PUSH
11796: LD_INT 102
11798: PUSH
11799: LD_INT 103
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 108
11807: PUSH
11808: LD_INT 112
11810: PUSH
11811: LD_INT 113
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: LD_INT 115
11819: PUSH
11820: LD_INT 116
11822: PUSH
11823: LD_INT 117
11825: PUSH
11826: LD_INT 118
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: ST_TO_ADDR
11847: GO 12090
11849: LD_INT 19
11851: DOUBLE
11852: EQUAL
11853: IFTRUE 11857
11855: GO 12089
11857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11858: LD_ADDR_VAR 0 2
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 3
11871: PUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: LD_INT 8
11886: PUSH
11887: LD_INT 9
11889: PUSH
11890: LD_INT 10
11892: PUSH
11893: LD_INT 11
11895: PUSH
11896: LD_INT 12
11898: PUSH
11899: LD_INT 13
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: LD_INT 15
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 17
11913: PUSH
11914: LD_INT 18
11916: PUSH
11917: LD_INT 19
11919: PUSH
11920: LD_INT 20
11922: PUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_INT 23
11931: PUSH
11932: LD_INT 24
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: LD_INT 27
11943: PUSH
11944: LD_INT 28
11946: PUSH
11947: LD_INT 29
11949: PUSH
11950: LD_INT 30
11952: PUSH
11953: LD_INT 31
11955: PUSH
11956: LD_INT 32
11958: PUSH
11959: LD_INT 33
11961: PUSH
11962: LD_INT 34
11964: PUSH
11965: LD_INT 35
11967: PUSH
11968: LD_INT 36
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 101
12011: PUSH
12012: LD_INT 102
12014: PUSH
12015: LD_INT 103
12017: PUSH
12018: LD_INT 104
12020: PUSH
12021: LD_INT 105
12023: PUSH
12024: LD_INT 106
12026: PUSH
12027: LD_INT 107
12029: PUSH
12030: LD_INT 108
12032: PUSH
12033: LD_INT 109
12035: PUSH
12036: LD_INT 110
12038: PUSH
12039: LD_INT 111
12041: PUSH
12042: LD_INT 112
12044: PUSH
12045: LD_INT 113
12047: PUSH
12048: LD_INT 114
12050: PUSH
12051: LD_INT 115
12053: PUSH
12054: LD_INT 116
12056: PUSH
12057: LD_INT 117
12059: PUSH
12060: LD_INT 118
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 12090
12089: POP
// end else
12090: GO 12321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 1
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: LD_INT 4
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: LD_INT 6
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: LD_INT 8
12120: PUSH
12121: LD_INT 9
12123: PUSH
12124: LD_INT 10
12126: PUSH
12127: LD_INT 11
12129: PUSH
12130: LD_INT 12
12132: PUSH
12133: LD_INT 13
12135: PUSH
12136: LD_INT 14
12138: PUSH
12139: LD_INT 15
12141: PUSH
12142: LD_INT 16
12144: PUSH
12145: LD_INT 17
12147: PUSH
12148: LD_INT 18
12150: PUSH
12151: LD_INT 19
12153: PUSH
12154: LD_INT 20
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 23
12165: PUSH
12166: LD_INT 24
12168: PUSH
12169: LD_INT 25
12171: PUSH
12172: LD_INT 26
12174: PUSH
12175: LD_INT 27
12177: PUSH
12178: LD_INT 28
12180: PUSH
12181: LD_INT 29
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 31
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 33
12195: PUSH
12196: LD_INT 34
12198: PUSH
12199: LD_INT 35
12201: PUSH
12202: LD_INT 36
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 101
12245: PUSH
12246: LD_INT 102
12248: PUSH
12249: LD_INT 103
12251: PUSH
12252: LD_INT 104
12254: PUSH
12255: LD_INT 105
12257: PUSH
12258: LD_INT 106
12260: PUSH
12261: LD_INT 107
12263: PUSH
12264: LD_INT 108
12266: PUSH
12267: LD_INT 109
12269: PUSH
12270: LD_INT 110
12272: PUSH
12273: LD_INT 111
12275: PUSH
12276: LD_INT 112
12278: PUSH
12279: LD_INT 113
12281: PUSH
12282: LD_INT 114
12284: PUSH
12285: LD_INT 115
12287: PUSH
12288: LD_INT 116
12290: PUSH
12291: LD_INT 117
12293: PUSH
12294: LD_INT 118
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: ST_TO_ADDR
// if result then
12321: LD_VAR 0 2
12325: IFFALSE 13111
// begin normal :=  ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_STRING 
12334: ST_TO_ADDR
// hardcore :=  ;
12335: LD_ADDR_VAR 0 6
12339: PUSH
12340: LD_STRING 
12342: ST_TO_ADDR
// active :=  ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_STRING 
12350: ST_TO_ADDR
// for i = 1 to normalCounter do
12351: LD_ADDR_VAR 0 8
12355: PUSH
12356: DOUBLE
12357: LD_INT 1
12359: DEC
12360: ST_TO_ADDR
12361: LD_EXP 30
12365: PUSH
12366: FOR_TO
12367: IFFALSE 12468
// begin tmp := 0 ;
12369: LD_ADDR_VAR 0 3
12373: PUSH
12374: LD_STRING 0
12376: ST_TO_ADDR
// if result [ 1 ] then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: IFFALSE 12450
// if result [ 1 ] [ 1 ] = i then
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: PUSH
12400: LD_VAR 0 8
12404: EQUAL
12405: IFFALSE 12450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 2
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 3
12436: PPUSH
12437: CALL_OW 1
12441: ST_TO_ADDR
// tmp := 1 ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_STRING 1
12449: ST_TO_ADDR
// end ; normal := normal & tmp ;
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 5
12459: PUSH
12460: LD_VAR 0 3
12464: STR
12465: ST_TO_ADDR
// end ;
12466: GO 12366
12468: POP
12469: POP
// for i = 1 to hardcoreCounter do
12470: LD_ADDR_VAR 0 8
12474: PUSH
12475: DOUBLE
12476: LD_INT 1
12478: DEC
12479: ST_TO_ADDR
12480: LD_EXP 31
12484: PUSH
12485: FOR_TO
12486: IFFALSE 12591
// begin tmp := 0 ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_STRING 0
12495: ST_TO_ADDR
// if result [ 2 ] then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: IFFALSE 12573
// if result [ 2 ] [ 1 ] = 100 + i then
12506: LD_VAR 0 2
12510: PUSH
12511: LD_INT 2
12513: ARRAY
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PUSH
12519: LD_INT 100
12521: PUSH
12522: LD_VAR 0 8
12526: PLUS
12527: EQUAL
12528: IFFALSE 12573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_VAR 0 2
12539: PPUSH
12540: LD_INT 2
12542: PPUSH
12543: LD_VAR 0 2
12547: PUSH
12548: LD_INT 2
12550: ARRAY
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 3
12559: PPUSH
12560: CALL_OW 1
12564: ST_TO_ADDR
// tmp := 1 ;
12565: LD_ADDR_VAR 0 3
12569: PUSH
12570: LD_STRING 1
12572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12573: LD_ADDR_VAR 0 6
12577: PUSH
12578: LD_VAR 0 6
12582: PUSH
12583: LD_VAR 0 3
12587: STR
12588: ST_TO_ADDR
// end ;
12589: GO 12485
12591: POP
12592: POP
// if isGameLoad then
12593: LD_VAR 0 1
12597: IFFALSE 13072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: LD_EXP 34
12608: PUSH
12609: LD_EXP 33
12613: PUSH
12614: LD_EXP 35
12618: PUSH
12619: LD_EXP 32
12623: PUSH
12624: LD_EXP 36
12628: PUSH
12629: LD_EXP 37
12633: PUSH
12634: LD_EXP 38
12638: PUSH
12639: LD_EXP 39
12643: PUSH
12644: LD_EXP 40
12648: PUSH
12649: LD_EXP 41
12653: PUSH
12654: LD_EXP 42
12658: PUSH
12659: LD_EXP 43
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_EXP 45
12673: PUSH
12674: LD_EXP 53
12678: PUSH
12679: LD_EXP 54
12683: PUSH
12684: LD_EXP 55
12688: PUSH
12689: LD_EXP 56
12693: PUSH
12694: LD_EXP 58
12698: PUSH
12699: LD_EXP 59
12703: PUSH
12704: LD_EXP 60
12708: PUSH
12709: LD_EXP 63
12713: PUSH
12714: LD_EXP 65
12718: PUSH
12719: LD_EXP 66
12723: PUSH
12724: LD_EXP 67
12728: PUSH
12729: LD_EXP 69
12733: PUSH
12734: LD_EXP 70
12738: PUSH
12739: LD_EXP 73
12743: PUSH
12744: LD_EXP 74
12748: PUSH
12749: LD_EXP 75
12753: PUSH
12754: LD_EXP 76
12758: PUSH
12759: LD_EXP 77
12763: PUSH
12764: LD_EXP 78
12768: PUSH
12769: LD_EXP 79
12773: PUSH
12774: LD_EXP 80
12778: PUSH
12779: LD_EXP 81
12783: PUSH
12784: LD_EXP 46
12788: PUSH
12789: LD_EXP 47
12793: PUSH
12794: LD_EXP 50
12798: PUSH
12799: LD_EXP 51
12803: PUSH
12804: LD_EXP 52
12808: PUSH
12809: LD_EXP 48
12813: PUSH
12814: LD_EXP 49
12818: PUSH
12819: LD_EXP 57
12823: PUSH
12824: LD_EXP 61
12828: PUSH
12829: LD_EXP 62
12833: PUSH
12834: LD_EXP 64
12838: PUSH
12839: LD_EXP 68
12843: PUSH
12844: LD_EXP 71
12848: PUSH
12849: LD_EXP 72
12853: PUSH
12854: LD_EXP 82
12858: PUSH
12859: LD_EXP 83
12863: PUSH
12864: LD_EXP 84
12868: PUSH
12869: LD_EXP 85
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// tmp :=  ;
12930: LD_ADDR_VAR 0 3
12934: PUSH
12935: LD_STRING 
12937: ST_TO_ADDR
// for i = 1 to normalCounter do
12938: LD_ADDR_VAR 0 8
12942: PUSH
12943: DOUBLE
12944: LD_INT 1
12946: DEC
12947: ST_TO_ADDR
12948: LD_EXP 30
12952: PUSH
12953: FOR_TO
12954: IFFALSE 12990
// begin if flags [ i ] then
12956: LD_VAR 0 4
12960: PUSH
12961: LD_VAR 0 8
12965: ARRAY
12966: IFFALSE 12988
// tmp := tmp & i & ; ;
12968: LD_ADDR_VAR 0 3
12972: PUSH
12973: LD_VAR 0 3
12977: PUSH
12978: LD_VAR 0 8
12982: STR
12983: PUSH
12984: LD_STRING ;
12986: STR
12987: ST_TO_ADDR
// end ;
12988: GO 12953
12990: POP
12991: POP
// for i = 1 to hardcoreCounter do
12992: LD_ADDR_VAR 0 8
12996: PUSH
12997: DOUBLE
12998: LD_INT 1
13000: DEC
13001: ST_TO_ADDR
13002: LD_EXP 31
13006: PUSH
13007: FOR_TO
13008: IFFALSE 13054
// begin if flags [ normalCounter + i ] then
13010: LD_VAR 0 4
13014: PUSH
13015: LD_EXP 30
13019: PUSH
13020: LD_VAR 0 8
13024: PLUS
13025: ARRAY
13026: IFFALSE 13052
// tmp := tmp & ( 100 + i ) & ; ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 100
13040: PUSH
13041: LD_VAR 0 8
13045: PLUS
13046: STR
13047: PUSH
13048: LD_STRING ;
13050: STR
13051: ST_TO_ADDR
// end ;
13052: GO 13007
13054: POP
13055: POP
// if tmp then
13056: LD_VAR 0 3
13060: IFFALSE 13072
// active := tmp ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 3
13071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13072: LD_STRING getStreamItemsFromMission("
13074: PUSH
13075: LD_VAR 0 5
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 6
13089: STR
13090: PUSH
13091: LD_STRING ","
13093: STR
13094: PUSH
13095: LD_VAR 0 7
13099: STR
13100: PUSH
13101: LD_STRING ")
13103: STR
13104: PPUSH
13105: CALL_OW 559
// end else
13109: GO 13118
// ToLua ( getStreamItemsFromMission("","","") ) ;
13111: LD_STRING getStreamItemsFromMission("","","")
13113: PPUSH
13114: CALL_OW 559
// end ;
13118: LD_VAR 0 2
13122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13123: LD_EXP 29
13127: PUSH
13128: LD_EXP 34
13132: AND
13133: IFFALSE 13257
13135: GO 13137
13137: DISABLE
13138: LD_INT 0
13140: PPUSH
13141: PPUSH
// begin enable ;
13142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_OWVAR 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 7
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 45
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 28
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 34
13195: PUSH
13196: LD_INT 47
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: ST_TO_ADDR
// if not tmp then
13219: LD_VAR 0 2
13223: NOT
13224: IFFALSE 13228
// exit ;
13226: GO 13257
// for i in tmp do
13228: LD_ADDR_VAR 0 1
13232: PUSH
13233: LD_VAR 0 2
13237: PUSH
13238: FOR_IN
13239: IFFALSE 13255
// begin SetLives ( i , 0 ) ;
13241: LD_VAR 0 1
13245: PPUSH
13246: LD_INT 0
13248: PPUSH
13249: CALL_OW 234
// end ;
13253: GO 13238
13255: POP
13256: POP
// end ;
13257: PPOPN 2
13259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13260: LD_EXP 29
13264: PUSH
13265: LD_EXP 35
13269: AND
13270: IFFALSE 13354
13272: GO 13274
13274: DISABLE
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
// begin enable ;
13279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13280: LD_ADDR_VAR 0 2
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_OWVAR 2
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 32
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// if not tmp then
13316: LD_VAR 0 2
13320: NOT
13321: IFFALSE 13325
// exit ;
13323: GO 13354
// for i in tmp do
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_VAR 0 2
13334: PUSH
13335: FOR_IN
13336: IFFALSE 13352
// begin SetLives ( i , 0 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 0
13345: PPUSH
13346: CALL_OW 234
// end ;
13350: GO 13335
13352: POP
13353: POP
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13357: LD_EXP 29
13361: PUSH
13362: LD_EXP 32
13366: AND
13367: IFFALSE 13460
13369: GO 13371
13371: DISABLE
13372: LD_INT 0
13374: PPUSH
// begin enable ;
13375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_OWVAR 2
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 9
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 8
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13458
// begin SetClass ( i , 1 ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 336
// end ;
13456: GO 13441
13458: POP
13459: POP
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13463: LD_EXP 29
13467: PUSH
13468: LD_EXP 33
13472: AND
13473: PUSH
13474: LD_OWVAR 65
13478: PUSH
13479: LD_INT 7
13481: LESS
13482: AND
13483: IFFALSE 13497
13485: GO 13487
13487: DISABLE
// begin enable ;
13488: ENABLE
// game_speed := 7 ;
13489: LD_ADDR_OWVAR 65
13493: PUSH
13494: LD_INT 7
13496: ST_TO_ADDR
// end ;
13497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13498: LD_EXP 29
13502: PUSH
13503: LD_EXP 36
13507: AND
13508: IFFALSE 13710
13510: GO 13512
13512: DISABLE
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
13517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13518: LD_ADDR_VAR 0 3
13522: PUSH
13523: LD_INT 81
13525: PUSH
13526: LD_OWVAR 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: ST_TO_ADDR
// if not tmp then
13554: LD_VAR 0 3
13558: NOT
13559: IFFALSE 13563
// exit ;
13561: GO 13710
// if tmp > 5 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 5
13570: GREATER
13571: IFFALSE 13583
// k := 5 else
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 5
13580: ST_TO_ADDR
13581: GO 13593
// k := tmp ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 3
13592: ST_TO_ADDR
// for i := 1 to k do
13593: LD_ADDR_VAR 0 1
13597: PUSH
13598: DOUBLE
13599: LD_INT 1
13601: DEC
13602: ST_TO_ADDR
13603: LD_VAR 0 2
13607: PUSH
13608: FOR_TO
13609: IFFALSE 13708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13611: LD_VAR 0 3
13615: PUSH
13616: LD_VAR 0 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 1
13626: PUSH
13627: LD_INT 4
13629: MOD
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: PPUSH
13635: CALL_OW 259
13639: PUSH
13640: LD_INT 10
13642: LESS
13643: IFFALSE 13706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13645: LD_VAR 0 3
13649: PUSH
13650: LD_VAR 0 1
13654: ARRAY
13655: PPUSH
13656: LD_VAR 0 1
13660: PUSH
13661: LD_INT 4
13663: MOD
13664: PUSH
13665: LD_INT 1
13667: PLUS
13668: PPUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_VAR 0 1
13678: ARRAY
13679: PPUSH
13680: LD_VAR 0 1
13684: PUSH
13685: LD_INT 4
13687: MOD
13688: PUSH
13689: LD_INT 1
13691: PLUS
13692: PPUSH
13693: CALL_OW 259
13697: PUSH
13698: LD_INT 1
13700: PLUS
13701: PPUSH
13702: CALL_OW 237
13706: GO 13608
13708: POP
13709: POP
// end ;
13710: PPOPN 3
13712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13713: LD_EXP 29
13717: PUSH
13718: LD_EXP 37
13722: AND
13723: IFFALSE 13743
13725: GO 13727
13727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13728: LD_INT 4
13730: PPUSH
13731: LD_OWVAR 2
13735: PPUSH
13736: LD_INT 0
13738: PPUSH
13739: CALL_OW 324
13743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13744: LD_EXP 29
13748: PUSH
13749: LD_EXP 66
13753: AND
13754: IFFALSE 13774
13756: GO 13758
13758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13759: LD_INT 19
13761: PPUSH
13762: LD_OWVAR 2
13766: PPUSH
13767: LD_INT 0
13769: PPUSH
13770: CALL_OW 324
13774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13775: LD_EXP 29
13779: PUSH
13780: LD_EXP 38
13784: AND
13785: IFFALSE 13887
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
// begin enable ;
13794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13795: LD_ADDR_VAR 0 2
13799: PUSH
13800: LD_INT 22
13802: PUSH
13803: LD_OWVAR 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 11
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 34
13827: PUSH
13828: LD_INT 30
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 69
13848: ST_TO_ADDR
// if not tmp then
13849: LD_VAR 0 2
13853: NOT
13854: IFFALSE 13858
// exit ;
13856: GO 13887
// for i in tmp do
13858: LD_ADDR_VAR 0 1
13862: PUSH
13863: LD_VAR 0 2
13867: PUSH
13868: FOR_IN
13869: IFFALSE 13885
// begin SetLives ( i , 0 ) ;
13871: LD_VAR 0 1
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: CALL_OW 234
// end ;
13883: GO 13868
13885: POP
13886: POP
// end ;
13887: PPOPN 2
13889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13890: LD_EXP 29
13894: PUSH
13895: LD_EXP 39
13899: AND
13900: IFFALSE 13920
13902: GO 13904
13904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13905: LD_INT 32
13907: PPUSH
13908: LD_OWVAR 2
13912: PPUSH
13913: LD_INT 0
13915: PPUSH
13916: CALL_OW 324
13920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13921: LD_EXP 29
13925: PUSH
13926: LD_EXP 40
13930: AND
13931: IFFALSE 14112
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
13940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_OWVAR 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 33
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 2
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14112
// side := 0 ;
13986: LD_ADDR_VAR 0 3
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// for i := 1 to 8 do
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: DOUBLE
14000: LD_INT 1
14002: DEC
14003: ST_TO_ADDR
14004: LD_INT 8
14006: PUSH
14007: FOR_TO
14008: IFFALSE 14056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14010: LD_OWVAR 2
14014: PUSH
14015: LD_VAR 0 1
14019: NONEQUAL
14020: PUSH
14021: LD_OWVAR 2
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 81
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: AND
14040: IFFALSE 14054
// begin side := i ;
14042: LD_ADDR_VAR 0 3
14046: PUSH
14047: LD_VAR 0 1
14051: ST_TO_ADDR
// break ;
14052: GO 14056
// end ;
14054: GO 14007
14056: POP
14057: POP
// if not side then
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14112
// for i := 1 to tmp do
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: DOUBLE
14073: LD_INT 1
14075: DEC
14076: ST_TO_ADDR
14077: LD_VAR 0 2
14081: PUSH
14082: FOR_TO
14083: IFFALSE 14110
// if Prob ( 60 ) then
14085: LD_INT 60
14087: PPUSH
14088: CALL_OW 13
14092: IFFALSE 14108
// SetSide ( i , side ) ;
14094: LD_VAR 0 1
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 235
14108: GO 14082
14110: POP
14111: POP
// end ;
14112: PPOPN 3
14114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14115: LD_EXP 29
14119: PUSH
14120: LD_EXP 42
14124: AND
14125: IFFALSE 14244
14127: GO 14129
14129: DISABLE
14130: LD_INT 0
14132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_OWVAR 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 21
14152: PUSH
14153: LD_INT 1
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: PUSH
14187: FOR_IN
14188: IFFALSE 14242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 257
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: LD_INT 3
14208: PUSH
14209: LD_INT 4
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: IN
14218: IFFALSE 14240
// SetClass ( un , rand ( 1 , 4 ) ) ;
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_INT 4
14230: PPUSH
14231: CALL_OW 12
14235: PPUSH
14236: CALL_OW 336
14240: GO 14187
14242: POP
14243: POP
// end ;
14244: PPOPN 1
14246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14247: LD_EXP 29
14251: PUSH
14252: LD_EXP 41
14256: AND
14257: IFFALSE 14336
14259: GO 14261
14261: DISABLE
14262: LD_INT 0
14264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14265: LD_ADDR_VAR 0 1
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_OWVAR 2
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 21
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 69
14300: ST_TO_ADDR
// if not tmp then
14301: LD_VAR 0 1
14305: NOT
14306: IFFALSE 14310
// exit ;
14308: GO 14336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 12
14327: ARRAY
14328: PPUSH
14329: LD_INT 100
14331: PPUSH
14332: CALL_OW 234
// end ;
14336: PPOPN 1
14338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14339: LD_EXP 29
14343: PUSH
14344: LD_EXP 43
14348: AND
14349: IFFALSE 14447
14351: GO 14353
14353: DISABLE
14354: LD_INT 0
14356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_OWVAR 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 21
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: ST_TO_ADDR
// if not tmp then
14393: LD_VAR 0 1
14397: NOT
14398: IFFALSE 14402
// exit ;
14400: GO 14447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 12
14419: ARRAY
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 4
14426: PPUSH
14427: CALL_OW 12
14431: PPUSH
14432: LD_INT 3000
14434: PPUSH
14435: LD_INT 9000
14437: PPUSH
14438: CALL_OW 12
14442: PPUSH
14443: CALL_OW 492
// end ;
14447: PPOPN 1
14449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14450: LD_EXP 29
14454: PUSH
14455: LD_EXP 44
14459: AND
14460: IFFALSE 14480
14462: GO 14464
14464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14465: LD_INT 1
14467: PPUSH
14468: LD_OWVAR 2
14472: PPUSH
14473: LD_INT 0
14475: PPUSH
14476: CALL_OW 324
14480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14481: LD_EXP 29
14485: PUSH
14486: LD_EXP 45
14490: AND
14491: IFFALSE 14574
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 22
14507: PUSH
14508: LD_OWVAR 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 21
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 69
14535: ST_TO_ADDR
// if not tmp then
14536: LD_VAR 0 2
14540: NOT
14541: IFFALSE 14545
// exit ;
14543: GO 14574
// for i in tmp do
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_VAR 0 2
14554: PUSH
14555: FOR_IN
14556: IFFALSE 14572
// SetBLevel ( i , 10 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 10
14565: PPUSH
14566: CALL_OW 241
14570: GO 14555
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14577: LD_EXP 29
14581: PUSH
14582: LD_EXP 46
14586: AND
14587: IFFALSE 14698
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 1
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// if not tmp then
14633: LD_VAR 0 3
14637: NOT
14638: IFFALSE 14642
// exit ;
14640: GO 14698
// un := tmp [ rand ( 1 , tmp ) ] ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_VAR 0 3
14651: PUSH
14652: LD_INT 1
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: CALL_OW 12
14664: ARRAY
14665: ST_TO_ADDR
// if Crawls ( un ) then
14666: LD_VAR 0 2
14670: PPUSH
14671: CALL_OW 318
14675: IFFALSE 14686
// ComWalk ( un ) ;
14677: LD_VAR 0 2
14681: PPUSH
14682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_INT 5
14693: PPUSH
14694: CALL_OW 336
// end ;
14698: PPOPN 3
14700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14701: LD_EXP 29
14705: PUSH
14706: LD_EXP 47
14710: AND
14711: PUSH
14712: LD_OWVAR 67
14716: PUSH
14717: LD_INT 4
14719: LESS
14720: AND
14721: IFFALSE 14740
14723: GO 14725
14725: DISABLE
// begin Difficulty := Difficulty + 1 ;
14726: LD_ADDR_OWVAR 67
14730: PUSH
14731: LD_OWVAR 67
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: ST_TO_ADDR
// end ;
14740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14741: LD_EXP 29
14745: PUSH
14746: LD_EXP 48
14750: AND
14751: IFFALSE 14854
14753: GO 14755
14755: DISABLE
14756: LD_INT 0
14758: PPUSH
// begin for i := 1 to 5 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 5
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14852
// begin uc_nation := nation_nature ;
14775: LD_ADDR_OWVAR 21
14779: PUSH
14780: LD_INT 0
14782: ST_TO_ADDR
// uc_side := 0 ;
14783: LD_ADDR_OWVAR 20
14787: PUSH
14788: LD_INT 0
14790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14791: LD_ADDR_OWVAR 29
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 12
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// hc_agressivity := 20 ;
14806: LD_ADDR_OWVAR 35
14810: PUSH
14811: LD_INT 20
14813: ST_TO_ADDR
// hc_class := class_tiger ;
14814: LD_ADDR_OWVAR 28
14818: PUSH
14819: LD_INT 14
14821: ST_TO_ADDR
// hc_gallery :=  ;
14822: LD_ADDR_OWVAR 33
14826: PUSH
14827: LD_STRING 
14829: ST_TO_ADDR
// hc_name :=  ;
14830: LD_ADDR_OWVAR 26
14834: PUSH
14835: LD_STRING 
14837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14838: CALL_OW 44
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: CALL_OW 51
// end ;
14850: GO 14772
14852: POP
14853: POP
// end ;
14854: PPOPN 1
14856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14857: LD_EXP 29
14861: PUSH
14862: LD_EXP 49
14866: AND
14867: IFFALSE 14876
14869: GO 14871
14871: DISABLE
// StreamSibBomb ;
14872: CALL 14877 0 0
14876: END
// export function StreamSibBomb ; var i , x , y ; begin
14877: LD_INT 0
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
// result := false ;
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// for i := 1 to 16 do
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: DOUBLE
14897: LD_INT 1
14899: DEC
14900: ST_TO_ADDR
14901: LD_INT 16
14903: PUSH
14904: FOR_TO
14905: IFFALSE 15104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 10
14914: PUSH
14915: LD_INT 20
14917: PUSH
14918: LD_INT 30
14920: PUSH
14921: LD_INT 40
14923: PUSH
14924: LD_INT 50
14926: PUSH
14927: LD_INT 60
14929: PUSH
14930: LD_INT 70
14932: PUSH
14933: LD_INT 80
14935: PUSH
14936: LD_INT 90
14938: PUSH
14939: LD_INT 100
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 120
14947: PUSH
14948: LD_INT 130
14950: PUSH
14951: LD_INT 140
14953: PUSH
14954: LD_INT 150
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_INT 15
14979: PPUSH
14980: CALL_OW 12
14984: ARRAY
14985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_INT 10
14993: PUSH
14994: LD_INT 20
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 40
15002: PUSH
15003: LD_INT 50
15005: PUSH
15006: LD_INT 60
15008: PUSH
15009: LD_INT 70
15011: PUSH
15012: LD_INT 80
15014: PUSH
15015: LD_INT 90
15017: PUSH
15018: LD_INT 100
15020: PUSH
15021: LD_INT 110
15023: PUSH
15024: LD_INT 120
15026: PUSH
15027: LD_INT 130
15029: PUSH
15030: LD_INT 140
15032: PUSH
15033: LD_INT 150
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 15
15058: PPUSH
15059: CALL_OW 12
15063: ARRAY
15064: ST_TO_ADDR
// if ValidHex ( x , y ) then
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: CALL_OW 488
15079: IFFALSE 15102
// begin result := [ x , y ] ;
15081: LD_ADDR_VAR 0 1
15085: PUSH
15086: LD_VAR 0 3
15090: PUSH
15091: LD_VAR 0 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ST_TO_ADDR
// break ;
15100: GO 15104
// end ; end ;
15102: GO 14904
15104: POP
15105: POP
// if result then
15106: LD_VAR 0 1
15110: IFFALSE 15170
// begin ToLua ( playSibBomb() ) ;
15112: LD_STRING playSibBomb()
15114: PPUSH
15115: CALL_OW 559
// wait ( 0 0$14 ) ;
15119: LD_INT 490
15121: PPUSH
15122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15126: LD_VAR 0 1
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 2
15142: ARRAY
15143: PPUSH
15144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15148: LD_VAR 0 1
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 1
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PPUSH
15166: CALL_OW 429
// end ; end ;
15170: LD_VAR 0 1
15174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15175: LD_EXP 29
15179: PUSH
15180: LD_EXP 51
15184: AND
15185: IFFALSE 15197
15187: GO 15189
15189: DISABLE
// YouLost (  ) ;
15190: LD_STRING 
15192: PPUSH
15193: CALL_OW 104
15197: END
// every 0 0$1 trigger StreamModeActive and sFog do
15198: LD_EXP 29
15202: PUSH
15203: LD_EXP 50
15207: AND
15208: IFFALSE 15222
15210: GO 15212
15212: DISABLE
// FogOff ( your_side ) ;
15213: LD_OWVAR 2
15217: PPUSH
15218: CALL_OW 344
15222: END
// every 0 0$1 trigger StreamModeActive and sSun do
15223: LD_EXP 29
15227: PUSH
15228: LD_EXP 52
15232: AND
15233: IFFALSE 15261
15235: GO 15237
15237: DISABLE
// begin solar_recharge_percent := 0 ;
15238: LD_ADDR_OWVAR 79
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15246: LD_INT 10500
15248: PPUSH
15249: CALL_OW 67
// solar_recharge_percent := 100 ;
15253: LD_ADDR_OWVAR 79
15257: PUSH
15258: LD_INT 100
15260: ST_TO_ADDR
// end ;
15261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 53
15271: AND
15272: IFFALSE 15511
15274: GO 15276
15276: DISABLE
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
15281: PPUSH
// begin tmp := [ ] ;
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i := 1 to 6 do
15289: LD_ADDR_VAR 0 1
15293: PUSH
15294: DOUBLE
15295: LD_INT 1
15297: DEC
15298: ST_TO_ADDR
15299: LD_INT 6
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15408
// begin uc_nation := nation_nature ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 0
15312: ST_TO_ADDR
// uc_side := 0 ;
15313: LD_ADDR_OWVAR 20
15317: PUSH
15318: LD_INT 0
15320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15321: LD_ADDR_OWVAR 29
15325: PUSH
15326: LD_INT 12
15328: PUSH
15329: LD_INT 12
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
// hc_agressivity := 20 ;
15336: LD_ADDR_OWVAR 35
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15344: LD_ADDR_OWVAR 28
15348: PUSH
15349: LD_INT 17
15351: ST_TO_ADDR
// hc_gallery :=  ;
15352: LD_ADDR_OWVAR 33
15356: PUSH
15357: LD_STRING 
15359: ST_TO_ADDR
// hc_name :=  ;
15360: LD_ADDR_OWVAR 26
15364: PUSH
15365: LD_STRING 
15367: ST_TO_ADDR
// un := CreateHuman ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: CALL_OW 44
15377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 51
// tmp := tmp ^ un ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_VAR 0 3
15399: PUSH
15400: LD_VAR 0 2
15404: ADD
15405: ST_TO_ADDR
// end ;
15406: GO 15302
15408: POP
15409: POP
// repeat wait ( 0 0$1 ) ;
15410: LD_INT 35
15412: PPUSH
15413: CALL_OW 67
// for un in tmp do
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_VAR 0 3
15426: PUSH
15427: FOR_IN
15428: IFFALSE 15502
// begin if IsDead ( un ) then
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 301
15439: IFFALSE 15459
// begin tmp := tmp diff un ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_VAR 0 3
15450: PUSH
15451: LD_VAR 0 2
15455: DIFF
15456: ST_TO_ADDR
// continue ;
15457: GO 15427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15459: LD_VAR 0 2
15463: PPUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_INT 0
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: CALL_OW 74
15495: PPUSH
15496: CALL_OW 115
// end ;
15500: GO 15427
15502: POP
15503: POP
// until not tmp ;
15504: LD_VAR 0 3
15508: NOT
15509: IFFALSE 15410
// end ;
15511: PPOPN 3
15513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15514: LD_EXP 29
15518: PUSH
15519: LD_EXP 54
15523: AND
15524: IFFALSE 15578
15526: GO 15528
15528: DISABLE
// begin ToLua ( displayTroll(); ) ;
15529: LD_STRING displayTroll();
15531: PPUSH
15532: CALL_OW 559
// wait ( 3 3$00 ) ;
15536: LD_INT 6300
15538: PPUSH
15539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15543: LD_STRING hideTroll();
15545: PPUSH
15546: CALL_OW 559
// wait ( 1 1$00 ) ;
15550: LD_INT 2100
15552: PPUSH
15553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15557: LD_STRING displayTroll();
15559: PPUSH
15560: CALL_OW 559
// wait ( 1 1$00 ) ;
15564: LD_INT 2100
15566: PPUSH
15567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15571: LD_STRING hideTroll();
15573: PPUSH
15574: CALL_OW 559
// end ;
15578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15579: LD_EXP 29
15583: PUSH
15584: LD_EXP 55
15588: AND
15589: IFFALSE 15652
15591: GO 15593
15593: DISABLE
15594: LD_INT 0
15596: PPUSH
// begin p := 0 ;
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// repeat game_speed := 1 ;
15605: LD_ADDR_OWVAR 65
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15613: LD_INT 35
15615: PPUSH
15616: CALL_OW 67
// p := p + 1 ;
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_VAR 0 1
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// until p >= 60 ;
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 60
15641: GREATEREQUAL
15642: IFFALSE 15605
// game_speed := 4 ;
15644: LD_ADDR_OWVAR 65
15648: PUSH
15649: LD_INT 4
15651: ST_TO_ADDR
// end ;
15652: PPOPN 1
15654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15655: LD_EXP 29
15659: PUSH
15660: LD_EXP 56
15664: AND
15665: IFFALSE 15811
15667: GO 15669
15669: DISABLE
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 30
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: ST_TO_ADDR
// if not depot then
15728: LD_VAR 0 1
15732: NOT
15733: IFFALSE 15737
// exit ;
15735: GO 15811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15737: LD_ADDR_VAR 0 2
15741: PUSH
15742: LD_VAR 0 1
15746: PUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 12
15759: ARRAY
15760: PPUSH
15761: CALL_OW 274
15765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15766: LD_VAR 0 2
15770: PPUSH
15771: LD_INT 1
15773: PPUSH
15774: LD_INT 0
15776: PPUSH
15777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15781: LD_VAR 0 2
15785: PPUSH
15786: LD_INT 2
15788: PPUSH
15789: LD_INT 0
15791: PPUSH
15792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15796: LD_VAR 0 2
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: LD_INT 0
15806: PPUSH
15807: CALL_OW 277
// end ;
15811: PPOPN 2
15813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15814: LD_EXP 29
15818: PUSH
15819: LD_EXP 57
15823: AND
15824: IFFALSE 15921
15826: GO 15828
15828: DISABLE
15829: LD_INT 0
15831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15832: LD_ADDR_VAR 0 1
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_OWVAR 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: LD_INT 23
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 1
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 15921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 1
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 12
15912: ARRAY
15913: PPUSH
15914: LD_INT 200
15916: PPUSH
15917: CALL_OW 234
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15924: LD_EXP 29
15928: PUSH
15929: LD_EXP 58
15933: AND
15934: IFFALSE 16013
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 60
16008: PPUSH
16009: CALL_OW 234
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16016: LD_EXP 29
16020: PUSH
16021: LD_EXP 59
16025: AND
16026: IFFALSE 16125
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
// begin enable ;
16035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16036: LD_ADDR_VAR 0 1
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_OWVAR 2
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 61
16055: PUSH
16056: EMPTY
16057: LIST
16058: PUSH
16059: LD_INT 33
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 69
16078: ST_TO_ADDR
// if not tmp then
16079: LD_VAR 0 1
16083: NOT
16084: IFFALSE 16088
// exit ;
16086: GO 16125
// for i in tmp do
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: LD_VAR 0 1
16097: PUSH
16098: FOR_IN
16099: IFFALSE 16123
// if IsControledBy ( i ) then
16101: LD_VAR 0 2
16105: PPUSH
16106: CALL_OW 312
16110: IFFALSE 16121
// ComUnlink ( i ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 136
16121: GO 16098
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16128: LD_EXP 29
16132: PUSH
16133: LD_EXP 60
16137: AND
16138: IFFALSE 16278
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
// begin ToLua ( displayPowell(); ) ;
16147: LD_STRING displayPowell();
16149: PPUSH
16150: CALL_OW 559
// uc_side := 0 ;
16154: LD_ADDR_OWVAR 20
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// uc_nation := 2 ;
16162: LD_ADDR_OWVAR 21
16166: PUSH
16167: LD_INT 2
16169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16170: LD_ADDR_OWVAR 37
16174: PUSH
16175: LD_INT 14
16177: ST_TO_ADDR
// vc_engine := engine_siberite ;
16178: LD_ADDR_OWVAR 39
16182: PUSH
16183: LD_INT 3
16185: ST_TO_ADDR
// vc_control := control_apeman ;
16186: LD_ADDR_OWVAR 38
16190: PUSH
16191: LD_INT 5
16193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16194: LD_ADDR_OWVAR 40
16198: PUSH
16199: LD_INT 29
16201: ST_TO_ADDR
// un := CreateVehicle ;
16202: LD_ADDR_VAR 0 2
16206: PUSH
16207: CALL_OW 45
16211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16212: LD_VAR 0 2
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16231: LD_VAR 0 2
16235: PPUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 74
16262: PPUSH
16263: CALL_OW 115
// until IsDead ( un ) ;
16267: LD_VAR 0 2
16271: PPUSH
16272: CALL_OW 301
16276: IFFALSE 16224
// end ;
16278: PPOPN 2
16280: END
// every 0 0$1 trigger StreamModeActive and sStu do
16281: LD_EXP 29
16285: PUSH
16286: LD_EXP 68
16290: AND
16291: IFFALSE 16307
16293: GO 16295
16295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16296: LD_STRING displayStucuk();
16298: PPUSH
16299: CALL_OW 559
// ResetFog ;
16303: CALL_OW 335
// end ;
16307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16308: LD_EXP 29
16312: PUSH
16313: LD_EXP 61
16317: AND
16318: IFFALSE 16459
16320: GO 16322
16322: DISABLE
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 21
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16459
// un := tmp [ rand ( 1 , tmp ) ] ;
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: PPUSH
16385: LD_VAR 0 2
16389: PPUSH
16390: CALL_OW 12
16394: ARRAY
16395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_INT 0
16403: PPUSH
16404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_OWVAR 3
16417: PUSH
16418: LD_VAR 0 1
16422: DIFF
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 74
16433: PPUSH
16434: CALL_OW 115
// wait ( 0 0$20 ) ;
16438: LD_INT 700
16440: PPUSH
16441: CALL_OW 67
// SetSide ( un , your_side ) ;
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_OWVAR 2
16454: PPUSH
16455: CALL_OW 235
// end ;
16459: PPOPN 2
16461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16462: LD_EXP 29
16466: PUSH
16467: LD_EXP 62
16471: AND
16472: IFFALSE 16578
16474: GO 16476
16476: DISABLE
16477: LD_INT 0
16479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL_OW 69
16533: ST_TO_ADDR
// if not depot then
16534: LD_VAR 0 1
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 16578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16543: LD_VAR 0 1
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 250
16556: PPUSH
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: PPUSH
16566: CALL_OW 251
16570: PPUSH
16571: LD_INT 70
16573: PPUSH
16574: CALL_OW 495
// end ;
16578: PPOPN 1
16580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16581: LD_EXP 29
16585: PUSH
16586: LD_EXP 63
16590: AND
16591: IFFALSE 16802
16593: GO 16595
16595: DISABLE
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16603: LD_ADDR_VAR 0 5
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: ST_TO_ADDR
// if not tmp then
16639: LD_VAR 0 5
16643: NOT
16644: IFFALSE 16648
// exit ;
16646: GO 16802
// for i in tmp do
16648: LD_ADDR_VAR 0 1
16652: PUSH
16653: LD_VAR 0 5
16657: PUSH
16658: FOR_IN
16659: IFFALSE 16800
// begin d := rand ( 0 , 5 ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 0
16668: PPUSH
16669: LD_INT 5
16671: PPUSH
16672: CALL_OW 12
16676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 250
16691: PPUSH
16692: LD_VAR 0 4
16696: PPUSH
16697: LD_INT 3
16699: PPUSH
16700: LD_INT 12
16702: PPUSH
16703: CALL_OW 12
16707: PPUSH
16708: CALL_OW 272
16712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16713: LD_ADDR_VAR 0 3
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 251
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: LD_INT 3
16735: PPUSH
16736: LD_INT 12
16738: PPUSH
16739: CALL_OW 12
16743: PPUSH
16744: CALL_OW 273
16748: ST_TO_ADDR
// if ValidHex ( x , y ) then
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: CALL_OW 488
16763: IFFALSE 16798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 3
16782: PPUSH
16783: LD_INT 6
16785: PPUSH
16786: CALL_OW 12
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 483
// end ;
16798: GO 16658
16800: POP
16801: POP
// end ;
16802: PPOPN 5
16804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16805: LD_EXP 29
16809: PUSH
16810: LD_EXP 64
16814: AND
16815: IFFALSE 16909
16817: GO 16819
16819: DISABLE
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 32
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 69
16870: ST_TO_ADDR
// if not tmp then
16871: LD_VAR 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 16909
// for i in tmp do
16880: LD_ADDR_VAR 0 1
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16907
// SetFuel ( i , 0 ) ;
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_INT 0
16900: PPUSH
16901: CALL_OW 240
16905: GO 16890
16907: POP
16908: POP
// end ;
16909: PPOPN 2
16911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16912: LD_EXP 29
16916: PUSH
16917: LD_EXP 65
16921: AND
16922: IFFALSE 16988
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: LD_INT 29
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 1
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 16988
// DestroyUnit ( tmp [ 1 ] ) ;
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: PPUSH
16984: CALL_OW 65
// end ;
16988: PPOPN 1
16990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16991: LD_EXP 29
16995: PUSH
16996: LD_EXP 67
17000: AND
17001: IFFALSE 17130
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
// begin uc_side := 0 ;
17009: LD_ADDR_OWVAR 20
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// uc_nation := nation_arabian ;
17017: LD_ADDR_OWVAR 21
17021: PUSH
17022: LD_INT 2
17024: ST_TO_ADDR
// hc_gallery :=  ;
17025: LD_ADDR_OWVAR 33
17029: PUSH
17030: LD_STRING 
17032: ST_TO_ADDR
// hc_name :=  ;
17033: LD_ADDR_OWVAR 26
17037: PUSH
17038: LD_STRING 
17040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17041: LD_INT 1
17043: PPUSH
17044: LD_INT 11
17046: PPUSH
17047: LD_INT 10
17049: PPUSH
17050: CALL_OW 380
// un := CreateHuman ;
17054: LD_ADDR_VAR 0 1
17058: PUSH
17059: CALL_OW 44
17063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17064: LD_VAR 0 1
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17076: LD_INT 35
17078: PPUSH
17079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17083: LD_VAR 0 1
17087: PPUSH
17088: LD_INT 22
17090: PUSH
17091: LD_OWVAR 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 74
17114: PPUSH
17115: CALL_OW 115
// until IsDead ( un ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 301
17128: IFFALSE 17076
// end ;
17130: PPOPN 1
17132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17133: LD_EXP 29
17137: PUSH
17138: LD_EXP 69
17142: AND
17143: IFFALSE 17155
17145: GO 17147
17147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17148: LD_STRING earthquake(getX(game), 0, 32)
17150: PPUSH
17151: CALL_OW 559
17155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17156: LD_EXP 29
17160: PUSH
17161: LD_EXP 70
17165: AND
17166: IFFALSE 17257
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
// begin enable ;
17174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 33
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: ST_TO_ADDR
// if not tmp then
17222: LD_VAR 0 1
17226: NOT
17227: IFFALSE 17231
// exit ;
17229: GO 17257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 1
17238: PPUSH
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 12
17248: ARRAY
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 234
// end ;
17257: PPOPN 1
17259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17260: LD_EXP 29
17264: PUSH
17265: LD_EXP 71
17269: AND
17270: IFFALSE 17411
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_OWVAR 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 25
17299: PUSH
17300: LD_INT 1
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 69
17315: ST_TO_ADDR
// if not tmp then
17316: LD_VAR 0 3
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17411
// un := tmp [ rand ( 1 , tmp ) ] ;
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: LD_VAR 0 3
17334: PUSH
17335: LD_INT 1
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: CALL_OW 12
17347: ARRAY
17348: ST_TO_ADDR
// if Crawls ( un ) then
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 318
17358: IFFALSE 17369
// ComWalk ( un ) ;
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 9
17376: PPUSH
17377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17381: LD_INT 28
17383: PPUSH
17384: LD_OWVAR 2
17388: PPUSH
17389: LD_INT 2
17391: PPUSH
17392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17396: LD_INT 29
17398: PPUSH
17399: LD_OWVAR 2
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 322
// end ;
17411: PPOPN 3
17413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17414: LD_EXP 29
17418: PUSH
17419: LD_EXP 72
17423: AND
17424: IFFALSE 17535
17426: GO 17428
17428: DISABLE
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17434: LD_ADDR_VAR 0 3
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 25
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 3
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17535
// un := tmp [ rand ( 1 , tmp ) ] ;
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: LD_VAR 0 3
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL_OW 12
17501: ARRAY
17502: ST_TO_ADDR
// if Crawls ( un ) then
17503: LD_VAR 0 2
17507: PPUSH
17508: CALL_OW 318
17512: IFFALSE 17523
// ComWalk ( un ) ;
17514: LD_VAR 0 2
17518: PPUSH
17519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17523: LD_VAR 0 2
17527: PPUSH
17528: LD_INT 8
17530: PPUSH
17531: CALL_OW 336
// end ;
17535: PPOPN 3
17537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17538: LD_EXP 29
17542: PUSH
17543: LD_EXP 73
17547: AND
17548: IFFALSE 17692
17550: GO 17552
17552: DISABLE
17553: LD_INT 0
17555: PPUSH
17556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17557: LD_ADDR_VAR 0 2
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_OWVAR 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 12
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 51
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 34
17609: PUSH
17610: LD_INT 32
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 69
17632: ST_TO_ADDR
// if not tmp then
17633: LD_VAR 0 2
17637: NOT
17638: IFFALSE 17642
// exit ;
17640: GO 17692
// for i in tmp do
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17690
// if GetCargo ( i , mat_artifact ) = 0 then
17655: LD_VAR 0 1
17659: PPUSH
17660: LD_INT 4
17662: PPUSH
17663: CALL_OW 289
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: IFFALSE 17688
// SetCargo ( i , mat_siberit , 100 ) ;
17673: LD_VAR 0 1
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 100
17683: PPUSH
17684: CALL_OW 290
17688: GO 17652
17690: POP
17691: POP
// end ;
17692: PPOPN 2
17694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17695: LD_EXP 29
17699: PUSH
17700: LD_EXP 74
17704: AND
17705: IFFALSE 17888
17707: GO 17709
17709: DISABLE
17710: LD_INT 0
17712: PPUSH
17713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_OWVAR 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: ST_TO_ADDR
// if not tmp then
17736: LD_VAR 0 2
17740: NOT
17741: IFFALSE 17745
// exit ;
17743: GO 17888
// for i := 1 to 2 do
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_INT 2
17757: PUSH
17758: FOR_TO
17759: IFFALSE 17886
// begin uc_side := your_side ;
17761: LD_ADDR_OWVAR 20
17765: PUSH
17766: LD_OWVAR 2
17770: ST_TO_ADDR
// uc_nation := nation_american ;
17771: LD_ADDR_OWVAR 21
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// vc_chassis := us_morphling ;
17779: LD_ADDR_OWVAR 37
17783: PUSH
17784: LD_INT 5
17786: ST_TO_ADDR
// vc_engine := engine_siberite ;
17787: LD_ADDR_OWVAR 39
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// vc_control := control_computer ;
17795: LD_ADDR_OWVAR 38
17799: PUSH
17800: LD_INT 3
17802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17803: LD_ADDR_OWVAR 40
17807: PUSH
17808: LD_INT 10
17810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17811: LD_VAR 0 2
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: CALL_OW 310
17824: NOT
17825: IFFALSE 17872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17827: CALL_OW 45
17831: PPUSH
17832: LD_VAR 0 2
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: CALL_OW 250
17845: PPUSH
17846: LD_VAR 0 2
17850: PUSH
17851: LD_INT 1
17853: ARRAY
17854: PPUSH
17855: CALL_OW 251
17859: PPUSH
17860: LD_INT 12
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 50
17870: GO 17884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17872: CALL_OW 45
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 51
// end ;
17884: GO 17758
17886: POP
17887: POP
// end ;
17888: PPOPN 2
17890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17891: LD_EXP 29
17895: PUSH
17896: LD_EXP 75
17900: AND
17901: IFFALSE 18123
17903: GO 17905
17905: DISABLE
17906: LD_INT 0
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17914: LD_ADDR_VAR 0 6
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 23
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: ST_TO_ADDR
// if not tmp then
17968: LD_VAR 0 6
17972: NOT
17973: IFFALSE 17977
// exit ;
17975: GO 18123
// s1 := rand ( 1 , 4 ) ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 4
17987: PPUSH
17988: CALL_OW 12
17992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17993: LD_ADDR_VAR 0 4
17997: PUSH
17998: LD_VAR 0 6
18002: PUSH
18003: LD_INT 1
18005: ARRAY
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 259
18016: ST_TO_ADDR
// if s1 = 1 then
18017: LD_VAR 0 2
18021: PUSH
18022: LD_INT 1
18024: EQUAL
18025: IFFALSE 18045
// s2 := rand ( 2 , 4 ) else
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_INT 2
18034: PPUSH
18035: LD_INT 4
18037: PPUSH
18038: CALL_OW 12
18042: ST_TO_ADDR
18043: GO 18053
// s2 := 1 ;
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_VAR 0 6
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: CALL_OW 259
18076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18077: LD_VAR 0 6
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 2
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18100: LD_VAR 0 6
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_VAR 0 4
18118: PPUSH
18119: CALL_OW 237
// end ;
18123: PPOPN 6
18125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18126: LD_EXP 29
18130: PUSH
18131: LD_EXP 76
18135: AND
18136: IFFALSE 18215
18138: GO 18140
18140: DISABLE
18141: LD_INT 0
18143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18144: LD_ADDR_VAR 0 1
18148: PUSH
18149: LD_INT 22
18151: PUSH
18152: LD_OWVAR 2
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 30
18163: PUSH
18164: LD_INT 3
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: ST_TO_ADDR
// if not tmp then
18180: LD_VAR 0 1
18184: NOT
18185: IFFALSE 18189
// exit ;
18187: GO 18215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 1
18196: PPUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 12
18206: ARRAY
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 234
// end ;
18215: PPOPN 1
18217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18218: LD_EXP 29
18222: PUSH
18223: LD_EXP 77
18227: AND
18228: IFFALSE 18340
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
18236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_OWVAR 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 27
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 26
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 28
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 69
18301: ST_TO_ADDR
// if not tmp then
18302: LD_VAR 0 2
18306: NOT
18307: IFFALSE 18311
// exit ;
18309: GO 18340
// for i in tmp do
18311: LD_ADDR_VAR 0 1
18315: PUSH
18316: LD_VAR 0 2
18320: PUSH
18321: FOR_IN
18322: IFFALSE 18338
// SetLives ( i , 1 ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 234
18336: GO 18321
18338: POP
18339: POP
// end ;
18340: PPOPN 2
18342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18343: LD_EXP 29
18347: PUSH
18348: LD_EXP 78
18352: AND
18353: IFFALSE 18640
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
// begin i := rand ( 1 , 7 ) ;
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 1
18370: PPUSH
18371: LD_INT 7
18373: PPUSH
18374: CALL_OW 12
18378: ST_TO_ADDR
// case i of 1 :
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18402
18392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18393: LD_STRING earthquake(getX(game), 0, 32)
18395: PPUSH
18396: CALL_OW 559
18400: GO 18640
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18424
18410: POP
// begin ToLua ( displayStucuk(); ) ;
18411: LD_STRING displayStucuk();
18413: PPUSH
18414: CALL_OW 559
// ResetFog ;
18418: CALL_OW 335
// end ; 3 :
18422: GO 18640
18424: LD_INT 3
18426: DOUBLE
18427: EQUAL
18428: IFTRUE 18432
18430: GO 18536
18432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18433: LD_ADDR_VAR 0 2
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: CALL_OW 69
18468: ST_TO_ADDR
// if not tmp then
18469: LD_VAR 0 2
18473: NOT
18474: IFFALSE 18478
// exit ;
18476: GO 18640
// un := tmp [ rand ( 1 , tmp ) ] ;
18478: LD_ADDR_VAR 0 3
18482: PUSH
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: CALL_OW 12
18500: ARRAY
18501: ST_TO_ADDR
// if Crawls ( un ) then
18502: LD_VAR 0 3
18506: PPUSH
18507: CALL_OW 318
18511: IFFALSE 18522
// ComWalk ( un ) ;
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 8
18529: PPUSH
18530: CALL_OW 336
// end ; 4 :
18534: GO 18640
18536: LD_INT 4
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18618
18544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 29
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 2
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18590: LD_VAR 0 2
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18603: LD_VAR 0 2
18607: PUSH
18608: LD_INT 1
18610: ARRAY
18611: PPUSH
18612: CALL_OW 65
// end ; 5 .. 7 :
18616: GO 18640
18618: LD_INT 5
18620: DOUBLE
18621: GREATEREQUAL
18622: IFFALSE 18630
18624: LD_INT 7
18626: DOUBLE
18627: LESSEQUAL
18628: IFTRUE 18632
18630: GO 18639
18632: POP
// StreamSibBomb ; end ;
18633: CALL 14877 0 0
18637: GO 18640
18639: POP
// end ;
18640: PPOPN 3
18642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18643: LD_EXP 29
18647: PUSH
18648: LD_EXP 79
18652: AND
18653: IFFALSE 18809
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_INT 81
18670: PUSH
18671: LD_OWVAR 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 69
18716: ST_TO_ADDR
// if not tmp then
18717: LD_VAR 0 2
18721: NOT
18722: IFFALSE 18726
// exit ;
18724: GO 18809
// p := 0 ;
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: LD_INT 0
18733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18734: LD_INT 35
18736: PPUSH
18737: CALL_OW 67
// p := p + 1 ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_VAR 0 3
18750: PUSH
18751: LD_INT 1
18753: PLUS
18754: ST_TO_ADDR
// for i in tmp do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18797
// if GetLives ( i ) < 1000 then
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 256
18777: PUSH
18778: LD_INT 1000
18780: LESS
18781: IFFALSE 18795
// SetLives ( i , 1000 ) ;
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_INT 1000
18790: PPUSH
18791: CALL_OW 234
18795: GO 18765
18797: POP
18798: POP
// until p > 20 ;
18799: LD_VAR 0 3
18803: PUSH
18804: LD_INT 20
18806: GREATER
18807: IFFALSE 18734
// end ;
18809: PPOPN 3
18811: END
// every 0 0$1 trigger StreamModeActive and sTime do
18812: LD_EXP 29
18816: PUSH
18817: LD_EXP 80
18821: AND
18822: IFFALSE 18857
18824: GO 18826
18826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18827: LD_INT 28
18829: PPUSH
18830: LD_OWVAR 2
18834: PPUSH
18835: LD_INT 2
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18842: LD_INT 30
18844: PPUSH
18845: LD_OWVAR 2
18849: PPUSH
18850: LD_INT 2
18852: PPUSH
18853: CALL_OW 322
// end ;
18857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18858: LD_EXP 29
18862: PUSH
18863: LD_EXP 81
18867: AND
18868: IFFALSE 18989
18870: GO 18872
18872: DISABLE
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18877: LD_ADDR_VAR 0 2
18881: PUSH
18882: LD_INT 22
18884: PUSH
18885: LD_OWVAR 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 23
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: PPUSH
18926: CALL_OW 69
18930: ST_TO_ADDR
// if not tmp then
18931: LD_VAR 0 2
18935: NOT
18936: IFFALSE 18940
// exit ;
18938: GO 18989
// for i in tmp do
18940: LD_ADDR_VAR 0 1
18944: PUSH
18945: LD_VAR 0 2
18949: PUSH
18950: FOR_IN
18951: IFFALSE 18987
// begin if Crawls ( i ) then
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 318
18962: IFFALSE 18973
// ComWalk ( i ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 138
// SetClass ( i , 2 ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: LD_INT 2
18980: PPUSH
18981: CALL_OW 336
// end ;
18985: GO 18950
18987: POP
18988: POP
// end ;
18989: PPOPN 2
18991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18992: LD_EXP 29
18996: PUSH
18997: LD_EXP 82
19001: AND
19002: IFFALSE 19290
19004: GO 19006
19006: DISABLE
19007: LD_INT 0
19009: PPUSH
19010: PPUSH
19011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19012: LD_OWVAR 2
19016: PPUSH
19017: LD_INT 9
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19030: LD_INT 9
19032: PPUSH
19033: LD_OWVAR 2
19037: PPUSH
19038: CALL_OW 343
// uc_side := 9 ;
19042: LD_ADDR_OWVAR 20
19046: PUSH
19047: LD_INT 9
19049: ST_TO_ADDR
// uc_nation := 2 ;
19050: LD_ADDR_OWVAR 21
19054: PUSH
19055: LD_INT 2
19057: ST_TO_ADDR
// hc_name := Dark Warrior ;
19058: LD_ADDR_OWVAR 26
19062: PUSH
19063: LD_STRING Dark Warrior
19065: ST_TO_ADDR
// hc_gallery :=  ;
19066: LD_ADDR_OWVAR 33
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// hc_noskilllimit := true ;
19074: LD_ADDR_OWVAR 76
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19082: LD_ADDR_OWVAR 31
19086: PUSH
19087: LD_INT 30
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 30
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// un := CreateHuman ;
19105: LD_ADDR_VAR 0 3
19109: PUSH
19110: CALL_OW 44
19114: ST_TO_ADDR
// hc_noskilllimit := false ;
19115: LD_ADDR_OWVAR 76
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19123: LD_VAR 0 3
19127: PPUSH
19128: LD_INT 1
19130: PPUSH
19131: CALL_OW 51
// ToLua ( playRanger() ) ;
19135: LD_STRING playRanger()
19137: PPUSH
19138: CALL_OW 559
// p := 0 ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19150: LD_INT 35
19152: PPUSH
19153: CALL_OW 67
// p := p + 1 ;
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_VAR 0 2
19166: PUSH
19167: LD_INT 1
19169: PLUS
19170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 256
19180: PUSH
19181: LD_INT 1000
19183: LESS
19184: IFFALSE 19198
// SetLives ( un , 1000 ) ;
19186: LD_VAR 0 3
19190: PPUSH
19191: LD_INT 1000
19193: PPUSH
19194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 81
19205: PUSH
19206: LD_OWVAR 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 91
19217: PUSH
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 74
19249: PPUSH
19250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19254: LD_VAR 0 2
19258: PUSH
19259: LD_INT 80
19261: GREATER
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 301
19272: OR
19273: IFFALSE 19150
// if un then
19275: LD_VAR 0 3
19279: IFFALSE 19290
// RemoveUnit ( un ) ;
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL_OW 64
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19293: LD_EXP 83
19297: IFFALSE 19413
19299: GO 19301
19301: DISABLE
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19307: LD_ADDR_VAR 0 2
19311: PUSH
19312: LD_INT 81
19314: PUSH
19315: LD_OWVAR 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 21
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19343: LD_STRING playComputer()
19345: PPUSH
19346: CALL_OW 559
// if not tmp then
19350: LD_VAR 0 2
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19413
// for i in tmp do
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_VAR 0 2
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19411
// for j := 1 to 4 do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_INT 4
19384: PUSH
19385: FOR_TO
19386: IFFALSE 19407
// SetSkill ( i , j , 10 ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_INT 10
19400: PPUSH
19401: CALL_OW 237
19405: GO 19385
19407: POP
19408: POP
19409: GO 19369
19411: POP
19412: POP
// end ;
19413: PPOPN 3
19415: END
// every 0 0$1 trigger s30 do var i , tmp ;
19416: LD_EXP 84
19420: IFFALSE 19489
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
19428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19429: LD_ADDR_VAR 0 2
19433: PUSH
19434: LD_INT 22
19436: PUSH
19437: LD_OWVAR 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: ST_TO_ADDR
// if not tmp then
19451: LD_VAR 0 2
19455: NOT
19456: IFFALSE 19460
// exit ;
19458: GO 19489
// for i in tmp do
19460: LD_ADDR_VAR 0 1
19464: PUSH
19465: LD_VAR 0 2
19469: PUSH
19470: FOR_IN
19471: IFFALSE 19487
// SetLives ( i , 300 ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_INT 300
19480: PPUSH
19481: CALL_OW 234
19485: GO 19470
19487: POP
19488: POP
// end ;
19489: PPOPN 2
19491: END
// every 0 0$1 trigger s60 do var i , tmp ;
19492: LD_EXP 85
19496: IFFALSE 19565
19498: GO 19500
19500: DISABLE
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19505: LD_ADDR_VAR 0 2
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_OWVAR 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 2
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19565
// for i in tmp do
19536: LD_ADDR_VAR 0 1
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetLives ( i , 600 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 600
19556: PPUSH
19557: CALL_OW 234
19561: GO 19546
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19568: LD_INT 0
19570: PPUSH
// case cmd of 301 :
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 301
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19616
19584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19585: LD_VAR 0 6
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: LD_VAR 0 8
19599: PPUSH
19600: LD_VAR 0 4
19604: PPUSH
19605: LD_VAR 0 5
19609: PPUSH
19610: CALL 20825 0 5
19614: GO 19737
19616: LD_INT 302
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19661
19624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19625: LD_VAR 0 6
19629: PPUSH
19630: LD_VAR 0 7
19634: PPUSH
19635: LD_VAR 0 8
19639: PPUSH
19640: LD_VAR 0 9
19644: PPUSH
19645: LD_VAR 0 4
19649: PPUSH
19650: LD_VAR 0 5
19654: PPUSH
19655: CALL 20916 0 6
19659: GO 19737
19661: LD_INT 303
19663: DOUBLE
19664: EQUAL
19665: IFTRUE 19669
19667: GO 19706
19669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19670: LD_VAR 0 6
19674: PPUSH
19675: LD_VAR 0 7
19679: PPUSH
19680: LD_VAR 0 8
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_VAR 0 4
19694: PPUSH
19695: LD_VAR 0 5
19699: PPUSH
19700: CALL 19742 0 6
19704: GO 19737
19706: LD_INT 304
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19736
19714: POP
// hHackTeleport ( unit , x , y ) ; end ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_VAR 0 5
19729: PPUSH
19730: CALL 21509 0 3
19734: GO 19737
19736: POP
// end ;
19737: LD_VAR 0 12
19741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19742: LD_INT 0
19744: PPUSH
19745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19746: LD_VAR 0 1
19750: PUSH
19751: LD_INT 1
19753: LESS
19754: PUSH
19755: LD_VAR 0 1
19759: PUSH
19760: LD_INT 3
19762: GREATER
19763: OR
19764: PUSH
19765: LD_VAR 0 5
19769: PPUSH
19770: LD_VAR 0 6
19774: PPUSH
19775: CALL_OW 428
19779: OR
19780: IFFALSE 19784
// exit ;
19782: GO 20512
// uc_side := your_side ;
19784: LD_ADDR_OWVAR 20
19788: PUSH
19789: LD_OWVAR 2
19793: ST_TO_ADDR
// uc_nation := nation ;
19794: LD_ADDR_OWVAR 21
19798: PUSH
19799: LD_VAR 0 1
19803: ST_TO_ADDR
// bc_level = 1 ;
19804: LD_ADDR_OWVAR 43
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// case btype of 1 :
19812: LD_VAR 0 2
19816: PUSH
19817: LD_INT 1
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19836
19825: POP
// bc_type := b_depot ; 2 :
19826: LD_ADDR_OWVAR 42
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 20456
19836: LD_INT 2
19838: DOUBLE
19839: EQUAL
19840: IFTRUE 19844
19842: GO 19855
19844: POP
// bc_type := b_warehouse ; 3 :
19845: LD_ADDR_OWVAR 42
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
19853: GO 20456
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19874
19863: POP
// bc_type := b_lab ; 4 .. 9 :
19864: LD_ADDR_OWVAR 42
19868: PUSH
19869: LD_INT 6
19871: ST_TO_ADDR
19872: GO 20456
19874: LD_INT 4
19876: DOUBLE
19877: GREATEREQUAL
19878: IFFALSE 19886
19880: LD_INT 9
19882: DOUBLE
19883: LESSEQUAL
19884: IFTRUE 19888
19886: GO 19948
19888: POP
// begin bc_type := b_lab_half ;
19889: LD_ADDR_OWVAR 42
19893: PUSH
19894: LD_INT 7
19896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19897: LD_ADDR_OWVAR 44
19901: PUSH
19902: LD_INT 10
19904: PUSH
19905: LD_INT 11
19907: PUSH
19908: LD_INT 12
19910: PUSH
19911: LD_INT 15
19913: PUSH
19914: LD_INT 14
19916: PUSH
19917: LD_INT 13
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: LD_VAR 0 2
19932: PUSH
19933: LD_INT 3
19935: MINUS
19936: ARRAY
19937: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19938: LD_ADDR_OWVAR 45
19942: PUSH
19943: LD_INT 9
19945: ST_TO_ADDR
// end ; 10 .. 13 :
19946: GO 20456
19948: LD_INT 10
19950: DOUBLE
19951: GREATEREQUAL
19952: IFFALSE 19960
19954: LD_INT 13
19956: DOUBLE
19957: LESSEQUAL
19958: IFTRUE 19962
19960: GO 20039
19962: POP
// begin bc_type := b_lab_full ;
19963: LD_ADDR_OWVAR 42
19967: PUSH
19968: LD_INT 8
19970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19971: LD_ADDR_OWVAR 44
19975: PUSH
19976: LD_INT 10
19978: PUSH
19979: LD_INT 12
19981: PUSH
19982: LD_INT 14
19984: PUSH
19985: LD_INT 13
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: LD_VAR 0 2
19998: PUSH
19999: LD_INT 9
20001: MINUS
20002: ARRAY
20003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20004: LD_ADDR_OWVAR 45
20008: PUSH
20009: LD_INT 11
20011: PUSH
20012: LD_INT 15
20014: PUSH
20015: LD_INT 12
20017: PUSH
20018: LD_INT 15
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 9
20034: MINUS
20035: ARRAY
20036: ST_TO_ADDR
// end ; 14 :
20037: GO 20456
20039: LD_INT 14
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20058
20047: POP
// bc_type := b_workshop ; 15 :
20048: LD_ADDR_OWVAR 42
20052: PUSH
20053: LD_INT 2
20055: ST_TO_ADDR
20056: GO 20456
20058: LD_INT 15
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20077
20066: POP
// bc_type := b_factory ; 16 :
20067: LD_ADDR_OWVAR 42
20071: PUSH
20072: LD_INT 3
20074: ST_TO_ADDR
20075: GO 20456
20077: LD_INT 16
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20096
20085: POP
// bc_type := b_ext_gun ; 17 :
20086: LD_ADDR_OWVAR 42
20090: PUSH
20091: LD_INT 17
20093: ST_TO_ADDR
20094: GO 20456
20096: LD_INT 17
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20132
20104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20105: LD_ADDR_OWVAR 42
20109: PUSH
20110: LD_INT 19
20112: PUSH
20113: LD_INT 23
20115: PUSH
20116: LD_INT 19
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_VAR 0 1
20128: ARRAY
20129: ST_TO_ADDR
20130: GO 20456
20132: LD_INT 18
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20151
20140: POP
// bc_type := b_ext_radar ; 19 :
20141: LD_ADDR_OWVAR 42
20145: PUSH
20146: LD_INT 20
20148: ST_TO_ADDR
20149: GO 20456
20151: LD_INT 19
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20170
20159: POP
// bc_type := b_ext_radio ; 20 :
20160: LD_ADDR_OWVAR 42
20164: PUSH
20165: LD_INT 22
20167: ST_TO_ADDR
20168: GO 20456
20170: LD_INT 20
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20189
20178: POP
// bc_type := b_ext_siberium ; 21 :
20179: LD_ADDR_OWVAR 42
20183: PUSH
20184: LD_INT 21
20186: ST_TO_ADDR
20187: GO 20456
20189: LD_INT 21
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20208
20197: POP
// bc_type := b_ext_computer ; 22 :
20198: LD_ADDR_OWVAR 42
20202: PUSH
20203: LD_INT 24
20205: ST_TO_ADDR
20206: GO 20456
20208: LD_INT 22
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20227
20216: POP
// bc_type := b_ext_track ; 23 :
20217: LD_ADDR_OWVAR 42
20221: PUSH
20222: LD_INT 16
20224: ST_TO_ADDR
20225: GO 20456
20227: LD_INT 23
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20246
20235: POP
// bc_type := b_ext_laser ; 24 :
20236: LD_ADDR_OWVAR 42
20240: PUSH
20241: LD_INT 25
20243: ST_TO_ADDR
20244: GO 20456
20246: LD_INT 24
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// bc_type := b_control_tower ; 25 :
20255: LD_ADDR_OWVAR 42
20259: PUSH
20260: LD_INT 36
20262: ST_TO_ADDR
20263: GO 20456
20265: LD_INT 25
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20284
20273: POP
// bc_type := b_breastwork ; 26 :
20274: LD_ADDR_OWVAR 42
20278: PUSH
20279: LD_INT 31
20281: ST_TO_ADDR
20282: GO 20456
20284: LD_INT 26
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// bc_type := b_bunker ; 27 :
20293: LD_ADDR_OWVAR 42
20297: PUSH
20298: LD_INT 32
20300: ST_TO_ADDR
20301: GO 20456
20303: LD_INT 27
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20322
20311: POP
// bc_type := b_turret ; 28 :
20312: LD_ADDR_OWVAR 42
20316: PUSH
20317: LD_INT 33
20319: ST_TO_ADDR
20320: GO 20456
20322: LD_INT 28
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20341
20330: POP
// bc_type := b_armoury ; 29 :
20331: LD_ADDR_OWVAR 42
20335: PUSH
20336: LD_INT 4
20338: ST_TO_ADDR
20339: GO 20456
20341: LD_INT 29
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20360
20349: POP
// bc_type := b_barracks ; 30 :
20350: LD_ADDR_OWVAR 42
20354: PUSH
20355: LD_INT 5
20357: ST_TO_ADDR
20358: GO 20456
20360: LD_INT 30
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20379
20368: POP
// bc_type := b_solar_power ; 31 :
20369: LD_ADDR_OWVAR 42
20373: PUSH
20374: LD_INT 27
20376: ST_TO_ADDR
20377: GO 20456
20379: LD_INT 31
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// bc_type := b_oil_power ; 32 :
20388: LD_ADDR_OWVAR 42
20392: PUSH
20393: LD_INT 26
20395: ST_TO_ADDR
20396: GO 20456
20398: LD_INT 32
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20417
20406: POP
// bc_type := b_siberite_power ; 33 :
20407: LD_ADDR_OWVAR 42
20411: PUSH
20412: LD_INT 28
20414: ST_TO_ADDR
20415: GO 20456
20417: LD_INT 33
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20436
20425: POP
// bc_type := b_oil_mine ; 34 :
20426: LD_ADDR_OWVAR 42
20430: PUSH
20431: LD_INT 29
20433: ST_TO_ADDR
20434: GO 20456
20436: LD_INT 34
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20455
20444: POP
// bc_type := b_siberite_mine ; end ;
20445: LD_ADDR_OWVAR 42
20449: PUSH
20450: LD_INT 30
20452: ST_TO_ADDR
20453: GO 20456
20455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20456: LD_ADDR_VAR 0 8
20460: PUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: LD_VAR 0 6
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 47
20480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20481: LD_OWVAR 42
20485: PUSH
20486: LD_INT 32
20488: PUSH
20489: LD_INT 33
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: IN
20496: IFFALSE 20512
// PlaceWeaponTurret ( b , weapon ) ;
20498: LD_VAR 0 8
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: CALL_OW 431
// end ;
20512: LD_VAR 0 7
20516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20517: LD_INT 0
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20523: LD_ADDR_VAR 0 4
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_OWVAR 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: ST_TO_ADDR
// if not tmp then
20577: LD_VAR 0 4
20581: NOT
20582: IFFALSE 20586
// exit ;
20584: GO 20645
// for i in tmp do
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_VAR 0 4
20595: PUSH
20596: FOR_IN
20597: IFFALSE 20643
// for j = 1 to 3 do
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_INT 3
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 274
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 99999
20632: PPUSH
20633: CALL_OW 277
20637: GO 20612
20639: POP
20640: POP
20641: GO 20596
20643: POP
20644: POP
// end ;
20645: LD_VAR 0 1
20649: RET
// export function hHackSetLevel10 ; var i , j ; begin
20650: LD_INT 0
20652: PPUSH
20653: PPUSH
20654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20655: LD_ADDR_VAR 0 2
20659: PUSH
20660: LD_INT 21
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PUSH
20675: FOR_IN
20676: IFFALSE 20728
// if IsSelected ( i ) then
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 306
20687: IFFALSE 20726
// begin for j := 1 to 4 do
20689: LD_ADDR_VAR 0 3
20693: PUSH
20694: DOUBLE
20695: LD_INT 1
20697: DEC
20698: ST_TO_ADDR
20699: LD_INT 4
20701: PUSH
20702: FOR_TO
20703: IFFALSE 20724
// SetSkill ( i , j , 10 ) ;
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 10
20717: PPUSH
20718: CALL_OW 237
20722: GO 20702
20724: POP
20725: POP
// end ;
20726: GO 20675
20728: POP
20729: POP
// end ;
20730: LD_VAR 0 1
20734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
20739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 22
20747: PUSH
20748: LD_OWVAR 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PPUSH
20771: CALL_OW 69
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20818
// begin for j := 1 to 4 do
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: DOUBLE
20785: LD_INT 1
20787: DEC
20788: ST_TO_ADDR
20789: LD_INT 4
20791: PUSH
20792: FOR_TO
20793: IFFALSE 20814
// SetSkill ( i , j , 10 ) ;
20795: LD_VAR 0 2
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: LD_INT 10
20807: PPUSH
20808: CALL_OW 237
20812: GO 20792
20814: POP
20815: POP
// end ;
20816: GO 20776
20818: POP
20819: POP
// end ;
20820: LD_VAR 0 1
20824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20825: LD_INT 0
20827: PPUSH
// uc_side := your_side ;
20828: LD_ADDR_OWVAR 20
20832: PUSH
20833: LD_OWVAR 2
20837: ST_TO_ADDR
// uc_nation := nation ;
20838: LD_ADDR_OWVAR 21
20842: PUSH
20843: LD_VAR 0 1
20847: ST_TO_ADDR
// InitHc ;
20848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20852: LD_INT 0
20854: PPUSH
20855: LD_VAR 0 2
20859: PPUSH
20860: LD_VAR 0 3
20864: PPUSH
20865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_VAR 0 5
20878: PPUSH
20879: CALL_OW 428
20883: PUSH
20884: LD_INT 0
20886: EQUAL
20887: IFFALSE 20911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20889: CALL_OW 44
20893: PPUSH
20894: LD_VAR 0 4
20898: PPUSH
20899: LD_VAR 0 5
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 48
// end ;
20911: LD_VAR 0 6
20915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// uc_side := your_side ;
20920: LD_ADDR_OWVAR 20
20924: PUSH
20925: LD_OWVAR 2
20929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20930: LD_VAR 0 1
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: IN
20957: IFFALSE 20969
// uc_nation := nation_american else
20959: LD_ADDR_OWVAR 21
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
20967: GO 21012
// if chassis in [ 11 , 12 , 13 , 14 ] then
20969: LD_VAR 0 1
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: LD_INT 12
20979: PUSH
20980: LD_INT 13
20982: PUSH
20983: LD_INT 14
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: IN
20992: IFFALSE 21004
// uc_nation := nation_arabian else
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 2
21001: ST_TO_ADDR
21002: GO 21012
// uc_nation := nation_russian ;
21004: LD_ADDR_OWVAR 21
21008: PUSH
21009: LD_INT 3
21011: ST_TO_ADDR
// vc_chassis := chassis ;
21012: LD_ADDR_OWVAR 37
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// vc_engine := engine ;
21022: LD_ADDR_OWVAR 39
21026: PUSH
21027: LD_VAR 0 2
21031: ST_TO_ADDR
// vc_control := control ;
21032: LD_ADDR_OWVAR 38
21036: PUSH
21037: LD_VAR 0 3
21041: ST_TO_ADDR
// vc_weapon := weapon ;
21042: LD_ADDR_OWVAR 40
21046: PUSH
21047: LD_VAR 0 4
21051: ST_TO_ADDR
// un := CreateVehicle ;
21052: LD_ADDR_VAR 0 8
21056: PUSH
21057: CALL_OW 45
21061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21062: LD_VAR 0 8
21066: PPUSH
21067: LD_INT 0
21069: PPUSH
21070: LD_INT 5
21072: PPUSH
21073: CALL_OW 12
21077: PPUSH
21078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21082: LD_VAR 0 8
21086: PPUSH
21087: LD_VAR 0 5
21091: PPUSH
21092: LD_VAR 0 6
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL_OW 48
// end ;
21104: LD_VAR 0 7
21108: RET
// export hInvincible ; every 1 do
21109: GO 21111
21111: DISABLE
// hInvincible := [ ] ;
21112: LD_ADDR_EXP 86
21116: PUSH
21117: EMPTY
21118: ST_TO_ADDR
21119: END
// every 10 do var i ;
21120: GO 21122
21122: DISABLE
21123: LD_INT 0
21125: PPUSH
// begin enable ;
21126: ENABLE
// if not hInvincible then
21127: LD_EXP 86
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21180
// for i in hInvincible do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_EXP 86
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21178
// if GetLives ( i ) < 1000 then
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 256
21158: PUSH
21159: LD_INT 1000
21161: LESS
21162: IFFALSE 21176
// SetLives ( i , 1000 ) ;
21164: LD_VAR 0 1
21168: PPUSH
21169: LD_INT 1000
21171: PPUSH
21172: CALL_OW 234
21176: GO 21146
21178: POP
21179: POP
// end ;
21180: PPOPN 1
21182: END
// export function hHackInvincible ; var i ; begin
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PUSH
21225: FOR_IN
21226: IFFALSE 21287
// if IsSelected ( i ) then
21228: LD_VAR 0 2
21232: PPUSH
21233: CALL_OW 306
21237: IFFALSE 21285
// begin if i in hInvincible then
21239: LD_VAR 0 2
21243: PUSH
21244: LD_EXP 86
21248: IN
21249: IFFALSE 21269
// hInvincible := hInvincible diff i else
21251: LD_ADDR_EXP 86
21255: PUSH
21256: LD_EXP 86
21260: PUSH
21261: LD_VAR 0 2
21265: DIFF
21266: ST_TO_ADDR
21267: GO 21285
// hInvincible := hInvincible union i ;
21269: LD_ADDR_EXP 86
21273: PUSH
21274: LD_EXP 86
21278: PUSH
21279: LD_VAR 0 2
21283: UNION
21284: ST_TO_ADDR
// end ;
21285: GO 21225
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 1
21293: RET
// export function hHackInvisible ; var i , j ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21299: LD_ADDR_VAR 0 2
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21344
// if IsSelected ( i ) then
21322: LD_VAR 0 2
21326: PPUSH
21327: CALL_OW 306
21331: IFFALSE 21342
// ComForceInvisible ( i ) ;
21333: LD_VAR 0 2
21337: PPUSH
21338: CALL_OW 496
21342: GO 21319
21344: POP
21345: POP
// end ;
21346: LD_VAR 0 1
21350: RET
// export function hHackChangeYourSide ; begin
21351: LD_INT 0
21353: PPUSH
// if your_side = 8 then
21354: LD_OWVAR 2
21358: PUSH
21359: LD_INT 8
21361: EQUAL
21362: IFFALSE 21374
// your_side := 0 else
21364: LD_ADDR_OWVAR 2
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
21372: GO 21388
// your_side := your_side + 1 ;
21374: LD_ADDR_OWVAR 2
21378: PUSH
21379: LD_OWVAR 2
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: ST_TO_ADDR
// end ;
21388: LD_VAR 0 1
21392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// for i in all_units do
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_OWVAR 3
21407: PUSH
21408: FOR_IN
21409: IFFALSE 21487
// if IsSelected ( i ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: CALL_OW 306
21420: IFFALSE 21485
// begin j := GetSide ( i ) ;
21422: LD_ADDR_VAR 0 3
21426: PUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: CALL_OW 255
21436: ST_TO_ADDR
// if j = 8 then
21437: LD_VAR 0 3
21441: PUSH
21442: LD_INT 8
21444: EQUAL
21445: IFFALSE 21457
// j := 0 else
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
21455: GO 21471
// j := j + 1 ;
21457: LD_ADDR_VAR 0 3
21461: PUSH
21462: LD_VAR 0 3
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: ST_TO_ADDR
// SetSide ( i , j ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: CALL_OW 235
// end ;
21485: GO 21408
21487: POP
21488: POP
// end ;
21489: LD_VAR 0 1
21493: RET
// export function hHackFog ; begin
21494: LD_INT 0
21496: PPUSH
// FogOff ( true ) ;
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 344
// end ;
21504: LD_VAR 0 1
21508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21509: LD_INT 0
21511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_VAR 0 2
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 483
// CenterOnXY ( x , y ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: CALL_OW 84
// end ;
21551: LD_VAR 0 4
21555: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21560: LD_VAR 0 1
21564: NOT
21565: PUSH
21566: LD_VAR 0 2
21570: PPUSH
21571: LD_VAR 0 3
21575: PPUSH
21576: CALL_OW 488
21580: NOT
21581: OR
21582: PUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL_OW 266
21592: PUSH
21593: LD_INT 3
21595: NONEQUAL
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 247
21606: PUSH
21607: LD_INT 1
21609: EQUAL
21610: NOT
21611: AND
21612: OR
21613: IFFALSE 21617
// exit ;
21615: GO 21899
// if GetType ( factory ) = unit_human then
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 247
21626: PUSH
21627: LD_INT 1
21629: EQUAL
21630: IFFALSE 21647
// factory := IsInUnit ( factory ) ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 310
21646: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 266
21656: PUSH
21657: LD_INT 3
21659: NONEQUAL
21660: IFFALSE 21664
// exit ;
21662: GO 21899
// for i := 1 to Count ( factoryWaypoints ) do
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: DOUBLE
21670: LD_INT 1
21672: DEC
21673: ST_TO_ADDR
21674: LD_EXP 87
21678: PPUSH
21679: CALL 30402 0 1
21683: PUSH
21684: FOR_TO
21685: IFFALSE 21847
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
21687: LD_VAR 0 2
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 428
21701: PUSH
21702: LD_EXP 87
21706: PUSH
21707: LD_VAR 0 5
21711: ARRAY
21712: PUSH
21713: LD_INT 2
21715: ARRAY
21716: EQUAL
21717: IFFALSE 21749
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21719: LD_ADDR_EXP 87
21723: PUSH
21724: LD_EXP 87
21728: PPUSH
21729: LD_VAR 0 5
21733: PPUSH
21734: CALL_OW 3
21738: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21739: CALL 21904 0 0
// exit ;
21743: POP
21744: POP
21745: GO 21899
// end else
21747: GO 21845
// if factory = factoryWaypoints [ i ] [ 2 ] then
21749: LD_VAR 0 1
21753: PUSH
21754: LD_EXP 87
21758: PUSH
21759: LD_VAR 0 5
21763: ARRAY
21764: PUSH
21765: LD_INT 2
21767: ARRAY
21768: EQUAL
21769: IFFALSE 21845
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21771: LD_ADDR_EXP 87
21775: PUSH
21776: LD_EXP 87
21780: PPUSH
21781: LD_VAR 0 5
21785: PPUSH
21786: CALL_OW 3
21790: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21791: LD_ADDR_EXP 87
21795: PUSH
21796: LD_EXP 87
21800: PPUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL_OW 255
21810: PUSH
21811: LD_VAR 0 1
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_VAR 0 3
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL 66011 0 2
21836: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21837: CALL 21904 0 0
// exit ;
21841: POP
21842: POP
21843: GO 21899
// end ; end ;
21845: GO 21684
21847: POP
21848: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21849: LD_ADDR_EXP 87
21853: PUSH
21854: LD_EXP 87
21858: PPUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 255
21868: PUSH
21869: LD_VAR 0 1
21873: PUSH
21874: LD_VAR 0 2
21878: PUSH
21879: LD_VAR 0 3
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PPUSH
21890: CALL 66011 0 2
21894: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21895: CALL 21904 0 0
// end ;
21899: LD_VAR 0 4
21903: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21909: LD_STRING resetFactoryWaypoint();
21911: PPUSH
21912: CALL_OW 559
// if factoryWaypoints then
21916: LD_EXP 87
21920: IFFALSE 22041
// begin list := factoryWaypoints ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_EXP 87
21931: ST_TO_ADDR
// for i := 1 to list do
21932: LD_ADDR_VAR 0 2
21936: PUSH
21937: DOUBLE
21938: LD_INT 1
21940: DEC
21941: ST_TO_ADDR
21942: LD_VAR 0 3
21946: PUSH
21947: FOR_TO
21948: IFFALSE 22039
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21950: LD_STRING setFactoryWaypointXY(
21952: PUSH
21953: LD_VAR 0 3
21957: PUSH
21958: LD_VAR 0 2
21962: ARRAY
21963: PUSH
21964: LD_INT 1
21966: ARRAY
21967: STR
21968: PUSH
21969: LD_STRING ,
21971: STR
21972: PUSH
21973: LD_VAR 0 3
21977: PUSH
21978: LD_VAR 0 2
21982: ARRAY
21983: PUSH
21984: LD_INT 2
21986: ARRAY
21987: STR
21988: PUSH
21989: LD_STRING ,
21991: STR
21992: PUSH
21993: LD_VAR 0 3
21997: PUSH
21998: LD_VAR 0 2
22002: ARRAY
22003: PUSH
22004: LD_INT 3
22006: ARRAY
22007: STR
22008: PUSH
22009: LD_STRING ,
22011: STR
22012: PUSH
22013: LD_VAR 0 3
22017: PUSH
22018: LD_VAR 0 2
22022: ARRAY
22023: PUSH
22024: LD_INT 4
22026: ARRAY
22027: STR
22028: PUSH
22029: LD_STRING )
22031: STR
22032: PPUSH
22033: CALL_OW 559
22037: GO 21947
22039: POP
22040: POP
// end ; end ;
22041: LD_VAR 0 1
22045: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22046: LD_INT 0
22048: PPUSH
// if HexInfo ( x , y ) = warehouse then
22049: LD_VAR 0 2
22053: PPUSH
22054: LD_VAR 0 3
22058: PPUSH
22059: CALL_OW 428
22063: PUSH
22064: LD_VAR 0 1
22068: EQUAL
22069: IFFALSE 22096
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22071: LD_ADDR_EXP 88
22075: PUSH
22076: LD_EXP 88
22080: PPUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_INT 0
22088: PPUSH
22089: CALL_OW 1
22093: ST_TO_ADDR
22094: GO 22147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22096: LD_ADDR_EXP 88
22100: PUSH
22101: LD_EXP 88
22105: PPUSH
22106: LD_VAR 0 1
22110: PPUSH
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL_OW 255
22120: PUSH
22121: LD_VAR 0 1
22125: PUSH
22126: LD_VAR 0 2
22130: PUSH
22131: LD_VAR 0 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 1
22146: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22147: CALL 22156 0 0
// end ;
22151: LD_VAR 0 4
22155: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22156: LD_INT 0
22158: PPUSH
22159: PPUSH
22160: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22161: LD_STRING resetWarehouseGatheringPoints();
22163: PPUSH
22164: CALL_OW 559
// if warehouseGatheringPoints then
22168: LD_EXP 88
22172: IFFALSE 22298
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_EXP 88
22183: PPUSH
22184: CALL 69773 0 1
22188: ST_TO_ADDR
// for i := 1 to list do
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: DOUBLE
22195: LD_INT 1
22197: DEC
22198: ST_TO_ADDR
22199: LD_VAR 0 3
22203: PUSH
22204: FOR_TO
22205: IFFALSE 22296
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22207: LD_STRING setWarehouseGatheringPointXY(
22209: PUSH
22210: LD_VAR 0 3
22214: PUSH
22215: LD_VAR 0 2
22219: ARRAY
22220: PUSH
22221: LD_INT 1
22223: ARRAY
22224: STR
22225: PUSH
22226: LD_STRING ,
22228: STR
22229: PUSH
22230: LD_VAR 0 3
22234: PUSH
22235: LD_VAR 0 2
22239: ARRAY
22240: PUSH
22241: LD_INT 2
22243: ARRAY
22244: STR
22245: PUSH
22246: LD_STRING ,
22248: STR
22249: PUSH
22250: LD_VAR 0 3
22254: PUSH
22255: LD_VAR 0 2
22259: ARRAY
22260: PUSH
22261: LD_INT 3
22263: ARRAY
22264: STR
22265: PUSH
22266: LD_STRING ,
22268: STR
22269: PUSH
22270: LD_VAR 0 3
22274: PUSH
22275: LD_VAR 0 2
22279: ARRAY
22280: PUSH
22281: LD_INT 4
22283: ARRAY
22284: STR
22285: PUSH
22286: LD_STRING )
22288: STR
22289: PPUSH
22290: CALL_OW 559
22294: GO 22204
22296: POP
22297: POP
// end ; end ;
22298: LD_VAR 0 1
22302: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22303: LD_EXP 88
22307: IFFALSE 22992
22309: GO 22311
22311: DISABLE
22312: LD_INT 0
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
// begin enable ;
22323: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22324: LD_ADDR_VAR 0 3
22328: PUSH
22329: LD_EXP 88
22333: PPUSH
22334: CALL 69773 0 1
22338: ST_TO_ADDR
// if not list then
22339: LD_VAR 0 3
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22992
// for i := 1 to list do
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: DOUBLE
22354: LD_INT 1
22356: DEC
22357: ST_TO_ADDR
22358: LD_VAR 0 3
22362: PUSH
22363: FOR_TO
22364: IFFALSE 22990
// begin depot := list [ i ] [ 2 ] ;
22366: LD_ADDR_VAR 0 8
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 1
22380: ARRAY
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22386: LD_ADDR_VAR 0 5
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 1
22400: ARRAY
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22406: LD_VAR 0 8
22410: PPUSH
22411: CALL_OW 301
22415: PUSH
22416: LD_VAR 0 5
22420: PUSH
22421: LD_VAR 0 8
22425: PPUSH
22426: CALL_OW 255
22430: NONEQUAL
22431: OR
22432: IFFALSE 22461
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22434: LD_ADDR_EXP 88
22438: PUSH
22439: LD_EXP 88
22443: PPUSH
22444: LD_VAR 0 8
22448: PPUSH
22449: LD_INT 0
22451: PPUSH
22452: CALL_OW 1
22456: ST_TO_ADDR
// exit ;
22457: POP
22458: POP
22459: GO 22992
// end ; x := list [ i ] [ 3 ] ;
22461: LD_ADDR_VAR 0 6
22465: PUSH
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PUSH
22477: LD_INT 3
22479: ARRAY
22480: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22481: LD_ADDR_VAR 0 7
22485: PUSH
22486: LD_VAR 0 3
22490: PUSH
22491: LD_VAR 0 1
22495: ARRAY
22496: PUSH
22497: LD_INT 4
22499: ARRAY
22500: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_VAR 0 6
22510: PPUSH
22511: LD_VAR 0 7
22515: PPUSH
22516: LD_INT 16
22518: PPUSH
22519: CALL 68357 0 3
22523: ST_TO_ADDR
// if not cratesNearbyPoint then
22524: LD_VAR 0 9
22528: NOT
22529: IFFALSE 22535
// exit ;
22531: POP
22532: POP
22533: GO 22992
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22535: LD_ADDR_VAR 0 4
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_VAR 0 5
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: LD_INT 60
22557: PUSH
22558: EMPTY
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 91
22567: PUSH
22568: LD_VAR 0 8
22572: PUSH
22573: LD_INT 6
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 16
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PPUSH
22615: CALL_OW 69
22619: PUSH
22620: LD_VAR 0 8
22624: PPUSH
22625: CALL_OW 313
22629: PPUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 60
22635: PUSH
22636: EMPTY
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 25
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 25
22658: PUSH
22659: LD_INT 16
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PPUSH
22675: CALL_OW 72
22679: UNION
22680: ST_TO_ADDR
// if tmp then
22681: LD_VAR 0 4
22685: IFFALSE 22765
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22687: LD_ADDR_VAR 0 4
22691: PUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: LD_INT 3
22699: PPUSH
22700: CALL 66326 0 2
22704: ST_TO_ADDR
// for j in tmp do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_VAR 0 4
22714: PUSH
22715: FOR_IN
22716: IFFALSE 22759
// begin if IsInUnit ( j ) then
22718: LD_VAR 0 2
22722: PPUSH
22723: CALL_OW 310
22727: IFFALSE 22738
// ComExit ( j ) ;
22729: LD_VAR 0 2
22733: PPUSH
22734: CALL 66409 0 1
// AddComCollect ( j , x , y ) ;
22738: LD_VAR 0 2
22742: PPUSH
22743: LD_VAR 0 6
22747: PPUSH
22748: LD_VAR 0 7
22752: PPUSH
22753: CALL_OW 177
// end ;
22757: GO 22715
22759: POP
22760: POP
// exit ;
22761: POP
22762: POP
22763: GO 22992
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22765: LD_ADDR_VAR 0 4
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_VAR 0 5
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 91
22784: PUSH
22785: LD_VAR 0 8
22789: PUSH
22790: LD_INT 8
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 34
22803: PUSH
22804: LD_INT 12
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 34
22813: PUSH
22814: LD_INT 51
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 34
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_INT 89
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if tmp then
22858: LD_VAR 0 4
22862: IFFALSE 22988
// begin for j in tmp do
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 4
22873: PUSH
22874: FOR_IN
22875: IFFALSE 22986
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 262
22886: PUSH
22887: LD_INT 3
22889: EQUAL
22890: PUSH
22891: LD_VAR 0 2
22895: PPUSH
22896: CALL_OW 261
22900: PUSH
22901: LD_INT 20
22903: GREATER
22904: OR
22905: PUSH
22906: LD_VAR 0 2
22910: PPUSH
22911: CALL_OW 314
22915: NOT
22916: AND
22917: PUSH
22918: LD_VAR 0 2
22922: PPUSH
22923: CALL_OW 263
22927: PUSH
22928: LD_INT 1
22930: NONEQUAL
22931: PUSH
22932: LD_VAR 0 2
22936: PPUSH
22937: CALL_OW 311
22941: OR
22942: AND
22943: IFFALSE 22984
// begin ComCollect ( j , x , y ) ;
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_VAR 0 6
22954: PPUSH
22955: LD_VAR 0 7
22959: PPUSH
22960: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22964: LD_VAR 0 2
22968: PPUSH
22969: LD_VAR 0 8
22973: PPUSH
22974: CALL_OW 172
// exit ;
22978: POP
22979: POP
22980: POP
22981: POP
22982: GO 22992
// end ;
22984: GO 22874
22986: POP
22987: POP
// end ; end ;
22988: GO 22363
22990: POP
22991: POP
// end ; end_of_file
22992: PPOPN 9
22994: END
// export function SOS_UnitDestroyed ( un ) ; begin
22995: LD_INT 0
22997: PPUSH
// ComRadiation ( un ) ;
22998: LD_VAR 0 1
23002: PPUSH
23003: CALL 23984 0 1
// end ;
23007: LD_VAR 0 2
23011: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23012: LD_INT 0
23014: PPUSH
// ComRadiation ( un ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL 23984 0 1
// end ;
23024: LD_VAR 0 2
23028: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23029: LD_INT 0
23031: PPUSH
// end ;
23032: LD_VAR 0 4
23036: RET
// export function SOS_Command ( cmd ) ; begin
23037: LD_INT 0
23039: PPUSH
// end ;
23040: LD_VAR 0 2
23044: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23045: LD_INT 0
23047: PPUSH
// end ;
23048: LD_VAR 0 6
23052: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
23059: PPUSH
// if not vehicle or not factory then
23060: LD_VAR 0 1
23064: NOT
23065: PUSH
23066: LD_VAR 0 2
23070: NOT
23071: OR
23072: IFFALSE 23076
// exit ;
23074: GO 23575
// if not factoryWaypoints then
23076: LD_EXP 87
23080: NOT
23081: IFFALSE 23085
// exit ;
23083: GO 23575
// for i := 1 to Count ( factoryWaypoints ) do
23085: LD_ADDR_VAR 0 4
23089: PUSH
23090: DOUBLE
23091: LD_INT 1
23093: DEC
23094: ST_TO_ADDR
23095: LD_EXP 87
23099: PPUSH
23100: CALL 30402 0 1
23104: PUSH
23105: FOR_TO
23106: IFFALSE 23573
// if factoryWaypoints [ i ] [ 2 ] = factory then
23108: LD_EXP 87
23112: PUSH
23113: LD_VAR 0 4
23117: ARRAY
23118: PUSH
23119: LD_INT 2
23121: ARRAY
23122: PUSH
23123: LD_VAR 0 2
23127: EQUAL
23128: IFFALSE 23571
// begin if GetControl ( vehicle ) = control_manual then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 263
23139: PUSH
23140: LD_INT 1
23142: EQUAL
23143: IFFALSE 23454
// begin driver := IsDrivenBy ( vehicle ) ;
23145: LD_ADDR_VAR 0 6
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 311
23159: ST_TO_ADDR
// tag := GetTag ( driver ) ;
23160: LD_ADDR_VAR 0 5
23164: PUSH
23165: LD_VAR 0 6
23169: PPUSH
23170: CALL_OW 110
23174: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
23175: LD_VAR 0 5
23179: PUSH
23180: LD_INT 501
23182: EQUAL
23183: PUSH
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 110
23193: PUSH
23194: LD_INT 501
23196: EQUAL
23197: OR
23198: IFFALSE 23204
// exit ;
23200: POP
23201: POP
23202: GO 23575
// if not HasTask ( driver ) then
23204: LD_VAR 0 6
23208: PPUSH
23209: CALL_OW 314
23213: NOT
23214: IFFALSE 23452
// begin SetTag ( driver , tDriver ) ;
23216: LD_VAR 0 6
23220: PPUSH
23221: LD_INT 501
23223: PPUSH
23224: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
23228: LD_VAR 0 1
23232: PPUSH
23233: LD_INT 501
23235: PPUSH
23236: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23240: LD_ADDR_VAR 0 7
23244: PUSH
23245: LD_EXP 87
23249: PUSH
23250: LD_VAR 0 4
23254: ARRAY
23255: PUSH
23256: LD_INT 3
23258: ARRAY
23259: PPUSH
23260: LD_EXP 87
23264: PUSH
23265: LD_VAR 0 4
23269: ARRAY
23270: PUSH
23271: LD_INT 4
23273: ARRAY
23274: PPUSH
23275: CALL_OW 428
23279: ST_TO_ADDR
// if hex then
23280: LD_VAR 0 7
23284: IFFALSE 23302
// ComMoveUnit ( driver , hex ) else
23286: LD_VAR 0 6
23290: PPUSH
23291: LD_VAR 0 7
23295: PPUSH
23296: CALL_OW 112
23300: GO 23341
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23302: LD_VAR 0 6
23306: PPUSH
23307: LD_EXP 87
23311: PUSH
23312: LD_VAR 0 4
23316: ARRAY
23317: PUSH
23318: LD_INT 3
23320: ARRAY
23321: PPUSH
23322: LD_EXP 87
23326: PUSH
23327: LD_VAR 0 4
23331: ARRAY
23332: PUSH
23333: LD_INT 4
23335: ARRAY
23336: PPUSH
23337: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23341: LD_VAR 0 6
23345: PPUSH
23346: CALL_OW 181
// if Multiplayer then
23350: LD_OWVAR 4
23354: IFFALSE 23403
// begin repeat wait ( 10 ) ;
23356: LD_INT 10
23358: PPUSH
23359: CALL_OW 67
// until not IsInUnit ( driver ) ;
23363: LD_VAR 0 6
23367: PPUSH
23368: CALL_OW 310
23372: NOT
23373: IFFALSE 23356
// if not HasTask ( driver ) then
23375: LD_VAR 0 6
23379: PPUSH
23380: CALL_OW 314
23384: NOT
23385: IFFALSE 23401
// ComEnterUnit ( driver , factory ) ;
23387: LD_VAR 0 6
23391: PPUSH
23392: LD_VAR 0 2
23396: PPUSH
23397: CALL_OW 120
// end else
23401: GO 23417
// AddComEnterUnit ( driver , factory ) ;
23403: LD_VAR 0 6
23407: PPUSH
23408: LD_VAR 0 2
23412: PPUSH
23413: CALL_OW 180
// wait ( 0 0$1 ) ;
23417: LD_INT 35
23419: PPUSH
23420: CALL_OW 67
// SetTag ( driver , tag ) ;
23424: LD_VAR 0 6
23428: PPUSH
23429: LD_VAR 0 5
23433: PPUSH
23434: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
23438: LD_VAR 0 1
23442: PPUSH
23443: LD_INT 0
23445: PPUSH
23446: CALL_OW 109
// break ;
23450: GO 23573
// end ; end else
23452: GO 23571
// if GetControl ( vehicle ) = control_remote then
23454: LD_VAR 0 1
23458: PPUSH
23459: CALL_OW 263
23463: PUSH
23464: LD_INT 2
23466: EQUAL
23467: IFFALSE 23530
// begin wait ( 0 0$2 ) ;
23469: LD_INT 70
23471: PPUSH
23472: CALL_OW 67
// if Connect ( vehicle ) then
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL 36608 0 1
23485: IFFALSE 23526
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23487: LD_VAR 0 1
23491: PPUSH
23492: LD_EXP 87
23496: PUSH
23497: LD_VAR 0 4
23501: ARRAY
23502: PUSH
23503: LD_INT 3
23505: ARRAY
23506: PPUSH
23507: LD_EXP 87
23511: PUSH
23512: LD_VAR 0 4
23516: ARRAY
23517: PUSH
23518: LD_INT 4
23520: ARRAY
23521: PPUSH
23522: CALL_OW 171
// break ;
23526: GO 23573
// end else
23528: GO 23571
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23530: LD_VAR 0 1
23534: PPUSH
23535: LD_EXP 87
23539: PUSH
23540: LD_VAR 0 4
23544: ARRAY
23545: PUSH
23546: LD_INT 3
23548: ARRAY
23549: PPUSH
23550: LD_EXP 87
23554: PUSH
23555: LD_VAR 0 4
23559: ARRAY
23560: PUSH
23561: LD_INT 4
23563: ARRAY
23564: PPUSH
23565: CALL_OW 171
// break ;
23569: GO 23573
// end ; end ;
23571: GO 23105
23573: POP
23574: POP
// end ;
23575: LD_VAR 0 3
23579: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23580: LD_INT 0
23582: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 250
23590: EQUAL
23591: PUSH
23592: LD_VAR 0 2
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 81
23604: EQUAL
23605: AND
23606: IFFALSE 23627
// MinerPlaceMine ( unit , x , y ) ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 26719 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23627: LD_VAR 0 1
23631: PUSH
23632: LD_INT 251
23634: EQUAL
23635: PUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: CALL_OW 264
23645: PUSH
23646: LD_INT 81
23648: EQUAL
23649: AND
23650: IFFALSE 23671
// MinerDetonateMine ( unit , x , y ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 26994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 252
23678: EQUAL
23679: PUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 81
23692: EQUAL
23693: AND
23694: IFFALSE 23715
// MinerCreateMinefield ( unit , x , y ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 4
23705: PPUSH
23706: LD_VAR 0 5
23710: PPUSH
23711: CALL 27411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23715: LD_VAR 0 1
23719: PUSH
23720: LD_INT 253
23722: EQUAL
23723: PUSH
23724: LD_VAR 0 2
23728: PPUSH
23729: CALL_OW 257
23733: PUSH
23734: LD_INT 5
23736: EQUAL
23737: AND
23738: IFFALSE 23759
// ComBinocular ( unit , x , y ) ;
23740: LD_VAR 0 2
23744: PPUSH
23745: LD_VAR 0 4
23749: PPUSH
23750: LD_VAR 0 5
23754: PPUSH
23755: CALL 27780 0 3
// if selectedUnit then
23759: LD_VAR 0 3
23763: IFFALSE 23819
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23765: LD_VAR 0 1
23769: PUSH
23770: LD_INT 254
23772: EQUAL
23773: PUSH
23774: LD_VAR 0 2
23778: PPUSH
23779: CALL_OW 264
23783: PUSH
23784: LD_INT 99
23786: EQUAL
23787: AND
23788: PUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: CALL_OW 263
23798: PUSH
23799: LD_INT 3
23801: EQUAL
23802: AND
23803: IFFALSE 23819
// HackDestroyVehicle ( unit , selectedUnit ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: LD_VAR 0 3
23814: PPUSH
23815: CALL 26083 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23819: LD_VAR 0 1
23823: PUSH
23824: LD_INT 255
23826: EQUAL
23827: PUSH
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 264
23837: PUSH
23838: LD_INT 14
23840: PUSH
23841: LD_INT 53
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: IN
23848: AND
23849: PUSH
23850: LD_VAR 0 4
23854: PPUSH
23855: LD_VAR 0 5
23859: PPUSH
23860: CALL_OW 488
23864: AND
23865: IFFALSE 23889
// CutTreeXYR ( unit , x , y , 12 ) ;
23867: LD_VAR 0 2
23871: PPUSH
23872: LD_VAR 0 4
23876: PPUSH
23877: LD_VAR 0 5
23881: PPUSH
23882: LD_INT 12
23884: PPUSH
23885: CALL 24080 0 4
// if cmd = 256 then
23889: LD_VAR 0 1
23893: PUSH
23894: LD_INT 256
23896: EQUAL
23897: IFFALSE 23918
// SetFactoryWaypoint ( unit , x , y ) ;
23899: LD_VAR 0 2
23903: PPUSH
23904: LD_VAR 0 4
23908: PPUSH
23909: LD_VAR 0 5
23913: PPUSH
23914: CALL 21556 0 3
// if cmd = 257 then
23918: LD_VAR 0 1
23922: PUSH
23923: LD_INT 257
23925: EQUAL
23926: IFFALSE 23947
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23928: LD_VAR 0 2
23932: PPUSH
23933: LD_VAR 0 4
23937: PPUSH
23938: LD_VAR 0 5
23942: PPUSH
23943: CALL 22046 0 3
// if cmd = 258 then
23947: LD_VAR 0 1
23951: PUSH
23952: LD_INT 258
23954: EQUAL
23955: IFFALSE 23979
// BurnTreeXYR ( unit , x , y , 8 ) ;
23957: LD_VAR 0 2
23961: PPUSH
23962: LD_VAR 0 4
23966: PPUSH
23967: LD_VAR 0 5
23971: PPUSH
23972: LD_INT 8
23974: PPUSH
23975: CALL 24474 0 4
// end ;
23979: LD_VAR 0 6
23983: RET
// export function ComRadiation ( un ) ; var eff ; begin
23984: LD_INT 0
23986: PPUSH
23987: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 264
23997: PUSH
23998: LD_INT 91
24000: NONEQUAL
24001: IFFALSE 24005
// exit ;
24003: GO 24075
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24005: LD_INT 68
24007: PPUSH
24008: LD_VAR 0 1
24012: PPUSH
24013: CALL_OW 255
24017: PPUSH
24018: CALL_OW 321
24022: PUSH
24023: LD_INT 2
24025: EQUAL
24026: IFFALSE 24038
// eff := 70 else
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: LD_INT 70
24035: ST_TO_ADDR
24036: GO 24046
// eff := 30 ;
24038: LD_ADDR_VAR 0 3
24042: PUSH
24043: LD_INT 30
24045: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 250
24055: PPUSH
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL_OW 251
24065: PPUSH
24066: LD_VAR 0 3
24070: PPUSH
24071: CALL_OW 495
// end ;
24075: LD_VAR 0 2
24079: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24080: LD_INT 0
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
24088: PPUSH
24089: PPUSH
24090: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 302
24100: NOT
24101: PUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: LD_VAR 0 3
24111: PPUSH
24112: CALL_OW 488
24116: NOT
24117: OR
24118: PUSH
24119: LD_VAR 0 4
24123: NOT
24124: OR
24125: IFFALSE 24129
// exit ;
24127: GO 24469
// list := [ ] ;
24129: LD_ADDR_VAR 0 13
24133: PUSH
24134: EMPTY
24135: ST_TO_ADDR
// if x - r < 0 then
24136: LD_VAR 0 2
24140: PUSH
24141: LD_VAR 0 4
24145: MINUS
24146: PUSH
24147: LD_INT 0
24149: LESS
24150: IFFALSE 24162
// min_x := 0 else
24152: LD_ADDR_VAR 0 7
24156: PUSH
24157: LD_INT 0
24159: ST_TO_ADDR
24160: GO 24178
// min_x := x - r ;
24162: LD_ADDR_VAR 0 7
24166: PUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_VAR 0 4
24176: MINUS
24177: ST_TO_ADDR
// if y - r < 0 then
24178: LD_VAR 0 3
24182: PUSH
24183: LD_VAR 0 4
24187: MINUS
24188: PUSH
24189: LD_INT 0
24191: LESS
24192: IFFALSE 24204
// min_y := 0 else
24194: LD_ADDR_VAR 0 8
24198: PUSH
24199: LD_INT 0
24201: ST_TO_ADDR
24202: GO 24220
// min_y := y - r ;
24204: LD_ADDR_VAR 0 8
24208: PUSH
24209: LD_VAR 0 3
24213: PUSH
24214: LD_VAR 0 4
24218: MINUS
24219: ST_TO_ADDR
// max_x := x + r ;
24220: LD_ADDR_VAR 0 9
24224: PUSH
24225: LD_VAR 0 2
24229: PUSH
24230: LD_VAR 0 4
24234: PLUS
24235: ST_TO_ADDR
// max_y := y + r ;
24236: LD_ADDR_VAR 0 10
24240: PUSH
24241: LD_VAR 0 3
24245: PUSH
24246: LD_VAR 0 4
24250: PLUS
24251: ST_TO_ADDR
// for _x = min_x to max_x do
24252: LD_ADDR_VAR 0 11
24256: PUSH
24257: DOUBLE
24258: LD_VAR 0 7
24262: DEC
24263: ST_TO_ADDR
24264: LD_VAR 0 9
24268: PUSH
24269: FOR_TO
24270: IFFALSE 24387
// for _y = min_y to max_y do
24272: LD_ADDR_VAR 0 12
24276: PUSH
24277: DOUBLE
24278: LD_VAR 0 8
24282: DEC
24283: ST_TO_ADDR
24284: LD_VAR 0 10
24288: PUSH
24289: FOR_TO
24290: IFFALSE 24383
// begin if not ValidHex ( _x , _y ) then
24292: LD_VAR 0 11
24296: PPUSH
24297: LD_VAR 0 12
24301: PPUSH
24302: CALL_OW 488
24306: NOT
24307: IFFALSE 24311
// continue ;
24309: GO 24289
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24311: LD_VAR 0 11
24315: PPUSH
24316: LD_VAR 0 12
24320: PPUSH
24321: CALL_OW 351
24325: PUSH
24326: LD_VAR 0 11
24330: PPUSH
24331: LD_VAR 0 12
24335: PPUSH
24336: CALL_OW 554
24340: AND
24341: IFFALSE 24381
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24343: LD_ADDR_VAR 0 13
24347: PUSH
24348: LD_VAR 0 13
24352: PPUSH
24353: LD_VAR 0 13
24357: PUSH
24358: LD_INT 1
24360: PLUS
24361: PPUSH
24362: LD_VAR 0 11
24366: PUSH
24367: LD_VAR 0 12
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 2
24380: ST_TO_ADDR
// end ;
24381: GO 24289
24383: POP
24384: POP
24385: GO 24269
24387: POP
24388: POP
// if not list then
24389: LD_VAR 0 13
24393: NOT
24394: IFFALSE 24398
// exit ;
24396: GO 24469
// for i in list do
24398: LD_ADDR_VAR 0 6
24402: PUSH
24403: LD_VAR 0 13
24407: PUSH
24408: FOR_IN
24409: IFFALSE 24467
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_STRING M
24418: PUSH
24419: LD_VAR 0 6
24423: PUSH
24424: LD_INT 1
24426: ARRAY
24427: PUSH
24428: LD_VAR 0 6
24432: PUSH
24433: LD_INT 2
24435: ARRAY
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: PPUSH
24461: CALL_OW 447
24465: GO 24408
24467: POP
24468: POP
// end ;
24469: LD_VAR 0 5
24473: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24486: LD_VAR 0 1
24490: PPUSH
24491: CALL_OW 302
24495: NOT
24496: PUSH
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: CALL_OW 488
24511: NOT
24512: OR
24513: PUSH
24514: LD_VAR 0 4
24518: NOT
24519: OR
24520: IFFALSE 24524
// exit ;
24522: GO 25037
// list := [ ] ;
24524: LD_ADDR_VAR 0 13
24528: PUSH
24529: EMPTY
24530: ST_TO_ADDR
// if x - r < 0 then
24531: LD_VAR 0 2
24535: PUSH
24536: LD_VAR 0 4
24540: MINUS
24541: PUSH
24542: LD_INT 0
24544: LESS
24545: IFFALSE 24557
// min_x := 0 else
24547: LD_ADDR_VAR 0 7
24551: PUSH
24552: LD_INT 0
24554: ST_TO_ADDR
24555: GO 24573
// min_x := x - r ;
24557: LD_ADDR_VAR 0 7
24561: PUSH
24562: LD_VAR 0 2
24566: PUSH
24567: LD_VAR 0 4
24571: MINUS
24572: ST_TO_ADDR
// if y - r < 0 then
24573: LD_VAR 0 3
24577: PUSH
24578: LD_VAR 0 4
24582: MINUS
24583: PUSH
24584: LD_INT 0
24586: LESS
24587: IFFALSE 24599
// min_y := 0 else
24589: LD_ADDR_VAR 0 8
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
24597: GO 24615
// min_y := y - r ;
24599: LD_ADDR_VAR 0 8
24603: PUSH
24604: LD_VAR 0 3
24608: PUSH
24609: LD_VAR 0 4
24613: MINUS
24614: ST_TO_ADDR
// max_x := x + r ;
24615: LD_ADDR_VAR 0 9
24619: PUSH
24620: LD_VAR 0 2
24624: PUSH
24625: LD_VAR 0 4
24629: PLUS
24630: ST_TO_ADDR
// max_y := y + r ;
24631: LD_ADDR_VAR 0 10
24635: PUSH
24636: LD_VAR 0 3
24640: PUSH
24641: LD_VAR 0 4
24645: PLUS
24646: ST_TO_ADDR
// for _x = min_x to max_x do
24647: LD_ADDR_VAR 0 11
24651: PUSH
24652: DOUBLE
24653: LD_VAR 0 7
24657: DEC
24658: ST_TO_ADDR
24659: LD_VAR 0 9
24663: PUSH
24664: FOR_TO
24665: IFFALSE 24782
// for _y = min_y to max_y do
24667: LD_ADDR_VAR 0 12
24671: PUSH
24672: DOUBLE
24673: LD_VAR 0 8
24677: DEC
24678: ST_TO_ADDR
24679: LD_VAR 0 10
24683: PUSH
24684: FOR_TO
24685: IFFALSE 24778
// begin if not ValidHex ( _x , _y ) then
24687: LD_VAR 0 11
24691: PPUSH
24692: LD_VAR 0 12
24696: PPUSH
24697: CALL_OW 488
24701: NOT
24702: IFFALSE 24706
// continue ;
24704: GO 24684
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24706: LD_VAR 0 11
24710: PPUSH
24711: LD_VAR 0 12
24715: PPUSH
24716: CALL_OW 351
24720: PUSH
24721: LD_VAR 0 11
24725: PPUSH
24726: LD_VAR 0 12
24730: PPUSH
24731: CALL_OW 554
24735: AND
24736: IFFALSE 24776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24738: LD_ADDR_VAR 0 13
24742: PUSH
24743: LD_VAR 0 13
24747: PPUSH
24748: LD_VAR 0 13
24752: PUSH
24753: LD_INT 1
24755: PLUS
24756: PPUSH
24757: LD_VAR 0 11
24761: PUSH
24762: LD_VAR 0 12
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PPUSH
24771: CALL_OW 2
24775: ST_TO_ADDR
// end ;
24776: GO 24684
24778: POP
24779: POP
24780: GO 24664
24782: POP
24783: POP
// if not list then
24784: LD_VAR 0 13
24788: NOT
24789: IFFALSE 24793
// exit ;
24791: GO 25037
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24793: LD_ADDR_VAR 0 13
24797: PUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: LD_VAR 0 13
24807: PPUSH
24808: LD_INT 1
24810: PPUSH
24811: LD_INT 1
24813: PPUSH
24814: CALL 33750 0 4
24818: ST_TO_ADDR
// ComStop ( flame ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 141
// for i in list do
24828: LD_ADDR_VAR 0 6
24832: PUSH
24833: LD_VAR 0 13
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24870
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24841: LD_VAR 0 1
24845: PPUSH
24846: LD_VAR 0 6
24850: PUSH
24851: LD_INT 1
24853: ARRAY
24854: PPUSH
24855: LD_VAR 0 6
24859: PUSH
24860: LD_INT 2
24862: ARRAY
24863: PPUSH
24864: CALL_OW 176
24868: GO 24838
24870: POP
24871: POP
// repeat wait ( 0 0$1 ) ;
24872: LD_INT 35
24874: PPUSH
24875: CALL_OW 67
// task := GetTaskList ( flame ) ;
24879: LD_ADDR_VAR 0 14
24883: PUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 437
24893: ST_TO_ADDR
// if not task then
24894: LD_VAR 0 14
24898: NOT
24899: IFFALSE 24903
// exit ;
24901: GO 25037
// if task [ 1 ] [ 1 ] <> | then
24903: LD_VAR 0 14
24907: PUSH
24908: LD_INT 1
24910: ARRAY
24911: PUSH
24912: LD_INT 1
24914: ARRAY
24915: PUSH
24916: LD_STRING |
24918: NONEQUAL
24919: IFFALSE 24923
// exit ;
24921: GO 25037
// _x := task [ 1 ] [ 2 ] ;
24923: LD_ADDR_VAR 0 11
24927: PUSH
24928: LD_VAR 0 14
24932: PUSH
24933: LD_INT 1
24935: ARRAY
24936: PUSH
24937: LD_INT 2
24939: ARRAY
24940: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24941: LD_ADDR_VAR 0 12
24945: PUSH
24946: LD_VAR 0 14
24950: PUSH
24951: LD_INT 1
24953: ARRAY
24954: PUSH
24955: LD_INT 3
24957: ARRAY
24958: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24959: LD_VAR 0 11
24963: PPUSH
24964: LD_VAR 0 12
24968: PPUSH
24969: CALL_OW 351
24973: NOT
24974: PUSH
24975: LD_VAR 0 11
24979: PPUSH
24980: LD_VAR 0 12
24984: PPUSH
24985: CALL_OW 554
24989: NOT
24990: OR
24991: IFFALSE 25025
// begin task := Delete ( task , 1 ) ;
24993: LD_ADDR_VAR 0 14
24997: PUSH
24998: LD_VAR 0 14
25002: PPUSH
25003: LD_INT 1
25005: PPUSH
25006: CALL_OW 3
25010: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25011: LD_VAR 0 1
25015: PPUSH
25016: LD_VAR 0 14
25020: PPUSH
25021: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 314
25034: NOT
25035: IFFALSE 24872
// end ;
25037: LD_VAR 0 5
25041: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25042: LD_EXP 90
25046: NOT
25047: IFFALSE 25097
25049: GO 25051
25051: DISABLE
// begin initHack := true ;
25052: LD_ADDR_EXP 90
25056: PUSH
25057: LD_INT 1
25059: ST_TO_ADDR
// hackTanks := [ ] ;
25060: LD_ADDR_EXP 91
25064: PUSH
25065: EMPTY
25066: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25067: LD_ADDR_EXP 92
25071: PUSH
25072: EMPTY
25073: ST_TO_ADDR
// hackLimit := 3 ;
25074: LD_ADDR_EXP 93
25078: PUSH
25079: LD_INT 3
25081: ST_TO_ADDR
// hackDist := 12 ;
25082: LD_ADDR_EXP 94
25086: PUSH
25087: LD_INT 12
25089: ST_TO_ADDR
// hackCounter := [ ] ;
25090: LD_ADDR_EXP 95
25094: PUSH
25095: EMPTY
25096: ST_TO_ADDR
// end ;
25097: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25098: LD_EXP 90
25102: PUSH
25103: LD_INT 34
25105: PUSH
25106: LD_INT 99
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PPUSH
25113: CALL_OW 69
25117: AND
25118: IFFALSE 25371
25120: GO 25122
25122: DISABLE
25123: LD_INT 0
25125: PPUSH
25126: PPUSH
// begin enable ;
25127: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: LD_INT 34
25135: PUSH
25136: LD_INT 99
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PPUSH
25143: CALL_OW 69
25147: PUSH
25148: FOR_IN
25149: IFFALSE 25369
// begin if not i in hackTanks then
25151: LD_VAR 0 1
25155: PUSH
25156: LD_EXP 91
25160: IN
25161: NOT
25162: IFFALSE 25245
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25164: LD_ADDR_EXP 91
25168: PUSH
25169: LD_EXP 91
25173: PPUSH
25174: LD_EXP 91
25178: PUSH
25179: LD_INT 1
25181: PLUS
25182: PPUSH
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL_OW 1
25192: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25193: LD_ADDR_EXP 92
25197: PUSH
25198: LD_EXP 92
25202: PPUSH
25203: LD_EXP 92
25207: PUSH
25208: LD_INT 1
25210: PLUS
25211: PPUSH
25212: EMPTY
25213: PPUSH
25214: CALL_OW 1
25218: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25219: LD_ADDR_EXP 95
25223: PUSH
25224: LD_EXP 95
25228: PPUSH
25229: LD_EXP 95
25233: PUSH
25234: LD_INT 1
25236: PLUS
25237: PPUSH
25238: EMPTY
25239: PPUSH
25240: CALL_OW 1
25244: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 302
25254: NOT
25255: IFFALSE 25268
// begin HackUnlinkAll ( i ) ;
25257: LD_VAR 0 1
25261: PPUSH
25262: CALL 25374 0 1
// continue ;
25266: GO 25148
// end ; HackCheckCapturedStatus ( i ) ;
25268: LD_VAR 0 1
25272: PPUSH
25273: CALL 25817 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25277: LD_ADDR_VAR 0 2
25281: PUSH
25282: LD_INT 81
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 255
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 33
25301: PUSH
25302: LD_INT 3
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 91
25311: PUSH
25312: LD_VAR 0 1
25316: PUSH
25317: LD_EXP 94
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 50
25329: PUSH
25330: EMPTY
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: PPUSH
25339: CALL_OW 69
25343: ST_TO_ADDR
// if not tmp then
25344: LD_VAR 0 2
25348: NOT
25349: IFFALSE 25353
// continue ;
25351: GO 25148
// HackLink ( i , tmp ) ;
25353: LD_VAR 0 1
25357: PPUSH
25358: LD_VAR 0 2
25362: PPUSH
25363: CALL 25510 0 2
// end ;
25367: GO 25148
25369: POP
25370: POP
// end ;
25371: PPOPN 2
25373: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25374: LD_INT 0
25376: PPUSH
25377: PPUSH
25378: PPUSH
// if not hack in hackTanks then
25379: LD_VAR 0 1
25383: PUSH
25384: LD_EXP 91
25388: IN
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 25505
// index := GetElementIndex ( hackTanks , hack ) ;
25394: LD_ADDR_VAR 0 4
25398: PUSH
25399: LD_EXP 91
25403: PPUSH
25404: LD_VAR 0 1
25408: PPUSH
25409: CALL 33047 0 2
25413: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25414: LD_EXP 92
25418: PUSH
25419: LD_VAR 0 4
25423: ARRAY
25424: IFFALSE 25505
// begin for i in hackTanksCaptured [ index ] do
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_EXP 92
25435: PUSH
25436: LD_VAR 0 4
25440: ARRAY
25441: PUSH
25442: FOR_IN
25443: IFFALSE 25469
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25445: LD_VAR 0 3
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: PPUSH
25454: LD_VAR 0 3
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: PPUSH
25463: CALL_OW 235
25467: GO 25442
25469: POP
25470: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25471: LD_ADDR_EXP 92
25475: PUSH
25476: LD_EXP 92
25480: PPUSH
25481: LD_VAR 0 4
25485: PPUSH
25486: EMPTY
25487: PPUSH
25488: CALL_OW 1
25492: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25493: LD_VAR 0 1
25497: PPUSH
25498: LD_INT 0
25500: PPUSH
25501: CALL_OW 505
// end ; end ;
25505: LD_VAR 0 2
25509: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25510: LD_INT 0
25512: PPUSH
25513: PPUSH
25514: PPUSH
// if not hack in hackTanks or not vehicles then
25515: LD_VAR 0 1
25519: PUSH
25520: LD_EXP 91
25524: IN
25525: NOT
25526: PUSH
25527: LD_VAR 0 2
25531: NOT
25532: OR
25533: IFFALSE 25537
// exit ;
25535: GO 25812
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25537: LD_ADDR_VAR 0 2
25541: PUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: LD_VAR 0 2
25551: PPUSH
25552: LD_INT 1
25554: PPUSH
25555: LD_INT 1
25557: PPUSH
25558: CALL 33697 0 4
25562: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: LD_EXP 91
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL 33047 0 2
25582: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25583: LD_EXP 92
25587: PUSH
25588: LD_VAR 0 5
25592: ARRAY
25593: PUSH
25594: LD_EXP 93
25598: LESS
25599: IFFALSE 25788
// begin for i := 1 to vehicles do
25601: LD_ADDR_VAR 0 4
25605: PUSH
25606: DOUBLE
25607: LD_INT 1
25609: DEC
25610: ST_TO_ADDR
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_TO
25617: IFFALSE 25786
// begin if hackTanksCaptured [ index ] = hackLimit then
25619: LD_EXP 92
25623: PUSH
25624: LD_VAR 0 5
25628: ARRAY
25629: PUSH
25630: LD_EXP 93
25634: EQUAL
25635: IFFALSE 25639
// break ;
25637: GO 25786
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25639: LD_ADDR_EXP 95
25643: PUSH
25644: LD_EXP 95
25648: PPUSH
25649: LD_VAR 0 5
25653: PPUSH
25654: LD_EXP 95
25658: PUSH
25659: LD_VAR 0 5
25663: ARRAY
25664: PUSH
25665: LD_INT 1
25667: PLUS
25668: PPUSH
25669: CALL_OW 1
25673: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25674: LD_ADDR_EXP 92
25678: PUSH
25679: LD_EXP 92
25683: PPUSH
25684: LD_VAR 0 5
25688: PUSH
25689: LD_EXP 92
25693: PUSH
25694: LD_VAR 0 5
25698: ARRAY
25699: PUSH
25700: LD_INT 1
25702: PLUS
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PPUSH
25708: LD_VAR 0 2
25712: PUSH
25713: LD_VAR 0 4
25717: ARRAY
25718: PUSH
25719: LD_VAR 0 2
25723: PUSH
25724: LD_VAR 0 4
25728: ARRAY
25729: PPUSH
25730: CALL_OW 255
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PPUSH
25739: CALL 33262 0 3
25743: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25744: LD_VAR 0 2
25748: PUSH
25749: LD_VAR 0 4
25753: ARRAY
25754: PPUSH
25755: LD_VAR 0 1
25759: PPUSH
25760: CALL_OW 255
25764: PPUSH
25765: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25769: LD_VAR 0 2
25773: PUSH
25774: LD_VAR 0 4
25778: ARRAY
25779: PPUSH
25780: CALL_OW 141
// end ;
25784: GO 25616
25786: POP
25787: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25788: LD_VAR 0 1
25792: PPUSH
25793: LD_EXP 92
25797: PUSH
25798: LD_VAR 0 5
25802: ARRAY
25803: PUSH
25804: LD_INT 0
25806: PLUS
25807: PPUSH
25808: CALL_OW 505
// end ;
25812: LD_VAR 0 3
25816: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25817: LD_INT 0
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
// if not hack in hackTanks then
25823: LD_VAR 0 1
25827: PUSH
25828: LD_EXP 91
25832: IN
25833: NOT
25834: IFFALSE 25838
// exit ;
25836: GO 26078
// index := GetElementIndex ( hackTanks , hack ) ;
25838: LD_ADDR_VAR 0 4
25842: PUSH
25843: LD_EXP 91
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL 33047 0 2
25857: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: DOUBLE
25864: LD_EXP 92
25868: PUSH
25869: LD_VAR 0 4
25873: ARRAY
25874: INC
25875: ST_TO_ADDR
25876: LD_INT 1
25878: PUSH
25879: FOR_DOWNTO
25880: IFFALSE 26052
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25882: LD_ADDR_VAR 0 5
25886: PUSH
25887: LD_EXP 92
25891: PUSH
25892: LD_VAR 0 4
25896: ARRAY
25897: PUSH
25898: LD_VAR 0 3
25902: ARRAY
25903: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25904: LD_VAR 0 5
25908: PUSH
25909: LD_INT 1
25911: ARRAY
25912: PPUSH
25913: CALL_OW 302
25917: NOT
25918: PUSH
25919: LD_VAR 0 5
25923: PUSH
25924: LD_INT 1
25926: ARRAY
25927: PPUSH
25928: CALL_OW 255
25932: PUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 255
25942: NONEQUAL
25943: OR
25944: IFFALSE 26050
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25946: LD_VAR 0 5
25950: PUSH
25951: LD_INT 1
25953: ARRAY
25954: PPUSH
25955: CALL_OW 305
25959: PUSH
25960: LD_VAR 0 5
25964: PUSH
25965: LD_INT 1
25967: ARRAY
25968: PPUSH
25969: CALL_OW 255
25973: PUSH
25974: LD_VAR 0 1
25978: PPUSH
25979: CALL_OW 255
25983: EQUAL
25984: AND
25985: IFFALSE 26009
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25987: LD_VAR 0 5
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: PPUSH
25996: LD_VAR 0 5
26000: PUSH
26001: LD_INT 2
26003: ARRAY
26004: PPUSH
26005: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26009: LD_ADDR_EXP 92
26013: PUSH
26014: LD_EXP 92
26018: PPUSH
26019: LD_VAR 0 4
26023: PPUSH
26024: LD_EXP 92
26028: PUSH
26029: LD_VAR 0 4
26033: ARRAY
26034: PPUSH
26035: LD_VAR 0 3
26039: PPUSH
26040: CALL_OW 3
26044: PPUSH
26045: CALL_OW 1
26049: ST_TO_ADDR
// end ; end ;
26050: GO 25879
26052: POP
26053: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26054: LD_VAR 0 1
26058: PPUSH
26059: LD_EXP 92
26063: PUSH
26064: LD_VAR 0 4
26068: ARRAY
26069: PUSH
26070: LD_INT 0
26072: PLUS
26073: PPUSH
26074: CALL_OW 505
// end ;
26078: LD_VAR 0 2
26082: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26083: LD_INT 0
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
// if not hack in hackTanks then
26089: LD_VAR 0 1
26093: PUSH
26094: LD_EXP 91
26098: IN
26099: NOT
26100: IFFALSE 26104
// exit ;
26102: GO 26189
// index := GetElementIndex ( hackTanks , hack ) ;
26104: LD_ADDR_VAR 0 5
26108: PUSH
26109: LD_EXP 91
26113: PPUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: CALL 33047 0 2
26123: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26124: LD_ADDR_VAR 0 4
26128: PUSH
26129: DOUBLE
26130: LD_INT 1
26132: DEC
26133: ST_TO_ADDR
26134: LD_EXP 92
26138: PUSH
26139: LD_VAR 0 5
26143: ARRAY
26144: PUSH
26145: FOR_TO
26146: IFFALSE 26187
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26148: LD_EXP 92
26152: PUSH
26153: LD_VAR 0 5
26157: ARRAY
26158: PUSH
26159: LD_VAR 0 4
26163: ARRAY
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PUSH
26169: LD_VAR 0 2
26173: EQUAL
26174: IFFALSE 26185
// KillUnit ( vehicle ) ;
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 66
26185: GO 26145
26187: POP
26188: POP
// end ;
26189: LD_VAR 0 3
26193: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26194: LD_EXP 96
26198: NOT
26199: IFFALSE 26234
26201: GO 26203
26203: DISABLE
// begin initMiner := true ;
26204: LD_ADDR_EXP 96
26208: PUSH
26209: LD_INT 1
26211: ST_TO_ADDR
// minersList := [ ] ;
26212: LD_ADDR_EXP 97
26216: PUSH
26217: EMPTY
26218: ST_TO_ADDR
// minerMinesList := [ ] ;
26219: LD_ADDR_EXP 98
26223: PUSH
26224: EMPTY
26225: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26226: LD_ADDR_EXP 99
26230: PUSH
26231: LD_INT 5
26233: ST_TO_ADDR
// end ;
26234: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26235: LD_EXP 96
26239: PUSH
26240: LD_INT 34
26242: PUSH
26243: LD_INT 81
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: AND
26255: IFFALSE 26716
26257: GO 26259
26259: DISABLE
26260: LD_INT 0
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
// begin enable ;
26266: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_INT 34
26274: PUSH
26275: LD_INT 81
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: PUSH
26287: FOR_IN
26288: IFFALSE 26360
// begin if not i in minersList then
26290: LD_VAR 0 1
26294: PUSH
26295: LD_EXP 97
26299: IN
26300: NOT
26301: IFFALSE 26358
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26303: LD_ADDR_EXP 97
26307: PUSH
26308: LD_EXP 97
26312: PPUSH
26313: LD_EXP 97
26317: PUSH
26318: LD_INT 1
26320: PLUS
26321: PPUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 1
26331: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26332: LD_ADDR_EXP 98
26336: PUSH
26337: LD_EXP 98
26341: PPUSH
26342: LD_EXP 98
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: PPUSH
26351: EMPTY
26352: PPUSH
26353: CALL_OW 1
26357: ST_TO_ADDR
// end end ;
26358: GO 26287
26360: POP
26361: POP
// for i := minerMinesList downto 1 do
26362: LD_ADDR_VAR 0 1
26366: PUSH
26367: DOUBLE
26368: LD_EXP 98
26372: INC
26373: ST_TO_ADDR
26374: LD_INT 1
26376: PUSH
26377: FOR_DOWNTO
26378: IFFALSE 26714
// begin if IsLive ( minersList [ i ] ) then
26380: LD_EXP 97
26384: PUSH
26385: LD_VAR 0 1
26389: ARRAY
26390: PPUSH
26391: CALL_OW 300
26395: IFFALSE 26423
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26397: LD_EXP 97
26401: PUSH
26402: LD_VAR 0 1
26406: ARRAY
26407: PPUSH
26408: LD_EXP 98
26412: PUSH
26413: LD_VAR 0 1
26417: ARRAY
26418: PPUSH
26419: CALL_OW 505
// if not minerMinesList [ i ] then
26423: LD_EXP 98
26427: PUSH
26428: LD_VAR 0 1
26432: ARRAY
26433: NOT
26434: IFFALSE 26438
// continue ;
26436: GO 26377
// for j := minerMinesList [ i ] downto 1 do
26438: LD_ADDR_VAR 0 2
26442: PUSH
26443: DOUBLE
26444: LD_EXP 98
26448: PUSH
26449: LD_VAR 0 1
26453: ARRAY
26454: INC
26455: ST_TO_ADDR
26456: LD_INT 1
26458: PUSH
26459: FOR_DOWNTO
26460: IFFALSE 26710
// begin side := GetSide ( minersList [ i ] ) ;
26462: LD_ADDR_VAR 0 3
26466: PUSH
26467: LD_EXP 97
26471: PUSH
26472: LD_VAR 0 1
26476: ARRAY
26477: PPUSH
26478: CALL_OW 255
26482: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: LD_EXP 98
26492: PUSH
26493: LD_VAR 0 1
26497: ARRAY
26498: PUSH
26499: LD_VAR 0 2
26503: ARRAY
26504: PUSH
26505: LD_INT 1
26507: ARRAY
26508: PPUSH
26509: LD_EXP 98
26513: PUSH
26514: LD_VAR 0 1
26518: ARRAY
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PUSH
26526: LD_INT 2
26528: ARRAY
26529: PPUSH
26530: CALL_OW 428
26534: ST_TO_ADDR
// if not tmp then
26535: LD_VAR 0 4
26539: NOT
26540: IFFALSE 26544
// continue ;
26542: GO 26459
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26544: LD_VAR 0 4
26548: PUSH
26549: LD_INT 81
26551: PUSH
26552: LD_VAR 0 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PPUSH
26561: CALL_OW 69
26565: IN
26566: PUSH
26567: LD_EXP 98
26571: PUSH
26572: LD_VAR 0 1
26576: ARRAY
26577: PUSH
26578: LD_VAR 0 2
26582: ARRAY
26583: PUSH
26584: LD_INT 1
26586: ARRAY
26587: PPUSH
26588: LD_EXP 98
26592: PUSH
26593: LD_VAR 0 1
26597: ARRAY
26598: PUSH
26599: LD_VAR 0 2
26603: ARRAY
26604: PUSH
26605: LD_INT 2
26607: ARRAY
26608: PPUSH
26609: CALL_OW 458
26613: AND
26614: IFFALSE 26708
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26616: LD_EXP 98
26620: PUSH
26621: LD_VAR 0 1
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 2
26631: ARRAY
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: LD_EXP 98
26641: PUSH
26642: LD_VAR 0 1
26646: ARRAY
26647: PUSH
26648: LD_VAR 0 2
26652: ARRAY
26653: PUSH
26654: LD_INT 2
26656: ARRAY
26657: PPUSH
26658: LD_VAR 0 3
26662: PPUSH
26663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26667: LD_ADDR_EXP 98
26671: PUSH
26672: LD_EXP 98
26676: PPUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: LD_EXP 98
26686: PUSH
26687: LD_VAR 0 1
26691: ARRAY
26692: PPUSH
26693: LD_VAR 0 2
26697: PPUSH
26698: CALL_OW 3
26702: PPUSH
26703: CALL_OW 1
26707: ST_TO_ADDR
// end ; end ;
26708: GO 26459
26710: POP
26711: POP
// end ;
26712: GO 26377
26714: POP
26715: POP
// end ;
26716: PPOPN 4
26718: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26719: LD_INT 0
26721: PPUSH
26722: PPUSH
// result := false ;
26723: LD_ADDR_VAR 0 4
26727: PUSH
26728: LD_INT 0
26730: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26731: LD_VAR 0 1
26735: PPUSH
26736: CALL_OW 264
26740: PUSH
26741: LD_INT 81
26743: EQUAL
26744: NOT
26745: IFFALSE 26749
// exit ;
26747: GO 26989
// index := GetElementIndex ( minersList , unit ) ;
26749: LD_ADDR_VAR 0 5
26753: PUSH
26754: LD_EXP 97
26758: PPUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL 33047 0 2
26768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26769: LD_EXP 98
26773: PUSH
26774: LD_VAR 0 5
26778: ARRAY
26779: PUSH
26780: LD_EXP 99
26784: GREATEREQUAL
26785: IFFALSE 26789
// exit ;
26787: GO 26989
// ComMoveXY ( unit , x , y ) ;
26789: LD_VAR 0 1
26793: PPUSH
26794: LD_VAR 0 2
26798: PPUSH
26799: LD_VAR 0 3
26803: PPUSH
26804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26808: LD_INT 35
26810: PPUSH
26811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL 64808 0 3
26834: NOT
26835: PUSH
26836: LD_VAR 0 1
26840: PPUSH
26841: CALL_OW 314
26845: AND
26846: IFFALSE 26850
// exit ;
26848: GO 26989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26850: LD_VAR 0 2
26854: PPUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 428
26864: PUSH
26865: LD_VAR 0 1
26869: EQUAL
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 314
26880: NOT
26881: AND
26882: IFFALSE 26808
// PlaySoundXY ( x , y , PlantMine ) ;
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_VAR 0 3
26893: PPUSH
26894: LD_STRING PlantMine
26896: PPUSH
26897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26901: LD_VAR 0 2
26905: PPUSH
26906: LD_VAR 0 3
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 255
26920: PPUSH
26921: LD_INT 0
26923: PPUSH
26924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26928: LD_ADDR_EXP 98
26932: PUSH
26933: LD_EXP 98
26937: PPUSH
26938: LD_VAR 0 5
26942: PUSH
26943: LD_EXP 98
26947: PUSH
26948: LD_VAR 0 5
26952: ARRAY
26953: PUSH
26954: LD_INT 1
26956: PLUS
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PPUSH
26962: LD_VAR 0 2
26966: PUSH
26967: LD_VAR 0 3
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PPUSH
26976: CALL 33262 0 3
26980: ST_TO_ADDR
// result := true ;
26981: LD_ADDR_VAR 0 4
26985: PUSH
26986: LD_INT 1
26988: ST_TO_ADDR
// end ;
26989: LD_VAR 0 4
26993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
26998: PPUSH
// if not unit in minersList then
26999: LD_VAR 0 1
27003: PUSH
27004: LD_EXP 97
27008: IN
27009: NOT
27010: IFFALSE 27014
// exit ;
27012: GO 27406
// index := GetElementIndex ( minersList , unit ) ;
27014: LD_ADDR_VAR 0 6
27018: PUSH
27019: LD_EXP 97
27023: PPUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL 33047 0 2
27033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27034: LD_ADDR_VAR 0 5
27038: PUSH
27039: DOUBLE
27040: LD_EXP 98
27044: PUSH
27045: LD_VAR 0 6
27049: ARRAY
27050: INC
27051: ST_TO_ADDR
27052: LD_INT 1
27054: PUSH
27055: FOR_DOWNTO
27056: IFFALSE 27217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27058: LD_EXP 98
27062: PUSH
27063: LD_VAR 0 6
27067: ARRAY
27068: PUSH
27069: LD_VAR 0 5
27073: ARRAY
27074: PUSH
27075: LD_INT 1
27077: ARRAY
27078: PUSH
27079: LD_VAR 0 2
27083: EQUAL
27084: PUSH
27085: LD_EXP 98
27089: PUSH
27090: LD_VAR 0 6
27094: ARRAY
27095: PUSH
27096: LD_VAR 0 5
27100: ARRAY
27101: PUSH
27102: LD_INT 2
27104: ARRAY
27105: PUSH
27106: LD_VAR 0 3
27110: EQUAL
27111: AND
27112: IFFALSE 27215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27114: LD_EXP 98
27118: PUSH
27119: LD_VAR 0 6
27123: ARRAY
27124: PUSH
27125: LD_VAR 0 5
27129: ARRAY
27130: PUSH
27131: LD_INT 1
27133: ARRAY
27134: PPUSH
27135: LD_EXP 98
27139: PUSH
27140: LD_VAR 0 6
27144: ARRAY
27145: PUSH
27146: LD_VAR 0 5
27150: ARRAY
27151: PUSH
27152: LD_INT 2
27154: ARRAY
27155: PPUSH
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL_OW 255
27165: PPUSH
27166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27170: LD_ADDR_EXP 98
27174: PUSH
27175: LD_EXP 98
27179: PPUSH
27180: LD_VAR 0 6
27184: PPUSH
27185: LD_EXP 98
27189: PUSH
27190: LD_VAR 0 6
27194: ARRAY
27195: PPUSH
27196: LD_VAR 0 5
27200: PPUSH
27201: CALL_OW 3
27205: PPUSH
27206: CALL_OW 1
27210: ST_TO_ADDR
// exit ;
27211: POP
27212: POP
27213: GO 27406
// end ; end ;
27215: GO 27055
27217: POP
27218: POP
// for i := minerMinesList [ index ] downto 1 do
27219: LD_ADDR_VAR 0 5
27223: PUSH
27224: DOUBLE
27225: LD_EXP 98
27229: PUSH
27230: LD_VAR 0 6
27234: ARRAY
27235: INC
27236: ST_TO_ADDR
27237: LD_INT 1
27239: PUSH
27240: FOR_DOWNTO
27241: IFFALSE 27404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27243: LD_EXP 98
27247: PUSH
27248: LD_VAR 0 6
27252: ARRAY
27253: PUSH
27254: LD_VAR 0 5
27258: ARRAY
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PPUSH
27264: LD_EXP 98
27268: PUSH
27269: LD_VAR 0 6
27273: ARRAY
27274: PUSH
27275: LD_VAR 0 5
27279: ARRAY
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: PPUSH
27285: LD_VAR 0 2
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL_OW 298
27299: PUSH
27300: LD_INT 6
27302: LESS
27303: IFFALSE 27402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27305: LD_EXP 98
27309: PUSH
27310: LD_VAR 0 6
27314: ARRAY
27315: PUSH
27316: LD_VAR 0 5
27320: ARRAY
27321: PUSH
27322: LD_INT 1
27324: ARRAY
27325: PPUSH
27326: LD_EXP 98
27330: PUSH
27331: LD_VAR 0 6
27335: ARRAY
27336: PUSH
27337: LD_VAR 0 5
27341: ARRAY
27342: PUSH
27343: LD_INT 2
27345: ARRAY
27346: PPUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 255
27356: PPUSH
27357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27361: LD_ADDR_EXP 98
27365: PUSH
27366: LD_EXP 98
27370: PPUSH
27371: LD_VAR 0 6
27375: PPUSH
27376: LD_EXP 98
27380: PUSH
27381: LD_VAR 0 6
27385: ARRAY
27386: PPUSH
27387: LD_VAR 0 5
27391: PPUSH
27392: CALL_OW 3
27396: PPUSH
27397: CALL_OW 1
27401: ST_TO_ADDR
// end ; end ;
27402: GO 27240
27404: POP
27405: POP
// end ;
27406: LD_VAR 0 4
27410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27411: LD_INT 0
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
27417: PPUSH
27418: PPUSH
27419: PPUSH
27420: PPUSH
27421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 264
27431: PUSH
27432: LD_INT 81
27434: EQUAL
27435: NOT
27436: PUSH
27437: LD_VAR 0 1
27441: PUSH
27442: LD_EXP 97
27446: IN
27447: NOT
27448: OR
27449: IFFALSE 27453
// exit ;
27451: GO 27775
// index := GetElementIndex ( minersList , unit ) ;
27453: LD_ADDR_VAR 0 6
27457: PUSH
27458: LD_EXP 97
27462: PPUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL 33047 0 2
27472: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27473: LD_ADDR_VAR 0 8
27477: PUSH
27478: LD_EXP 99
27482: PUSH
27483: LD_EXP 98
27487: PUSH
27488: LD_VAR 0 6
27492: ARRAY
27493: MINUS
27494: ST_TO_ADDR
// if not minesFreeAmount then
27495: LD_VAR 0 8
27499: NOT
27500: IFFALSE 27504
// exit ;
27502: GO 27775
// tmp := [ ] ;
27504: LD_ADDR_VAR 0 7
27508: PUSH
27509: EMPTY
27510: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27511: LD_ADDR_VAR 0 5
27515: PUSH
27516: DOUBLE
27517: LD_INT 1
27519: DEC
27520: ST_TO_ADDR
27521: LD_VAR 0 8
27525: PUSH
27526: FOR_TO
27527: IFFALSE 27722
// begin _d := rand ( 0 , 5 ) ;
27529: LD_ADDR_VAR 0 11
27533: PUSH
27534: LD_INT 0
27536: PPUSH
27537: LD_INT 5
27539: PPUSH
27540: CALL_OW 12
27544: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27545: LD_ADDR_VAR 0 12
27549: PUSH
27550: LD_INT 2
27552: PPUSH
27553: LD_INT 6
27555: PPUSH
27556: CALL_OW 12
27560: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27561: LD_ADDR_VAR 0 9
27565: PUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 11
27575: PPUSH
27576: LD_VAR 0 12
27580: PPUSH
27581: CALL_OW 272
27585: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27586: LD_ADDR_VAR 0 10
27590: PUSH
27591: LD_VAR 0 3
27595: PPUSH
27596: LD_VAR 0 11
27600: PPUSH
27601: LD_VAR 0 12
27605: PPUSH
27606: CALL_OW 273
27610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27611: LD_VAR 0 9
27615: PPUSH
27616: LD_VAR 0 10
27620: PPUSH
27621: CALL_OW 488
27625: PUSH
27626: LD_VAR 0 9
27630: PUSH
27631: LD_VAR 0 10
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_VAR 0 7
27644: IN
27645: NOT
27646: AND
27647: PUSH
27648: LD_VAR 0 9
27652: PPUSH
27653: LD_VAR 0 10
27657: PPUSH
27658: CALL_OW 458
27662: NOT
27663: AND
27664: IFFALSE 27706
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27666: LD_ADDR_VAR 0 7
27670: PUSH
27671: LD_VAR 0 7
27675: PPUSH
27676: LD_VAR 0 7
27680: PUSH
27681: LD_INT 1
27683: PLUS
27684: PPUSH
27685: LD_VAR 0 9
27689: PUSH
27690: LD_VAR 0 10
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PPUSH
27699: CALL_OW 1
27703: ST_TO_ADDR
27704: GO 27720
// i := i - 1 ;
27706: LD_ADDR_VAR 0 5
27710: PUSH
27711: LD_VAR 0 5
27715: PUSH
27716: LD_INT 1
27718: MINUS
27719: ST_TO_ADDR
// end ;
27720: GO 27526
27722: POP
27723: POP
// for i in tmp do
27724: LD_ADDR_VAR 0 5
27728: PUSH
27729: LD_VAR 0 7
27733: PUSH
27734: FOR_IN
27735: IFFALSE 27773
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_VAR 0 5
27746: PUSH
27747: LD_INT 1
27749: ARRAY
27750: PPUSH
27751: LD_VAR 0 5
27755: PUSH
27756: LD_INT 2
27758: ARRAY
27759: PPUSH
27760: CALL 26719 0 3
27764: NOT
27765: IFFALSE 27771
// exit ;
27767: POP
27768: POP
27769: GO 27775
27771: GO 27734
27773: POP
27774: POP
// end ;
27775: LD_VAR 0 4
27779: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
27780: LD_INT 0
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
27789: PPUSH
27790: PPUSH
// if GetClass ( unit ) <> class_sniper then
27791: LD_VAR 0 1
27795: PPUSH
27796: CALL_OW 257
27800: PUSH
27801: LD_INT 5
27803: NONEQUAL
27804: IFFALSE 27808
// exit ;
27806: GO 28274
// dist := 8 ;
27808: LD_ADDR_VAR 0 5
27812: PUSH
27813: LD_INT 8
27815: ST_TO_ADDR
// viewRange := 12 ;
27816: LD_ADDR_VAR 0 8
27820: PUSH
27821: LD_INT 12
27823: ST_TO_ADDR
// side := GetSide ( unit ) ;
27824: LD_ADDR_VAR 0 6
27828: PUSH
27829: LD_VAR 0 1
27833: PPUSH
27834: CALL_OW 255
27838: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27839: LD_INT 61
27841: PPUSH
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 321
27851: PUSH
27852: LD_INT 2
27854: EQUAL
27855: IFFALSE 27865
// viewRange := 16 ;
27857: LD_ADDR_VAR 0 8
27861: PUSH
27862: LD_INT 16
27864: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27865: LD_VAR 0 1
27869: PPUSH
27870: LD_VAR 0 2
27874: PPUSH
27875: LD_VAR 0 3
27879: PPUSH
27880: CALL_OW 297
27884: PUSH
27885: LD_VAR 0 5
27889: GREATER
27890: IFFALSE 27969
// begin ComMoveXY ( unit , x , y ) ;
27892: LD_VAR 0 1
27896: PPUSH
27897: LD_VAR 0 2
27901: PPUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27911: LD_INT 35
27913: PPUSH
27914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27918: LD_VAR 0 1
27922: PPUSH
27923: LD_VAR 0 2
27927: PPUSH
27928: LD_VAR 0 3
27932: PPUSH
27933: CALL 64808 0 3
27937: NOT
27938: IFFALSE 27942
// exit ;
27940: GO 28274
// until GetDistUnitXY ( unit , x , y ) < dist ;
27942: LD_VAR 0 1
27946: PPUSH
27947: LD_VAR 0 2
27951: PPUSH
27952: LD_VAR 0 3
27956: PPUSH
27957: CALL_OW 297
27961: PUSH
27962: LD_VAR 0 5
27966: LESS
27967: IFFALSE 27911
// end ; ComTurnXY ( unit , x , y ) ;
27969: LD_VAR 0 1
27973: PPUSH
27974: LD_VAR 0 2
27978: PPUSH
27979: LD_VAR 0 3
27983: PPUSH
27984: CALL_OW 118
// repeat if Multiplayer then
27988: LD_OWVAR 4
27992: IFFALSE 28003
// wait ( 35 ) else
27994: LD_INT 35
27996: PPUSH
27997: CALL_OW 67
28001: GO 28010
// wait ( 5 ) ;
28003: LD_INT 5
28005: PPUSH
28006: CALL_OW 67
// _d := GetDir ( unit ) ;
28010: LD_ADDR_VAR 0 11
28014: PUSH
28015: LD_VAR 0 1
28019: PPUSH
28020: CALL_OW 254
28024: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28025: LD_ADDR_VAR 0 7
28029: PUSH
28030: LD_VAR 0 1
28034: PPUSH
28035: CALL_OW 250
28039: PPUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 251
28049: PPUSH
28050: LD_VAR 0 2
28054: PPUSH
28055: LD_VAR 0 3
28059: PPUSH
28060: CALL 67416 0 4
28064: ST_TO_ADDR
// until dir = _d ;
28065: LD_VAR 0 7
28069: PUSH
28070: LD_VAR 0 11
28074: EQUAL
28075: IFFALSE 27988
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28077: LD_ADDR_VAR 0 9
28081: PUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 250
28091: PPUSH
28092: LD_VAR 0 7
28096: PPUSH
28097: LD_VAR 0 5
28101: PPUSH
28102: CALL_OW 272
28106: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28107: LD_ADDR_VAR 0 10
28111: PUSH
28112: LD_VAR 0 1
28116: PPUSH
28117: CALL_OW 251
28121: PPUSH
28122: LD_VAR 0 7
28126: PPUSH
28127: LD_VAR 0 5
28131: PPUSH
28132: CALL_OW 273
28136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28137: LD_VAR 0 9
28141: PPUSH
28142: LD_VAR 0 10
28146: PPUSH
28147: CALL_OW 488
28151: NOT
28152: IFFALSE 28156
// exit ;
28154: GO 28274
// ComAnimCustom ( unit , 1 ) ;
28156: LD_VAR 0 1
28160: PPUSH
28161: LD_INT 1
28163: PPUSH
28164: CALL_OW 592
// p := 0 ;
28168: LD_ADDR_VAR 0 12
28172: PUSH
28173: LD_INT 0
28175: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28176: LD_VAR 0 9
28180: PPUSH
28181: LD_VAR 0 10
28185: PPUSH
28186: LD_VAR 0 6
28190: PPUSH
28191: LD_VAR 0 8
28195: PPUSH
28196: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28200: LD_INT 35
28202: PPUSH
28203: CALL_OW 67
// p := Inc ( p ) ;
28207: LD_ADDR_VAR 0 12
28211: PUSH
28212: LD_VAR 0 12
28216: PPUSH
28217: CALL 67372 0 1
28221: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28222: LD_VAR 0 12
28226: PUSH
28227: LD_INT 3
28229: EQUAL
28230: PUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 302
28240: NOT
28241: OR
28242: PUSH
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 301
28252: OR
28253: IFFALSE 28200
// RemoveSeeing ( _x , _y , side ) ;
28255: LD_VAR 0 9
28259: PPUSH
28260: LD_VAR 0 10
28264: PPUSH
28265: LD_VAR 0 6
28269: PPUSH
28270: CALL_OW 331
// end ; end_of_file
28274: LD_VAR 0 4
28278: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
// if exist_mode then
28283: LD_VAR 0 2
28287: IFFALSE 28333
// begin unit := CreateCharacter ( prefix & ident ) ;
28289: LD_ADDR_VAR 0 5
28293: PUSH
28294: LD_VAR 0 3
28298: PUSH
28299: LD_VAR 0 1
28303: STR
28304: PPUSH
28305: CALL_OW 34
28309: ST_TO_ADDR
// if unit then
28310: LD_VAR 0 5
28314: IFFALSE 28331
// DeleteCharacters ( prefix & ident ) ;
28316: LD_VAR 0 3
28320: PUSH
28321: LD_VAR 0 1
28325: STR
28326: PPUSH
28327: CALL_OW 40
// end else
28331: GO 28348
// unit := NewCharacter ( ident ) ;
28333: LD_ADDR_VAR 0 5
28337: PUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 25
28347: ST_TO_ADDR
// result := unit ;
28348: LD_ADDR_VAR 0 4
28352: PUSH
28353: LD_VAR 0 5
28357: ST_TO_ADDR
// end ;
28358: LD_VAR 0 4
28362: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
// if not side or not nation then
28367: LD_VAR 0 1
28371: NOT
28372: PUSH
28373: LD_VAR 0 2
28377: NOT
28378: OR
28379: IFFALSE 28383
// exit ;
28381: GO 29151
// case nation of nation_american :
28383: LD_VAR 0 2
28387: PUSH
28388: LD_INT 1
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28610
28396: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28397: LD_ADDR_VAR 0 4
28401: PUSH
28402: LD_INT 35
28404: PUSH
28405: LD_INT 45
28407: PUSH
28408: LD_INT 46
28410: PUSH
28411: LD_INT 47
28413: PUSH
28414: LD_INT 82
28416: PUSH
28417: LD_INT 83
28419: PUSH
28420: LD_INT 84
28422: PUSH
28423: LD_INT 85
28425: PUSH
28426: LD_INT 86
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 6
28437: PUSH
28438: LD_INT 15
28440: PUSH
28441: LD_INT 16
28443: PUSH
28444: LD_INT 7
28446: PUSH
28447: LD_INT 12
28449: PUSH
28450: LD_INT 13
28452: PUSH
28453: LD_INT 10
28455: PUSH
28456: LD_INT 14
28458: PUSH
28459: LD_INT 20
28461: PUSH
28462: LD_INT 21
28464: PUSH
28465: LD_INT 22
28467: PUSH
28468: LD_INT 25
28470: PUSH
28471: LD_INT 32
28473: PUSH
28474: LD_INT 27
28476: PUSH
28477: LD_INT 36
28479: PUSH
28480: LD_INT 69
28482: PUSH
28483: LD_INT 39
28485: PUSH
28486: LD_INT 34
28488: PUSH
28489: LD_INT 40
28491: PUSH
28492: LD_INT 48
28494: PUSH
28495: LD_INT 49
28497: PUSH
28498: LD_INT 50
28500: PUSH
28501: LD_INT 51
28503: PUSH
28504: LD_INT 52
28506: PUSH
28507: LD_INT 53
28509: PUSH
28510: LD_INT 54
28512: PUSH
28513: LD_INT 55
28515: PUSH
28516: LD_INT 56
28518: PUSH
28519: LD_INT 57
28521: PUSH
28522: LD_INT 58
28524: PUSH
28525: LD_INT 59
28527: PUSH
28528: LD_INT 60
28530: PUSH
28531: LD_INT 61
28533: PUSH
28534: LD_INT 62
28536: PUSH
28537: LD_INT 80
28539: PUSH
28540: LD_INT 82
28542: PUSH
28543: LD_INT 83
28545: PUSH
28546: LD_INT 84
28548: PUSH
28549: LD_INT 85
28551: PUSH
28552: LD_INT 86
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: ST_TO_ADDR
28608: GO 29075
28610: LD_INT 2
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28844
28618: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28619: LD_ADDR_VAR 0 4
28623: PUSH
28624: LD_INT 35
28626: PUSH
28627: LD_INT 45
28629: PUSH
28630: LD_INT 46
28632: PUSH
28633: LD_INT 47
28635: PUSH
28636: LD_INT 82
28638: PUSH
28639: LD_INT 83
28641: PUSH
28642: LD_INT 84
28644: PUSH
28645: LD_INT 85
28647: PUSH
28648: LD_INT 87
28650: PUSH
28651: LD_INT 70
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: LD_INT 11
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: LD_INT 4
28665: PUSH
28666: LD_INT 5
28668: PUSH
28669: LD_INT 6
28671: PUSH
28672: LD_INT 15
28674: PUSH
28675: LD_INT 18
28677: PUSH
28678: LD_INT 7
28680: PUSH
28681: LD_INT 17
28683: PUSH
28684: LD_INT 8
28686: PUSH
28687: LD_INT 20
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 22
28695: PUSH
28696: LD_INT 72
28698: PUSH
28699: LD_INT 26
28701: PUSH
28702: LD_INT 69
28704: PUSH
28705: LD_INT 39
28707: PUSH
28708: LD_INT 40
28710: PUSH
28711: LD_INT 41
28713: PUSH
28714: LD_INT 42
28716: PUSH
28717: LD_INT 43
28719: PUSH
28720: LD_INT 48
28722: PUSH
28723: LD_INT 49
28725: PUSH
28726: LD_INT 50
28728: PUSH
28729: LD_INT 51
28731: PUSH
28732: LD_INT 52
28734: PUSH
28735: LD_INT 53
28737: PUSH
28738: LD_INT 54
28740: PUSH
28741: LD_INT 55
28743: PUSH
28744: LD_INT 56
28746: PUSH
28747: LD_INT 60
28749: PUSH
28750: LD_INT 61
28752: PUSH
28753: LD_INT 62
28755: PUSH
28756: LD_INT 66
28758: PUSH
28759: LD_INT 67
28761: PUSH
28762: LD_INT 68
28764: PUSH
28765: LD_INT 81
28767: PUSH
28768: LD_INT 82
28770: PUSH
28771: LD_INT 83
28773: PUSH
28774: LD_INT 84
28776: PUSH
28777: LD_INT 85
28779: PUSH
28780: LD_INT 87
28782: PUSH
28783: LD_INT 88
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
28842: GO 29075
28844: LD_INT 3
28846: DOUBLE
28847: EQUAL
28848: IFTRUE 28852
28850: GO 29074
28852: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28853: LD_ADDR_VAR 0 4
28857: PUSH
28858: LD_INT 46
28860: PUSH
28861: LD_INT 47
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 82
28872: PUSH
28873: LD_INT 83
28875: PUSH
28876: LD_INT 84
28878: PUSH
28879: LD_INT 85
28881: PUSH
28882: LD_INT 86
28884: PUSH
28885: LD_INT 11
28887: PUSH
28888: LD_INT 9
28890: PUSH
28891: LD_INT 20
28893: PUSH
28894: LD_INT 19
28896: PUSH
28897: LD_INT 21
28899: PUSH
28900: LD_INT 24
28902: PUSH
28903: LD_INT 22
28905: PUSH
28906: LD_INT 25
28908: PUSH
28909: LD_INT 28
28911: PUSH
28912: LD_INT 29
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_INT 31
28920: PUSH
28921: LD_INT 37
28923: PUSH
28924: LD_INT 38
28926: PUSH
28927: LD_INT 32
28929: PUSH
28930: LD_INT 27
28932: PUSH
28933: LD_INT 33
28935: PUSH
28936: LD_INT 69
28938: PUSH
28939: LD_INT 39
28941: PUSH
28942: LD_INT 34
28944: PUSH
28945: LD_INT 40
28947: PUSH
28948: LD_INT 71
28950: PUSH
28951: LD_INT 23
28953: PUSH
28954: LD_INT 44
28956: PUSH
28957: LD_INT 48
28959: PUSH
28960: LD_INT 49
28962: PUSH
28963: LD_INT 50
28965: PUSH
28966: LD_INT 51
28968: PUSH
28969: LD_INT 52
28971: PUSH
28972: LD_INT 53
28974: PUSH
28975: LD_INT 54
28977: PUSH
28978: LD_INT 55
28980: PUSH
28981: LD_INT 56
28983: PUSH
28984: LD_INT 57
28986: PUSH
28987: LD_INT 58
28989: PUSH
28990: LD_INT 59
28992: PUSH
28993: LD_INT 63
28995: PUSH
28996: LD_INT 64
28998: PUSH
28999: LD_INT 65
29001: PUSH
29002: LD_INT 82
29004: PUSH
29005: LD_INT 83
29007: PUSH
29008: LD_INT 84
29010: PUSH
29011: LD_INT 85
29013: PUSH
29014: LD_INT 86
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
29072: GO 29075
29074: POP
// if state > - 1 and state < 3 then
29075: LD_VAR 0 3
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: GREATER
29084: PUSH
29085: LD_VAR 0 3
29089: PUSH
29090: LD_INT 3
29092: LESS
29093: AND
29094: IFFALSE 29151
// for i in result do
29096: LD_ADDR_VAR 0 5
29100: PUSH
29101: LD_VAR 0 4
29105: PUSH
29106: FOR_IN
29107: IFFALSE 29149
// if GetTech ( i , side ) <> state then
29109: LD_VAR 0 5
29113: PPUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 321
29123: PUSH
29124: LD_VAR 0 3
29128: NONEQUAL
29129: IFFALSE 29147
// result := result diff i ;
29131: LD_ADDR_VAR 0 4
29135: PUSH
29136: LD_VAR 0 4
29140: PUSH
29141: LD_VAR 0 5
29145: DIFF
29146: ST_TO_ADDR
29147: GO 29106
29149: POP
29150: POP
// end ;
29151: LD_VAR 0 4
29155: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29156: LD_INT 0
29158: PPUSH
29159: PPUSH
29160: PPUSH
// result := true ;
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 1
29168: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29169: LD_ADDR_VAR 0 5
29173: PUSH
29174: LD_VAR 0 2
29178: PPUSH
29179: CALL_OW 480
29183: ST_TO_ADDR
// if not tmp then
29184: LD_VAR 0 5
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29242
// for i in tmp do
29193: LD_ADDR_VAR 0 4
29197: PUSH
29198: LD_VAR 0 5
29202: PUSH
29203: FOR_IN
29204: IFFALSE 29240
// if GetTech ( i , side ) <> state_researched then
29206: LD_VAR 0 4
29210: PPUSH
29211: LD_VAR 0 1
29215: PPUSH
29216: CALL_OW 321
29220: PUSH
29221: LD_INT 2
29223: NONEQUAL
29224: IFFALSE 29238
// begin result := false ;
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: LD_INT 0
29233: ST_TO_ADDR
// exit ;
29234: POP
29235: POP
29236: GO 29242
// end ;
29238: GO 29203
29240: POP
29241: POP
// end ;
29242: LD_VAR 0 3
29246: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
29261: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29262: LD_VAR 0 1
29266: NOT
29267: PUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 257
29277: PUSH
29278: LD_INT 9
29280: NONEQUAL
29281: OR
29282: IFFALSE 29286
// exit ;
29284: GO 29859
// side := GetSide ( unit ) ;
29286: LD_ADDR_VAR 0 9
29290: PUSH
29291: LD_VAR 0 1
29295: PPUSH
29296: CALL_OW 255
29300: ST_TO_ADDR
// tech_space := tech_spacanom ;
29301: LD_ADDR_VAR 0 12
29305: PUSH
29306: LD_INT 29
29308: ST_TO_ADDR
// tech_time := tech_taurad ;
29309: LD_ADDR_VAR 0 13
29313: PUSH
29314: LD_INT 28
29316: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29317: LD_ADDR_VAR 0 11
29321: PUSH
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL_OW 310
29331: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29332: LD_VAR 0 11
29336: PPUSH
29337: CALL_OW 247
29341: PUSH
29342: LD_INT 2
29344: EQUAL
29345: IFFALSE 29349
// exit ;
29347: GO 29859
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29349: LD_ADDR_VAR 0 8
29353: PUSH
29354: LD_INT 81
29356: PUSH
29357: LD_VAR 0 9
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 21
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 69
29391: ST_TO_ADDR
// if not tmp then
29392: LD_VAR 0 8
29396: NOT
29397: IFFALSE 29401
// exit ;
29399: GO 29859
// if in_unit then
29401: LD_VAR 0 11
29405: IFFALSE 29429
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29407: LD_ADDR_VAR 0 10
29411: PUSH
29412: LD_VAR 0 8
29416: PPUSH
29417: LD_VAR 0 11
29421: PPUSH
29422: CALL_OW 74
29426: ST_TO_ADDR
29427: GO 29449
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29429: LD_ADDR_VAR 0 10
29433: PUSH
29434: LD_VAR 0 8
29438: PPUSH
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 74
29448: ST_TO_ADDR
// if not enemy then
29449: LD_VAR 0 10
29453: NOT
29454: IFFALSE 29458
// exit ;
29456: GO 29859
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29458: LD_VAR 0 11
29462: PUSH
29463: LD_VAR 0 11
29467: PPUSH
29468: LD_VAR 0 10
29472: PPUSH
29473: CALL_OW 296
29477: PUSH
29478: LD_INT 13
29480: GREATER
29481: AND
29482: PUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: LD_VAR 0 10
29492: PPUSH
29493: CALL_OW 296
29497: PUSH
29498: LD_INT 12
29500: GREATER
29501: OR
29502: IFFALSE 29506
// exit ;
29504: GO 29859
// missile := [ 1 ] ;
29506: LD_ADDR_VAR 0 14
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29517: LD_VAR 0 9
29521: PPUSH
29522: LD_VAR 0 12
29526: PPUSH
29527: CALL_OW 325
29531: IFFALSE 29560
// missile := Replace ( missile , missile + 1 , 2 ) ;
29533: LD_ADDR_VAR 0 14
29537: PUSH
29538: LD_VAR 0 14
29542: PPUSH
29543: LD_VAR 0 14
29547: PUSH
29548: LD_INT 1
29550: PLUS
29551: PPUSH
29552: LD_INT 2
29554: PPUSH
29555: CALL_OW 1
29559: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29560: LD_VAR 0 9
29564: PPUSH
29565: LD_VAR 0 13
29569: PPUSH
29570: CALL_OW 325
29574: PUSH
29575: LD_VAR 0 10
29579: PPUSH
29580: CALL_OW 255
29584: PPUSH
29585: LD_VAR 0 13
29589: PPUSH
29590: CALL_OW 325
29594: NOT
29595: AND
29596: IFFALSE 29625
// missile := Replace ( missile , missile + 1 , 3 ) ;
29598: LD_ADDR_VAR 0 14
29602: PUSH
29603: LD_VAR 0 14
29607: PPUSH
29608: LD_VAR 0 14
29612: PUSH
29613: LD_INT 1
29615: PLUS
29616: PPUSH
29617: LD_INT 3
29619: PPUSH
29620: CALL_OW 1
29624: ST_TO_ADDR
// if missile < 2 then
29625: LD_VAR 0 14
29629: PUSH
29630: LD_INT 2
29632: LESS
29633: IFFALSE 29637
// exit ;
29635: GO 29859
// x := GetX ( enemy ) ;
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_VAR 0 10
29646: PPUSH
29647: CALL_OW 250
29651: ST_TO_ADDR
// y := GetY ( enemy ) ;
29652: LD_ADDR_VAR 0 5
29656: PUSH
29657: LD_VAR 0 10
29661: PPUSH
29662: CALL_OW 251
29666: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29667: LD_ADDR_VAR 0 6
29671: PUSH
29672: LD_VAR 0 4
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PPUSH
29681: LD_INT 1
29683: PPUSH
29684: CALL_OW 12
29688: PLUS
29689: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29690: LD_ADDR_VAR 0 7
29694: PUSH
29695: LD_VAR 0 5
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PPUSH
29704: LD_INT 1
29706: PPUSH
29707: CALL_OW 12
29711: PLUS
29712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29713: LD_VAR 0 6
29717: PPUSH
29718: LD_VAR 0 7
29722: PPUSH
29723: CALL_OW 488
29727: NOT
29728: IFFALSE 29750
// begin _x := x ;
29730: LD_ADDR_VAR 0 6
29734: PUSH
29735: LD_VAR 0 4
29739: ST_TO_ADDR
// _y := y ;
29740: LD_ADDR_VAR 0 7
29744: PUSH
29745: LD_VAR 0 5
29749: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 1
29757: PPUSH
29758: LD_VAR 0 14
29762: PPUSH
29763: CALL_OW 12
29767: ST_TO_ADDR
// case i of 1 :
29768: LD_VAR 0 3
29772: PUSH
29773: LD_INT 1
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29798
29781: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_VAR 0 10
29791: PPUSH
29792: CALL_OW 115
29796: GO 29859
29798: LD_INT 2
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29828
29806: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29807: LD_VAR 0 1
29811: PPUSH
29812: LD_VAR 0 6
29816: PPUSH
29817: LD_VAR 0 7
29821: PPUSH
29822: CALL_OW 153
29826: GO 29859
29828: LD_INT 3
29830: DOUBLE
29831: EQUAL
29832: IFTRUE 29836
29834: GO 29858
29836: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29837: LD_VAR 0 1
29841: PPUSH
29842: LD_VAR 0 6
29846: PPUSH
29847: LD_VAR 0 7
29851: PPUSH
29852: CALL_OW 154
29856: GO 29859
29858: POP
// end ;
29859: LD_VAR 0 2
29863: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29864: LD_INT 0
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
// if not unit or not building then
29872: LD_VAR 0 1
29876: NOT
29877: PUSH
29878: LD_VAR 0 2
29882: NOT
29883: OR
29884: IFFALSE 29888
// exit ;
29886: GO 30046
// x := GetX ( building ) ;
29888: LD_ADDR_VAR 0 5
29892: PUSH
29893: LD_VAR 0 2
29897: PPUSH
29898: CALL_OW 250
29902: ST_TO_ADDR
// y := GetY ( building ) ;
29903: LD_ADDR_VAR 0 6
29907: PUSH
29908: LD_VAR 0 2
29912: PPUSH
29913: CALL_OW 251
29917: ST_TO_ADDR
// for i = 0 to 5 do
29918: LD_ADDR_VAR 0 4
29922: PUSH
29923: DOUBLE
29924: LD_INT 0
29926: DEC
29927: ST_TO_ADDR
29928: LD_INT 5
29930: PUSH
29931: FOR_TO
29932: IFFALSE 30044
// begin _x := ShiftX ( x , i , 3 ) ;
29934: LD_ADDR_VAR 0 7
29938: PUSH
29939: LD_VAR 0 5
29943: PPUSH
29944: LD_VAR 0 4
29948: PPUSH
29949: LD_INT 3
29951: PPUSH
29952: CALL_OW 272
29956: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29957: LD_ADDR_VAR 0 8
29961: PUSH
29962: LD_VAR 0 6
29966: PPUSH
29967: LD_VAR 0 4
29971: PPUSH
29972: LD_INT 3
29974: PPUSH
29975: CALL_OW 273
29979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29980: LD_VAR 0 7
29984: PPUSH
29985: LD_VAR 0 8
29989: PPUSH
29990: CALL_OW 488
29994: NOT
29995: IFFALSE 29999
// continue ;
29997: GO 29931
// if HexInfo ( _x , _y ) = 0 then
29999: LD_VAR 0 7
30003: PPUSH
30004: LD_VAR 0 8
30008: PPUSH
30009: CALL_OW 428
30013: PUSH
30014: LD_INT 0
30016: EQUAL
30017: IFFALSE 30042
// begin ComMoveXY ( unit , _x , _y ) ;
30019: LD_VAR 0 1
30023: PPUSH
30024: LD_VAR 0 7
30028: PPUSH
30029: LD_VAR 0 8
30033: PPUSH
30034: CALL_OW 111
// exit ;
30038: POP
30039: POP
30040: GO 30046
// end ; end ;
30042: GO 29931
30044: POP
30045: POP
// end ;
30046: LD_VAR 0 3
30050: RET
// export function ScanBase ( side , base_area ) ; begin
30051: LD_INT 0
30053: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30054: LD_ADDR_VAR 0 3
30058: PUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_INT 81
30066: PUSH
30067: LD_VAR 0 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PPUSH
30076: CALL_OW 70
30080: ST_TO_ADDR
// end ;
30081: LD_VAR 0 3
30085: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30086: LD_INT 0
30088: PPUSH
30089: PPUSH
30090: PPUSH
30091: PPUSH
// result := false ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_INT 0
30099: ST_TO_ADDR
// side := GetSide ( unit ) ;
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 255
30114: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30115: LD_ADDR_VAR 0 4
30119: PUSH
30120: LD_VAR 0 1
30124: PPUSH
30125: CALL_OW 248
30129: ST_TO_ADDR
// case nat of 1 :
30130: LD_VAR 0 4
30134: PUSH
30135: LD_INT 1
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30154
30143: POP
// tech := tech_lassight ; 2 :
30144: LD_ADDR_VAR 0 5
30148: PUSH
30149: LD_INT 12
30151: ST_TO_ADDR
30152: GO 30193
30154: LD_INT 2
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 30173
30162: POP
// tech := tech_mortar ; 3 :
30163: LD_ADDR_VAR 0 5
30167: PUSH
30168: LD_INT 41
30170: ST_TO_ADDR
30171: GO 30193
30173: LD_INT 3
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30192
30181: POP
// tech := tech_bazooka ; end ;
30182: LD_ADDR_VAR 0 5
30186: PUSH
30187: LD_INT 44
30189: ST_TO_ADDR
30190: GO 30193
30192: POP
// if Researched ( side , tech ) then
30193: LD_VAR 0 3
30197: PPUSH
30198: LD_VAR 0 5
30202: PPUSH
30203: CALL_OW 325
30207: IFFALSE 30234
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 8
30219: PUSH
30220: LD_INT 9
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: PUSH
30228: LD_VAR 0 4
30232: ARRAY
30233: ST_TO_ADDR
// end ;
30234: LD_VAR 0 2
30238: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30239: LD_INT 0
30241: PPUSH
30242: PPUSH
30243: PPUSH
// if not mines then
30244: LD_VAR 0 2
30248: NOT
30249: IFFALSE 30253
// exit ;
30251: GO 30397
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30253: LD_ADDR_VAR 0 5
30257: PUSH
30258: LD_INT 81
30260: PUSH
30261: LD_VAR 0 1
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: LD_INT 21
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ST_TO_ADDR
// for i in mines do
30296: LD_ADDR_VAR 0 4
30300: PUSH
30301: LD_VAR 0 2
30305: PUSH
30306: FOR_IN
30307: IFFALSE 30395
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30309: LD_VAR 0 4
30313: PUSH
30314: LD_INT 1
30316: ARRAY
30317: PPUSH
30318: LD_VAR 0 4
30322: PUSH
30323: LD_INT 2
30325: ARRAY
30326: PPUSH
30327: CALL_OW 458
30331: NOT
30332: IFFALSE 30336
// continue ;
30334: GO 30306
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30336: LD_VAR 0 4
30340: PUSH
30341: LD_INT 1
30343: ARRAY
30344: PPUSH
30345: LD_VAR 0 4
30349: PUSH
30350: LD_INT 2
30352: ARRAY
30353: PPUSH
30354: CALL_OW 428
30358: PUSH
30359: LD_VAR 0 5
30363: IN
30364: IFFALSE 30393
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30366: LD_VAR 0 4
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PPUSH
30375: LD_VAR 0 4
30379: PUSH
30380: LD_INT 2
30382: ARRAY
30383: PPUSH
30384: LD_VAR 0 1
30388: PPUSH
30389: CALL_OW 456
// end ;
30393: GO 30306
30395: POP
30396: POP
// end ;
30397: LD_VAR 0 3
30401: RET
// export function Count ( array ) ; begin
30402: LD_INT 0
30404: PPUSH
// result := array + 0 ;
30405: LD_ADDR_VAR 0 2
30409: PUSH
30410: LD_VAR 0 1
30414: PUSH
30415: LD_INT 0
30417: PLUS
30418: ST_TO_ADDR
// end ;
30419: LD_VAR 0 2
30423: RET
// export function IsEmpty ( building ) ; begin
30424: LD_INT 0
30426: PPUSH
// if not building then
30427: LD_VAR 0 1
30431: NOT
30432: IFFALSE 30436
// exit ;
30434: GO 30479
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30436: LD_ADDR_VAR 0 2
30440: PUSH
30441: LD_VAR 0 1
30445: PUSH
30446: LD_INT 22
30448: PUSH
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 255
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 58
30465: PUSH
30466: EMPTY
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: IN
30478: ST_TO_ADDR
// end ;
30479: LD_VAR 0 2
30483: RET
// export function IsNotFull ( building ) ; var places ; begin
30484: LD_INT 0
30486: PPUSH
30487: PPUSH
// if not building then
30488: LD_VAR 0 1
30492: NOT
30493: IFFALSE 30497
// exit ;
30495: GO 30525
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30497: LD_ADDR_VAR 0 2
30501: PUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 62
30512: PUSH
30513: EMPTY
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PPUSH
30520: CALL_OW 72
30524: ST_TO_ADDR
// end ;
30525: LD_VAR 0 2
30529: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30530: LD_INT 0
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
// tmp := [ ] ;
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: EMPTY
30542: ST_TO_ADDR
// list := [ ] ;
30543: LD_ADDR_VAR 0 5
30547: PUSH
30548: EMPTY
30549: ST_TO_ADDR
// for i = 16 to 25 do
30550: LD_ADDR_VAR 0 4
30554: PUSH
30555: DOUBLE
30556: LD_INT 16
30558: DEC
30559: ST_TO_ADDR
30560: LD_INT 25
30562: PUSH
30563: FOR_TO
30564: IFFALSE 30637
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_VAR 0 3
30575: PUSH
30576: LD_INT 22
30578: PUSH
30579: LD_VAR 0 1
30583: PPUSH
30584: CALL_OW 255
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 91
30595: PUSH
30596: LD_VAR 0 1
30600: PUSH
30601: LD_INT 6
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 30
30611: PUSH
30612: LD_VAR 0 4
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: PPUSH
30629: CALL_OW 69
30633: ADD
30634: ST_TO_ADDR
30635: GO 30563
30637: POP
30638: POP
// for i = 1 to tmp do
30639: LD_ADDR_VAR 0 4
30643: PUSH
30644: DOUBLE
30645: LD_INT 1
30647: DEC
30648: ST_TO_ADDR
30649: LD_VAR 0 3
30653: PUSH
30654: FOR_TO
30655: IFFALSE 30743
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30657: LD_ADDR_VAR 0 5
30661: PUSH
30662: LD_VAR 0 5
30666: PUSH
30667: LD_VAR 0 3
30671: PUSH
30672: LD_VAR 0 4
30676: ARRAY
30677: PPUSH
30678: CALL_OW 266
30682: PUSH
30683: LD_VAR 0 3
30687: PUSH
30688: LD_VAR 0 4
30692: ARRAY
30693: PPUSH
30694: CALL_OW 250
30698: PUSH
30699: LD_VAR 0 3
30703: PUSH
30704: LD_VAR 0 4
30708: ARRAY
30709: PPUSH
30710: CALL_OW 251
30714: PUSH
30715: LD_VAR 0 3
30719: PUSH
30720: LD_VAR 0 4
30724: ARRAY
30725: PPUSH
30726: CALL_OW 254
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: ADD
30740: ST_TO_ADDR
30741: GO 30654
30743: POP
30744: POP
// result := list ;
30745: LD_ADDR_VAR 0 2
30749: PUSH
30750: LD_VAR 0 5
30754: ST_TO_ADDR
// end ;
30755: LD_VAR 0 2
30759: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30760: LD_INT 0
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
// if not factory then
30769: LD_VAR 0 1
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 31371
// if control = control_apeman then
30778: LD_VAR 0 4
30782: PUSH
30783: LD_INT 5
30785: EQUAL
30786: IFFALSE 30895
// begin tmp := UnitsInside ( factory ) ;
30788: LD_ADDR_VAR 0 8
30792: PUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 313
30802: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30803: LD_VAR 0 8
30807: PPUSH
30808: LD_INT 25
30810: PUSH
30811: LD_INT 12
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PPUSH
30818: CALL_OW 72
30822: NOT
30823: IFFALSE 30833
// control := control_manual ;
30825: LD_ADDR_VAR 0 4
30829: PUSH
30830: LD_INT 1
30832: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30833: LD_ADDR_VAR 0 8
30837: PUSH
30838: LD_VAR 0 1
30842: PPUSH
30843: CALL 30530 0 1
30847: ST_TO_ADDR
// if tmp then
30848: LD_VAR 0 8
30852: IFFALSE 30895
// begin for i in tmp do
30854: LD_ADDR_VAR 0 7
30858: PUSH
30859: LD_VAR 0 8
30863: PUSH
30864: FOR_IN
30865: IFFALSE 30893
// if i [ 1 ] = b_ext_radio then
30867: LD_VAR 0 7
30871: PUSH
30872: LD_INT 1
30874: ARRAY
30875: PUSH
30876: LD_INT 22
30878: EQUAL
30879: IFFALSE 30891
// begin control := control_remote ;
30881: LD_ADDR_VAR 0 4
30885: PUSH
30886: LD_INT 2
30888: ST_TO_ADDR
// break ;
30889: GO 30893
// end ;
30891: GO 30864
30893: POP
30894: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30895: LD_VAR 0 1
30899: PPUSH
30900: LD_VAR 0 2
30904: PPUSH
30905: LD_VAR 0 3
30909: PPUSH
30910: LD_VAR 0 4
30914: PPUSH
30915: LD_VAR 0 5
30919: PPUSH
30920: CALL_OW 448
30924: IFFALSE 30959
// begin result := [ chassis , engine , control , weapon ] ;
30926: LD_ADDR_VAR 0 6
30930: PUSH
30931: LD_VAR 0 2
30935: PUSH
30936: LD_VAR 0 3
30940: PUSH
30941: LD_VAR 0 4
30945: PUSH
30946: LD_VAR 0 5
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
// exit ;
30957: GO 31371
// end ; _chassis := AvailableChassisList ( factory ) ;
30959: LD_ADDR_VAR 0 9
30963: PUSH
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 475
30973: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30974: LD_ADDR_VAR 0 11
30978: PUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 476
30988: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30989: LD_ADDR_VAR 0 12
30993: PUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 477
31003: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31004: LD_ADDR_VAR 0 10
31008: PUSH
31009: LD_VAR 0 1
31013: PPUSH
31014: CALL_OW 478
31018: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31019: LD_VAR 0 9
31023: NOT
31024: PUSH
31025: LD_VAR 0 11
31029: NOT
31030: OR
31031: PUSH
31032: LD_VAR 0 12
31036: NOT
31037: OR
31038: PUSH
31039: LD_VAR 0 10
31043: NOT
31044: OR
31045: IFFALSE 31080
// begin result := [ chassis , engine , control , weapon ] ;
31047: LD_ADDR_VAR 0 6
31051: PUSH
31052: LD_VAR 0 2
31056: PUSH
31057: LD_VAR 0 3
31061: PUSH
31062: LD_VAR 0 4
31066: PUSH
31067: LD_VAR 0 5
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// exit ;
31078: GO 31371
// end ; if not chassis in _chassis then
31080: LD_VAR 0 2
31084: PUSH
31085: LD_VAR 0 9
31089: IN
31090: NOT
31091: IFFALSE 31117
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31093: LD_ADDR_VAR 0 2
31097: PUSH
31098: LD_VAR 0 9
31102: PUSH
31103: LD_INT 1
31105: PPUSH
31106: LD_VAR 0 9
31110: PPUSH
31111: CALL_OW 12
31115: ARRAY
31116: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31117: LD_VAR 0 2
31121: PPUSH
31122: LD_VAR 0 3
31126: PPUSH
31127: CALL 31376 0 2
31131: NOT
31132: IFFALSE 31191
// repeat engine := _engine [ 1 ] ;
31134: LD_ADDR_VAR 0 3
31138: PUSH
31139: LD_VAR 0 11
31143: PUSH
31144: LD_INT 1
31146: ARRAY
31147: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31148: LD_ADDR_VAR 0 11
31152: PUSH
31153: LD_VAR 0 11
31157: PPUSH
31158: LD_INT 1
31160: PPUSH
31161: CALL_OW 3
31165: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31166: LD_VAR 0 2
31170: PPUSH
31171: LD_VAR 0 3
31175: PPUSH
31176: CALL 31376 0 2
31180: PUSH
31181: LD_VAR 0 11
31185: PUSH
31186: EMPTY
31187: EQUAL
31188: OR
31189: IFFALSE 31134
// if not control in _control then
31191: LD_VAR 0 4
31195: PUSH
31196: LD_VAR 0 12
31200: IN
31201: NOT
31202: IFFALSE 31228
// control := _control [ rand ( 1 , _control ) ] ;
31204: LD_ADDR_VAR 0 4
31208: PUSH
31209: LD_VAR 0 12
31213: PUSH
31214: LD_INT 1
31216: PPUSH
31217: LD_VAR 0 12
31221: PPUSH
31222: CALL_OW 12
31226: ARRAY
31227: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31228: LD_VAR 0 2
31232: PPUSH
31233: LD_VAR 0 5
31237: PPUSH
31238: CALL 31596 0 2
31242: NOT
31243: IFFALSE 31302
// repeat weapon := _weapon [ 1 ] ;
31245: LD_ADDR_VAR 0 5
31249: PUSH
31250: LD_VAR 0 10
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31259: LD_ADDR_VAR 0 10
31263: PUSH
31264: LD_VAR 0 10
31268: PPUSH
31269: LD_INT 1
31271: PPUSH
31272: CALL_OW 3
31276: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31277: LD_VAR 0 2
31281: PPUSH
31282: LD_VAR 0 5
31286: PPUSH
31287: CALL 31596 0 2
31291: PUSH
31292: LD_VAR 0 10
31296: PUSH
31297: EMPTY
31298: EQUAL
31299: OR
31300: IFFALSE 31245
// result := [ ] ;
31302: LD_ADDR_VAR 0 6
31306: PUSH
31307: EMPTY
31308: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31309: LD_VAR 0 1
31313: PPUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: LD_VAR 0 3
31323: PPUSH
31324: LD_VAR 0 4
31328: PPUSH
31329: LD_VAR 0 5
31333: PPUSH
31334: CALL_OW 448
31338: IFFALSE 31371
// result := [ chassis , engine , control , weapon ] ;
31340: LD_ADDR_VAR 0 6
31344: PUSH
31345: LD_VAR 0 2
31349: PUSH
31350: LD_VAR 0 3
31354: PUSH
31355: LD_VAR 0 4
31359: PUSH
31360: LD_VAR 0 5
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 6
31375: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31376: LD_INT 0
31378: PPUSH
// if not chassis or not engine then
31379: LD_VAR 0 1
31383: NOT
31384: PUSH
31385: LD_VAR 0 2
31389: NOT
31390: OR
31391: IFFALSE 31395
// exit ;
31393: GO 31591
// case engine of engine_solar :
31395: LD_VAR 0 2
31399: PUSH
31400: LD_INT 2
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31446
31408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_INT 11
31416: PUSH
31417: LD_INT 12
31419: PUSH
31420: LD_INT 13
31422: PUSH
31423: LD_INT 14
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 3
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
31444: GO 31575
31446: LD_INT 1
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31516
31454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31455: LD_ADDR_VAR 0 3
31459: PUSH
31460: LD_INT 11
31462: PUSH
31463: LD_INT 12
31465: PUSH
31466: LD_INT 13
31468: PUSH
31469: LD_INT 14
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 3
31480: PUSH
31481: LD_INT 4
31483: PUSH
31484: LD_INT 5
31486: PUSH
31487: LD_INT 21
31489: PUSH
31490: LD_INT 23
31492: PUSH
31493: LD_INT 22
31495: PUSH
31496: LD_INT 24
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: ST_TO_ADDR
31514: GO 31575
31516: LD_INT 3
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31574
31524: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_INT 13
31532: PUSH
31533: LD_INT 14
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: LD_INT 4
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: LD_INT 21
31550: PUSH
31551: LD_INT 22
31553: PUSH
31554: LD_INT 23
31556: PUSH
31557: LD_INT 24
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: ST_TO_ADDR
31572: GO 31575
31574: POP
// result := ( chassis in result ) ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_VAR 0 1
31584: PUSH
31585: LD_VAR 0 3
31589: IN
31590: ST_TO_ADDR
// end ;
31591: LD_VAR 0 3
31595: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31596: LD_INT 0
31598: PPUSH
// if not chassis or not weapon then
31599: LD_VAR 0 1
31603: NOT
31604: PUSH
31605: LD_VAR 0 2
31609: NOT
31610: OR
31611: IFFALSE 31615
// exit ;
31613: GO 32675
// case weapon of us_machine_gun :
31615: LD_VAR 0 2
31619: PUSH
31620: LD_INT 2
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31658
31628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 4
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
31656: GO 32659
31658: LD_INT 3
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 31696
31666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31667: LD_ADDR_VAR 0 3
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 4
31683: PUSH
31684: LD_INT 5
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
31694: GO 32659
31696: LD_INT 11
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31704
31702: GO 31734
31704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: LD_INT 5
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 32659
31734: LD_INT 4
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31768
31742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: LD_INT 5
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
31766: GO 32659
31768: LD_INT 5
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31802
31776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 5
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 32659
31802: LD_INT 9
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31836
31810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 5
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
31834: GO 32659
31836: LD_INT 7
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31870
31844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32659
31870: LD_INT 12
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31904
31878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
31902: GO 32659
31904: LD_INT 13
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31938
31912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31913: LD_ADDR_VAR 0 3
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
31936: GO 32659
31938: LD_INT 14
31940: DOUBLE
31941: EQUAL
31942: IFTRUE 31946
31944: GO 31964
31946: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: ST_TO_ADDR
31962: GO 32659
31964: LD_INT 6
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 31990
31972: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31973: LD_ADDR_VAR 0 3
31977: PUSH
31978: LD_INT 4
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: ST_TO_ADDR
31988: GO 32659
31990: LD_INT 10
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32016
31998: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: LD_INT 4
32006: PUSH
32007: LD_INT 5
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: ST_TO_ADDR
32014: GO 32659
32016: LD_INT 22
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32050
32024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_INT 11
32032: PUSH
32033: LD_INT 12
32035: PUSH
32036: LD_INT 13
32038: PUSH
32039: LD_INT 14
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: ST_TO_ADDR
32048: GO 32659
32050: LD_INT 23
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32084
32058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_INT 11
32066: PUSH
32067: LD_INT 12
32069: PUSH
32070: LD_INT 13
32072: PUSH
32073: LD_INT 14
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: ST_TO_ADDR
32082: GO 32659
32084: LD_INT 24
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32118
32092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32093: LD_ADDR_VAR 0 3
32097: PUSH
32098: LD_INT 11
32100: PUSH
32101: LD_INT 12
32103: PUSH
32104: LD_INT 13
32106: PUSH
32107: LD_INT 14
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
32116: GO 32659
32118: LD_INT 30
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32152
32126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 11
32134: PUSH
32135: LD_INT 12
32137: PUSH
32138: LD_INT 13
32140: PUSH
32141: LD_INT 14
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
32150: GO 32659
32152: LD_INT 25
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32178
32160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: LD_INT 13
32168: PUSH
32169: LD_INT 14
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: ST_TO_ADDR
32176: GO 32659
32178: LD_INT 27
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32204
32186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32187: LD_ADDR_VAR 0 3
32191: PUSH
32192: LD_INT 13
32194: PUSH
32195: LD_INT 14
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: ST_TO_ADDR
32202: GO 32659
32204: LD_INT 92
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32238
32212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: LD_INT 11
32220: PUSH
32221: LD_INT 12
32223: PUSH
32224: LD_INT 13
32226: PUSH
32227: LD_INT 14
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: ST_TO_ADDR
32236: GO 32659
32238: LD_INT 28
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32264
32246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_INT 13
32254: PUSH
32255: LD_INT 14
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: ST_TO_ADDR
32262: GO 32659
32264: LD_INT 29
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32290
32272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 13
32280: PUSH
32281: LD_INT 14
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: ST_TO_ADDR
32288: GO 32659
32290: LD_INT 31
32292: DOUBLE
32293: EQUAL
32294: IFTRUE 32298
32296: GO 32316
32298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32299: LD_ADDR_VAR 0 3
32303: PUSH
32304: LD_INT 13
32306: PUSH
32307: LD_INT 14
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: ST_TO_ADDR
32314: GO 32659
32316: LD_INT 26
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32342
32324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32325: LD_ADDR_VAR 0 3
32329: PUSH
32330: LD_INT 13
32332: PUSH
32333: LD_INT 14
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: ST_TO_ADDR
32340: GO 32659
32342: LD_INT 42
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32376
32350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_INT 21
32358: PUSH
32359: LD_INT 22
32361: PUSH
32362: LD_INT 23
32364: PUSH
32365: LD_INT 24
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 32659
32376: LD_INT 43
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32410
32384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 21
32392: PUSH
32393: LD_INT 22
32395: PUSH
32396: LD_INT 23
32398: PUSH
32399: LD_INT 24
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
32408: GO 32659
32410: LD_INT 44
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 21
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_INT 23
32432: PUSH
32433: LD_INT 24
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 32659
32444: LD_INT 45
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32478
32452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 22
32463: PUSH
32464: LD_INT 23
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 32659
32478: LD_INT 49
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32512
32486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 22
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 24
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 32659
32512: LD_INT 51
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32546
32520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 21
32528: PUSH
32529: LD_INT 22
32531: PUSH
32532: LD_INT 23
32534: PUSH
32535: LD_INT 24
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 32659
32546: LD_INT 52
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32580
32554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 21
32562: PUSH
32563: LD_INT 22
32565: PUSH
32566: LD_INT 23
32568: PUSH
32569: LD_INT 24
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 32659
32580: LD_INT 53
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32606
32588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 23
32596: PUSH
32597: LD_INT 24
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 32659
32606: LD_INT 46
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32632
32614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 23
32622: PUSH
32623: LD_INT 24
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: ST_TO_ADDR
32630: GO 32659
32632: LD_INT 47
32634: DOUBLE
32635: EQUAL
32636: IFTRUE 32640
32638: GO 32658
32640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_INT 23
32648: PUSH
32649: LD_INT 24
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 32659
32658: POP
// result := ( chassis in result ) ;
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_VAR 0 1
32668: PUSH
32669: LD_VAR 0 3
32673: IN
32674: ST_TO_ADDR
// end ;
32675: LD_VAR 0 3
32679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32680: LD_INT 0
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
// result := array ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 1
32698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32699: LD_VAR 0 1
32703: NOT
32704: PUSH
32705: LD_VAR 0 2
32709: NOT
32710: OR
32711: PUSH
32712: LD_VAR 0 3
32716: NOT
32717: OR
32718: PUSH
32719: LD_VAR 0 2
32723: PUSH
32724: LD_VAR 0 1
32728: GREATER
32729: OR
32730: PUSH
32731: LD_VAR 0 3
32735: PUSH
32736: LD_VAR 0 1
32740: GREATER
32741: OR
32742: IFFALSE 32746
// exit ;
32744: GO 33042
// if direction then
32746: LD_VAR 0 4
32750: IFFALSE 32814
// begin d := 1 ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// if i_from > i_to then
32760: LD_VAR 0 2
32764: PUSH
32765: LD_VAR 0 3
32769: GREATER
32770: IFFALSE 32796
// length := ( array - i_from ) + i_to else
32772: LD_ADDR_VAR 0 11
32776: PUSH
32777: LD_VAR 0 1
32781: PUSH
32782: LD_VAR 0 2
32786: MINUS
32787: PUSH
32788: LD_VAR 0 3
32792: PLUS
32793: ST_TO_ADDR
32794: GO 32812
// length := i_to - i_from ;
32796: LD_ADDR_VAR 0 11
32800: PUSH
32801: LD_VAR 0 3
32805: PUSH
32806: LD_VAR 0 2
32810: MINUS
32811: ST_TO_ADDR
// end else
32812: GO 32875
// begin d := - 1 ;
32814: LD_ADDR_VAR 0 9
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: ST_TO_ADDR
// if i_from > i_to then
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 3
32832: GREATER
32833: IFFALSE 32853
// length := i_from - i_to else
32835: LD_ADDR_VAR 0 11
32839: PUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_VAR 0 3
32849: MINUS
32850: ST_TO_ADDR
32851: GO 32875
// length := ( array - i_to ) + i_from ;
32853: LD_ADDR_VAR 0 11
32857: PUSH
32858: LD_VAR 0 1
32862: PUSH
32863: LD_VAR 0 3
32867: MINUS
32868: PUSH
32869: LD_VAR 0 2
32873: PLUS
32874: ST_TO_ADDR
// end ; if not length then
32875: LD_VAR 0 11
32879: NOT
32880: IFFALSE 32884
// exit ;
32882: GO 33042
// tmp := array ;
32884: LD_ADDR_VAR 0 10
32888: PUSH
32889: LD_VAR 0 1
32893: ST_TO_ADDR
// for i = 1 to length do
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: DOUBLE
32900: LD_INT 1
32902: DEC
32903: ST_TO_ADDR
32904: LD_VAR 0 11
32908: PUSH
32909: FOR_TO
32910: IFFALSE 33030
// begin for j = 1 to array do
32912: LD_ADDR_VAR 0 7
32916: PUSH
32917: DOUBLE
32918: LD_INT 1
32920: DEC
32921: ST_TO_ADDR
32922: LD_VAR 0 1
32926: PUSH
32927: FOR_TO
32928: IFFALSE 33016
// begin k := j + d ;
32930: LD_ADDR_VAR 0 8
32934: PUSH
32935: LD_VAR 0 7
32939: PUSH
32940: LD_VAR 0 9
32944: PLUS
32945: ST_TO_ADDR
// if k > array then
32946: LD_VAR 0 8
32950: PUSH
32951: LD_VAR 0 1
32955: GREATER
32956: IFFALSE 32966
// k := 1 ;
32958: LD_ADDR_VAR 0 8
32962: PUSH
32963: LD_INT 1
32965: ST_TO_ADDR
// if not k then
32966: LD_VAR 0 8
32970: NOT
32971: IFFALSE 32983
// k := array ;
32973: LD_ADDR_VAR 0 8
32977: PUSH
32978: LD_VAR 0 1
32982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32983: LD_ADDR_VAR 0 10
32987: PUSH
32988: LD_VAR 0 10
32992: PPUSH
32993: LD_VAR 0 8
32997: PPUSH
32998: LD_VAR 0 1
33002: PUSH
33003: LD_VAR 0 7
33007: ARRAY
33008: PPUSH
33009: CALL_OW 1
33013: ST_TO_ADDR
// end ;
33014: GO 32927
33016: POP
33017: POP
// array := tmp ;
33018: LD_ADDR_VAR 0 1
33022: PUSH
33023: LD_VAR 0 10
33027: ST_TO_ADDR
// end ;
33028: GO 32909
33030: POP
33031: POP
// result := array ;
33032: LD_ADDR_VAR 0 5
33036: PUSH
33037: LD_VAR 0 1
33041: ST_TO_ADDR
// end ;
33042: LD_VAR 0 5
33046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
// result := 0 ;
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_INT 0
33058: ST_TO_ADDR
// if not array or not value in array then
33059: LD_VAR 0 1
33063: NOT
33064: PUSH
33065: LD_VAR 0 2
33069: PUSH
33070: LD_VAR 0 1
33074: IN
33075: NOT
33076: OR
33077: IFFALSE 33081
// exit ;
33079: GO 33135
// for i = 1 to array do
33081: LD_ADDR_VAR 0 4
33085: PUSH
33086: DOUBLE
33087: LD_INT 1
33089: DEC
33090: ST_TO_ADDR
33091: LD_VAR 0 1
33095: PUSH
33096: FOR_TO
33097: IFFALSE 33133
// if value = array [ i ] then
33099: LD_VAR 0 2
33103: PUSH
33104: LD_VAR 0 1
33108: PUSH
33109: LD_VAR 0 4
33113: ARRAY
33114: EQUAL
33115: IFFALSE 33131
// begin result := i ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_VAR 0 4
33126: ST_TO_ADDR
// exit ;
33127: POP
33128: POP
33129: GO 33135
// end ;
33131: GO 33096
33133: POP
33134: POP
// end ;
33135: LD_VAR 0 3
33139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33140: LD_INT 0
33142: PPUSH
// vc_chassis := chassis ;
33143: LD_ADDR_OWVAR 37
33147: PUSH
33148: LD_VAR 0 1
33152: ST_TO_ADDR
// vc_engine := engine ;
33153: LD_ADDR_OWVAR 39
33157: PUSH
33158: LD_VAR 0 2
33162: ST_TO_ADDR
// vc_control := control ;
33163: LD_ADDR_OWVAR 38
33167: PUSH
33168: LD_VAR 0 3
33172: ST_TO_ADDR
// vc_weapon := weapon ;
33173: LD_ADDR_OWVAR 40
33177: PUSH
33178: LD_VAR 0 4
33182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33183: LD_ADDR_OWVAR 41
33187: PUSH
33188: LD_VAR 0 5
33192: ST_TO_ADDR
// end ;
33193: LD_VAR 0 6
33197: RET
// export function WantPlant ( unit ) ; var task ; begin
33198: LD_INT 0
33200: PPUSH
33201: PPUSH
// result := false ;
33202: LD_ADDR_VAR 0 2
33206: PUSH
33207: LD_INT 0
33209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 437
33224: ST_TO_ADDR
// if task then
33225: LD_VAR 0 3
33229: IFFALSE 33257
// if task [ 1 ] [ 1 ] = p then
33231: LD_VAR 0 3
33235: PUSH
33236: LD_INT 1
33238: ARRAY
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: PUSH
33244: LD_STRING p
33246: EQUAL
33247: IFFALSE 33257
// result := true ;
33249: LD_ADDR_VAR 0 2
33253: PUSH
33254: LD_INT 1
33256: ST_TO_ADDR
// end ;
33257: LD_VAR 0 2
33261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33262: LD_INT 0
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
// if pos < 1 then
33268: LD_VAR 0 2
33272: PUSH
33273: LD_INT 1
33275: LESS
33276: IFFALSE 33280
// exit ;
33278: GO 33583
// if pos = 1 then
33280: LD_VAR 0 2
33284: PUSH
33285: LD_INT 1
33287: EQUAL
33288: IFFALSE 33321
// result := Replace ( arr , pos [ 1 ] , value ) else
33290: LD_ADDR_VAR 0 4
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_VAR 0 2
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_VAR 0 3
33313: PPUSH
33314: CALL_OW 1
33318: ST_TO_ADDR
33319: GO 33583
// begin tmp := arr ;
33321: LD_ADDR_VAR 0 6
33325: PUSH
33326: LD_VAR 0 1
33330: ST_TO_ADDR
// s_arr := [ tmp ] ;
33331: LD_ADDR_VAR 0 7
33335: PUSH
33336: LD_VAR 0 6
33340: PUSH
33341: EMPTY
33342: LIST
33343: ST_TO_ADDR
// for i = 1 to pos - 1 do
33344: LD_ADDR_VAR 0 5
33348: PUSH
33349: DOUBLE
33350: LD_INT 1
33352: DEC
33353: ST_TO_ADDR
33354: LD_VAR 0 2
33358: PUSH
33359: LD_INT 1
33361: MINUS
33362: PUSH
33363: FOR_TO
33364: IFFALSE 33409
// begin tmp := tmp [ pos [ i ] ] ;
33366: LD_ADDR_VAR 0 6
33370: PUSH
33371: LD_VAR 0 6
33375: PUSH
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 5
33385: ARRAY
33386: ARRAY
33387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33388: LD_ADDR_VAR 0 7
33392: PUSH
33393: LD_VAR 0 7
33397: PUSH
33398: LD_VAR 0 6
33402: PUSH
33403: EMPTY
33404: LIST
33405: ADD
33406: ST_TO_ADDR
// end ;
33407: GO 33363
33409: POP
33410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33411: LD_ADDR_VAR 0 6
33415: PUSH
33416: LD_VAR 0 6
33420: PPUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_VAR 0 2
33430: ARRAY
33431: PPUSH
33432: LD_VAR 0 3
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33442: LD_ADDR_VAR 0 7
33446: PUSH
33447: LD_VAR 0 7
33451: PPUSH
33452: LD_VAR 0 7
33456: PPUSH
33457: LD_VAR 0 6
33461: PPUSH
33462: CALL_OW 1
33466: ST_TO_ADDR
// for i = s_arr downto 2 do
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: DOUBLE
33473: LD_VAR 0 7
33477: INC
33478: ST_TO_ADDR
33479: LD_INT 2
33481: PUSH
33482: FOR_DOWNTO
33483: IFFALSE 33567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33485: LD_ADDR_VAR 0 6
33489: PUSH
33490: LD_VAR 0 7
33494: PUSH
33495: LD_VAR 0 5
33499: PUSH
33500: LD_INT 1
33502: MINUS
33503: ARRAY
33504: PPUSH
33505: LD_VAR 0 2
33509: PUSH
33510: LD_VAR 0 5
33514: PUSH
33515: LD_INT 1
33517: MINUS
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 7
33524: PUSH
33525: LD_VAR 0 5
33529: ARRAY
33530: PPUSH
33531: CALL_OW 1
33535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33536: LD_ADDR_VAR 0 7
33540: PUSH
33541: LD_VAR 0 7
33545: PPUSH
33546: LD_VAR 0 5
33550: PUSH
33551: LD_INT 1
33553: MINUS
33554: PPUSH
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
// end ;
33565: GO 33482
33567: POP
33568: POP
// result := s_arr [ 1 ] ;
33569: LD_ADDR_VAR 0 4
33573: PUSH
33574: LD_VAR 0 7
33578: PUSH
33579: LD_INT 1
33581: ARRAY
33582: ST_TO_ADDR
// end ; end ;
33583: LD_VAR 0 4
33587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
// if not list then
33592: LD_VAR 0 1
33596: NOT
33597: IFFALSE 33601
// exit ;
33599: GO 33692
// i := list [ pos1 ] ;
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_VAR 0 1
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: ST_TO_ADDR
// if not i then
33617: LD_VAR 0 5
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 33692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33626: LD_ADDR_VAR 0 1
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: LD_VAR 0 2
33640: PPUSH
33641: LD_VAR 0 1
33645: PUSH
33646: LD_VAR 0 3
33650: ARRAY
33651: PPUSH
33652: CALL_OW 1
33656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33657: LD_ADDR_VAR 0 1
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
// result := list ;
33682: LD_ADDR_VAR 0 4
33686: PUSH
33687: LD_VAR 0 1
33691: ST_TO_ADDR
// end ;
33692: LD_VAR 0 4
33696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33697: LD_INT 0
33699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33700: LD_ADDR_VAR 0 5
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 250
33714: PPUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 251
33724: PPUSH
33725: LD_VAR 0 2
33729: PPUSH
33730: LD_VAR 0 3
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL 34118 0 5
33744: ST_TO_ADDR
// end ;
33745: LD_VAR 0 5
33749: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
// if not list or not unit then
33756: LD_VAR 0 2
33760: NOT
33761: PUSH
33762: LD_VAR 0 1
33766: NOT
33767: OR
33768: IFFALSE 33772
// exit ;
33770: GO 34113
// result := [ ] ;
33772: LD_ADDR_VAR 0 5
33776: PUSH
33777: EMPTY
33778: ST_TO_ADDR
// for i in list do
33779: LD_ADDR_VAR 0 6
33783: PUSH
33784: LD_VAR 0 2
33788: PUSH
33789: FOR_IN
33790: IFFALSE 34008
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33792: LD_ADDR_VAR 0 8
33796: PUSH
33797: LD_VAR 0 1
33801: PPUSH
33802: LD_VAR 0 6
33806: PUSH
33807: LD_INT 1
33809: ARRAY
33810: PPUSH
33811: LD_VAR 0 6
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: PPUSH
33820: CALL_OW 297
33824: ST_TO_ADDR
// if not Count ( result ) then
33825: LD_VAR 0 5
33829: PPUSH
33830: CALL 30402 0 1
33834: NOT
33835: IFFALSE 33868
// begin result := Join ( result , [ i , tmp ] ) ;
33837: LD_ADDR_VAR 0 5
33841: PUSH
33842: LD_VAR 0 5
33846: PPUSH
33847: LD_VAR 0 6
33851: PUSH
33852: LD_VAR 0 8
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PPUSH
33861: CALL 66011 0 2
33865: ST_TO_ADDR
// continue ;
33866: GO 33789
// end ; if result [ result ] [ 2 ] <= tmp then
33868: LD_VAR 0 5
33872: PUSH
33873: LD_VAR 0 5
33877: ARRAY
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PUSH
33883: LD_VAR 0 8
33887: LESSEQUAL
33888: IFFALSE 33921
// result := Join ( result , [ i , tmp ] ) else
33890: LD_ADDR_VAR 0 5
33894: PUSH
33895: LD_VAR 0 5
33899: PPUSH
33900: LD_VAR 0 6
33904: PUSH
33905: LD_VAR 0 8
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL 66011 0 2
33918: ST_TO_ADDR
33919: GO 34006
// begin for j := 1 to Count ( result ) do
33921: LD_ADDR_VAR 0 7
33925: PUSH
33926: DOUBLE
33927: LD_INT 1
33929: DEC
33930: ST_TO_ADDR
33931: LD_VAR 0 5
33935: PPUSH
33936: CALL 30402 0 1
33940: PUSH
33941: FOR_TO
33942: IFFALSE 34004
// begin if tmp < result [ j ] [ 2 ] then
33944: LD_VAR 0 8
33948: PUSH
33949: LD_VAR 0 5
33953: PUSH
33954: LD_VAR 0 7
33958: ARRAY
33959: PUSH
33960: LD_INT 2
33962: ARRAY
33963: LESS
33964: IFFALSE 34002
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33966: LD_ADDR_VAR 0 5
33970: PUSH
33971: LD_VAR 0 5
33975: PPUSH
33976: LD_VAR 0 7
33980: PPUSH
33981: LD_VAR 0 6
33985: PUSH
33986: LD_VAR 0 8
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 2
33999: ST_TO_ADDR
// break ;
34000: GO 34004
// end ; end ;
34002: GO 33941
34004: POP
34005: POP
// end ; end ;
34006: GO 33789
34008: POP
34009: POP
// if result and not asc then
34010: LD_VAR 0 5
34014: PUSH
34015: LD_VAR 0 3
34019: NOT
34020: AND
34021: IFFALSE 34038
// result := ReverseArray ( result ) ;
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_VAR 0 5
34032: PPUSH
34033: CALL 61278 0 1
34037: ST_TO_ADDR
// tmp := [ ] ;
34038: LD_ADDR_VAR 0 8
34042: PUSH
34043: EMPTY
34044: ST_TO_ADDR
// if mode then
34045: LD_VAR 0 4
34049: IFFALSE 34113
// begin for i := 1 to result do
34051: LD_ADDR_VAR 0 6
34055: PUSH
34056: DOUBLE
34057: LD_INT 1
34059: DEC
34060: ST_TO_ADDR
34061: LD_VAR 0 5
34065: PUSH
34066: FOR_TO
34067: IFFALSE 34101
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34069: LD_ADDR_VAR 0 8
34073: PUSH
34074: LD_VAR 0 8
34078: PPUSH
34079: LD_VAR 0 5
34083: PUSH
34084: LD_VAR 0 6
34088: ARRAY
34089: PUSH
34090: LD_INT 1
34092: ARRAY
34093: PPUSH
34094: CALL 66011 0 2
34098: ST_TO_ADDR
34099: GO 34066
34101: POP
34102: POP
// result := tmp ;
34103: LD_ADDR_VAR 0 5
34107: PUSH
34108: LD_VAR 0 8
34112: ST_TO_ADDR
// end ; end ;
34113: LD_VAR 0 5
34117: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
// if not list then
34124: LD_VAR 0 3
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34521
// result := [ ] ;
34133: LD_ADDR_VAR 0 6
34137: PUSH
34138: EMPTY
34139: ST_TO_ADDR
// for i in list do
34140: LD_ADDR_VAR 0 7
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: FOR_IN
34151: IFFALSE 34353
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34153: LD_ADDR_VAR 0 9
34157: PUSH
34158: LD_VAR 0 7
34162: PPUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 297
34177: ST_TO_ADDR
// if not result then
34178: LD_VAR 0 6
34182: NOT
34183: IFFALSE 34209
// result := [ [ i , tmp ] ] else
34185: LD_ADDR_VAR 0 6
34189: PUSH
34190: LD_VAR 0 7
34194: PUSH
34195: LD_VAR 0 9
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: EMPTY
34205: LIST
34206: ST_TO_ADDR
34207: GO 34351
// begin if result [ result ] [ 2 ] <= tmp then
34209: LD_VAR 0 6
34213: PUSH
34214: LD_VAR 0 6
34218: ARRAY
34219: PUSH
34220: LD_INT 2
34222: ARRAY
34223: PUSH
34224: LD_VAR 0 9
34228: LESSEQUAL
34229: IFFALSE 34271
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34231: LD_ADDR_VAR 0 6
34235: PUSH
34236: LD_VAR 0 6
34240: PPUSH
34241: LD_VAR 0 6
34245: PUSH
34246: LD_INT 1
34248: PLUS
34249: PPUSH
34250: LD_VAR 0 7
34254: PUSH
34255: LD_VAR 0 9
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PPUSH
34264: CALL_OW 2
34268: ST_TO_ADDR
34269: GO 34351
// for j := 1 to result do
34271: LD_ADDR_VAR 0 8
34275: PUSH
34276: DOUBLE
34277: LD_INT 1
34279: DEC
34280: ST_TO_ADDR
34281: LD_VAR 0 6
34285: PUSH
34286: FOR_TO
34287: IFFALSE 34349
// begin if tmp < result [ j ] [ 2 ] then
34289: LD_VAR 0 9
34293: PUSH
34294: LD_VAR 0 6
34298: PUSH
34299: LD_VAR 0 8
34303: ARRAY
34304: PUSH
34305: LD_INT 2
34307: ARRAY
34308: LESS
34309: IFFALSE 34347
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34311: LD_ADDR_VAR 0 6
34315: PUSH
34316: LD_VAR 0 6
34320: PPUSH
34321: LD_VAR 0 8
34325: PPUSH
34326: LD_VAR 0 7
34330: PUSH
34331: LD_VAR 0 9
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PPUSH
34340: CALL_OW 2
34344: ST_TO_ADDR
// break ;
34345: GO 34349
// end ; end ;
34347: GO 34286
34349: POP
34350: POP
// end ; end ;
34351: GO 34150
34353: POP
34354: POP
// if result and not asc then
34355: LD_VAR 0 6
34359: PUSH
34360: LD_VAR 0 4
34364: NOT
34365: AND
34366: IFFALSE 34441
// begin tmp := result ;
34368: LD_ADDR_VAR 0 9
34372: PUSH
34373: LD_VAR 0 6
34377: ST_TO_ADDR
// for i = tmp downto 1 do
34378: LD_ADDR_VAR 0 7
34382: PUSH
34383: DOUBLE
34384: LD_VAR 0 9
34388: INC
34389: ST_TO_ADDR
34390: LD_INT 1
34392: PUSH
34393: FOR_DOWNTO
34394: IFFALSE 34439
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34396: LD_ADDR_VAR 0 6
34400: PUSH
34401: LD_VAR 0 6
34405: PPUSH
34406: LD_VAR 0 9
34410: PUSH
34411: LD_VAR 0 7
34415: MINUS
34416: PUSH
34417: LD_INT 1
34419: PLUS
34420: PPUSH
34421: LD_VAR 0 9
34425: PUSH
34426: LD_VAR 0 7
34430: ARRAY
34431: PPUSH
34432: CALL_OW 1
34436: ST_TO_ADDR
34437: GO 34393
34439: POP
34440: POP
// end ; tmp := [ ] ;
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: EMPTY
34447: ST_TO_ADDR
// if mode then
34448: LD_VAR 0 5
34452: IFFALSE 34521
// begin for i = 1 to result do
34454: LD_ADDR_VAR 0 7
34458: PUSH
34459: DOUBLE
34460: LD_INT 1
34462: DEC
34463: ST_TO_ADDR
34464: LD_VAR 0 6
34468: PUSH
34469: FOR_TO
34470: IFFALSE 34509
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34472: LD_ADDR_VAR 0 9
34476: PUSH
34477: LD_VAR 0 9
34481: PPUSH
34482: LD_VAR 0 7
34486: PPUSH
34487: LD_VAR 0 6
34491: PUSH
34492: LD_VAR 0 7
34496: ARRAY
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
34507: GO 34469
34509: POP
34510: POP
// result := tmp ;
34511: LD_ADDR_VAR 0 6
34515: PUSH
34516: LD_VAR 0 9
34520: ST_TO_ADDR
// end ; end ;
34521: LD_VAR 0 6
34525: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34526: LD_INT 0
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34534: LD_ADDR_VAR 0 5
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if not x or not y then
34556: LD_VAR 0 2
34560: NOT
34561: PUSH
34562: LD_VAR 0 3
34566: NOT
34567: OR
34568: IFFALSE 34572
// exit ;
34570: GO 36222
// if not range then
34572: LD_VAR 0 4
34576: NOT
34577: IFFALSE 34587
// range := 10 ;
34579: LD_ADDR_VAR 0 4
34583: PUSH
34584: LD_INT 10
34586: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34587: LD_ADDR_VAR 0 8
34591: PUSH
34592: LD_INT 81
34594: PUSH
34595: LD_VAR 0 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 92
34606: PUSH
34607: LD_VAR 0 2
34611: PUSH
34612: LD_VAR 0 3
34616: PUSH
34617: LD_VAR 0 4
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 3
34630: PUSH
34631: LD_INT 21
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 69
34654: ST_TO_ADDR
// if not tmp then
34655: LD_VAR 0 8
34659: NOT
34660: IFFALSE 34664
// exit ;
34662: GO 36222
// for i in tmp do
34664: LD_ADDR_VAR 0 6
34668: PUSH
34669: LD_VAR 0 8
34673: PUSH
34674: FOR_IN
34675: IFFALSE 36197
// begin points := [ 0 , 0 , 0 ] ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
// bpoints := 1 ;
34696: LD_ADDR_VAR 0 10
34700: PUSH
34701: LD_INT 1
34703: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34704: LD_VAR 0 6
34708: PPUSH
34709: CALL_OW 247
34713: PUSH
34714: LD_INT 1
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 35300
34722: POP
// begin if GetClass ( i ) = 1 then
34723: LD_VAR 0 6
34727: PPUSH
34728: CALL_OW 257
34732: PUSH
34733: LD_INT 1
34735: EQUAL
34736: IFFALSE 34757
// points := [ 10 , 5 , 3 ] ;
34738: LD_ADDR_VAR 0 9
34742: PUSH
34743: LD_INT 10
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34757: LD_VAR 0 6
34761: PPUSH
34762: CALL_OW 257
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 4
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: IN
34781: IFFALSE 34802
// points := [ 3 , 2 , 1 ] ;
34783: LD_ADDR_VAR 0 9
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34802: LD_VAR 0 6
34806: PPUSH
34807: CALL_OW 257
34811: PUSH
34812: LD_INT 5
34814: EQUAL
34815: IFFALSE 34836
// points := [ 130 , 5 , 2 ] ;
34817: LD_ADDR_VAR 0 9
34821: PUSH
34822: LD_INT 130
34824: PUSH
34825: LD_INT 5
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34836: LD_VAR 0 6
34840: PPUSH
34841: CALL_OW 257
34845: PUSH
34846: LD_INT 8
34848: EQUAL
34849: IFFALSE 34870
// points := [ 35 , 35 , 30 ] ;
34851: LD_ADDR_VAR 0 9
34855: PUSH
34856: LD_INT 35
34858: PUSH
34859: LD_INT 35
34861: PUSH
34862: LD_INT 30
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34870: LD_VAR 0 6
34874: PPUSH
34875: CALL_OW 257
34879: PUSH
34880: LD_INT 9
34882: EQUAL
34883: IFFALSE 34904
// points := [ 20 , 55 , 40 ] ;
34885: LD_ADDR_VAR 0 9
34889: PUSH
34890: LD_INT 20
34892: PUSH
34893: LD_INT 55
34895: PUSH
34896: LD_INT 40
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34904: LD_VAR 0 6
34908: PPUSH
34909: CALL_OW 257
34913: PUSH
34914: LD_INT 12
34916: PUSH
34917: LD_INT 16
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: IN
34924: IFFALSE 34945
// points := [ 5 , 3 , 2 ] ;
34926: LD_ADDR_VAR 0 9
34930: PUSH
34931: LD_INT 5
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34945: LD_VAR 0 6
34949: PPUSH
34950: CALL_OW 257
34954: PUSH
34955: LD_INT 17
34957: EQUAL
34958: IFFALSE 34979
// points := [ 100 , 50 , 75 ] ;
34960: LD_ADDR_VAR 0 9
34964: PUSH
34965: LD_INT 100
34967: PUSH
34968: LD_INT 50
34970: PUSH
34971: LD_INT 75
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34979: LD_VAR 0 6
34983: PPUSH
34984: CALL_OW 257
34988: PUSH
34989: LD_INT 15
34991: EQUAL
34992: IFFALSE 35013
// points := [ 10 , 5 , 3 ] ;
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_INT 10
35001: PUSH
35002: LD_INT 5
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35013: LD_VAR 0 6
35017: PPUSH
35018: CALL_OW 257
35022: PUSH
35023: LD_INT 14
35025: EQUAL
35026: IFFALSE 35047
// points := [ 10 , 0 , 0 ] ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_INT 10
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35047: LD_VAR 0 6
35051: PPUSH
35052: CALL_OW 257
35056: PUSH
35057: LD_INT 11
35059: EQUAL
35060: IFFALSE 35081
// points := [ 30 , 10 , 5 ] ;
35062: LD_ADDR_VAR 0 9
35066: PUSH
35067: LD_INT 30
35069: PUSH
35070: LD_INT 10
35072: PUSH
35073: LD_INT 5
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35081: LD_VAR 0 1
35085: PPUSH
35086: LD_INT 5
35088: PPUSH
35089: CALL_OW 321
35093: PUSH
35094: LD_INT 2
35096: EQUAL
35097: IFFALSE 35114
// bpoints := bpoints * 1.8 ;
35099: LD_ADDR_VAR 0 10
35103: PUSH
35104: LD_VAR 0 10
35108: PUSH
35109: LD_REAL  1.80000000000000E+0000
35112: MUL
35113: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 257
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: LD_INT 4
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: IN
35142: PUSH
35143: LD_VAR 0 1
35147: PPUSH
35148: LD_INT 51
35150: PPUSH
35151: CALL_OW 321
35155: PUSH
35156: LD_INT 2
35158: EQUAL
35159: AND
35160: IFFALSE 35177
// bpoints := bpoints * 1.2 ;
35162: LD_ADDR_VAR 0 10
35166: PUSH
35167: LD_VAR 0 10
35171: PUSH
35172: LD_REAL  1.20000000000000E+0000
35175: MUL
35176: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35177: LD_VAR 0 6
35181: PPUSH
35182: CALL_OW 257
35186: PUSH
35187: LD_INT 5
35189: PUSH
35190: LD_INT 7
35192: PUSH
35193: LD_INT 9
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: IN
35201: PUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: LD_INT 52
35209: PPUSH
35210: CALL_OW 321
35214: PUSH
35215: LD_INT 2
35217: EQUAL
35218: AND
35219: IFFALSE 35236
// bpoints := bpoints * 1.5 ;
35221: LD_ADDR_VAR 0 10
35225: PUSH
35226: LD_VAR 0 10
35230: PUSH
35231: LD_REAL  1.50000000000000E+0000
35234: MUL
35235: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35236: LD_VAR 0 1
35240: PPUSH
35241: LD_INT 66
35243: PPUSH
35244: CALL_OW 321
35248: PUSH
35249: LD_INT 2
35251: EQUAL
35252: IFFALSE 35269
// bpoints := bpoints * 1.1 ;
35254: LD_ADDR_VAR 0 10
35258: PUSH
35259: LD_VAR 0 10
35263: PUSH
35264: LD_REAL  1.10000000000000E+0000
35267: MUL
35268: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35269: LD_ADDR_VAR 0 10
35273: PUSH
35274: LD_VAR 0 10
35278: PUSH
35279: LD_VAR 0 6
35283: PPUSH
35284: LD_INT 1
35286: PPUSH
35287: CALL_OW 259
35291: PUSH
35292: LD_REAL  1.15000000000000E+0000
35295: MUL
35296: MUL
35297: ST_TO_ADDR
// end ; unit_vehicle :
35298: GO 36126
35300: LD_INT 2
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 36114
35308: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35309: LD_VAR 0 6
35313: PPUSH
35314: CALL_OW 264
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 42
35324: PUSH
35325: LD_INT 24
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: IN
35333: IFFALSE 35354
// points := [ 25 , 5 , 3 ] ;
35335: LD_ADDR_VAR 0 9
35339: PUSH
35340: LD_INT 25
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: LD_INT 3
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35354: LD_VAR 0 6
35358: PPUSH
35359: CALL_OW 264
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: LD_INT 43
35369: PUSH
35370: LD_INT 25
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: IN
35378: IFFALSE 35399
// points := [ 40 , 15 , 5 ] ;
35380: LD_ADDR_VAR 0 9
35384: PUSH
35385: LD_INT 40
35387: PUSH
35388: LD_INT 15
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35399: LD_VAR 0 6
35403: PPUSH
35404: CALL_OW 264
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: LD_INT 23
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: IN
35419: IFFALSE 35440
// points := [ 7 , 25 , 8 ] ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_INT 7
35428: PUSH
35429: LD_INT 25
35431: PUSH
35432: LD_INT 8
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35440: LD_VAR 0 6
35444: PPUSH
35445: CALL_OW 264
35449: PUSH
35450: LD_INT 5
35452: PUSH
35453: LD_INT 27
35455: PUSH
35456: LD_INT 44
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: IN
35464: IFFALSE 35485
// points := [ 14 , 50 , 16 ] ;
35466: LD_ADDR_VAR 0 9
35470: PUSH
35471: LD_INT 14
35473: PUSH
35474: LD_INT 50
35476: PUSH
35477: LD_INT 16
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35485: LD_VAR 0 6
35489: PPUSH
35490: CALL_OW 264
35494: PUSH
35495: LD_INT 6
35497: PUSH
35498: LD_INT 46
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: IN
35505: IFFALSE 35526
// points := [ 32 , 120 , 70 ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_INT 32
35514: PUSH
35515: LD_INT 120
35517: PUSH
35518: LD_INT 70
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 264
35535: PUSH
35536: LD_INT 7
35538: PUSH
35539: LD_INT 28
35541: PUSH
35542: LD_INT 45
35544: PUSH
35545: LD_INT 92
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: IN
35554: IFFALSE 35575
// points := [ 35 , 20 , 45 ] ;
35556: LD_ADDR_VAR 0 9
35560: PUSH
35561: LD_INT 35
35563: PUSH
35564: LD_INT 20
35566: PUSH
35567: LD_INT 45
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35575: LD_VAR 0 6
35579: PPUSH
35580: CALL_OW 264
35584: PUSH
35585: LD_INT 47
35587: PUSH
35588: EMPTY
35589: LIST
35590: IN
35591: IFFALSE 35612
// points := [ 67 , 45 , 75 ] ;
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_INT 67
35600: PUSH
35601: LD_INT 45
35603: PUSH
35604: LD_INT 75
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 264
35621: PUSH
35622: LD_INT 26
35624: PUSH
35625: EMPTY
35626: LIST
35627: IN
35628: IFFALSE 35649
// points := [ 120 , 30 , 80 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 120
35637: PUSH
35638: LD_INT 30
35640: PUSH
35641: LD_INT 80
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 264
35658: PUSH
35659: LD_INT 22
35661: PUSH
35662: EMPTY
35663: LIST
35664: IN
35665: IFFALSE 35686
// points := [ 40 , 1 , 1 ] ;
35667: LD_ADDR_VAR 0 9
35671: PUSH
35672: LD_INT 40
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35686: LD_VAR 0 6
35690: PPUSH
35691: CALL_OW 264
35695: PUSH
35696: LD_INT 29
35698: PUSH
35699: EMPTY
35700: LIST
35701: IN
35702: IFFALSE 35723
// points := [ 70 , 200 , 400 ] ;
35704: LD_ADDR_VAR 0 9
35708: PUSH
35709: LD_INT 70
35711: PUSH
35712: LD_INT 200
35714: PUSH
35715: LD_INT 400
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35723: LD_VAR 0 6
35727: PPUSH
35728: CALL_OW 264
35732: PUSH
35733: LD_INT 14
35735: PUSH
35736: LD_INT 53
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: IN
35743: IFFALSE 35764
// points := [ 40 , 10 , 20 ] ;
35745: LD_ADDR_VAR 0 9
35749: PUSH
35750: LD_INT 40
35752: PUSH
35753: LD_INT 10
35755: PUSH
35756: LD_INT 20
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35764: LD_VAR 0 6
35768: PPUSH
35769: CALL_OW 264
35773: PUSH
35774: LD_INT 9
35776: PUSH
35777: EMPTY
35778: LIST
35779: IN
35780: IFFALSE 35801
// points := [ 5 , 70 , 20 ] ;
35782: LD_ADDR_VAR 0 9
35786: PUSH
35787: LD_INT 5
35789: PUSH
35790: LD_INT 70
35792: PUSH
35793: LD_INT 20
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35801: LD_VAR 0 6
35805: PPUSH
35806: CALL_OW 264
35810: PUSH
35811: LD_INT 10
35813: PUSH
35814: EMPTY
35815: LIST
35816: IN
35817: IFFALSE 35838
// points := [ 35 , 110 , 70 ] ;
35819: LD_ADDR_VAR 0 9
35823: PUSH
35824: LD_INT 35
35826: PUSH
35827: LD_INT 110
35829: PUSH
35830: LD_INT 70
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35838: LD_VAR 0 6
35842: PPUSH
35843: CALL_OW 265
35847: PUSH
35848: LD_INT 25
35850: EQUAL
35851: IFFALSE 35872
// points := [ 80 , 65 , 100 ] ;
35853: LD_ADDR_VAR 0 9
35857: PUSH
35858: LD_INT 80
35860: PUSH
35861: LD_INT 65
35863: PUSH
35864: LD_INT 100
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35872: LD_VAR 0 6
35876: PPUSH
35877: CALL_OW 263
35881: PUSH
35882: LD_INT 1
35884: EQUAL
35885: IFFALSE 35920
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35887: LD_ADDR_VAR 0 10
35891: PUSH
35892: LD_VAR 0 10
35896: PUSH
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 311
35906: PPUSH
35907: LD_INT 3
35909: PPUSH
35910: CALL_OW 259
35914: PUSH
35915: LD_INT 4
35917: MUL
35918: MUL
35919: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 263
35929: PUSH
35930: LD_INT 2
35932: EQUAL
35933: IFFALSE 35984
// begin j := IsControledBy ( i ) ;
35935: LD_ADDR_VAR 0 7
35939: PUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: CALL_OW 312
35949: ST_TO_ADDR
// if j then
35950: LD_VAR 0 7
35954: IFFALSE 35984
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35956: LD_ADDR_VAR 0 10
35960: PUSH
35961: LD_VAR 0 10
35965: PUSH
35966: LD_VAR 0 7
35970: PPUSH
35971: LD_INT 3
35973: PPUSH
35974: CALL_OW 259
35978: PUSH
35979: LD_INT 3
35981: MUL
35982: MUL
35983: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 264
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: LD_INT 6
35999: PUSH
36000: LD_INT 46
36002: PUSH
36003: LD_INT 44
36005: PUSH
36006: LD_INT 47
36008: PUSH
36009: LD_INT 45
36011: PUSH
36012: LD_INT 28
36014: PUSH
36015: LD_INT 7
36017: PUSH
36018: LD_INT 27
36020: PUSH
36021: LD_INT 29
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: IN
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: LD_INT 52
36044: PPUSH
36045: CALL_OW 321
36049: PUSH
36050: LD_INT 2
36052: EQUAL
36053: AND
36054: IFFALSE 36071
// bpoints := bpoints * 1.2 ;
36056: LD_ADDR_VAR 0 10
36060: PUSH
36061: LD_VAR 0 10
36065: PUSH
36066: LD_REAL  1.20000000000000E+0000
36069: MUL
36070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 264
36080: PUSH
36081: LD_INT 6
36083: PUSH
36084: LD_INT 46
36086: PUSH
36087: LD_INT 47
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: IN
36095: IFFALSE 36112
// bpoints := bpoints * 1.2 ;
36097: LD_ADDR_VAR 0 10
36101: PUSH
36102: LD_VAR 0 10
36106: PUSH
36107: LD_REAL  1.20000000000000E+0000
36110: MUL
36111: ST_TO_ADDR
// end ; unit_building :
36112: GO 36126
36114: LD_INT 3
36116: DOUBLE
36117: EQUAL
36118: IFTRUE 36122
36120: GO 36125
36122: POP
// ; end ;
36123: GO 36126
36125: POP
// for j = 1 to 3 do
36126: LD_ADDR_VAR 0 7
36130: PUSH
36131: DOUBLE
36132: LD_INT 1
36134: DEC
36135: ST_TO_ADDR
36136: LD_INT 3
36138: PUSH
36139: FOR_TO
36140: IFFALSE 36193
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_VAR 0 5
36151: PPUSH
36152: LD_VAR 0 7
36156: PPUSH
36157: LD_VAR 0 5
36161: PUSH
36162: LD_VAR 0 7
36166: ARRAY
36167: PUSH
36168: LD_VAR 0 9
36172: PUSH
36173: LD_VAR 0 7
36177: ARRAY
36178: PUSH
36179: LD_VAR 0 10
36183: MUL
36184: PLUS
36185: PPUSH
36186: CALL_OW 1
36190: ST_TO_ADDR
36191: GO 36139
36193: POP
36194: POP
// end ;
36195: GO 34674
36197: POP
36198: POP
// result := Replace ( result , 4 , tmp ) ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_VAR 0 5
36208: PPUSH
36209: LD_INT 4
36211: PPUSH
36212: LD_VAR 0 8
36216: PPUSH
36217: CALL_OW 1
36221: ST_TO_ADDR
// end ;
36222: LD_VAR 0 5
36226: RET
// export function DangerAtRange ( unit , range ) ; begin
36227: LD_INT 0
36229: PPUSH
// if not unit then
36230: LD_VAR 0 1
36234: NOT
36235: IFFALSE 36239
// exit ;
36237: GO 36284
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 255
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 250
36263: PPUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 251
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: CALL 34526 0 4
36283: ST_TO_ADDR
// end ;
36284: LD_VAR 0 3
36288: RET
// export function DangerInArea ( side , area ) ; begin
36289: LD_INT 0
36291: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36292: LD_ADDR_VAR 0 3
36296: PUSH
36297: LD_VAR 0 2
36301: PPUSH
36302: LD_INT 81
36304: PUSH
36305: LD_VAR 0 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PPUSH
36314: CALL_OW 70
36318: ST_TO_ADDR
// end ;
36319: LD_VAR 0 3
36323: RET
// export function IsExtension ( b ) ; begin
36324: LD_INT 0
36326: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36327: LD_ADDR_VAR 0 2
36331: PUSH
36332: LD_VAR 0 1
36336: PUSH
36337: LD_INT 23
36339: PUSH
36340: LD_INT 20
36342: PUSH
36343: LD_INT 22
36345: PUSH
36346: LD_INT 17
36348: PUSH
36349: LD_INT 24
36351: PUSH
36352: LD_INT 21
36354: PUSH
36355: LD_INT 19
36357: PUSH
36358: LD_INT 16
36360: PUSH
36361: LD_INT 25
36363: PUSH
36364: LD_INT 18
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: IN
36379: ST_TO_ADDR
// end ;
36380: LD_VAR 0 2
36384: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36385: LD_INT 0
36387: PPUSH
36388: PPUSH
36389: PPUSH
// result := [ ] ;
36390: LD_ADDR_VAR 0 4
36394: PUSH
36395: EMPTY
36396: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36397: LD_ADDR_VAR 0 5
36401: PUSH
36402: LD_VAR 0 2
36406: PPUSH
36407: LD_INT 21
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PPUSH
36417: CALL_OW 70
36421: ST_TO_ADDR
// if not tmp then
36422: LD_VAR 0 5
36426: NOT
36427: IFFALSE 36431
// exit ;
36429: GO 36495
// if checkLink then
36431: LD_VAR 0 3
36435: IFFALSE 36485
// begin for i in tmp do
36437: LD_ADDR_VAR 0 6
36441: PUSH
36442: LD_VAR 0 5
36446: PUSH
36447: FOR_IN
36448: IFFALSE 36483
// if GetBase ( i ) <> base then
36450: LD_VAR 0 6
36454: PPUSH
36455: CALL_OW 274
36459: PUSH
36460: LD_VAR 0 1
36464: NONEQUAL
36465: IFFALSE 36481
// ComLinkToBase ( base , i ) ;
36467: LD_VAR 0 1
36471: PPUSH
36472: LD_VAR 0 6
36476: PPUSH
36477: CALL_OW 169
36481: GO 36447
36483: POP
36484: POP
// end ; result := tmp ;
36485: LD_ADDR_VAR 0 4
36489: PUSH
36490: LD_VAR 0 5
36494: ST_TO_ADDR
// end ;
36495: LD_VAR 0 4
36499: RET
// export function ComComplete ( units , b ) ; var i ; begin
36500: LD_INT 0
36502: PPUSH
36503: PPUSH
// if not units then
36504: LD_VAR 0 1
36508: NOT
36509: IFFALSE 36513
// exit ;
36511: GO 36603
// for i in units do
36513: LD_ADDR_VAR 0 4
36517: PUSH
36518: LD_VAR 0 1
36522: PUSH
36523: FOR_IN
36524: IFFALSE 36601
// if BuildingStatus ( b ) = bs_build then
36526: LD_VAR 0 2
36530: PPUSH
36531: CALL_OW 461
36535: PUSH
36536: LD_INT 1
36538: EQUAL
36539: IFFALSE 36599
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36541: LD_VAR 0 4
36545: PPUSH
36546: LD_STRING h
36548: PUSH
36549: LD_VAR 0 2
36553: PPUSH
36554: CALL_OW 250
36558: PUSH
36559: LD_VAR 0 2
36563: PPUSH
36564: CALL_OW 251
36568: PUSH
36569: LD_VAR 0 2
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: PPUSH
36595: CALL_OW 446
36599: GO 36523
36601: POP
36602: POP
// end ;
36603: LD_VAR 0 3
36607: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36608: LD_INT 0
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36616: LD_VAR 0 1
36620: NOT
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: CALL_OW 263
36631: PUSH
36632: LD_INT 2
36634: NONEQUAL
36635: OR
36636: IFFALSE 36640
// exit ;
36638: GO 36956
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36640: LD_ADDR_VAR 0 6
36644: PUSH
36645: LD_INT 22
36647: PUSH
36648: LD_VAR 0 1
36652: PPUSH
36653: CALL_OW 255
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 30
36667: PUSH
36668: LD_INT 36
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 34
36677: PUSH
36678: LD_INT 31
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 69
36698: ST_TO_ADDR
// if not tmp then
36699: LD_VAR 0 6
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36956
// result := [ ] ;
36708: LD_ADDR_VAR 0 2
36712: PUSH
36713: EMPTY
36714: ST_TO_ADDR
// for i in tmp do
36715: LD_ADDR_VAR 0 3
36719: PUSH
36720: LD_VAR 0 6
36724: PUSH
36725: FOR_IN
36726: IFFALSE 36797
// begin t := UnitsInside ( i ) ;
36728: LD_ADDR_VAR 0 4
36732: PUSH
36733: LD_VAR 0 3
36737: PPUSH
36738: CALL_OW 313
36742: ST_TO_ADDR
// if t then
36743: LD_VAR 0 4
36747: IFFALSE 36795
// for j in t do
36749: LD_ADDR_VAR 0 7
36753: PUSH
36754: LD_VAR 0 4
36758: PUSH
36759: FOR_IN
36760: IFFALSE 36793
// result := Replace ( result , result + 1 , j ) ;
36762: LD_ADDR_VAR 0 2
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 1
36779: PLUS
36780: PPUSH
36781: LD_VAR 0 7
36785: PPUSH
36786: CALL_OW 1
36790: ST_TO_ADDR
36791: GO 36759
36793: POP
36794: POP
// end ;
36795: GO 36725
36797: POP
36798: POP
// if not result then
36799: LD_VAR 0 2
36803: NOT
36804: IFFALSE 36808
// exit ;
36806: GO 36956
// mech := result [ 1 ] ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 2
36817: PUSH
36818: LD_INT 1
36820: ARRAY
36821: ST_TO_ADDR
// if result > 1 then
36822: LD_VAR 0 2
36826: PUSH
36827: LD_INT 1
36829: GREATER
36830: IFFALSE 36942
// begin for i = 2 to result do
36832: LD_ADDR_VAR 0 3
36836: PUSH
36837: DOUBLE
36838: LD_INT 2
36840: DEC
36841: ST_TO_ADDR
36842: LD_VAR 0 2
36846: PUSH
36847: FOR_TO
36848: IFFALSE 36940
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36850: LD_ADDR_VAR 0 4
36854: PUSH
36855: LD_VAR 0 2
36859: PUSH
36860: LD_VAR 0 3
36864: ARRAY
36865: PPUSH
36866: LD_INT 3
36868: PPUSH
36869: CALL_OW 259
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: LD_VAR 0 3
36883: ARRAY
36884: PPUSH
36885: CALL_OW 432
36889: MINUS
36890: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36891: LD_VAR 0 4
36895: PUSH
36896: LD_VAR 0 5
36900: PPUSH
36901: LD_INT 3
36903: PPUSH
36904: CALL_OW 259
36908: PUSH
36909: LD_VAR 0 5
36913: PPUSH
36914: CALL_OW 432
36918: MINUS
36919: GREATEREQUAL
36920: IFFALSE 36938
// mech := result [ i ] ;
36922: LD_ADDR_VAR 0 5
36926: PUSH
36927: LD_VAR 0 2
36931: PUSH
36932: LD_VAR 0 3
36936: ARRAY
36937: ST_TO_ADDR
// end ;
36938: GO 36847
36940: POP
36941: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36942: LD_VAR 0 1
36946: PPUSH
36947: LD_VAR 0 5
36951: PPUSH
36952: CALL_OW 135
// end ;
36956: LD_VAR 0 2
36960: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36961: LD_INT 0
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
// result := [ ] ;
36976: LD_ADDR_VAR 0 7
36980: PUSH
36981: EMPTY
36982: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 266
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: IN
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 38642
// if name then
37008: LD_VAR 0 3
37012: IFFALSE 37028
// SetBName ( base_dep , name ) ;
37014: LD_VAR 0 1
37018: PPUSH
37019: LD_VAR 0 3
37023: PPUSH
37024: CALL_OW 500
// base := GetBase ( base_dep ) ;
37028: LD_ADDR_VAR 0 15
37032: PUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 274
37042: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37043: LD_ADDR_VAR 0 16
37047: PUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL_OW 255
37057: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37058: LD_ADDR_VAR 0 17
37062: PUSH
37063: LD_VAR 0 1
37067: PPUSH
37068: CALL_OW 248
37072: ST_TO_ADDR
// if sources then
37073: LD_VAR 0 5
37077: IFFALSE 37124
// for i = 1 to 3 do
37079: LD_ADDR_VAR 0 8
37083: PUSH
37084: DOUBLE
37085: LD_INT 1
37087: DEC
37088: ST_TO_ADDR
37089: LD_INT 3
37091: PUSH
37092: FOR_TO
37093: IFFALSE 37122
// AddResourceType ( base , i , sources [ i ] ) ;
37095: LD_VAR 0 15
37099: PPUSH
37100: LD_VAR 0 8
37104: PPUSH
37105: LD_VAR 0 5
37109: PUSH
37110: LD_VAR 0 8
37114: ARRAY
37115: PPUSH
37116: CALL_OW 276
37120: GO 37092
37122: POP
37123: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37124: LD_ADDR_VAR 0 18
37128: PUSH
37129: LD_VAR 0 15
37133: PPUSH
37134: LD_VAR 0 2
37138: PPUSH
37139: LD_INT 1
37141: PPUSH
37142: CALL 36385 0 3
37146: ST_TO_ADDR
// InitHc ;
37147: CALL_OW 19
// InitUc ;
37151: CALL_OW 18
// uc_side := side ;
37155: LD_ADDR_OWVAR 20
37159: PUSH
37160: LD_VAR 0 16
37164: ST_TO_ADDR
// uc_nation := nation ;
37165: LD_ADDR_OWVAR 21
37169: PUSH
37170: LD_VAR 0 17
37174: ST_TO_ADDR
// if buildings then
37175: LD_VAR 0 18
37179: IFFALSE 38501
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37181: LD_ADDR_VAR 0 19
37185: PUSH
37186: LD_VAR 0 18
37190: PPUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 30
37196: PUSH
37197: LD_INT 29
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 30
37206: PUSH
37207: LD_INT 30
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 72
37223: ST_TO_ADDR
// if tmp then
37224: LD_VAR 0 19
37228: IFFALSE 37276
// for i in tmp do
37230: LD_ADDR_VAR 0 8
37234: PUSH
37235: LD_VAR 0 19
37239: PUSH
37240: FOR_IN
37241: IFFALSE 37274
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37243: LD_VAR 0 8
37247: PPUSH
37248: CALL_OW 250
37252: PPUSH
37253: LD_VAR 0 8
37257: PPUSH
37258: CALL_OW 251
37262: PPUSH
37263: LD_VAR 0 16
37267: PPUSH
37268: CALL_OW 441
37272: GO 37240
37274: POP
37275: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37276: LD_VAR 0 18
37280: PPUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 30
37286: PUSH
37287: LD_INT 32
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 30
37296: PUSH
37297: LD_INT 33
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 72
37313: IFFALSE 37401
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37315: LD_ADDR_VAR 0 8
37319: PUSH
37320: LD_VAR 0 18
37324: PPUSH
37325: LD_INT 2
37327: PUSH
37328: LD_INT 30
37330: PUSH
37331: LD_INT 32
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 30
37340: PUSH
37341: LD_INT 33
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PPUSH
37353: CALL_OW 72
37357: PUSH
37358: FOR_IN
37359: IFFALSE 37399
// begin if not GetBWeapon ( i ) then
37361: LD_VAR 0 8
37365: PPUSH
37366: CALL_OW 269
37370: NOT
37371: IFFALSE 37397
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37373: LD_VAR 0 8
37377: PPUSH
37378: LD_VAR 0 8
37382: PPUSH
37383: LD_VAR 0 2
37387: PPUSH
37388: CALL 38647 0 2
37392: PPUSH
37393: CALL_OW 431
// end ;
37397: GO 37358
37399: POP
37400: POP
// end ; for i = 1 to personel do
37401: LD_ADDR_VAR 0 8
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 6
37415: PUSH
37416: FOR_TO
37417: IFFALSE 38481
// begin if i > 4 then
37419: LD_VAR 0 8
37423: PUSH
37424: LD_INT 4
37426: GREATER
37427: IFFALSE 37431
// break ;
37429: GO 38481
// case i of 1 :
37431: LD_VAR 0 8
37435: PUSH
37436: LD_INT 1
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37444
37442: GO 37524
37444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37445: LD_ADDR_VAR 0 12
37449: PUSH
37450: LD_VAR 0 18
37454: PPUSH
37455: LD_INT 22
37457: PUSH
37458: LD_VAR 0 16
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 58
37469: PUSH
37470: EMPTY
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 30
37478: PUSH
37479: LD_INT 32
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 30
37488: PUSH
37489: LD_INT 4
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 30
37498: PUSH
37499: LD_INT 5
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: PPUSH
37517: CALL_OW 72
37521: ST_TO_ADDR
37522: GO 37746
37524: LD_INT 2
37526: DOUBLE
37527: EQUAL
37528: IFTRUE 37532
37530: GO 37594
37532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37533: LD_ADDR_VAR 0 12
37537: PUSH
37538: LD_VAR 0 18
37542: PPUSH
37543: LD_INT 22
37545: PUSH
37546: LD_VAR 0 16
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: LD_INT 30
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 30
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PPUSH
37587: CALL_OW 72
37591: ST_TO_ADDR
37592: GO 37746
37594: LD_INT 3
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37602
37600: GO 37664
37602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37603: LD_ADDR_VAR 0 12
37607: PUSH
37608: LD_VAR 0 18
37612: PPUSH
37613: LD_INT 22
37615: PUSH
37616: LD_VAR 0 16
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 30
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 30
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PPUSH
37657: CALL_OW 72
37661: ST_TO_ADDR
37662: GO 37746
37664: LD_INT 4
37666: DOUBLE
37667: EQUAL
37668: IFTRUE 37672
37670: GO 37745
37672: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37673: LD_ADDR_VAR 0 12
37677: PUSH
37678: LD_VAR 0 18
37682: PPUSH
37683: LD_INT 22
37685: PUSH
37686: LD_VAR 0 16
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 30
37700: PUSH
37701: LD_INT 6
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 30
37710: PUSH
37711: LD_INT 7
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 30
37720: PUSH
37721: LD_INT 8
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PPUSH
37738: CALL_OW 72
37742: ST_TO_ADDR
37743: GO 37746
37745: POP
// if i = 1 then
37746: LD_VAR 0 8
37750: PUSH
37751: LD_INT 1
37753: EQUAL
37754: IFFALSE 37865
// begin tmp := [ ] ;
37756: LD_ADDR_VAR 0 19
37760: PUSH
37761: EMPTY
37762: ST_TO_ADDR
// for j in f do
37763: LD_ADDR_VAR 0 9
37767: PUSH
37768: LD_VAR 0 12
37772: PUSH
37773: FOR_IN
37774: IFFALSE 37847
// if GetBType ( j ) = b_bunker then
37776: LD_VAR 0 9
37780: PPUSH
37781: CALL_OW 266
37785: PUSH
37786: LD_INT 32
37788: EQUAL
37789: IFFALSE 37816
// tmp := Insert ( tmp , 1 , j ) else
37791: LD_ADDR_VAR 0 19
37795: PUSH
37796: LD_VAR 0 19
37800: PPUSH
37801: LD_INT 1
37803: PPUSH
37804: LD_VAR 0 9
37808: PPUSH
37809: CALL_OW 2
37813: ST_TO_ADDR
37814: GO 37845
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37816: LD_ADDR_VAR 0 19
37820: PUSH
37821: LD_VAR 0 19
37825: PPUSH
37826: LD_VAR 0 19
37830: PUSH
37831: LD_INT 1
37833: PLUS
37834: PPUSH
37835: LD_VAR 0 9
37839: PPUSH
37840: CALL_OW 2
37844: ST_TO_ADDR
37845: GO 37773
37847: POP
37848: POP
// if tmp then
37849: LD_VAR 0 19
37853: IFFALSE 37865
// f := tmp ;
37855: LD_ADDR_VAR 0 12
37859: PUSH
37860: LD_VAR 0 19
37864: ST_TO_ADDR
// end ; x := personel [ i ] ;
37865: LD_ADDR_VAR 0 13
37869: PUSH
37870: LD_VAR 0 6
37874: PUSH
37875: LD_VAR 0 8
37879: ARRAY
37880: ST_TO_ADDR
// if x = - 1 then
37881: LD_VAR 0 13
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: EQUAL
37890: IFFALSE 38099
// begin for j in f do
37892: LD_ADDR_VAR 0 9
37896: PUSH
37897: LD_VAR 0 12
37901: PUSH
37902: FOR_IN
37903: IFFALSE 38095
// repeat InitHc ;
37905: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37909: LD_VAR 0 9
37913: PPUSH
37914: CALL_OW 266
37918: PUSH
37919: LD_INT 5
37921: EQUAL
37922: IFFALSE 37992
// begin if UnitsInside ( j ) < 3 then
37924: LD_VAR 0 9
37928: PPUSH
37929: CALL_OW 313
37933: PUSH
37934: LD_INT 3
37936: LESS
37937: IFFALSE 37973
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37939: LD_INT 0
37941: PPUSH
37942: LD_INT 5
37944: PUSH
37945: LD_INT 8
37947: PUSH
37948: LD_INT 9
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: PUSH
37956: LD_VAR 0 17
37960: ARRAY
37961: PPUSH
37962: LD_VAR 0 4
37966: PPUSH
37967: CALL_OW 380
37971: GO 37990
// PrepareHuman ( false , i , skill ) ;
37973: LD_INT 0
37975: PPUSH
37976: LD_VAR 0 8
37980: PPUSH
37981: LD_VAR 0 4
37985: PPUSH
37986: CALL_OW 380
// end else
37990: GO 38009
// PrepareHuman ( false , i , skill ) ;
37992: LD_INT 0
37994: PPUSH
37995: LD_VAR 0 8
37999: PPUSH
38000: LD_VAR 0 4
38004: PPUSH
38005: CALL_OW 380
// un := CreateHuman ;
38009: LD_ADDR_VAR 0 14
38013: PUSH
38014: CALL_OW 44
38018: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38019: LD_ADDR_VAR 0 7
38023: PUSH
38024: LD_VAR 0 7
38028: PPUSH
38029: LD_INT 1
38031: PPUSH
38032: LD_VAR 0 14
38036: PPUSH
38037: CALL_OW 2
38041: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38042: LD_VAR 0 14
38046: PPUSH
38047: LD_VAR 0 9
38051: PPUSH
38052: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38056: LD_VAR 0 9
38060: PPUSH
38061: CALL_OW 313
38065: PUSH
38066: LD_INT 6
38068: EQUAL
38069: PUSH
38070: LD_VAR 0 9
38074: PPUSH
38075: CALL_OW 266
38079: PUSH
38080: LD_INT 32
38082: PUSH
38083: LD_INT 31
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: IN
38090: OR
38091: IFFALSE 37905
38093: GO 37902
38095: POP
38096: POP
// end else
38097: GO 38479
// for j = 1 to x do
38099: LD_ADDR_VAR 0 9
38103: PUSH
38104: DOUBLE
38105: LD_INT 1
38107: DEC
38108: ST_TO_ADDR
38109: LD_VAR 0 13
38113: PUSH
38114: FOR_TO
38115: IFFALSE 38477
// begin InitHc ;
38117: CALL_OW 19
// if not f then
38121: LD_VAR 0 12
38125: NOT
38126: IFFALSE 38215
// begin PrepareHuman ( false , i , skill ) ;
38128: LD_INT 0
38130: PPUSH
38131: LD_VAR 0 8
38135: PPUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: CALL_OW 380
// un := CreateHuman ;
38145: LD_ADDR_VAR 0 14
38149: PUSH
38150: CALL_OW 44
38154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38155: LD_ADDR_VAR 0 7
38159: PUSH
38160: LD_VAR 0 7
38164: PPUSH
38165: LD_INT 1
38167: PPUSH
38168: LD_VAR 0 14
38172: PPUSH
38173: CALL_OW 2
38177: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38178: LD_VAR 0 14
38182: PPUSH
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 250
38192: PPUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 251
38202: PPUSH
38203: LD_INT 10
38205: PPUSH
38206: LD_INT 0
38208: PPUSH
38209: CALL_OW 50
// continue ;
38213: GO 38114
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38215: LD_VAR 0 12
38219: PUSH
38220: LD_INT 1
38222: ARRAY
38223: PPUSH
38224: CALL_OW 313
38228: PUSH
38229: LD_VAR 0 12
38233: PUSH
38234: LD_INT 1
38236: ARRAY
38237: PPUSH
38238: CALL_OW 266
38242: PUSH
38243: LD_INT 32
38245: PUSH
38246: LD_INT 31
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: IN
38253: AND
38254: PUSH
38255: LD_VAR 0 12
38259: PUSH
38260: LD_INT 1
38262: ARRAY
38263: PPUSH
38264: CALL_OW 313
38268: PUSH
38269: LD_INT 6
38271: EQUAL
38272: OR
38273: IFFALSE 38293
// f := Delete ( f , 1 ) ;
38275: LD_ADDR_VAR 0 12
38279: PUSH
38280: LD_VAR 0 12
38284: PPUSH
38285: LD_INT 1
38287: PPUSH
38288: CALL_OW 3
38292: ST_TO_ADDR
// if not f then
38293: LD_VAR 0 12
38297: NOT
38298: IFFALSE 38316
// begin x := x + 2 ;
38300: LD_ADDR_VAR 0 13
38304: PUSH
38305: LD_VAR 0 13
38309: PUSH
38310: LD_INT 2
38312: PLUS
38313: ST_TO_ADDR
// continue ;
38314: GO 38114
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38316: LD_VAR 0 12
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PPUSH
38325: CALL_OW 266
38329: PUSH
38330: LD_INT 5
38332: EQUAL
38333: IFFALSE 38407
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38335: LD_VAR 0 12
38339: PUSH
38340: LD_INT 1
38342: ARRAY
38343: PPUSH
38344: CALL_OW 313
38348: PUSH
38349: LD_INT 3
38351: LESS
38352: IFFALSE 38388
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38354: LD_INT 0
38356: PPUSH
38357: LD_INT 5
38359: PUSH
38360: LD_INT 8
38362: PUSH
38363: LD_INT 9
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: LD_VAR 0 17
38375: ARRAY
38376: PPUSH
38377: LD_VAR 0 4
38381: PPUSH
38382: CALL_OW 380
38386: GO 38405
// PrepareHuman ( false , i , skill ) ;
38388: LD_INT 0
38390: PPUSH
38391: LD_VAR 0 8
38395: PPUSH
38396: LD_VAR 0 4
38400: PPUSH
38401: CALL_OW 380
// end else
38405: GO 38424
// PrepareHuman ( false , i , skill ) ;
38407: LD_INT 0
38409: PPUSH
38410: LD_VAR 0 8
38414: PPUSH
38415: LD_VAR 0 4
38419: PPUSH
38420: CALL_OW 380
// un := CreateHuman ;
38424: LD_ADDR_VAR 0 14
38428: PUSH
38429: CALL_OW 44
38433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38434: LD_ADDR_VAR 0 7
38438: PUSH
38439: LD_VAR 0 7
38443: PPUSH
38444: LD_INT 1
38446: PPUSH
38447: LD_VAR 0 14
38451: PPUSH
38452: CALL_OW 2
38456: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38457: LD_VAR 0 14
38461: PPUSH
38462: LD_VAR 0 12
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: CALL_OW 52
// end ;
38475: GO 38114
38477: POP
38478: POP
// end ;
38479: GO 37416
38481: POP
38482: POP
// result := result ^ buildings ;
38483: LD_ADDR_VAR 0 7
38487: PUSH
38488: LD_VAR 0 7
38492: PUSH
38493: LD_VAR 0 18
38497: ADD
38498: ST_TO_ADDR
// end else
38499: GO 38642
// begin for i = 1 to personel do
38501: LD_ADDR_VAR 0 8
38505: PUSH
38506: DOUBLE
38507: LD_INT 1
38509: DEC
38510: ST_TO_ADDR
38511: LD_VAR 0 6
38515: PUSH
38516: FOR_TO
38517: IFFALSE 38640
// begin if i > 4 then
38519: LD_VAR 0 8
38523: PUSH
38524: LD_INT 4
38526: GREATER
38527: IFFALSE 38531
// break ;
38529: GO 38640
// x := personel [ i ] ;
38531: LD_ADDR_VAR 0 13
38535: PUSH
38536: LD_VAR 0 6
38540: PUSH
38541: LD_VAR 0 8
38545: ARRAY
38546: ST_TO_ADDR
// if x = - 1 then
38547: LD_VAR 0 13
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: EQUAL
38556: IFFALSE 38560
// continue ;
38558: GO 38516
// PrepareHuman ( false , i , skill ) ;
38560: LD_INT 0
38562: PPUSH
38563: LD_VAR 0 8
38567: PPUSH
38568: LD_VAR 0 4
38572: PPUSH
38573: CALL_OW 380
// un := CreateHuman ;
38577: LD_ADDR_VAR 0 14
38581: PUSH
38582: CALL_OW 44
38586: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38587: LD_VAR 0 14
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 250
38601: PPUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 251
38611: PPUSH
38612: LD_INT 10
38614: PPUSH
38615: LD_INT 0
38617: PPUSH
38618: CALL_OW 50
// result := result ^ un ;
38622: LD_ADDR_VAR 0 7
38626: PUSH
38627: LD_VAR 0 7
38631: PUSH
38632: LD_VAR 0 14
38636: ADD
38637: ST_TO_ADDR
// end ;
38638: GO 38516
38640: POP
38641: POP
// end ; end ;
38642: LD_VAR 0 7
38646: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38647: LD_INT 0
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
// result := false ;
38665: LD_ADDR_VAR 0 3
38669: PUSH
38670: LD_INT 0
38672: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38673: LD_VAR 0 1
38677: NOT
38678: PUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 266
38688: PUSH
38689: LD_INT 32
38691: PUSH
38692: LD_INT 33
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: IN
38699: NOT
38700: OR
38701: IFFALSE 38705
// exit ;
38703: GO 39814
// nat := GetNation ( tower ) ;
38705: LD_ADDR_VAR 0 12
38709: PUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 248
38719: ST_TO_ADDR
// side := GetSide ( tower ) ;
38720: LD_ADDR_VAR 0 16
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 255
38734: ST_TO_ADDR
// x := GetX ( tower ) ;
38735: LD_ADDR_VAR 0 10
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 250
38749: ST_TO_ADDR
// y := GetY ( tower ) ;
38750: LD_ADDR_VAR 0 11
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 251
38764: ST_TO_ADDR
// if not x or not y then
38765: LD_VAR 0 10
38769: NOT
38770: PUSH
38771: LD_VAR 0 11
38775: NOT
38776: OR
38777: IFFALSE 38781
// exit ;
38779: GO 39814
// weapon := 0 ;
38781: LD_ADDR_VAR 0 18
38785: PUSH
38786: LD_INT 0
38788: ST_TO_ADDR
// fac_list := [ ] ;
38789: LD_ADDR_VAR 0 17
38793: PUSH
38794: EMPTY
38795: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38796: LD_ADDR_VAR 0 6
38800: PUSH
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 274
38810: PPUSH
38811: LD_VAR 0 2
38815: PPUSH
38816: LD_INT 0
38818: PPUSH
38819: CALL 36385 0 3
38823: PPUSH
38824: LD_INT 30
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PPUSH
38834: CALL_OW 72
38838: ST_TO_ADDR
// if not factories then
38839: LD_VAR 0 6
38843: NOT
38844: IFFALSE 38848
// exit ;
38846: GO 39814
// for i in factories do
38848: LD_ADDR_VAR 0 8
38852: PUSH
38853: LD_VAR 0 6
38857: PUSH
38858: FOR_IN
38859: IFFALSE 38884
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38861: LD_ADDR_VAR 0 17
38865: PUSH
38866: LD_VAR 0 17
38870: PUSH
38871: LD_VAR 0 8
38875: PPUSH
38876: CALL_OW 478
38880: UNION
38881: ST_TO_ADDR
38882: GO 38858
38884: POP
38885: POP
// if not fac_list then
38886: LD_VAR 0 17
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 39814
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: LD_INT 9
38908: PUSH
38909: LD_INT 10
38911: PUSH
38912: LD_INT 6
38914: PUSH
38915: LD_INT 7
38917: PUSH
38918: LD_INT 11
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 27
38932: PUSH
38933: LD_INT 28
38935: PUSH
38936: LD_INT 26
38938: PUSH
38939: LD_INT 30
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 43
38950: PUSH
38951: LD_INT 44
38953: PUSH
38954: LD_INT 46
38956: PUSH
38957: LD_INT 45
38959: PUSH
38960: LD_INT 47
38962: PUSH
38963: LD_INT 49
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: PUSH
38979: LD_VAR 0 12
38983: ARRAY
38984: ST_TO_ADDR
// list := list isect fac_list ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: LD_VAR 0 5
38994: PUSH
38995: LD_VAR 0 17
38999: ISECT
39000: ST_TO_ADDR
// if not list then
39001: LD_VAR 0 5
39005: NOT
39006: IFFALSE 39010
// exit ;
39008: GO 39814
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39010: LD_VAR 0 12
39014: PUSH
39015: LD_INT 3
39017: EQUAL
39018: PUSH
39019: LD_INT 49
39021: PUSH
39022: LD_VAR 0 5
39026: IN
39027: AND
39028: PUSH
39029: LD_INT 31
39031: PPUSH
39032: LD_VAR 0 16
39036: PPUSH
39037: CALL_OW 321
39041: PUSH
39042: LD_INT 2
39044: EQUAL
39045: AND
39046: IFFALSE 39106
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39048: LD_INT 22
39050: PUSH
39051: LD_VAR 0 16
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 35
39062: PUSH
39063: LD_INT 49
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 91
39072: PUSH
39073: LD_VAR 0 1
39077: PUSH
39078: LD_INT 10
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: PPUSH
39091: CALL_OW 69
39095: NOT
39096: IFFALSE 39106
// weapon := ru_time_lapser ;
39098: LD_ADDR_VAR 0 18
39102: PUSH
39103: LD_INT 49
39105: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39106: LD_VAR 0 12
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: IN
39121: PUSH
39122: LD_INT 11
39124: PUSH
39125: LD_VAR 0 5
39129: IN
39130: PUSH
39131: LD_INT 30
39133: PUSH
39134: LD_VAR 0 5
39138: IN
39139: OR
39140: AND
39141: PUSH
39142: LD_INT 6
39144: PPUSH
39145: LD_VAR 0 16
39149: PPUSH
39150: CALL_OW 321
39154: PUSH
39155: LD_INT 2
39157: EQUAL
39158: AND
39159: IFFALSE 39324
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39161: LD_INT 22
39163: PUSH
39164: LD_VAR 0 16
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 35
39178: PUSH
39179: LD_INT 11
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 35
39188: PUSH
39189: LD_INT 30
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 91
39203: PUSH
39204: LD_VAR 0 1
39208: PUSH
39209: LD_INT 18
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: PPUSH
39222: CALL_OW 69
39226: NOT
39227: PUSH
39228: LD_INT 22
39230: PUSH
39231: LD_VAR 0 16
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 30
39245: PUSH
39246: LD_INT 32
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 30
39255: PUSH
39256: LD_INT 33
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 91
39270: PUSH
39271: LD_VAR 0 1
39275: PUSH
39276: LD_INT 12
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: PUSH
39289: EMPTY
39290: LIST
39291: PPUSH
39292: CALL_OW 69
39296: PUSH
39297: LD_INT 2
39299: GREATER
39300: AND
39301: IFFALSE 39324
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39303: LD_ADDR_VAR 0 18
39307: PUSH
39308: LD_INT 11
39310: PUSH
39311: LD_INT 30
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_VAR 0 12
39322: ARRAY
39323: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39324: LD_VAR 0 18
39328: NOT
39329: PUSH
39330: LD_INT 40
39332: PPUSH
39333: LD_VAR 0 16
39337: PPUSH
39338: CALL_OW 321
39342: PUSH
39343: LD_INT 2
39345: EQUAL
39346: AND
39347: PUSH
39348: LD_INT 7
39350: PUSH
39351: LD_VAR 0 5
39355: IN
39356: PUSH
39357: LD_INT 28
39359: PUSH
39360: LD_VAR 0 5
39364: IN
39365: OR
39366: PUSH
39367: LD_INT 45
39369: PUSH
39370: LD_VAR 0 5
39374: IN
39375: OR
39376: AND
39377: IFFALSE 39631
// begin hex := GetHexInfo ( x , y ) ;
39379: LD_ADDR_VAR 0 4
39383: PUSH
39384: LD_VAR 0 10
39388: PPUSH
39389: LD_VAR 0 11
39393: PPUSH
39394: CALL_OW 546
39398: ST_TO_ADDR
// if hex [ 1 ] then
39399: LD_VAR 0 4
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: IFFALSE 39411
// exit ;
39409: GO 39814
// height := hex [ 2 ] ;
39411: LD_ADDR_VAR 0 15
39415: PUSH
39416: LD_VAR 0 4
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39425: LD_ADDR_VAR 0 14
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 3
39438: PUSH
39439: LD_INT 5
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// for i in tmp do
39448: LD_ADDR_VAR 0 8
39452: PUSH
39453: LD_VAR 0 14
39457: PUSH
39458: FOR_IN
39459: IFFALSE 39629
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39461: LD_ADDR_VAR 0 9
39465: PUSH
39466: LD_VAR 0 10
39470: PPUSH
39471: LD_VAR 0 8
39475: PPUSH
39476: LD_INT 5
39478: PPUSH
39479: CALL_OW 272
39483: PUSH
39484: LD_VAR 0 11
39488: PPUSH
39489: LD_VAR 0 8
39493: PPUSH
39494: LD_INT 5
39496: PPUSH
39497: CALL_OW 273
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39506: LD_VAR 0 9
39510: PUSH
39511: LD_INT 1
39513: ARRAY
39514: PPUSH
39515: LD_VAR 0 9
39519: PUSH
39520: LD_INT 2
39522: ARRAY
39523: PPUSH
39524: CALL_OW 488
39528: IFFALSE 39627
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39530: LD_ADDR_VAR 0 4
39534: PUSH
39535: LD_VAR 0 9
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: LD_VAR 0 9
39548: PUSH
39549: LD_INT 2
39551: ARRAY
39552: PPUSH
39553: CALL_OW 546
39557: ST_TO_ADDR
// if hex [ 1 ] then
39558: LD_VAR 0 4
39562: PUSH
39563: LD_INT 1
39565: ARRAY
39566: IFFALSE 39570
// continue ;
39568: GO 39458
// h := hex [ 2 ] ;
39570: LD_ADDR_VAR 0 13
39574: PUSH
39575: LD_VAR 0 4
39579: PUSH
39580: LD_INT 2
39582: ARRAY
39583: ST_TO_ADDR
// if h + 7 < height then
39584: LD_VAR 0 13
39588: PUSH
39589: LD_INT 7
39591: PLUS
39592: PUSH
39593: LD_VAR 0 15
39597: LESS
39598: IFFALSE 39627
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39600: LD_ADDR_VAR 0 18
39604: PUSH
39605: LD_INT 7
39607: PUSH
39608: LD_INT 28
39610: PUSH
39611: LD_INT 45
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: PUSH
39619: LD_VAR 0 12
39623: ARRAY
39624: ST_TO_ADDR
// break ;
39625: GO 39629
// end ; end ; end ;
39627: GO 39458
39629: POP
39630: POP
// end ; if not weapon then
39631: LD_VAR 0 18
39635: NOT
39636: IFFALSE 39696
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39638: LD_ADDR_VAR 0 5
39642: PUSH
39643: LD_VAR 0 5
39647: PUSH
39648: LD_INT 11
39650: PUSH
39651: LD_INT 30
39653: PUSH
39654: LD_INT 49
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: DIFF
39662: ST_TO_ADDR
// if not list then
39663: LD_VAR 0 5
39667: NOT
39668: IFFALSE 39672
// exit ;
39670: GO 39814
// weapon := list [ rand ( 1 , list ) ] ;
39672: LD_ADDR_VAR 0 18
39676: PUSH
39677: LD_VAR 0 5
39681: PUSH
39682: LD_INT 1
39684: PPUSH
39685: LD_VAR 0 5
39689: PPUSH
39690: CALL_OW 12
39694: ARRAY
39695: ST_TO_ADDR
// end ; if weapon then
39696: LD_VAR 0 18
39700: IFFALSE 39814
// begin tmp := CostOfWeapon ( weapon ) ;
39702: LD_ADDR_VAR 0 14
39706: PUSH
39707: LD_VAR 0 18
39711: PPUSH
39712: CALL_OW 451
39716: ST_TO_ADDR
// j := GetBase ( tower ) ;
39717: LD_ADDR_VAR 0 9
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 274
39731: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39732: LD_VAR 0 9
39736: PPUSH
39737: LD_INT 1
39739: PPUSH
39740: CALL_OW 275
39744: PUSH
39745: LD_VAR 0 14
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: GREATEREQUAL
39754: PUSH
39755: LD_VAR 0 9
39759: PPUSH
39760: LD_INT 2
39762: PPUSH
39763: CALL_OW 275
39767: PUSH
39768: LD_VAR 0 14
39772: PUSH
39773: LD_INT 2
39775: ARRAY
39776: GREATEREQUAL
39777: AND
39778: PUSH
39779: LD_VAR 0 9
39783: PPUSH
39784: LD_INT 3
39786: PPUSH
39787: CALL_OW 275
39791: PUSH
39792: LD_VAR 0 14
39796: PUSH
39797: LD_INT 3
39799: ARRAY
39800: GREATEREQUAL
39801: AND
39802: IFFALSE 39814
// result := weapon ;
39804: LD_ADDR_VAR 0 3
39808: PUSH
39809: LD_VAR 0 18
39813: ST_TO_ADDR
// end ; end ;
39814: LD_VAR 0 3
39818: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39819: LD_INT 0
39821: PPUSH
39822: PPUSH
// result := true ;
39823: LD_ADDR_VAR 0 3
39827: PUSH
39828: LD_INT 1
39830: ST_TO_ADDR
// if array1 = array2 then
39831: LD_VAR 0 1
39835: PUSH
39836: LD_VAR 0 2
39840: EQUAL
39841: IFFALSE 39901
// begin for i = 1 to array1 do
39843: LD_ADDR_VAR 0 4
39847: PUSH
39848: DOUBLE
39849: LD_INT 1
39851: DEC
39852: ST_TO_ADDR
39853: LD_VAR 0 1
39857: PUSH
39858: FOR_TO
39859: IFFALSE 39897
// if array1 [ i ] <> array2 [ i ] then
39861: LD_VAR 0 1
39865: PUSH
39866: LD_VAR 0 4
39870: ARRAY
39871: PUSH
39872: LD_VAR 0 2
39876: PUSH
39877: LD_VAR 0 4
39881: ARRAY
39882: NONEQUAL
39883: IFFALSE 39895
// begin result := false ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 0
39892: ST_TO_ADDR
// break ;
39893: GO 39897
// end ;
39895: GO 39858
39897: POP
39898: POP
// end else
39899: GO 39909
// result := false ;
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 0
39908: ST_TO_ADDR
// end ;
39909: LD_VAR 0 3
39913: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39914: LD_INT 0
39916: PPUSH
39917: PPUSH
// if not array1 or not array2 then
39918: LD_VAR 0 1
39922: NOT
39923: PUSH
39924: LD_VAR 0 2
39928: NOT
39929: OR
39930: IFFALSE 39934
// exit ;
39932: GO 39998
// result := true ;
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 1
39941: ST_TO_ADDR
// for i = 1 to array1 do
39942: LD_ADDR_VAR 0 4
39946: PUSH
39947: DOUBLE
39948: LD_INT 1
39950: DEC
39951: ST_TO_ADDR
39952: LD_VAR 0 1
39956: PUSH
39957: FOR_TO
39958: IFFALSE 39996
// if array1 [ i ] <> array2 [ i ] then
39960: LD_VAR 0 1
39964: PUSH
39965: LD_VAR 0 4
39969: ARRAY
39970: PUSH
39971: LD_VAR 0 2
39975: PUSH
39976: LD_VAR 0 4
39980: ARRAY
39981: NONEQUAL
39982: IFFALSE 39994
// begin result := false ;
39984: LD_ADDR_VAR 0 3
39988: PUSH
39989: LD_INT 0
39991: ST_TO_ADDR
// break ;
39992: GO 39996
// end ;
39994: GO 39957
39996: POP
39997: POP
// end ;
39998: LD_VAR 0 3
40002: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40003: LD_INT 0
40005: PPUSH
40006: PPUSH
40007: PPUSH
// pom := GetBase ( fac ) ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_VAR 0 1
40017: PPUSH
40018: CALL_OW 274
40022: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40023: LD_ADDR_VAR 0 4
40027: PUSH
40028: LD_VAR 0 2
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: PPUSH
40037: LD_VAR 0 2
40041: PUSH
40042: LD_INT 2
40044: ARRAY
40045: PPUSH
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 3
40053: ARRAY
40054: PPUSH
40055: LD_VAR 0 2
40059: PUSH
40060: LD_INT 4
40062: ARRAY
40063: PPUSH
40064: CALL_OW 449
40068: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_VAR 0 5
40078: PPUSH
40079: LD_INT 1
40081: PPUSH
40082: CALL_OW 275
40086: PUSH
40087: LD_VAR 0 4
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: GREATEREQUAL
40096: PUSH
40097: LD_VAR 0 5
40101: PPUSH
40102: LD_INT 2
40104: PPUSH
40105: CALL_OW 275
40109: PUSH
40110: LD_VAR 0 4
40114: PUSH
40115: LD_INT 2
40117: ARRAY
40118: GREATEREQUAL
40119: AND
40120: PUSH
40121: LD_VAR 0 5
40125: PPUSH
40126: LD_INT 3
40128: PPUSH
40129: CALL_OW 275
40133: PUSH
40134: LD_VAR 0 4
40138: PUSH
40139: LD_INT 3
40141: ARRAY
40142: GREATEREQUAL
40143: AND
40144: ST_TO_ADDR
// end ;
40145: LD_VAR 0 3
40149: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40150: LD_INT 0
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
// pom := GetBase ( building ) ;
40156: LD_ADDR_VAR 0 3
40160: PUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 274
40170: ST_TO_ADDR
// if not pom then
40171: LD_VAR 0 3
40175: NOT
40176: IFFALSE 40180
// exit ;
40178: GO 40350
// btype := GetBType ( building ) ;
40180: LD_ADDR_VAR 0 5
40184: PUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 266
40194: ST_TO_ADDR
// if btype = b_armoury then
40195: LD_VAR 0 5
40199: PUSH
40200: LD_INT 4
40202: EQUAL
40203: IFFALSE 40213
// btype := b_barracks ;
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_INT 5
40212: ST_TO_ADDR
// if btype = b_depot then
40213: LD_VAR 0 5
40217: PUSH
40218: LD_INT 0
40220: EQUAL
40221: IFFALSE 40231
// btype := b_warehouse ;
40223: LD_ADDR_VAR 0 5
40227: PUSH
40228: LD_INT 1
40230: ST_TO_ADDR
// if btype = b_workshop then
40231: LD_VAR 0 5
40235: PUSH
40236: LD_INT 2
40238: EQUAL
40239: IFFALSE 40249
// btype := b_factory ;
40241: LD_ADDR_VAR 0 5
40245: PUSH
40246: LD_INT 3
40248: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40249: LD_ADDR_VAR 0 4
40253: PUSH
40254: LD_VAR 0 5
40258: PPUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 248
40268: PPUSH
40269: CALL_OW 450
40273: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40274: LD_ADDR_VAR 0 2
40278: PUSH
40279: LD_VAR 0 3
40283: PPUSH
40284: LD_INT 1
40286: PPUSH
40287: CALL_OW 275
40291: PUSH
40292: LD_VAR 0 4
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: GREATEREQUAL
40301: PUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: LD_INT 2
40309: PPUSH
40310: CALL_OW 275
40314: PUSH
40315: LD_VAR 0 4
40319: PUSH
40320: LD_INT 2
40322: ARRAY
40323: GREATEREQUAL
40324: AND
40325: PUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: LD_INT 3
40333: PPUSH
40334: CALL_OW 275
40338: PUSH
40339: LD_VAR 0 4
40343: PUSH
40344: LD_INT 3
40346: ARRAY
40347: GREATEREQUAL
40348: AND
40349: ST_TO_ADDR
// end ;
40350: LD_VAR 0 2
40354: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40355: LD_INT 0
40357: PPUSH
40358: PPUSH
40359: PPUSH
// pom := GetBase ( building ) ;
40360: LD_ADDR_VAR 0 4
40364: PUSH
40365: LD_VAR 0 1
40369: PPUSH
40370: CALL_OW 274
40374: ST_TO_ADDR
// if not pom then
40375: LD_VAR 0 4
40379: NOT
40380: IFFALSE 40384
// exit ;
40382: GO 40485
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40384: LD_ADDR_VAR 0 5
40388: PUSH
40389: LD_VAR 0 2
40393: PPUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 248
40403: PPUSH
40404: CALL_OW 450
40408: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40409: LD_ADDR_VAR 0 3
40413: PUSH
40414: LD_VAR 0 4
40418: PPUSH
40419: LD_INT 1
40421: PPUSH
40422: CALL_OW 275
40426: PUSH
40427: LD_VAR 0 5
40431: PUSH
40432: LD_INT 1
40434: ARRAY
40435: GREATEREQUAL
40436: PUSH
40437: LD_VAR 0 4
40441: PPUSH
40442: LD_INT 2
40444: PPUSH
40445: CALL_OW 275
40449: PUSH
40450: LD_VAR 0 5
40454: PUSH
40455: LD_INT 2
40457: ARRAY
40458: GREATEREQUAL
40459: AND
40460: PUSH
40461: LD_VAR 0 4
40465: PPUSH
40466: LD_INT 3
40468: PPUSH
40469: CALL_OW 275
40473: PUSH
40474: LD_VAR 0 5
40478: PUSH
40479: LD_INT 3
40481: ARRAY
40482: GREATEREQUAL
40483: AND
40484: ST_TO_ADDR
// end ;
40485: LD_VAR 0 3
40489: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40490: LD_INT 0
40492: PPUSH
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
40497: PPUSH
40498: PPUSH
40499: PPUSH
40500: PPUSH
40501: PPUSH
40502: PPUSH
// result := false ;
40503: LD_ADDR_VAR 0 8
40507: PUSH
40508: LD_INT 0
40510: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40511: LD_VAR 0 5
40515: NOT
40516: PUSH
40517: LD_VAR 0 1
40521: NOT
40522: OR
40523: PUSH
40524: LD_VAR 0 2
40528: NOT
40529: OR
40530: PUSH
40531: LD_VAR 0 3
40535: NOT
40536: OR
40537: IFFALSE 40541
// exit ;
40539: GO 41355
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40541: LD_ADDR_VAR 0 14
40545: PUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: LD_VAR 0 2
40555: PPUSH
40556: LD_VAR 0 3
40560: PPUSH
40561: LD_VAR 0 4
40565: PPUSH
40566: LD_VAR 0 5
40570: PUSH
40571: LD_INT 1
40573: ARRAY
40574: PPUSH
40575: CALL_OW 248
40579: PPUSH
40580: LD_INT 0
40582: PPUSH
40583: CALL 42608 0 6
40587: ST_TO_ADDR
// if not hexes then
40588: LD_VAR 0 14
40592: NOT
40593: IFFALSE 40597
// exit ;
40595: GO 41355
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40597: LD_ADDR_VAR 0 17
40601: PUSH
40602: LD_VAR 0 5
40606: PPUSH
40607: LD_INT 22
40609: PUSH
40610: LD_VAR 0 13
40614: PPUSH
40615: CALL_OW 255
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 30
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 30
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PPUSH
40656: CALL_OW 72
40660: ST_TO_ADDR
// for i = 1 to hexes do
40661: LD_ADDR_VAR 0 9
40665: PUSH
40666: DOUBLE
40667: LD_INT 1
40669: DEC
40670: ST_TO_ADDR
40671: LD_VAR 0 14
40675: PUSH
40676: FOR_TO
40677: IFFALSE 41353
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40679: LD_ADDR_VAR 0 13
40683: PUSH
40684: LD_VAR 0 14
40688: PUSH
40689: LD_VAR 0 9
40693: ARRAY
40694: PUSH
40695: LD_INT 1
40697: ARRAY
40698: PPUSH
40699: LD_VAR 0 14
40703: PUSH
40704: LD_VAR 0 9
40708: ARRAY
40709: PUSH
40710: LD_INT 2
40712: ARRAY
40713: PPUSH
40714: CALL_OW 428
40718: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40719: LD_VAR 0 14
40723: PUSH
40724: LD_VAR 0 9
40728: ARRAY
40729: PUSH
40730: LD_INT 1
40732: ARRAY
40733: PPUSH
40734: LD_VAR 0 14
40738: PUSH
40739: LD_VAR 0 9
40743: ARRAY
40744: PUSH
40745: LD_INT 2
40747: ARRAY
40748: PPUSH
40749: CALL_OW 351
40753: PUSH
40754: LD_VAR 0 14
40758: PUSH
40759: LD_VAR 0 9
40763: ARRAY
40764: PUSH
40765: LD_INT 1
40767: ARRAY
40768: PPUSH
40769: LD_VAR 0 14
40773: PUSH
40774: LD_VAR 0 9
40778: ARRAY
40779: PUSH
40780: LD_INT 2
40782: ARRAY
40783: PPUSH
40784: CALL_OW 488
40788: NOT
40789: OR
40790: PUSH
40791: LD_VAR 0 13
40795: PPUSH
40796: CALL_OW 247
40800: PUSH
40801: LD_INT 3
40803: EQUAL
40804: OR
40805: IFFALSE 40811
// exit ;
40807: POP
40808: POP
40809: GO 41355
// if not tmp then
40811: LD_VAR 0 13
40815: NOT
40816: IFFALSE 40820
// continue ;
40818: GO 40676
// result := true ;
40820: LD_ADDR_VAR 0 8
40824: PUSH
40825: LD_INT 1
40827: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40828: LD_VAR 0 6
40832: PUSH
40833: LD_VAR 0 13
40837: PPUSH
40838: CALL_OW 247
40842: PUSH
40843: LD_INT 2
40845: EQUAL
40846: AND
40847: PUSH
40848: LD_VAR 0 13
40852: PPUSH
40853: CALL_OW 263
40857: PUSH
40858: LD_INT 1
40860: EQUAL
40861: AND
40862: IFFALSE 41026
// begin if IsDrivenBy ( tmp ) then
40864: LD_VAR 0 13
40868: PPUSH
40869: CALL_OW 311
40873: IFFALSE 40877
// continue ;
40875: GO 40676
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40877: LD_VAR 0 6
40881: PPUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 60
40887: PUSH
40888: EMPTY
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: LD_INT 55
40900: PUSH
40901: EMPTY
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PPUSH
40912: CALL_OW 72
40916: IFFALSE 41024
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40918: LD_ADDR_VAR 0 18
40922: PUSH
40923: LD_VAR 0 6
40927: PPUSH
40928: LD_INT 3
40930: PUSH
40931: LD_INT 60
40933: PUSH
40934: EMPTY
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 55
40946: PUSH
40947: EMPTY
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PPUSH
40958: CALL_OW 72
40962: PUSH
40963: LD_INT 1
40965: ARRAY
40966: ST_TO_ADDR
// if IsInUnit ( driver ) then
40967: LD_VAR 0 18
40971: PPUSH
40972: CALL_OW 310
40976: IFFALSE 40987
// ComExit ( driver ) ;
40978: LD_VAR 0 18
40982: PPUSH
40983: CALL 66409 0 1
// AddComEnterUnit ( driver , tmp ) ;
40987: LD_VAR 0 18
40991: PPUSH
40992: LD_VAR 0 13
40996: PPUSH
40997: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41001: LD_VAR 0 18
41005: PPUSH
41006: LD_VAR 0 7
41010: PPUSH
41011: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41015: LD_VAR 0 18
41019: PPUSH
41020: CALL_OW 181
// end ; continue ;
41024: GO 40676
// end ; if not cleaners or not tmp in cleaners then
41026: LD_VAR 0 6
41030: NOT
41031: PUSH
41032: LD_VAR 0 13
41036: PUSH
41037: LD_VAR 0 6
41041: IN
41042: NOT
41043: OR
41044: IFFALSE 41351
// begin if dep then
41046: LD_VAR 0 17
41050: IFFALSE 41186
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41052: LD_ADDR_VAR 0 16
41056: PUSH
41057: LD_VAR 0 17
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PPUSH
41066: CALL_OW 250
41070: PPUSH
41071: LD_VAR 0 17
41075: PUSH
41076: LD_INT 1
41078: ARRAY
41079: PPUSH
41080: CALL_OW 254
41084: PPUSH
41085: LD_INT 5
41087: PPUSH
41088: CALL_OW 272
41092: PUSH
41093: LD_VAR 0 17
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PPUSH
41102: CALL_OW 251
41106: PPUSH
41107: LD_VAR 0 17
41111: PUSH
41112: LD_INT 1
41114: ARRAY
41115: PPUSH
41116: CALL_OW 254
41120: PPUSH
41121: LD_INT 5
41123: PPUSH
41124: CALL_OW 273
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41133: LD_VAR 0 16
41137: PUSH
41138: LD_INT 1
41140: ARRAY
41141: PPUSH
41142: LD_VAR 0 16
41146: PUSH
41147: LD_INT 2
41149: ARRAY
41150: PPUSH
41151: CALL_OW 488
41155: IFFALSE 41186
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41157: LD_VAR 0 13
41161: PPUSH
41162: LD_VAR 0 16
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: PPUSH
41171: LD_VAR 0 16
41175: PUSH
41176: LD_INT 2
41178: ARRAY
41179: PPUSH
41180: CALL_OW 111
// continue ;
41184: GO 40676
// end ; end ; r := GetDir ( tmp ) ;
41186: LD_ADDR_VAR 0 15
41190: PUSH
41191: LD_VAR 0 13
41195: PPUSH
41196: CALL_OW 254
41200: ST_TO_ADDR
// if r = 5 then
41201: LD_VAR 0 15
41205: PUSH
41206: LD_INT 5
41208: EQUAL
41209: IFFALSE 41219
// r := 0 ;
41211: LD_ADDR_VAR 0 15
41215: PUSH
41216: LD_INT 0
41218: ST_TO_ADDR
// for j = r to 5 do
41219: LD_ADDR_VAR 0 10
41223: PUSH
41224: DOUBLE
41225: LD_VAR 0 15
41229: DEC
41230: ST_TO_ADDR
41231: LD_INT 5
41233: PUSH
41234: FOR_TO
41235: IFFALSE 41349
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41237: LD_ADDR_VAR 0 11
41241: PUSH
41242: LD_VAR 0 13
41246: PPUSH
41247: CALL_OW 250
41251: PPUSH
41252: LD_VAR 0 10
41256: PPUSH
41257: LD_INT 2
41259: PPUSH
41260: CALL_OW 272
41264: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41265: LD_ADDR_VAR 0 12
41269: PUSH
41270: LD_VAR 0 13
41274: PPUSH
41275: CALL_OW 251
41279: PPUSH
41280: LD_VAR 0 10
41284: PPUSH
41285: LD_INT 2
41287: PPUSH
41288: CALL_OW 273
41292: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41293: LD_VAR 0 11
41297: PPUSH
41298: LD_VAR 0 12
41302: PPUSH
41303: CALL_OW 488
41307: PUSH
41308: LD_VAR 0 11
41312: PPUSH
41313: LD_VAR 0 12
41317: PPUSH
41318: CALL_OW 428
41322: NOT
41323: AND
41324: IFFALSE 41347
// begin ComMoveXY ( tmp , _x , _y ) ;
41326: LD_VAR 0 13
41330: PPUSH
41331: LD_VAR 0 11
41335: PPUSH
41336: LD_VAR 0 12
41340: PPUSH
41341: CALL_OW 111
// break ;
41345: GO 41349
// end ; end ;
41347: GO 41234
41349: POP
41350: POP
// end ; end ;
41351: GO 40676
41353: POP
41354: POP
// end ;
41355: LD_VAR 0 8
41359: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41360: LD_INT 0
41362: PPUSH
// result := true ;
41363: LD_ADDR_VAR 0 3
41367: PUSH
41368: LD_INT 1
41370: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41371: LD_VAR 0 2
41375: PUSH
41376: LD_INT 24
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41390
41382: LD_INT 33
41384: DOUBLE
41385: EQUAL
41386: IFTRUE 41390
41388: GO 41415
41390: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41391: LD_ADDR_VAR 0 3
41395: PUSH
41396: LD_INT 32
41398: PPUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: CALL_OW 321
41408: PUSH
41409: LD_INT 2
41411: EQUAL
41412: ST_TO_ADDR
41413: GO 41731
41415: LD_INT 20
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 41448
41423: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41424: LD_ADDR_VAR 0 3
41428: PUSH
41429: LD_INT 6
41431: PPUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 321
41441: PUSH
41442: LD_INT 2
41444: EQUAL
41445: ST_TO_ADDR
41446: GO 41731
41448: LD_INT 22
41450: DOUBLE
41451: EQUAL
41452: IFTRUE 41462
41454: LD_INT 36
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41487
41462: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 15
41470: PPUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 321
41480: PUSH
41481: LD_INT 2
41483: EQUAL
41484: ST_TO_ADDR
41485: GO 41731
41487: LD_INT 30
41489: DOUBLE
41490: EQUAL
41491: IFTRUE 41495
41493: GO 41520
41495: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41496: LD_ADDR_VAR 0 3
41500: PUSH
41501: LD_INT 20
41503: PPUSH
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 321
41513: PUSH
41514: LD_INT 2
41516: EQUAL
41517: ST_TO_ADDR
41518: GO 41731
41520: LD_INT 28
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41534
41526: LD_INT 21
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41559
41534: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 21
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 321
41552: PUSH
41553: LD_INT 2
41555: EQUAL
41556: ST_TO_ADDR
41557: GO 41731
41559: LD_INT 16
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41567
41565: GO 41592
41567: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_INT 84
41575: PPUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 321
41585: PUSH
41586: LD_INT 2
41588: EQUAL
41589: ST_TO_ADDR
41590: GO 41731
41592: LD_INT 19
41594: DOUBLE
41595: EQUAL
41596: IFTRUE 41606
41598: LD_INT 23
41600: DOUBLE
41601: EQUAL
41602: IFTRUE 41606
41604: GO 41631
41606: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_INT 83
41614: PPUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 321
41624: PUSH
41625: LD_INT 2
41627: EQUAL
41628: ST_TO_ADDR
41629: GO 41731
41631: LD_INT 17
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41639
41637: GO 41664
41639: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41640: LD_ADDR_VAR 0 3
41644: PUSH
41645: LD_INT 39
41647: PPUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 321
41657: PUSH
41658: LD_INT 2
41660: EQUAL
41661: ST_TO_ADDR
41662: GO 41731
41664: LD_INT 18
41666: DOUBLE
41667: EQUAL
41668: IFTRUE 41672
41670: GO 41697
41672: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: LD_INT 40
41680: PPUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 321
41690: PUSH
41691: LD_INT 2
41693: EQUAL
41694: ST_TO_ADDR
41695: GO 41731
41697: LD_INT 27
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41705
41703: GO 41730
41705: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41706: LD_ADDR_VAR 0 3
41710: PUSH
41711: LD_INT 35
41713: PPUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 321
41723: PUSH
41724: LD_INT 2
41726: EQUAL
41727: ST_TO_ADDR
41728: GO 41731
41730: POP
// end ;
41731: LD_VAR 0 3
41735: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41736: LD_INT 0
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
41744: PPUSH
41745: PPUSH
41746: PPUSH
41747: PPUSH
41748: PPUSH
// result := false ;
41749: LD_ADDR_VAR 0 6
41753: PUSH
41754: LD_INT 0
41756: ST_TO_ADDR
// if btype = b_depot then
41757: LD_VAR 0 2
41761: PUSH
41762: LD_INT 0
41764: EQUAL
41765: IFFALSE 41777
// begin result := true ;
41767: LD_ADDR_VAR 0 6
41771: PUSH
41772: LD_INT 1
41774: ST_TO_ADDR
// exit ;
41775: GO 42603
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41777: LD_VAR 0 1
41781: NOT
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 266
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: IN
41803: NOT
41804: OR
41805: PUSH
41806: LD_VAR 0 2
41810: NOT
41811: OR
41812: PUSH
41813: LD_VAR 0 5
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 4
41832: PUSH
41833: LD_INT 5
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: IN
41844: NOT
41845: OR
41846: PUSH
41847: LD_VAR 0 3
41851: PPUSH
41852: LD_VAR 0 4
41856: PPUSH
41857: CALL_OW 488
41861: NOT
41862: OR
41863: IFFALSE 41867
// exit ;
41865: GO 42603
// side := GetSide ( depot ) ;
41867: LD_ADDR_VAR 0 9
41871: PUSH
41872: LD_VAR 0 1
41876: PPUSH
41877: CALL_OW 255
41881: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41882: LD_VAR 0 9
41886: PPUSH
41887: LD_VAR 0 2
41891: PPUSH
41892: CALL 41360 0 2
41896: NOT
41897: IFFALSE 41901
// exit ;
41899: GO 42603
// pom := GetBase ( depot ) ;
41901: LD_ADDR_VAR 0 10
41905: PUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 274
41915: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41916: LD_ADDR_VAR 0 11
41920: PUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 248
41935: PPUSH
41936: CALL_OW 450
41940: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41941: LD_VAR 0 10
41945: PPUSH
41946: LD_INT 1
41948: PPUSH
41949: CALL_OW 275
41953: PUSH
41954: LD_VAR 0 11
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: GREATEREQUAL
41963: PUSH
41964: LD_VAR 0 10
41968: PPUSH
41969: LD_INT 2
41971: PPUSH
41972: CALL_OW 275
41976: PUSH
41977: LD_VAR 0 11
41981: PUSH
41982: LD_INT 2
41984: ARRAY
41985: GREATEREQUAL
41986: AND
41987: PUSH
41988: LD_VAR 0 10
41992: PPUSH
41993: LD_INT 3
41995: PPUSH
41996: CALL_OW 275
42000: PUSH
42001: LD_VAR 0 11
42005: PUSH
42006: LD_INT 3
42008: ARRAY
42009: GREATEREQUAL
42010: AND
42011: NOT
42012: IFFALSE 42016
// exit ;
42014: GO 42603
// if GetBType ( depot ) = b_depot then
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 266
42025: PUSH
42026: LD_INT 0
42028: EQUAL
42029: IFFALSE 42041
// dist := 28 else
42031: LD_ADDR_VAR 0 14
42035: PUSH
42036: LD_INT 28
42038: ST_TO_ADDR
42039: GO 42049
// dist := 36 ;
42041: LD_ADDR_VAR 0 14
42045: PUSH
42046: LD_INT 36
42048: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42049: LD_VAR 0 1
42053: PPUSH
42054: LD_VAR 0 3
42058: PPUSH
42059: LD_VAR 0 4
42063: PPUSH
42064: CALL_OW 297
42068: PUSH
42069: LD_VAR 0 14
42073: GREATER
42074: IFFALSE 42078
// exit ;
42076: GO 42603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42078: LD_ADDR_VAR 0 12
42082: PUSH
42083: LD_VAR 0 2
42087: PPUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_VAR 0 4
42097: PPUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 248
42112: PPUSH
42113: LD_INT 0
42115: PPUSH
42116: CALL 42608 0 6
42120: ST_TO_ADDR
// if not hexes then
42121: LD_VAR 0 12
42125: NOT
42126: IFFALSE 42130
// exit ;
42128: GO 42603
// hex := GetHexInfo ( x , y ) ;
42130: LD_ADDR_VAR 0 15
42134: PUSH
42135: LD_VAR 0 3
42139: PPUSH
42140: LD_VAR 0 4
42144: PPUSH
42145: CALL_OW 546
42149: ST_TO_ADDR
// if hex [ 1 ] then
42150: LD_VAR 0 15
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: IFFALSE 42162
// exit ;
42160: GO 42603
// height := hex [ 2 ] ;
42162: LD_ADDR_VAR 0 13
42166: PUSH
42167: LD_VAR 0 15
42171: PUSH
42172: LD_INT 2
42174: ARRAY
42175: ST_TO_ADDR
// for i = 1 to hexes do
42176: LD_ADDR_VAR 0 7
42180: PUSH
42181: DOUBLE
42182: LD_INT 1
42184: DEC
42185: ST_TO_ADDR
42186: LD_VAR 0 12
42190: PUSH
42191: FOR_TO
42192: IFFALSE 42522
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42194: LD_VAR 0 12
42198: PUSH
42199: LD_VAR 0 7
42203: ARRAY
42204: PUSH
42205: LD_INT 1
42207: ARRAY
42208: PPUSH
42209: LD_VAR 0 12
42213: PUSH
42214: LD_VAR 0 7
42218: ARRAY
42219: PUSH
42220: LD_INT 2
42222: ARRAY
42223: PPUSH
42224: CALL_OW 488
42228: NOT
42229: PUSH
42230: LD_VAR 0 12
42234: PUSH
42235: LD_VAR 0 7
42239: ARRAY
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: LD_VAR 0 12
42249: PUSH
42250: LD_VAR 0 7
42254: ARRAY
42255: PUSH
42256: LD_INT 2
42258: ARRAY
42259: PPUSH
42260: CALL_OW 428
42264: PUSH
42265: LD_INT 0
42267: GREATER
42268: OR
42269: PUSH
42270: LD_VAR 0 12
42274: PUSH
42275: LD_VAR 0 7
42279: ARRAY
42280: PUSH
42281: LD_INT 1
42283: ARRAY
42284: PPUSH
42285: LD_VAR 0 12
42289: PUSH
42290: LD_VAR 0 7
42294: ARRAY
42295: PUSH
42296: LD_INT 2
42298: ARRAY
42299: PPUSH
42300: CALL_OW 351
42304: OR
42305: IFFALSE 42311
// exit ;
42307: POP
42308: POP
42309: GO 42603
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42311: LD_ADDR_VAR 0 8
42315: PUSH
42316: LD_VAR 0 12
42320: PUSH
42321: LD_VAR 0 7
42325: ARRAY
42326: PUSH
42327: LD_INT 1
42329: ARRAY
42330: PPUSH
42331: LD_VAR 0 12
42335: PUSH
42336: LD_VAR 0 7
42340: ARRAY
42341: PUSH
42342: LD_INT 2
42344: ARRAY
42345: PPUSH
42346: CALL_OW 546
42350: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42351: LD_VAR 0 8
42355: PUSH
42356: LD_INT 1
42358: ARRAY
42359: PUSH
42360: LD_VAR 0 8
42364: PUSH
42365: LD_INT 2
42367: ARRAY
42368: PUSH
42369: LD_VAR 0 13
42373: PUSH
42374: LD_INT 2
42376: PLUS
42377: GREATER
42378: OR
42379: PUSH
42380: LD_VAR 0 8
42384: PUSH
42385: LD_INT 2
42387: ARRAY
42388: PUSH
42389: LD_VAR 0 13
42393: PUSH
42394: LD_INT 2
42396: MINUS
42397: LESS
42398: OR
42399: PUSH
42400: LD_VAR 0 8
42404: PUSH
42405: LD_INT 3
42407: ARRAY
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 8
42414: PUSH
42415: LD_INT 9
42417: PUSH
42418: LD_INT 10
42420: PUSH
42421: LD_INT 11
42423: PUSH
42424: LD_INT 12
42426: PUSH
42427: LD_INT 13
42429: PUSH
42430: LD_INT 16
42432: PUSH
42433: LD_INT 17
42435: PUSH
42436: LD_INT 18
42438: PUSH
42439: LD_INT 19
42441: PUSH
42442: LD_INT 20
42444: PUSH
42445: LD_INT 21
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: IN
42463: NOT
42464: OR
42465: PUSH
42466: LD_VAR 0 8
42470: PUSH
42471: LD_INT 5
42473: ARRAY
42474: NOT
42475: OR
42476: PUSH
42477: LD_VAR 0 8
42481: PUSH
42482: LD_INT 6
42484: ARRAY
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 7
42494: PUSH
42495: LD_INT 9
42497: PUSH
42498: LD_INT 10
42500: PUSH
42501: LD_INT 11
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: IN
42512: NOT
42513: OR
42514: IFFALSE 42520
// exit ;
42516: POP
42517: POP
42518: GO 42603
// end ;
42520: GO 42191
42522: POP
42523: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42524: LD_VAR 0 9
42528: PPUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: LD_INT 20
42541: PPUSH
42542: CALL 34526 0 4
42546: PUSH
42547: LD_INT 4
42549: ARRAY
42550: IFFALSE 42554
// exit ;
42552: GO 42603
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42554: LD_VAR 0 2
42558: PUSH
42559: LD_INT 29
42561: PUSH
42562: LD_INT 30
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: IN
42569: PUSH
42570: LD_VAR 0 3
42574: PPUSH
42575: LD_VAR 0 4
42579: PPUSH
42580: LD_VAR 0 9
42584: PPUSH
42585: CALL_OW 440
42589: NOT
42590: AND
42591: IFFALSE 42595
// exit ;
42593: GO 42603
// result := true ;
42595: LD_ADDR_VAR 0 6
42599: PUSH
42600: LD_INT 1
42602: ST_TO_ADDR
// end ;
42603: LD_VAR 0 6
42607: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42608: LD_INT 0
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
// result = [ ] ;
42668: LD_ADDR_VAR 0 7
42672: PUSH
42673: EMPTY
42674: ST_TO_ADDR
// temp_list = [ ] ;
42675: LD_ADDR_VAR 0 9
42679: PUSH
42680: EMPTY
42681: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42682: LD_VAR 0 4
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: LD_INT 4
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: IN
42713: NOT
42714: PUSH
42715: LD_VAR 0 1
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: IN
42730: PUSH
42731: LD_VAR 0 5
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 3
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: IN
42750: NOT
42751: AND
42752: OR
42753: IFFALSE 42757
// exit ;
42755: GO 61148
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42757: LD_VAR 0 1
42761: PUSH
42762: LD_INT 6
42764: PUSH
42765: LD_INT 7
42767: PUSH
42768: LD_INT 8
42770: PUSH
42771: LD_INT 13
42773: PUSH
42774: LD_INT 12
42776: PUSH
42777: LD_INT 15
42779: PUSH
42780: LD_INT 11
42782: PUSH
42783: LD_INT 14
42785: PUSH
42786: LD_INT 10
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: IN
42800: IFFALSE 42810
// btype = b_lab ;
42802: LD_ADDR_VAR 0 1
42806: PUSH
42807: LD_INT 6
42809: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42810: LD_VAR 0 6
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: IN
42829: NOT
42830: PUSH
42831: LD_VAR 0 1
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: LD_INT 6
42850: PUSH
42851: LD_INT 36
42853: PUSH
42854: LD_INT 4
42856: PUSH
42857: LD_INT 5
42859: PUSH
42860: LD_INT 31
42862: PUSH
42863: LD_INT 32
42865: PUSH
42866: LD_INT 33
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: IN
42882: NOT
42883: PUSH
42884: LD_VAR 0 6
42888: PUSH
42889: LD_INT 1
42891: EQUAL
42892: AND
42893: OR
42894: PUSH
42895: LD_VAR 0 1
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 3
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: IN
42910: NOT
42911: PUSH
42912: LD_VAR 0 6
42916: PUSH
42917: LD_INT 2
42919: EQUAL
42920: AND
42921: OR
42922: IFFALSE 42932
// mode = 0 ;
42924: LD_ADDR_VAR 0 6
42928: PUSH
42929: LD_INT 0
42931: ST_TO_ADDR
// case mode of 0 :
42932: LD_VAR 0 6
42936: PUSH
42937: LD_INT 0
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42945
42943: GO 54398
42945: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42946: LD_ADDR_VAR 0 11
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43139: LD_ADDR_VAR 0 12
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 3
43296: NEG
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43335: LD_ADDR_VAR 0 13
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43534: LD_ADDR_VAR 0 14
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 3
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43730: LD_ADDR_VAR 0 15
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43923: LD_ADDR_VAR 0 16
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44116: LD_ADDR_VAR 0 17
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44346: LD_ADDR_VAR 0 18
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44576: LD_ADDR_VAR 0 19
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44806: LD_ADDR_VAR 0 20
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45036: LD_ADDR_VAR 0 21
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45266: LD_ADDR_VAR 0 22
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45496: LD_ADDR_VAR 0 23
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 3
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45776: LD_ADDR_VAR 0 24
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 3
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46052: LD_ADDR_VAR 0 25
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46326: LD_ADDR_VAR 0 26
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46602: LD_ADDR_VAR 0 27
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46882: LD_ADDR_VAR 0 28
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 3
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47164: LD_ADDR_VAR 0 29
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47443: LD_ADDR_VAR 0 30
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47721: LD_ADDR_VAR 0 31
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47999: LD_ADDR_VAR 0 32
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48277: LD_ADDR_VAR 0 33
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48556: LD_ADDR_VAR 0 34
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48836: LD_ADDR_VAR 0 35
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48948: LD_ADDR_VAR 0 36
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49060: LD_ADDR_VAR 0 37
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49172: LD_ADDR_VAR 0 38
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49284: LD_ADDR_VAR 0 39
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49396: LD_ADDR_VAR 0 40
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49508: LD_ADDR_VAR 0 41
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49858: LD_ADDR_VAR 0 42
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 3
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50208: LD_ADDR_VAR 0 43
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50556: LD_ADDR_VAR 0 44
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50906: LD_ADDR_VAR 0 45
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51256: LD_ADDR_VAR 0 46
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51604: LD_ADDR_VAR 0 47
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51755: LD_ADDR_VAR 0 48
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51902: LD_ADDR_VAR 0 49
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52046: LD_ADDR_VAR 0 50
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52190: LD_ADDR_VAR 0 51
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52337: LD_ADDR_VAR 0 52
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52488: LD_ADDR_VAR 0 53
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52718: LD_ADDR_VAR 0 54
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52948: LD_ADDR_VAR 0 55
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53178: LD_ADDR_VAR 0 56
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53408: LD_ADDR_VAR 0 57
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53638: LD_ADDR_VAR 0 58
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53868: LD_ADDR_VAR 0 59
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53956: LD_ADDR_VAR 0 60
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54044: LD_ADDR_VAR 0 61
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54132: LD_ADDR_VAR 0 62
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54220: LD_ADDR_VAR 0 63
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54308: LD_ADDR_VAR 0 64
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// end ; 1 :
54396: GO 60293
54398: LD_INT 1
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54406
54404: GO 57029
54406: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54407: LD_ADDR_VAR 0 11
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54451: LD_ADDR_VAR 0 12
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54492: LD_ADDR_VAR 0 13
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54532: LD_ADDR_VAR 0 14
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54573: LD_ADDR_VAR 0 15
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54617: LD_ADDR_VAR 0 16
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54663: LD_ADDR_VAR 0 17
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54707: LD_ADDR_VAR 0 18
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54748: LD_ADDR_VAR 0 19
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54788: LD_ADDR_VAR 0 20
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54829: LD_ADDR_VAR 0 21
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: LIST
54872: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54873: LD_ADDR_VAR 0 22
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54919: LD_ADDR_VAR 0 23
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 4
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54963: LD_ADDR_VAR 0 24
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55004: LD_ADDR_VAR 0 25
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 4
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55044: LD_ADDR_VAR 0 26
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 3
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 4
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55085: LD_ADDR_VAR 0 27
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55129: LD_ADDR_VAR 0 28
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 4
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55175: LD_ADDR_VAR 0 29
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 5
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 5
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 4
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 6
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 6
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 5
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55330: LD_ADDR_VAR 0 30
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 5
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 5
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 6
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 6
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55473: LD_ADDR_VAR 0 31
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 4
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: LD_INT 4
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 5
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 5
55550: PUSH
55551: LD_INT 5
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 4
55560: PUSH
55561: LD_INT 5
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 6
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: LD_INT 6
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 5
55590: PUSH
55591: LD_INT 6
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55612: LD_ADDR_VAR 0 32
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 5
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 6
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 6
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55755: LD_ADDR_VAR 0 33
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 4
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 4
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 4
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 5
55841: NEG
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 5
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 6
55875: NEG
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 6
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55910: LD_ADDR_VAR 0 34
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 4
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 4
55977: NEG
55978: PUSH
55979: LD_INT 4
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 5
56001: NEG
56002: PUSH
56003: LD_INT 4
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 5
56013: NEG
56014: PUSH
56015: LD_INT 5
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 5
56025: NEG
56026: PUSH
56027: LD_INT 6
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 6
56037: NEG
56038: PUSH
56039: LD_INT 5
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 6
56049: NEG
56050: PUSH
56051: LD_INT 6
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56073: LD_ADDR_VAR 0 41
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56117: LD_ADDR_VAR 0 42
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56158: LD_ADDR_VAR 0 43
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56198: LD_ADDR_VAR 0 44
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56239: LD_ADDR_VAR 0 45
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56283: LD_ADDR_VAR 0 46
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 3
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56329: LD_ADDR_VAR 0 47
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56362: LD_ADDR_VAR 0 48
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56393: LD_ADDR_VAR 0 49
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56422: LD_ADDR_VAR 0 50
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56451: LD_ADDR_VAR 0 51
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56482: LD_ADDR_VAR 0 52
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56515: LD_ADDR_VAR 0 53
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56559: LD_ADDR_VAR 0 54
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56600: LD_ADDR_VAR 0 55
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56640: LD_ADDR_VAR 0 56
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56681: LD_ADDR_VAR 0 57
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56725: LD_ADDR_VAR 0 58
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56771: LD_ADDR_VAR 0 59
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56815: LD_ADDR_VAR 0 60
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56856: LD_ADDR_VAR 0 61
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56896: LD_ADDR_VAR 0 62
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56937: LD_ADDR_VAR 0 63
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56981: LD_ADDR_VAR 0 64
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: ST_TO_ADDR
// end ; 2 :
57027: GO 60293
57029: LD_INT 2
57031: DOUBLE
57032: EQUAL
57033: IFTRUE 57037
57035: GO 60292
57037: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57038: LD_ADDR_VAR 0 29
57042: PUSH
57043: LD_INT 4
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 5
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 4
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 5
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 4
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 4
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 4
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 4
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 4
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 5
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 4
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 4
57435: NEG
57436: PUSH
57437: LD_INT 5
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 4
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: LD_INT 4
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 5
57495: NEG
57496: PUSH
57497: LD_INT 5
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 5
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 5
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57576: LD_ADDR_VAR 0 30
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 4
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 5
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 5
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 4
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: LD_INT 4
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 5
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 3
57663: PUSH
57664: LD_INT 5
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 5
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 5
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 4
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 4
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 5
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 5
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58123: LD_ADDR_VAR 0 31
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 4
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: LD_INT 4
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: LD_INT 5
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 4
58373: NEG
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 5
58385: NEG
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 5
58397: NEG
58398: PUSH
58399: LD_INT 5
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: LD_INT 5
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 5
58421: NEG
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 4
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 4
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 4
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 5
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 5
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 5
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58673: LD_ADDR_VAR 0 32
58677: PUSH
58678: LD_INT 4
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 5
58736: NEG
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 5
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 5
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 5
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 4
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 5
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: LD_INT 4
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: LD_INT 5
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 5
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59220: LD_ADDR_VAR 0 33
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: LD_INT 4
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: LD_INT 5
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 4
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 5
59299: NEG
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 5
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 5
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 4
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 4
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 4
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 4
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 5
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 4
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 5
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 4
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 4
59560: PUSH
59561: LD_INT 4
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 4
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 4
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 5
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: LD_INT 5
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59758: LD_ADDR_VAR 0 34
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 4
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 5
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 4
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 4
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 5
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 5
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 4
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: LD_INT 4
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 5
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 5
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 4
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 5
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 5
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 3
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 4
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 5
60199: NEG
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 5
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 5
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// end ; end ;
60290: GO 60293
60292: POP
// case btype of b_depot , b_warehouse :
60293: LD_VAR 0 1
60297: PUSH
60298: LD_INT 0
60300: DOUBLE
60301: EQUAL
60302: IFTRUE 60312
60304: LD_INT 1
60306: DOUBLE
60307: EQUAL
60308: IFTRUE 60312
60310: GO 60513
60312: POP
// case nation of nation_american :
60313: LD_VAR 0 5
60317: PUSH
60318: LD_INT 1
60320: DOUBLE
60321: EQUAL
60322: IFTRUE 60326
60324: GO 60382
60326: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60327: LD_ADDR_VAR 0 9
60331: PUSH
60332: LD_VAR 0 11
60336: PUSH
60337: LD_VAR 0 12
60341: PUSH
60342: LD_VAR 0 13
60346: PUSH
60347: LD_VAR 0 14
60351: PUSH
60352: LD_VAR 0 15
60356: PUSH
60357: LD_VAR 0 16
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: PUSH
60370: LD_VAR 0 4
60374: PUSH
60375: LD_INT 1
60377: PLUS
60378: ARRAY
60379: ST_TO_ADDR
60380: GO 60511
60382: LD_INT 2
60384: DOUBLE
60385: EQUAL
60386: IFTRUE 60390
60388: GO 60446
60390: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60391: LD_ADDR_VAR 0 9
60395: PUSH
60396: LD_VAR 0 17
60400: PUSH
60401: LD_VAR 0 18
60405: PUSH
60406: LD_VAR 0 19
60410: PUSH
60411: LD_VAR 0 20
60415: PUSH
60416: LD_VAR 0 21
60420: PUSH
60421: LD_VAR 0 22
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: PUSH
60434: LD_VAR 0 4
60438: PUSH
60439: LD_INT 1
60441: PLUS
60442: ARRAY
60443: ST_TO_ADDR
60444: GO 60511
60446: LD_INT 3
60448: DOUBLE
60449: EQUAL
60450: IFTRUE 60454
60452: GO 60510
60454: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60455: LD_ADDR_VAR 0 9
60459: PUSH
60460: LD_VAR 0 23
60464: PUSH
60465: LD_VAR 0 24
60469: PUSH
60470: LD_VAR 0 25
60474: PUSH
60475: LD_VAR 0 26
60479: PUSH
60480: LD_VAR 0 27
60484: PUSH
60485: LD_VAR 0 28
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: PUSH
60498: LD_VAR 0 4
60502: PUSH
60503: LD_INT 1
60505: PLUS
60506: ARRAY
60507: ST_TO_ADDR
60508: GO 60511
60510: POP
60511: GO 61066
60513: LD_INT 2
60515: DOUBLE
60516: EQUAL
60517: IFTRUE 60527
60519: LD_INT 3
60521: DOUBLE
60522: EQUAL
60523: IFTRUE 60527
60525: GO 60583
60527: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60528: LD_ADDR_VAR 0 9
60532: PUSH
60533: LD_VAR 0 29
60537: PUSH
60538: LD_VAR 0 30
60542: PUSH
60543: LD_VAR 0 31
60547: PUSH
60548: LD_VAR 0 32
60552: PUSH
60553: LD_VAR 0 33
60557: PUSH
60558: LD_VAR 0 34
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_VAR 0 4
60575: PUSH
60576: LD_INT 1
60578: PLUS
60579: ARRAY
60580: ST_TO_ADDR
60581: GO 61066
60583: LD_INT 16
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60645
60589: LD_INT 17
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60645
60595: LD_INT 18
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60645
60601: LD_INT 19
60603: DOUBLE
60604: EQUAL
60605: IFTRUE 60645
60607: LD_INT 22
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60645
60613: LD_INT 20
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60645
60619: LD_INT 21
60621: DOUBLE
60622: EQUAL
60623: IFTRUE 60645
60625: LD_INT 23
60627: DOUBLE
60628: EQUAL
60629: IFTRUE 60645
60631: LD_INT 24
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60645
60637: LD_INT 25
60639: DOUBLE
60640: EQUAL
60641: IFTRUE 60645
60643: GO 60701
60645: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60646: LD_ADDR_VAR 0 9
60650: PUSH
60651: LD_VAR 0 35
60655: PUSH
60656: LD_VAR 0 36
60660: PUSH
60661: LD_VAR 0 37
60665: PUSH
60666: LD_VAR 0 38
60670: PUSH
60671: LD_VAR 0 39
60675: PUSH
60676: LD_VAR 0 40
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_VAR 0 4
60693: PUSH
60694: LD_INT 1
60696: PLUS
60697: ARRAY
60698: ST_TO_ADDR
60699: GO 61066
60701: LD_INT 6
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60757
60707: LD_INT 7
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60757
60713: LD_INT 8
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60757
60719: LD_INT 13
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60757
60725: LD_INT 12
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60757
60731: LD_INT 15
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60757
60737: LD_INT 11
60739: DOUBLE
60740: EQUAL
60741: IFTRUE 60757
60743: LD_INT 14
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60757
60749: LD_INT 10
60751: DOUBLE
60752: EQUAL
60753: IFTRUE 60757
60755: GO 60813
60757: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60758: LD_ADDR_VAR 0 9
60762: PUSH
60763: LD_VAR 0 41
60767: PUSH
60768: LD_VAR 0 42
60772: PUSH
60773: LD_VAR 0 43
60777: PUSH
60778: LD_VAR 0 44
60782: PUSH
60783: LD_VAR 0 45
60787: PUSH
60788: LD_VAR 0 46
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: PUSH
60801: LD_VAR 0 4
60805: PUSH
60806: LD_INT 1
60808: PLUS
60809: ARRAY
60810: ST_TO_ADDR
60811: GO 61066
60813: LD_INT 36
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60821
60819: GO 60877
60821: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60822: LD_ADDR_VAR 0 9
60826: PUSH
60827: LD_VAR 0 47
60831: PUSH
60832: LD_VAR 0 48
60836: PUSH
60837: LD_VAR 0 49
60841: PUSH
60842: LD_VAR 0 50
60846: PUSH
60847: LD_VAR 0 51
60851: PUSH
60852: LD_VAR 0 52
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: LD_VAR 0 4
60869: PUSH
60870: LD_INT 1
60872: PLUS
60873: ARRAY
60874: ST_TO_ADDR
60875: GO 61066
60877: LD_INT 4
60879: DOUBLE
60880: EQUAL
60881: IFTRUE 60903
60883: LD_INT 5
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60903
60889: LD_INT 34
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60903
60895: LD_INT 37
60897: DOUBLE
60898: EQUAL
60899: IFTRUE 60903
60901: GO 60959
60903: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60904: LD_ADDR_VAR 0 9
60908: PUSH
60909: LD_VAR 0 53
60913: PUSH
60914: LD_VAR 0 54
60918: PUSH
60919: LD_VAR 0 55
60923: PUSH
60924: LD_VAR 0 56
60928: PUSH
60929: LD_VAR 0 57
60933: PUSH
60934: LD_VAR 0 58
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: LD_VAR 0 4
60951: PUSH
60952: LD_INT 1
60954: PLUS
60955: ARRAY
60956: ST_TO_ADDR
60957: GO 61066
60959: LD_INT 31
60961: DOUBLE
60962: EQUAL
60963: IFTRUE 61009
60965: LD_INT 32
60967: DOUBLE
60968: EQUAL
60969: IFTRUE 61009
60971: LD_INT 33
60973: DOUBLE
60974: EQUAL
60975: IFTRUE 61009
60977: LD_INT 27
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 61009
60983: LD_INT 26
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 61009
60989: LD_INT 28
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 61009
60995: LD_INT 29
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61009
61001: LD_INT 30
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61065
61009: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61010: LD_ADDR_VAR 0 9
61014: PUSH
61015: LD_VAR 0 59
61019: PUSH
61020: LD_VAR 0 60
61024: PUSH
61025: LD_VAR 0 61
61029: PUSH
61030: LD_VAR 0 62
61034: PUSH
61035: LD_VAR 0 63
61039: PUSH
61040: LD_VAR 0 64
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: PUSH
61053: LD_VAR 0 4
61057: PUSH
61058: LD_INT 1
61060: PLUS
61061: ARRAY
61062: ST_TO_ADDR
61063: GO 61066
61065: POP
// temp_list2 = [ ] ;
61066: LD_ADDR_VAR 0 10
61070: PUSH
61071: EMPTY
61072: ST_TO_ADDR
// for i in temp_list do
61073: LD_ADDR_VAR 0 8
61077: PUSH
61078: LD_VAR 0 9
61082: PUSH
61083: FOR_IN
61084: IFFALSE 61136
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61086: LD_ADDR_VAR 0 10
61090: PUSH
61091: LD_VAR 0 10
61095: PUSH
61096: LD_VAR 0 8
61100: PUSH
61101: LD_INT 1
61103: ARRAY
61104: PUSH
61105: LD_VAR 0 2
61109: PLUS
61110: PUSH
61111: LD_VAR 0 8
61115: PUSH
61116: LD_INT 2
61118: ARRAY
61119: PUSH
61120: LD_VAR 0 3
61124: PLUS
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: EMPTY
61131: LIST
61132: ADD
61133: ST_TO_ADDR
61134: GO 61083
61136: POP
61137: POP
// result = temp_list2 ;
61138: LD_ADDR_VAR 0 7
61142: PUSH
61143: LD_VAR 0 10
61147: ST_TO_ADDR
// end ;
61148: LD_VAR 0 7
61152: RET
// export function EnemyInRange ( unit , dist ) ; begin
61153: LD_INT 0
61155: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61156: LD_ADDR_VAR 0 3
61160: PUSH
61161: LD_VAR 0 1
61165: PPUSH
61166: CALL_OW 255
61170: PPUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 250
61180: PPUSH
61181: LD_VAR 0 1
61185: PPUSH
61186: CALL_OW 251
61190: PPUSH
61191: LD_VAR 0 2
61195: PPUSH
61196: CALL 34526 0 4
61200: PUSH
61201: LD_INT 4
61203: ARRAY
61204: ST_TO_ADDR
// end ;
61205: LD_VAR 0 3
61209: RET
// export function PlayerSeeMe ( unit ) ; begin
61210: LD_INT 0
61212: PPUSH
// result := See ( your_side , unit ) ;
61213: LD_ADDR_VAR 0 2
61217: PUSH
61218: LD_OWVAR 2
61222: PPUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 292
61232: ST_TO_ADDR
// end ;
61233: LD_VAR 0 2
61237: RET
// export function ReverseDir ( unit ) ; begin
61238: LD_INT 0
61240: PPUSH
// if not unit then
61241: LD_VAR 0 1
61245: NOT
61246: IFFALSE 61250
// exit ;
61248: GO 61273
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61250: LD_ADDR_VAR 0 2
61254: PUSH
61255: LD_VAR 0 1
61259: PPUSH
61260: CALL_OW 254
61264: PUSH
61265: LD_INT 3
61267: PLUS
61268: PUSH
61269: LD_INT 6
61271: MOD
61272: ST_TO_ADDR
// end ;
61273: LD_VAR 0 2
61277: RET
// export function ReverseArray ( array ) ; var i ; begin
61278: LD_INT 0
61280: PPUSH
61281: PPUSH
// if not array then
61282: LD_VAR 0 1
61286: NOT
61287: IFFALSE 61291
// exit ;
61289: GO 61346
// result := [ ] ;
61291: LD_ADDR_VAR 0 2
61295: PUSH
61296: EMPTY
61297: ST_TO_ADDR
// for i := array downto 1 do
61298: LD_ADDR_VAR 0 3
61302: PUSH
61303: DOUBLE
61304: LD_VAR 0 1
61308: INC
61309: ST_TO_ADDR
61310: LD_INT 1
61312: PUSH
61313: FOR_DOWNTO
61314: IFFALSE 61344
// result := Join ( result , array [ i ] ) ;
61316: LD_ADDR_VAR 0 2
61320: PUSH
61321: LD_VAR 0 2
61325: PPUSH
61326: LD_VAR 0 1
61330: PUSH
61331: LD_VAR 0 3
61335: ARRAY
61336: PPUSH
61337: CALL 66011 0 2
61341: ST_TO_ADDR
61342: GO 61313
61344: POP
61345: POP
// end ;
61346: LD_VAR 0 2
61350: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61351: LD_INT 0
61353: PPUSH
61354: PPUSH
61355: PPUSH
61356: PPUSH
61357: PPUSH
61358: PPUSH
// if not unit or not hexes then
61359: LD_VAR 0 1
61363: NOT
61364: PUSH
61365: LD_VAR 0 2
61369: NOT
61370: OR
61371: IFFALSE 61375
// exit ;
61373: GO 61498
// dist := 9999 ;
61375: LD_ADDR_VAR 0 5
61379: PUSH
61380: LD_INT 9999
61382: ST_TO_ADDR
// for i = 1 to hexes do
61383: LD_ADDR_VAR 0 4
61387: PUSH
61388: DOUBLE
61389: LD_INT 1
61391: DEC
61392: ST_TO_ADDR
61393: LD_VAR 0 2
61397: PUSH
61398: FOR_TO
61399: IFFALSE 61486
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61401: LD_ADDR_VAR 0 6
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: LD_VAR 0 2
61415: PUSH
61416: LD_VAR 0 4
61420: ARRAY
61421: PUSH
61422: LD_INT 1
61424: ARRAY
61425: PPUSH
61426: LD_VAR 0 2
61430: PUSH
61431: LD_VAR 0 4
61435: ARRAY
61436: PUSH
61437: LD_INT 2
61439: ARRAY
61440: PPUSH
61441: CALL_OW 297
61445: ST_TO_ADDR
// if tdist < dist then
61446: LD_VAR 0 6
61450: PUSH
61451: LD_VAR 0 5
61455: LESS
61456: IFFALSE 61484
// begin hex := hexes [ i ] ;
61458: LD_ADDR_VAR 0 8
61462: PUSH
61463: LD_VAR 0 2
61467: PUSH
61468: LD_VAR 0 4
61472: ARRAY
61473: ST_TO_ADDR
// dist := tdist ;
61474: LD_ADDR_VAR 0 5
61478: PUSH
61479: LD_VAR 0 6
61483: ST_TO_ADDR
// end ; end ;
61484: GO 61398
61486: POP
61487: POP
// result := hex ;
61488: LD_ADDR_VAR 0 3
61492: PUSH
61493: LD_VAR 0 8
61497: ST_TO_ADDR
// end ;
61498: LD_VAR 0 3
61502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61503: LD_INT 0
61505: PPUSH
61506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61507: LD_VAR 0 1
61511: NOT
61512: PUSH
61513: LD_VAR 0 1
61517: PUSH
61518: LD_INT 21
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 23
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PPUSH
61542: CALL_OW 69
61546: IN
61547: NOT
61548: OR
61549: IFFALSE 61553
// exit ;
61551: GO 61600
// for i = 1 to 3 do
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: DOUBLE
61559: LD_INT 1
61561: DEC
61562: ST_TO_ADDR
61563: LD_INT 3
61565: PUSH
61566: FOR_TO
61567: IFFALSE 61598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 250
61578: PPUSH
61579: LD_VAR 0 1
61583: PPUSH
61584: CALL_OW 251
61588: PPUSH
61589: LD_INT 1
61591: PPUSH
61592: CALL_OW 453
61596: GO 61566
61598: POP
61599: POP
// end ;
61600: LD_VAR 0 2
61604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61605: LD_INT 0
61607: PPUSH
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
// if not unit or not enemy_unit then
61613: LD_VAR 0 1
61617: NOT
61618: PUSH
61619: LD_VAR 0 2
61623: NOT
61624: OR
61625: IFFALSE 61629
// exit ;
61627: GO 62096
// if GetLives ( i ) < 250 then
61629: LD_VAR 0 4
61633: PPUSH
61634: CALL_OW 256
61638: PUSH
61639: LD_INT 250
61641: LESS
61642: IFFALSE 61655
// begin ComAutodestruct ( i ) ;
61644: LD_VAR 0 4
61648: PPUSH
61649: CALL 61503 0 1
// exit ;
61653: GO 62096
// end ; x := GetX ( enemy_unit ) ;
61655: LD_ADDR_VAR 0 7
61659: PUSH
61660: LD_VAR 0 2
61664: PPUSH
61665: CALL_OW 250
61669: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61670: LD_ADDR_VAR 0 8
61674: PUSH
61675: LD_VAR 0 2
61679: PPUSH
61680: CALL_OW 251
61684: ST_TO_ADDR
// if not x or not y then
61685: LD_VAR 0 7
61689: NOT
61690: PUSH
61691: LD_VAR 0 8
61695: NOT
61696: OR
61697: IFFALSE 61701
// exit ;
61699: GO 62096
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61701: LD_ADDR_VAR 0 6
61705: PUSH
61706: LD_VAR 0 7
61710: PPUSH
61711: LD_INT 0
61713: PPUSH
61714: LD_INT 4
61716: PPUSH
61717: CALL_OW 272
61721: PUSH
61722: LD_VAR 0 8
61726: PPUSH
61727: LD_INT 0
61729: PPUSH
61730: LD_INT 4
61732: PPUSH
61733: CALL_OW 273
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_VAR 0 7
61746: PPUSH
61747: LD_INT 1
61749: PPUSH
61750: LD_INT 4
61752: PPUSH
61753: CALL_OW 272
61757: PUSH
61758: LD_VAR 0 8
61762: PPUSH
61763: LD_INT 1
61765: PPUSH
61766: LD_INT 4
61768: PPUSH
61769: CALL_OW 273
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_VAR 0 7
61782: PPUSH
61783: LD_INT 2
61785: PPUSH
61786: LD_INT 4
61788: PPUSH
61789: CALL_OW 272
61793: PUSH
61794: LD_VAR 0 8
61798: PPUSH
61799: LD_INT 2
61801: PPUSH
61802: LD_INT 4
61804: PPUSH
61805: CALL_OW 273
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_VAR 0 7
61818: PPUSH
61819: LD_INT 3
61821: PPUSH
61822: LD_INT 4
61824: PPUSH
61825: CALL_OW 272
61829: PUSH
61830: LD_VAR 0 8
61834: PPUSH
61835: LD_INT 3
61837: PPUSH
61838: LD_INT 4
61840: PPUSH
61841: CALL_OW 273
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_VAR 0 7
61854: PPUSH
61855: LD_INT 4
61857: PPUSH
61858: LD_INT 4
61860: PPUSH
61861: CALL_OW 272
61865: PUSH
61866: LD_VAR 0 8
61870: PPUSH
61871: LD_INT 4
61873: PPUSH
61874: LD_INT 4
61876: PPUSH
61877: CALL_OW 273
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 7
61890: PPUSH
61891: LD_INT 5
61893: PPUSH
61894: LD_INT 4
61896: PPUSH
61897: CALL_OW 272
61901: PUSH
61902: LD_VAR 0 8
61906: PPUSH
61907: LD_INT 5
61909: PPUSH
61910: LD_INT 4
61912: PPUSH
61913: CALL_OW 273
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// for i = tmp downto 1 do
61930: LD_ADDR_VAR 0 4
61934: PUSH
61935: DOUBLE
61936: LD_VAR 0 6
61940: INC
61941: ST_TO_ADDR
61942: LD_INT 1
61944: PUSH
61945: FOR_DOWNTO
61946: IFFALSE 62047
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61948: LD_VAR 0 6
61952: PUSH
61953: LD_VAR 0 4
61957: ARRAY
61958: PUSH
61959: LD_INT 1
61961: ARRAY
61962: PPUSH
61963: LD_VAR 0 6
61967: PUSH
61968: LD_VAR 0 4
61972: ARRAY
61973: PUSH
61974: LD_INT 2
61976: ARRAY
61977: PPUSH
61978: CALL_OW 488
61982: NOT
61983: PUSH
61984: LD_VAR 0 6
61988: PUSH
61989: LD_VAR 0 4
61993: ARRAY
61994: PUSH
61995: LD_INT 1
61997: ARRAY
61998: PPUSH
61999: LD_VAR 0 6
62003: PUSH
62004: LD_VAR 0 4
62008: ARRAY
62009: PUSH
62010: LD_INT 2
62012: ARRAY
62013: PPUSH
62014: CALL_OW 428
62018: PUSH
62019: LD_INT 0
62021: NONEQUAL
62022: OR
62023: IFFALSE 62045
// tmp := Delete ( tmp , i ) ;
62025: LD_ADDR_VAR 0 6
62029: PUSH
62030: LD_VAR 0 6
62034: PPUSH
62035: LD_VAR 0 4
62039: PPUSH
62040: CALL_OW 3
62044: ST_TO_ADDR
62045: GO 61945
62047: POP
62048: POP
// j := GetClosestHex ( unit , tmp ) ;
62049: LD_ADDR_VAR 0 5
62053: PUSH
62054: LD_VAR 0 1
62058: PPUSH
62059: LD_VAR 0 6
62063: PPUSH
62064: CALL 61351 0 2
62068: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62069: LD_VAR 0 1
62073: PPUSH
62074: LD_VAR 0 5
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PPUSH
62083: LD_VAR 0 5
62087: PUSH
62088: LD_INT 2
62090: ARRAY
62091: PPUSH
62092: CALL_OW 111
// end ;
62096: LD_VAR 0 3
62100: RET
// export function PrepareApemanSoldier ( ) ; begin
62101: LD_INT 0
62103: PPUSH
// uc_nation := 0 ;
62104: LD_ADDR_OWVAR 21
62108: PUSH
62109: LD_INT 0
62111: ST_TO_ADDR
// hc_sex := sex_male ;
62112: LD_ADDR_OWVAR 27
62116: PUSH
62117: LD_INT 1
62119: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62120: LD_ADDR_OWVAR 28
62124: PUSH
62125: LD_INT 15
62127: ST_TO_ADDR
// hc_gallery :=  ;
62128: LD_ADDR_OWVAR 33
62132: PUSH
62133: LD_STRING 
62135: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62136: LD_ADDR_OWVAR 31
62140: PUSH
62141: LD_INT 0
62143: PPUSH
62144: LD_INT 3
62146: PPUSH
62147: CALL_OW 12
62151: PUSH
62152: LD_INT 0
62154: PPUSH
62155: LD_INT 3
62157: PPUSH
62158: CALL_OW 12
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: ST_TO_ADDR
// end ;
62175: LD_VAR 0 1
62179: RET
// export function PrepareApemanEngineer ( ) ; begin
62180: LD_INT 0
62182: PPUSH
// uc_nation := 0 ;
62183: LD_ADDR_OWVAR 21
62187: PUSH
62188: LD_INT 0
62190: ST_TO_ADDR
// hc_sex := sex_male ;
62191: LD_ADDR_OWVAR 27
62195: PUSH
62196: LD_INT 1
62198: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62199: LD_ADDR_OWVAR 28
62203: PUSH
62204: LD_INT 16
62206: ST_TO_ADDR
// hc_gallery :=  ;
62207: LD_ADDR_OWVAR 33
62211: PUSH
62212: LD_STRING 
62214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62215: LD_ADDR_OWVAR 31
62219: PUSH
62220: LD_INT 0
62222: PPUSH
62223: LD_INT 3
62225: PPUSH
62226: CALL_OW 12
62230: PUSH
62231: LD_INT 0
62233: PPUSH
62234: LD_INT 3
62236: PPUSH
62237: CALL_OW 12
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: ST_TO_ADDR
// end ;
62254: LD_VAR 0 1
62258: RET
// export function PrepareApeman ( agressivity ) ; begin
62259: LD_INT 0
62261: PPUSH
// uc_side := 0 ;
62262: LD_ADDR_OWVAR 20
62266: PUSH
62267: LD_INT 0
62269: ST_TO_ADDR
// uc_nation := 0 ;
62270: LD_ADDR_OWVAR 21
62274: PUSH
62275: LD_INT 0
62277: ST_TO_ADDR
// hc_sex := sex_male ;
62278: LD_ADDR_OWVAR 27
62282: PUSH
62283: LD_INT 1
62285: ST_TO_ADDR
// hc_class := class_apeman ;
62286: LD_ADDR_OWVAR 28
62290: PUSH
62291: LD_INT 12
62293: ST_TO_ADDR
// hc_gallery :=  ;
62294: LD_ADDR_OWVAR 33
62298: PUSH
62299: LD_STRING 
62301: ST_TO_ADDR
// if agressivity = 0 then
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 0
62309: EQUAL
62310: IFFALSE 62322
// hc_agressivity := 0 else
62312: LD_ADDR_OWVAR 35
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
62320: GO 62343
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62322: LD_ADDR_OWVAR 35
62326: PUSH
62327: LD_VAR 0 1
62331: NEG
62332: PPUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: CALL_OW 12
62342: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62343: LD_ADDR_OWVAR 31
62347: PUSH
62348: LD_INT 0
62350: PPUSH
62351: LD_INT 3
62353: PPUSH
62354: CALL_OW 12
62358: PUSH
62359: LD_INT 0
62361: PPUSH
62362: LD_INT 3
62364: PPUSH
62365: CALL_OW 12
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// end ;
62382: LD_VAR 0 2
62386: RET
// export function PrepareTiger ( agressivity ) ; begin
62387: LD_INT 0
62389: PPUSH
// uc_side := 0 ;
62390: LD_ADDR_OWVAR 20
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
// uc_nation := 0 ;
62398: LD_ADDR_OWVAR 21
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// hc_class := class_tiger ;
62406: LD_ADDR_OWVAR 28
62410: PUSH
62411: LD_INT 14
62413: ST_TO_ADDR
// hc_gallery :=  ;
62414: LD_ADDR_OWVAR 33
62418: PUSH
62419: LD_STRING 
62421: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62422: LD_ADDR_OWVAR 35
62426: PUSH
62427: LD_VAR 0 1
62431: NEG
62432: PPUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: CALL_OW 12
62442: ST_TO_ADDR
// end ;
62443: LD_VAR 0 2
62447: RET
// export function PrepareEnchidna ( ) ; begin
62448: LD_INT 0
62450: PPUSH
// uc_side := 0 ;
62451: LD_ADDR_OWVAR 20
62455: PUSH
62456: LD_INT 0
62458: ST_TO_ADDR
// uc_nation := 0 ;
62459: LD_ADDR_OWVAR 21
62463: PUSH
62464: LD_INT 0
62466: ST_TO_ADDR
// hc_class := class_baggie ;
62467: LD_ADDR_OWVAR 28
62471: PUSH
62472: LD_INT 13
62474: ST_TO_ADDR
// hc_gallery :=  ;
62475: LD_ADDR_OWVAR 33
62479: PUSH
62480: LD_STRING 
62482: ST_TO_ADDR
// end ;
62483: LD_VAR 0 1
62487: RET
// export function PrepareFrog ( ) ; begin
62488: LD_INT 0
62490: PPUSH
// uc_side := 0 ;
62491: LD_ADDR_OWVAR 20
62495: PUSH
62496: LD_INT 0
62498: ST_TO_ADDR
// uc_nation := 0 ;
62499: LD_ADDR_OWVAR 21
62503: PUSH
62504: LD_INT 0
62506: ST_TO_ADDR
// hc_class := class_frog ;
62507: LD_ADDR_OWVAR 28
62511: PUSH
62512: LD_INT 19
62514: ST_TO_ADDR
// hc_gallery :=  ;
62515: LD_ADDR_OWVAR 33
62519: PUSH
62520: LD_STRING 
62522: ST_TO_ADDR
// end ;
62523: LD_VAR 0 1
62527: RET
// export function PrepareFish ( ) ; begin
62528: LD_INT 0
62530: PPUSH
// uc_side := 0 ;
62531: LD_ADDR_OWVAR 20
62535: PUSH
62536: LD_INT 0
62538: ST_TO_ADDR
// uc_nation := 0 ;
62539: LD_ADDR_OWVAR 21
62543: PUSH
62544: LD_INT 0
62546: ST_TO_ADDR
// hc_class := class_fish ;
62547: LD_ADDR_OWVAR 28
62551: PUSH
62552: LD_INT 20
62554: ST_TO_ADDR
// hc_gallery :=  ;
62555: LD_ADDR_OWVAR 33
62559: PUSH
62560: LD_STRING 
62562: ST_TO_ADDR
// end ;
62563: LD_VAR 0 1
62567: RET
// export function PrepareBird ( ) ; begin
62568: LD_INT 0
62570: PPUSH
// uc_side := 0 ;
62571: LD_ADDR_OWVAR 20
62575: PUSH
62576: LD_INT 0
62578: ST_TO_ADDR
// uc_nation := 0 ;
62579: LD_ADDR_OWVAR 21
62583: PUSH
62584: LD_INT 0
62586: ST_TO_ADDR
// hc_class := class_phororhacos ;
62587: LD_ADDR_OWVAR 28
62591: PUSH
62592: LD_INT 18
62594: ST_TO_ADDR
// hc_gallery :=  ;
62595: LD_ADDR_OWVAR 33
62599: PUSH
62600: LD_STRING 
62602: ST_TO_ADDR
// end ;
62603: LD_VAR 0 1
62607: RET
// export function PrepareHorse ( ) ; begin
62608: LD_INT 0
62610: PPUSH
// uc_side := 0 ;
62611: LD_ADDR_OWVAR 20
62615: PUSH
62616: LD_INT 0
62618: ST_TO_ADDR
// uc_nation := 0 ;
62619: LD_ADDR_OWVAR 21
62623: PUSH
62624: LD_INT 0
62626: ST_TO_ADDR
// hc_class := class_horse ;
62627: LD_ADDR_OWVAR 28
62631: PUSH
62632: LD_INT 21
62634: ST_TO_ADDR
// hc_gallery :=  ;
62635: LD_ADDR_OWVAR 33
62639: PUSH
62640: LD_STRING 
62642: ST_TO_ADDR
// end ;
62643: LD_VAR 0 1
62647: RET
// export function PrepareMastodont ( ) ; begin
62648: LD_INT 0
62650: PPUSH
// uc_side := 0 ;
62651: LD_ADDR_OWVAR 20
62655: PUSH
62656: LD_INT 0
62658: ST_TO_ADDR
// uc_nation := 0 ;
62659: LD_ADDR_OWVAR 21
62663: PUSH
62664: LD_INT 0
62666: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62667: LD_ADDR_OWVAR 37
62671: PUSH
62672: LD_INT 31
62674: ST_TO_ADDR
// vc_control := control_rider ;
62675: LD_ADDR_OWVAR 38
62679: PUSH
62680: LD_INT 4
62682: ST_TO_ADDR
// end ;
62683: LD_VAR 0 1
62687: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62688: LD_INT 0
62690: PPUSH
62691: PPUSH
62692: PPUSH
// uc_side = 0 ;
62693: LD_ADDR_OWVAR 20
62697: PUSH
62698: LD_INT 0
62700: ST_TO_ADDR
// uc_nation = 0 ;
62701: LD_ADDR_OWVAR 21
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// InitHc_All ( ) ;
62709: CALL_OW 584
// InitVc ;
62713: CALL_OW 20
// if mastodonts then
62717: LD_VAR 0 6
62721: IFFALSE 62788
// for i = 1 to mastodonts do
62723: LD_ADDR_VAR 0 11
62727: PUSH
62728: DOUBLE
62729: LD_INT 1
62731: DEC
62732: ST_TO_ADDR
62733: LD_VAR 0 6
62737: PUSH
62738: FOR_TO
62739: IFFALSE 62786
// begin vc_chassis := 31 ;
62741: LD_ADDR_OWVAR 37
62745: PUSH
62746: LD_INT 31
62748: ST_TO_ADDR
// vc_control := control_rider ;
62749: LD_ADDR_OWVAR 38
62753: PUSH
62754: LD_INT 4
62756: ST_TO_ADDR
// animal := CreateVehicle ;
62757: LD_ADDR_VAR 0 12
62761: PUSH
62762: CALL_OW 45
62766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62767: LD_VAR 0 12
62771: PPUSH
62772: LD_VAR 0 8
62776: PPUSH
62777: LD_INT 0
62779: PPUSH
62780: CALL 64916 0 3
// end ;
62784: GO 62738
62786: POP
62787: POP
// if horses then
62788: LD_VAR 0 5
62792: IFFALSE 62859
// for i = 1 to horses do
62794: LD_ADDR_VAR 0 11
62798: PUSH
62799: DOUBLE
62800: LD_INT 1
62802: DEC
62803: ST_TO_ADDR
62804: LD_VAR 0 5
62808: PUSH
62809: FOR_TO
62810: IFFALSE 62857
// begin hc_class := 21 ;
62812: LD_ADDR_OWVAR 28
62816: PUSH
62817: LD_INT 21
62819: ST_TO_ADDR
// hc_gallery :=  ;
62820: LD_ADDR_OWVAR 33
62824: PUSH
62825: LD_STRING 
62827: ST_TO_ADDR
// animal := CreateHuman ;
62828: LD_ADDR_VAR 0 12
62832: PUSH
62833: CALL_OW 44
62837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62838: LD_VAR 0 12
62842: PPUSH
62843: LD_VAR 0 8
62847: PPUSH
62848: LD_INT 0
62850: PPUSH
62851: CALL 64916 0 3
// end ;
62855: GO 62809
62857: POP
62858: POP
// if birds then
62859: LD_VAR 0 1
62863: IFFALSE 62930
// for i = 1 to birds do
62865: LD_ADDR_VAR 0 11
62869: PUSH
62870: DOUBLE
62871: LD_INT 1
62873: DEC
62874: ST_TO_ADDR
62875: LD_VAR 0 1
62879: PUSH
62880: FOR_TO
62881: IFFALSE 62928
// begin hc_class := 18 ;
62883: LD_ADDR_OWVAR 28
62887: PUSH
62888: LD_INT 18
62890: ST_TO_ADDR
// hc_gallery =  ;
62891: LD_ADDR_OWVAR 33
62895: PUSH
62896: LD_STRING 
62898: ST_TO_ADDR
// animal := CreateHuman ;
62899: LD_ADDR_VAR 0 12
62903: PUSH
62904: CALL_OW 44
62908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62909: LD_VAR 0 12
62913: PPUSH
62914: LD_VAR 0 8
62918: PPUSH
62919: LD_INT 0
62921: PPUSH
62922: CALL 64916 0 3
// end ;
62926: GO 62880
62928: POP
62929: POP
// if tigers then
62930: LD_VAR 0 2
62934: IFFALSE 63018
// for i = 1 to tigers do
62936: LD_ADDR_VAR 0 11
62940: PUSH
62941: DOUBLE
62942: LD_INT 1
62944: DEC
62945: ST_TO_ADDR
62946: LD_VAR 0 2
62950: PUSH
62951: FOR_TO
62952: IFFALSE 63016
// begin hc_class = class_tiger ;
62954: LD_ADDR_OWVAR 28
62958: PUSH
62959: LD_INT 14
62961: ST_TO_ADDR
// hc_gallery =  ;
62962: LD_ADDR_OWVAR 33
62966: PUSH
62967: LD_STRING 
62969: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62970: LD_ADDR_OWVAR 35
62974: PUSH
62975: LD_INT 7
62977: NEG
62978: PPUSH
62979: LD_INT 7
62981: PPUSH
62982: CALL_OW 12
62986: ST_TO_ADDR
// animal := CreateHuman ;
62987: LD_ADDR_VAR 0 12
62991: PUSH
62992: CALL_OW 44
62996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62997: LD_VAR 0 12
63001: PPUSH
63002: LD_VAR 0 8
63006: PPUSH
63007: LD_INT 0
63009: PPUSH
63010: CALL 64916 0 3
// end ;
63014: GO 62951
63016: POP
63017: POP
// if apemans then
63018: LD_VAR 0 3
63022: IFFALSE 63145
// for i = 1 to apemans do
63024: LD_ADDR_VAR 0 11
63028: PUSH
63029: DOUBLE
63030: LD_INT 1
63032: DEC
63033: ST_TO_ADDR
63034: LD_VAR 0 3
63038: PUSH
63039: FOR_TO
63040: IFFALSE 63143
// begin hc_class = class_apeman ;
63042: LD_ADDR_OWVAR 28
63046: PUSH
63047: LD_INT 12
63049: ST_TO_ADDR
// hc_gallery =  ;
63050: LD_ADDR_OWVAR 33
63054: PUSH
63055: LD_STRING 
63057: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63058: LD_ADDR_OWVAR 35
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PPUSH
63067: LD_INT 2
63069: PPUSH
63070: CALL_OW 12
63074: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63075: LD_ADDR_OWVAR 31
63079: PUSH
63080: LD_INT 1
63082: PPUSH
63083: LD_INT 3
63085: PPUSH
63086: CALL_OW 12
63090: PUSH
63091: LD_INT 1
63093: PPUSH
63094: LD_INT 3
63096: PPUSH
63097: CALL_OW 12
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// animal := CreateHuman ;
63114: LD_ADDR_VAR 0 12
63118: PUSH
63119: CALL_OW 44
63123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63124: LD_VAR 0 12
63128: PPUSH
63129: LD_VAR 0 8
63133: PPUSH
63134: LD_INT 0
63136: PPUSH
63137: CALL 64916 0 3
// end ;
63141: GO 63039
63143: POP
63144: POP
// if enchidnas then
63145: LD_VAR 0 4
63149: IFFALSE 63216
// for i = 1 to enchidnas do
63151: LD_ADDR_VAR 0 11
63155: PUSH
63156: DOUBLE
63157: LD_INT 1
63159: DEC
63160: ST_TO_ADDR
63161: LD_VAR 0 4
63165: PUSH
63166: FOR_TO
63167: IFFALSE 63214
// begin hc_class = 13 ;
63169: LD_ADDR_OWVAR 28
63173: PUSH
63174: LD_INT 13
63176: ST_TO_ADDR
// hc_gallery =  ;
63177: LD_ADDR_OWVAR 33
63181: PUSH
63182: LD_STRING 
63184: ST_TO_ADDR
// animal := CreateHuman ;
63185: LD_ADDR_VAR 0 12
63189: PUSH
63190: CALL_OW 44
63194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63195: LD_VAR 0 12
63199: PPUSH
63200: LD_VAR 0 8
63204: PPUSH
63205: LD_INT 0
63207: PPUSH
63208: CALL 64916 0 3
// end ;
63212: GO 63166
63214: POP
63215: POP
// if fishes then
63216: LD_VAR 0 7
63220: IFFALSE 63287
// for i = 1 to fishes do
63222: LD_ADDR_VAR 0 11
63226: PUSH
63227: DOUBLE
63228: LD_INT 1
63230: DEC
63231: ST_TO_ADDR
63232: LD_VAR 0 7
63236: PUSH
63237: FOR_TO
63238: IFFALSE 63285
// begin hc_class = 20 ;
63240: LD_ADDR_OWVAR 28
63244: PUSH
63245: LD_INT 20
63247: ST_TO_ADDR
// hc_gallery =  ;
63248: LD_ADDR_OWVAR 33
63252: PUSH
63253: LD_STRING 
63255: ST_TO_ADDR
// animal := CreateHuman ;
63256: LD_ADDR_VAR 0 12
63260: PUSH
63261: CALL_OW 44
63265: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63266: LD_VAR 0 12
63270: PPUSH
63271: LD_VAR 0 9
63275: PPUSH
63276: LD_INT 0
63278: PPUSH
63279: CALL 64916 0 3
// end ;
63283: GO 63237
63285: POP
63286: POP
// end ;
63287: LD_VAR 0 10
63291: RET
// export function WantHeal ( sci , unit ) ; begin
63292: LD_INT 0
63294: PPUSH
// if GetTaskList ( sci ) > 0 then
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 437
63304: PUSH
63305: LD_INT 0
63307: GREATER
63308: IFFALSE 63378
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63310: LD_VAR 0 1
63314: PPUSH
63315: CALL_OW 437
63319: PUSH
63320: LD_INT 1
63322: ARRAY
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: PUSH
63328: LD_STRING l
63330: EQUAL
63331: PUSH
63332: LD_VAR 0 1
63336: PPUSH
63337: CALL_OW 437
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PUSH
63346: LD_INT 4
63348: ARRAY
63349: PUSH
63350: LD_VAR 0 2
63354: EQUAL
63355: AND
63356: IFFALSE 63368
// result := true else
63358: LD_ADDR_VAR 0 3
63362: PUSH
63363: LD_INT 1
63365: ST_TO_ADDR
63366: GO 63376
// result := false ;
63368: LD_ADDR_VAR 0 3
63372: PUSH
63373: LD_INT 0
63375: ST_TO_ADDR
// end else
63376: GO 63386
// result := false ;
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_INT 0
63385: ST_TO_ADDR
// end ;
63386: LD_VAR 0 3
63390: RET
// export function HealTarget ( sci ) ; begin
63391: LD_INT 0
63393: PPUSH
// if not sci then
63394: LD_VAR 0 1
63398: NOT
63399: IFFALSE 63403
// exit ;
63401: GO 63468
// result := 0 ;
63403: LD_ADDR_VAR 0 2
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// if GetTaskList ( sci ) then
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 437
63420: IFFALSE 63468
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63422: LD_VAR 0 1
63426: PPUSH
63427: CALL_OW 437
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: PUSH
63440: LD_STRING l
63442: EQUAL
63443: IFFALSE 63468
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63445: LD_ADDR_VAR 0 2
63449: PUSH
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PUSH
63464: LD_INT 4
63466: ARRAY
63467: ST_TO_ADDR
// end ;
63468: LD_VAR 0 2
63472: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63473: LD_INT 0
63475: PPUSH
63476: PPUSH
63477: PPUSH
63478: PPUSH
// if not base_units then
63479: LD_VAR 0 1
63483: NOT
63484: IFFALSE 63488
// exit ;
63486: GO 63575
// result := false ;
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_INT 0
63495: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63496: LD_ADDR_VAR 0 5
63500: PUSH
63501: LD_VAR 0 1
63505: PPUSH
63506: LD_INT 21
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PPUSH
63516: CALL_OW 72
63520: ST_TO_ADDR
// if not tmp then
63521: LD_VAR 0 5
63525: NOT
63526: IFFALSE 63530
// exit ;
63528: GO 63575
// for i in tmp do
63530: LD_ADDR_VAR 0 3
63534: PUSH
63535: LD_VAR 0 5
63539: PUSH
63540: FOR_IN
63541: IFFALSE 63573
// begin result := EnemyInRange ( i , 22 ) ;
63543: LD_ADDR_VAR 0 2
63547: PUSH
63548: LD_VAR 0 3
63552: PPUSH
63553: LD_INT 22
63555: PPUSH
63556: CALL 61153 0 2
63560: ST_TO_ADDR
// if result then
63561: LD_VAR 0 2
63565: IFFALSE 63571
// exit ;
63567: POP
63568: POP
63569: GO 63575
// end ;
63571: GO 63540
63573: POP
63574: POP
// end ;
63575: LD_VAR 0 2
63579: RET
// export function FilterByTag ( units , tag ) ; begin
63580: LD_INT 0
63582: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63583: LD_ADDR_VAR 0 3
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: LD_INT 120
63595: PUSH
63596: LD_VAR 0 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PPUSH
63605: CALL_OW 72
63609: ST_TO_ADDR
// end ;
63610: LD_VAR 0 3
63614: RET
// export function IsDriver ( un ) ; begin
63615: LD_INT 0
63617: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63618: LD_ADDR_VAR 0 2
63622: PUSH
63623: LD_VAR 0 1
63627: PUSH
63628: LD_INT 55
63630: PUSH
63631: EMPTY
63632: LIST
63633: PPUSH
63634: CALL_OW 69
63638: IN
63639: ST_TO_ADDR
// end ;
63640: LD_VAR 0 2
63644: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63645: LD_INT 0
63647: PPUSH
63648: PPUSH
// list := [ ] ;
63649: LD_ADDR_VAR 0 5
63653: PUSH
63654: EMPTY
63655: ST_TO_ADDR
// case d of 0 :
63656: LD_VAR 0 3
63660: PUSH
63661: LD_INT 0
63663: DOUBLE
63664: EQUAL
63665: IFTRUE 63669
63667: GO 63802
63669: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63670: LD_ADDR_VAR 0 5
63674: PUSH
63675: LD_VAR 0 1
63679: PUSH
63680: LD_INT 4
63682: MINUS
63683: PUSH
63684: LD_VAR 0 2
63688: PUSH
63689: LD_INT 4
63691: MINUS
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_INT 3
63708: MINUS
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: PUSH
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 4
63730: PLUS
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: LD_VAR 0 1
63749: PUSH
63750: LD_INT 3
63752: PLUS
63753: PUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_INT 3
63761: PLUS
63762: PUSH
63763: LD_INT 5
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: PUSH
63771: LD_VAR 0 1
63775: PUSH
63776: LD_VAR 0 2
63780: PUSH
63781: LD_INT 4
63783: PLUS
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: ST_TO_ADDR
// end ; 1 :
63800: GO 64500
63802: LD_INT 1
63804: DOUBLE
63805: EQUAL
63806: IFTRUE 63810
63808: GO 63943
63810: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63811: LD_ADDR_VAR 0 5
63815: PUSH
63816: LD_VAR 0 1
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 4
63828: MINUS
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_INT 3
63845: MINUS
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 3
63854: MINUS
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 1
63868: PUSH
63869: LD_INT 4
63871: MINUS
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: PUSH
63886: LD_VAR 0 1
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: LD_INT 3
63898: PLUS
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: PUSH
63908: LD_VAR 0 1
63912: PUSH
63913: LD_INT 4
63915: PLUS
63916: PUSH
63917: LD_VAR 0 2
63921: PUSH
63922: LD_INT 4
63924: PLUS
63925: PUSH
63926: LD_INT 5
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// end ; 2 :
63941: GO 64500
63943: LD_INT 2
63945: DOUBLE
63946: EQUAL
63947: IFTRUE 63951
63949: GO 64080
63951: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63952: LD_ADDR_VAR 0 5
63956: PUSH
63957: LD_VAR 0 1
63961: PUSH
63962: LD_VAR 0 2
63966: PUSH
63967: LD_INT 3
63969: MINUS
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_INT 4
63986: PLUS
63987: PUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_INT 4
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 1
64005: PUSH
64006: LD_VAR 0 2
64010: PUSH
64011: LD_INT 4
64013: PLUS
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: PUSH
64023: LD_VAR 0 1
64027: PUSH
64028: LD_INT 3
64030: MINUS
64031: PUSH
64032: LD_VAR 0 2
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: PUSH
64045: LD_VAR 0 1
64049: PUSH
64050: LD_INT 4
64052: MINUS
64053: PUSH
64054: LD_VAR 0 2
64058: PUSH
64059: LD_INT 4
64061: MINUS
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: ST_TO_ADDR
// end ; 3 :
64078: GO 64500
64080: LD_INT 3
64082: DOUBLE
64083: EQUAL
64084: IFTRUE 64088
64086: GO 64221
64088: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64089: LD_ADDR_VAR 0 5
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: LD_INT 3
64101: PLUS
64102: PUSH
64103: LD_VAR 0 2
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: PUSH
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 4
64123: PLUS
64124: PUSH
64125: LD_VAR 0 2
64129: PUSH
64130: LD_INT 4
64132: PLUS
64133: PUSH
64134: LD_INT 5
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: LD_INT 4
64149: MINUS
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_VAR 0 1
64168: PUSH
64169: LD_VAR 0 2
64173: PUSH
64174: LD_INT 4
64176: MINUS
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: PUSH
64186: LD_VAR 0 1
64190: PUSH
64191: LD_INT 3
64193: MINUS
64194: PUSH
64195: LD_VAR 0 2
64199: PUSH
64200: LD_INT 3
64202: MINUS
64203: PUSH
64204: LD_INT 2
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: ST_TO_ADDR
// end ; 4 :
64219: GO 64500
64221: LD_INT 4
64223: DOUBLE
64224: EQUAL
64225: IFTRUE 64229
64227: GO 64362
64229: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64230: LD_ADDR_VAR 0 5
64234: PUSH
64235: LD_VAR 0 1
64239: PUSH
64240: LD_VAR 0 2
64244: PUSH
64245: LD_INT 4
64247: PLUS
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: PUSH
64257: LD_VAR 0 1
64261: PUSH
64262: LD_INT 3
64264: PLUS
64265: PUSH
64266: LD_VAR 0 2
64270: PUSH
64271: LD_INT 3
64273: PLUS
64274: PUSH
64275: LD_INT 5
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: PUSH
64283: LD_VAR 0 1
64287: PUSH
64288: LD_INT 4
64290: PLUS
64291: PUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: PUSH
64305: LD_VAR 0 1
64309: PUSH
64310: LD_VAR 0 2
64314: PUSH
64315: LD_INT 3
64317: MINUS
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: LD_VAR 0 1
64331: PUSH
64332: LD_INT 4
64334: MINUS
64335: PUSH
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 4
64343: MINUS
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: ST_TO_ADDR
// end ; 5 :
64360: GO 64500
64362: LD_INT 5
64364: DOUBLE
64365: EQUAL
64366: IFTRUE 64370
64368: GO 64499
64370: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64371: LD_ADDR_VAR 0 5
64375: PUSH
64376: LD_VAR 0 1
64380: PUSH
64381: LD_INT 4
64383: MINUS
64384: PUSH
64385: LD_VAR 0 2
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: PUSH
64398: LD_VAR 0 1
64402: PUSH
64403: LD_VAR 0 2
64407: PUSH
64408: LD_INT 4
64410: MINUS
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: PUSH
64420: LD_VAR 0 1
64424: PUSH
64425: LD_INT 4
64427: PLUS
64428: PUSH
64429: LD_VAR 0 2
64433: PUSH
64434: LD_INT 4
64436: PLUS
64437: PUSH
64438: LD_INT 5
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: PUSH
64446: LD_VAR 0 1
64450: PUSH
64451: LD_INT 3
64453: PLUS
64454: PUSH
64455: LD_VAR 0 2
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: LIST
64467: PUSH
64468: LD_VAR 0 1
64472: PUSH
64473: LD_VAR 0 2
64477: PUSH
64478: LD_INT 3
64480: PLUS
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: ST_TO_ADDR
// end ; end ;
64497: GO 64500
64499: POP
// result := list ;
64500: LD_ADDR_VAR 0 4
64504: PUSH
64505: LD_VAR 0 5
64509: ST_TO_ADDR
// end ;
64510: LD_VAR 0 4
64514: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64515: LD_INT 0
64517: PPUSH
64518: PPUSH
64519: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64520: LD_VAR 0 1
64524: NOT
64525: PUSH
64526: LD_VAR 0 2
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: IN
64549: NOT
64550: OR
64551: IFFALSE 64555
// exit ;
64553: GO 64638
// tmp := [ ] ;
64555: LD_ADDR_VAR 0 5
64559: PUSH
64560: EMPTY
64561: ST_TO_ADDR
// for i in units do
64562: LD_ADDR_VAR 0 4
64566: PUSH
64567: LD_VAR 0 1
64571: PUSH
64572: FOR_IN
64573: IFFALSE 64607
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64575: LD_ADDR_VAR 0 5
64579: PUSH
64580: LD_VAR 0 5
64584: PPUSH
64585: LD_VAR 0 4
64589: PPUSH
64590: LD_VAR 0 2
64594: PPUSH
64595: CALL_OW 259
64599: PPUSH
64600: CALL 66011 0 2
64604: ST_TO_ADDR
64605: GO 64572
64607: POP
64608: POP
// if not tmp then
64609: LD_VAR 0 5
64613: NOT
64614: IFFALSE 64618
// exit ;
64616: GO 64638
// result := SortListByListDesc ( units , tmp ) ;
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 5
64632: PPUSH
64633: CALL_OW 77
64637: ST_TO_ADDR
// end ;
64638: LD_VAR 0 3
64642: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64643: LD_INT 0
64645: PPUSH
64646: PPUSH
64647: PPUSH
// result := false ;
64648: LD_ADDR_VAR 0 3
64652: PUSH
64653: LD_INT 0
64655: ST_TO_ADDR
// if not building then
64656: LD_VAR 0 2
64660: NOT
64661: IFFALSE 64665
// exit ;
64663: GO 64803
// x := GetX ( building ) ;
64665: LD_ADDR_VAR 0 4
64669: PUSH
64670: LD_VAR 0 2
64674: PPUSH
64675: CALL_OW 250
64679: ST_TO_ADDR
// y := GetY ( building ) ;
64680: LD_ADDR_VAR 0 5
64684: PUSH
64685: LD_VAR 0 2
64689: PPUSH
64690: CALL_OW 251
64694: ST_TO_ADDR
// if not x or not y then
64695: LD_VAR 0 4
64699: NOT
64700: PUSH
64701: LD_VAR 0 5
64705: NOT
64706: OR
64707: IFFALSE 64711
// exit ;
64709: GO 64803
// if GetTaskList ( unit ) then
64711: LD_VAR 0 1
64715: PPUSH
64716: CALL_OW 437
64720: IFFALSE 64803
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64722: LD_STRING e
64724: PUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 437
64734: PUSH
64735: LD_INT 1
64737: ARRAY
64738: PUSH
64739: LD_INT 1
64741: ARRAY
64742: EQUAL
64743: PUSH
64744: LD_VAR 0 4
64748: PUSH
64749: LD_VAR 0 1
64753: PPUSH
64754: CALL_OW 437
64758: PUSH
64759: LD_INT 1
64761: ARRAY
64762: PUSH
64763: LD_INT 2
64765: ARRAY
64766: EQUAL
64767: AND
64768: PUSH
64769: LD_VAR 0 5
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 437
64783: PUSH
64784: LD_INT 1
64786: ARRAY
64787: PUSH
64788: LD_INT 3
64790: ARRAY
64791: EQUAL
64792: AND
64793: IFFALSE 64803
// result := true end ;
64795: LD_ADDR_VAR 0 3
64799: PUSH
64800: LD_INT 1
64802: ST_TO_ADDR
// end ;
64803: LD_VAR 0 3
64807: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64808: LD_INT 0
64810: PPUSH
// result := false ;
64811: LD_ADDR_VAR 0 4
64815: PUSH
64816: LD_INT 0
64818: ST_TO_ADDR
// if GetTaskList ( unit ) then
64819: LD_VAR 0 1
64823: PPUSH
64824: CALL_OW 437
64828: IFFALSE 64911
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64830: LD_STRING M
64832: PUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: CALL_OW 437
64842: PUSH
64843: LD_INT 1
64845: ARRAY
64846: PUSH
64847: LD_INT 1
64849: ARRAY
64850: EQUAL
64851: PUSH
64852: LD_VAR 0 2
64856: PUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 437
64866: PUSH
64867: LD_INT 1
64869: ARRAY
64870: PUSH
64871: LD_INT 2
64873: ARRAY
64874: EQUAL
64875: AND
64876: PUSH
64877: LD_VAR 0 3
64881: PUSH
64882: LD_VAR 0 1
64886: PPUSH
64887: CALL_OW 437
64891: PUSH
64892: LD_INT 1
64894: ARRAY
64895: PUSH
64896: LD_INT 3
64898: ARRAY
64899: EQUAL
64900: AND
64901: IFFALSE 64911
// result := true ;
64903: LD_ADDR_VAR 0 4
64907: PUSH
64908: LD_INT 1
64910: ST_TO_ADDR
// end ; end ;
64911: LD_VAR 0 4
64915: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64916: LD_INT 0
64918: PPUSH
64919: PPUSH
64920: PPUSH
64921: PPUSH
// if not unit or not area then
64922: LD_VAR 0 1
64926: NOT
64927: PUSH
64928: LD_VAR 0 2
64932: NOT
64933: OR
64934: IFFALSE 64938
// exit ;
64936: GO 65114
// tmp := AreaToList ( area , i ) ;
64938: LD_ADDR_VAR 0 6
64942: PUSH
64943: LD_VAR 0 2
64947: PPUSH
64948: LD_VAR 0 5
64952: PPUSH
64953: CALL_OW 517
64957: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64958: LD_ADDR_VAR 0 5
64962: PUSH
64963: DOUBLE
64964: LD_INT 1
64966: DEC
64967: ST_TO_ADDR
64968: LD_VAR 0 6
64972: PUSH
64973: LD_INT 1
64975: ARRAY
64976: PUSH
64977: FOR_TO
64978: IFFALSE 65112
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64980: LD_ADDR_VAR 0 7
64984: PUSH
64985: LD_VAR 0 6
64989: PUSH
64990: LD_INT 1
64992: ARRAY
64993: PUSH
64994: LD_VAR 0 5
64998: ARRAY
64999: PUSH
65000: LD_VAR 0 6
65004: PUSH
65005: LD_INT 2
65007: ARRAY
65008: PUSH
65009: LD_VAR 0 5
65013: ARRAY
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65019: LD_INT 92
65021: PUSH
65022: LD_VAR 0 7
65026: PUSH
65027: LD_INT 1
65029: ARRAY
65030: PUSH
65031: LD_VAR 0 7
65035: PUSH
65036: LD_INT 2
65038: ARRAY
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: PPUSH
65049: CALL_OW 69
65053: PUSH
65054: LD_INT 0
65056: EQUAL
65057: IFFALSE 65110
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65059: LD_VAR 0 1
65063: PPUSH
65064: LD_VAR 0 7
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: PPUSH
65073: LD_VAR 0 7
65077: PUSH
65078: LD_INT 2
65080: ARRAY
65081: PPUSH
65082: LD_VAR 0 3
65086: PPUSH
65087: CALL_OW 48
// result := IsPlaced ( unit ) ;
65091: LD_ADDR_VAR 0 4
65095: PUSH
65096: LD_VAR 0 1
65100: PPUSH
65101: CALL_OW 305
65105: ST_TO_ADDR
// exit ;
65106: POP
65107: POP
65108: GO 65114
// end ; end ;
65110: GO 64977
65112: POP
65113: POP
// end ;
65114: LD_VAR 0 4
65118: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65119: LD_INT 0
65121: PPUSH
65122: PPUSH
65123: PPUSH
// if not side or side > 8 then
65124: LD_VAR 0 1
65128: NOT
65129: PUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_INT 8
65137: GREATER
65138: OR
65139: IFFALSE 65143
// exit ;
65141: GO 65330
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65143: LD_ADDR_VAR 0 4
65147: PUSH
65148: LD_INT 22
65150: PUSH
65151: LD_VAR 0 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 21
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PPUSH
65174: CALL_OW 69
65178: ST_TO_ADDR
// if not tmp then
65179: LD_VAR 0 4
65183: NOT
65184: IFFALSE 65188
// exit ;
65186: GO 65330
// enable_addtolog := true ;
65188: LD_ADDR_OWVAR 81
65192: PUSH
65193: LD_INT 1
65195: ST_TO_ADDR
// AddToLog ( [ ) ;
65196: LD_STRING [
65198: PPUSH
65199: CALL_OW 561
// for i in tmp do
65203: LD_ADDR_VAR 0 3
65207: PUSH
65208: LD_VAR 0 4
65212: PUSH
65213: FOR_IN
65214: IFFALSE 65321
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65216: LD_STRING [
65218: PUSH
65219: LD_VAR 0 3
65223: PPUSH
65224: CALL_OW 266
65228: STR
65229: PUSH
65230: LD_STRING , 
65232: STR
65233: PUSH
65234: LD_VAR 0 3
65238: PPUSH
65239: CALL_OW 250
65243: STR
65244: PUSH
65245: LD_STRING , 
65247: STR
65248: PUSH
65249: LD_VAR 0 3
65253: PPUSH
65254: CALL_OW 251
65258: STR
65259: PUSH
65260: LD_STRING , 
65262: STR
65263: PUSH
65264: LD_VAR 0 3
65268: PPUSH
65269: CALL_OW 254
65273: STR
65274: PUSH
65275: LD_STRING , 
65277: STR
65278: PUSH
65279: LD_VAR 0 3
65283: PPUSH
65284: LD_INT 1
65286: PPUSH
65287: CALL_OW 268
65291: STR
65292: PUSH
65293: LD_STRING , 
65295: STR
65296: PUSH
65297: LD_VAR 0 3
65301: PPUSH
65302: LD_INT 2
65304: PPUSH
65305: CALL_OW 268
65309: STR
65310: PUSH
65311: LD_STRING ],
65313: STR
65314: PPUSH
65315: CALL_OW 561
// end ;
65319: GO 65213
65321: POP
65322: POP
// AddToLog ( ]; ) ;
65323: LD_STRING ];
65325: PPUSH
65326: CALL_OW 561
// end ;
65330: LD_VAR 0 2
65334: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
65339: PPUSH
65340: PPUSH
65341: PPUSH
// if not area or not rate or not max then
65342: LD_VAR 0 1
65346: NOT
65347: PUSH
65348: LD_VAR 0 2
65352: NOT
65353: OR
65354: PUSH
65355: LD_VAR 0 4
65359: NOT
65360: OR
65361: IFFALSE 65365
// exit ;
65363: GO 65554
// while 1 do
65365: LD_INT 1
65367: IFFALSE 65554
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65369: LD_ADDR_VAR 0 9
65373: PUSH
65374: LD_VAR 0 1
65378: PPUSH
65379: LD_INT 1
65381: PPUSH
65382: CALL_OW 287
65386: PUSH
65387: LD_INT 10
65389: MUL
65390: ST_TO_ADDR
// r := rate / 10 ;
65391: LD_ADDR_VAR 0 7
65395: PUSH
65396: LD_VAR 0 2
65400: PUSH
65401: LD_INT 10
65403: DIVREAL
65404: ST_TO_ADDR
// time := 1 1$00 ;
65405: LD_ADDR_VAR 0 8
65409: PUSH
65410: LD_INT 2100
65412: ST_TO_ADDR
// if amount < min then
65413: LD_VAR 0 9
65417: PUSH
65418: LD_VAR 0 3
65422: LESS
65423: IFFALSE 65441
// r := r * 2 else
65425: LD_ADDR_VAR 0 7
65429: PUSH
65430: LD_VAR 0 7
65434: PUSH
65435: LD_INT 2
65437: MUL
65438: ST_TO_ADDR
65439: GO 65467
// if amount > max then
65441: LD_VAR 0 9
65445: PUSH
65446: LD_VAR 0 4
65450: GREATER
65451: IFFALSE 65467
// r := r / 2 ;
65453: LD_ADDR_VAR 0 7
65457: PUSH
65458: LD_VAR 0 7
65462: PUSH
65463: LD_INT 2
65465: DIVREAL
65466: ST_TO_ADDR
// time := time / r ;
65467: LD_ADDR_VAR 0 8
65471: PUSH
65472: LD_VAR 0 8
65476: PUSH
65477: LD_VAR 0 7
65481: DIVREAL
65482: ST_TO_ADDR
// if time < 0 then
65483: LD_VAR 0 8
65487: PUSH
65488: LD_INT 0
65490: LESS
65491: IFFALSE 65508
// time := time * - 1 ;
65493: LD_ADDR_VAR 0 8
65497: PUSH
65498: LD_VAR 0 8
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: MUL
65507: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65508: LD_VAR 0 8
65512: PUSH
65513: LD_INT 35
65515: PPUSH
65516: LD_INT 875
65518: PPUSH
65519: CALL_OW 12
65523: PLUS
65524: PPUSH
65525: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65529: LD_INT 1
65531: PPUSH
65532: LD_INT 5
65534: PPUSH
65535: CALL_OW 12
65539: PPUSH
65540: LD_VAR 0 1
65544: PPUSH
65545: LD_INT 1
65547: PPUSH
65548: CALL_OW 55
// end ;
65552: GO 65365
// end ;
65554: LD_VAR 0 5
65558: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65559: LD_INT 0
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
65565: PPUSH
65566: PPUSH
65567: PPUSH
65568: PPUSH
// if not turrets or not factories then
65569: LD_VAR 0 1
65573: NOT
65574: PUSH
65575: LD_VAR 0 2
65579: NOT
65580: OR
65581: IFFALSE 65585
// exit ;
65583: GO 65892
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65585: LD_ADDR_VAR 0 10
65589: PUSH
65590: LD_INT 5
65592: PUSH
65593: LD_INT 6
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 3
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 24
65627: PUSH
65628: LD_INT 25
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 23
65637: PUSH
65638: LD_INT 27
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 42
65651: PUSH
65652: LD_INT 43
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 44
65661: PUSH
65662: LD_INT 46
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 45
65671: PUSH
65672: LD_INT 47
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// result := [ ] ;
65689: LD_ADDR_VAR 0 3
65693: PUSH
65694: EMPTY
65695: ST_TO_ADDR
// for i in turrets do
65696: LD_ADDR_VAR 0 4
65700: PUSH
65701: LD_VAR 0 1
65705: PUSH
65706: FOR_IN
65707: IFFALSE 65890
// begin nat := GetNation ( i ) ;
65709: LD_ADDR_VAR 0 7
65713: PUSH
65714: LD_VAR 0 4
65718: PPUSH
65719: CALL_OW 248
65723: ST_TO_ADDR
// weapon := 0 ;
65724: LD_ADDR_VAR 0 8
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// if not nat then
65732: LD_VAR 0 7
65736: NOT
65737: IFFALSE 65741
// continue ;
65739: GO 65706
// for j in list [ nat ] do
65741: LD_ADDR_VAR 0 5
65745: PUSH
65746: LD_VAR 0 10
65750: PUSH
65751: LD_VAR 0 7
65755: ARRAY
65756: PUSH
65757: FOR_IN
65758: IFFALSE 65799
// if GetBWeapon ( i ) = j [ 1 ] then
65760: LD_VAR 0 4
65764: PPUSH
65765: CALL_OW 269
65769: PUSH
65770: LD_VAR 0 5
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: EQUAL
65779: IFFALSE 65797
// begin weapon := j [ 2 ] ;
65781: LD_ADDR_VAR 0 8
65785: PUSH
65786: LD_VAR 0 5
65790: PUSH
65791: LD_INT 2
65793: ARRAY
65794: ST_TO_ADDR
// break ;
65795: GO 65799
// end ;
65797: GO 65757
65799: POP
65800: POP
// if not weapon then
65801: LD_VAR 0 8
65805: NOT
65806: IFFALSE 65810
// continue ;
65808: GO 65706
// for k in factories do
65810: LD_ADDR_VAR 0 6
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: FOR_IN
65821: IFFALSE 65886
// begin weapons := AvailableWeaponList ( k ) ;
65823: LD_ADDR_VAR 0 9
65827: PUSH
65828: LD_VAR 0 6
65832: PPUSH
65833: CALL_OW 478
65837: ST_TO_ADDR
// if not weapons then
65838: LD_VAR 0 9
65842: NOT
65843: IFFALSE 65847
// continue ;
65845: GO 65820
// if weapon in weapons then
65847: LD_VAR 0 8
65851: PUSH
65852: LD_VAR 0 9
65856: IN
65857: IFFALSE 65884
// begin result := [ i , weapon ] ;
65859: LD_ADDR_VAR 0 3
65863: PUSH
65864: LD_VAR 0 4
65868: PUSH
65869: LD_VAR 0 8
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// exit ;
65878: POP
65879: POP
65880: POP
65881: POP
65882: GO 65892
// end ; end ;
65884: GO 65820
65886: POP
65887: POP
// end ;
65888: GO 65706
65890: POP
65891: POP
// end ;
65892: LD_VAR 0 3
65896: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65897: LD_INT 0
65899: PPUSH
// if not side or side > 8 then
65900: LD_VAR 0 3
65904: NOT
65905: PUSH
65906: LD_VAR 0 3
65910: PUSH
65911: LD_INT 8
65913: GREATER
65914: OR
65915: IFFALSE 65919
// exit ;
65917: GO 65978
// if not range then
65919: LD_VAR 0 4
65923: NOT
65924: IFFALSE 65935
// range := - 12 ;
65926: LD_ADDR_VAR 0 4
65930: PUSH
65931: LD_INT 12
65933: NEG
65934: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65935: LD_VAR 0 1
65939: PPUSH
65940: LD_VAR 0 2
65944: PPUSH
65945: LD_VAR 0 3
65949: PPUSH
65950: LD_VAR 0 4
65954: PPUSH
65955: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65959: LD_VAR 0 1
65963: PPUSH
65964: LD_VAR 0 2
65968: PPUSH
65969: LD_VAR 0 3
65973: PPUSH
65974: CALL_OW 331
// end ;
65978: LD_VAR 0 5
65982: RET
// export function Video ( mode ) ; begin
65983: LD_INT 0
65985: PPUSH
// ingame_video = mode ;
65986: LD_ADDR_OWVAR 52
65990: PUSH
65991: LD_VAR 0 1
65995: ST_TO_ADDR
// interface_hidden = mode ;
65996: LD_ADDR_OWVAR 54
66000: PUSH
66001: LD_VAR 0 1
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 2
66010: RET
// export function Join ( array , element ) ; begin
66011: LD_INT 0
66013: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66014: LD_ADDR_VAR 0 3
66018: PUSH
66019: LD_VAR 0 1
66023: PPUSH
66024: LD_VAR 0 1
66028: PUSH
66029: LD_INT 1
66031: PLUS
66032: PPUSH
66033: LD_VAR 0 2
66037: PPUSH
66038: CALL_OW 1
66042: ST_TO_ADDR
// end ;
66043: LD_VAR 0 3
66047: RET
// export function JoinUnion ( array , element ) ; begin
66048: LD_INT 0
66050: PPUSH
// result := array union element ;
66051: LD_ADDR_VAR 0 3
66055: PUSH
66056: LD_VAR 0 1
66060: PUSH
66061: LD_VAR 0 2
66065: UNION
66066: ST_TO_ADDR
// end ;
66067: LD_VAR 0 3
66071: RET
// export function GetBehemoths ( side ) ; begin
66072: LD_INT 0
66074: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66075: LD_ADDR_VAR 0 2
66079: PUSH
66080: LD_INT 22
66082: PUSH
66083: LD_VAR 0 1
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 31
66094: PUSH
66095: LD_INT 25
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PPUSH
66106: CALL_OW 69
66110: ST_TO_ADDR
// end ;
66111: LD_VAR 0 2
66115: RET
// export function Shuffle ( array ) ; var i , index ; begin
66116: LD_INT 0
66118: PPUSH
66119: PPUSH
66120: PPUSH
// result := [ ] ;
66121: LD_ADDR_VAR 0 2
66125: PUSH
66126: EMPTY
66127: ST_TO_ADDR
// if not array then
66128: LD_VAR 0 1
66132: NOT
66133: IFFALSE 66137
// exit ;
66135: GO 66236
// Randomize ;
66137: CALL_OW 10
// for i = array downto 1 do
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: DOUBLE
66147: LD_VAR 0 1
66151: INC
66152: ST_TO_ADDR
66153: LD_INT 1
66155: PUSH
66156: FOR_DOWNTO
66157: IFFALSE 66234
// begin index := rand ( 1 , array ) ;
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_INT 1
66166: PPUSH
66167: LD_VAR 0 1
66171: PPUSH
66172: CALL_OW 12
66176: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66177: LD_ADDR_VAR 0 2
66181: PUSH
66182: LD_VAR 0 2
66186: PPUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 1
66194: PLUS
66195: PPUSH
66196: LD_VAR 0 1
66200: PUSH
66201: LD_VAR 0 4
66205: ARRAY
66206: PPUSH
66207: CALL_OW 2
66211: ST_TO_ADDR
// array := Delete ( array , index ) ;
66212: LD_ADDR_VAR 0 1
66216: PUSH
66217: LD_VAR 0 1
66221: PPUSH
66222: LD_VAR 0 4
66226: PPUSH
66227: CALL_OW 3
66231: ST_TO_ADDR
// end ;
66232: GO 66156
66234: POP
66235: POP
// end ;
66236: LD_VAR 0 2
66240: RET
// export function GetBaseMaterials ( base ) ; begin
66241: LD_INT 0
66243: PPUSH
// result := [ 0 , 0 , 0 ] ;
66244: LD_ADDR_VAR 0 2
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// if not base then
66263: LD_VAR 0 1
66267: NOT
66268: IFFALSE 66272
// exit ;
66270: GO 66321
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66272: LD_ADDR_VAR 0 2
66276: PUSH
66277: LD_VAR 0 1
66281: PPUSH
66282: LD_INT 1
66284: PPUSH
66285: CALL_OW 275
66289: PUSH
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_INT 2
66297: PPUSH
66298: CALL_OW 275
66302: PUSH
66303: LD_VAR 0 1
66307: PPUSH
66308: LD_INT 3
66310: PPUSH
66311: CALL_OW 275
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: ST_TO_ADDR
// end ;
66321: LD_VAR 0 2
66325: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66326: LD_INT 0
66328: PPUSH
66329: PPUSH
// result := array ;
66330: LD_ADDR_VAR 0 3
66334: PUSH
66335: LD_VAR 0 1
66339: ST_TO_ADDR
// if size >= result then
66340: LD_VAR 0 2
66344: PUSH
66345: LD_VAR 0 3
66349: GREATEREQUAL
66350: IFFALSE 66354
// exit ;
66352: GO 66404
// if size then
66354: LD_VAR 0 2
66358: IFFALSE 66404
// for i := array downto size do
66360: LD_ADDR_VAR 0 4
66364: PUSH
66365: DOUBLE
66366: LD_VAR 0 1
66370: INC
66371: ST_TO_ADDR
66372: LD_VAR 0 2
66376: PUSH
66377: FOR_DOWNTO
66378: IFFALSE 66402
// result := Delete ( result , result ) ;
66380: LD_ADDR_VAR 0 3
66384: PUSH
66385: LD_VAR 0 3
66389: PPUSH
66390: LD_VAR 0 3
66394: PPUSH
66395: CALL_OW 3
66399: ST_TO_ADDR
66400: GO 66377
66402: POP
66403: POP
// end ;
66404: LD_VAR 0 3
66408: RET
// export function ComExit ( unit ) ; var tmp ; begin
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
// if not IsInUnit ( unit ) then
66413: LD_VAR 0 1
66417: PPUSH
66418: CALL_OW 310
66422: NOT
66423: IFFALSE 66427
// exit ;
66425: GO 66487
// tmp := IsInUnit ( unit ) ;
66427: LD_ADDR_VAR 0 3
66431: PUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: CALL_OW 310
66441: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66442: LD_VAR 0 3
66446: PPUSH
66447: CALL_OW 247
66451: PUSH
66452: LD_INT 2
66454: EQUAL
66455: IFFALSE 66468
// ComExitVehicle ( unit ) else
66457: LD_VAR 0 1
66461: PPUSH
66462: CALL_OW 121
66466: GO 66477
// ComExitBuilding ( unit ) ;
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 122
// result := tmp ;
66477: LD_ADDR_VAR 0 2
66481: PUSH
66482: LD_VAR 0 3
66486: ST_TO_ADDR
// end ;
66487: LD_VAR 0 2
66491: RET
// export function ComExitAll ( units ) ; var i ; begin
66492: LD_INT 0
66494: PPUSH
66495: PPUSH
// if not units then
66496: LD_VAR 0 1
66500: NOT
66501: IFFALSE 66505
// exit ;
66503: GO 66531
// for i in units do
66505: LD_ADDR_VAR 0 3
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: FOR_IN
66516: IFFALSE 66529
// ComExit ( i ) ;
66518: LD_VAR 0 3
66522: PPUSH
66523: CALL 66409 0 1
66527: GO 66515
66529: POP
66530: POP
// end ;
66531: LD_VAR 0 2
66535: RET
// export function ResetHc ; begin
66536: LD_INT 0
66538: PPUSH
// InitHc ;
66539: CALL_OW 19
// hc_importance := 0 ;
66543: LD_ADDR_OWVAR 32
66547: PUSH
66548: LD_INT 0
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 1
66555: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66556: LD_INT 0
66558: PPUSH
66559: PPUSH
66560: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66561: LD_ADDR_VAR 0 6
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_VAR 0 3
66575: PLUS
66576: PUSH
66577: LD_INT 2
66579: DIV
66580: ST_TO_ADDR
// if _x < 0 then
66581: LD_VAR 0 6
66585: PUSH
66586: LD_INT 0
66588: LESS
66589: IFFALSE 66606
// _x := _x * - 1 ;
66591: LD_ADDR_VAR 0 6
66595: PUSH
66596: LD_VAR 0 6
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: MUL
66605: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66606: LD_ADDR_VAR 0 7
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_VAR 0 4
66620: PLUS
66621: PUSH
66622: LD_INT 2
66624: DIV
66625: ST_TO_ADDR
// if _y < 0 then
66626: LD_VAR 0 7
66630: PUSH
66631: LD_INT 0
66633: LESS
66634: IFFALSE 66651
// _y := _y * - 1 ;
66636: LD_ADDR_VAR 0 7
66640: PUSH
66641: LD_VAR 0 7
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: MUL
66650: ST_TO_ADDR
// result := [ _x , _y ] ;
66651: LD_ADDR_VAR 0 5
66655: PUSH
66656: LD_VAR 0 6
66660: PUSH
66661: LD_VAR 0 7
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// end ;
66670: LD_VAR 0 5
66674: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66675: LD_INT 0
66677: PPUSH
66678: PPUSH
66679: PPUSH
66680: PPUSH
// task := GetTaskList ( unit ) ;
66681: LD_ADDR_VAR 0 7
66685: PUSH
66686: LD_VAR 0 1
66690: PPUSH
66691: CALL_OW 437
66695: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66696: LD_VAR 0 7
66700: NOT
66701: PUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: CALL_OW 308
66716: NOT
66717: AND
66718: IFFALSE 66722
// exit ;
66720: GO 66840
// if IsInArea ( unit , area ) then
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_VAR 0 2
66731: PPUSH
66732: CALL_OW 308
66736: IFFALSE 66754
// begin ComMoveToArea ( unit , goAway ) ;
66738: LD_VAR 0 1
66742: PPUSH
66743: LD_VAR 0 3
66747: PPUSH
66748: CALL_OW 113
// exit ;
66752: GO 66840
// end ; if task [ 1 ] [ 1 ] <> M then
66754: LD_VAR 0 7
66758: PUSH
66759: LD_INT 1
66761: ARRAY
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: PUSH
66767: LD_STRING M
66769: NONEQUAL
66770: IFFALSE 66774
// exit ;
66772: GO 66840
// x := task [ 1 ] [ 2 ] ;
66774: LD_ADDR_VAR 0 5
66778: PUSH
66779: LD_VAR 0 7
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: PUSH
66788: LD_INT 2
66790: ARRAY
66791: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66792: LD_ADDR_VAR 0 6
66796: PUSH
66797: LD_VAR 0 7
66801: PUSH
66802: LD_INT 1
66804: ARRAY
66805: PUSH
66806: LD_INT 3
66808: ARRAY
66809: ST_TO_ADDR
// if InArea ( x , y , area ) then
66810: LD_VAR 0 5
66814: PPUSH
66815: LD_VAR 0 6
66819: PPUSH
66820: LD_VAR 0 2
66824: PPUSH
66825: CALL_OW 309
66829: IFFALSE 66840
// ComStop ( unit ) ;
66831: LD_VAR 0 1
66835: PPUSH
66836: CALL_OW 141
// end ;
66840: LD_VAR 0 4
66844: RET
// export function Abs ( value ) ; begin
66845: LD_INT 0
66847: PPUSH
// result := value ;
66848: LD_ADDR_VAR 0 2
66852: PUSH
66853: LD_VAR 0 1
66857: ST_TO_ADDR
// if value < 0 then
66858: LD_VAR 0 1
66862: PUSH
66863: LD_INT 0
66865: LESS
66866: IFFALSE 66883
// result := value * - 1 ;
66868: LD_ADDR_VAR 0 2
66872: PUSH
66873: LD_VAR 0 1
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: MUL
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 2
66887: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66888: LD_INT 0
66890: PPUSH
66891: PPUSH
66892: PPUSH
66893: PPUSH
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
// if not unit or not building then
66898: LD_VAR 0 1
66902: NOT
66903: PUSH
66904: LD_VAR 0 2
66908: NOT
66909: OR
66910: IFFALSE 66914
// exit ;
66912: GO 67140
// x := GetX ( building ) ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_VAR 0 2
66923: PPUSH
66924: CALL_OW 250
66928: ST_TO_ADDR
// y := GetY ( building ) ;
66929: LD_ADDR_VAR 0 6
66933: PUSH
66934: LD_VAR 0 2
66938: PPUSH
66939: CALL_OW 251
66943: ST_TO_ADDR
// d := GetDir ( building ) ;
66944: LD_ADDR_VAR 0 8
66948: PUSH
66949: LD_VAR 0 2
66953: PPUSH
66954: CALL_OW 254
66958: ST_TO_ADDR
// r := 4 ;
66959: LD_ADDR_VAR 0 9
66963: PUSH
66964: LD_INT 4
66966: ST_TO_ADDR
// for i := 1 to 5 do
66967: LD_ADDR_VAR 0 10
66971: PUSH
66972: DOUBLE
66973: LD_INT 1
66975: DEC
66976: ST_TO_ADDR
66977: LD_INT 5
66979: PUSH
66980: FOR_TO
66981: IFFALSE 67138
// begin _x := ShiftX ( x , d , r + i ) ;
66983: LD_ADDR_VAR 0 5
66987: PUSH
66988: LD_VAR 0 4
66992: PPUSH
66993: LD_VAR 0 8
66997: PPUSH
66998: LD_VAR 0 9
67002: PUSH
67003: LD_VAR 0 10
67007: PLUS
67008: PPUSH
67009: CALL_OW 272
67013: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67014: LD_ADDR_VAR 0 7
67018: PUSH
67019: LD_VAR 0 6
67023: PPUSH
67024: LD_VAR 0 8
67028: PPUSH
67029: LD_VAR 0 9
67033: PUSH
67034: LD_VAR 0 10
67038: PLUS
67039: PPUSH
67040: CALL_OW 273
67044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67045: LD_VAR 0 5
67049: PPUSH
67050: LD_VAR 0 7
67054: PPUSH
67055: CALL_OW 488
67059: PUSH
67060: LD_VAR 0 5
67064: PPUSH
67065: LD_VAR 0 7
67069: PPUSH
67070: CALL_OW 428
67074: PPUSH
67075: CALL_OW 247
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: IN
67090: NOT
67091: AND
67092: IFFALSE 67136
// begin ComMoveXY ( unit , _x , _y ) ;
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_VAR 0 5
67103: PPUSH
67104: LD_VAR 0 7
67108: PPUSH
67109: CALL_OW 111
// result := [ _x , _y ] ;
67113: LD_ADDR_VAR 0 3
67117: PUSH
67118: LD_VAR 0 5
67122: PUSH
67123: LD_VAR 0 7
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: ST_TO_ADDR
// exit ;
67132: POP
67133: POP
67134: GO 67140
// end ; end ;
67136: GO 66980
67138: POP
67139: POP
// end ;
67140: LD_VAR 0 3
67144: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67145: LD_INT 0
67147: PPUSH
67148: PPUSH
67149: PPUSH
// result := 0 ;
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: LD_INT 0
67157: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67158: LD_VAR 0 1
67162: PUSH
67163: LD_INT 0
67165: LESS
67166: PUSH
67167: LD_VAR 0 1
67171: PUSH
67172: LD_INT 8
67174: GREATER
67175: OR
67176: PUSH
67177: LD_VAR 0 2
67181: PUSH
67182: LD_INT 0
67184: LESS
67185: OR
67186: PUSH
67187: LD_VAR 0 2
67191: PUSH
67192: LD_INT 8
67194: GREATER
67195: OR
67196: IFFALSE 67200
// exit ;
67198: GO 67275
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67200: LD_ADDR_VAR 0 4
67204: PUSH
67205: LD_INT 22
67207: PUSH
67208: LD_VAR 0 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PPUSH
67217: CALL_OW 69
67221: PUSH
67222: FOR_IN
67223: IFFALSE 67273
// begin un := UnitShoot ( i ) ;
67225: LD_ADDR_VAR 0 5
67229: PUSH
67230: LD_VAR 0 4
67234: PPUSH
67235: CALL_OW 504
67239: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67240: LD_VAR 0 5
67244: PPUSH
67245: CALL_OW 255
67249: PUSH
67250: LD_VAR 0 1
67254: EQUAL
67255: IFFALSE 67271
// begin result := un ;
67257: LD_ADDR_VAR 0 3
67261: PUSH
67262: LD_VAR 0 5
67266: ST_TO_ADDR
// exit ;
67267: POP
67268: POP
67269: GO 67275
// end ; end ;
67271: GO 67222
67273: POP
67274: POP
// end ;
67275: LD_VAR 0 3
67279: RET
// export function GetCargoBay ( units ) ; begin
67280: LD_INT 0
67282: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67283: LD_ADDR_VAR 0 2
67287: PUSH
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 34
67298: PUSH
67299: LD_INT 12
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 34
67308: PUSH
67309: LD_INT 51
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 34
67318: PUSH
67319: LD_INT 32
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 34
67328: PUSH
67329: LD_INT 89
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: PPUSH
67343: CALL_OW 72
67347: ST_TO_ADDR
// end ;
67348: LD_VAR 0 2
67352: RET
// export function Negate ( value ) ; begin
67353: LD_INT 0
67355: PPUSH
// result := not value ;
67356: LD_ADDR_VAR 0 2
67360: PUSH
67361: LD_VAR 0 1
67365: NOT
67366: ST_TO_ADDR
// end ;
67367: LD_VAR 0 2
67371: RET
// export function Inc ( value ) ; begin
67372: LD_INT 0
67374: PPUSH
// result := value + 1 ;
67375: LD_ADDR_VAR 0 2
67379: PUSH
67380: LD_VAR 0 1
67384: PUSH
67385: LD_INT 1
67387: PLUS
67388: ST_TO_ADDR
// end ;
67389: LD_VAR 0 2
67393: RET
// export function Dec ( value ) ; begin
67394: LD_INT 0
67396: PPUSH
// result := value - 1 ;
67397: LD_ADDR_VAR 0 2
67401: PUSH
67402: LD_VAR 0 1
67406: PUSH
67407: LD_INT 1
67409: MINUS
67410: ST_TO_ADDR
// end ;
67411: LD_VAR 0 2
67415: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67416: LD_INT 0
67418: PPUSH
67419: PPUSH
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67426: LD_VAR 0 1
67430: PPUSH
67431: LD_VAR 0 2
67435: PPUSH
67436: CALL_OW 488
67440: NOT
67441: PUSH
67442: LD_VAR 0 3
67446: PPUSH
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 488
67456: NOT
67457: OR
67458: IFFALSE 67471
// begin result := - 1 ;
67460: LD_ADDR_VAR 0 5
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: ST_TO_ADDR
// exit ;
67469: GO 67706
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67471: LD_ADDR_VAR 0 12
67475: PUSH
67476: LD_VAR 0 1
67480: PPUSH
67481: LD_VAR 0 2
67485: PPUSH
67486: LD_VAR 0 3
67490: PPUSH
67491: LD_VAR 0 4
67495: PPUSH
67496: CALL 66556 0 4
67500: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67501: LD_ADDR_VAR 0 11
67505: PUSH
67506: LD_VAR 0 1
67510: PPUSH
67511: LD_VAR 0 2
67515: PPUSH
67516: LD_VAR 0 12
67520: PUSH
67521: LD_INT 1
67523: ARRAY
67524: PPUSH
67525: LD_VAR 0 12
67529: PUSH
67530: LD_INT 2
67532: ARRAY
67533: PPUSH
67534: CALL_OW 298
67538: ST_TO_ADDR
// distance := 9999 ;
67539: LD_ADDR_VAR 0 10
67543: PUSH
67544: LD_INT 9999
67546: ST_TO_ADDR
// for i := 0 to 5 do
67547: LD_ADDR_VAR 0 6
67551: PUSH
67552: DOUBLE
67553: LD_INT 0
67555: DEC
67556: ST_TO_ADDR
67557: LD_INT 5
67559: PUSH
67560: FOR_TO
67561: IFFALSE 67704
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67563: LD_ADDR_VAR 0 7
67567: PUSH
67568: LD_VAR 0 1
67572: PPUSH
67573: LD_VAR 0 6
67577: PPUSH
67578: LD_VAR 0 11
67582: PPUSH
67583: CALL_OW 272
67587: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67588: LD_ADDR_VAR 0 8
67592: PUSH
67593: LD_VAR 0 2
67597: PPUSH
67598: LD_VAR 0 6
67602: PPUSH
67603: LD_VAR 0 11
67607: PPUSH
67608: CALL_OW 273
67612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67613: LD_VAR 0 7
67617: PPUSH
67618: LD_VAR 0 8
67622: PPUSH
67623: CALL_OW 488
67627: NOT
67628: IFFALSE 67632
// continue ;
67630: GO 67560
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67632: LD_ADDR_VAR 0 9
67636: PUSH
67637: LD_VAR 0 12
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PPUSH
67646: LD_VAR 0 12
67650: PUSH
67651: LD_INT 2
67653: ARRAY
67654: PPUSH
67655: LD_VAR 0 7
67659: PPUSH
67660: LD_VAR 0 8
67664: PPUSH
67665: CALL_OW 298
67669: ST_TO_ADDR
// if tmp < distance then
67670: LD_VAR 0 9
67674: PUSH
67675: LD_VAR 0 10
67679: LESS
67680: IFFALSE 67702
// begin result := i ;
67682: LD_ADDR_VAR 0 5
67686: PUSH
67687: LD_VAR 0 6
67691: ST_TO_ADDR
// distance := tmp ;
67692: LD_ADDR_VAR 0 10
67696: PUSH
67697: LD_VAR 0 9
67701: ST_TO_ADDR
// end ; end ;
67702: GO 67560
67704: POP
67705: POP
// end ;
67706: LD_VAR 0 5
67710: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
// if not driver or not IsInUnit ( driver ) then
67715: LD_VAR 0 1
67719: NOT
67720: PUSH
67721: LD_VAR 0 1
67725: PPUSH
67726: CALL_OW 310
67730: NOT
67731: OR
67732: IFFALSE 67736
// exit ;
67734: GO 67826
// vehicle := IsInUnit ( driver ) ;
67736: LD_ADDR_VAR 0 3
67740: PUSH
67741: LD_VAR 0 1
67745: PPUSH
67746: CALL_OW 310
67750: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67751: LD_VAR 0 1
67755: PPUSH
67756: LD_STRING \
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 0
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: PUSH
67786: LD_STRING E
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_VAR 0 3
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PPUSH
67822: CALL_OW 446
// end ;
67826: LD_VAR 0 2
67830: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67831: LD_INT 0
67833: PPUSH
67834: PPUSH
// if not driver or not IsInUnit ( driver ) then
67835: LD_VAR 0 1
67839: NOT
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 310
67850: NOT
67851: OR
67852: IFFALSE 67856
// exit ;
67854: GO 67946
// vehicle := IsInUnit ( driver ) ;
67856: LD_ADDR_VAR 0 3
67860: PUSH
67861: LD_VAR 0 1
67865: PPUSH
67866: CALL_OW 310
67870: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_STRING \
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 0
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: PUSH
67906: LD_STRING E
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: LD_INT 0
67914: PUSH
67915: LD_VAR 0 3
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PPUSH
67942: CALL_OW 447
// end ;
67946: LD_VAR 0 2
67950: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67951: LD_INT 0
67953: PPUSH
67954: PPUSH
67955: PPUSH
// tmp := [ ] ;
67956: LD_ADDR_VAR 0 5
67960: PUSH
67961: EMPTY
67962: ST_TO_ADDR
// for i in units do
67963: LD_ADDR_VAR 0 4
67967: PUSH
67968: LD_VAR 0 1
67972: PUSH
67973: FOR_IN
67974: IFFALSE 68012
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67976: LD_ADDR_VAR 0 5
67980: PUSH
67981: LD_VAR 0 5
67985: PPUSH
67986: LD_VAR 0 5
67990: PUSH
67991: LD_INT 1
67993: PLUS
67994: PPUSH
67995: LD_VAR 0 4
67999: PPUSH
68000: CALL_OW 256
68004: PPUSH
68005: CALL_OW 2
68009: ST_TO_ADDR
68010: GO 67973
68012: POP
68013: POP
// if not tmp then
68014: LD_VAR 0 5
68018: NOT
68019: IFFALSE 68023
// exit ;
68021: GO 68071
// if asc then
68023: LD_VAR 0 2
68027: IFFALSE 68051
// result := SortListByListAsc ( units , tmp ) else
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: LD_VAR 0 5
68043: PPUSH
68044: CALL_OW 76
68048: ST_TO_ADDR
68049: GO 68071
// result := SortListByListDesc ( units , tmp ) ;
68051: LD_ADDR_VAR 0 3
68055: PUSH
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_VAR 0 5
68065: PPUSH
68066: CALL_OW 77
68070: ST_TO_ADDR
// end ;
68071: LD_VAR 0 3
68075: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68076: LD_INT 0
68078: PPUSH
68079: PPUSH
// task := GetTaskList ( mech ) ;
68080: LD_ADDR_VAR 0 4
68084: PUSH
68085: LD_VAR 0 1
68089: PPUSH
68090: CALL_OW 437
68094: ST_TO_ADDR
// if not task then
68095: LD_VAR 0 4
68099: NOT
68100: IFFALSE 68104
// exit ;
68102: GO 68146
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68104: LD_ADDR_VAR 0 3
68108: PUSH
68109: LD_VAR 0 4
68113: PUSH
68114: LD_INT 1
68116: ARRAY
68117: PUSH
68118: LD_INT 1
68120: ARRAY
68121: PUSH
68122: LD_STRING r
68124: EQUAL
68125: PUSH
68126: LD_VAR 0 4
68130: PUSH
68131: LD_INT 1
68133: ARRAY
68134: PUSH
68135: LD_INT 4
68137: ARRAY
68138: PUSH
68139: LD_VAR 0 2
68143: EQUAL
68144: AND
68145: ST_TO_ADDR
// end ;
68146: LD_VAR 0 3
68150: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68151: LD_INT 0
68153: PPUSH
// SetDir ( unit , d ) ;
68154: LD_VAR 0 1
68158: PPUSH
68159: LD_VAR 0 4
68163: PPUSH
68164: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68168: LD_VAR 0 1
68172: PPUSH
68173: LD_VAR 0 2
68177: PPUSH
68178: LD_VAR 0 3
68182: PPUSH
68183: LD_VAR 0 5
68187: PPUSH
68188: CALL_OW 48
// end ;
68192: LD_VAR 0 6
68196: RET
// export function ToNaturalNumber ( number ) ; begin
68197: LD_INT 0
68199: PPUSH
// result := number div 1 ;
68200: LD_ADDR_VAR 0 2
68204: PUSH
68205: LD_VAR 0 1
68209: PUSH
68210: LD_INT 1
68212: DIV
68213: ST_TO_ADDR
// if number < 0 then
68214: LD_VAR 0 1
68218: PUSH
68219: LD_INT 0
68221: LESS
68222: IFFALSE 68232
// result := 0 ;
68224: LD_ADDR_VAR 0 2
68228: PUSH
68229: LD_INT 0
68231: ST_TO_ADDR
// end ;
68232: LD_VAR 0 2
68236: RET
// export function SortByClass ( units , class ) ; var un ; begin
68237: LD_INT 0
68239: PPUSH
68240: PPUSH
// if not units or not class then
68241: LD_VAR 0 1
68245: NOT
68246: PUSH
68247: LD_VAR 0 2
68251: NOT
68252: OR
68253: IFFALSE 68257
// exit ;
68255: GO 68352
// result := [ ] ;
68257: LD_ADDR_VAR 0 3
68261: PUSH
68262: EMPTY
68263: ST_TO_ADDR
// for un in units do
68264: LD_ADDR_VAR 0 4
68268: PUSH
68269: LD_VAR 0 1
68273: PUSH
68274: FOR_IN
68275: IFFALSE 68350
// if GetClass ( un ) = class then
68277: LD_VAR 0 4
68281: PPUSH
68282: CALL_OW 257
68286: PUSH
68287: LD_VAR 0 2
68291: EQUAL
68292: IFFALSE 68319
// result := Insert ( result , 1 , un ) else
68294: LD_ADDR_VAR 0 3
68298: PUSH
68299: LD_VAR 0 3
68303: PPUSH
68304: LD_INT 1
68306: PPUSH
68307: LD_VAR 0 4
68311: PPUSH
68312: CALL_OW 2
68316: ST_TO_ADDR
68317: GO 68348
// result := Replace ( result , result + 1 , un ) ;
68319: LD_ADDR_VAR 0 3
68323: PUSH
68324: LD_VAR 0 3
68328: PPUSH
68329: LD_VAR 0 3
68333: PUSH
68334: LD_INT 1
68336: PLUS
68337: PPUSH
68338: LD_VAR 0 4
68342: PPUSH
68343: CALL_OW 1
68347: ST_TO_ADDR
68348: GO 68274
68350: POP
68351: POP
// end ;
68352: LD_VAR 0 3
68356: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68357: LD_INT 0
68359: PPUSH
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
68364: PPUSH
68365: PPUSH
// result := [ ] ;
68366: LD_ADDR_VAR 0 4
68370: PUSH
68371: EMPTY
68372: ST_TO_ADDR
// if x - r < 0 then
68373: LD_VAR 0 1
68377: PUSH
68378: LD_VAR 0 3
68382: MINUS
68383: PUSH
68384: LD_INT 0
68386: LESS
68387: IFFALSE 68399
// min_x := 0 else
68389: LD_ADDR_VAR 0 8
68393: PUSH
68394: LD_INT 0
68396: ST_TO_ADDR
68397: GO 68415
// min_x := x - r ;
68399: LD_ADDR_VAR 0 8
68403: PUSH
68404: LD_VAR 0 1
68408: PUSH
68409: LD_VAR 0 3
68413: MINUS
68414: ST_TO_ADDR
// if y - r < 0 then
68415: LD_VAR 0 2
68419: PUSH
68420: LD_VAR 0 3
68424: MINUS
68425: PUSH
68426: LD_INT 0
68428: LESS
68429: IFFALSE 68441
// min_y := 0 else
68431: LD_ADDR_VAR 0 7
68435: PUSH
68436: LD_INT 0
68438: ST_TO_ADDR
68439: GO 68457
// min_y := y - r ;
68441: LD_ADDR_VAR 0 7
68445: PUSH
68446: LD_VAR 0 2
68450: PUSH
68451: LD_VAR 0 3
68455: MINUS
68456: ST_TO_ADDR
// max_x := x + r ;
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 1
68466: PUSH
68467: LD_VAR 0 3
68471: PLUS
68472: ST_TO_ADDR
// max_y := y + r ;
68473: LD_ADDR_VAR 0 10
68477: PUSH
68478: LD_VAR 0 2
68482: PUSH
68483: LD_VAR 0 3
68487: PLUS
68488: ST_TO_ADDR
// for _x = min_x to max_x do
68489: LD_ADDR_VAR 0 5
68493: PUSH
68494: DOUBLE
68495: LD_VAR 0 8
68499: DEC
68500: ST_TO_ADDR
68501: LD_VAR 0 9
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68608
// for _y = min_y to max_y do
68509: LD_ADDR_VAR 0 6
68513: PUSH
68514: DOUBLE
68515: LD_VAR 0 7
68519: DEC
68520: ST_TO_ADDR
68521: LD_VAR 0 10
68525: PUSH
68526: FOR_TO
68527: IFFALSE 68604
// begin if not ValidHex ( _x , _y ) then
68529: LD_VAR 0 5
68533: PPUSH
68534: LD_VAR 0 6
68538: PPUSH
68539: CALL_OW 488
68543: NOT
68544: IFFALSE 68548
// continue ;
68546: GO 68526
// if GetResourceTypeXY ( _x , _y ) then
68548: LD_VAR 0 5
68552: PPUSH
68553: LD_VAR 0 6
68557: PPUSH
68558: CALL_OW 283
68562: IFFALSE 68602
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68564: LD_ADDR_VAR 0 4
68568: PUSH
68569: LD_VAR 0 4
68573: PPUSH
68574: LD_VAR 0 4
68578: PUSH
68579: LD_INT 1
68581: PLUS
68582: PPUSH
68583: LD_VAR 0 5
68587: PUSH
68588: LD_VAR 0 6
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PPUSH
68597: CALL_OW 1
68601: ST_TO_ADDR
// end ;
68602: GO 68526
68604: POP
68605: POP
68606: GO 68506
68608: POP
68609: POP
// end ;
68610: LD_VAR 0 4
68614: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68615: LD_INT 0
68617: PPUSH
68618: PPUSH
68619: PPUSH
68620: PPUSH
68621: PPUSH
68622: PPUSH
68623: PPUSH
68624: PPUSH
// if not units then
68625: LD_VAR 0 1
68629: NOT
68630: IFFALSE 68634
// exit ;
68632: GO 69162
// result := UnitFilter ( units , [ f_ok ] ) ;
68634: LD_ADDR_VAR 0 3
68638: PUSH
68639: LD_VAR 0 1
68643: PPUSH
68644: LD_INT 50
68646: PUSH
68647: EMPTY
68648: LIST
68649: PPUSH
68650: CALL_OW 72
68654: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68655: LD_ADDR_VAR 0 8
68659: PUSH
68660: LD_VAR 0 1
68664: PUSH
68665: LD_INT 1
68667: ARRAY
68668: PPUSH
68669: CALL_OW 255
68673: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68674: LD_ADDR_VAR 0 10
68678: PUSH
68679: LD_INT 29
68681: PUSH
68682: LD_INT 91
68684: PUSH
68685: LD_INT 49
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: ST_TO_ADDR
// if not result then
68693: LD_VAR 0 3
68697: NOT
68698: IFFALSE 68702
// exit ;
68700: GO 69162
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68702: LD_ADDR_VAR 0 5
68706: PUSH
68707: LD_INT 81
68709: PUSH
68710: LD_VAR 0 8
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PPUSH
68719: CALL_OW 69
68723: ST_TO_ADDR
// for i in result do
68724: LD_ADDR_VAR 0 4
68728: PUSH
68729: LD_VAR 0 3
68733: PUSH
68734: FOR_IN
68735: IFFALSE 69160
// begin tag := GetTag ( i ) + 1 ;
68737: LD_ADDR_VAR 0 9
68741: PUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: CALL_OW 110
68751: PUSH
68752: LD_INT 1
68754: PLUS
68755: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68756: LD_ADDR_VAR 0 7
68760: PUSH
68761: LD_VAR 0 4
68765: PPUSH
68766: CALL_OW 250
68770: PPUSH
68771: LD_VAR 0 4
68775: PPUSH
68776: CALL_OW 251
68780: PPUSH
68781: LD_INT 4
68783: PPUSH
68784: CALL 68357 0 3
68788: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68789: LD_VAR 0 4
68793: PPUSH
68794: CALL_OW 247
68798: PUSH
68799: LD_INT 2
68801: EQUAL
68802: PUSH
68803: LD_VAR 0 7
68807: PUSH
68808: LD_INT 2
68810: GREATER
68811: AND
68812: PUSH
68813: LD_VAR 0 4
68817: PPUSH
68818: CALL_OW 264
68822: PUSH
68823: LD_VAR 0 10
68827: IN
68828: NOT
68829: AND
68830: IFFALSE 68869
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68832: LD_VAR 0 4
68836: PPUSH
68837: LD_VAR 0 7
68841: PUSH
68842: LD_INT 1
68844: ARRAY
68845: PUSH
68846: LD_INT 1
68848: ARRAY
68849: PPUSH
68850: LD_VAR 0 7
68854: PUSH
68855: LD_INT 1
68857: ARRAY
68858: PUSH
68859: LD_INT 2
68861: ARRAY
68862: PPUSH
68863: CALL_OW 116
68867: GO 69158
// if path > tag then
68869: LD_VAR 0 2
68873: PUSH
68874: LD_VAR 0 9
68878: GREATER
68879: IFFALSE 69087
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68881: LD_ADDR_VAR 0 6
68885: PUSH
68886: LD_VAR 0 5
68890: PPUSH
68891: LD_INT 91
68893: PUSH
68894: LD_VAR 0 4
68898: PUSH
68899: LD_INT 8
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: PPUSH
68907: CALL_OW 72
68911: ST_TO_ADDR
// if nearEnemy then
68912: LD_VAR 0 6
68916: IFFALSE 68985
// begin if GetWeapon ( i ) = ru_time_lapser then
68918: LD_VAR 0 4
68922: PPUSH
68923: CALL_OW 264
68927: PUSH
68928: LD_INT 49
68930: EQUAL
68931: IFFALSE 68959
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68933: LD_VAR 0 4
68937: PPUSH
68938: LD_VAR 0 6
68942: PPUSH
68943: LD_VAR 0 4
68947: PPUSH
68948: CALL_OW 74
68952: PPUSH
68953: CALL_OW 112
68957: GO 68983
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68959: LD_VAR 0 4
68963: PPUSH
68964: LD_VAR 0 6
68968: PPUSH
68969: LD_VAR 0 4
68973: PPUSH
68974: CALL_OW 74
68978: PPUSH
68979: CALL 70233 0 2
// end else
68983: GO 69085
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68985: LD_VAR 0 4
68989: PPUSH
68990: LD_VAR 0 2
68994: PUSH
68995: LD_VAR 0 9
68999: ARRAY
69000: PUSH
69001: LD_INT 1
69003: ARRAY
69004: PPUSH
69005: LD_VAR 0 2
69009: PUSH
69010: LD_VAR 0 9
69014: ARRAY
69015: PUSH
69016: LD_INT 2
69018: ARRAY
69019: PPUSH
69020: CALL_OW 297
69024: PUSH
69025: LD_INT 6
69027: GREATER
69028: IFFALSE 69071
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69030: LD_VAR 0 4
69034: PPUSH
69035: LD_VAR 0 2
69039: PUSH
69040: LD_VAR 0 9
69044: ARRAY
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: PPUSH
69050: LD_VAR 0 2
69054: PUSH
69055: LD_VAR 0 9
69059: ARRAY
69060: PUSH
69061: LD_INT 2
69063: ARRAY
69064: PPUSH
69065: CALL_OW 114
69069: GO 69085
// SetTag ( i , tag ) ;
69071: LD_VAR 0 4
69075: PPUSH
69076: LD_VAR 0 9
69080: PPUSH
69081: CALL_OW 109
// end else
69085: GO 69158
// if enemy then
69087: LD_VAR 0 5
69091: IFFALSE 69158
// begin if GetWeapon ( i ) = ru_time_lapser then
69093: LD_VAR 0 4
69097: PPUSH
69098: CALL_OW 264
69102: PUSH
69103: LD_INT 49
69105: EQUAL
69106: IFFALSE 69134
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69108: LD_VAR 0 4
69112: PPUSH
69113: LD_VAR 0 5
69117: PPUSH
69118: LD_VAR 0 4
69122: PPUSH
69123: CALL_OW 74
69127: PPUSH
69128: CALL_OW 112
69132: GO 69158
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69134: LD_VAR 0 4
69138: PPUSH
69139: LD_VAR 0 5
69143: PPUSH
69144: LD_VAR 0 4
69148: PPUSH
69149: CALL_OW 74
69153: PPUSH
69154: CALL 70233 0 2
// end ; end ;
69158: GO 68734
69160: POP
69161: POP
// end ;
69162: LD_VAR 0 3
69166: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69167: LD_INT 0
69169: PPUSH
69170: PPUSH
69171: PPUSH
// if not unit or IsInUnit ( unit ) then
69172: LD_VAR 0 1
69176: NOT
69177: PUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 310
69187: OR
69188: IFFALSE 69192
// exit ;
69190: GO 69283
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69192: LD_ADDR_VAR 0 4
69196: PUSH
69197: LD_VAR 0 1
69201: PPUSH
69202: CALL_OW 250
69206: PPUSH
69207: LD_VAR 0 2
69211: PPUSH
69212: LD_INT 1
69214: PPUSH
69215: CALL_OW 272
69219: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69220: LD_ADDR_VAR 0 5
69224: PUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 251
69234: PPUSH
69235: LD_VAR 0 2
69239: PPUSH
69240: LD_INT 1
69242: PPUSH
69243: CALL_OW 273
69247: ST_TO_ADDR
// if ValidHex ( x , y ) then
69248: LD_VAR 0 4
69252: PPUSH
69253: LD_VAR 0 5
69257: PPUSH
69258: CALL_OW 488
69262: IFFALSE 69283
// ComTurnXY ( unit , x , y ) ;
69264: LD_VAR 0 1
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: LD_VAR 0 5
69278: PPUSH
69279: CALL_OW 118
// end ;
69283: LD_VAR 0 3
69287: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69288: LD_INT 0
69290: PPUSH
69291: PPUSH
// result := false ;
69292: LD_ADDR_VAR 0 3
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
// if not units then
69300: LD_VAR 0 2
69304: NOT
69305: IFFALSE 69309
// exit ;
69307: GO 69354
// for i in units do
69309: LD_ADDR_VAR 0 4
69313: PUSH
69314: LD_VAR 0 2
69318: PUSH
69319: FOR_IN
69320: IFFALSE 69352
// if See ( side , i ) then
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 4
69331: PPUSH
69332: CALL_OW 292
69336: IFFALSE 69350
// begin result := true ;
69338: LD_ADDR_VAR 0 3
69342: PUSH
69343: LD_INT 1
69345: ST_TO_ADDR
// exit ;
69346: POP
69347: POP
69348: GO 69354
// end ;
69350: GO 69319
69352: POP
69353: POP
// end ;
69354: LD_VAR 0 3
69358: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69359: LD_INT 0
69361: PPUSH
69362: PPUSH
69363: PPUSH
69364: PPUSH
// if not unit or not points then
69365: LD_VAR 0 1
69369: NOT
69370: PUSH
69371: LD_VAR 0 2
69375: NOT
69376: OR
69377: IFFALSE 69381
// exit ;
69379: GO 69471
// dist := 99999 ;
69381: LD_ADDR_VAR 0 5
69385: PUSH
69386: LD_INT 99999
69388: ST_TO_ADDR
// for i in points do
69389: LD_ADDR_VAR 0 4
69393: PUSH
69394: LD_VAR 0 2
69398: PUSH
69399: FOR_IN
69400: IFFALSE 69469
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69402: LD_ADDR_VAR 0 6
69406: PUSH
69407: LD_VAR 0 1
69411: PPUSH
69412: LD_VAR 0 4
69416: PUSH
69417: LD_INT 1
69419: ARRAY
69420: PPUSH
69421: LD_VAR 0 4
69425: PUSH
69426: LD_INT 2
69428: ARRAY
69429: PPUSH
69430: CALL_OW 297
69434: ST_TO_ADDR
// if tmpDist < dist then
69435: LD_VAR 0 6
69439: PUSH
69440: LD_VAR 0 5
69444: LESS
69445: IFFALSE 69467
// begin result := i ;
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 4
69456: ST_TO_ADDR
// dist := tmpDist ;
69457: LD_ADDR_VAR 0 5
69461: PUSH
69462: LD_VAR 0 6
69466: ST_TO_ADDR
// end ; end ;
69467: GO 69399
69469: POP
69470: POP
// end ;
69471: LD_VAR 0 3
69475: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69476: LD_INT 0
69478: PPUSH
// uc_side := side ;
69479: LD_ADDR_OWVAR 20
69483: PUSH
69484: LD_VAR 0 1
69488: ST_TO_ADDR
// uc_nation := 3 ;
69489: LD_ADDR_OWVAR 21
69493: PUSH
69494: LD_INT 3
69496: ST_TO_ADDR
// vc_chassis := 25 ;
69497: LD_ADDR_OWVAR 37
69501: PUSH
69502: LD_INT 25
69504: ST_TO_ADDR
// vc_engine := engine_siberite ;
69505: LD_ADDR_OWVAR 39
69509: PUSH
69510: LD_INT 3
69512: ST_TO_ADDR
// vc_control := control_computer ;
69513: LD_ADDR_OWVAR 38
69517: PUSH
69518: LD_INT 3
69520: ST_TO_ADDR
// vc_weapon := 59 ;
69521: LD_ADDR_OWVAR 40
69525: PUSH
69526: LD_INT 59
69528: ST_TO_ADDR
// result := CreateVehicle ;
69529: LD_ADDR_VAR 0 5
69533: PUSH
69534: CALL_OW 45
69538: ST_TO_ADDR
// SetDir ( result , d ) ;
69539: LD_VAR 0 5
69543: PPUSH
69544: LD_VAR 0 4
69548: PPUSH
69549: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69553: LD_VAR 0 5
69557: PPUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: LD_VAR 0 3
69567: PPUSH
69568: LD_INT 0
69570: PPUSH
69571: CALL_OW 48
// end ;
69575: LD_VAR 0 5
69579: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69580: LD_INT 0
69582: PPUSH
69583: PPUSH
69584: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69585: LD_ADDR_VAR 0 2
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69608: LD_VAR 0 1
69612: NOT
69613: PUSH
69614: LD_VAR 0 1
69618: PPUSH
69619: CALL_OW 264
69623: PUSH
69624: LD_INT 12
69626: PUSH
69627: LD_INT 51
69629: PUSH
69630: LD_INT 32
69632: PUSH
69633: LD_INT 89
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: IN
69642: NOT
69643: OR
69644: IFFALSE 69648
// exit ;
69646: GO 69746
// for i := 1 to 3 do
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: DOUBLE
69654: LD_INT 1
69656: DEC
69657: ST_TO_ADDR
69658: LD_INT 3
69660: PUSH
69661: FOR_TO
69662: IFFALSE 69744
// begin tmp := GetCargo ( cargo , i ) ;
69664: LD_ADDR_VAR 0 4
69668: PUSH
69669: LD_VAR 0 1
69673: PPUSH
69674: LD_VAR 0 3
69678: PPUSH
69679: CALL_OW 289
69683: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_VAR 0 2
69693: PPUSH
69694: LD_VAR 0 3
69698: PPUSH
69699: LD_VAR 0 4
69703: PPUSH
69704: CALL_OW 1
69708: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69709: LD_ADDR_VAR 0 2
69713: PUSH
69714: LD_VAR 0 2
69718: PPUSH
69719: LD_INT 4
69721: PPUSH
69722: LD_VAR 0 2
69726: PUSH
69727: LD_INT 4
69729: ARRAY
69730: PUSH
69731: LD_VAR 0 4
69735: PLUS
69736: PPUSH
69737: CALL_OW 1
69741: ST_TO_ADDR
// end ;
69742: GO 69661
69744: POP
69745: POP
// end ;
69746: LD_VAR 0 2
69750: RET
// export function Length ( array ) ; begin
69751: LD_INT 0
69753: PPUSH
// result := array + 0 ;
69754: LD_ADDR_VAR 0 2
69758: PUSH
69759: LD_VAR 0 1
69763: PUSH
69764: LD_INT 0
69766: PLUS
69767: ST_TO_ADDR
// end ;
69768: LD_VAR 0 2
69772: RET
// export function PrepareArray ( array ) ; begin
69773: LD_INT 0
69775: PPUSH
// result := array diff 0 ;
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: LD_VAR 0 1
69785: PUSH
69786: LD_INT 0
69788: DIFF
69789: ST_TO_ADDR
// if not result [ 1 ] then
69790: LD_VAR 0 2
69794: PUSH
69795: LD_INT 1
69797: ARRAY
69798: NOT
69799: IFFALSE 69819
// result := Delete ( result , 1 ) ;
69801: LD_ADDR_VAR 0 2
69805: PUSH
69806: LD_VAR 0 2
69810: PPUSH
69811: LD_INT 1
69813: PPUSH
69814: CALL_OW 3
69818: ST_TO_ADDR
// end ;
69819: LD_VAR 0 2
69823: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69824: LD_INT 0
69826: PPUSH
69827: PPUSH
69828: PPUSH
69829: PPUSH
// sibRocketRange := 25 ;
69830: LD_ADDR_VAR 0 6
69834: PUSH
69835: LD_INT 25
69837: ST_TO_ADDR
// result := false ;
69838: LD_ADDR_VAR 0 4
69842: PUSH
69843: LD_INT 0
69845: ST_TO_ADDR
// for i := 0 to 5 do
69846: LD_ADDR_VAR 0 5
69850: PUSH
69851: DOUBLE
69852: LD_INT 0
69854: DEC
69855: ST_TO_ADDR
69856: LD_INT 5
69858: PUSH
69859: FOR_TO
69860: IFFALSE 69927
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69862: LD_VAR 0 1
69866: PPUSH
69867: LD_VAR 0 5
69871: PPUSH
69872: LD_VAR 0 6
69876: PPUSH
69877: CALL_OW 272
69881: PPUSH
69882: LD_VAR 0 2
69886: PPUSH
69887: LD_VAR 0 5
69891: PPUSH
69892: LD_VAR 0 6
69896: PPUSH
69897: CALL_OW 273
69901: PPUSH
69902: LD_VAR 0 3
69906: PPUSH
69907: CALL_OW 309
69911: IFFALSE 69925
// begin result := true ;
69913: LD_ADDR_VAR 0 4
69917: PUSH
69918: LD_INT 1
69920: ST_TO_ADDR
// exit ;
69921: POP
69922: POP
69923: GO 69929
// end ;
69925: GO 69859
69927: POP
69928: POP
// end ;
69929: LD_VAR 0 4
69933: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69934: LD_INT 0
69936: PPUSH
69937: PPUSH
69938: PPUSH
// if btype = b_depot then
69939: LD_VAR 0 2
69943: PUSH
69944: LD_INT 0
69946: EQUAL
69947: IFFALSE 69959
// begin result := true ;
69949: LD_ADDR_VAR 0 3
69953: PUSH
69954: LD_INT 1
69956: ST_TO_ADDR
// exit ;
69957: GO 70075
// end ; pom := GetBase ( depot ) ;
69959: LD_ADDR_VAR 0 4
69963: PUSH
69964: LD_VAR 0 1
69968: PPUSH
69969: CALL_OW 274
69973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69974: LD_ADDR_VAR 0 5
69978: PUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: LD_VAR 0 1
69988: PPUSH
69989: CALL_OW 248
69993: PPUSH
69994: CALL_OW 450
69998: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69999: LD_ADDR_VAR 0 3
70003: PUSH
70004: LD_VAR 0 4
70008: PPUSH
70009: LD_INT 1
70011: PPUSH
70012: CALL_OW 275
70016: PUSH
70017: LD_VAR 0 5
70021: PUSH
70022: LD_INT 1
70024: ARRAY
70025: GREATEREQUAL
70026: PUSH
70027: LD_VAR 0 4
70031: PPUSH
70032: LD_INT 2
70034: PPUSH
70035: CALL_OW 275
70039: PUSH
70040: LD_VAR 0 5
70044: PUSH
70045: LD_INT 2
70047: ARRAY
70048: GREATEREQUAL
70049: AND
70050: PUSH
70051: LD_VAR 0 4
70055: PPUSH
70056: LD_INT 3
70058: PPUSH
70059: CALL_OW 275
70063: PUSH
70064: LD_VAR 0 5
70068: PUSH
70069: LD_INT 3
70071: ARRAY
70072: GREATEREQUAL
70073: AND
70074: ST_TO_ADDR
// end ;
70075: LD_VAR 0 3
70079: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70080: LD_INT 0
70082: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70083: LD_VAR 0 1
70087: PPUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: LD_INT 0
70095: PPUSH
70096: LD_INT 0
70098: PPUSH
70099: LD_INT 1
70101: PPUSH
70102: LD_INT 0
70104: PPUSH
70105: CALL_OW 587
// end ;
70109: LD_VAR 0 3
70113: RET
// export function CenterOnNow ( unit ) ; begin
70114: LD_INT 0
70116: PPUSH
// result := IsInUnit ( unit ) ;
70117: LD_ADDR_VAR 0 2
70121: PUSH
70122: LD_VAR 0 1
70126: PPUSH
70127: CALL_OW 310
70131: ST_TO_ADDR
// if not result then
70132: LD_VAR 0 2
70136: NOT
70137: IFFALSE 70149
// result := unit ;
70139: LD_ADDR_VAR 0 2
70143: PUSH
70144: LD_VAR 0 1
70148: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70149: LD_VAR 0 1
70153: PPUSH
70154: CALL_OW 87
// end ;
70158: LD_VAR 0 2
70162: RET
// export function ComMoveHex ( unit , hex ) ; begin
70163: LD_INT 0
70165: PPUSH
// if not hex then
70166: LD_VAR 0 2
70170: NOT
70171: IFFALSE 70175
// exit ;
70173: GO 70228
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70175: LD_VAR 0 2
70179: PUSH
70180: LD_INT 1
70182: ARRAY
70183: PPUSH
70184: LD_VAR 0 2
70188: PUSH
70189: LD_INT 2
70191: ARRAY
70192: PPUSH
70193: CALL_OW 428
70197: IFFALSE 70201
// exit ;
70199: GO 70228
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70201: LD_VAR 0 1
70205: PPUSH
70206: LD_VAR 0 2
70210: PUSH
70211: LD_INT 1
70213: ARRAY
70214: PPUSH
70215: LD_VAR 0 2
70219: PUSH
70220: LD_INT 2
70222: ARRAY
70223: PPUSH
70224: CALL_OW 111
// end ;
70228: LD_VAR 0 3
70232: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70233: LD_INT 0
70235: PPUSH
70236: PPUSH
70237: PPUSH
// if not unit or not enemy then
70238: LD_VAR 0 1
70242: NOT
70243: PUSH
70244: LD_VAR 0 2
70248: NOT
70249: OR
70250: IFFALSE 70254
// exit ;
70252: GO 70378
// x := GetX ( enemy ) ;
70254: LD_ADDR_VAR 0 4
70258: PUSH
70259: LD_VAR 0 2
70263: PPUSH
70264: CALL_OW 250
70268: ST_TO_ADDR
// y := GetY ( enemy ) ;
70269: LD_ADDR_VAR 0 5
70273: PUSH
70274: LD_VAR 0 2
70278: PPUSH
70279: CALL_OW 251
70283: ST_TO_ADDR
// if ValidHex ( x , y ) then
70284: LD_VAR 0 4
70288: PPUSH
70289: LD_VAR 0 5
70293: PPUSH
70294: CALL_OW 488
70298: IFFALSE 70378
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70300: LD_VAR 0 2
70304: PPUSH
70305: CALL_OW 247
70309: PUSH
70310: LD_INT 3
70312: PUSH
70313: LD_INT 2
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: IN
70320: PUSH
70321: LD_VAR 0 1
70325: PPUSH
70326: CALL_OW 255
70330: PPUSH
70331: LD_VAR 0 2
70335: PPUSH
70336: CALL_OW 292
70340: OR
70341: IFFALSE 70359
// ComAttackUnit ( unit , enemy ) else
70343: LD_VAR 0 1
70347: PPUSH
70348: LD_VAR 0 2
70352: PPUSH
70353: CALL_OW 115
70357: GO 70378
// ComAgressiveMove ( unit , x , y ) ;
70359: LD_VAR 0 1
70363: PPUSH
70364: LD_VAR 0 4
70368: PPUSH
70369: LD_VAR 0 5
70373: PPUSH
70374: CALL_OW 114
// end ;
70378: LD_VAR 0 3
70382: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70383: LD_INT 0
70385: PPUSH
70386: PPUSH
70387: PPUSH
// list := AreaToList ( area , 0 ) ;
70388: LD_ADDR_VAR 0 5
70392: PUSH
70393: LD_VAR 0 1
70397: PPUSH
70398: LD_INT 0
70400: PPUSH
70401: CALL_OW 517
70405: ST_TO_ADDR
// if not list then
70406: LD_VAR 0 5
70410: NOT
70411: IFFALSE 70415
// exit ;
70413: GO 70545
// if all then
70415: LD_VAR 0 2
70419: IFFALSE 70507
// begin for i := 1 to list [ 1 ] do
70421: LD_ADDR_VAR 0 4
70425: PUSH
70426: DOUBLE
70427: LD_INT 1
70429: DEC
70430: ST_TO_ADDR
70431: LD_VAR 0 5
70435: PUSH
70436: LD_INT 1
70438: ARRAY
70439: PUSH
70440: FOR_TO
70441: IFFALSE 70503
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70443: LD_ADDR_VAR 0 3
70447: PUSH
70448: LD_VAR 0 3
70452: PPUSH
70453: LD_VAR 0 3
70457: PUSH
70458: LD_INT 1
70460: PLUS
70461: PPUSH
70462: LD_VAR 0 5
70466: PUSH
70467: LD_INT 1
70469: ARRAY
70470: PUSH
70471: LD_VAR 0 4
70475: ARRAY
70476: PUSH
70477: LD_VAR 0 5
70481: PUSH
70482: LD_INT 2
70484: ARRAY
70485: PUSH
70486: LD_VAR 0 4
70490: ARRAY
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PPUSH
70496: CALL_OW 1
70500: ST_TO_ADDR
70501: GO 70440
70503: POP
70504: POP
// exit ;
70505: GO 70545
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70507: LD_ADDR_VAR 0 3
70511: PUSH
70512: LD_VAR 0 5
70516: PUSH
70517: LD_INT 1
70519: ARRAY
70520: PUSH
70521: LD_INT 1
70523: ARRAY
70524: PUSH
70525: LD_VAR 0 5
70529: PUSH
70530: LD_INT 2
70532: ARRAY
70533: PUSH
70534: LD_INT 1
70536: ARRAY
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: EMPTY
70543: LIST
70544: ST_TO_ADDR
// end ;
70545: LD_VAR 0 3
70549: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70550: LD_INT 0
70552: PPUSH
70553: PPUSH
// list := AreaToList ( area , 0 ) ;
70554: LD_ADDR_VAR 0 4
70558: PUSH
70559: LD_VAR 0 1
70563: PPUSH
70564: LD_INT 0
70566: PPUSH
70567: CALL_OW 517
70571: ST_TO_ADDR
// if not list then
70572: LD_VAR 0 4
70576: NOT
70577: IFFALSE 70581
// exit ;
70579: GO 70622
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70581: LD_ADDR_VAR 0 3
70585: PUSH
70586: LD_VAR 0 4
70590: PUSH
70591: LD_INT 1
70593: ARRAY
70594: PUSH
70595: LD_INT 1
70597: ARRAY
70598: PUSH
70599: LD_VAR 0 4
70603: PUSH
70604: LD_INT 2
70606: ARRAY
70607: PUSH
70608: LD_INT 1
70610: ARRAY
70611: PUSH
70612: LD_VAR 0 2
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: LIST
70621: ST_TO_ADDR
// end ;
70622: LD_VAR 0 3
70626: RET
// export function First ( array ) ; begin
70627: LD_INT 0
70629: PPUSH
// if not array then
70630: LD_VAR 0 1
70634: NOT
70635: IFFALSE 70639
// exit ;
70637: GO 70653
// result := array [ 1 ] ;
70639: LD_ADDR_VAR 0 2
70643: PUSH
70644: LD_VAR 0 1
70648: PUSH
70649: LD_INT 1
70651: ARRAY
70652: ST_TO_ADDR
// end ;
70653: LD_VAR 0 2
70657: RET
// export function Last ( array ) ; begin
70658: LD_INT 0
70660: PPUSH
// if not array then
70661: LD_VAR 0 1
70665: NOT
70666: IFFALSE 70670
// exit ;
70668: GO 70686
// result := array [ array ] ;
70670: LD_ADDR_VAR 0 2
70674: PUSH
70675: LD_VAR 0 1
70679: PUSH
70680: LD_VAR 0 1
70684: ARRAY
70685: ST_TO_ADDR
// end ;
70686: LD_VAR 0 2
70690: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70691: LD_INT 0
70693: PPUSH
70694: PPUSH
// result := [ ] ;
70695: LD_ADDR_VAR 0 5
70699: PUSH
70700: EMPTY
70701: ST_TO_ADDR
// if not array then
70702: LD_VAR 0 1
70706: NOT
70707: IFFALSE 70711
// exit ;
70709: GO 70823
// for i := 1 to array do
70711: LD_ADDR_VAR 0 6
70715: PUSH
70716: DOUBLE
70717: LD_INT 1
70719: DEC
70720: ST_TO_ADDR
70721: LD_VAR 0 1
70725: PUSH
70726: FOR_TO
70727: IFFALSE 70821
// if array [ i ] [ index ] = value then
70729: LD_VAR 0 1
70733: PUSH
70734: LD_VAR 0 6
70738: ARRAY
70739: PUSH
70740: LD_VAR 0 2
70744: ARRAY
70745: PUSH
70746: LD_VAR 0 3
70750: EQUAL
70751: IFFALSE 70819
// begin if indexColumn then
70753: LD_VAR 0 4
70757: IFFALSE 70793
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70759: LD_ADDR_VAR 0 5
70763: PUSH
70764: LD_VAR 0 5
70768: PPUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_VAR 0 6
70778: ARRAY
70779: PUSH
70780: LD_VAR 0 4
70784: ARRAY
70785: PPUSH
70786: CALL 66011 0 2
70790: ST_TO_ADDR
70791: GO 70819
// result := Join ( result , array [ i ] ) ;
70793: LD_ADDR_VAR 0 5
70797: PUSH
70798: LD_VAR 0 5
70802: PPUSH
70803: LD_VAR 0 1
70807: PUSH
70808: LD_VAR 0 6
70812: ARRAY
70813: PPUSH
70814: CALL 66011 0 2
70818: ST_TO_ADDR
// end ;
70819: GO 70726
70821: POP
70822: POP
// end ;
70823: LD_VAR 0 5
70827: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70828: LD_INT 0
70830: PPUSH
// if not vehicles or not parkingPoint then
70831: LD_VAR 0 1
70835: NOT
70836: PUSH
70837: LD_VAR 0 2
70841: NOT
70842: OR
70843: IFFALSE 70847
// exit ;
70845: GO 70945
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70847: LD_ADDR_VAR 0 1
70851: PUSH
70852: LD_VAR 0 1
70856: PPUSH
70857: LD_INT 50
70859: PUSH
70860: EMPTY
70861: LIST
70862: PUSH
70863: LD_INT 3
70865: PUSH
70866: LD_INT 92
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PUSH
70878: LD_VAR 0 2
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PUSH
70887: LD_INT 8
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PPUSH
70904: CALL_OW 72
70908: ST_TO_ADDR
// if not vehicles then
70909: LD_VAR 0 1
70913: NOT
70914: IFFALSE 70918
// exit ;
70916: GO 70945
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70918: LD_VAR 0 1
70922: PPUSH
70923: LD_VAR 0 2
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PPUSH
70932: LD_VAR 0 2
70936: PUSH
70937: LD_INT 2
70939: ARRAY
70940: PPUSH
70941: CALL_OW 111
// end ;
70945: LD_VAR 0 3
70949: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70950: LD_INT 0
70952: PPUSH
70953: PPUSH
70954: PPUSH
// if not side or not area then
70955: LD_VAR 0 1
70959: NOT
70960: PUSH
70961: LD_VAR 0 2
70965: NOT
70966: OR
70967: IFFALSE 70971
// exit ;
70969: GO 71090
// tmp := AreaToList ( area , 0 ) ;
70971: LD_ADDR_VAR 0 5
70975: PUSH
70976: LD_VAR 0 2
70980: PPUSH
70981: LD_INT 0
70983: PPUSH
70984: CALL_OW 517
70988: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70989: LD_ADDR_VAR 0 4
70993: PUSH
70994: DOUBLE
70995: LD_INT 1
70997: DEC
70998: ST_TO_ADDR
70999: LD_VAR 0 5
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PUSH
71008: FOR_TO
71009: IFFALSE 71088
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71011: LD_VAR 0 5
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PUSH
71020: LD_VAR 0 4
71024: ARRAY
71025: PPUSH
71026: LD_VAR 0 5
71030: PUSH
71031: LD_INT 2
71033: ARRAY
71034: PUSH
71035: LD_VAR 0 4
71039: ARRAY
71040: PPUSH
71041: CALL_OW 351
71045: IFFALSE 71086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71047: LD_VAR 0 5
71051: PUSH
71052: LD_INT 1
71054: ARRAY
71055: PUSH
71056: LD_VAR 0 4
71060: ARRAY
71061: PPUSH
71062: LD_VAR 0 5
71066: PUSH
71067: LD_INT 2
71069: ARRAY
71070: PUSH
71071: LD_VAR 0 4
71075: ARRAY
71076: PPUSH
71077: LD_VAR 0 1
71081: PPUSH
71082: CALL_OW 244
// end ;
71086: GO 71008
71088: POP
71089: POP
// end ; end_of_file
71090: LD_VAR 0 3
71094: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71095: LD_VAR 0 1
71099: PUSH
71100: LD_INT 200
71102: DOUBLE
71103: GREATEREQUAL
71104: IFFALSE 71112
71106: LD_INT 299
71108: DOUBLE
71109: LESSEQUAL
71110: IFTRUE 71114
71112: GO 71146
71114: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71115: LD_VAR 0 1
71119: PPUSH
71120: LD_VAR 0 2
71124: PPUSH
71125: LD_VAR 0 3
71129: PPUSH
71130: LD_VAR 0 4
71134: PPUSH
71135: LD_VAR 0 5
71139: PPUSH
71140: CALL 23580 0 5
71144: GO 71223
71146: LD_INT 300
71148: DOUBLE
71149: GREATEREQUAL
71150: IFFALSE 71158
71152: LD_INT 399
71154: DOUBLE
71155: LESSEQUAL
71156: IFTRUE 71160
71158: GO 71222
71160: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71161: LD_VAR 0 1
71165: PPUSH
71166: LD_VAR 0 2
71170: PPUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: LD_VAR 0 4
71180: PPUSH
71181: LD_VAR 0 5
71185: PPUSH
71186: LD_VAR 0 6
71190: PPUSH
71191: LD_VAR 0 7
71195: PPUSH
71196: LD_VAR 0 8
71200: PPUSH
71201: LD_VAR 0 9
71205: PPUSH
71206: LD_VAR 0 10
71210: PPUSH
71211: LD_VAR 0 11
71215: PPUSH
71216: CALL 19568 0 11
71220: GO 71223
71222: POP
// end ;
71223: PPOPN 11
71225: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71226: LD_VAR 0 1
71230: PPUSH
71231: LD_VAR 0 2
71235: PPUSH
71236: LD_VAR 0 3
71240: PPUSH
71241: LD_VAR 0 4
71245: PPUSH
71246: LD_VAR 0 5
71250: PPUSH
71251: CALL 23045 0 5
// end ; end_of_file
71255: PPOPN 5
71257: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71258: LD_VAR 0 1
71262: PPUSH
71263: LD_VAR 0 2
71267: PPUSH
71268: LD_VAR 0 3
71272: PPUSH
71273: LD_VAR 0 4
71277: PPUSH
71278: LD_VAR 0 5
71282: PPUSH
71283: LD_VAR 0 6
71287: PPUSH
71288: CALL 7220 0 6
// end ;
71292: PPOPN 6
71294: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71295: LD_INT 0
71297: PPUSH
// begin if not units then
71298: LD_VAR 0 1
71302: NOT
71303: IFFALSE 71307
// exit ;
71305: GO 71307
// end ;
71307: PPOPN 7
71309: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71310: CALL 7107 0 0
// end ;
71314: PPOPN 1
71316: END
