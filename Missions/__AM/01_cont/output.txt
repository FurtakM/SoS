// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 1 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26667 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26667 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26667 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26667 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64116 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68035 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68035 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68035 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3350
// begin PlaceUnitXY ( Cyrus , 125 , 42 , false ) ;
3332: LD_EXP 18
3336: PPUSH
3337: LD_INT 125
3339: PPUSH
3340: LD_INT 42
3342: PPUSH
3343: LD_INT 0
3345: PPUSH
3346: CALL_OW 48
// end ; AddComCrawl ( Cyrus ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 197
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3364: LD_EXP 3
3368: IFFALSE 3962
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin wait_points := 0 ;
3376: LD_ADDR_VAR 0 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3384: LD_INT 70
3386: PPUSH
3387: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3391: LD_EXP 21
3395: PPUSH
3396: LD_INT 79
3398: PPUSH
3399: LD_INT 83
3401: PPUSH
3402: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3406: LD_EXP 21
3410: PUSH
3411: LD_INT 2
3413: ARRAY
3414: PPUSH
3415: LD_STRING D1R-Rus1-1
3417: PPUSH
3418: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3422: LD_EXP 21
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: LD_STRING D1R-Rus2-1
3433: PPUSH
3434: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3438: LD_EXP 22
3442: PPUSH
3443: LD_INT 91
3445: PPUSH
3446: LD_INT 80
3448: PPUSH
3449: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3453: LD_INT 35
3455: PPUSH
3456: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3460: LD_EXP 21
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: PPUSH
3469: LD_INT 79
3471: PPUSH
3472: LD_INT 82
3474: PPUSH
3475: CALL_OW 297
3479: PUSH
3480: LD_INT 6
3482: LESS
3483: IFFALSE 3453
// if not IsInArea ( JMM , jmm_spot ) then
3485: LD_EXP 16
3489: PPUSH
3490: LD_INT 5
3492: PPUSH
3493: CALL_OW 308
3497: NOT
3498: IFFALSE 3518
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3500: LD_EXP 21
3504: PUSH
3505: LD_INT 1
3507: ARRAY
3508: PPUSH
3509: LD_STRING D1Ra-Rus2-1
3511: PPUSH
3512: CALL_OW 88
3516: GO 3585
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3518: LD_EXP 21
3522: PUSH
3523: LD_INT 2
3525: ARRAY
3526: PPUSH
3527: LD_STRING D1Rb-Rus1-1
3529: PPUSH
3530: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3534: LD_EXP 21
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: PPUSH
3543: LD_STRING D1Rb-Rus2-1
3545: PPUSH
3546: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3550: LD_EXP 21
3554: PUSH
3555: LD_EXP 22
3559: ADD
3560: PPUSH
3561: LD_EXP 16
3565: PPUSH
3566: CALL_OW 250
3570: PPUSH
3571: LD_EXP 16
3575: PPUSH
3576: CALL_OW 251
3580: PPUSH
3581: CALL_OW 114
// end ; wait_points := 10 ;
3585: LD_ADDR_VAR 0 1
3589: PUSH
3590: LD_INT 10
3592: ST_TO_ADDR
// if Difficulty > 1 then
3593: LD_OWVAR 67
3597: PUSH
3598: LD_INT 1
3600: GREATER
3601: IFFALSE 3683
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 78
3610: PPUSH
3611: LD_INT 95
3613: PPUSH
3614: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3618: LD_EXP 21
3622: PPUSH
3623: LD_INT 175
3625: PPUSH
3626: CALL_OW 202
// wait_points := wait_points + 15 ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: LD_VAR 0 1
3639: PUSH
3640: LD_INT 15
3642: PLUS
3643: ST_TO_ADDR
// if Difficulty > 2 then
3644: LD_OWVAR 67
3648: PUSH
3649: LD_INT 2
3651: GREATER
3652: IFFALSE 3683
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3654: LD_EXP 21
3658: PPUSH
3659: LD_INT 65
3661: PPUSH
3662: LD_INT 79
3664: PPUSH
3665: CALL_OW 174
// wait_points := wait_points + 5 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 5
3681: PLUS
3682: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3683: LD_INT 35
3685: PPUSH
3686: CALL_OW 67
// wait_points := wait_points - 1 ;
3690: LD_ADDR_VAR 0 1
3694: PUSH
3695: LD_VAR 0 1
3699: PUSH
3700: LD_INT 1
3702: MINUS
3703: ST_TO_ADDR
// if See ( 3 , JMM ) then
3704: LD_INT 3
3706: PPUSH
3707: LD_EXP 16
3711: PPUSH
3712: CALL_OW 292
3716: IFFALSE 3770
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3718: LD_EXP 21
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: PPUSH
3727: LD_STRING D1Rb-Rus1-1
3729: PPUSH
3730: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3734: LD_EXP 21
3738: PPUSH
3739: LD_EXP 16
3743: PPUSH
3744: CALL_OW 250
3748: PPUSH
3749: LD_EXP 16
3753: PPUSH
3754: CALL_OW 251
3758: PPUSH
3759: CALL_OW 114
// Wait ( 0 0$03 ) ;
3763: LD_INT 105
3765: PPUSH
3766: CALL_OW 67
// end ; until wait_points = 0 ;
3770: LD_VAR 0 1
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3683
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3780: LD_EXP 21
3784: PUSH
3785: LD_INT 2
3787: ARRAY
3788: PPUSH
3789: LD_STRING D1Rc-Rus1-1
3791: PPUSH
3792: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3796: LD_EXP 21
3800: PUSH
3801: LD_INT 1
3803: ARRAY
3804: PPUSH
3805: LD_STRING D1Ra-Rus2-1a
3807: PPUSH
3808: CALL_OW 88
// active_powell_dialog := true ;
3812: LD_ADDR_EXP 15
3816: PUSH
3817: LD_INT 1
3819: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3820: LD_EXP 21
3824: PPUSH
3825: LD_INT 45
3827: PPUSH
3828: LD_INT 5
3830: PPUSH
3831: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3835: LD_EXP 22
3839: PPUSH
3840: LD_INT 26
3842: PPUSH
3843: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3847: LD_INT 35
3849: PPUSH
3850: CALL_OW 67
// if See ( 3 , JMM ) then
3854: LD_INT 3
3856: PPUSH
3857: LD_EXP 16
3861: PPUSH
3862: CALL_OW 292
3866: IFFALSE 3922
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3868: LD_EXP 21
3872: PUSH
3873: LD_INT 2
3875: ARRAY
3876: PPUSH
3877: LD_STRING D1Rb-Rus1-1
3879: PPUSH
3880: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3884: LD_EXP 21
3888: PPUSH
3889: LD_EXP 16
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_EXP 16
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 114
// Wait ( 0 0$50 ) ;
3913: LD_INT 1750
3915: PPUSH
3916: CALL_OW 67
// end else
3920: GO 3937
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3922: LD_EXP 21
3926: PPUSH
3927: LD_INT 45
3929: PPUSH
3930: LD_INT 5
3932: PPUSH
3933: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3937: LD_EXP 21
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_INT 45
3948: PPUSH
3949: LD_INT 5
3951: PPUSH
3952: CALL_OW 297
3956: PUSH
3957: LD_INT 10
3959: LESS
3960: IFFALSE 3847
// end ;
3962: PPOPN 1
3964: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 92
3977: PUSH
3978: LD_INT 80
3980: PUSH
3981: LD_INT 83
3983: PUSH
3984: LD_INT 6
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PPUSH
3997: CALL_OW 69
4001: PUSH
4002: LD_OWVAR 67
4006: PUSH
4007: LD_INT 1
4009: EQUAL
4010: AND
4011: IFFALSE 4092
4013: GO 4015
4015: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4016: LD_INT 80
4018: PPUSH
4019: LD_INT 83
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 7
4027: NEG
4028: PPUSH
4029: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4033: LD_INT 35
4035: PPUSH
4036: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4040: LD_INT 22
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 92
4052: PUSH
4053: LD_INT 80
4055: PUSH
4056: LD_INT 83
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: NOT
4077: IFFALSE 4033
// RemoveSeeing ( 80 , 83 , 1 ) ;
4079: LD_INT 80
4081: PPUSH
4082: LD_INT 83
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL_OW 331
// end ;
4092: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4093: LD_EXP 16
4097: PPUSH
4098: LD_EXP 17
4102: PPUSH
4103: CALL_OW 296
4107: PUSH
4108: LD_INT 6
4110: LESS
4111: PUSH
4112: LD_EXP 17
4116: PPUSH
4117: CALL_OW 302
4121: AND
4122: IFFALSE 4581
4124: GO 4126
4126: DISABLE
// begin ComWalk ( Bobby ) ;
4127: LD_EXP 17
4131: PPUSH
4132: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4136: LD_EXP 17
4140: PPUSH
4141: LD_EXP 16
4145: PPUSH
4146: CALL_OW 250
4150: PPUSH
4151: LD_EXP 16
4155: PPUSH
4156: CALL_OW 251
4160: PPUSH
4161: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4165: LD_INT 35
4167: PPUSH
4168: CALL_OW 67
// until See ( 4 , JMM ) ;
4172: LD_INT 4
4174: PPUSH
4175: LD_EXP 16
4179: PPUSH
4180: CALL_OW 292
4184: IFFALSE 4165
// InGameOn ;
4186: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_EXP 17
4199: PPUSH
4200: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4204: LD_EXP 7
4208: PUSH
4209: LD_EXP 18
4213: PPUSH
4214: CALL_OW 302
4218: AND
4219: PUSH
4220: LD_EXP 16
4224: PPUSH
4225: LD_EXP 18
4229: PPUSH
4230: CALL_OW 296
4234: PUSH
4235: LD_INT 10
4237: LESS
4238: AND
4239: IFFALSE 4284
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4241: LD_EXP 18
4245: PPUSH
4246: LD_EXP 16
4250: PPUSH
4251: CALL_OW 250
4255: PPUSH
4256: LD_EXP 16
4260: PPUSH
4261: CALL_OW 251
4265: PPUSH
4266: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4270: LD_EXP 18
4274: PPUSH
4275: LD_EXP 17
4279: PPUSH
4280: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4284: LD_EXP 16
4288: PPUSH
4289: LD_STRING D2-JMM-1
4291: PPUSH
4292: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4296: LD_INT 10
4298: PPUSH
4299: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4303: LD_EXP 17
4307: PPUSH
4308: LD_EXP 16
4312: PPUSH
4313: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4317: LD_EXP 17
4321: PPUSH
4322: LD_STRING D2-Bobby-1
4324: PPUSH
4325: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4329: LD_EXP 16
4333: PPUSH
4334: LD_STRING D2-JMM-2
4336: PPUSH
4337: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4341: LD_EXP 17
4345: PPUSH
4346: LD_EXP 16
4350: PPUSH
4351: CALL_OW 250
4355: PPUSH
4356: LD_EXP 16
4360: PPUSH
4361: CALL_OW 251
4365: PPUSH
4366: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4370: LD_EXP 17
4374: PPUSH
4375: LD_STRING D2-Bobby-2
4377: PPUSH
4378: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4382: LD_EXP 16
4386: PPUSH
4387: LD_STRING D2-JMM-3
4389: PPUSH
4390: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4394: LD_EXP 17
4398: PPUSH
4399: LD_EXP 16
4403: PPUSH
4404: CALL_OW 119
// DialogueOn ;
4408: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4412: LD_EXP 17
4416: PPUSH
4417: LD_STRING D2-Bobby-3
4419: PPUSH
4420: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4424: LD_EXP 16
4428: PPUSH
4429: LD_STRING D2-JMM-4
4431: PPUSH
4432: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4436: LD_EXP 17
4440: PPUSH
4441: LD_STRING D2-Bobby-4
4443: PPUSH
4444: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4448: LD_EXP 16
4452: PPUSH
4453: LD_STRING D2-JMM-5
4455: PPUSH
4456: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4460: LD_EXP 17
4464: PPUSH
4465: LD_STRING D2-Bobby-5
4467: PPUSH
4468: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4472: LD_EXP 16
4476: PPUSH
4477: LD_STRING D2-JMM-6
4479: PPUSH
4480: CALL_OW 88
// if not powell_contact then
4484: LD_EXP 5
4488: NOT
4489: IFFALSE 4515
// begin Say ( Bobby , D2-Bobby-6 ) ;
4491: LD_EXP 17
4495: PPUSH
4496: LD_STRING D2-Bobby-6
4498: PPUSH
4499: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4503: LD_EXP 16
4507: PPUSH
4508: LD_STRING D2-JMM-7
4510: PPUSH
4511: CALL_OW 88
// end ; DialogueOff ;
4515: CALL_OW 7
// InGameOff ;
4519: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_INT 1
4530: PPUSH
4531: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4535: LD_EXP 16
4539: PUSH
4540: LD_EXP 17
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 139
// bobby_in_squad := true ;
4553: LD_ADDR_EXP 4
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4561: LD_EXP 5
4565: PUSH
4566: LD_EXP 7
4570: NOT
4571: AND
4572: IFFALSE 4581
// ChangeMissionObjectives ( M2b ) ;
4574: LD_STRING M2b
4576: PPUSH
4577: CALL_OW 337
// end ;
4581: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4582: LD_EXP 3
4586: PUSH
4587: LD_OWVAR 67
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4630
4598: GO 4600
4600: DISABLE
// begin wait ( 1 1$00 ) ;
4601: LD_INT 2100
4603: PPUSH
4604: CALL_OW 67
// if not bobby_in_squad then
4608: LD_EXP 4
4612: NOT
4613: IFFALSE 4630
// ComMoveXY ( Bobby , 75 , 83 ) ;
4615: LD_EXP 17
4619: PPUSH
4620: LD_INT 75
4622: PPUSH
4623: LD_INT 83
4625: PPUSH
4626: CALL_OW 111
// end ;
4630: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4631: LD_EXP 7
4635: PUSH
4636: LD_EXP 4
4640: NOT
4641: AND
4642: IFFALSE 4671
4644: GO 4646
4646: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4647: LD_EXP 17
4651: PPUSH
4652: LD_INT 105
4654: PPUSH
4655: LD_INT 97
4657: PPUSH
4658: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4662: LD_EXP 17
4666: PPUSH
4667: CALL_OW 197
// end ;
4671: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4672: LD_EXP 16
4676: PPUSH
4677: LD_INT 6
4679: PPUSH
4680: CALL_OW 308
4684: PUSH
4685: LD_EXP 16
4689: PPUSH
4690: LD_EXP 17
4694: PPUSH
4695: CALL_OW 296
4699: PUSH
4700: LD_INT 7
4702: LESS
4703: AND
4704: PUSH
4705: LD_EXP 4
4709: AND
4710: IFFALSE 4757
4712: GO 4714
4714: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4715: LD_EXP 16
4719: PUSH
4720: LD_EXP 17
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PPUSH
4729: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4733: LD_EXP 16
4737: PPUSH
4738: LD_STRING D2a-JMM-1
4740: PPUSH
4741: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4745: LD_EXP 17
4749: PPUSH
4750: LD_STRING D2a-Bobby-1
4752: PPUSH
4753: CALL_OW 88
// end ;
4757: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4758: LD_EXP 15
4762: PUSH
4763: LD_INT 3
4765: PPUSH
4766: LD_EXP 16
4770: PPUSH
4771: CALL_OW 292
4775: NOT
4776: AND
4777: IFFALSE 4948
4779: GO 4781
4781: DISABLE
// begin wait ( 0 0$5 ) ;
4782: LD_INT 175
4784: PPUSH
4785: CALL_OW 67
// InGameOn ;
4789: CALL_OW 8
// DialogueOn ;
4793: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4797: LD_EXP 19
4801: PPUSH
4802: LD_STRING D3-Pow-1
4804: PPUSH
4805: CALL 68035 0 2
// Say ( JMM , D3-JMM-1 ) ;
4809: LD_EXP 16
4813: PPUSH
4814: LD_STRING D3-JMM-1
4816: PPUSH
4817: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4821: LD_EXP 19
4825: PPUSH
4826: LD_STRING D3-Pow-2
4828: PPUSH
4829: CALL 68035 0 2
// Say ( JMM , D3-JMM-2 ) ;
4833: LD_EXP 16
4837: PPUSH
4838: LD_STRING D3-JMM-2
4840: PPUSH
4841: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4845: LD_EXP 19
4849: PPUSH
4850: LD_STRING D3-Pow-3
4852: PPUSH
4853: CALL 68035 0 2
// DialogueOff ;
4857: CALL_OW 7
// InGameOff ;
4861: CALL_OW 9
// powell_contact := true ;
4865: LD_ADDR_EXP 5
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4873: LD_INT 10
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 424
// uc_side := 4 ;
4883: LD_ADDR_OWVAR 20
4887: PUSH
4888: LD_INT 4
4890: ST_TO_ADDR
// uc_nation := 1 ;
4891: LD_ADDR_OWVAR 21
4895: PUSH
4896: LD_INT 1
4898: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4899: LD_ADDR_EXP 19
4903: PUSH
4904: LD_STRING Powell
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: LD_STRING 
4912: PPUSH
4913: CALL 26667 0 3
4917: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4918: LD_STRING M2
4920: PPUSH
4921: CALL_OW 337
// if not bobby_in_squad then
4925: LD_EXP 4
4929: NOT
4930: IFFALSE 4941
// ChangeMissionObjectives ( M2a ) else
4932: LD_STRING M2a
4934: PPUSH
4935: CALL_OW 337
4939: GO 4948
// ChangeMissionObjectives ( M2b ) ;
4941: LD_STRING M2b
4943: PPUSH
4944: CALL_OW 337
// end ;
4948: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4949: LD_EXP 16
4953: PPUSH
4954: LD_INT 7
4956: PPUSH
4957: CALL_OW 308
4961: IFFALSE 5096
4963: GO 4965
4965: DISABLE
// begin DialogueOn ;
4966: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
4970: LD_EXP 20
4974: PPUSH
4975: LD_STRING D4-Rus3-1
4977: PPUSH
4978: CALL 68035 0 2
// DialogueOff ;
4982: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4986: LD_STRING M3a
4988: PPUSH
4989: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4993: LD_INT 11
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 424
// Wait ( 0 0$02 ) ;
5003: LD_INT 70
5005: PPUSH
5006: CALL_OW 67
// DialogueOn ;
5010: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5014: LD_EXP 19
5018: PPUSH
5019: LD_STRING D4-Pow-1
5021: PPUSH
5022: CALL_OW 586
// DialogueOff ;
5026: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5030: LD_STRING M3b
5032: PPUSH
5033: CALL_OW 337
// case Query ( Q1 ) of 1 :
5037: LD_STRING Q1
5039: PPUSH
5040: CALL_OW 97
5044: PUSH
5045: LD_INT 1
5047: DOUBLE
5048: EQUAL
5049: IFTRUE 5053
5051: GO 5084
5053: POP
// begin macmilan_use_radio := true ;
5054: LD_ADDR_EXP 6
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// DialogueOn ;
5062: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5066: LD_EXP 16
5070: PPUSH
5071: LD_STRING D4a-JMM-1
5073: PPUSH
5074: CALL_OW 88
// DialogueOff ;
5078: CALL_OW 7
// end ; 2 :
5082: GO 5096
5084: LD_INT 2
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5095
5092: POP
// ; end ;
5093: GO 5096
5095: POP
// end ;
5096: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5097: LD_EXP 16
5101: PPUSH
5102: LD_EXP 18
5106: PPUSH
5107: CALL_OW 296
5111: PUSH
5112: LD_INT 8
5114: LESS
5115: PUSH
5116: LD_EXP 18
5120: PPUSH
5121: CALL_OW 302
5125: AND
5126: IFFALSE 5417
5128: GO 5130
5130: DISABLE
// begin InGameOn ;
5131: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5135: LD_EXP 16
5139: PPUSH
5140: LD_EXP 18
5144: PPUSH
5145: CALL_OW 250
5149: PPUSH
5150: LD_EXP 18
5154: PPUSH
5155: CALL_OW 251
5159: PPUSH
5160: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5164: LD_EXP 17
5168: PPUSH
5169: CALL_OW 302
5173: PUSH
5174: LD_EXP 4
5178: AND
5179: IFFALSE 5210
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5181: LD_EXP 17
5185: PPUSH
5186: LD_EXP 16
5190: PPUSH
5191: CALL_OW 250
5195: PPUSH
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 251
5205: PPUSH
5206: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5210: LD_EXP 16
5214: PPUSH
5215: LD_STRING D5-JMM-1
5217: PPUSH
5218: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5222: LD_INT 10
5224: PPUSH
5225: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5229: LD_EXP 16
5233: PPUSH
5234: LD_EXP 18
5238: PPUSH
5239: CALL_OW 119
// ComWalk ( Cyrus ) ;
5243: LD_EXP 18
5247: PPUSH
5248: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5252: LD_EXP 18
5256: PPUSH
5257: LD_EXP 16
5261: PPUSH
5262: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5266: LD_EXP 18
5270: PPUSH
5271: LD_STRING D5-Cyrus-1
5273: PPUSH
5274: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5278: LD_EXP 17
5282: PPUSH
5283: CALL_OW 302
5287: PUSH
5288: LD_EXP 4
5292: AND
5293: IFFALSE 5333
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5295: LD_EXP 17
5299: PPUSH
5300: LD_EXP 18
5304: PPUSH
5305: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5309: LD_EXP 17
5313: PPUSH
5314: LD_STRING D5-Bobby-1
5316: PPUSH
5317: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-2
5328: PPUSH
5329: CALL_OW 88
// end ; InGameOff ;
5333: CALL_OW 9
// cyrus_in_squad := true ;
5337: LD_ADDR_EXP 7
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5345: LD_EXP 18
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5357: LD_EXP 5
5361: PUSH
5362: LD_EXP 4
5366: NOT
5367: AND
5368: IFFALSE 5377
// ChangeMissionObjectives ( M2b ) ;
5370: LD_STRING M2b
5372: PPUSH
5373: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5377: LD_EXP 4
5381: NOT
5382: PUSH
5383: LD_EXP 17
5387: PPUSH
5388: CALL_OW 255
5392: PUSH
5393: LD_INT 4
5395: EQUAL
5396: AND
5397: PUSH
5398: LD_EXP 17
5402: PPUSH
5403: CALL_OW 302
5407: AND
5408: IFFALSE 5417
// SetAchievement ( ACH_CYRUS ) ;
5410: LD_STRING ACH_CYRUS
5412: PPUSH
5413: CALL_OW 543
// end ;
5417: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5418: LD_EXP 4
5422: PUSH
5423: LD_EXP 7
5427: AND
5428: IFFALSE 5440
5430: GO 5432
5432: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5433: LD_STRING M2c
5435: PPUSH
5436: CALL_OW 337
5440: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5441: LD_EXP 16
5445: PPUSH
5446: LD_INT 8
5448: PPUSH
5449: CALL_OW 308
5453: IFFALSE 5505
5455: GO 5457
5457: DISABLE
// begin macmilan_in_trap := true ;
5458: LD_ADDR_EXP 9
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5466: LD_INT 35
5468: PPUSH
5469: CALL_OW 67
// DialogueOn ;
5473: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5477: LD_EXP 27
5481: PPUSH
5482: LD_STRING D5-Pok-1
5484: PPUSH
5485: CALL_OW 88
// DialogueOff ;
5489: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5493: LD_EXP 16
5497: PPUSH
5498: LD_STRING D4b-JMM-1
5500: PPUSH
5501: CALL_OW 88
// end ;
5505: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5506: LD_EXP 16
5510: PPUSH
5511: LD_INT 13
5513: PPUSH
5514: CALL_OW 308
5518: PUSH
5519: LD_EXP 16
5523: PPUSH
5524: LD_EXP 24
5528: PUSH
5529: LD_EXP 24
5533: ARRAY
5534: PPUSH
5535: CALL_OW 296
5539: PUSH
5540: LD_INT 12
5542: LESS
5543: AND
5544: PUSH
5545: LD_EXP 24
5549: PPUSH
5550: LD_INT 3
5552: PUSH
5553: LD_INT 24
5555: PUSH
5556: LD_INT 990
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: OR
5572: IFFALSE 5810
5574: GO 5576
5576: DISABLE
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5581: LD_ADDR_VAR 0 2
5585: PUSH
5586: LD_INT 300
5588: PUSH
5589: LD_INT 250
5591: PUSH
5592: LD_INT 200
5594: PUSH
5595: LD_INT 150
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: LD_OWVAR 67
5608: ARRAY
5609: ST_TO_ADDR
// for i in russian_meta_guards do
5610: LD_ADDR_VAR 0 1
5614: PUSH
5615: LD_EXP 24
5619: PUSH
5620: FOR_IN
5621: IFFALSE 5661
// if IsOk ( i ) then
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 302
5632: IFFALSE 5659
// SetLives ( i , GetLives ( i ) - hp ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 256
5648: PUSH
5649: LD_VAR 0 2
5653: MINUS
5654: PPUSH
5655: CALL_OW 234
5659: GO 5620
5661: POP
5662: POP
// DialogueOn ;
5663: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5667: LD_EXP 24
5671: PUSH
5672: LD_EXP 24
5676: ARRAY
5677: PPUSH
5678: LD_STRING D6-FRus1-1
5680: PPUSH
5681: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5685: LD_EXP 16
5689: PPUSH
5690: LD_STRING D6-JMM-1
5692: PPUSH
5693: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5697: LD_EXP 18
5701: PPUSH
5702: CALL_OW 302
5706: PUSH
5707: LD_EXP 7
5711: AND
5712: IFFALSE 5726
// Say ( Cyrus , D6-Cyrus-1 ) ;
5714: LD_EXP 18
5718: PPUSH
5719: LD_STRING D6-Cyrus-1
5721: PPUSH
5722: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5726: LD_EXP 17
5730: PPUSH
5731: CALL_OW 302
5735: PUSH
5736: LD_EXP 4
5740: AND
5741: IFFALSE 5755
// Say ( Bobby , D6-Bobby-1 ) ;
5743: LD_EXP 17
5747: PPUSH
5748: LD_STRING D6-Bobby-1
5750: PPUSH
5751: CALL_OW 88
// DialogueOff ;
5755: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5759: LD_INT 140
5761: PUSH
5762: LD_INT 105
5764: PUSH
5765: LD_INT 70
5767: PUSH
5768: LD_INT 70
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_OWVAR 67
5781: ARRAY
5782: PPUSH
5783: CALL_OW 67
// meta_action := true ;
5787: LD_ADDR_EXP 10
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5795: LD_EXP 24
5799: PPUSH
5800: LD_INT 94
5802: PPUSH
5803: LD_INT 8
5805: PPUSH
5806: CALL_OW 114
// end ;
5810: PPOPN 2
5812: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5813: LD_EXP 16
5817: PPUSH
5818: LD_INT 93
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 297
5828: PUSH
5829: LD_INT 5
5831: LESS
5832: PUSH
5833: LD_INT 22
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PPUSH
5843: CALL_OW 69
5847: PUSH
5848: LD_INT 1
5850: GREATER
5851: AND
5852: IFFALSE 5869
5854: GO 5856
5856: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5857: LD_EXP 16
5861: PPUSH
5862: LD_STRING D6a-JMM-1
5864: PPUSH
5865: CALL_OW 88
5869: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5870: LD_EXP 17
5874: PPUSH
5875: LD_INT 10
5877: PPUSH
5878: CALL_OW 308
5882: PUSH
5883: LD_EXP 17
5887: PPUSH
5888: LD_INT 12
5890: PPUSH
5891: CALL_OW 308
5895: OR
5896: IFFALSE 5945
5898: GO 5900
5900: DISABLE
// begin bobby_saved := true ;
5901: LD_ADDR_EXP 12
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5909: LD_EXP 17
5913: PPUSH
5914: CALL_OW 256
5918: PPUSH
5919: LD_STRING 01_BobbyLifePoints_1
5921: PPUSH
5922: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5926: LD_EXP 17
5930: PPUSH
5931: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5935: LD_STRING Bobby
5937: PPUSH
5938: LD_INT 1
5940: PPUSH
5941: CALL_OW 101
// end ;
5945: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
5946: LD_EXP 18
5950: PPUSH
5951: LD_INT 10
5953: PPUSH
5954: CALL_OW 308
5958: PUSH
5959: LD_EXP 18
5963: PPUSH
5964: LD_INT 12
5966: PPUSH
5967: CALL_OW 308
5971: OR
5972: IFFALSE 6021
5974: GO 5976
5976: DISABLE
// begin cyrus_saved := true ;
5977: LD_ADDR_EXP 13
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5985: LD_EXP 18
5989: PPUSH
5990: CALL_OW 256
5994: PPUSH
5995: LD_STRING 01_CyrusLifePoints_1
5997: PPUSH
5998: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6002: LD_EXP 18
6006: PPUSH
6007: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6011: LD_STRING Cyrus
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: CALL_OW 101
// end ;
6021: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6022: LD_EXP 16
6026: PPUSH
6027: LD_INT 10
6029: PPUSH
6030: CALL_OW 308
6034: PUSH
6035: LD_EXP 16
6039: PPUSH
6040: LD_INT 12
6042: PPUSH
6043: CALL_OW 308
6047: OR
6048: IFFALSE 6656
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
// begin if macmilan_use_radio then
6061: LD_EXP 6
6065: IFFALSE 6074
// SetAchievement ( ACH_RADIO ) ;
6067: LD_STRING ACH_RADIO
6069: PPUSH
6070: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6074: LD_EXP 13
6078: NOT
6079: PUSH
6080: LD_EXP 7
6084: AND
6085: PUSH
6086: LD_EXP 18
6090: PPUSH
6091: CALL_OW 302
6095: AND
6096: PUSH
6097: LD_EXP 12
6101: NOT
6102: PUSH
6103: LD_EXP 4
6107: AND
6108: PUSH
6109: LD_EXP 17
6113: PPUSH
6114: CALL_OW 302
6118: AND
6119: OR
6120: IFFALSE 6161
// case Query ( Q2 ) of 1 :
6122: LD_STRING Q2
6124: PPUSH
6125: CALL_OW 97
6129: PUSH
6130: LD_INT 1
6132: DOUBLE
6133: EQUAL
6134: IFTRUE 6138
6136: GO 6149
6138: POP
// wait_for_them := true ; 2 :
6139: LD_ADDR_VAR 0 3
6143: PUSH
6144: LD_INT 1
6146: ST_TO_ADDR
6147: GO 6161
6149: LD_INT 2
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6160
6157: POP
// ; end ;
6158: GO 6161
6160: POP
// if wait_for_them then
6161: LD_VAR 0 3
6165: IFFALSE 6278
// repeat wait ( 0 0$01 ) ;
6167: LD_INT 35
6169: PPUSH
6170: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6174: LD_EXP 13
6178: PUSH
6179: LD_EXP 12
6183: AND
6184: PUSH
6185: LD_EXP 13
6189: PUSH
6190: LD_EXP 4
6194: NOT
6195: PUSH
6196: LD_EXP 17
6200: PPUSH
6201: CALL_OW 303
6205: OR
6206: PUSH
6207: LD_EXP 17
6211: PPUSH
6212: CALL_OW 301
6216: OR
6217: AND
6218: OR
6219: PUSH
6220: LD_EXP 12
6224: PUSH
6225: LD_EXP 7
6229: NOT
6230: PUSH
6231: LD_EXP 18
6235: PPUSH
6236: CALL_OW 303
6240: OR
6241: PUSH
6242: LD_EXP 18
6246: PPUSH
6247: CALL_OW 301
6251: OR
6252: AND
6253: OR
6254: PUSH
6255: LD_EXP 17
6259: PPUSH
6260: CALL_OW 301
6264: PUSH
6265: LD_EXP 18
6269: PPUSH
6270: CALL_OW 301
6274: AND
6275: OR
6276: IFFALSE 6167
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6278: LD_EXP 16
6282: PPUSH
6283: CALL_OW 256
6287: PPUSH
6288: LD_STRING 01_JMMLifePoints_1
6290: PPUSH
6291: CALL_OW 39
// RemoveUnit ( JMM ) ;
6295: LD_EXP 16
6299: PPUSH
6300: CALL_OW 64
// to_reward := [ JMM ] ;
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 16
6313: PUSH
6314: EMPTY
6315: LIST
6316: ST_TO_ADDR
// if bobby_saved then
6317: LD_EXP 12
6321: IFFALSE 6339
// to_reward := to_reward ^ Bobby ;
6323: LD_ADDR_VAR 0 2
6327: PUSH
6328: LD_VAR 0 2
6332: PUSH
6333: LD_EXP 17
6337: ADD
6338: ST_TO_ADDR
// if cyrus_saved then
6339: LD_EXP 13
6343: IFFALSE 6361
// to_reward := to_reward ^ Cyrus ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_VAR 0 2
6354: PUSH
6355: LD_EXP 18
6359: ADD
6360: ST_TO_ADDR
// m1 := true ;
6361: LD_ADDR_VAR 0 4
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// m2 := bobby_saved ;
6369: LD_ADDR_VAR 0 5
6373: PUSH
6374: LD_EXP 12
6378: ST_TO_ADDR
// m3 := cyrus_saved ;
6379: LD_ADDR_VAR 0 6
6383: PUSH
6384: LD_EXP 13
6388: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6389: LD_STRING JMM
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: CALL_OW 101
// if not bobby_in_squad then
6399: LD_EXP 4
6403: NOT
6404: IFFALSE 6417
// AddMedal ( Bobby , - 1 ) ;
6406: LD_STRING Bobby
6408: PPUSH
6409: LD_INT 1
6411: NEG
6412: PPUSH
6413: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6417: LD_EXP 12
6421: NOT
6422: PUSH
6423: LD_EXP 17
6427: PPUSH
6428: CALL_OW 303
6432: PUSH
6433: LD_EXP 17
6437: PPUSH
6438: CALL_OW 301
6442: OR
6443: AND
6444: IFFALSE 6457
// AddMedal ( Bobby , - 2 ) ;
6446: LD_STRING Bobby
6448: PPUSH
6449: LD_INT 2
6451: NEG
6452: PPUSH
6453: CALL_OW 101
// if not cyrus_in_squad then
6457: LD_EXP 7
6461: NOT
6462: IFFALSE 6475
// AddMedal ( Cyrus , - 1 ) ;
6464: LD_STRING Cyrus
6466: PPUSH
6467: LD_INT 1
6469: NEG
6470: PPUSH
6471: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6475: LD_EXP 13
6479: NOT
6480: PUSH
6481: LD_EXP 18
6485: PPUSH
6486: CALL_OW 303
6490: PUSH
6491: LD_EXP 18
6495: PPUSH
6496: CALL_OW 301
6500: OR
6501: AND
6502: IFFALSE 6515
// AddMedal ( Cyrus , - 2 ) ;
6504: LD_STRING Cyrus
6506: PPUSH
6507: LD_INT 2
6509: NEG
6510: PPUSH
6511: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6515: LD_OWVAR 67
6519: PUSH
6520: LD_INT 3
6522: GREATEREQUAL
6523: PUSH
6524: LD_VAR 0 4
6528: AND
6529: PUSH
6530: LD_VAR 0 5
6534: AND
6535: PUSH
6536: LD_VAR 0 6
6540: AND
6541: IFFALSE 6553
// SetAchievementEX ( ACH_AMER , 1 ) ;
6543: LD_STRING ACH_AMER
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: CALL_OW 564
// GiveMedals ( MAIN ) ;
6553: LD_STRING MAIN
6555: PPUSH
6556: CALL_OW 102
// RewardPeople ( to_reward ) ;
6560: LD_VAR 0 2
6564: PPUSH
6565: CALL_OW 43
// if bobby_saved then
6569: LD_EXP 12
6573: IFFALSE 6593
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6575: LD_EXP 17
6579: PPUSH
6580: LD_EXP 2
6584: PUSH
6585: LD_STRING Bobby
6587: STR
6588: PPUSH
6589: CALL_OW 38
// if cyrus_saved then
6593: LD_EXP 13
6597: IFFALSE 6617
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6599: LD_EXP 18
6603: PPUSH
6604: LD_EXP 2
6608: PUSH
6609: LD_STRING Cyrus
6611: STR
6612: PPUSH
6613: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6617: LD_EXP 16
6621: PPUSH
6622: LD_EXP 2
6626: PUSH
6627: LD_STRING JMM
6629: STR
6630: PPUSH
6631: CALL_OW 38
// if tick <= 3 3$00 then
6635: LD_OWVAR 1
6639: PUSH
6640: LD_INT 6300
6642: LESSEQUAL
6643: IFFALSE 6652
// SetAchievement ( ACH_ASPEED_1 ) ;
6645: LD_STRING ACH_ASPEED_1
6647: PPUSH
6648: CALL_OW 543
// YouWin ;
6652: CALL_OW 103
// end ; end_of_file
6656: PPOPN 6
6658: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6659: LD_VAR 0 1
6663: PUSH
6664: LD_EXP 16
6668: EQUAL
6669: IFFALSE 6678
// YouLost ( JMM ) ;
6671: LD_STRING JMM
6673: PPUSH
6674: CALL_OW 104
// end ;
6678: PPOPN 1
6680: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL 22498 0 2
// end ;
6695: PPOPN 2
6697: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6698: LD_VAR 0 1
6702: PPUSH
6703: CALL 22378 0 1
// if un = JMM then
6707: LD_VAR 0 1
6711: PUSH
6712: LD_EXP 16
6716: EQUAL
6717: IFFALSE 6726
// YouLost ( JMM ) ;
6719: LD_STRING JMM
6721: PPUSH
6722: CALL_OW 104
// end ; end_of_file end_of_file
6726: PPOPN 1
6728: END
// every 0 0$1 do
6729: GO 6731
6731: DISABLE
// begin enable ;
6732: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6733: LD_STRING updateTimer(
6735: PUSH
6736: LD_OWVAR 1
6740: STR
6741: PUSH
6742: LD_STRING );
6744: STR
6745: PPUSH
6746: CALL_OW 559
// end ;
6750: END
// export function SOS_MapStart ( ) ; begin
6751: LD_INT 0
6753: PPUSH
// if streamModeActive then
6754: LD_EXP 28
6758: IFFALSE 6767
// DefineStreamItems ( true ) ;
6760: LD_INT 1
6762: PPUSH
6763: CALL 8421 0 1
// UpdateFactoryWaypoints ( ) ;
6767: CALL 21282 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6771: CALL 21539 0 0
// end ;
6775: LD_VAR 0 1
6779: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6780: LD_INT 0
6782: PPUSH
// if p2 = hack_mode then
6783: LD_VAR 0 2
6787: PUSH
6788: LD_INT 100
6790: EQUAL
6791: IFFALSE 7794
// begin if not StreamModeActive then
6793: LD_EXP 28
6797: NOT
6798: IFFALSE 6808
// StreamModeActive := true ;
6800: LD_ADDR_EXP 28
6804: PUSH
6805: LD_INT 1
6807: ST_TO_ADDR
// if p3 = 0 then
6808: LD_VAR 0 3
6812: PUSH
6813: LD_INT 0
6815: EQUAL
6816: IFFALSE 6822
// InitStreamMode ;
6818: CALL 7957 0 0
// if p3 = 1 then
6822: LD_VAR 0 3
6826: PUSH
6827: LD_INT 1
6829: EQUAL
6830: IFFALSE 6840
// sRocket := true ;
6832: LD_ADDR_EXP 33
6836: PUSH
6837: LD_INT 1
6839: ST_TO_ADDR
// if p3 = 2 then
6840: LD_VAR 0 3
6844: PUSH
6845: LD_INT 2
6847: EQUAL
6848: IFFALSE 6858
// sSpeed := true ;
6850: LD_ADDR_EXP 32
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// if p3 = 3 then
6858: LD_VAR 0 3
6862: PUSH
6863: LD_INT 3
6865: EQUAL
6866: IFFALSE 6876
// sEngine := true ;
6868: LD_ADDR_EXP 34
6872: PUSH
6873: LD_INT 1
6875: ST_TO_ADDR
// if p3 = 4 then
6876: LD_VAR 0 3
6880: PUSH
6881: LD_INT 4
6883: EQUAL
6884: IFFALSE 6894
// sSpec := true ;
6886: LD_ADDR_EXP 31
6890: PUSH
6891: LD_INT 1
6893: ST_TO_ADDR
// if p3 = 5 then
6894: LD_VAR 0 3
6898: PUSH
6899: LD_INT 5
6901: EQUAL
6902: IFFALSE 6912
// sLevel := true ;
6904: LD_ADDR_EXP 35
6908: PUSH
6909: LD_INT 1
6911: ST_TO_ADDR
// if p3 = 6 then
6912: LD_VAR 0 3
6916: PUSH
6917: LD_INT 6
6919: EQUAL
6920: IFFALSE 6930
// sArmoury := true ;
6922: LD_ADDR_EXP 36
6926: PUSH
6927: LD_INT 1
6929: ST_TO_ADDR
// if p3 = 7 then
6930: LD_VAR 0 3
6934: PUSH
6935: LD_INT 7
6937: EQUAL
6938: IFFALSE 6948
// sRadar := true ;
6940: LD_ADDR_EXP 37
6944: PUSH
6945: LD_INT 1
6947: ST_TO_ADDR
// if p3 = 8 then
6948: LD_VAR 0 3
6952: PUSH
6953: LD_INT 8
6955: EQUAL
6956: IFFALSE 6966
// sBunker := true ;
6958: LD_ADDR_EXP 38
6962: PUSH
6963: LD_INT 1
6965: ST_TO_ADDR
// if p3 = 9 then
6966: LD_VAR 0 3
6970: PUSH
6971: LD_INT 9
6973: EQUAL
6974: IFFALSE 6984
// sHack := true ;
6976: LD_ADDR_EXP 39
6980: PUSH
6981: LD_INT 1
6983: ST_TO_ADDR
// if p3 = 10 then
6984: LD_VAR 0 3
6988: PUSH
6989: LD_INT 10
6991: EQUAL
6992: IFFALSE 7002
// sFire := true ;
6994: LD_ADDR_EXP 40
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// if p3 = 11 then
7002: LD_VAR 0 3
7006: PUSH
7007: LD_INT 11
7009: EQUAL
7010: IFFALSE 7020
// sRefresh := true ;
7012: LD_ADDR_EXP 41
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
// if p3 = 12 then
7020: LD_VAR 0 3
7024: PUSH
7025: LD_INT 12
7027: EQUAL
7028: IFFALSE 7038
// sExp := true ;
7030: LD_ADDR_EXP 42
7034: PUSH
7035: LD_INT 1
7037: ST_TO_ADDR
// if p3 = 13 then
7038: LD_VAR 0 3
7042: PUSH
7043: LD_INT 13
7045: EQUAL
7046: IFFALSE 7056
// sDepot := true ;
7048: LD_ADDR_EXP 43
7052: PUSH
7053: LD_INT 1
7055: ST_TO_ADDR
// if p3 = 14 then
7056: LD_VAR 0 3
7060: PUSH
7061: LD_INT 14
7063: EQUAL
7064: IFFALSE 7074
// sFlag := true ;
7066: LD_ADDR_EXP 44
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// if p3 = 15 then
7074: LD_VAR 0 3
7078: PUSH
7079: LD_INT 15
7081: EQUAL
7082: IFFALSE 7092
// sKamikadze := true ;
7084: LD_ADDR_EXP 52
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// if p3 = 16 then
7092: LD_VAR 0 3
7096: PUSH
7097: LD_INT 16
7099: EQUAL
7100: IFFALSE 7110
// sTroll := true ;
7102: LD_ADDR_EXP 53
7106: PUSH
7107: LD_INT 1
7109: ST_TO_ADDR
// if p3 = 17 then
7110: LD_VAR 0 3
7114: PUSH
7115: LD_INT 17
7117: EQUAL
7118: IFFALSE 7128
// sSlow := true ;
7120: LD_ADDR_EXP 54
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// if p3 = 18 then
7128: LD_VAR 0 3
7132: PUSH
7133: LD_INT 18
7135: EQUAL
7136: IFFALSE 7146
// sLack := true ;
7138: LD_ADDR_EXP 55
7142: PUSH
7143: LD_INT 1
7145: ST_TO_ADDR
// if p3 = 19 then
7146: LD_VAR 0 3
7150: PUSH
7151: LD_INT 19
7153: EQUAL
7154: IFFALSE 7164
// sTank := true ;
7156: LD_ADDR_EXP 57
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// if p3 = 20 then
7164: LD_VAR 0 3
7168: PUSH
7169: LD_INT 20
7171: EQUAL
7172: IFFALSE 7182
// sRemote := true ;
7174: LD_ADDR_EXP 58
7178: PUSH
7179: LD_INT 1
7181: ST_TO_ADDR
// if p3 = 21 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 21
7189: EQUAL
7190: IFFALSE 7200
// sPowell := true ;
7192: LD_ADDR_EXP 59
7196: PUSH
7197: LD_INT 1
7199: ST_TO_ADDR
// if p3 = 22 then
7200: LD_VAR 0 3
7204: PUSH
7205: LD_INT 22
7207: EQUAL
7208: IFFALSE 7218
// sTeleport := true ;
7210: LD_ADDR_EXP 62
7214: PUSH
7215: LD_INT 1
7217: ST_TO_ADDR
// if p3 = 23 then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 23
7225: EQUAL
7226: IFFALSE 7236
// sOilTower := true ;
7228: LD_ADDR_EXP 64
7232: PUSH
7233: LD_INT 1
7235: ST_TO_ADDR
// if p3 = 24 then
7236: LD_VAR 0 3
7240: PUSH
7241: LD_INT 24
7243: EQUAL
7244: IFFALSE 7254
// sShovel := true ;
7246: LD_ADDR_EXP 65
7250: PUSH
7251: LD_INT 1
7253: ST_TO_ADDR
// if p3 = 25 then
7254: LD_VAR 0 3
7258: PUSH
7259: LD_INT 25
7261: EQUAL
7262: IFFALSE 7272
// sSheik := true ;
7264: LD_ADDR_EXP 66
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// if p3 = 26 then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 26
7279: EQUAL
7280: IFFALSE 7290
// sEarthquake := true ;
7282: LD_ADDR_EXP 68
7286: PUSH
7287: LD_INT 1
7289: ST_TO_ADDR
// if p3 = 27 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 27
7297: EQUAL
7298: IFFALSE 7308
// sAI := true ;
7300: LD_ADDR_EXP 69
7304: PUSH
7305: LD_INT 1
7307: ST_TO_ADDR
// if p3 = 28 then
7308: LD_VAR 0 3
7312: PUSH
7313: LD_INT 28
7315: EQUAL
7316: IFFALSE 7326
// sCargo := true ;
7318: LD_ADDR_EXP 72
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// if p3 = 29 then
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 29
7333: EQUAL
7334: IFFALSE 7344
// sDLaser := true ;
7336: LD_ADDR_EXP 73
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// if p3 = 30 then
7344: LD_VAR 0 3
7348: PUSH
7349: LD_INT 30
7351: EQUAL
7352: IFFALSE 7362
// sExchange := true ;
7354: LD_ADDR_EXP 74
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// if p3 = 31 then
7362: LD_VAR 0 3
7366: PUSH
7367: LD_INT 31
7369: EQUAL
7370: IFFALSE 7380
// sFac := true ;
7372: LD_ADDR_EXP 75
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// if p3 = 32 then
7380: LD_VAR 0 3
7384: PUSH
7385: LD_INT 32
7387: EQUAL
7388: IFFALSE 7398
// sPower := true ;
7390: LD_ADDR_EXP 76
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// if p3 = 33 then
7398: LD_VAR 0 3
7402: PUSH
7403: LD_INT 33
7405: EQUAL
7406: IFFALSE 7416
// sRandom := true ;
7408: LD_ADDR_EXP 77
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if p3 = 34 then
7416: LD_VAR 0 3
7420: PUSH
7421: LD_INT 34
7423: EQUAL
7424: IFFALSE 7434
// sShield := true ;
7426: LD_ADDR_EXP 78
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// if p3 = 35 then
7434: LD_VAR 0 3
7438: PUSH
7439: LD_INT 35
7441: EQUAL
7442: IFFALSE 7452
// sTime := true ;
7444: LD_ADDR_EXP 79
7448: PUSH
7449: LD_INT 1
7451: ST_TO_ADDR
// if p3 = 36 then
7452: LD_VAR 0 3
7456: PUSH
7457: LD_INT 36
7459: EQUAL
7460: IFFALSE 7470
// sTools := true ;
7462: LD_ADDR_EXP 80
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// if p3 = 101 then
7470: LD_VAR 0 3
7474: PUSH
7475: LD_INT 101
7477: EQUAL
7478: IFFALSE 7488
// sSold := true ;
7480: LD_ADDR_EXP 45
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// if p3 = 102 then
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 102
7495: EQUAL
7496: IFFALSE 7506
// sDiff := true ;
7498: LD_ADDR_EXP 46
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if p3 = 103 then
7506: LD_VAR 0 3
7510: PUSH
7511: LD_INT 103
7513: EQUAL
7514: IFFALSE 7524
// sFog := true ;
7516: LD_ADDR_EXP 49
7520: PUSH
7521: LD_INT 1
7523: ST_TO_ADDR
// if p3 = 104 then
7524: LD_VAR 0 3
7528: PUSH
7529: LD_INT 104
7531: EQUAL
7532: IFFALSE 7542
// sReset := true ;
7534: LD_ADDR_EXP 50
7538: PUSH
7539: LD_INT 1
7541: ST_TO_ADDR
// if p3 = 105 then
7542: LD_VAR 0 3
7546: PUSH
7547: LD_INT 105
7549: EQUAL
7550: IFFALSE 7560
// sSun := true ;
7552: LD_ADDR_EXP 51
7556: PUSH
7557: LD_INT 1
7559: ST_TO_ADDR
// if p3 = 106 then
7560: LD_VAR 0 3
7564: PUSH
7565: LD_INT 106
7567: EQUAL
7568: IFFALSE 7578
// sTiger := true ;
7570: LD_ADDR_EXP 47
7574: PUSH
7575: LD_INT 1
7577: ST_TO_ADDR
// if p3 = 107 then
7578: LD_VAR 0 3
7582: PUSH
7583: LD_INT 107
7585: EQUAL
7586: IFFALSE 7596
// sBomb := true ;
7588: LD_ADDR_EXP 48
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// if p3 = 108 then
7596: LD_VAR 0 3
7600: PUSH
7601: LD_INT 108
7603: EQUAL
7604: IFFALSE 7614
// sWound := true ;
7606: LD_ADDR_EXP 56
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// if p3 = 109 then
7614: LD_VAR 0 3
7618: PUSH
7619: LD_INT 109
7621: EQUAL
7622: IFFALSE 7632
// sBetray := true ;
7624: LD_ADDR_EXP 60
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// if p3 = 110 then
7632: LD_VAR 0 3
7636: PUSH
7637: LD_INT 110
7639: EQUAL
7640: IFFALSE 7650
// sContamin := true ;
7642: LD_ADDR_EXP 61
7646: PUSH
7647: LD_INT 1
7649: ST_TO_ADDR
// if p3 = 111 then
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 111
7657: EQUAL
7658: IFFALSE 7668
// sOil := true ;
7660: LD_ADDR_EXP 63
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// if p3 = 112 then
7668: LD_VAR 0 3
7672: PUSH
7673: LD_INT 112
7675: EQUAL
7676: IFFALSE 7686
// sStu := true ;
7678: LD_ADDR_EXP 67
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if p3 = 113 then
7686: LD_VAR 0 3
7690: PUSH
7691: LD_INT 113
7693: EQUAL
7694: IFFALSE 7704
// sBazooka := true ;
7696: LD_ADDR_EXP 70
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// if p3 = 114 then
7704: LD_VAR 0 3
7708: PUSH
7709: LD_INT 114
7711: EQUAL
7712: IFFALSE 7722
// sMortar := true ;
7714: LD_ADDR_EXP 71
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// if p3 = 115 then
7722: LD_VAR 0 3
7726: PUSH
7727: LD_INT 115
7729: EQUAL
7730: IFFALSE 7740
// sRanger := true ;
7732: LD_ADDR_EXP 81
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
// if p3 = 116 then
7740: LD_VAR 0 3
7744: PUSH
7745: LD_INT 116
7747: EQUAL
7748: IFFALSE 7758
// sComputer := true ;
7750: LD_ADDR_EXP 82
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// if p3 = 117 then
7758: LD_VAR 0 3
7762: PUSH
7763: LD_INT 117
7765: EQUAL
7766: IFFALSE 7776
// s30 := true ;
7768: LD_ADDR_EXP 83
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// if p3 = 118 then
7776: LD_VAR 0 3
7780: PUSH
7781: LD_INT 118
7783: EQUAL
7784: IFFALSE 7794
// s60 := true ;
7786: LD_ADDR_EXP 84
7790: PUSH
7791: LD_INT 1
7793: ST_TO_ADDR
// end ; if p2 = stream_mode then
7794: LD_VAR 0 2
7798: PUSH
7799: LD_INT 101
7801: EQUAL
7802: IFFALSE 7930
// begin case p3 of 1 :
7804: LD_VAR 0 3
7808: PUSH
7809: LD_INT 1
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7817
7815: GO 7824
7817: POP
// hHackUnlimitedResources ; 2 :
7818: CALL 20028 0 0
7822: GO 7930
7824: LD_INT 2
7826: DOUBLE
7827: EQUAL
7828: IFTRUE 7832
7830: GO 7839
7832: POP
// hHackSetLevel10 ; 3 :
7833: CALL 20161 0 0
7837: GO 7930
7839: LD_INT 3
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7854
7847: POP
// hHackSetLevel10YourUnits ; 4 :
7848: CALL 20246 0 0
7852: GO 7930
7854: LD_INT 4
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7869
7862: POP
// hHackInvincible ; 5 :
7863: CALL 20694 0 0
7867: GO 7930
7869: LD_INT 5
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7877
7875: GO 7884
7877: POP
// hHackInvisible ; 6 :
7878: CALL 20805 0 0
7882: GO 7930
7884: LD_INT 6
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7899
7892: POP
// hHackChangeYourSide ; 7 :
7893: CALL 20862 0 0
7897: GO 7930
7899: LD_INT 7
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 7914
7907: POP
// hHackChangeUnitSide ; 8 :
7908: CALL 20904 0 0
7912: GO 7930
7914: LD_INT 8
7916: DOUBLE
7917: EQUAL
7918: IFTRUE 7922
7920: GO 7929
7922: POP
// hHackFog ; end ;
7923: CALL 21005 0 0
7927: GO 7930
7929: POP
// end ; end ;
7930: LD_VAR 0 7
7934: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7935: GO 7937
7937: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7938: LD_STRING initStreamRollete();
7940: PPUSH
7941: CALL_OW 559
// InitStreamMode ;
7945: CALL 7957 0 0
// DefineStreamItems ( false ) ;
7949: LD_INT 0
7951: PPUSH
7952: CALL 8421 0 1
// end ;
7956: END
// function InitStreamMode ; begin
7957: LD_INT 0
7959: PPUSH
// streamModeActive := false ;
7960: LD_ADDR_EXP 28
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// normalCounter := 36 ;
7968: LD_ADDR_EXP 29
7972: PUSH
7973: LD_INT 36
7975: ST_TO_ADDR
// hardcoreCounter := 18 ;
7976: LD_ADDR_EXP 30
7980: PUSH
7981: LD_INT 18
7983: ST_TO_ADDR
// sRocket := false ;
7984: LD_ADDR_EXP 33
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sSpeed := false ;
7992: LD_ADDR_EXP 32
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sEngine := false ;
8000: LD_ADDR_EXP 34
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sSpec := false ;
8008: LD_ADDR_EXP 31
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sLevel := false ;
8016: LD_ADDR_EXP 35
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sArmoury := false ;
8024: LD_ADDR_EXP 36
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sRadar := false ;
8032: LD_ADDR_EXP 37
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sBunker := false ;
8040: LD_ADDR_EXP 38
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sHack := false ;
8048: LD_ADDR_EXP 39
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sFire := false ;
8056: LD_ADDR_EXP 40
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sRefresh := false ;
8064: LD_ADDR_EXP 41
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sExp := false ;
8072: LD_ADDR_EXP 42
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sDepot := false ;
8080: LD_ADDR_EXP 43
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sFlag := false ;
8088: LD_ADDR_EXP 44
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// sKamikadze := false ;
8096: LD_ADDR_EXP 52
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// sTroll := false ;
8104: LD_ADDR_EXP 53
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// sSlow := false ;
8112: LD_ADDR_EXP 54
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// sLack := false ;
8120: LD_ADDR_EXP 55
8124: PUSH
8125: LD_INT 0
8127: ST_TO_ADDR
// sTank := false ;
8128: LD_ADDR_EXP 57
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// sRemote := false ;
8136: LD_ADDR_EXP 58
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// sPowell := false ;
8144: LD_ADDR_EXP 59
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// sTeleport := false ;
8152: LD_ADDR_EXP 62
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// sOilTower := false ;
8160: LD_ADDR_EXP 64
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// sShovel := false ;
8168: LD_ADDR_EXP 65
8172: PUSH
8173: LD_INT 0
8175: ST_TO_ADDR
// sSheik := false ;
8176: LD_ADDR_EXP 66
8180: PUSH
8181: LD_INT 0
8183: ST_TO_ADDR
// sEarthquake := false ;
8184: LD_ADDR_EXP 68
8188: PUSH
8189: LD_INT 0
8191: ST_TO_ADDR
// sAI := false ;
8192: LD_ADDR_EXP 69
8196: PUSH
8197: LD_INT 0
8199: ST_TO_ADDR
// sCargo := false ;
8200: LD_ADDR_EXP 72
8204: PUSH
8205: LD_INT 0
8207: ST_TO_ADDR
// sDLaser := false ;
8208: LD_ADDR_EXP 73
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// sExchange := false ;
8216: LD_ADDR_EXP 74
8220: PUSH
8221: LD_INT 0
8223: ST_TO_ADDR
// sFac := false ;
8224: LD_ADDR_EXP 75
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// sPower := false ;
8232: LD_ADDR_EXP 76
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// sRandom := false ;
8240: LD_ADDR_EXP 77
8244: PUSH
8245: LD_INT 0
8247: ST_TO_ADDR
// sShield := false ;
8248: LD_ADDR_EXP 78
8252: PUSH
8253: LD_INT 0
8255: ST_TO_ADDR
// sTime := false ;
8256: LD_ADDR_EXP 79
8260: PUSH
8261: LD_INT 0
8263: ST_TO_ADDR
// sTools := false ;
8264: LD_ADDR_EXP 80
8268: PUSH
8269: LD_INT 0
8271: ST_TO_ADDR
// sSold := false ;
8272: LD_ADDR_EXP 45
8276: PUSH
8277: LD_INT 0
8279: ST_TO_ADDR
// sDiff := false ;
8280: LD_ADDR_EXP 46
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// sFog := false ;
8288: LD_ADDR_EXP 49
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// sReset := false ;
8296: LD_ADDR_EXP 50
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// sSun := false ;
8304: LD_ADDR_EXP 51
8308: PUSH
8309: LD_INT 0
8311: ST_TO_ADDR
// sTiger := false ;
8312: LD_ADDR_EXP 47
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// sBomb := false ;
8320: LD_ADDR_EXP 48
8324: PUSH
8325: LD_INT 0
8327: ST_TO_ADDR
// sWound := false ;
8328: LD_ADDR_EXP 56
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// sBetray := false ;
8336: LD_ADDR_EXP 60
8340: PUSH
8341: LD_INT 0
8343: ST_TO_ADDR
// sContamin := false ;
8344: LD_ADDR_EXP 61
8348: PUSH
8349: LD_INT 0
8351: ST_TO_ADDR
// sOil := false ;
8352: LD_ADDR_EXP 63
8356: PUSH
8357: LD_INT 0
8359: ST_TO_ADDR
// sStu := false ;
8360: LD_ADDR_EXP 67
8364: PUSH
8365: LD_INT 0
8367: ST_TO_ADDR
// sBazooka := false ;
8368: LD_ADDR_EXP 70
8372: PUSH
8373: LD_INT 0
8375: ST_TO_ADDR
// sMortar := false ;
8376: LD_ADDR_EXP 71
8380: PUSH
8381: LD_INT 0
8383: ST_TO_ADDR
// sRanger := false ;
8384: LD_ADDR_EXP 81
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// sComputer := false ;
8392: LD_ADDR_EXP 82
8396: PUSH
8397: LD_INT 0
8399: ST_TO_ADDR
// s30 := false ;
8400: LD_ADDR_EXP 83
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// s60 := false ;
8408: LD_ADDR_EXP 84
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
// end ;
8416: LD_VAR 0 1
8420: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8421: LD_INT 0
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
8427: PPUSH
8428: PPUSH
8429: PPUSH
// result := [ ] ;
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: EMPTY
8436: ST_TO_ADDR
// if campaign_id = 1 then
8437: LD_OWVAR 69
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: IFFALSE 11611
// begin case mission_number of 1 :
8447: LD_OWVAR 70
8451: PUSH
8452: LD_INT 1
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8536
8460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8461: LD_ADDR_VAR 0 2
8465: PUSH
8466: LD_INT 2
8468: PUSH
8469: LD_INT 4
8471: PUSH
8472: LD_INT 11
8474: PUSH
8475: LD_INT 12
8477: PUSH
8478: LD_INT 15
8480: PUSH
8481: LD_INT 16
8483: PUSH
8484: LD_INT 22
8486: PUSH
8487: LD_INT 23
8489: PUSH
8490: LD_INT 26
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 106
8512: PUSH
8513: LD_INT 116
8515: PUSH
8516: LD_INT 117
8518: PUSH
8519: LD_INT 118
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 11609
8536: LD_INT 2
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8628
8544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: LD_INT 4
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 15
8564: PUSH
8565: LD_INT 16
8567: PUSH
8568: LD_INT 22
8570: PUSH
8571: LD_INT 23
8573: PUSH
8574: LD_INT 26
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 101
8590: PUSH
8591: LD_INT 102
8593: PUSH
8594: LD_INT 105
8596: PUSH
8597: LD_INT 106
8599: PUSH
8600: LD_INT 108
8602: PUSH
8603: LD_INT 116
8605: PUSH
8606: LD_INT 117
8608: PUSH
8609: LD_INT 118
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: ST_TO_ADDR
8626: GO 11609
8628: LD_INT 3
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8724
8636: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8637: LD_ADDR_VAR 0 2
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_INT 4
8647: PUSH
8648: LD_INT 5
8650: PUSH
8651: LD_INT 11
8653: PUSH
8654: LD_INT 12
8656: PUSH
8657: LD_INT 15
8659: PUSH
8660: LD_INT 16
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_INT 26
8668: PUSH
8669: LD_INT 36
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 101
8686: PUSH
8687: LD_INT 102
8689: PUSH
8690: LD_INT 105
8692: PUSH
8693: LD_INT 106
8695: PUSH
8696: LD_INT 108
8698: PUSH
8699: LD_INT 116
8701: PUSH
8702: LD_INT 117
8704: PUSH
8705: LD_INT 118
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: ST_TO_ADDR
8722: GO 11609
8724: LD_INT 4
8726: DOUBLE
8727: EQUAL
8728: IFTRUE 8732
8730: GO 8828
8732: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8733: LD_ADDR_VAR 0 2
8737: PUSH
8738: LD_INT 2
8740: PUSH
8741: LD_INT 4
8743: PUSH
8744: LD_INT 5
8746: PUSH
8747: LD_INT 8
8749: PUSH
8750: LD_INT 11
8752: PUSH
8753: LD_INT 12
8755: PUSH
8756: LD_INT 15
8758: PUSH
8759: LD_INT 16
8761: PUSH
8762: LD_INT 22
8764: PUSH
8765: LD_INT 23
8767: PUSH
8768: LD_INT 26
8770: PUSH
8771: LD_INT 36
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 101
8790: PUSH
8791: LD_INT 102
8793: PUSH
8794: LD_INT 105
8796: PUSH
8797: LD_INT 106
8799: PUSH
8800: LD_INT 108
8802: PUSH
8803: LD_INT 116
8805: PUSH
8806: LD_INT 117
8808: PUSH
8809: LD_INT 118
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: ST_TO_ADDR
8826: GO 11609
8828: LD_INT 5
8830: DOUBLE
8831: EQUAL
8832: IFTRUE 8836
8834: GO 8948
8836: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8837: LD_ADDR_VAR 0 2
8841: PUSH
8842: LD_INT 2
8844: PUSH
8845: LD_INT 4
8847: PUSH
8848: LD_INT 5
8850: PUSH
8851: LD_INT 6
8853: PUSH
8854: LD_INT 8
8856: PUSH
8857: LD_INT 11
8859: PUSH
8860: LD_INT 12
8862: PUSH
8863: LD_INT 15
8865: PUSH
8866: LD_INT 16
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 25
8877: PUSH
8878: LD_INT 26
8880: PUSH
8881: LD_INT 36
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 101
8902: PUSH
8903: LD_INT 102
8905: PUSH
8906: LD_INT 105
8908: PUSH
8909: LD_INT 106
8911: PUSH
8912: LD_INT 108
8914: PUSH
8915: LD_INT 109
8917: PUSH
8918: LD_INT 112
8920: PUSH
8921: LD_INT 116
8923: PUSH
8924: LD_INT 117
8926: PUSH
8927: LD_INT 118
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: ST_TO_ADDR
8946: GO 11609
8948: LD_INT 6
8950: DOUBLE
8951: EQUAL
8952: IFTRUE 8956
8954: GO 9088
8956: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8957: LD_ADDR_VAR 0 2
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 4
8967: PUSH
8968: LD_INT 5
8970: PUSH
8971: LD_INT 6
8973: PUSH
8974: LD_INT 8
8976: PUSH
8977: LD_INT 11
8979: PUSH
8980: LD_INT 12
8982: PUSH
8983: LD_INT 15
8985: PUSH
8986: LD_INT 16
8988: PUSH
8989: LD_INT 20
8991: PUSH
8992: LD_INT 21
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_INT 23
9000: PUSH
9001: LD_INT 25
9003: PUSH
9004: LD_INT 26
9006: PUSH
9007: LD_INT 30
9009: PUSH
9010: LD_INT 31
9012: PUSH
9013: LD_INT 32
9015: PUSH
9016: LD_INT 36
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 101
9042: PUSH
9043: LD_INT 102
9045: PUSH
9046: LD_INT 105
9048: PUSH
9049: LD_INT 106
9051: PUSH
9052: LD_INT 108
9054: PUSH
9055: LD_INT 109
9057: PUSH
9058: LD_INT 112
9060: PUSH
9061: LD_INT 116
9063: PUSH
9064: LD_INT 117
9066: PUSH
9067: LD_INT 118
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: ST_TO_ADDR
9086: GO 11609
9088: LD_INT 7
9090: DOUBLE
9091: EQUAL
9092: IFTRUE 9096
9094: GO 9208
9096: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9097: LD_ADDR_VAR 0 2
9101: PUSH
9102: LD_INT 2
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 5
9110: PUSH
9111: LD_INT 7
9113: PUSH
9114: LD_INT 11
9116: PUSH
9117: LD_INT 12
9119: PUSH
9120: LD_INT 15
9122: PUSH
9123: LD_INT 16
9125: PUSH
9126: LD_INT 20
9128: PUSH
9129: LD_INT 21
9131: PUSH
9132: LD_INT 22
9134: PUSH
9135: LD_INT 23
9137: PUSH
9138: LD_INT 25
9140: PUSH
9141: LD_INT 26
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 101
9162: PUSH
9163: LD_INT 102
9165: PUSH
9166: LD_INT 103
9168: PUSH
9169: LD_INT 105
9171: PUSH
9172: LD_INT 106
9174: PUSH
9175: LD_INT 108
9177: PUSH
9178: LD_INT 112
9180: PUSH
9181: LD_INT 116
9183: PUSH
9184: LD_INT 117
9186: PUSH
9187: LD_INT 118
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: ST_TO_ADDR
9206: GO 11609
9208: LD_INT 8
9210: DOUBLE
9211: EQUAL
9212: IFTRUE 9216
9214: GO 9356
9216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 4
9227: PUSH
9228: LD_INT 5
9230: PUSH
9231: LD_INT 6
9233: PUSH
9234: LD_INT 7
9236: PUSH
9237: LD_INT 8
9239: PUSH
9240: LD_INT 11
9242: PUSH
9243: LD_INT 12
9245: PUSH
9246: LD_INT 15
9248: PUSH
9249: LD_INT 16
9251: PUSH
9252: LD_INT 20
9254: PUSH
9255: LD_INT 21
9257: PUSH
9258: LD_INT 22
9260: PUSH
9261: LD_INT 23
9263: PUSH
9264: LD_INT 25
9266: PUSH
9267: LD_INT 26
9269: PUSH
9270: LD_INT 30
9272: PUSH
9273: LD_INT 31
9275: PUSH
9276: LD_INT 32
9278: PUSH
9279: LD_INT 36
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 101
9306: PUSH
9307: LD_INT 102
9309: PUSH
9310: LD_INT 103
9312: PUSH
9313: LD_INT 105
9315: PUSH
9316: LD_INT 106
9318: PUSH
9319: LD_INT 108
9321: PUSH
9322: LD_INT 109
9324: PUSH
9325: LD_INT 112
9327: PUSH
9328: LD_INT 116
9330: PUSH
9331: LD_INT 117
9333: PUSH
9334: LD_INT 118
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
9354: GO 11609
9356: LD_INT 9
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9512
9364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 2
9372: PUSH
9373: LD_INT 4
9375: PUSH
9376: LD_INT 5
9378: PUSH
9379: LD_INT 6
9381: PUSH
9382: LD_INT 7
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: LD_INT 11
9390: PUSH
9391: LD_INT 12
9393: PUSH
9394: LD_INT 15
9396: PUSH
9397: LD_INT 16
9399: PUSH
9400: LD_INT 20
9402: PUSH
9403: LD_INT 21
9405: PUSH
9406: LD_INT 22
9408: PUSH
9409: LD_INT 23
9411: PUSH
9412: LD_INT 25
9414: PUSH
9415: LD_INT 26
9417: PUSH
9418: LD_INT 28
9420: PUSH
9421: LD_INT 30
9423: PUSH
9424: LD_INT 31
9426: PUSH
9427: LD_INT 32
9429: PUSH
9430: LD_INT 36
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 101
9458: PUSH
9459: LD_INT 102
9461: PUSH
9462: LD_INT 103
9464: PUSH
9465: LD_INT 105
9467: PUSH
9468: LD_INT 106
9470: PUSH
9471: LD_INT 108
9473: PUSH
9474: LD_INT 109
9476: PUSH
9477: LD_INT 112
9479: PUSH
9480: LD_INT 114
9482: PUSH
9483: LD_INT 116
9485: PUSH
9486: LD_INT 117
9488: PUSH
9489: LD_INT 118
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: ST_TO_ADDR
9510: GO 11609
9512: LD_INT 10
9514: DOUBLE
9515: EQUAL
9516: IFTRUE 9520
9518: GO 9716
9520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9521: LD_ADDR_VAR 0 2
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: LD_INT 4
9531: PUSH
9532: LD_INT 5
9534: PUSH
9535: LD_INT 6
9537: PUSH
9538: LD_INT 7
9540: PUSH
9541: LD_INT 8
9543: PUSH
9544: LD_INT 9
9546: PUSH
9547: LD_INT 10
9549: PUSH
9550: LD_INT 11
9552: PUSH
9553: LD_INT 12
9555: PUSH
9556: LD_INT 13
9558: PUSH
9559: LD_INT 14
9561: PUSH
9562: LD_INT 15
9564: PUSH
9565: LD_INT 16
9567: PUSH
9568: LD_INT 17
9570: PUSH
9571: LD_INT 18
9573: PUSH
9574: LD_INT 19
9576: PUSH
9577: LD_INT 20
9579: PUSH
9580: LD_INT 21
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 23
9588: PUSH
9589: LD_INT 24
9591: PUSH
9592: LD_INT 25
9594: PUSH
9595: LD_INT 26
9597: PUSH
9598: LD_INT 28
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 31
9606: PUSH
9607: LD_INT 32
9609: PUSH
9610: LD_INT 36
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 101
9646: PUSH
9647: LD_INT 102
9649: PUSH
9650: LD_INT 103
9652: PUSH
9653: LD_INT 104
9655: PUSH
9656: LD_INT 105
9658: PUSH
9659: LD_INT 106
9661: PUSH
9662: LD_INT 107
9664: PUSH
9665: LD_INT 108
9667: PUSH
9668: LD_INT 109
9670: PUSH
9671: LD_INT 110
9673: PUSH
9674: LD_INT 111
9676: PUSH
9677: LD_INT 112
9679: PUSH
9680: LD_INT 114
9682: PUSH
9683: LD_INT 116
9685: PUSH
9686: LD_INT 117
9688: PUSH
9689: LD_INT 118
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: ST_TO_ADDR
9714: GO 11609
9716: LD_INT 11
9718: DOUBLE
9719: EQUAL
9720: IFTRUE 9724
9722: GO 9928
9724: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9725: LD_ADDR_VAR 0 2
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 4
9738: PUSH
9739: LD_INT 5
9741: PUSH
9742: LD_INT 6
9744: PUSH
9745: LD_INT 7
9747: PUSH
9748: LD_INT 8
9750: PUSH
9751: LD_INT 9
9753: PUSH
9754: LD_INT 10
9756: PUSH
9757: LD_INT 11
9759: PUSH
9760: LD_INT 12
9762: PUSH
9763: LD_INT 13
9765: PUSH
9766: LD_INT 14
9768: PUSH
9769: LD_INT 15
9771: PUSH
9772: LD_INT 16
9774: PUSH
9775: LD_INT 17
9777: PUSH
9778: LD_INT 18
9780: PUSH
9781: LD_INT 19
9783: PUSH
9784: LD_INT 20
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 22
9792: PUSH
9793: LD_INT 23
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 26
9804: PUSH
9805: LD_INT 28
9807: PUSH
9808: LD_INT 30
9810: PUSH
9811: LD_INT 31
9813: PUSH
9814: LD_INT 32
9816: PUSH
9817: LD_INT 34
9819: PUSH
9820: LD_INT 36
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 101
9858: PUSH
9859: LD_INT 102
9861: PUSH
9862: LD_INT 103
9864: PUSH
9865: LD_INT 104
9867: PUSH
9868: LD_INT 105
9870: PUSH
9871: LD_INT 106
9873: PUSH
9874: LD_INT 107
9876: PUSH
9877: LD_INT 108
9879: PUSH
9880: LD_INT 109
9882: PUSH
9883: LD_INT 110
9885: PUSH
9886: LD_INT 111
9888: PUSH
9889: LD_INT 112
9891: PUSH
9892: LD_INT 114
9894: PUSH
9895: LD_INT 116
9897: PUSH
9898: LD_INT 117
9900: PUSH
9901: LD_INT 118
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: ST_TO_ADDR
9926: GO 11609
9928: LD_INT 12
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 10156
9936: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9937: LD_ADDR_VAR 0 2
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 3
9950: PUSH
9951: LD_INT 4
9953: PUSH
9954: LD_INT 5
9956: PUSH
9957: LD_INT 6
9959: PUSH
9960: LD_INT 7
9962: PUSH
9963: LD_INT 8
9965: PUSH
9966: LD_INT 9
9968: PUSH
9969: LD_INT 10
9971: PUSH
9972: LD_INT 11
9974: PUSH
9975: LD_INT 12
9977: PUSH
9978: LD_INT 13
9980: PUSH
9981: LD_INT 14
9983: PUSH
9984: LD_INT 15
9986: PUSH
9987: LD_INT 16
9989: PUSH
9990: LD_INT 17
9992: PUSH
9993: LD_INT 18
9995: PUSH
9996: LD_INT 19
9998: PUSH
9999: LD_INT 20
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_INT 23
10010: PUSH
10011: LD_INT 24
10013: PUSH
10014: LD_INT 25
10016: PUSH
10017: LD_INT 26
10019: PUSH
10020: LD_INT 27
10022: PUSH
10023: LD_INT 28
10025: PUSH
10026: LD_INT 30
10028: PUSH
10029: LD_INT 31
10031: PUSH
10032: LD_INT 32
10034: PUSH
10035: LD_INT 33
10037: PUSH
10038: LD_INT 34
10040: PUSH
10041: LD_INT 36
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 101
10082: PUSH
10083: LD_INT 102
10085: PUSH
10086: LD_INT 103
10088: PUSH
10089: LD_INT 104
10091: PUSH
10092: LD_INT 105
10094: PUSH
10095: LD_INT 106
10097: PUSH
10098: LD_INT 107
10100: PUSH
10101: LD_INT 108
10103: PUSH
10104: LD_INT 109
10106: PUSH
10107: LD_INT 110
10109: PUSH
10110: LD_INT 111
10112: PUSH
10113: LD_INT 112
10115: PUSH
10116: LD_INT 113
10118: PUSH
10119: LD_INT 114
10121: PUSH
10122: LD_INT 116
10124: PUSH
10125: LD_INT 117
10127: PUSH
10128: LD_INT 118
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: ST_TO_ADDR
10154: GO 11609
10156: LD_INT 13
10158: DOUBLE
10159: EQUAL
10160: IFTRUE 10164
10162: GO 10372
10164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: LD_INT 3
10178: PUSH
10179: LD_INT 4
10181: PUSH
10182: LD_INT 5
10184: PUSH
10185: LD_INT 8
10187: PUSH
10188: LD_INT 9
10190: PUSH
10191: LD_INT 10
10193: PUSH
10194: LD_INT 11
10196: PUSH
10197: LD_INT 12
10199: PUSH
10200: LD_INT 14
10202: PUSH
10203: LD_INT 15
10205: PUSH
10206: LD_INT 16
10208: PUSH
10209: LD_INT 17
10211: PUSH
10212: LD_INT 18
10214: PUSH
10215: LD_INT 19
10217: PUSH
10218: LD_INT 20
10220: PUSH
10221: LD_INT 21
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 23
10229: PUSH
10230: LD_INT 24
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 26
10238: PUSH
10239: LD_INT 27
10241: PUSH
10242: LD_INT 28
10244: PUSH
10245: LD_INT 30
10247: PUSH
10248: LD_INT 31
10250: PUSH
10251: LD_INT 32
10253: PUSH
10254: LD_INT 33
10256: PUSH
10257: LD_INT 34
10259: PUSH
10260: LD_INT 36
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 101
10298: PUSH
10299: LD_INT 102
10301: PUSH
10302: LD_INT 103
10304: PUSH
10305: LD_INT 104
10307: PUSH
10308: LD_INT 105
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 107
10316: PUSH
10317: LD_INT 108
10319: PUSH
10320: LD_INT 109
10322: PUSH
10323: LD_INT 110
10325: PUSH
10326: LD_INT 111
10328: PUSH
10329: LD_INT 112
10331: PUSH
10332: LD_INT 113
10334: PUSH
10335: LD_INT 114
10337: PUSH
10338: LD_INT 116
10340: PUSH
10341: LD_INT 117
10343: PUSH
10344: LD_INT 118
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: ST_TO_ADDR
10370: GO 11609
10372: LD_INT 14
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10604
10380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 4
10397: PUSH
10398: LD_INT 5
10400: PUSH
10401: LD_INT 6
10403: PUSH
10404: LD_INT 7
10406: PUSH
10407: LD_INT 8
10409: PUSH
10410: LD_INT 9
10412: PUSH
10413: LD_INT 10
10415: PUSH
10416: LD_INT 11
10418: PUSH
10419: LD_INT 12
10421: PUSH
10422: LD_INT 13
10424: PUSH
10425: LD_INT 14
10427: PUSH
10428: LD_INT 15
10430: PUSH
10431: LD_INT 16
10433: PUSH
10434: LD_INT 17
10436: PUSH
10437: LD_INT 18
10439: PUSH
10440: LD_INT 19
10442: PUSH
10443: LD_INT 20
10445: PUSH
10446: LD_INT 21
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_INT 23
10454: PUSH
10455: LD_INT 24
10457: PUSH
10458: LD_INT 25
10460: PUSH
10461: LD_INT 26
10463: PUSH
10464: LD_INT 27
10466: PUSH
10467: LD_INT 28
10469: PUSH
10470: LD_INT 29
10472: PUSH
10473: LD_INT 30
10475: PUSH
10476: LD_INT 31
10478: PUSH
10479: LD_INT 32
10481: PUSH
10482: LD_INT 33
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 36
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 101
10530: PUSH
10531: LD_INT 102
10533: PUSH
10534: LD_INT 103
10536: PUSH
10537: LD_INT 104
10539: PUSH
10540: LD_INT 105
10542: PUSH
10543: LD_INT 106
10545: PUSH
10546: LD_INT 107
10548: PUSH
10549: LD_INT 108
10551: PUSH
10552: LD_INT 109
10554: PUSH
10555: LD_INT 110
10557: PUSH
10558: LD_INT 111
10560: PUSH
10561: LD_INT 112
10563: PUSH
10564: LD_INT 113
10566: PUSH
10567: LD_INT 114
10569: PUSH
10570: LD_INT 116
10572: PUSH
10573: LD_INT 117
10575: PUSH
10576: LD_INT 118
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: ST_TO_ADDR
10602: GO 11609
10604: LD_INT 15
10606: DOUBLE
10607: EQUAL
10608: IFTRUE 10612
10610: GO 10836
10612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: LD_INT 3
10626: PUSH
10627: LD_INT 4
10629: PUSH
10630: LD_INT 5
10632: PUSH
10633: LD_INT 6
10635: PUSH
10636: LD_INT 7
10638: PUSH
10639: LD_INT 8
10641: PUSH
10642: LD_INT 9
10644: PUSH
10645: LD_INT 10
10647: PUSH
10648: LD_INT 11
10650: PUSH
10651: LD_INT 12
10653: PUSH
10654: LD_INT 13
10656: PUSH
10657: LD_INT 14
10659: PUSH
10660: LD_INT 15
10662: PUSH
10663: LD_INT 16
10665: PUSH
10666: LD_INT 17
10668: PUSH
10669: LD_INT 18
10671: PUSH
10672: LD_INT 19
10674: PUSH
10675: LD_INT 20
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_INT 23
10686: PUSH
10687: LD_INT 24
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 27
10698: PUSH
10699: LD_INT 28
10701: PUSH
10702: LD_INT 29
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: LD_INT 31
10710: PUSH
10711: LD_INT 32
10713: PUSH
10714: LD_INT 33
10716: PUSH
10717: LD_INT 34
10719: PUSH
10720: LD_INT 36
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 101
10762: PUSH
10763: LD_INT 102
10765: PUSH
10766: LD_INT 103
10768: PUSH
10769: LD_INT 104
10771: PUSH
10772: LD_INT 105
10774: PUSH
10775: LD_INT 106
10777: PUSH
10778: LD_INT 107
10780: PUSH
10781: LD_INT 108
10783: PUSH
10784: LD_INT 109
10786: PUSH
10787: LD_INT 110
10789: PUSH
10790: LD_INT 111
10792: PUSH
10793: LD_INT 112
10795: PUSH
10796: LD_INT 113
10798: PUSH
10799: LD_INT 114
10801: PUSH
10802: LD_INT 116
10804: PUSH
10805: LD_INT 117
10807: PUSH
10808: LD_INT 118
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: ST_TO_ADDR
10834: GO 11609
10836: LD_INT 16
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 10980
10844: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 4
10855: PUSH
10856: LD_INT 5
10858: PUSH
10859: LD_INT 7
10861: PUSH
10862: LD_INT 11
10864: PUSH
10865: LD_INT 12
10867: PUSH
10868: LD_INT 15
10870: PUSH
10871: LD_INT 16
10873: PUSH
10874: LD_INT 20
10876: PUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 23
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 26
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 31
10897: PUSH
10898: LD_INT 32
10900: PUSH
10901: LD_INT 33
10903: PUSH
10904: LD_INT 34
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 101
10930: PUSH
10931: LD_INT 102
10933: PUSH
10934: LD_INT 103
10936: PUSH
10937: LD_INT 106
10939: PUSH
10940: LD_INT 108
10942: PUSH
10943: LD_INT 112
10945: PUSH
10946: LD_INT 113
10948: PUSH
10949: LD_INT 114
10951: PUSH
10952: LD_INT 116
10954: PUSH
10955: LD_INT 117
10957: PUSH
10958: LD_INT 118
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: ST_TO_ADDR
10978: GO 11609
10980: LD_INT 17
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 11212
10988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 1
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: LD_INT 3
11002: PUSH
11003: LD_INT 4
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: LD_INT 6
11011: PUSH
11012: LD_INT 7
11014: PUSH
11015: LD_INT 8
11017: PUSH
11018: LD_INT 9
11020: PUSH
11021: LD_INT 10
11023: PUSH
11024: LD_INT 11
11026: PUSH
11027: LD_INT 12
11029: PUSH
11030: LD_INT 13
11032: PUSH
11033: LD_INT 14
11035: PUSH
11036: LD_INT 15
11038: PUSH
11039: LD_INT 16
11041: PUSH
11042: LD_INT 17
11044: PUSH
11045: LD_INT 18
11047: PUSH
11048: LD_INT 19
11050: PUSH
11051: LD_INT 20
11053: PUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_INT 23
11062: PUSH
11063: LD_INT 24
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 26
11071: PUSH
11072: LD_INT 27
11074: PUSH
11075: LD_INT 28
11077: PUSH
11078: LD_INT 29
11080: PUSH
11081: LD_INT 30
11083: PUSH
11084: LD_INT 31
11086: PUSH
11087: LD_INT 32
11089: PUSH
11090: LD_INT 33
11092: PUSH
11093: LD_INT 34
11095: PUSH
11096: LD_INT 36
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 101
11138: PUSH
11139: LD_INT 102
11141: PUSH
11142: LD_INT 103
11144: PUSH
11145: LD_INT 104
11147: PUSH
11148: LD_INT 105
11150: PUSH
11151: LD_INT 106
11153: PUSH
11154: LD_INT 107
11156: PUSH
11157: LD_INT 108
11159: PUSH
11160: LD_INT 109
11162: PUSH
11163: LD_INT 110
11165: PUSH
11166: LD_INT 111
11168: PUSH
11169: LD_INT 112
11171: PUSH
11172: LD_INT 113
11174: PUSH
11175: LD_INT 114
11177: PUSH
11178: LD_INT 116
11180: PUSH
11181: LD_INT 117
11183: PUSH
11184: LD_INT 118
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: ST_TO_ADDR
11210: GO 11609
11212: LD_INT 18
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11368
11220: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11221: LD_ADDR_VAR 0 2
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: LD_INT 5
11234: PUSH
11235: LD_INT 7
11237: PUSH
11238: LD_INT 11
11240: PUSH
11241: LD_INT 12
11243: PUSH
11244: LD_INT 15
11246: PUSH
11247: LD_INT 16
11249: PUSH
11250: LD_INT 20
11252: PUSH
11253: LD_INT 21
11255: PUSH
11256: LD_INT 22
11258: PUSH
11259: LD_INT 23
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 26
11267: PUSH
11268: LD_INT 30
11270: PUSH
11271: LD_INT 31
11273: PUSH
11274: LD_INT 32
11276: PUSH
11277: LD_INT 33
11279: PUSH
11280: LD_INT 34
11282: PUSH
11283: LD_INT 35
11285: PUSH
11286: LD_INT 36
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 101
11314: PUSH
11315: LD_INT 102
11317: PUSH
11318: LD_INT 103
11320: PUSH
11321: LD_INT 106
11323: PUSH
11324: LD_INT 108
11326: PUSH
11327: LD_INT 112
11329: PUSH
11330: LD_INT 113
11332: PUSH
11333: LD_INT 114
11335: PUSH
11336: LD_INT 115
11338: PUSH
11339: LD_INT 116
11341: PUSH
11342: LD_INT 117
11344: PUSH
11345: LD_INT 118
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: ST_TO_ADDR
11366: GO 11609
11368: LD_INT 19
11370: DOUBLE
11371: EQUAL
11372: IFTRUE 11376
11374: GO 11608
11376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: LD_INT 4
11393: PUSH
11394: LD_INT 5
11396: PUSH
11397: LD_INT 6
11399: PUSH
11400: LD_INT 7
11402: PUSH
11403: LD_INT 8
11405: PUSH
11406: LD_INT 9
11408: PUSH
11409: LD_INT 10
11411: PUSH
11412: LD_INT 11
11414: PUSH
11415: LD_INT 12
11417: PUSH
11418: LD_INT 13
11420: PUSH
11421: LD_INT 14
11423: PUSH
11424: LD_INT 15
11426: PUSH
11427: LD_INT 16
11429: PUSH
11430: LD_INT 17
11432: PUSH
11433: LD_INT 18
11435: PUSH
11436: LD_INT 19
11438: PUSH
11439: LD_INT 20
11441: PUSH
11442: LD_INT 21
11444: PUSH
11445: LD_INT 22
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 24
11453: PUSH
11454: LD_INT 25
11456: PUSH
11457: LD_INT 26
11459: PUSH
11460: LD_INT 27
11462: PUSH
11463: LD_INT 28
11465: PUSH
11466: LD_INT 29
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 31
11474: PUSH
11475: LD_INT 32
11477: PUSH
11478: LD_INT 33
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: LD_INT 35
11486: PUSH
11487: LD_INT 36
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 101
11530: PUSH
11531: LD_INT 102
11533: PUSH
11534: LD_INT 103
11536: PUSH
11537: LD_INT 104
11539: PUSH
11540: LD_INT 105
11542: PUSH
11543: LD_INT 106
11545: PUSH
11546: LD_INT 107
11548: PUSH
11549: LD_INT 108
11551: PUSH
11552: LD_INT 109
11554: PUSH
11555: LD_INT 110
11557: PUSH
11558: LD_INT 111
11560: PUSH
11561: LD_INT 112
11563: PUSH
11564: LD_INT 113
11566: PUSH
11567: LD_INT 114
11569: PUSH
11570: LD_INT 115
11572: PUSH
11573: LD_INT 116
11575: PUSH
11576: LD_INT 117
11578: PUSH
11579: LD_INT 118
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: ST_TO_ADDR
11606: GO 11609
11608: POP
// end else
11609: GO 11840
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11611: LD_ADDR_VAR 0 2
11615: PUSH
11616: LD_INT 1
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 4
11627: PUSH
11628: LD_INT 5
11630: PUSH
11631: LD_INT 6
11633: PUSH
11634: LD_INT 7
11636: PUSH
11637: LD_INT 8
11639: PUSH
11640: LD_INT 9
11642: PUSH
11643: LD_INT 10
11645: PUSH
11646: LD_INT 11
11648: PUSH
11649: LD_INT 12
11651: PUSH
11652: LD_INT 13
11654: PUSH
11655: LD_INT 14
11657: PUSH
11658: LD_INT 15
11660: PUSH
11661: LD_INT 16
11663: PUSH
11664: LD_INT 17
11666: PUSH
11667: LD_INT 18
11669: PUSH
11670: LD_INT 19
11672: PUSH
11673: LD_INT 20
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: LD_INT 22
11681: PUSH
11682: LD_INT 23
11684: PUSH
11685: LD_INT 24
11687: PUSH
11688: LD_INT 25
11690: PUSH
11691: LD_INT 26
11693: PUSH
11694: LD_INT 27
11696: PUSH
11697: LD_INT 28
11699: PUSH
11700: LD_INT 29
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 31
11708: PUSH
11709: LD_INT 32
11711: PUSH
11712: LD_INT 33
11714: PUSH
11715: LD_INT 34
11717: PUSH
11718: LD_INT 35
11720: PUSH
11721: LD_INT 36
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 101
11764: PUSH
11765: LD_INT 102
11767: PUSH
11768: LD_INT 103
11770: PUSH
11771: LD_INT 104
11773: PUSH
11774: LD_INT 105
11776: PUSH
11777: LD_INT 106
11779: PUSH
11780: LD_INT 107
11782: PUSH
11783: LD_INT 108
11785: PUSH
11786: LD_INT 109
11788: PUSH
11789: LD_INT 110
11791: PUSH
11792: LD_INT 111
11794: PUSH
11795: LD_INT 112
11797: PUSH
11798: LD_INT 113
11800: PUSH
11801: LD_INT 114
11803: PUSH
11804: LD_INT 115
11806: PUSH
11807: LD_INT 116
11809: PUSH
11810: LD_INT 117
11812: PUSH
11813: LD_INT 118
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: ST_TO_ADDR
// if result then
11840: LD_VAR 0 2
11844: IFFALSE 12630
// begin normal :=  ;
11846: LD_ADDR_VAR 0 5
11850: PUSH
11851: LD_STRING 
11853: ST_TO_ADDR
// hardcore :=  ;
11854: LD_ADDR_VAR 0 6
11858: PUSH
11859: LD_STRING 
11861: ST_TO_ADDR
// active :=  ;
11862: LD_ADDR_VAR 0 7
11866: PUSH
11867: LD_STRING 
11869: ST_TO_ADDR
// for i = 1 to normalCounter do
11870: LD_ADDR_VAR 0 8
11874: PUSH
11875: DOUBLE
11876: LD_INT 1
11878: DEC
11879: ST_TO_ADDR
11880: LD_EXP 29
11884: PUSH
11885: FOR_TO
11886: IFFALSE 11987
// begin tmp := 0 ;
11888: LD_ADDR_VAR 0 3
11892: PUSH
11893: LD_STRING 0
11895: ST_TO_ADDR
// if result [ 1 ] then
11896: LD_VAR 0 2
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: IFFALSE 11969
// if result [ 1 ] [ 1 ] = i then
11906: LD_VAR 0 2
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_INT 1
11917: ARRAY
11918: PUSH
11919: LD_VAR 0 8
11923: EQUAL
11924: IFFALSE 11969
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_VAR 0 2
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: LD_VAR 0 2
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 3
11955: PPUSH
11956: CALL_OW 1
11960: ST_TO_ADDR
// tmp := 1 ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: LD_STRING 1
11968: ST_TO_ADDR
// end ; normal := normal & tmp ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_VAR 0 5
11978: PUSH
11979: LD_VAR 0 3
11983: STR
11984: ST_TO_ADDR
// end ;
11985: GO 11885
11987: POP
11988: POP
// for i = 1 to hardcoreCounter do
11989: LD_ADDR_VAR 0 8
11993: PUSH
11994: DOUBLE
11995: LD_INT 1
11997: DEC
11998: ST_TO_ADDR
11999: LD_EXP 30
12003: PUSH
12004: FOR_TO
12005: IFFALSE 12110
// begin tmp := 0 ;
12007: LD_ADDR_VAR 0 3
12011: PUSH
12012: LD_STRING 0
12014: ST_TO_ADDR
// if result [ 2 ] then
12015: LD_VAR 0 2
12019: PUSH
12020: LD_INT 2
12022: ARRAY
12023: IFFALSE 12092
// if result [ 2 ] [ 1 ] = 100 + i then
12025: LD_VAR 0 2
12029: PUSH
12030: LD_INT 2
12032: ARRAY
12033: PUSH
12034: LD_INT 1
12036: ARRAY
12037: PUSH
12038: LD_INT 100
12040: PUSH
12041: LD_VAR 0 8
12045: PLUS
12046: EQUAL
12047: IFFALSE 12092
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12049: LD_ADDR_VAR 0 2
12053: PUSH
12054: LD_VAR 0 2
12058: PPUSH
12059: LD_INT 2
12061: PPUSH
12062: LD_VAR 0 2
12066: PUSH
12067: LD_INT 2
12069: ARRAY
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 3
12078: PPUSH
12079: CALL_OW 1
12083: ST_TO_ADDR
// tmp := 1 ;
12084: LD_ADDR_VAR 0 3
12088: PUSH
12089: LD_STRING 1
12091: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 6
12101: PUSH
12102: LD_VAR 0 3
12106: STR
12107: ST_TO_ADDR
// end ;
12108: GO 12004
12110: POP
12111: POP
// if isGameLoad then
12112: LD_VAR 0 1
12116: IFFALSE 12591
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12118: LD_ADDR_VAR 0 4
12122: PUSH
12123: LD_EXP 33
12127: PUSH
12128: LD_EXP 32
12132: PUSH
12133: LD_EXP 34
12137: PUSH
12138: LD_EXP 31
12142: PUSH
12143: LD_EXP 35
12147: PUSH
12148: LD_EXP 36
12152: PUSH
12153: LD_EXP 37
12157: PUSH
12158: LD_EXP 38
12162: PUSH
12163: LD_EXP 39
12167: PUSH
12168: LD_EXP 40
12172: PUSH
12173: LD_EXP 41
12177: PUSH
12178: LD_EXP 42
12182: PUSH
12183: LD_EXP 43
12187: PUSH
12188: LD_EXP 44
12192: PUSH
12193: LD_EXP 52
12197: PUSH
12198: LD_EXP 53
12202: PUSH
12203: LD_EXP 54
12207: PUSH
12208: LD_EXP 55
12212: PUSH
12213: LD_EXP 57
12217: PUSH
12218: LD_EXP 58
12222: PUSH
12223: LD_EXP 59
12227: PUSH
12228: LD_EXP 62
12232: PUSH
12233: LD_EXP 64
12237: PUSH
12238: LD_EXP 65
12242: PUSH
12243: LD_EXP 66
12247: PUSH
12248: LD_EXP 68
12252: PUSH
12253: LD_EXP 69
12257: PUSH
12258: LD_EXP 72
12262: PUSH
12263: LD_EXP 73
12267: PUSH
12268: LD_EXP 74
12272: PUSH
12273: LD_EXP 75
12277: PUSH
12278: LD_EXP 76
12282: PUSH
12283: LD_EXP 77
12287: PUSH
12288: LD_EXP 78
12292: PUSH
12293: LD_EXP 79
12297: PUSH
12298: LD_EXP 80
12302: PUSH
12303: LD_EXP 45
12307: PUSH
12308: LD_EXP 46
12312: PUSH
12313: LD_EXP 49
12317: PUSH
12318: LD_EXP 50
12322: PUSH
12323: LD_EXP 51
12327: PUSH
12328: LD_EXP 47
12332: PUSH
12333: LD_EXP 48
12337: PUSH
12338: LD_EXP 56
12342: PUSH
12343: LD_EXP 60
12347: PUSH
12348: LD_EXP 61
12352: PUSH
12353: LD_EXP 63
12357: PUSH
12358: LD_EXP 67
12362: PUSH
12363: LD_EXP 70
12367: PUSH
12368: LD_EXP 71
12372: PUSH
12373: LD_EXP 81
12377: PUSH
12378: LD_EXP 82
12382: PUSH
12383: LD_EXP 83
12387: PUSH
12388: LD_EXP 84
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: ST_TO_ADDR
// tmp :=  ;
12449: LD_ADDR_VAR 0 3
12453: PUSH
12454: LD_STRING 
12456: ST_TO_ADDR
// for i = 1 to normalCounter do
12457: LD_ADDR_VAR 0 8
12461: PUSH
12462: DOUBLE
12463: LD_INT 1
12465: DEC
12466: ST_TO_ADDR
12467: LD_EXP 29
12471: PUSH
12472: FOR_TO
12473: IFFALSE 12509
// begin if flags [ i ] then
12475: LD_VAR 0 4
12479: PUSH
12480: LD_VAR 0 8
12484: ARRAY
12485: IFFALSE 12507
// tmp := tmp & i & ; ;
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: LD_VAR 0 3
12496: PUSH
12497: LD_VAR 0 8
12501: STR
12502: PUSH
12503: LD_STRING ;
12505: STR
12506: ST_TO_ADDR
// end ;
12507: GO 12472
12509: POP
12510: POP
// for i = 1 to hardcoreCounter do
12511: LD_ADDR_VAR 0 8
12515: PUSH
12516: DOUBLE
12517: LD_INT 1
12519: DEC
12520: ST_TO_ADDR
12521: LD_EXP 30
12525: PUSH
12526: FOR_TO
12527: IFFALSE 12573
// begin if flags [ normalCounter + i ] then
12529: LD_VAR 0 4
12533: PUSH
12534: LD_EXP 29
12538: PUSH
12539: LD_VAR 0 8
12543: PLUS
12544: ARRAY
12545: IFFALSE 12571
// tmp := tmp & ( 100 + i ) & ; ;
12547: LD_ADDR_VAR 0 3
12551: PUSH
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 100
12559: PUSH
12560: LD_VAR 0 8
12564: PLUS
12565: STR
12566: PUSH
12567: LD_STRING ;
12569: STR
12570: ST_TO_ADDR
// end ;
12571: GO 12526
12573: POP
12574: POP
// if tmp then
12575: LD_VAR 0 3
12579: IFFALSE 12591
// active := tmp ;
12581: LD_ADDR_VAR 0 7
12585: PUSH
12586: LD_VAR 0 3
12590: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12591: LD_STRING getStreamItemsFromMission("
12593: PUSH
12594: LD_VAR 0 5
12598: STR
12599: PUSH
12600: LD_STRING ","
12602: STR
12603: PUSH
12604: LD_VAR 0 6
12608: STR
12609: PUSH
12610: LD_STRING ","
12612: STR
12613: PUSH
12614: LD_VAR 0 7
12618: STR
12619: PUSH
12620: LD_STRING ")
12622: STR
12623: PPUSH
12624: CALL_OW 559
// end else
12628: GO 12637
// ToLua ( getStreamItemsFromMission("","","") ) ;
12630: LD_STRING getStreamItemsFromMission("","","")
12632: PPUSH
12633: CALL_OW 559
// end ;
12637: LD_VAR 0 2
12641: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12642: LD_EXP 28
12646: PUSH
12647: LD_EXP 33
12651: AND
12652: IFFALSE 12776
12654: GO 12656
12656: DISABLE
12657: LD_INT 0
12659: PPUSH
12660: PPUSH
// begin enable ;
12661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12662: LD_ADDR_VAR 0 2
12666: PUSH
12667: LD_INT 22
12669: PUSH
12670: LD_OWVAR 2
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: LD_INT 34
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 34
12694: PUSH
12695: LD_INT 45
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 28
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 34
12714: PUSH
12715: LD_INT 47
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: ST_TO_ADDR
// if not tmp then
12738: LD_VAR 0 2
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12776
// for i in tmp do
12747: LD_ADDR_VAR 0 1
12751: PUSH
12752: LD_VAR 0 2
12756: PUSH
12757: FOR_IN
12758: IFFALSE 12774
// begin SetLives ( i , 0 ) ;
12760: LD_VAR 0 1
12764: PPUSH
12765: LD_INT 0
12767: PPUSH
12768: CALL_OW 234
// end ;
12772: GO 12757
12774: POP
12775: POP
// end ;
12776: PPOPN 2
12778: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12779: LD_EXP 28
12783: PUSH
12784: LD_EXP 34
12788: AND
12789: IFFALSE 12873
12791: GO 12793
12793: DISABLE
12794: LD_INT 0
12796: PPUSH
12797: PPUSH
// begin enable ;
12798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12799: LD_ADDR_VAR 0 2
12803: PUSH
12804: LD_INT 22
12806: PUSH
12807: LD_OWVAR 2
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 32
12818: PUSH
12819: LD_INT 3
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 69
12834: ST_TO_ADDR
// if not tmp then
12835: LD_VAR 0 2
12839: NOT
12840: IFFALSE 12844
// exit ;
12842: GO 12873
// for i in tmp do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_VAR 0 2
12853: PUSH
12854: FOR_IN
12855: IFFALSE 12871
// begin SetLives ( i , 0 ) ;
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_INT 0
12864: PPUSH
12865: CALL_OW 234
// end ;
12869: GO 12854
12871: POP
12872: POP
// end ;
12873: PPOPN 2
12875: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12876: LD_EXP 28
12880: PUSH
12881: LD_EXP 31
12885: AND
12886: IFFALSE 12979
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
// begin enable ;
12894: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_INT 22
12902: PUSH
12903: LD_OWVAR 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 5
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 25
12927: PUSH
12928: LD_INT 9
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 25
12937: PUSH
12938: LD_INT 8
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PPUSH
12955: CALL_OW 69
12959: PUSH
12960: FOR_IN
12961: IFFALSE 12977
// begin SetClass ( i , 1 ) ;
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: CALL_OW 336
// end ;
12975: GO 12960
12977: POP
12978: POP
// end ;
12979: PPOPN 1
12981: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12982: LD_EXP 28
12986: PUSH
12987: LD_EXP 32
12991: AND
12992: PUSH
12993: LD_OWVAR 65
12997: PUSH
12998: LD_INT 7
13000: LESS
13001: AND
13002: IFFALSE 13016
13004: GO 13006
13006: DISABLE
// begin enable ;
13007: ENABLE
// game_speed := 7 ;
13008: LD_ADDR_OWVAR 65
13012: PUSH
13013: LD_INT 7
13015: ST_TO_ADDR
// end ;
13016: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13017: LD_EXP 28
13021: PUSH
13022: LD_EXP 35
13026: AND
13027: IFFALSE 13229
13029: GO 13031
13031: DISABLE
13032: LD_INT 0
13034: PPUSH
13035: PPUSH
13036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_INT 81
13044: PUSH
13045: LD_OWVAR 2
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: ST_TO_ADDR
// if not tmp then
13073: LD_VAR 0 3
13077: NOT
13078: IFFALSE 13082
// exit ;
13080: GO 13229
// if tmp > 5 then
13082: LD_VAR 0 3
13086: PUSH
13087: LD_INT 5
13089: GREATER
13090: IFFALSE 13102
// k := 5 else
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 5
13099: ST_TO_ADDR
13100: GO 13112
// k := tmp ;
13102: LD_ADDR_VAR 0 2
13106: PUSH
13107: LD_VAR 0 3
13111: ST_TO_ADDR
// for i := 1 to k do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_VAR 0 2
13126: PUSH
13127: FOR_TO
13128: IFFALSE 13227
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13130: LD_VAR 0 3
13134: PUSH
13135: LD_VAR 0 1
13139: ARRAY
13140: PPUSH
13141: LD_VAR 0 1
13145: PUSH
13146: LD_INT 4
13148: MOD
13149: PUSH
13150: LD_INT 1
13152: PLUS
13153: PPUSH
13154: CALL_OW 259
13158: PUSH
13159: LD_INT 10
13161: LESS
13162: IFFALSE 13225
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13164: LD_VAR 0 3
13168: PUSH
13169: LD_VAR 0 1
13173: ARRAY
13174: PPUSH
13175: LD_VAR 0 1
13179: PUSH
13180: LD_INT 4
13182: MOD
13183: PUSH
13184: LD_INT 1
13186: PLUS
13187: PPUSH
13188: LD_VAR 0 3
13192: PUSH
13193: LD_VAR 0 1
13197: ARRAY
13198: PPUSH
13199: LD_VAR 0 1
13203: PUSH
13204: LD_INT 4
13206: MOD
13207: PUSH
13208: LD_INT 1
13210: PLUS
13211: PPUSH
13212: CALL_OW 259
13216: PUSH
13217: LD_INT 1
13219: PLUS
13220: PPUSH
13221: CALL_OW 237
13225: GO 13127
13227: POP
13228: POP
// end ;
13229: PPOPN 3
13231: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13232: LD_EXP 28
13236: PUSH
13237: LD_EXP 36
13241: AND
13242: IFFALSE 13262
13244: GO 13246
13246: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13247: LD_INT 4
13249: PPUSH
13250: LD_OWVAR 2
13254: PPUSH
13255: LD_INT 0
13257: PPUSH
13258: CALL_OW 324
13262: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13263: LD_EXP 28
13267: PUSH
13268: LD_EXP 65
13272: AND
13273: IFFALSE 13293
13275: GO 13277
13277: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13278: LD_INT 19
13280: PPUSH
13281: LD_OWVAR 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL_OW 324
13293: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13294: LD_EXP 28
13298: PUSH
13299: LD_EXP 37
13303: AND
13304: IFFALSE 13406
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
// begin enable ;
13313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_OWVAR 2
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 34
13336: PUSH
13337: LD_INT 11
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 34
13346: PUSH
13347: LD_INT 30
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 69
13367: ST_TO_ADDR
// if not tmp then
13368: LD_VAR 0 2
13372: NOT
13373: IFFALSE 13377
// exit ;
13375: GO 13406
// for i in tmp do
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_VAR 0 2
13386: PUSH
13387: FOR_IN
13388: IFFALSE 13404
// begin SetLives ( i , 0 ) ;
13390: LD_VAR 0 1
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 234
// end ;
13402: GO 13387
13404: POP
13405: POP
// end ;
13406: PPOPN 2
13408: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13409: LD_EXP 28
13413: PUSH
13414: LD_EXP 38
13418: AND
13419: IFFALSE 13439
13421: GO 13423
13423: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13424: LD_INT 32
13426: PPUSH
13427: LD_OWVAR 2
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL_OW 324
13439: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13440: LD_EXP 28
13444: PUSH
13445: LD_EXP 39
13449: AND
13450: IFFALSE 13631
13452: GO 13454
13454: DISABLE
13455: LD_INT 0
13457: PPUSH
13458: PPUSH
13459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13460: LD_ADDR_VAR 0 2
13464: PUSH
13465: LD_INT 22
13467: PUSH
13468: LD_OWVAR 2
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 33
13479: PUSH
13480: LD_INT 3
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: ST_TO_ADDR
// if not tmp then
13496: LD_VAR 0 2
13500: NOT
13501: IFFALSE 13505
// exit ;
13503: GO 13631
// side := 0 ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: LD_INT 0
13512: ST_TO_ADDR
// for i := 1 to 8 do
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: DOUBLE
13519: LD_INT 1
13521: DEC
13522: ST_TO_ADDR
13523: LD_INT 8
13525: PUSH
13526: FOR_TO
13527: IFFALSE 13575
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13529: LD_OWVAR 2
13533: PUSH
13534: LD_VAR 0 1
13538: NONEQUAL
13539: PUSH
13540: LD_OWVAR 2
13544: PPUSH
13545: LD_VAR 0 1
13549: PPUSH
13550: CALL_OW 81
13554: PUSH
13555: LD_INT 2
13557: EQUAL
13558: AND
13559: IFFALSE 13573
// begin side := i ;
13561: LD_ADDR_VAR 0 3
13565: PUSH
13566: LD_VAR 0 1
13570: ST_TO_ADDR
// break ;
13571: GO 13575
// end ;
13573: GO 13526
13575: POP
13576: POP
// if not side then
13577: LD_VAR 0 3
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 13631
// for i := 1 to tmp do
13586: LD_ADDR_VAR 0 1
13590: PUSH
13591: DOUBLE
13592: LD_INT 1
13594: DEC
13595: ST_TO_ADDR
13596: LD_VAR 0 2
13600: PUSH
13601: FOR_TO
13602: IFFALSE 13629
// if Prob ( 60 ) then
13604: LD_INT 60
13606: PPUSH
13607: CALL_OW 13
13611: IFFALSE 13627
// SetSide ( i , side ) ;
13613: LD_VAR 0 1
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: CALL_OW 235
13627: GO 13601
13629: POP
13630: POP
// end ;
13631: PPOPN 3
13633: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13634: LD_EXP 28
13638: PUSH
13639: LD_EXP 41
13643: AND
13644: IFFALSE 13763
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13652: LD_ADDR_VAR 0 1
13656: PUSH
13657: LD_INT 22
13659: PUSH
13660: LD_OWVAR 2
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 3
13681: PUSH
13682: LD_INT 23
13684: PUSH
13685: LD_INT 0
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: PUSH
13706: FOR_IN
13707: IFFALSE 13761
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 257
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 3
13727: PUSH
13728: LD_INT 4
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: IN
13737: IFFALSE 13759
// SetClass ( un , rand ( 1 , 4 ) ) ;
13739: LD_VAR 0 1
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PPUSH
13750: CALL_OW 12
13754: PPUSH
13755: CALL_OW 336
13759: GO 13706
13761: POP
13762: POP
// end ;
13763: PPOPN 1
13765: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13766: LD_EXP 28
13770: PUSH
13771: LD_EXP 40
13775: AND
13776: IFFALSE 13855
13778: GO 13780
13780: DISABLE
13781: LD_INT 0
13783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13784: LD_ADDR_VAR 0 1
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_OWVAR 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: ST_TO_ADDR
// if not tmp then
13820: LD_VAR 0 1
13824: NOT
13825: IFFALSE 13829
// exit ;
13827: GO 13855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13829: LD_VAR 0 1
13833: PUSH
13834: LD_INT 1
13836: PPUSH
13837: LD_VAR 0 1
13841: PPUSH
13842: CALL_OW 12
13846: ARRAY
13847: PPUSH
13848: LD_INT 100
13850: PPUSH
13851: CALL_OW 234
// end ;
13855: PPOPN 1
13857: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13858: LD_EXP 28
13862: PUSH
13863: LD_EXP 42
13867: AND
13868: IFFALSE 13966
13870: GO 13872
13872: DISABLE
13873: LD_INT 0
13875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13876: LD_ADDR_VAR 0 1
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_OWVAR 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PPUSH
13907: CALL_OW 69
13911: ST_TO_ADDR
// if not tmp then
13912: LD_VAR 0 1
13916: NOT
13917: IFFALSE 13921
// exit ;
13919: GO 13966
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13921: LD_VAR 0 1
13925: PUSH
13926: LD_INT 1
13928: PPUSH
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 12
13938: ARRAY
13939: PPUSH
13940: LD_INT 1
13942: PPUSH
13943: LD_INT 4
13945: PPUSH
13946: CALL_OW 12
13950: PPUSH
13951: LD_INT 3000
13953: PPUSH
13954: LD_INT 9000
13956: PPUSH
13957: CALL_OW 12
13961: PPUSH
13962: CALL_OW 492
// end ;
13966: PPOPN 1
13968: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13969: LD_EXP 28
13973: PUSH
13974: LD_EXP 43
13978: AND
13979: IFFALSE 13999
13981: GO 13983
13983: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13984: LD_INT 1
13986: PPUSH
13987: LD_OWVAR 2
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 324
13999: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14000: LD_EXP 28
14004: PUSH
14005: LD_EXP 44
14009: AND
14010: IFFALSE 14093
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 22
14026: PUSH
14027: LD_OWVAR 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 21
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: ST_TO_ADDR
// if not tmp then
14055: LD_VAR 0 2
14059: NOT
14060: IFFALSE 14064
// exit ;
14062: GO 14093
// for i in tmp do
14064: LD_ADDR_VAR 0 1
14068: PUSH
14069: LD_VAR 0 2
14073: PUSH
14074: FOR_IN
14075: IFFALSE 14091
// SetBLevel ( i , 10 ) ;
14077: LD_VAR 0 1
14081: PPUSH
14082: LD_INT 10
14084: PPUSH
14085: CALL_OW 241
14089: GO 14074
14091: POP
14092: POP
// end ;
14093: PPOPN 2
14095: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14096: LD_EXP 28
14100: PUSH
14101: LD_EXP 45
14105: AND
14106: IFFALSE 14217
14108: GO 14110
14110: DISABLE
14111: LD_INT 0
14113: PPUSH
14114: PPUSH
14115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_OWVAR 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 25
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: ST_TO_ADDR
// if not tmp then
14152: LD_VAR 0 3
14156: NOT
14157: IFFALSE 14161
// exit ;
14159: GO 14217
// un := tmp [ rand ( 1 , tmp ) ] ;
14161: LD_ADDR_VAR 0 2
14165: PUSH
14166: LD_VAR 0 3
14170: PUSH
14171: LD_INT 1
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: CALL_OW 12
14183: ARRAY
14184: ST_TO_ADDR
// if Crawls ( un ) then
14185: LD_VAR 0 2
14189: PPUSH
14190: CALL_OW 318
14194: IFFALSE 14205
// ComWalk ( un ) ;
14196: LD_VAR 0 2
14200: PPUSH
14201: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14205: LD_VAR 0 2
14209: PPUSH
14210: LD_INT 5
14212: PPUSH
14213: CALL_OW 336
// end ;
14217: PPOPN 3
14219: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14220: LD_EXP 28
14224: PUSH
14225: LD_EXP 46
14229: AND
14230: PUSH
14231: LD_OWVAR 67
14235: PUSH
14236: LD_INT 4
14238: LESS
14239: AND
14240: IFFALSE 14259
14242: GO 14244
14244: DISABLE
// begin Difficulty := Difficulty + 1 ;
14245: LD_ADDR_OWVAR 67
14249: PUSH
14250: LD_OWVAR 67
14254: PUSH
14255: LD_INT 1
14257: PLUS
14258: ST_TO_ADDR
// end ;
14259: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14260: LD_EXP 28
14264: PUSH
14265: LD_EXP 47
14269: AND
14270: IFFALSE 14373
14272: GO 14274
14274: DISABLE
14275: LD_INT 0
14277: PPUSH
// begin for i := 1 to 5 do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_INT 5
14290: PUSH
14291: FOR_TO
14292: IFFALSE 14371
// begin uc_nation := nation_nature ;
14294: LD_ADDR_OWVAR 21
14298: PUSH
14299: LD_INT 0
14301: ST_TO_ADDR
// uc_side := 0 ;
14302: LD_ADDR_OWVAR 20
14306: PUSH
14307: LD_INT 0
14309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14310: LD_ADDR_OWVAR 29
14314: PUSH
14315: LD_INT 12
14317: PUSH
14318: LD_INT 12
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: ST_TO_ADDR
// hc_agressivity := 20 ;
14325: LD_ADDR_OWVAR 35
14329: PUSH
14330: LD_INT 20
14332: ST_TO_ADDR
// hc_class := class_tiger ;
14333: LD_ADDR_OWVAR 28
14337: PUSH
14338: LD_INT 14
14340: ST_TO_ADDR
// hc_gallery :=  ;
14341: LD_ADDR_OWVAR 33
14345: PUSH
14346: LD_STRING 
14348: ST_TO_ADDR
// hc_name :=  ;
14349: LD_ADDR_OWVAR 26
14353: PUSH
14354: LD_STRING 
14356: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14357: CALL_OW 44
14361: PPUSH
14362: LD_INT 0
14364: PPUSH
14365: CALL_OW 51
// end ;
14369: GO 14291
14371: POP
14372: POP
// end ;
14373: PPOPN 1
14375: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14376: LD_EXP 28
14380: PUSH
14381: LD_EXP 48
14385: AND
14386: IFFALSE 14395
14388: GO 14390
14390: DISABLE
// StreamSibBomb ;
14391: CALL 14396 0 0
14395: END
// export function StreamSibBomb ; var i , x , y ; begin
14396: LD_INT 0
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
// result := false ;
14402: LD_ADDR_VAR 0 1
14406: PUSH
14407: LD_INT 0
14409: ST_TO_ADDR
// for i := 1 to 16 do
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_INT 16
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14623
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_INT 10
14433: PUSH
14434: LD_INT 20
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 40
14442: PUSH
14443: LD_INT 50
14445: PUSH
14446: LD_INT 60
14448: PUSH
14449: LD_INT 70
14451: PUSH
14452: LD_INT 80
14454: PUSH
14455: LD_INT 90
14457: PUSH
14458: LD_INT 100
14460: PUSH
14461: LD_INT 110
14463: PUSH
14464: LD_INT 120
14466: PUSH
14467: LD_INT 130
14469: PUSH
14470: LD_INT 140
14472: PUSH
14473: LD_INT 150
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: LD_INT 15
14498: PPUSH
14499: CALL_OW 12
14503: ARRAY
14504: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14505: LD_ADDR_VAR 0 4
14509: PUSH
14510: LD_INT 10
14512: PUSH
14513: LD_INT 20
14515: PUSH
14516: LD_INT 30
14518: PUSH
14519: LD_INT 40
14521: PUSH
14522: LD_INT 50
14524: PUSH
14525: LD_INT 60
14527: PUSH
14528: LD_INT 70
14530: PUSH
14531: LD_INT 80
14533: PUSH
14534: LD_INT 90
14536: PUSH
14537: LD_INT 100
14539: PUSH
14540: LD_INT 110
14542: PUSH
14543: LD_INT 120
14545: PUSH
14546: LD_INT 130
14548: PUSH
14549: LD_INT 140
14551: PUSH
14552: LD_INT 150
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 1
14574: PPUSH
14575: LD_INT 15
14577: PPUSH
14578: CALL_OW 12
14582: ARRAY
14583: ST_TO_ADDR
// if ValidHex ( x , y ) then
14584: LD_VAR 0 3
14588: PPUSH
14589: LD_VAR 0 4
14593: PPUSH
14594: CALL_OW 488
14598: IFFALSE 14621
// begin result := [ x , y ] ;
14600: LD_ADDR_VAR 0 1
14604: PUSH
14605: LD_VAR 0 3
14609: PUSH
14610: LD_VAR 0 4
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: ST_TO_ADDR
// break ;
14619: GO 14623
// end ; end ;
14621: GO 14423
14623: POP
14624: POP
// if result then
14625: LD_VAR 0 1
14629: IFFALSE 14689
// begin ToLua ( playSibBomb() ) ;
14631: LD_STRING playSibBomb()
14633: PPUSH
14634: CALL_OW 559
// wait ( 0 0$14 ) ;
14638: LD_INT 490
14640: PPUSH
14641: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 1
14652: ARRAY
14653: PPUSH
14654: LD_VAR 0 1
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: PPUSH
14663: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14667: LD_VAR 0 1
14671: PUSH
14672: LD_INT 1
14674: ARRAY
14675: PPUSH
14676: LD_VAR 0 1
14680: PUSH
14681: LD_INT 2
14683: ARRAY
14684: PPUSH
14685: CALL_OW 429
// end ; end ;
14689: LD_VAR 0 1
14693: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14694: LD_EXP 28
14698: PUSH
14699: LD_EXP 50
14703: AND
14704: IFFALSE 14716
14706: GO 14708
14708: DISABLE
// YouLost (  ) ;
14709: LD_STRING 
14711: PPUSH
14712: CALL_OW 104
14716: END
// every 0 0$1 trigger StreamModeActive and sFog do
14717: LD_EXP 28
14721: PUSH
14722: LD_EXP 49
14726: AND
14727: IFFALSE 14741
14729: GO 14731
14731: DISABLE
// FogOff ( your_side ) ;
14732: LD_OWVAR 2
14736: PPUSH
14737: CALL_OW 344
14741: END
// every 0 0$1 trigger StreamModeActive and sSun do
14742: LD_EXP 28
14746: PUSH
14747: LD_EXP 51
14751: AND
14752: IFFALSE 14780
14754: GO 14756
14756: DISABLE
// begin solar_recharge_percent := 0 ;
14757: LD_ADDR_OWVAR 79
14761: PUSH
14762: LD_INT 0
14764: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14765: LD_INT 10500
14767: PPUSH
14768: CALL_OW 67
// solar_recharge_percent := 100 ;
14772: LD_ADDR_OWVAR 79
14776: PUSH
14777: LD_INT 100
14779: ST_TO_ADDR
// end ;
14780: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 52
14790: AND
14791: IFFALSE 15030
14793: GO 14795
14795: DISABLE
14796: LD_INT 0
14798: PPUSH
14799: PPUSH
14800: PPUSH
// begin tmp := [ ] ;
14801: LD_ADDR_VAR 0 3
14805: PUSH
14806: EMPTY
14807: ST_TO_ADDR
// for i := 1 to 6 do
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: DOUBLE
14814: LD_INT 1
14816: DEC
14817: ST_TO_ADDR
14818: LD_INT 6
14820: PUSH
14821: FOR_TO
14822: IFFALSE 14927
// begin uc_nation := nation_nature ;
14824: LD_ADDR_OWVAR 21
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// uc_side := 0 ;
14832: LD_ADDR_OWVAR 20
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14840: LD_ADDR_OWVAR 29
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 12
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: ST_TO_ADDR
// hc_agressivity := 20 ;
14855: LD_ADDR_OWVAR 35
14859: PUSH
14860: LD_INT 20
14862: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14863: LD_ADDR_OWVAR 28
14867: PUSH
14868: LD_INT 17
14870: ST_TO_ADDR
// hc_gallery :=  ;
14871: LD_ADDR_OWVAR 33
14875: PUSH
14876: LD_STRING 
14878: ST_TO_ADDR
// hc_name :=  ;
14879: LD_ADDR_OWVAR 26
14883: PUSH
14884: LD_STRING 
14886: ST_TO_ADDR
// un := CreateHuman ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: CALL_OW 44
14896: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 51
// tmp := tmp ^ un ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: LD_VAR 0 2
14923: ADD
14924: ST_TO_ADDR
// end ;
14925: GO 14821
14927: POP
14928: POP
// repeat wait ( 0 0$1 ) ;
14929: LD_INT 35
14931: PPUSH
14932: CALL_OW 67
// for un in tmp do
14936: LD_ADDR_VAR 0 2
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: FOR_IN
14947: IFFALSE 15021
// begin if IsDead ( un ) then
14949: LD_VAR 0 2
14953: PPUSH
14954: CALL_OW 301
14958: IFFALSE 14978
// begin tmp := tmp diff un ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_VAR 0 3
14969: PUSH
14970: LD_VAR 0 2
14974: DIFF
14975: ST_TO_ADDR
// continue ;
14976: GO 14946
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_INT 3
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 0
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 69
15004: PPUSH
15005: LD_VAR 0 2
15009: PPUSH
15010: CALL_OW 74
15014: PPUSH
15015: CALL_OW 115
// end ;
15019: GO 14946
15021: POP
15022: POP
// until not tmp ;
15023: LD_VAR 0 3
15027: NOT
15028: IFFALSE 14929
// end ;
15030: PPOPN 3
15032: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15033: LD_EXP 28
15037: PUSH
15038: LD_EXP 53
15042: AND
15043: IFFALSE 15097
15045: GO 15047
15047: DISABLE
// begin ToLua ( displayTroll(); ) ;
15048: LD_STRING displayTroll();
15050: PPUSH
15051: CALL_OW 559
// wait ( 3 3$00 ) ;
15055: LD_INT 6300
15057: PPUSH
15058: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15062: LD_STRING hideTroll();
15064: PPUSH
15065: CALL_OW 559
// wait ( 1 1$00 ) ;
15069: LD_INT 2100
15071: PPUSH
15072: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15076: LD_STRING displayTroll();
15078: PPUSH
15079: CALL_OW 559
// wait ( 1 1$00 ) ;
15083: LD_INT 2100
15085: PPUSH
15086: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15090: LD_STRING hideTroll();
15092: PPUSH
15093: CALL_OW 559
// end ;
15097: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15098: LD_EXP 28
15102: PUSH
15103: LD_EXP 54
15107: AND
15108: IFFALSE 15171
15110: GO 15112
15112: DISABLE
15113: LD_INT 0
15115: PPUSH
// begin p := 0 ;
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: LD_INT 0
15123: ST_TO_ADDR
// repeat game_speed := 1 ;
15124: LD_ADDR_OWVAR 65
15128: PUSH
15129: LD_INT 1
15131: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15132: LD_INT 35
15134: PPUSH
15135: CALL_OW 67
// p := p + 1 ;
15139: LD_ADDR_VAR 0 1
15143: PUSH
15144: LD_VAR 0 1
15148: PUSH
15149: LD_INT 1
15151: PLUS
15152: ST_TO_ADDR
// until p >= 60 ;
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 60
15160: GREATEREQUAL
15161: IFFALSE 15124
// game_speed := 4 ;
15163: LD_ADDR_OWVAR 65
15167: PUSH
15168: LD_INT 4
15170: ST_TO_ADDR
// end ;
15171: PPOPN 1
15173: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15174: LD_EXP 28
15178: PUSH
15179: LD_EXP 55
15183: AND
15184: IFFALSE 15330
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_INT 22
15200: PUSH
15201: LD_OWVAR 2
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 2
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 30
15225: PUSH
15226: LD_INT 1
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// if not depot then
15247: LD_VAR 0 1
15251: NOT
15252: IFFALSE 15256
// exit ;
15254: GO 15330
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15256: LD_ADDR_VAR 0 2
15260: PUSH
15261: LD_VAR 0 1
15265: PUSH
15266: LD_INT 1
15268: PPUSH
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 12
15278: ARRAY
15279: PPUSH
15280: CALL_OW 274
15284: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15285: LD_VAR 0 2
15289: PPUSH
15290: LD_INT 1
15292: PPUSH
15293: LD_INT 0
15295: PPUSH
15296: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15300: LD_VAR 0 2
15304: PPUSH
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 0
15310: PPUSH
15311: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15315: LD_VAR 0 2
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: LD_INT 0
15325: PPUSH
15326: CALL_OW 277
// end ;
15330: PPOPN 2
15332: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15333: LD_EXP 28
15337: PUSH
15338: LD_EXP 56
15342: AND
15343: IFFALSE 15440
15345: GO 15347
15347: DISABLE
15348: LD_INT 0
15350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15351: LD_ADDR_VAR 0 1
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_OWVAR 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: LD_INT 23
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: ST_TO_ADDR
// if not tmp then
15405: LD_VAR 0 1
15409: NOT
15410: IFFALSE 15414
// exit ;
15412: GO 15440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15414: LD_VAR 0 1
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_VAR 0 1
15426: PPUSH
15427: CALL_OW 12
15431: ARRAY
15432: PPUSH
15433: LD_INT 200
15435: PPUSH
15436: CALL_OW 234
// end ;
15440: PPOPN 1
15442: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15443: LD_EXP 28
15447: PUSH
15448: LD_EXP 57
15452: AND
15453: IFFALSE 15532
15455: GO 15457
15457: DISABLE
15458: LD_INT 0
15460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15461: LD_ADDR_VAR 0 1
15465: PUSH
15466: LD_INT 22
15468: PUSH
15469: LD_OWVAR 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 21
15480: PUSH
15481: LD_INT 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 69
15496: ST_TO_ADDR
// if not tmp then
15497: LD_VAR 0 1
15501: NOT
15502: IFFALSE 15506
// exit ;
15504: GO 15532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15506: LD_VAR 0 1
15510: PUSH
15511: LD_INT 1
15513: PPUSH
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 12
15523: ARRAY
15524: PPUSH
15525: LD_INT 60
15527: PPUSH
15528: CALL_OW 234
// end ;
15532: PPOPN 1
15534: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15535: LD_EXP 28
15539: PUSH
15540: LD_EXP 58
15544: AND
15545: IFFALSE 15644
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
15553: PPUSH
// begin enable ;
15554: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15555: LD_ADDR_VAR 0 1
15559: PUSH
15560: LD_INT 22
15562: PUSH
15563: LD_OWVAR 2
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 61
15574: PUSH
15575: EMPTY
15576: LIST
15577: PUSH
15578: LD_INT 33
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: PPUSH
15593: CALL_OW 69
15597: ST_TO_ADDR
// if not tmp then
15598: LD_VAR 0 1
15602: NOT
15603: IFFALSE 15607
// exit ;
15605: GO 15644
// for i in tmp do
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_VAR 0 1
15616: PUSH
15617: FOR_IN
15618: IFFALSE 15642
// if IsControledBy ( i ) then
15620: LD_VAR 0 2
15624: PPUSH
15625: CALL_OW 312
15629: IFFALSE 15640
// ComUnlink ( i ) ;
15631: LD_VAR 0 2
15635: PPUSH
15636: CALL_OW 136
15640: GO 15617
15642: POP
15643: POP
// end ;
15644: PPOPN 2
15646: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15647: LD_EXP 28
15651: PUSH
15652: LD_EXP 59
15656: AND
15657: IFFALSE 15797
15659: GO 15661
15661: DISABLE
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
// begin ToLua ( displayPowell(); ) ;
15666: LD_STRING displayPowell();
15668: PPUSH
15669: CALL_OW 559
// uc_side := 0 ;
15673: LD_ADDR_OWVAR 20
15677: PUSH
15678: LD_INT 0
15680: ST_TO_ADDR
// uc_nation := 2 ;
15681: LD_ADDR_OWVAR 21
15685: PUSH
15686: LD_INT 2
15688: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15689: LD_ADDR_OWVAR 37
15693: PUSH
15694: LD_INT 14
15696: ST_TO_ADDR
// vc_engine := engine_siberite ;
15697: LD_ADDR_OWVAR 39
15701: PUSH
15702: LD_INT 3
15704: ST_TO_ADDR
// vc_control := control_apeman ;
15705: LD_ADDR_OWVAR 38
15709: PUSH
15710: LD_INT 5
15712: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15713: LD_ADDR_OWVAR 40
15717: PUSH
15718: LD_INT 29
15720: ST_TO_ADDR
// un := CreateVehicle ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: CALL_OW 45
15730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15743: LD_INT 35
15745: PPUSH
15746: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15750: LD_VAR 0 2
15754: PPUSH
15755: LD_INT 22
15757: PUSH
15758: LD_OWVAR 2
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: PPUSH
15772: LD_VAR 0 2
15776: PPUSH
15777: CALL_OW 74
15781: PPUSH
15782: CALL_OW 115
// until IsDead ( un ) ;
15786: LD_VAR 0 2
15790: PPUSH
15791: CALL_OW 301
15795: IFFALSE 15743
// end ;
15797: PPOPN 2
15799: END
// every 0 0$1 trigger StreamModeActive and sStu do
15800: LD_EXP 28
15804: PUSH
15805: LD_EXP 67
15809: AND
15810: IFFALSE 15826
15812: GO 15814
15814: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15815: LD_STRING displayStucuk();
15817: PPUSH
15818: CALL_OW 559
// ResetFog ;
15822: CALL_OW 335
// end ;
15826: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15827: LD_EXP 28
15831: PUSH
15832: LD_EXP 60
15836: AND
15837: IFFALSE 15978
15839: GO 15841
15841: DISABLE
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15846: LD_ADDR_VAR 0 2
15850: PUSH
15851: LD_INT 22
15853: PUSH
15854: LD_OWVAR 2
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 21
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: ST_TO_ADDR
// if not tmp then
15882: LD_VAR 0 2
15886: NOT
15887: IFFALSE 15891
// exit ;
15889: GO 15978
// un := tmp [ rand ( 1 , tmp ) ] ;
15891: LD_ADDR_VAR 0 1
15895: PUSH
15896: LD_VAR 0 2
15900: PUSH
15901: LD_INT 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 12
15913: ARRAY
15914: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_INT 0
15922: PPUSH
15923: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15927: LD_VAR 0 1
15931: PPUSH
15932: LD_OWVAR 3
15936: PUSH
15937: LD_VAR 0 1
15941: DIFF
15942: PPUSH
15943: LD_VAR 0 1
15947: PPUSH
15948: CALL_OW 74
15952: PPUSH
15953: CALL_OW 115
// wait ( 0 0$20 ) ;
15957: LD_INT 700
15959: PPUSH
15960: CALL_OW 67
// SetSide ( un , your_side ) ;
15964: LD_VAR 0 1
15968: PPUSH
15969: LD_OWVAR 2
15973: PPUSH
15974: CALL_OW 235
// end ;
15978: PPOPN 2
15980: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15981: LD_EXP 28
15985: PUSH
15986: LD_EXP 61
15990: AND
15991: IFFALSE 16097
15993: GO 15995
15995: DISABLE
15996: LD_INT 0
15998: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15999: LD_ADDR_VAR 0 1
16003: PUSH
16004: LD_INT 22
16006: PUSH
16007: LD_OWVAR 2
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 30
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PPUSH
16048: CALL_OW 69
16052: ST_TO_ADDR
// if not depot then
16053: LD_VAR 0 1
16057: NOT
16058: IFFALSE 16062
// exit ;
16060: GO 16097
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16062: LD_VAR 0 1
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 250
16075: PPUSH
16076: LD_VAR 0 1
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: CALL_OW 251
16089: PPUSH
16090: LD_INT 70
16092: PPUSH
16093: CALL_OW 495
// end ;
16097: PPOPN 1
16099: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16100: LD_EXP 28
16104: PUSH
16105: LD_EXP 62
16109: AND
16110: IFFALSE 16321
16112: GO 16114
16114: DISABLE
16115: LD_INT 0
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16122: LD_ADDR_VAR 0 5
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_OWVAR 2
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 21
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: ST_TO_ADDR
// if not tmp then
16158: LD_VAR 0 5
16162: NOT
16163: IFFALSE 16167
// exit ;
16165: GO 16321
// for i in tmp do
16167: LD_ADDR_VAR 0 1
16171: PUSH
16172: LD_VAR 0 5
16176: PUSH
16177: FOR_IN
16178: IFFALSE 16319
// begin d := rand ( 0 , 5 ) ;
16180: LD_ADDR_VAR 0 4
16184: PUSH
16185: LD_INT 0
16187: PPUSH
16188: LD_INT 5
16190: PPUSH
16191: CALL_OW 12
16195: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 250
16210: PPUSH
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_INT 3
16218: PPUSH
16219: LD_INT 12
16221: PPUSH
16222: CALL_OW 12
16226: PPUSH
16227: CALL_OW 272
16231: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16232: LD_ADDR_VAR 0 3
16236: PUSH
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL_OW 251
16246: PPUSH
16247: LD_VAR 0 4
16251: PPUSH
16252: LD_INT 3
16254: PPUSH
16255: LD_INT 12
16257: PPUSH
16258: CALL_OW 12
16262: PPUSH
16263: CALL_OW 273
16267: ST_TO_ADDR
// if ValidHex ( x , y ) then
16268: LD_VAR 0 2
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: CALL_OW 488
16282: IFFALSE 16317
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16284: LD_VAR 0 1
16288: PPUSH
16289: LD_VAR 0 2
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 3
16301: PPUSH
16302: LD_INT 6
16304: PPUSH
16305: CALL_OW 12
16309: PPUSH
16310: LD_INT 1
16312: PPUSH
16313: CALL_OW 483
// end ;
16317: GO 16177
16319: POP
16320: POP
// end ;
16321: PPOPN 5
16323: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16324: LD_EXP 28
16328: PUSH
16329: LD_EXP 63
16333: AND
16334: IFFALSE 16428
16336: GO 16338
16338: DISABLE
16339: LD_INT 0
16341: PPUSH
16342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_OWVAR 2
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 32
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 21
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL_OW 69
16389: ST_TO_ADDR
// if not tmp then
16390: LD_VAR 0 2
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16428
// for i in tmp do
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_VAR 0 2
16408: PUSH
16409: FOR_IN
16410: IFFALSE 16426
// SetFuel ( i , 0 ) ;
16412: LD_VAR 0 1
16416: PPUSH
16417: LD_INT 0
16419: PPUSH
16420: CALL_OW 240
16424: GO 16409
16426: POP
16427: POP
// end ;
16428: PPOPN 2
16430: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16431: LD_EXP 28
16435: PUSH
16436: LD_EXP 64
16440: AND
16441: IFFALSE 16507
16443: GO 16445
16445: DISABLE
16446: LD_INT 0
16448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16449: LD_ADDR_VAR 0 1
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_OWVAR 2
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 29
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
// if not tmp then
16485: LD_VAR 0 1
16489: NOT
16490: IFFALSE 16494
// exit ;
16492: GO 16507
// DestroyUnit ( tmp [ 1 ] ) ;
16494: LD_VAR 0 1
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: CALL_OW 65
// end ;
16507: PPOPN 1
16509: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16510: LD_EXP 28
16514: PUSH
16515: LD_EXP 66
16519: AND
16520: IFFALSE 16649
16522: GO 16524
16524: DISABLE
16525: LD_INT 0
16527: PPUSH
// begin uc_side := 0 ;
16528: LD_ADDR_OWVAR 20
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// uc_nation := nation_arabian ;
16536: LD_ADDR_OWVAR 21
16540: PUSH
16541: LD_INT 2
16543: ST_TO_ADDR
// hc_gallery :=  ;
16544: LD_ADDR_OWVAR 33
16548: PUSH
16549: LD_STRING 
16551: ST_TO_ADDR
// hc_name :=  ;
16552: LD_ADDR_OWVAR 26
16556: PUSH
16557: LD_STRING 
16559: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16560: LD_INT 1
16562: PPUSH
16563: LD_INT 11
16565: PPUSH
16566: LD_INT 10
16568: PPUSH
16569: CALL_OW 380
// un := CreateHuman ;
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: CALL_OW 44
16582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 1
16590: PPUSH
16591: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16595: LD_INT 35
16597: PPUSH
16598: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16602: LD_VAR 0 1
16606: PPUSH
16607: LD_INT 22
16609: PUSH
16610: LD_OWVAR 2
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 74
16633: PPUSH
16634: CALL_OW 115
// until IsDead ( un ) ;
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 301
16647: IFFALSE 16595
// end ;
16649: PPOPN 1
16651: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16652: LD_EXP 28
16656: PUSH
16657: LD_EXP 68
16661: AND
16662: IFFALSE 16674
16664: GO 16666
16666: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16667: LD_STRING earthquake(getX(game), 0, 32)
16669: PPUSH
16670: CALL_OW 559
16674: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16675: LD_EXP 28
16679: PUSH
16680: LD_EXP 69
16684: AND
16685: IFFALSE 16776
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin enable ;
16693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 21
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 33
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// if not tmp then
16741: LD_VAR 0 1
16745: NOT
16746: IFFALSE 16750
// exit ;
16748: GO 16776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16750: LD_VAR 0 1
16754: PUSH
16755: LD_INT 1
16757: PPUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 12
16767: ARRAY
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 234
// end ;
16776: PPOPN 1
16778: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16779: LD_EXP 28
16783: PUSH
16784: LD_EXP 70
16788: AND
16789: IFFALSE 16930
16791: GO 16793
16793: DISABLE
16794: LD_INT 0
16796: PPUSH
16797: PPUSH
16798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_INT 22
16806: PUSH
16807: LD_OWVAR 2
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 25
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 69
16834: ST_TO_ADDR
// if not tmp then
16835: LD_VAR 0 3
16839: NOT
16840: IFFALSE 16844
// exit ;
16842: GO 16930
// un := tmp [ rand ( 1 , tmp ) ] ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_VAR 0 3
16853: PUSH
16854: LD_INT 1
16856: PPUSH
16857: LD_VAR 0 3
16861: PPUSH
16862: CALL_OW 12
16866: ARRAY
16867: ST_TO_ADDR
// if Crawls ( un ) then
16868: LD_VAR 0 2
16872: PPUSH
16873: CALL_OW 318
16877: IFFALSE 16888
// ComWalk ( un ) ;
16879: LD_VAR 0 2
16883: PPUSH
16884: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16888: LD_VAR 0 2
16892: PPUSH
16893: LD_INT 9
16895: PPUSH
16896: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16900: LD_INT 28
16902: PPUSH
16903: LD_OWVAR 2
16907: PPUSH
16908: LD_INT 2
16910: PPUSH
16911: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16915: LD_INT 29
16917: PPUSH
16918: LD_OWVAR 2
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL_OW 322
// end ;
16930: PPOPN 3
16932: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16933: LD_EXP 28
16937: PUSH
16938: LD_EXP 71
16942: AND
16943: IFFALSE 17054
16945: GO 16947
16947: DISABLE
16948: LD_INT 0
16950: PPUSH
16951: PPUSH
16952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_OWVAR 2
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 25
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: ST_TO_ADDR
// if not tmp then
16989: LD_VAR 0 3
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17054
// un := tmp [ rand ( 1 , tmp ) ] ;
16998: LD_ADDR_VAR 0 2
17002: PUSH
17003: LD_VAR 0 3
17007: PUSH
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL_OW 12
17020: ARRAY
17021: ST_TO_ADDR
// if Crawls ( un ) then
17022: LD_VAR 0 2
17026: PPUSH
17027: CALL_OW 318
17031: IFFALSE 17042
// ComWalk ( un ) ;
17033: LD_VAR 0 2
17037: PPUSH
17038: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17042: LD_VAR 0 2
17046: PPUSH
17047: LD_INT 8
17049: PPUSH
17050: CALL_OW 336
// end ;
17054: PPOPN 3
17056: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17057: LD_EXP 28
17061: PUSH
17062: LD_EXP 72
17066: AND
17067: IFFALSE 17211
17069: GO 17071
17071: DISABLE
17072: LD_INT 0
17074: PPUSH
17075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17076: LD_ADDR_VAR 0 2
17080: PUSH
17081: LD_INT 22
17083: PUSH
17084: LD_OWVAR 2
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 21
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 2
17105: PUSH
17106: LD_INT 34
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 34
17118: PUSH
17119: LD_INT 51
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 34
17128: PUSH
17129: LD_INT 32
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 69
17151: ST_TO_ADDR
// if not tmp then
17152: LD_VAR 0 2
17156: NOT
17157: IFFALSE 17161
// exit ;
17159: GO 17211
// for i in tmp do
17161: LD_ADDR_VAR 0 1
17165: PUSH
17166: LD_VAR 0 2
17170: PUSH
17171: FOR_IN
17172: IFFALSE 17209
// if GetCargo ( i , mat_artifact ) = 0 then
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 4
17181: PPUSH
17182: CALL_OW 289
17186: PUSH
17187: LD_INT 0
17189: EQUAL
17190: IFFALSE 17207
// SetCargo ( i , mat_siberit , 100 ) ;
17192: LD_VAR 0 1
17196: PPUSH
17197: LD_INT 3
17199: PPUSH
17200: LD_INT 100
17202: PPUSH
17203: CALL_OW 290
17207: GO 17171
17209: POP
17210: POP
// end ;
17211: PPOPN 2
17213: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17214: LD_EXP 28
17218: PUSH
17219: LD_EXP 73
17223: AND
17224: IFFALSE 17407
17226: GO 17228
17228: DISABLE
17229: LD_INT 0
17231: PPUSH
17232: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17233: LD_ADDR_VAR 0 2
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_OWVAR 2
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PPUSH
17250: CALL_OW 69
17254: ST_TO_ADDR
// if not tmp then
17255: LD_VAR 0 2
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17407
// for i := 1 to 2 do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: DOUBLE
17270: LD_INT 1
17272: DEC
17273: ST_TO_ADDR
17274: LD_INT 2
17276: PUSH
17277: FOR_TO
17278: IFFALSE 17405
// begin uc_side := your_side ;
17280: LD_ADDR_OWVAR 20
17284: PUSH
17285: LD_OWVAR 2
17289: ST_TO_ADDR
// uc_nation := nation_american ;
17290: LD_ADDR_OWVAR 21
17294: PUSH
17295: LD_INT 1
17297: ST_TO_ADDR
// vc_chassis := us_morphling ;
17298: LD_ADDR_OWVAR 37
17302: PUSH
17303: LD_INT 5
17305: ST_TO_ADDR
// vc_engine := engine_siberite ;
17306: LD_ADDR_OWVAR 39
17310: PUSH
17311: LD_INT 3
17313: ST_TO_ADDR
// vc_control := control_computer ;
17314: LD_ADDR_OWVAR 38
17318: PUSH
17319: LD_INT 3
17321: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17322: LD_ADDR_OWVAR 40
17326: PUSH
17327: LD_INT 10
17329: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17330: LD_VAR 0 2
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: PPUSH
17339: CALL_OW 310
17343: NOT
17344: IFFALSE 17391
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17346: CALL_OW 45
17350: PPUSH
17351: LD_VAR 0 2
17355: PUSH
17356: LD_INT 1
17358: ARRAY
17359: PPUSH
17360: CALL_OW 250
17364: PPUSH
17365: LD_VAR 0 2
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PPUSH
17374: CALL_OW 251
17378: PPUSH
17379: LD_INT 12
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 50
17389: GO 17403
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17391: CALL_OW 45
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: CALL_OW 51
// end ;
17403: GO 17277
17405: POP
17406: POP
// end ;
17407: PPOPN 2
17409: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17410: LD_EXP 28
17414: PUSH
17415: LD_EXP 74
17419: AND
17420: IFFALSE 17642
17422: GO 17424
17424: DISABLE
17425: LD_INT 0
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17433: LD_ADDR_VAR 0 6
17437: PUSH
17438: LD_INT 22
17440: PUSH
17441: LD_OWVAR 2
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 21
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 3
17462: PUSH
17463: LD_INT 23
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: PPUSH
17482: CALL_OW 69
17486: ST_TO_ADDR
// if not tmp then
17487: LD_VAR 0 6
17491: NOT
17492: IFFALSE 17496
// exit ;
17494: GO 17642
// s1 := rand ( 1 , 4 ) ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_INT 1
17503: PPUSH
17504: LD_INT 4
17506: PPUSH
17507: CALL_OW 12
17511: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17512: LD_ADDR_VAR 0 4
17516: PUSH
17517: LD_VAR 0 6
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: PPUSH
17526: LD_VAR 0 2
17530: PPUSH
17531: CALL_OW 259
17535: ST_TO_ADDR
// if s1 = 1 then
17536: LD_VAR 0 2
17540: PUSH
17541: LD_INT 1
17543: EQUAL
17544: IFFALSE 17564
// s2 := rand ( 2 , 4 ) else
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: LD_INT 2
17553: PPUSH
17554: LD_INT 4
17556: PPUSH
17557: CALL_OW 12
17561: ST_TO_ADDR
17562: GO 17572
// s2 := 1 ;
17564: LD_ADDR_VAR 0 3
17568: PUSH
17569: LD_INT 1
17571: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17572: LD_ADDR_VAR 0 5
17576: PUSH
17577: LD_VAR 0 6
17581: PUSH
17582: LD_INT 1
17584: ARRAY
17585: PPUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: CALL_OW 259
17595: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17596: LD_VAR 0 6
17600: PUSH
17601: LD_INT 1
17603: ARRAY
17604: PPUSH
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_VAR 0 5
17614: PPUSH
17615: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17619: LD_VAR 0 6
17623: PUSH
17624: LD_INT 1
17626: ARRAY
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_VAR 0 4
17637: PPUSH
17638: CALL_OW 237
// end ;
17642: PPOPN 6
17644: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17645: LD_EXP 28
17649: PUSH
17650: LD_EXP 75
17654: AND
17655: IFFALSE 17734
17657: GO 17659
17659: DISABLE
17660: LD_INT 0
17662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17663: LD_ADDR_VAR 0 1
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_OWVAR 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 30
17682: PUSH
17683: LD_INT 3
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PPUSH
17694: CALL_OW 69
17698: ST_TO_ADDR
// if not tmp then
17699: LD_VAR 0 1
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17708: LD_VAR 0 1
17712: PUSH
17713: LD_INT 1
17715: PPUSH
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 12
17725: ARRAY
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 234
// end ;
17734: PPOPN 1
17736: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17737: LD_EXP 28
17741: PUSH
17742: LD_EXP 76
17746: AND
17747: IFFALSE 17859
17749: GO 17751
17751: DISABLE
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17756: LD_ADDR_VAR 0 2
17760: PUSH
17761: LD_INT 22
17763: PUSH
17764: LD_OWVAR 2
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: LD_INT 27
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 30
17788: PUSH
17789: LD_INT 26
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 30
17798: PUSH
17799: LD_INT 28
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: ST_TO_ADDR
// if not tmp then
17821: LD_VAR 0 2
17825: NOT
17826: IFFALSE 17830
// exit ;
17828: GO 17859
// for i in tmp do
17830: LD_ADDR_VAR 0 1
17834: PUSH
17835: LD_VAR 0 2
17839: PUSH
17840: FOR_IN
17841: IFFALSE 17857
// SetLives ( i , 1 ) ;
17843: LD_VAR 0 1
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 234
17855: GO 17840
17857: POP
17858: POP
// end ;
17859: PPOPN 2
17861: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17862: LD_EXP 28
17866: PUSH
17867: LD_EXP 77
17871: AND
17872: IFFALSE 18159
17874: GO 17876
17876: DISABLE
17877: LD_INT 0
17879: PPUSH
17880: PPUSH
17881: PPUSH
// begin i := rand ( 1 , 7 ) ;
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: LD_INT 1
17889: PPUSH
17890: LD_INT 7
17892: PPUSH
17893: CALL_OW 12
17897: ST_TO_ADDR
// case i of 1 :
17898: LD_VAR 0 1
17902: PUSH
17903: LD_INT 1
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 17921
17911: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17912: LD_STRING earthquake(getX(game), 0, 32)
17914: PPUSH
17915: CALL_OW 559
17919: GO 18159
17921: LD_INT 2
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17929
17927: GO 17943
17929: POP
// begin ToLua ( displayStucuk(); ) ;
17930: LD_STRING displayStucuk();
17932: PPUSH
17933: CALL_OW 559
// ResetFog ;
17937: CALL_OW 335
// end ; 3 :
17941: GO 18159
17943: LD_INT 3
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 18055
17951: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 22
17959: PUSH
17960: LD_OWVAR 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 25
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 69
17987: ST_TO_ADDR
// if not tmp then
17988: LD_VAR 0 2
17992: NOT
17993: IFFALSE 17997
// exit ;
17995: GO 18159
// un := tmp [ rand ( 1 , tmp ) ] ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_VAR 0 2
18006: PUSH
18007: LD_INT 1
18009: PPUSH
18010: LD_VAR 0 2
18014: PPUSH
18015: CALL_OW 12
18019: ARRAY
18020: ST_TO_ADDR
// if Crawls ( un ) then
18021: LD_VAR 0 3
18025: PPUSH
18026: CALL_OW 318
18030: IFFALSE 18041
// ComWalk ( un ) ;
18032: LD_VAR 0 3
18036: PPUSH
18037: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 8
18048: PPUSH
18049: CALL_OW 336
// end ; 4 :
18053: GO 18159
18055: LD_INT 4
18057: DOUBLE
18058: EQUAL
18059: IFTRUE 18063
18061: GO 18137
18063: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18064: LD_ADDR_VAR 0 2
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_OWVAR 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 30
18083: PUSH
18084: LD_INT 29
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// if not tmp then
18100: LD_VAR 0 2
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18159
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18109: LD_VAR 0 2
18113: PUSH
18114: LD_INT 1
18116: ARRAY
18117: PPUSH
18118: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18122: LD_VAR 0 2
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL_OW 65
// end ; 5 .. 7 :
18135: GO 18159
18137: LD_INT 5
18139: DOUBLE
18140: GREATEREQUAL
18141: IFFALSE 18149
18143: LD_INT 7
18145: DOUBLE
18146: LESSEQUAL
18147: IFTRUE 18151
18149: GO 18158
18151: POP
// StreamSibBomb ; end ;
18152: CALL 14396 0 0
18156: GO 18159
18158: POP
// end ;
18159: PPOPN 3
18161: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18162: LD_EXP 28
18166: PUSH
18167: LD_EXP 78
18171: AND
18172: IFFALSE 18328
18174: GO 18176
18176: DISABLE
18177: LD_INT 0
18179: PPUSH
18180: PPUSH
18181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18182: LD_ADDR_VAR 0 2
18186: PUSH
18187: LD_INT 81
18189: PUSH
18190: LD_OWVAR 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 2
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 21
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: ST_TO_ADDR
// if not tmp then
18236: LD_VAR 0 2
18240: NOT
18241: IFFALSE 18245
// exit ;
18243: GO 18328
// p := 0 ;
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_INT 0
18252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18253: LD_INT 35
18255: PPUSH
18256: CALL_OW 67
// p := p + 1 ;
18260: LD_ADDR_VAR 0 3
18264: PUSH
18265: LD_VAR 0 3
18269: PUSH
18270: LD_INT 1
18272: PLUS
18273: ST_TO_ADDR
// for i in tmp do
18274: LD_ADDR_VAR 0 1
18278: PUSH
18279: LD_VAR 0 2
18283: PUSH
18284: FOR_IN
18285: IFFALSE 18316
// if GetLives ( i ) < 1000 then
18287: LD_VAR 0 1
18291: PPUSH
18292: CALL_OW 256
18296: PUSH
18297: LD_INT 1000
18299: LESS
18300: IFFALSE 18314
// SetLives ( i , 1000 ) ;
18302: LD_VAR 0 1
18306: PPUSH
18307: LD_INT 1000
18309: PPUSH
18310: CALL_OW 234
18314: GO 18284
18316: POP
18317: POP
// until p > 20 ;
18318: LD_VAR 0 3
18322: PUSH
18323: LD_INT 20
18325: GREATER
18326: IFFALSE 18253
// end ;
18328: PPOPN 3
18330: END
// every 0 0$1 trigger StreamModeActive and sTime do
18331: LD_EXP 28
18335: PUSH
18336: LD_EXP 79
18340: AND
18341: IFFALSE 18376
18343: GO 18345
18345: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18346: LD_INT 28
18348: PPUSH
18349: LD_OWVAR 2
18353: PPUSH
18354: LD_INT 2
18356: PPUSH
18357: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18361: LD_INT 30
18363: PPUSH
18364: LD_OWVAR 2
18368: PPUSH
18369: LD_INT 2
18371: PPUSH
18372: CALL_OW 322
// end ;
18376: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18377: LD_EXP 28
18381: PUSH
18382: LD_EXP 80
18386: AND
18387: IFFALSE 18508
18389: GO 18391
18391: DISABLE
18392: LD_INT 0
18394: PPUSH
18395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_OWVAR 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 21
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 3
18425: PUSH
18426: LD_INT 23
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: ST_TO_ADDR
// if not tmp then
18450: LD_VAR 0 2
18454: NOT
18455: IFFALSE 18459
// exit ;
18457: GO 18508
// for i in tmp do
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: LD_VAR 0 2
18468: PUSH
18469: FOR_IN
18470: IFFALSE 18506
// begin if Crawls ( i ) then
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 318
18481: IFFALSE 18492
// ComWalk ( i ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 138
// SetClass ( i , 2 ) ;
18492: LD_VAR 0 1
18496: PPUSH
18497: LD_INT 2
18499: PPUSH
18500: CALL_OW 336
// end ;
18504: GO 18469
18506: POP
18507: POP
// end ;
18508: PPOPN 2
18510: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18511: LD_EXP 28
18515: PUSH
18516: LD_EXP 81
18520: AND
18521: IFFALSE 18809
18523: GO 18525
18525: DISABLE
18526: LD_INT 0
18528: PPUSH
18529: PPUSH
18530: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18531: LD_OWVAR 2
18535: PPUSH
18536: LD_INT 9
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18549: LD_INT 9
18551: PPUSH
18552: LD_OWVAR 2
18556: PPUSH
18557: CALL_OW 343
// uc_side := 9 ;
18561: LD_ADDR_OWVAR 20
18565: PUSH
18566: LD_INT 9
18568: ST_TO_ADDR
// uc_nation := 2 ;
18569: LD_ADDR_OWVAR 21
18573: PUSH
18574: LD_INT 2
18576: ST_TO_ADDR
// hc_name := Dark Warrior ;
18577: LD_ADDR_OWVAR 26
18581: PUSH
18582: LD_STRING Dark Warrior
18584: ST_TO_ADDR
// hc_gallery :=  ;
18585: LD_ADDR_OWVAR 33
18589: PUSH
18590: LD_STRING 
18592: ST_TO_ADDR
// hc_noskilllimit := true ;
18593: LD_ADDR_OWVAR 76
18597: PUSH
18598: LD_INT 1
18600: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18601: LD_ADDR_OWVAR 31
18605: PUSH
18606: LD_INT 30
18608: PUSH
18609: LD_INT 30
18611: PUSH
18612: LD_INT 30
18614: PUSH
18615: LD_INT 30
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: ST_TO_ADDR
// un := CreateHuman ;
18624: LD_ADDR_VAR 0 3
18628: PUSH
18629: CALL_OW 44
18633: ST_TO_ADDR
// hc_noskilllimit := false ;
18634: LD_ADDR_OWVAR 76
18638: PUSH
18639: LD_INT 0
18641: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18642: LD_VAR 0 3
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 51
// ToLua ( playRanger() ) ;
18654: LD_STRING playRanger()
18656: PPUSH
18657: CALL_OW 559
// p := 0 ;
18661: LD_ADDR_VAR 0 2
18665: PUSH
18666: LD_INT 0
18668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18669: LD_INT 35
18671: PPUSH
18672: CALL_OW 67
// p := p + 1 ;
18676: LD_ADDR_VAR 0 2
18680: PUSH
18681: LD_VAR 0 2
18685: PUSH
18686: LD_INT 1
18688: PLUS
18689: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18690: LD_VAR 0 3
18694: PPUSH
18695: CALL_OW 256
18699: PUSH
18700: LD_INT 1000
18702: LESS
18703: IFFALSE 18717
// SetLives ( un , 1000 ) ;
18705: LD_VAR 0 3
18709: PPUSH
18710: LD_INT 1000
18712: PPUSH
18713: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18717: LD_VAR 0 3
18721: PPUSH
18722: LD_INT 81
18724: PUSH
18725: LD_OWVAR 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 91
18736: PUSH
18737: LD_VAR 0 3
18741: PUSH
18742: LD_INT 30
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: CALL_OW 74
18768: PPUSH
18769: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18773: LD_VAR 0 2
18777: PUSH
18778: LD_INT 80
18780: GREATER
18781: PUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: CALL_OW 301
18791: OR
18792: IFFALSE 18669
// if un then
18794: LD_VAR 0 3
18798: IFFALSE 18809
// RemoveUnit ( un ) ;
18800: LD_VAR 0 3
18804: PPUSH
18805: CALL_OW 64
// end ;
18809: PPOPN 3
18811: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18812: LD_EXP 82
18816: IFFALSE 18932
18818: GO 18820
18820: DISABLE
18821: LD_INT 0
18823: PPUSH
18824: PPUSH
18825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18826: LD_ADDR_VAR 0 2
18830: PUSH
18831: LD_INT 81
18833: PUSH
18834: LD_OWVAR 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 21
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PPUSH
18857: CALL_OW 69
18861: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18862: LD_STRING playComputer()
18864: PPUSH
18865: CALL_OW 559
// if not tmp then
18869: LD_VAR 0 2
18873: NOT
18874: IFFALSE 18878
// exit ;
18876: GO 18932
// for i in tmp do
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_VAR 0 2
18887: PUSH
18888: FOR_IN
18889: IFFALSE 18930
// for j := 1 to 4 do
18891: LD_ADDR_VAR 0 3
18895: PUSH
18896: DOUBLE
18897: LD_INT 1
18899: DEC
18900: ST_TO_ADDR
18901: LD_INT 4
18903: PUSH
18904: FOR_TO
18905: IFFALSE 18926
// SetSkill ( i , j , 10 ) ;
18907: LD_VAR 0 1
18911: PPUSH
18912: LD_VAR 0 3
18916: PPUSH
18917: LD_INT 10
18919: PPUSH
18920: CALL_OW 237
18924: GO 18904
18926: POP
18927: POP
18928: GO 18888
18930: POP
18931: POP
// end ;
18932: PPOPN 3
18934: END
// every 0 0$1 trigger s30 do var i , tmp ;
18935: LD_EXP 83
18939: IFFALSE 19008
18941: GO 18943
18943: DISABLE
18944: LD_INT 0
18946: PPUSH
18947: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_INT 22
18955: PUSH
18956: LD_OWVAR 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
// if not tmp then
18970: LD_VAR 0 2
18974: NOT
18975: IFFALSE 18979
// exit ;
18977: GO 19008
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 2
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19006
// SetLives ( i , 300 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 300
18999: PPUSH
19000: CALL_OW 234
19004: GO 18989
19006: POP
19007: POP
// end ;
19008: PPOPN 2
19010: END
// every 0 0$1 trigger s60 do var i , tmp ;
19011: LD_EXP 84
19015: IFFALSE 19084
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
19023: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_OWVAR 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL_OW 69
19045: ST_TO_ADDR
// if not tmp then
19046: LD_VAR 0 2
19050: NOT
19051: IFFALSE 19055
// exit ;
19053: GO 19084
// for i in tmp do
19055: LD_ADDR_VAR 0 1
19059: PUSH
19060: LD_VAR 0 2
19064: PUSH
19065: FOR_IN
19066: IFFALSE 19082
// SetLives ( i , 600 ) ;
19068: LD_VAR 0 1
19072: PPUSH
19073: LD_INT 600
19075: PPUSH
19076: CALL_OW 234
19080: GO 19065
19082: POP
19083: POP
// end ;
19084: PPOPN 2
19086: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19087: LD_INT 0
19089: PPUSH
// case cmd of 301 :
19090: LD_VAR 0 1
19094: PUSH
19095: LD_INT 301
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19135
19103: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19104: LD_VAR 0 6
19108: PPUSH
19109: LD_VAR 0 7
19113: PPUSH
19114: LD_VAR 0 8
19118: PPUSH
19119: LD_VAR 0 4
19123: PPUSH
19124: LD_VAR 0 5
19128: PPUSH
19129: CALL 20336 0 5
19133: GO 19256
19135: LD_INT 302
19137: DOUBLE
19138: EQUAL
19139: IFTRUE 19143
19141: GO 19180
19143: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19144: LD_VAR 0 6
19148: PPUSH
19149: LD_VAR 0 7
19153: PPUSH
19154: LD_VAR 0 8
19158: PPUSH
19159: LD_VAR 0 9
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 20427 0 6
19178: GO 19256
19180: LD_INT 303
19182: DOUBLE
19183: EQUAL
19184: IFTRUE 19188
19186: GO 19225
19188: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19189: LD_VAR 0 6
19193: PPUSH
19194: LD_VAR 0 7
19198: PPUSH
19199: LD_VAR 0 8
19203: PPUSH
19204: LD_VAR 0 9
19208: PPUSH
19209: LD_VAR 0 4
19213: PPUSH
19214: LD_VAR 0 5
19218: PPUSH
19219: CALL 19261 0 6
19223: GO 19256
19225: LD_INT 304
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 19255
19233: POP
// hHackTeleport ( unit , x , y ) ; end ;
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 4
19243: PPUSH
19244: LD_VAR 0 5
19248: PPUSH
19249: CALL 21020 0 3
19253: GO 19256
19255: POP
// end ;
19256: LD_VAR 0 12
19260: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19265: LD_VAR 0 1
19269: PUSH
19270: LD_INT 1
19272: LESS
19273: PUSH
19274: LD_VAR 0 1
19278: PUSH
19279: LD_INT 3
19281: GREATER
19282: OR
19283: PUSH
19284: LD_VAR 0 5
19288: PPUSH
19289: LD_VAR 0 6
19293: PPUSH
19294: CALL_OW 428
19298: OR
19299: IFFALSE 19303
// exit ;
19301: GO 20023
// uc_side := your_side ;
19303: LD_ADDR_OWVAR 20
19307: PUSH
19308: LD_OWVAR 2
19312: ST_TO_ADDR
// uc_nation := nation ;
19313: LD_ADDR_OWVAR 21
19317: PUSH
19318: LD_VAR 0 1
19322: ST_TO_ADDR
// bc_level = 1 ;
19323: LD_ADDR_OWVAR 43
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// case btype of 1 :
19331: LD_VAR 0 2
19335: PUSH
19336: LD_INT 1
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19355
19344: POP
// bc_type := b_depot ; 2 :
19345: LD_ADDR_OWVAR 42
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
19353: GO 19967
19355: LD_INT 2
19357: DOUBLE
19358: EQUAL
19359: IFTRUE 19363
19361: GO 19374
19363: POP
// bc_type := b_warehouse ; 3 :
19364: LD_ADDR_OWVAR 42
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
19372: GO 19967
19374: LD_INT 3
19376: DOUBLE
19377: EQUAL
19378: IFTRUE 19382
19380: GO 19393
19382: POP
// bc_type := b_lab ; 4 .. 9 :
19383: LD_ADDR_OWVAR 42
19387: PUSH
19388: LD_INT 6
19390: ST_TO_ADDR
19391: GO 19967
19393: LD_INT 4
19395: DOUBLE
19396: GREATEREQUAL
19397: IFFALSE 19405
19399: LD_INT 9
19401: DOUBLE
19402: LESSEQUAL
19403: IFTRUE 19407
19405: GO 19459
19407: POP
// begin bc_type := b_lab_half ;
19408: LD_ADDR_OWVAR 42
19412: PUSH
19413: LD_INT 7
19415: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19416: LD_ADDR_OWVAR 44
19420: PUSH
19421: LD_INT 10
19423: PUSH
19424: LD_INT 11
19426: PUSH
19427: LD_INT 12
19429: PUSH
19430: LD_INT 15
19432: PUSH
19433: LD_INT 14
19435: PUSH
19436: LD_INT 13
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: PUSH
19447: LD_VAR 0 2
19451: PUSH
19452: LD_INT 3
19454: MINUS
19455: ARRAY
19456: ST_TO_ADDR
// end ; 10 .. 13 :
19457: GO 19967
19459: LD_INT 10
19461: DOUBLE
19462: GREATEREQUAL
19463: IFFALSE 19471
19465: LD_INT 13
19467: DOUBLE
19468: LESSEQUAL
19469: IFTRUE 19473
19471: GO 19550
19473: POP
// begin bc_type := b_lab_full ;
19474: LD_ADDR_OWVAR 42
19478: PUSH
19479: LD_INT 8
19481: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19482: LD_ADDR_OWVAR 44
19486: PUSH
19487: LD_INT 10
19489: PUSH
19490: LD_INT 12
19492: PUSH
19493: LD_INT 14
19495: PUSH
19496: LD_INT 13
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: PUSH
19505: LD_VAR 0 2
19509: PUSH
19510: LD_INT 9
19512: MINUS
19513: ARRAY
19514: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19515: LD_ADDR_OWVAR 45
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_INT 15
19525: PUSH
19526: LD_INT 12
19528: PUSH
19529: LD_INT 15
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: PUSH
19538: LD_VAR 0 2
19542: PUSH
19543: LD_INT 9
19545: MINUS
19546: ARRAY
19547: ST_TO_ADDR
// end ; 14 :
19548: GO 19967
19550: LD_INT 14
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19569
19558: POP
// bc_type := b_workshop ; 15 :
19559: LD_ADDR_OWVAR 42
19563: PUSH
19564: LD_INT 2
19566: ST_TO_ADDR
19567: GO 19967
19569: LD_INT 15
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19588
19577: POP
// bc_type := b_factory ; 16 :
19578: LD_ADDR_OWVAR 42
19582: PUSH
19583: LD_INT 3
19585: ST_TO_ADDR
19586: GO 19967
19588: LD_INT 16
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19607
19596: POP
// bc_type := b_ext_gun ; 17 :
19597: LD_ADDR_OWVAR 42
19601: PUSH
19602: LD_INT 17
19604: ST_TO_ADDR
19605: GO 19967
19607: LD_INT 17
19609: DOUBLE
19610: EQUAL
19611: IFTRUE 19615
19613: GO 19643
19615: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19616: LD_ADDR_OWVAR 42
19620: PUSH
19621: LD_INT 19
19623: PUSH
19624: LD_INT 23
19626: PUSH
19627: LD_INT 19
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: PUSH
19635: LD_VAR 0 1
19639: ARRAY
19640: ST_TO_ADDR
19641: GO 19967
19643: LD_INT 18
19645: DOUBLE
19646: EQUAL
19647: IFTRUE 19651
19649: GO 19662
19651: POP
// bc_type := b_ext_radar ; 19 :
19652: LD_ADDR_OWVAR 42
19656: PUSH
19657: LD_INT 20
19659: ST_TO_ADDR
19660: GO 19967
19662: LD_INT 19
19664: DOUBLE
19665: EQUAL
19666: IFTRUE 19670
19668: GO 19681
19670: POP
// bc_type := b_ext_radio ; 20 :
19671: LD_ADDR_OWVAR 42
19675: PUSH
19676: LD_INT 22
19678: ST_TO_ADDR
19679: GO 19967
19681: LD_INT 20
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19700
19689: POP
// bc_type := b_ext_siberium ; 21 :
19690: LD_ADDR_OWVAR 42
19694: PUSH
19695: LD_INT 21
19697: ST_TO_ADDR
19698: GO 19967
19700: LD_INT 21
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19719
19708: POP
// bc_type := b_ext_computer ; 22 :
19709: LD_ADDR_OWVAR 42
19713: PUSH
19714: LD_INT 24
19716: ST_TO_ADDR
19717: GO 19967
19719: LD_INT 22
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19738
19727: POP
// bc_type := b_ext_track ; 23 :
19728: LD_ADDR_OWVAR 42
19732: PUSH
19733: LD_INT 16
19735: ST_TO_ADDR
19736: GO 19967
19738: LD_INT 23
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19757
19746: POP
// bc_type := b_ext_laser ; 24 :
19747: LD_ADDR_OWVAR 42
19751: PUSH
19752: LD_INT 25
19754: ST_TO_ADDR
19755: GO 19967
19757: LD_INT 24
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19776
19765: POP
// bc_type := b_control_tower ; 25 :
19766: LD_ADDR_OWVAR 42
19770: PUSH
19771: LD_INT 36
19773: ST_TO_ADDR
19774: GO 19967
19776: LD_INT 25
19778: DOUBLE
19779: EQUAL
19780: IFTRUE 19784
19782: GO 19795
19784: POP
// bc_type := b_breastwork ; 26 :
19785: LD_ADDR_OWVAR 42
19789: PUSH
19790: LD_INT 31
19792: ST_TO_ADDR
19793: GO 19967
19795: LD_INT 26
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 19814
19803: POP
// bc_type := b_bunker ; 27 :
19804: LD_ADDR_OWVAR 42
19808: PUSH
19809: LD_INT 32
19811: ST_TO_ADDR
19812: GO 19967
19814: LD_INT 27
19816: DOUBLE
19817: EQUAL
19818: IFTRUE 19822
19820: GO 19833
19822: POP
// bc_type := b_turret ; 28 :
19823: LD_ADDR_OWVAR 42
19827: PUSH
19828: LD_INT 33
19830: ST_TO_ADDR
19831: GO 19967
19833: LD_INT 28
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19841
19839: GO 19852
19841: POP
// bc_type := b_armoury ; 29 :
19842: LD_ADDR_OWVAR 42
19846: PUSH
19847: LD_INT 4
19849: ST_TO_ADDR
19850: GO 19967
19852: LD_INT 29
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19860
19858: GO 19871
19860: POP
// bc_type := b_barracks ; 30 :
19861: LD_ADDR_OWVAR 42
19865: PUSH
19866: LD_INT 5
19868: ST_TO_ADDR
19869: GO 19967
19871: LD_INT 30
19873: DOUBLE
19874: EQUAL
19875: IFTRUE 19879
19877: GO 19890
19879: POP
// bc_type := b_solar_power ; 31 :
19880: LD_ADDR_OWVAR 42
19884: PUSH
19885: LD_INT 27
19887: ST_TO_ADDR
19888: GO 19967
19890: LD_INT 31
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19909
19898: POP
// bc_type := b_oil_power ; 32 :
19899: LD_ADDR_OWVAR 42
19903: PUSH
19904: LD_INT 26
19906: ST_TO_ADDR
19907: GO 19967
19909: LD_INT 32
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19928
19917: POP
// bc_type := b_siberite_power ; 33 :
19918: LD_ADDR_OWVAR 42
19922: PUSH
19923: LD_INT 28
19925: ST_TO_ADDR
19926: GO 19967
19928: LD_INT 33
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19947
19936: POP
// bc_type := b_oil_mine ; 34 :
19937: LD_ADDR_OWVAR 42
19941: PUSH
19942: LD_INT 29
19944: ST_TO_ADDR
19945: GO 19967
19947: LD_INT 34
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19966
19955: POP
// bc_type := b_siberite_mine ; end ;
19956: LD_ADDR_OWVAR 42
19960: PUSH
19961: LD_INT 30
19963: ST_TO_ADDR
19964: GO 19967
19966: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19967: LD_ADDR_VAR 0 8
19971: PUSH
19972: LD_VAR 0 5
19976: PPUSH
19977: LD_VAR 0 6
19981: PPUSH
19982: LD_VAR 0 3
19986: PPUSH
19987: CALL_OW 47
19991: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19992: LD_OWVAR 42
19996: PUSH
19997: LD_INT 32
19999: PUSH
20000: LD_INT 33
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: IN
20007: IFFALSE 20023
// PlaceWeaponTurret ( b , weapon ) ;
20009: LD_VAR 0 8
20013: PPUSH
20014: LD_VAR 0 4
20018: PPUSH
20019: CALL_OW 431
// end ;
20023: LD_VAR 0 7
20027: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
20032: PPUSH
20033: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20034: LD_ADDR_VAR 0 4
20038: PUSH
20039: LD_INT 22
20041: PUSH
20042: LD_OWVAR 2
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 30
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 30
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PPUSH
20083: CALL_OW 69
20087: ST_TO_ADDR
// if not tmp then
20088: LD_VAR 0 4
20092: NOT
20093: IFFALSE 20097
// exit ;
20095: GO 20156
// for i in tmp do
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_VAR 0 4
20106: PUSH
20107: FOR_IN
20108: IFFALSE 20154
// for j = 1 to 3 do
20110: LD_ADDR_VAR 0 3
20114: PUSH
20115: DOUBLE
20116: LD_INT 1
20118: DEC
20119: ST_TO_ADDR
20120: LD_INT 3
20122: PUSH
20123: FOR_TO
20124: IFFALSE 20150
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20126: LD_VAR 0 2
20130: PPUSH
20131: CALL_OW 274
20135: PPUSH
20136: LD_VAR 0 3
20140: PPUSH
20141: LD_INT 99999
20143: PPUSH
20144: CALL_OW 277
20148: GO 20123
20150: POP
20151: POP
20152: GO 20107
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 1
20160: RET
// export function hHackSetLevel10 ; var i , j ; begin
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20166: LD_ADDR_VAR 0 2
20170: PUSH
20171: LD_INT 21
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PPUSH
20181: CALL_OW 69
20185: PUSH
20186: FOR_IN
20187: IFFALSE 20239
// if IsSelected ( i ) then
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 306
20198: IFFALSE 20237
// begin for j := 1 to 4 do
20200: LD_ADDR_VAR 0 3
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_INT 4
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20235
// SetSkill ( i , j , 10 ) ;
20216: LD_VAR 0 2
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 10
20228: PPUSH
20229: CALL_OW 237
20233: GO 20213
20235: POP
20236: POP
// end ;
20237: GO 20186
20239: POP
20240: POP
// end ;
20241: LD_VAR 0 1
20245: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
20250: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: PUSH
20287: FOR_IN
20288: IFFALSE 20329
// begin for j := 1 to 4 do
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: DOUBLE
20296: LD_INT 1
20298: DEC
20299: ST_TO_ADDR
20300: LD_INT 4
20302: PUSH
20303: FOR_TO
20304: IFFALSE 20325
// SetSkill ( i , j , 10 ) ;
20306: LD_VAR 0 2
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 10
20318: PPUSH
20319: CALL_OW 237
20323: GO 20303
20325: POP
20326: POP
// end ;
20327: GO 20287
20329: POP
20330: POP
// end ;
20331: LD_VAR 0 1
20335: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20336: LD_INT 0
20338: PPUSH
// uc_side := your_side ;
20339: LD_ADDR_OWVAR 20
20343: PUSH
20344: LD_OWVAR 2
20348: ST_TO_ADDR
// uc_nation := nation ;
20349: LD_ADDR_OWVAR 21
20353: PUSH
20354: LD_VAR 0 1
20358: ST_TO_ADDR
// InitHc ;
20359: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20363: LD_INT 0
20365: PPUSH
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20380: LD_VAR 0 4
20384: PPUSH
20385: LD_VAR 0 5
20389: PPUSH
20390: CALL_OW 428
20394: PUSH
20395: LD_INT 0
20397: EQUAL
20398: IFFALSE 20422
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20400: CALL_OW 44
20404: PPUSH
20405: LD_VAR 0 4
20409: PPUSH
20410: LD_VAR 0 5
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 48
// end ;
20422: LD_VAR 0 6
20426: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
// uc_side := your_side ;
20431: LD_ADDR_OWVAR 20
20435: PUSH
20436: LD_OWVAR 2
20440: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20441: LD_VAR 0 1
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: LD_INT 3
20454: PUSH
20455: LD_INT 4
20457: PUSH
20458: LD_INT 5
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: IN
20468: IFFALSE 20480
// uc_nation := nation_american else
20470: LD_ADDR_OWVAR 21
20474: PUSH
20475: LD_INT 1
20477: ST_TO_ADDR
20478: GO 20523
// if chassis in [ 11 , 12 , 13 , 14 ] then
20480: LD_VAR 0 1
20484: PUSH
20485: LD_INT 11
20487: PUSH
20488: LD_INT 12
20490: PUSH
20491: LD_INT 13
20493: PUSH
20494: LD_INT 14
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: IN
20503: IFFALSE 20515
// uc_nation := nation_arabian else
20505: LD_ADDR_OWVAR 21
20509: PUSH
20510: LD_INT 2
20512: ST_TO_ADDR
20513: GO 20523
// uc_nation := nation_russian ;
20515: LD_ADDR_OWVAR 21
20519: PUSH
20520: LD_INT 3
20522: ST_TO_ADDR
// vc_chassis := chassis ;
20523: LD_ADDR_OWVAR 37
20527: PUSH
20528: LD_VAR 0 1
20532: ST_TO_ADDR
// vc_engine := engine ;
20533: LD_ADDR_OWVAR 39
20537: PUSH
20538: LD_VAR 0 2
20542: ST_TO_ADDR
// vc_control := control ;
20543: LD_ADDR_OWVAR 38
20547: PUSH
20548: LD_VAR 0 3
20552: ST_TO_ADDR
// vc_weapon := weapon ;
20553: LD_ADDR_OWVAR 40
20557: PUSH
20558: LD_VAR 0 4
20562: ST_TO_ADDR
// un := CreateVehicle ;
20563: LD_ADDR_VAR 0 8
20567: PUSH
20568: CALL_OW 45
20572: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20573: LD_VAR 0 8
20577: PPUSH
20578: LD_INT 0
20580: PPUSH
20581: LD_INT 5
20583: PPUSH
20584: CALL_OW 12
20588: PPUSH
20589: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20593: LD_VAR 0 8
20597: PPUSH
20598: LD_VAR 0 5
20602: PPUSH
20603: LD_VAR 0 6
20607: PPUSH
20608: LD_INT 1
20610: PPUSH
20611: CALL_OW 48
// end ;
20615: LD_VAR 0 7
20619: RET
// export hInvincible ; every 1 do
20620: GO 20622
20622: DISABLE
// hInvincible := [ ] ;
20623: LD_ADDR_EXP 85
20627: PUSH
20628: EMPTY
20629: ST_TO_ADDR
20630: END
// every 10 do var i ;
20631: GO 20633
20633: DISABLE
20634: LD_INT 0
20636: PPUSH
// begin enable ;
20637: ENABLE
// if not hInvincible then
20638: LD_EXP 85
20642: NOT
20643: IFFALSE 20647
// exit ;
20645: GO 20691
// for i in hInvincible do
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: LD_EXP 85
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20689
// if GetLives ( i ) < 1000 then
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 256
20669: PUSH
20670: LD_INT 1000
20672: LESS
20673: IFFALSE 20687
// SetLives ( i , 1000 ) ;
20675: LD_VAR 0 1
20679: PPUSH
20680: LD_INT 1000
20682: PPUSH
20683: CALL_OW 234
20687: GO 20657
20689: POP
20690: POP
// end ;
20691: PPOPN 1
20693: END
// export function hHackInvincible ; var i ; begin
20694: LD_INT 0
20696: PPUSH
20697: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 21
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: PPUSH
20731: CALL_OW 69
20735: PUSH
20736: FOR_IN
20737: IFFALSE 20798
// if IsSelected ( i ) then
20739: LD_VAR 0 2
20743: PPUSH
20744: CALL_OW 306
20748: IFFALSE 20796
// begin if i in hInvincible then
20750: LD_VAR 0 2
20754: PUSH
20755: LD_EXP 85
20759: IN
20760: IFFALSE 20780
// hInvincible := hInvincible diff i else
20762: LD_ADDR_EXP 85
20766: PUSH
20767: LD_EXP 85
20771: PUSH
20772: LD_VAR 0 2
20776: DIFF
20777: ST_TO_ADDR
20778: GO 20796
// hInvincible := hInvincible union i ;
20780: LD_ADDR_EXP 85
20784: PUSH
20785: LD_EXP 85
20789: PUSH
20790: LD_VAR 0 2
20794: UNION
20795: ST_TO_ADDR
// end ;
20796: GO 20736
20798: POP
20799: POP
// end ;
20800: LD_VAR 0 1
20804: RET
// export function hHackInvisible ; var i , j ; begin
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
20809: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: LD_INT 21
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: PUSH
20830: FOR_IN
20831: IFFALSE 20855
// if IsSelected ( i ) then
20833: LD_VAR 0 2
20837: PPUSH
20838: CALL_OW 306
20842: IFFALSE 20853
// ComForceInvisible ( i ) ;
20844: LD_VAR 0 2
20848: PPUSH
20849: CALL_OW 496
20853: GO 20830
20855: POP
20856: POP
// end ;
20857: LD_VAR 0 1
20861: RET
// export function hHackChangeYourSide ; begin
20862: LD_INT 0
20864: PPUSH
// if your_side = 8 then
20865: LD_OWVAR 2
20869: PUSH
20870: LD_INT 8
20872: EQUAL
20873: IFFALSE 20885
// your_side := 0 else
20875: LD_ADDR_OWVAR 2
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
20883: GO 20899
// your_side := your_side + 1 ;
20885: LD_ADDR_OWVAR 2
20889: PUSH
20890: LD_OWVAR 2
20894: PUSH
20895: LD_INT 1
20897: PLUS
20898: ST_TO_ADDR
// end ;
20899: LD_VAR 0 1
20903: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20904: LD_INT 0
20906: PPUSH
20907: PPUSH
20908: PPUSH
// for i in all_units do
20909: LD_ADDR_VAR 0 2
20913: PUSH
20914: LD_OWVAR 3
20918: PUSH
20919: FOR_IN
20920: IFFALSE 20998
// if IsSelected ( i ) then
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 306
20931: IFFALSE 20996
// begin j := GetSide ( i ) ;
20933: LD_ADDR_VAR 0 3
20937: PUSH
20938: LD_VAR 0 2
20942: PPUSH
20943: CALL_OW 255
20947: ST_TO_ADDR
// if j = 8 then
20948: LD_VAR 0 3
20952: PUSH
20953: LD_INT 8
20955: EQUAL
20956: IFFALSE 20968
// j := 0 else
20958: LD_ADDR_VAR 0 3
20962: PUSH
20963: LD_INT 0
20965: ST_TO_ADDR
20966: GO 20982
// j := j + 1 ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 1
20980: PLUS
20981: ST_TO_ADDR
// SetSide ( i , j ) ;
20982: LD_VAR 0 2
20986: PPUSH
20987: LD_VAR 0 3
20991: PPUSH
20992: CALL_OW 235
// end ;
20996: GO 20919
20998: POP
20999: POP
// end ;
21000: LD_VAR 0 1
21004: RET
// export function hHackFog ; begin
21005: LD_INT 0
21007: PPUSH
// FogOff ( true ) ;
21008: LD_INT 1
21010: PPUSH
21011: CALL_OW 344
// end ;
21015: LD_VAR 0 1
21019: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21020: LD_INT 0
21022: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_VAR 0 2
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: LD_INT 1
21040: PPUSH
21041: LD_INT 1
21043: PPUSH
21044: CALL_OW 483
// CenterOnXY ( x , y ) ;
21048: LD_VAR 0 2
21052: PPUSH
21053: LD_VAR 0 3
21057: PPUSH
21058: CALL_OW 84
// end ;
21062: LD_VAR 0 4
21066: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21067: LD_INT 0
21069: PPUSH
21070: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21071: LD_VAR 0 1
21075: NOT
21076: PUSH
21077: LD_VAR 0 2
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 488
21091: NOT
21092: OR
21093: PUSH
21094: LD_VAR 0 1
21098: PPUSH
21099: CALL_OW 266
21103: PUSH
21104: LD_INT 3
21106: NONEQUAL
21107: PUSH
21108: LD_VAR 0 1
21112: PPUSH
21113: CALL_OW 247
21117: PUSH
21118: LD_INT 1
21120: EQUAL
21121: NOT
21122: AND
21123: OR
21124: IFFALSE 21128
// exit ;
21126: GO 21277
// if GetType ( factory ) = unit_human then
21128: LD_VAR 0 1
21132: PPUSH
21133: CALL_OW 247
21137: PUSH
21138: LD_INT 1
21140: EQUAL
21141: IFFALSE 21158
// factory := IsInUnit ( factory ) ;
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_VAR 0 1
21152: PPUSH
21153: CALL_OW 310
21157: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 266
21167: PUSH
21168: LD_INT 3
21170: NONEQUAL
21171: IFFALSE 21175
// exit ;
21173: GO 21277
// if HexInfo ( x , y ) = factory then
21175: LD_VAR 0 2
21179: PPUSH
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 428
21189: PUSH
21190: LD_VAR 0 1
21194: EQUAL
21195: IFFALSE 21222
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21197: LD_ADDR_EXP 86
21201: PUSH
21202: LD_EXP 86
21206: PPUSH
21207: LD_VAR 0 1
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 1
21219: ST_TO_ADDR
21220: GO 21273
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21222: LD_ADDR_EXP 86
21226: PUSH
21227: LD_EXP 86
21231: PPUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 255
21246: PUSH
21247: LD_VAR 0 1
21251: PUSH
21252: LD_VAR 0 2
21256: PUSH
21257: LD_VAR 0 3
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 1
21272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21273: CALL 21282 0 0
// end ;
21277: LD_VAR 0 4
21281: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
21286: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21287: LD_STRING resetFactoryWaypoint();
21289: PPUSH
21290: CALL_OW 559
// if factoryWaypoints then
21294: LD_EXP 86
21298: IFFALSE 21424
// begin list := PrepareArray ( factoryWaypoints ) ;
21300: LD_ADDR_VAR 0 3
21304: PUSH
21305: LD_EXP 86
21309: PPUSH
21310: CALL 67874 0 1
21314: ST_TO_ADDR
// for i := 1 to list do
21315: LD_ADDR_VAR 0 2
21319: PUSH
21320: DOUBLE
21321: LD_INT 1
21323: DEC
21324: ST_TO_ADDR
21325: LD_VAR 0 3
21329: PUSH
21330: FOR_TO
21331: IFFALSE 21422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21333: LD_STRING setFactoryWaypointXY(
21335: PUSH
21336: LD_VAR 0 3
21340: PUSH
21341: LD_VAR 0 2
21345: ARRAY
21346: PUSH
21347: LD_INT 1
21349: ARRAY
21350: STR
21351: PUSH
21352: LD_STRING ,
21354: STR
21355: PUSH
21356: LD_VAR 0 3
21360: PUSH
21361: LD_VAR 0 2
21365: ARRAY
21366: PUSH
21367: LD_INT 2
21369: ARRAY
21370: STR
21371: PUSH
21372: LD_STRING ,
21374: STR
21375: PUSH
21376: LD_VAR 0 3
21380: PUSH
21381: LD_VAR 0 2
21385: ARRAY
21386: PUSH
21387: LD_INT 3
21389: ARRAY
21390: STR
21391: PUSH
21392: LD_STRING ,
21394: STR
21395: PUSH
21396: LD_VAR 0 3
21400: PUSH
21401: LD_VAR 0 2
21405: ARRAY
21406: PUSH
21407: LD_INT 4
21409: ARRAY
21410: STR
21411: PUSH
21412: LD_STRING )
21414: STR
21415: PPUSH
21416: CALL_OW 559
21420: GO 21330
21422: POP
21423: POP
// end ; end ;
21424: LD_VAR 0 1
21428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21429: LD_INT 0
21431: PPUSH
// if HexInfo ( x , y ) = warehouse then
21432: LD_VAR 0 2
21436: PPUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: CALL_OW 428
21446: PUSH
21447: LD_VAR 0 1
21451: EQUAL
21452: IFFALSE 21479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21454: LD_ADDR_EXP 87
21458: PUSH
21459: LD_EXP 87
21463: PPUSH
21464: LD_VAR 0 1
21468: PPUSH
21469: LD_INT 0
21471: PPUSH
21472: CALL_OW 1
21476: ST_TO_ADDR
21477: GO 21530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21479: LD_ADDR_EXP 87
21483: PUSH
21484: LD_EXP 87
21488: PPUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 255
21503: PUSH
21504: LD_VAR 0 1
21508: PUSH
21509: LD_VAR 0 2
21513: PUSH
21514: LD_VAR 0 3
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: PPUSH
21525: CALL_OW 1
21529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21530: CALL 21539 0 0
// end ;
21534: LD_VAR 0 4
21538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
21543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21544: LD_STRING resetWarehouseGatheringPoints();
21546: PPUSH
21547: CALL_OW 559
// if warehouseGatheringPoints then
21551: LD_EXP 87
21555: IFFALSE 21681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21557: LD_ADDR_VAR 0 3
21561: PUSH
21562: LD_EXP 87
21566: PPUSH
21567: CALL 67874 0 1
21571: ST_TO_ADDR
// for i := 1 to list do
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: DOUBLE
21578: LD_INT 1
21580: DEC
21581: ST_TO_ADDR
21582: LD_VAR 0 3
21586: PUSH
21587: FOR_TO
21588: IFFALSE 21679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21590: LD_STRING setWarehouseGatheringPointXY(
21592: PUSH
21593: LD_VAR 0 3
21597: PUSH
21598: LD_VAR 0 2
21602: ARRAY
21603: PUSH
21604: LD_INT 1
21606: ARRAY
21607: STR
21608: PUSH
21609: LD_STRING ,
21611: STR
21612: PUSH
21613: LD_VAR 0 3
21617: PUSH
21618: LD_VAR 0 2
21622: ARRAY
21623: PUSH
21624: LD_INT 2
21626: ARRAY
21627: STR
21628: PUSH
21629: LD_STRING ,
21631: STR
21632: PUSH
21633: LD_VAR 0 3
21637: PUSH
21638: LD_VAR 0 2
21642: ARRAY
21643: PUSH
21644: LD_INT 3
21646: ARRAY
21647: STR
21648: PUSH
21649: LD_STRING ,
21651: STR
21652: PUSH
21653: LD_VAR 0 3
21657: PUSH
21658: LD_VAR 0 2
21662: ARRAY
21663: PUSH
21664: LD_INT 4
21666: ARRAY
21667: STR
21668: PUSH
21669: LD_STRING )
21671: STR
21672: PPUSH
21673: CALL_OW 559
21677: GO 21587
21679: POP
21680: POP
// end ; end ;
21681: LD_VAR 0 1
21685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21686: LD_EXP 87
21690: IFFALSE 22375
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
// begin enable ;
21706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_EXP 87
21716: PPUSH
21717: CALL 67874 0 1
21721: ST_TO_ADDR
// if not list then
21722: LD_VAR 0 3
21726: NOT
21727: IFFALSE 21731
// exit ;
21729: GO 22375
// for i := 1 to list do
21731: LD_ADDR_VAR 0 1
21735: PUSH
21736: DOUBLE
21737: LD_INT 1
21739: DEC
21740: ST_TO_ADDR
21741: LD_VAR 0 3
21745: PUSH
21746: FOR_TO
21747: IFFALSE 22373
// begin depot := list [ i ] [ 2 ] ;
21749: LD_ADDR_VAR 0 8
21753: PUSH
21754: LD_VAR 0 3
21758: PUSH
21759: LD_VAR 0 1
21763: ARRAY
21764: PUSH
21765: LD_INT 2
21767: ARRAY
21768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21769: LD_ADDR_VAR 0 5
21773: PUSH
21774: LD_VAR 0 3
21778: PUSH
21779: LD_VAR 0 1
21783: ARRAY
21784: PUSH
21785: LD_INT 1
21787: ARRAY
21788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21789: LD_VAR 0 8
21793: PPUSH
21794: CALL_OW 301
21798: PUSH
21799: LD_VAR 0 5
21803: PUSH
21804: LD_VAR 0 8
21808: PPUSH
21809: CALL_OW 255
21813: NONEQUAL
21814: OR
21815: IFFALSE 21844
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21817: LD_ADDR_EXP 87
21821: PUSH
21822: LD_EXP 87
21826: PPUSH
21827: LD_VAR 0 8
21831: PPUSH
21832: LD_INT 0
21834: PPUSH
21835: CALL_OW 1
21839: ST_TO_ADDR
// exit ;
21840: POP
21841: POP
21842: GO 22375
// end ; x := list [ i ] [ 3 ] ;
21844: LD_ADDR_VAR 0 6
21848: PUSH
21849: LD_VAR 0 3
21853: PUSH
21854: LD_VAR 0 1
21858: ARRAY
21859: PUSH
21860: LD_INT 3
21862: ARRAY
21863: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21864: LD_ADDR_VAR 0 7
21868: PUSH
21869: LD_VAR 0 3
21873: PUSH
21874: LD_VAR 0 1
21878: ARRAY
21879: PUSH
21880: LD_INT 4
21882: ARRAY
21883: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21884: LD_ADDR_VAR 0 9
21888: PUSH
21889: LD_VAR 0 6
21893: PPUSH
21894: LD_VAR 0 7
21898: PPUSH
21899: LD_INT 16
21901: PPUSH
21902: CALL 66462 0 3
21906: ST_TO_ADDR
// if not cratesNearbyPoint then
21907: LD_VAR 0 9
21911: NOT
21912: IFFALSE 21918
// exit ;
21914: POP
21915: POP
21916: GO 22375
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21918: LD_ADDR_VAR 0 4
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_VAR 0 5
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 3
21937: PUSH
21938: LD_INT 60
21940: PUSH
21941: EMPTY
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 91
21950: PUSH
21951: LD_VAR 0 8
21955: PUSH
21956: LD_INT 6
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: LD_INT 25
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 25
21979: PUSH
21980: LD_INT 16
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PPUSH
21998: CALL_OW 69
22002: PUSH
22003: LD_VAR 0 8
22007: PPUSH
22008: CALL_OW 313
22012: PPUSH
22013: LD_INT 3
22015: PUSH
22016: LD_INT 60
22018: PUSH
22019: EMPTY
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 25
22041: PUSH
22042: LD_INT 16
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PPUSH
22058: CALL_OW 72
22062: UNION
22063: ST_TO_ADDR
// if tmp then
22064: LD_VAR 0 4
22068: IFFALSE 22148
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22070: LD_ADDR_VAR 0 4
22074: PUSH
22075: LD_VAR 0 4
22079: PPUSH
22080: LD_INT 3
22082: PPUSH
22083: CALL 64431 0 2
22087: ST_TO_ADDR
// for j in tmp do
22088: LD_ADDR_VAR 0 2
22092: PUSH
22093: LD_VAR 0 4
22097: PUSH
22098: FOR_IN
22099: IFFALSE 22142
// begin if IsInUnit ( j ) then
22101: LD_VAR 0 2
22105: PPUSH
22106: CALL_OW 310
22110: IFFALSE 22121
// ComExit ( j ) ;
22112: LD_VAR 0 2
22116: PPUSH
22117: CALL 64514 0 1
// AddComCollect ( j , x , y ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 6
22130: PPUSH
22131: LD_VAR 0 7
22135: PPUSH
22136: CALL_OW 177
// end ;
22140: GO 22098
22142: POP
22143: POP
// exit ;
22144: POP
22145: POP
22146: GO 22375
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22148: LD_ADDR_VAR 0 4
22152: PUSH
22153: LD_INT 22
22155: PUSH
22156: LD_VAR 0 5
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 91
22167: PUSH
22168: LD_VAR 0 8
22172: PUSH
22173: LD_INT 8
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 34
22186: PUSH
22187: LD_INT 12
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 34
22196: PUSH
22197: LD_INT 51
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 34
22206: PUSH
22207: LD_INT 32
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 34
22216: PUSH
22217: LD_INT 89
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: PPUSH
22236: CALL_OW 69
22240: ST_TO_ADDR
// if tmp then
22241: LD_VAR 0 4
22245: IFFALSE 22371
// begin for j in tmp do
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_VAR 0 4
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22369
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22260: LD_VAR 0 2
22264: PPUSH
22265: CALL_OW 262
22269: PUSH
22270: LD_INT 3
22272: EQUAL
22273: PUSH
22274: LD_VAR 0 2
22278: PPUSH
22279: CALL_OW 261
22283: PUSH
22284: LD_INT 20
22286: GREATER
22287: OR
22288: PUSH
22289: LD_VAR 0 2
22293: PPUSH
22294: CALL_OW 314
22298: NOT
22299: AND
22300: PUSH
22301: LD_VAR 0 2
22305: PPUSH
22306: CALL_OW 263
22310: PUSH
22311: LD_INT 1
22313: NONEQUAL
22314: PUSH
22315: LD_VAR 0 2
22319: PPUSH
22320: CALL_OW 311
22324: OR
22325: AND
22326: IFFALSE 22367
// begin ComCollect ( j , x , y ) ;
22328: LD_VAR 0 2
22332: PPUSH
22333: LD_VAR 0 6
22337: PPUSH
22338: LD_VAR 0 7
22342: PPUSH
22343: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22347: LD_VAR 0 2
22351: PPUSH
22352: LD_VAR 0 8
22356: PPUSH
22357: CALL_OW 172
// exit ;
22361: POP
22362: POP
22363: POP
22364: POP
22365: GO 22375
// end ;
22367: GO 22257
22369: POP
22370: POP
// end ; end ;
22371: GO 21746
22373: POP
22374: POP
// end ; end_of_file
22375: PPOPN 9
22377: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22378: LD_INT 0
22380: PPUSH
22381: PPUSH
22382: PPUSH
22383: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 264
22393: PUSH
22394: LD_INT 91
22396: EQUAL
22397: IFFALSE 22469
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22399: LD_INT 68
22401: PPUSH
22402: LD_VAR 0 1
22406: PPUSH
22407: CALL_OW 255
22411: PPUSH
22412: CALL_OW 321
22416: PUSH
22417: LD_INT 2
22419: EQUAL
22420: IFFALSE 22432
// eff := 70 else
22422: LD_ADDR_VAR 0 4
22426: PUSH
22427: LD_INT 70
22429: ST_TO_ADDR
22430: GO 22440
// eff := 30 ;
22432: LD_ADDR_VAR 0 4
22436: PUSH
22437: LD_INT 30
22439: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 250
22449: PPUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 251
22459: PPUSH
22460: LD_VAR 0 4
22464: PPUSH
22465: CALL_OW 495
// end ; end ;
22469: LD_VAR 0 2
22473: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22474: LD_INT 0
22476: PPUSH
// end ;
22477: LD_VAR 0 4
22481: RET
// export function SOS_Command ( cmd ) ; begin
22482: LD_INT 0
22484: PPUSH
// end ;
22485: LD_VAR 0 2
22489: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22490: LD_INT 0
22492: PPUSH
// end ;
22493: LD_VAR 0 6
22497: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
// if not vehicle or not factory then
22502: LD_VAR 0 1
22506: NOT
22507: PUSH
22508: LD_VAR 0 2
22512: NOT
22513: OR
22514: IFFALSE 22518
// exit ;
22516: GO 22749
// if factoryWaypoints >= factory then
22518: LD_EXP 86
22522: PUSH
22523: LD_VAR 0 2
22527: GREATEREQUAL
22528: IFFALSE 22749
// if factoryWaypoints [ factory ] then
22530: LD_EXP 86
22534: PUSH
22535: LD_VAR 0 2
22539: ARRAY
22540: IFFALSE 22749
// begin if GetControl ( vehicle ) = control_manual then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 263
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: IFFALSE 22636
// begin driver := IsDrivenBy ( vehicle ) ;
22557: LD_ADDR_VAR 0 4
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 311
22571: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22572: LD_VAR 0 4
22576: PPUSH
22577: LD_EXP 86
22581: PUSH
22582: LD_VAR 0 2
22586: ARRAY
22587: PUSH
22588: LD_INT 3
22590: ARRAY
22591: PPUSH
22592: LD_EXP 86
22596: PUSH
22597: LD_VAR 0 2
22601: ARRAY
22602: PUSH
22603: LD_INT 4
22605: ARRAY
22606: PPUSH
22607: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22611: LD_VAR 0 4
22615: PPUSH
22616: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22620: LD_VAR 0 4
22624: PPUSH
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 180
// end else
22634: GO 22749
// if GetControl ( vehicle ) = control_remote then
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 263
22645: PUSH
22646: LD_INT 2
22648: EQUAL
22649: IFFALSE 22710
// begin wait ( 0 0$2 ) ;
22651: LD_INT 70
22653: PPUSH
22654: CALL_OW 67
// if Connect ( vehicle ) then
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL 34773 0 1
22667: IFFALSE 22708
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_EXP 86
22678: PUSH
22679: LD_VAR 0 2
22683: ARRAY
22684: PUSH
22685: LD_INT 3
22687: ARRAY
22688: PPUSH
22689: LD_EXP 86
22693: PUSH
22694: LD_VAR 0 2
22698: ARRAY
22699: PUSH
22700: LD_INT 4
22702: ARRAY
22703: PPUSH
22704: CALL_OW 171
// end else
22708: GO 22749
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_EXP 86
22719: PUSH
22720: LD_VAR 0 2
22724: ARRAY
22725: PUSH
22726: LD_INT 3
22728: ARRAY
22729: PPUSH
22730: LD_EXP 86
22734: PUSH
22735: LD_VAR 0 2
22739: ARRAY
22740: PUSH
22741: LD_INT 4
22743: ARRAY
22744: PPUSH
22745: CALL_OW 171
// end ; end ;
22749: LD_VAR 0 3
22753: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22754: LD_INT 0
22756: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22757: LD_VAR 0 1
22761: PUSH
22762: LD_INT 250
22764: EQUAL
22765: PUSH
22766: LD_VAR 0 2
22770: PPUSH
22771: CALL_OW 264
22775: PUSH
22776: LD_INT 81
22778: EQUAL
22779: AND
22780: IFFALSE 22801
// MinerPlaceMine ( unit , x , y ) ;
22782: LD_VAR 0 2
22786: PPUSH
22787: LD_VAR 0 4
22791: PPUSH
22792: LD_VAR 0 5
22796: PPUSH
22797: CALL 25186 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22801: LD_VAR 0 1
22805: PUSH
22806: LD_INT 251
22808: EQUAL
22809: PUSH
22810: LD_VAR 0 2
22814: PPUSH
22815: CALL_OW 264
22819: PUSH
22820: LD_INT 81
22822: EQUAL
22823: AND
22824: IFFALSE 22845
// MinerDetonateMine ( unit , x , y ) ;
22826: LD_VAR 0 2
22830: PPUSH
22831: LD_VAR 0 4
22835: PPUSH
22836: LD_VAR 0 5
22840: PPUSH
22841: CALL 25461 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22845: LD_VAR 0 1
22849: PUSH
22850: LD_INT 252
22852: EQUAL
22853: PUSH
22854: LD_VAR 0 2
22858: PPUSH
22859: CALL_OW 264
22863: PUSH
22864: LD_INT 81
22866: EQUAL
22867: AND
22868: IFFALSE 22889
// MinerCreateMinefield ( unit , x , y ) ;
22870: LD_VAR 0 2
22874: PPUSH
22875: LD_VAR 0 4
22879: PPUSH
22880: LD_VAR 0 5
22884: PPUSH
22885: CALL 25878 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22889: LD_VAR 0 1
22893: PUSH
22894: LD_INT 253
22896: EQUAL
22897: PUSH
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 257
22907: PUSH
22908: LD_INT 5
22910: EQUAL
22911: AND
22912: IFFALSE 22933
// ComBinocular ( unit , x , y ) ;
22914: LD_VAR 0 2
22918: PPUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 5
22928: PPUSH
22929: CALL 26247 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22933: LD_VAR 0 1
22937: PUSH
22938: LD_INT 254
22940: EQUAL
22941: PUSH
22942: LD_VAR 0 2
22946: PPUSH
22947: CALL_OW 264
22951: PUSH
22952: LD_INT 99
22954: EQUAL
22955: AND
22956: PUSH
22957: LD_VAR 0 3
22961: PPUSH
22962: CALL_OW 263
22966: PUSH
22967: LD_INT 3
22969: EQUAL
22970: AND
22971: IFFALSE 22987
// HackDestroyVehicle ( unit , selectedUnit ) ;
22973: LD_VAR 0 2
22977: PPUSH
22978: LD_VAR 0 3
22982: PPUSH
22983: CALL 24550 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22987: LD_VAR 0 1
22991: PUSH
22992: LD_INT 255
22994: EQUAL
22995: PUSH
22996: LD_VAR 0 2
23000: PPUSH
23001: CALL_OW 264
23005: PUSH
23006: LD_INT 14
23008: PUSH
23009: LD_INT 53
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: IN
23016: AND
23017: PUSH
23018: LD_VAR 0 4
23022: PPUSH
23023: LD_VAR 0 5
23027: PPUSH
23028: CALL_OW 488
23032: AND
23033: IFFALSE 23057
// CutTreeXYR ( unit , x , y , 12 ) ;
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 4
23044: PPUSH
23045: LD_VAR 0 5
23049: PPUSH
23050: LD_INT 12
23052: PPUSH
23053: CALL 23120 0 4
// if cmd = 256 then
23057: LD_VAR 0 1
23061: PUSH
23062: LD_INT 256
23064: EQUAL
23065: IFFALSE 23086
// SetFactoryWaypoint ( unit , x , y ) ;
23067: LD_VAR 0 2
23071: PPUSH
23072: LD_VAR 0 4
23076: PPUSH
23077: LD_VAR 0 5
23081: PPUSH
23082: CALL 21067 0 3
// if cmd = 257 then
23086: LD_VAR 0 1
23090: PUSH
23091: LD_INT 257
23093: EQUAL
23094: IFFALSE 23115
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23096: LD_VAR 0 2
23100: PPUSH
23101: LD_VAR 0 4
23105: PPUSH
23106: LD_VAR 0 5
23110: PPUSH
23111: CALL 21429 0 3
// end ;
23115: LD_VAR 0 6
23119: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23120: LD_INT 0
23122: PPUSH
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23131: LD_VAR 0 1
23135: NOT
23136: PUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: LD_VAR 0 3
23146: PPUSH
23147: CALL_OW 488
23151: NOT
23152: OR
23153: PUSH
23154: LD_VAR 0 4
23158: NOT
23159: OR
23160: IFFALSE 23164
// exit ;
23162: GO 23504
// list := [ ] ;
23164: LD_ADDR_VAR 0 13
23168: PUSH
23169: EMPTY
23170: ST_TO_ADDR
// if x - r < 0 then
23171: LD_VAR 0 2
23175: PUSH
23176: LD_VAR 0 4
23180: MINUS
23181: PUSH
23182: LD_INT 0
23184: LESS
23185: IFFALSE 23197
// min_x := 0 else
23187: LD_ADDR_VAR 0 7
23191: PUSH
23192: LD_INT 0
23194: ST_TO_ADDR
23195: GO 23213
// min_x := x - r ;
23197: LD_ADDR_VAR 0 7
23201: PUSH
23202: LD_VAR 0 2
23206: PUSH
23207: LD_VAR 0 4
23211: MINUS
23212: ST_TO_ADDR
// if y - r < 0 then
23213: LD_VAR 0 3
23217: PUSH
23218: LD_VAR 0 4
23222: MINUS
23223: PUSH
23224: LD_INT 0
23226: LESS
23227: IFFALSE 23239
// min_y := 0 else
23229: LD_ADDR_VAR 0 8
23233: PUSH
23234: LD_INT 0
23236: ST_TO_ADDR
23237: GO 23255
// min_y := y - r ;
23239: LD_ADDR_VAR 0 8
23243: PUSH
23244: LD_VAR 0 3
23248: PUSH
23249: LD_VAR 0 4
23253: MINUS
23254: ST_TO_ADDR
// max_x := x + r ;
23255: LD_ADDR_VAR 0 9
23259: PUSH
23260: LD_VAR 0 2
23264: PUSH
23265: LD_VAR 0 4
23269: PLUS
23270: ST_TO_ADDR
// max_y := y + r ;
23271: LD_ADDR_VAR 0 10
23275: PUSH
23276: LD_VAR 0 3
23280: PUSH
23281: LD_VAR 0 4
23285: PLUS
23286: ST_TO_ADDR
// for _x = min_x to max_x do
23287: LD_ADDR_VAR 0 11
23291: PUSH
23292: DOUBLE
23293: LD_VAR 0 7
23297: DEC
23298: ST_TO_ADDR
23299: LD_VAR 0 9
23303: PUSH
23304: FOR_TO
23305: IFFALSE 23422
// for _y = min_y to max_y do
23307: LD_ADDR_VAR 0 12
23311: PUSH
23312: DOUBLE
23313: LD_VAR 0 8
23317: DEC
23318: ST_TO_ADDR
23319: LD_VAR 0 10
23323: PUSH
23324: FOR_TO
23325: IFFALSE 23418
// begin if not ValidHex ( _x , _y ) then
23327: LD_VAR 0 11
23331: PPUSH
23332: LD_VAR 0 12
23336: PPUSH
23337: CALL_OW 488
23341: NOT
23342: IFFALSE 23346
// continue ;
23344: GO 23324
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23346: LD_VAR 0 11
23350: PPUSH
23351: LD_VAR 0 12
23355: PPUSH
23356: CALL_OW 351
23360: PUSH
23361: LD_VAR 0 11
23365: PPUSH
23366: LD_VAR 0 12
23370: PPUSH
23371: CALL_OW 554
23375: AND
23376: IFFALSE 23416
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23378: LD_ADDR_VAR 0 13
23382: PUSH
23383: LD_VAR 0 13
23387: PPUSH
23388: LD_VAR 0 13
23392: PUSH
23393: LD_INT 1
23395: PLUS
23396: PPUSH
23397: LD_VAR 0 11
23401: PUSH
23402: LD_VAR 0 12
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PPUSH
23411: CALL_OW 2
23415: ST_TO_ADDR
// end ;
23416: GO 23324
23418: POP
23419: POP
23420: GO 23304
23422: POP
23423: POP
// if not list then
23424: LD_VAR 0 13
23428: NOT
23429: IFFALSE 23433
// exit ;
23431: GO 23504
// for i in list do
23433: LD_ADDR_VAR 0 6
23437: PUSH
23438: LD_VAR 0 13
23442: PUSH
23443: FOR_IN
23444: IFFALSE 23502
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23446: LD_VAR 0 1
23450: PPUSH
23451: LD_STRING M
23453: PUSH
23454: LD_VAR 0 6
23458: PUSH
23459: LD_INT 1
23461: ARRAY
23462: PUSH
23463: LD_VAR 0 6
23467: PUSH
23468: LD_INT 2
23470: ARRAY
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: PPUSH
23496: CALL_OW 447
23500: GO 23443
23502: POP
23503: POP
// end ;
23504: LD_VAR 0 5
23508: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23509: LD_EXP 89
23513: NOT
23514: IFFALSE 23564
23516: GO 23518
23518: DISABLE
// begin initHack := true ;
23519: LD_ADDR_EXP 89
23523: PUSH
23524: LD_INT 1
23526: ST_TO_ADDR
// hackTanks := [ ] ;
23527: LD_ADDR_EXP 90
23531: PUSH
23532: EMPTY
23533: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23534: LD_ADDR_EXP 91
23538: PUSH
23539: EMPTY
23540: ST_TO_ADDR
// hackLimit := 3 ;
23541: LD_ADDR_EXP 92
23545: PUSH
23546: LD_INT 3
23548: ST_TO_ADDR
// hackDist := 12 ;
23549: LD_ADDR_EXP 93
23553: PUSH
23554: LD_INT 12
23556: ST_TO_ADDR
// hackCounter := [ ] ;
23557: LD_ADDR_EXP 94
23561: PUSH
23562: EMPTY
23563: ST_TO_ADDR
// end ;
23564: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23565: LD_EXP 89
23569: PUSH
23570: LD_INT 34
23572: PUSH
23573: LD_INT 99
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PPUSH
23580: CALL_OW 69
23584: AND
23585: IFFALSE 23838
23587: GO 23589
23589: DISABLE
23590: LD_INT 0
23592: PPUSH
23593: PPUSH
// begin enable ;
23594: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23595: LD_ADDR_VAR 0 1
23599: PUSH
23600: LD_INT 34
23602: PUSH
23603: LD_INT 99
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PPUSH
23610: CALL_OW 69
23614: PUSH
23615: FOR_IN
23616: IFFALSE 23836
// begin if not i in hackTanks then
23618: LD_VAR 0 1
23622: PUSH
23623: LD_EXP 90
23627: IN
23628: NOT
23629: IFFALSE 23712
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23631: LD_ADDR_EXP 90
23635: PUSH
23636: LD_EXP 90
23640: PPUSH
23641: LD_EXP 90
23645: PUSH
23646: LD_INT 1
23648: PLUS
23649: PPUSH
23650: LD_VAR 0 1
23654: PPUSH
23655: CALL_OW 1
23659: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23660: LD_ADDR_EXP 91
23664: PUSH
23665: LD_EXP 91
23669: PPUSH
23670: LD_EXP 91
23674: PUSH
23675: LD_INT 1
23677: PLUS
23678: PPUSH
23679: EMPTY
23680: PPUSH
23681: CALL_OW 1
23685: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23686: LD_ADDR_EXP 94
23690: PUSH
23691: LD_EXP 94
23695: PPUSH
23696: LD_EXP 94
23700: PUSH
23701: LD_INT 1
23703: PLUS
23704: PPUSH
23705: EMPTY
23706: PPUSH
23707: CALL_OW 1
23711: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 302
23721: NOT
23722: IFFALSE 23735
// begin HackUnlinkAll ( i ) ;
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL 23841 0 1
// continue ;
23733: GO 23615
// end ; HackCheckCapturedStatus ( i ) ;
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL 24284 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23744: LD_ADDR_VAR 0 2
23748: PUSH
23749: LD_INT 81
23751: PUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 255
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 33
23768: PUSH
23769: LD_INT 3
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 91
23778: PUSH
23779: LD_VAR 0 1
23783: PUSH
23784: LD_EXP 93
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 50
23796: PUSH
23797: EMPTY
23798: LIST
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: PPUSH
23806: CALL_OW 69
23810: ST_TO_ADDR
// if not tmp then
23811: LD_VAR 0 2
23815: NOT
23816: IFFALSE 23820
// continue ;
23818: GO 23615
// HackLink ( i , tmp ) ;
23820: LD_VAR 0 1
23824: PPUSH
23825: LD_VAR 0 2
23829: PPUSH
23830: CALL 23977 0 2
// end ;
23834: GO 23615
23836: POP
23837: POP
// end ;
23838: PPOPN 2
23840: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23841: LD_INT 0
23843: PPUSH
23844: PPUSH
23845: PPUSH
// if not hack in hackTanks then
23846: LD_VAR 0 1
23850: PUSH
23851: LD_EXP 90
23855: IN
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23972
// index := GetElementIndex ( hackTanks , hack ) ;
23861: LD_ADDR_VAR 0 4
23865: PUSH
23866: LD_EXP 90
23870: PPUSH
23871: LD_VAR 0 1
23875: PPUSH
23876: CALL 31589 0 2
23880: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23881: LD_EXP 91
23885: PUSH
23886: LD_VAR 0 4
23890: ARRAY
23891: IFFALSE 23972
// begin for i in hackTanksCaptured [ index ] do
23893: LD_ADDR_VAR 0 3
23897: PUSH
23898: LD_EXP 91
23902: PUSH
23903: LD_VAR 0 4
23907: ARRAY
23908: PUSH
23909: FOR_IN
23910: IFFALSE 23936
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23912: LD_VAR 0 3
23916: PUSH
23917: LD_INT 1
23919: ARRAY
23920: PPUSH
23921: LD_VAR 0 3
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: PPUSH
23930: CALL_OW 235
23934: GO 23909
23936: POP
23937: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23938: LD_ADDR_EXP 91
23942: PUSH
23943: LD_EXP 91
23947: PPUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: EMPTY
23954: PPUSH
23955: CALL_OW 1
23959: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23960: LD_VAR 0 1
23964: PPUSH
23965: LD_INT 0
23967: PPUSH
23968: CALL_OW 505
// end ; end ;
23972: LD_VAR 0 2
23976: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
// if not hack in hackTanks or not vehicles then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_EXP 90
23991: IN
23992: NOT
23993: PUSH
23994: LD_VAR 0 2
23998: NOT
23999: OR
24000: IFFALSE 24004
// exit ;
24002: GO 24279
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24004: LD_ADDR_VAR 0 2
24008: PUSH
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_VAR 0 2
24018: PPUSH
24019: LD_INT 1
24021: PPUSH
24022: LD_INT 1
24024: PPUSH
24025: CALL 32239 0 4
24029: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_EXP 90
24039: PPUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL 31589 0 2
24049: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24050: LD_EXP 91
24054: PUSH
24055: LD_VAR 0 5
24059: ARRAY
24060: PUSH
24061: LD_EXP 92
24065: LESS
24066: IFFALSE 24255
// begin for i := 1 to vehicles do
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: DOUBLE
24074: LD_INT 1
24076: DEC
24077: ST_TO_ADDR
24078: LD_VAR 0 2
24082: PUSH
24083: FOR_TO
24084: IFFALSE 24253
// begin if hackTanksCaptured [ index ] = hackLimit then
24086: LD_EXP 91
24090: PUSH
24091: LD_VAR 0 5
24095: ARRAY
24096: PUSH
24097: LD_EXP 92
24101: EQUAL
24102: IFFALSE 24106
// break ;
24104: GO 24253
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24106: LD_ADDR_EXP 94
24110: PUSH
24111: LD_EXP 94
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: LD_EXP 94
24125: PUSH
24126: LD_VAR 0 5
24130: ARRAY
24131: PUSH
24132: LD_INT 1
24134: PLUS
24135: PPUSH
24136: CALL_OW 1
24140: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24141: LD_ADDR_EXP 91
24145: PUSH
24146: LD_EXP 91
24150: PPUSH
24151: LD_VAR 0 5
24155: PUSH
24156: LD_EXP 91
24160: PUSH
24161: LD_VAR 0 5
24165: ARRAY
24166: PUSH
24167: LD_INT 1
24169: PLUS
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PPUSH
24175: LD_VAR 0 2
24179: PUSH
24180: LD_VAR 0 4
24184: ARRAY
24185: PUSH
24186: LD_VAR 0 2
24190: PUSH
24191: LD_VAR 0 4
24195: ARRAY
24196: PPUSH
24197: CALL_OW 255
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL 31804 0 3
24210: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24211: LD_VAR 0 2
24215: PUSH
24216: LD_VAR 0 4
24220: ARRAY
24221: PPUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 255
24231: PPUSH
24232: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24236: LD_VAR 0 2
24240: PUSH
24241: LD_VAR 0 4
24245: ARRAY
24246: PPUSH
24247: CALL_OW 141
// end ;
24251: GO 24083
24253: POP
24254: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24255: LD_VAR 0 1
24259: PPUSH
24260: LD_EXP 91
24264: PUSH
24265: LD_VAR 0 5
24269: ARRAY
24270: PUSH
24271: LD_INT 0
24273: PLUS
24274: PPUSH
24275: CALL_OW 505
// end ;
24279: LD_VAR 0 3
24283: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
// if not hack in hackTanks then
24290: LD_VAR 0 1
24294: PUSH
24295: LD_EXP 90
24299: IN
24300: NOT
24301: IFFALSE 24305
// exit ;
24303: GO 24545
// index := GetElementIndex ( hackTanks , hack ) ;
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: LD_EXP 90
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL 31589 0 2
24324: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: DOUBLE
24331: LD_EXP 91
24335: PUSH
24336: LD_VAR 0 4
24340: ARRAY
24341: INC
24342: ST_TO_ADDR
24343: LD_INT 1
24345: PUSH
24346: FOR_DOWNTO
24347: IFFALSE 24519
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24349: LD_ADDR_VAR 0 5
24353: PUSH
24354: LD_EXP 91
24358: PUSH
24359: LD_VAR 0 4
24363: ARRAY
24364: PUSH
24365: LD_VAR 0 3
24369: ARRAY
24370: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24371: LD_VAR 0 5
24375: PUSH
24376: LD_INT 1
24378: ARRAY
24379: PPUSH
24380: CALL_OW 302
24384: NOT
24385: PUSH
24386: LD_VAR 0 5
24390: PUSH
24391: LD_INT 1
24393: ARRAY
24394: PPUSH
24395: CALL_OW 255
24399: PUSH
24400: LD_VAR 0 1
24404: PPUSH
24405: CALL_OW 255
24409: NONEQUAL
24410: OR
24411: IFFALSE 24517
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24413: LD_VAR 0 5
24417: PUSH
24418: LD_INT 1
24420: ARRAY
24421: PPUSH
24422: CALL_OW 305
24426: PUSH
24427: LD_VAR 0 5
24431: PUSH
24432: LD_INT 1
24434: ARRAY
24435: PPUSH
24436: CALL_OW 255
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 255
24450: EQUAL
24451: AND
24452: IFFALSE 24476
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24454: LD_VAR 0 5
24458: PUSH
24459: LD_INT 1
24461: ARRAY
24462: PPUSH
24463: LD_VAR 0 5
24467: PUSH
24468: LD_INT 2
24470: ARRAY
24471: PPUSH
24472: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24476: LD_ADDR_EXP 91
24480: PUSH
24481: LD_EXP 91
24485: PPUSH
24486: LD_VAR 0 4
24490: PPUSH
24491: LD_EXP 91
24495: PUSH
24496: LD_VAR 0 4
24500: ARRAY
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: CALL_OW 3
24511: PPUSH
24512: CALL_OW 1
24516: ST_TO_ADDR
// end ; end ;
24517: GO 24346
24519: POP
24520: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_EXP 91
24530: PUSH
24531: LD_VAR 0 4
24535: ARRAY
24536: PUSH
24537: LD_INT 0
24539: PLUS
24540: PPUSH
24541: CALL_OW 505
// end ;
24545: LD_VAR 0 2
24549: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24550: LD_INT 0
24552: PPUSH
24553: PPUSH
24554: PPUSH
24555: PPUSH
// if not hack in hackTanks then
24556: LD_VAR 0 1
24560: PUSH
24561: LD_EXP 90
24565: IN
24566: NOT
24567: IFFALSE 24571
// exit ;
24569: GO 24656
// index := GetElementIndex ( hackTanks , hack ) ;
24571: LD_ADDR_VAR 0 5
24575: PUSH
24576: LD_EXP 90
24580: PPUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL 31589 0 2
24590: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24591: LD_ADDR_VAR 0 4
24595: PUSH
24596: DOUBLE
24597: LD_INT 1
24599: DEC
24600: ST_TO_ADDR
24601: LD_EXP 91
24605: PUSH
24606: LD_VAR 0 5
24610: ARRAY
24611: PUSH
24612: FOR_TO
24613: IFFALSE 24654
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24615: LD_EXP 91
24619: PUSH
24620: LD_VAR 0 5
24624: ARRAY
24625: PUSH
24626: LD_VAR 0 4
24630: ARRAY
24631: PUSH
24632: LD_INT 1
24634: ARRAY
24635: PUSH
24636: LD_VAR 0 2
24640: EQUAL
24641: IFFALSE 24652
// KillUnit ( vehicle ) ;
24643: LD_VAR 0 2
24647: PPUSH
24648: CALL_OW 66
24652: GO 24612
24654: POP
24655: POP
// end ;
24656: LD_VAR 0 3
24660: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24661: LD_EXP 95
24665: NOT
24666: IFFALSE 24701
24668: GO 24670
24670: DISABLE
// begin initMiner := true ;
24671: LD_ADDR_EXP 95
24675: PUSH
24676: LD_INT 1
24678: ST_TO_ADDR
// minersList := [ ] ;
24679: LD_ADDR_EXP 96
24683: PUSH
24684: EMPTY
24685: ST_TO_ADDR
// minerMinesList := [ ] ;
24686: LD_ADDR_EXP 97
24690: PUSH
24691: EMPTY
24692: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24693: LD_ADDR_EXP 98
24697: PUSH
24698: LD_INT 5
24700: ST_TO_ADDR
// end ;
24701: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24702: LD_EXP 95
24706: PUSH
24707: LD_INT 34
24709: PUSH
24710: LD_INT 81
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PPUSH
24717: CALL_OW 69
24721: AND
24722: IFFALSE 25183
24724: GO 24726
24726: DISABLE
24727: LD_INT 0
24729: PPUSH
24730: PPUSH
24731: PPUSH
24732: PPUSH
// begin enable ;
24733: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24734: LD_ADDR_VAR 0 1
24738: PUSH
24739: LD_INT 34
24741: PUSH
24742: LD_INT 81
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 69
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24827
// begin if not i in minersList then
24757: LD_VAR 0 1
24761: PUSH
24762: LD_EXP 96
24766: IN
24767: NOT
24768: IFFALSE 24825
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24770: LD_ADDR_EXP 96
24774: PUSH
24775: LD_EXP 96
24779: PPUSH
24780: LD_EXP 96
24784: PUSH
24785: LD_INT 1
24787: PLUS
24788: PPUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 1
24798: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24799: LD_ADDR_EXP 97
24803: PUSH
24804: LD_EXP 97
24808: PPUSH
24809: LD_EXP 97
24813: PUSH
24814: LD_INT 1
24816: PLUS
24817: PPUSH
24818: EMPTY
24819: PPUSH
24820: CALL_OW 1
24824: ST_TO_ADDR
// end end ;
24825: GO 24754
24827: POP
24828: POP
// for i := minerMinesList downto 1 do
24829: LD_ADDR_VAR 0 1
24833: PUSH
24834: DOUBLE
24835: LD_EXP 97
24839: INC
24840: ST_TO_ADDR
24841: LD_INT 1
24843: PUSH
24844: FOR_DOWNTO
24845: IFFALSE 25181
// begin if IsLive ( minersList [ i ] ) then
24847: LD_EXP 96
24851: PUSH
24852: LD_VAR 0 1
24856: ARRAY
24857: PPUSH
24858: CALL_OW 300
24862: IFFALSE 24890
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24864: LD_EXP 96
24868: PUSH
24869: LD_VAR 0 1
24873: ARRAY
24874: PPUSH
24875: LD_EXP 97
24879: PUSH
24880: LD_VAR 0 1
24884: ARRAY
24885: PPUSH
24886: CALL_OW 505
// if not minerMinesList [ i ] then
24890: LD_EXP 97
24894: PUSH
24895: LD_VAR 0 1
24899: ARRAY
24900: NOT
24901: IFFALSE 24905
// continue ;
24903: GO 24844
// for j := minerMinesList [ i ] downto 1 do
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: DOUBLE
24911: LD_EXP 97
24915: PUSH
24916: LD_VAR 0 1
24920: ARRAY
24921: INC
24922: ST_TO_ADDR
24923: LD_INT 1
24925: PUSH
24926: FOR_DOWNTO
24927: IFFALSE 25177
// begin side := GetSide ( minersList [ i ] ) ;
24929: LD_ADDR_VAR 0 3
24933: PUSH
24934: LD_EXP 96
24938: PUSH
24939: LD_VAR 0 1
24943: ARRAY
24944: PPUSH
24945: CALL_OW 255
24949: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24950: LD_ADDR_VAR 0 4
24954: PUSH
24955: LD_EXP 97
24959: PUSH
24960: LD_VAR 0 1
24964: ARRAY
24965: PUSH
24966: LD_VAR 0 2
24970: ARRAY
24971: PUSH
24972: LD_INT 1
24974: ARRAY
24975: PPUSH
24976: LD_EXP 97
24980: PUSH
24981: LD_VAR 0 1
24985: ARRAY
24986: PUSH
24987: LD_VAR 0 2
24991: ARRAY
24992: PUSH
24993: LD_INT 2
24995: ARRAY
24996: PPUSH
24997: CALL_OW 428
25001: ST_TO_ADDR
// if not tmp then
25002: LD_VAR 0 4
25006: NOT
25007: IFFALSE 25011
// continue ;
25009: GO 24926
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25011: LD_VAR 0 4
25015: PUSH
25016: LD_INT 81
25018: PUSH
25019: LD_VAR 0 3
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PPUSH
25028: CALL_OW 69
25032: IN
25033: PUSH
25034: LD_EXP 97
25038: PUSH
25039: LD_VAR 0 1
25043: ARRAY
25044: PUSH
25045: LD_VAR 0 2
25049: ARRAY
25050: PUSH
25051: LD_INT 1
25053: ARRAY
25054: PPUSH
25055: LD_EXP 97
25059: PUSH
25060: LD_VAR 0 1
25064: ARRAY
25065: PUSH
25066: LD_VAR 0 2
25070: ARRAY
25071: PUSH
25072: LD_INT 2
25074: ARRAY
25075: PPUSH
25076: CALL_OW 458
25080: AND
25081: IFFALSE 25175
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25083: LD_EXP 97
25087: PUSH
25088: LD_VAR 0 1
25092: ARRAY
25093: PUSH
25094: LD_VAR 0 2
25098: ARRAY
25099: PUSH
25100: LD_INT 1
25102: ARRAY
25103: PPUSH
25104: LD_EXP 97
25108: PUSH
25109: LD_VAR 0 1
25113: ARRAY
25114: PUSH
25115: LD_VAR 0 2
25119: ARRAY
25120: PUSH
25121: LD_INT 2
25123: ARRAY
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25134: LD_ADDR_EXP 97
25138: PUSH
25139: LD_EXP 97
25143: PPUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_EXP 97
25153: PUSH
25154: LD_VAR 0 1
25158: ARRAY
25159: PPUSH
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 3
25169: PPUSH
25170: CALL_OW 1
25174: ST_TO_ADDR
// end ; end ;
25175: GO 24926
25177: POP
25178: POP
// end ;
25179: GO 24844
25181: POP
25182: POP
// end ;
25183: PPOPN 4
25185: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
// result := false ;
25190: LD_ADDR_VAR 0 4
25194: PUSH
25195: LD_INT 0
25197: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 264
25207: PUSH
25208: LD_INT 81
25210: EQUAL
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25456
// index := GetElementIndex ( minersList , unit ) ;
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: LD_EXP 96
25225: PPUSH
25226: LD_VAR 0 1
25230: PPUSH
25231: CALL 31589 0 2
25235: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25236: LD_EXP 97
25240: PUSH
25241: LD_VAR 0 5
25245: ARRAY
25246: PUSH
25247: LD_EXP 98
25251: GREATEREQUAL
25252: IFFALSE 25256
// exit ;
25254: GO 25456
// ComMoveXY ( unit , x , y ) ;
25256: LD_VAR 0 1
25260: PPUSH
25261: LD_VAR 0 2
25265: PPUSH
25266: LD_VAR 0 3
25270: PPUSH
25271: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25275: LD_INT 35
25277: PPUSH
25278: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25282: LD_VAR 0 1
25286: PPUSH
25287: LD_VAR 0 2
25291: PPUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: CALL 62925 0 3
25301: NOT
25302: PUSH
25303: LD_VAR 0 1
25307: PPUSH
25308: CALL_OW 314
25312: AND
25313: IFFALSE 25317
// exit ;
25315: GO 25456
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25317: LD_VAR 0 2
25321: PPUSH
25322: LD_VAR 0 3
25326: PPUSH
25327: CALL_OW 428
25331: PUSH
25332: LD_VAR 0 1
25336: EQUAL
25337: PUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 314
25347: NOT
25348: AND
25349: IFFALSE 25275
// PlaySoundXY ( x , y , PlantMine ) ;
25351: LD_VAR 0 2
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_STRING PlantMine
25363: PPUSH
25364: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25368: LD_VAR 0 2
25372: PPUSH
25373: LD_VAR 0 3
25377: PPUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: CALL_OW 255
25387: PPUSH
25388: LD_INT 0
25390: PPUSH
25391: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25395: LD_ADDR_EXP 97
25399: PUSH
25400: LD_EXP 97
25404: PPUSH
25405: LD_VAR 0 5
25409: PUSH
25410: LD_EXP 97
25414: PUSH
25415: LD_VAR 0 5
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: PLUS
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PPUSH
25429: LD_VAR 0 2
25433: PUSH
25434: LD_VAR 0 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PPUSH
25443: CALL 31804 0 3
25447: ST_TO_ADDR
// result := true ;
25448: LD_ADDR_VAR 0 4
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// end ;
25456: LD_VAR 0 4
25460: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
25465: PPUSH
// if not unit in minersList then
25466: LD_VAR 0 1
25470: PUSH
25471: LD_EXP 96
25475: IN
25476: NOT
25477: IFFALSE 25481
// exit ;
25479: GO 25873
// index := GetElementIndex ( minersList , unit ) ;
25481: LD_ADDR_VAR 0 6
25485: PUSH
25486: LD_EXP 96
25490: PPUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL 31589 0 2
25500: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25501: LD_ADDR_VAR 0 5
25505: PUSH
25506: DOUBLE
25507: LD_EXP 97
25511: PUSH
25512: LD_VAR 0 6
25516: ARRAY
25517: INC
25518: ST_TO_ADDR
25519: LD_INT 1
25521: PUSH
25522: FOR_DOWNTO
25523: IFFALSE 25684
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25525: LD_EXP 97
25529: PUSH
25530: LD_VAR 0 6
25534: ARRAY
25535: PUSH
25536: LD_VAR 0 5
25540: ARRAY
25541: PUSH
25542: LD_INT 1
25544: ARRAY
25545: PUSH
25546: LD_VAR 0 2
25550: EQUAL
25551: PUSH
25552: LD_EXP 97
25556: PUSH
25557: LD_VAR 0 6
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 5
25567: ARRAY
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PUSH
25573: LD_VAR 0 3
25577: EQUAL
25578: AND
25579: IFFALSE 25682
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25581: LD_EXP 97
25585: PUSH
25586: LD_VAR 0 6
25590: ARRAY
25591: PUSH
25592: LD_VAR 0 5
25596: ARRAY
25597: PUSH
25598: LD_INT 1
25600: ARRAY
25601: PPUSH
25602: LD_EXP 97
25606: PUSH
25607: LD_VAR 0 6
25611: ARRAY
25612: PUSH
25613: LD_VAR 0 5
25617: ARRAY
25618: PUSH
25619: LD_INT 2
25621: ARRAY
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 255
25632: PPUSH
25633: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25637: LD_ADDR_EXP 97
25641: PUSH
25642: LD_EXP 97
25646: PPUSH
25647: LD_VAR 0 6
25651: PPUSH
25652: LD_EXP 97
25656: PUSH
25657: LD_VAR 0 6
25661: ARRAY
25662: PPUSH
25663: LD_VAR 0 5
25667: PPUSH
25668: CALL_OW 3
25672: PPUSH
25673: CALL_OW 1
25677: ST_TO_ADDR
// exit ;
25678: POP
25679: POP
25680: GO 25873
// end ; end ;
25682: GO 25522
25684: POP
25685: POP
// for i := minerMinesList [ index ] downto 1 do
25686: LD_ADDR_VAR 0 5
25690: PUSH
25691: DOUBLE
25692: LD_EXP 97
25696: PUSH
25697: LD_VAR 0 6
25701: ARRAY
25702: INC
25703: ST_TO_ADDR
25704: LD_INT 1
25706: PUSH
25707: FOR_DOWNTO
25708: IFFALSE 25871
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25710: LD_EXP 97
25714: PUSH
25715: LD_VAR 0 6
25719: ARRAY
25720: PUSH
25721: LD_VAR 0 5
25725: ARRAY
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PPUSH
25731: LD_EXP 97
25735: PUSH
25736: LD_VAR 0 6
25740: ARRAY
25741: PUSH
25742: LD_VAR 0 5
25746: ARRAY
25747: PUSH
25748: LD_INT 2
25750: ARRAY
25751: PPUSH
25752: LD_VAR 0 2
25756: PPUSH
25757: LD_VAR 0 3
25761: PPUSH
25762: CALL_OW 298
25766: PUSH
25767: LD_INT 6
25769: LESS
25770: IFFALSE 25869
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25772: LD_EXP 97
25776: PUSH
25777: LD_VAR 0 6
25781: ARRAY
25782: PUSH
25783: LD_VAR 0 5
25787: ARRAY
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: LD_EXP 97
25797: PUSH
25798: LD_VAR 0 6
25802: ARRAY
25803: PUSH
25804: LD_VAR 0 5
25808: ARRAY
25809: PUSH
25810: LD_INT 2
25812: ARRAY
25813: PPUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 255
25823: PPUSH
25824: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25828: LD_ADDR_EXP 97
25832: PUSH
25833: LD_EXP 97
25837: PPUSH
25838: LD_VAR 0 6
25842: PPUSH
25843: LD_EXP 97
25847: PUSH
25848: LD_VAR 0 6
25852: ARRAY
25853: PPUSH
25854: LD_VAR 0 5
25858: PPUSH
25859: CALL_OW 3
25863: PPUSH
25864: CALL_OW 1
25868: ST_TO_ADDR
// end ; end ;
25869: GO 25707
25871: POP
25872: POP
// end ;
25873: LD_VAR 0 4
25877: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 264
25898: PUSH
25899: LD_INT 81
25901: EQUAL
25902: NOT
25903: PUSH
25904: LD_VAR 0 1
25908: PUSH
25909: LD_EXP 96
25913: IN
25914: NOT
25915: OR
25916: IFFALSE 25920
// exit ;
25918: GO 26242
// index := GetElementIndex ( minersList , unit ) ;
25920: LD_ADDR_VAR 0 6
25924: PUSH
25925: LD_EXP 96
25929: PPUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL 31589 0 2
25939: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25940: LD_ADDR_VAR 0 8
25944: PUSH
25945: LD_EXP 98
25949: PUSH
25950: LD_EXP 97
25954: PUSH
25955: LD_VAR 0 6
25959: ARRAY
25960: MINUS
25961: ST_TO_ADDR
// if not minesFreeAmount then
25962: LD_VAR 0 8
25966: NOT
25967: IFFALSE 25971
// exit ;
25969: GO 26242
// tmp := [ ] ;
25971: LD_ADDR_VAR 0 7
25975: PUSH
25976: EMPTY
25977: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25978: LD_ADDR_VAR 0 5
25982: PUSH
25983: DOUBLE
25984: LD_INT 1
25986: DEC
25987: ST_TO_ADDR
25988: LD_VAR 0 8
25992: PUSH
25993: FOR_TO
25994: IFFALSE 26189
// begin _d := rand ( 0 , 5 ) ;
25996: LD_ADDR_VAR 0 11
26000: PUSH
26001: LD_INT 0
26003: PPUSH
26004: LD_INT 5
26006: PPUSH
26007: CALL_OW 12
26011: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26012: LD_ADDR_VAR 0 12
26016: PUSH
26017: LD_INT 2
26019: PPUSH
26020: LD_INT 6
26022: PPUSH
26023: CALL_OW 12
26027: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26028: LD_ADDR_VAR 0 9
26032: PUSH
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_VAR 0 11
26042: PPUSH
26043: LD_VAR 0 12
26047: PPUSH
26048: CALL_OW 272
26052: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26053: LD_ADDR_VAR 0 10
26057: PUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: LD_VAR 0 11
26067: PPUSH
26068: LD_VAR 0 12
26072: PPUSH
26073: CALL_OW 273
26077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26078: LD_VAR 0 9
26082: PPUSH
26083: LD_VAR 0 10
26087: PPUSH
26088: CALL_OW 488
26092: PUSH
26093: LD_VAR 0 9
26097: PUSH
26098: LD_VAR 0 10
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_VAR 0 7
26111: IN
26112: NOT
26113: AND
26114: PUSH
26115: LD_VAR 0 9
26119: PPUSH
26120: LD_VAR 0 10
26124: PPUSH
26125: CALL_OW 458
26129: NOT
26130: AND
26131: IFFALSE 26173
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26133: LD_ADDR_VAR 0 7
26137: PUSH
26138: LD_VAR 0 7
26142: PPUSH
26143: LD_VAR 0 7
26147: PUSH
26148: LD_INT 1
26150: PLUS
26151: PPUSH
26152: LD_VAR 0 9
26156: PUSH
26157: LD_VAR 0 10
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PPUSH
26166: CALL_OW 1
26170: ST_TO_ADDR
26171: GO 26187
// i := i - 1 ;
26173: LD_ADDR_VAR 0 5
26177: PUSH
26178: LD_VAR 0 5
26182: PUSH
26183: LD_INT 1
26185: MINUS
26186: ST_TO_ADDR
// end ;
26187: GO 25993
26189: POP
26190: POP
// for i in tmp do
26191: LD_ADDR_VAR 0 5
26195: PUSH
26196: LD_VAR 0 7
26200: PUSH
26201: FOR_IN
26202: IFFALSE 26240
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26204: LD_VAR 0 1
26208: PPUSH
26209: LD_VAR 0 5
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: PPUSH
26218: LD_VAR 0 5
26222: PUSH
26223: LD_INT 2
26225: ARRAY
26226: PPUSH
26227: CALL 25186 0 3
26231: NOT
26232: IFFALSE 26238
// exit ;
26234: POP
26235: POP
26236: GO 26242
26238: GO 26201
26240: POP
26241: POP
// end ;
26242: LD_VAR 0 4
26246: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26247: LD_INT 0
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
// if not GetClass ( unit ) = class_sniper then
26256: LD_VAR 0 1
26260: PPUSH
26261: CALL_OW 257
26265: PUSH
26266: LD_INT 5
26268: EQUAL
26269: NOT
26270: IFFALSE 26274
// exit ;
26272: GO 26662
// dist := 8 ;
26274: LD_ADDR_VAR 0 5
26278: PUSH
26279: LD_INT 8
26281: ST_TO_ADDR
// viewRange := 12 ;
26282: LD_ADDR_VAR 0 7
26286: PUSH
26287: LD_INT 12
26289: ST_TO_ADDR
// side := GetSide ( unit ) ;
26290: LD_ADDR_VAR 0 6
26294: PUSH
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL_OW 255
26304: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26305: LD_INT 61
26307: PPUSH
26308: LD_VAR 0 6
26312: PPUSH
26313: CALL_OW 321
26317: PUSH
26318: LD_INT 2
26320: EQUAL
26321: IFFALSE 26331
// viewRange := 16 ;
26323: LD_ADDR_VAR 0 7
26327: PUSH
26328: LD_INT 16
26330: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26331: LD_VAR 0 1
26335: PPUSH
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 297
26350: PUSH
26351: LD_VAR 0 5
26355: GREATER
26356: IFFALSE 26435
// begin ComMoveXY ( unit , x , y ) ;
26358: LD_VAR 0 1
26362: PPUSH
26363: LD_VAR 0 2
26367: PPUSH
26368: LD_VAR 0 3
26372: PPUSH
26373: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26377: LD_INT 35
26379: PPUSH
26380: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: CALL 62925 0 3
26403: NOT
26404: IFFALSE 26408
// exit ;
26406: GO 26662
// until GetDistUnitXY ( unit , x , y ) < dist ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 2
26417: PPUSH
26418: LD_VAR 0 3
26422: PPUSH
26423: CALL_OW 297
26427: PUSH
26428: LD_VAR 0 5
26432: LESS
26433: IFFALSE 26377
// end ; ComTurnXY ( unit , x , y ) ;
26435: LD_VAR 0 1
26439: PPUSH
26440: LD_VAR 0 2
26444: PPUSH
26445: LD_VAR 0 3
26449: PPUSH
26450: CALL_OW 118
// wait ( 5 ) ;
26454: LD_INT 5
26456: PPUSH
26457: CALL_OW 67
// _d := GetDir ( unit ) ;
26461: LD_ADDR_VAR 0 10
26465: PUSH
26466: LD_VAR 0 1
26470: PPUSH
26471: CALL_OW 254
26475: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26476: LD_ADDR_VAR 0 8
26480: PUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 250
26490: PPUSH
26491: LD_VAR 0 10
26495: PPUSH
26496: LD_VAR 0 5
26500: PPUSH
26501: CALL_OW 272
26505: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26506: LD_ADDR_VAR 0 9
26510: PUSH
26511: LD_VAR 0 1
26515: PPUSH
26516: CALL_OW 251
26520: PPUSH
26521: LD_VAR 0 10
26525: PPUSH
26526: LD_VAR 0 5
26530: PPUSH
26531: CALL_OW 273
26535: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26536: LD_VAR 0 8
26540: PPUSH
26541: LD_VAR 0 9
26545: PPUSH
26546: CALL_OW 488
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 26662
// ComAnimCustom ( unit , 1 ) ;
26555: LD_VAR 0 1
26559: PPUSH
26560: LD_INT 1
26562: PPUSH
26563: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26567: LD_VAR 0 8
26571: PPUSH
26572: LD_VAR 0 9
26576: PPUSH
26577: LD_VAR 0 6
26581: PPUSH
26582: LD_VAR 0 7
26586: PPUSH
26587: CALL_OW 330
// repeat wait ( 1 ) ;
26591: LD_INT 1
26593: PPUSH
26594: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 316
26607: PUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 314
26617: OR
26618: PUSH
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL_OW 302
26628: NOT
26629: OR
26630: PUSH
26631: LD_VAR 0 1
26635: PPUSH
26636: CALL_OW 301
26640: OR
26641: IFFALSE 26591
// RemoveSeeing ( _x , _y , side ) ;
26643: LD_VAR 0 8
26647: PPUSH
26648: LD_VAR 0 9
26652: PPUSH
26653: LD_VAR 0 6
26657: PPUSH
26658: CALL_OW 331
// end ; end_of_file
26662: LD_VAR 0 4
26666: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
// if exist_mode then
26671: LD_VAR 0 2
26675: IFFALSE 26700
// unit := CreateCharacter ( prefix & ident ) else
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_VAR 0 3
26686: PUSH
26687: LD_VAR 0 1
26691: STR
26692: PPUSH
26693: CALL_OW 34
26697: ST_TO_ADDR
26698: GO 26715
// unit := NewCharacter ( ident ) ;
26700: LD_ADDR_VAR 0 5
26704: PUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 25
26714: ST_TO_ADDR
// result := unit ;
26715: LD_ADDR_VAR 0 4
26719: PUSH
26720: LD_VAR 0 5
26724: ST_TO_ADDR
// end ;
26725: LD_VAR 0 4
26729: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
// if not side or not nation then
26734: LD_VAR 0 1
26738: NOT
26739: PUSH
26740: LD_VAR 0 2
26744: NOT
26745: OR
26746: IFFALSE 26750
// exit ;
26748: GO 27518
// case nation of nation_american :
26750: LD_VAR 0 2
26754: PUSH
26755: LD_INT 1
26757: DOUBLE
26758: EQUAL
26759: IFTRUE 26763
26761: GO 26977
26763: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_INT 35
26771: PUSH
26772: LD_INT 45
26774: PUSH
26775: LD_INT 46
26777: PUSH
26778: LD_INT 47
26780: PUSH
26781: LD_INT 82
26783: PUSH
26784: LD_INT 83
26786: PUSH
26787: LD_INT 84
26789: PUSH
26790: LD_INT 85
26792: PUSH
26793: LD_INT 86
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 6
26804: PUSH
26805: LD_INT 15
26807: PUSH
26808: LD_INT 16
26810: PUSH
26811: LD_INT 7
26813: PUSH
26814: LD_INT 12
26816: PUSH
26817: LD_INT 13
26819: PUSH
26820: LD_INT 10
26822: PUSH
26823: LD_INT 14
26825: PUSH
26826: LD_INT 20
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 22
26834: PUSH
26835: LD_INT 25
26837: PUSH
26838: LD_INT 32
26840: PUSH
26841: LD_INT 27
26843: PUSH
26844: LD_INT 36
26846: PUSH
26847: LD_INT 69
26849: PUSH
26850: LD_INT 39
26852: PUSH
26853: LD_INT 34
26855: PUSH
26856: LD_INT 40
26858: PUSH
26859: LD_INT 48
26861: PUSH
26862: LD_INT 49
26864: PUSH
26865: LD_INT 50
26867: PUSH
26868: LD_INT 51
26870: PUSH
26871: LD_INT 52
26873: PUSH
26874: LD_INT 53
26876: PUSH
26877: LD_INT 54
26879: PUSH
26880: LD_INT 55
26882: PUSH
26883: LD_INT 56
26885: PUSH
26886: LD_INT 57
26888: PUSH
26889: LD_INT 58
26891: PUSH
26892: LD_INT 59
26894: PUSH
26895: LD_INT 60
26897: PUSH
26898: LD_INT 61
26900: PUSH
26901: LD_INT 62
26903: PUSH
26904: LD_INT 80
26906: PUSH
26907: LD_INT 82
26909: PUSH
26910: LD_INT 83
26912: PUSH
26913: LD_INT 84
26915: PUSH
26916: LD_INT 85
26918: PUSH
26919: LD_INT 86
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
26975: GO 27442
26977: LD_INT 2
26979: DOUBLE
26980: EQUAL
26981: IFTRUE 26985
26983: GO 27211
26985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26986: LD_ADDR_VAR 0 4
26990: PUSH
26991: LD_INT 35
26993: PUSH
26994: LD_INT 45
26996: PUSH
26997: LD_INT 46
26999: PUSH
27000: LD_INT 47
27002: PUSH
27003: LD_INT 82
27005: PUSH
27006: LD_INT 83
27008: PUSH
27009: LD_INT 84
27011: PUSH
27012: LD_INT 85
27014: PUSH
27015: LD_INT 87
27017: PUSH
27018: LD_INT 70
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 11
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 4
27032: PUSH
27033: LD_INT 5
27035: PUSH
27036: LD_INT 6
27038: PUSH
27039: LD_INT 15
27041: PUSH
27042: LD_INT 18
27044: PUSH
27045: LD_INT 7
27047: PUSH
27048: LD_INT 17
27050: PUSH
27051: LD_INT 8
27053: PUSH
27054: LD_INT 20
27056: PUSH
27057: LD_INT 21
27059: PUSH
27060: LD_INT 22
27062: PUSH
27063: LD_INT 72
27065: PUSH
27066: LD_INT 26
27068: PUSH
27069: LD_INT 69
27071: PUSH
27072: LD_INT 39
27074: PUSH
27075: LD_INT 40
27077: PUSH
27078: LD_INT 41
27080: PUSH
27081: LD_INT 42
27083: PUSH
27084: LD_INT 43
27086: PUSH
27087: LD_INT 48
27089: PUSH
27090: LD_INT 49
27092: PUSH
27093: LD_INT 50
27095: PUSH
27096: LD_INT 51
27098: PUSH
27099: LD_INT 52
27101: PUSH
27102: LD_INT 53
27104: PUSH
27105: LD_INT 54
27107: PUSH
27108: LD_INT 55
27110: PUSH
27111: LD_INT 56
27113: PUSH
27114: LD_INT 60
27116: PUSH
27117: LD_INT 61
27119: PUSH
27120: LD_INT 62
27122: PUSH
27123: LD_INT 66
27125: PUSH
27126: LD_INT 67
27128: PUSH
27129: LD_INT 68
27131: PUSH
27132: LD_INT 81
27134: PUSH
27135: LD_INT 82
27137: PUSH
27138: LD_INT 83
27140: PUSH
27141: LD_INT 84
27143: PUSH
27144: LD_INT 85
27146: PUSH
27147: LD_INT 87
27149: PUSH
27150: LD_INT 88
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: ST_TO_ADDR
27209: GO 27442
27211: LD_INT 3
27213: DOUBLE
27214: EQUAL
27215: IFTRUE 27219
27217: GO 27441
27219: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27220: LD_ADDR_VAR 0 4
27224: PUSH
27225: LD_INT 46
27227: PUSH
27228: LD_INT 47
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 82
27239: PUSH
27240: LD_INT 83
27242: PUSH
27243: LD_INT 84
27245: PUSH
27246: LD_INT 85
27248: PUSH
27249: LD_INT 86
27251: PUSH
27252: LD_INT 11
27254: PUSH
27255: LD_INT 9
27257: PUSH
27258: LD_INT 20
27260: PUSH
27261: LD_INT 19
27263: PUSH
27264: LD_INT 21
27266: PUSH
27267: LD_INT 24
27269: PUSH
27270: LD_INT 22
27272: PUSH
27273: LD_INT 25
27275: PUSH
27276: LD_INT 28
27278: PUSH
27279: LD_INT 29
27281: PUSH
27282: LD_INT 30
27284: PUSH
27285: LD_INT 31
27287: PUSH
27288: LD_INT 37
27290: PUSH
27291: LD_INT 38
27293: PUSH
27294: LD_INT 32
27296: PUSH
27297: LD_INT 27
27299: PUSH
27300: LD_INT 33
27302: PUSH
27303: LD_INT 69
27305: PUSH
27306: LD_INT 39
27308: PUSH
27309: LD_INT 34
27311: PUSH
27312: LD_INT 40
27314: PUSH
27315: LD_INT 71
27317: PUSH
27318: LD_INT 23
27320: PUSH
27321: LD_INT 44
27323: PUSH
27324: LD_INT 48
27326: PUSH
27327: LD_INT 49
27329: PUSH
27330: LD_INT 50
27332: PUSH
27333: LD_INT 51
27335: PUSH
27336: LD_INT 52
27338: PUSH
27339: LD_INT 53
27341: PUSH
27342: LD_INT 54
27344: PUSH
27345: LD_INT 55
27347: PUSH
27348: LD_INT 56
27350: PUSH
27351: LD_INT 57
27353: PUSH
27354: LD_INT 58
27356: PUSH
27357: LD_INT 59
27359: PUSH
27360: LD_INT 63
27362: PUSH
27363: LD_INT 64
27365: PUSH
27366: LD_INT 65
27368: PUSH
27369: LD_INT 82
27371: PUSH
27372: LD_INT 83
27374: PUSH
27375: LD_INT 84
27377: PUSH
27378: LD_INT 85
27380: PUSH
27381: LD_INT 86
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
27439: GO 27442
27441: POP
// if state > - 1 and state < 3 then
27442: LD_VAR 0 3
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: GREATER
27451: PUSH
27452: LD_VAR 0 3
27456: PUSH
27457: LD_INT 3
27459: LESS
27460: AND
27461: IFFALSE 27518
// for i in result do
27463: LD_ADDR_VAR 0 5
27467: PUSH
27468: LD_VAR 0 4
27472: PUSH
27473: FOR_IN
27474: IFFALSE 27516
// if GetTech ( i , side ) <> state then
27476: LD_VAR 0 5
27480: PPUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: CALL_OW 321
27490: PUSH
27491: LD_VAR 0 3
27495: NONEQUAL
27496: IFFALSE 27514
// result := result diff i ;
27498: LD_ADDR_VAR 0 4
27502: PUSH
27503: LD_VAR 0 4
27507: PUSH
27508: LD_VAR 0 5
27512: DIFF
27513: ST_TO_ADDR
27514: GO 27473
27516: POP
27517: POP
// end ;
27518: LD_VAR 0 4
27522: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27523: LD_INT 0
27525: PPUSH
27526: PPUSH
27527: PPUSH
// result := true ;
27528: LD_ADDR_VAR 0 3
27532: PUSH
27533: LD_INT 1
27535: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_VAR 0 2
27545: PPUSH
27546: CALL_OW 480
27550: ST_TO_ADDR
// if not tmp then
27551: LD_VAR 0 5
27555: NOT
27556: IFFALSE 27560
// exit ;
27558: GO 27609
// for i in tmp do
27560: LD_ADDR_VAR 0 4
27564: PUSH
27565: LD_VAR 0 5
27569: PUSH
27570: FOR_IN
27571: IFFALSE 27607
// if GetTech ( i , side ) <> state_researched then
27573: LD_VAR 0 4
27577: PPUSH
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL_OW 321
27587: PUSH
27588: LD_INT 2
27590: NONEQUAL
27591: IFFALSE 27605
// begin result := false ;
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 0
27600: ST_TO_ADDR
// exit ;
27601: POP
27602: POP
27603: GO 27609
// end ;
27605: GO 27570
27607: POP
27608: POP
// end ;
27609: LD_VAR 0 3
27613: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27629: LD_VAR 0 1
27633: NOT
27634: PUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 257
27644: PUSH
27645: LD_INT 9
27647: NONEQUAL
27648: OR
27649: IFFALSE 27653
// exit ;
27651: GO 28226
// side := GetSide ( unit ) ;
27653: LD_ADDR_VAR 0 9
27657: PUSH
27658: LD_VAR 0 1
27662: PPUSH
27663: CALL_OW 255
27667: ST_TO_ADDR
// tech_space := tech_spacanom ;
27668: LD_ADDR_VAR 0 12
27672: PUSH
27673: LD_INT 29
27675: ST_TO_ADDR
// tech_time := tech_taurad ;
27676: LD_ADDR_VAR 0 13
27680: PUSH
27681: LD_INT 28
27683: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27684: LD_ADDR_VAR 0 11
27688: PUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 310
27698: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27699: LD_VAR 0 11
27703: PPUSH
27704: CALL_OW 247
27708: PUSH
27709: LD_INT 2
27711: EQUAL
27712: IFFALSE 27716
// exit ;
27714: GO 28226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27716: LD_ADDR_VAR 0 8
27720: PUSH
27721: LD_INT 81
27723: PUSH
27724: LD_VAR 0 9
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 3
27735: PUSH
27736: LD_INT 21
27738: PUSH
27739: LD_INT 3
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 8
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 28226
// if in_unit then
27768: LD_VAR 0 11
27772: IFFALSE 27796
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27774: LD_ADDR_VAR 0 10
27778: PUSH
27779: LD_VAR 0 8
27783: PPUSH
27784: LD_VAR 0 11
27788: PPUSH
27789: CALL_OW 74
27793: ST_TO_ADDR
27794: GO 27816
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27796: LD_ADDR_VAR 0 10
27800: PUSH
27801: LD_VAR 0 8
27805: PPUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: CALL_OW 74
27815: ST_TO_ADDR
// if not enemy then
27816: LD_VAR 0 10
27820: NOT
27821: IFFALSE 27825
// exit ;
27823: GO 28226
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27825: LD_VAR 0 11
27829: PUSH
27830: LD_VAR 0 11
27834: PPUSH
27835: LD_VAR 0 10
27839: PPUSH
27840: CALL_OW 296
27844: PUSH
27845: LD_INT 13
27847: GREATER
27848: AND
27849: PUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_VAR 0 10
27859: PPUSH
27860: CALL_OW 296
27864: PUSH
27865: LD_INT 12
27867: GREATER
27868: OR
27869: IFFALSE 27873
// exit ;
27871: GO 28226
// missile := [ 1 ] ;
27873: LD_ADDR_VAR 0 14
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27884: LD_VAR 0 9
27888: PPUSH
27889: LD_VAR 0 12
27893: PPUSH
27894: CALL_OW 325
27898: IFFALSE 27927
// missile := Replace ( missile , missile + 1 , 2 ) ;
27900: LD_ADDR_VAR 0 14
27904: PUSH
27905: LD_VAR 0 14
27909: PPUSH
27910: LD_VAR 0 14
27914: PUSH
27915: LD_INT 1
27917: PLUS
27918: PPUSH
27919: LD_INT 2
27921: PPUSH
27922: CALL_OW 1
27926: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27927: LD_VAR 0 9
27931: PPUSH
27932: LD_VAR 0 13
27936: PPUSH
27937: CALL_OW 325
27941: PUSH
27942: LD_VAR 0 10
27946: PPUSH
27947: CALL_OW 255
27951: PPUSH
27952: LD_VAR 0 13
27956: PPUSH
27957: CALL_OW 325
27961: NOT
27962: AND
27963: IFFALSE 27992
// missile := Replace ( missile , missile + 1 , 3 ) ;
27965: LD_ADDR_VAR 0 14
27969: PUSH
27970: LD_VAR 0 14
27974: PPUSH
27975: LD_VAR 0 14
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PPUSH
27984: LD_INT 3
27986: PPUSH
27987: CALL_OW 1
27991: ST_TO_ADDR
// if missile < 2 then
27992: LD_VAR 0 14
27996: PUSH
27997: LD_INT 2
27999: LESS
28000: IFFALSE 28004
// exit ;
28002: GO 28226
// x := GetX ( enemy ) ;
28004: LD_ADDR_VAR 0 4
28008: PUSH
28009: LD_VAR 0 10
28013: PPUSH
28014: CALL_OW 250
28018: ST_TO_ADDR
// y := GetY ( enemy ) ;
28019: LD_ADDR_VAR 0 5
28023: PUSH
28024: LD_VAR 0 10
28028: PPUSH
28029: CALL_OW 251
28033: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28034: LD_ADDR_VAR 0 6
28038: PUSH
28039: LD_VAR 0 4
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 12
28055: PLUS
28056: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28057: LD_ADDR_VAR 0 7
28061: PUSH
28062: LD_VAR 0 5
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: CALL_OW 12
28078: PLUS
28079: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28080: LD_VAR 0 6
28084: PPUSH
28085: LD_VAR 0 7
28089: PPUSH
28090: CALL_OW 488
28094: NOT
28095: IFFALSE 28117
// begin _x := x ;
28097: LD_ADDR_VAR 0 6
28101: PUSH
28102: LD_VAR 0 4
28106: ST_TO_ADDR
// _y := y ;
28107: LD_ADDR_VAR 0 7
28111: PUSH
28112: LD_VAR 0 5
28116: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: LD_INT 1
28124: PPUSH
28125: LD_VAR 0 14
28129: PPUSH
28130: CALL_OW 12
28134: ST_TO_ADDR
// case i of 1 :
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28148
28146: GO 28165
28148: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_VAR 0 10
28158: PPUSH
28159: CALL_OW 115
28163: GO 28226
28165: LD_INT 2
28167: DOUBLE
28168: EQUAL
28169: IFTRUE 28173
28171: GO 28195
28173: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28174: LD_VAR 0 1
28178: PPUSH
28179: LD_VAR 0 6
28183: PPUSH
28184: LD_VAR 0 7
28188: PPUSH
28189: CALL_OW 153
28193: GO 28226
28195: LD_INT 3
28197: DOUBLE
28198: EQUAL
28199: IFTRUE 28203
28201: GO 28225
28203: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 6
28213: PPUSH
28214: LD_VAR 0 7
28218: PPUSH
28219: CALL_OW 154
28223: GO 28226
28225: POP
// end ;
28226: LD_VAR 0 2
28230: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28231: LD_INT 0
28233: PPUSH
28234: PPUSH
28235: PPUSH
28236: PPUSH
28237: PPUSH
28238: PPUSH
// if not unit or not building then
28239: LD_VAR 0 1
28243: NOT
28244: PUSH
28245: LD_VAR 0 2
28249: NOT
28250: OR
28251: IFFALSE 28255
// exit ;
28253: GO 28413
// x := GetX ( building ) ;
28255: LD_ADDR_VAR 0 5
28259: PUSH
28260: LD_VAR 0 2
28264: PPUSH
28265: CALL_OW 250
28269: ST_TO_ADDR
// y := GetY ( building ) ;
28270: LD_ADDR_VAR 0 6
28274: PUSH
28275: LD_VAR 0 2
28279: PPUSH
28280: CALL_OW 251
28284: ST_TO_ADDR
// for i = 0 to 5 do
28285: LD_ADDR_VAR 0 4
28289: PUSH
28290: DOUBLE
28291: LD_INT 0
28293: DEC
28294: ST_TO_ADDR
28295: LD_INT 5
28297: PUSH
28298: FOR_TO
28299: IFFALSE 28411
// begin _x := ShiftX ( x , i , 3 ) ;
28301: LD_ADDR_VAR 0 7
28305: PUSH
28306: LD_VAR 0 5
28310: PPUSH
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_INT 3
28318: PPUSH
28319: CALL_OW 272
28323: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28324: LD_ADDR_VAR 0 8
28328: PUSH
28329: LD_VAR 0 6
28333: PPUSH
28334: LD_VAR 0 4
28338: PPUSH
28339: LD_INT 3
28341: PPUSH
28342: CALL_OW 273
28346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28347: LD_VAR 0 7
28351: PPUSH
28352: LD_VAR 0 8
28356: PPUSH
28357: CALL_OW 488
28361: NOT
28362: IFFALSE 28366
// continue ;
28364: GO 28298
// if HexInfo ( _x , _y ) = 0 then
28366: LD_VAR 0 7
28370: PPUSH
28371: LD_VAR 0 8
28375: PPUSH
28376: CALL_OW 428
28380: PUSH
28381: LD_INT 0
28383: EQUAL
28384: IFFALSE 28409
// begin ComMoveXY ( unit , _x , _y ) ;
28386: LD_VAR 0 1
28390: PPUSH
28391: LD_VAR 0 7
28395: PPUSH
28396: LD_VAR 0 8
28400: PPUSH
28401: CALL_OW 111
// exit ;
28405: POP
28406: POP
28407: GO 28413
// end ; end ;
28409: GO 28298
28411: POP
28412: POP
// end ;
28413: LD_VAR 0 3
28417: RET
// export function ScanBase ( side , base_area ) ; begin
28418: LD_INT 0
28420: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28421: LD_ADDR_VAR 0 3
28425: PUSH
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_INT 81
28433: PUSH
28434: LD_VAR 0 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 70
28447: ST_TO_ADDR
// end ;
28448: LD_VAR 0 3
28452: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
// result := false ;
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_INT 0
28466: ST_TO_ADDR
// side := GetSide ( unit ) ;
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_VAR 0 1
28476: PPUSH
28477: CALL_OW 255
28481: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28482: LD_ADDR_VAR 0 4
28486: PUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 248
28496: ST_TO_ADDR
// case nat of 1 :
28497: LD_VAR 0 4
28501: PUSH
28502: LD_INT 1
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28521
28510: POP
// tech := tech_lassight ; 2 :
28511: LD_ADDR_VAR 0 5
28515: PUSH
28516: LD_INT 12
28518: ST_TO_ADDR
28519: GO 28560
28521: LD_INT 2
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28540
28529: POP
// tech := tech_mortar ; 3 :
28530: LD_ADDR_VAR 0 5
28534: PUSH
28535: LD_INT 41
28537: ST_TO_ADDR
28538: GO 28560
28540: LD_INT 3
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28559
28548: POP
// tech := tech_bazooka ; end ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_INT 44
28556: ST_TO_ADDR
28557: GO 28560
28559: POP
// if Researched ( side , tech ) then
28560: LD_VAR 0 3
28564: PPUSH
28565: LD_VAR 0 5
28569: PPUSH
28570: CALL_OW 325
28574: IFFALSE 28601
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_INT 5
28583: PUSH
28584: LD_INT 8
28586: PUSH
28587: LD_INT 9
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: LD_VAR 0 4
28599: ARRAY
28600: ST_TO_ADDR
// end ;
28601: LD_VAR 0 2
28605: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28606: LD_INT 0
28608: PPUSH
28609: PPUSH
28610: PPUSH
// if not mines then
28611: LD_VAR 0 2
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28764
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28620: LD_ADDR_VAR 0 5
28624: PUSH
28625: LD_INT 81
28627: PUSH
28628: LD_VAR 0 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 3
28639: PUSH
28640: LD_INT 21
28642: PUSH
28643: LD_INT 3
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PPUSH
28658: CALL_OW 69
28662: ST_TO_ADDR
// for i in mines do
28663: LD_ADDR_VAR 0 4
28667: PUSH
28668: LD_VAR 0 2
28672: PUSH
28673: FOR_IN
28674: IFFALSE 28762
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28676: LD_VAR 0 4
28680: PUSH
28681: LD_INT 1
28683: ARRAY
28684: PPUSH
28685: LD_VAR 0 4
28689: PUSH
28690: LD_INT 2
28692: ARRAY
28693: PPUSH
28694: CALL_OW 458
28698: NOT
28699: IFFALSE 28703
// continue ;
28701: GO 28673
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28703: LD_VAR 0 4
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 4
28716: PUSH
28717: LD_INT 2
28719: ARRAY
28720: PPUSH
28721: CALL_OW 428
28725: PUSH
28726: LD_VAR 0 5
28730: IN
28731: IFFALSE 28760
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28733: LD_VAR 0 4
28737: PUSH
28738: LD_INT 1
28740: ARRAY
28741: PPUSH
28742: LD_VAR 0 4
28746: PUSH
28747: LD_INT 2
28749: ARRAY
28750: PPUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 456
// end ;
28760: GO 28673
28762: POP
28763: POP
// end ;
28764: LD_VAR 0 3
28768: RET
// export function Count ( array ) ; var i ; begin
28769: LD_INT 0
28771: PPUSH
28772: PPUSH
// result := 0 ;
28773: LD_ADDR_VAR 0 2
28777: PUSH
28778: LD_INT 0
28780: ST_TO_ADDR
// for i in array do
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_VAR 0 1
28790: PUSH
28791: FOR_IN
28792: IFFALSE 28816
// if i then
28794: LD_VAR 0 3
28798: IFFALSE 28814
// result := result + 1 ;
28800: LD_ADDR_VAR 0 2
28804: PUSH
28805: LD_VAR 0 2
28809: PUSH
28810: LD_INT 1
28812: PLUS
28813: ST_TO_ADDR
28814: GO 28791
28816: POP
28817: POP
// end ;
28818: LD_VAR 0 2
28822: RET
// export function IsEmpty ( building ) ; begin
28823: LD_INT 0
28825: PPUSH
// if not building then
28826: LD_VAR 0 1
28830: NOT
28831: IFFALSE 28835
// exit ;
28833: GO 28878
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28835: LD_ADDR_VAR 0 2
28839: PUSH
28840: LD_VAR 0 1
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 255
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 58
28864: PUSH
28865: EMPTY
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 69
28876: IN
28877: ST_TO_ADDR
// end ;
28878: LD_VAR 0 2
28882: RET
// export function IsNotFull ( building ) ; var places ; begin
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
// if not building then
28887: LD_VAR 0 1
28891: NOT
28892: IFFALSE 28896
// exit ;
28894: GO 29067
// result := false ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_INT 0
28903: ST_TO_ADDR
// places := 0 ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_INT 0
28911: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 266
28921: PUSH
28922: LD_INT 0
28924: DOUBLE
28925: EQUAL
28926: IFTRUE 28984
28928: LD_INT 1
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28984
28934: LD_INT 6
28936: DOUBLE
28937: EQUAL
28938: IFTRUE 28984
28940: LD_INT 7
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28984
28946: LD_INT 8
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28984
28952: LD_INT 4
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28984
28958: LD_INT 5
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28984
28964: LD_INT 2
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28984
28970: LD_INT 3
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28984
28976: LD_INT 35
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 28995
28984: POP
// places := 6 ; b_bunker , b_breastwork :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 6
28992: ST_TO_ADDR
28993: GO 29040
28995: LD_INT 32
28997: DOUBLE
28998: EQUAL
28999: IFTRUE 29009
29001: LD_INT 31
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29020
29009: POP
// places := 1 ; b_control_tower :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: ST_TO_ADDR
29018: GO 29040
29020: LD_INT 36
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29028
29026: GO 29039
29028: POP
// places := 3 ; end ;
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_INT 3
29036: ST_TO_ADDR
29037: GO 29040
29039: POP
// if places then
29040: LD_VAR 0 3
29044: IFFALSE 29067
// result := UnitsInside ( building ) < places ;
29046: LD_ADDR_VAR 0 2
29050: PUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 313
29060: PUSH
29061: LD_VAR 0 3
29065: LESS
29066: ST_TO_ADDR
// end ;
29067: LD_VAR 0 2
29071: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29072: LD_INT 0
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
// tmp := [ ] ;
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: EMPTY
29084: ST_TO_ADDR
// list := [ ] ;
29085: LD_ADDR_VAR 0 5
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// for i = 16 to 25 do
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: DOUBLE
29098: LD_INT 16
29100: DEC
29101: ST_TO_ADDR
29102: LD_INT 25
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29179
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29108: LD_ADDR_VAR 0 3
29112: PUSH
29113: LD_VAR 0 3
29117: PUSH
29118: LD_INT 22
29120: PUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 255
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 91
29137: PUSH
29138: LD_VAR 0 1
29142: PUSH
29143: LD_INT 6
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 30
29153: PUSH
29154: LD_VAR 0 4
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: PPUSH
29171: CALL_OW 69
29175: ADD
29176: ST_TO_ADDR
29177: GO 29105
29179: POP
29180: POP
// for i = 1 to tmp do
29181: LD_ADDR_VAR 0 4
29185: PUSH
29186: DOUBLE
29187: LD_INT 1
29189: DEC
29190: ST_TO_ADDR
29191: LD_VAR 0 3
29195: PUSH
29196: FOR_TO
29197: IFFALSE 29285
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29199: LD_ADDR_VAR 0 5
29203: PUSH
29204: LD_VAR 0 5
29208: PUSH
29209: LD_VAR 0 3
29213: PUSH
29214: LD_VAR 0 4
29218: ARRAY
29219: PPUSH
29220: CALL_OW 266
29224: PUSH
29225: LD_VAR 0 3
29229: PUSH
29230: LD_VAR 0 4
29234: ARRAY
29235: PPUSH
29236: CALL_OW 250
29240: PUSH
29241: LD_VAR 0 3
29245: PUSH
29246: LD_VAR 0 4
29250: ARRAY
29251: PPUSH
29252: CALL_OW 251
29256: PUSH
29257: LD_VAR 0 3
29261: PUSH
29262: LD_VAR 0 4
29266: ARRAY
29267: PPUSH
29268: CALL_OW 254
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: ADD
29282: ST_TO_ADDR
29283: GO 29196
29285: POP
29286: POP
// result := list ;
29287: LD_ADDR_VAR 0 2
29291: PUSH
29292: LD_VAR 0 5
29296: ST_TO_ADDR
// end ;
29297: LD_VAR 0 2
29301: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
// if not factory then
29311: LD_VAR 0 1
29315: NOT
29316: IFFALSE 29320
// exit ;
29318: GO 29913
// if control = control_apeman then
29320: LD_VAR 0 4
29324: PUSH
29325: LD_INT 5
29327: EQUAL
29328: IFFALSE 29437
// begin tmp := UnitsInside ( factory ) ;
29330: LD_ADDR_VAR 0 8
29334: PUSH
29335: LD_VAR 0 1
29339: PPUSH
29340: CALL_OW 313
29344: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29345: LD_VAR 0 8
29349: PPUSH
29350: LD_INT 25
29352: PUSH
29353: LD_INT 12
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 72
29364: NOT
29365: IFFALSE 29375
// control := control_manual ;
29367: LD_ADDR_VAR 0 4
29371: PUSH
29372: LD_INT 1
29374: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29375: LD_ADDR_VAR 0 8
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL 29072 0 1
29389: ST_TO_ADDR
// if tmp then
29390: LD_VAR 0 8
29394: IFFALSE 29437
// begin for i in tmp do
29396: LD_ADDR_VAR 0 7
29400: PUSH
29401: LD_VAR 0 8
29405: PUSH
29406: FOR_IN
29407: IFFALSE 29435
// if i [ 1 ] = b_ext_radio then
29409: LD_VAR 0 7
29413: PUSH
29414: LD_INT 1
29416: ARRAY
29417: PUSH
29418: LD_INT 22
29420: EQUAL
29421: IFFALSE 29433
// begin control := control_remote ;
29423: LD_ADDR_VAR 0 4
29427: PUSH
29428: LD_INT 2
29430: ST_TO_ADDR
// break ;
29431: GO 29435
// end ;
29433: GO 29406
29435: POP
29436: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29437: LD_VAR 0 1
29441: PPUSH
29442: LD_VAR 0 2
29446: PPUSH
29447: LD_VAR 0 3
29451: PPUSH
29452: LD_VAR 0 4
29456: PPUSH
29457: LD_VAR 0 5
29461: PPUSH
29462: CALL_OW 448
29466: IFFALSE 29501
// begin result := [ chassis , engine , control , weapon ] ;
29468: LD_ADDR_VAR 0 6
29472: PUSH
29473: LD_VAR 0 2
29477: PUSH
29478: LD_VAR 0 3
29482: PUSH
29483: LD_VAR 0 4
29487: PUSH
29488: LD_VAR 0 5
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// exit ;
29499: GO 29913
// end ; _chassis := AvailableChassisList ( factory ) ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 475
29515: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29516: LD_ADDR_VAR 0 11
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 476
29530: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29531: LD_ADDR_VAR 0 12
29535: PUSH
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 477
29545: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29546: LD_ADDR_VAR 0 10
29550: PUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: CALL_OW 478
29560: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29561: LD_VAR 0 9
29565: NOT
29566: PUSH
29567: LD_VAR 0 11
29571: NOT
29572: OR
29573: PUSH
29574: LD_VAR 0 12
29578: NOT
29579: OR
29580: PUSH
29581: LD_VAR 0 10
29585: NOT
29586: OR
29587: IFFALSE 29622
// begin result := [ chassis , engine , control , weapon ] ;
29589: LD_ADDR_VAR 0 6
29593: PUSH
29594: LD_VAR 0 2
29598: PUSH
29599: LD_VAR 0 3
29603: PUSH
29604: LD_VAR 0 4
29608: PUSH
29609: LD_VAR 0 5
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
// exit ;
29620: GO 29913
// end ; if not chassis in _chassis then
29622: LD_VAR 0 2
29626: PUSH
29627: LD_VAR 0 9
29631: IN
29632: NOT
29633: IFFALSE 29659
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_VAR 0 9
29644: PUSH
29645: LD_INT 1
29647: PPUSH
29648: LD_VAR 0 9
29652: PPUSH
29653: CALL_OW 12
29657: ARRAY
29658: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29659: LD_VAR 0 2
29663: PPUSH
29664: LD_VAR 0 3
29668: PPUSH
29669: CALL 29918 0 2
29673: NOT
29674: IFFALSE 29733
// repeat engine := _engine [ 1 ] ;
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_VAR 0 11
29685: PUSH
29686: LD_INT 1
29688: ARRAY
29689: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29690: LD_ADDR_VAR 0 11
29694: PUSH
29695: LD_VAR 0 11
29699: PPUSH
29700: LD_INT 1
29702: PPUSH
29703: CALL_OW 3
29707: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: CALL 29918 0 2
29722: PUSH
29723: LD_VAR 0 11
29727: PUSH
29728: EMPTY
29729: EQUAL
29730: OR
29731: IFFALSE 29676
// if not control in _control then
29733: LD_VAR 0 4
29737: PUSH
29738: LD_VAR 0 12
29742: IN
29743: NOT
29744: IFFALSE 29770
// control := _control [ rand ( 1 , _control ) ] ;
29746: LD_ADDR_VAR 0 4
29750: PUSH
29751: LD_VAR 0 12
29755: PUSH
29756: LD_INT 1
29758: PPUSH
29759: LD_VAR 0 12
29763: PPUSH
29764: CALL_OW 12
29768: ARRAY
29769: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29770: LD_VAR 0 2
29774: PPUSH
29775: LD_VAR 0 5
29779: PPUSH
29780: CALL 30138 0 2
29784: NOT
29785: IFFALSE 29844
// repeat weapon := _weapon [ 1 ] ;
29787: LD_ADDR_VAR 0 5
29791: PUSH
29792: LD_VAR 0 10
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29801: LD_ADDR_VAR 0 10
29805: PUSH
29806: LD_VAR 0 10
29810: PPUSH
29811: LD_INT 1
29813: PPUSH
29814: CALL_OW 3
29818: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29819: LD_VAR 0 2
29823: PPUSH
29824: LD_VAR 0 5
29828: PPUSH
29829: CALL 30138 0 2
29833: PUSH
29834: LD_VAR 0 10
29838: PUSH
29839: EMPTY
29840: EQUAL
29841: OR
29842: IFFALSE 29787
// result := [ ] ;
29844: LD_ADDR_VAR 0 6
29848: PUSH
29849: EMPTY
29850: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_VAR 0 2
29860: PPUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: LD_VAR 0 4
29870: PPUSH
29871: LD_VAR 0 5
29875: PPUSH
29876: CALL_OW 448
29880: IFFALSE 29913
// result := [ chassis , engine , control , weapon ] ;
29882: LD_ADDR_VAR 0 6
29886: PUSH
29887: LD_VAR 0 2
29891: PUSH
29892: LD_VAR 0 3
29896: PUSH
29897: LD_VAR 0 4
29901: PUSH
29902: LD_VAR 0 5
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// end ;
29913: LD_VAR 0 6
29917: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29918: LD_INT 0
29920: PPUSH
// if not chassis or not engine then
29921: LD_VAR 0 1
29925: NOT
29926: PUSH
29927: LD_VAR 0 2
29931: NOT
29932: OR
29933: IFFALSE 29937
// exit ;
29935: GO 30133
// case engine of engine_solar :
29937: LD_VAR 0 2
29941: PUSH
29942: LD_INT 2
29944: DOUBLE
29945: EQUAL
29946: IFTRUE 29950
29948: GO 29988
29950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29951: LD_ADDR_VAR 0 3
29955: PUSH
29956: LD_INT 11
29958: PUSH
29959: LD_INT 12
29961: PUSH
29962: LD_INT 13
29964: PUSH
29965: LD_INT 14
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
29986: GO 30117
29988: LD_INT 1
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30058
29996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_INT 11
30004: PUSH
30005: LD_INT 12
30007: PUSH
30008: LD_INT 13
30010: PUSH
30011: LD_INT 14
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: LD_INT 2
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: LD_INT 4
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: LD_INT 21
30031: PUSH
30032: LD_INT 23
30034: PUSH
30035: LD_INT 22
30037: PUSH
30038: LD_INT 24
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: ST_TO_ADDR
30056: GO 30117
30058: LD_INT 3
30060: DOUBLE
30061: EQUAL
30062: IFTRUE 30066
30064: GO 30116
30066: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: LD_INT 13
30074: PUSH
30075: LD_INT 14
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: LD_INT 4
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: LD_INT 21
30092: PUSH
30093: LD_INT 22
30095: PUSH
30096: LD_INT 23
30098: PUSH
30099: LD_INT 24
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
30114: GO 30117
30116: POP
// result := ( chassis in result ) ;
30117: LD_ADDR_VAR 0 3
30121: PUSH
30122: LD_VAR 0 1
30126: PUSH
30127: LD_VAR 0 3
30131: IN
30132: ST_TO_ADDR
// end ;
30133: LD_VAR 0 3
30137: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30138: LD_INT 0
30140: PPUSH
// if not chassis or not weapon then
30141: LD_VAR 0 1
30145: NOT
30146: PUSH
30147: LD_VAR 0 2
30151: NOT
30152: OR
30153: IFFALSE 30157
// exit ;
30155: GO 31217
// case weapon of us_machine_gun :
30157: LD_VAR 0 2
30161: PUSH
30162: LD_INT 2
30164: DOUBLE
30165: EQUAL
30166: IFTRUE 30170
30168: GO 30200
30170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: LD_INT 4
30187: PUSH
30188: LD_INT 5
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
30198: GO 31201
30200: LD_INT 3
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30238
30208: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: LD_INT 4
30225: PUSH
30226: LD_INT 5
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 31201
30238: LD_INT 11
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30276
30246: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: LD_INT 4
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
30274: GO 31201
30276: LD_INT 4
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30310
30284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: LD_INT 4
30298: PUSH
30299: LD_INT 5
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: ST_TO_ADDR
30308: GO 31201
30310: LD_INT 5
30312: DOUBLE
30313: EQUAL
30314: IFTRUE 30318
30316: GO 30344
30318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30319: LD_ADDR_VAR 0 3
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
30342: GO 31201
30344: LD_INT 9
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30378
30352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 3
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
30376: GO 31201
30378: LD_INT 7
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30412
30386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30387: LD_ADDR_VAR 0 3
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: LD_INT 5
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: ST_TO_ADDR
30410: GO 31201
30412: LD_INT 12
30414: DOUBLE
30415: EQUAL
30416: IFTRUE 30420
30418: GO 30446
30420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 5
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
30444: GO 31201
30446: LD_INT 13
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30480
30454: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: LD_INT 4
30468: PUSH
30469: LD_INT 5
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: ST_TO_ADDR
30478: GO 31201
30480: LD_INT 14
30482: DOUBLE
30483: EQUAL
30484: IFTRUE 30488
30486: GO 30506
30488: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30489: LD_ADDR_VAR 0 3
30493: PUSH
30494: LD_INT 4
30496: PUSH
30497: LD_INT 5
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: ST_TO_ADDR
30504: GO 31201
30506: LD_INT 6
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30532
30514: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30515: LD_ADDR_VAR 0 3
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: LD_INT 5
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: ST_TO_ADDR
30530: GO 31201
30532: LD_INT 10
30534: DOUBLE
30535: EQUAL
30536: IFTRUE 30540
30538: GO 30558
30540: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30541: LD_ADDR_VAR 0 3
30545: PUSH
30546: LD_INT 4
30548: PUSH
30549: LD_INT 5
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: ST_TO_ADDR
30556: GO 31201
30558: LD_INT 22
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30566
30564: GO 30592
30566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_INT 11
30574: PUSH
30575: LD_INT 12
30577: PUSH
30578: LD_INT 13
30580: PUSH
30581: LD_INT 14
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 31201
30592: LD_INT 23
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30626
30600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 11
30608: PUSH
30609: LD_INT 12
30611: PUSH
30612: LD_INT 13
30614: PUSH
30615: LD_INT 14
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
30624: GO 31201
30626: LD_INT 24
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30660
30634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_INT 11
30642: PUSH
30643: LD_INT 12
30645: PUSH
30646: LD_INT 13
30648: PUSH
30649: LD_INT 14
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
30658: GO 31201
30660: LD_INT 30
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30694
30668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 11
30676: PUSH
30677: LD_INT 12
30679: PUSH
30680: LD_INT 13
30682: PUSH
30683: LD_INT 14
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
30692: GO 31201
30694: LD_INT 25
30696: DOUBLE
30697: EQUAL
30698: IFTRUE 30702
30700: GO 30720
30702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 13
30710: PUSH
30711: LD_INT 14
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: ST_TO_ADDR
30718: GO 31201
30720: LD_INT 27
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30746
30728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_INT 13
30736: PUSH
30737: LD_INT 14
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 31201
30746: LD_INT 92
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30780
30754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30755: LD_ADDR_VAR 0 3
30759: PUSH
30760: LD_INT 11
30762: PUSH
30763: LD_INT 12
30765: PUSH
30766: LD_INT 13
30768: PUSH
30769: LD_INT 14
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
30778: GO 31201
30780: LD_INT 28
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30806
30788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30789: LD_ADDR_VAR 0 3
30793: PUSH
30794: LD_INT 13
30796: PUSH
30797: LD_INT 14
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: ST_TO_ADDR
30804: GO 31201
30806: LD_INT 29
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30832
30814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 13
30822: PUSH
30823: LD_INT 14
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: ST_TO_ADDR
30830: GO 31201
30832: LD_INT 31
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30840
30838: GO 30858
30840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30841: LD_ADDR_VAR 0 3
30845: PUSH
30846: LD_INT 13
30848: PUSH
30849: LD_INT 14
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31201
30858: LD_INT 26
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30884
30866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30867: LD_ADDR_VAR 0 3
30871: PUSH
30872: LD_INT 13
30874: PUSH
30875: LD_INT 14
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31201
30884: LD_INT 42
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30918
30892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 21
30900: PUSH
30901: LD_INT 22
30903: PUSH
30904: LD_INT 23
30906: PUSH
30907: LD_INT 24
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31201
30918: LD_INT 43
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30952
30926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 21
30934: PUSH
30935: LD_INT 22
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 24
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31201
30952: LD_INT 44
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30986
30960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 21
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_INT 23
30974: PUSH
30975: LD_INT 24
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
30984: GO 31201
30986: LD_INT 45
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31020
30994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30995: LD_ADDR_VAR 0 3
30999: PUSH
31000: LD_INT 21
31002: PUSH
31003: LD_INT 22
31005: PUSH
31006: LD_INT 23
31008: PUSH
31009: LD_INT 24
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
31018: GO 31201
31020: LD_INT 49
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31054
31028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_INT 21
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_INT 23
31042: PUSH
31043: LD_INT 24
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: ST_TO_ADDR
31052: GO 31201
31054: LD_INT 51
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 31088
31062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31063: LD_ADDR_VAR 0 3
31067: PUSH
31068: LD_INT 21
31070: PUSH
31071: LD_INT 22
31073: PUSH
31074: LD_INT 23
31076: PUSH
31077: LD_INT 24
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
31086: GO 31201
31088: LD_INT 52
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31122
31096: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: LD_INT 21
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_INT 23
31110: PUSH
31111: LD_INT 24
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
31120: GO 31201
31122: LD_INT 53
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31148
31130: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_INT 23
31138: PUSH
31139: LD_INT 24
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: ST_TO_ADDR
31146: GO 31201
31148: LD_INT 46
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31174
31156: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31157: LD_ADDR_VAR 0 3
31161: PUSH
31162: LD_INT 23
31164: PUSH
31165: LD_INT 24
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: ST_TO_ADDR
31172: GO 31201
31174: LD_INT 47
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31200
31182: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_INT 23
31190: PUSH
31191: LD_INT 24
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: ST_TO_ADDR
31198: GO 31201
31200: POP
// result := ( chassis in result ) ;
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_VAR 0 1
31210: PUSH
31211: LD_VAR 0 3
31215: IN
31216: ST_TO_ADDR
// end ;
31217: LD_VAR 0 3
31221: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31222: LD_INT 0
31224: PPUSH
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
31229: PPUSH
31230: PPUSH
// result := array ;
31231: LD_ADDR_VAR 0 5
31235: PUSH
31236: LD_VAR 0 1
31240: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31241: LD_VAR 0 1
31245: NOT
31246: PUSH
31247: LD_VAR 0 2
31251: NOT
31252: OR
31253: PUSH
31254: LD_VAR 0 3
31258: NOT
31259: OR
31260: PUSH
31261: LD_VAR 0 2
31265: PUSH
31266: LD_VAR 0 1
31270: GREATER
31271: OR
31272: PUSH
31273: LD_VAR 0 3
31277: PUSH
31278: LD_VAR 0 1
31282: GREATER
31283: OR
31284: IFFALSE 31288
// exit ;
31286: GO 31584
// if direction then
31288: LD_VAR 0 4
31292: IFFALSE 31356
// begin d := 1 ;
31294: LD_ADDR_VAR 0 9
31298: PUSH
31299: LD_INT 1
31301: ST_TO_ADDR
// if i_from > i_to then
31302: LD_VAR 0 2
31306: PUSH
31307: LD_VAR 0 3
31311: GREATER
31312: IFFALSE 31338
// length := ( array - i_from ) + i_to else
31314: LD_ADDR_VAR 0 11
31318: PUSH
31319: LD_VAR 0 1
31323: PUSH
31324: LD_VAR 0 2
31328: MINUS
31329: PUSH
31330: LD_VAR 0 3
31334: PLUS
31335: ST_TO_ADDR
31336: GO 31354
// length := i_to - i_from ;
31338: LD_ADDR_VAR 0 11
31342: PUSH
31343: LD_VAR 0 3
31347: PUSH
31348: LD_VAR 0 2
31352: MINUS
31353: ST_TO_ADDR
// end else
31354: GO 31417
// begin d := - 1 ;
31356: LD_ADDR_VAR 0 9
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: ST_TO_ADDR
// if i_from > i_to then
31365: LD_VAR 0 2
31369: PUSH
31370: LD_VAR 0 3
31374: GREATER
31375: IFFALSE 31395
// length := i_from - i_to else
31377: LD_ADDR_VAR 0 11
31381: PUSH
31382: LD_VAR 0 2
31386: PUSH
31387: LD_VAR 0 3
31391: MINUS
31392: ST_TO_ADDR
31393: GO 31417
// length := ( array - i_to ) + i_from ;
31395: LD_ADDR_VAR 0 11
31399: PUSH
31400: LD_VAR 0 1
31404: PUSH
31405: LD_VAR 0 3
31409: MINUS
31410: PUSH
31411: LD_VAR 0 2
31415: PLUS
31416: ST_TO_ADDR
// end ; if not length then
31417: LD_VAR 0 11
31421: NOT
31422: IFFALSE 31426
// exit ;
31424: GO 31584
// tmp := array ;
31426: LD_ADDR_VAR 0 10
31430: PUSH
31431: LD_VAR 0 1
31435: ST_TO_ADDR
// for i = 1 to length do
31436: LD_ADDR_VAR 0 6
31440: PUSH
31441: DOUBLE
31442: LD_INT 1
31444: DEC
31445: ST_TO_ADDR
31446: LD_VAR 0 11
31450: PUSH
31451: FOR_TO
31452: IFFALSE 31572
// begin for j = 1 to array do
31454: LD_ADDR_VAR 0 7
31458: PUSH
31459: DOUBLE
31460: LD_INT 1
31462: DEC
31463: ST_TO_ADDR
31464: LD_VAR 0 1
31468: PUSH
31469: FOR_TO
31470: IFFALSE 31558
// begin k := j + d ;
31472: LD_ADDR_VAR 0 8
31476: PUSH
31477: LD_VAR 0 7
31481: PUSH
31482: LD_VAR 0 9
31486: PLUS
31487: ST_TO_ADDR
// if k > array then
31488: LD_VAR 0 8
31492: PUSH
31493: LD_VAR 0 1
31497: GREATER
31498: IFFALSE 31508
// k := 1 ;
31500: LD_ADDR_VAR 0 8
31504: PUSH
31505: LD_INT 1
31507: ST_TO_ADDR
// if not k then
31508: LD_VAR 0 8
31512: NOT
31513: IFFALSE 31525
// k := array ;
31515: LD_ADDR_VAR 0 8
31519: PUSH
31520: LD_VAR 0 1
31524: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31525: LD_ADDR_VAR 0 10
31529: PUSH
31530: LD_VAR 0 10
31534: PPUSH
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_VAR 0 1
31544: PUSH
31545: LD_VAR 0 7
31549: ARRAY
31550: PPUSH
31551: CALL_OW 1
31555: ST_TO_ADDR
// end ;
31556: GO 31469
31558: POP
31559: POP
// array := tmp ;
31560: LD_ADDR_VAR 0 1
31564: PUSH
31565: LD_VAR 0 10
31569: ST_TO_ADDR
// end ;
31570: GO 31451
31572: POP
31573: POP
// result := array ;
31574: LD_ADDR_VAR 0 5
31578: PUSH
31579: LD_VAR 0 1
31583: ST_TO_ADDR
// end ;
31584: LD_VAR 0 5
31588: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31589: LD_INT 0
31591: PPUSH
31592: PPUSH
// result := 0 ;
31593: LD_ADDR_VAR 0 3
31597: PUSH
31598: LD_INT 0
31600: ST_TO_ADDR
// if not array or not value in array then
31601: LD_VAR 0 1
31605: NOT
31606: PUSH
31607: LD_VAR 0 2
31611: PUSH
31612: LD_VAR 0 1
31616: IN
31617: NOT
31618: OR
31619: IFFALSE 31623
// exit ;
31621: GO 31677
// for i = 1 to array do
31623: LD_ADDR_VAR 0 4
31627: PUSH
31628: DOUBLE
31629: LD_INT 1
31631: DEC
31632: ST_TO_ADDR
31633: LD_VAR 0 1
31637: PUSH
31638: FOR_TO
31639: IFFALSE 31675
// if value = array [ i ] then
31641: LD_VAR 0 2
31645: PUSH
31646: LD_VAR 0 1
31650: PUSH
31651: LD_VAR 0 4
31655: ARRAY
31656: EQUAL
31657: IFFALSE 31673
// begin result := i ;
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_VAR 0 4
31668: ST_TO_ADDR
// exit ;
31669: POP
31670: POP
31671: GO 31677
// end ;
31673: GO 31638
31675: POP
31676: POP
// end ;
31677: LD_VAR 0 3
31681: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31682: LD_INT 0
31684: PPUSH
// vc_chassis := chassis ;
31685: LD_ADDR_OWVAR 37
31689: PUSH
31690: LD_VAR 0 1
31694: ST_TO_ADDR
// vc_engine := engine ;
31695: LD_ADDR_OWVAR 39
31699: PUSH
31700: LD_VAR 0 2
31704: ST_TO_ADDR
// vc_control := control ;
31705: LD_ADDR_OWVAR 38
31709: PUSH
31710: LD_VAR 0 3
31714: ST_TO_ADDR
// vc_weapon := weapon ;
31715: LD_ADDR_OWVAR 40
31719: PUSH
31720: LD_VAR 0 4
31724: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31725: LD_ADDR_OWVAR 41
31729: PUSH
31730: LD_VAR 0 5
31734: ST_TO_ADDR
// end ;
31735: LD_VAR 0 6
31739: RET
// export function WantPlant ( unit ) ; var task ; begin
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
// result := false ;
31744: LD_ADDR_VAR 0 2
31748: PUSH
31749: LD_INT 0
31751: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 437
31766: ST_TO_ADDR
// if task then
31767: LD_VAR 0 3
31771: IFFALSE 31799
// if task [ 1 ] [ 1 ] = p then
31773: LD_VAR 0 3
31777: PUSH
31778: LD_INT 1
31780: ARRAY
31781: PUSH
31782: LD_INT 1
31784: ARRAY
31785: PUSH
31786: LD_STRING p
31788: EQUAL
31789: IFFALSE 31799
// result := true ;
31791: LD_ADDR_VAR 0 2
31795: PUSH
31796: LD_INT 1
31798: ST_TO_ADDR
// end ;
31799: LD_VAR 0 2
31803: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31804: LD_INT 0
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
// if pos < 1 then
31810: LD_VAR 0 2
31814: PUSH
31815: LD_INT 1
31817: LESS
31818: IFFALSE 31822
// exit ;
31820: GO 32125
// if pos = 1 then
31822: LD_VAR 0 2
31826: PUSH
31827: LD_INT 1
31829: EQUAL
31830: IFFALSE 31863
// result := Replace ( arr , pos [ 1 ] , value ) else
31832: LD_ADDR_VAR 0 4
31836: PUSH
31837: LD_VAR 0 1
31841: PPUSH
31842: LD_VAR 0 2
31846: PUSH
31847: LD_INT 1
31849: ARRAY
31850: PPUSH
31851: LD_VAR 0 3
31855: PPUSH
31856: CALL_OW 1
31860: ST_TO_ADDR
31861: GO 32125
// begin tmp := arr ;
31863: LD_ADDR_VAR 0 6
31867: PUSH
31868: LD_VAR 0 1
31872: ST_TO_ADDR
// s_arr := [ tmp ] ;
31873: LD_ADDR_VAR 0 7
31877: PUSH
31878: LD_VAR 0 6
31882: PUSH
31883: EMPTY
31884: LIST
31885: ST_TO_ADDR
// for i = 1 to pos - 1 do
31886: LD_ADDR_VAR 0 5
31890: PUSH
31891: DOUBLE
31892: LD_INT 1
31894: DEC
31895: ST_TO_ADDR
31896: LD_VAR 0 2
31900: PUSH
31901: LD_INT 1
31903: MINUS
31904: PUSH
31905: FOR_TO
31906: IFFALSE 31951
// begin tmp := tmp [ pos [ i ] ] ;
31908: LD_ADDR_VAR 0 6
31912: PUSH
31913: LD_VAR 0 6
31917: PUSH
31918: LD_VAR 0 2
31922: PUSH
31923: LD_VAR 0 5
31927: ARRAY
31928: ARRAY
31929: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31930: LD_ADDR_VAR 0 7
31934: PUSH
31935: LD_VAR 0 7
31939: PUSH
31940: LD_VAR 0 6
31944: PUSH
31945: EMPTY
31946: LIST
31947: ADD
31948: ST_TO_ADDR
// end ;
31949: GO 31905
31951: POP
31952: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31953: LD_ADDR_VAR 0 6
31957: PUSH
31958: LD_VAR 0 6
31962: PPUSH
31963: LD_VAR 0 2
31967: PUSH
31968: LD_VAR 0 2
31972: ARRAY
31973: PPUSH
31974: LD_VAR 0 3
31978: PPUSH
31979: CALL_OW 1
31983: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31984: LD_ADDR_VAR 0 7
31988: PUSH
31989: LD_VAR 0 7
31993: PPUSH
31994: LD_VAR 0 7
31998: PPUSH
31999: LD_VAR 0 6
32003: PPUSH
32004: CALL_OW 1
32008: ST_TO_ADDR
// for i = s_arr downto 2 do
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: DOUBLE
32015: LD_VAR 0 7
32019: INC
32020: ST_TO_ADDR
32021: LD_INT 2
32023: PUSH
32024: FOR_DOWNTO
32025: IFFALSE 32109
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32027: LD_ADDR_VAR 0 6
32031: PUSH
32032: LD_VAR 0 7
32036: PUSH
32037: LD_VAR 0 5
32041: PUSH
32042: LD_INT 1
32044: MINUS
32045: ARRAY
32046: PPUSH
32047: LD_VAR 0 2
32051: PUSH
32052: LD_VAR 0 5
32056: PUSH
32057: LD_INT 1
32059: MINUS
32060: ARRAY
32061: PPUSH
32062: LD_VAR 0 7
32066: PUSH
32067: LD_VAR 0 5
32071: ARRAY
32072: PPUSH
32073: CALL_OW 1
32077: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32078: LD_ADDR_VAR 0 7
32082: PUSH
32083: LD_VAR 0 7
32087: PPUSH
32088: LD_VAR 0 5
32092: PUSH
32093: LD_INT 1
32095: MINUS
32096: PPUSH
32097: LD_VAR 0 6
32101: PPUSH
32102: CALL_OW 1
32106: ST_TO_ADDR
// end ;
32107: GO 32024
32109: POP
32110: POP
// result := s_arr [ 1 ] ;
32111: LD_ADDR_VAR 0 4
32115: PUSH
32116: LD_VAR 0 7
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: ST_TO_ADDR
// end ; end ;
32125: LD_VAR 0 4
32129: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
// if not list then
32134: LD_VAR 0 1
32138: NOT
32139: IFFALSE 32143
// exit ;
32141: GO 32234
// i := list [ pos1 ] ;
32143: LD_ADDR_VAR 0 5
32147: PUSH
32148: LD_VAR 0 1
32152: PUSH
32153: LD_VAR 0 2
32157: ARRAY
32158: ST_TO_ADDR
// if not i then
32159: LD_VAR 0 5
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32234
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32168: LD_ADDR_VAR 0 1
32172: PUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: LD_VAR 0 2
32182: PPUSH
32183: LD_VAR 0 1
32187: PUSH
32188: LD_VAR 0 3
32192: ARRAY
32193: PPUSH
32194: CALL_OW 1
32198: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32199: LD_ADDR_VAR 0 1
32203: PUSH
32204: LD_VAR 0 1
32208: PPUSH
32209: LD_VAR 0 3
32213: PPUSH
32214: LD_VAR 0 5
32218: PPUSH
32219: CALL_OW 1
32223: ST_TO_ADDR
// result := list ;
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_VAR 0 1
32233: ST_TO_ADDR
// end ;
32234: LD_VAR 0 4
32238: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32239: LD_INT 0
32241: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 250
32256: PPUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 251
32266: PPUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: LD_VAR 0 4
32281: PPUSH
32282: CALL 32292 0 5
32286: ST_TO_ADDR
// end ;
32287: LD_VAR 0 5
32291: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32292: LD_INT 0
32294: PPUSH
32295: PPUSH
32296: PPUSH
32297: PPUSH
// if not list then
32298: LD_VAR 0 3
32302: NOT
32303: IFFALSE 32307
// exit ;
32305: GO 32695
// result := [ ] ;
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: EMPTY
32313: ST_TO_ADDR
// for i in list do
32314: LD_ADDR_VAR 0 7
32318: PUSH
32319: LD_VAR 0 3
32323: PUSH
32324: FOR_IN
32325: IFFALSE 32527
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32327: LD_ADDR_VAR 0 9
32331: PUSH
32332: LD_VAR 0 7
32336: PPUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: LD_VAR 0 2
32346: PPUSH
32347: CALL_OW 297
32351: ST_TO_ADDR
// if not result then
32352: LD_VAR 0 6
32356: NOT
32357: IFFALSE 32383
// result := [ [ i , tmp ] ] else
32359: LD_ADDR_VAR 0 6
32363: PUSH
32364: LD_VAR 0 7
32368: PUSH
32369: LD_VAR 0 9
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: ST_TO_ADDR
32381: GO 32525
// begin if result [ result ] [ 2 ] < tmp then
32383: LD_VAR 0 6
32387: PUSH
32388: LD_VAR 0 6
32392: ARRAY
32393: PUSH
32394: LD_INT 2
32396: ARRAY
32397: PUSH
32398: LD_VAR 0 9
32402: LESS
32403: IFFALSE 32445
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32405: LD_ADDR_VAR 0 6
32409: PUSH
32410: LD_VAR 0 6
32414: PPUSH
32415: LD_VAR 0 6
32419: PUSH
32420: LD_INT 1
32422: PLUS
32423: PPUSH
32424: LD_VAR 0 7
32428: PUSH
32429: LD_VAR 0 9
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 2
32442: ST_TO_ADDR
32443: GO 32525
// for j = 1 to result do
32445: LD_ADDR_VAR 0 8
32449: PUSH
32450: DOUBLE
32451: LD_INT 1
32453: DEC
32454: ST_TO_ADDR
32455: LD_VAR 0 6
32459: PUSH
32460: FOR_TO
32461: IFFALSE 32523
// begin if tmp < result [ j ] [ 2 ] then
32463: LD_VAR 0 9
32467: PUSH
32468: LD_VAR 0 6
32472: PUSH
32473: LD_VAR 0 8
32477: ARRAY
32478: PUSH
32479: LD_INT 2
32481: ARRAY
32482: LESS
32483: IFFALSE 32521
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32485: LD_ADDR_VAR 0 6
32489: PUSH
32490: LD_VAR 0 6
32494: PPUSH
32495: LD_VAR 0 8
32499: PPUSH
32500: LD_VAR 0 7
32504: PUSH
32505: LD_VAR 0 9
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 2
32518: ST_TO_ADDR
// break ;
32519: GO 32523
// end ; end ;
32521: GO 32460
32523: POP
32524: POP
// end ; end ;
32525: GO 32324
32527: POP
32528: POP
// if result and not asc then
32529: LD_VAR 0 6
32533: PUSH
32534: LD_VAR 0 4
32538: NOT
32539: AND
32540: IFFALSE 32615
// begin tmp := result ;
32542: LD_ADDR_VAR 0 9
32546: PUSH
32547: LD_VAR 0 6
32551: ST_TO_ADDR
// for i = tmp downto 1 do
32552: LD_ADDR_VAR 0 7
32556: PUSH
32557: DOUBLE
32558: LD_VAR 0 9
32562: INC
32563: ST_TO_ADDR
32564: LD_INT 1
32566: PUSH
32567: FOR_DOWNTO
32568: IFFALSE 32613
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32570: LD_ADDR_VAR 0 6
32574: PUSH
32575: LD_VAR 0 6
32579: PPUSH
32580: LD_VAR 0 9
32584: PUSH
32585: LD_VAR 0 7
32589: MINUS
32590: PUSH
32591: LD_INT 1
32593: PLUS
32594: PPUSH
32595: LD_VAR 0 9
32599: PUSH
32600: LD_VAR 0 7
32604: ARRAY
32605: PPUSH
32606: CALL_OW 1
32610: ST_TO_ADDR
32611: GO 32567
32613: POP
32614: POP
// end ; tmp := [ ] ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: EMPTY
32621: ST_TO_ADDR
// if mode then
32622: LD_VAR 0 5
32626: IFFALSE 32695
// begin for i = 1 to result do
32628: LD_ADDR_VAR 0 7
32632: PUSH
32633: DOUBLE
32634: LD_INT 1
32636: DEC
32637: ST_TO_ADDR
32638: LD_VAR 0 6
32642: PUSH
32643: FOR_TO
32644: IFFALSE 32683
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32646: LD_ADDR_VAR 0 9
32650: PUSH
32651: LD_VAR 0 9
32655: PPUSH
32656: LD_VAR 0 7
32660: PPUSH
32661: LD_VAR 0 6
32665: PUSH
32666: LD_VAR 0 7
32670: ARRAY
32671: PUSH
32672: LD_INT 1
32674: ARRAY
32675: PPUSH
32676: CALL_OW 1
32680: ST_TO_ADDR
32681: GO 32643
32683: POP
32684: POP
// result := tmp ;
32685: LD_ADDR_VAR 0 6
32689: PUSH
32690: LD_VAR 0 9
32694: ST_TO_ADDR
// end ; end ;
32695: LD_VAR 0 6
32699: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: ST_TO_ADDR
// if not x or not y then
32730: LD_VAR 0 2
32734: NOT
32735: PUSH
32736: LD_VAR 0 3
32740: NOT
32741: OR
32742: IFFALSE 32746
// exit ;
32744: GO 34396
// if not range then
32746: LD_VAR 0 4
32750: NOT
32751: IFFALSE 32761
// range := 10 ;
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_INT 10
32760: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32761: LD_ADDR_VAR 0 8
32765: PUSH
32766: LD_INT 81
32768: PUSH
32769: LD_VAR 0 1
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 92
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: LD_VAR 0 3
32790: PUSH
32791: LD_VAR 0 4
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: LD_INT 21
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: PPUSH
32824: CALL_OW 69
32828: ST_TO_ADDR
// if not tmp then
32829: LD_VAR 0 8
32833: NOT
32834: IFFALSE 32838
// exit ;
32836: GO 34396
// for i in tmp do
32838: LD_ADDR_VAR 0 6
32842: PUSH
32843: LD_VAR 0 8
32847: PUSH
32848: FOR_IN
32849: IFFALSE 34371
// begin points := [ 0 , 0 , 0 ] ;
32851: LD_ADDR_VAR 0 9
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// bpoints := 1 ;
32870: LD_ADDR_VAR 0 10
32874: PUSH
32875: LD_INT 1
32877: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32878: LD_VAR 0 6
32882: PPUSH
32883: CALL_OW 247
32887: PUSH
32888: LD_INT 1
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 33474
32896: POP
// begin if GetClass ( i ) = 1 then
32897: LD_VAR 0 6
32901: PPUSH
32902: CALL_OW 257
32906: PUSH
32907: LD_INT 1
32909: EQUAL
32910: IFFALSE 32931
// points := [ 10 , 5 , 3 ] ;
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_INT 10
32919: PUSH
32920: LD_INT 5
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32931: LD_VAR 0 6
32935: PPUSH
32936: CALL_OW 257
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: IN
32955: IFFALSE 32976
// points := [ 3 , 2 , 1 ] ;
32957: LD_ADDR_VAR 0 9
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32976: LD_VAR 0 6
32980: PPUSH
32981: CALL_OW 257
32985: PUSH
32986: LD_INT 5
32988: EQUAL
32989: IFFALSE 33010
// points := [ 130 , 5 , 2 ] ;
32991: LD_ADDR_VAR 0 9
32995: PUSH
32996: LD_INT 130
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33010: LD_VAR 0 6
33014: PPUSH
33015: CALL_OW 257
33019: PUSH
33020: LD_INT 8
33022: EQUAL
33023: IFFALSE 33044
// points := [ 35 , 35 , 30 ] ;
33025: LD_ADDR_VAR 0 9
33029: PUSH
33030: LD_INT 35
33032: PUSH
33033: LD_INT 35
33035: PUSH
33036: LD_INT 30
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33044: LD_VAR 0 6
33048: PPUSH
33049: CALL_OW 257
33053: PUSH
33054: LD_INT 9
33056: EQUAL
33057: IFFALSE 33078
// points := [ 20 , 55 , 40 ] ;
33059: LD_ADDR_VAR 0 9
33063: PUSH
33064: LD_INT 20
33066: PUSH
33067: LD_INT 55
33069: PUSH
33070: LD_INT 40
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33078: LD_VAR 0 6
33082: PPUSH
33083: CALL_OW 257
33087: PUSH
33088: LD_INT 12
33090: PUSH
33091: LD_INT 16
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: IN
33098: IFFALSE 33119
// points := [ 5 , 3 , 2 ] ;
33100: LD_ADDR_VAR 0 9
33104: PUSH
33105: LD_INT 5
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33119: LD_VAR 0 6
33123: PPUSH
33124: CALL_OW 257
33128: PUSH
33129: LD_INT 17
33131: EQUAL
33132: IFFALSE 33153
// points := [ 100 , 50 , 75 ] ;
33134: LD_ADDR_VAR 0 9
33138: PUSH
33139: LD_INT 100
33141: PUSH
33142: LD_INT 50
33144: PUSH
33145: LD_INT 75
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33153: LD_VAR 0 6
33157: PPUSH
33158: CALL_OW 257
33162: PUSH
33163: LD_INT 15
33165: EQUAL
33166: IFFALSE 33187
// points := [ 10 , 5 , 3 ] ;
33168: LD_ADDR_VAR 0 9
33172: PUSH
33173: LD_INT 10
33175: PUSH
33176: LD_INT 5
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33187: LD_VAR 0 6
33191: PPUSH
33192: CALL_OW 257
33196: PUSH
33197: LD_INT 14
33199: EQUAL
33200: IFFALSE 33221
// points := [ 10 , 0 , 0 ] ;
33202: LD_ADDR_VAR 0 9
33206: PUSH
33207: LD_INT 10
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33221: LD_VAR 0 6
33225: PPUSH
33226: CALL_OW 257
33230: PUSH
33231: LD_INT 11
33233: EQUAL
33234: IFFALSE 33255
// points := [ 30 , 10 , 5 ] ;
33236: LD_ADDR_VAR 0 9
33240: PUSH
33241: LD_INT 30
33243: PUSH
33244: LD_INT 10
33246: PUSH
33247: LD_INT 5
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33255: LD_VAR 0 1
33259: PPUSH
33260: LD_INT 5
33262: PPUSH
33263: CALL_OW 321
33267: PUSH
33268: LD_INT 2
33270: EQUAL
33271: IFFALSE 33288
// bpoints := bpoints * 1.8 ;
33273: LD_ADDR_VAR 0 10
33277: PUSH
33278: LD_VAR 0 10
33282: PUSH
33283: LD_REAL  1.80000000000000E+0000
33286: MUL
33287: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33288: LD_VAR 0 6
33292: PPUSH
33293: CALL_OW 257
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: IN
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: LD_INT 51
33324: PPUSH
33325: CALL_OW 321
33329: PUSH
33330: LD_INT 2
33332: EQUAL
33333: AND
33334: IFFALSE 33351
// bpoints := bpoints * 1.2 ;
33336: LD_ADDR_VAR 0 10
33340: PUSH
33341: LD_VAR 0 10
33345: PUSH
33346: LD_REAL  1.20000000000000E+0000
33349: MUL
33350: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33351: LD_VAR 0 6
33355: PPUSH
33356: CALL_OW 257
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 7
33366: PUSH
33367: LD_INT 9
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: IN
33375: PUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: LD_INT 52
33383: PPUSH
33384: CALL_OW 321
33388: PUSH
33389: LD_INT 2
33391: EQUAL
33392: AND
33393: IFFALSE 33410
// bpoints := bpoints * 1.5 ;
33395: LD_ADDR_VAR 0 10
33399: PUSH
33400: LD_VAR 0 10
33404: PUSH
33405: LD_REAL  1.50000000000000E+0000
33408: MUL
33409: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33410: LD_VAR 0 1
33414: PPUSH
33415: LD_INT 66
33417: PPUSH
33418: CALL_OW 321
33422: PUSH
33423: LD_INT 2
33425: EQUAL
33426: IFFALSE 33443
// bpoints := bpoints * 1.1 ;
33428: LD_ADDR_VAR 0 10
33432: PUSH
33433: LD_VAR 0 10
33437: PUSH
33438: LD_REAL  1.10000000000000E+0000
33441: MUL
33442: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33443: LD_ADDR_VAR 0 10
33447: PUSH
33448: LD_VAR 0 10
33452: PUSH
33453: LD_VAR 0 6
33457: PPUSH
33458: LD_INT 1
33460: PPUSH
33461: CALL_OW 259
33465: PUSH
33466: LD_REAL  1.15000000000000E+0000
33469: MUL
33470: MUL
33471: ST_TO_ADDR
// end ; unit_vehicle :
33472: GO 34300
33474: LD_INT 2
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33482
33480: GO 34288
33482: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33483: LD_VAR 0 6
33487: PPUSH
33488: CALL_OW 264
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 42
33498: PUSH
33499: LD_INT 24
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: IN
33507: IFFALSE 33528
// points := [ 25 , 5 , 3 ] ;
33509: LD_ADDR_VAR 0 9
33513: PUSH
33514: LD_INT 25
33516: PUSH
33517: LD_INT 5
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33528: LD_VAR 0 6
33532: PPUSH
33533: CALL_OW 264
33537: PUSH
33538: LD_INT 4
33540: PUSH
33541: LD_INT 43
33543: PUSH
33544: LD_INT 25
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: IN
33552: IFFALSE 33573
// points := [ 40 , 15 , 5 ] ;
33554: LD_ADDR_VAR 0 9
33558: PUSH
33559: LD_INT 40
33561: PUSH
33562: LD_INT 15
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33573: LD_VAR 0 6
33577: PPUSH
33578: CALL_OW 264
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: LD_INT 23
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: IN
33593: IFFALSE 33614
// points := [ 7 , 25 , 8 ] ;
33595: LD_ADDR_VAR 0 9
33599: PUSH
33600: LD_INT 7
33602: PUSH
33603: LD_INT 25
33605: PUSH
33606: LD_INT 8
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33614: LD_VAR 0 6
33618: PPUSH
33619: CALL_OW 264
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: LD_INT 27
33629: PUSH
33630: LD_INT 44
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: IN
33638: IFFALSE 33659
// points := [ 14 , 50 , 16 ] ;
33640: LD_ADDR_VAR 0 9
33644: PUSH
33645: LD_INT 14
33647: PUSH
33648: LD_INT 50
33650: PUSH
33651: LD_INT 16
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33659: LD_VAR 0 6
33663: PPUSH
33664: CALL_OW 264
33668: PUSH
33669: LD_INT 6
33671: PUSH
33672: LD_INT 46
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: IN
33679: IFFALSE 33700
// points := [ 32 , 120 , 70 ] ;
33681: LD_ADDR_VAR 0 9
33685: PUSH
33686: LD_INT 32
33688: PUSH
33689: LD_INT 120
33691: PUSH
33692: LD_INT 70
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33700: LD_VAR 0 6
33704: PPUSH
33705: CALL_OW 264
33709: PUSH
33710: LD_INT 7
33712: PUSH
33713: LD_INT 28
33715: PUSH
33716: LD_INT 45
33718: PUSH
33719: LD_INT 92
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: IN
33728: IFFALSE 33749
// points := [ 35 , 20 , 45 ] ;
33730: LD_ADDR_VAR 0 9
33734: PUSH
33735: LD_INT 35
33737: PUSH
33738: LD_INT 20
33740: PUSH
33741: LD_INT 45
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33749: LD_VAR 0 6
33753: PPUSH
33754: CALL_OW 264
33758: PUSH
33759: LD_INT 47
33761: PUSH
33762: EMPTY
33763: LIST
33764: IN
33765: IFFALSE 33786
// points := [ 67 , 45 , 75 ] ;
33767: LD_ADDR_VAR 0 9
33771: PUSH
33772: LD_INT 67
33774: PUSH
33775: LD_INT 45
33777: PUSH
33778: LD_INT 75
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33786: LD_VAR 0 6
33790: PPUSH
33791: CALL_OW 264
33795: PUSH
33796: LD_INT 26
33798: PUSH
33799: EMPTY
33800: LIST
33801: IN
33802: IFFALSE 33823
// points := [ 120 , 30 , 80 ] ;
33804: LD_ADDR_VAR 0 9
33808: PUSH
33809: LD_INT 120
33811: PUSH
33812: LD_INT 30
33814: PUSH
33815: LD_INT 80
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33823: LD_VAR 0 6
33827: PPUSH
33828: CALL_OW 264
33832: PUSH
33833: LD_INT 22
33835: PUSH
33836: EMPTY
33837: LIST
33838: IN
33839: IFFALSE 33860
// points := [ 40 , 1 , 1 ] ;
33841: LD_ADDR_VAR 0 9
33845: PUSH
33846: LD_INT 40
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33860: LD_VAR 0 6
33864: PPUSH
33865: CALL_OW 264
33869: PUSH
33870: LD_INT 29
33872: PUSH
33873: EMPTY
33874: LIST
33875: IN
33876: IFFALSE 33897
// points := [ 70 , 200 , 400 ] ;
33878: LD_ADDR_VAR 0 9
33882: PUSH
33883: LD_INT 70
33885: PUSH
33886: LD_INT 200
33888: PUSH
33889: LD_INT 400
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33897: LD_VAR 0 6
33901: PPUSH
33902: CALL_OW 264
33906: PUSH
33907: LD_INT 14
33909: PUSH
33910: LD_INT 53
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: IN
33917: IFFALSE 33938
// points := [ 40 , 10 , 20 ] ;
33919: LD_ADDR_VAR 0 9
33923: PUSH
33924: LD_INT 40
33926: PUSH
33927: LD_INT 10
33929: PUSH
33930: LD_INT 20
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33938: LD_VAR 0 6
33942: PPUSH
33943: CALL_OW 264
33947: PUSH
33948: LD_INT 9
33950: PUSH
33951: EMPTY
33952: LIST
33953: IN
33954: IFFALSE 33975
// points := [ 5 , 70 , 20 ] ;
33956: LD_ADDR_VAR 0 9
33960: PUSH
33961: LD_INT 5
33963: PUSH
33964: LD_INT 70
33966: PUSH
33967: LD_INT 20
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33975: LD_VAR 0 6
33979: PPUSH
33980: CALL_OW 264
33984: PUSH
33985: LD_INT 10
33987: PUSH
33988: EMPTY
33989: LIST
33990: IN
33991: IFFALSE 34012
// points := [ 35 , 110 , 70 ] ;
33993: LD_ADDR_VAR 0 9
33997: PUSH
33998: LD_INT 35
34000: PUSH
34001: LD_INT 110
34003: PUSH
34004: LD_INT 70
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34012: LD_VAR 0 6
34016: PPUSH
34017: CALL_OW 265
34021: PUSH
34022: LD_INT 25
34024: EQUAL
34025: IFFALSE 34046
// points := [ 80 , 65 , 100 ] ;
34027: LD_ADDR_VAR 0 9
34031: PUSH
34032: LD_INT 80
34034: PUSH
34035: LD_INT 65
34037: PUSH
34038: LD_INT 100
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 263
34055: PUSH
34056: LD_INT 1
34058: EQUAL
34059: IFFALSE 34094
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34061: LD_ADDR_VAR 0 10
34065: PUSH
34066: LD_VAR 0 10
34070: PUSH
34071: LD_VAR 0 6
34075: PPUSH
34076: CALL_OW 311
34080: PPUSH
34081: LD_INT 3
34083: PPUSH
34084: CALL_OW 259
34088: PUSH
34089: LD_INT 4
34091: MUL
34092: MUL
34093: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34094: LD_VAR 0 6
34098: PPUSH
34099: CALL_OW 263
34103: PUSH
34104: LD_INT 2
34106: EQUAL
34107: IFFALSE 34158
// begin j := IsControledBy ( i ) ;
34109: LD_ADDR_VAR 0 7
34113: PUSH
34114: LD_VAR 0 6
34118: PPUSH
34119: CALL_OW 312
34123: ST_TO_ADDR
// if j then
34124: LD_VAR 0 7
34128: IFFALSE 34158
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34130: LD_ADDR_VAR 0 10
34134: PUSH
34135: LD_VAR 0 10
34139: PUSH
34140: LD_VAR 0 7
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 259
34152: PUSH
34153: LD_INT 3
34155: MUL
34156: MUL
34157: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34158: LD_VAR 0 6
34162: PPUSH
34163: CALL_OW 264
34167: PUSH
34168: LD_INT 5
34170: PUSH
34171: LD_INT 6
34173: PUSH
34174: LD_INT 46
34176: PUSH
34177: LD_INT 44
34179: PUSH
34180: LD_INT 47
34182: PUSH
34183: LD_INT 45
34185: PUSH
34186: LD_INT 28
34188: PUSH
34189: LD_INT 7
34191: PUSH
34192: LD_INT 27
34194: PUSH
34195: LD_INT 29
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: IN
34210: PUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: LD_INT 52
34218: PPUSH
34219: CALL_OW 321
34223: PUSH
34224: LD_INT 2
34226: EQUAL
34227: AND
34228: IFFALSE 34245
// bpoints := bpoints * 1.2 ;
34230: LD_ADDR_VAR 0 10
34234: PUSH
34235: LD_VAR 0 10
34239: PUSH
34240: LD_REAL  1.20000000000000E+0000
34243: MUL
34244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34245: LD_VAR 0 6
34249: PPUSH
34250: CALL_OW 264
34254: PUSH
34255: LD_INT 6
34257: PUSH
34258: LD_INT 46
34260: PUSH
34261: LD_INT 47
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: IN
34269: IFFALSE 34286
// bpoints := bpoints * 1.2 ;
34271: LD_ADDR_VAR 0 10
34275: PUSH
34276: LD_VAR 0 10
34280: PUSH
34281: LD_REAL  1.20000000000000E+0000
34284: MUL
34285: ST_TO_ADDR
// end ; unit_building :
34286: GO 34300
34288: LD_INT 3
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34299
34296: POP
// ; end ;
34297: GO 34300
34299: POP
// for j = 1 to 3 do
34300: LD_ADDR_VAR 0 7
34304: PUSH
34305: DOUBLE
34306: LD_INT 1
34308: DEC
34309: ST_TO_ADDR
34310: LD_INT 3
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34367
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34316: LD_ADDR_VAR 0 5
34320: PUSH
34321: LD_VAR 0 5
34325: PPUSH
34326: LD_VAR 0 7
34330: PPUSH
34331: LD_VAR 0 5
34335: PUSH
34336: LD_VAR 0 7
34340: ARRAY
34341: PUSH
34342: LD_VAR 0 9
34346: PUSH
34347: LD_VAR 0 7
34351: ARRAY
34352: PUSH
34353: LD_VAR 0 10
34357: MUL
34358: PLUS
34359: PPUSH
34360: CALL_OW 1
34364: ST_TO_ADDR
34365: GO 34313
34367: POP
34368: POP
// end ;
34369: GO 32848
34371: POP
34372: POP
// result := Replace ( result , 4 , tmp ) ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 5
34382: PPUSH
34383: LD_INT 4
34385: PPUSH
34386: LD_VAR 0 8
34390: PPUSH
34391: CALL_OW 1
34395: ST_TO_ADDR
// end ;
34396: LD_VAR 0 5
34400: RET
// export function DangerAtRange ( unit , range ) ; begin
34401: LD_INT 0
34403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 255
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 250
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: CALL_OW 251
34438: PPUSH
34439: LD_VAR 0 2
34443: PPUSH
34444: CALL 32700 0 4
34448: ST_TO_ADDR
// end ;
34449: LD_VAR 0 3
34453: RET
// export function DangerInArea ( side , area ) ; begin
34454: LD_INT 0
34456: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_VAR 0 2
34466: PPUSH
34467: LD_INT 81
34469: PUSH
34470: LD_VAR 0 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PPUSH
34479: CALL_OW 70
34483: ST_TO_ADDR
// end ;
34484: LD_VAR 0 3
34488: RET
// export function IsExtension ( b ) ; begin
34489: LD_INT 0
34491: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34492: LD_ADDR_VAR 0 2
34496: PUSH
34497: LD_VAR 0 1
34501: PUSH
34502: LD_INT 23
34504: PUSH
34505: LD_INT 20
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: LD_INT 17
34513: PUSH
34514: LD_INT 24
34516: PUSH
34517: LD_INT 21
34519: PUSH
34520: LD_INT 19
34522: PUSH
34523: LD_INT 16
34525: PUSH
34526: LD_INT 25
34528: PUSH
34529: LD_INT 18
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: IN
34544: ST_TO_ADDR
// end ;
34545: LD_VAR 0 2
34549: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34550: LD_INT 0
34552: PPUSH
34553: PPUSH
34554: PPUSH
// result := [ ] ;
34555: LD_ADDR_VAR 0 4
34559: PUSH
34560: EMPTY
34561: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34562: LD_ADDR_VAR 0 5
34566: PUSH
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_INT 21
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PPUSH
34582: CALL_OW 70
34586: ST_TO_ADDR
// if not tmp then
34587: LD_VAR 0 5
34591: NOT
34592: IFFALSE 34596
// exit ;
34594: GO 34660
// if checkLink then
34596: LD_VAR 0 3
34600: IFFALSE 34650
// begin for i in tmp do
34602: LD_ADDR_VAR 0 6
34606: PUSH
34607: LD_VAR 0 5
34611: PUSH
34612: FOR_IN
34613: IFFALSE 34648
// if GetBase ( i ) <> base then
34615: LD_VAR 0 6
34619: PPUSH
34620: CALL_OW 274
34624: PUSH
34625: LD_VAR 0 1
34629: NONEQUAL
34630: IFFALSE 34646
// ComLinkToBase ( base , i ) ;
34632: LD_VAR 0 1
34636: PPUSH
34637: LD_VAR 0 6
34641: PPUSH
34642: CALL_OW 169
34646: GO 34612
34648: POP
34649: POP
// end ; result := tmp ;
34650: LD_ADDR_VAR 0 4
34654: PUSH
34655: LD_VAR 0 5
34659: ST_TO_ADDR
// end ;
34660: LD_VAR 0 4
34664: RET
// export function ComComplete ( units , b ) ; var i ; begin
34665: LD_INT 0
34667: PPUSH
34668: PPUSH
// if not units then
34669: LD_VAR 0 1
34673: NOT
34674: IFFALSE 34678
// exit ;
34676: GO 34768
// for i in units do
34678: LD_ADDR_VAR 0 4
34682: PUSH
34683: LD_VAR 0 1
34687: PUSH
34688: FOR_IN
34689: IFFALSE 34766
// if BuildingStatus ( b ) = bs_build then
34691: LD_VAR 0 2
34695: PPUSH
34696: CALL_OW 461
34700: PUSH
34701: LD_INT 1
34703: EQUAL
34704: IFFALSE 34764
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34706: LD_VAR 0 4
34710: PPUSH
34711: LD_STRING h
34713: PUSH
34714: LD_VAR 0 2
34718: PPUSH
34719: CALL_OW 250
34723: PUSH
34724: LD_VAR 0 2
34728: PPUSH
34729: CALL_OW 251
34733: PUSH
34734: LD_VAR 0 2
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: PPUSH
34760: CALL_OW 446
34764: GO 34688
34766: POP
34767: POP
// end ;
34768: LD_VAR 0 3
34772: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34773: LD_INT 0
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34781: LD_VAR 0 1
34785: NOT
34786: PUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL_OW 263
34796: PUSH
34797: LD_INT 2
34799: NONEQUAL
34800: OR
34801: IFFALSE 34805
// exit ;
34803: GO 35121
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34805: LD_ADDR_VAR 0 6
34809: PUSH
34810: LD_INT 22
34812: PUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 255
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 30
34832: PUSH
34833: LD_INT 36
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 34
34842: PUSH
34843: LD_INT 31
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PPUSH
34859: CALL_OW 69
34863: ST_TO_ADDR
// if not tmp then
34864: LD_VAR 0 6
34868: NOT
34869: IFFALSE 34873
// exit ;
34871: GO 35121
// result := [ ] ;
34873: LD_ADDR_VAR 0 2
34877: PUSH
34878: EMPTY
34879: ST_TO_ADDR
// for i in tmp do
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 6
34889: PUSH
34890: FOR_IN
34891: IFFALSE 34962
// begin t := UnitsInside ( i ) ;
34893: LD_ADDR_VAR 0 4
34897: PUSH
34898: LD_VAR 0 3
34902: PPUSH
34903: CALL_OW 313
34907: ST_TO_ADDR
// if t then
34908: LD_VAR 0 4
34912: IFFALSE 34960
// for j in t do
34914: LD_ADDR_VAR 0 7
34918: PUSH
34919: LD_VAR 0 4
34923: PUSH
34924: FOR_IN
34925: IFFALSE 34958
// result := Replace ( result , result + 1 , j ) ;
34927: LD_ADDR_VAR 0 2
34931: PUSH
34932: LD_VAR 0 2
34936: PPUSH
34937: LD_VAR 0 2
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: PPUSH
34946: LD_VAR 0 7
34950: PPUSH
34951: CALL_OW 1
34955: ST_TO_ADDR
34956: GO 34924
34958: POP
34959: POP
// end ;
34960: GO 34890
34962: POP
34963: POP
// if not result then
34964: LD_VAR 0 2
34968: NOT
34969: IFFALSE 34973
// exit ;
34971: GO 35121
// mech := result [ 1 ] ;
34973: LD_ADDR_VAR 0 5
34977: PUSH
34978: LD_VAR 0 2
34982: PUSH
34983: LD_INT 1
34985: ARRAY
34986: ST_TO_ADDR
// if result > 1 then
34987: LD_VAR 0 2
34991: PUSH
34992: LD_INT 1
34994: GREATER
34995: IFFALSE 35107
// begin for i = 2 to result do
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: DOUBLE
35003: LD_INT 2
35005: DEC
35006: ST_TO_ADDR
35007: LD_VAR 0 2
35011: PUSH
35012: FOR_TO
35013: IFFALSE 35105
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35015: LD_ADDR_VAR 0 4
35019: PUSH
35020: LD_VAR 0 2
35024: PUSH
35025: LD_VAR 0 3
35029: ARRAY
35030: PPUSH
35031: LD_INT 3
35033: PPUSH
35034: CALL_OW 259
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 3
35048: ARRAY
35049: PPUSH
35050: CALL_OW 432
35054: MINUS
35055: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35056: LD_VAR 0 4
35060: PUSH
35061: LD_VAR 0 5
35065: PPUSH
35066: LD_INT 3
35068: PPUSH
35069: CALL_OW 259
35073: PUSH
35074: LD_VAR 0 5
35078: PPUSH
35079: CALL_OW 432
35083: MINUS
35084: GREATEREQUAL
35085: IFFALSE 35103
// mech := result [ i ] ;
35087: LD_ADDR_VAR 0 5
35091: PUSH
35092: LD_VAR 0 2
35096: PUSH
35097: LD_VAR 0 3
35101: ARRAY
35102: ST_TO_ADDR
// end ;
35103: GO 35012
35105: POP
35106: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35107: LD_VAR 0 1
35111: PPUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: CALL_OW 135
// end ;
35121: LD_VAR 0 2
35125: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35126: LD_INT 0
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
// result := [ ] ;
35141: LD_ADDR_VAR 0 7
35145: PUSH
35146: EMPTY
35147: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 266
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: IN
35168: NOT
35169: IFFALSE 35173
// exit ;
35171: GO 36807
// if name then
35173: LD_VAR 0 3
35177: IFFALSE 35193
// SetBName ( base_dep , name ) ;
35179: LD_VAR 0 1
35183: PPUSH
35184: LD_VAR 0 3
35188: PPUSH
35189: CALL_OW 500
// base := GetBase ( base_dep ) ;
35193: LD_ADDR_VAR 0 15
35197: PUSH
35198: LD_VAR 0 1
35202: PPUSH
35203: CALL_OW 274
35207: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35208: LD_ADDR_VAR 0 16
35212: PUSH
35213: LD_VAR 0 1
35217: PPUSH
35218: CALL_OW 255
35222: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35223: LD_ADDR_VAR 0 17
35227: PUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 248
35237: ST_TO_ADDR
// if sources then
35238: LD_VAR 0 5
35242: IFFALSE 35289
// for i = 1 to 3 do
35244: LD_ADDR_VAR 0 8
35248: PUSH
35249: DOUBLE
35250: LD_INT 1
35252: DEC
35253: ST_TO_ADDR
35254: LD_INT 3
35256: PUSH
35257: FOR_TO
35258: IFFALSE 35287
// AddResourceType ( base , i , sources [ i ] ) ;
35260: LD_VAR 0 15
35264: PPUSH
35265: LD_VAR 0 8
35269: PPUSH
35270: LD_VAR 0 5
35274: PUSH
35275: LD_VAR 0 8
35279: ARRAY
35280: PPUSH
35281: CALL_OW 276
35285: GO 35257
35287: POP
35288: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35289: LD_ADDR_VAR 0 18
35293: PUSH
35294: LD_VAR 0 15
35298: PPUSH
35299: LD_VAR 0 2
35303: PPUSH
35304: LD_INT 1
35306: PPUSH
35307: CALL 34550 0 3
35311: ST_TO_ADDR
// InitHc ;
35312: CALL_OW 19
// InitUc ;
35316: CALL_OW 18
// uc_side := side ;
35320: LD_ADDR_OWVAR 20
35324: PUSH
35325: LD_VAR 0 16
35329: ST_TO_ADDR
// uc_nation := nation ;
35330: LD_ADDR_OWVAR 21
35334: PUSH
35335: LD_VAR 0 17
35339: ST_TO_ADDR
// if buildings then
35340: LD_VAR 0 18
35344: IFFALSE 36666
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35346: LD_ADDR_VAR 0 19
35350: PUSH
35351: LD_VAR 0 18
35355: PPUSH
35356: LD_INT 2
35358: PUSH
35359: LD_INT 30
35361: PUSH
35362: LD_INT 29
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 30
35371: PUSH
35372: LD_INT 30
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: PPUSH
35384: CALL_OW 72
35388: ST_TO_ADDR
// if tmp then
35389: LD_VAR 0 19
35393: IFFALSE 35441
// for i in tmp do
35395: LD_ADDR_VAR 0 8
35399: PUSH
35400: LD_VAR 0 19
35404: PUSH
35405: FOR_IN
35406: IFFALSE 35439
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35408: LD_VAR 0 8
35412: PPUSH
35413: CALL_OW 250
35417: PPUSH
35418: LD_VAR 0 8
35422: PPUSH
35423: CALL_OW 251
35427: PPUSH
35428: LD_VAR 0 16
35432: PPUSH
35433: CALL_OW 441
35437: GO 35405
35439: POP
35440: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35441: LD_VAR 0 18
35445: PPUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 32
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 30
35461: PUSH
35462: LD_INT 33
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: PPUSH
35474: CALL_OW 72
35478: IFFALSE 35566
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35480: LD_ADDR_VAR 0 8
35484: PUSH
35485: LD_VAR 0 18
35489: PPUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: LD_INT 32
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 30
35505: PUSH
35506: LD_INT 33
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: PPUSH
35518: CALL_OW 72
35522: PUSH
35523: FOR_IN
35524: IFFALSE 35564
// begin if not GetBWeapon ( i ) then
35526: LD_VAR 0 8
35530: PPUSH
35531: CALL_OW 269
35535: NOT
35536: IFFALSE 35562
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35538: LD_VAR 0 8
35542: PPUSH
35543: LD_VAR 0 8
35547: PPUSH
35548: LD_VAR 0 2
35552: PPUSH
35553: CALL 36812 0 2
35557: PPUSH
35558: CALL_OW 431
// end ;
35562: GO 35523
35564: POP
35565: POP
// end ; for i = 1 to personel do
35566: LD_ADDR_VAR 0 8
35570: PUSH
35571: DOUBLE
35572: LD_INT 1
35574: DEC
35575: ST_TO_ADDR
35576: LD_VAR 0 6
35580: PUSH
35581: FOR_TO
35582: IFFALSE 36646
// begin if i > 4 then
35584: LD_VAR 0 8
35588: PUSH
35589: LD_INT 4
35591: GREATER
35592: IFFALSE 35596
// break ;
35594: GO 36646
// case i of 1 :
35596: LD_VAR 0 8
35600: PUSH
35601: LD_INT 1
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35609
35607: GO 35689
35609: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35610: LD_ADDR_VAR 0 12
35614: PUSH
35615: LD_VAR 0 18
35619: PPUSH
35620: LD_INT 22
35622: PUSH
35623: LD_VAR 0 16
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 58
35634: PUSH
35635: EMPTY
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 30
35643: PUSH
35644: LD_INT 32
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 30
35653: PUSH
35654: LD_INT 4
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 30
35663: PUSH
35664: LD_INT 5
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: PPUSH
35682: CALL_OW 72
35686: ST_TO_ADDR
35687: GO 35911
35689: LD_INT 2
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35759
35697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35698: LD_ADDR_VAR 0 12
35702: PUSH
35703: LD_VAR 0 18
35707: PPUSH
35708: LD_INT 22
35710: PUSH
35711: LD_VAR 0 16
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 30
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 30
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PPUSH
35752: CALL_OW 72
35756: ST_TO_ADDR
35757: GO 35911
35759: LD_INT 3
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35767
35765: GO 35829
35767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35768: LD_ADDR_VAR 0 12
35772: PUSH
35773: LD_VAR 0 18
35777: PPUSH
35778: LD_INT 22
35780: PUSH
35781: LD_VAR 0 16
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 30
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 30
35805: PUSH
35806: LD_INT 3
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PPUSH
35822: CALL_OW 72
35826: ST_TO_ADDR
35827: GO 35911
35829: LD_INT 4
35831: DOUBLE
35832: EQUAL
35833: IFTRUE 35837
35835: GO 35910
35837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35838: LD_ADDR_VAR 0 12
35842: PUSH
35843: LD_VAR 0 18
35847: PPUSH
35848: LD_INT 22
35850: PUSH
35851: LD_VAR 0 16
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 30
35865: PUSH
35866: LD_INT 6
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 30
35875: PUSH
35876: LD_INT 7
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 30
35885: PUSH
35886: LD_INT 8
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PPUSH
35903: CALL_OW 72
35907: ST_TO_ADDR
35908: GO 35911
35910: POP
// if i = 1 then
35911: LD_VAR 0 8
35915: PUSH
35916: LD_INT 1
35918: EQUAL
35919: IFFALSE 36030
// begin tmp := [ ] ;
35921: LD_ADDR_VAR 0 19
35925: PUSH
35926: EMPTY
35927: ST_TO_ADDR
// for j in f do
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: LD_VAR 0 12
35937: PUSH
35938: FOR_IN
35939: IFFALSE 36012
// if GetBType ( j ) = b_bunker then
35941: LD_VAR 0 9
35945: PPUSH
35946: CALL_OW 266
35950: PUSH
35951: LD_INT 32
35953: EQUAL
35954: IFFALSE 35981
// tmp := Insert ( tmp , 1 , j ) else
35956: LD_ADDR_VAR 0 19
35960: PUSH
35961: LD_VAR 0 19
35965: PPUSH
35966: LD_INT 1
35968: PPUSH
35969: LD_VAR 0 9
35973: PPUSH
35974: CALL_OW 2
35978: ST_TO_ADDR
35979: GO 36010
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35981: LD_ADDR_VAR 0 19
35985: PUSH
35986: LD_VAR 0 19
35990: PPUSH
35991: LD_VAR 0 19
35995: PUSH
35996: LD_INT 1
35998: PLUS
35999: PPUSH
36000: LD_VAR 0 9
36004: PPUSH
36005: CALL_OW 2
36009: ST_TO_ADDR
36010: GO 35938
36012: POP
36013: POP
// if tmp then
36014: LD_VAR 0 19
36018: IFFALSE 36030
// f := tmp ;
36020: LD_ADDR_VAR 0 12
36024: PUSH
36025: LD_VAR 0 19
36029: ST_TO_ADDR
// end ; x := personel [ i ] ;
36030: LD_ADDR_VAR 0 13
36034: PUSH
36035: LD_VAR 0 6
36039: PUSH
36040: LD_VAR 0 8
36044: ARRAY
36045: ST_TO_ADDR
// if x = - 1 then
36046: LD_VAR 0 13
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: EQUAL
36055: IFFALSE 36264
// begin for j in f do
36057: LD_ADDR_VAR 0 9
36061: PUSH
36062: LD_VAR 0 12
36066: PUSH
36067: FOR_IN
36068: IFFALSE 36260
// repeat InitHc ;
36070: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36074: LD_VAR 0 9
36078: PPUSH
36079: CALL_OW 266
36083: PUSH
36084: LD_INT 5
36086: EQUAL
36087: IFFALSE 36157
// begin if UnitsInside ( j ) < 3 then
36089: LD_VAR 0 9
36093: PPUSH
36094: CALL_OW 313
36098: PUSH
36099: LD_INT 3
36101: LESS
36102: IFFALSE 36138
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36104: LD_INT 0
36106: PPUSH
36107: LD_INT 5
36109: PUSH
36110: LD_INT 8
36112: PUSH
36113: LD_INT 9
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: PUSH
36121: LD_VAR 0 17
36125: ARRAY
36126: PPUSH
36127: LD_VAR 0 4
36131: PPUSH
36132: CALL_OW 380
36136: GO 36155
// PrepareHuman ( false , i , skill ) ;
36138: LD_INT 0
36140: PPUSH
36141: LD_VAR 0 8
36145: PPUSH
36146: LD_VAR 0 4
36150: PPUSH
36151: CALL_OW 380
// end else
36155: GO 36174
// PrepareHuman ( false , i , skill ) ;
36157: LD_INT 0
36159: PPUSH
36160: LD_VAR 0 8
36164: PPUSH
36165: LD_VAR 0 4
36169: PPUSH
36170: CALL_OW 380
// un := CreateHuman ;
36174: LD_ADDR_VAR 0 14
36178: PUSH
36179: CALL_OW 44
36183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36184: LD_ADDR_VAR 0 7
36188: PUSH
36189: LD_VAR 0 7
36193: PPUSH
36194: LD_INT 1
36196: PPUSH
36197: LD_VAR 0 14
36201: PPUSH
36202: CALL_OW 2
36206: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36207: LD_VAR 0 14
36211: PPUSH
36212: LD_VAR 0 9
36216: PPUSH
36217: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36221: LD_VAR 0 9
36225: PPUSH
36226: CALL_OW 313
36230: PUSH
36231: LD_INT 6
36233: EQUAL
36234: PUSH
36235: LD_VAR 0 9
36239: PPUSH
36240: CALL_OW 266
36244: PUSH
36245: LD_INT 32
36247: PUSH
36248: LD_INT 31
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: IN
36255: OR
36256: IFFALSE 36070
36258: GO 36067
36260: POP
36261: POP
// end else
36262: GO 36644
// for j = 1 to x do
36264: LD_ADDR_VAR 0 9
36268: PUSH
36269: DOUBLE
36270: LD_INT 1
36272: DEC
36273: ST_TO_ADDR
36274: LD_VAR 0 13
36278: PUSH
36279: FOR_TO
36280: IFFALSE 36642
// begin InitHc ;
36282: CALL_OW 19
// if not f then
36286: LD_VAR 0 12
36290: NOT
36291: IFFALSE 36380
// begin PrepareHuman ( false , i , skill ) ;
36293: LD_INT 0
36295: PPUSH
36296: LD_VAR 0 8
36300: PPUSH
36301: LD_VAR 0 4
36305: PPUSH
36306: CALL_OW 380
// un := CreateHuman ;
36310: LD_ADDR_VAR 0 14
36314: PUSH
36315: CALL_OW 44
36319: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36320: LD_ADDR_VAR 0 7
36324: PUSH
36325: LD_VAR 0 7
36329: PPUSH
36330: LD_INT 1
36332: PPUSH
36333: LD_VAR 0 14
36337: PPUSH
36338: CALL_OW 2
36342: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36343: LD_VAR 0 14
36347: PPUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 250
36357: PPUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL_OW 251
36367: PPUSH
36368: LD_INT 10
36370: PPUSH
36371: LD_INT 0
36373: PPUSH
36374: CALL_OW 50
// continue ;
36378: GO 36279
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36380: LD_VAR 0 12
36384: PUSH
36385: LD_INT 1
36387: ARRAY
36388: PPUSH
36389: CALL_OW 313
36393: PUSH
36394: LD_VAR 0 12
36398: PUSH
36399: LD_INT 1
36401: ARRAY
36402: PPUSH
36403: CALL_OW 266
36407: PUSH
36408: LD_INT 32
36410: PUSH
36411: LD_INT 31
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: IN
36418: AND
36419: PUSH
36420: LD_VAR 0 12
36424: PUSH
36425: LD_INT 1
36427: ARRAY
36428: PPUSH
36429: CALL_OW 313
36433: PUSH
36434: LD_INT 6
36436: EQUAL
36437: OR
36438: IFFALSE 36458
// f := Delete ( f , 1 ) ;
36440: LD_ADDR_VAR 0 12
36444: PUSH
36445: LD_VAR 0 12
36449: PPUSH
36450: LD_INT 1
36452: PPUSH
36453: CALL_OW 3
36457: ST_TO_ADDR
// if not f then
36458: LD_VAR 0 12
36462: NOT
36463: IFFALSE 36481
// begin x := x + 2 ;
36465: LD_ADDR_VAR 0 13
36469: PUSH
36470: LD_VAR 0 13
36474: PUSH
36475: LD_INT 2
36477: PLUS
36478: ST_TO_ADDR
// continue ;
36479: GO 36279
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36481: LD_VAR 0 12
36485: PUSH
36486: LD_INT 1
36488: ARRAY
36489: PPUSH
36490: CALL_OW 266
36494: PUSH
36495: LD_INT 5
36497: EQUAL
36498: IFFALSE 36572
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36500: LD_VAR 0 12
36504: PUSH
36505: LD_INT 1
36507: ARRAY
36508: PPUSH
36509: CALL_OW 313
36513: PUSH
36514: LD_INT 3
36516: LESS
36517: IFFALSE 36553
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36519: LD_INT 0
36521: PPUSH
36522: LD_INT 5
36524: PUSH
36525: LD_INT 8
36527: PUSH
36528: LD_INT 9
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: PUSH
36536: LD_VAR 0 17
36540: ARRAY
36541: PPUSH
36542: LD_VAR 0 4
36546: PPUSH
36547: CALL_OW 380
36551: GO 36570
// PrepareHuman ( false , i , skill ) ;
36553: LD_INT 0
36555: PPUSH
36556: LD_VAR 0 8
36560: PPUSH
36561: LD_VAR 0 4
36565: PPUSH
36566: CALL_OW 380
// end else
36570: GO 36589
// PrepareHuman ( false , i , skill ) ;
36572: LD_INT 0
36574: PPUSH
36575: LD_VAR 0 8
36579: PPUSH
36580: LD_VAR 0 4
36584: PPUSH
36585: CALL_OW 380
// un := CreateHuman ;
36589: LD_ADDR_VAR 0 14
36593: PUSH
36594: CALL_OW 44
36598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36599: LD_ADDR_VAR 0 7
36603: PUSH
36604: LD_VAR 0 7
36608: PPUSH
36609: LD_INT 1
36611: PPUSH
36612: LD_VAR 0 14
36616: PPUSH
36617: CALL_OW 2
36621: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36622: LD_VAR 0 14
36626: PPUSH
36627: LD_VAR 0 12
36631: PUSH
36632: LD_INT 1
36634: ARRAY
36635: PPUSH
36636: CALL_OW 52
// end ;
36640: GO 36279
36642: POP
36643: POP
// end ;
36644: GO 35581
36646: POP
36647: POP
// result := result ^ buildings ;
36648: LD_ADDR_VAR 0 7
36652: PUSH
36653: LD_VAR 0 7
36657: PUSH
36658: LD_VAR 0 18
36662: ADD
36663: ST_TO_ADDR
// end else
36664: GO 36807
// begin for i = 1 to personel do
36666: LD_ADDR_VAR 0 8
36670: PUSH
36671: DOUBLE
36672: LD_INT 1
36674: DEC
36675: ST_TO_ADDR
36676: LD_VAR 0 6
36680: PUSH
36681: FOR_TO
36682: IFFALSE 36805
// begin if i > 4 then
36684: LD_VAR 0 8
36688: PUSH
36689: LD_INT 4
36691: GREATER
36692: IFFALSE 36696
// break ;
36694: GO 36805
// x := personel [ i ] ;
36696: LD_ADDR_VAR 0 13
36700: PUSH
36701: LD_VAR 0 6
36705: PUSH
36706: LD_VAR 0 8
36710: ARRAY
36711: ST_TO_ADDR
// if x = - 1 then
36712: LD_VAR 0 13
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: EQUAL
36721: IFFALSE 36725
// continue ;
36723: GO 36681
// PrepareHuman ( false , i , skill ) ;
36725: LD_INT 0
36727: PPUSH
36728: LD_VAR 0 8
36732: PPUSH
36733: LD_VAR 0 4
36737: PPUSH
36738: CALL_OW 380
// un := CreateHuman ;
36742: LD_ADDR_VAR 0 14
36746: PUSH
36747: CALL_OW 44
36751: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36752: LD_VAR 0 14
36756: PPUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 250
36766: PPUSH
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 251
36776: PPUSH
36777: LD_INT 10
36779: PPUSH
36780: LD_INT 0
36782: PPUSH
36783: CALL_OW 50
// result := result ^ un ;
36787: LD_ADDR_VAR 0 7
36791: PUSH
36792: LD_VAR 0 7
36796: PUSH
36797: LD_VAR 0 14
36801: ADD
36802: ST_TO_ADDR
// end ;
36803: GO 36681
36805: POP
36806: POP
// end ; end ;
36807: LD_VAR 0 7
36811: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36812: LD_INT 0
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
36821: PPUSH
36822: PPUSH
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
36827: PPUSH
36828: PPUSH
36829: PPUSH
// result := false ;
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36838: LD_VAR 0 1
36842: NOT
36843: PUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 266
36853: PUSH
36854: LD_INT 32
36856: PUSH
36857: LD_INT 33
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: IN
36864: NOT
36865: OR
36866: IFFALSE 36870
// exit ;
36868: GO 37979
// nat := GetNation ( tower ) ;
36870: LD_ADDR_VAR 0 12
36874: PUSH
36875: LD_VAR 0 1
36879: PPUSH
36880: CALL_OW 248
36884: ST_TO_ADDR
// side := GetSide ( tower ) ;
36885: LD_ADDR_VAR 0 16
36889: PUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: CALL_OW 255
36899: ST_TO_ADDR
// x := GetX ( tower ) ;
36900: LD_ADDR_VAR 0 10
36904: PUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 250
36914: ST_TO_ADDR
// y := GetY ( tower ) ;
36915: LD_ADDR_VAR 0 11
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 251
36929: ST_TO_ADDR
// if not x or not y then
36930: LD_VAR 0 10
36934: NOT
36935: PUSH
36936: LD_VAR 0 11
36940: NOT
36941: OR
36942: IFFALSE 36946
// exit ;
36944: GO 37979
// weapon := 0 ;
36946: LD_ADDR_VAR 0 18
36950: PUSH
36951: LD_INT 0
36953: ST_TO_ADDR
// fac_list := [ ] ;
36954: LD_ADDR_VAR 0 17
36958: PUSH
36959: EMPTY
36960: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36961: LD_ADDR_VAR 0 6
36965: PUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 274
36975: PPUSH
36976: LD_VAR 0 2
36980: PPUSH
36981: LD_INT 0
36983: PPUSH
36984: CALL 34550 0 3
36988: PPUSH
36989: LD_INT 30
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PPUSH
36999: CALL_OW 72
37003: ST_TO_ADDR
// if not factories then
37004: LD_VAR 0 6
37008: NOT
37009: IFFALSE 37013
// exit ;
37011: GO 37979
// for i in factories do
37013: LD_ADDR_VAR 0 8
37017: PUSH
37018: LD_VAR 0 6
37022: PUSH
37023: FOR_IN
37024: IFFALSE 37049
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37026: LD_ADDR_VAR 0 17
37030: PUSH
37031: LD_VAR 0 17
37035: PUSH
37036: LD_VAR 0 8
37040: PPUSH
37041: CALL_OW 478
37045: UNION
37046: ST_TO_ADDR
37047: GO 37023
37049: POP
37050: POP
// if not fac_list then
37051: LD_VAR 0 17
37055: NOT
37056: IFFALSE 37060
// exit ;
37058: GO 37979
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37060: LD_ADDR_VAR 0 5
37064: PUSH
37065: LD_INT 4
37067: PUSH
37068: LD_INT 5
37070: PUSH
37071: LD_INT 9
37073: PUSH
37074: LD_INT 10
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 7
37082: PUSH
37083: LD_INT 11
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 27
37097: PUSH
37098: LD_INT 28
37100: PUSH
37101: LD_INT 26
37103: PUSH
37104: LD_INT 30
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 43
37115: PUSH
37116: LD_INT 44
37118: PUSH
37119: LD_INT 46
37121: PUSH
37122: LD_INT 45
37124: PUSH
37125: LD_INT 47
37127: PUSH
37128: LD_INT 49
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PUSH
37144: LD_VAR 0 12
37148: ARRAY
37149: ST_TO_ADDR
// list := list isect fac_list ;
37150: LD_ADDR_VAR 0 5
37154: PUSH
37155: LD_VAR 0 5
37159: PUSH
37160: LD_VAR 0 17
37164: ISECT
37165: ST_TO_ADDR
// if not list then
37166: LD_VAR 0 5
37170: NOT
37171: IFFALSE 37175
// exit ;
37173: GO 37979
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37175: LD_VAR 0 12
37179: PUSH
37180: LD_INT 3
37182: EQUAL
37183: PUSH
37184: LD_INT 49
37186: PUSH
37187: LD_VAR 0 5
37191: IN
37192: AND
37193: PUSH
37194: LD_INT 31
37196: PPUSH
37197: LD_VAR 0 16
37201: PPUSH
37202: CALL_OW 321
37206: PUSH
37207: LD_INT 2
37209: EQUAL
37210: AND
37211: IFFALSE 37271
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37213: LD_INT 22
37215: PUSH
37216: LD_VAR 0 16
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 35
37227: PUSH
37228: LD_INT 49
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 91
37237: PUSH
37238: LD_VAR 0 1
37242: PUSH
37243: LD_INT 10
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PPUSH
37256: CALL_OW 69
37260: NOT
37261: IFFALSE 37271
// weapon := ru_time_lapser ;
37263: LD_ADDR_VAR 0 18
37267: PUSH
37268: LD_INT 49
37270: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37271: LD_VAR 0 12
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: IN
37286: PUSH
37287: LD_INT 11
37289: PUSH
37290: LD_VAR 0 5
37294: IN
37295: PUSH
37296: LD_INT 30
37298: PUSH
37299: LD_VAR 0 5
37303: IN
37304: OR
37305: AND
37306: PUSH
37307: LD_INT 6
37309: PPUSH
37310: LD_VAR 0 16
37314: PPUSH
37315: CALL_OW 321
37319: PUSH
37320: LD_INT 2
37322: EQUAL
37323: AND
37324: IFFALSE 37489
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37326: LD_INT 22
37328: PUSH
37329: LD_VAR 0 16
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 35
37343: PUSH
37344: LD_INT 11
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 35
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 91
37368: PUSH
37369: LD_VAR 0 1
37373: PUSH
37374: LD_INT 18
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: PPUSH
37387: CALL_OW 69
37391: NOT
37392: PUSH
37393: LD_INT 22
37395: PUSH
37396: LD_VAR 0 16
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 30
37410: PUSH
37411: LD_INT 32
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 30
37420: PUSH
37421: LD_INT 33
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 91
37435: PUSH
37436: LD_VAR 0 1
37440: PUSH
37441: LD_INT 12
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: PPUSH
37457: CALL_OW 69
37461: PUSH
37462: LD_INT 2
37464: GREATER
37465: AND
37466: IFFALSE 37489
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37468: LD_ADDR_VAR 0 18
37472: PUSH
37473: LD_INT 11
37475: PUSH
37476: LD_INT 30
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_VAR 0 12
37487: ARRAY
37488: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37489: LD_VAR 0 18
37493: NOT
37494: PUSH
37495: LD_INT 40
37497: PPUSH
37498: LD_VAR 0 16
37502: PPUSH
37503: CALL_OW 321
37507: PUSH
37508: LD_INT 2
37510: EQUAL
37511: AND
37512: PUSH
37513: LD_INT 7
37515: PUSH
37516: LD_VAR 0 5
37520: IN
37521: PUSH
37522: LD_INT 28
37524: PUSH
37525: LD_VAR 0 5
37529: IN
37530: OR
37531: PUSH
37532: LD_INT 45
37534: PUSH
37535: LD_VAR 0 5
37539: IN
37540: OR
37541: AND
37542: IFFALSE 37796
// begin hex := GetHexInfo ( x , y ) ;
37544: LD_ADDR_VAR 0 4
37548: PUSH
37549: LD_VAR 0 10
37553: PPUSH
37554: LD_VAR 0 11
37558: PPUSH
37559: CALL_OW 546
37563: ST_TO_ADDR
// if hex [ 1 ] then
37564: LD_VAR 0 4
37568: PUSH
37569: LD_INT 1
37571: ARRAY
37572: IFFALSE 37576
// exit ;
37574: GO 37979
// height := hex [ 2 ] ;
37576: LD_ADDR_VAR 0 15
37580: PUSH
37581: LD_VAR 0 4
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37590: LD_ADDR_VAR 0 14
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: LD_INT 5
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// for i in tmp do
37613: LD_ADDR_VAR 0 8
37617: PUSH
37618: LD_VAR 0 14
37622: PUSH
37623: FOR_IN
37624: IFFALSE 37794
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37626: LD_ADDR_VAR 0 9
37630: PUSH
37631: LD_VAR 0 10
37635: PPUSH
37636: LD_VAR 0 8
37640: PPUSH
37641: LD_INT 5
37643: PPUSH
37644: CALL_OW 272
37648: PUSH
37649: LD_VAR 0 11
37653: PPUSH
37654: LD_VAR 0 8
37658: PPUSH
37659: LD_INT 5
37661: PPUSH
37662: CALL_OW 273
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37671: LD_VAR 0 9
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 9
37684: PUSH
37685: LD_INT 2
37687: ARRAY
37688: PPUSH
37689: CALL_OW 488
37693: IFFALSE 37792
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_VAR 0 9
37704: PUSH
37705: LD_INT 1
37707: ARRAY
37708: PPUSH
37709: LD_VAR 0 9
37713: PUSH
37714: LD_INT 2
37716: ARRAY
37717: PPUSH
37718: CALL_OW 546
37722: ST_TO_ADDR
// if hex [ 1 ] then
37723: LD_VAR 0 4
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: IFFALSE 37735
// continue ;
37733: GO 37623
// h := hex [ 2 ] ;
37735: LD_ADDR_VAR 0 13
37739: PUSH
37740: LD_VAR 0 4
37744: PUSH
37745: LD_INT 2
37747: ARRAY
37748: ST_TO_ADDR
// if h + 7 < height then
37749: LD_VAR 0 13
37753: PUSH
37754: LD_INT 7
37756: PLUS
37757: PUSH
37758: LD_VAR 0 15
37762: LESS
37763: IFFALSE 37792
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37765: LD_ADDR_VAR 0 18
37769: PUSH
37770: LD_INT 7
37772: PUSH
37773: LD_INT 28
37775: PUSH
37776: LD_INT 45
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: LD_VAR 0 12
37788: ARRAY
37789: ST_TO_ADDR
// break ;
37790: GO 37794
// end ; end ; end ;
37792: GO 37623
37794: POP
37795: POP
// end ; if not weapon then
37796: LD_VAR 0 18
37800: NOT
37801: IFFALSE 37861
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_VAR 0 5
37812: PUSH
37813: LD_INT 11
37815: PUSH
37816: LD_INT 30
37818: PUSH
37819: LD_INT 49
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: DIFF
37827: ST_TO_ADDR
// if not list then
37828: LD_VAR 0 5
37832: NOT
37833: IFFALSE 37837
// exit ;
37835: GO 37979
// weapon := list [ rand ( 1 , list ) ] ;
37837: LD_ADDR_VAR 0 18
37841: PUSH
37842: LD_VAR 0 5
37846: PUSH
37847: LD_INT 1
37849: PPUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: CALL_OW 12
37859: ARRAY
37860: ST_TO_ADDR
// end ; if weapon then
37861: LD_VAR 0 18
37865: IFFALSE 37979
// begin tmp := CostOfWeapon ( weapon ) ;
37867: LD_ADDR_VAR 0 14
37871: PUSH
37872: LD_VAR 0 18
37876: PPUSH
37877: CALL_OW 451
37881: ST_TO_ADDR
// j := GetBase ( tower ) ;
37882: LD_ADDR_VAR 0 9
37886: PUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 274
37896: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37897: LD_VAR 0 9
37901: PPUSH
37902: LD_INT 1
37904: PPUSH
37905: CALL_OW 275
37909: PUSH
37910: LD_VAR 0 14
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: GREATEREQUAL
37919: PUSH
37920: LD_VAR 0 9
37924: PPUSH
37925: LD_INT 2
37927: PPUSH
37928: CALL_OW 275
37932: PUSH
37933: LD_VAR 0 14
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: GREATEREQUAL
37942: AND
37943: PUSH
37944: LD_VAR 0 9
37948: PPUSH
37949: LD_INT 3
37951: PPUSH
37952: CALL_OW 275
37956: PUSH
37957: LD_VAR 0 14
37961: PUSH
37962: LD_INT 3
37964: ARRAY
37965: GREATEREQUAL
37966: AND
37967: IFFALSE 37979
// result := weapon ;
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: LD_VAR 0 18
37978: ST_TO_ADDR
// end ; end ;
37979: LD_VAR 0 3
37983: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37984: LD_INT 0
37986: PPUSH
37987: PPUSH
// result := true ;
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_INT 1
37995: ST_TO_ADDR
// if array1 = array2 then
37996: LD_VAR 0 1
38000: PUSH
38001: LD_VAR 0 2
38005: EQUAL
38006: IFFALSE 38066
// begin for i = 1 to array1 do
38008: LD_ADDR_VAR 0 4
38012: PUSH
38013: DOUBLE
38014: LD_INT 1
38016: DEC
38017: ST_TO_ADDR
38018: LD_VAR 0 1
38022: PUSH
38023: FOR_TO
38024: IFFALSE 38062
// if array1 [ i ] <> array2 [ i ] then
38026: LD_VAR 0 1
38030: PUSH
38031: LD_VAR 0 4
38035: ARRAY
38036: PUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 4
38046: ARRAY
38047: NONEQUAL
38048: IFFALSE 38060
// begin result := false ;
38050: LD_ADDR_VAR 0 3
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// break ;
38058: GO 38062
// end ;
38060: GO 38023
38062: POP
38063: POP
// end else
38064: GO 38074
// result := false ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_INT 0
38073: ST_TO_ADDR
// end ;
38074: LD_VAR 0 3
38078: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
// if not array1 or not array2 then
38083: LD_VAR 0 1
38087: NOT
38088: PUSH
38089: LD_VAR 0 2
38093: NOT
38094: OR
38095: IFFALSE 38099
// exit ;
38097: GO 38163
// result := true ;
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_INT 1
38106: ST_TO_ADDR
// for i = 1 to array1 do
38107: LD_ADDR_VAR 0 4
38111: PUSH
38112: DOUBLE
38113: LD_INT 1
38115: DEC
38116: ST_TO_ADDR
38117: LD_VAR 0 1
38121: PUSH
38122: FOR_TO
38123: IFFALSE 38161
// if array1 [ i ] <> array2 [ i ] then
38125: LD_VAR 0 1
38129: PUSH
38130: LD_VAR 0 4
38134: ARRAY
38135: PUSH
38136: LD_VAR 0 2
38140: PUSH
38141: LD_VAR 0 4
38145: ARRAY
38146: NONEQUAL
38147: IFFALSE 38159
// begin result := false ;
38149: LD_ADDR_VAR 0 3
38153: PUSH
38154: LD_INT 0
38156: ST_TO_ADDR
// break ;
38157: GO 38161
// end ;
38159: GO 38122
38161: POP
38162: POP
// end ;
38163: LD_VAR 0 3
38167: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38168: LD_INT 0
38170: PPUSH
38171: PPUSH
38172: PPUSH
// pom := GetBase ( fac ) ;
38173: LD_ADDR_VAR 0 5
38177: PUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 274
38187: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38188: LD_ADDR_VAR 0 4
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_INT 1
38200: ARRAY
38201: PPUSH
38202: LD_VAR 0 2
38206: PUSH
38207: LD_INT 2
38209: ARRAY
38210: PPUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_INT 3
38218: ARRAY
38219: PPUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 4
38227: ARRAY
38228: PPUSH
38229: CALL_OW 449
38233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_VAR 0 5
38243: PPUSH
38244: LD_INT 1
38246: PPUSH
38247: CALL_OW 275
38251: PUSH
38252: LD_VAR 0 4
38256: PUSH
38257: LD_INT 1
38259: ARRAY
38260: GREATEREQUAL
38261: PUSH
38262: LD_VAR 0 5
38266: PPUSH
38267: LD_INT 2
38269: PPUSH
38270: CALL_OW 275
38274: PUSH
38275: LD_VAR 0 4
38279: PUSH
38280: LD_INT 2
38282: ARRAY
38283: GREATEREQUAL
38284: AND
38285: PUSH
38286: LD_VAR 0 5
38290: PPUSH
38291: LD_INT 3
38293: PPUSH
38294: CALL_OW 275
38298: PUSH
38299: LD_VAR 0 4
38303: PUSH
38304: LD_INT 3
38306: ARRAY
38307: GREATEREQUAL
38308: AND
38309: ST_TO_ADDR
// end ;
38310: LD_VAR 0 3
38314: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38315: LD_INT 0
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
// pom := GetBase ( building ) ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL_OW 274
38335: ST_TO_ADDR
// if not pom then
38336: LD_VAR 0 3
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38515
// btype := GetBType ( building ) ;
38345: LD_ADDR_VAR 0 5
38349: PUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 266
38359: ST_TO_ADDR
// if btype = b_armoury then
38360: LD_VAR 0 5
38364: PUSH
38365: LD_INT 4
38367: EQUAL
38368: IFFALSE 38378
// btype := b_barracks ;
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_INT 5
38377: ST_TO_ADDR
// if btype = b_depot then
38378: LD_VAR 0 5
38382: PUSH
38383: LD_INT 0
38385: EQUAL
38386: IFFALSE 38396
// btype := b_warehouse ;
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_INT 1
38395: ST_TO_ADDR
// if btype = b_workshop then
38396: LD_VAR 0 5
38400: PUSH
38401: LD_INT 2
38403: EQUAL
38404: IFFALSE 38414
// btype := b_factory ;
38406: LD_ADDR_VAR 0 5
38410: PUSH
38411: LD_INT 3
38413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38414: LD_ADDR_VAR 0 4
38418: PUSH
38419: LD_VAR 0 5
38423: PPUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 248
38433: PPUSH
38434: CALL_OW 450
38438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38439: LD_ADDR_VAR 0 2
38443: PUSH
38444: LD_VAR 0 3
38448: PPUSH
38449: LD_INT 1
38451: PPUSH
38452: CALL_OW 275
38456: PUSH
38457: LD_VAR 0 4
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: GREATEREQUAL
38466: PUSH
38467: LD_VAR 0 3
38471: PPUSH
38472: LD_INT 2
38474: PPUSH
38475: CALL_OW 275
38479: PUSH
38480: LD_VAR 0 4
38484: PUSH
38485: LD_INT 2
38487: ARRAY
38488: GREATEREQUAL
38489: AND
38490: PUSH
38491: LD_VAR 0 3
38495: PPUSH
38496: LD_INT 3
38498: PPUSH
38499: CALL_OW 275
38503: PUSH
38504: LD_VAR 0 4
38508: PUSH
38509: LD_INT 3
38511: ARRAY
38512: GREATEREQUAL
38513: AND
38514: ST_TO_ADDR
// end ;
38515: LD_VAR 0 2
38519: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38520: LD_INT 0
38522: PPUSH
38523: PPUSH
38524: PPUSH
// pom := GetBase ( building ) ;
38525: LD_ADDR_VAR 0 4
38529: PUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 274
38539: ST_TO_ADDR
// if not pom then
38540: LD_VAR 0 4
38544: NOT
38545: IFFALSE 38549
// exit ;
38547: GO 38650
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 2
38558: PPUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 248
38568: PPUSH
38569: CALL_OW 450
38573: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38574: LD_ADDR_VAR 0 3
38578: PUSH
38579: LD_VAR 0 4
38583: PPUSH
38584: LD_INT 1
38586: PPUSH
38587: CALL_OW 275
38591: PUSH
38592: LD_VAR 0 5
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: GREATEREQUAL
38601: PUSH
38602: LD_VAR 0 4
38606: PPUSH
38607: LD_INT 2
38609: PPUSH
38610: CALL_OW 275
38614: PUSH
38615: LD_VAR 0 5
38619: PUSH
38620: LD_INT 2
38622: ARRAY
38623: GREATEREQUAL
38624: AND
38625: PUSH
38626: LD_VAR 0 4
38630: PPUSH
38631: LD_INT 3
38633: PPUSH
38634: CALL_OW 275
38638: PUSH
38639: LD_VAR 0 5
38643: PUSH
38644: LD_INT 3
38646: ARRAY
38647: GREATEREQUAL
38648: AND
38649: ST_TO_ADDR
// end ;
38650: LD_VAR 0 3
38654: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38655: LD_INT 0
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
// result := false ;
38668: LD_ADDR_VAR 0 8
38672: PUSH
38673: LD_INT 0
38675: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38676: LD_VAR 0 5
38680: NOT
38681: PUSH
38682: LD_VAR 0 1
38686: NOT
38687: OR
38688: PUSH
38689: LD_VAR 0 2
38693: NOT
38694: OR
38695: PUSH
38696: LD_VAR 0 3
38700: NOT
38701: OR
38702: IFFALSE 38706
// exit ;
38704: GO 39520
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38706: LD_ADDR_VAR 0 14
38710: PUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: LD_VAR 0 2
38720: PPUSH
38721: LD_VAR 0 3
38725: PPUSH
38726: LD_VAR 0 4
38730: PPUSH
38731: LD_VAR 0 5
38735: PUSH
38736: LD_INT 1
38738: ARRAY
38739: PPUSH
38740: CALL_OW 248
38744: PPUSH
38745: LD_INT 0
38747: PPUSH
38748: CALL 40753 0 6
38752: ST_TO_ADDR
// if not hexes then
38753: LD_VAR 0 14
38757: NOT
38758: IFFALSE 38762
// exit ;
38760: GO 39520
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38762: LD_ADDR_VAR 0 17
38766: PUSH
38767: LD_VAR 0 5
38771: PPUSH
38772: LD_INT 22
38774: PUSH
38775: LD_VAR 0 13
38779: PPUSH
38780: CALL_OW 255
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 30
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 30
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PPUSH
38821: CALL_OW 72
38825: ST_TO_ADDR
// for i = 1 to hexes do
38826: LD_ADDR_VAR 0 9
38830: PUSH
38831: DOUBLE
38832: LD_INT 1
38834: DEC
38835: ST_TO_ADDR
38836: LD_VAR 0 14
38840: PUSH
38841: FOR_TO
38842: IFFALSE 39518
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38844: LD_ADDR_VAR 0 13
38848: PUSH
38849: LD_VAR 0 14
38853: PUSH
38854: LD_VAR 0 9
38858: ARRAY
38859: PUSH
38860: LD_INT 1
38862: ARRAY
38863: PPUSH
38864: LD_VAR 0 14
38868: PUSH
38869: LD_VAR 0 9
38873: ARRAY
38874: PUSH
38875: LD_INT 2
38877: ARRAY
38878: PPUSH
38879: CALL_OW 428
38883: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38884: LD_VAR 0 14
38888: PUSH
38889: LD_VAR 0 9
38893: ARRAY
38894: PUSH
38895: LD_INT 1
38897: ARRAY
38898: PPUSH
38899: LD_VAR 0 14
38903: PUSH
38904: LD_VAR 0 9
38908: ARRAY
38909: PUSH
38910: LD_INT 2
38912: ARRAY
38913: PPUSH
38914: CALL_OW 351
38918: PUSH
38919: LD_VAR 0 14
38923: PUSH
38924: LD_VAR 0 9
38928: ARRAY
38929: PUSH
38930: LD_INT 1
38932: ARRAY
38933: PPUSH
38934: LD_VAR 0 14
38938: PUSH
38939: LD_VAR 0 9
38943: ARRAY
38944: PUSH
38945: LD_INT 2
38947: ARRAY
38948: PPUSH
38949: CALL_OW 488
38953: NOT
38954: OR
38955: PUSH
38956: LD_VAR 0 13
38960: PPUSH
38961: CALL_OW 247
38965: PUSH
38966: LD_INT 3
38968: EQUAL
38969: OR
38970: IFFALSE 38976
// exit ;
38972: POP
38973: POP
38974: GO 39520
// if not tmp then
38976: LD_VAR 0 13
38980: NOT
38981: IFFALSE 38985
// continue ;
38983: GO 38841
// result := true ;
38985: LD_ADDR_VAR 0 8
38989: PUSH
38990: LD_INT 1
38992: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38993: LD_VAR 0 6
38997: PUSH
38998: LD_VAR 0 13
39002: PPUSH
39003: CALL_OW 247
39007: PUSH
39008: LD_INT 2
39010: EQUAL
39011: AND
39012: PUSH
39013: LD_VAR 0 13
39017: PPUSH
39018: CALL_OW 263
39022: PUSH
39023: LD_INT 1
39025: EQUAL
39026: AND
39027: IFFALSE 39191
// begin if IsDrivenBy ( tmp ) then
39029: LD_VAR 0 13
39033: PPUSH
39034: CALL_OW 311
39038: IFFALSE 39042
// continue ;
39040: GO 38841
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39042: LD_VAR 0 6
39046: PPUSH
39047: LD_INT 3
39049: PUSH
39050: LD_INT 60
39052: PUSH
39053: EMPTY
39054: LIST
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 55
39065: PUSH
39066: EMPTY
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PPUSH
39077: CALL_OW 72
39081: IFFALSE 39189
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39083: LD_ADDR_VAR 0 18
39087: PUSH
39088: LD_VAR 0 6
39092: PPUSH
39093: LD_INT 3
39095: PUSH
39096: LD_INT 60
39098: PUSH
39099: EMPTY
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: LD_INT 55
39111: PUSH
39112: EMPTY
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PPUSH
39123: CALL_OW 72
39127: PUSH
39128: LD_INT 1
39130: ARRAY
39131: ST_TO_ADDR
// if IsInUnit ( driver ) then
39132: LD_VAR 0 18
39136: PPUSH
39137: CALL_OW 310
39141: IFFALSE 39152
// ComExit ( driver ) ;
39143: LD_VAR 0 18
39147: PPUSH
39148: CALL 64514 0 1
// AddComEnterUnit ( driver , tmp ) ;
39152: LD_VAR 0 18
39156: PPUSH
39157: LD_VAR 0 13
39161: PPUSH
39162: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39166: LD_VAR 0 18
39170: PPUSH
39171: LD_VAR 0 7
39175: PPUSH
39176: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39180: LD_VAR 0 18
39184: PPUSH
39185: CALL_OW 181
// end ; continue ;
39189: GO 38841
// end ; if not cleaners or not tmp in cleaners then
39191: LD_VAR 0 6
39195: NOT
39196: PUSH
39197: LD_VAR 0 13
39201: PUSH
39202: LD_VAR 0 6
39206: IN
39207: NOT
39208: OR
39209: IFFALSE 39516
// begin if dep then
39211: LD_VAR 0 17
39215: IFFALSE 39351
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39217: LD_ADDR_VAR 0 16
39221: PUSH
39222: LD_VAR 0 17
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PPUSH
39231: CALL_OW 250
39235: PPUSH
39236: LD_VAR 0 17
39240: PUSH
39241: LD_INT 1
39243: ARRAY
39244: PPUSH
39245: CALL_OW 254
39249: PPUSH
39250: LD_INT 5
39252: PPUSH
39253: CALL_OW 272
39257: PUSH
39258: LD_VAR 0 17
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PPUSH
39267: CALL_OW 251
39271: PPUSH
39272: LD_VAR 0 17
39276: PUSH
39277: LD_INT 1
39279: ARRAY
39280: PPUSH
39281: CALL_OW 254
39285: PPUSH
39286: LD_INT 5
39288: PPUSH
39289: CALL_OW 273
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39298: LD_VAR 0 16
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PPUSH
39307: LD_VAR 0 16
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: PPUSH
39316: CALL_OW 488
39320: IFFALSE 39351
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39322: LD_VAR 0 13
39326: PPUSH
39327: LD_VAR 0 16
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: LD_VAR 0 16
39340: PUSH
39341: LD_INT 2
39343: ARRAY
39344: PPUSH
39345: CALL_OW 111
// continue ;
39349: GO 38841
// end ; end ; r := GetDir ( tmp ) ;
39351: LD_ADDR_VAR 0 15
39355: PUSH
39356: LD_VAR 0 13
39360: PPUSH
39361: CALL_OW 254
39365: ST_TO_ADDR
// if r = 5 then
39366: LD_VAR 0 15
39370: PUSH
39371: LD_INT 5
39373: EQUAL
39374: IFFALSE 39384
// r := 0 ;
39376: LD_ADDR_VAR 0 15
39380: PUSH
39381: LD_INT 0
39383: ST_TO_ADDR
// for j = r to 5 do
39384: LD_ADDR_VAR 0 10
39388: PUSH
39389: DOUBLE
39390: LD_VAR 0 15
39394: DEC
39395: ST_TO_ADDR
39396: LD_INT 5
39398: PUSH
39399: FOR_TO
39400: IFFALSE 39514
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39402: LD_ADDR_VAR 0 11
39406: PUSH
39407: LD_VAR 0 13
39411: PPUSH
39412: CALL_OW 250
39416: PPUSH
39417: LD_VAR 0 10
39421: PPUSH
39422: LD_INT 2
39424: PPUSH
39425: CALL_OW 272
39429: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39430: LD_ADDR_VAR 0 12
39434: PUSH
39435: LD_VAR 0 13
39439: PPUSH
39440: CALL_OW 251
39444: PPUSH
39445: LD_VAR 0 10
39449: PPUSH
39450: LD_INT 2
39452: PPUSH
39453: CALL_OW 273
39457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39458: LD_VAR 0 11
39462: PPUSH
39463: LD_VAR 0 12
39467: PPUSH
39468: CALL_OW 488
39472: PUSH
39473: LD_VAR 0 11
39477: PPUSH
39478: LD_VAR 0 12
39482: PPUSH
39483: CALL_OW 428
39487: NOT
39488: AND
39489: IFFALSE 39512
// begin ComMoveXY ( tmp , _x , _y ) ;
39491: LD_VAR 0 13
39495: PPUSH
39496: LD_VAR 0 11
39500: PPUSH
39501: LD_VAR 0 12
39505: PPUSH
39506: CALL_OW 111
// break ;
39510: GO 39514
// end ; end ;
39512: GO 39399
39514: POP
39515: POP
// end ; end ;
39516: GO 38841
39518: POP
39519: POP
// end ;
39520: LD_VAR 0 8
39524: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39525: LD_INT 0
39527: PPUSH
// result := true ;
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: LD_INT 1
39535: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39536: LD_VAR 0 2
39540: PUSH
39541: LD_INT 24
39543: DOUBLE
39544: EQUAL
39545: IFTRUE 39555
39547: LD_INT 33
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39580
39555: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 32
39563: PPUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 321
39573: PUSH
39574: LD_INT 2
39576: EQUAL
39577: ST_TO_ADDR
39578: GO 39896
39580: LD_INT 20
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39613
39588: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 6
39596: PPUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 321
39606: PUSH
39607: LD_INT 2
39609: EQUAL
39610: ST_TO_ADDR
39611: GO 39896
39613: LD_INT 22
39615: DOUBLE
39616: EQUAL
39617: IFTRUE 39627
39619: LD_INT 36
39621: DOUBLE
39622: EQUAL
39623: IFTRUE 39627
39625: GO 39652
39627: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39628: LD_ADDR_VAR 0 3
39632: PUSH
39633: LD_INT 15
39635: PPUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: CALL_OW 321
39645: PUSH
39646: LD_INT 2
39648: EQUAL
39649: ST_TO_ADDR
39650: GO 39896
39652: LD_INT 30
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39660
39658: GO 39685
39660: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_INT 20
39668: PPUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 321
39678: PUSH
39679: LD_INT 2
39681: EQUAL
39682: ST_TO_ADDR
39683: GO 39896
39685: LD_INT 28
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39699
39691: LD_INT 21
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 39724
39699: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_INT 21
39707: PPUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 321
39717: PUSH
39718: LD_INT 2
39720: EQUAL
39721: ST_TO_ADDR
39722: GO 39896
39724: LD_INT 16
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39732
39730: GO 39757
39732: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39733: LD_ADDR_VAR 0 3
39737: PUSH
39738: LD_INT 84
39740: PPUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: CALL_OW 321
39750: PUSH
39751: LD_INT 2
39753: EQUAL
39754: ST_TO_ADDR
39755: GO 39896
39757: LD_INT 19
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39771
39763: LD_INT 23
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39796
39771: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 83
39779: PPUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 321
39789: PUSH
39790: LD_INT 2
39792: EQUAL
39793: ST_TO_ADDR
39794: GO 39896
39796: LD_INT 17
39798: DOUBLE
39799: EQUAL
39800: IFTRUE 39804
39802: GO 39829
39804: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39805: LD_ADDR_VAR 0 3
39809: PUSH
39810: LD_INT 39
39812: PPUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 321
39822: PUSH
39823: LD_INT 2
39825: EQUAL
39826: ST_TO_ADDR
39827: GO 39896
39829: LD_INT 18
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39862
39837: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39838: LD_ADDR_VAR 0 3
39842: PUSH
39843: LD_INT 40
39845: PPUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 321
39855: PUSH
39856: LD_INT 2
39858: EQUAL
39859: ST_TO_ADDR
39860: GO 39896
39862: LD_INT 27
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39870
39868: GO 39895
39870: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 35
39878: PPUSH
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 321
39888: PUSH
39889: LD_INT 2
39891: EQUAL
39892: ST_TO_ADDR
39893: GO 39896
39895: POP
// end ;
39896: LD_VAR 0 3
39900: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39901: LD_INT 0
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
// result := false ;
39914: LD_ADDR_VAR 0 6
39918: PUSH
39919: LD_INT 0
39921: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39922: LD_VAR 0 1
39926: NOT
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 266
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: IN
39948: NOT
39949: OR
39950: PUSH
39951: LD_VAR 0 2
39955: NOT
39956: OR
39957: PUSH
39958: LD_VAR 0 5
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: LD_INT 4
39977: PUSH
39978: LD_INT 5
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: IN
39989: NOT
39990: OR
39991: PUSH
39992: LD_VAR 0 3
39996: PPUSH
39997: LD_VAR 0 4
40001: PPUSH
40002: CALL_OW 488
40006: NOT
40007: OR
40008: IFFALSE 40012
// exit ;
40010: GO 40748
// side := GetSide ( depot ) ;
40012: LD_ADDR_VAR 0 9
40016: PUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 255
40026: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40027: LD_VAR 0 9
40031: PPUSH
40032: LD_VAR 0 2
40036: PPUSH
40037: CALL 39525 0 2
40041: NOT
40042: IFFALSE 40046
// exit ;
40044: GO 40748
// pom := GetBase ( depot ) ;
40046: LD_ADDR_VAR 0 10
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 274
40060: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40061: LD_ADDR_VAR 0 11
40065: PUSH
40066: LD_VAR 0 2
40070: PPUSH
40071: LD_VAR 0 1
40075: PPUSH
40076: CALL_OW 248
40080: PPUSH
40081: CALL_OW 450
40085: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40086: LD_VAR 0 10
40090: PPUSH
40091: LD_INT 1
40093: PPUSH
40094: CALL_OW 275
40098: PUSH
40099: LD_VAR 0 11
40103: PUSH
40104: LD_INT 1
40106: ARRAY
40107: GREATEREQUAL
40108: PUSH
40109: LD_VAR 0 10
40113: PPUSH
40114: LD_INT 2
40116: PPUSH
40117: CALL_OW 275
40121: PUSH
40122: LD_VAR 0 11
40126: PUSH
40127: LD_INT 2
40129: ARRAY
40130: GREATEREQUAL
40131: AND
40132: PUSH
40133: LD_VAR 0 10
40137: PPUSH
40138: LD_INT 3
40140: PPUSH
40141: CALL_OW 275
40145: PUSH
40146: LD_VAR 0 11
40150: PUSH
40151: LD_INT 3
40153: ARRAY
40154: GREATEREQUAL
40155: AND
40156: NOT
40157: IFFALSE 40161
// exit ;
40159: GO 40748
// if GetBType ( depot ) = b_depot then
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 266
40170: PUSH
40171: LD_INT 0
40173: EQUAL
40174: IFFALSE 40186
// dist := 28 else
40176: LD_ADDR_VAR 0 14
40180: PUSH
40181: LD_INT 28
40183: ST_TO_ADDR
40184: GO 40194
// dist := 36 ;
40186: LD_ADDR_VAR 0 14
40190: PUSH
40191: LD_INT 36
40193: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 3
40203: PPUSH
40204: LD_VAR 0 4
40208: PPUSH
40209: CALL_OW 297
40213: PUSH
40214: LD_VAR 0 14
40218: GREATER
40219: IFFALSE 40223
// exit ;
40221: GO 40748
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40223: LD_ADDR_VAR 0 12
40227: PUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: LD_VAR 0 3
40237: PPUSH
40238: LD_VAR 0 4
40242: PPUSH
40243: LD_VAR 0 5
40247: PPUSH
40248: LD_VAR 0 1
40252: PPUSH
40253: CALL_OW 248
40257: PPUSH
40258: LD_INT 0
40260: PPUSH
40261: CALL 40753 0 6
40265: ST_TO_ADDR
// if not hexes then
40266: LD_VAR 0 12
40270: NOT
40271: IFFALSE 40275
// exit ;
40273: GO 40748
// hex := GetHexInfo ( x , y ) ;
40275: LD_ADDR_VAR 0 15
40279: PUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: LD_VAR 0 4
40289: PPUSH
40290: CALL_OW 546
40294: ST_TO_ADDR
// if hex [ 1 ] then
40295: LD_VAR 0 15
40299: PUSH
40300: LD_INT 1
40302: ARRAY
40303: IFFALSE 40307
// exit ;
40305: GO 40748
// height := hex [ 2 ] ;
40307: LD_ADDR_VAR 0 13
40311: PUSH
40312: LD_VAR 0 15
40316: PUSH
40317: LD_INT 2
40319: ARRAY
40320: ST_TO_ADDR
// for i = 1 to hexes do
40321: LD_ADDR_VAR 0 7
40325: PUSH
40326: DOUBLE
40327: LD_INT 1
40329: DEC
40330: ST_TO_ADDR
40331: LD_VAR 0 12
40335: PUSH
40336: FOR_TO
40337: IFFALSE 40667
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40339: LD_VAR 0 12
40343: PUSH
40344: LD_VAR 0 7
40348: ARRAY
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 12
40358: PUSH
40359: LD_VAR 0 7
40363: ARRAY
40364: PUSH
40365: LD_INT 2
40367: ARRAY
40368: PPUSH
40369: CALL_OW 488
40373: NOT
40374: PUSH
40375: LD_VAR 0 12
40379: PUSH
40380: LD_VAR 0 7
40384: ARRAY
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 12
40394: PUSH
40395: LD_VAR 0 7
40399: ARRAY
40400: PUSH
40401: LD_INT 2
40403: ARRAY
40404: PPUSH
40405: CALL_OW 428
40409: PUSH
40410: LD_INT 0
40412: GREATER
40413: OR
40414: PUSH
40415: LD_VAR 0 12
40419: PUSH
40420: LD_VAR 0 7
40424: ARRAY
40425: PUSH
40426: LD_INT 1
40428: ARRAY
40429: PPUSH
40430: LD_VAR 0 12
40434: PUSH
40435: LD_VAR 0 7
40439: ARRAY
40440: PUSH
40441: LD_INT 2
40443: ARRAY
40444: PPUSH
40445: CALL_OW 351
40449: OR
40450: IFFALSE 40456
// exit ;
40452: POP
40453: POP
40454: GO 40748
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40456: LD_ADDR_VAR 0 8
40460: PUSH
40461: LD_VAR 0 12
40465: PUSH
40466: LD_VAR 0 7
40470: ARRAY
40471: PUSH
40472: LD_INT 1
40474: ARRAY
40475: PPUSH
40476: LD_VAR 0 12
40480: PUSH
40481: LD_VAR 0 7
40485: ARRAY
40486: PUSH
40487: LD_INT 2
40489: ARRAY
40490: PPUSH
40491: CALL_OW 546
40495: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40496: LD_VAR 0 8
40500: PUSH
40501: LD_INT 1
40503: ARRAY
40504: PUSH
40505: LD_VAR 0 8
40509: PUSH
40510: LD_INT 2
40512: ARRAY
40513: PUSH
40514: LD_VAR 0 13
40518: PUSH
40519: LD_INT 2
40521: PLUS
40522: GREATER
40523: OR
40524: PUSH
40525: LD_VAR 0 8
40529: PUSH
40530: LD_INT 2
40532: ARRAY
40533: PUSH
40534: LD_VAR 0 13
40538: PUSH
40539: LD_INT 2
40541: MINUS
40542: LESS
40543: OR
40544: PUSH
40545: LD_VAR 0 8
40549: PUSH
40550: LD_INT 3
40552: ARRAY
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 8
40559: PUSH
40560: LD_INT 9
40562: PUSH
40563: LD_INT 10
40565: PUSH
40566: LD_INT 11
40568: PUSH
40569: LD_INT 12
40571: PUSH
40572: LD_INT 13
40574: PUSH
40575: LD_INT 16
40577: PUSH
40578: LD_INT 17
40580: PUSH
40581: LD_INT 18
40583: PUSH
40584: LD_INT 19
40586: PUSH
40587: LD_INT 20
40589: PUSH
40590: LD_INT 21
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: IN
40608: NOT
40609: OR
40610: PUSH
40611: LD_VAR 0 8
40615: PUSH
40616: LD_INT 5
40618: ARRAY
40619: NOT
40620: OR
40621: PUSH
40622: LD_VAR 0 8
40626: PUSH
40627: LD_INT 6
40629: ARRAY
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 7
40639: PUSH
40640: LD_INT 9
40642: PUSH
40643: LD_INT 10
40645: PUSH
40646: LD_INT 11
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: IN
40657: NOT
40658: OR
40659: IFFALSE 40665
// exit ;
40661: POP
40662: POP
40663: GO 40748
// end ;
40665: GO 40336
40667: POP
40668: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40669: LD_VAR 0 9
40673: PPUSH
40674: LD_VAR 0 3
40678: PPUSH
40679: LD_VAR 0 4
40683: PPUSH
40684: LD_INT 20
40686: PPUSH
40687: CALL 32700 0 4
40691: PUSH
40692: LD_INT 4
40694: ARRAY
40695: IFFALSE 40699
// exit ;
40697: GO 40748
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40699: LD_VAR 0 2
40703: PUSH
40704: LD_INT 29
40706: PUSH
40707: LD_INT 30
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: IN
40714: PUSH
40715: LD_VAR 0 3
40719: PPUSH
40720: LD_VAR 0 4
40724: PPUSH
40725: LD_VAR 0 9
40729: PPUSH
40730: CALL_OW 440
40734: NOT
40735: AND
40736: IFFALSE 40740
// exit ;
40738: GO 40748
// result := true ;
40740: LD_ADDR_VAR 0 6
40744: PUSH
40745: LD_INT 1
40747: ST_TO_ADDR
// end ;
40748: LD_VAR 0 6
40752: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40753: LD_INT 0
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
// result = [ ] ;
40813: LD_ADDR_VAR 0 7
40817: PUSH
40818: EMPTY
40819: ST_TO_ADDR
// temp_list = [ ] ;
40820: LD_ADDR_VAR 0 9
40824: PUSH
40825: EMPTY
40826: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 3
40843: PUSH
40844: LD_INT 4
40846: PUSH
40847: LD_INT 5
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: IN
40858: NOT
40859: PUSH
40860: LD_VAR 0 1
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: IN
40875: PUSH
40876: LD_VAR 0 5
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: IN
40895: NOT
40896: AND
40897: OR
40898: IFFALSE 40902
// exit ;
40900: GO 59293
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40902: LD_VAR 0 1
40906: PUSH
40907: LD_INT 6
40909: PUSH
40910: LD_INT 7
40912: PUSH
40913: LD_INT 8
40915: PUSH
40916: LD_INT 13
40918: PUSH
40919: LD_INT 12
40921: PUSH
40922: LD_INT 15
40924: PUSH
40925: LD_INT 11
40927: PUSH
40928: LD_INT 14
40930: PUSH
40931: LD_INT 10
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: IN
40945: IFFALSE 40955
// btype = b_lab ;
40947: LD_ADDR_VAR 0 1
40951: PUSH
40952: LD_INT 6
40954: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40955: LD_VAR 0 6
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: IN
40974: NOT
40975: PUSH
40976: LD_VAR 0 1
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 6
40995: PUSH
40996: LD_INT 36
40998: PUSH
40999: LD_INT 4
41001: PUSH
41002: LD_INT 5
41004: PUSH
41005: LD_INT 31
41007: PUSH
41008: LD_INT 32
41010: PUSH
41011: LD_INT 33
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: IN
41027: NOT
41028: PUSH
41029: LD_VAR 0 6
41033: PUSH
41034: LD_INT 1
41036: EQUAL
41037: AND
41038: OR
41039: PUSH
41040: LD_VAR 0 1
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: IN
41055: NOT
41056: PUSH
41057: LD_VAR 0 6
41061: PUSH
41062: LD_INT 2
41064: EQUAL
41065: AND
41066: OR
41067: IFFALSE 41077
// mode = 0 ;
41069: LD_ADDR_VAR 0 6
41073: PUSH
41074: LD_INT 0
41076: ST_TO_ADDR
// case mode of 0 :
41077: LD_VAR 0 6
41081: PUSH
41082: LD_INT 0
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41090
41088: GO 52543
41090: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41091: LD_ADDR_VAR 0 11
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41284: LD_ADDR_VAR 0 12
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: NEG
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41480: LD_ADDR_VAR 0 13
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 3
41651: NEG
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41679: LD_ADDR_VAR 0 14
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41875: LD_ADDR_VAR 0 15
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42068: LD_ADDR_VAR 0 16
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42261: LD_ADDR_VAR 0 17
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42491: LD_ADDR_VAR 0 18
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42721: LD_ADDR_VAR 0 19
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42951: LD_ADDR_VAR 0 20
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43181: LD_ADDR_VAR 0 21
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43411: LD_ADDR_VAR 0 22
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43641: LD_ADDR_VAR 0 23
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 3
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43921: LD_ADDR_VAR 0 24
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44197: LD_ADDR_VAR 0 25
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44471: LD_ADDR_VAR 0 26
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44747: LD_ADDR_VAR 0 27
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45027: LD_ADDR_VAR 0 28
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 3
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 3
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45309: LD_ADDR_VAR 0 29
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 3
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45588: LD_ADDR_VAR 0 30
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45866: LD_ADDR_VAR 0 31
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 3
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46144: LD_ADDR_VAR 0 32
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46422: LD_ADDR_VAR 0 33
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46701: LD_ADDR_VAR 0 34
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46981: LD_ADDR_VAR 0 35
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47093: LD_ADDR_VAR 0 36
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47205: LD_ADDR_VAR 0 37
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47317: LD_ADDR_VAR 0 38
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47429: LD_ADDR_VAR 0 39
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47541: LD_ADDR_VAR 0 40
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47653: LD_ADDR_VAR 0 41
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48003: LD_ADDR_VAR 0 42
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48353: LD_ADDR_VAR 0 43
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48701: LD_ADDR_VAR 0 44
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49051: LD_ADDR_VAR 0 45
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49401: LD_ADDR_VAR 0 46
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49749: LD_ADDR_VAR 0 47
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49900: LD_ADDR_VAR 0 48
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50047: LD_ADDR_VAR 0 49
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50191: LD_ADDR_VAR 0 50
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50335: LD_ADDR_VAR 0 51
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50482: LD_ADDR_VAR 0 52
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50633: LD_ADDR_VAR 0 53
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 54
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51093: LD_ADDR_VAR 0 55
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 56
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51553: LD_ADDR_VAR 0 57
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51783: LD_ADDR_VAR 0 58
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52013: LD_ADDR_VAR 0 59
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52101: LD_ADDR_VAR 0 60
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52189: LD_ADDR_VAR 0 61
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52277: LD_ADDR_VAR 0 62
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52365: LD_ADDR_VAR 0 63
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52453: LD_ADDR_VAR 0 64
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// end ; 1 :
52541: GO 58438
52543: LD_INT 1
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52551
52549: GO 55174
52551: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52552: LD_ADDR_VAR 0 11
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52596: LD_ADDR_VAR 0 12
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52637: LD_ADDR_VAR 0 13
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52677: LD_ADDR_VAR 0 14
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52718: LD_ADDR_VAR 0 15
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52762: LD_ADDR_VAR 0 16
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52808: LD_ADDR_VAR 0 17
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52852: LD_ADDR_VAR 0 18
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52893: LD_ADDR_VAR 0 19
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52933: LD_ADDR_VAR 0 20
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52974: LD_ADDR_VAR 0 21
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53018: LD_ADDR_VAR 0 22
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 3
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53064: LD_ADDR_VAR 0 23
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 4
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53108: LD_ADDR_VAR 0 24
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 4
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53149: LD_ADDR_VAR 0 25
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53189: LD_ADDR_VAR 0 26
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53230: LD_ADDR_VAR 0 27
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 4
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53274: LD_ADDR_VAR 0 28
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53320: LD_ADDR_VAR 0 29
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 4
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 5
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 5
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 4
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 6
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 6
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 5
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53475: LD_ADDR_VAR 0 30
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 5
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 5
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 6
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 6
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53618: LD_ADDR_VAR 0 31
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: LD_INT 5
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 4
53705: PUSH
53706: LD_INT 5
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 6
53715: PUSH
53716: LD_INT 5
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 6
53725: PUSH
53726: LD_INT 6
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 5
53735: PUSH
53736: LD_INT 6
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53757: LD_ADDR_VAR 0 32
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 5
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 6
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 6
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 5
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 33
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 5
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 6
54020: NEG
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 6
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54055: LD_ADDR_VAR 0 34
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: NEG
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: LD_INT 4
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: NEG
54135: PUSH
54136: LD_INT 5
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: LD_INT 4
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 5
54158: NEG
54159: PUSH
54160: LD_INT 5
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 6
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 6
54182: NEG
54183: PUSH
54184: LD_INT 5
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 6
54194: NEG
54195: PUSH
54196: LD_INT 6
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54218: LD_ADDR_VAR 0 41
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54262: LD_ADDR_VAR 0 42
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54303: LD_ADDR_VAR 0 43
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54343: LD_ADDR_VAR 0 44
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54384: LD_ADDR_VAR 0 45
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54428: LD_ADDR_VAR 0 46
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54474: LD_ADDR_VAR 0 47
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54507: LD_ADDR_VAR 0 48
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54538: LD_ADDR_VAR 0 49
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54567: LD_ADDR_VAR 0 50
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54596: LD_ADDR_VAR 0 51
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54627: LD_ADDR_VAR 0 52
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54660: LD_ADDR_VAR 0 53
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54704: LD_ADDR_VAR 0 54
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54745: LD_ADDR_VAR 0 55
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54785: LD_ADDR_VAR 0 56
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54826: LD_ADDR_VAR 0 57
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54870: LD_ADDR_VAR 0 58
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54916: LD_ADDR_VAR 0 59
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54960: LD_ADDR_VAR 0 60
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55001: LD_ADDR_VAR 0 61
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55041: LD_ADDR_VAR 0 62
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55082: LD_ADDR_VAR 0 63
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55126: LD_ADDR_VAR 0 64
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// end ; 2 :
55172: GO 58438
55174: LD_INT 2
55176: DOUBLE
55177: EQUAL
55178: IFTRUE 55182
55180: GO 58437
55182: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55183: LD_ADDR_VAR 0 29
55187: PUSH
55188: LD_INT 4
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 5
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 5
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: LD_INT 4
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 4
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 5
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 5
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 5
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 4
55568: NEG
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 4
55580: NEG
55581: PUSH
55582: LD_INT 5
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: NEG
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 4
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 5
55628: NEG
55629: PUSH
55630: LD_INT 4
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: NEG
55641: PUSH
55642: LD_INT 5
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: LD_INT 5
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 5
55664: NEG
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55721: LD_ADDR_VAR 0 30
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: LD_INT 5
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 4
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 4
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 4
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 4
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 5
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 5
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 4
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 5
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 5
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56268: LD_ADDR_VAR 0 31
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 5
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 5
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 5
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 4
56482: NEG
56483: PUSH
56484: LD_INT 5
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: NEG
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 5
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56818: LD_ADDR_VAR 0 32
56822: PUSH
56823: LD_INT 4
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 4
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 5
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: LD_INT 4
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 4
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 4
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 5
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 5
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: LD_INT 5
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57365: LD_ADDR_VAR 0 33
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 4
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 5
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 4
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 5
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 4
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: LD_INT 4
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 4
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 4
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 5
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57903: LD_ADDR_VAR 0 34
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 5
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 5
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: LD_INT 5
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 5
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 4
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 4
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 5
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 5
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// end ; end ;
58435: GO 58438
58437: POP
// case btype of b_depot , b_warehouse :
58438: LD_VAR 0 1
58442: PUSH
58443: LD_INT 0
58445: DOUBLE
58446: EQUAL
58447: IFTRUE 58457
58449: LD_INT 1
58451: DOUBLE
58452: EQUAL
58453: IFTRUE 58457
58455: GO 58658
58457: POP
// case nation of nation_american :
58458: LD_VAR 0 5
58462: PUSH
58463: LD_INT 1
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58527
58471: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58472: LD_ADDR_VAR 0 9
58476: PUSH
58477: LD_VAR 0 11
58481: PUSH
58482: LD_VAR 0 12
58486: PUSH
58487: LD_VAR 0 13
58491: PUSH
58492: LD_VAR 0 14
58496: PUSH
58497: LD_VAR 0 15
58501: PUSH
58502: LD_VAR 0 16
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: PLUS
58523: ARRAY
58524: ST_TO_ADDR
58525: GO 58656
58527: LD_INT 2
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58535
58533: GO 58591
58535: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58536: LD_ADDR_VAR 0 9
58540: PUSH
58541: LD_VAR 0 17
58545: PUSH
58546: LD_VAR 0 18
58550: PUSH
58551: LD_VAR 0 19
58555: PUSH
58556: LD_VAR 0 20
58560: PUSH
58561: LD_VAR 0 21
58565: PUSH
58566: LD_VAR 0 22
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PUSH
58579: LD_VAR 0 4
58583: PUSH
58584: LD_INT 1
58586: PLUS
58587: ARRAY
58588: ST_TO_ADDR
58589: GO 58656
58591: LD_INT 3
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58655
58599: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58600: LD_ADDR_VAR 0 9
58604: PUSH
58605: LD_VAR 0 23
58609: PUSH
58610: LD_VAR 0 24
58614: PUSH
58615: LD_VAR 0 25
58619: PUSH
58620: LD_VAR 0 26
58624: PUSH
58625: LD_VAR 0 27
58629: PUSH
58630: LD_VAR 0 28
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_INT 1
58650: PLUS
58651: ARRAY
58652: ST_TO_ADDR
58653: GO 58656
58655: POP
58656: GO 59211
58658: LD_INT 2
58660: DOUBLE
58661: EQUAL
58662: IFTRUE 58672
58664: LD_INT 3
58666: DOUBLE
58667: EQUAL
58668: IFTRUE 58672
58670: GO 58728
58672: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58673: LD_ADDR_VAR 0 9
58677: PUSH
58678: LD_VAR 0 29
58682: PUSH
58683: LD_VAR 0 30
58687: PUSH
58688: LD_VAR 0 31
58692: PUSH
58693: LD_VAR 0 32
58697: PUSH
58698: LD_VAR 0 33
58702: PUSH
58703: LD_VAR 0 34
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: PUSH
58716: LD_VAR 0 4
58720: PUSH
58721: LD_INT 1
58723: PLUS
58724: ARRAY
58725: ST_TO_ADDR
58726: GO 59211
58728: LD_INT 16
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58790
58734: LD_INT 17
58736: DOUBLE
58737: EQUAL
58738: IFTRUE 58790
58740: LD_INT 18
58742: DOUBLE
58743: EQUAL
58744: IFTRUE 58790
58746: LD_INT 19
58748: DOUBLE
58749: EQUAL
58750: IFTRUE 58790
58752: LD_INT 22
58754: DOUBLE
58755: EQUAL
58756: IFTRUE 58790
58758: LD_INT 20
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58790
58764: LD_INT 21
58766: DOUBLE
58767: EQUAL
58768: IFTRUE 58790
58770: LD_INT 23
58772: DOUBLE
58773: EQUAL
58774: IFTRUE 58790
58776: LD_INT 24
58778: DOUBLE
58779: EQUAL
58780: IFTRUE 58790
58782: LD_INT 25
58784: DOUBLE
58785: EQUAL
58786: IFTRUE 58790
58788: GO 58846
58790: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58791: LD_ADDR_VAR 0 9
58795: PUSH
58796: LD_VAR 0 35
58800: PUSH
58801: LD_VAR 0 36
58805: PUSH
58806: LD_VAR 0 37
58810: PUSH
58811: LD_VAR 0 38
58815: PUSH
58816: LD_VAR 0 39
58820: PUSH
58821: LD_VAR 0 40
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_VAR 0 4
58838: PUSH
58839: LD_INT 1
58841: PLUS
58842: ARRAY
58843: ST_TO_ADDR
58844: GO 59211
58846: LD_INT 6
58848: DOUBLE
58849: EQUAL
58850: IFTRUE 58902
58852: LD_INT 7
58854: DOUBLE
58855: EQUAL
58856: IFTRUE 58902
58858: LD_INT 8
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58902
58864: LD_INT 13
58866: DOUBLE
58867: EQUAL
58868: IFTRUE 58902
58870: LD_INT 12
58872: DOUBLE
58873: EQUAL
58874: IFTRUE 58902
58876: LD_INT 15
58878: DOUBLE
58879: EQUAL
58880: IFTRUE 58902
58882: LD_INT 11
58884: DOUBLE
58885: EQUAL
58886: IFTRUE 58902
58888: LD_INT 14
58890: DOUBLE
58891: EQUAL
58892: IFTRUE 58902
58894: LD_INT 10
58896: DOUBLE
58897: EQUAL
58898: IFTRUE 58902
58900: GO 58958
58902: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58903: LD_ADDR_VAR 0 9
58907: PUSH
58908: LD_VAR 0 41
58912: PUSH
58913: LD_VAR 0 42
58917: PUSH
58918: LD_VAR 0 43
58922: PUSH
58923: LD_VAR 0 44
58927: PUSH
58928: LD_VAR 0 45
58932: PUSH
58933: LD_VAR 0 46
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: PUSH
58946: LD_VAR 0 4
58950: PUSH
58951: LD_INT 1
58953: PLUS
58954: ARRAY
58955: ST_TO_ADDR
58956: GO 59211
58958: LD_INT 36
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 59022
58966: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58967: LD_ADDR_VAR 0 9
58971: PUSH
58972: LD_VAR 0 47
58976: PUSH
58977: LD_VAR 0 48
58981: PUSH
58982: LD_VAR 0 49
58986: PUSH
58987: LD_VAR 0 50
58991: PUSH
58992: LD_VAR 0 51
58996: PUSH
58997: LD_VAR 0 52
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: PUSH
59010: LD_VAR 0 4
59014: PUSH
59015: LD_INT 1
59017: PLUS
59018: ARRAY
59019: ST_TO_ADDR
59020: GO 59211
59022: LD_INT 4
59024: DOUBLE
59025: EQUAL
59026: IFTRUE 59048
59028: LD_INT 5
59030: DOUBLE
59031: EQUAL
59032: IFTRUE 59048
59034: LD_INT 34
59036: DOUBLE
59037: EQUAL
59038: IFTRUE 59048
59040: LD_INT 37
59042: DOUBLE
59043: EQUAL
59044: IFTRUE 59048
59046: GO 59104
59048: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59049: LD_ADDR_VAR 0 9
59053: PUSH
59054: LD_VAR 0 53
59058: PUSH
59059: LD_VAR 0 54
59063: PUSH
59064: LD_VAR 0 55
59068: PUSH
59069: LD_VAR 0 56
59073: PUSH
59074: LD_VAR 0 57
59078: PUSH
59079: LD_VAR 0 58
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: PUSH
59092: LD_VAR 0 4
59096: PUSH
59097: LD_INT 1
59099: PLUS
59100: ARRAY
59101: ST_TO_ADDR
59102: GO 59211
59104: LD_INT 31
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59154
59110: LD_INT 32
59112: DOUBLE
59113: EQUAL
59114: IFTRUE 59154
59116: LD_INT 33
59118: DOUBLE
59119: EQUAL
59120: IFTRUE 59154
59122: LD_INT 27
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59154
59128: LD_INT 26
59130: DOUBLE
59131: EQUAL
59132: IFTRUE 59154
59134: LD_INT 28
59136: DOUBLE
59137: EQUAL
59138: IFTRUE 59154
59140: LD_INT 29
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59154
59146: LD_INT 30
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59210
59154: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59155: LD_ADDR_VAR 0 9
59159: PUSH
59160: LD_VAR 0 59
59164: PUSH
59165: LD_VAR 0 60
59169: PUSH
59170: LD_VAR 0 61
59174: PUSH
59175: LD_VAR 0 62
59179: PUSH
59180: LD_VAR 0 63
59184: PUSH
59185: LD_VAR 0 64
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: LD_VAR 0 4
59202: PUSH
59203: LD_INT 1
59205: PLUS
59206: ARRAY
59207: ST_TO_ADDR
59208: GO 59211
59210: POP
// temp_list2 = [ ] ;
59211: LD_ADDR_VAR 0 10
59215: PUSH
59216: EMPTY
59217: ST_TO_ADDR
// for i in temp_list do
59218: LD_ADDR_VAR 0 8
59222: PUSH
59223: LD_VAR 0 9
59227: PUSH
59228: FOR_IN
59229: IFFALSE 59281
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59231: LD_ADDR_VAR 0 10
59235: PUSH
59236: LD_VAR 0 10
59240: PUSH
59241: LD_VAR 0 8
59245: PUSH
59246: LD_INT 1
59248: ARRAY
59249: PUSH
59250: LD_VAR 0 2
59254: PLUS
59255: PUSH
59256: LD_VAR 0 8
59260: PUSH
59261: LD_INT 2
59263: ARRAY
59264: PUSH
59265: LD_VAR 0 3
59269: PLUS
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: ADD
59278: ST_TO_ADDR
59279: GO 59228
59281: POP
59282: POP
// result = temp_list2 ;
59283: LD_ADDR_VAR 0 7
59287: PUSH
59288: LD_VAR 0 10
59292: ST_TO_ADDR
// end ;
59293: LD_VAR 0 7
59297: RET
// export function EnemyInRange ( unit , dist ) ; begin
59298: LD_INT 0
59300: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59301: LD_ADDR_VAR 0 3
59305: PUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 255
59315: PPUSH
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 250
59325: PPUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 251
59335: PPUSH
59336: LD_VAR 0 2
59340: PPUSH
59341: CALL 32700 0 4
59345: PUSH
59346: LD_INT 4
59348: ARRAY
59349: ST_TO_ADDR
// end ;
59350: LD_VAR 0 3
59354: RET
// export function PlayerSeeMe ( unit ) ; begin
59355: LD_INT 0
59357: PPUSH
// result := See ( your_side , unit ) ;
59358: LD_ADDR_VAR 0 2
59362: PUSH
59363: LD_OWVAR 2
59367: PPUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 292
59377: ST_TO_ADDR
// end ;
59378: LD_VAR 0 2
59382: RET
// export function ReverseDir ( unit ) ; begin
59383: LD_INT 0
59385: PPUSH
// if not unit then
59386: LD_VAR 0 1
59390: NOT
59391: IFFALSE 59395
// exit ;
59393: GO 59418
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59395: LD_ADDR_VAR 0 2
59399: PUSH
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL_OW 254
59409: PUSH
59410: LD_INT 3
59412: PLUS
59413: PUSH
59414: LD_INT 6
59416: MOD
59417: ST_TO_ADDR
// end ;
59418: LD_VAR 0 2
59422: RET
// export function ReverseArray ( array ) ; var i ; begin
59423: LD_INT 0
59425: PPUSH
59426: PPUSH
// if not array then
59427: LD_VAR 0 1
59431: NOT
59432: IFFALSE 59436
// exit ;
59434: GO 59491
// result := [ ] ;
59436: LD_ADDR_VAR 0 2
59440: PUSH
59441: EMPTY
59442: ST_TO_ADDR
// for i := array downto 1 do
59443: LD_ADDR_VAR 0 3
59447: PUSH
59448: DOUBLE
59449: LD_VAR 0 1
59453: INC
59454: ST_TO_ADDR
59455: LD_INT 1
59457: PUSH
59458: FOR_DOWNTO
59459: IFFALSE 59489
// result := Join ( result , array [ i ] ) ;
59461: LD_ADDR_VAR 0 2
59465: PUSH
59466: LD_VAR 0 2
59470: PPUSH
59471: LD_VAR 0 1
59475: PUSH
59476: LD_VAR 0 3
59480: ARRAY
59481: PPUSH
59482: CALL 64116 0 2
59486: ST_TO_ADDR
59487: GO 59458
59489: POP
59490: POP
// end ;
59491: LD_VAR 0 2
59495: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59496: LD_INT 0
59498: PPUSH
59499: PPUSH
59500: PPUSH
59501: PPUSH
59502: PPUSH
59503: PPUSH
// if not unit or not hexes then
59504: LD_VAR 0 1
59508: NOT
59509: PUSH
59510: LD_VAR 0 2
59514: NOT
59515: OR
59516: IFFALSE 59520
// exit ;
59518: GO 59643
// dist := 9999 ;
59520: LD_ADDR_VAR 0 5
59524: PUSH
59525: LD_INT 9999
59527: ST_TO_ADDR
// for i = 1 to hexes do
59528: LD_ADDR_VAR 0 4
59532: PUSH
59533: DOUBLE
59534: LD_INT 1
59536: DEC
59537: ST_TO_ADDR
59538: LD_VAR 0 2
59542: PUSH
59543: FOR_TO
59544: IFFALSE 59631
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59546: LD_ADDR_VAR 0 6
59550: PUSH
59551: LD_VAR 0 1
59555: PPUSH
59556: LD_VAR 0 2
59560: PUSH
59561: LD_VAR 0 4
59565: ARRAY
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: PPUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_VAR 0 4
59580: ARRAY
59581: PUSH
59582: LD_INT 2
59584: ARRAY
59585: PPUSH
59586: CALL_OW 297
59590: ST_TO_ADDR
// if tdist < dist then
59591: LD_VAR 0 6
59595: PUSH
59596: LD_VAR 0 5
59600: LESS
59601: IFFALSE 59629
// begin hex := hexes [ i ] ;
59603: LD_ADDR_VAR 0 8
59607: PUSH
59608: LD_VAR 0 2
59612: PUSH
59613: LD_VAR 0 4
59617: ARRAY
59618: ST_TO_ADDR
// dist := tdist ;
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: LD_VAR 0 6
59628: ST_TO_ADDR
// end ; end ;
59629: GO 59543
59631: POP
59632: POP
// result := hex ;
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_VAR 0 8
59642: ST_TO_ADDR
// end ;
59643: LD_VAR 0 3
59647: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59648: LD_INT 0
59650: PPUSH
59651: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59652: LD_VAR 0 1
59656: NOT
59657: PUSH
59658: LD_VAR 0 1
59662: PUSH
59663: LD_INT 21
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 23
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PPUSH
59687: CALL_OW 69
59691: IN
59692: NOT
59693: OR
59694: IFFALSE 59698
// exit ;
59696: GO 59745
// for i = 1 to 3 do
59698: LD_ADDR_VAR 0 3
59702: PUSH
59703: DOUBLE
59704: LD_INT 1
59706: DEC
59707: ST_TO_ADDR
59708: LD_INT 3
59710: PUSH
59711: FOR_TO
59712: IFFALSE 59743
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59714: LD_VAR 0 1
59718: PPUSH
59719: CALL_OW 250
59723: PPUSH
59724: LD_VAR 0 1
59728: PPUSH
59729: CALL_OW 251
59733: PPUSH
59734: LD_INT 1
59736: PPUSH
59737: CALL_OW 453
59741: GO 59711
59743: POP
59744: POP
// end ;
59745: LD_VAR 0 2
59749: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59750: LD_INT 0
59752: PPUSH
59753: PPUSH
59754: PPUSH
59755: PPUSH
59756: PPUSH
59757: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59758: LD_VAR 0 1
59762: NOT
59763: PUSH
59764: LD_VAR 0 2
59768: NOT
59769: OR
59770: PUSH
59771: LD_VAR 0 1
59775: PPUSH
59776: CALL_OW 314
59780: OR
59781: IFFALSE 59785
// exit ;
59783: GO 60226
// x := GetX ( enemy_unit ) ;
59785: LD_ADDR_VAR 0 7
59789: PUSH
59790: LD_VAR 0 2
59794: PPUSH
59795: CALL_OW 250
59799: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59800: LD_ADDR_VAR 0 8
59804: PUSH
59805: LD_VAR 0 2
59809: PPUSH
59810: CALL_OW 251
59814: ST_TO_ADDR
// if not x or not y then
59815: LD_VAR 0 7
59819: NOT
59820: PUSH
59821: LD_VAR 0 8
59825: NOT
59826: OR
59827: IFFALSE 59831
// exit ;
59829: GO 60226
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59831: LD_ADDR_VAR 0 6
59835: PUSH
59836: LD_VAR 0 7
59840: PPUSH
59841: LD_INT 0
59843: PPUSH
59844: LD_INT 4
59846: PPUSH
59847: CALL_OW 272
59851: PUSH
59852: LD_VAR 0 8
59856: PPUSH
59857: LD_INT 0
59859: PPUSH
59860: LD_INT 4
59862: PPUSH
59863: CALL_OW 273
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 7
59876: PPUSH
59877: LD_INT 1
59879: PPUSH
59880: LD_INT 4
59882: PPUSH
59883: CALL_OW 272
59887: PUSH
59888: LD_VAR 0 8
59892: PPUSH
59893: LD_INT 1
59895: PPUSH
59896: LD_INT 4
59898: PPUSH
59899: CALL_OW 273
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_VAR 0 7
59912: PPUSH
59913: LD_INT 2
59915: PPUSH
59916: LD_INT 4
59918: PPUSH
59919: CALL_OW 272
59923: PUSH
59924: LD_VAR 0 8
59928: PPUSH
59929: LD_INT 2
59931: PPUSH
59932: LD_INT 4
59934: PPUSH
59935: CALL_OW 273
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_VAR 0 7
59948: PPUSH
59949: LD_INT 3
59951: PPUSH
59952: LD_INT 4
59954: PPUSH
59955: CALL_OW 272
59959: PUSH
59960: LD_VAR 0 8
59964: PPUSH
59965: LD_INT 3
59967: PPUSH
59968: LD_INT 4
59970: PPUSH
59971: CALL_OW 273
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_VAR 0 7
59984: PPUSH
59985: LD_INT 4
59987: PPUSH
59988: LD_INT 4
59990: PPUSH
59991: CALL_OW 272
59995: PUSH
59996: LD_VAR 0 8
60000: PPUSH
60001: LD_INT 4
60003: PPUSH
60004: LD_INT 4
60006: PPUSH
60007: CALL_OW 273
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_VAR 0 7
60020: PPUSH
60021: LD_INT 5
60023: PPUSH
60024: LD_INT 4
60026: PPUSH
60027: CALL_OW 272
60031: PUSH
60032: LD_VAR 0 8
60036: PPUSH
60037: LD_INT 5
60039: PPUSH
60040: LD_INT 4
60042: PPUSH
60043: CALL_OW 273
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// for i = tmp downto 1 do
60060: LD_ADDR_VAR 0 4
60064: PUSH
60065: DOUBLE
60066: LD_VAR 0 6
60070: INC
60071: ST_TO_ADDR
60072: LD_INT 1
60074: PUSH
60075: FOR_DOWNTO
60076: IFFALSE 60177
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60078: LD_VAR 0 6
60082: PUSH
60083: LD_VAR 0 4
60087: ARRAY
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PPUSH
60093: LD_VAR 0 6
60097: PUSH
60098: LD_VAR 0 4
60102: ARRAY
60103: PUSH
60104: LD_INT 2
60106: ARRAY
60107: PPUSH
60108: CALL_OW 488
60112: NOT
60113: PUSH
60114: LD_VAR 0 6
60118: PUSH
60119: LD_VAR 0 4
60123: ARRAY
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PPUSH
60129: LD_VAR 0 6
60133: PUSH
60134: LD_VAR 0 4
60138: ARRAY
60139: PUSH
60140: LD_INT 2
60142: ARRAY
60143: PPUSH
60144: CALL_OW 428
60148: PUSH
60149: LD_INT 0
60151: NONEQUAL
60152: OR
60153: IFFALSE 60175
// tmp := Delete ( tmp , i ) ;
60155: LD_ADDR_VAR 0 6
60159: PUSH
60160: LD_VAR 0 6
60164: PPUSH
60165: LD_VAR 0 4
60169: PPUSH
60170: CALL_OW 3
60174: ST_TO_ADDR
60175: GO 60075
60177: POP
60178: POP
// j := GetClosestHex ( unit , tmp ) ;
60179: LD_ADDR_VAR 0 5
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_VAR 0 6
60193: PPUSH
60194: CALL 59496 0 2
60198: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60199: LD_VAR 0 1
60203: PPUSH
60204: LD_VAR 0 5
60208: PUSH
60209: LD_INT 1
60211: ARRAY
60212: PPUSH
60213: LD_VAR 0 5
60217: PUSH
60218: LD_INT 2
60220: ARRAY
60221: PPUSH
60222: CALL_OW 111
// end ;
60226: LD_VAR 0 3
60230: RET
// export function PrepareApemanSoldier ( ) ; begin
60231: LD_INT 0
60233: PPUSH
// uc_nation := 0 ;
60234: LD_ADDR_OWVAR 21
60238: PUSH
60239: LD_INT 0
60241: ST_TO_ADDR
// hc_sex := sex_male ;
60242: LD_ADDR_OWVAR 27
60246: PUSH
60247: LD_INT 1
60249: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60250: LD_ADDR_OWVAR 28
60254: PUSH
60255: LD_INT 15
60257: ST_TO_ADDR
// hc_gallery :=  ;
60258: LD_ADDR_OWVAR 33
60262: PUSH
60263: LD_STRING 
60265: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60266: LD_ADDR_OWVAR 31
60270: PUSH
60271: LD_INT 0
60273: PPUSH
60274: LD_INT 3
60276: PPUSH
60277: CALL_OW 12
60281: PUSH
60282: LD_INT 0
60284: PPUSH
60285: LD_INT 3
60287: PPUSH
60288: CALL_OW 12
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: ST_TO_ADDR
// end ;
60305: LD_VAR 0 1
60309: RET
// export function PrepareApemanEngineer ( ) ; begin
60310: LD_INT 0
60312: PPUSH
// uc_nation := 0 ;
60313: LD_ADDR_OWVAR 21
60317: PUSH
60318: LD_INT 0
60320: ST_TO_ADDR
// hc_sex := sex_male ;
60321: LD_ADDR_OWVAR 27
60325: PUSH
60326: LD_INT 1
60328: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60329: LD_ADDR_OWVAR 28
60333: PUSH
60334: LD_INT 16
60336: ST_TO_ADDR
// hc_gallery :=  ;
60337: LD_ADDR_OWVAR 33
60341: PUSH
60342: LD_STRING 
60344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60345: LD_ADDR_OWVAR 31
60349: PUSH
60350: LD_INT 0
60352: PPUSH
60353: LD_INT 3
60355: PPUSH
60356: CALL_OW 12
60360: PUSH
60361: LD_INT 0
60363: PPUSH
60364: LD_INT 3
60366: PPUSH
60367: CALL_OW 12
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// end ;
60384: LD_VAR 0 1
60388: RET
// export function PrepareApeman ( agressivity ) ; begin
60389: LD_INT 0
60391: PPUSH
// uc_side := 0 ;
60392: LD_ADDR_OWVAR 20
60396: PUSH
60397: LD_INT 0
60399: ST_TO_ADDR
// uc_nation := 0 ;
60400: LD_ADDR_OWVAR 21
60404: PUSH
60405: LD_INT 0
60407: ST_TO_ADDR
// hc_sex := sex_male ;
60408: LD_ADDR_OWVAR 27
60412: PUSH
60413: LD_INT 1
60415: ST_TO_ADDR
// hc_class := class_apeman ;
60416: LD_ADDR_OWVAR 28
60420: PUSH
60421: LD_INT 12
60423: ST_TO_ADDR
// hc_gallery :=  ;
60424: LD_ADDR_OWVAR 33
60428: PUSH
60429: LD_STRING 
60431: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60432: LD_ADDR_OWVAR 35
60436: PUSH
60437: LD_VAR 0 1
60441: NEG
60442: PPUSH
60443: LD_VAR 0 1
60447: PPUSH
60448: CALL_OW 12
60452: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60453: LD_ADDR_OWVAR 31
60457: PUSH
60458: LD_INT 0
60460: PPUSH
60461: LD_INT 3
60463: PPUSH
60464: CALL_OW 12
60468: PUSH
60469: LD_INT 0
60471: PPUSH
60472: LD_INT 3
60474: PPUSH
60475: CALL_OW 12
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// end ;
60492: LD_VAR 0 2
60496: RET
// export function PrepareTiger ( agressivity ) ; begin
60497: LD_INT 0
60499: PPUSH
// uc_side := 0 ;
60500: LD_ADDR_OWVAR 20
60504: PUSH
60505: LD_INT 0
60507: ST_TO_ADDR
// uc_nation := 0 ;
60508: LD_ADDR_OWVAR 21
60512: PUSH
60513: LD_INT 0
60515: ST_TO_ADDR
// hc_class := class_tiger ;
60516: LD_ADDR_OWVAR 28
60520: PUSH
60521: LD_INT 14
60523: ST_TO_ADDR
// hc_gallery :=  ;
60524: LD_ADDR_OWVAR 33
60528: PUSH
60529: LD_STRING 
60531: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60532: LD_ADDR_OWVAR 35
60536: PUSH
60537: LD_VAR 0 1
60541: NEG
60542: PPUSH
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 12
60552: ST_TO_ADDR
// end ;
60553: LD_VAR 0 2
60557: RET
// export function PrepareEnchidna ( ) ; begin
60558: LD_INT 0
60560: PPUSH
// uc_side := 0 ;
60561: LD_ADDR_OWVAR 20
60565: PUSH
60566: LD_INT 0
60568: ST_TO_ADDR
// uc_nation := 0 ;
60569: LD_ADDR_OWVAR 21
60573: PUSH
60574: LD_INT 0
60576: ST_TO_ADDR
// hc_class := class_baggie ;
60577: LD_ADDR_OWVAR 28
60581: PUSH
60582: LD_INT 13
60584: ST_TO_ADDR
// hc_gallery :=  ;
60585: LD_ADDR_OWVAR 33
60589: PUSH
60590: LD_STRING 
60592: ST_TO_ADDR
// end ;
60593: LD_VAR 0 1
60597: RET
// export function PrepareFrog ( ) ; begin
60598: LD_INT 0
60600: PPUSH
// uc_side := 0 ;
60601: LD_ADDR_OWVAR 20
60605: PUSH
60606: LD_INT 0
60608: ST_TO_ADDR
// uc_nation := 0 ;
60609: LD_ADDR_OWVAR 21
60613: PUSH
60614: LD_INT 0
60616: ST_TO_ADDR
// hc_class := class_frog ;
60617: LD_ADDR_OWVAR 28
60621: PUSH
60622: LD_INT 19
60624: ST_TO_ADDR
// hc_gallery :=  ;
60625: LD_ADDR_OWVAR 33
60629: PUSH
60630: LD_STRING 
60632: ST_TO_ADDR
// end ;
60633: LD_VAR 0 1
60637: RET
// export function PrepareFish ( ) ; begin
60638: LD_INT 0
60640: PPUSH
// uc_side := 0 ;
60641: LD_ADDR_OWVAR 20
60645: PUSH
60646: LD_INT 0
60648: ST_TO_ADDR
// uc_nation := 0 ;
60649: LD_ADDR_OWVAR 21
60653: PUSH
60654: LD_INT 0
60656: ST_TO_ADDR
// hc_class := class_fish ;
60657: LD_ADDR_OWVAR 28
60661: PUSH
60662: LD_INT 20
60664: ST_TO_ADDR
// hc_gallery :=  ;
60665: LD_ADDR_OWVAR 33
60669: PUSH
60670: LD_STRING 
60672: ST_TO_ADDR
// end ;
60673: LD_VAR 0 1
60677: RET
// export function PrepareBird ( ) ; begin
60678: LD_INT 0
60680: PPUSH
// uc_side := 0 ;
60681: LD_ADDR_OWVAR 20
60685: PUSH
60686: LD_INT 0
60688: ST_TO_ADDR
// uc_nation := 0 ;
60689: LD_ADDR_OWVAR 21
60693: PUSH
60694: LD_INT 0
60696: ST_TO_ADDR
// hc_class := class_phororhacos ;
60697: LD_ADDR_OWVAR 28
60701: PUSH
60702: LD_INT 18
60704: ST_TO_ADDR
// hc_gallery :=  ;
60705: LD_ADDR_OWVAR 33
60709: PUSH
60710: LD_STRING 
60712: ST_TO_ADDR
// end ;
60713: LD_VAR 0 1
60717: RET
// export function PrepareHorse ( ) ; begin
60718: LD_INT 0
60720: PPUSH
// uc_side := 0 ;
60721: LD_ADDR_OWVAR 20
60725: PUSH
60726: LD_INT 0
60728: ST_TO_ADDR
// uc_nation := 0 ;
60729: LD_ADDR_OWVAR 21
60733: PUSH
60734: LD_INT 0
60736: ST_TO_ADDR
// hc_class := class_horse ;
60737: LD_ADDR_OWVAR 28
60741: PUSH
60742: LD_INT 21
60744: ST_TO_ADDR
// hc_gallery :=  ;
60745: LD_ADDR_OWVAR 33
60749: PUSH
60750: LD_STRING 
60752: ST_TO_ADDR
// end ;
60753: LD_VAR 0 1
60757: RET
// export function PrepareMastodont ( ) ; begin
60758: LD_INT 0
60760: PPUSH
// uc_side := 0 ;
60761: LD_ADDR_OWVAR 20
60765: PUSH
60766: LD_INT 0
60768: ST_TO_ADDR
// uc_nation := 0 ;
60769: LD_ADDR_OWVAR 21
60773: PUSH
60774: LD_INT 0
60776: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60777: LD_ADDR_OWVAR 37
60781: PUSH
60782: LD_INT 31
60784: ST_TO_ADDR
// vc_control := control_rider ;
60785: LD_ADDR_OWVAR 38
60789: PUSH
60790: LD_INT 4
60792: ST_TO_ADDR
// end ;
60793: LD_VAR 0 1
60797: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60798: LD_INT 0
60800: PPUSH
60801: PPUSH
60802: PPUSH
// uc_side = 0 ;
60803: LD_ADDR_OWVAR 20
60807: PUSH
60808: LD_INT 0
60810: ST_TO_ADDR
// uc_nation = 0 ;
60811: LD_ADDR_OWVAR 21
60815: PUSH
60816: LD_INT 0
60818: ST_TO_ADDR
// InitHc_All ( ) ;
60819: CALL_OW 584
// InitVc ;
60823: CALL_OW 20
// if mastodonts then
60827: LD_VAR 0 6
60831: IFFALSE 60898
// for i = 1 to mastodonts do
60833: LD_ADDR_VAR 0 11
60837: PUSH
60838: DOUBLE
60839: LD_INT 1
60841: DEC
60842: ST_TO_ADDR
60843: LD_VAR 0 6
60847: PUSH
60848: FOR_TO
60849: IFFALSE 60896
// begin vc_chassis := 31 ;
60851: LD_ADDR_OWVAR 37
60855: PUSH
60856: LD_INT 31
60858: ST_TO_ADDR
// vc_control := control_rider ;
60859: LD_ADDR_OWVAR 38
60863: PUSH
60864: LD_INT 4
60866: ST_TO_ADDR
// animal := CreateVehicle ;
60867: LD_ADDR_VAR 0 12
60871: PUSH
60872: CALL_OW 45
60876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60877: LD_VAR 0 12
60881: PPUSH
60882: LD_VAR 0 8
60886: PPUSH
60887: LD_INT 0
60889: PPUSH
60890: CALL 63033 0 3
// end ;
60894: GO 60848
60896: POP
60897: POP
// if horses then
60898: LD_VAR 0 5
60902: IFFALSE 60969
// for i = 1 to horses do
60904: LD_ADDR_VAR 0 11
60908: PUSH
60909: DOUBLE
60910: LD_INT 1
60912: DEC
60913: ST_TO_ADDR
60914: LD_VAR 0 5
60918: PUSH
60919: FOR_TO
60920: IFFALSE 60967
// begin hc_class := 21 ;
60922: LD_ADDR_OWVAR 28
60926: PUSH
60927: LD_INT 21
60929: ST_TO_ADDR
// hc_gallery :=  ;
60930: LD_ADDR_OWVAR 33
60934: PUSH
60935: LD_STRING 
60937: ST_TO_ADDR
// animal := CreateHuman ;
60938: LD_ADDR_VAR 0 12
60942: PUSH
60943: CALL_OW 44
60947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60948: LD_VAR 0 12
60952: PPUSH
60953: LD_VAR 0 8
60957: PPUSH
60958: LD_INT 0
60960: PPUSH
60961: CALL 63033 0 3
// end ;
60965: GO 60919
60967: POP
60968: POP
// if birds then
60969: LD_VAR 0 1
60973: IFFALSE 61040
// for i = 1 to birds do
60975: LD_ADDR_VAR 0 11
60979: PUSH
60980: DOUBLE
60981: LD_INT 1
60983: DEC
60984: ST_TO_ADDR
60985: LD_VAR 0 1
60989: PUSH
60990: FOR_TO
60991: IFFALSE 61038
// begin hc_class = 18 ;
60993: LD_ADDR_OWVAR 28
60997: PUSH
60998: LD_INT 18
61000: ST_TO_ADDR
// hc_gallery =  ;
61001: LD_ADDR_OWVAR 33
61005: PUSH
61006: LD_STRING 
61008: ST_TO_ADDR
// animal := CreateHuman ;
61009: LD_ADDR_VAR 0 12
61013: PUSH
61014: CALL_OW 44
61018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61019: LD_VAR 0 12
61023: PPUSH
61024: LD_VAR 0 8
61028: PPUSH
61029: LD_INT 0
61031: PPUSH
61032: CALL 63033 0 3
// end ;
61036: GO 60990
61038: POP
61039: POP
// if tigers then
61040: LD_VAR 0 2
61044: IFFALSE 61128
// for i = 1 to tigers do
61046: LD_ADDR_VAR 0 11
61050: PUSH
61051: DOUBLE
61052: LD_INT 1
61054: DEC
61055: ST_TO_ADDR
61056: LD_VAR 0 2
61060: PUSH
61061: FOR_TO
61062: IFFALSE 61126
// begin hc_class = class_tiger ;
61064: LD_ADDR_OWVAR 28
61068: PUSH
61069: LD_INT 14
61071: ST_TO_ADDR
// hc_gallery =  ;
61072: LD_ADDR_OWVAR 33
61076: PUSH
61077: LD_STRING 
61079: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61080: LD_ADDR_OWVAR 35
61084: PUSH
61085: LD_INT 7
61087: NEG
61088: PPUSH
61089: LD_INT 7
61091: PPUSH
61092: CALL_OW 12
61096: ST_TO_ADDR
// animal := CreateHuman ;
61097: LD_ADDR_VAR 0 12
61101: PUSH
61102: CALL_OW 44
61106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61107: LD_VAR 0 12
61111: PPUSH
61112: LD_VAR 0 8
61116: PPUSH
61117: LD_INT 0
61119: PPUSH
61120: CALL 63033 0 3
// end ;
61124: GO 61061
61126: POP
61127: POP
// if apemans then
61128: LD_VAR 0 3
61132: IFFALSE 61255
// for i = 1 to apemans do
61134: LD_ADDR_VAR 0 11
61138: PUSH
61139: DOUBLE
61140: LD_INT 1
61142: DEC
61143: ST_TO_ADDR
61144: LD_VAR 0 3
61148: PUSH
61149: FOR_TO
61150: IFFALSE 61253
// begin hc_class = class_apeman ;
61152: LD_ADDR_OWVAR 28
61156: PUSH
61157: LD_INT 12
61159: ST_TO_ADDR
// hc_gallery =  ;
61160: LD_ADDR_OWVAR 33
61164: PUSH
61165: LD_STRING 
61167: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61168: LD_ADDR_OWVAR 35
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PPUSH
61177: LD_INT 2
61179: PPUSH
61180: CALL_OW 12
61184: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61185: LD_ADDR_OWVAR 31
61189: PUSH
61190: LD_INT 1
61192: PPUSH
61193: LD_INT 3
61195: PPUSH
61196: CALL_OW 12
61200: PUSH
61201: LD_INT 1
61203: PPUSH
61204: LD_INT 3
61206: PPUSH
61207: CALL_OW 12
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// animal := CreateHuman ;
61224: LD_ADDR_VAR 0 12
61228: PUSH
61229: CALL_OW 44
61233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61234: LD_VAR 0 12
61238: PPUSH
61239: LD_VAR 0 8
61243: PPUSH
61244: LD_INT 0
61246: PPUSH
61247: CALL 63033 0 3
// end ;
61251: GO 61149
61253: POP
61254: POP
// if enchidnas then
61255: LD_VAR 0 4
61259: IFFALSE 61326
// for i = 1 to enchidnas do
61261: LD_ADDR_VAR 0 11
61265: PUSH
61266: DOUBLE
61267: LD_INT 1
61269: DEC
61270: ST_TO_ADDR
61271: LD_VAR 0 4
61275: PUSH
61276: FOR_TO
61277: IFFALSE 61324
// begin hc_class = 13 ;
61279: LD_ADDR_OWVAR 28
61283: PUSH
61284: LD_INT 13
61286: ST_TO_ADDR
// hc_gallery =  ;
61287: LD_ADDR_OWVAR 33
61291: PUSH
61292: LD_STRING 
61294: ST_TO_ADDR
// animal := CreateHuman ;
61295: LD_ADDR_VAR 0 12
61299: PUSH
61300: CALL_OW 44
61304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61305: LD_VAR 0 12
61309: PPUSH
61310: LD_VAR 0 8
61314: PPUSH
61315: LD_INT 0
61317: PPUSH
61318: CALL 63033 0 3
// end ;
61322: GO 61276
61324: POP
61325: POP
// if fishes then
61326: LD_VAR 0 7
61330: IFFALSE 61397
// for i = 1 to fishes do
61332: LD_ADDR_VAR 0 11
61336: PUSH
61337: DOUBLE
61338: LD_INT 1
61340: DEC
61341: ST_TO_ADDR
61342: LD_VAR 0 7
61346: PUSH
61347: FOR_TO
61348: IFFALSE 61395
// begin hc_class = 20 ;
61350: LD_ADDR_OWVAR 28
61354: PUSH
61355: LD_INT 20
61357: ST_TO_ADDR
// hc_gallery =  ;
61358: LD_ADDR_OWVAR 33
61362: PUSH
61363: LD_STRING 
61365: ST_TO_ADDR
// animal := CreateHuman ;
61366: LD_ADDR_VAR 0 12
61370: PUSH
61371: CALL_OW 44
61375: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61376: LD_VAR 0 12
61380: PPUSH
61381: LD_VAR 0 9
61385: PPUSH
61386: LD_INT 0
61388: PPUSH
61389: CALL 63033 0 3
// end ;
61393: GO 61347
61395: POP
61396: POP
// end ;
61397: LD_VAR 0 10
61401: RET
// export function WantHeal ( sci , unit ) ; begin
61402: LD_INT 0
61404: PPUSH
// if GetTaskList ( sci ) > 0 then
61405: LD_VAR 0 1
61409: PPUSH
61410: CALL_OW 437
61414: PUSH
61415: LD_INT 0
61417: GREATER
61418: IFFALSE 61488
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 437
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PUSH
61438: LD_STRING l
61440: EQUAL
61441: PUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 437
61451: PUSH
61452: LD_INT 1
61454: ARRAY
61455: PUSH
61456: LD_INT 4
61458: ARRAY
61459: PUSH
61460: LD_VAR 0 2
61464: EQUAL
61465: AND
61466: IFFALSE 61478
// result := true else
61468: LD_ADDR_VAR 0 3
61472: PUSH
61473: LD_INT 1
61475: ST_TO_ADDR
61476: GO 61486
// result := false ;
61478: LD_ADDR_VAR 0 3
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
// end else
61486: GO 61496
// result := false ;
61488: LD_ADDR_VAR 0 3
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// end ;
61496: LD_VAR 0 3
61500: RET
// export function HealTarget ( sci ) ; begin
61501: LD_INT 0
61503: PPUSH
// if not sci then
61504: LD_VAR 0 1
61508: NOT
61509: IFFALSE 61513
// exit ;
61511: GO 61578
// result := 0 ;
61513: LD_ADDR_VAR 0 2
61517: PUSH
61518: LD_INT 0
61520: ST_TO_ADDR
// if GetTaskList ( sci ) then
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL_OW 437
61530: IFFALSE 61578
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 437
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PUSH
61546: LD_INT 1
61548: ARRAY
61549: PUSH
61550: LD_STRING l
61552: EQUAL
61553: IFFALSE 61578
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61555: LD_ADDR_VAR 0 2
61559: PUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: CALL_OW 437
61569: PUSH
61570: LD_INT 1
61572: ARRAY
61573: PUSH
61574: LD_INT 4
61576: ARRAY
61577: ST_TO_ADDR
// end ;
61578: LD_VAR 0 2
61582: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61583: LD_INT 0
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
// if not base_units then
61589: LD_VAR 0 1
61593: NOT
61594: IFFALSE 61598
// exit ;
61596: GO 61685
// result := false ;
61598: LD_ADDR_VAR 0 2
61602: PUSH
61603: LD_INT 0
61605: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61606: LD_ADDR_VAR 0 5
61610: PUSH
61611: LD_VAR 0 1
61615: PPUSH
61616: LD_INT 21
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PPUSH
61626: CALL_OW 72
61630: ST_TO_ADDR
// if not tmp then
61631: LD_VAR 0 5
61635: NOT
61636: IFFALSE 61640
// exit ;
61638: GO 61685
// for i in tmp do
61640: LD_ADDR_VAR 0 3
61644: PUSH
61645: LD_VAR 0 5
61649: PUSH
61650: FOR_IN
61651: IFFALSE 61683
// begin result := EnemyInRange ( i , 22 ) ;
61653: LD_ADDR_VAR 0 2
61657: PUSH
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_INT 22
61665: PPUSH
61666: CALL 59298 0 2
61670: ST_TO_ADDR
// if result then
61671: LD_VAR 0 2
61675: IFFALSE 61681
// exit ;
61677: POP
61678: POP
61679: GO 61685
// end ;
61681: GO 61650
61683: POP
61684: POP
// end ;
61685: LD_VAR 0 2
61689: RET
// export function FilterByTag ( units , tag ) ; begin
61690: LD_INT 0
61692: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61693: LD_ADDR_VAR 0 3
61697: PUSH
61698: LD_VAR 0 1
61702: PPUSH
61703: LD_INT 120
61705: PUSH
61706: LD_VAR 0 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PPUSH
61715: CALL_OW 72
61719: ST_TO_ADDR
// end ;
61720: LD_VAR 0 3
61724: RET
// export function IsDriver ( un ) ; begin
61725: LD_INT 0
61727: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61728: LD_ADDR_VAR 0 2
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: LD_INT 55
61740: PUSH
61741: EMPTY
61742: LIST
61743: PPUSH
61744: CALL_OW 69
61748: IN
61749: ST_TO_ADDR
// end ;
61750: LD_VAR 0 2
61754: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61755: LD_INT 0
61757: PPUSH
61758: PPUSH
// list := [ ] ;
61759: LD_ADDR_VAR 0 5
61763: PUSH
61764: EMPTY
61765: ST_TO_ADDR
// case d of 0 :
61766: LD_VAR 0 3
61770: PUSH
61771: LD_INT 0
61773: DOUBLE
61774: EQUAL
61775: IFTRUE 61779
61777: GO 61912
61779: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61780: LD_ADDR_VAR 0 5
61784: PUSH
61785: LD_VAR 0 1
61789: PUSH
61790: LD_INT 4
61792: MINUS
61793: PUSH
61794: LD_VAR 0 2
61798: PUSH
61799: LD_INT 4
61801: MINUS
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: PUSH
61811: LD_VAR 0 1
61815: PUSH
61816: LD_INT 3
61818: MINUS
61819: PUSH
61820: LD_VAR 0 2
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: PUSH
61833: LD_VAR 0 1
61837: PUSH
61838: LD_INT 4
61840: PLUS
61841: PUSH
61842: LD_VAR 0 2
61846: PUSH
61847: LD_INT 4
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: PUSH
61855: LD_VAR 0 1
61859: PUSH
61860: LD_INT 3
61862: PLUS
61863: PUSH
61864: LD_VAR 0 2
61868: PUSH
61869: LD_INT 3
61871: PLUS
61872: PUSH
61873: LD_INT 5
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 1
61885: PUSH
61886: LD_VAR 0 2
61890: PUSH
61891: LD_INT 4
61893: PLUS
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// end ; 1 :
61910: GO 62610
61912: LD_INT 1
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61920
61918: GO 62053
61920: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61921: LD_ADDR_VAR 0 5
61925: PUSH
61926: LD_VAR 0 1
61930: PUSH
61931: LD_VAR 0 2
61935: PUSH
61936: LD_INT 4
61938: MINUS
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: PUSH
61948: LD_VAR 0 1
61952: PUSH
61953: LD_INT 3
61955: MINUS
61956: PUSH
61957: LD_VAR 0 2
61961: PUSH
61962: LD_INT 3
61964: MINUS
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: PUSH
61974: LD_VAR 0 1
61978: PUSH
61979: LD_INT 4
61981: MINUS
61982: PUSH
61983: LD_VAR 0 2
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: PUSH
61996: LD_VAR 0 1
62000: PUSH
62001: LD_VAR 0 2
62005: PUSH
62006: LD_INT 3
62008: PLUS
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: PUSH
62018: LD_VAR 0 1
62022: PUSH
62023: LD_INT 4
62025: PLUS
62026: PUSH
62027: LD_VAR 0 2
62031: PUSH
62032: LD_INT 4
62034: PLUS
62035: PUSH
62036: LD_INT 5
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// end ; 2 :
62051: GO 62610
62053: LD_INT 2
62055: DOUBLE
62056: EQUAL
62057: IFTRUE 62061
62059: GO 62190
62061: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62062: LD_ADDR_VAR 0 5
62066: PUSH
62067: LD_VAR 0 1
62071: PUSH
62072: LD_VAR 0 2
62076: PUSH
62077: LD_INT 3
62079: MINUS
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: PUSH
62089: LD_VAR 0 1
62093: PUSH
62094: LD_INT 4
62096: PLUS
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: LD_INT 4
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: PUSH
62111: LD_VAR 0 1
62115: PUSH
62116: LD_VAR 0 2
62120: PUSH
62121: LD_INT 4
62123: PLUS
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: PUSH
62133: LD_VAR 0 1
62137: PUSH
62138: LD_INT 3
62140: MINUS
62141: PUSH
62142: LD_VAR 0 2
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: PUSH
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 4
62162: MINUS
62163: PUSH
62164: LD_VAR 0 2
62168: PUSH
62169: LD_INT 4
62171: MINUS
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: ST_TO_ADDR
// end ; 3 :
62188: GO 62610
62190: LD_INT 3
62192: DOUBLE
62193: EQUAL
62194: IFTRUE 62198
62196: GO 62331
62198: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62199: LD_ADDR_VAR 0 5
62203: PUSH
62204: LD_VAR 0 1
62208: PUSH
62209: LD_INT 3
62211: PLUS
62212: PUSH
62213: LD_VAR 0 2
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: PUSH
62226: LD_VAR 0 1
62230: PUSH
62231: LD_INT 4
62233: PLUS
62234: PUSH
62235: LD_VAR 0 2
62239: PUSH
62240: LD_INT 4
62242: PLUS
62243: PUSH
62244: LD_INT 5
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: PUSH
62252: LD_VAR 0 1
62256: PUSH
62257: LD_INT 4
62259: MINUS
62260: PUSH
62261: LD_VAR 0 2
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: PUSH
62274: LD_VAR 0 1
62278: PUSH
62279: LD_VAR 0 2
62283: PUSH
62284: LD_INT 4
62286: MINUS
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: PUSH
62296: LD_VAR 0 1
62300: PUSH
62301: LD_INT 3
62303: MINUS
62304: PUSH
62305: LD_VAR 0 2
62309: PUSH
62310: LD_INT 3
62312: MINUS
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: ST_TO_ADDR
// end ; 4 :
62329: GO 62610
62331: LD_INT 4
62333: DOUBLE
62334: EQUAL
62335: IFTRUE 62339
62337: GO 62472
62339: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62340: LD_ADDR_VAR 0 5
62344: PUSH
62345: LD_VAR 0 1
62349: PUSH
62350: LD_VAR 0 2
62354: PUSH
62355: LD_INT 4
62357: PLUS
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: LD_VAR 0 1
62371: PUSH
62372: LD_INT 3
62374: PLUS
62375: PUSH
62376: LD_VAR 0 2
62380: PUSH
62381: LD_INT 3
62383: PLUS
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: LIST
62392: PUSH
62393: LD_VAR 0 1
62397: PUSH
62398: LD_INT 4
62400: PLUS
62401: PUSH
62402: LD_VAR 0 2
62406: PUSH
62407: LD_INT 4
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: PUSH
62415: LD_VAR 0 1
62419: PUSH
62420: LD_VAR 0 2
62424: PUSH
62425: LD_INT 3
62427: MINUS
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: PUSH
62437: LD_VAR 0 1
62441: PUSH
62442: LD_INT 4
62444: MINUS
62445: PUSH
62446: LD_VAR 0 2
62450: PUSH
62451: LD_INT 4
62453: MINUS
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: ST_TO_ADDR
// end ; 5 :
62470: GO 62610
62472: LD_INT 5
62474: DOUBLE
62475: EQUAL
62476: IFTRUE 62480
62478: GO 62609
62480: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62481: LD_ADDR_VAR 0 5
62485: PUSH
62486: LD_VAR 0 1
62490: PUSH
62491: LD_INT 4
62493: MINUS
62494: PUSH
62495: LD_VAR 0 2
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: LD_VAR 0 1
62512: PUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_INT 4
62520: MINUS
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: LIST
62529: PUSH
62530: LD_VAR 0 1
62534: PUSH
62535: LD_INT 4
62537: PLUS
62538: PUSH
62539: LD_VAR 0 2
62543: PUSH
62544: LD_INT 4
62546: PLUS
62547: PUSH
62548: LD_INT 5
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: PUSH
62556: LD_VAR 0 1
62560: PUSH
62561: LD_INT 3
62563: PLUS
62564: PUSH
62565: LD_VAR 0 2
62569: PUSH
62570: LD_INT 4
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: PUSH
62578: LD_VAR 0 1
62582: PUSH
62583: LD_VAR 0 2
62587: PUSH
62588: LD_INT 3
62590: PLUS
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// end ; end ;
62607: GO 62610
62609: POP
// result := list ;
62610: LD_ADDR_VAR 0 4
62614: PUSH
62615: LD_VAR 0 5
62619: ST_TO_ADDR
// end ;
62620: LD_VAR 0 4
62624: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
62629: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62630: LD_VAR 0 1
62634: NOT
62635: PUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: LD_INT 4
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: IN
62659: NOT
62660: OR
62661: IFFALSE 62665
// exit ;
62663: GO 62757
// tmp := [ ] ;
62665: LD_ADDR_VAR 0 5
62669: PUSH
62670: EMPTY
62671: ST_TO_ADDR
// for i in units do
62672: LD_ADDR_VAR 0 4
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: FOR_IN
62683: IFFALSE 62726
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62685: LD_ADDR_VAR 0 5
62689: PUSH
62690: LD_VAR 0 5
62694: PPUSH
62695: LD_VAR 0 5
62699: PUSH
62700: LD_INT 1
62702: PLUS
62703: PPUSH
62704: LD_VAR 0 4
62708: PPUSH
62709: LD_VAR 0 2
62713: PPUSH
62714: CALL_OW 259
62718: PPUSH
62719: CALL_OW 2
62723: ST_TO_ADDR
62724: GO 62682
62726: POP
62727: POP
// if not tmp then
62728: LD_VAR 0 5
62732: NOT
62733: IFFALSE 62737
// exit ;
62735: GO 62757
// result := SortListByListDesc ( units , tmp ) ;
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 1
62746: PPUSH
62747: LD_VAR 0 5
62751: PPUSH
62752: CALL_OW 77
62756: ST_TO_ADDR
// end ;
62757: LD_VAR 0 3
62761: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
62766: PPUSH
// result := false ;
62767: LD_ADDR_VAR 0 3
62771: PUSH
62772: LD_INT 0
62774: ST_TO_ADDR
// x := GetX ( building ) ;
62775: LD_ADDR_VAR 0 4
62779: PUSH
62780: LD_VAR 0 2
62784: PPUSH
62785: CALL_OW 250
62789: ST_TO_ADDR
// y := GetY ( building ) ;
62790: LD_ADDR_VAR 0 5
62794: PUSH
62795: LD_VAR 0 2
62799: PPUSH
62800: CALL_OW 251
62804: ST_TO_ADDR
// if not building or not x or not y then
62805: LD_VAR 0 2
62809: NOT
62810: PUSH
62811: LD_VAR 0 4
62815: NOT
62816: OR
62817: PUSH
62818: LD_VAR 0 5
62822: NOT
62823: OR
62824: IFFALSE 62828
// exit ;
62826: GO 62920
// if GetTaskList ( unit ) then
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 437
62837: IFFALSE 62920
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62839: LD_STRING e
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 437
62851: PUSH
62852: LD_INT 1
62854: ARRAY
62855: PUSH
62856: LD_INT 1
62858: ARRAY
62859: EQUAL
62860: PUSH
62861: LD_VAR 0 4
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: CALL_OW 437
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PUSH
62880: LD_INT 2
62882: ARRAY
62883: EQUAL
62884: AND
62885: PUSH
62886: LD_VAR 0 5
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 437
62900: PUSH
62901: LD_INT 1
62903: ARRAY
62904: PUSH
62905: LD_INT 3
62907: ARRAY
62908: EQUAL
62909: AND
62910: IFFALSE 62920
// result := true end ;
62912: LD_ADDR_VAR 0 3
62916: PUSH
62917: LD_INT 1
62919: ST_TO_ADDR
// end ;
62920: LD_VAR 0 3
62924: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62925: LD_INT 0
62927: PPUSH
// result := false ;
62928: LD_ADDR_VAR 0 4
62932: PUSH
62933: LD_INT 0
62935: ST_TO_ADDR
// if GetTaskList ( unit ) then
62936: LD_VAR 0 1
62940: PPUSH
62941: CALL_OW 437
62945: IFFALSE 63028
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62947: LD_STRING M
62949: PUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL_OW 437
62959: PUSH
62960: LD_INT 1
62962: ARRAY
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: EQUAL
62968: PUSH
62969: LD_VAR 0 2
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: CALL_OW 437
62983: PUSH
62984: LD_INT 1
62986: ARRAY
62987: PUSH
62988: LD_INT 2
62990: ARRAY
62991: EQUAL
62992: AND
62993: PUSH
62994: LD_VAR 0 3
62998: PUSH
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 437
63008: PUSH
63009: LD_INT 1
63011: ARRAY
63012: PUSH
63013: LD_INT 3
63015: ARRAY
63016: EQUAL
63017: AND
63018: IFFALSE 63028
// result := true ;
63020: LD_ADDR_VAR 0 4
63024: PUSH
63025: LD_INT 1
63027: ST_TO_ADDR
// end ; end ;
63028: LD_VAR 0 4
63032: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63033: LD_INT 0
63035: PPUSH
63036: PPUSH
63037: PPUSH
63038: PPUSH
// if not unit or not area then
63039: LD_VAR 0 1
63043: NOT
63044: PUSH
63045: LD_VAR 0 2
63049: NOT
63050: OR
63051: IFFALSE 63055
// exit ;
63053: GO 63219
// tmp := AreaToList ( area , i ) ;
63055: LD_ADDR_VAR 0 6
63059: PUSH
63060: LD_VAR 0 2
63064: PPUSH
63065: LD_VAR 0 5
63069: PPUSH
63070: CALL_OW 517
63074: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63075: LD_ADDR_VAR 0 5
63079: PUSH
63080: DOUBLE
63081: LD_INT 1
63083: DEC
63084: ST_TO_ADDR
63085: LD_VAR 0 6
63089: PUSH
63090: LD_INT 1
63092: ARRAY
63093: PUSH
63094: FOR_TO
63095: IFFALSE 63217
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63097: LD_ADDR_VAR 0 7
63101: PUSH
63102: LD_VAR 0 6
63106: PUSH
63107: LD_INT 1
63109: ARRAY
63110: PUSH
63111: LD_VAR 0 5
63115: ARRAY
63116: PUSH
63117: LD_VAR 0 6
63121: PUSH
63122: LD_INT 2
63124: ARRAY
63125: PUSH
63126: LD_VAR 0 5
63130: ARRAY
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63136: LD_VAR 0 7
63140: PUSH
63141: LD_INT 1
63143: ARRAY
63144: PPUSH
63145: LD_VAR 0 7
63149: PUSH
63150: LD_INT 2
63152: ARRAY
63153: PPUSH
63154: CALL_OW 428
63158: PUSH
63159: LD_INT 0
63161: EQUAL
63162: IFFALSE 63215
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63164: LD_VAR 0 1
63168: PPUSH
63169: LD_VAR 0 7
63173: PUSH
63174: LD_INT 1
63176: ARRAY
63177: PPUSH
63178: LD_VAR 0 7
63182: PUSH
63183: LD_INT 2
63185: ARRAY
63186: PPUSH
63187: LD_VAR 0 3
63191: PPUSH
63192: CALL_OW 48
// result := IsPlaced ( unit ) ;
63196: LD_ADDR_VAR 0 4
63200: PUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: CALL_OW 305
63210: ST_TO_ADDR
// exit ;
63211: POP
63212: POP
63213: GO 63219
// end ; end ;
63215: GO 63094
63217: POP
63218: POP
// end ;
63219: LD_VAR 0 4
63223: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63224: LD_INT 0
63226: PPUSH
63227: PPUSH
63228: PPUSH
// if not side or side > 8 then
63229: LD_VAR 0 1
63233: NOT
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: LD_INT 8
63242: GREATER
63243: OR
63244: IFFALSE 63248
// exit ;
63246: GO 63435
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63248: LD_ADDR_VAR 0 4
63252: PUSH
63253: LD_INT 22
63255: PUSH
63256: LD_VAR 0 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 21
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PPUSH
63279: CALL_OW 69
63283: ST_TO_ADDR
// if not tmp then
63284: LD_VAR 0 4
63288: NOT
63289: IFFALSE 63293
// exit ;
63291: GO 63435
// enable_addtolog := true ;
63293: LD_ADDR_OWVAR 81
63297: PUSH
63298: LD_INT 1
63300: ST_TO_ADDR
// AddToLog ( [ ) ;
63301: LD_STRING [
63303: PPUSH
63304: CALL_OW 561
// for i in tmp do
63308: LD_ADDR_VAR 0 3
63312: PUSH
63313: LD_VAR 0 4
63317: PUSH
63318: FOR_IN
63319: IFFALSE 63426
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63321: LD_STRING [
63323: PUSH
63324: LD_VAR 0 3
63328: PPUSH
63329: CALL_OW 266
63333: STR
63334: PUSH
63335: LD_STRING , 
63337: STR
63338: PUSH
63339: LD_VAR 0 3
63343: PPUSH
63344: CALL_OW 250
63348: STR
63349: PUSH
63350: LD_STRING , 
63352: STR
63353: PUSH
63354: LD_VAR 0 3
63358: PPUSH
63359: CALL_OW 251
63363: STR
63364: PUSH
63365: LD_STRING , 
63367: STR
63368: PUSH
63369: LD_VAR 0 3
63373: PPUSH
63374: CALL_OW 254
63378: STR
63379: PUSH
63380: LD_STRING , 
63382: STR
63383: PUSH
63384: LD_VAR 0 3
63388: PPUSH
63389: LD_INT 1
63391: PPUSH
63392: CALL_OW 268
63396: STR
63397: PUSH
63398: LD_STRING , 
63400: STR
63401: PUSH
63402: LD_VAR 0 3
63406: PPUSH
63407: LD_INT 2
63409: PPUSH
63410: CALL_OW 268
63414: STR
63415: PUSH
63416: LD_STRING ],
63418: STR
63419: PPUSH
63420: CALL_OW 561
// end ;
63424: GO 63318
63426: POP
63427: POP
// AddToLog ( ]; ) ;
63428: LD_STRING ];
63430: PPUSH
63431: CALL_OW 561
// end ;
63435: LD_VAR 0 2
63439: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63440: LD_INT 0
63442: PPUSH
63443: PPUSH
63444: PPUSH
63445: PPUSH
63446: PPUSH
// if not area or not rate or not max then
63447: LD_VAR 0 1
63451: NOT
63452: PUSH
63453: LD_VAR 0 2
63457: NOT
63458: OR
63459: PUSH
63460: LD_VAR 0 4
63464: NOT
63465: OR
63466: IFFALSE 63470
// exit ;
63468: GO 63659
// while 1 do
63470: LD_INT 1
63472: IFFALSE 63659
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63474: LD_ADDR_VAR 0 9
63478: PUSH
63479: LD_VAR 0 1
63483: PPUSH
63484: LD_INT 1
63486: PPUSH
63487: CALL_OW 287
63491: PUSH
63492: LD_INT 10
63494: MUL
63495: ST_TO_ADDR
// r := rate / 10 ;
63496: LD_ADDR_VAR 0 7
63500: PUSH
63501: LD_VAR 0 2
63505: PUSH
63506: LD_INT 10
63508: DIVREAL
63509: ST_TO_ADDR
// time := 1 1$00 ;
63510: LD_ADDR_VAR 0 8
63514: PUSH
63515: LD_INT 2100
63517: ST_TO_ADDR
// if amount < min then
63518: LD_VAR 0 9
63522: PUSH
63523: LD_VAR 0 3
63527: LESS
63528: IFFALSE 63546
// r := r * 2 else
63530: LD_ADDR_VAR 0 7
63534: PUSH
63535: LD_VAR 0 7
63539: PUSH
63540: LD_INT 2
63542: MUL
63543: ST_TO_ADDR
63544: GO 63572
// if amount > max then
63546: LD_VAR 0 9
63550: PUSH
63551: LD_VAR 0 4
63555: GREATER
63556: IFFALSE 63572
// r := r / 2 ;
63558: LD_ADDR_VAR 0 7
63562: PUSH
63563: LD_VAR 0 7
63567: PUSH
63568: LD_INT 2
63570: DIVREAL
63571: ST_TO_ADDR
// time := time / r ;
63572: LD_ADDR_VAR 0 8
63576: PUSH
63577: LD_VAR 0 8
63581: PUSH
63582: LD_VAR 0 7
63586: DIVREAL
63587: ST_TO_ADDR
// if time < 0 then
63588: LD_VAR 0 8
63592: PUSH
63593: LD_INT 0
63595: LESS
63596: IFFALSE 63613
// time := time * - 1 ;
63598: LD_ADDR_VAR 0 8
63602: PUSH
63603: LD_VAR 0 8
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: MUL
63612: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63613: LD_VAR 0 8
63617: PUSH
63618: LD_INT 35
63620: PPUSH
63621: LD_INT 875
63623: PPUSH
63624: CALL_OW 12
63628: PLUS
63629: PPUSH
63630: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63634: LD_INT 1
63636: PPUSH
63637: LD_INT 5
63639: PPUSH
63640: CALL_OW 12
63644: PPUSH
63645: LD_VAR 0 1
63649: PPUSH
63650: LD_INT 1
63652: PPUSH
63653: CALL_OW 55
// end ;
63657: GO 63470
// end ;
63659: LD_VAR 0 5
63663: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63664: LD_INT 0
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
63671: PPUSH
63672: PPUSH
63673: PPUSH
// if not turrets or not factories then
63674: LD_VAR 0 1
63678: NOT
63679: PUSH
63680: LD_VAR 0 2
63684: NOT
63685: OR
63686: IFFALSE 63690
// exit ;
63688: GO 63997
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63690: LD_ADDR_VAR 0 10
63694: PUSH
63695: LD_INT 5
63697: PUSH
63698: LD_INT 6
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: LD_INT 4
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: LD_INT 5
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 24
63732: PUSH
63733: LD_INT 25
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 23
63742: PUSH
63743: LD_INT 27
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 42
63756: PUSH
63757: LD_INT 43
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 44
63766: PUSH
63767: LD_INT 46
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 45
63776: PUSH
63777: LD_INT 47
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: ST_TO_ADDR
// result := [ ] ;
63794: LD_ADDR_VAR 0 3
63798: PUSH
63799: EMPTY
63800: ST_TO_ADDR
// for i in turrets do
63801: LD_ADDR_VAR 0 4
63805: PUSH
63806: LD_VAR 0 1
63810: PUSH
63811: FOR_IN
63812: IFFALSE 63995
// begin nat := GetNation ( i ) ;
63814: LD_ADDR_VAR 0 7
63818: PUSH
63819: LD_VAR 0 4
63823: PPUSH
63824: CALL_OW 248
63828: ST_TO_ADDR
// weapon := 0 ;
63829: LD_ADDR_VAR 0 8
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// if not nat then
63837: LD_VAR 0 7
63841: NOT
63842: IFFALSE 63846
// continue ;
63844: GO 63811
// for j in list [ nat ] do
63846: LD_ADDR_VAR 0 5
63850: PUSH
63851: LD_VAR 0 10
63855: PUSH
63856: LD_VAR 0 7
63860: ARRAY
63861: PUSH
63862: FOR_IN
63863: IFFALSE 63904
// if GetBWeapon ( i ) = j [ 1 ] then
63865: LD_VAR 0 4
63869: PPUSH
63870: CALL_OW 269
63874: PUSH
63875: LD_VAR 0 5
63879: PUSH
63880: LD_INT 1
63882: ARRAY
63883: EQUAL
63884: IFFALSE 63902
// begin weapon := j [ 2 ] ;
63886: LD_ADDR_VAR 0 8
63890: PUSH
63891: LD_VAR 0 5
63895: PUSH
63896: LD_INT 2
63898: ARRAY
63899: ST_TO_ADDR
// break ;
63900: GO 63904
// end ;
63902: GO 63862
63904: POP
63905: POP
// if not weapon then
63906: LD_VAR 0 8
63910: NOT
63911: IFFALSE 63915
// continue ;
63913: GO 63811
// for k in factories do
63915: LD_ADDR_VAR 0 6
63919: PUSH
63920: LD_VAR 0 2
63924: PUSH
63925: FOR_IN
63926: IFFALSE 63991
// begin weapons := AvailableWeaponList ( k ) ;
63928: LD_ADDR_VAR 0 9
63932: PUSH
63933: LD_VAR 0 6
63937: PPUSH
63938: CALL_OW 478
63942: ST_TO_ADDR
// if not weapons then
63943: LD_VAR 0 9
63947: NOT
63948: IFFALSE 63952
// continue ;
63950: GO 63925
// if weapon in weapons then
63952: LD_VAR 0 8
63956: PUSH
63957: LD_VAR 0 9
63961: IN
63962: IFFALSE 63989
// begin result := [ i , weapon ] ;
63964: LD_ADDR_VAR 0 3
63968: PUSH
63969: LD_VAR 0 4
63973: PUSH
63974: LD_VAR 0 8
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: ST_TO_ADDR
// exit ;
63983: POP
63984: POP
63985: POP
63986: POP
63987: GO 63997
// end ; end ;
63989: GO 63925
63991: POP
63992: POP
// end ;
63993: GO 63811
63995: POP
63996: POP
// end ;
63997: LD_VAR 0 3
64001: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64002: LD_INT 0
64004: PPUSH
// if not side or side > 8 then
64005: LD_VAR 0 3
64009: NOT
64010: PUSH
64011: LD_VAR 0 3
64015: PUSH
64016: LD_INT 8
64018: GREATER
64019: OR
64020: IFFALSE 64024
// exit ;
64022: GO 64083
// if not range then
64024: LD_VAR 0 4
64028: NOT
64029: IFFALSE 64040
// range := - 12 ;
64031: LD_ADDR_VAR 0 4
64035: PUSH
64036: LD_INT 12
64038: NEG
64039: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64040: LD_VAR 0 1
64044: PPUSH
64045: LD_VAR 0 2
64049: PPUSH
64050: LD_VAR 0 3
64054: PPUSH
64055: LD_VAR 0 4
64059: PPUSH
64060: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64064: LD_VAR 0 1
64068: PPUSH
64069: LD_VAR 0 2
64073: PPUSH
64074: LD_VAR 0 3
64078: PPUSH
64079: CALL_OW 331
// end ;
64083: LD_VAR 0 5
64087: RET
// export function Video ( mode ) ; begin
64088: LD_INT 0
64090: PPUSH
// ingame_video = mode ;
64091: LD_ADDR_OWVAR 52
64095: PUSH
64096: LD_VAR 0 1
64100: ST_TO_ADDR
// interface_hidden = mode ;
64101: LD_ADDR_OWVAR 54
64105: PUSH
64106: LD_VAR 0 1
64110: ST_TO_ADDR
// end ;
64111: LD_VAR 0 2
64115: RET
// export function Join ( array , element ) ; begin
64116: LD_INT 0
64118: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64119: LD_ADDR_VAR 0 3
64123: PUSH
64124: LD_VAR 0 1
64128: PPUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_INT 1
64136: PLUS
64137: PPUSH
64138: LD_VAR 0 2
64142: PPUSH
64143: CALL_OW 1
64147: ST_TO_ADDR
// end ;
64148: LD_VAR 0 3
64152: RET
// export function JoinUnion ( array , element ) ; begin
64153: LD_INT 0
64155: PPUSH
// result := array union element ;
64156: LD_ADDR_VAR 0 3
64160: PUSH
64161: LD_VAR 0 1
64165: PUSH
64166: LD_VAR 0 2
64170: UNION
64171: ST_TO_ADDR
// end ;
64172: LD_VAR 0 3
64176: RET
// export function GetBehemoths ( side ) ; begin
64177: LD_INT 0
64179: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_INT 22
64187: PUSH
64188: LD_VAR 0 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 31
64199: PUSH
64200: LD_INT 25
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PPUSH
64211: CALL_OW 69
64215: ST_TO_ADDR
// end ;
64216: LD_VAR 0 2
64220: RET
// export function Shuffle ( array ) ; var i , index ; begin
64221: LD_INT 0
64223: PPUSH
64224: PPUSH
64225: PPUSH
// result := [ ] ;
64226: LD_ADDR_VAR 0 2
64230: PUSH
64231: EMPTY
64232: ST_TO_ADDR
// if not array then
64233: LD_VAR 0 1
64237: NOT
64238: IFFALSE 64242
// exit ;
64240: GO 64341
// Randomize ;
64242: CALL_OW 10
// for i = array downto 1 do
64246: LD_ADDR_VAR 0 3
64250: PUSH
64251: DOUBLE
64252: LD_VAR 0 1
64256: INC
64257: ST_TO_ADDR
64258: LD_INT 1
64260: PUSH
64261: FOR_DOWNTO
64262: IFFALSE 64339
// begin index := rand ( 1 , array ) ;
64264: LD_ADDR_VAR 0 4
64268: PUSH
64269: LD_INT 1
64271: PPUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 12
64281: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_VAR 0 2
64291: PPUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_INT 1
64299: PLUS
64300: PPUSH
64301: LD_VAR 0 1
64305: PUSH
64306: LD_VAR 0 4
64310: ARRAY
64311: PPUSH
64312: CALL_OW 2
64316: ST_TO_ADDR
// array := Delete ( array , index ) ;
64317: LD_ADDR_VAR 0 1
64321: PUSH
64322: LD_VAR 0 1
64326: PPUSH
64327: LD_VAR 0 4
64331: PPUSH
64332: CALL_OW 3
64336: ST_TO_ADDR
// end ;
64337: GO 64261
64339: POP
64340: POP
// end ;
64341: LD_VAR 0 2
64345: RET
// export function GetBaseMaterials ( base ) ; begin
64346: LD_INT 0
64348: PPUSH
// result := [ 0 , 0 , 0 ] ;
64349: LD_ADDR_VAR 0 2
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// if not base then
64368: LD_VAR 0 1
64372: NOT
64373: IFFALSE 64377
// exit ;
64375: GO 64426
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64377: LD_ADDR_VAR 0 2
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: LD_INT 1
64389: PPUSH
64390: CALL_OW 275
64394: PUSH
64395: LD_VAR 0 1
64399: PPUSH
64400: LD_INT 2
64402: PPUSH
64403: CALL_OW 275
64407: PUSH
64408: LD_VAR 0 1
64412: PPUSH
64413: LD_INT 3
64415: PPUSH
64416: CALL_OW 275
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: ST_TO_ADDR
// end ;
64426: LD_VAR 0 2
64430: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64431: LD_INT 0
64433: PPUSH
64434: PPUSH
// result := array ;
64435: LD_ADDR_VAR 0 3
64439: PUSH
64440: LD_VAR 0 1
64444: ST_TO_ADDR
// if size >= result then
64445: LD_VAR 0 2
64449: PUSH
64450: LD_VAR 0 3
64454: GREATEREQUAL
64455: IFFALSE 64459
// exit ;
64457: GO 64509
// if size then
64459: LD_VAR 0 2
64463: IFFALSE 64509
// for i := array downto size do
64465: LD_ADDR_VAR 0 4
64469: PUSH
64470: DOUBLE
64471: LD_VAR 0 1
64475: INC
64476: ST_TO_ADDR
64477: LD_VAR 0 2
64481: PUSH
64482: FOR_DOWNTO
64483: IFFALSE 64507
// result := Delete ( result , result ) ;
64485: LD_ADDR_VAR 0 3
64489: PUSH
64490: LD_VAR 0 3
64494: PPUSH
64495: LD_VAR 0 3
64499: PPUSH
64500: CALL_OW 3
64504: ST_TO_ADDR
64505: GO 64482
64507: POP
64508: POP
// end ;
64509: LD_VAR 0 3
64513: RET
// export function ComExit ( unit ) ; var tmp ; begin
64514: LD_INT 0
64516: PPUSH
64517: PPUSH
// if not IsInUnit ( unit ) then
64518: LD_VAR 0 1
64522: PPUSH
64523: CALL_OW 310
64527: NOT
64528: IFFALSE 64532
// exit ;
64530: GO 64592
// tmp := IsInUnit ( unit ) ;
64532: LD_ADDR_VAR 0 3
64536: PUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 310
64546: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64547: LD_VAR 0 3
64551: PPUSH
64552: CALL_OW 247
64556: PUSH
64557: LD_INT 2
64559: EQUAL
64560: IFFALSE 64573
// ComExitVehicle ( unit ) else
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 121
64571: GO 64582
// ComExitBuilding ( unit ) ;
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 122
// result := tmp ;
64582: LD_ADDR_VAR 0 2
64586: PUSH
64587: LD_VAR 0 3
64591: ST_TO_ADDR
// end ;
64592: LD_VAR 0 2
64596: RET
// export function ComExitAll ( units ) ; var i ; begin
64597: LD_INT 0
64599: PPUSH
64600: PPUSH
// if not units then
64601: LD_VAR 0 1
64605: NOT
64606: IFFALSE 64610
// exit ;
64608: GO 64636
// for i in units do
64610: LD_ADDR_VAR 0 3
64614: PUSH
64615: LD_VAR 0 1
64619: PUSH
64620: FOR_IN
64621: IFFALSE 64634
// ComExit ( i ) ;
64623: LD_VAR 0 3
64627: PPUSH
64628: CALL 64514 0 1
64632: GO 64620
64634: POP
64635: POP
// end ;
64636: LD_VAR 0 2
64640: RET
// export function ResetHc ; begin
64641: LD_INT 0
64643: PPUSH
// InitHc ;
64644: CALL_OW 19
// hc_importance := 0 ;
64648: LD_ADDR_OWVAR 32
64652: PUSH
64653: LD_INT 0
64655: ST_TO_ADDR
// end ;
64656: LD_VAR 0 1
64660: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64661: LD_INT 0
64663: PPUSH
64664: PPUSH
64665: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64666: LD_ADDR_VAR 0 6
64670: PUSH
64671: LD_VAR 0 1
64675: PUSH
64676: LD_VAR 0 3
64680: PLUS
64681: PUSH
64682: LD_INT 2
64684: DIV
64685: ST_TO_ADDR
// if _x < 0 then
64686: LD_VAR 0 6
64690: PUSH
64691: LD_INT 0
64693: LESS
64694: IFFALSE 64711
// _x := _x * - 1 ;
64696: LD_ADDR_VAR 0 6
64700: PUSH
64701: LD_VAR 0 6
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: MUL
64710: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64711: LD_ADDR_VAR 0 7
64715: PUSH
64716: LD_VAR 0 2
64720: PUSH
64721: LD_VAR 0 4
64725: PLUS
64726: PUSH
64727: LD_INT 2
64729: DIV
64730: ST_TO_ADDR
// if _y < 0 then
64731: LD_VAR 0 7
64735: PUSH
64736: LD_INT 0
64738: LESS
64739: IFFALSE 64756
// _y := _y * - 1 ;
64741: LD_ADDR_VAR 0 7
64745: PUSH
64746: LD_VAR 0 7
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: MUL
64755: ST_TO_ADDR
// result := [ _x , _y ] ;
64756: LD_ADDR_VAR 0 5
64760: PUSH
64761: LD_VAR 0 6
64765: PUSH
64766: LD_VAR 0 7
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// end ;
64775: LD_VAR 0 5
64779: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64780: LD_INT 0
64782: PPUSH
64783: PPUSH
64784: PPUSH
64785: PPUSH
// task := GetTaskList ( unit ) ;
64786: LD_ADDR_VAR 0 7
64790: PUSH
64791: LD_VAR 0 1
64795: PPUSH
64796: CALL_OW 437
64800: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64801: LD_VAR 0 7
64805: NOT
64806: PUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: CALL_OW 308
64821: NOT
64822: AND
64823: IFFALSE 64827
// exit ;
64825: GO 64945
// if IsInArea ( unit , area ) then
64827: LD_VAR 0 1
64831: PPUSH
64832: LD_VAR 0 2
64836: PPUSH
64837: CALL_OW 308
64841: IFFALSE 64859
// begin ComMoveToArea ( unit , goAway ) ;
64843: LD_VAR 0 1
64847: PPUSH
64848: LD_VAR 0 3
64852: PPUSH
64853: CALL_OW 113
// exit ;
64857: GO 64945
// end ; if task [ 1 ] [ 1 ] <> M then
64859: LD_VAR 0 7
64863: PUSH
64864: LD_INT 1
64866: ARRAY
64867: PUSH
64868: LD_INT 1
64870: ARRAY
64871: PUSH
64872: LD_STRING M
64874: NONEQUAL
64875: IFFALSE 64879
// exit ;
64877: GO 64945
// x := task [ 1 ] [ 2 ] ;
64879: LD_ADDR_VAR 0 5
64883: PUSH
64884: LD_VAR 0 7
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PUSH
64893: LD_INT 2
64895: ARRAY
64896: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64897: LD_ADDR_VAR 0 6
64901: PUSH
64902: LD_VAR 0 7
64906: PUSH
64907: LD_INT 1
64909: ARRAY
64910: PUSH
64911: LD_INT 3
64913: ARRAY
64914: ST_TO_ADDR
// if InArea ( x , y , area ) then
64915: LD_VAR 0 5
64919: PPUSH
64920: LD_VAR 0 6
64924: PPUSH
64925: LD_VAR 0 2
64929: PPUSH
64930: CALL_OW 309
64934: IFFALSE 64945
// ComStop ( unit ) ;
64936: LD_VAR 0 1
64940: PPUSH
64941: CALL_OW 141
// end ;
64945: LD_VAR 0 4
64949: RET
// export function Abs ( value ) ; begin
64950: LD_INT 0
64952: PPUSH
// result := value ;
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_VAR 0 1
64962: ST_TO_ADDR
// if value < 0 then
64963: LD_VAR 0 1
64967: PUSH
64968: LD_INT 0
64970: LESS
64971: IFFALSE 64988
// result := value * - 1 ;
64973: LD_ADDR_VAR 0 2
64977: PUSH
64978: LD_VAR 0 1
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: MUL
64987: ST_TO_ADDR
// end ;
64988: LD_VAR 0 2
64992: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64993: LD_INT 0
64995: PPUSH
64996: PPUSH
64997: PPUSH
64998: PPUSH
64999: PPUSH
65000: PPUSH
65001: PPUSH
65002: PPUSH
// if not unit or not building then
65003: LD_VAR 0 1
65007: NOT
65008: PUSH
65009: LD_VAR 0 2
65013: NOT
65014: OR
65015: IFFALSE 65019
// exit ;
65017: GO 65245
// x := GetX ( building ) ;
65019: LD_ADDR_VAR 0 4
65023: PUSH
65024: LD_VAR 0 2
65028: PPUSH
65029: CALL_OW 250
65033: ST_TO_ADDR
// y := GetY ( building ) ;
65034: LD_ADDR_VAR 0 6
65038: PUSH
65039: LD_VAR 0 2
65043: PPUSH
65044: CALL_OW 251
65048: ST_TO_ADDR
// d := GetDir ( building ) ;
65049: LD_ADDR_VAR 0 8
65053: PUSH
65054: LD_VAR 0 2
65058: PPUSH
65059: CALL_OW 254
65063: ST_TO_ADDR
// r := 4 ;
65064: LD_ADDR_VAR 0 9
65068: PUSH
65069: LD_INT 4
65071: ST_TO_ADDR
// for i := 1 to 5 do
65072: LD_ADDR_VAR 0 10
65076: PUSH
65077: DOUBLE
65078: LD_INT 1
65080: DEC
65081: ST_TO_ADDR
65082: LD_INT 5
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65243
// begin _x := ShiftX ( x , d , r + i ) ;
65088: LD_ADDR_VAR 0 5
65092: PUSH
65093: LD_VAR 0 4
65097: PPUSH
65098: LD_VAR 0 8
65102: PPUSH
65103: LD_VAR 0 9
65107: PUSH
65108: LD_VAR 0 10
65112: PLUS
65113: PPUSH
65114: CALL_OW 272
65118: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65119: LD_ADDR_VAR 0 7
65123: PUSH
65124: LD_VAR 0 6
65128: PPUSH
65129: LD_VAR 0 8
65133: PPUSH
65134: LD_VAR 0 9
65138: PUSH
65139: LD_VAR 0 10
65143: PLUS
65144: PPUSH
65145: CALL_OW 273
65149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65150: LD_VAR 0 5
65154: PPUSH
65155: LD_VAR 0 7
65159: PPUSH
65160: CALL_OW 488
65164: PUSH
65165: LD_VAR 0 5
65169: PPUSH
65170: LD_VAR 0 7
65174: PPUSH
65175: CALL_OW 428
65179: PPUSH
65180: CALL_OW 247
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: IN
65195: NOT
65196: AND
65197: IFFALSE 65241
// begin ComMoveXY ( unit , _x , _y ) ;
65199: LD_VAR 0 1
65203: PPUSH
65204: LD_VAR 0 5
65208: PPUSH
65209: LD_VAR 0 7
65213: PPUSH
65214: CALL_OW 111
// result := [ _x , _y ] ;
65218: LD_ADDR_VAR 0 3
65222: PUSH
65223: LD_VAR 0 5
65227: PUSH
65228: LD_VAR 0 7
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// exit ;
65237: POP
65238: POP
65239: GO 65245
// end ; end ;
65241: GO 65085
65243: POP
65244: POP
// end ;
65245: LD_VAR 0 3
65249: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65250: LD_INT 0
65252: PPUSH
65253: PPUSH
65254: PPUSH
// result := 0 ;
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: LD_INT 0
65262: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65263: LD_VAR 0 1
65267: PUSH
65268: LD_INT 0
65270: LESS
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 8
65279: GREATER
65280: OR
65281: PUSH
65282: LD_VAR 0 2
65286: PUSH
65287: LD_INT 0
65289: LESS
65290: OR
65291: PUSH
65292: LD_VAR 0 2
65296: PUSH
65297: LD_INT 8
65299: GREATER
65300: OR
65301: IFFALSE 65305
// exit ;
65303: GO 65380
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65305: LD_ADDR_VAR 0 4
65309: PUSH
65310: LD_INT 22
65312: PUSH
65313: LD_VAR 0 2
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PPUSH
65322: CALL_OW 69
65326: PUSH
65327: FOR_IN
65328: IFFALSE 65378
// begin un := UnitShoot ( i ) ;
65330: LD_ADDR_VAR 0 5
65334: PUSH
65335: LD_VAR 0 4
65339: PPUSH
65340: CALL_OW 504
65344: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65345: LD_VAR 0 5
65349: PPUSH
65350: CALL_OW 255
65354: PUSH
65355: LD_VAR 0 1
65359: EQUAL
65360: IFFALSE 65376
// begin result := un ;
65362: LD_ADDR_VAR 0 3
65366: PUSH
65367: LD_VAR 0 5
65371: ST_TO_ADDR
// exit ;
65372: POP
65373: POP
65374: GO 65380
// end ; end ;
65376: GO 65327
65378: POP
65379: POP
// end ;
65380: LD_VAR 0 3
65384: RET
// export function GetCargoBay ( units ) ; begin
65385: LD_INT 0
65387: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65388: LD_ADDR_VAR 0 2
65392: PUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 34
65403: PUSH
65404: LD_INT 12
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 34
65413: PUSH
65414: LD_INT 51
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 34
65423: PUSH
65424: LD_INT 32
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 34
65433: PUSH
65434: LD_INT 89
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: PPUSH
65448: CALL_OW 72
65452: ST_TO_ADDR
// end ;
65453: LD_VAR 0 2
65457: RET
// export function Negate ( value ) ; begin
65458: LD_INT 0
65460: PPUSH
// result := not value ;
65461: LD_ADDR_VAR 0 2
65465: PUSH
65466: LD_VAR 0 1
65470: NOT
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 2
65476: RET
// export function Inc ( value ) ; begin
65477: LD_INT 0
65479: PPUSH
// result := value + 1 ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_VAR 0 1
65489: PUSH
65490: LD_INT 1
65492: PLUS
65493: ST_TO_ADDR
// end ;
65494: LD_VAR 0 2
65498: RET
// export function Dec ( value ) ; begin
65499: LD_INT 0
65501: PPUSH
// result := value - 1 ;
65502: LD_ADDR_VAR 0 2
65506: PUSH
65507: LD_VAR 0 1
65511: PUSH
65512: LD_INT 1
65514: MINUS
65515: ST_TO_ADDR
// end ;
65516: LD_VAR 0 2
65520: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
65525: PPUSH
65526: PPUSH
65527: PPUSH
65528: PPUSH
65529: PPUSH
65530: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65531: LD_VAR 0 1
65535: PPUSH
65536: LD_VAR 0 2
65540: PPUSH
65541: CALL_OW 488
65545: NOT
65546: PUSH
65547: LD_VAR 0 3
65551: PPUSH
65552: LD_VAR 0 4
65556: PPUSH
65557: CALL_OW 488
65561: NOT
65562: OR
65563: IFFALSE 65576
// begin result := - 1 ;
65565: LD_ADDR_VAR 0 5
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: ST_TO_ADDR
// exit ;
65574: GO 65811
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65576: LD_ADDR_VAR 0 12
65580: PUSH
65581: LD_VAR 0 1
65585: PPUSH
65586: LD_VAR 0 2
65590: PPUSH
65591: LD_VAR 0 3
65595: PPUSH
65596: LD_VAR 0 4
65600: PPUSH
65601: CALL 64661 0 4
65605: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65606: LD_ADDR_VAR 0 11
65610: PUSH
65611: LD_VAR 0 1
65615: PPUSH
65616: LD_VAR 0 2
65620: PPUSH
65621: LD_VAR 0 12
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 12
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: CALL_OW 298
65643: ST_TO_ADDR
// distance := 9999 ;
65644: LD_ADDR_VAR 0 10
65648: PUSH
65649: LD_INT 9999
65651: ST_TO_ADDR
// for i := 0 to 5 do
65652: LD_ADDR_VAR 0 6
65656: PUSH
65657: DOUBLE
65658: LD_INT 0
65660: DEC
65661: ST_TO_ADDR
65662: LD_INT 5
65664: PUSH
65665: FOR_TO
65666: IFFALSE 65809
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65668: LD_ADDR_VAR 0 7
65672: PUSH
65673: LD_VAR 0 1
65677: PPUSH
65678: LD_VAR 0 6
65682: PPUSH
65683: LD_VAR 0 11
65687: PPUSH
65688: CALL_OW 272
65692: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65693: LD_ADDR_VAR 0 8
65697: PUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: LD_VAR 0 6
65707: PPUSH
65708: LD_VAR 0 11
65712: PPUSH
65713: CALL_OW 273
65717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65718: LD_VAR 0 7
65722: PPUSH
65723: LD_VAR 0 8
65727: PPUSH
65728: CALL_OW 488
65732: NOT
65733: IFFALSE 65737
// continue ;
65735: GO 65665
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65737: LD_ADDR_VAR 0 9
65741: PUSH
65742: LD_VAR 0 12
65746: PUSH
65747: LD_INT 1
65749: ARRAY
65750: PPUSH
65751: LD_VAR 0 12
65755: PUSH
65756: LD_INT 2
65758: ARRAY
65759: PPUSH
65760: LD_VAR 0 7
65764: PPUSH
65765: LD_VAR 0 8
65769: PPUSH
65770: CALL_OW 298
65774: ST_TO_ADDR
// if tmp < distance then
65775: LD_VAR 0 9
65779: PUSH
65780: LD_VAR 0 10
65784: LESS
65785: IFFALSE 65807
// begin result := i ;
65787: LD_ADDR_VAR 0 5
65791: PUSH
65792: LD_VAR 0 6
65796: ST_TO_ADDR
// distance := tmp ;
65797: LD_ADDR_VAR 0 10
65801: PUSH
65802: LD_VAR 0 9
65806: ST_TO_ADDR
// end ; end ;
65807: GO 65665
65809: POP
65810: POP
// end ;
65811: LD_VAR 0 5
65815: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65816: LD_INT 0
65818: PPUSH
65819: PPUSH
// if not driver or not IsInUnit ( driver ) then
65820: LD_VAR 0 1
65824: NOT
65825: PUSH
65826: LD_VAR 0 1
65830: PPUSH
65831: CALL_OW 310
65835: NOT
65836: OR
65837: IFFALSE 65841
// exit ;
65839: GO 65931
// vehicle := IsInUnit ( driver ) ;
65841: LD_ADDR_VAR 0 3
65845: PUSH
65846: LD_VAR 0 1
65850: PPUSH
65851: CALL_OW 310
65855: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65856: LD_VAR 0 1
65860: PPUSH
65861: LD_STRING \
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: PUSH
65891: LD_STRING E
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_VAR 0 3
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PPUSH
65927: CALL_OW 446
// end ;
65931: LD_VAR 0 2
65935: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65936: LD_INT 0
65938: PPUSH
65939: PPUSH
// if not driver or not IsInUnit ( driver ) then
65940: LD_VAR 0 1
65944: NOT
65945: PUSH
65946: LD_VAR 0 1
65950: PPUSH
65951: CALL_OW 310
65955: NOT
65956: OR
65957: IFFALSE 65961
// exit ;
65959: GO 66051
// vehicle := IsInUnit ( driver ) ;
65961: LD_ADDR_VAR 0 3
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: CALL_OW 310
65975: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65976: LD_VAR 0 1
65980: PPUSH
65981: LD_STRING \
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: PUSH
66011: LD_STRING E
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_VAR 0 3
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PPUSH
66047: CALL_OW 447
// end ;
66051: LD_VAR 0 2
66055: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66056: LD_INT 0
66058: PPUSH
66059: PPUSH
66060: PPUSH
// tmp := [ ] ;
66061: LD_ADDR_VAR 0 5
66065: PUSH
66066: EMPTY
66067: ST_TO_ADDR
// for i in units do
66068: LD_ADDR_VAR 0 4
66072: PUSH
66073: LD_VAR 0 1
66077: PUSH
66078: FOR_IN
66079: IFFALSE 66117
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66081: LD_ADDR_VAR 0 5
66085: PUSH
66086: LD_VAR 0 5
66090: PPUSH
66091: LD_VAR 0 5
66095: PUSH
66096: LD_INT 1
66098: PLUS
66099: PPUSH
66100: LD_VAR 0 4
66104: PPUSH
66105: CALL_OW 256
66109: PPUSH
66110: CALL_OW 2
66114: ST_TO_ADDR
66115: GO 66078
66117: POP
66118: POP
// if not tmp then
66119: LD_VAR 0 5
66123: NOT
66124: IFFALSE 66128
// exit ;
66126: GO 66176
// if asc then
66128: LD_VAR 0 2
66132: IFFALSE 66156
// result := SortListByListAsc ( units , tmp ) else
66134: LD_ADDR_VAR 0 3
66138: PUSH
66139: LD_VAR 0 1
66143: PPUSH
66144: LD_VAR 0 5
66148: PPUSH
66149: CALL_OW 76
66153: ST_TO_ADDR
66154: GO 66176
// result := SortListByListDesc ( units , tmp ) ;
66156: LD_ADDR_VAR 0 3
66160: PUSH
66161: LD_VAR 0 1
66165: PPUSH
66166: LD_VAR 0 5
66170: PPUSH
66171: CALL_OW 77
66175: ST_TO_ADDR
// end ;
66176: LD_VAR 0 3
66180: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66181: LD_INT 0
66183: PPUSH
66184: PPUSH
// task := GetTaskList ( mech ) ;
66185: LD_ADDR_VAR 0 4
66189: PUSH
66190: LD_VAR 0 1
66194: PPUSH
66195: CALL_OW 437
66199: ST_TO_ADDR
// if not task then
66200: LD_VAR 0 4
66204: NOT
66205: IFFALSE 66209
// exit ;
66207: GO 66251
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66209: LD_ADDR_VAR 0 3
66213: PUSH
66214: LD_VAR 0 4
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_STRING r
66229: EQUAL
66230: PUSH
66231: LD_VAR 0 4
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: LD_INT 4
66242: ARRAY
66243: PUSH
66244: LD_VAR 0 2
66248: EQUAL
66249: AND
66250: ST_TO_ADDR
// end ;
66251: LD_VAR 0 3
66255: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66256: LD_INT 0
66258: PPUSH
// SetDir ( unit , d ) ;
66259: LD_VAR 0 1
66263: PPUSH
66264: LD_VAR 0 4
66268: PPUSH
66269: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66273: LD_VAR 0 1
66277: PPUSH
66278: LD_VAR 0 2
66282: PPUSH
66283: LD_VAR 0 3
66287: PPUSH
66288: LD_VAR 0 5
66292: PPUSH
66293: CALL_OW 48
// end ;
66297: LD_VAR 0 6
66301: RET
// export function ToNaturalNumber ( number ) ; begin
66302: LD_INT 0
66304: PPUSH
// result := number div 1 ;
66305: LD_ADDR_VAR 0 2
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 1
66317: DIV
66318: ST_TO_ADDR
// if number < 0 then
66319: LD_VAR 0 1
66323: PUSH
66324: LD_INT 0
66326: LESS
66327: IFFALSE 66337
// result := 0 ;
66329: LD_ADDR_VAR 0 2
66333: PUSH
66334: LD_INT 0
66336: ST_TO_ADDR
// end ;
66337: LD_VAR 0 2
66341: RET
// export function SortByClass ( units , class ) ; var un ; begin
66342: LD_INT 0
66344: PPUSH
66345: PPUSH
// if not units or not class then
66346: LD_VAR 0 1
66350: NOT
66351: PUSH
66352: LD_VAR 0 2
66356: NOT
66357: OR
66358: IFFALSE 66362
// exit ;
66360: GO 66457
// result := [ ] ;
66362: LD_ADDR_VAR 0 3
66366: PUSH
66367: EMPTY
66368: ST_TO_ADDR
// for un in units do
66369: LD_ADDR_VAR 0 4
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: FOR_IN
66380: IFFALSE 66455
// if GetClass ( un ) = class then
66382: LD_VAR 0 4
66386: PPUSH
66387: CALL_OW 257
66391: PUSH
66392: LD_VAR 0 2
66396: EQUAL
66397: IFFALSE 66424
// result := Insert ( result , 1 , un ) else
66399: LD_ADDR_VAR 0 3
66403: PUSH
66404: LD_VAR 0 3
66408: PPUSH
66409: LD_INT 1
66411: PPUSH
66412: LD_VAR 0 4
66416: PPUSH
66417: CALL_OW 2
66421: ST_TO_ADDR
66422: GO 66453
// result := Replace ( result , result + 1 , un ) ;
66424: LD_ADDR_VAR 0 3
66428: PUSH
66429: LD_VAR 0 3
66433: PPUSH
66434: LD_VAR 0 3
66438: PUSH
66439: LD_INT 1
66441: PLUS
66442: PPUSH
66443: LD_VAR 0 4
66447: PPUSH
66448: CALL_OW 1
66452: ST_TO_ADDR
66453: GO 66379
66455: POP
66456: POP
// end ;
66457: LD_VAR 0 3
66461: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66462: LD_INT 0
66464: PPUSH
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
// result := [ ] ;
66471: LD_ADDR_VAR 0 4
66475: PUSH
66476: EMPTY
66477: ST_TO_ADDR
// if x - r < 0 then
66478: LD_VAR 0 1
66482: PUSH
66483: LD_VAR 0 3
66487: MINUS
66488: PUSH
66489: LD_INT 0
66491: LESS
66492: IFFALSE 66504
// min_x := 0 else
66494: LD_ADDR_VAR 0 8
66498: PUSH
66499: LD_INT 0
66501: ST_TO_ADDR
66502: GO 66520
// min_x := x - r ;
66504: LD_ADDR_VAR 0 8
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_VAR 0 3
66518: MINUS
66519: ST_TO_ADDR
// if y - r < 0 then
66520: LD_VAR 0 2
66524: PUSH
66525: LD_VAR 0 3
66529: MINUS
66530: PUSH
66531: LD_INT 0
66533: LESS
66534: IFFALSE 66546
// min_y := 0 else
66536: LD_ADDR_VAR 0 7
66540: PUSH
66541: LD_INT 0
66543: ST_TO_ADDR
66544: GO 66562
// min_y := y - r ;
66546: LD_ADDR_VAR 0 7
66550: PUSH
66551: LD_VAR 0 2
66555: PUSH
66556: LD_VAR 0 3
66560: MINUS
66561: ST_TO_ADDR
// max_x := x + r ;
66562: LD_ADDR_VAR 0 9
66566: PUSH
66567: LD_VAR 0 1
66571: PUSH
66572: LD_VAR 0 3
66576: PLUS
66577: ST_TO_ADDR
// max_y := y + r ;
66578: LD_ADDR_VAR 0 10
66582: PUSH
66583: LD_VAR 0 2
66587: PUSH
66588: LD_VAR 0 3
66592: PLUS
66593: ST_TO_ADDR
// for _x = min_x to max_x do
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: DOUBLE
66600: LD_VAR 0 8
66604: DEC
66605: ST_TO_ADDR
66606: LD_VAR 0 9
66610: PUSH
66611: FOR_TO
66612: IFFALSE 66713
// for _y = min_y to max_y do
66614: LD_ADDR_VAR 0 6
66618: PUSH
66619: DOUBLE
66620: LD_VAR 0 7
66624: DEC
66625: ST_TO_ADDR
66626: LD_VAR 0 10
66630: PUSH
66631: FOR_TO
66632: IFFALSE 66709
// begin if not ValidHex ( _x , _y ) then
66634: LD_VAR 0 5
66638: PPUSH
66639: LD_VAR 0 6
66643: PPUSH
66644: CALL_OW 488
66648: NOT
66649: IFFALSE 66653
// continue ;
66651: GO 66631
// if GetResourceTypeXY ( _x , _y ) then
66653: LD_VAR 0 5
66657: PPUSH
66658: LD_VAR 0 6
66662: PPUSH
66663: CALL_OW 283
66667: IFFALSE 66707
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66669: LD_ADDR_VAR 0 4
66673: PUSH
66674: LD_VAR 0 4
66678: PPUSH
66679: LD_VAR 0 4
66683: PUSH
66684: LD_INT 1
66686: PLUS
66687: PPUSH
66688: LD_VAR 0 5
66692: PUSH
66693: LD_VAR 0 6
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PPUSH
66702: CALL_OW 1
66706: ST_TO_ADDR
// end ;
66707: GO 66631
66709: POP
66710: POP
66711: GO 66611
66713: POP
66714: POP
// end ;
66715: LD_VAR 0 4
66719: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66720: LD_INT 0
66722: PPUSH
66723: PPUSH
66724: PPUSH
66725: PPUSH
66726: PPUSH
66727: PPUSH
66728: PPUSH
66729: PPUSH
// if not units then
66730: LD_VAR 0 1
66734: NOT
66735: IFFALSE 66739
// exit ;
66737: GO 67263
// result := UnitFilter ( units , [ f_ok ] ) ;
66739: LD_ADDR_VAR 0 3
66743: PUSH
66744: LD_VAR 0 1
66748: PPUSH
66749: LD_INT 50
66751: PUSH
66752: EMPTY
66753: LIST
66754: PPUSH
66755: CALL_OW 72
66759: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66760: LD_ADDR_VAR 0 8
66764: PUSH
66765: LD_VAR 0 1
66769: PUSH
66770: LD_INT 1
66772: ARRAY
66773: PPUSH
66774: CALL_OW 255
66778: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66779: LD_ADDR_VAR 0 10
66783: PUSH
66784: LD_INT 29
66786: PUSH
66787: LD_INT 91
66789: PUSH
66790: LD_INT 49
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// if not result then
66798: LD_VAR 0 3
66802: NOT
66803: IFFALSE 66807
// exit ;
66805: GO 67263
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66807: LD_ADDR_VAR 0 5
66811: PUSH
66812: LD_INT 81
66814: PUSH
66815: LD_VAR 0 8
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PPUSH
66824: CALL_OW 69
66828: ST_TO_ADDR
// for i in result do
66829: LD_ADDR_VAR 0 4
66833: PUSH
66834: LD_VAR 0 3
66838: PUSH
66839: FOR_IN
66840: IFFALSE 67261
// begin tag := GetTag ( i ) + 1 ;
66842: LD_ADDR_VAR 0 9
66846: PUSH
66847: LD_VAR 0 4
66851: PPUSH
66852: CALL_OW 110
66856: PUSH
66857: LD_INT 1
66859: PLUS
66860: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66861: LD_ADDR_VAR 0 7
66865: PUSH
66866: LD_VAR 0 4
66870: PPUSH
66871: CALL_OW 250
66875: PPUSH
66876: LD_VAR 0 4
66880: PPUSH
66881: CALL_OW 251
66885: PPUSH
66886: LD_INT 6
66888: PPUSH
66889: CALL 66462 0 3
66893: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66894: LD_VAR 0 4
66898: PPUSH
66899: CALL_OW 247
66903: PUSH
66904: LD_INT 2
66906: EQUAL
66907: PUSH
66908: LD_VAR 0 7
66912: AND
66913: PUSH
66914: LD_VAR 0 4
66918: PPUSH
66919: CALL_OW 264
66923: PUSH
66924: LD_VAR 0 10
66928: IN
66929: NOT
66930: AND
66931: IFFALSE 66970
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66933: LD_VAR 0 4
66937: PPUSH
66938: LD_VAR 0 7
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: PUSH
66947: LD_INT 1
66949: ARRAY
66950: PPUSH
66951: LD_VAR 0 7
66955: PUSH
66956: LD_INT 1
66958: ARRAY
66959: PUSH
66960: LD_INT 2
66962: ARRAY
66963: PPUSH
66964: CALL_OW 116
66968: GO 67259
// if path > tag then
66970: LD_VAR 0 2
66974: PUSH
66975: LD_VAR 0 9
66979: GREATER
66980: IFFALSE 67188
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66982: LD_ADDR_VAR 0 6
66986: PUSH
66987: LD_VAR 0 5
66991: PPUSH
66992: LD_INT 91
66994: PUSH
66995: LD_VAR 0 4
66999: PUSH
67000: LD_INT 8
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: PPUSH
67008: CALL_OW 72
67012: ST_TO_ADDR
// if nearEnemy then
67013: LD_VAR 0 6
67017: IFFALSE 67086
// begin if GetWeapon ( i ) = ru_time_lapser then
67019: LD_VAR 0 4
67023: PPUSH
67024: CALL_OW 264
67028: PUSH
67029: LD_INT 49
67031: EQUAL
67032: IFFALSE 67060
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67034: LD_VAR 0 4
67038: PPUSH
67039: LD_VAR 0 6
67043: PPUSH
67044: LD_VAR 0 4
67048: PPUSH
67049: CALL_OW 74
67053: PPUSH
67054: CALL_OW 112
67058: GO 67084
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67060: LD_VAR 0 4
67064: PPUSH
67065: LD_VAR 0 6
67069: PPUSH
67070: LD_VAR 0 4
67074: PPUSH
67075: CALL_OW 74
67079: PPUSH
67080: CALL_OW 115
// end else
67084: GO 67186
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67086: LD_VAR 0 4
67090: PPUSH
67091: LD_VAR 0 2
67095: PUSH
67096: LD_VAR 0 9
67100: ARRAY
67101: PUSH
67102: LD_INT 1
67104: ARRAY
67105: PPUSH
67106: LD_VAR 0 2
67110: PUSH
67111: LD_VAR 0 9
67115: ARRAY
67116: PUSH
67117: LD_INT 2
67119: ARRAY
67120: PPUSH
67121: CALL_OW 297
67125: PUSH
67126: LD_INT 6
67128: GREATER
67129: IFFALSE 67172
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67131: LD_VAR 0 4
67135: PPUSH
67136: LD_VAR 0 2
67140: PUSH
67141: LD_VAR 0 9
67145: ARRAY
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PPUSH
67151: LD_VAR 0 2
67155: PUSH
67156: LD_VAR 0 9
67160: ARRAY
67161: PUSH
67162: LD_INT 2
67164: ARRAY
67165: PPUSH
67166: CALL_OW 114
67170: GO 67186
// SetTag ( i , tag ) ;
67172: LD_VAR 0 4
67176: PPUSH
67177: LD_VAR 0 9
67181: PPUSH
67182: CALL_OW 109
// end else
67186: GO 67259
// if enemy then
67188: LD_VAR 0 5
67192: IFFALSE 67259
// begin if GetWeapon ( i ) = ru_time_lapser then
67194: LD_VAR 0 4
67198: PPUSH
67199: CALL_OW 264
67203: PUSH
67204: LD_INT 49
67206: EQUAL
67207: IFFALSE 67235
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67209: LD_VAR 0 4
67213: PPUSH
67214: LD_VAR 0 5
67218: PPUSH
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 74
67228: PPUSH
67229: CALL_OW 112
67233: GO 67259
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67235: LD_VAR 0 4
67239: PPUSH
67240: LD_VAR 0 5
67244: PPUSH
67245: LD_VAR 0 4
67249: PPUSH
67250: CALL_OW 74
67254: PPUSH
67255: CALL_OW 115
// end ; end ;
67259: GO 66839
67261: POP
67262: POP
// end ;
67263: LD_VAR 0 3
67267: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67268: LD_INT 0
67270: PPUSH
67271: PPUSH
67272: PPUSH
// if not unit or IsInUnit ( unit ) then
67273: LD_VAR 0 1
67277: NOT
67278: PUSH
67279: LD_VAR 0 1
67283: PPUSH
67284: CALL_OW 310
67288: OR
67289: IFFALSE 67293
// exit ;
67291: GO 67384
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67293: LD_ADDR_VAR 0 4
67297: PUSH
67298: LD_VAR 0 1
67302: PPUSH
67303: CALL_OW 250
67307: PPUSH
67308: LD_VAR 0 2
67312: PPUSH
67313: LD_INT 1
67315: PPUSH
67316: CALL_OW 272
67320: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67321: LD_ADDR_VAR 0 5
67325: PUSH
67326: LD_VAR 0 1
67330: PPUSH
67331: CALL_OW 251
67335: PPUSH
67336: LD_VAR 0 2
67340: PPUSH
67341: LD_INT 1
67343: PPUSH
67344: CALL_OW 273
67348: ST_TO_ADDR
// if ValidHex ( x , y ) then
67349: LD_VAR 0 4
67353: PPUSH
67354: LD_VAR 0 5
67358: PPUSH
67359: CALL_OW 488
67363: IFFALSE 67384
// ComTurnXY ( unit , x , y ) ;
67365: LD_VAR 0 1
67369: PPUSH
67370: LD_VAR 0 4
67374: PPUSH
67375: LD_VAR 0 5
67379: PPUSH
67380: CALL_OW 118
// end ;
67384: LD_VAR 0 3
67388: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67389: LD_INT 0
67391: PPUSH
67392: PPUSH
// result := false ;
67393: LD_ADDR_VAR 0 3
67397: PUSH
67398: LD_INT 0
67400: ST_TO_ADDR
// if not units then
67401: LD_VAR 0 2
67405: NOT
67406: IFFALSE 67410
// exit ;
67408: GO 67455
// for i in units do
67410: LD_ADDR_VAR 0 4
67414: PUSH
67415: LD_VAR 0 2
67419: PUSH
67420: FOR_IN
67421: IFFALSE 67453
// if See ( side , i ) then
67423: LD_VAR 0 1
67427: PPUSH
67428: LD_VAR 0 4
67432: PPUSH
67433: CALL_OW 292
67437: IFFALSE 67451
// begin result := true ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_INT 1
67446: ST_TO_ADDR
// exit ;
67447: POP
67448: POP
67449: GO 67455
// end ;
67451: GO 67420
67453: POP
67454: POP
// end ;
67455: LD_VAR 0 3
67459: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67460: LD_INT 0
67462: PPUSH
67463: PPUSH
67464: PPUSH
67465: PPUSH
// if not unit or not points then
67466: LD_VAR 0 1
67470: NOT
67471: PUSH
67472: LD_VAR 0 2
67476: NOT
67477: OR
67478: IFFALSE 67482
// exit ;
67480: GO 67572
// dist := 99999 ;
67482: LD_ADDR_VAR 0 5
67486: PUSH
67487: LD_INT 99999
67489: ST_TO_ADDR
// for i in points do
67490: LD_ADDR_VAR 0 4
67494: PUSH
67495: LD_VAR 0 2
67499: PUSH
67500: FOR_IN
67501: IFFALSE 67570
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67503: LD_ADDR_VAR 0 6
67507: PUSH
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_VAR 0 4
67517: PUSH
67518: LD_INT 1
67520: ARRAY
67521: PPUSH
67522: LD_VAR 0 4
67526: PUSH
67527: LD_INT 2
67529: ARRAY
67530: PPUSH
67531: CALL_OW 297
67535: ST_TO_ADDR
// if tmpDist < dist then
67536: LD_VAR 0 6
67540: PUSH
67541: LD_VAR 0 5
67545: LESS
67546: IFFALSE 67568
// begin result := i ;
67548: LD_ADDR_VAR 0 3
67552: PUSH
67553: LD_VAR 0 4
67557: ST_TO_ADDR
// dist := tmpDist ;
67558: LD_ADDR_VAR 0 5
67562: PUSH
67563: LD_VAR 0 6
67567: ST_TO_ADDR
// end ; end ;
67568: GO 67500
67570: POP
67571: POP
// end ;
67572: LD_VAR 0 3
67576: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67577: LD_INT 0
67579: PPUSH
// uc_side := side ;
67580: LD_ADDR_OWVAR 20
67584: PUSH
67585: LD_VAR 0 1
67589: ST_TO_ADDR
// uc_nation := 3 ;
67590: LD_ADDR_OWVAR 21
67594: PUSH
67595: LD_INT 3
67597: ST_TO_ADDR
// vc_chassis := 25 ;
67598: LD_ADDR_OWVAR 37
67602: PUSH
67603: LD_INT 25
67605: ST_TO_ADDR
// vc_engine := engine_siberite ;
67606: LD_ADDR_OWVAR 39
67610: PUSH
67611: LD_INT 3
67613: ST_TO_ADDR
// vc_control := control_computer ;
67614: LD_ADDR_OWVAR 38
67618: PUSH
67619: LD_INT 3
67621: ST_TO_ADDR
// vc_weapon := 59 ;
67622: LD_ADDR_OWVAR 40
67626: PUSH
67627: LD_INT 59
67629: ST_TO_ADDR
// result := CreateVehicle ;
67630: LD_ADDR_VAR 0 5
67634: PUSH
67635: CALL_OW 45
67639: ST_TO_ADDR
// SetDir ( result , d ) ;
67640: LD_VAR 0 5
67644: PPUSH
67645: LD_VAR 0 4
67649: PPUSH
67650: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67654: LD_VAR 0 5
67658: PPUSH
67659: LD_VAR 0 2
67663: PPUSH
67664: LD_VAR 0 3
67668: PPUSH
67669: LD_INT 0
67671: PPUSH
67672: CALL_OW 48
// end ;
67676: LD_VAR 0 5
67680: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67681: LD_INT 0
67683: PPUSH
67684: PPUSH
67685: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67686: LD_ADDR_VAR 0 2
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67709: LD_VAR 0 1
67713: NOT
67714: PUSH
67715: LD_VAR 0 1
67719: PPUSH
67720: CALL_OW 264
67724: PUSH
67725: LD_INT 12
67727: PUSH
67728: LD_INT 51
67730: PUSH
67731: LD_INT 32
67733: PUSH
67734: LD_INT 89
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: IN
67743: NOT
67744: OR
67745: IFFALSE 67749
// exit ;
67747: GO 67847
// for i := 1 to 3 do
67749: LD_ADDR_VAR 0 3
67753: PUSH
67754: DOUBLE
67755: LD_INT 1
67757: DEC
67758: ST_TO_ADDR
67759: LD_INT 3
67761: PUSH
67762: FOR_TO
67763: IFFALSE 67845
// begin tmp := GetCargo ( cargo , i ) ;
67765: LD_ADDR_VAR 0 4
67769: PUSH
67770: LD_VAR 0 1
67774: PPUSH
67775: LD_VAR 0 3
67779: PPUSH
67780: CALL_OW 289
67784: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: LD_VAR 0 4
67804: PPUSH
67805: CALL_OW 1
67809: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 2
67819: PPUSH
67820: LD_INT 4
67822: PPUSH
67823: LD_VAR 0 2
67827: PUSH
67828: LD_INT 4
67830: ARRAY
67831: PUSH
67832: LD_VAR 0 4
67836: PLUS
67837: PPUSH
67838: CALL_OW 1
67842: ST_TO_ADDR
// end ;
67843: GO 67762
67845: POP
67846: POP
// end ;
67847: LD_VAR 0 2
67851: RET
// export function Length ( array ) ; begin
67852: LD_INT 0
67854: PPUSH
// result := array + 0 ;
67855: LD_ADDR_VAR 0 2
67859: PUSH
67860: LD_VAR 0 1
67864: PUSH
67865: LD_INT 0
67867: PLUS
67868: ST_TO_ADDR
// end ;
67869: LD_VAR 0 2
67873: RET
// export function PrepareArray ( array ) ; begin
67874: LD_INT 0
67876: PPUSH
// result := array diff 0 ;
67877: LD_ADDR_VAR 0 2
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_INT 0
67889: DIFF
67890: ST_TO_ADDR
// if not result [ 1 ] then
67891: LD_VAR 0 2
67895: PUSH
67896: LD_INT 1
67898: ARRAY
67899: NOT
67900: IFFALSE 67920
// result := Delete ( result , 1 ) ;
67902: LD_ADDR_VAR 0 2
67906: PUSH
67907: LD_VAR 0 2
67911: PPUSH
67912: LD_INT 1
67914: PPUSH
67915: CALL_OW 3
67919: ST_TO_ADDR
// end ;
67920: LD_VAR 0 2
67924: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
// sibRocketRange := 25 ;
67931: LD_ADDR_VAR 0 6
67935: PUSH
67936: LD_INT 25
67938: ST_TO_ADDR
// result := false ;
67939: LD_ADDR_VAR 0 4
67943: PUSH
67944: LD_INT 0
67946: ST_TO_ADDR
// for i := 0 to 5 do
67947: LD_ADDR_VAR 0 5
67951: PUSH
67952: DOUBLE
67953: LD_INT 0
67955: DEC
67956: ST_TO_ADDR
67957: LD_INT 5
67959: PUSH
67960: FOR_TO
67961: IFFALSE 68028
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67963: LD_VAR 0 1
67967: PPUSH
67968: LD_VAR 0 5
67972: PPUSH
67973: LD_VAR 0 6
67977: PPUSH
67978: CALL_OW 272
67982: PPUSH
67983: LD_VAR 0 2
67987: PPUSH
67988: LD_VAR 0 5
67992: PPUSH
67993: LD_VAR 0 6
67997: PPUSH
67998: CALL_OW 273
68002: PPUSH
68003: LD_VAR 0 3
68007: PPUSH
68008: CALL_OW 309
68012: IFFALSE 68026
// begin result := true ;
68014: LD_ADDR_VAR 0 4
68018: PUSH
68019: LD_INT 1
68021: ST_TO_ADDR
// exit ;
68022: POP
68023: POP
68024: GO 68030
// end ;
68026: GO 67960
68028: POP
68029: POP
// end ;
68030: LD_VAR 0 4
68034: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68035: LD_INT 0
68037: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68038: LD_VAR 0 1
68042: PPUSH
68043: LD_VAR 0 2
68047: PPUSH
68048: LD_INT 0
68050: PPUSH
68051: LD_INT 0
68053: PPUSH
68054: LD_INT 1
68056: PPUSH
68057: LD_INT 0
68059: PPUSH
68060: CALL_OW 587
// end ; end_of_file
68064: LD_VAR 0 3
68068: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68069: LD_VAR 0 1
68073: PUSH
68074: LD_INT 200
68076: DOUBLE
68077: GREATEREQUAL
68078: IFFALSE 68086
68080: LD_INT 299
68082: DOUBLE
68083: LESSEQUAL
68084: IFTRUE 68088
68086: GO 68120
68088: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68089: LD_VAR 0 1
68093: PPUSH
68094: LD_VAR 0 2
68098: PPUSH
68099: LD_VAR 0 3
68103: PPUSH
68104: LD_VAR 0 4
68108: PPUSH
68109: LD_VAR 0 5
68113: PPUSH
68114: CALL 22754 0 5
68118: GO 68197
68120: LD_INT 300
68122: DOUBLE
68123: GREATEREQUAL
68124: IFFALSE 68132
68126: LD_INT 399
68128: DOUBLE
68129: LESSEQUAL
68130: IFTRUE 68134
68132: GO 68196
68134: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68135: LD_VAR 0 1
68139: PPUSH
68140: LD_VAR 0 2
68144: PPUSH
68145: LD_VAR 0 3
68149: PPUSH
68150: LD_VAR 0 4
68154: PPUSH
68155: LD_VAR 0 5
68159: PPUSH
68160: LD_VAR 0 6
68164: PPUSH
68165: LD_VAR 0 7
68169: PPUSH
68170: LD_VAR 0 8
68174: PPUSH
68175: LD_VAR 0 9
68179: PPUSH
68180: LD_VAR 0 10
68184: PPUSH
68185: LD_VAR 0 11
68189: PPUSH
68190: CALL 19087 0 11
68194: GO 68197
68196: POP
// end ;
68197: PPOPN 11
68199: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68200: LD_VAR 0 1
68204: PPUSH
68205: LD_VAR 0 2
68209: PPUSH
68210: LD_VAR 0 3
68214: PPUSH
68215: LD_VAR 0 4
68219: PPUSH
68220: LD_VAR 0 5
68224: PPUSH
68225: CALL 22490 0 5
// end ; end_of_file
68229: PPOPN 5
68231: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68232: LD_VAR 0 1
68236: PPUSH
68237: LD_VAR 0 2
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_VAR 0 4
68251: PPUSH
68252: LD_VAR 0 5
68256: PPUSH
68257: LD_VAR 0 6
68261: PPUSH
68262: CALL 6780 0 6
// end ;
68266: PPOPN 6
68268: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68269: LD_INT 0
68271: PPUSH
// begin if not units then
68272: LD_VAR 0 1
68276: NOT
68277: IFFALSE 68281
// exit ;
68279: GO 68281
// end ;
68281: PPOPN 7
68283: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68284: CALL 6751 0 0
// end ;
68288: PPOPN 1
68290: END
