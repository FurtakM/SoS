// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 25625 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 25625 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 25625 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 25625 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 25625 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 10
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5727
5680: GO 5682
5682: DISABLE
// begin bobby_saved := true ;
5683: LD_ADDR_EXP 12
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5691: LD_EXP 17
5695: PPUSH
5696: CALL_OW 256
5700: PPUSH
5701: LD_STRING 01_BobbyLifePoints_1
5703: PPUSH
5704: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5708: LD_EXP 17
5712: PPUSH
5713: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5717: LD_STRING Bobby
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 101
// end ;
5727: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5728: LD_EXP 18
5732: PPUSH
5733: LD_INT 10
5735: PPUSH
5736: CALL_OW 308
5740: IFFALSE 5789
5742: GO 5744
5744: DISABLE
// begin cyrus_saved := true ;
5745: LD_ADDR_EXP 13
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: CALL_OW 256
5762: PPUSH
5763: LD_STRING 01_CyrusLifePoints_1
5765: PPUSH
5766: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5770: LD_EXP 18
5774: PPUSH
5775: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5779: LD_STRING Cyrus
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 101
// end ;
5789: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5790: LD_EXP 16
5794: PPUSH
5795: LD_INT 10
5797: PPUSH
5798: CALL_OW 308
5802: IFFALSE 6410
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin if macmilan_use_radio then
5815: LD_EXP 6
5819: IFFALSE 5828
// SetAchievement ( ACH_RADIO ) ;
5821: LD_STRING ACH_RADIO
5823: PPUSH
5824: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5828: LD_EXP 13
5832: NOT
5833: PUSH
5834: LD_EXP 7
5838: AND
5839: PUSH
5840: LD_EXP 18
5844: PPUSH
5845: CALL_OW 302
5849: AND
5850: PUSH
5851: LD_EXP 12
5855: NOT
5856: PUSH
5857: LD_EXP 4
5861: AND
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 302
5872: AND
5873: OR
5874: IFFALSE 5915
// case Query ( Q2 ) of 1 :
5876: LD_STRING Q2
5878: PPUSH
5879: CALL_OW 97
5883: PUSH
5884: LD_INT 1
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5903
5892: POP
// wait_for_them := true ; 2 :
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
5901: GO 5915
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5914
5911: POP
// ; end ;
5912: GO 5915
5914: POP
// if wait_for_them then
5915: LD_VAR 0 3
5919: IFFALSE 6032
// repeat wait ( 0 0$01 ) ;
5921: LD_INT 35
5923: PPUSH
5924: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5928: LD_EXP 13
5932: PUSH
5933: LD_EXP 12
5937: AND
5938: PUSH
5939: LD_EXP 13
5943: PUSH
5944: LD_EXP 4
5948: NOT
5949: PUSH
5950: LD_EXP 17
5954: PPUSH
5955: CALL_OW 303
5959: OR
5960: PUSH
5961: LD_EXP 17
5965: PPUSH
5966: CALL_OW 301
5970: OR
5971: AND
5972: OR
5973: PUSH
5974: LD_EXP 12
5978: PUSH
5979: LD_EXP 7
5983: NOT
5984: PUSH
5985: LD_EXP 18
5989: PPUSH
5990: CALL_OW 303
5994: OR
5995: PUSH
5996: LD_EXP 18
6000: PPUSH
6001: CALL_OW 301
6005: OR
6006: AND
6007: OR
6008: PUSH
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 301
6018: PUSH
6019: LD_EXP 18
6023: PPUSH
6024: CALL_OW 301
6028: AND
6029: OR
6030: IFFALSE 5921
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6032: LD_EXP 16
6036: PPUSH
6037: CALL_OW 256
6041: PPUSH
6042: LD_STRING 01_JMMLifePoints_1
6044: PPUSH
6045: CALL_OW 39
// RemoveUnit ( JMM ) ;
6049: LD_EXP 16
6053: PPUSH
6054: CALL_OW 64
// to_reward := [ JMM ] ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_EXP 16
6067: PUSH
6068: EMPTY
6069: LIST
6070: ST_TO_ADDR
// if bobby_saved then
6071: LD_EXP 12
6075: IFFALSE 6093
// to_reward := to_reward ^ Bobby ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_EXP 17
6091: ADD
6092: ST_TO_ADDR
// if cyrus_saved then
6093: LD_EXP 13
6097: IFFALSE 6115
// to_reward := to_reward ^ Cyrus ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_EXP 18
6113: ADD
6114: ST_TO_ADDR
// m1 := true ;
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// m2 := bobby_saved ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_EXP 12
6132: ST_TO_ADDR
// m3 := cyrus_saved ;
6133: LD_ADDR_VAR 0 6
6137: PUSH
6138: LD_EXP 13
6142: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6143: LD_STRING JMM
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: CALL_OW 101
// if not bobby_in_squad then
6153: LD_EXP 4
6157: NOT
6158: IFFALSE 6171
// AddMedal ( Bobby , - 1 ) ;
6160: LD_STRING Bobby
6162: PPUSH
6163: LD_INT 1
6165: NEG
6166: PPUSH
6167: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6171: LD_EXP 12
6175: NOT
6176: PUSH
6177: LD_EXP 17
6181: PPUSH
6182: CALL_OW 303
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 301
6196: OR
6197: AND
6198: IFFALSE 6211
// AddMedal ( Bobby , - 2 ) ;
6200: LD_STRING Bobby
6202: PPUSH
6203: LD_INT 2
6205: NEG
6206: PPUSH
6207: CALL_OW 101
// if not cyrus_in_squad then
6211: LD_EXP 7
6215: NOT
6216: IFFALSE 6229
// AddMedal ( Cyrus , - 1 ) ;
6218: LD_STRING Cyrus
6220: PPUSH
6221: LD_INT 1
6223: NEG
6224: PPUSH
6225: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6229: LD_EXP 13
6233: NOT
6234: PUSH
6235: LD_EXP 18
6239: PPUSH
6240: CALL_OW 303
6244: PUSH
6245: LD_EXP 18
6249: PPUSH
6250: CALL_OW 301
6254: OR
6255: AND
6256: IFFALSE 6269
// AddMedal ( Cyrus , - 2 ) ;
6258: LD_STRING Cyrus
6260: PPUSH
6261: LD_INT 2
6263: NEG
6264: PPUSH
6265: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6269: LD_OWVAR 67
6273: PUSH
6274: LD_INT 3
6276: GREATEREQUAL
6277: PUSH
6278: LD_VAR 0 4
6282: AND
6283: PUSH
6284: LD_VAR 0 5
6288: AND
6289: PUSH
6290: LD_VAR 0 6
6294: AND
6295: IFFALSE 6307
// SetAchievementEX ( ACH_AMER , 1 ) ;
6297: LD_STRING ACH_AMER
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 564
// GiveMedals ( MAIN ) ;
6307: LD_STRING MAIN
6309: PPUSH
6310: CALL_OW 102
// RewardPeople ( to_reward ) ;
6314: LD_VAR 0 2
6318: PPUSH
6319: CALL_OW 43
// if bobby_saved then
6323: LD_EXP 12
6327: IFFALSE 6347
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_EXP 2
6338: PUSH
6339: LD_STRING Bobby
6341: STR
6342: PPUSH
6343: CALL_OW 38
// if cyrus_saved then
6347: LD_EXP 13
6351: IFFALSE 6371
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6353: LD_EXP 18
6357: PPUSH
6358: LD_EXP 2
6362: PUSH
6363: LD_STRING Cyrus
6365: STR
6366: PPUSH
6367: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6371: LD_EXP 16
6375: PPUSH
6376: LD_EXP 2
6380: PUSH
6381: LD_STRING JMM
6383: STR
6384: PPUSH
6385: CALL_OW 38
// if tick <= 3 3$00 then
6389: LD_OWVAR 1
6393: PUSH
6394: LD_INT 6300
6396: LESSEQUAL
6397: IFFALSE 6406
// SetAchievement ( ACH_ASPEED_1 ) ;
6399: LD_STRING ACH_ASPEED_1
6401: PPUSH
6402: CALL_OW 543
// YouWin ;
6406: CALL_OW 103
// end ; end_of_file
6410: PPOPN 6
6412: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6413: LD_VAR 0 1
6417: PUSH
6418: LD_EXP 16
6422: EQUAL
6423: IFFALSE 6432
// YouLost ( JMM ) ;
6425: LD_STRING JMM
6427: PPUSH
6428: CALL_OW 104
// end ;
6432: PPOPN 1
6434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6435: LD_VAR 0 1
6439: PPUSH
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL 20939 0 2
// end ;
6449: PPOPN 2
6451: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL 20817 0 1
// if un = JMM then
6461: LD_VAR 0 1
6465: PUSH
6466: LD_EXP 16
6470: EQUAL
6471: IFFALSE 6480
// YouLost ( JMM ) ;
6473: LD_STRING JMM
6475: PPUSH
6476: CALL_OW 104
// end ; end_of_file end_of_file
6480: PPOPN 1
6482: END
// every 0 0$1 do
6483: GO 6485
6485: DISABLE
// begin enable ;
6486: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6487: LD_STRING updateTimer(
6489: PUSH
6490: LD_OWVAR 1
6494: STR
6495: PUSH
6496: LD_STRING );
6498: STR
6499: PPUSH
6500: CALL_OW 559
// end ;
6504: END
// export function SOS_MapStart ( ) ; begin
6505: LD_INT 0
6507: PPUSH
// if streamModeActive then
6508: LD_EXP 27
6512: IFFALSE 6521
// DefineStreamItems ( true ) ;
6514: LD_INT 1
6516: PPUSH
6517: CALL 8171 0 1
// UpdateFactoryWaypoints ( ) ;
6521: CALL 21755 0 0
// end ;
6525: LD_VAR 0 1
6529: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6530: LD_INT 0
6532: PPUSH
// if p2 = 100 then
6533: LD_VAR 0 2
6537: PUSH
6538: LD_INT 100
6540: EQUAL
6541: IFFALSE 7544
// begin if not StreamModeActive then
6543: LD_EXP 27
6547: NOT
6548: IFFALSE 6558
// StreamModeActive := true ;
6550: LD_ADDR_EXP 27
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// if p3 = 0 then
6558: LD_VAR 0 3
6562: PUSH
6563: LD_INT 0
6565: EQUAL
6566: IFFALSE 6572
// InitStreamMode ;
6568: CALL 7707 0 0
// if p3 = 1 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 1
6579: EQUAL
6580: IFFALSE 6590
// sRocket := true ;
6582: LD_ADDR_EXP 32
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 2 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 2
6597: EQUAL
6598: IFFALSE 6608
// sSpeed := true ;
6600: LD_ADDR_EXP 31
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 3 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 3
6615: EQUAL
6616: IFFALSE 6626
// sEngine := true ;
6618: LD_ADDR_EXP 33
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 4 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 4
6633: EQUAL
6634: IFFALSE 6644
// sSpec := true ;
6636: LD_ADDR_EXP 30
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 5 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 5
6651: EQUAL
6652: IFFALSE 6662
// sLevel := true ;
6654: LD_ADDR_EXP 34
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 6 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 6
6669: EQUAL
6670: IFFALSE 6680
// sArmoury := true ;
6672: LD_ADDR_EXP 35
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 7 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 7
6687: EQUAL
6688: IFFALSE 6698
// sRadar := true ;
6690: LD_ADDR_EXP 36
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 8 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 8
6705: EQUAL
6706: IFFALSE 6716
// sBunker := true ;
6708: LD_ADDR_EXP 37
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 9 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 9
6723: EQUAL
6724: IFFALSE 6734
// sHack := true ;
6726: LD_ADDR_EXP 38
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 10 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 10
6741: EQUAL
6742: IFFALSE 6752
// sFire := true ;
6744: LD_ADDR_EXP 39
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 11 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 11
6759: EQUAL
6760: IFFALSE 6770
// sRefresh := true ;
6762: LD_ADDR_EXP 40
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 12 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 12
6777: EQUAL
6778: IFFALSE 6788
// sExp := true ;
6780: LD_ADDR_EXP 41
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 13 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 13
6795: EQUAL
6796: IFFALSE 6806
// sDepot := true ;
6798: LD_ADDR_EXP 42
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 14 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 14
6813: EQUAL
6814: IFFALSE 6824
// sFlag := true ;
6816: LD_ADDR_EXP 43
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 15 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 15
6831: EQUAL
6832: IFFALSE 6842
// sKamikadze := true ;
6834: LD_ADDR_EXP 51
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 16 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 16
6849: EQUAL
6850: IFFALSE 6860
// sTroll := true ;
6852: LD_ADDR_EXP 52
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 17 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 17
6867: EQUAL
6868: IFFALSE 6878
// sSlow := true ;
6870: LD_ADDR_EXP 53
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 18 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 18
6885: EQUAL
6886: IFFALSE 6896
// sLack := true ;
6888: LD_ADDR_EXP 54
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 19 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 19
6903: EQUAL
6904: IFFALSE 6914
// sTank := true ;
6906: LD_ADDR_EXP 56
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 20 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 20
6921: EQUAL
6922: IFFALSE 6932
// sRemote := true ;
6924: LD_ADDR_EXP 57
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 21 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 21
6939: EQUAL
6940: IFFALSE 6950
// sPowell := true ;
6942: LD_ADDR_EXP 58
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 22 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 22
6957: EQUAL
6958: IFFALSE 6968
// sTeleport := true ;
6960: LD_ADDR_EXP 61
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 23 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 23
6975: EQUAL
6976: IFFALSE 6986
// sOilTower := true ;
6978: LD_ADDR_EXP 63
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 24 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 24
6993: EQUAL
6994: IFFALSE 7004
// sShovel := true ;
6996: LD_ADDR_EXP 64
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 25 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 25
7011: EQUAL
7012: IFFALSE 7022
// sSheik := true ;
7014: LD_ADDR_EXP 65
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 26 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 26
7029: EQUAL
7030: IFFALSE 7040
// sEarthquake := true ;
7032: LD_ADDR_EXP 67
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 27 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 27
7047: EQUAL
7048: IFFALSE 7058
// sAI := true ;
7050: LD_ADDR_EXP 68
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 28 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 28
7065: EQUAL
7066: IFFALSE 7076
// sCargo := true ;
7068: LD_ADDR_EXP 71
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 29 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 29
7083: EQUAL
7084: IFFALSE 7094
// sDLaser := true ;
7086: LD_ADDR_EXP 72
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 30 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 30
7101: EQUAL
7102: IFFALSE 7112
// sExchange := true ;
7104: LD_ADDR_EXP 73
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 31 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 31
7119: EQUAL
7120: IFFALSE 7130
// sFac := true ;
7122: LD_ADDR_EXP 74
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 32 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 32
7137: EQUAL
7138: IFFALSE 7148
// sPower := true ;
7140: LD_ADDR_EXP 75
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 33 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 33
7155: EQUAL
7156: IFFALSE 7166
// sRandom := true ;
7158: LD_ADDR_EXP 76
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 34 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 34
7173: EQUAL
7174: IFFALSE 7184
// sShield := true ;
7176: LD_ADDR_EXP 77
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 35 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 35
7191: EQUAL
7192: IFFALSE 7202
// sTime := true ;
7194: LD_ADDR_EXP 78
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 36 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 36
7209: EQUAL
7210: IFFALSE 7220
// sTools := true ;
7212: LD_ADDR_EXP 79
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 101 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 101
7227: EQUAL
7228: IFFALSE 7238
// sSold := true ;
7230: LD_ADDR_EXP 44
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 102 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 102
7245: EQUAL
7246: IFFALSE 7256
// sDiff := true ;
7248: LD_ADDR_EXP 45
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 103 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 103
7263: EQUAL
7264: IFFALSE 7274
// sFog := true ;
7266: LD_ADDR_EXP 48
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 104 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 104
7281: EQUAL
7282: IFFALSE 7292
// sReset := true ;
7284: LD_ADDR_EXP 49
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 105 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 105
7299: EQUAL
7300: IFFALSE 7310
// sSun := true ;
7302: LD_ADDR_EXP 50
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 106 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 106
7317: EQUAL
7318: IFFALSE 7328
// sTiger := true ;
7320: LD_ADDR_EXP 46
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 107 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 107
7335: EQUAL
7336: IFFALSE 7346
// sBomb := true ;
7338: LD_ADDR_EXP 47
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 108 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 108
7353: EQUAL
7354: IFFALSE 7364
// sWound := true ;
7356: LD_ADDR_EXP 55
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// if p3 = 109 then
7364: LD_VAR 0 3
7368: PUSH
7369: LD_INT 109
7371: EQUAL
7372: IFFALSE 7382
// sBetray := true ;
7374: LD_ADDR_EXP 59
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// if p3 = 110 then
7382: LD_VAR 0 3
7386: PUSH
7387: LD_INT 110
7389: EQUAL
7390: IFFALSE 7400
// sContamin := true ;
7392: LD_ADDR_EXP 60
7396: PUSH
7397: LD_INT 1
7399: ST_TO_ADDR
// if p3 = 111 then
7400: LD_VAR 0 3
7404: PUSH
7405: LD_INT 111
7407: EQUAL
7408: IFFALSE 7418
// sOil := true ;
7410: LD_ADDR_EXP 62
7414: PUSH
7415: LD_INT 1
7417: ST_TO_ADDR
// if p3 = 112 then
7418: LD_VAR 0 3
7422: PUSH
7423: LD_INT 112
7425: EQUAL
7426: IFFALSE 7436
// sStu := true ;
7428: LD_ADDR_EXP 66
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if p3 = 113 then
7436: LD_VAR 0 3
7440: PUSH
7441: LD_INT 113
7443: EQUAL
7444: IFFALSE 7454
// sBazooka := true ;
7446: LD_ADDR_EXP 69
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// if p3 = 114 then
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 114
7461: EQUAL
7462: IFFALSE 7472
// sMortar := true ;
7464: LD_ADDR_EXP 70
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
// if p3 = 115 then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 115
7479: EQUAL
7480: IFFALSE 7490
// sRanger := true ;
7482: LD_ADDR_EXP 80
7486: PUSH
7487: LD_INT 1
7489: ST_TO_ADDR
// if p3 = 116 then
7490: LD_VAR 0 3
7494: PUSH
7495: LD_INT 116
7497: EQUAL
7498: IFFALSE 7508
// sComputer := true ;
7500: LD_ADDR_EXP 81
7504: PUSH
7505: LD_INT 1
7507: ST_TO_ADDR
// if p3 = 117 then
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 117
7515: EQUAL
7516: IFFALSE 7526
// s30 := true ;
7518: LD_ADDR_EXP 82
7522: PUSH
7523: LD_INT 1
7525: ST_TO_ADDR
// if p3 = 118 then
7526: LD_VAR 0 3
7530: PUSH
7531: LD_INT 118
7533: EQUAL
7534: IFFALSE 7544
// s60 := true ;
7536: LD_ADDR_EXP 83
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// end ; if p2 = 101 then
7544: LD_VAR 0 2
7548: PUSH
7549: LD_INT 101
7551: EQUAL
7552: IFFALSE 7680
// begin case p3 of 1 :
7554: LD_VAR 0 3
7558: PUSH
7559: LD_INT 1
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7574
7567: POP
// hHackUnlimitedResources ; 2 :
7568: CALL 19778 0 0
7572: GO 7680
7574: LD_INT 2
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7589
7582: POP
// hHackSetLevel10 ; 3 :
7583: CALL 19911 0 0
7587: GO 7680
7589: LD_INT 3
7591: DOUBLE
7592: EQUAL
7593: IFTRUE 7597
7595: GO 7604
7597: POP
// hHackSetLevel10YourUnits ; 4 :
7598: CALL 19996 0 0
7602: GO 7680
7604: LD_INT 4
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7619
7612: POP
// hHackInvincible ; 5 :
7613: CALL 20444 0 0
7617: GO 7680
7619: LD_INT 5
7621: DOUBLE
7622: EQUAL
7623: IFTRUE 7627
7625: GO 7634
7627: POP
// hHackInvisible ; 6 :
7628: CALL 20555 0 0
7632: GO 7680
7634: LD_INT 6
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7649
7642: POP
// hHackChangeYourSide ; 7 :
7643: CALL 20612 0 0
7647: GO 7680
7649: LD_INT 7
7651: DOUBLE
7652: EQUAL
7653: IFTRUE 7657
7655: GO 7664
7657: POP
// hHackChangeUnitSide ; 8 :
7658: CALL 20654 0 0
7662: GO 7680
7664: LD_INT 8
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7679
7672: POP
// hHackFog ; end ;
7673: CALL 20755 0 0
7677: GO 7680
7679: POP
// end ; end ;
7680: LD_VAR 0 7
7684: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7685: GO 7687
7687: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7688: LD_STRING initStreamRollete();
7690: PPUSH
7691: CALL_OW 559
// InitStreamMode ;
7695: CALL 7707 0 0
// DefineStreamItems ( false ) ;
7699: LD_INT 0
7701: PPUSH
7702: CALL 8171 0 1
// end ;
7706: END
// function InitStreamMode ; begin
7707: LD_INT 0
7709: PPUSH
// streamModeActive := false ;
7710: LD_ADDR_EXP 27
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// normalCounter := 36 ;
7718: LD_ADDR_EXP 28
7722: PUSH
7723: LD_INT 36
7725: ST_TO_ADDR
// hardcoreCounter := 18 ;
7726: LD_ADDR_EXP 29
7730: PUSH
7731: LD_INT 18
7733: ST_TO_ADDR
// sRocket := false ;
7734: LD_ADDR_EXP 32
7738: PUSH
7739: LD_INT 0
7741: ST_TO_ADDR
// sSpeed := false ;
7742: LD_ADDR_EXP 31
7746: PUSH
7747: LD_INT 0
7749: ST_TO_ADDR
// sEngine := false ;
7750: LD_ADDR_EXP 33
7754: PUSH
7755: LD_INT 0
7757: ST_TO_ADDR
// sSpec := false ;
7758: LD_ADDR_EXP 30
7762: PUSH
7763: LD_INT 0
7765: ST_TO_ADDR
// sLevel := false ;
7766: LD_ADDR_EXP 34
7770: PUSH
7771: LD_INT 0
7773: ST_TO_ADDR
// sArmoury := false ;
7774: LD_ADDR_EXP 35
7778: PUSH
7779: LD_INT 0
7781: ST_TO_ADDR
// sRadar := false ;
7782: LD_ADDR_EXP 36
7786: PUSH
7787: LD_INT 0
7789: ST_TO_ADDR
// sBunker := false ;
7790: LD_ADDR_EXP 37
7794: PUSH
7795: LD_INT 0
7797: ST_TO_ADDR
// sHack := false ;
7798: LD_ADDR_EXP 38
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// sFire := false ;
7806: LD_ADDR_EXP 39
7810: PUSH
7811: LD_INT 0
7813: ST_TO_ADDR
// sRefresh := false ;
7814: LD_ADDR_EXP 40
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// sExp := false ;
7822: LD_ADDR_EXP 41
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// sDepot := false ;
7830: LD_ADDR_EXP 42
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// sFlag := false ;
7838: LD_ADDR_EXP 43
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// sKamikadze := false ;
7846: LD_ADDR_EXP 51
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// sTroll := false ;
7854: LD_ADDR_EXP 52
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// sSlow := false ;
7862: LD_ADDR_EXP 53
7866: PUSH
7867: LD_INT 0
7869: ST_TO_ADDR
// sLack := false ;
7870: LD_ADDR_EXP 54
7874: PUSH
7875: LD_INT 0
7877: ST_TO_ADDR
// sTank := false ;
7878: LD_ADDR_EXP 56
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// sRemote := false ;
7886: LD_ADDR_EXP 57
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// sPowell := false ;
7894: LD_ADDR_EXP 58
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// sTeleport := false ;
7902: LD_ADDR_EXP 61
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// sOilTower := false ;
7910: LD_ADDR_EXP 63
7914: PUSH
7915: LD_INT 0
7917: ST_TO_ADDR
// sShovel := false ;
7918: LD_ADDR_EXP 64
7922: PUSH
7923: LD_INT 0
7925: ST_TO_ADDR
// sSheik := false ;
7926: LD_ADDR_EXP 65
7930: PUSH
7931: LD_INT 0
7933: ST_TO_ADDR
// sEarthquake := false ;
7934: LD_ADDR_EXP 67
7938: PUSH
7939: LD_INT 0
7941: ST_TO_ADDR
// sAI := false ;
7942: LD_ADDR_EXP 68
7946: PUSH
7947: LD_INT 0
7949: ST_TO_ADDR
// sCargo := false ;
7950: LD_ADDR_EXP 71
7954: PUSH
7955: LD_INT 0
7957: ST_TO_ADDR
// sDLaser := false ;
7958: LD_ADDR_EXP 72
7962: PUSH
7963: LD_INT 0
7965: ST_TO_ADDR
// sExchange := false ;
7966: LD_ADDR_EXP 73
7970: PUSH
7971: LD_INT 0
7973: ST_TO_ADDR
// sFac := false ;
7974: LD_ADDR_EXP 74
7978: PUSH
7979: LD_INT 0
7981: ST_TO_ADDR
// sPower := false ;
7982: LD_ADDR_EXP 75
7986: PUSH
7987: LD_INT 0
7989: ST_TO_ADDR
// sRandom := false ;
7990: LD_ADDR_EXP 76
7994: PUSH
7995: LD_INT 0
7997: ST_TO_ADDR
// sShield := false ;
7998: LD_ADDR_EXP 77
8002: PUSH
8003: LD_INT 0
8005: ST_TO_ADDR
// sTime := false ;
8006: LD_ADDR_EXP 78
8010: PUSH
8011: LD_INT 0
8013: ST_TO_ADDR
// sTools := false ;
8014: LD_ADDR_EXP 79
8018: PUSH
8019: LD_INT 0
8021: ST_TO_ADDR
// sSold := false ;
8022: LD_ADDR_EXP 44
8026: PUSH
8027: LD_INT 0
8029: ST_TO_ADDR
// sDiff := false ;
8030: LD_ADDR_EXP 45
8034: PUSH
8035: LD_INT 0
8037: ST_TO_ADDR
// sFog := false ;
8038: LD_ADDR_EXP 48
8042: PUSH
8043: LD_INT 0
8045: ST_TO_ADDR
// sReset := false ;
8046: LD_ADDR_EXP 49
8050: PUSH
8051: LD_INT 0
8053: ST_TO_ADDR
// sSun := false ;
8054: LD_ADDR_EXP 50
8058: PUSH
8059: LD_INT 0
8061: ST_TO_ADDR
// sTiger := false ;
8062: LD_ADDR_EXP 46
8066: PUSH
8067: LD_INT 0
8069: ST_TO_ADDR
// sBomb := false ;
8070: LD_ADDR_EXP 47
8074: PUSH
8075: LD_INT 0
8077: ST_TO_ADDR
// sWound := false ;
8078: LD_ADDR_EXP 55
8082: PUSH
8083: LD_INT 0
8085: ST_TO_ADDR
// sBetray := false ;
8086: LD_ADDR_EXP 59
8090: PUSH
8091: LD_INT 0
8093: ST_TO_ADDR
// sContamin := false ;
8094: LD_ADDR_EXP 60
8098: PUSH
8099: LD_INT 0
8101: ST_TO_ADDR
// sOil := false ;
8102: LD_ADDR_EXP 62
8106: PUSH
8107: LD_INT 0
8109: ST_TO_ADDR
// sStu := false ;
8110: LD_ADDR_EXP 66
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// sBazooka := false ;
8118: LD_ADDR_EXP 69
8122: PUSH
8123: LD_INT 0
8125: ST_TO_ADDR
// sMortar := false ;
8126: LD_ADDR_EXP 70
8130: PUSH
8131: LD_INT 0
8133: ST_TO_ADDR
// sRanger := false ;
8134: LD_ADDR_EXP 80
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// sComputer := false ;
8142: LD_ADDR_EXP 81
8146: PUSH
8147: LD_INT 0
8149: ST_TO_ADDR
// s30 := false ;
8150: LD_ADDR_EXP 82
8154: PUSH
8155: LD_INT 0
8157: ST_TO_ADDR
// s60 := false ;
8158: LD_ADDR_EXP 83
8162: PUSH
8163: LD_INT 0
8165: ST_TO_ADDR
// end ;
8166: LD_VAR 0 1
8170: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
// result := [ ] ;
8180: LD_ADDR_VAR 0 2
8184: PUSH
8185: EMPTY
8186: ST_TO_ADDR
// if campaign_id = 1 then
8187: LD_OWVAR 69
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: IFFALSE 11361
// begin case mission_number of 1 :
8197: LD_OWVAR 70
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8286
8210: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 11
8224: PUSH
8225: LD_INT 12
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 16
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_INT 23
8239: PUSH
8240: LD_INT 26
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 101
8256: PUSH
8257: LD_INT 102
8259: PUSH
8260: LD_INT 106
8262: PUSH
8263: LD_INT 116
8265: PUSH
8266: LD_INT 117
8268: PUSH
8269: LD_INT 118
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: ST_TO_ADDR
8284: GO 11359
8286: LD_INT 2
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8378
8294: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8295: LD_ADDR_VAR 0 2
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 11
8308: PUSH
8309: LD_INT 12
8311: PUSH
8312: LD_INT 15
8314: PUSH
8315: LD_INT 16
8317: PUSH
8318: LD_INT 22
8320: PUSH
8321: LD_INT 23
8323: PUSH
8324: LD_INT 26
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 101
8340: PUSH
8341: LD_INT 102
8343: PUSH
8344: LD_INT 105
8346: PUSH
8347: LD_INT 106
8349: PUSH
8350: LD_INT 108
8352: PUSH
8353: LD_INT 116
8355: PUSH
8356: LD_INT 117
8358: PUSH
8359: LD_INT 118
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 11359
8378: LD_INT 3
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8474
8386: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: LD_INT 4
8397: PUSH
8398: LD_INT 5
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 22
8415: PUSH
8416: LD_INT 26
8418: PUSH
8419: LD_INT 36
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 101
8436: PUSH
8437: LD_INT 102
8439: PUSH
8440: LD_INT 105
8442: PUSH
8443: LD_INT 106
8445: PUSH
8446: LD_INT 108
8448: PUSH
8449: LD_INT 116
8451: PUSH
8452: LD_INT 117
8454: PUSH
8455: LD_INT 118
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: ST_TO_ADDR
8472: GO 11359
8474: LD_INT 4
8476: DOUBLE
8477: EQUAL
8478: IFTRUE 8482
8480: GO 8578
8482: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8483: LD_ADDR_VAR 0 2
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: LD_INT 4
8493: PUSH
8494: LD_INT 5
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: LD_INT 11
8502: PUSH
8503: LD_INT 12
8505: PUSH
8506: LD_INT 15
8508: PUSH
8509: LD_INT 16
8511: PUSH
8512: LD_INT 22
8514: PUSH
8515: LD_INT 23
8517: PUSH
8518: LD_INT 26
8520: PUSH
8521: LD_INT 36
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 101
8540: PUSH
8541: LD_INT 102
8543: PUSH
8544: LD_INT 105
8546: PUSH
8547: LD_INT 106
8549: PUSH
8550: LD_INT 108
8552: PUSH
8553: LD_INT 116
8555: PUSH
8556: LD_INT 117
8558: PUSH
8559: LD_INT 118
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: ST_TO_ADDR
8576: GO 11359
8578: LD_INT 5
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8698
8586: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8587: LD_ADDR_VAR 0 2
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 4
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: LD_INT 6
8603: PUSH
8604: LD_INT 8
8606: PUSH
8607: LD_INT 11
8609: PUSH
8610: LD_INT 12
8612: PUSH
8613: LD_INT 15
8615: PUSH
8616: LD_INT 16
8618: PUSH
8619: LD_INT 22
8621: PUSH
8622: LD_INT 23
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 26
8630: PUSH
8631: LD_INT 36
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 101
8652: PUSH
8653: LD_INT 102
8655: PUSH
8656: LD_INT 105
8658: PUSH
8659: LD_INT 106
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 109
8667: PUSH
8668: LD_INT 112
8670: PUSH
8671: LD_INT 116
8673: PUSH
8674: LD_INT 117
8676: PUSH
8677: LD_INT 118
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: ST_TO_ADDR
8696: GO 11359
8698: LD_INT 6
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8838
8706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8707: LD_ADDR_VAR 0 2
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: LD_INT 4
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: LD_INT 11
8729: PUSH
8730: LD_INT 12
8732: PUSH
8733: LD_INT 15
8735: PUSH
8736: LD_INT 16
8738: PUSH
8739: LD_INT 20
8741: PUSH
8742: LD_INT 21
8744: PUSH
8745: LD_INT 22
8747: PUSH
8748: LD_INT 23
8750: PUSH
8751: LD_INT 25
8753: PUSH
8754: LD_INT 26
8756: PUSH
8757: LD_INT 30
8759: PUSH
8760: LD_INT 31
8762: PUSH
8763: LD_INT 32
8765: PUSH
8766: LD_INT 36
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 101
8792: PUSH
8793: LD_INT 102
8795: PUSH
8796: LD_INT 105
8798: PUSH
8799: LD_INT 106
8801: PUSH
8802: LD_INT 108
8804: PUSH
8805: LD_INT 109
8807: PUSH
8808: LD_INT 112
8810: PUSH
8811: LD_INT 116
8813: PUSH
8814: LD_INT 117
8816: PUSH
8817: LD_INT 118
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 11359
8838: LD_INT 7
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 8958
8846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 5
8860: PUSH
8861: LD_INT 7
8863: PUSH
8864: LD_INT 11
8866: PUSH
8867: LD_INT 12
8869: PUSH
8870: LD_INT 15
8872: PUSH
8873: LD_INT 16
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 26
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 101
8912: PUSH
8913: LD_INT 102
8915: PUSH
8916: LD_INT 103
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 108
8927: PUSH
8928: LD_INT 112
8930: PUSH
8931: LD_INT 116
8933: PUSH
8934: LD_INT 117
8936: PUSH
8937: LD_INT 118
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 11359
8958: LD_INT 8
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9106
8966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8967: LD_ADDR_VAR 0 2
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 4
8977: PUSH
8978: LD_INT 5
8980: PUSH
8981: LD_INT 6
8983: PUSH
8984: LD_INT 7
8986: PUSH
8987: LD_INT 8
8989: PUSH
8990: LD_INT 11
8992: PUSH
8993: LD_INT 12
8995: PUSH
8996: LD_INT 15
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: LD_INT 20
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 23
9013: PUSH
9014: LD_INT 25
9016: PUSH
9017: LD_INT 26
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 31
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: LD_INT 36
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 101
9056: PUSH
9057: LD_INT 102
9059: PUSH
9060: LD_INT 103
9062: PUSH
9063: LD_INT 105
9065: PUSH
9066: LD_INT 106
9068: PUSH
9069: LD_INT 108
9071: PUSH
9072: LD_INT 109
9074: PUSH
9075: LD_INT 112
9077: PUSH
9078: LD_INT 116
9080: PUSH
9081: LD_INT 117
9083: PUSH
9084: LD_INT 118
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: ST_TO_ADDR
9104: GO 11359
9106: LD_INT 9
9108: DOUBLE
9109: EQUAL
9110: IFTRUE 9114
9112: GO 9262
9114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9115: LD_ADDR_VAR 0 2
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 4
9125: PUSH
9126: LD_INT 5
9128: PUSH
9129: LD_INT 6
9131: PUSH
9132: LD_INT 7
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: LD_INT 11
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 15
9146: PUSH
9147: LD_INT 16
9149: PUSH
9150: LD_INT 20
9152: PUSH
9153: LD_INT 21
9155: PUSH
9156: LD_INT 22
9158: PUSH
9159: LD_INT 23
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 28
9170: PUSH
9171: LD_INT 30
9173: PUSH
9174: LD_INT 31
9176: PUSH
9177: LD_INT 32
9179: PUSH
9180: LD_INT 36
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 101
9208: PUSH
9209: LD_INT 102
9211: PUSH
9212: LD_INT 103
9214: PUSH
9215: LD_INT 105
9217: PUSH
9218: LD_INT 106
9220: PUSH
9221: LD_INT 108
9223: PUSH
9224: LD_INT 109
9226: PUSH
9227: LD_INT 112
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: LD_INT 116
9235: PUSH
9236: LD_INT 117
9238: PUSH
9239: LD_INT 118
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: ST_TO_ADDR
9260: GO 11359
9262: LD_INT 10
9264: DOUBLE
9265: EQUAL
9266: IFTRUE 9270
9268: GO 9466
9270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 4
9281: PUSH
9282: LD_INT 5
9284: PUSH
9285: LD_INT 6
9287: PUSH
9288: LD_INT 7
9290: PUSH
9291: LD_INT 8
9293: PUSH
9294: LD_INT 9
9296: PUSH
9297: LD_INT 10
9299: PUSH
9300: LD_INT 11
9302: PUSH
9303: LD_INT 12
9305: PUSH
9306: LD_INT 13
9308: PUSH
9309: LD_INT 14
9311: PUSH
9312: LD_INT 15
9314: PUSH
9315: LD_INT 16
9317: PUSH
9318: LD_INT 17
9320: PUSH
9321: LD_INT 18
9323: PUSH
9324: LD_INT 19
9326: PUSH
9327: LD_INT 20
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 23
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 25
9344: PUSH
9345: LD_INT 26
9347: PUSH
9348: LD_INT 28
9350: PUSH
9351: LD_INT 30
9353: PUSH
9354: LD_INT 31
9356: PUSH
9357: LD_INT 32
9359: PUSH
9360: LD_INT 36
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 101
9396: PUSH
9397: LD_INT 102
9399: PUSH
9400: LD_INT 103
9402: PUSH
9403: LD_INT 104
9405: PUSH
9406: LD_INT 105
9408: PUSH
9409: LD_INT 106
9411: PUSH
9412: LD_INT 107
9414: PUSH
9415: LD_INT 108
9417: PUSH
9418: LD_INT 109
9420: PUSH
9421: LD_INT 110
9423: PUSH
9424: LD_INT 111
9426: PUSH
9427: LD_INT 112
9429: PUSH
9430: LD_INT 114
9432: PUSH
9433: LD_INT 116
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: LD_INT 118
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: ST_TO_ADDR
9464: GO 11359
9466: LD_INT 11
9468: DOUBLE
9469: EQUAL
9470: IFTRUE 9474
9472: GO 9678
9474: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: LD_INT 4
9488: PUSH
9489: LD_INT 5
9491: PUSH
9492: LD_INT 6
9494: PUSH
9495: LD_INT 7
9497: PUSH
9498: LD_INT 8
9500: PUSH
9501: LD_INT 9
9503: PUSH
9504: LD_INT 10
9506: PUSH
9507: LD_INT 11
9509: PUSH
9510: LD_INT 12
9512: PUSH
9513: LD_INT 13
9515: PUSH
9516: LD_INT 14
9518: PUSH
9519: LD_INT 15
9521: PUSH
9522: LD_INT 16
9524: PUSH
9525: LD_INT 17
9527: PUSH
9528: LD_INT 18
9530: PUSH
9531: LD_INT 19
9533: PUSH
9534: LD_INT 20
9536: PUSH
9537: LD_INT 21
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_INT 23
9545: PUSH
9546: LD_INT 24
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 26
9554: PUSH
9555: LD_INT 28
9557: PUSH
9558: LD_INT 30
9560: PUSH
9561: LD_INT 31
9563: PUSH
9564: LD_INT 32
9566: PUSH
9567: LD_INT 34
9569: PUSH
9570: LD_INT 36
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 101
9608: PUSH
9609: LD_INT 102
9611: PUSH
9612: LD_INT 103
9614: PUSH
9615: LD_INT 104
9617: PUSH
9618: LD_INT 105
9620: PUSH
9621: LD_INT 106
9623: PUSH
9624: LD_INT 107
9626: PUSH
9627: LD_INT 108
9629: PUSH
9630: LD_INT 109
9632: PUSH
9633: LD_INT 110
9635: PUSH
9636: LD_INT 111
9638: PUSH
9639: LD_INT 112
9641: PUSH
9642: LD_INT 114
9644: PUSH
9645: LD_INT 116
9647: PUSH
9648: LD_INT 117
9650: PUSH
9651: LD_INT 118
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: ST_TO_ADDR
9676: GO 11359
9678: LD_INT 12
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9906
9686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 1
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: LD_INT 6
9709: PUSH
9710: LD_INT 7
9712: PUSH
9713: LD_INT 8
9715: PUSH
9716: LD_INT 9
9718: PUSH
9719: LD_INT 10
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 13
9730: PUSH
9731: LD_INT 14
9733: PUSH
9734: LD_INT 15
9736: PUSH
9737: LD_INT 16
9739: PUSH
9740: LD_INT 17
9742: PUSH
9743: LD_INT 18
9745: PUSH
9746: LD_INT 19
9748: PUSH
9749: LD_INT 20
9751: PUSH
9752: LD_INT 21
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 23
9760: PUSH
9761: LD_INT 24
9763: PUSH
9764: LD_INT 25
9766: PUSH
9767: LD_INT 26
9769: PUSH
9770: LD_INT 27
9772: PUSH
9773: LD_INT 28
9775: PUSH
9776: LD_INT 30
9778: PUSH
9779: LD_INT 31
9781: PUSH
9782: LD_INT 32
9784: PUSH
9785: LD_INT 33
9787: PUSH
9788: LD_INT 34
9790: PUSH
9791: LD_INT 36
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 101
9832: PUSH
9833: LD_INT 102
9835: PUSH
9836: LD_INT 103
9838: PUSH
9839: LD_INT 104
9841: PUSH
9842: LD_INT 105
9844: PUSH
9845: LD_INT 106
9847: PUSH
9848: LD_INT 107
9850: PUSH
9851: LD_INT 108
9853: PUSH
9854: LD_INT 109
9856: PUSH
9857: LD_INT 110
9859: PUSH
9860: LD_INT 111
9862: PUSH
9863: LD_INT 112
9865: PUSH
9866: LD_INT 113
9868: PUSH
9869: LD_INT 114
9871: PUSH
9872: LD_INT 116
9874: PUSH
9875: LD_INT 117
9877: PUSH
9878: LD_INT 118
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
9904: GO 11359
9906: LD_INT 13
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 10122
9914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 8
9937: PUSH
9938: LD_INT 9
9940: PUSH
9941: LD_INT 10
9943: PUSH
9944: LD_INT 11
9946: PUSH
9947: LD_INT 12
9949: PUSH
9950: LD_INT 14
9952: PUSH
9953: LD_INT 15
9955: PUSH
9956: LD_INT 16
9958: PUSH
9959: LD_INT 17
9961: PUSH
9962: LD_INT 18
9964: PUSH
9965: LD_INT 19
9967: PUSH
9968: LD_INT 20
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 22
9976: PUSH
9977: LD_INT 23
9979: PUSH
9980: LD_INT 24
9982: PUSH
9983: LD_INT 25
9985: PUSH
9986: LD_INT 26
9988: PUSH
9989: LD_INT 27
9991: PUSH
9992: LD_INT 28
9994: PUSH
9995: LD_INT 30
9997: PUSH
9998: LD_INT 31
10000: PUSH
10001: LD_INT 32
10003: PUSH
10004: LD_INT 33
10006: PUSH
10007: LD_INT 34
10009: PUSH
10010: LD_INT 36
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 101
10048: PUSH
10049: LD_INT 102
10051: PUSH
10052: LD_INT 103
10054: PUSH
10055: LD_INT 104
10057: PUSH
10058: LD_INT 105
10060: PUSH
10061: LD_INT 106
10063: PUSH
10064: LD_INT 107
10066: PUSH
10067: LD_INT 108
10069: PUSH
10070: LD_INT 109
10072: PUSH
10073: LD_INT 110
10075: PUSH
10076: LD_INT 111
10078: PUSH
10079: LD_INT 112
10081: PUSH
10082: LD_INT 113
10084: PUSH
10085: LD_INT 114
10087: PUSH
10088: LD_INT 116
10090: PUSH
10091: LD_INT 117
10093: PUSH
10094: LD_INT 118
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 11359
10122: LD_INT 14
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10354
10130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: LD_INT 2
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: LD_INT 4
10147: PUSH
10148: LD_INT 5
10150: PUSH
10151: LD_INT 6
10153: PUSH
10154: LD_INT 7
10156: PUSH
10157: LD_INT 8
10159: PUSH
10160: LD_INT 9
10162: PUSH
10163: LD_INT 10
10165: PUSH
10166: LD_INT 11
10168: PUSH
10169: LD_INT 12
10171: PUSH
10172: LD_INT 13
10174: PUSH
10175: LD_INT 14
10177: PUSH
10178: LD_INT 15
10180: PUSH
10181: LD_INT 16
10183: PUSH
10184: LD_INT 17
10186: PUSH
10187: LD_INT 18
10189: PUSH
10190: LD_INT 19
10192: PUSH
10193: LD_INT 20
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_INT 23
10204: PUSH
10205: LD_INT 24
10207: PUSH
10208: LD_INT 25
10210: PUSH
10211: LD_INT 26
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: LD_INT 29
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 31
10228: PUSH
10229: LD_INT 32
10231: PUSH
10232: LD_INT 33
10234: PUSH
10235: LD_INT 34
10237: PUSH
10238: LD_INT 36
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 101
10280: PUSH
10281: LD_INT 102
10283: PUSH
10284: LD_INT 103
10286: PUSH
10287: LD_INT 104
10289: PUSH
10290: LD_INT 105
10292: PUSH
10293: LD_INT 106
10295: PUSH
10296: LD_INT 107
10298: PUSH
10299: LD_INT 108
10301: PUSH
10302: LD_INT 109
10304: PUSH
10305: LD_INT 110
10307: PUSH
10308: LD_INT 111
10310: PUSH
10311: LD_INT 112
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 114
10319: PUSH
10320: LD_INT 116
10322: PUSH
10323: LD_INT 117
10325: PUSH
10326: LD_INT 118
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: ST_TO_ADDR
10352: GO 11359
10354: LD_INT 15
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10586
10362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10363: LD_ADDR_VAR 0 2
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 4
10379: PUSH
10380: LD_INT 5
10382: PUSH
10383: LD_INT 6
10385: PUSH
10386: LD_INT 7
10388: PUSH
10389: LD_INT 8
10391: PUSH
10392: LD_INT 9
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 11
10400: PUSH
10401: LD_INT 12
10403: PUSH
10404: LD_INT 13
10406: PUSH
10407: LD_INT 14
10409: PUSH
10410: LD_INT 15
10412: PUSH
10413: LD_INT 16
10415: PUSH
10416: LD_INT 17
10418: PUSH
10419: LD_INT 18
10421: PUSH
10422: LD_INT 19
10424: PUSH
10425: LD_INT 20
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 23
10436: PUSH
10437: LD_INT 24
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: LD_INT 27
10448: PUSH
10449: LD_INT 28
10451: PUSH
10452: LD_INT 29
10454: PUSH
10455: LD_INT 30
10457: PUSH
10458: LD_INT 31
10460: PUSH
10461: LD_INT 32
10463: PUSH
10464: LD_INT 33
10466: PUSH
10467: LD_INT 34
10469: PUSH
10470: LD_INT 36
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 101
10512: PUSH
10513: LD_INT 102
10515: PUSH
10516: LD_INT 103
10518: PUSH
10519: LD_INT 104
10521: PUSH
10522: LD_INT 105
10524: PUSH
10525: LD_INT 106
10527: PUSH
10528: LD_INT 107
10530: PUSH
10531: LD_INT 108
10533: PUSH
10534: LD_INT 109
10536: PUSH
10537: LD_INT 110
10539: PUSH
10540: LD_INT 111
10542: PUSH
10543: LD_INT 112
10545: PUSH
10546: LD_INT 113
10548: PUSH
10549: LD_INT 114
10551: PUSH
10552: LD_INT 116
10554: PUSH
10555: LD_INT 117
10557: PUSH
10558: LD_INT 118
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: ST_TO_ADDR
10584: GO 11359
10586: LD_INT 16
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10730
10594: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 4
10605: PUSH
10606: LD_INT 5
10608: PUSH
10609: LD_INT 7
10611: PUSH
10612: LD_INT 11
10614: PUSH
10615: LD_INT 12
10617: PUSH
10618: LD_INT 15
10620: PUSH
10621: LD_INT 16
10623: PUSH
10624: LD_INT 20
10626: PUSH
10627: LD_INT 21
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_INT 23
10635: PUSH
10636: LD_INT 25
10638: PUSH
10639: LD_INT 26
10641: PUSH
10642: LD_INT 30
10644: PUSH
10645: LD_INT 31
10647: PUSH
10648: LD_INT 32
10650: PUSH
10651: LD_INT 33
10653: PUSH
10654: LD_INT 34
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 106
10689: PUSH
10690: LD_INT 108
10692: PUSH
10693: LD_INT 112
10695: PUSH
10696: LD_INT 113
10698: PUSH
10699: LD_INT 114
10701: PUSH
10702: LD_INT 116
10704: PUSH
10705: LD_INT 117
10707: PUSH
10708: LD_INT 118
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: ST_TO_ADDR
10728: GO 11359
10730: LD_INT 17
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10962
10738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10739: LD_ADDR_VAR 0 2
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 4
10755: PUSH
10756: LD_INT 5
10758: PUSH
10759: LD_INT 6
10761: PUSH
10762: LD_INT 7
10764: PUSH
10765: LD_INT 8
10767: PUSH
10768: LD_INT 9
10770: PUSH
10771: LD_INT 10
10773: PUSH
10774: LD_INT 11
10776: PUSH
10777: LD_INT 12
10779: PUSH
10780: LD_INT 13
10782: PUSH
10783: LD_INT 14
10785: PUSH
10786: LD_INT 15
10788: PUSH
10789: LD_INT 16
10791: PUSH
10792: LD_INT 17
10794: PUSH
10795: LD_INT 18
10797: PUSH
10798: LD_INT 19
10800: PUSH
10801: LD_INT 20
10803: PUSH
10804: LD_INT 21
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 23
10812: PUSH
10813: LD_INT 24
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 26
10821: PUSH
10822: LD_INT 27
10824: PUSH
10825: LD_INT 28
10827: PUSH
10828: LD_INT 29
10830: PUSH
10831: LD_INT 30
10833: PUSH
10834: LD_INT 31
10836: PUSH
10837: LD_INT 32
10839: PUSH
10840: LD_INT 33
10842: PUSH
10843: LD_INT 34
10845: PUSH
10846: LD_INT 36
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 101
10888: PUSH
10889: LD_INT 102
10891: PUSH
10892: LD_INT 103
10894: PUSH
10895: LD_INT 104
10897: PUSH
10898: LD_INT 105
10900: PUSH
10901: LD_INT 106
10903: PUSH
10904: LD_INT 107
10906: PUSH
10907: LD_INT 108
10909: PUSH
10910: LD_INT 109
10912: PUSH
10913: LD_INT 110
10915: PUSH
10916: LD_INT 111
10918: PUSH
10919: LD_INT 112
10921: PUSH
10922: LD_INT 113
10924: PUSH
10925: LD_INT 114
10927: PUSH
10928: LD_INT 116
10930: PUSH
10931: LD_INT 117
10933: PUSH
10934: LD_INT 118
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: ST_TO_ADDR
10960: GO 11359
10962: LD_INT 18
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 11118
10970: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10971: LD_ADDR_VAR 0 2
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: LD_INT 4
10981: PUSH
10982: LD_INT 5
10984: PUSH
10985: LD_INT 7
10987: PUSH
10988: LD_INT 11
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: LD_INT 15
10996: PUSH
10997: LD_INT 16
10999: PUSH
11000: LD_INT 20
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 23
11011: PUSH
11012: LD_INT 25
11014: PUSH
11015: LD_INT 26
11017: PUSH
11018: LD_INT 30
11020: PUSH
11021: LD_INT 31
11023: PUSH
11024: LD_INT 32
11026: PUSH
11027: LD_INT 33
11029: PUSH
11030: LD_INT 34
11032: PUSH
11033: LD_INT 35
11035: PUSH
11036: LD_INT 36
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 101
11064: PUSH
11065: LD_INT 102
11067: PUSH
11068: LD_INT 103
11070: PUSH
11071: LD_INT 106
11073: PUSH
11074: LD_INT 108
11076: PUSH
11077: LD_INT 112
11079: PUSH
11080: LD_INT 113
11082: PUSH
11083: LD_INT 114
11085: PUSH
11086: LD_INT 115
11088: PUSH
11089: LD_INT 116
11091: PUSH
11092: LD_INT 117
11094: PUSH
11095: LD_INT 118
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: ST_TO_ADDR
11116: GO 11359
11118: LD_INT 19
11120: DOUBLE
11121: EQUAL
11122: IFTRUE 11126
11124: GO 11358
11126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11127: LD_ADDR_VAR 0 2
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: LD_INT 2
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: LD_INT 4
11143: PUSH
11144: LD_INT 5
11146: PUSH
11147: LD_INT 6
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: LD_INT 9
11158: PUSH
11159: LD_INT 10
11161: PUSH
11162: LD_INT 11
11164: PUSH
11165: LD_INT 12
11167: PUSH
11168: LD_INT 13
11170: PUSH
11171: LD_INT 14
11173: PUSH
11174: LD_INT 15
11176: PUSH
11177: LD_INT 16
11179: PUSH
11180: LD_INT 17
11182: PUSH
11183: LD_INT 18
11185: PUSH
11186: LD_INT 19
11188: PUSH
11189: LD_INT 20
11191: PUSH
11192: LD_INT 21
11194: PUSH
11195: LD_INT 22
11197: PUSH
11198: LD_INT 23
11200: PUSH
11201: LD_INT 24
11203: PUSH
11204: LD_INT 25
11206: PUSH
11207: LD_INT 26
11209: PUSH
11210: LD_INT 27
11212: PUSH
11213: LD_INT 28
11215: PUSH
11216: LD_INT 29
11218: PUSH
11219: LD_INT 30
11221: PUSH
11222: LD_INT 31
11224: PUSH
11225: LD_INT 32
11227: PUSH
11228: LD_INT 33
11230: PUSH
11231: LD_INT 34
11233: PUSH
11234: LD_INT 35
11236: PUSH
11237: LD_INT 36
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 101
11280: PUSH
11281: LD_INT 102
11283: PUSH
11284: LD_INT 103
11286: PUSH
11287: LD_INT 104
11289: PUSH
11290: LD_INT 105
11292: PUSH
11293: LD_INT 106
11295: PUSH
11296: LD_INT 107
11298: PUSH
11299: LD_INT 108
11301: PUSH
11302: LD_INT 109
11304: PUSH
11305: LD_INT 110
11307: PUSH
11308: LD_INT 111
11310: PUSH
11311: LD_INT 112
11313: PUSH
11314: LD_INT 113
11316: PUSH
11317: LD_INT 114
11319: PUSH
11320: LD_INT 115
11322: PUSH
11323: LD_INT 116
11325: PUSH
11326: LD_INT 117
11328: PUSH
11329: LD_INT 118
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: ST_TO_ADDR
11356: GO 11359
11358: POP
// end else
11359: GO 11590
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: LD_INT 6
11383: PUSH
11384: LD_INT 7
11386: PUSH
11387: LD_INT 8
11389: PUSH
11390: LD_INT 9
11392: PUSH
11393: LD_INT 10
11395: PUSH
11396: LD_INT 11
11398: PUSH
11399: LD_INT 12
11401: PUSH
11402: LD_INT 13
11404: PUSH
11405: LD_INT 14
11407: PUSH
11408: LD_INT 15
11410: PUSH
11411: LD_INT 16
11413: PUSH
11414: LD_INT 17
11416: PUSH
11417: LD_INT 18
11419: PUSH
11420: LD_INT 19
11422: PUSH
11423: LD_INT 20
11425: PUSH
11426: LD_INT 21
11428: PUSH
11429: LD_INT 22
11431: PUSH
11432: LD_INT 23
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 26
11443: PUSH
11444: LD_INT 27
11446: PUSH
11447: LD_INT 28
11449: PUSH
11450: LD_INT 29
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: LD_INT 32
11461: PUSH
11462: LD_INT 33
11464: PUSH
11465: LD_INT 34
11467: PUSH
11468: LD_INT 35
11470: PUSH
11471: LD_INT 36
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 101
11514: PUSH
11515: LD_INT 102
11517: PUSH
11518: LD_INT 103
11520: PUSH
11521: LD_INT 104
11523: PUSH
11524: LD_INT 105
11526: PUSH
11527: LD_INT 106
11529: PUSH
11530: LD_INT 107
11532: PUSH
11533: LD_INT 108
11535: PUSH
11536: LD_INT 109
11538: PUSH
11539: LD_INT 110
11541: PUSH
11542: LD_INT 111
11544: PUSH
11545: LD_INT 112
11547: PUSH
11548: LD_INT 113
11550: PUSH
11551: LD_INT 114
11553: PUSH
11554: LD_INT 115
11556: PUSH
11557: LD_INT 116
11559: PUSH
11560: LD_INT 117
11562: PUSH
11563: LD_INT 118
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: ST_TO_ADDR
// if result then
11590: LD_VAR 0 2
11594: IFFALSE 12380
// begin normal :=  ;
11596: LD_ADDR_VAR 0 5
11600: PUSH
11601: LD_STRING 
11603: ST_TO_ADDR
// hardcore :=  ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_STRING 
11611: ST_TO_ADDR
// active :=  ;
11612: LD_ADDR_VAR 0 7
11616: PUSH
11617: LD_STRING 
11619: ST_TO_ADDR
// for i = 1 to normalCounter do
11620: LD_ADDR_VAR 0 8
11624: PUSH
11625: DOUBLE
11626: LD_INT 1
11628: DEC
11629: ST_TO_ADDR
11630: LD_EXP 28
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11737
// begin tmp := 0 ;
11638: LD_ADDR_VAR 0 3
11642: PUSH
11643: LD_STRING 0
11645: ST_TO_ADDR
// if result [ 1 ] then
11646: LD_VAR 0 2
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: IFFALSE 11719
// if result [ 1 ] [ 1 ] = i then
11656: LD_VAR 0 2
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PUSH
11669: LD_VAR 0 8
11673: EQUAL
11674: IFFALSE 11719
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: LD_VAR 0 2
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 3
11705: PPUSH
11706: CALL_OW 1
11710: ST_TO_ADDR
// tmp := 1 ;
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: LD_STRING 1
11718: ST_TO_ADDR
// end ; normal := normal & tmp ;
11719: LD_ADDR_VAR 0 5
11723: PUSH
11724: LD_VAR 0 5
11728: PUSH
11729: LD_VAR 0 3
11733: STR
11734: ST_TO_ADDR
// end ;
11735: GO 11635
11737: POP
11738: POP
// for i = 1 to hardcoreCounter do
11739: LD_ADDR_VAR 0 8
11743: PUSH
11744: DOUBLE
11745: LD_INT 1
11747: DEC
11748: ST_TO_ADDR
11749: LD_EXP 29
11753: PUSH
11754: FOR_TO
11755: IFFALSE 11860
// begin tmp := 0 ;
11757: LD_ADDR_VAR 0 3
11761: PUSH
11762: LD_STRING 0
11764: ST_TO_ADDR
// if result [ 2 ] then
11765: LD_VAR 0 2
11769: PUSH
11770: LD_INT 2
11772: ARRAY
11773: IFFALSE 11842
// if result [ 2 ] [ 1 ] = 100 + i then
11775: LD_VAR 0 2
11779: PUSH
11780: LD_INT 2
11782: ARRAY
11783: PUSH
11784: LD_INT 1
11786: ARRAY
11787: PUSH
11788: LD_INT 100
11790: PUSH
11791: LD_VAR 0 8
11795: PLUS
11796: EQUAL
11797: IFFALSE 11842
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_VAR 0 2
11808: PPUSH
11809: LD_INT 2
11811: PPUSH
11812: LD_VAR 0 2
11816: PUSH
11817: LD_INT 2
11819: ARRAY
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 3
11828: PPUSH
11829: CALL_OW 1
11833: ST_TO_ADDR
// tmp := 1 ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_STRING 1
11841: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11842: LD_ADDR_VAR 0 6
11846: PUSH
11847: LD_VAR 0 6
11851: PUSH
11852: LD_VAR 0 3
11856: STR
11857: ST_TO_ADDR
// end ;
11858: GO 11754
11860: POP
11861: POP
// if isGameLoad then
11862: LD_VAR 0 1
11866: IFFALSE 12341
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11868: LD_ADDR_VAR 0 4
11872: PUSH
11873: LD_EXP 32
11877: PUSH
11878: LD_EXP 31
11882: PUSH
11883: LD_EXP 33
11887: PUSH
11888: LD_EXP 30
11892: PUSH
11893: LD_EXP 34
11897: PUSH
11898: LD_EXP 35
11902: PUSH
11903: LD_EXP 36
11907: PUSH
11908: LD_EXP 37
11912: PUSH
11913: LD_EXP 38
11917: PUSH
11918: LD_EXP 39
11922: PUSH
11923: LD_EXP 40
11927: PUSH
11928: LD_EXP 41
11932: PUSH
11933: LD_EXP 42
11937: PUSH
11938: LD_EXP 43
11942: PUSH
11943: LD_EXP 51
11947: PUSH
11948: LD_EXP 52
11952: PUSH
11953: LD_EXP 53
11957: PUSH
11958: LD_EXP 54
11962: PUSH
11963: LD_EXP 56
11967: PUSH
11968: LD_EXP 57
11972: PUSH
11973: LD_EXP 58
11977: PUSH
11978: LD_EXP 61
11982: PUSH
11983: LD_EXP 63
11987: PUSH
11988: LD_EXP 64
11992: PUSH
11993: LD_EXP 65
11997: PUSH
11998: LD_EXP 67
12002: PUSH
12003: LD_EXP 68
12007: PUSH
12008: LD_EXP 71
12012: PUSH
12013: LD_EXP 72
12017: PUSH
12018: LD_EXP 73
12022: PUSH
12023: LD_EXP 74
12027: PUSH
12028: LD_EXP 75
12032: PUSH
12033: LD_EXP 76
12037: PUSH
12038: LD_EXP 77
12042: PUSH
12043: LD_EXP 78
12047: PUSH
12048: LD_EXP 79
12052: PUSH
12053: LD_EXP 44
12057: PUSH
12058: LD_EXP 45
12062: PUSH
12063: LD_EXP 48
12067: PUSH
12068: LD_EXP 49
12072: PUSH
12073: LD_EXP 50
12077: PUSH
12078: LD_EXP 46
12082: PUSH
12083: LD_EXP 47
12087: PUSH
12088: LD_EXP 55
12092: PUSH
12093: LD_EXP 59
12097: PUSH
12098: LD_EXP 60
12102: PUSH
12103: LD_EXP 62
12107: PUSH
12108: LD_EXP 66
12112: PUSH
12113: LD_EXP 69
12117: PUSH
12118: LD_EXP 70
12122: PUSH
12123: LD_EXP 80
12127: PUSH
12128: LD_EXP 81
12132: PUSH
12133: LD_EXP 82
12137: PUSH
12138: LD_EXP 83
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: ST_TO_ADDR
// tmp :=  ;
12199: LD_ADDR_VAR 0 3
12203: PUSH
12204: LD_STRING 
12206: ST_TO_ADDR
// for i = 1 to normalCounter do
12207: LD_ADDR_VAR 0 8
12211: PUSH
12212: DOUBLE
12213: LD_INT 1
12215: DEC
12216: ST_TO_ADDR
12217: LD_EXP 28
12221: PUSH
12222: FOR_TO
12223: IFFALSE 12259
// begin if flags [ i ] then
12225: LD_VAR 0 4
12229: PUSH
12230: LD_VAR 0 8
12234: ARRAY
12235: IFFALSE 12257
// tmp := tmp & i & ; ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_VAR 0 3
12246: PUSH
12247: LD_VAR 0 8
12251: STR
12252: PUSH
12253: LD_STRING ;
12255: STR
12256: ST_TO_ADDR
// end ;
12257: GO 12222
12259: POP
12260: POP
// for i = 1 to hardcoreCounter do
12261: LD_ADDR_VAR 0 8
12265: PUSH
12266: DOUBLE
12267: LD_INT 1
12269: DEC
12270: ST_TO_ADDR
12271: LD_EXP 29
12275: PUSH
12276: FOR_TO
12277: IFFALSE 12323
// begin if flags [ normalCounter + i ] then
12279: LD_VAR 0 4
12283: PUSH
12284: LD_EXP 28
12288: PUSH
12289: LD_VAR 0 8
12293: PLUS
12294: ARRAY
12295: IFFALSE 12321
// tmp := tmp & ( 100 + i ) & ; ;
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: LD_VAR 0 3
12306: PUSH
12307: LD_INT 100
12309: PUSH
12310: LD_VAR 0 8
12314: PLUS
12315: STR
12316: PUSH
12317: LD_STRING ;
12319: STR
12320: ST_TO_ADDR
// end ;
12321: GO 12276
12323: POP
12324: POP
// if tmp then
12325: LD_VAR 0 3
12329: IFFALSE 12341
// active := tmp ;
12331: LD_ADDR_VAR 0 7
12335: PUSH
12336: LD_VAR 0 3
12340: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12341: LD_STRING getStreamItemsFromMission("
12343: PUSH
12344: LD_VAR 0 5
12348: STR
12349: PUSH
12350: LD_STRING ","
12352: STR
12353: PUSH
12354: LD_VAR 0 6
12358: STR
12359: PUSH
12360: LD_STRING ","
12362: STR
12363: PUSH
12364: LD_VAR 0 7
12368: STR
12369: PUSH
12370: LD_STRING ")
12372: STR
12373: PPUSH
12374: CALL_OW 559
// end else
12378: GO 12387
// ToLua ( getStreamItemsFromMission("","","") ) ;
12380: LD_STRING getStreamItemsFromMission("","","")
12382: PPUSH
12383: CALL_OW 559
// end ;
12387: LD_VAR 0 2
12391: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12392: LD_EXP 27
12396: PUSH
12397: LD_EXP 32
12401: AND
12402: IFFALSE 12526
12404: GO 12406
12406: DISABLE
12407: LD_INT 0
12409: PPUSH
12410: PPUSH
// begin enable ;
12411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12412: LD_ADDR_VAR 0 2
12416: PUSH
12417: LD_INT 22
12419: PUSH
12420: LD_OWVAR 2
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 2
12431: PUSH
12432: LD_INT 34
12434: PUSH
12435: LD_INT 7
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 34
12444: PUSH
12445: LD_INT 45
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 34
12454: PUSH
12455: LD_INT 28
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 34
12464: PUSH
12465: LD_INT 47
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 69
12487: ST_TO_ADDR
// if not tmp then
12488: LD_VAR 0 2
12492: NOT
12493: IFFALSE 12497
// exit ;
12495: GO 12526
// for i in tmp do
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 2
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12524
// begin SetLives ( i , 0 ) ;
12510: LD_VAR 0 1
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 234
// end ;
12522: GO 12507
12524: POP
12525: POP
// end ;
12526: PPOPN 2
12528: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12529: LD_EXP 27
12533: PUSH
12534: LD_EXP 33
12538: AND
12539: IFFALSE 12623
12541: GO 12543
12543: DISABLE
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
// begin enable ;
12548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12549: LD_ADDR_VAR 0 2
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_OWVAR 2
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 32
12568: PUSH
12569: LD_INT 3
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: ST_TO_ADDR
// if not tmp then
12585: LD_VAR 0 2
12589: NOT
12590: IFFALSE 12594
// exit ;
12592: GO 12623
// for i in tmp do
12594: LD_ADDR_VAR 0 1
12598: PUSH
12599: LD_VAR 0 2
12603: PUSH
12604: FOR_IN
12605: IFFALSE 12621
// begin SetLives ( i , 0 ) ;
12607: LD_VAR 0 1
12611: PPUSH
12612: LD_INT 0
12614: PPUSH
12615: CALL_OW 234
// end ;
12619: GO 12604
12621: POP
12622: POP
// end ;
12623: PPOPN 2
12625: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12626: LD_EXP 27
12630: PUSH
12631: LD_EXP 30
12635: AND
12636: IFFALSE 12729
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin enable ;
12644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_OWVAR 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 9
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PPUSH
12705: CALL_OW 69
12709: PUSH
12710: FOR_IN
12711: IFFALSE 12727
// begin SetClass ( i , 1 ) ;
12713: LD_VAR 0 1
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 336
// end ;
12725: GO 12710
12727: POP
12728: POP
// end ;
12729: PPOPN 1
12731: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12732: LD_EXP 27
12736: PUSH
12737: LD_EXP 31
12741: AND
12742: PUSH
12743: LD_OWVAR 65
12747: PUSH
12748: LD_INT 7
12750: LESS
12751: AND
12752: IFFALSE 12766
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// game_speed := 7 ;
12758: LD_ADDR_OWVAR 65
12762: PUSH
12763: LD_INT 7
12765: ST_TO_ADDR
// end ;
12766: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12767: LD_EXP 27
12771: PUSH
12772: LD_EXP 34
12776: AND
12777: IFFALSE 12979
12779: GO 12781
12781: DISABLE
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
12786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12787: LD_ADDR_VAR 0 3
12791: PUSH
12792: LD_INT 81
12794: PUSH
12795: LD_OWVAR 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 21
12806: PUSH
12807: LD_INT 1
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 69
12822: ST_TO_ADDR
// if not tmp then
12823: LD_VAR 0 3
12827: NOT
12828: IFFALSE 12832
// exit ;
12830: GO 12979
// if tmp > 5 then
12832: LD_VAR 0 3
12836: PUSH
12837: LD_INT 5
12839: GREATER
12840: IFFALSE 12852
// k := 5 else
12842: LD_ADDR_VAR 0 2
12846: PUSH
12847: LD_INT 5
12849: ST_TO_ADDR
12850: GO 12862
// k := tmp ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: LD_VAR 0 3
12861: ST_TO_ADDR
// for i := 1 to k do
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: DOUBLE
12868: LD_INT 1
12870: DEC
12871: ST_TO_ADDR
12872: LD_VAR 0 2
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12977
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12880: LD_VAR 0 3
12884: PUSH
12885: LD_VAR 0 1
12889: ARRAY
12890: PPUSH
12891: LD_VAR 0 1
12895: PUSH
12896: LD_INT 4
12898: MOD
12899: PUSH
12900: LD_INT 1
12902: PLUS
12903: PPUSH
12904: CALL_OW 259
12908: PUSH
12909: LD_INT 10
12911: LESS
12912: IFFALSE 12975
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12914: LD_VAR 0 3
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: PPUSH
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 4
12932: MOD
12933: PUSH
12934: LD_INT 1
12936: PLUS
12937: PPUSH
12938: LD_VAR 0 3
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 4
12956: MOD
12957: PUSH
12958: LD_INT 1
12960: PLUS
12961: PPUSH
12962: CALL_OW 259
12966: PUSH
12967: LD_INT 1
12969: PLUS
12970: PPUSH
12971: CALL_OW 237
12975: GO 12877
12977: POP
12978: POP
// end ;
12979: PPOPN 3
12981: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12982: LD_EXP 27
12986: PUSH
12987: LD_EXP 35
12991: AND
12992: IFFALSE 13012
12994: GO 12996
12996: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12997: LD_INT 4
12999: PPUSH
13000: LD_OWVAR 2
13004: PPUSH
13005: LD_INT 0
13007: PPUSH
13008: CALL_OW 324
13012: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13013: LD_EXP 27
13017: PUSH
13018: LD_EXP 64
13022: AND
13023: IFFALSE 13043
13025: GO 13027
13027: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13028: LD_INT 19
13030: PPUSH
13031: LD_OWVAR 2
13035: PPUSH
13036: LD_INT 0
13038: PPUSH
13039: CALL_OW 324
13043: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13044: LD_EXP 27
13048: PUSH
13049: LD_EXP 36
13053: AND
13054: IFFALSE 13156
13056: GO 13058
13058: DISABLE
13059: LD_INT 0
13061: PPUSH
13062: PPUSH
// begin enable ;
13063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13064: LD_ADDR_VAR 0 2
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_OWVAR 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 34
13086: PUSH
13087: LD_INT 11
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 34
13096: PUSH
13097: LD_INT 30
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: CALL_OW 69
13117: ST_TO_ADDR
// if not tmp then
13118: LD_VAR 0 2
13122: NOT
13123: IFFALSE 13127
// exit ;
13125: GO 13156
// for i in tmp do
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_VAR 0 2
13136: PUSH
13137: FOR_IN
13138: IFFALSE 13154
// begin SetLives ( i , 0 ) ;
13140: LD_VAR 0 1
13144: PPUSH
13145: LD_INT 0
13147: PPUSH
13148: CALL_OW 234
// end ;
13152: GO 13137
13154: POP
13155: POP
// end ;
13156: PPOPN 2
13158: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13159: LD_EXP 27
13163: PUSH
13164: LD_EXP 37
13168: AND
13169: IFFALSE 13189
13171: GO 13173
13173: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13174: LD_INT 32
13176: PPUSH
13177: LD_OWVAR 2
13181: PPUSH
13182: LD_INT 0
13184: PPUSH
13185: CALL_OW 324
13189: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13190: LD_EXP 27
13194: PUSH
13195: LD_EXP 38
13199: AND
13200: IFFALSE 13381
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
13208: PPUSH
13209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13210: LD_ADDR_VAR 0 2
13214: PUSH
13215: LD_INT 22
13217: PUSH
13218: LD_OWVAR 2
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 33
13229: PUSH
13230: LD_INT 3
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PPUSH
13241: CALL_OW 69
13245: ST_TO_ADDR
// if not tmp then
13246: LD_VAR 0 2
13250: NOT
13251: IFFALSE 13255
// exit ;
13253: GO 13381
// side := 0 ;
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// for i := 1 to 8 do
13263: LD_ADDR_VAR 0 1
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_INT 8
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13325
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13279: LD_OWVAR 2
13283: PUSH
13284: LD_VAR 0 1
13288: NONEQUAL
13289: PUSH
13290: LD_OWVAR 2
13294: PPUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 81
13304: PUSH
13305: LD_INT 2
13307: EQUAL
13308: AND
13309: IFFALSE 13323
// begin side := i ;
13311: LD_ADDR_VAR 0 3
13315: PUSH
13316: LD_VAR 0 1
13320: ST_TO_ADDR
// break ;
13321: GO 13325
// end ;
13323: GO 13276
13325: POP
13326: POP
// if not side then
13327: LD_VAR 0 3
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13381
// for i := 1 to tmp do
13336: LD_ADDR_VAR 0 1
13340: PUSH
13341: DOUBLE
13342: LD_INT 1
13344: DEC
13345: ST_TO_ADDR
13346: LD_VAR 0 2
13350: PUSH
13351: FOR_TO
13352: IFFALSE 13379
// if Prob ( 60 ) then
13354: LD_INT 60
13356: PPUSH
13357: CALL_OW 13
13361: IFFALSE 13377
// SetSide ( i , side ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: CALL_OW 235
13377: GO 13351
13379: POP
13380: POP
// end ;
13381: PPOPN 3
13383: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13384: LD_EXP 27
13388: PUSH
13389: LD_EXP 40
13393: AND
13394: IFFALSE 13513
13396: GO 13398
13398: DISABLE
13399: LD_INT 0
13401: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_INT 22
13409: PUSH
13410: LD_OWVAR 2
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 21
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 3
13431: PUSH
13432: LD_INT 23
13434: PUSH
13435: LD_INT 0
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: FOR_IN
13457: IFFALSE 13511
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13459: LD_VAR 0 1
13463: PPUSH
13464: CALL_OW 257
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: LD_INT 4
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: IN
13487: IFFALSE 13509
// SetClass ( un , rand ( 1 , 4 ) ) ;
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_INT 1
13496: PPUSH
13497: LD_INT 4
13499: PPUSH
13500: CALL_OW 12
13504: PPUSH
13505: CALL_OW 336
13509: GO 13456
13511: POP
13512: POP
// end ;
13513: PPOPN 1
13515: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13516: LD_EXP 27
13520: PUSH
13521: LD_EXP 39
13525: AND
13526: IFFALSE 13605
13528: GO 13530
13530: DISABLE
13531: LD_INT 0
13533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13534: LD_ADDR_VAR 0 1
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_OWVAR 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 3
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: ST_TO_ADDR
// if not tmp then
13570: LD_VAR 0 1
13574: NOT
13575: IFFALSE 13579
// exit ;
13577: GO 13605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13579: LD_VAR 0 1
13583: PUSH
13584: LD_INT 1
13586: PPUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 12
13596: ARRAY
13597: PPUSH
13598: LD_INT 100
13600: PPUSH
13601: CALL_OW 234
// end ;
13605: PPOPN 1
13607: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13608: LD_EXP 27
13612: PUSH
13613: LD_EXP 41
13617: AND
13618: IFFALSE 13716
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// if not tmp then
13662: LD_VAR 0 1
13666: NOT
13667: IFFALSE 13671
// exit ;
13669: GO 13716
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 12
13688: ARRAY
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: LD_INT 4
13695: PPUSH
13696: CALL_OW 12
13700: PPUSH
13701: LD_INT 3000
13703: PPUSH
13704: LD_INT 9000
13706: PPUSH
13707: CALL_OW 12
13711: PPUSH
13712: CALL_OW 492
// end ;
13716: PPOPN 1
13718: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13719: LD_EXP 27
13723: PUSH
13724: LD_EXP 42
13728: AND
13729: IFFALSE 13749
13731: GO 13733
13733: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13734: LD_INT 1
13736: PPUSH
13737: LD_OWVAR 2
13741: PPUSH
13742: LD_INT 0
13744: PPUSH
13745: CALL_OW 324
13749: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13750: LD_EXP 27
13754: PUSH
13755: LD_EXP 43
13759: AND
13760: IFFALSE 13843
13762: GO 13764
13764: DISABLE
13765: LD_INT 0
13767: PPUSH
13768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13769: LD_ADDR_VAR 0 2
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_OWVAR 2
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 3
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: ST_TO_ADDR
// if not tmp then
13805: LD_VAR 0 2
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 13843
// for i in tmp do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_VAR 0 2
13823: PUSH
13824: FOR_IN
13825: IFFALSE 13841
// SetBLevel ( i , 10 ) ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 10
13834: PPUSH
13835: CALL_OW 241
13839: GO 13824
13841: POP
13842: POP
// end ;
13843: PPOPN 2
13845: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13846: LD_EXP 27
13850: PUSH
13851: LD_EXP 44
13855: AND
13856: IFFALSE 13967
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13866: LD_ADDR_VAR 0 3
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_OWVAR 2
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PPUSH
13897: CALL_OW 69
13901: ST_TO_ADDR
// if not tmp then
13902: LD_VAR 0 3
13906: NOT
13907: IFFALSE 13911
// exit ;
13909: GO 13967
// un := tmp [ rand ( 1 , tmp ) ] ;
13911: LD_ADDR_VAR 0 2
13915: PUSH
13916: LD_VAR 0 3
13920: PUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_VAR 0 3
13928: PPUSH
13929: CALL_OW 12
13933: ARRAY
13934: ST_TO_ADDR
// if Crawls ( un ) then
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 318
13944: IFFALSE 13955
// ComWalk ( un ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13955: LD_VAR 0 2
13959: PPUSH
13960: LD_INT 5
13962: PPUSH
13963: CALL_OW 336
// end ;
13967: PPOPN 3
13969: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13970: LD_EXP 27
13974: PUSH
13975: LD_EXP 45
13979: AND
13980: PUSH
13981: LD_OWVAR 67
13985: PUSH
13986: LD_INT 4
13988: LESS
13989: AND
13990: IFFALSE 14009
13992: GO 13994
13994: DISABLE
// begin Difficulty := Difficulty + 1 ;
13995: LD_ADDR_OWVAR 67
13999: PUSH
14000: LD_OWVAR 67
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: ST_TO_ADDR
// end ;
14009: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14010: LD_EXP 27
14014: PUSH
14015: LD_EXP 46
14019: AND
14020: IFFALSE 14123
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin for i := 1 to 5 do
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: DOUBLE
14034: LD_INT 1
14036: DEC
14037: ST_TO_ADDR
14038: LD_INT 5
14040: PUSH
14041: FOR_TO
14042: IFFALSE 14121
// begin uc_nation := nation_nature ;
14044: LD_ADDR_OWVAR 21
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// uc_side := 0 ;
14052: LD_ADDR_OWVAR 20
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14060: LD_ADDR_OWVAR 29
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 12
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: ST_TO_ADDR
// hc_agressivity := 20 ;
14075: LD_ADDR_OWVAR 35
14079: PUSH
14080: LD_INT 20
14082: ST_TO_ADDR
// hc_class := class_tiger ;
14083: LD_ADDR_OWVAR 28
14087: PUSH
14088: LD_INT 14
14090: ST_TO_ADDR
// hc_gallery :=  ;
14091: LD_ADDR_OWVAR 33
14095: PUSH
14096: LD_STRING 
14098: ST_TO_ADDR
// hc_name :=  ;
14099: LD_ADDR_OWVAR 26
14103: PUSH
14104: LD_STRING 
14106: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14107: CALL_OW 44
14111: PPUSH
14112: LD_INT 0
14114: PPUSH
14115: CALL_OW 51
// end ;
14119: GO 14041
14121: POP
14122: POP
// end ;
14123: PPOPN 1
14125: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14126: LD_EXP 27
14130: PUSH
14131: LD_EXP 47
14135: AND
14136: IFFALSE 14145
14138: GO 14140
14140: DISABLE
// StreamSibBomb ;
14141: CALL 14146 0 0
14145: END
// export function StreamSibBomb ; var i , x , y ; begin
14146: LD_INT 0
14148: PPUSH
14149: PPUSH
14150: PPUSH
14151: PPUSH
// result := false ;
14152: LD_ADDR_VAR 0 1
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// for i := 1 to 16 do
14160: LD_ADDR_VAR 0 2
14164: PUSH
14165: DOUBLE
14166: LD_INT 1
14168: DEC
14169: ST_TO_ADDR
14170: LD_INT 16
14172: PUSH
14173: FOR_TO
14174: IFFALSE 14373
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 10
14183: PUSH
14184: LD_INT 20
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 40
14192: PUSH
14193: LD_INT 50
14195: PUSH
14196: LD_INT 60
14198: PUSH
14199: LD_INT 70
14201: PUSH
14202: LD_INT 80
14204: PUSH
14205: LD_INT 90
14207: PUSH
14208: LD_INT 100
14210: PUSH
14211: LD_INT 110
14213: PUSH
14214: LD_INT 120
14216: PUSH
14217: LD_INT 130
14219: PUSH
14220: LD_INT 140
14222: PUSH
14223: LD_INT 150
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 1
14245: PPUSH
14246: LD_INT 15
14248: PPUSH
14249: CALL_OW 12
14253: ARRAY
14254: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14255: LD_ADDR_VAR 0 4
14259: PUSH
14260: LD_INT 10
14262: PUSH
14263: LD_INT 20
14265: PUSH
14266: LD_INT 30
14268: PUSH
14269: LD_INT 40
14271: PUSH
14272: LD_INT 50
14274: PUSH
14275: LD_INT 60
14277: PUSH
14278: LD_INT 70
14280: PUSH
14281: LD_INT 80
14283: PUSH
14284: LD_INT 90
14286: PUSH
14287: LD_INT 100
14289: PUSH
14290: LD_INT 110
14292: PUSH
14293: LD_INT 120
14295: PUSH
14296: LD_INT 130
14298: PUSH
14299: LD_INT 140
14301: PUSH
14302: LD_INT 150
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 15
14327: PPUSH
14328: CALL_OW 12
14332: ARRAY
14333: ST_TO_ADDR
// if ValidHex ( x , y ) then
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: CALL_OW 488
14348: IFFALSE 14371
// begin result := [ x , y ] ;
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_VAR 0 3
14359: PUSH
14360: LD_VAR 0 4
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: ST_TO_ADDR
// break ;
14369: GO 14373
// end ; end ;
14371: GO 14173
14373: POP
14374: POP
// if result then
14375: LD_VAR 0 1
14379: IFFALSE 14439
// begin ToLua ( playSibBomb() ) ;
14381: LD_STRING playSibBomb()
14383: PPUSH
14384: CALL_OW 559
// wait ( 0 0$14 ) ;
14388: LD_INT 490
14390: PPUSH
14391: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 1
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PPUSH
14413: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14417: LD_VAR 0 1
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: LD_VAR 0 1
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: CALL_OW 429
// end ; end ;
14439: LD_VAR 0 1
14443: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14444: LD_EXP 27
14448: PUSH
14449: LD_EXP 49
14453: AND
14454: IFFALSE 14466
14456: GO 14458
14458: DISABLE
// YouLost (  ) ;
14459: LD_STRING 
14461: PPUSH
14462: CALL_OW 104
14466: END
// every 0 0$1 trigger StreamModeActive and sFog do
14467: LD_EXP 27
14471: PUSH
14472: LD_EXP 48
14476: AND
14477: IFFALSE 14491
14479: GO 14481
14481: DISABLE
// FogOff ( your_side ) ;
14482: LD_OWVAR 2
14486: PPUSH
14487: CALL_OW 344
14491: END
// every 0 0$1 trigger StreamModeActive and sSun do
14492: LD_EXP 27
14496: PUSH
14497: LD_EXP 50
14501: AND
14502: IFFALSE 14530
14504: GO 14506
14506: DISABLE
// begin solar_recharge_percent := 0 ;
14507: LD_ADDR_OWVAR 79
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14515: LD_INT 10500
14517: PPUSH
14518: CALL_OW 67
// solar_recharge_percent := 100 ;
14522: LD_ADDR_OWVAR 79
14526: PUSH
14527: LD_INT 100
14529: ST_TO_ADDR
// end ;
14530: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14531: LD_EXP 27
14535: PUSH
14536: LD_EXP 51
14540: AND
14541: IFFALSE 14780
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
// begin tmp := [ ] ;
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: EMPTY
14557: ST_TO_ADDR
// for i := 1 to 6 do
14558: LD_ADDR_VAR 0 1
14562: PUSH
14563: DOUBLE
14564: LD_INT 1
14566: DEC
14567: ST_TO_ADDR
14568: LD_INT 6
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14677
// begin uc_nation := nation_nature ;
14574: LD_ADDR_OWVAR 21
14578: PUSH
14579: LD_INT 0
14581: ST_TO_ADDR
// uc_side := 0 ;
14582: LD_ADDR_OWVAR 20
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14590: LD_ADDR_OWVAR 29
14594: PUSH
14595: LD_INT 12
14597: PUSH
14598: LD_INT 12
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: ST_TO_ADDR
// hc_agressivity := 20 ;
14605: LD_ADDR_OWVAR 35
14609: PUSH
14610: LD_INT 20
14612: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14613: LD_ADDR_OWVAR 28
14617: PUSH
14618: LD_INT 17
14620: ST_TO_ADDR
// hc_gallery :=  ;
14621: LD_ADDR_OWVAR 33
14625: PUSH
14626: LD_STRING 
14628: ST_TO_ADDR
// hc_name :=  ;
14629: LD_ADDR_OWVAR 26
14633: PUSH
14634: LD_STRING 
14636: ST_TO_ADDR
// un := CreateHuman ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: CALL_OW 44
14646: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_INT 1
14654: PPUSH
14655: CALL_OW 51
// tmp := tmp ^ un ;
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_VAR 0 3
14668: PUSH
14669: LD_VAR 0 2
14673: ADD
14674: ST_TO_ADDR
// end ;
14675: GO 14571
14677: POP
14678: POP
// repeat wait ( 0 0$1 ) ;
14679: LD_INT 35
14681: PPUSH
14682: CALL_OW 67
// for un in tmp do
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: LD_VAR 0 3
14695: PUSH
14696: FOR_IN
14697: IFFALSE 14771
// begin if IsDead ( un ) then
14699: LD_VAR 0 2
14703: PPUSH
14704: CALL_OW 301
14708: IFFALSE 14728
// begin tmp := tmp diff un ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: LD_VAR 0 3
14719: PUSH
14720: LD_VAR 0 2
14724: DIFF
14725: ST_TO_ADDR
// continue ;
14726: GO 14696
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14728: LD_VAR 0 2
14732: PPUSH
14733: LD_INT 3
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 0
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 69
14754: PPUSH
14755: LD_VAR 0 2
14759: PPUSH
14760: CALL_OW 74
14764: PPUSH
14765: CALL_OW 115
// end ;
14769: GO 14696
14771: POP
14772: POP
// until not tmp ;
14773: LD_VAR 0 3
14777: NOT
14778: IFFALSE 14679
// end ;
14780: PPOPN 3
14782: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14783: LD_EXP 27
14787: PUSH
14788: LD_EXP 52
14792: AND
14793: IFFALSE 14847
14795: GO 14797
14797: DISABLE
// begin ToLua ( displayTroll(); ) ;
14798: LD_STRING displayTroll();
14800: PPUSH
14801: CALL_OW 559
// wait ( 3 3$00 ) ;
14805: LD_INT 6300
14807: PPUSH
14808: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14812: LD_STRING hideTroll();
14814: PPUSH
14815: CALL_OW 559
// wait ( 1 1$00 ) ;
14819: LD_INT 2100
14821: PPUSH
14822: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14826: LD_STRING displayTroll();
14828: PPUSH
14829: CALL_OW 559
// wait ( 1 1$00 ) ;
14833: LD_INT 2100
14835: PPUSH
14836: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14840: LD_STRING hideTroll();
14842: PPUSH
14843: CALL_OW 559
// end ;
14847: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14848: LD_EXP 27
14852: PUSH
14853: LD_EXP 53
14857: AND
14858: IFFALSE 14921
14860: GO 14862
14862: DISABLE
14863: LD_INT 0
14865: PPUSH
// begin p := 0 ;
14866: LD_ADDR_VAR 0 1
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// repeat game_speed := 1 ;
14874: LD_ADDR_OWVAR 65
14878: PUSH
14879: LD_INT 1
14881: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14882: LD_INT 35
14884: PPUSH
14885: CALL_OW 67
// p := p + 1 ;
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_VAR 0 1
14898: PUSH
14899: LD_INT 1
14901: PLUS
14902: ST_TO_ADDR
// until p >= 60 ;
14903: LD_VAR 0 1
14907: PUSH
14908: LD_INT 60
14910: GREATEREQUAL
14911: IFFALSE 14874
// game_speed := 4 ;
14913: LD_ADDR_OWVAR 65
14917: PUSH
14918: LD_INT 4
14920: ST_TO_ADDR
// end ;
14921: PPOPN 1
14923: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14924: LD_EXP 27
14928: PUSH
14929: LD_EXP 54
14933: AND
14934: IFFALSE 15080
14936: GO 14938
14938: DISABLE
14939: LD_INT 0
14941: PPUSH
14942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14943: LD_ADDR_VAR 0 1
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_OWVAR 2
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 30
14965: PUSH
14966: LD_INT 0
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 30
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: ST_TO_ADDR
// if not depot then
14997: LD_VAR 0 1
15001: NOT
15002: IFFALSE 15006
// exit ;
15004: GO 15080
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_VAR 0 1
15015: PUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 12
15028: ARRAY
15029: PPUSH
15030: CALL_OW 274
15034: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15035: LD_VAR 0 2
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: LD_INT 0
15045: PPUSH
15046: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_INT 2
15057: PPUSH
15058: LD_INT 0
15060: PPUSH
15061: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15065: LD_VAR 0 2
15069: PPUSH
15070: LD_INT 3
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: CALL_OW 277
// end ;
15080: PPOPN 2
15082: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15083: LD_EXP 27
15087: PUSH
15088: LD_EXP 55
15092: AND
15093: IFFALSE 15190
15095: GO 15097
15097: DISABLE
15098: LD_INT 0
15100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15101: LD_ADDR_VAR 0 1
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 21
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 23
15133: PUSH
15134: LD_INT 0
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: PPUSH
15150: CALL_OW 69
15154: ST_TO_ADDR
// if not tmp then
15155: LD_VAR 0 1
15159: NOT
15160: IFFALSE 15164
// exit ;
15162: GO 15190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15164: LD_VAR 0 1
15168: PUSH
15169: LD_INT 1
15171: PPUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 12
15181: ARRAY
15182: PPUSH
15183: LD_INT 200
15185: PPUSH
15186: CALL_OW 234
// end ;
15190: PPOPN 1
15192: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15193: LD_EXP 27
15197: PUSH
15198: LD_EXP 56
15202: AND
15203: IFFALSE 15282
15205: GO 15207
15207: DISABLE
15208: LD_INT 0
15210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15211: LD_ADDR_VAR 0 1
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_OWVAR 2
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 21
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// if not tmp then
15247: LD_VAR 0 1
15251: NOT
15252: IFFALSE 15256
// exit ;
15254: GO 15282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: PPUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 12
15273: ARRAY
15274: PPUSH
15275: LD_INT 60
15277: PPUSH
15278: CALL_OW 234
// end ;
15282: PPOPN 1
15284: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15285: LD_EXP 27
15289: PUSH
15290: LD_EXP 57
15294: AND
15295: IFFALSE 15394
15297: GO 15299
15299: DISABLE
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
// begin enable ;
15304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15305: LD_ADDR_VAR 0 1
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 61
15324: PUSH
15325: EMPTY
15326: LIST
15327: PUSH
15328: LD_INT 33
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: ST_TO_ADDR
// if not tmp then
15348: LD_VAR 0 1
15352: NOT
15353: IFFALSE 15357
// exit ;
15355: GO 15394
// for i in tmp do
15357: LD_ADDR_VAR 0 2
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: FOR_IN
15368: IFFALSE 15392
// if IsControledBy ( i ) then
15370: LD_VAR 0 2
15374: PPUSH
15375: CALL_OW 312
15379: IFFALSE 15390
// ComUnlink ( i ) ;
15381: LD_VAR 0 2
15385: PPUSH
15386: CALL_OW 136
15390: GO 15367
15392: POP
15393: POP
// end ;
15394: PPOPN 2
15396: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15397: LD_EXP 27
15401: PUSH
15402: LD_EXP 58
15406: AND
15407: IFFALSE 15547
15409: GO 15411
15411: DISABLE
15412: LD_INT 0
15414: PPUSH
15415: PPUSH
// begin ToLua ( displayPowell(); ) ;
15416: LD_STRING displayPowell();
15418: PPUSH
15419: CALL_OW 559
// uc_side := 0 ;
15423: LD_ADDR_OWVAR 20
15427: PUSH
15428: LD_INT 0
15430: ST_TO_ADDR
// uc_nation := 2 ;
15431: LD_ADDR_OWVAR 21
15435: PUSH
15436: LD_INT 2
15438: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15439: LD_ADDR_OWVAR 37
15443: PUSH
15444: LD_INT 14
15446: ST_TO_ADDR
// vc_engine := engine_siberite ;
15447: LD_ADDR_OWVAR 39
15451: PUSH
15452: LD_INT 3
15454: ST_TO_ADDR
// vc_control := control_apeman ;
15455: LD_ADDR_OWVAR 38
15459: PUSH
15460: LD_INT 5
15462: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15463: LD_ADDR_OWVAR 40
15467: PUSH
15468: LD_INT 29
15470: ST_TO_ADDR
// un := CreateVehicle ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: CALL_OW 45
15480: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15481: LD_VAR 0 2
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15493: LD_INT 35
15495: PPUSH
15496: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_INT 22
15507: PUSH
15508: LD_OWVAR 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PPUSH
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 74
15531: PPUSH
15532: CALL_OW 115
// until IsDead ( un ) ;
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 301
15545: IFFALSE 15493
// end ;
15547: PPOPN 2
15549: END
// every 0 0$1 trigger StreamModeActive and sStu do
15550: LD_EXP 27
15554: PUSH
15555: LD_EXP 66
15559: AND
15560: IFFALSE 15576
15562: GO 15564
15564: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15565: LD_STRING displayStucuk();
15567: PPUSH
15568: CALL_OW 559
// ResetFog ;
15572: CALL_OW 335
// end ;
15576: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15577: LD_EXP 27
15581: PUSH
15582: LD_EXP 59
15586: AND
15587: IFFALSE 15728
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 21
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15728
// un := tmp [ rand ( 1 , tmp ) ] ;
15641: LD_ADDR_VAR 0 1
15645: PUSH
15646: LD_VAR 0 2
15650: PUSH
15651: LD_INT 1
15653: PPUSH
15654: LD_VAR 0 2
15658: PPUSH
15659: CALL_OW 12
15663: ARRAY
15664: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15665: LD_VAR 0 1
15669: PPUSH
15670: LD_INT 0
15672: PPUSH
15673: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15677: LD_VAR 0 1
15681: PPUSH
15682: LD_OWVAR 3
15686: PUSH
15687: LD_VAR 0 1
15691: DIFF
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 74
15702: PPUSH
15703: CALL_OW 115
// wait ( 0 0$20 ) ;
15707: LD_INT 700
15709: PPUSH
15710: CALL_OW 67
// SetSide ( un , your_side ) ;
15714: LD_VAR 0 1
15718: PPUSH
15719: LD_OWVAR 2
15723: PPUSH
15724: CALL_OW 235
// end ;
15728: PPOPN 2
15730: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15731: LD_EXP 27
15735: PUSH
15736: LD_EXP 60
15740: AND
15741: IFFALSE 15847
15743: GO 15745
15745: DISABLE
15746: LD_INT 0
15748: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15749: LD_ADDR_VAR 0 1
15753: PUSH
15754: LD_INT 22
15756: PUSH
15757: LD_OWVAR 2
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 30
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 30
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 69
15802: ST_TO_ADDR
// if not depot then
15803: LD_VAR 0 1
15807: NOT
15808: IFFALSE 15812
// exit ;
15810: GO 15847
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: CALL_OW 250
15825: PPUSH
15826: LD_VAR 0 1
15830: PUSH
15831: LD_INT 1
15833: ARRAY
15834: PPUSH
15835: CALL_OW 251
15839: PPUSH
15840: LD_INT 70
15842: PPUSH
15843: CALL_OW 495
// end ;
15847: PPOPN 1
15849: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15850: LD_EXP 27
15854: PUSH
15855: LD_EXP 61
15859: AND
15860: IFFALSE 16071
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15872: LD_ADDR_VAR 0 5
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_OWVAR 2
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 1
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: ST_TO_ADDR
// if not tmp then
15908: LD_VAR 0 5
15912: NOT
15913: IFFALSE 15917
// exit ;
15915: GO 16071
// for i in tmp do
15917: LD_ADDR_VAR 0 1
15921: PUSH
15922: LD_VAR 0 5
15926: PUSH
15927: FOR_IN
15928: IFFALSE 16069
// begin d := rand ( 0 , 5 ) ;
15930: LD_ADDR_VAR 0 4
15934: PUSH
15935: LD_INT 0
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 12
15945: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15946: LD_ADDR_VAR 0 2
15950: PUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 250
15960: PPUSH
15961: LD_VAR 0 4
15965: PPUSH
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 12
15971: PPUSH
15972: CALL_OW 12
15976: PPUSH
15977: CALL_OW 272
15981: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15982: LD_ADDR_VAR 0 3
15986: PUSH
15987: LD_VAR 0 1
15991: PPUSH
15992: CALL_OW 251
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: LD_INT 3
16004: PPUSH
16005: LD_INT 12
16007: PPUSH
16008: CALL_OW 12
16012: PPUSH
16013: CALL_OW 273
16017: ST_TO_ADDR
// if ValidHex ( x , y ) then
16018: LD_VAR 0 2
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: CALL_OW 488
16032: IFFALSE 16067
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 3
16051: PPUSH
16052: LD_INT 6
16054: PPUSH
16055: CALL_OW 12
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 483
// end ;
16067: GO 15927
16069: POP
16070: POP
// end ;
16071: PPOPN 5
16073: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16074: LD_EXP 27
16078: PUSH
16079: LD_EXP 62
16083: AND
16084: IFFALSE 16178
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 32
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 69
16139: ST_TO_ADDR
// if not tmp then
16140: LD_VAR 0 2
16144: NOT
16145: IFFALSE 16149
// exit ;
16147: GO 16178
// for i in tmp do
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: LD_VAR 0 2
16158: PUSH
16159: FOR_IN
16160: IFFALSE 16176
// SetFuel ( i , 0 ) ;
16162: LD_VAR 0 1
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: CALL_OW 240
16174: GO 16159
16176: POP
16177: POP
// end ;
16178: PPOPN 2
16180: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16181: LD_EXP 27
16185: PUSH
16186: LD_EXP 63
16190: AND
16191: IFFALSE 16257
16193: GO 16195
16195: DISABLE
16196: LD_INT 0
16198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16199: LD_ADDR_VAR 0 1
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 29
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 1
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16257
// DestroyUnit ( tmp [ 1 ] ) ;
16244: LD_VAR 0 1
16248: PUSH
16249: LD_INT 1
16251: ARRAY
16252: PPUSH
16253: CALL_OW 65
// end ;
16257: PPOPN 1
16259: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16260: LD_EXP 27
16264: PUSH
16265: LD_EXP 65
16269: AND
16270: IFFALSE 16399
16272: GO 16274
16274: DISABLE
16275: LD_INT 0
16277: PPUSH
// begin uc_side := 0 ;
16278: LD_ADDR_OWVAR 20
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// uc_nation := nation_arabian ;
16286: LD_ADDR_OWVAR 21
16290: PUSH
16291: LD_INT 2
16293: ST_TO_ADDR
// hc_gallery :=  ;
16294: LD_ADDR_OWVAR 33
16298: PUSH
16299: LD_STRING 
16301: ST_TO_ADDR
// hc_name :=  ;
16302: LD_ADDR_OWVAR 26
16306: PUSH
16307: LD_STRING 
16309: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16310: LD_INT 1
16312: PPUSH
16313: LD_INT 11
16315: PPUSH
16316: LD_INT 10
16318: PPUSH
16319: CALL_OW 380
// un := CreateHuman ;
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: CALL_OW 44
16332: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16345: LD_INT 35
16347: PPUSH
16348: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16352: LD_VAR 0 1
16356: PPUSH
16357: LD_INT 22
16359: PUSH
16360: LD_OWVAR 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: PPUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 74
16383: PPUSH
16384: CALL_OW 115
// until IsDead ( un ) ;
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 301
16397: IFFALSE 16345
// end ;
16399: PPOPN 1
16401: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16402: LD_EXP 27
16406: PUSH
16407: LD_EXP 67
16411: AND
16412: IFFALSE 16424
16414: GO 16416
16416: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16417: LD_STRING earthquake(getX(game), 0, 32)
16419: PPUSH
16420: CALL_OW 559
16424: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16425: LD_EXP 27
16429: PUSH
16430: LD_EXP 68
16434: AND
16435: IFFALSE 16526
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
// begin enable ;
16443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16444: LD_ADDR_VAR 0 1
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_OWVAR 2
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 2
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 33
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// if not tmp then
16491: LD_VAR 0 1
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16500: LD_VAR 0 1
16504: PUSH
16505: LD_INT 1
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 12
16517: ARRAY
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 234
// end ;
16526: PPOPN 1
16528: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16529: LD_EXP 27
16533: PUSH
16534: LD_EXP 69
16538: AND
16539: IFFALSE 16680
16541: GO 16543
16543: DISABLE
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16549: LD_ADDR_VAR 0 3
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_OWVAR 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 25
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if not tmp then
16585: LD_VAR 0 3
16589: NOT
16590: IFFALSE 16594
// exit ;
16592: GO 16680
// un := tmp [ rand ( 1 , tmp ) ] ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_VAR 0 3
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: CALL_OW 12
16616: ARRAY
16617: ST_TO_ADDR
// if Crawls ( un ) then
16618: LD_VAR 0 2
16622: PPUSH
16623: CALL_OW 318
16627: IFFALSE 16638
// ComWalk ( un ) ;
16629: LD_VAR 0 2
16633: PPUSH
16634: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16638: LD_VAR 0 2
16642: PPUSH
16643: LD_INT 9
16645: PPUSH
16646: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16650: LD_INT 28
16652: PPUSH
16653: LD_OWVAR 2
16657: PPUSH
16658: LD_INT 2
16660: PPUSH
16661: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16665: LD_INT 29
16667: PPUSH
16668: LD_OWVAR 2
16672: PPUSH
16673: LD_INT 2
16675: PPUSH
16676: CALL_OW 322
// end ;
16680: PPOPN 3
16682: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16683: LD_EXP 27
16687: PUSH
16688: LD_EXP 70
16692: AND
16693: IFFALSE 16804
16695: GO 16697
16697: DISABLE
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_INT 22
16710: PUSH
16711: LD_OWVAR 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 25
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 69
16738: ST_TO_ADDR
// if not tmp then
16739: LD_VAR 0 3
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16804
// un := tmp [ rand ( 1 , tmp ) ] ;
16748: LD_ADDR_VAR 0 2
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_INT 1
16760: PPUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: ST_TO_ADDR
// if Crawls ( un ) then
16772: LD_VAR 0 2
16776: PPUSH
16777: CALL_OW 318
16781: IFFALSE 16792
// ComWalk ( un ) ;
16783: LD_VAR 0 2
16787: PPUSH
16788: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16792: LD_VAR 0 2
16796: PPUSH
16797: LD_INT 8
16799: PPUSH
16800: CALL_OW 336
// end ;
16804: PPOPN 3
16806: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16807: LD_EXP 27
16811: PUSH
16812: LD_EXP 71
16816: AND
16817: IFFALSE 16961
16819: GO 16821
16821: DISABLE
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 22
16833: PUSH
16834: LD_OWVAR 2
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 21
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 34
16858: PUSH
16859: LD_INT 12
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 34
16868: PUSH
16869: LD_INT 51
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 34
16878: PUSH
16879: LD_INT 32
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: ST_TO_ADDR
// if not tmp then
16902: LD_VAR 0 2
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 16961
// for i in tmp do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_VAR 0 2
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16959
// if GetCargo ( i , mat_artifact ) = 0 then
16924: LD_VAR 0 1
16928: PPUSH
16929: LD_INT 4
16931: PPUSH
16932: CALL_OW 289
16936: PUSH
16937: LD_INT 0
16939: EQUAL
16940: IFFALSE 16957
// SetCargo ( i , mat_siberit , 100 ) ;
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: LD_INT 100
16952: PPUSH
16953: CALL_OW 290
16957: GO 16921
16959: POP
16960: POP
// end ;
16961: PPOPN 2
16963: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16964: LD_EXP 27
16968: PUSH
16969: LD_EXP 72
16973: AND
16974: IFFALSE 17157
16976: GO 16978
16978: DISABLE
16979: LD_INT 0
16981: PPUSH
16982: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16983: LD_ADDR_VAR 0 2
16987: PUSH
16988: LD_INT 22
16990: PUSH
16991: LD_OWVAR 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 2
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17157
// for i := 1 to 2 do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: DOUBLE
17020: LD_INT 1
17022: DEC
17023: ST_TO_ADDR
17024: LD_INT 2
17026: PUSH
17027: FOR_TO
17028: IFFALSE 17155
// begin uc_side := your_side ;
17030: LD_ADDR_OWVAR 20
17034: PUSH
17035: LD_OWVAR 2
17039: ST_TO_ADDR
// uc_nation := nation_american ;
17040: LD_ADDR_OWVAR 21
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// vc_chassis := us_morphling ;
17048: LD_ADDR_OWVAR 37
17052: PUSH
17053: LD_INT 5
17055: ST_TO_ADDR
// vc_engine := engine_siberite ;
17056: LD_ADDR_OWVAR 39
17060: PUSH
17061: LD_INT 3
17063: ST_TO_ADDR
// vc_control := control_computer ;
17064: LD_ADDR_OWVAR 38
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17072: LD_ADDR_OWVAR 40
17076: PUSH
17077: LD_INT 10
17079: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17080: LD_VAR 0 2
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: CALL_OW 310
17093: NOT
17094: IFFALSE 17141
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17096: CALL_OW 45
17100: PPUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: PPUSH
17110: CALL_OW 250
17114: PPUSH
17115: LD_VAR 0 2
17119: PUSH
17120: LD_INT 1
17122: ARRAY
17123: PPUSH
17124: CALL_OW 251
17128: PPUSH
17129: LD_INT 12
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 50
17139: GO 17153
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17141: CALL_OW 45
17145: PPUSH
17146: LD_INT 1
17148: PPUSH
17149: CALL_OW 51
// end ;
17153: GO 17027
17155: POP
17156: POP
// end ;
17157: PPOPN 2
17159: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17160: LD_EXP 27
17164: PUSH
17165: LD_EXP 73
17169: AND
17170: IFFALSE 17392
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17183: LD_ADDR_VAR 0 6
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_OWVAR 2
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 21
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 23
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 6
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17392
// s1 := rand ( 1 , 4 ) ;
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 1
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: CALL_OW 12
17261: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17262: LD_ADDR_VAR 0 4
17266: PUSH
17267: LD_VAR 0 6
17271: PUSH
17272: LD_INT 1
17274: ARRAY
17275: PPUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: CALL_OW 259
17285: ST_TO_ADDR
// if s1 = 1 then
17286: LD_VAR 0 2
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17314
// s2 := rand ( 2 , 4 ) else
17296: LD_ADDR_VAR 0 3
17300: PUSH
17301: LD_INT 2
17303: PPUSH
17304: LD_INT 4
17306: PPUSH
17307: CALL_OW 12
17311: ST_TO_ADDR
17312: GO 17322
// s2 := 1 ;
17314: LD_ADDR_VAR 0 3
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17322: LD_ADDR_VAR 0 5
17326: PUSH
17327: LD_VAR 0 6
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: PPUSH
17336: LD_VAR 0 3
17340: PPUSH
17341: CALL_OW 259
17345: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17346: LD_VAR 0 6
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PPUSH
17355: LD_VAR 0 2
17359: PPUSH
17360: LD_VAR 0 5
17364: PPUSH
17365: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17369: LD_VAR 0 6
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_VAR 0 4
17387: PPUSH
17388: CALL_OW 237
// end ;
17392: PPOPN 6
17394: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17395: LD_EXP 27
17399: PUSH
17400: LD_EXP 74
17404: AND
17405: IFFALSE 17484
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_OWVAR 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 30
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: ST_TO_ADDR
// if not tmp then
17449: LD_VAR 0 1
17453: NOT
17454: IFFALSE 17458
// exit ;
17456: GO 17484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17458: LD_VAR 0 1
17462: PUSH
17463: LD_INT 1
17465: PPUSH
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 12
17475: ARRAY
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 234
// end ;
17484: PPOPN 1
17486: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17487: LD_EXP 27
17491: PUSH
17492: LD_EXP 75
17496: AND
17497: IFFALSE 17609
17499: GO 17501
17501: DISABLE
17502: LD_INT 0
17504: PPUSH
17505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17506: LD_ADDR_VAR 0 2
17510: PUSH
17511: LD_INT 22
17513: PUSH
17514: LD_OWVAR 2
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 27
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: LD_INT 26
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 30
17548: PUSH
17549: LD_INT 28
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: ST_TO_ADDR
// if not tmp then
17571: LD_VAR 0 2
17575: NOT
17576: IFFALSE 17580
// exit ;
17578: GO 17609
// for i in tmp do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: LD_VAR 0 2
17589: PUSH
17590: FOR_IN
17591: IFFALSE 17607
// SetLives ( i , 1 ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 234
17605: GO 17590
17607: POP
17608: POP
// end ;
17609: PPOPN 2
17611: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17612: LD_EXP 27
17616: PUSH
17617: LD_EXP 76
17621: AND
17622: IFFALSE 17909
17624: GO 17626
17626: DISABLE
17627: LD_INT 0
17629: PPUSH
17630: PPUSH
17631: PPUSH
// begin i := rand ( 1 , 7 ) ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 7
17642: PPUSH
17643: CALL_OW 12
17647: ST_TO_ADDR
// case i of 1 :
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17661
17659: GO 17671
17661: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17662: LD_STRING earthquake(getX(game), 0, 32)
17664: PPUSH
17665: CALL_OW 559
17669: GO 17909
17671: LD_INT 2
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17693
17679: POP
// begin ToLua ( displayStucuk(); ) ;
17680: LD_STRING displayStucuk();
17682: PPUSH
17683: CALL_OW 559
// ResetFog ;
17687: CALL_OW 335
// end ; 3 :
17691: GO 17909
17693: LD_INT 3
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17805
17701: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_OWVAR 2
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: ST_TO_ADDR
// if not tmp then
17738: LD_VAR 0 2
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17747: LD_ADDR_VAR 0 3
17751: PUSH
17752: LD_VAR 0 2
17756: PUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_VAR 0 2
17764: PPUSH
17765: CALL_OW 12
17769: ARRAY
17770: ST_TO_ADDR
// if Crawls ( un ) then
17771: LD_VAR 0 3
17775: PPUSH
17776: CALL_OW 318
17780: IFFALSE 17791
// ComWalk ( un ) ;
17782: LD_VAR 0 3
17786: PPUSH
17787: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 8
17798: PPUSH
17799: CALL_OW 336
// end ; 4 :
17803: GO 17909
17805: LD_INT 4
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17813
17811: GO 17887
17813: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_OWVAR 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 29
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 69
17849: ST_TO_ADDR
// if not tmp then
17850: LD_VAR 0 2
17854: NOT
17855: IFFALSE 17859
// exit ;
17857: GO 17909
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17859: LD_VAR 0 2
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17872: LD_VAR 0 2
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 65
// end ; 5 .. 7 :
17885: GO 17909
17887: LD_INT 5
17889: DOUBLE
17890: GREATEREQUAL
17891: IFFALSE 17899
17893: LD_INT 7
17895: DOUBLE
17896: LESSEQUAL
17897: IFTRUE 17901
17899: GO 17908
17901: POP
// StreamSibBomb ; end ;
17902: CALL 14146 0 0
17906: GO 17909
17908: POP
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17912: LD_EXP 27
17916: PUSH
17917: LD_EXP 77
17921: AND
17922: IFFALSE 18078
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_INT 81
17939: PUSH
17940: LD_OWVAR 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 21
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 21
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: ST_TO_ADDR
// if not tmp then
17986: LD_VAR 0 2
17990: NOT
17991: IFFALSE 17995
// exit ;
17993: GO 18078
// p := 0 ;
17995: LD_ADDR_VAR 0 3
17999: PUSH
18000: LD_INT 0
18002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18003: LD_INT 35
18005: PPUSH
18006: CALL_OW 67
// p := p + 1 ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: ST_TO_ADDR
// for i in tmp do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 2
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18066
// if GetLives ( i ) < 1000 then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 256
18046: PUSH
18047: LD_INT 1000
18049: LESS
18050: IFFALSE 18064
// SetLives ( i , 1000 ) ;
18052: LD_VAR 0 1
18056: PPUSH
18057: LD_INT 1000
18059: PPUSH
18060: CALL_OW 234
18064: GO 18034
18066: POP
18067: POP
// until p > 20 ;
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 20
18075: GREATER
18076: IFFALSE 18003
// end ;
18078: PPOPN 3
18080: END
// every 0 0$1 trigger StreamModeActive and sTime do
18081: LD_EXP 27
18085: PUSH
18086: LD_EXP 78
18090: AND
18091: IFFALSE 18126
18093: GO 18095
18095: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18096: LD_INT 28
18098: PPUSH
18099: LD_OWVAR 2
18103: PPUSH
18104: LD_INT 2
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18111: LD_INT 30
18113: PPUSH
18114: LD_OWVAR 2
18118: PPUSH
18119: LD_INT 2
18121: PPUSH
18122: CALL_OW 322
// end ;
18126: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18127: LD_EXP 27
18131: PUSH
18132: LD_EXP 79
18136: AND
18137: IFFALSE 18258
18139: GO 18141
18141: DISABLE
18142: LD_INT 0
18144: PPUSH
18145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_INT 22
18153: PUSH
18154: LD_OWVAR 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: LD_INT 23
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PPUSH
18195: CALL_OW 69
18199: ST_TO_ADDR
// if not tmp then
18200: LD_VAR 0 2
18204: NOT
18205: IFFALSE 18209
// exit ;
18207: GO 18258
// for i in tmp do
18209: LD_ADDR_VAR 0 1
18213: PUSH
18214: LD_VAR 0 2
18218: PUSH
18219: FOR_IN
18220: IFFALSE 18256
// begin if Crawls ( i ) then
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 318
18231: IFFALSE 18242
// ComWalk ( i ) ;
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 138
// SetClass ( i , 2 ) ;
18242: LD_VAR 0 1
18246: PPUSH
18247: LD_INT 2
18249: PPUSH
18250: CALL_OW 336
// end ;
18254: GO 18219
18256: POP
18257: POP
// end ;
18258: PPOPN 2
18260: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18261: LD_EXP 27
18265: PUSH
18266: LD_EXP 80
18270: AND
18271: IFFALSE 18559
18273: GO 18275
18275: DISABLE
18276: LD_INT 0
18278: PPUSH
18279: PPUSH
18280: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18281: LD_OWVAR 2
18285: PPUSH
18286: LD_INT 9
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_INT 1
18294: PPUSH
18295: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18299: LD_INT 9
18301: PPUSH
18302: LD_OWVAR 2
18306: PPUSH
18307: CALL_OW 343
// uc_side := 9 ;
18311: LD_ADDR_OWVAR 20
18315: PUSH
18316: LD_INT 9
18318: ST_TO_ADDR
// uc_nation := 2 ;
18319: LD_ADDR_OWVAR 21
18323: PUSH
18324: LD_INT 2
18326: ST_TO_ADDR
// hc_name := Dark Warrior ;
18327: LD_ADDR_OWVAR 26
18331: PUSH
18332: LD_STRING Dark Warrior
18334: ST_TO_ADDR
// hc_gallery :=  ;
18335: LD_ADDR_OWVAR 33
18339: PUSH
18340: LD_STRING 
18342: ST_TO_ADDR
// hc_noskilllimit := true ;
18343: LD_ADDR_OWVAR 76
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18351: LD_ADDR_OWVAR 31
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 30
18361: PUSH
18362: LD_INT 30
18364: PUSH
18365: LD_INT 30
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: ST_TO_ADDR
// un := CreateHuman ;
18374: LD_ADDR_VAR 0 3
18378: PUSH
18379: CALL_OW 44
18383: ST_TO_ADDR
// hc_noskilllimit := false ;
18384: LD_ADDR_OWVAR 76
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_INT 1
18399: PPUSH
18400: CALL_OW 51
// ToLua ( playRanger() ) ;
18404: LD_STRING playRanger()
18406: PPUSH
18407: CALL_OW 559
// p := 0 ;
18411: LD_ADDR_VAR 0 2
18415: PUSH
18416: LD_INT 0
18418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18419: LD_INT 35
18421: PPUSH
18422: CALL_OW 67
// p := p + 1 ;
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_INT 1
18438: PLUS
18439: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 256
18449: PUSH
18450: LD_INT 1000
18452: LESS
18453: IFFALSE 18467
// SetLives ( un , 1000 ) ;
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 1000
18462: PPUSH
18463: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18467: LD_VAR 0 3
18471: PPUSH
18472: LD_INT 81
18474: PUSH
18475: LD_OWVAR 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 91
18486: PUSH
18487: LD_VAR 0 3
18491: PUSH
18492: LD_INT 30
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: PPUSH
18509: LD_VAR 0 3
18513: PPUSH
18514: CALL_OW 74
18518: PPUSH
18519: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 80
18530: GREATER
18531: PUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: CALL_OW 301
18541: OR
18542: IFFALSE 18419
// if un then
18544: LD_VAR 0 3
18548: IFFALSE 18559
// RemoveUnit ( un ) ;
18550: LD_VAR 0 3
18554: PPUSH
18555: CALL_OW 64
// end ;
18559: PPOPN 3
18561: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18562: LD_EXP 81
18566: IFFALSE 18682
18568: GO 18570
18570: DISABLE
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18576: LD_ADDR_VAR 0 2
18580: PUSH
18581: LD_INT 81
18583: PUSH
18584: LD_OWVAR 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 21
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18612: LD_STRING playComputer()
18614: PPUSH
18615: CALL_OW 559
// if not tmp then
18619: LD_VAR 0 2
18623: NOT
18624: IFFALSE 18628
// exit ;
18626: GO 18682
// for i in tmp do
18628: LD_ADDR_VAR 0 1
18632: PUSH
18633: LD_VAR 0 2
18637: PUSH
18638: FOR_IN
18639: IFFALSE 18680
// for j := 1 to 4 do
18641: LD_ADDR_VAR 0 3
18645: PUSH
18646: DOUBLE
18647: LD_INT 1
18649: DEC
18650: ST_TO_ADDR
18651: LD_INT 4
18653: PUSH
18654: FOR_TO
18655: IFFALSE 18676
// SetSkill ( i , j , 10 ) ;
18657: LD_VAR 0 1
18661: PPUSH
18662: LD_VAR 0 3
18666: PPUSH
18667: LD_INT 10
18669: PPUSH
18670: CALL_OW 237
18674: GO 18654
18676: POP
18677: POP
18678: GO 18638
18680: POP
18681: POP
// end ;
18682: PPOPN 3
18684: END
// every 0 0$1 trigger s30 do var i , tmp ;
18685: LD_EXP 82
18689: IFFALSE 18758
18691: GO 18693
18693: DISABLE
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18698: LD_ADDR_VAR 0 2
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_OWVAR 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: ST_TO_ADDR
// if not tmp then
18720: LD_VAR 0 2
18724: NOT
18725: IFFALSE 18729
// exit ;
18727: GO 18758
// for i in tmp do
18729: LD_ADDR_VAR 0 1
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: FOR_IN
18740: IFFALSE 18756
// SetLives ( i , 300 ) ;
18742: LD_VAR 0 1
18746: PPUSH
18747: LD_INT 300
18749: PPUSH
18750: CALL_OW 234
18754: GO 18739
18756: POP
18757: POP
// end ;
18758: PPOPN 2
18760: END
// every 0 0$1 trigger s60 do var i , tmp ;
18761: LD_EXP 83
18765: IFFALSE 18834
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18774: LD_ADDR_VAR 0 2
18778: PUSH
18779: LD_INT 22
18781: PUSH
18782: LD_OWVAR 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 69
18795: ST_TO_ADDR
// if not tmp then
18796: LD_VAR 0 2
18800: NOT
18801: IFFALSE 18805
// exit ;
18803: GO 18834
// for i in tmp do
18805: LD_ADDR_VAR 0 1
18809: PUSH
18810: LD_VAR 0 2
18814: PUSH
18815: FOR_IN
18816: IFFALSE 18832
// SetLives ( i , 600 ) ;
18818: LD_VAR 0 1
18822: PPUSH
18823: LD_INT 600
18825: PPUSH
18826: CALL_OW 234
18830: GO 18815
18832: POP
18833: POP
// end ;
18834: PPOPN 2
18836: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18837: LD_INT 0
18839: PPUSH
// case cmd of 301 :
18840: LD_VAR 0 1
18844: PUSH
18845: LD_INT 301
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18885
18853: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18854: LD_VAR 0 6
18858: PPUSH
18859: LD_VAR 0 7
18863: PPUSH
18864: LD_VAR 0 8
18868: PPUSH
18869: LD_VAR 0 4
18873: PPUSH
18874: LD_VAR 0 5
18878: PPUSH
18879: CALL 20086 0 5
18883: GO 19006
18885: LD_INT 302
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18930
18893: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18894: LD_VAR 0 6
18898: PPUSH
18899: LD_VAR 0 7
18903: PPUSH
18904: LD_VAR 0 8
18908: PPUSH
18909: LD_VAR 0 9
18913: PPUSH
18914: LD_VAR 0 4
18918: PPUSH
18919: LD_VAR 0 5
18923: PPUSH
18924: CALL 20177 0 6
18928: GO 19006
18930: LD_INT 303
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18975
18938: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18939: LD_VAR 0 6
18943: PPUSH
18944: LD_VAR 0 7
18948: PPUSH
18949: LD_VAR 0 8
18953: PPUSH
18954: LD_VAR 0 9
18958: PPUSH
18959: LD_VAR 0 4
18963: PPUSH
18964: LD_VAR 0 5
18968: PPUSH
18969: CALL 19011 0 6
18973: GO 19006
18975: LD_INT 304
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19005
18983: POP
// hHackTeleport ( unit , x , y ) ; end ;
18984: LD_VAR 0 2
18988: PPUSH
18989: LD_VAR 0 4
18993: PPUSH
18994: LD_VAR 0 5
18998: PPUSH
18999: CALL 20770 0 3
19003: GO 19006
19005: POP
// end ;
19006: LD_VAR 0 12
19010: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19011: LD_INT 0
19013: PPUSH
19014: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 1
19022: LESS
19023: PUSH
19024: LD_VAR 0 1
19028: PUSH
19029: LD_INT 3
19031: GREATER
19032: OR
19033: PUSH
19034: LD_VAR 0 5
19038: PPUSH
19039: LD_VAR 0 6
19043: PPUSH
19044: CALL_OW 428
19048: OR
19049: IFFALSE 19053
// exit ;
19051: GO 19773
// uc_side := your_side ;
19053: LD_ADDR_OWVAR 20
19057: PUSH
19058: LD_OWVAR 2
19062: ST_TO_ADDR
// uc_nation := nation ;
19063: LD_ADDR_OWVAR 21
19067: PUSH
19068: LD_VAR 0 1
19072: ST_TO_ADDR
// bc_level = 1 ;
19073: LD_ADDR_OWVAR 43
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// case btype of 1 :
19081: LD_VAR 0 2
19085: PUSH
19086: LD_INT 1
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19105
19094: POP
// bc_type := b_depot ; 2 :
19095: LD_ADDR_OWVAR 42
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
19103: GO 19717
19105: LD_INT 2
19107: DOUBLE
19108: EQUAL
19109: IFTRUE 19113
19111: GO 19124
19113: POP
// bc_type := b_warehouse ; 3 :
19114: LD_ADDR_OWVAR 42
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
19122: GO 19717
19124: LD_INT 3
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19143
19132: POP
// bc_type := b_lab ; 4 .. 9 :
19133: LD_ADDR_OWVAR 42
19137: PUSH
19138: LD_INT 6
19140: ST_TO_ADDR
19141: GO 19717
19143: LD_INT 4
19145: DOUBLE
19146: GREATEREQUAL
19147: IFFALSE 19155
19149: LD_INT 9
19151: DOUBLE
19152: LESSEQUAL
19153: IFTRUE 19157
19155: GO 19209
19157: POP
// begin bc_type := b_lab_half ;
19158: LD_ADDR_OWVAR 42
19162: PUSH
19163: LD_INT 7
19165: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19166: LD_ADDR_OWVAR 44
19170: PUSH
19171: LD_INT 10
19173: PUSH
19174: LD_INT 11
19176: PUSH
19177: LD_INT 12
19179: PUSH
19180: LD_INT 15
19182: PUSH
19183: LD_INT 14
19185: PUSH
19186: LD_INT 13
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: PUSH
19197: LD_VAR 0 2
19201: PUSH
19202: LD_INT 3
19204: MINUS
19205: ARRAY
19206: ST_TO_ADDR
// end ; 10 .. 13 :
19207: GO 19717
19209: LD_INT 10
19211: DOUBLE
19212: GREATEREQUAL
19213: IFFALSE 19221
19215: LD_INT 13
19217: DOUBLE
19218: LESSEQUAL
19219: IFTRUE 19223
19221: GO 19300
19223: POP
// begin bc_type := b_lab_full ;
19224: LD_ADDR_OWVAR 42
19228: PUSH
19229: LD_INT 8
19231: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19232: LD_ADDR_OWVAR 44
19236: PUSH
19237: LD_INT 10
19239: PUSH
19240: LD_INT 12
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: LD_INT 13
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_VAR 0 2
19259: PUSH
19260: LD_INT 9
19262: MINUS
19263: ARRAY
19264: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19265: LD_ADDR_OWVAR 45
19269: PUSH
19270: LD_INT 11
19272: PUSH
19273: LD_INT 15
19275: PUSH
19276: LD_INT 12
19278: PUSH
19279: LD_INT 15
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: PUSH
19288: LD_VAR 0 2
19292: PUSH
19293: LD_INT 9
19295: MINUS
19296: ARRAY
19297: ST_TO_ADDR
// end ; 14 :
19298: GO 19717
19300: LD_INT 14
19302: DOUBLE
19303: EQUAL
19304: IFTRUE 19308
19306: GO 19319
19308: POP
// bc_type := b_workshop ; 15 :
19309: LD_ADDR_OWVAR 42
19313: PUSH
19314: LD_INT 2
19316: ST_TO_ADDR
19317: GO 19717
19319: LD_INT 15
19321: DOUBLE
19322: EQUAL
19323: IFTRUE 19327
19325: GO 19338
19327: POP
// bc_type := b_factory ; 16 :
19328: LD_ADDR_OWVAR 42
19332: PUSH
19333: LD_INT 3
19335: ST_TO_ADDR
19336: GO 19717
19338: LD_INT 16
19340: DOUBLE
19341: EQUAL
19342: IFTRUE 19346
19344: GO 19357
19346: POP
// bc_type := b_ext_gun ; 17 :
19347: LD_ADDR_OWVAR 42
19351: PUSH
19352: LD_INT 17
19354: ST_TO_ADDR
19355: GO 19717
19357: LD_INT 17
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19393
19365: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19366: LD_ADDR_OWVAR 42
19370: PUSH
19371: LD_INT 19
19373: PUSH
19374: LD_INT 23
19376: PUSH
19377: LD_INT 19
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PUSH
19385: LD_VAR 0 1
19389: ARRAY
19390: ST_TO_ADDR
19391: GO 19717
19393: LD_INT 18
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19412
19401: POP
// bc_type := b_ext_radar ; 19 :
19402: LD_ADDR_OWVAR 42
19406: PUSH
19407: LD_INT 20
19409: ST_TO_ADDR
19410: GO 19717
19412: LD_INT 19
19414: DOUBLE
19415: EQUAL
19416: IFTRUE 19420
19418: GO 19431
19420: POP
// bc_type := b_ext_radio ; 20 :
19421: LD_ADDR_OWVAR 42
19425: PUSH
19426: LD_INT 22
19428: ST_TO_ADDR
19429: GO 19717
19431: LD_INT 20
19433: DOUBLE
19434: EQUAL
19435: IFTRUE 19439
19437: GO 19450
19439: POP
// bc_type := b_ext_siberium ; 21 :
19440: LD_ADDR_OWVAR 42
19444: PUSH
19445: LD_INT 21
19447: ST_TO_ADDR
19448: GO 19717
19450: LD_INT 21
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19469
19458: POP
// bc_type := b_ext_computer ; 22 :
19459: LD_ADDR_OWVAR 42
19463: PUSH
19464: LD_INT 24
19466: ST_TO_ADDR
19467: GO 19717
19469: LD_INT 22
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19488
19477: POP
// bc_type := b_ext_track ; 23 :
19478: LD_ADDR_OWVAR 42
19482: PUSH
19483: LD_INT 16
19485: ST_TO_ADDR
19486: GO 19717
19488: LD_INT 23
19490: DOUBLE
19491: EQUAL
19492: IFTRUE 19496
19494: GO 19507
19496: POP
// bc_type := b_ext_laser ; 24 :
19497: LD_ADDR_OWVAR 42
19501: PUSH
19502: LD_INT 25
19504: ST_TO_ADDR
19505: GO 19717
19507: LD_INT 24
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19526
19515: POP
// bc_type := b_control_tower ; 25 :
19516: LD_ADDR_OWVAR 42
19520: PUSH
19521: LD_INT 36
19523: ST_TO_ADDR
19524: GO 19717
19526: LD_INT 25
19528: DOUBLE
19529: EQUAL
19530: IFTRUE 19534
19532: GO 19545
19534: POP
// bc_type := b_breastwork ; 26 :
19535: LD_ADDR_OWVAR 42
19539: PUSH
19540: LD_INT 31
19542: ST_TO_ADDR
19543: GO 19717
19545: LD_INT 26
19547: DOUBLE
19548: EQUAL
19549: IFTRUE 19553
19551: GO 19564
19553: POP
// bc_type := b_bunker ; 27 :
19554: LD_ADDR_OWVAR 42
19558: PUSH
19559: LD_INT 32
19561: ST_TO_ADDR
19562: GO 19717
19564: LD_INT 27
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19583
19572: POP
// bc_type := b_turret ; 28 :
19573: LD_ADDR_OWVAR 42
19577: PUSH
19578: LD_INT 33
19580: ST_TO_ADDR
19581: GO 19717
19583: LD_INT 28
19585: DOUBLE
19586: EQUAL
19587: IFTRUE 19591
19589: GO 19602
19591: POP
// bc_type := b_armoury ; 29 :
19592: LD_ADDR_OWVAR 42
19596: PUSH
19597: LD_INT 4
19599: ST_TO_ADDR
19600: GO 19717
19602: LD_INT 29
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19621
19610: POP
// bc_type := b_barracks ; 30 :
19611: LD_ADDR_OWVAR 42
19615: PUSH
19616: LD_INT 5
19618: ST_TO_ADDR
19619: GO 19717
19621: LD_INT 30
19623: DOUBLE
19624: EQUAL
19625: IFTRUE 19629
19627: GO 19640
19629: POP
// bc_type := b_solar_power ; 31 :
19630: LD_ADDR_OWVAR 42
19634: PUSH
19635: LD_INT 27
19637: ST_TO_ADDR
19638: GO 19717
19640: LD_INT 31
19642: DOUBLE
19643: EQUAL
19644: IFTRUE 19648
19646: GO 19659
19648: POP
// bc_type := b_oil_power ; 32 :
19649: LD_ADDR_OWVAR 42
19653: PUSH
19654: LD_INT 26
19656: ST_TO_ADDR
19657: GO 19717
19659: LD_INT 32
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19678
19667: POP
// bc_type := b_siberite_power ; 33 :
19668: LD_ADDR_OWVAR 42
19672: PUSH
19673: LD_INT 28
19675: ST_TO_ADDR
19676: GO 19717
19678: LD_INT 33
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19697
19686: POP
// bc_type := b_oil_mine ; 34 :
19687: LD_ADDR_OWVAR 42
19691: PUSH
19692: LD_INT 29
19694: ST_TO_ADDR
19695: GO 19717
19697: LD_INT 34
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19716
19705: POP
// bc_type := b_siberite_mine ; end ;
19706: LD_ADDR_OWVAR 42
19710: PUSH
19711: LD_INT 30
19713: ST_TO_ADDR
19714: GO 19717
19716: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19717: LD_ADDR_VAR 0 8
19721: PUSH
19722: LD_VAR 0 5
19726: PPUSH
19727: LD_VAR 0 6
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: CALL_OW 47
19741: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19742: LD_OWVAR 42
19746: PUSH
19747: LD_INT 32
19749: PUSH
19750: LD_INT 33
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: IN
19757: IFFALSE 19773
// PlaceWeaponTurret ( b , weapon ) ;
19759: LD_VAR 0 8
19763: PPUSH
19764: LD_VAR 0 4
19768: PPUSH
19769: CALL_OW 431
// end ;
19773: LD_VAR 0 7
19777: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19778: LD_INT 0
19780: PPUSH
19781: PPUSH
19782: PPUSH
19783: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19784: LD_ADDR_VAR 0 4
19788: PUSH
19789: LD_INT 22
19791: PUSH
19792: LD_OWVAR 2
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 30
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 30
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: ST_TO_ADDR
// if not tmp then
19838: LD_VAR 0 4
19842: NOT
19843: IFFALSE 19847
// exit ;
19845: GO 19906
// for i in tmp do
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: LD_VAR 0 4
19856: PUSH
19857: FOR_IN
19858: IFFALSE 19904
// for j = 1 to 3 do
19860: LD_ADDR_VAR 0 3
19864: PUSH
19865: DOUBLE
19866: LD_INT 1
19868: DEC
19869: ST_TO_ADDR
19870: LD_INT 3
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19900
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19876: LD_VAR 0 2
19880: PPUSH
19881: CALL_OW 274
19885: PPUSH
19886: LD_VAR 0 3
19890: PPUSH
19891: LD_INT 99999
19893: PPUSH
19894: CALL_OW 277
19898: GO 19873
19900: POP
19901: POP
19902: GO 19857
19904: POP
19905: POP
// end ;
19906: LD_VAR 0 1
19910: RET
// export function hHackSetLevel10 ; var i , j ; begin
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19916: LD_ADDR_VAR 0 2
19920: PUSH
19921: LD_INT 21
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19989
// if IsSelected ( i ) then
19939: LD_VAR 0 2
19943: PPUSH
19944: CALL_OW 306
19948: IFFALSE 19987
// begin for j := 1 to 4 do
19950: LD_ADDR_VAR 0 3
19954: PUSH
19955: DOUBLE
19956: LD_INT 1
19958: DEC
19959: ST_TO_ADDR
19960: LD_INT 4
19962: PUSH
19963: FOR_TO
19964: IFFALSE 19985
// SetSkill ( i , j , 10 ) ;
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 10
19978: PPUSH
19979: CALL_OW 237
19983: GO 19963
19985: POP
19986: POP
// end ;
19987: GO 19936
19989: POP
19990: POP
// end ;
19991: LD_VAR 0 1
19995: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19996: LD_INT 0
19998: PPUSH
19999: PPUSH
20000: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 21
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: PUSH
20037: FOR_IN
20038: IFFALSE 20079
// begin for j := 1 to 4 do
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: DOUBLE
20046: LD_INT 1
20048: DEC
20049: ST_TO_ADDR
20050: LD_INT 4
20052: PUSH
20053: FOR_TO
20054: IFFALSE 20075
// SetSkill ( i , j , 10 ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_INT 10
20068: PPUSH
20069: CALL_OW 237
20073: GO 20053
20075: POP
20076: POP
// end ;
20077: GO 20037
20079: POP
20080: POP
// end ;
20081: LD_VAR 0 1
20085: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20086: LD_INT 0
20088: PPUSH
// uc_side := your_side ;
20089: LD_ADDR_OWVAR 20
20093: PUSH
20094: LD_OWVAR 2
20098: ST_TO_ADDR
// uc_nation := nation ;
20099: LD_ADDR_OWVAR 21
20103: PUSH
20104: LD_VAR 0 1
20108: ST_TO_ADDR
// InitHc ;
20109: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20113: LD_INT 0
20115: PPUSH
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20130: LD_VAR 0 4
20134: PPUSH
20135: LD_VAR 0 5
20139: PPUSH
20140: CALL_OW 428
20144: PUSH
20145: LD_INT 0
20147: EQUAL
20148: IFFALSE 20172
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20150: CALL_OW 44
20154: PPUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 48
// end ;
20172: LD_VAR 0 6
20176: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20177: LD_INT 0
20179: PPUSH
20180: PPUSH
// uc_side := your_side ;
20181: LD_ADDR_OWVAR 20
20185: PUSH
20186: LD_OWVAR 2
20190: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20191: LD_VAR 0 1
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 3
20204: PUSH
20205: LD_INT 4
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: IN
20218: IFFALSE 20230
// uc_nation := nation_american else
20220: LD_ADDR_OWVAR 21
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
20228: GO 20273
// if chassis in [ 11 , 12 , 13 , 14 ] then
20230: LD_VAR 0 1
20234: PUSH
20235: LD_INT 11
20237: PUSH
20238: LD_INT 12
20240: PUSH
20241: LD_INT 13
20243: PUSH
20244: LD_INT 14
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: IN
20253: IFFALSE 20265
// uc_nation := nation_arabian else
20255: LD_ADDR_OWVAR 21
20259: PUSH
20260: LD_INT 2
20262: ST_TO_ADDR
20263: GO 20273
// uc_nation := nation_russian ;
20265: LD_ADDR_OWVAR 21
20269: PUSH
20270: LD_INT 3
20272: ST_TO_ADDR
// vc_chassis := chassis ;
20273: LD_ADDR_OWVAR 37
20277: PUSH
20278: LD_VAR 0 1
20282: ST_TO_ADDR
// vc_engine := engine ;
20283: LD_ADDR_OWVAR 39
20287: PUSH
20288: LD_VAR 0 2
20292: ST_TO_ADDR
// vc_control := control ;
20293: LD_ADDR_OWVAR 38
20297: PUSH
20298: LD_VAR 0 3
20302: ST_TO_ADDR
// vc_weapon := weapon ;
20303: LD_ADDR_OWVAR 40
20307: PUSH
20308: LD_VAR 0 4
20312: ST_TO_ADDR
// un := CreateVehicle ;
20313: LD_ADDR_VAR 0 8
20317: PUSH
20318: CALL_OW 45
20322: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20323: LD_VAR 0 8
20327: PPUSH
20328: LD_INT 0
20330: PPUSH
20331: LD_INT 5
20333: PPUSH
20334: CALL_OW 12
20338: PPUSH
20339: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20343: LD_VAR 0 8
20347: PPUSH
20348: LD_VAR 0 5
20352: PPUSH
20353: LD_VAR 0 6
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 48
// end ;
20365: LD_VAR 0 7
20369: RET
// export hInvincible ; every 1 do
20370: GO 20372
20372: DISABLE
// hInvincible := [ ] ;
20373: LD_ADDR_EXP 84
20377: PUSH
20378: EMPTY
20379: ST_TO_ADDR
20380: END
// every 10 do var i ;
20381: GO 20383
20383: DISABLE
20384: LD_INT 0
20386: PPUSH
// begin enable ;
20387: ENABLE
// if not hInvincible then
20388: LD_EXP 84
20392: NOT
20393: IFFALSE 20397
// exit ;
20395: GO 20441
// for i in hInvincible do
20397: LD_ADDR_VAR 0 1
20401: PUSH
20402: LD_EXP 84
20406: PUSH
20407: FOR_IN
20408: IFFALSE 20439
// if GetLives ( i ) < 1000 then
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 256
20419: PUSH
20420: LD_INT 1000
20422: LESS
20423: IFFALSE 20437
// SetLives ( i , 1000 ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_INT 1000
20432: PPUSH
20433: CALL_OW 234
20437: GO 20407
20439: POP
20440: POP
// end ;
20441: PPOPN 1
20443: END
// export function hHackInvincible ; var i ; begin
20444: LD_INT 0
20446: PPUSH
20447: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 21
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: PUSH
20486: FOR_IN
20487: IFFALSE 20548
// if IsSelected ( i ) then
20489: LD_VAR 0 2
20493: PPUSH
20494: CALL_OW 306
20498: IFFALSE 20546
// begin if i in hInvincible then
20500: LD_VAR 0 2
20504: PUSH
20505: LD_EXP 84
20509: IN
20510: IFFALSE 20530
// hInvincible := hInvincible diff i else
20512: LD_ADDR_EXP 84
20516: PUSH
20517: LD_EXP 84
20521: PUSH
20522: LD_VAR 0 2
20526: DIFF
20527: ST_TO_ADDR
20528: GO 20546
// hInvincible := hInvincible union i ;
20530: LD_ADDR_EXP 84
20534: PUSH
20535: LD_EXP 84
20539: PUSH
20540: LD_VAR 0 2
20544: UNION
20545: ST_TO_ADDR
// end ;
20546: GO 20486
20548: POP
20549: POP
// end ;
20550: LD_VAR 0 1
20554: RET
// export function hHackInvisible ; var i , j ; begin
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20560: LD_ADDR_VAR 0 2
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PPUSH
20575: CALL_OW 69
20579: PUSH
20580: FOR_IN
20581: IFFALSE 20605
// if IsSelected ( i ) then
20583: LD_VAR 0 2
20587: PPUSH
20588: CALL_OW 306
20592: IFFALSE 20603
// ComForceInvisible ( i ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: CALL_OW 496
20603: GO 20580
20605: POP
20606: POP
// end ;
20607: LD_VAR 0 1
20611: RET
// export function hHackChangeYourSide ; begin
20612: LD_INT 0
20614: PPUSH
// if your_side = 8 then
20615: LD_OWVAR 2
20619: PUSH
20620: LD_INT 8
20622: EQUAL
20623: IFFALSE 20635
// your_side := 0 else
20625: LD_ADDR_OWVAR 2
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
20633: GO 20649
// your_side := your_side + 1 ;
20635: LD_ADDR_OWVAR 2
20639: PUSH
20640: LD_OWVAR 2
20644: PUSH
20645: LD_INT 1
20647: PLUS
20648: ST_TO_ADDR
// end ;
20649: LD_VAR 0 1
20653: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20654: LD_INT 0
20656: PPUSH
20657: PPUSH
20658: PPUSH
// for i in all_units do
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_OWVAR 3
20668: PUSH
20669: FOR_IN
20670: IFFALSE 20748
// if IsSelected ( i ) then
20672: LD_VAR 0 2
20676: PPUSH
20677: CALL_OW 306
20681: IFFALSE 20746
// begin j := GetSide ( i ) ;
20683: LD_ADDR_VAR 0 3
20687: PUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 255
20697: ST_TO_ADDR
// if j = 8 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 8
20705: EQUAL
20706: IFFALSE 20718
// j := 0 else
20708: LD_ADDR_VAR 0 3
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
20716: GO 20732
// j := j + 1 ;
20718: LD_ADDR_VAR 0 3
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 1
20730: PLUS
20731: ST_TO_ADDR
// SetSide ( i , j ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_VAR 0 3
20741: PPUSH
20742: CALL_OW 235
// end ;
20746: GO 20669
20748: POP
20749: POP
// end ;
20750: LD_VAR 0 1
20754: RET
// export function hHackFog ; begin
20755: LD_INT 0
20757: PPUSH
// FogOff ( true ) ;
20758: LD_INT 1
20760: PPUSH
20761: CALL_OW 344
// end ;
20765: LD_VAR 0 1
20769: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20770: LD_INT 0
20772: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20773: LD_VAR 0 1
20777: PPUSH
20778: LD_VAR 0 2
20782: PPUSH
20783: LD_VAR 0 3
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 483
// CenterOnXY ( x , y ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 84
// end ; end_of_file
20812: LD_VAR 0 4
20816: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20817: LD_INT 0
20819: PPUSH
20820: PPUSH
20821: PPUSH
20822: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20823: LD_VAR 0 1
20827: PPUSH
20828: CALL_OW 264
20832: PUSH
20833: LD_EXP 100
20837: EQUAL
20838: IFFALSE 20910
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20840: LD_INT 68
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 255
20852: PPUSH
20853: CALL_OW 321
20857: PUSH
20858: LD_INT 2
20860: EQUAL
20861: IFFALSE 20873
// eff := 70 else
20863: LD_ADDR_VAR 0 4
20867: PUSH
20868: LD_INT 70
20870: ST_TO_ADDR
20871: GO 20881
// eff := 30 ;
20873: LD_ADDR_VAR 0 4
20877: PUSH
20878: LD_INT 30
20880: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 250
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 251
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: CALL_OW 495
// end ; end ;
20910: LD_VAR 0 2
20914: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20915: LD_INT 0
20917: PPUSH
// end ;
20918: LD_VAR 0 4
20922: RET
// export function SOS_Command ( cmd ) ; begin
20923: LD_INT 0
20925: PPUSH
// end ;
20926: LD_VAR 0 2
20930: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20931: LD_INT 0
20933: PPUSH
// end ;
20934: LD_VAR 0 6
20938: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
// if not vehicle or not factory then
20943: LD_VAR 0 1
20947: NOT
20948: PUSH
20949: LD_VAR 0 2
20953: NOT
20954: OR
20955: IFFALSE 20959
// exit ;
20957: GO 21190
// if factoryWaypoints >= factory then
20959: LD_EXP 85
20963: PUSH
20964: LD_VAR 0 2
20968: GREATEREQUAL
20969: IFFALSE 21190
// if factoryWaypoints [ factory ] then
20971: LD_EXP 85
20975: PUSH
20976: LD_VAR 0 2
20980: ARRAY
20981: IFFALSE 21190
// begin if GetControl ( vehicle ) = control_manual then
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 263
20992: PUSH
20993: LD_INT 1
20995: EQUAL
20996: IFFALSE 21077
// begin driver := IsDrivenBy ( vehicle ) ;
20998: LD_ADDR_VAR 0 4
21002: PUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 311
21012: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21013: LD_VAR 0 4
21017: PPUSH
21018: LD_EXP 85
21022: PUSH
21023: LD_VAR 0 2
21027: ARRAY
21028: PUSH
21029: LD_INT 3
21031: ARRAY
21032: PPUSH
21033: LD_EXP 85
21037: PUSH
21038: LD_VAR 0 2
21042: ARRAY
21043: PUSH
21044: LD_INT 4
21046: ARRAY
21047: PPUSH
21048: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21052: LD_VAR 0 4
21056: PPUSH
21057: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 2
21070: PPUSH
21071: CALL_OW 180
// end else
21075: GO 21190
// if GetControl ( vehicle ) = control_remote then
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 263
21086: PUSH
21087: LD_INT 2
21089: EQUAL
21090: IFFALSE 21151
// begin wait ( 0 0$2 ) ;
21092: LD_INT 70
21094: PPUSH
21095: CALL_OW 67
// if Connect ( vehicle ) then
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL 33582 0 1
21108: IFFALSE 21149
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21110: LD_VAR 0 1
21114: PPUSH
21115: LD_EXP 85
21119: PUSH
21120: LD_VAR 0 2
21124: ARRAY
21125: PUSH
21126: LD_INT 3
21128: ARRAY
21129: PPUSH
21130: LD_EXP 85
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: PUSH
21141: LD_INT 4
21143: ARRAY
21144: PPUSH
21145: CALL_OW 171
// end else
21149: GO 21190
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_EXP 85
21160: PUSH
21161: LD_VAR 0 2
21165: ARRAY
21166: PUSH
21167: LD_INT 3
21169: ARRAY
21170: PPUSH
21171: LD_EXP 85
21175: PUSH
21176: LD_VAR 0 2
21180: ARRAY
21181: PUSH
21182: LD_INT 4
21184: ARRAY
21185: PPUSH
21186: CALL_OW 171
// end ; end ;
21190: LD_VAR 0 3
21194: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21195: LD_INT 0
21197: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21198: LD_VAR 0 1
21202: PUSH
21203: LD_INT 250
21205: EQUAL
21206: PUSH
21207: LD_VAR 0 2
21211: PPUSH
21212: CALL_OW 264
21216: PUSH
21217: LD_EXP 103
21221: EQUAL
21222: AND
21223: IFFALSE 21244
// MinerPlaceMine ( unit , x , y ) ;
21225: LD_VAR 0 2
21229: PPUSH
21230: LD_VAR 0 4
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL 23972 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21244: LD_VAR 0 1
21248: PUSH
21249: LD_INT 251
21251: EQUAL
21252: PUSH
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL_OW 264
21262: PUSH
21263: LD_EXP 103
21267: EQUAL
21268: AND
21269: IFFALSE 21290
// MinerDetonateMine ( unit , x , y ) ;
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 24249 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 252
21297: EQUAL
21298: PUSH
21299: LD_VAR 0 2
21303: PPUSH
21304: CALL_OW 264
21308: PUSH
21309: LD_EXP 103
21313: EQUAL
21314: AND
21315: IFFALSE 21336
// MinerCreateMinefield ( unit , x , y ) ;
21317: LD_VAR 0 2
21321: PPUSH
21322: LD_VAR 0 4
21326: PPUSH
21327: LD_VAR 0 5
21331: PPUSH
21332: CALL 24666 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21336: LD_VAR 0 1
21340: PUSH
21341: LD_INT 253
21343: EQUAL
21344: PUSH
21345: LD_VAR 0 2
21349: PPUSH
21350: CALL_OW 257
21354: PUSH
21355: LD_INT 5
21357: EQUAL
21358: AND
21359: IFFALSE 21380
// ComBinocular ( unit , x , y ) ;
21361: LD_VAR 0 2
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 25037 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21380: LD_VAR 0 1
21384: PUSH
21385: LD_INT 254
21387: EQUAL
21388: PUSH
21389: LD_VAR 0 2
21393: PPUSH
21394: CALL_OW 264
21398: PUSH
21399: LD_EXP 98
21403: EQUAL
21404: AND
21405: PUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: CALL_OW 263
21415: PUSH
21416: LD_INT 3
21418: EQUAL
21419: AND
21420: IFFALSE 21436
// HackDestroyVehicle ( unit , selectedUnit ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 3
21431: PPUSH
21432: CALL 23332 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 255
21443: EQUAL
21444: PUSH
21445: LD_VAR 0 2
21449: PPUSH
21450: CALL_OW 264
21454: PUSH
21455: LD_INT 14
21457: PUSH
21458: LD_INT 53
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: IN
21465: AND
21466: PUSH
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL_OW 488
21481: AND
21482: IFFALSE 21506
// CutTreeXYR ( unit , x , y , 12 ) ;
21484: LD_VAR 0 2
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_INT 12
21501: PPUSH
21502: CALL 21898 0 4
// if cmd = 256 then
21506: LD_VAR 0 1
21510: PUSH
21511: LD_INT 256
21513: EQUAL
21514: IFFALSE 21535
// SetFactoryWaypoint ( unit , x , y ) ;
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 4
21525: PPUSH
21526: LD_VAR 0 5
21530: PPUSH
21531: CALL 21540 0 3
// end ;
21535: LD_VAR 0 6
21539: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21540: LD_INT 0
21542: PPUSH
21543: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21544: LD_VAR 0 1
21548: NOT
21549: PUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 3
21559: PPUSH
21560: CALL_OW 488
21564: NOT
21565: OR
21566: PUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 266
21576: PUSH
21577: LD_INT 3
21579: NONEQUAL
21580: PUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 247
21590: PUSH
21591: LD_INT 1
21593: EQUAL
21594: NOT
21595: AND
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 21750
// if GetType ( factory ) = unit_human then
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 247
21610: PUSH
21611: LD_INT 1
21613: EQUAL
21614: IFFALSE 21631
// factory := IsInUnit ( factory ) ;
21616: LD_ADDR_VAR 0 1
21620: PUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 310
21630: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 3
21643: NONEQUAL
21644: IFFALSE 21648
// exit ;
21646: GO 21750
// if HexInfo ( x , y ) = factory then
21648: LD_VAR 0 2
21652: PPUSH
21653: LD_VAR 0 3
21657: PPUSH
21658: CALL_OW 428
21662: PUSH
21663: LD_VAR 0 1
21667: EQUAL
21668: IFFALSE 21695
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21670: LD_ADDR_EXP 85
21674: PUSH
21675: LD_EXP 85
21679: PPUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_INT 0
21687: PPUSH
21688: CALL_OW 1
21692: ST_TO_ADDR
21693: GO 21746
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21695: LD_ADDR_EXP 85
21699: PUSH
21700: LD_EXP 85
21704: PPUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 255
21719: PUSH
21720: LD_VAR 0 1
21724: PUSH
21725: LD_VAR 0 2
21729: PUSH
21730: LD_VAR 0 3
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: PPUSH
21741: CALL_OW 1
21745: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21746: CALL 21755 0 0
// end ;
21750: LD_VAR 0 4
21754: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21755: LD_INT 0
21757: PPUSH
21758: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21759: LD_STRING resetFactoryWaypoint();
21761: PPUSH
21762: CALL_OW 559
// if factoryWaypoints then
21766: LD_EXP 85
21770: IFFALSE 21893
// begin for i := 1 to factoryWaypoints do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: DOUBLE
21778: LD_INT 1
21780: DEC
21781: ST_TO_ADDR
21782: LD_EXP 85
21786: PUSH
21787: FOR_TO
21788: IFFALSE 21891
// if factoryWaypoints [ i ] then
21790: LD_EXP 85
21794: PUSH
21795: LD_VAR 0 2
21799: ARRAY
21800: IFFALSE 21889
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21802: LD_STRING setFactoryWaypointXY(
21804: PUSH
21805: LD_EXP 85
21809: PUSH
21810: LD_VAR 0 2
21814: ARRAY
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: STR
21820: PUSH
21821: LD_STRING ,
21823: STR
21824: PUSH
21825: LD_EXP 85
21829: PUSH
21830: LD_VAR 0 2
21834: ARRAY
21835: PUSH
21836: LD_INT 2
21838: ARRAY
21839: STR
21840: PUSH
21841: LD_STRING ,
21843: STR
21844: PUSH
21845: LD_EXP 85
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 3
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_EXP 85
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 4
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING )
21883: STR
21884: PPUSH
21885: CALL_OW 559
21889: GO 21787
21891: POP
21892: POP
// end ; end ;
21893: LD_VAR 0 1
21897: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21909: LD_VAR 0 1
21913: NOT
21914: PUSH
21915: LD_VAR 0 2
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL_OW 488
21929: NOT
21930: OR
21931: PUSH
21932: LD_VAR 0 4
21936: NOT
21937: OR
21938: IFFALSE 21942
// exit ;
21940: GO 22282
// list := [ ] ;
21942: LD_ADDR_VAR 0 13
21946: PUSH
21947: EMPTY
21948: ST_TO_ADDR
// if x - r < 0 then
21949: LD_VAR 0 2
21953: PUSH
21954: LD_VAR 0 4
21958: MINUS
21959: PUSH
21960: LD_INT 0
21962: LESS
21963: IFFALSE 21975
// min_x := 0 else
21965: LD_ADDR_VAR 0 7
21969: PUSH
21970: LD_INT 0
21972: ST_TO_ADDR
21973: GO 21991
// min_x := x - r ;
21975: LD_ADDR_VAR 0 7
21979: PUSH
21980: LD_VAR 0 2
21984: PUSH
21985: LD_VAR 0 4
21989: MINUS
21990: ST_TO_ADDR
// if y - r < 0 then
21991: LD_VAR 0 3
21995: PUSH
21996: LD_VAR 0 4
22000: MINUS
22001: PUSH
22002: LD_INT 0
22004: LESS
22005: IFFALSE 22017
// min_y := 0 else
22007: LD_ADDR_VAR 0 8
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
22015: GO 22033
// min_y := y - r ;
22017: LD_ADDR_VAR 0 8
22021: PUSH
22022: LD_VAR 0 3
22026: PUSH
22027: LD_VAR 0 4
22031: MINUS
22032: ST_TO_ADDR
// max_x := x + r ;
22033: LD_ADDR_VAR 0 9
22037: PUSH
22038: LD_VAR 0 2
22042: PUSH
22043: LD_VAR 0 4
22047: PLUS
22048: ST_TO_ADDR
// max_y := y + r ;
22049: LD_ADDR_VAR 0 10
22053: PUSH
22054: LD_VAR 0 3
22058: PUSH
22059: LD_VAR 0 4
22063: PLUS
22064: ST_TO_ADDR
// for _x = min_x to max_x do
22065: LD_ADDR_VAR 0 11
22069: PUSH
22070: DOUBLE
22071: LD_VAR 0 7
22075: DEC
22076: ST_TO_ADDR
22077: LD_VAR 0 9
22081: PUSH
22082: FOR_TO
22083: IFFALSE 22200
// for _y = min_y to max_y do
22085: LD_ADDR_VAR 0 12
22089: PUSH
22090: DOUBLE
22091: LD_VAR 0 8
22095: DEC
22096: ST_TO_ADDR
22097: LD_VAR 0 10
22101: PUSH
22102: FOR_TO
22103: IFFALSE 22196
// begin if not ValidHex ( _x , _y ) then
22105: LD_VAR 0 11
22109: PPUSH
22110: LD_VAR 0 12
22114: PPUSH
22115: CALL_OW 488
22119: NOT
22120: IFFALSE 22124
// continue ;
22122: GO 22102
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22124: LD_VAR 0 11
22128: PPUSH
22129: LD_VAR 0 12
22133: PPUSH
22134: CALL_OW 351
22138: PUSH
22139: LD_VAR 0 11
22143: PPUSH
22144: LD_VAR 0 12
22148: PPUSH
22149: CALL_OW 554
22153: AND
22154: IFFALSE 22194
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22156: LD_ADDR_VAR 0 13
22160: PUSH
22161: LD_VAR 0 13
22165: PPUSH
22166: LD_VAR 0 13
22170: PUSH
22171: LD_INT 1
22173: PLUS
22174: PPUSH
22175: LD_VAR 0 11
22179: PUSH
22180: LD_VAR 0 12
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 2
22193: ST_TO_ADDR
// end ;
22194: GO 22102
22196: POP
22197: POP
22198: GO 22082
22200: POP
22201: POP
// if not list then
22202: LD_VAR 0 13
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22282
// for i in list do
22211: LD_ADDR_VAR 0 6
22215: PUSH
22216: LD_VAR 0 13
22220: PUSH
22221: FOR_IN
22222: IFFALSE 22280
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_STRING M
22231: PUSH
22232: LD_VAR 0 6
22236: PUSH
22237: LD_INT 1
22239: ARRAY
22240: PUSH
22241: LD_VAR 0 6
22245: PUSH
22246: LD_INT 2
22248: ARRAY
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: PPUSH
22274: CALL_OW 447
22278: GO 22221
22280: POP
22281: POP
// end ;
22282: LD_VAR 0 5
22286: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22287: LD_EXP 86
22291: NOT
22292: IFFALSE 22342
22294: GO 22296
22296: DISABLE
// begin initHack := true ;
22297: LD_ADDR_EXP 86
22301: PUSH
22302: LD_INT 1
22304: ST_TO_ADDR
// hackTanks := [ ] ;
22305: LD_ADDR_EXP 87
22309: PUSH
22310: EMPTY
22311: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22312: LD_ADDR_EXP 88
22316: PUSH
22317: EMPTY
22318: ST_TO_ADDR
// hackLimit := 3 ;
22319: LD_ADDR_EXP 89
22323: PUSH
22324: LD_INT 3
22326: ST_TO_ADDR
// hackDist := 12 ;
22327: LD_ADDR_EXP 90
22331: PUSH
22332: LD_INT 12
22334: ST_TO_ADDR
// hackCounter := [ ] ;
22335: LD_ADDR_EXP 91
22339: PUSH
22340: EMPTY
22341: ST_TO_ADDR
// end ;
22342: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22343: LD_EXP 86
22347: PUSH
22348: LD_INT 34
22350: PUSH
22351: LD_EXP 98
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: AND
22365: IFFALSE 22620
22367: GO 22369
22369: DISABLE
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
// begin enable ;
22374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22375: LD_ADDR_VAR 0 1
22379: PUSH
22380: LD_INT 34
22382: PUSH
22383: LD_EXP 98
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 69
22396: PUSH
22397: FOR_IN
22398: IFFALSE 22618
// begin if not i in hackTanks then
22400: LD_VAR 0 1
22404: PUSH
22405: LD_EXP 87
22409: IN
22410: NOT
22411: IFFALSE 22494
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22413: LD_ADDR_EXP 87
22417: PUSH
22418: LD_EXP 87
22422: PPUSH
22423: LD_EXP 87
22427: PUSH
22428: LD_INT 1
22430: PLUS
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 1
22441: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22442: LD_ADDR_EXP 88
22446: PUSH
22447: LD_EXP 88
22451: PPUSH
22452: LD_EXP 88
22456: PUSH
22457: LD_INT 1
22459: PLUS
22460: PPUSH
22461: EMPTY
22462: PPUSH
22463: CALL_OW 1
22467: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22468: LD_ADDR_EXP 91
22472: PUSH
22473: LD_EXP 91
22477: PPUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_INT 1
22485: PLUS
22486: PPUSH
22487: EMPTY
22488: PPUSH
22489: CALL_OW 1
22493: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 302
22503: NOT
22504: IFFALSE 22517
// begin HackUnlinkAll ( i ) ;
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL 22623 0 1
// continue ;
22515: GO 22397
// end ; HackCheckCapturedStatus ( i ) ;
22517: LD_VAR 0 1
22521: PPUSH
22522: CALL 23066 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_INT 81
22533: PUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: CALL_OW 255
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 33
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 91
22560: PUSH
22561: LD_VAR 0 1
22565: PUSH
22566: LD_EXP 90
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 50
22578: PUSH
22579: EMPTY
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: ST_TO_ADDR
// if not tmp then
22593: LD_VAR 0 2
22597: NOT
22598: IFFALSE 22602
// continue ;
22600: GO 22397
// HackLink ( i , tmp ) ;
22602: LD_VAR 0 1
22606: PPUSH
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL 22759 0 2
// end ;
22616: GO 22397
22618: POP
22619: POP
// end ;
22620: PPOPN 2
22622: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22623: LD_INT 0
22625: PPUSH
22626: PPUSH
22627: PPUSH
// if not hack in hackTanks then
22628: LD_VAR 0 1
22632: PUSH
22633: LD_EXP 87
22637: IN
22638: NOT
22639: IFFALSE 22643
// exit ;
22641: GO 22754
// index := GetElementIndex ( hackTanks , hack ) ;
22643: LD_ADDR_VAR 0 4
22647: PUSH
22648: LD_EXP 87
22652: PPUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL 30396 0 2
22662: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22663: LD_EXP 88
22667: PUSH
22668: LD_VAR 0 4
22672: ARRAY
22673: IFFALSE 22754
// begin for i in hackTanksCaptured [ index ] do
22675: LD_ADDR_VAR 0 3
22679: PUSH
22680: LD_EXP 88
22684: PUSH
22685: LD_VAR 0 4
22689: ARRAY
22690: PUSH
22691: FOR_IN
22692: IFFALSE 22718
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22694: LD_VAR 0 3
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: PPUSH
22703: LD_VAR 0 3
22707: PUSH
22708: LD_INT 2
22710: ARRAY
22711: PPUSH
22712: CALL_OW 235
22716: GO 22691
22718: POP
22719: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22720: LD_ADDR_EXP 88
22724: PUSH
22725: LD_EXP 88
22729: PPUSH
22730: LD_VAR 0 4
22734: PPUSH
22735: EMPTY
22736: PPUSH
22737: CALL_OW 1
22741: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_INT 0
22749: PPUSH
22750: CALL_OW 505
// end ; end ;
22754: LD_VAR 0 2
22758: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// if not hack in hackTanks or not vehicles then
22764: LD_VAR 0 1
22768: PUSH
22769: LD_EXP 87
22773: IN
22774: NOT
22775: PUSH
22776: LD_VAR 0 2
22780: NOT
22781: OR
22782: IFFALSE 22786
// exit ;
22784: GO 23061
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22786: LD_ADDR_VAR 0 2
22790: PUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: LD_VAR 0 2
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: CALL 31046 0 4
22811: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22812: LD_ADDR_VAR 0 5
22816: PUSH
22817: LD_EXP 87
22821: PPUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 30396 0 2
22831: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22832: LD_EXP 88
22836: PUSH
22837: LD_VAR 0 5
22841: ARRAY
22842: PUSH
22843: LD_EXP 89
22847: LESS
22848: IFFALSE 23037
// begin for i := 1 to vehicles do
22850: LD_ADDR_VAR 0 4
22854: PUSH
22855: DOUBLE
22856: LD_INT 1
22858: DEC
22859: ST_TO_ADDR
22860: LD_VAR 0 2
22864: PUSH
22865: FOR_TO
22866: IFFALSE 23035
// begin if hackTanksCaptured [ index ] = hackLimit then
22868: LD_EXP 88
22872: PUSH
22873: LD_VAR 0 5
22877: ARRAY
22878: PUSH
22879: LD_EXP 89
22883: EQUAL
22884: IFFALSE 22888
// break ;
22886: GO 23035
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22888: LD_ADDR_EXP 91
22892: PUSH
22893: LD_EXP 91
22897: PPUSH
22898: LD_VAR 0 5
22902: PPUSH
22903: LD_EXP 91
22907: PUSH
22908: LD_VAR 0 5
22912: ARRAY
22913: PUSH
22914: LD_INT 1
22916: PLUS
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22923: LD_ADDR_EXP 88
22927: PUSH
22928: LD_EXP 88
22932: PPUSH
22933: LD_VAR 0 5
22937: PUSH
22938: LD_EXP 88
22942: PUSH
22943: LD_VAR 0 5
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: PLUS
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: LD_VAR 0 2
22961: PUSH
22962: LD_VAR 0 4
22966: ARRAY
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_VAR 0 4
22977: ARRAY
22978: PPUSH
22979: CALL_OW 255
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PPUSH
22988: CALL 30611 0 3
22992: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22993: LD_VAR 0 2
22997: PUSH
22998: LD_VAR 0 4
23002: ARRAY
23003: PPUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 255
23013: PPUSH
23014: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23018: LD_VAR 0 2
23022: PUSH
23023: LD_VAR 0 4
23027: ARRAY
23028: PPUSH
23029: CALL_OW 141
// end ;
23033: GO 22865
23035: POP
23036: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_EXP 88
23046: PUSH
23047: LD_VAR 0 5
23051: ARRAY
23052: PUSH
23053: LD_INT 0
23055: PLUS
23056: PPUSH
23057: CALL_OW 505
// end ;
23061: LD_VAR 0 3
23065: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23066: LD_INT 0
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
// if not hack in hackTanks then
23072: LD_VAR 0 1
23076: PUSH
23077: LD_EXP 87
23081: IN
23082: NOT
23083: IFFALSE 23087
// exit ;
23085: GO 23327
// index := GetElementIndex ( hackTanks , hack ) ;
23087: LD_ADDR_VAR 0 4
23091: PUSH
23092: LD_EXP 87
23096: PPUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL 30396 0 2
23106: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23107: LD_ADDR_VAR 0 3
23111: PUSH
23112: DOUBLE
23113: LD_EXP 88
23117: PUSH
23118: LD_VAR 0 4
23122: ARRAY
23123: INC
23124: ST_TO_ADDR
23125: LD_INT 1
23127: PUSH
23128: FOR_DOWNTO
23129: IFFALSE 23301
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23131: LD_ADDR_VAR 0 5
23135: PUSH
23136: LD_EXP 88
23140: PUSH
23141: LD_VAR 0 4
23145: ARRAY
23146: PUSH
23147: LD_VAR 0 3
23151: ARRAY
23152: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23153: LD_VAR 0 5
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: CALL_OW 302
23166: NOT
23167: PUSH
23168: LD_VAR 0 5
23172: PUSH
23173: LD_INT 1
23175: ARRAY
23176: PPUSH
23177: CALL_OW 255
23181: PUSH
23182: LD_VAR 0 1
23186: PPUSH
23187: CALL_OW 255
23191: NONEQUAL
23192: OR
23193: IFFALSE 23299
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23195: LD_VAR 0 5
23199: PUSH
23200: LD_INT 1
23202: ARRAY
23203: PPUSH
23204: CALL_OW 305
23208: PUSH
23209: LD_VAR 0 5
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PPUSH
23218: CALL_OW 255
23222: PUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 255
23232: EQUAL
23233: AND
23234: IFFALSE 23258
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23236: LD_VAR 0 5
23240: PUSH
23241: LD_INT 1
23243: ARRAY
23244: PPUSH
23245: LD_VAR 0 5
23249: PUSH
23250: LD_INT 2
23252: ARRAY
23253: PPUSH
23254: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23258: LD_ADDR_EXP 88
23262: PUSH
23263: LD_EXP 88
23267: PPUSH
23268: LD_VAR 0 4
23272: PPUSH
23273: LD_EXP 88
23277: PUSH
23278: LD_VAR 0 4
23282: ARRAY
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: CALL_OW 3
23293: PPUSH
23294: CALL_OW 1
23298: ST_TO_ADDR
// end ; end ;
23299: GO 23128
23301: POP
23302: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_EXP 88
23312: PUSH
23313: LD_VAR 0 4
23317: ARRAY
23318: PUSH
23319: LD_INT 0
23321: PLUS
23322: PPUSH
23323: CALL_OW 505
// end ;
23327: LD_VAR 0 2
23331: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
// if not hack in hackTanks then
23338: LD_VAR 0 1
23342: PUSH
23343: LD_EXP 87
23347: IN
23348: NOT
23349: IFFALSE 23353
// exit ;
23351: GO 23438
// index := GetElementIndex ( hackTanks , hack ) ;
23353: LD_ADDR_VAR 0 5
23357: PUSH
23358: LD_EXP 87
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL 30396 0 2
23372: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23373: LD_ADDR_VAR 0 4
23377: PUSH
23378: DOUBLE
23379: LD_INT 1
23381: DEC
23382: ST_TO_ADDR
23383: LD_EXP 88
23387: PUSH
23388: LD_VAR 0 5
23392: ARRAY
23393: PUSH
23394: FOR_TO
23395: IFFALSE 23436
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23397: LD_EXP 88
23401: PUSH
23402: LD_VAR 0 5
23406: ARRAY
23407: PUSH
23408: LD_VAR 0 4
23412: ARRAY
23413: PUSH
23414: LD_INT 1
23416: ARRAY
23417: PUSH
23418: LD_VAR 0 2
23422: EQUAL
23423: IFFALSE 23434
// KillUnit ( vehicle ) ;
23425: LD_VAR 0 2
23429: PPUSH
23430: CALL_OW 66
23434: GO 23394
23436: POP
23437: POP
// end ;
23438: LD_VAR 0 3
23442: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23443: LD_EXP 92
23447: NOT
23448: IFFALSE 23483
23450: GO 23452
23452: DISABLE
// begin initMiner := true ;
23453: LD_ADDR_EXP 92
23457: PUSH
23458: LD_INT 1
23460: ST_TO_ADDR
// minersList := [ ] ;
23461: LD_ADDR_EXP 93
23465: PUSH
23466: EMPTY
23467: ST_TO_ADDR
// minerMinesList := [ ] ;
23468: LD_ADDR_EXP 94
23472: PUSH
23473: EMPTY
23474: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23475: LD_ADDR_EXP 95
23479: PUSH
23480: LD_INT 5
23482: ST_TO_ADDR
// end ;
23483: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23484: LD_EXP 92
23488: PUSH
23489: LD_INT 34
23491: PUSH
23492: LD_EXP 103
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 69
23505: AND
23506: IFFALSE 23969
23508: GO 23510
23510: DISABLE
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
// begin enable ;
23517: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23518: LD_ADDR_VAR 0 1
23522: PUSH
23523: LD_INT 34
23525: PUSH
23526: LD_EXP 103
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: PUSH
23540: FOR_IN
23541: IFFALSE 23613
// begin if not i in minersList then
23543: LD_VAR 0 1
23547: PUSH
23548: LD_EXP 93
23552: IN
23553: NOT
23554: IFFALSE 23611
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23556: LD_ADDR_EXP 93
23560: PUSH
23561: LD_EXP 93
23565: PPUSH
23566: LD_EXP 93
23570: PUSH
23571: LD_INT 1
23573: PLUS
23574: PPUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 1
23584: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23585: LD_ADDR_EXP 94
23589: PUSH
23590: LD_EXP 94
23594: PPUSH
23595: LD_EXP 94
23599: PUSH
23600: LD_INT 1
23602: PLUS
23603: PPUSH
23604: EMPTY
23605: PPUSH
23606: CALL_OW 1
23610: ST_TO_ADDR
// end end ;
23611: GO 23540
23613: POP
23614: POP
// for i := minerMinesList downto 1 do
23615: LD_ADDR_VAR 0 1
23619: PUSH
23620: DOUBLE
23621: LD_EXP 94
23625: INC
23626: ST_TO_ADDR
23627: LD_INT 1
23629: PUSH
23630: FOR_DOWNTO
23631: IFFALSE 23967
// begin if IsLive ( minersList [ i ] ) then
23633: LD_EXP 93
23637: PUSH
23638: LD_VAR 0 1
23642: ARRAY
23643: PPUSH
23644: CALL_OW 300
23648: IFFALSE 23676
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23650: LD_EXP 93
23654: PUSH
23655: LD_VAR 0 1
23659: ARRAY
23660: PPUSH
23661: LD_EXP 94
23665: PUSH
23666: LD_VAR 0 1
23670: ARRAY
23671: PPUSH
23672: CALL_OW 505
// if not minerMinesList [ i ] then
23676: LD_EXP 94
23680: PUSH
23681: LD_VAR 0 1
23685: ARRAY
23686: NOT
23687: IFFALSE 23691
// continue ;
23689: GO 23630
// for j := minerMinesList [ i ] downto 1 do
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: DOUBLE
23697: LD_EXP 94
23701: PUSH
23702: LD_VAR 0 1
23706: ARRAY
23707: INC
23708: ST_TO_ADDR
23709: LD_INT 1
23711: PUSH
23712: FOR_DOWNTO
23713: IFFALSE 23963
// begin side := GetSide ( minersList [ i ] ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_EXP 93
23724: PUSH
23725: LD_VAR 0 1
23729: ARRAY
23730: PPUSH
23731: CALL_OW 255
23735: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23736: LD_ADDR_VAR 0 4
23740: PUSH
23741: LD_EXP 94
23745: PUSH
23746: LD_VAR 0 1
23750: ARRAY
23751: PUSH
23752: LD_VAR 0 2
23756: ARRAY
23757: PUSH
23758: LD_INT 1
23760: ARRAY
23761: PPUSH
23762: LD_EXP 94
23766: PUSH
23767: LD_VAR 0 1
23771: ARRAY
23772: PUSH
23773: LD_VAR 0 2
23777: ARRAY
23778: PUSH
23779: LD_INT 2
23781: ARRAY
23782: PPUSH
23783: CALL_OW 428
23787: ST_TO_ADDR
// if not tmp then
23788: LD_VAR 0 4
23792: NOT
23793: IFFALSE 23797
// continue ;
23795: GO 23712
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23797: LD_VAR 0 4
23801: PUSH
23802: LD_INT 81
23804: PUSH
23805: LD_VAR 0 3
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 69
23818: IN
23819: PUSH
23820: LD_EXP 94
23824: PUSH
23825: LD_VAR 0 1
23829: ARRAY
23830: PUSH
23831: LD_VAR 0 2
23835: ARRAY
23836: PUSH
23837: LD_INT 1
23839: ARRAY
23840: PPUSH
23841: LD_EXP 94
23845: PUSH
23846: LD_VAR 0 1
23850: ARRAY
23851: PUSH
23852: LD_VAR 0 2
23856: ARRAY
23857: PUSH
23858: LD_INT 2
23860: ARRAY
23861: PPUSH
23862: CALL_OW 458
23866: AND
23867: IFFALSE 23961
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23869: LD_EXP 94
23873: PUSH
23874: LD_VAR 0 1
23878: ARRAY
23879: PUSH
23880: LD_VAR 0 2
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: LD_EXP 94
23894: PUSH
23895: LD_VAR 0 1
23899: ARRAY
23900: PUSH
23901: LD_VAR 0 2
23905: ARRAY
23906: PUSH
23907: LD_INT 2
23909: ARRAY
23910: PPUSH
23911: LD_VAR 0 3
23915: PPUSH
23916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23920: LD_ADDR_EXP 94
23924: PUSH
23925: LD_EXP 94
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: LD_EXP 94
23939: PUSH
23940: LD_VAR 0 1
23944: ARRAY
23945: PPUSH
23946: LD_VAR 0 2
23950: PPUSH
23951: CALL_OW 3
23955: PPUSH
23956: CALL_OW 1
23960: ST_TO_ADDR
// end ; end ;
23961: GO 23712
23963: POP
23964: POP
// end ;
23965: GO 23630
23967: POP
23968: POP
// end ;
23969: PPOPN 4
23971: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23972: LD_INT 0
23974: PPUSH
23975: PPUSH
// result := false ;
23976: LD_ADDR_VAR 0 4
23980: PUSH
23981: LD_INT 0
23983: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 264
23993: PUSH
23994: LD_EXP 103
23998: EQUAL
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24244
// index := GetElementIndex ( minersList , unit ) ;
24004: LD_ADDR_VAR 0 5
24008: PUSH
24009: LD_EXP 93
24013: PPUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL 30396 0 2
24023: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24024: LD_EXP 94
24028: PUSH
24029: LD_VAR 0 5
24033: ARRAY
24034: PUSH
24035: LD_EXP 95
24039: GREATEREQUAL
24040: IFFALSE 24044
// exit ;
24042: GO 24244
// ComMoveXY ( unit , x , y ) ;
24044: LD_VAR 0 1
24048: PPUSH
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_VAR 0 3
24058: PPUSH
24059: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24063: LD_INT 35
24065: PPUSH
24066: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24070: LD_VAR 0 1
24074: PPUSH
24075: LD_VAR 0 2
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: CALL 61115 0 3
24089: NOT
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 314
24100: AND
24101: IFFALSE 24105
// exit ;
24103: GO 24244
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24105: LD_VAR 0 2
24109: PPUSH
24110: LD_VAR 0 3
24114: PPUSH
24115: CALL_OW 428
24119: PUSH
24120: LD_VAR 0 1
24124: EQUAL
24125: PUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 314
24135: NOT
24136: AND
24137: IFFALSE 24063
// PlaySoundXY ( x , y , PlantMine ) ;
24139: LD_VAR 0 2
24143: PPUSH
24144: LD_VAR 0 3
24148: PPUSH
24149: LD_STRING PlantMine
24151: PPUSH
24152: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24156: LD_VAR 0 2
24160: PPUSH
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 255
24175: PPUSH
24176: LD_INT 0
24178: PPUSH
24179: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24183: LD_ADDR_EXP 94
24187: PUSH
24188: LD_EXP 94
24192: PPUSH
24193: LD_VAR 0 5
24197: PUSH
24198: LD_EXP 94
24202: PUSH
24203: LD_VAR 0 5
24207: ARRAY
24208: PUSH
24209: LD_INT 1
24211: PLUS
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PPUSH
24217: LD_VAR 0 2
24221: PUSH
24222: LD_VAR 0 3
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PPUSH
24231: CALL 30611 0 3
24235: ST_TO_ADDR
// result := true ;
24236: LD_ADDR_VAR 0 4
24240: PUSH
24241: LD_INT 1
24243: ST_TO_ADDR
// end ;
24244: LD_VAR 0 4
24248: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24249: LD_INT 0
24251: PPUSH
24252: PPUSH
24253: PPUSH
// if not unit in minersList then
24254: LD_VAR 0 1
24258: PUSH
24259: LD_EXP 93
24263: IN
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24661
// index := GetElementIndex ( minersList , unit ) ;
24269: LD_ADDR_VAR 0 6
24273: PUSH
24274: LD_EXP 93
24278: PPUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL 30396 0 2
24288: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24289: LD_ADDR_VAR 0 5
24293: PUSH
24294: DOUBLE
24295: LD_EXP 94
24299: PUSH
24300: LD_VAR 0 6
24304: ARRAY
24305: INC
24306: ST_TO_ADDR
24307: LD_INT 1
24309: PUSH
24310: FOR_DOWNTO
24311: IFFALSE 24472
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24313: LD_EXP 94
24317: PUSH
24318: LD_VAR 0 6
24322: ARRAY
24323: PUSH
24324: LD_VAR 0 5
24328: ARRAY
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PUSH
24334: LD_VAR 0 2
24338: EQUAL
24339: PUSH
24340: LD_EXP 94
24344: PUSH
24345: LD_VAR 0 6
24349: ARRAY
24350: PUSH
24351: LD_VAR 0 5
24355: ARRAY
24356: PUSH
24357: LD_INT 2
24359: ARRAY
24360: PUSH
24361: LD_VAR 0 3
24365: EQUAL
24366: AND
24367: IFFALSE 24470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24369: LD_EXP 94
24373: PUSH
24374: LD_VAR 0 6
24378: ARRAY
24379: PUSH
24380: LD_VAR 0 5
24384: ARRAY
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: PPUSH
24390: LD_EXP 94
24394: PUSH
24395: LD_VAR 0 6
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 2
24409: ARRAY
24410: PPUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 255
24420: PPUSH
24421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24425: LD_ADDR_EXP 94
24429: PUSH
24430: LD_EXP 94
24434: PPUSH
24435: LD_VAR 0 6
24439: PPUSH
24440: LD_EXP 94
24444: PUSH
24445: LD_VAR 0 6
24449: ARRAY
24450: PPUSH
24451: LD_VAR 0 5
24455: PPUSH
24456: CALL_OW 3
24460: PPUSH
24461: CALL_OW 1
24465: ST_TO_ADDR
// exit ;
24466: POP
24467: POP
24468: GO 24661
// end ; end ;
24470: GO 24310
24472: POP
24473: POP
// for i := minerMinesList [ index ] downto 1 do
24474: LD_ADDR_VAR 0 5
24478: PUSH
24479: DOUBLE
24480: LD_EXP 94
24484: PUSH
24485: LD_VAR 0 6
24489: ARRAY
24490: INC
24491: ST_TO_ADDR
24492: LD_INT 1
24494: PUSH
24495: FOR_DOWNTO
24496: IFFALSE 24659
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24498: LD_EXP 94
24502: PUSH
24503: LD_VAR 0 6
24507: ARRAY
24508: PUSH
24509: LD_VAR 0 5
24513: ARRAY
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: PPUSH
24519: LD_EXP 94
24523: PUSH
24524: LD_VAR 0 6
24528: ARRAY
24529: PUSH
24530: LD_VAR 0 5
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: CALL_OW 298
24554: PUSH
24555: LD_INT 6
24557: LESS
24558: IFFALSE 24657
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24560: LD_EXP 94
24564: PUSH
24565: LD_VAR 0 6
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 5
24575: ARRAY
24576: PUSH
24577: LD_INT 1
24579: ARRAY
24580: PPUSH
24581: LD_EXP 94
24585: PUSH
24586: LD_VAR 0 6
24590: ARRAY
24591: PUSH
24592: LD_VAR 0 5
24596: ARRAY
24597: PUSH
24598: LD_INT 2
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 255
24611: PPUSH
24612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24616: LD_ADDR_EXP 94
24620: PUSH
24621: LD_EXP 94
24625: PPUSH
24626: LD_VAR 0 6
24630: PPUSH
24631: LD_EXP 94
24635: PUSH
24636: LD_VAR 0 6
24640: ARRAY
24641: PPUSH
24642: LD_VAR 0 5
24646: PPUSH
24647: CALL_OW 3
24651: PPUSH
24652: CALL_OW 1
24656: ST_TO_ADDR
// end ; end ;
24657: GO 24495
24659: POP
24660: POP
// end ;
24661: LD_VAR 0 4
24665: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 264
24686: PUSH
24687: LD_EXP 103
24691: EQUAL
24692: NOT
24693: PUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_EXP 93
24703: IN
24704: NOT
24705: OR
24706: IFFALSE 24710
// exit ;
24708: GO 25032
// index := GetElementIndex ( minersList , unit ) ;
24710: LD_ADDR_VAR 0 6
24714: PUSH
24715: LD_EXP 93
24719: PPUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL 30396 0 2
24729: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24730: LD_ADDR_VAR 0 8
24734: PUSH
24735: LD_EXP 95
24739: PUSH
24740: LD_EXP 94
24744: PUSH
24745: LD_VAR 0 6
24749: ARRAY
24750: MINUS
24751: ST_TO_ADDR
// if not minesFreeAmount then
24752: LD_VAR 0 8
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 25032
// tmp := [ ] ;
24761: LD_ADDR_VAR 0 7
24765: PUSH
24766: EMPTY
24767: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: DOUBLE
24774: LD_INT 1
24776: DEC
24777: ST_TO_ADDR
24778: LD_VAR 0 8
24782: PUSH
24783: FOR_TO
24784: IFFALSE 24979
// begin _d := rand ( 0 , 5 ) ;
24786: LD_ADDR_VAR 0 11
24790: PUSH
24791: LD_INT 0
24793: PPUSH
24794: LD_INT 5
24796: PPUSH
24797: CALL_OW 12
24801: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24802: LD_ADDR_VAR 0 12
24806: PUSH
24807: LD_INT 2
24809: PPUSH
24810: LD_INT 6
24812: PPUSH
24813: CALL_OW 12
24817: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24818: LD_ADDR_VAR 0 9
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: LD_VAR 0 11
24832: PPUSH
24833: LD_VAR 0 12
24837: PPUSH
24838: CALL_OW 272
24842: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24843: LD_ADDR_VAR 0 10
24847: PUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: LD_VAR 0 11
24857: PPUSH
24858: LD_VAR 0 12
24862: PPUSH
24863: CALL_OW 273
24867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24868: LD_VAR 0 9
24872: PPUSH
24873: LD_VAR 0 10
24877: PPUSH
24878: CALL_OW 488
24882: PUSH
24883: LD_VAR 0 9
24887: PUSH
24888: LD_VAR 0 10
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_VAR 0 7
24901: IN
24902: NOT
24903: AND
24904: PUSH
24905: LD_VAR 0 9
24909: PPUSH
24910: LD_VAR 0 10
24914: PPUSH
24915: CALL_OW 458
24919: NOT
24920: AND
24921: IFFALSE 24963
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24923: LD_ADDR_VAR 0 7
24927: PUSH
24928: LD_VAR 0 7
24932: PPUSH
24933: LD_VAR 0 7
24937: PUSH
24938: LD_INT 1
24940: PLUS
24941: PPUSH
24942: LD_VAR 0 9
24946: PUSH
24947: LD_VAR 0 10
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PPUSH
24956: CALL_OW 1
24960: ST_TO_ADDR
24961: GO 24977
// i := i - 1 ;
24963: LD_ADDR_VAR 0 5
24967: PUSH
24968: LD_VAR 0 5
24972: PUSH
24973: LD_INT 1
24975: MINUS
24976: ST_TO_ADDR
// end ;
24977: GO 24783
24979: POP
24980: POP
// for i in tmp do
24981: LD_ADDR_VAR 0 5
24985: PUSH
24986: LD_VAR 0 7
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25030
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24994: LD_VAR 0 1
24998: PPUSH
24999: LD_VAR 0 5
25003: PUSH
25004: LD_INT 1
25006: ARRAY
25007: PPUSH
25008: LD_VAR 0 5
25012: PUSH
25013: LD_INT 2
25015: ARRAY
25016: PPUSH
25017: CALL 23972 0 3
25021: NOT
25022: IFFALSE 25028
// exit ;
25024: POP
25025: POP
25026: GO 25032
25028: GO 24991
25030: POP
25031: POP
// end ;
25032: LD_VAR 0 4
25036: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25037: LD_INT 0
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
// if not GetClass ( unit ) = class_sniper then
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 257
25055: PUSH
25056: LD_INT 5
25058: EQUAL
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25452
// dist := 8 ;
25064: LD_ADDR_VAR 0 5
25068: PUSH
25069: LD_INT 8
25071: ST_TO_ADDR
// viewRange := 12 ;
25072: LD_ADDR_VAR 0 7
25076: PUSH
25077: LD_INT 12
25079: ST_TO_ADDR
// side := GetSide ( unit ) ;
25080: LD_ADDR_VAR 0 6
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 255
25094: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25095: LD_INT 61
25097: PPUSH
25098: LD_VAR 0 6
25102: PPUSH
25103: CALL_OW 321
25107: PUSH
25108: LD_INT 2
25110: EQUAL
25111: IFFALSE 25121
// viewRange := 16 ;
25113: LD_ADDR_VAR 0 7
25117: PUSH
25118: LD_INT 16
25120: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25121: LD_VAR 0 1
25125: PPUSH
25126: LD_VAR 0 2
25130: PPUSH
25131: LD_VAR 0 3
25135: PPUSH
25136: CALL_OW 297
25140: PUSH
25141: LD_VAR 0 5
25145: GREATER
25146: IFFALSE 25225
// begin ComMoveXY ( unit , x , y ) ;
25148: LD_VAR 0 1
25152: PPUSH
25153: LD_VAR 0 2
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25167: LD_INT 35
25169: PPUSH
25170: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25174: LD_VAR 0 1
25178: PPUSH
25179: LD_VAR 0 2
25183: PPUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: CALL 61115 0 3
25193: NOT
25194: IFFALSE 25198
// exit ;
25196: GO 25452
// until GetDistUnitXY ( unit , x , y ) < dist ;
25198: LD_VAR 0 1
25202: PPUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 3
25212: PPUSH
25213: CALL_OW 297
25217: PUSH
25218: LD_VAR 0 5
25222: LESS
25223: IFFALSE 25167
// end ; ComTurnXY ( unit , x , y ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_VAR 0 2
25234: PPUSH
25235: LD_VAR 0 3
25239: PPUSH
25240: CALL_OW 118
// wait ( 5 ) ;
25244: LD_INT 5
25246: PPUSH
25247: CALL_OW 67
// _d := GetDir ( unit ) ;
25251: LD_ADDR_VAR 0 10
25255: PUSH
25256: LD_VAR 0 1
25260: PPUSH
25261: CALL_OW 254
25265: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 250
25280: PPUSH
25281: LD_VAR 0 10
25285: PPUSH
25286: LD_VAR 0 5
25290: PPUSH
25291: CALL_OW 272
25295: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25296: LD_ADDR_VAR 0 9
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 251
25310: PPUSH
25311: LD_VAR 0 10
25315: PPUSH
25316: LD_VAR 0 5
25320: PPUSH
25321: CALL_OW 273
25325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25326: LD_VAR 0 8
25330: PPUSH
25331: LD_VAR 0 9
25335: PPUSH
25336: CALL_OW 488
25340: NOT
25341: IFFALSE 25345
// exit ;
25343: GO 25452
// ComAnimCustom ( unit , 1 ) ;
25345: LD_VAR 0 1
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25357: LD_VAR 0 8
25361: PPUSH
25362: LD_VAR 0 9
25366: PPUSH
25367: LD_VAR 0 6
25371: PPUSH
25372: LD_VAR 0 7
25376: PPUSH
25377: CALL_OW 330
// repeat wait ( 1 ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 316
25397: PUSH
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 314
25407: OR
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 302
25418: NOT
25419: OR
25420: PUSH
25421: LD_VAR 0 1
25425: PPUSH
25426: CALL_OW 301
25430: OR
25431: IFFALSE 25381
// RemoveSeeing ( _x , _y , side ) ;
25433: LD_VAR 0 8
25437: PPUSH
25438: LD_VAR 0 9
25442: PPUSH
25443: LD_VAR 0 6
25447: PPUSH
25448: CALL_OW 331
// end ; end_of_file
25452: LD_VAR 0 4
25456: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
25457: LD_INT 0
25459: PPUSH
// ar_miner := 81 ;
25460: LD_ADDR_EXP 103
25464: PUSH
25465: LD_INT 81
25467: ST_TO_ADDR
// ar_crane := 88 ;
25468: LD_ADDR_EXP 102
25472: PUSH
25473: LD_INT 88
25475: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25476: LD_ADDR_EXP 97
25480: PUSH
25481: LD_INT 89
25483: ST_TO_ADDR
// us_hack := 99 ;
25484: LD_ADDR_EXP 98
25488: PUSH
25489: LD_INT 99
25491: ST_TO_ADDR
// us_artillery := 97 ;
25492: LD_ADDR_EXP 99
25496: PUSH
25497: LD_INT 97
25499: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25500: LD_ADDR_EXP 100
25504: PUSH
25505: LD_INT 91
25507: ST_TO_ADDR
// ar_mortar := 92 ;
25508: LD_ADDR_EXP 101
25512: PUSH
25513: LD_INT 92
25515: ST_TO_ADDR
// ru_radar := 98 ;
25516: LD_ADDR_EXP 96
25520: PUSH
25521: LD_INT 98
25523: ST_TO_ADDR
// tech_Artillery := 80 ;
25524: LD_ADDR_EXP 104
25528: PUSH
25529: LD_INT 80
25531: ST_TO_ADDR
// tech_RadMat := 81 ;
25532: LD_ADDR_EXP 105
25536: PUSH
25537: LD_INT 81
25539: ST_TO_ADDR
// tech_BasicTools := 82 ;
25540: LD_ADDR_EXP 106
25544: PUSH
25545: LD_INT 82
25547: ST_TO_ADDR
// tech_Cargo := 83 ;
25548: LD_ADDR_EXP 107
25552: PUSH
25553: LD_INT 83
25555: ST_TO_ADDR
// tech_Track := 84 ;
25556: LD_ADDR_EXP 108
25560: PUSH
25561: LD_INT 84
25563: ST_TO_ADDR
// tech_Crane := 85 ;
25564: LD_ADDR_EXP 109
25568: PUSH
25569: LD_INT 85
25571: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25572: LD_ADDR_EXP 110
25576: PUSH
25577: LD_INT 86
25579: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25580: LD_ADDR_EXP 111
25584: PUSH
25585: LD_INT 87
25587: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25588: LD_ADDR_EXP 112
25592: PUSH
25593: LD_INT 88
25595: ST_TO_ADDR
// class_mastodont := 31 ;
25596: LD_ADDR_EXP 113
25600: PUSH
25601: LD_INT 31
25603: ST_TO_ADDR
// class_horse := 21 ;
25604: LD_ADDR_EXP 114
25608: PUSH
25609: LD_INT 21
25611: ST_TO_ADDR
// end ;
25612: LD_VAR 0 1
25616: RET
// every 1 do
25617: GO 25619
25619: DISABLE
// InitGlobalVariables ; end_of_file
25620: CALL 25457 0 0
25624: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25625: LD_INT 0
25627: PPUSH
25628: PPUSH
// if exist_mode then
25629: LD_VAR 0 2
25633: IFFALSE 25658
// unit := CreateCharacter ( prefix & ident ) else
25635: LD_ADDR_VAR 0 5
25639: PUSH
25640: LD_VAR 0 3
25644: PUSH
25645: LD_VAR 0 1
25649: STR
25650: PPUSH
25651: CALL_OW 34
25655: ST_TO_ADDR
25656: GO 25673
// unit := NewCharacter ( ident ) ;
25658: LD_ADDR_VAR 0 5
25662: PUSH
25663: LD_VAR 0 1
25667: PPUSH
25668: CALL_OW 25
25672: ST_TO_ADDR
// result := unit ;
25673: LD_ADDR_VAR 0 4
25677: PUSH
25678: LD_VAR 0 5
25682: ST_TO_ADDR
// end ;
25683: LD_VAR 0 4
25687: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
// if not side or not nation then
25692: LD_VAR 0 1
25696: NOT
25697: PUSH
25698: LD_VAR 0 2
25702: NOT
25703: OR
25704: IFFALSE 25708
// exit ;
25706: GO 26476
// case nation of nation_american :
25708: LD_VAR 0 2
25712: PUSH
25713: LD_INT 1
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25935
25721: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25722: LD_ADDR_VAR 0 4
25726: PUSH
25727: LD_INT 35
25729: PUSH
25730: LD_INT 45
25732: PUSH
25733: LD_INT 46
25735: PUSH
25736: LD_INT 47
25738: PUSH
25739: LD_INT 82
25741: PUSH
25742: LD_INT 83
25744: PUSH
25745: LD_INT 84
25747: PUSH
25748: LD_INT 85
25750: PUSH
25751: LD_INT 86
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 6
25762: PUSH
25763: LD_INT 15
25765: PUSH
25766: LD_INT 16
25768: PUSH
25769: LD_INT 7
25771: PUSH
25772: LD_INT 12
25774: PUSH
25775: LD_INT 13
25777: PUSH
25778: LD_INT 10
25780: PUSH
25781: LD_INT 14
25783: PUSH
25784: LD_INT 20
25786: PUSH
25787: LD_INT 21
25789: PUSH
25790: LD_INT 22
25792: PUSH
25793: LD_INT 25
25795: PUSH
25796: LD_INT 32
25798: PUSH
25799: LD_INT 27
25801: PUSH
25802: LD_INT 36
25804: PUSH
25805: LD_INT 69
25807: PUSH
25808: LD_INT 39
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 40
25816: PUSH
25817: LD_INT 48
25819: PUSH
25820: LD_INT 49
25822: PUSH
25823: LD_INT 50
25825: PUSH
25826: LD_INT 51
25828: PUSH
25829: LD_INT 52
25831: PUSH
25832: LD_INT 53
25834: PUSH
25835: LD_INT 54
25837: PUSH
25838: LD_INT 55
25840: PUSH
25841: LD_INT 56
25843: PUSH
25844: LD_INT 57
25846: PUSH
25847: LD_INT 58
25849: PUSH
25850: LD_INT 59
25852: PUSH
25853: LD_INT 60
25855: PUSH
25856: LD_INT 61
25858: PUSH
25859: LD_INT 62
25861: PUSH
25862: LD_INT 80
25864: PUSH
25865: LD_INT 82
25867: PUSH
25868: LD_INT 83
25870: PUSH
25871: LD_INT 84
25873: PUSH
25874: LD_INT 85
25876: PUSH
25877: LD_INT 86
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: ST_TO_ADDR
25933: GO 26400
25935: LD_INT 2
25937: DOUBLE
25938: EQUAL
25939: IFTRUE 25943
25941: GO 26169
25943: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25944: LD_ADDR_VAR 0 4
25948: PUSH
25949: LD_INT 35
25951: PUSH
25952: LD_INT 45
25954: PUSH
25955: LD_INT 46
25957: PUSH
25958: LD_INT 47
25960: PUSH
25961: LD_INT 82
25963: PUSH
25964: LD_INT 83
25966: PUSH
25967: LD_INT 84
25969: PUSH
25970: LD_INT 85
25972: PUSH
25973: LD_INT 87
25975: PUSH
25976: LD_INT 70
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: LD_INT 11
25984: PUSH
25985: LD_INT 3
25987: PUSH
25988: LD_INT 4
25990: PUSH
25991: LD_INT 5
25993: PUSH
25994: LD_INT 6
25996: PUSH
25997: LD_INT 15
25999: PUSH
26000: LD_INT 18
26002: PUSH
26003: LD_INT 7
26005: PUSH
26006: LD_INT 17
26008: PUSH
26009: LD_INT 8
26011: PUSH
26012: LD_INT 20
26014: PUSH
26015: LD_INT 21
26017: PUSH
26018: LD_INT 22
26020: PUSH
26021: LD_INT 72
26023: PUSH
26024: LD_INT 26
26026: PUSH
26027: LD_INT 69
26029: PUSH
26030: LD_INT 39
26032: PUSH
26033: LD_INT 40
26035: PUSH
26036: LD_INT 41
26038: PUSH
26039: LD_INT 42
26041: PUSH
26042: LD_INT 43
26044: PUSH
26045: LD_INT 48
26047: PUSH
26048: LD_INT 49
26050: PUSH
26051: LD_INT 50
26053: PUSH
26054: LD_INT 51
26056: PUSH
26057: LD_INT 52
26059: PUSH
26060: LD_INT 53
26062: PUSH
26063: LD_INT 54
26065: PUSH
26066: LD_INT 55
26068: PUSH
26069: LD_INT 56
26071: PUSH
26072: LD_INT 60
26074: PUSH
26075: LD_INT 61
26077: PUSH
26078: LD_INT 62
26080: PUSH
26081: LD_INT 66
26083: PUSH
26084: LD_INT 67
26086: PUSH
26087: LD_INT 68
26089: PUSH
26090: LD_INT 81
26092: PUSH
26093: LD_INT 82
26095: PUSH
26096: LD_INT 83
26098: PUSH
26099: LD_INT 84
26101: PUSH
26102: LD_INT 85
26104: PUSH
26105: LD_INT 87
26107: PUSH
26108: LD_INT 88
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: ST_TO_ADDR
26167: GO 26400
26169: LD_INT 3
26171: DOUBLE
26172: EQUAL
26173: IFTRUE 26177
26175: GO 26399
26177: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26178: LD_ADDR_VAR 0 4
26182: PUSH
26183: LD_INT 46
26185: PUSH
26186: LD_INT 47
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: LD_INT 82
26197: PUSH
26198: LD_INT 83
26200: PUSH
26201: LD_INT 84
26203: PUSH
26204: LD_INT 85
26206: PUSH
26207: LD_INT 86
26209: PUSH
26210: LD_INT 11
26212: PUSH
26213: LD_INT 9
26215: PUSH
26216: LD_INT 20
26218: PUSH
26219: LD_INT 19
26221: PUSH
26222: LD_INT 21
26224: PUSH
26225: LD_INT 24
26227: PUSH
26228: LD_INT 22
26230: PUSH
26231: LD_INT 25
26233: PUSH
26234: LD_INT 28
26236: PUSH
26237: LD_INT 29
26239: PUSH
26240: LD_INT 30
26242: PUSH
26243: LD_INT 31
26245: PUSH
26246: LD_INT 37
26248: PUSH
26249: LD_INT 38
26251: PUSH
26252: LD_INT 32
26254: PUSH
26255: LD_INT 27
26257: PUSH
26258: LD_INT 33
26260: PUSH
26261: LD_INT 69
26263: PUSH
26264: LD_INT 39
26266: PUSH
26267: LD_INT 34
26269: PUSH
26270: LD_INT 40
26272: PUSH
26273: LD_INT 71
26275: PUSH
26276: LD_INT 23
26278: PUSH
26279: LD_INT 44
26281: PUSH
26282: LD_INT 48
26284: PUSH
26285: LD_INT 49
26287: PUSH
26288: LD_INT 50
26290: PUSH
26291: LD_INT 51
26293: PUSH
26294: LD_INT 52
26296: PUSH
26297: LD_INT 53
26299: PUSH
26300: LD_INT 54
26302: PUSH
26303: LD_INT 55
26305: PUSH
26306: LD_INT 56
26308: PUSH
26309: LD_INT 57
26311: PUSH
26312: LD_INT 58
26314: PUSH
26315: LD_INT 59
26317: PUSH
26318: LD_INT 63
26320: PUSH
26321: LD_INT 64
26323: PUSH
26324: LD_INT 65
26326: PUSH
26327: LD_INT 82
26329: PUSH
26330: LD_INT 83
26332: PUSH
26333: LD_INT 84
26335: PUSH
26336: LD_INT 85
26338: PUSH
26339: LD_INT 86
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
26397: GO 26400
26399: POP
// if state > - 1 and state < 3 then
26400: LD_VAR 0 3
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: GREATER
26409: PUSH
26410: LD_VAR 0 3
26414: PUSH
26415: LD_INT 3
26417: LESS
26418: AND
26419: IFFALSE 26476
// for i in result do
26421: LD_ADDR_VAR 0 5
26425: PUSH
26426: LD_VAR 0 4
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26474
// if GetTech ( i , side ) <> state then
26434: LD_VAR 0 5
26438: PPUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 321
26448: PUSH
26449: LD_VAR 0 3
26453: NONEQUAL
26454: IFFALSE 26472
// result := result diff i ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 4
26465: PUSH
26466: LD_VAR 0 5
26470: DIFF
26471: ST_TO_ADDR
26472: GO 26431
26474: POP
26475: POP
// end ;
26476: LD_VAR 0 4
26480: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26481: LD_INT 0
26483: PPUSH
26484: PPUSH
26485: PPUSH
// result := true ;
26486: LD_ADDR_VAR 0 3
26490: PUSH
26491: LD_INT 1
26493: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26494: LD_ADDR_VAR 0 5
26498: PUSH
26499: LD_VAR 0 2
26503: PPUSH
26504: CALL_OW 480
26508: ST_TO_ADDR
// if not tmp then
26509: LD_VAR 0 5
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26567
// for i in tmp do
26518: LD_ADDR_VAR 0 4
26522: PUSH
26523: LD_VAR 0 5
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26565
// if GetTech ( i , side ) <> state_researched then
26531: LD_VAR 0 4
26535: PPUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 321
26545: PUSH
26546: LD_INT 2
26548: NONEQUAL
26549: IFFALSE 26563
// begin result := false ;
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_INT 0
26558: ST_TO_ADDR
// exit ;
26559: POP
26560: POP
26561: GO 26567
// end ;
26563: GO 26528
26565: POP
26566: POP
// end ;
26567: LD_VAR 0 3
26571: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
26580: PPUSH
26581: PPUSH
26582: PPUSH
26583: PPUSH
26584: PPUSH
26585: PPUSH
26586: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26587: LD_VAR 0 1
26591: NOT
26592: PUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 257
26602: PUSH
26603: LD_INT 9
26605: NONEQUAL
26606: OR
26607: IFFALSE 26611
// exit ;
26609: GO 27184
// side := GetSide ( unit ) ;
26611: LD_ADDR_VAR 0 9
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 255
26625: ST_TO_ADDR
// tech_space := tech_spacanom ;
26626: LD_ADDR_VAR 0 12
26630: PUSH
26631: LD_INT 29
26633: ST_TO_ADDR
// tech_time := tech_taurad ;
26634: LD_ADDR_VAR 0 13
26638: PUSH
26639: LD_INT 28
26641: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26642: LD_ADDR_VAR 0 11
26646: PUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 310
26656: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26657: LD_VAR 0 11
26661: PPUSH
26662: CALL_OW 247
26666: PUSH
26667: LD_INT 2
26669: EQUAL
26670: IFFALSE 26674
// exit ;
26672: GO 27184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26674: LD_ADDR_VAR 0 8
26678: PUSH
26679: LD_INT 81
26681: PUSH
26682: LD_VAR 0 9
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 3
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 69
26716: ST_TO_ADDR
// if not tmp then
26717: LD_VAR 0 8
26721: NOT
26722: IFFALSE 26726
// exit ;
26724: GO 27184
// if in_unit then
26726: LD_VAR 0 11
26730: IFFALSE 26754
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26732: LD_ADDR_VAR 0 10
26736: PUSH
26737: LD_VAR 0 8
26741: PPUSH
26742: LD_VAR 0 11
26746: PPUSH
26747: CALL_OW 74
26751: ST_TO_ADDR
26752: GO 26774
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26754: LD_ADDR_VAR 0 10
26758: PUSH
26759: LD_VAR 0 8
26763: PPUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 74
26773: ST_TO_ADDR
// if not enemy then
26774: LD_VAR 0 10
26778: NOT
26779: IFFALSE 26783
// exit ;
26781: GO 27184
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26783: LD_VAR 0 11
26787: PUSH
26788: LD_VAR 0 11
26792: PPUSH
26793: LD_VAR 0 10
26797: PPUSH
26798: CALL_OW 296
26802: PUSH
26803: LD_INT 13
26805: GREATER
26806: AND
26807: PUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: LD_VAR 0 10
26817: PPUSH
26818: CALL_OW 296
26822: PUSH
26823: LD_INT 12
26825: GREATER
26826: OR
26827: IFFALSE 26831
// exit ;
26829: GO 27184
// missile := [ 1 ] ;
26831: LD_ADDR_VAR 0 14
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26842: LD_VAR 0 9
26846: PPUSH
26847: LD_VAR 0 12
26851: PPUSH
26852: CALL_OW 325
26856: IFFALSE 26885
// missile := Replace ( missile , missile + 1 , 2 ) ;
26858: LD_ADDR_VAR 0 14
26862: PUSH
26863: LD_VAR 0 14
26867: PPUSH
26868: LD_VAR 0 14
26872: PUSH
26873: LD_INT 1
26875: PLUS
26876: PPUSH
26877: LD_INT 2
26879: PPUSH
26880: CALL_OW 1
26884: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26885: LD_VAR 0 9
26889: PPUSH
26890: LD_VAR 0 13
26894: PPUSH
26895: CALL_OW 325
26899: PUSH
26900: LD_VAR 0 10
26904: PPUSH
26905: CALL_OW 255
26909: PPUSH
26910: LD_VAR 0 13
26914: PPUSH
26915: CALL_OW 325
26919: NOT
26920: AND
26921: IFFALSE 26950
// missile := Replace ( missile , missile + 1 , 3 ) ;
26923: LD_ADDR_VAR 0 14
26927: PUSH
26928: LD_VAR 0 14
26932: PPUSH
26933: LD_VAR 0 14
26937: PUSH
26938: LD_INT 1
26940: PLUS
26941: PPUSH
26942: LD_INT 3
26944: PPUSH
26945: CALL_OW 1
26949: ST_TO_ADDR
// if missile < 2 then
26950: LD_VAR 0 14
26954: PUSH
26955: LD_INT 2
26957: LESS
26958: IFFALSE 26962
// exit ;
26960: GO 27184
// x := GetX ( enemy ) ;
26962: LD_ADDR_VAR 0 4
26966: PUSH
26967: LD_VAR 0 10
26971: PPUSH
26972: CALL_OW 250
26976: ST_TO_ADDR
// y := GetY ( enemy ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 10
26986: PPUSH
26987: CALL_OW 251
26991: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26992: LD_ADDR_VAR 0 6
26996: PUSH
26997: LD_VAR 0 4
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PPUSH
27006: LD_INT 1
27008: PPUSH
27009: CALL_OW 12
27013: PLUS
27014: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27015: LD_ADDR_VAR 0 7
27019: PUSH
27020: LD_VAR 0 5
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PPUSH
27029: LD_INT 1
27031: PPUSH
27032: CALL_OW 12
27036: PLUS
27037: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27038: LD_VAR 0 6
27042: PPUSH
27043: LD_VAR 0 7
27047: PPUSH
27048: CALL_OW 488
27052: NOT
27053: IFFALSE 27075
// begin _x := x ;
27055: LD_ADDR_VAR 0 6
27059: PUSH
27060: LD_VAR 0 4
27064: ST_TO_ADDR
// _y := y ;
27065: LD_ADDR_VAR 0 7
27069: PUSH
27070: LD_VAR 0 5
27074: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27075: LD_ADDR_VAR 0 3
27079: PUSH
27080: LD_INT 1
27082: PPUSH
27083: LD_VAR 0 14
27087: PPUSH
27088: CALL_OW 12
27092: ST_TO_ADDR
// case i of 1 :
27093: LD_VAR 0 3
27097: PUSH
27098: LD_INT 1
27100: DOUBLE
27101: EQUAL
27102: IFTRUE 27106
27104: GO 27123
27106: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_VAR 0 10
27116: PPUSH
27117: CALL_OW 115
27121: GO 27184
27123: LD_INT 2
27125: DOUBLE
27126: EQUAL
27127: IFTRUE 27131
27129: GO 27153
27131: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_VAR 0 6
27141: PPUSH
27142: LD_VAR 0 7
27146: PPUSH
27147: CALL_OW 153
27151: GO 27184
27153: LD_INT 3
27155: DOUBLE
27156: EQUAL
27157: IFTRUE 27161
27159: GO 27183
27161: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_VAR 0 6
27171: PPUSH
27172: LD_VAR 0 7
27176: PPUSH
27177: CALL_OW 154
27181: GO 27184
27183: POP
// end ;
27184: LD_VAR 0 2
27188: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
27195: PPUSH
27196: PPUSH
// if not unit or not building then
27197: LD_VAR 0 1
27201: NOT
27202: PUSH
27203: LD_VAR 0 2
27207: NOT
27208: OR
27209: IFFALSE 27213
// exit ;
27211: GO 27371
// x := GetX ( building ) ;
27213: LD_ADDR_VAR 0 5
27217: PUSH
27218: LD_VAR 0 2
27222: PPUSH
27223: CALL_OW 250
27227: ST_TO_ADDR
// y := GetY ( building ) ;
27228: LD_ADDR_VAR 0 6
27232: PUSH
27233: LD_VAR 0 2
27237: PPUSH
27238: CALL_OW 251
27242: ST_TO_ADDR
// for i = 0 to 5 do
27243: LD_ADDR_VAR 0 4
27247: PUSH
27248: DOUBLE
27249: LD_INT 0
27251: DEC
27252: ST_TO_ADDR
27253: LD_INT 5
27255: PUSH
27256: FOR_TO
27257: IFFALSE 27369
// begin _x := ShiftX ( x , i , 3 ) ;
27259: LD_ADDR_VAR 0 7
27263: PUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: LD_VAR 0 4
27273: PPUSH
27274: LD_INT 3
27276: PPUSH
27277: CALL_OW 272
27281: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27282: LD_ADDR_VAR 0 8
27286: PUSH
27287: LD_VAR 0 6
27291: PPUSH
27292: LD_VAR 0 4
27296: PPUSH
27297: LD_INT 3
27299: PPUSH
27300: CALL_OW 273
27304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27305: LD_VAR 0 7
27309: PPUSH
27310: LD_VAR 0 8
27314: PPUSH
27315: CALL_OW 488
27319: NOT
27320: IFFALSE 27324
// continue ;
27322: GO 27256
// if HexInfo ( _x , _y ) = 0 then
27324: LD_VAR 0 7
27328: PPUSH
27329: LD_VAR 0 8
27333: PPUSH
27334: CALL_OW 428
27338: PUSH
27339: LD_INT 0
27341: EQUAL
27342: IFFALSE 27367
// begin ComMoveXY ( unit , _x , _y ) ;
27344: LD_VAR 0 1
27348: PPUSH
27349: LD_VAR 0 7
27353: PPUSH
27354: LD_VAR 0 8
27358: PPUSH
27359: CALL_OW 111
// exit ;
27363: POP
27364: POP
27365: GO 27371
// end ; end ;
27367: GO 27256
27369: POP
27370: POP
// end ;
27371: LD_VAR 0 3
27375: RET
// export function ScanBase ( side , base_area ) ; begin
27376: LD_INT 0
27378: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_VAR 0 2
27388: PPUSH
27389: LD_INT 81
27391: PUSH
27392: LD_VAR 0 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PPUSH
27401: CALL_OW 70
27405: ST_TO_ADDR
// end ;
27406: LD_VAR 0 3
27410: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27411: LD_INT 0
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
// result := false ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_INT 0
27424: ST_TO_ADDR
// side := GetSide ( unit ) ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 255
27439: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27440: LD_ADDR_VAR 0 4
27444: PUSH
27445: LD_VAR 0 1
27449: PPUSH
27450: CALL_OW 248
27454: ST_TO_ADDR
// case nat of 1 :
27455: LD_VAR 0 4
27459: PUSH
27460: LD_INT 1
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27479
27468: POP
// tech := tech_lassight ; 2 :
27469: LD_ADDR_VAR 0 5
27473: PUSH
27474: LD_INT 12
27476: ST_TO_ADDR
27477: GO 27518
27479: LD_INT 2
27481: DOUBLE
27482: EQUAL
27483: IFTRUE 27487
27485: GO 27498
27487: POP
// tech := tech_mortar ; 3 :
27488: LD_ADDR_VAR 0 5
27492: PUSH
27493: LD_INT 41
27495: ST_TO_ADDR
27496: GO 27518
27498: LD_INT 3
27500: DOUBLE
27501: EQUAL
27502: IFTRUE 27506
27504: GO 27517
27506: POP
// tech := tech_bazooka ; end ;
27507: LD_ADDR_VAR 0 5
27511: PUSH
27512: LD_INT 44
27514: ST_TO_ADDR
27515: GO 27518
27517: POP
// if Researched ( side , tech ) then
27518: LD_VAR 0 3
27522: PPUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: CALL_OW 325
27532: IFFALSE 27559
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27534: LD_ADDR_VAR 0 2
27538: PUSH
27539: LD_INT 5
27541: PUSH
27542: LD_INT 8
27544: PUSH
27545: LD_INT 9
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: PUSH
27553: LD_VAR 0 4
27557: ARRAY
27558: ST_TO_ADDR
// end ;
27559: LD_VAR 0 2
27563: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
// if not mines then
27569: LD_VAR 0 2
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27722
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27578: LD_ADDR_VAR 0 5
27582: PUSH
27583: LD_INT 81
27585: PUSH
27586: LD_VAR 0 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 3
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 3
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// for i in mines do
27621: LD_ADDR_VAR 0 4
27625: PUSH
27626: LD_VAR 0 2
27630: PUSH
27631: FOR_IN
27632: IFFALSE 27720
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27634: LD_VAR 0 4
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PPUSH
27643: LD_VAR 0 4
27647: PUSH
27648: LD_INT 2
27650: ARRAY
27651: PPUSH
27652: CALL_OW 458
27656: NOT
27657: IFFALSE 27661
// continue ;
27659: GO 27631
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27661: LD_VAR 0 4
27665: PUSH
27666: LD_INT 1
27668: ARRAY
27669: PPUSH
27670: LD_VAR 0 4
27674: PUSH
27675: LD_INT 2
27677: ARRAY
27678: PPUSH
27679: CALL_OW 428
27683: PUSH
27684: LD_VAR 0 5
27688: IN
27689: IFFALSE 27718
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27691: LD_VAR 0 4
27695: PUSH
27696: LD_INT 1
27698: ARRAY
27699: PPUSH
27700: LD_VAR 0 4
27704: PUSH
27705: LD_INT 2
27707: ARRAY
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 456
// end ;
27718: GO 27631
27720: POP
27721: POP
// end ;
27722: LD_VAR 0 3
27726: RET
// export function Count ( array ) ; var i ; begin
27727: LD_INT 0
27729: PPUSH
27730: PPUSH
// result := 0 ;
27731: LD_ADDR_VAR 0 2
27735: PUSH
27736: LD_INT 0
27738: ST_TO_ADDR
// for i in array do
27739: LD_ADDR_VAR 0 3
27743: PUSH
27744: LD_VAR 0 1
27748: PUSH
27749: FOR_IN
27750: IFFALSE 27774
// if i then
27752: LD_VAR 0 3
27756: IFFALSE 27772
// result := result + 1 ;
27758: LD_ADDR_VAR 0 2
27762: PUSH
27763: LD_VAR 0 2
27767: PUSH
27768: LD_INT 1
27770: PLUS
27771: ST_TO_ADDR
27772: GO 27749
27774: POP
27775: POP
// end ;
27776: LD_VAR 0 2
27780: RET
// export function IsEmpty ( building ) ; begin
27781: LD_INT 0
27783: PPUSH
// if not building then
27784: LD_VAR 0 1
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 27836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27793: LD_ADDR_VAR 0 2
27797: PUSH
27798: LD_VAR 0 1
27802: PUSH
27803: LD_INT 22
27805: PUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: CALL_OW 255
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 58
27822: PUSH
27823: EMPTY
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: IN
27835: ST_TO_ADDR
// end ;
27836: LD_VAR 0 2
27840: RET
// export function IsNotFull ( building ) ; begin
27841: LD_INT 0
27843: PPUSH
// if not building then
27844: LD_VAR 0 1
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27872
// result := UnitsInside ( building ) < 6 ;
27853: LD_ADDR_VAR 0 2
27857: PUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 313
27867: PUSH
27868: LD_INT 6
27870: LESS
27871: ST_TO_ADDR
// end ;
27872: LD_VAR 0 2
27876: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27877: LD_INT 0
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
// tmp := [ ] ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: EMPTY
27889: ST_TO_ADDR
// list := [ ] ;
27890: LD_ADDR_VAR 0 5
27894: PUSH
27895: EMPTY
27896: ST_TO_ADDR
// for i = 16 to 25 do
27897: LD_ADDR_VAR 0 4
27901: PUSH
27902: DOUBLE
27903: LD_INT 16
27905: DEC
27906: ST_TO_ADDR
27907: LD_INT 25
27909: PUSH
27910: FOR_TO
27911: IFFALSE 27984
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 22
27925: PUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 255
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 91
27942: PUSH
27943: LD_VAR 0 1
27947: PUSH
27948: LD_INT 6
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 30
27958: PUSH
27959: LD_VAR 0 4
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: PPUSH
27976: CALL_OW 69
27980: ADD
27981: ST_TO_ADDR
27982: GO 27910
27984: POP
27985: POP
// for i = 1 to tmp do
27986: LD_ADDR_VAR 0 4
27990: PUSH
27991: DOUBLE
27992: LD_INT 1
27994: DEC
27995: ST_TO_ADDR
27996: LD_VAR 0 3
28000: PUSH
28001: FOR_TO
28002: IFFALSE 28090
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28004: LD_ADDR_VAR 0 5
28008: PUSH
28009: LD_VAR 0 5
28013: PUSH
28014: LD_VAR 0 3
28018: PUSH
28019: LD_VAR 0 4
28023: ARRAY
28024: PPUSH
28025: CALL_OW 266
28029: PUSH
28030: LD_VAR 0 3
28034: PUSH
28035: LD_VAR 0 4
28039: ARRAY
28040: PPUSH
28041: CALL_OW 250
28045: PUSH
28046: LD_VAR 0 3
28050: PUSH
28051: LD_VAR 0 4
28055: ARRAY
28056: PPUSH
28057: CALL_OW 251
28061: PUSH
28062: LD_VAR 0 3
28066: PUSH
28067: LD_VAR 0 4
28071: ARRAY
28072: PPUSH
28073: CALL_OW 254
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: ADD
28087: ST_TO_ADDR
28088: GO 28001
28090: POP
28091: POP
// result := list ;
28092: LD_ADDR_VAR 0 2
28096: PUSH
28097: LD_VAR 0 5
28101: ST_TO_ADDR
// end ;
28102: LD_VAR 0 2
28106: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
// if not factory then
28116: LD_VAR 0 1
28120: NOT
28121: IFFALSE 28125
// exit ;
28123: GO 28718
// if control = control_apeman then
28125: LD_VAR 0 4
28129: PUSH
28130: LD_INT 5
28132: EQUAL
28133: IFFALSE 28242
// begin tmp := UnitsInside ( factory ) ;
28135: LD_ADDR_VAR 0 8
28139: PUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 313
28149: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28150: LD_VAR 0 8
28154: PPUSH
28155: LD_INT 25
28157: PUSH
28158: LD_INT 12
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PPUSH
28165: CALL_OW 72
28169: NOT
28170: IFFALSE 28180
// control := control_manual ;
28172: LD_ADDR_VAR 0 4
28176: PUSH
28177: LD_INT 1
28179: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28180: LD_ADDR_VAR 0 8
28184: PUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL 27877 0 1
28194: ST_TO_ADDR
// if tmp then
28195: LD_VAR 0 8
28199: IFFALSE 28242
// begin for i in tmp do
28201: LD_ADDR_VAR 0 7
28205: PUSH
28206: LD_VAR 0 8
28210: PUSH
28211: FOR_IN
28212: IFFALSE 28240
// if i [ 1 ] = b_ext_radio then
28214: LD_VAR 0 7
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: PUSH
28223: LD_INT 22
28225: EQUAL
28226: IFFALSE 28238
// begin control := control_remote ;
28228: LD_ADDR_VAR 0 4
28232: PUSH
28233: LD_INT 2
28235: ST_TO_ADDR
// break ;
28236: GO 28240
// end ;
28238: GO 28211
28240: POP
28241: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28242: LD_VAR 0 1
28246: PPUSH
28247: LD_VAR 0 2
28251: PPUSH
28252: LD_VAR 0 3
28256: PPUSH
28257: LD_VAR 0 4
28261: PPUSH
28262: LD_VAR 0 5
28266: PPUSH
28267: CALL_OW 448
28271: IFFALSE 28306
// begin result := [ chassis , engine , control , weapon ] ;
28273: LD_ADDR_VAR 0 6
28277: PUSH
28278: LD_VAR 0 2
28282: PUSH
28283: LD_VAR 0 3
28287: PUSH
28288: LD_VAR 0 4
28292: PUSH
28293: LD_VAR 0 5
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// exit ;
28304: GO 28718
// end ; _chassis := AvailableChassisList ( factory ) ;
28306: LD_ADDR_VAR 0 9
28310: PUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 475
28320: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28321: LD_ADDR_VAR 0 11
28325: PUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: CALL_OW 476
28335: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28336: LD_ADDR_VAR 0 12
28340: PUSH
28341: LD_VAR 0 1
28345: PPUSH
28346: CALL_OW 477
28350: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28351: LD_ADDR_VAR 0 10
28355: PUSH
28356: LD_VAR 0 1
28360: PPUSH
28361: CALL_OW 478
28365: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28366: LD_VAR 0 9
28370: NOT
28371: PUSH
28372: LD_VAR 0 11
28376: NOT
28377: OR
28378: PUSH
28379: LD_VAR 0 12
28383: NOT
28384: OR
28385: PUSH
28386: LD_VAR 0 10
28390: NOT
28391: OR
28392: IFFALSE 28427
// begin result := [ chassis , engine , control , weapon ] ;
28394: LD_ADDR_VAR 0 6
28398: PUSH
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 3
28408: PUSH
28409: LD_VAR 0 4
28413: PUSH
28414: LD_VAR 0 5
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// exit ;
28425: GO 28718
// end ; if not chassis in _chassis then
28427: LD_VAR 0 2
28431: PUSH
28432: LD_VAR 0 9
28436: IN
28437: NOT
28438: IFFALSE 28464
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28440: LD_ADDR_VAR 0 2
28444: PUSH
28445: LD_VAR 0 9
28449: PUSH
28450: LD_INT 1
28452: PPUSH
28453: LD_VAR 0 9
28457: PPUSH
28458: CALL_OW 12
28462: ARRAY
28463: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28464: LD_VAR 0 2
28468: PPUSH
28469: LD_VAR 0 3
28473: PPUSH
28474: CALL 28723 0 2
28478: NOT
28479: IFFALSE 28538
// repeat engine := _engine [ 1 ] ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_VAR 0 11
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28495: LD_ADDR_VAR 0 11
28499: PUSH
28500: LD_VAR 0 11
28504: PPUSH
28505: LD_INT 1
28507: PPUSH
28508: CALL_OW 3
28512: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28513: LD_VAR 0 2
28517: PPUSH
28518: LD_VAR 0 3
28522: PPUSH
28523: CALL 28723 0 2
28527: PUSH
28528: LD_VAR 0 11
28532: PUSH
28533: EMPTY
28534: EQUAL
28535: OR
28536: IFFALSE 28481
// if not control in _control then
28538: LD_VAR 0 4
28542: PUSH
28543: LD_VAR 0 12
28547: IN
28548: NOT
28549: IFFALSE 28575
// control := _control [ rand ( 1 , _control ) ] ;
28551: LD_ADDR_VAR 0 4
28555: PUSH
28556: LD_VAR 0 12
28560: PUSH
28561: LD_INT 1
28563: PPUSH
28564: LD_VAR 0 12
28568: PPUSH
28569: CALL_OW 12
28573: ARRAY
28574: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28575: LD_VAR 0 2
28579: PPUSH
28580: LD_VAR 0 5
28584: PPUSH
28585: CALL 28943 0 2
28589: NOT
28590: IFFALSE 28649
// repeat weapon := _weapon [ 1 ] ;
28592: LD_ADDR_VAR 0 5
28596: PUSH
28597: LD_VAR 0 10
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28606: LD_ADDR_VAR 0 10
28610: PUSH
28611: LD_VAR 0 10
28615: PPUSH
28616: LD_INT 1
28618: PPUSH
28619: CALL_OW 3
28623: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: CALL 28943 0 2
28638: PUSH
28639: LD_VAR 0 10
28643: PUSH
28644: EMPTY
28645: EQUAL
28646: OR
28647: IFFALSE 28592
// result := [ ] ;
28649: LD_ADDR_VAR 0 6
28653: PUSH
28654: EMPTY
28655: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28656: LD_VAR 0 1
28660: PPUSH
28661: LD_VAR 0 2
28665: PPUSH
28666: LD_VAR 0 3
28670: PPUSH
28671: LD_VAR 0 4
28675: PPUSH
28676: LD_VAR 0 5
28680: PPUSH
28681: CALL_OW 448
28685: IFFALSE 28718
// result := [ chassis , engine , control , weapon ] ;
28687: LD_ADDR_VAR 0 6
28691: PUSH
28692: LD_VAR 0 2
28696: PUSH
28697: LD_VAR 0 3
28701: PUSH
28702: LD_VAR 0 4
28706: PUSH
28707: LD_VAR 0 5
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: ST_TO_ADDR
// end ;
28718: LD_VAR 0 6
28722: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28723: LD_INT 0
28725: PPUSH
// if not chassis or not engine then
28726: LD_VAR 0 1
28730: NOT
28731: PUSH
28732: LD_VAR 0 2
28736: NOT
28737: OR
28738: IFFALSE 28742
// exit ;
28740: GO 28938
// case engine of engine_solar :
28742: LD_VAR 0 2
28746: PUSH
28747: LD_INT 2
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28793
28755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 11
28763: PUSH
28764: LD_INT 12
28766: PUSH
28767: LD_INT 13
28769: PUSH
28770: LD_INT 14
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
28791: GO 28922
28793: LD_INT 1
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28863
28801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 11
28809: PUSH
28810: LD_INT 12
28812: PUSH
28813: LD_INT 13
28815: PUSH
28816: LD_INT 14
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: LD_INT 3
28827: PUSH
28828: LD_INT 4
28830: PUSH
28831: LD_INT 5
28833: PUSH
28834: LD_INT 21
28836: PUSH
28837: LD_INT 23
28839: PUSH
28840: LD_INT 22
28842: PUSH
28843: LD_INT 24
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: ST_TO_ADDR
28861: GO 28922
28863: LD_INT 3
28865: DOUBLE
28866: EQUAL
28867: IFTRUE 28871
28869: GO 28921
28871: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28872: LD_ADDR_VAR 0 3
28876: PUSH
28877: LD_INT 13
28879: PUSH
28880: LD_INT 14
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: LD_INT 4
28891: PUSH
28892: LD_INT 5
28894: PUSH
28895: LD_INT 21
28897: PUSH
28898: LD_INT 22
28900: PUSH
28901: LD_INT 23
28903: PUSH
28904: LD_INT 24
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: ST_TO_ADDR
28919: GO 28922
28921: POP
// result := ( chassis in result ) ;
28922: LD_ADDR_VAR 0 3
28926: PUSH
28927: LD_VAR 0 1
28931: PUSH
28932: LD_VAR 0 3
28936: IN
28937: ST_TO_ADDR
// end ;
28938: LD_VAR 0 3
28942: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28943: LD_INT 0
28945: PPUSH
// if not chassis or not weapon then
28946: LD_VAR 0 1
28950: NOT
28951: PUSH
28952: LD_VAR 0 2
28956: NOT
28957: OR
28958: IFFALSE 28962
// exit ;
28960: GO 30024
// case weapon of us_machine_gun :
28962: LD_VAR 0 2
28966: PUSH
28967: LD_INT 2
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29005
28975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: ST_TO_ADDR
29003: GO 30008
29005: LD_INT 3
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29043
29013: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29014: LD_ADDR_VAR 0 3
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 4
29030: PUSH
29031: LD_INT 5
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
29041: GO 30008
29043: LD_INT 11
29045: DOUBLE
29046: EQUAL
29047: IFTRUE 29051
29049: GO 29081
29051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29052: LD_ADDR_VAR 0 3
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: LD_INT 3
29065: PUSH
29066: LD_INT 4
29068: PUSH
29069: LD_INT 5
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
29079: GO 30008
29081: LD_INT 4
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29115
29089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29090: LD_ADDR_VAR 0 3
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 3
29100: PUSH
29101: LD_INT 4
29103: PUSH
29104: LD_INT 5
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
29113: GO 30008
29115: LD_INT 5
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29149
29123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: LD_INT 5
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
29147: GO 30008
29149: LD_INT 9
29151: DOUBLE
29152: EQUAL
29153: IFTRUE 29157
29155: GO 29183
29157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29158: LD_ADDR_VAR 0 3
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 4
29171: PUSH
29172: LD_INT 5
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
29181: GO 30008
29183: LD_INT 7
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29217
29191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 3
29202: PUSH
29203: LD_INT 4
29205: PUSH
29206: LD_INT 5
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
29215: GO 30008
29217: LD_INT 12
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29251
29225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 4
29239: PUSH
29240: LD_INT 5
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
29249: GO 30008
29251: LD_INT 13
29253: DOUBLE
29254: EQUAL
29255: IFTRUE 29259
29257: GO 29285
29259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29260: LD_ADDR_VAR 0 3
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: LD_INT 4
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
29283: GO 30008
29285: LD_INT 14
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29293
29291: GO 29311
29293: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29294: LD_ADDR_VAR 0 3
29298: PUSH
29299: LD_INT 4
29301: PUSH
29302: LD_INT 5
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: ST_TO_ADDR
29309: GO 30008
29311: LD_INT 6
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29337
29319: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29320: LD_ADDR_VAR 0 3
29324: PUSH
29325: LD_INT 4
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: ST_TO_ADDR
29335: GO 30008
29337: LD_INT 10
29339: DOUBLE
29340: EQUAL
29341: IFTRUE 29345
29343: GO 29363
29345: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_INT 4
29353: PUSH
29354: LD_INT 5
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: ST_TO_ADDR
29361: GO 30008
29363: LD_INT 22
29365: DOUBLE
29366: EQUAL
29367: IFTRUE 29371
29369: GO 29397
29371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 11
29379: PUSH
29380: LD_INT 12
29382: PUSH
29383: LD_INT 13
29385: PUSH
29386: LD_INT 14
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
29395: GO 30008
29397: LD_INT 23
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29431
29405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 11
29413: PUSH
29414: LD_INT 12
29416: PUSH
29417: LD_INT 13
29419: PUSH
29420: LD_INT 14
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
29429: GO 30008
29431: LD_INT 24
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29465
29439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 11
29447: PUSH
29448: LD_INT 12
29450: PUSH
29451: LD_INT 13
29453: PUSH
29454: LD_INT 14
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 30008
29465: LD_INT 30
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 11
29481: PUSH
29482: LD_INT 12
29484: PUSH
29485: LD_INT 13
29487: PUSH
29488: LD_INT 14
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 30008
29499: LD_INT 25
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29525
29507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 13
29515: PUSH
29516: LD_INT 14
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: ST_TO_ADDR
29523: GO 30008
29525: LD_INT 27
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29551
29533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_INT 13
29541: PUSH
29542: LD_INT 14
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: ST_TO_ADDR
29549: GO 30008
29551: LD_EXP 101
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29587
29561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 11
29569: PUSH
29570: LD_INT 12
29572: PUSH
29573: LD_INT 13
29575: PUSH
29576: LD_INT 14
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
29585: GO 30008
29587: LD_INT 28
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29613
29595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 13
29603: PUSH
29604: LD_INT 14
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: ST_TO_ADDR
29611: GO 30008
29613: LD_INT 29
29615: DOUBLE
29616: EQUAL
29617: IFTRUE 29621
29619: GO 29639
29621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_INT 13
29629: PUSH
29630: LD_INT 14
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 30008
29639: LD_INT 31
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29665
29647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_INT 13
29655: PUSH
29656: LD_INT 14
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: ST_TO_ADDR
29663: GO 30008
29665: LD_INT 26
29667: DOUBLE
29668: EQUAL
29669: IFTRUE 29673
29671: GO 29691
29673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29674: LD_ADDR_VAR 0 3
29678: PUSH
29679: LD_INT 13
29681: PUSH
29682: LD_INT 14
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: ST_TO_ADDR
29689: GO 30008
29691: LD_INT 42
29693: DOUBLE
29694: EQUAL
29695: IFTRUE 29699
29697: GO 29725
29699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29700: LD_ADDR_VAR 0 3
29704: PUSH
29705: LD_INT 21
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_INT 23
29713: PUSH
29714: LD_INT 24
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
29723: GO 30008
29725: LD_INT 43
29727: DOUBLE
29728: EQUAL
29729: IFTRUE 29733
29731: GO 29759
29733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29734: LD_ADDR_VAR 0 3
29738: PUSH
29739: LD_INT 21
29741: PUSH
29742: LD_INT 22
29744: PUSH
29745: LD_INT 23
29747: PUSH
29748: LD_INT 24
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
29757: GO 30008
29759: LD_INT 44
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29793
29767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_INT 21
29775: PUSH
29776: LD_INT 22
29778: PUSH
29779: LD_INT 23
29781: PUSH
29782: LD_INT 24
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: ST_TO_ADDR
29791: GO 30008
29793: LD_INT 45
29795: DOUBLE
29796: EQUAL
29797: IFTRUE 29801
29799: GO 29827
29801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29802: LD_ADDR_VAR 0 3
29806: PUSH
29807: LD_INT 21
29809: PUSH
29810: LD_INT 22
29812: PUSH
29813: LD_INT 23
29815: PUSH
29816: LD_INT 24
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: ST_TO_ADDR
29825: GO 30008
29827: LD_INT 49
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29861
29835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29836: LD_ADDR_VAR 0 3
29840: PUSH
29841: LD_INT 21
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_INT 23
29849: PUSH
29850: LD_INT 24
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: ST_TO_ADDR
29859: GO 30008
29861: LD_INT 51
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29895
29869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: LD_INT 21
29877: PUSH
29878: LD_INT 22
29880: PUSH
29881: LD_INT 23
29883: PUSH
29884: LD_INT 24
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: ST_TO_ADDR
29893: GO 30008
29895: LD_INT 52
29897: DOUBLE
29898: EQUAL
29899: IFTRUE 29903
29901: GO 29929
29903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29904: LD_ADDR_VAR 0 3
29908: PUSH
29909: LD_INT 21
29911: PUSH
29912: LD_INT 22
29914: PUSH
29915: LD_INT 23
29917: PUSH
29918: LD_INT 24
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
29927: GO 30008
29929: LD_INT 53
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 29955
29937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29938: LD_ADDR_VAR 0 3
29942: PUSH
29943: LD_INT 23
29945: PUSH
29946: LD_INT 24
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: ST_TO_ADDR
29953: GO 30008
29955: LD_INT 46
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29981
29963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 23
29971: PUSH
29972: LD_INT 24
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: ST_TO_ADDR
29979: GO 30008
29981: LD_INT 47
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30007
29989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29990: LD_ADDR_VAR 0 3
29994: PUSH
29995: LD_INT 23
29997: PUSH
29998: LD_INT 24
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: ST_TO_ADDR
30005: GO 30008
30007: POP
// result := ( chassis in result ) ;
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_VAR 0 1
30017: PUSH
30018: LD_VAR 0 3
30022: IN
30023: ST_TO_ADDR
// end ;
30024: LD_VAR 0 3
30028: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
// result := array ;
30038: LD_ADDR_VAR 0 5
30042: PUSH
30043: LD_VAR 0 1
30047: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30048: LD_VAR 0 1
30052: NOT
30053: PUSH
30054: LD_VAR 0 2
30058: NOT
30059: OR
30060: PUSH
30061: LD_VAR 0 3
30065: NOT
30066: OR
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: LD_VAR 0 1
30077: GREATER
30078: OR
30079: PUSH
30080: LD_VAR 0 3
30084: PUSH
30085: LD_VAR 0 1
30089: GREATER
30090: OR
30091: IFFALSE 30095
// exit ;
30093: GO 30391
// if direction then
30095: LD_VAR 0 4
30099: IFFALSE 30163
// begin d := 1 ;
30101: LD_ADDR_VAR 0 9
30105: PUSH
30106: LD_INT 1
30108: ST_TO_ADDR
// if i_from > i_to then
30109: LD_VAR 0 2
30113: PUSH
30114: LD_VAR 0 3
30118: GREATER
30119: IFFALSE 30145
// length := ( array - i_from ) + i_to else
30121: LD_ADDR_VAR 0 11
30125: PUSH
30126: LD_VAR 0 1
30130: PUSH
30131: LD_VAR 0 2
30135: MINUS
30136: PUSH
30137: LD_VAR 0 3
30141: PLUS
30142: ST_TO_ADDR
30143: GO 30161
// length := i_to - i_from ;
30145: LD_ADDR_VAR 0 11
30149: PUSH
30150: LD_VAR 0 3
30154: PUSH
30155: LD_VAR 0 2
30159: MINUS
30160: ST_TO_ADDR
// end else
30161: GO 30224
// begin d := - 1 ;
30163: LD_ADDR_VAR 0 9
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: ST_TO_ADDR
// if i_from > i_to then
30172: LD_VAR 0 2
30176: PUSH
30177: LD_VAR 0 3
30181: GREATER
30182: IFFALSE 30202
// length := i_from - i_to else
30184: LD_ADDR_VAR 0 11
30188: PUSH
30189: LD_VAR 0 2
30193: PUSH
30194: LD_VAR 0 3
30198: MINUS
30199: ST_TO_ADDR
30200: GO 30224
// length := ( array - i_to ) + i_from ;
30202: LD_ADDR_VAR 0 11
30206: PUSH
30207: LD_VAR 0 1
30211: PUSH
30212: LD_VAR 0 3
30216: MINUS
30217: PUSH
30218: LD_VAR 0 2
30222: PLUS
30223: ST_TO_ADDR
// end ; if not length then
30224: LD_VAR 0 11
30228: NOT
30229: IFFALSE 30233
// exit ;
30231: GO 30391
// tmp := array ;
30233: LD_ADDR_VAR 0 10
30237: PUSH
30238: LD_VAR 0 1
30242: ST_TO_ADDR
// for i = 1 to length do
30243: LD_ADDR_VAR 0 6
30247: PUSH
30248: DOUBLE
30249: LD_INT 1
30251: DEC
30252: ST_TO_ADDR
30253: LD_VAR 0 11
30257: PUSH
30258: FOR_TO
30259: IFFALSE 30379
// begin for j = 1 to array do
30261: LD_ADDR_VAR 0 7
30265: PUSH
30266: DOUBLE
30267: LD_INT 1
30269: DEC
30270: ST_TO_ADDR
30271: LD_VAR 0 1
30275: PUSH
30276: FOR_TO
30277: IFFALSE 30365
// begin k := j + d ;
30279: LD_ADDR_VAR 0 8
30283: PUSH
30284: LD_VAR 0 7
30288: PUSH
30289: LD_VAR 0 9
30293: PLUS
30294: ST_TO_ADDR
// if k > array then
30295: LD_VAR 0 8
30299: PUSH
30300: LD_VAR 0 1
30304: GREATER
30305: IFFALSE 30315
// k := 1 ;
30307: LD_ADDR_VAR 0 8
30311: PUSH
30312: LD_INT 1
30314: ST_TO_ADDR
// if not k then
30315: LD_VAR 0 8
30319: NOT
30320: IFFALSE 30332
// k := array ;
30322: LD_ADDR_VAR 0 8
30326: PUSH
30327: LD_VAR 0 1
30331: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30332: LD_ADDR_VAR 0 10
30336: PUSH
30337: LD_VAR 0 10
30341: PPUSH
30342: LD_VAR 0 8
30346: PPUSH
30347: LD_VAR 0 1
30351: PUSH
30352: LD_VAR 0 7
30356: ARRAY
30357: PPUSH
30358: CALL_OW 1
30362: ST_TO_ADDR
// end ;
30363: GO 30276
30365: POP
30366: POP
// array := tmp ;
30367: LD_ADDR_VAR 0 1
30371: PUSH
30372: LD_VAR 0 10
30376: ST_TO_ADDR
// end ;
30377: GO 30258
30379: POP
30380: POP
// result := array ;
30381: LD_ADDR_VAR 0 5
30385: PUSH
30386: LD_VAR 0 1
30390: ST_TO_ADDR
// end ;
30391: LD_VAR 0 5
30395: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30396: LD_INT 0
30398: PPUSH
30399: PPUSH
// result := 0 ;
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 0
30407: ST_TO_ADDR
// if not array or not value in array then
30408: LD_VAR 0 1
30412: NOT
30413: PUSH
30414: LD_VAR 0 2
30418: PUSH
30419: LD_VAR 0 1
30423: IN
30424: NOT
30425: OR
30426: IFFALSE 30430
// exit ;
30428: GO 30484
// for i = 1 to array do
30430: LD_ADDR_VAR 0 4
30434: PUSH
30435: DOUBLE
30436: LD_INT 1
30438: DEC
30439: ST_TO_ADDR
30440: LD_VAR 0 1
30444: PUSH
30445: FOR_TO
30446: IFFALSE 30482
// if value = array [ i ] then
30448: LD_VAR 0 2
30452: PUSH
30453: LD_VAR 0 1
30457: PUSH
30458: LD_VAR 0 4
30462: ARRAY
30463: EQUAL
30464: IFFALSE 30480
// begin result := i ;
30466: LD_ADDR_VAR 0 3
30470: PUSH
30471: LD_VAR 0 4
30475: ST_TO_ADDR
// exit ;
30476: POP
30477: POP
30478: GO 30484
// end ;
30480: GO 30445
30482: POP
30483: POP
// end ;
30484: LD_VAR 0 3
30488: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30489: LD_INT 0
30491: PPUSH
// vc_chassis := chassis ;
30492: LD_ADDR_OWVAR 37
30496: PUSH
30497: LD_VAR 0 1
30501: ST_TO_ADDR
// vc_engine := engine ;
30502: LD_ADDR_OWVAR 39
30506: PUSH
30507: LD_VAR 0 2
30511: ST_TO_ADDR
// vc_control := control ;
30512: LD_ADDR_OWVAR 38
30516: PUSH
30517: LD_VAR 0 3
30521: ST_TO_ADDR
// vc_weapon := weapon ;
30522: LD_ADDR_OWVAR 40
30526: PUSH
30527: LD_VAR 0 4
30531: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30532: LD_ADDR_OWVAR 41
30536: PUSH
30537: LD_VAR 0 5
30541: ST_TO_ADDR
// end ;
30542: LD_VAR 0 6
30546: RET
// export function WantPlant ( unit ) ; var task ; begin
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
// result := false ;
30551: LD_ADDR_VAR 0 2
30555: PUSH
30556: LD_INT 0
30558: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30559: LD_ADDR_VAR 0 3
30563: PUSH
30564: LD_VAR 0 1
30568: PPUSH
30569: CALL_OW 437
30573: ST_TO_ADDR
// if task then
30574: LD_VAR 0 3
30578: IFFALSE 30606
// if task [ 1 ] [ 1 ] = p then
30580: LD_VAR 0 3
30584: PUSH
30585: LD_INT 1
30587: ARRAY
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: PUSH
30593: LD_STRING p
30595: EQUAL
30596: IFFALSE 30606
// result := true ;
30598: LD_ADDR_VAR 0 2
30602: PUSH
30603: LD_INT 1
30605: ST_TO_ADDR
// end ;
30606: LD_VAR 0 2
30610: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
// if pos < 1 then
30617: LD_VAR 0 2
30621: PUSH
30622: LD_INT 1
30624: LESS
30625: IFFALSE 30629
// exit ;
30627: GO 30932
// if pos = 1 then
30629: LD_VAR 0 2
30633: PUSH
30634: LD_INT 1
30636: EQUAL
30637: IFFALSE 30670
// result := Replace ( arr , pos [ 1 ] , value ) else
30639: LD_ADDR_VAR 0 4
30643: PUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: LD_VAR 0 2
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: PPUSH
30658: LD_VAR 0 3
30662: PPUSH
30663: CALL_OW 1
30667: ST_TO_ADDR
30668: GO 30932
// begin tmp := arr ;
30670: LD_ADDR_VAR 0 6
30674: PUSH
30675: LD_VAR 0 1
30679: ST_TO_ADDR
// s_arr := [ tmp ] ;
30680: LD_ADDR_VAR 0 7
30684: PUSH
30685: LD_VAR 0 6
30689: PUSH
30690: EMPTY
30691: LIST
30692: ST_TO_ADDR
// for i = 1 to pos - 1 do
30693: LD_ADDR_VAR 0 5
30697: PUSH
30698: DOUBLE
30699: LD_INT 1
30701: DEC
30702: ST_TO_ADDR
30703: LD_VAR 0 2
30707: PUSH
30708: LD_INT 1
30710: MINUS
30711: PUSH
30712: FOR_TO
30713: IFFALSE 30758
// begin tmp := tmp [ pos [ i ] ] ;
30715: LD_ADDR_VAR 0 6
30719: PUSH
30720: LD_VAR 0 6
30724: PUSH
30725: LD_VAR 0 2
30729: PUSH
30730: LD_VAR 0 5
30734: ARRAY
30735: ARRAY
30736: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30737: LD_ADDR_VAR 0 7
30741: PUSH
30742: LD_VAR 0 7
30746: PUSH
30747: LD_VAR 0 6
30751: PUSH
30752: EMPTY
30753: LIST
30754: ADD
30755: ST_TO_ADDR
// end ;
30756: GO 30712
30758: POP
30759: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30760: LD_ADDR_VAR 0 6
30764: PUSH
30765: LD_VAR 0 6
30769: PPUSH
30770: LD_VAR 0 2
30774: PUSH
30775: LD_VAR 0 2
30779: ARRAY
30780: PPUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: CALL_OW 1
30790: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30791: LD_ADDR_VAR 0 7
30795: PUSH
30796: LD_VAR 0 7
30800: PPUSH
30801: LD_VAR 0 7
30805: PPUSH
30806: LD_VAR 0 6
30810: PPUSH
30811: CALL_OW 1
30815: ST_TO_ADDR
// for i = s_arr downto 2 do
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: DOUBLE
30822: LD_VAR 0 7
30826: INC
30827: ST_TO_ADDR
30828: LD_INT 2
30830: PUSH
30831: FOR_DOWNTO
30832: IFFALSE 30916
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30834: LD_ADDR_VAR 0 6
30838: PUSH
30839: LD_VAR 0 7
30843: PUSH
30844: LD_VAR 0 5
30848: PUSH
30849: LD_INT 1
30851: MINUS
30852: ARRAY
30853: PPUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_VAR 0 5
30863: PUSH
30864: LD_INT 1
30866: MINUS
30867: ARRAY
30868: PPUSH
30869: LD_VAR 0 7
30873: PUSH
30874: LD_VAR 0 5
30878: ARRAY
30879: PPUSH
30880: CALL_OW 1
30884: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30885: LD_ADDR_VAR 0 7
30889: PUSH
30890: LD_VAR 0 7
30894: PPUSH
30895: LD_VAR 0 5
30899: PUSH
30900: LD_INT 1
30902: MINUS
30903: PPUSH
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 1
30913: ST_TO_ADDR
// end ;
30914: GO 30831
30916: POP
30917: POP
// result := s_arr [ 1 ] ;
30918: LD_ADDR_VAR 0 4
30922: PUSH
30923: LD_VAR 0 7
30927: PUSH
30928: LD_INT 1
30930: ARRAY
30931: ST_TO_ADDR
// end ; end ;
30932: LD_VAR 0 4
30936: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30937: LD_INT 0
30939: PPUSH
30940: PPUSH
// if not list then
30941: LD_VAR 0 1
30945: NOT
30946: IFFALSE 30950
// exit ;
30948: GO 31041
// i := list [ pos1 ] ;
30950: LD_ADDR_VAR 0 5
30954: PUSH
30955: LD_VAR 0 1
30959: PUSH
30960: LD_VAR 0 2
30964: ARRAY
30965: ST_TO_ADDR
// if not i then
30966: LD_VAR 0 5
30970: NOT
30971: IFFALSE 30975
// exit ;
30973: GO 31041
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30975: LD_ADDR_VAR 0 1
30979: PUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: LD_VAR 0 2
30989: PPUSH
30990: LD_VAR 0 1
30994: PUSH
30995: LD_VAR 0 3
30999: ARRAY
31000: PPUSH
31001: CALL_OW 1
31005: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31006: LD_ADDR_VAR 0 1
31010: PUSH
31011: LD_VAR 0 1
31015: PPUSH
31016: LD_VAR 0 3
31020: PPUSH
31021: LD_VAR 0 5
31025: PPUSH
31026: CALL_OW 1
31030: ST_TO_ADDR
// result := list ;
31031: LD_ADDR_VAR 0 4
31035: PUSH
31036: LD_VAR 0 1
31040: ST_TO_ADDR
// end ;
31041: LD_VAR 0 4
31045: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31046: LD_INT 0
31048: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31049: LD_ADDR_VAR 0 5
31053: PUSH
31054: LD_VAR 0 1
31058: PPUSH
31059: CALL_OW 250
31063: PPUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 251
31073: PPUSH
31074: LD_VAR 0 2
31078: PPUSH
31079: LD_VAR 0 3
31083: PPUSH
31084: LD_VAR 0 4
31088: PPUSH
31089: CALL 31099 0 5
31093: ST_TO_ADDR
// end ;
31094: LD_VAR 0 5
31098: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31099: LD_INT 0
31101: PPUSH
31102: PPUSH
31103: PPUSH
31104: PPUSH
// if not list then
31105: LD_VAR 0 3
31109: NOT
31110: IFFALSE 31114
// exit ;
31112: GO 31502
// result := [ ] ;
31114: LD_ADDR_VAR 0 6
31118: PUSH
31119: EMPTY
31120: ST_TO_ADDR
// for i in list do
31121: LD_ADDR_VAR 0 7
31125: PUSH
31126: LD_VAR 0 3
31130: PUSH
31131: FOR_IN
31132: IFFALSE 31334
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31134: LD_ADDR_VAR 0 9
31138: PUSH
31139: LD_VAR 0 7
31143: PPUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: LD_VAR 0 2
31153: PPUSH
31154: CALL_OW 297
31158: ST_TO_ADDR
// if not result then
31159: LD_VAR 0 6
31163: NOT
31164: IFFALSE 31190
// result := [ [ i , tmp ] ] else
31166: LD_ADDR_VAR 0 6
31170: PUSH
31171: LD_VAR 0 7
31175: PUSH
31176: LD_VAR 0 9
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: ST_TO_ADDR
31188: GO 31332
// begin if result [ result ] [ 2 ] < tmp then
31190: LD_VAR 0 6
31194: PUSH
31195: LD_VAR 0 6
31199: ARRAY
31200: PUSH
31201: LD_INT 2
31203: ARRAY
31204: PUSH
31205: LD_VAR 0 9
31209: LESS
31210: IFFALSE 31252
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31212: LD_ADDR_VAR 0 6
31216: PUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: LD_VAR 0 6
31226: PUSH
31227: LD_INT 1
31229: PLUS
31230: PPUSH
31231: LD_VAR 0 7
31235: PUSH
31236: LD_VAR 0 9
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PPUSH
31245: CALL_OW 2
31249: ST_TO_ADDR
31250: GO 31332
// for j = 1 to result do
31252: LD_ADDR_VAR 0 8
31256: PUSH
31257: DOUBLE
31258: LD_INT 1
31260: DEC
31261: ST_TO_ADDR
31262: LD_VAR 0 6
31266: PUSH
31267: FOR_TO
31268: IFFALSE 31330
// begin if tmp < result [ j ] [ 2 ] then
31270: LD_VAR 0 9
31274: PUSH
31275: LD_VAR 0 6
31279: PUSH
31280: LD_VAR 0 8
31284: ARRAY
31285: PUSH
31286: LD_INT 2
31288: ARRAY
31289: LESS
31290: IFFALSE 31328
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31292: LD_ADDR_VAR 0 6
31296: PUSH
31297: LD_VAR 0 6
31301: PPUSH
31302: LD_VAR 0 8
31306: PPUSH
31307: LD_VAR 0 7
31311: PUSH
31312: LD_VAR 0 9
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 2
31325: ST_TO_ADDR
// break ;
31326: GO 31330
// end ; end ;
31328: GO 31267
31330: POP
31331: POP
// end ; end ;
31332: GO 31131
31334: POP
31335: POP
// if result and not asc then
31336: LD_VAR 0 6
31340: PUSH
31341: LD_VAR 0 4
31345: NOT
31346: AND
31347: IFFALSE 31422
// begin tmp := result ;
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_VAR 0 6
31358: ST_TO_ADDR
// for i = tmp downto 1 do
31359: LD_ADDR_VAR 0 7
31363: PUSH
31364: DOUBLE
31365: LD_VAR 0 9
31369: INC
31370: ST_TO_ADDR
31371: LD_INT 1
31373: PUSH
31374: FOR_DOWNTO
31375: IFFALSE 31420
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31377: LD_ADDR_VAR 0 6
31381: PUSH
31382: LD_VAR 0 6
31386: PPUSH
31387: LD_VAR 0 9
31391: PUSH
31392: LD_VAR 0 7
31396: MINUS
31397: PUSH
31398: LD_INT 1
31400: PLUS
31401: PPUSH
31402: LD_VAR 0 9
31406: PUSH
31407: LD_VAR 0 7
31411: ARRAY
31412: PPUSH
31413: CALL_OW 1
31417: ST_TO_ADDR
31418: GO 31374
31420: POP
31421: POP
// end ; tmp := [ ] ;
31422: LD_ADDR_VAR 0 9
31426: PUSH
31427: EMPTY
31428: ST_TO_ADDR
// if mode then
31429: LD_VAR 0 5
31433: IFFALSE 31502
// begin for i = 1 to result do
31435: LD_ADDR_VAR 0 7
31439: PUSH
31440: DOUBLE
31441: LD_INT 1
31443: DEC
31444: ST_TO_ADDR
31445: LD_VAR 0 6
31449: PUSH
31450: FOR_TO
31451: IFFALSE 31490
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31453: LD_ADDR_VAR 0 9
31457: PUSH
31458: LD_VAR 0 9
31462: PPUSH
31463: LD_VAR 0 7
31467: PPUSH
31468: LD_VAR 0 6
31472: PUSH
31473: LD_VAR 0 7
31477: ARRAY
31478: PUSH
31479: LD_INT 1
31481: ARRAY
31482: PPUSH
31483: CALL_OW 1
31487: ST_TO_ADDR
31488: GO 31450
31490: POP
31491: POP
// result := tmp ;
31492: LD_ADDR_VAR 0 6
31496: PUSH
31497: LD_VAR 0 9
31501: ST_TO_ADDR
// end ; end ;
31502: LD_VAR 0 6
31506: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31515: LD_ADDR_VAR 0 5
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: EMPTY
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
// if not x or not y then
31537: LD_VAR 0 2
31541: NOT
31542: PUSH
31543: LD_VAR 0 3
31547: NOT
31548: OR
31549: IFFALSE 31553
// exit ;
31551: GO 33205
// if not range then
31553: LD_VAR 0 4
31557: NOT
31558: IFFALSE 31568
// range := 10 ;
31560: LD_ADDR_VAR 0 4
31564: PUSH
31565: LD_INT 10
31567: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31568: LD_ADDR_VAR 0 8
31572: PUSH
31573: LD_INT 81
31575: PUSH
31576: LD_VAR 0 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 92
31587: PUSH
31588: LD_VAR 0 2
31592: PUSH
31593: LD_VAR 0 3
31597: PUSH
31598: LD_VAR 0 4
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: LD_INT 21
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: LIST
31630: PPUSH
31631: CALL_OW 69
31635: ST_TO_ADDR
// if not tmp then
31636: LD_VAR 0 8
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 33205
// for i in tmp do
31645: LD_ADDR_VAR 0 6
31649: PUSH
31650: LD_VAR 0 8
31654: PUSH
31655: FOR_IN
31656: IFFALSE 33180
// begin points := [ 0 , 0 , 0 ] ;
31658: LD_ADDR_VAR 0 9
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
// bpoints := 1 ;
31677: LD_ADDR_VAR 0 10
31681: PUSH
31682: LD_INT 1
31684: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31685: LD_VAR 0 6
31689: PPUSH
31690: CALL_OW 247
31694: PUSH
31695: LD_INT 1
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 32281
31703: POP
// begin if GetClass ( i ) = 1 then
31704: LD_VAR 0 6
31708: PPUSH
31709: CALL_OW 257
31713: PUSH
31714: LD_INT 1
31716: EQUAL
31717: IFFALSE 31738
// points := [ 10 , 5 , 3 ] ;
31719: LD_ADDR_VAR 0 9
31723: PUSH
31724: LD_INT 10
31726: PUSH
31727: LD_INT 5
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31738: LD_VAR 0 6
31742: PPUSH
31743: CALL_OW 257
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: IN
31762: IFFALSE 31783
// points := [ 3 , 2 , 1 ] ;
31764: LD_ADDR_VAR 0 9
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31783: LD_VAR 0 6
31787: PPUSH
31788: CALL_OW 257
31792: PUSH
31793: LD_INT 5
31795: EQUAL
31796: IFFALSE 31817
// points := [ 130 , 5 , 2 ] ;
31798: LD_ADDR_VAR 0 9
31802: PUSH
31803: LD_INT 130
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31817: LD_VAR 0 6
31821: PPUSH
31822: CALL_OW 257
31826: PUSH
31827: LD_INT 8
31829: EQUAL
31830: IFFALSE 31851
// points := [ 35 , 35 , 30 ] ;
31832: LD_ADDR_VAR 0 9
31836: PUSH
31837: LD_INT 35
31839: PUSH
31840: LD_INT 35
31842: PUSH
31843: LD_INT 30
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31851: LD_VAR 0 6
31855: PPUSH
31856: CALL_OW 257
31860: PUSH
31861: LD_INT 9
31863: EQUAL
31864: IFFALSE 31885
// points := [ 20 , 55 , 40 ] ;
31866: LD_ADDR_VAR 0 9
31870: PUSH
31871: LD_INT 20
31873: PUSH
31874: LD_INT 55
31876: PUSH
31877: LD_INT 40
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31885: LD_VAR 0 6
31889: PPUSH
31890: CALL_OW 257
31894: PUSH
31895: LD_INT 12
31897: PUSH
31898: LD_INT 16
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: IN
31905: IFFALSE 31926
// points := [ 5 , 3 , 2 ] ;
31907: LD_ADDR_VAR 0 9
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31926: LD_VAR 0 6
31930: PPUSH
31931: CALL_OW 257
31935: PUSH
31936: LD_INT 17
31938: EQUAL
31939: IFFALSE 31960
// points := [ 100 , 50 , 75 ] ;
31941: LD_ADDR_VAR 0 9
31945: PUSH
31946: LD_INT 100
31948: PUSH
31949: LD_INT 50
31951: PUSH
31952: LD_INT 75
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31960: LD_VAR 0 6
31964: PPUSH
31965: CALL_OW 257
31969: PUSH
31970: LD_INT 15
31972: EQUAL
31973: IFFALSE 31994
// points := [ 10 , 5 , 3 ] ;
31975: LD_ADDR_VAR 0 9
31979: PUSH
31980: LD_INT 10
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31994: LD_VAR 0 6
31998: PPUSH
31999: CALL_OW 257
32003: PUSH
32004: LD_INT 14
32006: EQUAL
32007: IFFALSE 32028
// points := [ 10 , 0 , 0 ] ;
32009: LD_ADDR_VAR 0 9
32013: PUSH
32014: LD_INT 10
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32028: LD_VAR 0 6
32032: PPUSH
32033: CALL_OW 257
32037: PUSH
32038: LD_INT 11
32040: EQUAL
32041: IFFALSE 32062
// points := [ 30 , 10 , 5 ] ;
32043: LD_ADDR_VAR 0 9
32047: PUSH
32048: LD_INT 30
32050: PUSH
32051: LD_INT 10
32053: PUSH
32054: LD_INT 5
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32062: LD_VAR 0 1
32066: PPUSH
32067: LD_INT 5
32069: PPUSH
32070: CALL_OW 321
32074: PUSH
32075: LD_INT 2
32077: EQUAL
32078: IFFALSE 32095
// bpoints := bpoints * 1.8 ;
32080: LD_ADDR_VAR 0 10
32084: PUSH
32085: LD_VAR 0 10
32089: PUSH
32090: LD_REAL  1.80000000000000E+0000
32093: MUL
32094: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32095: LD_VAR 0 6
32099: PPUSH
32100: CALL_OW 257
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: IN
32123: PUSH
32124: LD_VAR 0 1
32128: PPUSH
32129: LD_INT 51
32131: PPUSH
32132: CALL_OW 321
32136: PUSH
32137: LD_INT 2
32139: EQUAL
32140: AND
32141: IFFALSE 32158
// bpoints := bpoints * 1.2 ;
32143: LD_ADDR_VAR 0 10
32147: PUSH
32148: LD_VAR 0 10
32152: PUSH
32153: LD_REAL  1.20000000000000E+0000
32156: MUL
32157: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32158: LD_VAR 0 6
32162: PPUSH
32163: CALL_OW 257
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: LD_INT 7
32173: PUSH
32174: LD_INT 9
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: IN
32182: PUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_INT 52
32190: PPUSH
32191: CALL_OW 321
32195: PUSH
32196: LD_INT 2
32198: EQUAL
32199: AND
32200: IFFALSE 32217
// bpoints := bpoints * 1.5 ;
32202: LD_ADDR_VAR 0 10
32206: PUSH
32207: LD_VAR 0 10
32211: PUSH
32212: LD_REAL  1.50000000000000E+0000
32215: MUL
32216: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32217: LD_VAR 0 1
32221: PPUSH
32222: LD_INT 66
32224: PPUSH
32225: CALL_OW 321
32229: PUSH
32230: LD_INT 2
32232: EQUAL
32233: IFFALSE 32250
// bpoints := bpoints * 1.1 ;
32235: LD_ADDR_VAR 0 10
32239: PUSH
32240: LD_VAR 0 10
32244: PUSH
32245: LD_REAL  1.10000000000000E+0000
32248: MUL
32249: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32250: LD_ADDR_VAR 0 10
32254: PUSH
32255: LD_VAR 0 10
32259: PUSH
32260: LD_VAR 0 6
32264: PPUSH
32265: LD_INT 1
32267: PPUSH
32268: CALL_OW 259
32272: PUSH
32273: LD_REAL  1.15000000000000E+0000
32276: MUL
32277: MUL
32278: ST_TO_ADDR
// end ; unit_vehicle :
32279: GO 33109
32281: LD_INT 2
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 33097
32289: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 264
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 42
32305: PUSH
32306: LD_INT 24
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: IN
32314: IFFALSE 32335
// points := [ 25 , 5 , 3 ] ;
32316: LD_ADDR_VAR 0 9
32320: PUSH
32321: LD_INT 25
32323: PUSH
32324: LD_INT 5
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 264
32344: PUSH
32345: LD_INT 4
32347: PUSH
32348: LD_INT 43
32350: PUSH
32351: LD_INT 25
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: IN
32359: IFFALSE 32380
// points := [ 40 , 15 , 5 ] ;
32361: LD_ADDR_VAR 0 9
32365: PUSH
32366: LD_INT 40
32368: PUSH
32369: LD_INT 15
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32380: LD_VAR 0 6
32384: PPUSH
32385: CALL_OW 264
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: LD_INT 23
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: IN
32400: IFFALSE 32421
// points := [ 7 , 25 , 8 ] ;
32402: LD_ADDR_VAR 0 9
32406: PUSH
32407: LD_INT 7
32409: PUSH
32410: LD_INT 25
32412: PUSH
32413: LD_INT 8
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32421: LD_VAR 0 6
32425: PPUSH
32426: CALL_OW 264
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: LD_INT 27
32436: PUSH
32437: LD_INT 44
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: IN
32445: IFFALSE 32466
// points := [ 14 , 50 , 16 ] ;
32447: LD_ADDR_VAR 0 9
32451: PUSH
32452: LD_INT 14
32454: PUSH
32455: LD_INT 50
32457: PUSH
32458: LD_INT 16
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32466: LD_VAR 0 6
32470: PPUSH
32471: CALL_OW 264
32475: PUSH
32476: LD_INT 6
32478: PUSH
32479: LD_INT 46
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: IN
32486: IFFALSE 32507
// points := [ 32 , 120 , 70 ] ;
32488: LD_ADDR_VAR 0 9
32492: PUSH
32493: LD_INT 32
32495: PUSH
32496: LD_INT 120
32498: PUSH
32499: LD_INT 70
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32507: LD_VAR 0 6
32511: PPUSH
32512: CALL_OW 264
32516: PUSH
32517: LD_INT 7
32519: PUSH
32520: LD_INT 28
32522: PUSH
32523: LD_INT 45
32525: PUSH
32526: LD_EXP 101
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: IN
32537: IFFALSE 32558
// points := [ 35 , 20 , 45 ] ;
32539: LD_ADDR_VAR 0 9
32543: PUSH
32544: LD_INT 35
32546: PUSH
32547: LD_INT 20
32549: PUSH
32550: LD_INT 45
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32558: LD_VAR 0 6
32562: PPUSH
32563: CALL_OW 264
32567: PUSH
32568: LD_INT 47
32570: PUSH
32571: EMPTY
32572: LIST
32573: IN
32574: IFFALSE 32595
// points := [ 67 , 45 , 75 ] ;
32576: LD_ADDR_VAR 0 9
32580: PUSH
32581: LD_INT 67
32583: PUSH
32584: LD_INT 45
32586: PUSH
32587: LD_INT 75
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32595: LD_VAR 0 6
32599: PPUSH
32600: CALL_OW 264
32604: PUSH
32605: LD_INT 26
32607: PUSH
32608: EMPTY
32609: LIST
32610: IN
32611: IFFALSE 32632
// points := [ 120 , 30 , 80 ] ;
32613: LD_ADDR_VAR 0 9
32617: PUSH
32618: LD_INT 120
32620: PUSH
32621: LD_INT 30
32623: PUSH
32624: LD_INT 80
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32632: LD_VAR 0 6
32636: PPUSH
32637: CALL_OW 264
32641: PUSH
32642: LD_INT 22
32644: PUSH
32645: EMPTY
32646: LIST
32647: IN
32648: IFFALSE 32669
// points := [ 40 , 1 , 1 ] ;
32650: LD_ADDR_VAR 0 9
32654: PUSH
32655: LD_INT 40
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32669: LD_VAR 0 6
32673: PPUSH
32674: CALL_OW 264
32678: PUSH
32679: LD_INT 29
32681: PUSH
32682: EMPTY
32683: LIST
32684: IN
32685: IFFALSE 32706
// points := [ 70 , 200 , 400 ] ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_INT 70
32694: PUSH
32695: LD_INT 200
32697: PUSH
32698: LD_INT 400
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32706: LD_VAR 0 6
32710: PPUSH
32711: CALL_OW 264
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: LD_INT 53
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: IN
32726: IFFALSE 32747
// points := [ 40 , 10 , 20 ] ;
32728: LD_ADDR_VAR 0 9
32732: PUSH
32733: LD_INT 40
32735: PUSH
32736: LD_INT 10
32738: PUSH
32739: LD_INT 20
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32747: LD_VAR 0 6
32751: PPUSH
32752: CALL_OW 264
32756: PUSH
32757: LD_INT 9
32759: PUSH
32760: EMPTY
32761: LIST
32762: IN
32763: IFFALSE 32784
// points := [ 5 , 70 , 20 ] ;
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_INT 5
32772: PUSH
32773: LD_INT 70
32775: PUSH
32776: LD_INT 20
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 264
32793: PUSH
32794: LD_INT 10
32796: PUSH
32797: EMPTY
32798: LIST
32799: IN
32800: IFFALSE 32821
// points := [ 35 , 110 , 70 ] ;
32802: LD_ADDR_VAR 0 9
32806: PUSH
32807: LD_INT 35
32809: PUSH
32810: LD_INT 110
32812: PUSH
32813: LD_INT 70
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32821: LD_VAR 0 6
32825: PPUSH
32826: CALL_OW 265
32830: PUSH
32831: LD_INT 25
32833: EQUAL
32834: IFFALSE 32855
// points := [ 80 , 65 , 100 ] ;
32836: LD_ADDR_VAR 0 9
32840: PUSH
32841: LD_INT 80
32843: PUSH
32844: LD_INT 65
32846: PUSH
32847: LD_INT 100
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32855: LD_VAR 0 6
32859: PPUSH
32860: CALL_OW 263
32864: PUSH
32865: LD_INT 1
32867: EQUAL
32868: IFFALSE 32903
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32870: LD_ADDR_VAR 0 10
32874: PUSH
32875: LD_VAR 0 10
32879: PUSH
32880: LD_VAR 0 6
32884: PPUSH
32885: CALL_OW 311
32889: PPUSH
32890: LD_INT 3
32892: PPUSH
32893: CALL_OW 259
32897: PUSH
32898: LD_INT 4
32900: MUL
32901: MUL
32902: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32903: LD_VAR 0 6
32907: PPUSH
32908: CALL_OW 263
32912: PUSH
32913: LD_INT 2
32915: EQUAL
32916: IFFALSE 32967
// begin j := IsControledBy ( i ) ;
32918: LD_ADDR_VAR 0 7
32922: PUSH
32923: LD_VAR 0 6
32927: PPUSH
32928: CALL_OW 312
32932: ST_TO_ADDR
// if j then
32933: LD_VAR 0 7
32937: IFFALSE 32967
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32939: LD_ADDR_VAR 0 10
32943: PUSH
32944: LD_VAR 0 10
32948: PUSH
32949: LD_VAR 0 7
32953: PPUSH
32954: LD_INT 3
32956: PPUSH
32957: CALL_OW 259
32961: PUSH
32962: LD_INT 3
32964: MUL
32965: MUL
32966: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32967: LD_VAR 0 6
32971: PPUSH
32972: CALL_OW 264
32976: PUSH
32977: LD_INT 5
32979: PUSH
32980: LD_INT 6
32982: PUSH
32983: LD_INT 46
32985: PUSH
32986: LD_INT 44
32988: PUSH
32989: LD_INT 47
32991: PUSH
32992: LD_INT 45
32994: PUSH
32995: LD_INT 28
32997: PUSH
32998: LD_INT 7
33000: PUSH
33001: LD_INT 27
33003: PUSH
33004: LD_INT 29
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: IN
33019: PUSH
33020: LD_VAR 0 1
33024: PPUSH
33025: LD_INT 52
33027: PPUSH
33028: CALL_OW 321
33032: PUSH
33033: LD_INT 2
33035: EQUAL
33036: AND
33037: IFFALSE 33054
// bpoints := bpoints * 1.2 ;
33039: LD_ADDR_VAR 0 10
33043: PUSH
33044: LD_VAR 0 10
33048: PUSH
33049: LD_REAL  1.20000000000000E+0000
33052: MUL
33053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33054: LD_VAR 0 6
33058: PPUSH
33059: CALL_OW 264
33063: PUSH
33064: LD_INT 6
33066: PUSH
33067: LD_INT 46
33069: PUSH
33070: LD_INT 47
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: IN
33078: IFFALSE 33095
// bpoints := bpoints * 1.2 ;
33080: LD_ADDR_VAR 0 10
33084: PUSH
33085: LD_VAR 0 10
33089: PUSH
33090: LD_REAL  1.20000000000000E+0000
33093: MUL
33094: ST_TO_ADDR
// end ; unit_building :
33095: GO 33109
33097: LD_INT 3
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33108
33105: POP
// ; end ;
33106: GO 33109
33108: POP
// for j = 1 to 3 do
33109: LD_ADDR_VAR 0 7
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_INT 3
33121: PUSH
33122: FOR_TO
33123: IFFALSE 33176
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33125: LD_ADDR_VAR 0 5
33129: PUSH
33130: LD_VAR 0 5
33134: PPUSH
33135: LD_VAR 0 7
33139: PPUSH
33140: LD_VAR 0 5
33144: PUSH
33145: LD_VAR 0 7
33149: ARRAY
33150: PUSH
33151: LD_VAR 0 9
33155: PUSH
33156: LD_VAR 0 7
33160: ARRAY
33161: PUSH
33162: LD_VAR 0 10
33166: MUL
33167: PLUS
33168: PPUSH
33169: CALL_OW 1
33173: ST_TO_ADDR
33174: GO 33122
33176: POP
33177: POP
// end ;
33178: GO 31655
33180: POP
33181: POP
// result := Replace ( result , 4 , tmp ) ;
33182: LD_ADDR_VAR 0 5
33186: PUSH
33187: LD_VAR 0 5
33191: PPUSH
33192: LD_INT 4
33194: PPUSH
33195: LD_VAR 0 8
33199: PPUSH
33200: CALL_OW 1
33204: ST_TO_ADDR
// end ;
33205: LD_VAR 0 5
33209: RET
// export function DangerAtRange ( unit , range ) ; begin
33210: LD_INT 0
33212: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_VAR 0 1
33222: PPUSH
33223: CALL_OW 255
33227: PPUSH
33228: LD_VAR 0 1
33232: PPUSH
33233: CALL_OW 250
33237: PPUSH
33238: LD_VAR 0 1
33242: PPUSH
33243: CALL_OW 251
33247: PPUSH
33248: LD_VAR 0 2
33252: PPUSH
33253: CALL 31507 0 4
33257: ST_TO_ADDR
// end ;
33258: LD_VAR 0 3
33262: RET
// export function DangerInArea ( side , area ) ; begin
33263: LD_INT 0
33265: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: LD_INT 81
33278: PUSH
33279: LD_VAR 0 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PPUSH
33288: CALL_OW 70
33292: ST_TO_ADDR
// end ;
33293: LD_VAR 0 3
33297: RET
// export function IsExtension ( b ) ; begin
33298: LD_INT 0
33300: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: LD_VAR 0 1
33310: PUSH
33311: LD_INT 23
33313: PUSH
33314: LD_INT 20
33316: PUSH
33317: LD_INT 22
33319: PUSH
33320: LD_INT 17
33322: PUSH
33323: LD_INT 24
33325: PUSH
33326: LD_INT 21
33328: PUSH
33329: LD_INT 19
33331: PUSH
33332: LD_INT 16
33334: PUSH
33335: LD_INT 25
33337: PUSH
33338: LD_INT 18
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: IN
33353: ST_TO_ADDR
// end ;
33354: LD_VAR 0 2
33358: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33359: LD_INT 0
33361: PPUSH
33362: PPUSH
33363: PPUSH
// result := [ ] ;
33364: LD_ADDR_VAR 0 4
33368: PUSH
33369: EMPTY
33370: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33371: LD_ADDR_VAR 0 5
33375: PUSH
33376: LD_VAR 0 2
33380: PPUSH
33381: LD_INT 21
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PPUSH
33391: CALL_OW 70
33395: ST_TO_ADDR
// if not tmp then
33396: LD_VAR 0 5
33400: NOT
33401: IFFALSE 33405
// exit ;
33403: GO 33469
// if checkLink then
33405: LD_VAR 0 3
33409: IFFALSE 33459
// begin for i in tmp do
33411: LD_ADDR_VAR 0 6
33415: PUSH
33416: LD_VAR 0 5
33420: PUSH
33421: FOR_IN
33422: IFFALSE 33457
// if GetBase ( i ) <> base then
33424: LD_VAR 0 6
33428: PPUSH
33429: CALL_OW 274
33433: PUSH
33434: LD_VAR 0 1
33438: NONEQUAL
33439: IFFALSE 33455
// ComLinkToBase ( base , i ) ;
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_VAR 0 6
33450: PPUSH
33451: CALL_OW 169
33455: GO 33421
33457: POP
33458: POP
// end ; result := tmp ;
33459: LD_ADDR_VAR 0 4
33463: PUSH
33464: LD_VAR 0 5
33468: ST_TO_ADDR
// end ;
33469: LD_VAR 0 4
33473: RET
// export function ComComplete ( units , b ) ; var i ; begin
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
// if not units then
33478: LD_VAR 0 1
33482: NOT
33483: IFFALSE 33487
// exit ;
33485: GO 33577
// for i in units do
33487: LD_ADDR_VAR 0 4
33491: PUSH
33492: LD_VAR 0 1
33496: PUSH
33497: FOR_IN
33498: IFFALSE 33575
// if BuildingStatus ( b ) = bs_build then
33500: LD_VAR 0 2
33504: PPUSH
33505: CALL_OW 461
33509: PUSH
33510: LD_INT 1
33512: EQUAL
33513: IFFALSE 33573
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33515: LD_VAR 0 4
33519: PPUSH
33520: LD_STRING h
33522: PUSH
33523: LD_VAR 0 2
33527: PPUSH
33528: CALL_OW 250
33532: PUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: CALL_OW 251
33542: PUSH
33543: LD_VAR 0 2
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: PUSH
33566: EMPTY
33567: LIST
33568: PPUSH
33569: CALL_OW 446
33573: GO 33497
33575: POP
33576: POP
// end ;
33577: LD_VAR 0 3
33581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33582: LD_INT 0
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33590: LD_VAR 0 1
33594: NOT
33595: PUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 263
33605: PUSH
33606: LD_INT 2
33608: NONEQUAL
33609: OR
33610: IFFALSE 33614
// exit ;
33612: GO 33930
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33614: LD_ADDR_VAR 0 6
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 255
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 30
33641: PUSH
33642: LD_INT 36
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 34
33651: PUSH
33652: LD_INT 31
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: ST_TO_ADDR
// if not tmp then
33673: LD_VAR 0 6
33677: NOT
33678: IFFALSE 33682
// exit ;
33680: GO 33930
// result := [ ] ;
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: EMPTY
33688: ST_TO_ADDR
// for i in tmp do
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_VAR 0 6
33698: PUSH
33699: FOR_IN
33700: IFFALSE 33771
// begin t := UnitsInside ( i ) ;
33702: LD_ADDR_VAR 0 4
33706: PUSH
33707: LD_VAR 0 3
33711: PPUSH
33712: CALL_OW 313
33716: ST_TO_ADDR
// if t then
33717: LD_VAR 0 4
33721: IFFALSE 33769
// for j in t do
33723: LD_ADDR_VAR 0 7
33727: PUSH
33728: LD_VAR 0 4
33732: PUSH
33733: FOR_IN
33734: IFFALSE 33767
// result := Replace ( result , result + 1 , j ) ;
33736: LD_ADDR_VAR 0 2
33740: PUSH
33741: LD_VAR 0 2
33745: PPUSH
33746: LD_VAR 0 2
33750: PUSH
33751: LD_INT 1
33753: PLUS
33754: PPUSH
33755: LD_VAR 0 7
33759: PPUSH
33760: CALL_OW 1
33764: ST_TO_ADDR
33765: GO 33733
33767: POP
33768: POP
// end ;
33769: GO 33699
33771: POP
33772: POP
// if not result then
33773: LD_VAR 0 2
33777: NOT
33778: IFFALSE 33782
// exit ;
33780: GO 33930
// mech := result [ 1 ] ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_VAR 0 2
33791: PUSH
33792: LD_INT 1
33794: ARRAY
33795: ST_TO_ADDR
// if result > 1 then
33796: LD_VAR 0 2
33800: PUSH
33801: LD_INT 1
33803: GREATER
33804: IFFALSE 33916
// begin for i = 2 to result do
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: DOUBLE
33812: LD_INT 2
33814: DEC
33815: ST_TO_ADDR
33816: LD_VAR 0 2
33820: PUSH
33821: FOR_TO
33822: IFFALSE 33914
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33824: LD_ADDR_VAR 0 4
33828: PUSH
33829: LD_VAR 0 2
33833: PUSH
33834: LD_VAR 0 3
33838: ARRAY
33839: PPUSH
33840: LD_INT 3
33842: PPUSH
33843: CALL_OW 259
33847: PUSH
33848: LD_VAR 0 2
33852: PUSH
33853: LD_VAR 0 3
33857: ARRAY
33858: PPUSH
33859: CALL_OW 432
33863: MINUS
33864: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33865: LD_VAR 0 4
33869: PUSH
33870: LD_VAR 0 5
33874: PPUSH
33875: LD_INT 3
33877: PPUSH
33878: CALL_OW 259
33882: PUSH
33883: LD_VAR 0 5
33887: PPUSH
33888: CALL_OW 432
33892: MINUS
33893: GREATEREQUAL
33894: IFFALSE 33912
// mech := result [ i ] ;
33896: LD_ADDR_VAR 0 5
33900: PUSH
33901: LD_VAR 0 2
33905: PUSH
33906: LD_VAR 0 3
33910: ARRAY
33911: ST_TO_ADDR
// end ;
33912: GO 33821
33914: POP
33915: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33916: LD_VAR 0 1
33920: PPUSH
33921: LD_VAR 0 5
33925: PPUSH
33926: CALL_OW 135
// end ;
33930: LD_VAR 0 2
33934: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33935: LD_INT 0
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
// result := [ ] ;
33950: LD_ADDR_VAR 0 7
33954: PUSH
33955: EMPTY
33956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 266
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: IN
33977: NOT
33978: IFFALSE 33982
// exit ;
33980: GO 35616
// if name then
33982: LD_VAR 0 3
33986: IFFALSE 34002
// SetBName ( base_dep , name ) ;
33988: LD_VAR 0 1
33992: PPUSH
33993: LD_VAR 0 3
33997: PPUSH
33998: CALL_OW 500
// base := GetBase ( base_dep ) ;
34002: LD_ADDR_VAR 0 15
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 274
34016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34017: LD_ADDR_VAR 0 16
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL_OW 255
34031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34032: LD_ADDR_VAR 0 17
34036: PUSH
34037: LD_VAR 0 1
34041: PPUSH
34042: CALL_OW 248
34046: ST_TO_ADDR
// if sources then
34047: LD_VAR 0 5
34051: IFFALSE 34098
// for i = 1 to 3 do
34053: LD_ADDR_VAR 0 8
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_INT 3
34065: PUSH
34066: FOR_TO
34067: IFFALSE 34096
// AddResourceType ( base , i , sources [ i ] ) ;
34069: LD_VAR 0 15
34073: PPUSH
34074: LD_VAR 0 8
34078: PPUSH
34079: LD_VAR 0 5
34083: PUSH
34084: LD_VAR 0 8
34088: ARRAY
34089: PPUSH
34090: CALL_OW 276
34094: GO 34066
34096: POP
34097: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34098: LD_ADDR_VAR 0 18
34102: PUSH
34103: LD_VAR 0 15
34107: PPUSH
34108: LD_VAR 0 2
34112: PPUSH
34113: LD_INT 1
34115: PPUSH
34116: CALL 33359 0 3
34120: ST_TO_ADDR
// InitHc ;
34121: CALL_OW 19
// InitUc ;
34125: CALL_OW 18
// uc_side := side ;
34129: LD_ADDR_OWVAR 20
34133: PUSH
34134: LD_VAR 0 16
34138: ST_TO_ADDR
// uc_nation := nation ;
34139: LD_ADDR_OWVAR 21
34143: PUSH
34144: LD_VAR 0 17
34148: ST_TO_ADDR
// if buildings then
34149: LD_VAR 0 18
34153: IFFALSE 35475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34155: LD_ADDR_VAR 0 19
34159: PUSH
34160: LD_VAR 0 18
34164: PPUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 30
34170: PUSH
34171: LD_INT 29
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 30
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 72
34197: ST_TO_ADDR
// if tmp then
34198: LD_VAR 0 19
34202: IFFALSE 34250
// for i in tmp do
34204: LD_ADDR_VAR 0 8
34208: PUSH
34209: LD_VAR 0 19
34213: PUSH
34214: FOR_IN
34215: IFFALSE 34248
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34217: LD_VAR 0 8
34221: PPUSH
34222: CALL_OW 250
34226: PPUSH
34227: LD_VAR 0 8
34231: PPUSH
34232: CALL_OW 251
34236: PPUSH
34237: LD_VAR 0 16
34241: PPUSH
34242: CALL_OW 441
34246: GO 34214
34248: POP
34249: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34250: LD_VAR 0 18
34254: PPUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 30
34260: PUSH
34261: LD_INT 32
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 30
34270: PUSH
34271: LD_INT 33
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: PPUSH
34283: CALL_OW 72
34287: IFFALSE 34375
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34289: LD_ADDR_VAR 0 8
34293: PUSH
34294: LD_VAR 0 18
34298: PPUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 30
34304: PUSH
34305: LD_INT 32
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 30
34314: PUSH
34315: LD_INT 33
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: LIST
34326: PPUSH
34327: CALL_OW 72
34331: PUSH
34332: FOR_IN
34333: IFFALSE 34373
// begin if not GetBWeapon ( i ) then
34335: LD_VAR 0 8
34339: PPUSH
34340: CALL_OW 269
34344: NOT
34345: IFFALSE 34371
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34347: LD_VAR 0 8
34351: PPUSH
34352: LD_VAR 0 8
34356: PPUSH
34357: LD_VAR 0 2
34361: PPUSH
34362: CALL 35621 0 2
34366: PPUSH
34367: CALL_OW 431
// end ;
34371: GO 34332
34373: POP
34374: POP
// end ; for i = 1 to personel do
34375: LD_ADDR_VAR 0 8
34379: PUSH
34380: DOUBLE
34381: LD_INT 1
34383: DEC
34384: ST_TO_ADDR
34385: LD_VAR 0 6
34389: PUSH
34390: FOR_TO
34391: IFFALSE 35455
// begin if i > 4 then
34393: LD_VAR 0 8
34397: PUSH
34398: LD_INT 4
34400: GREATER
34401: IFFALSE 34405
// break ;
34403: GO 35455
// case i of 1 :
34405: LD_VAR 0 8
34409: PUSH
34410: LD_INT 1
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34498
34418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34419: LD_ADDR_VAR 0 12
34423: PUSH
34424: LD_VAR 0 18
34428: PPUSH
34429: LD_INT 22
34431: PUSH
34432: LD_VAR 0 16
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 58
34443: PUSH
34444: EMPTY
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 30
34452: PUSH
34453: LD_INT 32
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 30
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 30
34472: PUSH
34473: LD_INT 5
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: PPUSH
34491: CALL_OW 72
34495: ST_TO_ADDR
34496: GO 34720
34498: LD_INT 2
34500: DOUBLE
34501: EQUAL
34502: IFTRUE 34506
34504: GO 34568
34506: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34507: LD_ADDR_VAR 0 12
34511: PUSH
34512: LD_VAR 0 18
34516: PPUSH
34517: LD_INT 22
34519: PUSH
34520: LD_VAR 0 16
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 30
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 30
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PPUSH
34561: CALL_OW 72
34565: ST_TO_ADDR
34566: GO 34720
34568: LD_INT 3
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34638
34576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34577: LD_ADDR_VAR 0 12
34581: PUSH
34582: LD_VAR 0 18
34586: PPUSH
34587: LD_INT 22
34589: PUSH
34590: LD_VAR 0 16
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 30
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 30
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: LIST
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PPUSH
34631: CALL_OW 72
34635: ST_TO_ADDR
34636: GO 34720
34638: LD_INT 4
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34719
34646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34647: LD_ADDR_VAR 0 12
34651: PUSH
34652: LD_VAR 0 18
34656: PPUSH
34657: LD_INT 22
34659: PUSH
34660: LD_VAR 0 16
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 30
34674: PUSH
34675: LD_INT 6
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 30
34684: PUSH
34685: LD_INT 7
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 30
34694: PUSH
34695: LD_INT 8
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PPUSH
34712: CALL_OW 72
34716: ST_TO_ADDR
34717: GO 34720
34719: POP
// if i = 1 then
34720: LD_VAR 0 8
34724: PUSH
34725: LD_INT 1
34727: EQUAL
34728: IFFALSE 34839
// begin tmp := [ ] ;
34730: LD_ADDR_VAR 0 19
34734: PUSH
34735: EMPTY
34736: ST_TO_ADDR
// for j in f do
34737: LD_ADDR_VAR 0 9
34741: PUSH
34742: LD_VAR 0 12
34746: PUSH
34747: FOR_IN
34748: IFFALSE 34821
// if GetBType ( j ) = b_bunker then
34750: LD_VAR 0 9
34754: PPUSH
34755: CALL_OW 266
34759: PUSH
34760: LD_INT 32
34762: EQUAL
34763: IFFALSE 34790
// tmp := Insert ( tmp , 1 , j ) else
34765: LD_ADDR_VAR 0 19
34769: PUSH
34770: LD_VAR 0 19
34774: PPUSH
34775: LD_INT 1
34777: PPUSH
34778: LD_VAR 0 9
34782: PPUSH
34783: CALL_OW 2
34787: ST_TO_ADDR
34788: GO 34819
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34790: LD_ADDR_VAR 0 19
34794: PUSH
34795: LD_VAR 0 19
34799: PPUSH
34800: LD_VAR 0 19
34804: PUSH
34805: LD_INT 1
34807: PLUS
34808: PPUSH
34809: LD_VAR 0 9
34813: PPUSH
34814: CALL_OW 2
34818: ST_TO_ADDR
34819: GO 34747
34821: POP
34822: POP
// if tmp then
34823: LD_VAR 0 19
34827: IFFALSE 34839
// f := tmp ;
34829: LD_ADDR_VAR 0 12
34833: PUSH
34834: LD_VAR 0 19
34838: ST_TO_ADDR
// end ; x := personel [ i ] ;
34839: LD_ADDR_VAR 0 13
34843: PUSH
34844: LD_VAR 0 6
34848: PUSH
34849: LD_VAR 0 8
34853: ARRAY
34854: ST_TO_ADDR
// if x = - 1 then
34855: LD_VAR 0 13
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: EQUAL
34864: IFFALSE 35073
// begin for j in f do
34866: LD_ADDR_VAR 0 9
34870: PUSH
34871: LD_VAR 0 12
34875: PUSH
34876: FOR_IN
34877: IFFALSE 35069
// repeat InitHc ;
34879: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34883: LD_VAR 0 9
34887: PPUSH
34888: CALL_OW 266
34892: PUSH
34893: LD_INT 5
34895: EQUAL
34896: IFFALSE 34966
// begin if UnitsInside ( j ) < 3 then
34898: LD_VAR 0 9
34902: PPUSH
34903: CALL_OW 313
34907: PUSH
34908: LD_INT 3
34910: LESS
34911: IFFALSE 34947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34913: LD_INT 0
34915: PPUSH
34916: LD_INT 5
34918: PUSH
34919: LD_INT 8
34921: PUSH
34922: LD_INT 9
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: PUSH
34930: LD_VAR 0 17
34934: ARRAY
34935: PPUSH
34936: LD_VAR 0 4
34940: PPUSH
34941: CALL_OW 380
34945: GO 34964
// PrepareHuman ( false , i , skill ) ;
34947: LD_INT 0
34949: PPUSH
34950: LD_VAR 0 8
34954: PPUSH
34955: LD_VAR 0 4
34959: PPUSH
34960: CALL_OW 380
// end else
34964: GO 34983
// PrepareHuman ( false , i , skill ) ;
34966: LD_INT 0
34968: PPUSH
34969: LD_VAR 0 8
34973: PPUSH
34974: LD_VAR 0 4
34978: PPUSH
34979: CALL_OW 380
// un := CreateHuman ;
34983: LD_ADDR_VAR 0 14
34987: PUSH
34988: CALL_OW 44
34992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34993: LD_ADDR_VAR 0 7
34997: PUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: LD_INT 1
35005: PPUSH
35006: LD_VAR 0 14
35010: PPUSH
35011: CALL_OW 2
35015: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35016: LD_VAR 0 14
35020: PPUSH
35021: LD_VAR 0 9
35025: PPUSH
35026: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35030: LD_VAR 0 9
35034: PPUSH
35035: CALL_OW 313
35039: PUSH
35040: LD_INT 6
35042: EQUAL
35043: PUSH
35044: LD_VAR 0 9
35048: PPUSH
35049: CALL_OW 266
35053: PUSH
35054: LD_INT 32
35056: PUSH
35057: LD_INT 31
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: IN
35064: OR
35065: IFFALSE 34879
35067: GO 34876
35069: POP
35070: POP
// end else
35071: GO 35453
// for j = 1 to x do
35073: LD_ADDR_VAR 0 9
35077: PUSH
35078: DOUBLE
35079: LD_INT 1
35081: DEC
35082: ST_TO_ADDR
35083: LD_VAR 0 13
35087: PUSH
35088: FOR_TO
35089: IFFALSE 35451
// begin InitHc ;
35091: CALL_OW 19
// if not f then
35095: LD_VAR 0 12
35099: NOT
35100: IFFALSE 35189
// begin PrepareHuman ( false , i , skill ) ;
35102: LD_INT 0
35104: PPUSH
35105: LD_VAR 0 8
35109: PPUSH
35110: LD_VAR 0 4
35114: PPUSH
35115: CALL_OW 380
// un := CreateHuman ;
35119: LD_ADDR_VAR 0 14
35123: PUSH
35124: CALL_OW 44
35128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35129: LD_ADDR_VAR 0 7
35133: PUSH
35134: LD_VAR 0 7
35138: PPUSH
35139: LD_INT 1
35141: PPUSH
35142: LD_VAR 0 14
35146: PPUSH
35147: CALL_OW 2
35151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35152: LD_VAR 0 14
35156: PPUSH
35157: LD_VAR 0 1
35161: PPUSH
35162: CALL_OW 250
35166: PPUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 251
35176: PPUSH
35177: LD_INT 10
35179: PPUSH
35180: LD_INT 0
35182: PPUSH
35183: CALL_OW 50
// continue ;
35187: GO 35088
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35189: LD_VAR 0 12
35193: PUSH
35194: LD_INT 1
35196: ARRAY
35197: PPUSH
35198: CALL_OW 313
35202: PUSH
35203: LD_VAR 0 12
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: CALL_OW 266
35216: PUSH
35217: LD_INT 32
35219: PUSH
35220: LD_INT 31
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: IN
35227: AND
35228: PUSH
35229: LD_VAR 0 12
35233: PUSH
35234: LD_INT 1
35236: ARRAY
35237: PPUSH
35238: CALL_OW 313
35242: PUSH
35243: LD_INT 6
35245: EQUAL
35246: OR
35247: IFFALSE 35267
// f := Delete ( f , 1 ) ;
35249: LD_ADDR_VAR 0 12
35253: PUSH
35254: LD_VAR 0 12
35258: PPUSH
35259: LD_INT 1
35261: PPUSH
35262: CALL_OW 3
35266: ST_TO_ADDR
// if not f then
35267: LD_VAR 0 12
35271: NOT
35272: IFFALSE 35290
// begin x := x + 2 ;
35274: LD_ADDR_VAR 0 13
35278: PUSH
35279: LD_VAR 0 13
35283: PUSH
35284: LD_INT 2
35286: PLUS
35287: ST_TO_ADDR
// continue ;
35288: GO 35088
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35290: LD_VAR 0 12
35294: PUSH
35295: LD_INT 1
35297: ARRAY
35298: PPUSH
35299: CALL_OW 266
35303: PUSH
35304: LD_INT 5
35306: EQUAL
35307: IFFALSE 35381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35309: LD_VAR 0 12
35313: PUSH
35314: LD_INT 1
35316: ARRAY
35317: PPUSH
35318: CALL_OW 313
35322: PUSH
35323: LD_INT 3
35325: LESS
35326: IFFALSE 35362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 5
35333: PUSH
35334: LD_INT 8
35336: PUSH
35337: LD_INT 9
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: LD_VAR 0 17
35349: ARRAY
35350: PPUSH
35351: LD_VAR 0 4
35355: PPUSH
35356: CALL_OW 380
35360: GO 35379
// PrepareHuman ( false , i , skill ) ;
35362: LD_INT 0
35364: PPUSH
35365: LD_VAR 0 8
35369: PPUSH
35370: LD_VAR 0 4
35374: PPUSH
35375: CALL_OW 380
// end else
35379: GO 35398
// PrepareHuman ( false , i , skill ) ;
35381: LD_INT 0
35383: PPUSH
35384: LD_VAR 0 8
35388: PPUSH
35389: LD_VAR 0 4
35393: PPUSH
35394: CALL_OW 380
// un := CreateHuman ;
35398: LD_ADDR_VAR 0 14
35402: PUSH
35403: CALL_OW 44
35407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35408: LD_ADDR_VAR 0 7
35412: PUSH
35413: LD_VAR 0 7
35417: PPUSH
35418: LD_INT 1
35420: PPUSH
35421: LD_VAR 0 14
35425: PPUSH
35426: CALL_OW 2
35430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35431: LD_VAR 0 14
35435: PPUSH
35436: LD_VAR 0 12
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PPUSH
35445: CALL_OW 52
// end ;
35449: GO 35088
35451: POP
35452: POP
// end ;
35453: GO 34390
35455: POP
35456: POP
// result := result ^ buildings ;
35457: LD_ADDR_VAR 0 7
35461: PUSH
35462: LD_VAR 0 7
35466: PUSH
35467: LD_VAR 0 18
35471: ADD
35472: ST_TO_ADDR
// end else
35473: GO 35616
// begin for i = 1 to personel do
35475: LD_ADDR_VAR 0 8
35479: PUSH
35480: DOUBLE
35481: LD_INT 1
35483: DEC
35484: ST_TO_ADDR
35485: LD_VAR 0 6
35489: PUSH
35490: FOR_TO
35491: IFFALSE 35614
// begin if i > 4 then
35493: LD_VAR 0 8
35497: PUSH
35498: LD_INT 4
35500: GREATER
35501: IFFALSE 35505
// break ;
35503: GO 35614
// x := personel [ i ] ;
35505: LD_ADDR_VAR 0 13
35509: PUSH
35510: LD_VAR 0 6
35514: PUSH
35515: LD_VAR 0 8
35519: ARRAY
35520: ST_TO_ADDR
// if x = - 1 then
35521: LD_VAR 0 13
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: EQUAL
35530: IFFALSE 35534
// continue ;
35532: GO 35490
// PrepareHuman ( false , i , skill ) ;
35534: LD_INT 0
35536: PPUSH
35537: LD_VAR 0 8
35541: PPUSH
35542: LD_VAR 0 4
35546: PPUSH
35547: CALL_OW 380
// un := CreateHuman ;
35551: LD_ADDR_VAR 0 14
35555: PUSH
35556: CALL_OW 44
35560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35561: LD_VAR 0 14
35565: PPUSH
35566: LD_VAR 0 1
35570: PPUSH
35571: CALL_OW 250
35575: PPUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: CALL_OW 251
35585: PPUSH
35586: LD_INT 10
35588: PPUSH
35589: LD_INT 0
35591: PPUSH
35592: CALL_OW 50
// result := result ^ un ;
35596: LD_ADDR_VAR 0 7
35600: PUSH
35601: LD_VAR 0 7
35605: PUSH
35606: LD_VAR 0 14
35610: ADD
35611: ST_TO_ADDR
// end ;
35612: GO 35490
35614: POP
35615: POP
// end ; end ;
35616: LD_VAR 0 7
35620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35621: LD_INT 0
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
// result := false ;
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35647: LD_VAR 0 1
35651: NOT
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 266
35662: PUSH
35663: LD_INT 32
35665: PUSH
35666: LD_INT 33
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: IN
35673: NOT
35674: OR
35675: IFFALSE 35679
// exit ;
35677: GO 36788
// nat := GetNation ( tower ) ;
35679: LD_ADDR_VAR 0 12
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 248
35693: ST_TO_ADDR
// side := GetSide ( tower ) ;
35694: LD_ADDR_VAR 0 16
35698: PUSH
35699: LD_VAR 0 1
35703: PPUSH
35704: CALL_OW 255
35708: ST_TO_ADDR
// x := GetX ( tower ) ;
35709: LD_ADDR_VAR 0 10
35713: PUSH
35714: LD_VAR 0 1
35718: PPUSH
35719: CALL_OW 250
35723: ST_TO_ADDR
// y := GetY ( tower ) ;
35724: LD_ADDR_VAR 0 11
35728: PUSH
35729: LD_VAR 0 1
35733: PPUSH
35734: CALL_OW 251
35738: ST_TO_ADDR
// if not x or not y then
35739: LD_VAR 0 10
35743: NOT
35744: PUSH
35745: LD_VAR 0 11
35749: NOT
35750: OR
35751: IFFALSE 35755
// exit ;
35753: GO 36788
// weapon := 0 ;
35755: LD_ADDR_VAR 0 18
35759: PUSH
35760: LD_INT 0
35762: ST_TO_ADDR
// fac_list := [ ] ;
35763: LD_ADDR_VAR 0 17
35767: PUSH
35768: EMPTY
35769: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35770: LD_ADDR_VAR 0 6
35774: PUSH
35775: LD_VAR 0 1
35779: PPUSH
35780: CALL_OW 274
35784: PPUSH
35785: LD_VAR 0 2
35789: PPUSH
35790: LD_INT 0
35792: PPUSH
35793: CALL 33359 0 3
35797: PPUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PPUSH
35808: CALL_OW 72
35812: ST_TO_ADDR
// if not factories then
35813: LD_VAR 0 6
35817: NOT
35818: IFFALSE 35822
// exit ;
35820: GO 36788
// for i in factories do
35822: LD_ADDR_VAR 0 8
35826: PUSH
35827: LD_VAR 0 6
35831: PUSH
35832: FOR_IN
35833: IFFALSE 35858
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35835: LD_ADDR_VAR 0 17
35839: PUSH
35840: LD_VAR 0 17
35844: PUSH
35845: LD_VAR 0 8
35849: PPUSH
35850: CALL_OW 478
35854: UNION
35855: ST_TO_ADDR
35856: GO 35832
35858: POP
35859: POP
// if not fac_list then
35860: LD_VAR 0 17
35864: NOT
35865: IFFALSE 35869
// exit ;
35867: GO 36788
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35869: LD_ADDR_VAR 0 5
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: LD_INT 9
35882: PUSH
35883: LD_INT 10
35885: PUSH
35886: LD_INT 6
35888: PUSH
35889: LD_INT 7
35891: PUSH
35892: LD_INT 11
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 27
35906: PUSH
35907: LD_INT 28
35909: PUSH
35910: LD_INT 26
35912: PUSH
35913: LD_INT 30
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 43
35924: PUSH
35925: LD_INT 44
35927: PUSH
35928: LD_INT 46
35930: PUSH
35931: LD_INT 45
35933: PUSH
35934: LD_INT 47
35936: PUSH
35937: LD_INT 49
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: PUSH
35953: LD_VAR 0 12
35957: ARRAY
35958: ST_TO_ADDR
// list := list isect fac_list ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 5
35968: PUSH
35969: LD_VAR 0 17
35973: ISECT
35974: ST_TO_ADDR
// if not list then
35975: LD_VAR 0 5
35979: NOT
35980: IFFALSE 35984
// exit ;
35982: GO 36788
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35984: LD_VAR 0 12
35988: PUSH
35989: LD_INT 3
35991: EQUAL
35992: PUSH
35993: LD_INT 49
35995: PUSH
35996: LD_VAR 0 5
36000: IN
36001: AND
36002: PUSH
36003: LD_INT 31
36005: PPUSH
36006: LD_VAR 0 16
36010: PPUSH
36011: CALL_OW 321
36015: PUSH
36016: LD_INT 2
36018: EQUAL
36019: AND
36020: IFFALSE 36080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36022: LD_INT 22
36024: PUSH
36025: LD_VAR 0 16
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 35
36036: PUSH
36037: LD_INT 49
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 91
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_INT 10
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PPUSH
36065: CALL_OW 69
36069: NOT
36070: IFFALSE 36080
// weapon := ru_time_lapser ;
36072: LD_ADDR_VAR 0 18
36076: PUSH
36077: LD_INT 49
36079: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36080: LD_VAR 0 12
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: IN
36095: PUSH
36096: LD_INT 11
36098: PUSH
36099: LD_VAR 0 5
36103: IN
36104: PUSH
36105: LD_INT 30
36107: PUSH
36108: LD_VAR 0 5
36112: IN
36113: OR
36114: AND
36115: PUSH
36116: LD_INT 6
36118: PPUSH
36119: LD_VAR 0 16
36123: PPUSH
36124: CALL_OW 321
36128: PUSH
36129: LD_INT 2
36131: EQUAL
36132: AND
36133: IFFALSE 36298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36135: LD_INT 22
36137: PUSH
36138: LD_VAR 0 16
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 35
36152: PUSH
36153: LD_INT 11
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 35
36162: PUSH
36163: LD_INT 30
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 91
36177: PUSH
36178: LD_VAR 0 1
36182: PUSH
36183: LD_INT 18
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: PPUSH
36196: CALL_OW 69
36200: NOT
36201: PUSH
36202: LD_INT 22
36204: PUSH
36205: LD_VAR 0 16
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 32
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 30
36229: PUSH
36230: LD_INT 33
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 91
36244: PUSH
36245: LD_VAR 0 1
36249: PUSH
36250: LD_INT 12
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: PPUSH
36266: CALL_OW 69
36270: PUSH
36271: LD_INT 2
36273: GREATER
36274: AND
36275: IFFALSE 36298
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36277: LD_ADDR_VAR 0 18
36281: PUSH
36282: LD_INT 11
36284: PUSH
36285: LD_INT 30
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_VAR 0 12
36296: ARRAY
36297: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36298: LD_VAR 0 18
36302: NOT
36303: PUSH
36304: LD_INT 40
36306: PPUSH
36307: LD_VAR 0 16
36311: PPUSH
36312: CALL_OW 321
36316: PUSH
36317: LD_INT 2
36319: EQUAL
36320: AND
36321: PUSH
36322: LD_INT 7
36324: PUSH
36325: LD_VAR 0 5
36329: IN
36330: PUSH
36331: LD_INT 28
36333: PUSH
36334: LD_VAR 0 5
36338: IN
36339: OR
36340: PUSH
36341: LD_INT 45
36343: PUSH
36344: LD_VAR 0 5
36348: IN
36349: OR
36350: AND
36351: IFFALSE 36605
// begin hex := GetHexInfo ( x , y ) ;
36353: LD_ADDR_VAR 0 4
36357: PUSH
36358: LD_VAR 0 10
36362: PPUSH
36363: LD_VAR 0 11
36367: PPUSH
36368: CALL_OW 546
36372: ST_TO_ADDR
// if hex [ 1 ] then
36373: LD_VAR 0 4
36377: PUSH
36378: LD_INT 1
36380: ARRAY
36381: IFFALSE 36385
// exit ;
36383: GO 36788
// height := hex [ 2 ] ;
36385: LD_ADDR_VAR 0 15
36389: PUSH
36390: LD_VAR 0 4
36394: PUSH
36395: LD_INT 2
36397: ARRAY
36398: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36399: LD_ADDR_VAR 0 14
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: LD_INT 5
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// for i in tmp do
36422: LD_ADDR_VAR 0 8
36426: PUSH
36427: LD_VAR 0 14
36431: PUSH
36432: FOR_IN
36433: IFFALSE 36603
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_VAR 0 10
36444: PPUSH
36445: LD_VAR 0 8
36449: PPUSH
36450: LD_INT 5
36452: PPUSH
36453: CALL_OW 272
36457: PUSH
36458: LD_VAR 0 11
36462: PPUSH
36463: LD_VAR 0 8
36467: PPUSH
36468: LD_INT 5
36470: PPUSH
36471: CALL_OW 273
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36480: LD_VAR 0 9
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PPUSH
36489: LD_VAR 0 9
36493: PUSH
36494: LD_INT 2
36496: ARRAY
36497: PPUSH
36498: CALL_OW 488
36502: IFFALSE 36601
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36504: LD_ADDR_VAR 0 4
36508: PUSH
36509: LD_VAR 0 9
36513: PUSH
36514: LD_INT 1
36516: ARRAY
36517: PPUSH
36518: LD_VAR 0 9
36522: PUSH
36523: LD_INT 2
36525: ARRAY
36526: PPUSH
36527: CALL_OW 546
36531: ST_TO_ADDR
// if hex [ 1 ] then
36532: LD_VAR 0 4
36536: PUSH
36537: LD_INT 1
36539: ARRAY
36540: IFFALSE 36544
// continue ;
36542: GO 36432
// h := hex [ 2 ] ;
36544: LD_ADDR_VAR 0 13
36548: PUSH
36549: LD_VAR 0 4
36553: PUSH
36554: LD_INT 2
36556: ARRAY
36557: ST_TO_ADDR
// if h + 7 < height then
36558: LD_VAR 0 13
36562: PUSH
36563: LD_INT 7
36565: PLUS
36566: PUSH
36567: LD_VAR 0 15
36571: LESS
36572: IFFALSE 36601
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36574: LD_ADDR_VAR 0 18
36578: PUSH
36579: LD_INT 7
36581: PUSH
36582: LD_INT 28
36584: PUSH
36585: LD_INT 45
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: PUSH
36593: LD_VAR 0 12
36597: ARRAY
36598: ST_TO_ADDR
// break ;
36599: GO 36603
// end ; end ; end ;
36601: GO 36432
36603: POP
36604: POP
// end ; if not weapon then
36605: LD_VAR 0 18
36609: NOT
36610: IFFALSE 36670
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36612: LD_ADDR_VAR 0 5
36616: PUSH
36617: LD_VAR 0 5
36621: PUSH
36622: LD_INT 11
36624: PUSH
36625: LD_INT 30
36627: PUSH
36628: LD_INT 49
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: DIFF
36636: ST_TO_ADDR
// if not list then
36637: LD_VAR 0 5
36641: NOT
36642: IFFALSE 36646
// exit ;
36644: GO 36788
// weapon := list [ rand ( 1 , list ) ] ;
36646: LD_ADDR_VAR 0 18
36650: PUSH
36651: LD_VAR 0 5
36655: PUSH
36656: LD_INT 1
36658: PPUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: CALL_OW 12
36668: ARRAY
36669: ST_TO_ADDR
// end ; if weapon then
36670: LD_VAR 0 18
36674: IFFALSE 36788
// begin tmp := CostOfWeapon ( weapon ) ;
36676: LD_ADDR_VAR 0 14
36680: PUSH
36681: LD_VAR 0 18
36685: PPUSH
36686: CALL_OW 451
36690: ST_TO_ADDR
// j := GetBase ( tower ) ;
36691: LD_ADDR_VAR 0 9
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 274
36705: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36706: LD_VAR 0 9
36710: PPUSH
36711: LD_INT 1
36713: PPUSH
36714: CALL_OW 275
36718: PUSH
36719: LD_VAR 0 14
36723: PUSH
36724: LD_INT 1
36726: ARRAY
36727: GREATEREQUAL
36728: PUSH
36729: LD_VAR 0 9
36733: PPUSH
36734: LD_INT 2
36736: PPUSH
36737: CALL_OW 275
36741: PUSH
36742: LD_VAR 0 14
36746: PUSH
36747: LD_INT 2
36749: ARRAY
36750: GREATEREQUAL
36751: AND
36752: PUSH
36753: LD_VAR 0 9
36757: PPUSH
36758: LD_INT 3
36760: PPUSH
36761: CALL_OW 275
36765: PUSH
36766: LD_VAR 0 14
36770: PUSH
36771: LD_INT 3
36773: ARRAY
36774: GREATEREQUAL
36775: AND
36776: IFFALSE 36788
// result := weapon ;
36778: LD_ADDR_VAR 0 3
36782: PUSH
36783: LD_VAR 0 18
36787: ST_TO_ADDR
// end ; end ;
36788: LD_VAR 0 3
36792: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36793: LD_INT 0
36795: PPUSH
36796: PPUSH
// result := true ;
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_INT 1
36804: ST_TO_ADDR
// if array1 = array2 then
36805: LD_VAR 0 1
36809: PUSH
36810: LD_VAR 0 2
36814: EQUAL
36815: IFFALSE 36875
// begin for i = 1 to array1 do
36817: LD_ADDR_VAR 0 4
36821: PUSH
36822: DOUBLE
36823: LD_INT 1
36825: DEC
36826: ST_TO_ADDR
36827: LD_VAR 0 1
36831: PUSH
36832: FOR_TO
36833: IFFALSE 36871
// if array1 [ i ] <> array2 [ i ] then
36835: LD_VAR 0 1
36839: PUSH
36840: LD_VAR 0 4
36844: ARRAY
36845: PUSH
36846: LD_VAR 0 2
36850: PUSH
36851: LD_VAR 0 4
36855: ARRAY
36856: NONEQUAL
36857: IFFALSE 36869
// begin result := false ;
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// break ;
36867: GO 36871
// end ;
36869: GO 36832
36871: POP
36872: POP
// end else
36873: GO 36883
// result := false ;
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_INT 0
36882: ST_TO_ADDR
// end ;
36883: LD_VAR 0 3
36887: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
// if not array1 or not array2 then
36892: LD_VAR 0 1
36896: NOT
36897: PUSH
36898: LD_VAR 0 2
36902: NOT
36903: OR
36904: IFFALSE 36908
// exit ;
36906: GO 36972
// result := true ;
36908: LD_ADDR_VAR 0 3
36912: PUSH
36913: LD_INT 1
36915: ST_TO_ADDR
// for i = 1 to array1 do
36916: LD_ADDR_VAR 0 4
36920: PUSH
36921: DOUBLE
36922: LD_INT 1
36924: DEC
36925: ST_TO_ADDR
36926: LD_VAR 0 1
36930: PUSH
36931: FOR_TO
36932: IFFALSE 36970
// if array1 [ i ] <> array2 [ i ] then
36934: LD_VAR 0 1
36938: PUSH
36939: LD_VAR 0 4
36943: ARRAY
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_VAR 0 4
36954: ARRAY
36955: NONEQUAL
36956: IFFALSE 36968
// begin result := false ;
36958: LD_ADDR_VAR 0 3
36962: PUSH
36963: LD_INT 0
36965: ST_TO_ADDR
// break ;
36966: GO 36970
// end ;
36968: GO 36931
36970: POP
36971: POP
// end ;
36972: LD_VAR 0 3
36976: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36977: LD_INT 0
36979: PPUSH
36980: PPUSH
36981: PPUSH
// pom := GetBase ( fac ) ;
36982: LD_ADDR_VAR 0 5
36986: PUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 274
36996: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36997: LD_ADDR_VAR 0 4
37001: PUSH
37002: LD_VAR 0 2
37006: PUSH
37007: LD_INT 1
37009: ARRAY
37010: PPUSH
37011: LD_VAR 0 2
37015: PUSH
37016: LD_INT 2
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 2
37024: PUSH
37025: LD_INT 3
37027: ARRAY
37028: PPUSH
37029: LD_VAR 0 2
37033: PUSH
37034: LD_INT 4
37036: ARRAY
37037: PPUSH
37038: CALL_OW 449
37042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37043: LD_ADDR_VAR 0 3
37047: PUSH
37048: LD_VAR 0 5
37052: PPUSH
37053: LD_INT 1
37055: PPUSH
37056: CALL_OW 275
37060: PUSH
37061: LD_VAR 0 4
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: GREATEREQUAL
37070: PUSH
37071: LD_VAR 0 5
37075: PPUSH
37076: LD_INT 2
37078: PPUSH
37079: CALL_OW 275
37083: PUSH
37084: LD_VAR 0 4
37088: PUSH
37089: LD_INT 2
37091: ARRAY
37092: GREATEREQUAL
37093: AND
37094: PUSH
37095: LD_VAR 0 5
37099: PPUSH
37100: LD_INT 3
37102: PPUSH
37103: CALL_OW 275
37107: PUSH
37108: LD_VAR 0 4
37112: PUSH
37113: LD_INT 3
37115: ARRAY
37116: GREATEREQUAL
37117: AND
37118: ST_TO_ADDR
// end ;
37119: LD_VAR 0 3
37123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37124: LD_INT 0
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
// pom := GetBase ( building ) ;
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_VAR 0 1
37139: PPUSH
37140: CALL_OW 274
37144: ST_TO_ADDR
// if not pom then
37145: LD_VAR 0 3
37149: NOT
37150: IFFALSE 37154
// exit ;
37152: GO 37324
// btype := GetBType ( building ) ;
37154: LD_ADDR_VAR 0 5
37158: PUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 266
37168: ST_TO_ADDR
// if btype = b_armoury then
37169: LD_VAR 0 5
37173: PUSH
37174: LD_INT 4
37176: EQUAL
37177: IFFALSE 37187
// btype := b_barracks ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_INT 5
37186: ST_TO_ADDR
// if btype = b_depot then
37187: LD_VAR 0 5
37191: PUSH
37192: LD_INT 0
37194: EQUAL
37195: IFFALSE 37205
// btype := b_warehouse ;
37197: LD_ADDR_VAR 0 5
37201: PUSH
37202: LD_INT 1
37204: ST_TO_ADDR
// if btype = b_workshop then
37205: LD_VAR 0 5
37209: PUSH
37210: LD_INT 2
37212: EQUAL
37213: IFFALSE 37223
// btype := b_factory ;
37215: LD_ADDR_VAR 0 5
37219: PUSH
37220: LD_INT 3
37222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37223: LD_ADDR_VAR 0 4
37227: PUSH
37228: LD_VAR 0 5
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 248
37242: PPUSH
37243: CALL_OW 450
37247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37248: LD_ADDR_VAR 0 2
37252: PUSH
37253: LD_VAR 0 3
37257: PPUSH
37258: LD_INT 1
37260: PPUSH
37261: CALL_OW 275
37265: PUSH
37266: LD_VAR 0 4
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: GREATEREQUAL
37275: PUSH
37276: LD_VAR 0 3
37280: PPUSH
37281: LD_INT 2
37283: PPUSH
37284: CALL_OW 275
37288: PUSH
37289: LD_VAR 0 4
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: GREATEREQUAL
37298: AND
37299: PUSH
37300: LD_VAR 0 3
37304: PPUSH
37305: LD_INT 3
37307: PPUSH
37308: CALL_OW 275
37312: PUSH
37313: LD_VAR 0 4
37317: PUSH
37318: LD_INT 3
37320: ARRAY
37321: GREATEREQUAL
37322: AND
37323: ST_TO_ADDR
// end ;
37324: LD_VAR 0 2
37328: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37329: LD_INT 0
37331: PPUSH
37332: PPUSH
37333: PPUSH
// pom := GetBase ( building ) ;
37334: LD_ADDR_VAR 0 4
37338: PUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 274
37348: ST_TO_ADDR
// if not pom then
37349: LD_VAR 0 4
37353: NOT
37354: IFFALSE 37358
// exit ;
37356: GO 37459
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37358: LD_ADDR_VAR 0 5
37362: PUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL_OW 248
37377: PPUSH
37378: CALL_OW 450
37382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_VAR 0 4
37392: PPUSH
37393: LD_INT 1
37395: PPUSH
37396: CALL_OW 275
37400: PUSH
37401: LD_VAR 0 5
37405: PUSH
37406: LD_INT 1
37408: ARRAY
37409: GREATEREQUAL
37410: PUSH
37411: LD_VAR 0 4
37415: PPUSH
37416: LD_INT 2
37418: PPUSH
37419: CALL_OW 275
37423: PUSH
37424: LD_VAR 0 5
37428: PUSH
37429: LD_INT 2
37431: ARRAY
37432: GREATEREQUAL
37433: AND
37434: PUSH
37435: LD_VAR 0 4
37439: PPUSH
37440: LD_INT 3
37442: PPUSH
37443: CALL_OW 275
37447: PUSH
37448: LD_VAR 0 5
37452: PUSH
37453: LD_INT 3
37455: ARRAY
37456: GREATEREQUAL
37457: AND
37458: ST_TO_ADDR
// end ;
37459: LD_VAR 0 3
37463: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37464: LD_INT 0
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
// result := false ;
37477: LD_ADDR_VAR 0 8
37481: PUSH
37482: LD_INT 0
37484: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37485: LD_VAR 0 5
37489: NOT
37490: PUSH
37491: LD_VAR 0 1
37495: NOT
37496: OR
37497: PUSH
37498: LD_VAR 0 2
37502: NOT
37503: OR
37504: PUSH
37505: LD_VAR 0 3
37509: NOT
37510: OR
37511: IFFALSE 37515
// exit ;
37513: GO 38329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37515: LD_ADDR_VAR 0 14
37519: PUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: LD_VAR 0 2
37529: PPUSH
37530: LD_VAR 0 3
37534: PPUSH
37535: LD_VAR 0 4
37539: PPUSH
37540: LD_VAR 0 5
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: PPUSH
37549: CALL_OW 248
37553: PPUSH
37554: LD_INT 0
37556: PPUSH
37557: CALL 39566 0 6
37561: ST_TO_ADDR
// if not hexes then
37562: LD_VAR 0 14
37566: NOT
37567: IFFALSE 37571
// exit ;
37569: GO 38329
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37571: LD_ADDR_VAR 0 17
37575: PUSH
37576: LD_VAR 0 5
37580: PPUSH
37581: LD_INT 22
37583: PUSH
37584: LD_VAR 0 13
37588: PPUSH
37589: CALL_OW 255
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 30
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 30
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 72
37634: ST_TO_ADDR
// for i = 1 to hexes do
37635: LD_ADDR_VAR 0 9
37639: PUSH
37640: DOUBLE
37641: LD_INT 1
37643: DEC
37644: ST_TO_ADDR
37645: LD_VAR 0 14
37649: PUSH
37650: FOR_TO
37651: IFFALSE 38327
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37653: LD_ADDR_VAR 0 13
37657: PUSH
37658: LD_VAR 0 14
37662: PUSH
37663: LD_VAR 0 9
37667: ARRAY
37668: PUSH
37669: LD_INT 1
37671: ARRAY
37672: PPUSH
37673: LD_VAR 0 14
37677: PUSH
37678: LD_VAR 0 9
37682: ARRAY
37683: PUSH
37684: LD_INT 2
37686: ARRAY
37687: PPUSH
37688: CALL_OW 428
37692: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37693: LD_VAR 0 14
37697: PUSH
37698: LD_VAR 0 9
37702: ARRAY
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PPUSH
37708: LD_VAR 0 14
37712: PUSH
37713: LD_VAR 0 9
37717: ARRAY
37718: PUSH
37719: LD_INT 2
37721: ARRAY
37722: PPUSH
37723: CALL_OW 351
37727: PUSH
37728: LD_VAR 0 14
37732: PUSH
37733: LD_VAR 0 9
37737: ARRAY
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: PPUSH
37743: LD_VAR 0 14
37747: PUSH
37748: LD_VAR 0 9
37752: ARRAY
37753: PUSH
37754: LD_INT 2
37756: ARRAY
37757: PPUSH
37758: CALL_OW 488
37762: NOT
37763: OR
37764: PUSH
37765: LD_VAR 0 13
37769: PPUSH
37770: CALL_OW 247
37774: PUSH
37775: LD_INT 3
37777: EQUAL
37778: OR
37779: IFFALSE 37785
// exit ;
37781: POP
37782: POP
37783: GO 38329
// if not tmp then
37785: LD_VAR 0 13
37789: NOT
37790: IFFALSE 37794
// continue ;
37792: GO 37650
// result := true ;
37794: LD_ADDR_VAR 0 8
37798: PUSH
37799: LD_INT 1
37801: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37802: LD_VAR 0 6
37806: PUSH
37807: LD_VAR 0 13
37811: PPUSH
37812: CALL_OW 247
37816: PUSH
37817: LD_INT 2
37819: EQUAL
37820: AND
37821: PUSH
37822: LD_VAR 0 13
37826: PPUSH
37827: CALL_OW 263
37831: PUSH
37832: LD_INT 1
37834: EQUAL
37835: AND
37836: IFFALSE 38000
// begin if IsDrivenBy ( tmp ) then
37838: LD_VAR 0 13
37842: PPUSH
37843: CALL_OW 311
37847: IFFALSE 37851
// continue ;
37849: GO 37650
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37851: LD_VAR 0 6
37855: PPUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 60
37861: PUSH
37862: EMPTY
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: LD_INT 55
37874: PUSH
37875: EMPTY
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 72
37890: IFFALSE 37998
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37892: LD_ADDR_VAR 0 18
37896: PUSH
37897: LD_VAR 0 6
37901: PPUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 60
37907: PUSH
37908: EMPTY
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: LD_INT 55
37920: PUSH
37921: EMPTY
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PPUSH
37932: CALL_OW 72
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: ST_TO_ADDR
// if IsInUnit ( driver ) then
37941: LD_VAR 0 18
37945: PPUSH
37946: CALL_OW 310
37950: IFFALSE 37961
// ComExit ( driver ) ;
37952: LD_VAR 0 18
37956: PPUSH
37957: CALL 62694 0 1
// AddComEnterUnit ( driver , tmp ) ;
37961: LD_VAR 0 18
37965: PPUSH
37966: LD_VAR 0 13
37970: PPUSH
37971: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37975: LD_VAR 0 18
37979: PPUSH
37980: LD_VAR 0 7
37984: PPUSH
37985: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37989: LD_VAR 0 18
37993: PPUSH
37994: CALL_OW 181
// end ; continue ;
37998: GO 37650
// end ; if not cleaners or not tmp in cleaners then
38000: LD_VAR 0 6
38004: NOT
38005: PUSH
38006: LD_VAR 0 13
38010: PUSH
38011: LD_VAR 0 6
38015: IN
38016: NOT
38017: OR
38018: IFFALSE 38325
// begin if dep then
38020: LD_VAR 0 17
38024: IFFALSE 38160
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38026: LD_ADDR_VAR 0 16
38030: PUSH
38031: LD_VAR 0 17
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: PPUSH
38040: CALL_OW 250
38044: PPUSH
38045: LD_VAR 0 17
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: CALL_OW 254
38058: PPUSH
38059: LD_INT 5
38061: PPUSH
38062: CALL_OW 272
38066: PUSH
38067: LD_VAR 0 17
38071: PUSH
38072: LD_INT 1
38074: ARRAY
38075: PPUSH
38076: CALL_OW 251
38080: PPUSH
38081: LD_VAR 0 17
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PPUSH
38090: CALL_OW 254
38094: PPUSH
38095: LD_INT 5
38097: PPUSH
38098: CALL_OW 273
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38107: LD_VAR 0 16
38111: PUSH
38112: LD_INT 1
38114: ARRAY
38115: PPUSH
38116: LD_VAR 0 16
38120: PUSH
38121: LD_INT 2
38123: ARRAY
38124: PPUSH
38125: CALL_OW 488
38129: IFFALSE 38160
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38131: LD_VAR 0 13
38135: PPUSH
38136: LD_VAR 0 16
38140: PUSH
38141: LD_INT 1
38143: ARRAY
38144: PPUSH
38145: LD_VAR 0 16
38149: PUSH
38150: LD_INT 2
38152: ARRAY
38153: PPUSH
38154: CALL_OW 111
// continue ;
38158: GO 37650
// end ; end ; r := GetDir ( tmp ) ;
38160: LD_ADDR_VAR 0 15
38164: PUSH
38165: LD_VAR 0 13
38169: PPUSH
38170: CALL_OW 254
38174: ST_TO_ADDR
// if r = 5 then
38175: LD_VAR 0 15
38179: PUSH
38180: LD_INT 5
38182: EQUAL
38183: IFFALSE 38193
// r := 0 ;
38185: LD_ADDR_VAR 0 15
38189: PUSH
38190: LD_INT 0
38192: ST_TO_ADDR
// for j = r to 5 do
38193: LD_ADDR_VAR 0 10
38197: PUSH
38198: DOUBLE
38199: LD_VAR 0 15
38203: DEC
38204: ST_TO_ADDR
38205: LD_INT 5
38207: PUSH
38208: FOR_TO
38209: IFFALSE 38323
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38211: LD_ADDR_VAR 0 11
38215: PUSH
38216: LD_VAR 0 13
38220: PPUSH
38221: CALL_OW 250
38225: PPUSH
38226: LD_VAR 0 10
38230: PPUSH
38231: LD_INT 2
38233: PPUSH
38234: CALL_OW 272
38238: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38239: LD_ADDR_VAR 0 12
38243: PUSH
38244: LD_VAR 0 13
38248: PPUSH
38249: CALL_OW 251
38253: PPUSH
38254: LD_VAR 0 10
38258: PPUSH
38259: LD_INT 2
38261: PPUSH
38262: CALL_OW 273
38266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38267: LD_VAR 0 11
38271: PPUSH
38272: LD_VAR 0 12
38276: PPUSH
38277: CALL_OW 488
38281: PUSH
38282: LD_VAR 0 11
38286: PPUSH
38287: LD_VAR 0 12
38291: PPUSH
38292: CALL_OW 428
38296: NOT
38297: AND
38298: IFFALSE 38321
// begin ComMoveXY ( tmp , _x , _y ) ;
38300: LD_VAR 0 13
38304: PPUSH
38305: LD_VAR 0 11
38309: PPUSH
38310: LD_VAR 0 12
38314: PPUSH
38315: CALL_OW 111
// break ;
38319: GO 38323
// end ; end ;
38321: GO 38208
38323: POP
38324: POP
// end ; end ;
38325: GO 37650
38327: POP
38328: POP
// end ;
38329: LD_VAR 0 8
38333: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38334: LD_INT 0
38336: PPUSH
// result := true ;
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: LD_INT 1
38344: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38345: LD_VAR 0 2
38349: PUSH
38350: LD_INT 24
38352: DOUBLE
38353: EQUAL
38354: IFTRUE 38364
38356: LD_INT 33
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38389
38364: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 32
38372: PPUSH
38373: LD_VAR 0 1
38377: PPUSH
38378: CALL_OW 321
38382: PUSH
38383: LD_INT 2
38385: EQUAL
38386: ST_TO_ADDR
38387: GO 38709
38389: LD_INT 20
38391: DOUBLE
38392: EQUAL
38393: IFTRUE 38397
38395: GO 38422
38397: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_INT 6
38405: PPUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 321
38415: PUSH
38416: LD_INT 2
38418: EQUAL
38419: ST_TO_ADDR
38420: GO 38709
38422: LD_INT 22
38424: DOUBLE
38425: EQUAL
38426: IFTRUE 38436
38428: LD_INT 36
38430: DOUBLE
38431: EQUAL
38432: IFTRUE 38436
38434: GO 38461
38436: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38437: LD_ADDR_VAR 0 3
38441: PUSH
38442: LD_INT 15
38444: PPUSH
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL_OW 321
38454: PUSH
38455: LD_INT 2
38457: EQUAL
38458: ST_TO_ADDR
38459: GO 38709
38461: LD_INT 30
38463: DOUBLE
38464: EQUAL
38465: IFTRUE 38469
38467: GO 38494
38469: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38470: LD_ADDR_VAR 0 3
38474: PUSH
38475: LD_INT 20
38477: PPUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 321
38487: PUSH
38488: LD_INT 2
38490: EQUAL
38491: ST_TO_ADDR
38492: GO 38709
38494: LD_INT 28
38496: DOUBLE
38497: EQUAL
38498: IFTRUE 38508
38500: LD_INT 21
38502: DOUBLE
38503: EQUAL
38504: IFTRUE 38508
38506: GO 38533
38508: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_INT 21
38516: PPUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 321
38526: PUSH
38527: LD_INT 2
38529: EQUAL
38530: ST_TO_ADDR
38531: GO 38709
38533: LD_INT 16
38535: DOUBLE
38536: EQUAL
38537: IFTRUE 38541
38539: GO 38568
38541: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_EXP 108
38551: PPUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 321
38561: PUSH
38562: LD_INT 2
38564: EQUAL
38565: ST_TO_ADDR
38566: GO 38709
38568: LD_INT 19
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38582
38574: LD_INT 23
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38582
38580: GO 38609
38582: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38583: LD_ADDR_VAR 0 3
38587: PUSH
38588: LD_EXP 107
38592: PPUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 321
38602: PUSH
38603: LD_INT 2
38605: EQUAL
38606: ST_TO_ADDR
38607: GO 38709
38609: LD_INT 17
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38617
38615: GO 38642
38617: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38618: LD_ADDR_VAR 0 3
38622: PUSH
38623: LD_INT 39
38625: PPUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 321
38635: PUSH
38636: LD_INT 2
38638: EQUAL
38639: ST_TO_ADDR
38640: GO 38709
38642: LD_INT 18
38644: DOUBLE
38645: EQUAL
38646: IFTRUE 38650
38648: GO 38675
38650: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38651: LD_ADDR_VAR 0 3
38655: PUSH
38656: LD_INT 40
38658: PPUSH
38659: LD_VAR 0 1
38663: PPUSH
38664: CALL_OW 321
38668: PUSH
38669: LD_INT 2
38671: EQUAL
38672: ST_TO_ADDR
38673: GO 38709
38675: LD_INT 27
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38708
38683: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38684: LD_ADDR_VAR 0 3
38688: PUSH
38689: LD_INT 35
38691: PPUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 321
38701: PUSH
38702: LD_INT 2
38704: EQUAL
38705: ST_TO_ADDR
38706: GO 38709
38708: POP
// end ;
38709: LD_VAR 0 3
38713: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38714: LD_INT 0
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
// result := false ;
38727: LD_ADDR_VAR 0 6
38731: PUSH
38732: LD_INT 0
38734: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38735: LD_VAR 0 1
38739: NOT
38740: PUSH
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 266
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: IN
38761: NOT
38762: OR
38763: PUSH
38764: LD_VAR 0 2
38768: NOT
38769: OR
38770: PUSH
38771: LD_VAR 0 5
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 4
38790: PUSH
38791: LD_INT 5
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: IN
38802: NOT
38803: OR
38804: PUSH
38805: LD_VAR 0 3
38809: PPUSH
38810: LD_VAR 0 4
38814: PPUSH
38815: CALL_OW 488
38819: NOT
38820: OR
38821: IFFALSE 38825
// exit ;
38823: GO 39561
// side := GetSide ( depot ) ;
38825: LD_ADDR_VAR 0 9
38829: PUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: CALL_OW 255
38839: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38840: LD_VAR 0 9
38844: PPUSH
38845: LD_VAR 0 2
38849: PPUSH
38850: CALL 38334 0 2
38854: NOT
38855: IFFALSE 38859
// exit ;
38857: GO 39561
// pom := GetBase ( depot ) ;
38859: LD_ADDR_VAR 0 10
38863: PUSH
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 274
38873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38874: LD_ADDR_VAR 0 11
38878: PUSH
38879: LD_VAR 0 2
38883: PPUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: CALL_OW 248
38893: PPUSH
38894: CALL_OW 450
38898: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38899: LD_VAR 0 10
38903: PPUSH
38904: LD_INT 1
38906: PPUSH
38907: CALL_OW 275
38911: PUSH
38912: LD_VAR 0 11
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: GREATEREQUAL
38921: PUSH
38922: LD_VAR 0 10
38926: PPUSH
38927: LD_INT 2
38929: PPUSH
38930: CALL_OW 275
38934: PUSH
38935: LD_VAR 0 11
38939: PUSH
38940: LD_INT 2
38942: ARRAY
38943: GREATEREQUAL
38944: AND
38945: PUSH
38946: LD_VAR 0 10
38950: PPUSH
38951: LD_INT 3
38953: PPUSH
38954: CALL_OW 275
38958: PUSH
38959: LD_VAR 0 11
38963: PUSH
38964: LD_INT 3
38966: ARRAY
38967: GREATEREQUAL
38968: AND
38969: NOT
38970: IFFALSE 38974
// exit ;
38972: GO 39561
// if GetBType ( depot ) = b_depot then
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 266
38983: PUSH
38984: LD_INT 0
38986: EQUAL
38987: IFFALSE 38999
// dist := 28 else
38989: LD_ADDR_VAR 0 14
38993: PUSH
38994: LD_INT 28
38996: ST_TO_ADDR
38997: GO 39007
// dist := 36 ;
38999: LD_ADDR_VAR 0 14
39003: PUSH
39004: LD_INT 36
39006: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39007: LD_VAR 0 1
39011: PPUSH
39012: LD_VAR 0 3
39016: PPUSH
39017: LD_VAR 0 4
39021: PPUSH
39022: CALL_OW 297
39026: PUSH
39027: LD_VAR 0 14
39031: GREATER
39032: IFFALSE 39036
// exit ;
39034: GO 39561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39036: LD_ADDR_VAR 0 12
39040: PUSH
39041: LD_VAR 0 2
39045: PPUSH
39046: LD_VAR 0 3
39050: PPUSH
39051: LD_VAR 0 4
39055: PPUSH
39056: LD_VAR 0 5
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 248
39070: PPUSH
39071: LD_INT 0
39073: PPUSH
39074: CALL 39566 0 6
39078: ST_TO_ADDR
// if not hexes then
39079: LD_VAR 0 12
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39561
// hex := GetHexInfo ( x , y ) ;
39088: LD_ADDR_VAR 0 15
39092: PUSH
39093: LD_VAR 0 3
39097: PPUSH
39098: LD_VAR 0 4
39102: PPUSH
39103: CALL_OW 546
39107: ST_TO_ADDR
// if hex [ 1 ] then
39108: LD_VAR 0 15
39112: PUSH
39113: LD_INT 1
39115: ARRAY
39116: IFFALSE 39120
// exit ;
39118: GO 39561
// height := hex [ 2 ] ;
39120: LD_ADDR_VAR 0 13
39124: PUSH
39125: LD_VAR 0 15
39129: PUSH
39130: LD_INT 2
39132: ARRAY
39133: ST_TO_ADDR
// for i = 1 to hexes do
39134: LD_ADDR_VAR 0 7
39138: PUSH
39139: DOUBLE
39140: LD_INT 1
39142: DEC
39143: ST_TO_ADDR
39144: LD_VAR 0 12
39148: PUSH
39149: FOR_TO
39150: IFFALSE 39480
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39152: LD_VAR 0 12
39156: PUSH
39157: LD_VAR 0 7
39161: ARRAY
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PPUSH
39167: LD_VAR 0 12
39171: PUSH
39172: LD_VAR 0 7
39176: ARRAY
39177: PUSH
39178: LD_INT 2
39180: ARRAY
39181: PPUSH
39182: CALL_OW 488
39186: NOT
39187: PUSH
39188: LD_VAR 0 12
39192: PUSH
39193: LD_VAR 0 7
39197: ARRAY
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: PPUSH
39203: LD_VAR 0 12
39207: PUSH
39208: LD_VAR 0 7
39212: ARRAY
39213: PUSH
39214: LD_INT 2
39216: ARRAY
39217: PPUSH
39218: CALL_OW 428
39222: PUSH
39223: LD_INT 0
39225: GREATER
39226: OR
39227: PUSH
39228: LD_VAR 0 12
39232: PUSH
39233: LD_VAR 0 7
39237: ARRAY
39238: PUSH
39239: LD_INT 1
39241: ARRAY
39242: PPUSH
39243: LD_VAR 0 12
39247: PUSH
39248: LD_VAR 0 7
39252: ARRAY
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL_OW 351
39262: OR
39263: IFFALSE 39269
// exit ;
39265: POP
39266: POP
39267: GO 39561
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39269: LD_ADDR_VAR 0 8
39273: PUSH
39274: LD_VAR 0 12
39278: PUSH
39279: LD_VAR 0 7
39283: ARRAY
39284: PUSH
39285: LD_INT 1
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 12
39293: PUSH
39294: LD_VAR 0 7
39298: ARRAY
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: PPUSH
39304: CALL_OW 546
39308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39309: LD_VAR 0 8
39313: PUSH
39314: LD_INT 1
39316: ARRAY
39317: PUSH
39318: LD_VAR 0 8
39322: PUSH
39323: LD_INT 2
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 13
39331: PUSH
39332: LD_INT 2
39334: PLUS
39335: GREATER
39336: OR
39337: PUSH
39338: LD_VAR 0 8
39342: PUSH
39343: LD_INT 2
39345: ARRAY
39346: PUSH
39347: LD_VAR 0 13
39351: PUSH
39352: LD_INT 2
39354: MINUS
39355: LESS
39356: OR
39357: PUSH
39358: LD_VAR 0 8
39362: PUSH
39363: LD_INT 3
39365: ARRAY
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 8
39372: PUSH
39373: LD_INT 9
39375: PUSH
39376: LD_INT 10
39378: PUSH
39379: LD_INT 11
39381: PUSH
39382: LD_INT 12
39384: PUSH
39385: LD_INT 13
39387: PUSH
39388: LD_INT 16
39390: PUSH
39391: LD_INT 17
39393: PUSH
39394: LD_INT 18
39396: PUSH
39397: LD_INT 19
39399: PUSH
39400: LD_INT 20
39402: PUSH
39403: LD_INT 21
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: IN
39421: NOT
39422: OR
39423: PUSH
39424: LD_VAR 0 8
39428: PUSH
39429: LD_INT 5
39431: ARRAY
39432: NOT
39433: OR
39434: PUSH
39435: LD_VAR 0 8
39439: PUSH
39440: LD_INT 6
39442: ARRAY
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 7
39452: PUSH
39453: LD_INT 9
39455: PUSH
39456: LD_INT 10
39458: PUSH
39459: LD_INT 11
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: IN
39470: NOT
39471: OR
39472: IFFALSE 39478
// exit ;
39474: POP
39475: POP
39476: GO 39561
// end ;
39478: GO 39149
39480: POP
39481: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39482: LD_VAR 0 9
39486: PPUSH
39487: LD_VAR 0 3
39491: PPUSH
39492: LD_VAR 0 4
39496: PPUSH
39497: LD_INT 20
39499: PPUSH
39500: CALL 31507 0 4
39504: PUSH
39505: LD_INT 4
39507: ARRAY
39508: IFFALSE 39512
// exit ;
39510: GO 39561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39512: LD_VAR 0 2
39516: PUSH
39517: LD_INT 29
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: IN
39527: PUSH
39528: LD_VAR 0 3
39532: PPUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: LD_VAR 0 9
39542: PPUSH
39543: CALL_OW 440
39547: NOT
39548: AND
39549: IFFALSE 39553
// exit ;
39551: GO 39561
// result := true ;
39553: LD_ADDR_VAR 0 6
39557: PUSH
39558: LD_INT 1
39560: ST_TO_ADDR
// end ;
39561: LD_VAR 0 6
39565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39566: LD_INT 0
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
// result = [ ] ;
39626: LD_ADDR_VAR 0 7
39630: PUSH
39631: EMPTY
39632: ST_TO_ADDR
// temp_list = [ ] ;
39633: LD_ADDR_VAR 0 9
39637: PUSH
39638: EMPTY
39639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39640: LD_VAR 0 4
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: LD_INT 4
39659: PUSH
39660: LD_INT 5
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: IN
39671: NOT
39672: PUSH
39673: LD_VAR 0 1
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: IN
39688: PUSH
39689: LD_VAR 0 5
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: IN
39708: NOT
39709: AND
39710: OR
39711: IFFALSE 39715
// exit ;
39713: GO 58106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39715: LD_VAR 0 1
39719: PUSH
39720: LD_INT 6
39722: PUSH
39723: LD_INT 7
39725: PUSH
39726: LD_INT 8
39728: PUSH
39729: LD_INT 13
39731: PUSH
39732: LD_INT 12
39734: PUSH
39735: LD_INT 15
39737: PUSH
39738: LD_INT 11
39740: PUSH
39741: LD_INT 14
39743: PUSH
39744: LD_INT 10
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: IN
39758: IFFALSE 39768
// btype = b_lab ;
39760: LD_ADDR_VAR 0 1
39764: PUSH
39765: LD_INT 6
39767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39768: LD_VAR 0 6
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: IN
39787: NOT
39788: PUSH
39789: LD_VAR 0 1
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: LD_INT 6
39808: PUSH
39809: LD_INT 36
39811: PUSH
39812: LD_INT 4
39814: PUSH
39815: LD_INT 5
39817: PUSH
39818: LD_INT 31
39820: PUSH
39821: LD_INT 32
39823: PUSH
39824: LD_INT 33
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: IN
39840: NOT
39841: PUSH
39842: LD_VAR 0 6
39846: PUSH
39847: LD_INT 1
39849: EQUAL
39850: AND
39851: OR
39852: PUSH
39853: LD_VAR 0 1
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: IN
39868: NOT
39869: PUSH
39870: LD_VAR 0 6
39874: PUSH
39875: LD_INT 2
39877: EQUAL
39878: AND
39879: OR
39880: IFFALSE 39890
// mode = 0 ;
39882: LD_ADDR_VAR 0 6
39886: PUSH
39887: LD_INT 0
39889: ST_TO_ADDR
// case mode of 0 :
39890: LD_VAR 0 6
39894: PUSH
39895: LD_INT 0
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39903
39901: GO 51356
39903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39904: LD_ADDR_VAR 0 11
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40097: LD_ADDR_VAR 0 12
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 3
40254: NEG
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40293: LD_ADDR_VAR 0 13
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 3
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40492: LD_ADDR_VAR 0 14
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 3
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40688: LD_ADDR_VAR 0 15
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40881: LD_ADDR_VAR 0 16
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: LD_INT 3
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41074: LD_ADDR_VAR 0 17
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41304: LD_ADDR_VAR 0 18
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41534: LD_ADDR_VAR 0 19
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41764: LD_ADDR_VAR 0 20
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41994: LD_ADDR_VAR 0 21
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42224: LD_ADDR_VAR 0 22
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42454: LD_ADDR_VAR 0 23
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42734: LD_ADDR_VAR 0 24
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43010: LD_ADDR_VAR 0 25
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43284: LD_ADDR_VAR 0 26
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43560: LD_ADDR_VAR 0 27
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: NEG
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43840: LD_ADDR_VAR 0 28
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 3
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44122: LD_ADDR_VAR 0 29
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44401: LD_ADDR_VAR 0 30
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44679: LD_ADDR_VAR 0 31
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 3
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 3
44922: NEG
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44957: LD_ADDR_VAR 0 32
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45235: LD_ADDR_VAR 0 33
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 3
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 3
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45514: LD_ADDR_VAR 0 34
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45794: LD_ADDR_VAR 0 35
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45906: LD_ADDR_VAR 0 36
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46018: LD_ADDR_VAR 0 37
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46130: LD_ADDR_VAR 0 38
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46242: LD_ADDR_VAR 0 39
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46354: LD_ADDR_VAR 0 40
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46466: LD_ADDR_VAR 0 41
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46816: LD_ADDR_VAR 0 42
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 3
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47166: LD_ADDR_VAR 0 43
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47514: LD_ADDR_VAR 0 44
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: LD_INT 3
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47864: LD_ADDR_VAR 0 45
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48214: LD_ADDR_VAR 0 46
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48562: LD_ADDR_VAR 0 47
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48713: LD_ADDR_VAR 0 48
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48860: LD_ADDR_VAR 0 49
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49004: LD_ADDR_VAR 0 50
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49148: LD_ADDR_VAR 0 51
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49295: LD_ADDR_VAR 0 52
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49446: LD_ADDR_VAR 0 53
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49676: LD_ADDR_VAR 0 54
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49906: LD_ADDR_VAR 0 55
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50136: LD_ADDR_VAR 0 56
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50366: LD_ADDR_VAR 0 57
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50596: LD_ADDR_VAR 0 58
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50826: LD_ADDR_VAR 0 59
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50914: LD_ADDR_VAR 0 60
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51002: LD_ADDR_VAR 0 61
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51090: LD_ADDR_VAR 0 62
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51178: LD_ADDR_VAR 0 63
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51266: LD_ADDR_VAR 0 64
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// end ; 1 :
51354: GO 57251
51356: LD_INT 1
51358: DOUBLE
51359: EQUAL
51360: IFTRUE 51364
51362: GO 53987
51364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51365: LD_ADDR_VAR 0 11
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51409: LD_ADDR_VAR 0 12
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51450: LD_ADDR_VAR 0 13
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51490: LD_ADDR_VAR 0 14
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51531: LD_ADDR_VAR 0 15
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51575: LD_ADDR_VAR 0 16
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51621: LD_ADDR_VAR 0 17
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51665: LD_ADDR_VAR 0 18
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51706: LD_ADDR_VAR 0 19
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51746: LD_ADDR_VAR 0 20
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51787: LD_ADDR_VAR 0 21
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51831: LD_ADDR_VAR 0 22
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51877: LD_ADDR_VAR 0 23
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 4
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51921: LD_ADDR_VAR 0 24
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 4
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51962: LD_ADDR_VAR 0 25
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 4
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 4
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52002: LD_ADDR_VAR 0 26
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 4
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52043: LD_ADDR_VAR 0 27
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 4
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52087: LD_ADDR_VAR 0 28
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: LD_INT 4
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52133: LD_ADDR_VAR 0 29
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 4
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 4
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 5
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 5
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 6
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 6
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 5
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52288: LD_ADDR_VAR 0 30
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 4
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 5
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 6
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 6
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52431: LD_ADDR_VAR 0 31
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: LD_INT 4
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 4
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: LD_INT 4
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 5
52508: PUSH
52509: LD_INT 5
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 4
52518: PUSH
52519: LD_INT 5
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 6
52528: PUSH
52529: LD_INT 5
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 6
52538: PUSH
52539: LD_INT 6
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 5
52548: PUSH
52549: LD_INT 6
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52570: LD_ADDR_VAR 0 32
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 5
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 6
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 6
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52713: LD_ADDR_VAR 0 33
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 4
52765: NEG
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 4
52776: NEG
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: NEG
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 5
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 5
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 6
52833: NEG
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 6
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52868: LD_ADDR_VAR 0 34
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: LD_INT 4
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 4
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 4
52935: NEG
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 4
52947: NEG
52948: PUSH
52949: LD_INT 5
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 5
52959: NEG
52960: PUSH
52961: LD_INT 4
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 5
52971: NEG
52972: PUSH
52973: LD_INT 5
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: LD_INT 6
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 6
52995: NEG
52996: PUSH
52997: LD_INT 5
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 6
53007: NEG
53008: PUSH
53009: LD_INT 6
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53031: LD_ADDR_VAR 0 41
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53075: LD_ADDR_VAR 0 42
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53116: LD_ADDR_VAR 0 43
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53156: LD_ADDR_VAR 0 44
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53197: LD_ADDR_VAR 0 45
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53241: LD_ADDR_VAR 0 46
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53287: LD_ADDR_VAR 0 47
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53320: LD_ADDR_VAR 0 48
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53351: LD_ADDR_VAR 0 49
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53380: LD_ADDR_VAR 0 50
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53409: LD_ADDR_VAR 0 51
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53440: LD_ADDR_VAR 0 52
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53473: LD_ADDR_VAR 0 53
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53517: LD_ADDR_VAR 0 54
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53558: LD_ADDR_VAR 0 55
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53598: LD_ADDR_VAR 0 56
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53639: LD_ADDR_VAR 0 57
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53683: LD_ADDR_VAR 0 58
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53729: LD_ADDR_VAR 0 59
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53773: LD_ADDR_VAR 0 60
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53814: LD_ADDR_VAR 0 61
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53854: LD_ADDR_VAR 0 62
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53895: LD_ADDR_VAR 0 63
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53939: LD_ADDR_VAR 0 64
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// end ; 2 :
53985: GO 57251
53987: LD_INT 2
53989: DOUBLE
53990: EQUAL
53991: IFTRUE 53995
53993: GO 57250
53995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53996: LD_ADDR_VAR 0 29
54000: PUSH
54001: LD_INT 4
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 5
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 5
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 4
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: LD_INT 4
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 4
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 4
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 4
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 5
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 5
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 4
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 5
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 4
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 4
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 4
54381: NEG
54382: PUSH
54383: LD_INT 4
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: LD_INT 5
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 4
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: LD_INT 4
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 5
54453: NEG
54454: PUSH
54455: LD_INT 5
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 5
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 5
54477: NEG
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54534: LD_ADDR_VAR 0 30
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 5
54561: PUSH
54562: LD_INT 4
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 5
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 5
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 5
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 4
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 4
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 4
54724: NEG
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 4
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 5
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 5
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 5
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: NEG
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 4
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 4
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 5
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 4
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 3
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 4
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 5
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 5
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55081: LD_ADDR_VAR 0 31
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 4
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 4
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 5
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 4
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 5
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 4
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 4
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 4
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: LD_INT 5
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: LD_INT 4
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: NEG
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: NEG
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: NEG
55356: PUSH
55357: LD_INT 5
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 5
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 5
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 5
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 4
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 5
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55631: LD_ADDR_VAR 0 32
55635: PUSH
55636: LD_INT 4
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 4
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 5
55694: NEG
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 5
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 5
55717: NEG
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: NEG
55813: PUSH
55814: LD_INT 4
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 4
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 4
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 5
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 4
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 4
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 5
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 5
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: PUSH
56044: LD_INT 4
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 4
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 5
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 5
56073: PUSH
56074: LD_INT 5
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: PUSH
56084: LD_INT 5
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 5
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 5
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56178: LD_ADDR_VAR 0 33
56182: PUSH
56183: LD_INT 4
56185: NEG
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: LD_INT 5
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: LD_INT 4
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 5
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 5
56257: NEG
56258: PUSH
56259: LD_INT 5
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: LD_INT 5
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 4
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 5
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 4
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 5
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 4
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 4
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: LD_INT 4
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 4
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 4
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 5
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 5
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 5
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56716: LD_ADDR_VAR 0 34
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 4
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 5
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 5
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 5
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 4
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 5
56938: PUSH
56939: LD_INT 4
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 5
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 4
56958: PUSH
56959: LD_INT 5
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 4
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 4
57101: NEG
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 4
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 4
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 5
57157: NEG
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 5
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 5
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: ST_TO_ADDR
// end ; end ;
57248: GO 57251
57250: POP
// case btype of b_depot , b_warehouse :
57251: LD_VAR 0 1
57255: PUSH
57256: LD_INT 0
57258: DOUBLE
57259: EQUAL
57260: IFTRUE 57270
57262: LD_INT 1
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57270
57268: GO 57471
57270: POP
// case nation of nation_american :
57271: LD_VAR 0 5
57275: PUSH
57276: LD_INT 1
57278: DOUBLE
57279: EQUAL
57280: IFTRUE 57284
57282: GO 57340
57284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57285: LD_ADDR_VAR 0 9
57289: PUSH
57290: LD_VAR 0 11
57294: PUSH
57295: LD_VAR 0 12
57299: PUSH
57300: LD_VAR 0 13
57304: PUSH
57305: LD_VAR 0 14
57309: PUSH
57310: LD_VAR 0 15
57314: PUSH
57315: LD_VAR 0 16
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: PUSH
57328: LD_VAR 0 4
57332: PUSH
57333: LD_INT 1
57335: PLUS
57336: ARRAY
57337: ST_TO_ADDR
57338: GO 57469
57340: LD_INT 2
57342: DOUBLE
57343: EQUAL
57344: IFTRUE 57348
57346: GO 57404
57348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57349: LD_ADDR_VAR 0 9
57353: PUSH
57354: LD_VAR 0 17
57358: PUSH
57359: LD_VAR 0 18
57363: PUSH
57364: LD_VAR 0 19
57368: PUSH
57369: LD_VAR 0 20
57373: PUSH
57374: LD_VAR 0 21
57378: PUSH
57379: LD_VAR 0 22
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: PUSH
57392: LD_VAR 0 4
57396: PUSH
57397: LD_INT 1
57399: PLUS
57400: ARRAY
57401: ST_TO_ADDR
57402: GO 57469
57404: LD_INT 3
57406: DOUBLE
57407: EQUAL
57408: IFTRUE 57412
57410: GO 57468
57412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57413: LD_ADDR_VAR 0 9
57417: PUSH
57418: LD_VAR 0 23
57422: PUSH
57423: LD_VAR 0 24
57427: PUSH
57428: LD_VAR 0 25
57432: PUSH
57433: LD_VAR 0 26
57437: PUSH
57438: LD_VAR 0 27
57442: PUSH
57443: LD_VAR 0 28
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: PUSH
57456: LD_VAR 0 4
57460: PUSH
57461: LD_INT 1
57463: PLUS
57464: ARRAY
57465: ST_TO_ADDR
57466: GO 57469
57468: POP
57469: GO 58024
57471: LD_INT 2
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57485
57477: LD_INT 3
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57485
57483: GO 57541
57485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57486: LD_ADDR_VAR 0 9
57490: PUSH
57491: LD_VAR 0 29
57495: PUSH
57496: LD_VAR 0 30
57500: PUSH
57501: LD_VAR 0 31
57505: PUSH
57506: LD_VAR 0 32
57510: PUSH
57511: LD_VAR 0 33
57515: PUSH
57516: LD_VAR 0 34
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: PUSH
57529: LD_VAR 0 4
57533: PUSH
57534: LD_INT 1
57536: PLUS
57537: ARRAY
57538: ST_TO_ADDR
57539: GO 58024
57541: LD_INT 16
57543: DOUBLE
57544: EQUAL
57545: IFTRUE 57603
57547: LD_INT 17
57549: DOUBLE
57550: EQUAL
57551: IFTRUE 57603
57553: LD_INT 18
57555: DOUBLE
57556: EQUAL
57557: IFTRUE 57603
57559: LD_INT 19
57561: DOUBLE
57562: EQUAL
57563: IFTRUE 57603
57565: LD_INT 22
57567: DOUBLE
57568: EQUAL
57569: IFTRUE 57603
57571: LD_INT 20
57573: DOUBLE
57574: EQUAL
57575: IFTRUE 57603
57577: LD_INT 21
57579: DOUBLE
57580: EQUAL
57581: IFTRUE 57603
57583: LD_INT 23
57585: DOUBLE
57586: EQUAL
57587: IFTRUE 57603
57589: LD_INT 24
57591: DOUBLE
57592: EQUAL
57593: IFTRUE 57603
57595: LD_INT 25
57597: DOUBLE
57598: EQUAL
57599: IFTRUE 57603
57601: GO 57659
57603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57604: LD_ADDR_VAR 0 9
57608: PUSH
57609: LD_VAR 0 35
57613: PUSH
57614: LD_VAR 0 36
57618: PUSH
57619: LD_VAR 0 37
57623: PUSH
57624: LD_VAR 0 38
57628: PUSH
57629: LD_VAR 0 39
57633: PUSH
57634: LD_VAR 0 40
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: PUSH
57647: LD_VAR 0 4
57651: PUSH
57652: LD_INT 1
57654: PLUS
57655: ARRAY
57656: ST_TO_ADDR
57657: GO 58024
57659: LD_INT 6
57661: DOUBLE
57662: EQUAL
57663: IFTRUE 57715
57665: LD_INT 7
57667: DOUBLE
57668: EQUAL
57669: IFTRUE 57715
57671: LD_INT 8
57673: DOUBLE
57674: EQUAL
57675: IFTRUE 57715
57677: LD_INT 13
57679: DOUBLE
57680: EQUAL
57681: IFTRUE 57715
57683: LD_INT 12
57685: DOUBLE
57686: EQUAL
57687: IFTRUE 57715
57689: LD_INT 15
57691: DOUBLE
57692: EQUAL
57693: IFTRUE 57715
57695: LD_INT 11
57697: DOUBLE
57698: EQUAL
57699: IFTRUE 57715
57701: LD_INT 14
57703: DOUBLE
57704: EQUAL
57705: IFTRUE 57715
57707: LD_INT 10
57709: DOUBLE
57710: EQUAL
57711: IFTRUE 57715
57713: GO 57771
57715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57716: LD_ADDR_VAR 0 9
57720: PUSH
57721: LD_VAR 0 41
57725: PUSH
57726: LD_VAR 0 42
57730: PUSH
57731: LD_VAR 0 43
57735: PUSH
57736: LD_VAR 0 44
57740: PUSH
57741: LD_VAR 0 45
57745: PUSH
57746: LD_VAR 0 46
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: PUSH
57759: LD_VAR 0 4
57763: PUSH
57764: LD_INT 1
57766: PLUS
57767: ARRAY
57768: ST_TO_ADDR
57769: GO 58024
57771: LD_INT 36
57773: DOUBLE
57774: EQUAL
57775: IFTRUE 57779
57777: GO 57835
57779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57780: LD_ADDR_VAR 0 9
57784: PUSH
57785: LD_VAR 0 47
57789: PUSH
57790: LD_VAR 0 48
57794: PUSH
57795: LD_VAR 0 49
57799: PUSH
57800: LD_VAR 0 50
57804: PUSH
57805: LD_VAR 0 51
57809: PUSH
57810: LD_VAR 0 52
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: PUSH
57823: LD_VAR 0 4
57827: PUSH
57828: LD_INT 1
57830: PLUS
57831: ARRAY
57832: ST_TO_ADDR
57833: GO 58024
57835: LD_INT 4
57837: DOUBLE
57838: EQUAL
57839: IFTRUE 57861
57841: LD_INT 5
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57861
57847: LD_INT 34
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57861
57853: LD_INT 37
57855: DOUBLE
57856: EQUAL
57857: IFTRUE 57861
57859: GO 57917
57861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57862: LD_ADDR_VAR 0 9
57866: PUSH
57867: LD_VAR 0 53
57871: PUSH
57872: LD_VAR 0 54
57876: PUSH
57877: LD_VAR 0 55
57881: PUSH
57882: LD_VAR 0 56
57886: PUSH
57887: LD_VAR 0 57
57891: PUSH
57892: LD_VAR 0 58
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: PUSH
57905: LD_VAR 0 4
57909: PUSH
57910: LD_INT 1
57912: PLUS
57913: ARRAY
57914: ST_TO_ADDR
57915: GO 58024
57917: LD_INT 31
57919: DOUBLE
57920: EQUAL
57921: IFTRUE 57967
57923: LD_INT 32
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57967
57929: LD_INT 33
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57967
57935: LD_INT 27
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57967
57941: LD_INT 26
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57967
57947: LD_INT 28
57949: DOUBLE
57950: EQUAL
57951: IFTRUE 57967
57953: LD_INT 29
57955: DOUBLE
57956: EQUAL
57957: IFTRUE 57967
57959: LD_INT 30
57961: DOUBLE
57962: EQUAL
57963: IFTRUE 57967
57965: GO 58023
57967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57968: LD_ADDR_VAR 0 9
57972: PUSH
57973: LD_VAR 0 59
57977: PUSH
57978: LD_VAR 0 60
57982: PUSH
57983: LD_VAR 0 61
57987: PUSH
57988: LD_VAR 0 62
57992: PUSH
57993: LD_VAR 0 63
57997: PUSH
57998: LD_VAR 0 64
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: PUSH
58011: LD_VAR 0 4
58015: PUSH
58016: LD_INT 1
58018: PLUS
58019: ARRAY
58020: ST_TO_ADDR
58021: GO 58024
58023: POP
// temp_list2 = [ ] ;
58024: LD_ADDR_VAR 0 10
58028: PUSH
58029: EMPTY
58030: ST_TO_ADDR
// for i in temp_list do
58031: LD_ADDR_VAR 0 8
58035: PUSH
58036: LD_VAR 0 9
58040: PUSH
58041: FOR_IN
58042: IFFALSE 58094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58044: LD_ADDR_VAR 0 10
58048: PUSH
58049: LD_VAR 0 10
58053: PUSH
58054: LD_VAR 0 8
58058: PUSH
58059: LD_INT 1
58061: ARRAY
58062: PUSH
58063: LD_VAR 0 2
58067: PLUS
58068: PUSH
58069: LD_VAR 0 8
58073: PUSH
58074: LD_INT 2
58076: ARRAY
58077: PUSH
58078: LD_VAR 0 3
58082: PLUS
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: ADD
58091: ST_TO_ADDR
58092: GO 58041
58094: POP
58095: POP
// result = temp_list2 ;
58096: LD_ADDR_VAR 0 7
58100: PUSH
58101: LD_VAR 0 10
58105: ST_TO_ADDR
// end ;
58106: LD_VAR 0 7
58110: RET
// export function EnemyInRange ( unit , dist ) ; begin
58111: LD_INT 0
58113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58114: LD_ADDR_VAR 0 3
58118: PUSH
58119: LD_VAR 0 1
58123: PPUSH
58124: CALL_OW 255
58128: PPUSH
58129: LD_VAR 0 1
58133: PPUSH
58134: CALL_OW 250
58138: PPUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: CALL_OW 251
58148: PPUSH
58149: LD_VAR 0 2
58153: PPUSH
58154: CALL 31507 0 4
58158: PUSH
58159: LD_INT 4
58161: ARRAY
58162: ST_TO_ADDR
// end ;
58163: LD_VAR 0 3
58167: RET
// export function PlayerSeeMe ( unit ) ; begin
58168: LD_INT 0
58170: PPUSH
// result := See ( your_side , unit ) ;
58171: LD_ADDR_VAR 0 2
58175: PUSH
58176: LD_OWVAR 2
58180: PPUSH
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 292
58190: ST_TO_ADDR
// end ;
58191: LD_VAR 0 2
58195: RET
// export function ReverseDir ( unit ) ; begin
58196: LD_INT 0
58198: PPUSH
// if not unit then
58199: LD_VAR 0 1
58203: NOT
58204: IFFALSE 58208
// exit ;
58206: GO 58231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58208: LD_ADDR_VAR 0 2
58212: PUSH
58213: LD_VAR 0 1
58217: PPUSH
58218: CALL_OW 254
58222: PUSH
58223: LD_INT 3
58225: PLUS
58226: PUSH
58227: LD_INT 6
58229: MOD
58230: ST_TO_ADDR
// end ;
58231: LD_VAR 0 2
58235: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58236: LD_INT 0
58238: PPUSH
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
// if not hexes then
58243: LD_VAR 0 2
58247: NOT
58248: IFFALSE 58252
// exit ;
58250: GO 58400
// dist := 9999 ;
58252: LD_ADDR_VAR 0 5
58256: PUSH
58257: LD_INT 9999
58259: ST_TO_ADDR
// for i = 1 to hexes do
58260: LD_ADDR_VAR 0 4
58264: PUSH
58265: DOUBLE
58266: LD_INT 1
58268: DEC
58269: ST_TO_ADDR
58270: LD_VAR 0 2
58274: PUSH
58275: FOR_TO
58276: IFFALSE 58388
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58278: LD_VAR 0 1
58282: PPUSH
58283: LD_VAR 0 2
58287: PUSH
58288: LD_VAR 0 4
58292: ARRAY
58293: PUSH
58294: LD_INT 1
58296: ARRAY
58297: PPUSH
58298: LD_VAR 0 2
58302: PUSH
58303: LD_VAR 0 4
58307: ARRAY
58308: PUSH
58309: LD_INT 2
58311: ARRAY
58312: PPUSH
58313: CALL_OW 297
58317: PUSH
58318: LD_VAR 0 5
58322: LESS
58323: IFFALSE 58386
// begin hex := hexes [ i ] ;
58325: LD_ADDR_VAR 0 7
58329: PUSH
58330: LD_VAR 0 2
58334: PUSH
58335: LD_VAR 0 4
58339: ARRAY
58340: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58341: LD_ADDR_VAR 0 5
58345: PUSH
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 2
58355: PUSH
58356: LD_VAR 0 4
58360: ARRAY
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: PPUSH
58366: LD_VAR 0 2
58370: PUSH
58371: LD_VAR 0 4
58375: ARRAY
58376: PUSH
58377: LD_INT 2
58379: ARRAY
58380: PPUSH
58381: CALL_OW 297
58385: ST_TO_ADDR
// end ; end ;
58386: GO 58275
58388: POP
58389: POP
// result := hex ;
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: LD_VAR 0 7
58399: ST_TO_ADDR
// end ;
58400: LD_VAR 0 3
58404: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58409: LD_VAR 0 1
58413: NOT
58414: PUSH
58415: LD_VAR 0 1
58419: PUSH
58420: LD_INT 21
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 23
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PPUSH
58444: CALL_OW 69
58448: IN
58449: NOT
58450: OR
58451: IFFALSE 58455
// exit ;
58453: GO 58502
// for i = 1 to 3 do
58455: LD_ADDR_VAR 0 3
58459: PUSH
58460: DOUBLE
58461: LD_INT 1
58463: DEC
58464: ST_TO_ADDR
58465: LD_INT 3
58467: PUSH
58468: FOR_TO
58469: IFFALSE 58500
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58471: LD_VAR 0 1
58475: PPUSH
58476: CALL_OW 250
58480: PPUSH
58481: LD_VAR 0 1
58485: PPUSH
58486: CALL_OW 251
58490: PPUSH
58491: LD_INT 1
58493: PPUSH
58494: CALL_OW 453
58498: GO 58468
58500: POP
58501: POP
// end ;
58502: LD_VAR 0 2
58506: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58507: LD_INT 0
58509: PPUSH
58510: PPUSH
58511: PPUSH
58512: PPUSH
58513: PPUSH
58514: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58515: LD_VAR 0 1
58519: NOT
58520: PUSH
58521: LD_VAR 0 2
58525: NOT
58526: OR
58527: PUSH
58528: LD_VAR 0 1
58532: PPUSH
58533: CALL_OW 314
58537: OR
58538: IFFALSE 58542
// exit ;
58540: GO 58983
// x := GetX ( enemy_unit ) ;
58542: LD_ADDR_VAR 0 7
58546: PUSH
58547: LD_VAR 0 2
58551: PPUSH
58552: CALL_OW 250
58556: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58557: LD_ADDR_VAR 0 8
58561: PUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: CALL_OW 251
58571: ST_TO_ADDR
// if not x or not y then
58572: LD_VAR 0 7
58576: NOT
58577: PUSH
58578: LD_VAR 0 8
58582: NOT
58583: OR
58584: IFFALSE 58588
// exit ;
58586: GO 58983
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58588: LD_ADDR_VAR 0 6
58592: PUSH
58593: LD_VAR 0 7
58597: PPUSH
58598: LD_INT 0
58600: PPUSH
58601: LD_INT 4
58603: PPUSH
58604: CALL_OW 272
58608: PUSH
58609: LD_VAR 0 8
58613: PPUSH
58614: LD_INT 0
58616: PPUSH
58617: LD_INT 4
58619: PPUSH
58620: CALL_OW 273
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_VAR 0 7
58633: PPUSH
58634: LD_INT 1
58636: PPUSH
58637: LD_INT 4
58639: PPUSH
58640: CALL_OW 272
58644: PUSH
58645: LD_VAR 0 8
58649: PPUSH
58650: LD_INT 1
58652: PPUSH
58653: LD_INT 4
58655: PPUSH
58656: CALL_OW 273
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_VAR 0 7
58669: PPUSH
58670: LD_INT 2
58672: PPUSH
58673: LD_INT 4
58675: PPUSH
58676: CALL_OW 272
58680: PUSH
58681: LD_VAR 0 8
58685: PPUSH
58686: LD_INT 2
58688: PPUSH
58689: LD_INT 4
58691: PPUSH
58692: CALL_OW 273
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_VAR 0 7
58705: PPUSH
58706: LD_INT 3
58708: PPUSH
58709: LD_INT 4
58711: PPUSH
58712: CALL_OW 272
58716: PUSH
58717: LD_VAR 0 8
58721: PPUSH
58722: LD_INT 3
58724: PPUSH
58725: LD_INT 4
58727: PPUSH
58728: CALL_OW 273
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_VAR 0 7
58741: PPUSH
58742: LD_INT 4
58744: PPUSH
58745: LD_INT 4
58747: PPUSH
58748: CALL_OW 272
58752: PUSH
58753: LD_VAR 0 8
58757: PPUSH
58758: LD_INT 4
58760: PPUSH
58761: LD_INT 4
58763: PPUSH
58764: CALL_OW 273
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_VAR 0 7
58777: PPUSH
58778: LD_INT 5
58780: PPUSH
58781: LD_INT 4
58783: PPUSH
58784: CALL_OW 272
58788: PUSH
58789: LD_VAR 0 8
58793: PPUSH
58794: LD_INT 5
58796: PPUSH
58797: LD_INT 4
58799: PPUSH
58800: CALL_OW 273
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: ST_TO_ADDR
// for i = tmp downto 1 do
58817: LD_ADDR_VAR 0 4
58821: PUSH
58822: DOUBLE
58823: LD_VAR 0 6
58827: INC
58828: ST_TO_ADDR
58829: LD_INT 1
58831: PUSH
58832: FOR_DOWNTO
58833: IFFALSE 58934
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58835: LD_VAR 0 6
58839: PUSH
58840: LD_VAR 0 4
58844: ARRAY
58845: PUSH
58846: LD_INT 1
58848: ARRAY
58849: PPUSH
58850: LD_VAR 0 6
58854: PUSH
58855: LD_VAR 0 4
58859: ARRAY
58860: PUSH
58861: LD_INT 2
58863: ARRAY
58864: PPUSH
58865: CALL_OW 488
58869: NOT
58870: PUSH
58871: LD_VAR 0 6
58875: PUSH
58876: LD_VAR 0 4
58880: ARRAY
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PPUSH
58886: LD_VAR 0 6
58890: PUSH
58891: LD_VAR 0 4
58895: ARRAY
58896: PUSH
58897: LD_INT 2
58899: ARRAY
58900: PPUSH
58901: CALL_OW 428
58905: PUSH
58906: LD_INT 0
58908: NONEQUAL
58909: OR
58910: IFFALSE 58932
// tmp := Delete ( tmp , i ) ;
58912: LD_ADDR_VAR 0 6
58916: PUSH
58917: LD_VAR 0 6
58921: PPUSH
58922: LD_VAR 0 4
58926: PPUSH
58927: CALL_OW 3
58931: ST_TO_ADDR
58932: GO 58832
58934: POP
58935: POP
// j := GetClosestHex ( unit , tmp ) ;
58936: LD_ADDR_VAR 0 5
58940: PUSH
58941: LD_VAR 0 1
58945: PPUSH
58946: LD_VAR 0 6
58950: PPUSH
58951: CALL 58236 0 2
58955: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58956: LD_VAR 0 1
58960: PPUSH
58961: LD_VAR 0 5
58965: PUSH
58966: LD_INT 1
58968: ARRAY
58969: PPUSH
58970: LD_VAR 0 5
58974: PUSH
58975: LD_INT 2
58977: ARRAY
58978: PPUSH
58979: CALL_OW 111
// end ;
58983: LD_VAR 0 3
58987: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58988: LD_INT 0
58990: PPUSH
58991: PPUSH
58992: PPUSH
// uc_side = 0 ;
58993: LD_ADDR_OWVAR 20
58997: PUSH
58998: LD_INT 0
59000: ST_TO_ADDR
// uc_nation = 0 ;
59001: LD_ADDR_OWVAR 21
59005: PUSH
59006: LD_INT 0
59008: ST_TO_ADDR
// InitHc_All ( ) ;
59009: CALL_OW 584
// InitVc ;
59013: CALL_OW 20
// if mastodonts then
59017: LD_VAR 0 6
59021: IFFALSE 59088
// for i = 1 to mastodonts do
59023: LD_ADDR_VAR 0 11
59027: PUSH
59028: DOUBLE
59029: LD_INT 1
59031: DEC
59032: ST_TO_ADDR
59033: LD_VAR 0 6
59037: PUSH
59038: FOR_TO
59039: IFFALSE 59086
// begin vc_chassis := 31 ;
59041: LD_ADDR_OWVAR 37
59045: PUSH
59046: LD_INT 31
59048: ST_TO_ADDR
// vc_control := control_rider ;
59049: LD_ADDR_OWVAR 38
59053: PUSH
59054: LD_INT 4
59056: ST_TO_ADDR
// animal := CreateVehicle ;
59057: LD_ADDR_VAR 0 12
59061: PUSH
59062: CALL_OW 45
59066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59067: LD_VAR 0 12
59071: PPUSH
59072: LD_VAR 0 8
59076: PPUSH
59077: LD_INT 0
59079: PPUSH
59080: CALL 61223 0 3
// end ;
59084: GO 59038
59086: POP
59087: POP
// if horses then
59088: LD_VAR 0 5
59092: IFFALSE 59159
// for i = 1 to horses do
59094: LD_ADDR_VAR 0 11
59098: PUSH
59099: DOUBLE
59100: LD_INT 1
59102: DEC
59103: ST_TO_ADDR
59104: LD_VAR 0 5
59108: PUSH
59109: FOR_TO
59110: IFFALSE 59157
// begin hc_class := 21 ;
59112: LD_ADDR_OWVAR 28
59116: PUSH
59117: LD_INT 21
59119: ST_TO_ADDR
// hc_gallery :=  ;
59120: LD_ADDR_OWVAR 33
59124: PUSH
59125: LD_STRING 
59127: ST_TO_ADDR
// animal := CreateHuman ;
59128: LD_ADDR_VAR 0 12
59132: PUSH
59133: CALL_OW 44
59137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59138: LD_VAR 0 12
59142: PPUSH
59143: LD_VAR 0 8
59147: PPUSH
59148: LD_INT 0
59150: PPUSH
59151: CALL 61223 0 3
// end ;
59155: GO 59109
59157: POP
59158: POP
// if birds then
59159: LD_VAR 0 1
59163: IFFALSE 59230
// for i = 1 to birds do
59165: LD_ADDR_VAR 0 11
59169: PUSH
59170: DOUBLE
59171: LD_INT 1
59173: DEC
59174: ST_TO_ADDR
59175: LD_VAR 0 1
59179: PUSH
59180: FOR_TO
59181: IFFALSE 59228
// begin hc_class = 18 ;
59183: LD_ADDR_OWVAR 28
59187: PUSH
59188: LD_INT 18
59190: ST_TO_ADDR
// hc_gallery =  ;
59191: LD_ADDR_OWVAR 33
59195: PUSH
59196: LD_STRING 
59198: ST_TO_ADDR
// animal := CreateHuman ;
59199: LD_ADDR_VAR 0 12
59203: PUSH
59204: CALL_OW 44
59208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59209: LD_VAR 0 12
59213: PPUSH
59214: LD_VAR 0 8
59218: PPUSH
59219: LD_INT 0
59221: PPUSH
59222: CALL 61223 0 3
// end ;
59226: GO 59180
59228: POP
59229: POP
// if tigers then
59230: LD_VAR 0 2
59234: IFFALSE 59318
// for i = 1 to tigers do
59236: LD_ADDR_VAR 0 11
59240: PUSH
59241: DOUBLE
59242: LD_INT 1
59244: DEC
59245: ST_TO_ADDR
59246: LD_VAR 0 2
59250: PUSH
59251: FOR_TO
59252: IFFALSE 59316
// begin hc_class = class_tiger ;
59254: LD_ADDR_OWVAR 28
59258: PUSH
59259: LD_INT 14
59261: ST_TO_ADDR
// hc_gallery =  ;
59262: LD_ADDR_OWVAR 33
59266: PUSH
59267: LD_STRING 
59269: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59270: LD_ADDR_OWVAR 35
59274: PUSH
59275: LD_INT 7
59277: NEG
59278: PPUSH
59279: LD_INT 7
59281: PPUSH
59282: CALL_OW 12
59286: ST_TO_ADDR
// animal := CreateHuman ;
59287: LD_ADDR_VAR 0 12
59291: PUSH
59292: CALL_OW 44
59296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59297: LD_VAR 0 12
59301: PPUSH
59302: LD_VAR 0 8
59306: PPUSH
59307: LD_INT 0
59309: PPUSH
59310: CALL 61223 0 3
// end ;
59314: GO 59251
59316: POP
59317: POP
// if apemans then
59318: LD_VAR 0 3
59322: IFFALSE 59445
// for i = 1 to apemans do
59324: LD_ADDR_VAR 0 11
59328: PUSH
59329: DOUBLE
59330: LD_INT 1
59332: DEC
59333: ST_TO_ADDR
59334: LD_VAR 0 3
59338: PUSH
59339: FOR_TO
59340: IFFALSE 59443
// begin hc_class = class_apeman ;
59342: LD_ADDR_OWVAR 28
59346: PUSH
59347: LD_INT 12
59349: ST_TO_ADDR
// hc_gallery =  ;
59350: LD_ADDR_OWVAR 33
59354: PUSH
59355: LD_STRING 
59357: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59358: LD_ADDR_OWVAR 35
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PPUSH
59367: LD_INT 2
59369: PPUSH
59370: CALL_OW 12
59374: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59375: LD_ADDR_OWVAR 31
59379: PUSH
59380: LD_INT 1
59382: PPUSH
59383: LD_INT 3
59385: PPUSH
59386: CALL_OW 12
59390: PUSH
59391: LD_INT 1
59393: PPUSH
59394: LD_INT 3
59396: PPUSH
59397: CALL_OW 12
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// animal := CreateHuman ;
59414: LD_ADDR_VAR 0 12
59418: PUSH
59419: CALL_OW 44
59423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59424: LD_VAR 0 12
59428: PPUSH
59429: LD_VAR 0 8
59433: PPUSH
59434: LD_INT 0
59436: PPUSH
59437: CALL 61223 0 3
// end ;
59441: GO 59339
59443: POP
59444: POP
// if enchidnas then
59445: LD_VAR 0 4
59449: IFFALSE 59516
// for i = 1 to enchidnas do
59451: LD_ADDR_VAR 0 11
59455: PUSH
59456: DOUBLE
59457: LD_INT 1
59459: DEC
59460: ST_TO_ADDR
59461: LD_VAR 0 4
59465: PUSH
59466: FOR_TO
59467: IFFALSE 59514
// begin hc_class = 13 ;
59469: LD_ADDR_OWVAR 28
59473: PUSH
59474: LD_INT 13
59476: ST_TO_ADDR
// hc_gallery =  ;
59477: LD_ADDR_OWVAR 33
59481: PUSH
59482: LD_STRING 
59484: ST_TO_ADDR
// animal := CreateHuman ;
59485: LD_ADDR_VAR 0 12
59489: PUSH
59490: CALL_OW 44
59494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59495: LD_VAR 0 12
59499: PPUSH
59500: LD_VAR 0 8
59504: PPUSH
59505: LD_INT 0
59507: PPUSH
59508: CALL 61223 0 3
// end ;
59512: GO 59466
59514: POP
59515: POP
// if fishes then
59516: LD_VAR 0 7
59520: IFFALSE 59587
// for i = 1 to fishes do
59522: LD_ADDR_VAR 0 11
59526: PUSH
59527: DOUBLE
59528: LD_INT 1
59530: DEC
59531: ST_TO_ADDR
59532: LD_VAR 0 7
59536: PUSH
59537: FOR_TO
59538: IFFALSE 59585
// begin hc_class = 20 ;
59540: LD_ADDR_OWVAR 28
59544: PUSH
59545: LD_INT 20
59547: ST_TO_ADDR
// hc_gallery =  ;
59548: LD_ADDR_OWVAR 33
59552: PUSH
59553: LD_STRING 
59555: ST_TO_ADDR
// animal := CreateHuman ;
59556: LD_ADDR_VAR 0 12
59560: PUSH
59561: CALL_OW 44
59565: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59566: LD_VAR 0 12
59570: PPUSH
59571: LD_VAR 0 9
59575: PPUSH
59576: LD_INT 0
59578: PPUSH
59579: CALL 61223 0 3
// end ;
59583: GO 59537
59585: POP
59586: POP
// end ;
59587: LD_VAR 0 10
59591: RET
// export function WantHeal ( sci , unit ) ; begin
59592: LD_INT 0
59594: PPUSH
// if GetTaskList ( sci ) > 0 then
59595: LD_VAR 0 1
59599: PPUSH
59600: CALL_OW 437
59604: PUSH
59605: LD_INT 0
59607: GREATER
59608: IFFALSE 59678
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59610: LD_VAR 0 1
59614: PPUSH
59615: CALL_OW 437
59619: PUSH
59620: LD_INT 1
59622: ARRAY
59623: PUSH
59624: LD_INT 1
59626: ARRAY
59627: PUSH
59628: LD_STRING l
59630: EQUAL
59631: PUSH
59632: LD_VAR 0 1
59636: PPUSH
59637: CALL_OW 437
59641: PUSH
59642: LD_INT 1
59644: ARRAY
59645: PUSH
59646: LD_INT 4
59648: ARRAY
59649: PUSH
59650: LD_VAR 0 2
59654: EQUAL
59655: AND
59656: IFFALSE 59668
// result := true else
59658: LD_ADDR_VAR 0 3
59662: PUSH
59663: LD_INT 1
59665: ST_TO_ADDR
59666: GO 59676
// result := false ;
59668: LD_ADDR_VAR 0 3
59672: PUSH
59673: LD_INT 0
59675: ST_TO_ADDR
// end else
59676: GO 59686
// result := false ;
59678: LD_ADDR_VAR 0 3
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// end ;
59686: LD_VAR 0 3
59690: RET
// export function HealTarget ( sci ) ; begin
59691: LD_INT 0
59693: PPUSH
// if not sci then
59694: LD_VAR 0 1
59698: NOT
59699: IFFALSE 59703
// exit ;
59701: GO 59768
// result := 0 ;
59703: LD_ADDR_VAR 0 2
59707: PUSH
59708: LD_INT 0
59710: ST_TO_ADDR
// if GetTaskList ( sci ) then
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 437
59720: IFFALSE 59768
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL_OW 437
59731: PUSH
59732: LD_INT 1
59734: ARRAY
59735: PUSH
59736: LD_INT 1
59738: ARRAY
59739: PUSH
59740: LD_STRING l
59742: EQUAL
59743: IFFALSE 59768
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59745: LD_ADDR_VAR 0 2
59749: PUSH
59750: LD_VAR 0 1
59754: PPUSH
59755: CALL_OW 437
59759: PUSH
59760: LD_INT 1
59762: ARRAY
59763: PUSH
59764: LD_INT 4
59766: ARRAY
59767: ST_TO_ADDR
// end ;
59768: LD_VAR 0 2
59772: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59773: LD_INT 0
59775: PPUSH
59776: PPUSH
59777: PPUSH
59778: PPUSH
// if not base_units then
59779: LD_VAR 0 1
59783: NOT
59784: IFFALSE 59788
// exit ;
59786: GO 59875
// result := false ;
59788: LD_ADDR_VAR 0 2
59792: PUSH
59793: LD_INT 0
59795: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59796: LD_ADDR_VAR 0 5
59800: PUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: LD_INT 21
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PPUSH
59816: CALL_OW 72
59820: ST_TO_ADDR
// if not tmp then
59821: LD_VAR 0 5
59825: NOT
59826: IFFALSE 59830
// exit ;
59828: GO 59875
// for i in tmp do
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_VAR 0 5
59839: PUSH
59840: FOR_IN
59841: IFFALSE 59873
// begin result := EnemyInRange ( i , 22 ) ;
59843: LD_ADDR_VAR 0 2
59847: PUSH
59848: LD_VAR 0 3
59852: PPUSH
59853: LD_INT 22
59855: PPUSH
59856: CALL 58111 0 2
59860: ST_TO_ADDR
// if result then
59861: LD_VAR 0 2
59865: IFFALSE 59871
// exit ;
59867: POP
59868: POP
59869: GO 59875
// end ;
59871: GO 59840
59873: POP
59874: POP
// end ;
59875: LD_VAR 0 2
59879: RET
// export function FilterByTag ( units , tag ) ; begin
59880: LD_INT 0
59882: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59883: LD_ADDR_VAR 0 3
59887: PUSH
59888: LD_VAR 0 1
59892: PPUSH
59893: LD_INT 120
59895: PUSH
59896: LD_VAR 0 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PPUSH
59905: CALL_OW 72
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 3
59914: RET
// export function IsDriver ( un ) ; begin
59915: LD_INT 0
59917: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59918: LD_ADDR_VAR 0 2
59922: PUSH
59923: LD_VAR 0 1
59927: PUSH
59928: LD_INT 55
59930: PUSH
59931: EMPTY
59932: LIST
59933: PPUSH
59934: CALL_OW 69
59938: IN
59939: ST_TO_ADDR
// end ;
59940: LD_VAR 0 2
59944: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59945: LD_INT 0
59947: PPUSH
59948: PPUSH
// list := [ ] ;
59949: LD_ADDR_VAR 0 5
59953: PUSH
59954: EMPTY
59955: ST_TO_ADDR
// case d of 0 :
59956: LD_VAR 0 3
59960: PUSH
59961: LD_INT 0
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 60102
59969: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59970: LD_ADDR_VAR 0 5
59974: PUSH
59975: LD_VAR 0 1
59979: PUSH
59980: LD_INT 4
59982: MINUS
59983: PUSH
59984: LD_VAR 0 2
59988: PUSH
59989: LD_INT 4
59991: MINUS
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: LIST
60000: PUSH
60001: LD_VAR 0 1
60005: PUSH
60006: LD_INT 3
60008: MINUS
60009: PUSH
60010: LD_VAR 0 2
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: LD_VAR 0 1
60027: PUSH
60028: LD_INT 4
60030: PLUS
60031: PUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_INT 4
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 1
60049: PUSH
60050: LD_INT 3
60052: PLUS
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: LD_INT 3
60061: PLUS
60062: PUSH
60063: LD_INT 5
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_VAR 0 1
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 4
60083: PLUS
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// end ; 1 :
60100: GO 60800
60102: LD_INT 1
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60110
60108: GO 60243
60110: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_INT 4
60128: MINUS
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_INT 3
60145: MINUS
60146: PUSH
60147: LD_VAR 0 2
60151: PUSH
60152: LD_INT 3
60154: MINUS
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: PUSH
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 4
60171: MINUS
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 1
60190: PUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_INT 3
60198: PLUS
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: PUSH
60208: LD_VAR 0 1
60212: PUSH
60213: LD_INT 4
60215: PLUS
60216: PUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_INT 4
60224: PLUS
60225: PUSH
60226: LD_INT 5
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// end ; 2 :
60241: GO 60800
60243: LD_INT 2
60245: DOUBLE
60246: EQUAL
60247: IFTRUE 60251
60249: GO 60380
60251: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60252: LD_ADDR_VAR 0 5
60256: PUSH
60257: LD_VAR 0 1
60261: PUSH
60262: LD_VAR 0 2
60266: PUSH
60267: LD_INT 3
60269: MINUS
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: PUSH
60279: LD_VAR 0 1
60283: PUSH
60284: LD_INT 4
60286: PLUS
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 4
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: LD_VAR 0 2
60310: PUSH
60311: LD_INT 4
60313: PLUS
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: PUSH
60323: LD_VAR 0 1
60327: PUSH
60328: LD_INT 3
60330: MINUS
60331: PUSH
60332: LD_VAR 0 2
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 4
60352: MINUS
60353: PUSH
60354: LD_VAR 0 2
60358: PUSH
60359: LD_INT 4
60361: MINUS
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// end ; 3 :
60378: GO 60800
60380: LD_INT 3
60382: DOUBLE
60383: EQUAL
60384: IFTRUE 60388
60386: GO 60521
60388: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60389: LD_ADDR_VAR 0 5
60393: PUSH
60394: LD_VAR 0 1
60398: PUSH
60399: LD_INT 3
60401: PLUS
60402: PUSH
60403: LD_VAR 0 2
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: PUSH
60416: LD_VAR 0 1
60420: PUSH
60421: LD_INT 4
60423: PLUS
60424: PUSH
60425: LD_VAR 0 2
60429: PUSH
60430: LD_INT 4
60432: PLUS
60433: PUSH
60434: LD_INT 5
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: PUSH
60442: LD_VAR 0 1
60446: PUSH
60447: LD_INT 4
60449: MINUS
60450: PUSH
60451: LD_VAR 0 2
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: PUSH
60464: LD_VAR 0 1
60468: PUSH
60469: LD_VAR 0 2
60473: PUSH
60474: LD_INT 4
60476: MINUS
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: PUSH
60486: LD_VAR 0 1
60490: PUSH
60491: LD_INT 3
60493: MINUS
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: LD_INT 3
60502: MINUS
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// end ; 4 :
60519: GO 60800
60521: LD_INT 4
60523: DOUBLE
60524: EQUAL
60525: IFTRUE 60529
60527: GO 60662
60529: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60530: LD_ADDR_VAR 0 5
60534: PUSH
60535: LD_VAR 0 1
60539: PUSH
60540: LD_VAR 0 2
60544: PUSH
60545: LD_INT 4
60547: PLUS
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: PUSH
60557: LD_VAR 0 1
60561: PUSH
60562: LD_INT 3
60564: PLUS
60565: PUSH
60566: LD_VAR 0 2
60570: PUSH
60571: LD_INT 3
60573: PLUS
60574: PUSH
60575: LD_INT 5
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: LD_VAR 0 1
60587: PUSH
60588: LD_INT 4
60590: PLUS
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_INT 4
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: PUSH
60605: LD_VAR 0 1
60609: PUSH
60610: LD_VAR 0 2
60614: PUSH
60615: LD_INT 3
60617: MINUS
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 1
60631: PUSH
60632: LD_INT 4
60634: MINUS
60635: PUSH
60636: LD_VAR 0 2
60640: PUSH
60641: LD_INT 4
60643: MINUS
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// end ; 5 :
60660: GO 60800
60662: LD_INT 5
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60670
60668: GO 60799
60670: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60671: LD_ADDR_VAR 0 5
60675: PUSH
60676: LD_VAR 0 1
60680: PUSH
60681: LD_INT 4
60683: MINUS
60684: PUSH
60685: LD_VAR 0 2
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: PUSH
60698: LD_VAR 0 1
60702: PUSH
60703: LD_VAR 0 2
60707: PUSH
60708: LD_INT 4
60710: MINUS
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: PUSH
60720: LD_VAR 0 1
60724: PUSH
60725: LD_INT 4
60727: PLUS
60728: PUSH
60729: LD_VAR 0 2
60733: PUSH
60734: LD_INT 4
60736: PLUS
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: PUSH
60746: LD_VAR 0 1
60750: PUSH
60751: LD_INT 3
60753: PLUS
60754: PUSH
60755: LD_VAR 0 2
60759: PUSH
60760: LD_INT 4
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: PUSH
60768: LD_VAR 0 1
60772: PUSH
60773: LD_VAR 0 2
60777: PUSH
60778: LD_INT 3
60780: PLUS
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: ST_TO_ADDR
// end ; end ;
60797: GO 60800
60799: POP
// result := list ;
60800: LD_ADDR_VAR 0 4
60804: PUSH
60805: LD_VAR 0 5
60809: ST_TO_ADDR
// end ;
60810: LD_VAR 0 4
60814: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60815: LD_INT 0
60817: PPUSH
60818: PPUSH
60819: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60820: LD_VAR 0 1
60824: NOT
60825: PUSH
60826: LD_VAR 0 2
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: LD_INT 4
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: IN
60849: NOT
60850: OR
60851: IFFALSE 60855
// exit ;
60853: GO 60947
// tmp := [ ] ;
60855: LD_ADDR_VAR 0 5
60859: PUSH
60860: EMPTY
60861: ST_TO_ADDR
// for i in units do
60862: LD_ADDR_VAR 0 4
60866: PUSH
60867: LD_VAR 0 1
60871: PUSH
60872: FOR_IN
60873: IFFALSE 60916
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60875: LD_ADDR_VAR 0 5
60879: PUSH
60880: LD_VAR 0 5
60884: PPUSH
60885: LD_VAR 0 5
60889: PUSH
60890: LD_INT 1
60892: PLUS
60893: PPUSH
60894: LD_VAR 0 4
60898: PPUSH
60899: LD_VAR 0 2
60903: PPUSH
60904: CALL_OW 259
60908: PPUSH
60909: CALL_OW 2
60913: ST_TO_ADDR
60914: GO 60872
60916: POP
60917: POP
// if not tmp then
60918: LD_VAR 0 5
60922: NOT
60923: IFFALSE 60927
// exit ;
60925: GO 60947
// result := SortListByListDesc ( units , tmp ) ;
60927: LD_ADDR_VAR 0 3
60931: PUSH
60932: LD_VAR 0 1
60936: PPUSH
60937: LD_VAR 0 5
60941: PPUSH
60942: CALL_OW 77
60946: ST_TO_ADDR
// end ;
60947: LD_VAR 0 3
60951: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60952: LD_INT 0
60954: PPUSH
60955: PPUSH
60956: PPUSH
// result := false ;
60957: LD_ADDR_VAR 0 3
60961: PUSH
60962: LD_INT 0
60964: ST_TO_ADDR
// x := GetX ( building ) ;
60965: LD_ADDR_VAR 0 4
60969: PUSH
60970: LD_VAR 0 2
60974: PPUSH
60975: CALL_OW 250
60979: ST_TO_ADDR
// y := GetY ( building ) ;
60980: LD_ADDR_VAR 0 5
60984: PUSH
60985: LD_VAR 0 2
60989: PPUSH
60990: CALL_OW 251
60994: ST_TO_ADDR
// if not building or not x or not y then
60995: LD_VAR 0 2
60999: NOT
61000: PUSH
61001: LD_VAR 0 4
61005: NOT
61006: OR
61007: PUSH
61008: LD_VAR 0 5
61012: NOT
61013: OR
61014: IFFALSE 61018
// exit ;
61016: GO 61110
// if GetTaskList ( unit ) then
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 437
61027: IFFALSE 61110
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61029: LD_STRING e
61031: PUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: CALL_OW 437
61041: PUSH
61042: LD_INT 1
61044: ARRAY
61045: PUSH
61046: LD_INT 1
61048: ARRAY
61049: EQUAL
61050: PUSH
61051: LD_VAR 0 4
61055: PUSH
61056: LD_VAR 0 1
61060: PPUSH
61061: CALL_OW 437
61065: PUSH
61066: LD_INT 1
61068: ARRAY
61069: PUSH
61070: LD_INT 2
61072: ARRAY
61073: EQUAL
61074: AND
61075: PUSH
61076: LD_VAR 0 5
61080: PUSH
61081: LD_VAR 0 1
61085: PPUSH
61086: CALL_OW 437
61090: PUSH
61091: LD_INT 1
61093: ARRAY
61094: PUSH
61095: LD_INT 3
61097: ARRAY
61098: EQUAL
61099: AND
61100: IFFALSE 61110
// result := true end ;
61102: LD_ADDR_VAR 0 3
61106: PUSH
61107: LD_INT 1
61109: ST_TO_ADDR
// end ;
61110: LD_VAR 0 3
61114: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61115: LD_INT 0
61117: PPUSH
// result := false ;
61118: LD_ADDR_VAR 0 4
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// if GetTaskList ( unit ) then
61126: LD_VAR 0 1
61130: PPUSH
61131: CALL_OW 437
61135: IFFALSE 61218
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61137: LD_STRING M
61139: PUSH
61140: LD_VAR 0 1
61144: PPUSH
61145: CALL_OW 437
61149: PUSH
61150: LD_INT 1
61152: ARRAY
61153: PUSH
61154: LD_INT 1
61156: ARRAY
61157: EQUAL
61158: PUSH
61159: LD_VAR 0 2
61163: PUSH
61164: LD_VAR 0 1
61168: PPUSH
61169: CALL_OW 437
61173: PUSH
61174: LD_INT 1
61176: ARRAY
61177: PUSH
61178: LD_INT 2
61180: ARRAY
61181: EQUAL
61182: AND
61183: PUSH
61184: LD_VAR 0 3
61188: PUSH
61189: LD_VAR 0 1
61193: PPUSH
61194: CALL_OW 437
61198: PUSH
61199: LD_INT 1
61201: ARRAY
61202: PUSH
61203: LD_INT 3
61205: ARRAY
61206: EQUAL
61207: AND
61208: IFFALSE 61218
// result := true ;
61210: LD_ADDR_VAR 0 4
61214: PUSH
61215: LD_INT 1
61217: ST_TO_ADDR
// end ; end ;
61218: LD_VAR 0 4
61222: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61223: LD_INT 0
61225: PPUSH
61226: PPUSH
61227: PPUSH
61228: PPUSH
// if not unit or not area then
61229: LD_VAR 0 1
61233: NOT
61234: PUSH
61235: LD_VAR 0 2
61239: NOT
61240: OR
61241: IFFALSE 61245
// exit ;
61243: GO 61409
// tmp := AreaToList ( area , i ) ;
61245: LD_ADDR_VAR 0 6
61249: PUSH
61250: LD_VAR 0 2
61254: PPUSH
61255: LD_VAR 0 5
61259: PPUSH
61260: CALL_OW 517
61264: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61265: LD_ADDR_VAR 0 5
61269: PUSH
61270: DOUBLE
61271: LD_INT 1
61273: DEC
61274: ST_TO_ADDR
61275: LD_VAR 0 6
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: PUSH
61284: FOR_TO
61285: IFFALSE 61407
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61287: LD_ADDR_VAR 0 7
61291: PUSH
61292: LD_VAR 0 6
61296: PUSH
61297: LD_INT 1
61299: ARRAY
61300: PUSH
61301: LD_VAR 0 5
61305: ARRAY
61306: PUSH
61307: LD_VAR 0 6
61311: PUSH
61312: LD_INT 2
61314: ARRAY
61315: PUSH
61316: LD_VAR 0 5
61320: ARRAY
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61326: LD_VAR 0 7
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PPUSH
61335: LD_VAR 0 7
61339: PUSH
61340: LD_INT 2
61342: ARRAY
61343: PPUSH
61344: CALL_OW 428
61348: PUSH
61349: LD_INT 0
61351: EQUAL
61352: IFFALSE 61405
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61354: LD_VAR 0 1
61358: PPUSH
61359: LD_VAR 0 7
61363: PUSH
61364: LD_INT 1
61366: ARRAY
61367: PPUSH
61368: LD_VAR 0 7
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: PPUSH
61377: LD_VAR 0 3
61381: PPUSH
61382: CALL_OW 48
// result := IsPlaced ( unit ) ;
61386: LD_ADDR_VAR 0 4
61390: PUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 305
61400: ST_TO_ADDR
// exit ;
61401: POP
61402: POP
61403: GO 61409
// end ; end ;
61405: GO 61284
61407: POP
61408: POP
// end ;
61409: LD_VAR 0 4
61413: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61414: LD_INT 0
61416: PPUSH
61417: PPUSH
61418: PPUSH
// if not side or side > 8 then
61419: LD_VAR 0 1
61423: NOT
61424: PUSH
61425: LD_VAR 0 1
61429: PUSH
61430: LD_INT 8
61432: GREATER
61433: OR
61434: IFFALSE 61438
// exit ;
61436: GO 61625
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61438: LD_ADDR_VAR 0 4
61442: PUSH
61443: LD_INT 22
61445: PUSH
61446: LD_VAR 0 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 21
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PPUSH
61469: CALL_OW 69
61473: ST_TO_ADDR
// if not tmp then
61474: LD_VAR 0 4
61478: NOT
61479: IFFALSE 61483
// exit ;
61481: GO 61625
// enable_addtolog := true ;
61483: LD_ADDR_OWVAR 81
61487: PUSH
61488: LD_INT 1
61490: ST_TO_ADDR
// AddToLog ( [ ) ;
61491: LD_STRING [
61493: PPUSH
61494: CALL_OW 561
// for i in tmp do
61498: LD_ADDR_VAR 0 3
61502: PUSH
61503: LD_VAR 0 4
61507: PUSH
61508: FOR_IN
61509: IFFALSE 61616
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61511: LD_STRING [
61513: PUSH
61514: LD_VAR 0 3
61518: PPUSH
61519: CALL_OW 266
61523: STR
61524: PUSH
61525: LD_STRING , 
61527: STR
61528: PUSH
61529: LD_VAR 0 3
61533: PPUSH
61534: CALL_OW 250
61538: STR
61539: PUSH
61540: LD_STRING , 
61542: STR
61543: PUSH
61544: LD_VAR 0 3
61548: PPUSH
61549: CALL_OW 251
61553: STR
61554: PUSH
61555: LD_STRING , 
61557: STR
61558: PUSH
61559: LD_VAR 0 3
61563: PPUSH
61564: CALL_OW 254
61568: STR
61569: PUSH
61570: LD_STRING , 
61572: STR
61573: PUSH
61574: LD_VAR 0 3
61578: PPUSH
61579: LD_INT 1
61581: PPUSH
61582: CALL_OW 268
61586: STR
61587: PUSH
61588: LD_STRING , 
61590: STR
61591: PUSH
61592: LD_VAR 0 3
61596: PPUSH
61597: LD_INT 2
61599: PPUSH
61600: CALL_OW 268
61604: STR
61605: PUSH
61606: LD_STRING ],
61608: STR
61609: PPUSH
61610: CALL_OW 561
// end ;
61614: GO 61508
61616: POP
61617: POP
// AddToLog ( ]; ) ;
61618: LD_STRING ];
61620: PPUSH
61621: CALL_OW 561
// end ;
61625: LD_VAR 0 2
61629: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61630: LD_INT 0
61632: PPUSH
61633: PPUSH
61634: PPUSH
61635: PPUSH
61636: PPUSH
// if not area or not rate or not max then
61637: LD_VAR 0 1
61641: NOT
61642: PUSH
61643: LD_VAR 0 2
61647: NOT
61648: OR
61649: PUSH
61650: LD_VAR 0 4
61654: NOT
61655: OR
61656: IFFALSE 61660
// exit ;
61658: GO 61849
// while 1 do
61660: LD_INT 1
61662: IFFALSE 61849
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61664: LD_ADDR_VAR 0 9
61668: PUSH
61669: LD_VAR 0 1
61673: PPUSH
61674: LD_INT 1
61676: PPUSH
61677: CALL_OW 287
61681: PUSH
61682: LD_INT 10
61684: MUL
61685: ST_TO_ADDR
// r := rate / 10 ;
61686: LD_ADDR_VAR 0 7
61690: PUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_INT 10
61698: DIVREAL
61699: ST_TO_ADDR
// time := 1 1$00 ;
61700: LD_ADDR_VAR 0 8
61704: PUSH
61705: LD_INT 2100
61707: ST_TO_ADDR
// if amount < min then
61708: LD_VAR 0 9
61712: PUSH
61713: LD_VAR 0 3
61717: LESS
61718: IFFALSE 61736
// r := r * 2 else
61720: LD_ADDR_VAR 0 7
61724: PUSH
61725: LD_VAR 0 7
61729: PUSH
61730: LD_INT 2
61732: MUL
61733: ST_TO_ADDR
61734: GO 61762
// if amount > max then
61736: LD_VAR 0 9
61740: PUSH
61741: LD_VAR 0 4
61745: GREATER
61746: IFFALSE 61762
// r := r / 2 ;
61748: LD_ADDR_VAR 0 7
61752: PUSH
61753: LD_VAR 0 7
61757: PUSH
61758: LD_INT 2
61760: DIVREAL
61761: ST_TO_ADDR
// time := time / r ;
61762: LD_ADDR_VAR 0 8
61766: PUSH
61767: LD_VAR 0 8
61771: PUSH
61772: LD_VAR 0 7
61776: DIVREAL
61777: ST_TO_ADDR
// if time < 0 then
61778: LD_VAR 0 8
61782: PUSH
61783: LD_INT 0
61785: LESS
61786: IFFALSE 61803
// time := time * - 1 ;
61788: LD_ADDR_VAR 0 8
61792: PUSH
61793: LD_VAR 0 8
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: MUL
61802: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61803: LD_VAR 0 8
61807: PUSH
61808: LD_INT 35
61810: PPUSH
61811: LD_INT 875
61813: PPUSH
61814: CALL_OW 12
61818: PLUS
61819: PPUSH
61820: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61824: LD_INT 1
61826: PPUSH
61827: LD_INT 5
61829: PPUSH
61830: CALL_OW 12
61834: PPUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: LD_INT 1
61842: PPUSH
61843: CALL_OW 55
// end ;
61847: GO 61660
// end ;
61849: LD_VAR 0 5
61853: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61854: LD_INT 0
61856: PPUSH
61857: PPUSH
61858: PPUSH
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
// if not turrets or not factories then
61864: LD_VAR 0 1
61868: NOT
61869: PUSH
61870: LD_VAR 0 2
61874: NOT
61875: OR
61876: IFFALSE 61880
// exit ;
61878: GO 62187
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61880: LD_ADDR_VAR 0 10
61884: PUSH
61885: LD_INT 5
61887: PUSH
61888: LD_INT 6
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 5
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 24
61922: PUSH
61923: LD_INT 25
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 23
61932: PUSH
61933: LD_INT 27
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 42
61946: PUSH
61947: LD_INT 43
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 44
61956: PUSH
61957: LD_INT 46
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 45
61966: PUSH
61967: LD_INT 47
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: ST_TO_ADDR
// result := [ ] ;
61984: LD_ADDR_VAR 0 3
61988: PUSH
61989: EMPTY
61990: ST_TO_ADDR
// for i in turrets do
61991: LD_ADDR_VAR 0 4
61995: PUSH
61996: LD_VAR 0 1
62000: PUSH
62001: FOR_IN
62002: IFFALSE 62185
// begin nat := GetNation ( i ) ;
62004: LD_ADDR_VAR 0 7
62008: PUSH
62009: LD_VAR 0 4
62013: PPUSH
62014: CALL_OW 248
62018: ST_TO_ADDR
// weapon := 0 ;
62019: LD_ADDR_VAR 0 8
62023: PUSH
62024: LD_INT 0
62026: ST_TO_ADDR
// if not nat then
62027: LD_VAR 0 7
62031: NOT
62032: IFFALSE 62036
// continue ;
62034: GO 62001
// for j in list [ nat ] do
62036: LD_ADDR_VAR 0 5
62040: PUSH
62041: LD_VAR 0 10
62045: PUSH
62046: LD_VAR 0 7
62050: ARRAY
62051: PUSH
62052: FOR_IN
62053: IFFALSE 62094
// if GetBWeapon ( i ) = j [ 1 ] then
62055: LD_VAR 0 4
62059: PPUSH
62060: CALL_OW 269
62064: PUSH
62065: LD_VAR 0 5
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: EQUAL
62074: IFFALSE 62092
// begin weapon := j [ 2 ] ;
62076: LD_ADDR_VAR 0 8
62080: PUSH
62081: LD_VAR 0 5
62085: PUSH
62086: LD_INT 2
62088: ARRAY
62089: ST_TO_ADDR
// break ;
62090: GO 62094
// end ;
62092: GO 62052
62094: POP
62095: POP
// if not weapon then
62096: LD_VAR 0 8
62100: NOT
62101: IFFALSE 62105
// continue ;
62103: GO 62001
// for k in factories do
62105: LD_ADDR_VAR 0 6
62109: PUSH
62110: LD_VAR 0 2
62114: PUSH
62115: FOR_IN
62116: IFFALSE 62181
// begin weapons := AvailableWeaponList ( k ) ;
62118: LD_ADDR_VAR 0 9
62122: PUSH
62123: LD_VAR 0 6
62127: PPUSH
62128: CALL_OW 478
62132: ST_TO_ADDR
// if not weapons then
62133: LD_VAR 0 9
62137: NOT
62138: IFFALSE 62142
// continue ;
62140: GO 62115
// if weapon in weapons then
62142: LD_VAR 0 8
62146: PUSH
62147: LD_VAR 0 9
62151: IN
62152: IFFALSE 62179
// begin result := [ i , weapon ] ;
62154: LD_ADDR_VAR 0 3
62158: PUSH
62159: LD_VAR 0 4
62163: PUSH
62164: LD_VAR 0 8
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// exit ;
62173: POP
62174: POP
62175: POP
62176: POP
62177: GO 62187
// end ; end ;
62179: GO 62115
62181: POP
62182: POP
// end ;
62183: GO 62001
62185: POP
62186: POP
// end ;
62187: LD_VAR 0 3
62191: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62192: LD_INT 0
62194: PPUSH
// if not side or side > 8 then
62195: LD_VAR 0 3
62199: NOT
62200: PUSH
62201: LD_VAR 0 3
62205: PUSH
62206: LD_INT 8
62208: GREATER
62209: OR
62210: IFFALSE 62214
// exit ;
62212: GO 62273
// if not range then
62214: LD_VAR 0 4
62218: NOT
62219: IFFALSE 62230
// range := - 12 ;
62221: LD_ADDR_VAR 0 4
62225: PUSH
62226: LD_INT 12
62228: NEG
62229: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62230: LD_VAR 0 1
62234: PPUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: LD_VAR 0 3
62244: PPUSH
62245: LD_VAR 0 4
62249: PPUSH
62250: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62254: LD_VAR 0 1
62258: PPUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: LD_VAR 0 3
62268: PPUSH
62269: CALL_OW 331
// end ;
62273: LD_VAR 0 5
62277: RET
// export function Video ( mode ) ; begin
62278: LD_INT 0
62280: PPUSH
// ingame_video = mode ;
62281: LD_ADDR_OWVAR 52
62285: PUSH
62286: LD_VAR 0 1
62290: ST_TO_ADDR
// interface_hidden = mode ;
62291: LD_ADDR_OWVAR 54
62295: PUSH
62296: LD_VAR 0 1
62300: ST_TO_ADDR
// end ;
62301: LD_VAR 0 2
62305: RET
// export function Join ( array , element ) ; begin
62306: LD_INT 0
62308: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62309: LD_ADDR_VAR 0 3
62313: PUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: LD_VAR 0 1
62323: PUSH
62324: LD_INT 1
62326: PLUS
62327: PPUSH
62328: LD_VAR 0 2
62332: PPUSH
62333: CALL_OW 1
62337: ST_TO_ADDR
// end ;
62338: LD_VAR 0 3
62342: RET
// export function JoinUnion ( array , element ) ; begin
62343: LD_INT 0
62345: PPUSH
// result := array union element ;
62346: LD_ADDR_VAR 0 3
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: LD_VAR 0 2
62360: UNION
62361: ST_TO_ADDR
// end ;
62362: LD_VAR 0 3
62366: RET
// export function GetBehemoths ( side ) ; begin
62367: LD_INT 0
62369: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62370: LD_ADDR_VAR 0 2
62374: PUSH
62375: LD_INT 22
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 31
62389: PUSH
62390: LD_INT 25
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PPUSH
62401: CALL_OW 69
62405: ST_TO_ADDR
// end ;
62406: LD_VAR 0 2
62410: RET
// export function Shuffle ( array ) ; var i , index ; begin
62411: LD_INT 0
62413: PPUSH
62414: PPUSH
62415: PPUSH
// result := [ ] ;
62416: LD_ADDR_VAR 0 2
62420: PUSH
62421: EMPTY
62422: ST_TO_ADDR
// if not array then
62423: LD_VAR 0 1
62427: NOT
62428: IFFALSE 62432
// exit ;
62430: GO 62531
// Randomize ;
62432: CALL_OW 10
// for i = array downto 1 do
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: DOUBLE
62442: LD_VAR 0 1
62446: INC
62447: ST_TO_ADDR
62448: LD_INT 1
62450: PUSH
62451: FOR_DOWNTO
62452: IFFALSE 62529
// begin index := rand ( 1 , array ) ;
62454: LD_ADDR_VAR 0 4
62458: PUSH
62459: LD_INT 1
62461: PPUSH
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 12
62471: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62472: LD_ADDR_VAR 0 2
62476: PUSH
62477: LD_VAR 0 2
62481: PPUSH
62482: LD_VAR 0 2
62486: PUSH
62487: LD_INT 1
62489: PLUS
62490: PPUSH
62491: LD_VAR 0 1
62495: PUSH
62496: LD_VAR 0 4
62500: ARRAY
62501: PPUSH
62502: CALL_OW 2
62506: ST_TO_ADDR
// array := Delete ( array , index ) ;
62507: LD_ADDR_VAR 0 1
62511: PUSH
62512: LD_VAR 0 1
62516: PPUSH
62517: LD_VAR 0 4
62521: PPUSH
62522: CALL_OW 3
62526: ST_TO_ADDR
// end ;
62527: GO 62451
62529: POP
62530: POP
// end ;
62531: LD_VAR 0 2
62535: RET
// export function GetBaseMaterials ( base ) ; begin
62536: LD_INT 0
62538: PPUSH
// result := [ 0 , 0 , 0 ] ;
62539: LD_ADDR_VAR 0 2
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// if not base then
62558: LD_VAR 0 1
62562: NOT
62563: IFFALSE 62567
// exit ;
62565: GO 62616
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62567: LD_ADDR_VAR 0 2
62571: PUSH
62572: LD_VAR 0 1
62576: PPUSH
62577: LD_INT 1
62579: PPUSH
62580: CALL_OW 275
62584: PUSH
62585: LD_VAR 0 1
62589: PPUSH
62590: LD_INT 2
62592: PPUSH
62593: CALL_OW 275
62597: PUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: LD_INT 3
62605: PPUSH
62606: CALL_OW 275
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: ST_TO_ADDR
// end ;
62616: LD_VAR 0 2
62620: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
// result := array ;
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_VAR 0 1
62634: ST_TO_ADDR
// if size > 0 then
62635: LD_VAR 0 2
62639: PUSH
62640: LD_INT 0
62642: GREATER
62643: IFFALSE 62689
// for i := array downto size do
62645: LD_ADDR_VAR 0 4
62649: PUSH
62650: DOUBLE
62651: LD_VAR 0 1
62655: INC
62656: ST_TO_ADDR
62657: LD_VAR 0 2
62661: PUSH
62662: FOR_DOWNTO
62663: IFFALSE 62687
// result := Delete ( result , result ) ;
62665: LD_ADDR_VAR 0 3
62669: PUSH
62670: LD_VAR 0 3
62674: PPUSH
62675: LD_VAR 0 3
62679: PPUSH
62680: CALL_OW 3
62684: ST_TO_ADDR
62685: GO 62662
62687: POP
62688: POP
// end ;
62689: LD_VAR 0 3
62693: RET
// export function ComExit ( unit ) ; var tmp ; begin
62694: LD_INT 0
62696: PPUSH
62697: PPUSH
// if not IsInUnit ( unit ) then
62698: LD_VAR 0 1
62702: PPUSH
62703: CALL_OW 310
62707: NOT
62708: IFFALSE 62712
// exit ;
62710: GO 62772
// tmp := IsInUnit ( unit ) ;
62712: LD_ADDR_VAR 0 3
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 310
62726: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62727: LD_VAR 0 3
62731: PPUSH
62732: CALL_OW 247
62736: PUSH
62737: LD_INT 2
62739: EQUAL
62740: IFFALSE 62753
// ComExitVehicle ( unit ) else
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 121
62751: GO 62762
// ComExitBuilding ( unit ) ;
62753: LD_VAR 0 1
62757: PPUSH
62758: CALL_OW 122
// result := tmp ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 3
62771: ST_TO_ADDR
// end ;
62772: LD_VAR 0 2
62776: RET
// export function ComExitAll ( units ) ; var i ; begin
62777: LD_INT 0
62779: PPUSH
62780: PPUSH
// if not units then
62781: LD_VAR 0 1
62785: NOT
62786: IFFALSE 62790
// exit ;
62788: GO 62816
// for i in units do
62790: LD_ADDR_VAR 0 3
62794: PUSH
62795: LD_VAR 0 1
62799: PUSH
62800: FOR_IN
62801: IFFALSE 62814
// ComExit ( i ) ;
62803: LD_VAR 0 3
62807: PPUSH
62808: CALL 62694 0 1
62812: GO 62800
62814: POP
62815: POP
// end ;
62816: LD_VAR 0 2
62820: RET
// export function ResetHc ; begin
62821: LD_INT 0
62823: PPUSH
// InitHc ;
62824: CALL_OW 19
// hc_importance := 0 ;
62828: LD_ADDR_OWVAR 32
62832: PUSH
62833: LD_INT 0
62835: ST_TO_ADDR
// end ;
62836: LD_VAR 0 1
62840: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62841: LD_INT 0
62843: PPUSH
62844: PPUSH
62845: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62846: LD_ADDR_VAR 0 6
62850: PUSH
62851: LD_VAR 0 1
62855: PUSH
62856: LD_VAR 0 3
62860: PLUS
62861: PUSH
62862: LD_INT 2
62864: DIV
62865: ST_TO_ADDR
// if _x < 0 then
62866: LD_VAR 0 6
62870: PUSH
62871: LD_INT 0
62873: LESS
62874: IFFALSE 62891
// _x := _x * - 1 ;
62876: LD_ADDR_VAR 0 6
62880: PUSH
62881: LD_VAR 0 6
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: MUL
62890: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62891: LD_ADDR_VAR 0 7
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_VAR 0 4
62905: PLUS
62906: PUSH
62907: LD_INT 2
62909: DIV
62910: ST_TO_ADDR
// if _y < 0 then
62911: LD_VAR 0 7
62915: PUSH
62916: LD_INT 0
62918: LESS
62919: IFFALSE 62936
// _y := _y * - 1 ;
62921: LD_ADDR_VAR 0 7
62925: PUSH
62926: LD_VAR 0 7
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: MUL
62935: ST_TO_ADDR
// result := [ _x , _y ] ;
62936: LD_ADDR_VAR 0 5
62940: PUSH
62941: LD_VAR 0 6
62945: PUSH
62946: LD_VAR 0 7
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// end ;
62955: LD_VAR 0 5
62959: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62960: LD_INT 0
62962: PPUSH
62963: PPUSH
62964: PPUSH
62965: PPUSH
// task := GetTaskList ( unit ) ;
62966: LD_ADDR_VAR 0 7
62970: PUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: CALL_OW 437
62980: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62981: LD_VAR 0 7
62985: NOT
62986: PUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: LD_VAR 0 2
62996: PPUSH
62997: CALL_OW 308
63001: NOT
63002: AND
63003: IFFALSE 63007
// exit ;
63005: GO 63125
// if IsInArea ( unit , area ) then
63007: LD_VAR 0 1
63011: PPUSH
63012: LD_VAR 0 2
63016: PPUSH
63017: CALL_OW 308
63021: IFFALSE 63039
// begin ComMoveToArea ( unit , goAway ) ;
63023: LD_VAR 0 1
63027: PPUSH
63028: LD_VAR 0 3
63032: PPUSH
63033: CALL_OW 113
// exit ;
63037: GO 63125
// end ; if task [ 1 ] [ 1 ] <> M then
63039: LD_VAR 0 7
63043: PUSH
63044: LD_INT 1
63046: ARRAY
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_STRING M
63054: NONEQUAL
63055: IFFALSE 63059
// exit ;
63057: GO 63125
// x := task [ 1 ] [ 2 ] ;
63059: LD_ADDR_VAR 0 5
63063: PUSH
63064: LD_VAR 0 7
63068: PUSH
63069: LD_INT 1
63071: ARRAY
63072: PUSH
63073: LD_INT 2
63075: ARRAY
63076: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63077: LD_ADDR_VAR 0 6
63081: PUSH
63082: LD_VAR 0 7
63086: PUSH
63087: LD_INT 1
63089: ARRAY
63090: PUSH
63091: LD_INT 3
63093: ARRAY
63094: ST_TO_ADDR
// if InArea ( x , y , area ) then
63095: LD_VAR 0 5
63099: PPUSH
63100: LD_VAR 0 6
63104: PPUSH
63105: LD_VAR 0 2
63109: PPUSH
63110: CALL_OW 309
63114: IFFALSE 63125
// ComStop ( unit ) ;
63116: LD_VAR 0 1
63120: PPUSH
63121: CALL_OW 141
// end ;
63125: LD_VAR 0 4
63129: RET
// export function Abs ( value ) ; begin
63130: LD_INT 0
63132: PPUSH
// result := value ;
63133: LD_ADDR_VAR 0 2
63137: PUSH
63138: LD_VAR 0 1
63142: ST_TO_ADDR
// if value < 0 then
63143: LD_VAR 0 1
63147: PUSH
63148: LD_INT 0
63150: LESS
63151: IFFALSE 63168
// result := value * - 1 ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_VAR 0 1
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: MUL
63167: ST_TO_ADDR
// end ;
63168: LD_VAR 0 2
63172: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63173: LD_INT 0
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
63180: PPUSH
63181: PPUSH
63182: PPUSH
// if not unit or not building then
63183: LD_VAR 0 1
63187: NOT
63188: PUSH
63189: LD_VAR 0 2
63193: NOT
63194: OR
63195: IFFALSE 63199
// exit ;
63197: GO 63425
// x := GetX ( building ) ;
63199: LD_ADDR_VAR 0 4
63203: PUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: CALL_OW 250
63213: ST_TO_ADDR
// y := GetY ( building ) ;
63214: LD_ADDR_VAR 0 6
63218: PUSH
63219: LD_VAR 0 2
63223: PPUSH
63224: CALL_OW 251
63228: ST_TO_ADDR
// d := GetDir ( building ) ;
63229: LD_ADDR_VAR 0 8
63233: PUSH
63234: LD_VAR 0 2
63238: PPUSH
63239: CALL_OW 254
63243: ST_TO_ADDR
// r := 4 ;
63244: LD_ADDR_VAR 0 9
63248: PUSH
63249: LD_INT 4
63251: ST_TO_ADDR
// for i := 1 to 5 do
63252: LD_ADDR_VAR 0 10
63256: PUSH
63257: DOUBLE
63258: LD_INT 1
63260: DEC
63261: ST_TO_ADDR
63262: LD_INT 5
63264: PUSH
63265: FOR_TO
63266: IFFALSE 63423
// begin _x := ShiftX ( x , d , r + i ) ;
63268: LD_ADDR_VAR 0 5
63272: PUSH
63273: LD_VAR 0 4
63277: PPUSH
63278: LD_VAR 0 8
63282: PPUSH
63283: LD_VAR 0 9
63287: PUSH
63288: LD_VAR 0 10
63292: PLUS
63293: PPUSH
63294: CALL_OW 272
63298: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63299: LD_ADDR_VAR 0 7
63303: PUSH
63304: LD_VAR 0 6
63308: PPUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_VAR 0 9
63318: PUSH
63319: LD_VAR 0 10
63323: PLUS
63324: PPUSH
63325: CALL_OW 273
63329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63330: LD_VAR 0 5
63334: PPUSH
63335: LD_VAR 0 7
63339: PPUSH
63340: CALL_OW 488
63344: PUSH
63345: LD_VAR 0 5
63349: PPUSH
63350: LD_VAR 0 7
63354: PPUSH
63355: CALL_OW 428
63359: PPUSH
63360: CALL_OW 247
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: IN
63375: NOT
63376: AND
63377: IFFALSE 63421
// begin ComMoveXY ( unit , _x , _y ) ;
63379: LD_VAR 0 1
63383: PPUSH
63384: LD_VAR 0 5
63388: PPUSH
63389: LD_VAR 0 7
63393: PPUSH
63394: CALL_OW 111
// result := [ _x , _y ] ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_VAR 0 5
63407: PUSH
63408: LD_VAR 0 7
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: ST_TO_ADDR
// exit ;
63417: POP
63418: POP
63419: GO 63425
// end ; end ;
63421: GO 63265
63423: POP
63424: POP
// end ;
63425: LD_VAR 0 3
63429: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63430: LD_INT 0
63432: PPUSH
63433: PPUSH
63434: PPUSH
// result := 0 ;
63435: LD_ADDR_VAR 0 3
63439: PUSH
63440: LD_INT 0
63442: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 0
63450: LESS
63451: PUSH
63452: LD_VAR 0 1
63456: PUSH
63457: LD_INT 8
63459: GREATER
63460: OR
63461: PUSH
63462: LD_VAR 0 2
63466: PUSH
63467: LD_INT 0
63469: LESS
63470: OR
63471: PUSH
63472: LD_VAR 0 2
63476: PUSH
63477: LD_INT 8
63479: GREATER
63480: OR
63481: IFFALSE 63485
// exit ;
63483: GO 63560
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63485: LD_ADDR_VAR 0 4
63489: PUSH
63490: LD_INT 22
63492: PUSH
63493: LD_VAR 0 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PPUSH
63502: CALL_OW 69
63506: PUSH
63507: FOR_IN
63508: IFFALSE 63558
// begin un := UnitShoot ( i ) ;
63510: LD_ADDR_VAR 0 5
63514: PUSH
63515: LD_VAR 0 4
63519: PPUSH
63520: CALL_OW 504
63524: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63525: LD_VAR 0 5
63529: PPUSH
63530: CALL_OW 255
63534: PUSH
63535: LD_VAR 0 1
63539: EQUAL
63540: IFFALSE 63556
// begin result := un ;
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_VAR 0 5
63551: ST_TO_ADDR
// exit ;
63552: POP
63553: POP
63554: GO 63560
// end ; end ;
63556: GO 63507
63558: POP
63559: POP
// end ;
63560: LD_VAR 0 3
63564: RET
// export function GetCargoBay ( units ) ; begin
63565: LD_INT 0
63567: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63568: LD_ADDR_VAR 0 2
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: LD_INT 2
63580: PUSH
63581: LD_INT 34
63583: PUSH
63584: LD_INT 12
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 34
63593: PUSH
63594: LD_INT 51
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 34
63603: PUSH
63604: LD_INT 32
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 34
63613: PUSH
63614: LD_EXP 97
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: PPUSH
63630: CALL_OW 72
63634: ST_TO_ADDR
// end ;
63635: LD_VAR 0 2
63639: RET
// export function Negate ( value ) ; begin
63640: LD_INT 0
63642: PPUSH
// result := not value ;
63643: LD_ADDR_VAR 0 2
63647: PUSH
63648: LD_VAR 0 1
63652: NOT
63653: ST_TO_ADDR
// end ;
63654: LD_VAR 0 2
63658: RET
// export function Inc ( value ) ; begin
63659: LD_INT 0
63661: PPUSH
// result := value + 1 ;
63662: LD_ADDR_VAR 0 2
63666: PUSH
63667: LD_VAR 0 1
63671: PUSH
63672: LD_INT 1
63674: PLUS
63675: ST_TO_ADDR
// end ;
63676: LD_VAR 0 2
63680: RET
// export function Dec ( value ) ; begin
63681: LD_INT 0
63683: PPUSH
// result := value - 1 ;
63684: LD_ADDR_VAR 0 2
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 1
63696: MINUS
63697: ST_TO_ADDR
// end ;
63698: LD_VAR 0 2
63702: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63703: LD_INT 0
63705: PPUSH
63706: PPUSH
63707: PPUSH
63708: PPUSH
63709: PPUSH
63710: PPUSH
63711: PPUSH
63712: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63713: LD_VAR 0 1
63717: PPUSH
63718: LD_VAR 0 2
63722: PPUSH
63723: CALL_OW 488
63727: NOT
63728: PUSH
63729: LD_VAR 0 3
63733: PPUSH
63734: LD_VAR 0 4
63738: PPUSH
63739: CALL_OW 488
63743: NOT
63744: OR
63745: IFFALSE 63758
// begin result := - 1 ;
63747: LD_ADDR_VAR 0 5
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: ST_TO_ADDR
// exit ;
63756: GO 63993
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63758: LD_ADDR_VAR 0 12
63762: PUSH
63763: LD_VAR 0 1
63767: PPUSH
63768: LD_VAR 0 2
63772: PPUSH
63773: LD_VAR 0 3
63777: PPUSH
63778: LD_VAR 0 4
63782: PPUSH
63783: CALL 62841 0 4
63787: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63788: LD_ADDR_VAR 0 11
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: LD_VAR 0 2
63802: PPUSH
63803: LD_VAR 0 12
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PPUSH
63812: LD_VAR 0 12
63816: PUSH
63817: LD_INT 2
63819: ARRAY
63820: PPUSH
63821: CALL_OW 298
63825: ST_TO_ADDR
// distance := 9999 ;
63826: LD_ADDR_VAR 0 10
63830: PUSH
63831: LD_INT 9999
63833: ST_TO_ADDR
// for i := 0 to 5 do
63834: LD_ADDR_VAR 0 6
63838: PUSH
63839: DOUBLE
63840: LD_INT 0
63842: DEC
63843: ST_TO_ADDR
63844: LD_INT 5
63846: PUSH
63847: FOR_TO
63848: IFFALSE 63991
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63850: LD_ADDR_VAR 0 7
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: LD_VAR 0 6
63864: PPUSH
63865: LD_VAR 0 11
63869: PPUSH
63870: CALL_OW 272
63874: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63875: LD_ADDR_VAR 0 8
63879: PUSH
63880: LD_VAR 0 2
63884: PPUSH
63885: LD_VAR 0 6
63889: PPUSH
63890: LD_VAR 0 11
63894: PPUSH
63895: CALL_OW 273
63899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63900: LD_VAR 0 7
63904: PPUSH
63905: LD_VAR 0 8
63909: PPUSH
63910: CALL_OW 488
63914: NOT
63915: IFFALSE 63919
// continue ;
63917: GO 63847
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63919: LD_ADDR_VAR 0 9
63923: PUSH
63924: LD_VAR 0 12
63928: PUSH
63929: LD_INT 1
63931: ARRAY
63932: PPUSH
63933: LD_VAR 0 12
63937: PUSH
63938: LD_INT 2
63940: ARRAY
63941: PPUSH
63942: LD_VAR 0 7
63946: PPUSH
63947: LD_VAR 0 8
63951: PPUSH
63952: CALL_OW 298
63956: ST_TO_ADDR
// if tmp < distance then
63957: LD_VAR 0 9
63961: PUSH
63962: LD_VAR 0 10
63966: LESS
63967: IFFALSE 63989
// begin result := i ;
63969: LD_ADDR_VAR 0 5
63973: PUSH
63974: LD_VAR 0 6
63978: ST_TO_ADDR
// distance := tmp ;
63979: LD_ADDR_VAR 0 10
63983: PUSH
63984: LD_VAR 0 9
63988: ST_TO_ADDR
// end ; end ;
63989: GO 63847
63991: POP
63992: POP
// end ;
63993: LD_VAR 0 5
63997: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
// if not driver or not IsInUnit ( driver ) then
64002: LD_VAR 0 1
64006: NOT
64007: PUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 310
64017: NOT
64018: OR
64019: IFFALSE 64023
// exit ;
64021: GO 64113
// vehicle := IsInUnit ( driver ) ;
64023: LD_ADDR_VAR 0 3
64027: PUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 310
64037: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64038: LD_VAR 0 1
64042: PPUSH
64043: LD_STRING \
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: LD_STRING E
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_VAR 0 3
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PPUSH
64109: CALL_OW 446
// end ;
64113: LD_VAR 0 2
64117: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64118: LD_INT 0
64120: PPUSH
64121: PPUSH
// if not driver or not IsInUnit ( driver ) then
64122: LD_VAR 0 1
64126: NOT
64127: PUSH
64128: LD_VAR 0 1
64132: PPUSH
64133: CALL_OW 310
64137: NOT
64138: OR
64139: IFFALSE 64143
// exit ;
64141: GO 64233
// vehicle := IsInUnit ( driver ) ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 310
64157: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64158: LD_VAR 0 1
64162: PPUSH
64163: LD_STRING \
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: PUSH
64193: LD_STRING E
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_VAR 0 3
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PPUSH
64229: CALL_OW 447
// end ;
64233: LD_VAR 0 2
64237: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64238: LD_INT 0
64240: PPUSH
64241: PPUSH
64242: PPUSH
// tmp := [ ] ;
64243: LD_ADDR_VAR 0 5
64247: PUSH
64248: EMPTY
64249: ST_TO_ADDR
// for i in units do
64250: LD_ADDR_VAR 0 4
64254: PUSH
64255: LD_VAR 0 1
64259: PUSH
64260: FOR_IN
64261: IFFALSE 64299
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: LD_VAR 0 5
64272: PPUSH
64273: LD_VAR 0 5
64277: PUSH
64278: LD_INT 1
64280: PLUS
64281: PPUSH
64282: LD_VAR 0 4
64286: PPUSH
64287: CALL_OW 256
64291: PPUSH
64292: CALL_OW 2
64296: ST_TO_ADDR
64297: GO 64260
64299: POP
64300: POP
// if not tmp then
64301: LD_VAR 0 5
64305: NOT
64306: IFFALSE 64310
// exit ;
64308: GO 64358
// if asc then
64310: LD_VAR 0 2
64314: IFFALSE 64338
// result := SortListByListAsc ( units , tmp ) else
64316: LD_ADDR_VAR 0 3
64320: PUSH
64321: LD_VAR 0 1
64325: PPUSH
64326: LD_VAR 0 5
64330: PPUSH
64331: CALL_OW 76
64335: ST_TO_ADDR
64336: GO 64358
// result := SortListByListDesc ( units , tmp ) ;
64338: LD_ADDR_VAR 0 3
64342: PUSH
64343: LD_VAR 0 1
64347: PPUSH
64348: LD_VAR 0 5
64352: PPUSH
64353: CALL_OW 77
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 3
64362: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64363: LD_INT 0
64365: PPUSH
64366: PPUSH
// task := GetTaskList ( mech ) ;
64367: LD_ADDR_VAR 0 4
64371: PUSH
64372: LD_VAR 0 1
64376: PPUSH
64377: CALL_OW 437
64381: ST_TO_ADDR
// if not task then
64382: LD_VAR 0 4
64386: NOT
64387: IFFALSE 64391
// exit ;
64389: GO 64433
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64391: LD_ADDR_VAR 0 3
64395: PUSH
64396: LD_VAR 0 4
64400: PUSH
64401: LD_INT 1
64403: ARRAY
64404: PUSH
64405: LD_INT 1
64407: ARRAY
64408: PUSH
64409: LD_STRING r
64411: EQUAL
64412: PUSH
64413: LD_VAR 0 4
64417: PUSH
64418: LD_INT 1
64420: ARRAY
64421: PUSH
64422: LD_INT 4
64424: ARRAY
64425: PUSH
64426: LD_VAR 0 2
64430: EQUAL
64431: AND
64432: ST_TO_ADDR
// end ;
64433: LD_VAR 0 3
64437: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64438: LD_INT 0
64440: PPUSH
// SetDir ( unit , d ) ;
64441: LD_VAR 0 1
64445: PPUSH
64446: LD_VAR 0 4
64450: PPUSH
64451: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_VAR 0 2
64464: PPUSH
64465: LD_VAR 0 3
64469: PPUSH
64470: LD_VAR 0 5
64474: PPUSH
64475: CALL_OW 48
// end ;
64479: LD_VAR 0 6
64483: RET
// export function ToNaturalNumber ( number ) ; begin
64484: LD_INT 0
64486: PPUSH
// result := number div 1 ;
64487: LD_ADDR_VAR 0 2
64491: PUSH
64492: LD_VAR 0 1
64496: PUSH
64497: LD_INT 1
64499: DIV
64500: ST_TO_ADDR
// if number < 0 then
64501: LD_VAR 0 1
64505: PUSH
64506: LD_INT 0
64508: LESS
64509: IFFALSE 64519
// result := 0 ;
64511: LD_ADDR_VAR 0 2
64515: PUSH
64516: LD_INT 0
64518: ST_TO_ADDR
// end ;
64519: LD_VAR 0 2
64523: RET
// export function SortByClass ( units , class ) ; var un ; begin
64524: LD_INT 0
64526: PPUSH
64527: PPUSH
// if not units or not class then
64528: LD_VAR 0 1
64532: NOT
64533: PUSH
64534: LD_VAR 0 2
64538: NOT
64539: OR
64540: IFFALSE 64544
// exit ;
64542: GO 64639
// result := [ ] ;
64544: LD_ADDR_VAR 0 3
64548: PUSH
64549: EMPTY
64550: ST_TO_ADDR
// for un in units do
64551: LD_ADDR_VAR 0 4
64555: PUSH
64556: LD_VAR 0 1
64560: PUSH
64561: FOR_IN
64562: IFFALSE 64637
// if GetClass ( un ) = class then
64564: LD_VAR 0 4
64568: PPUSH
64569: CALL_OW 257
64573: PUSH
64574: LD_VAR 0 2
64578: EQUAL
64579: IFFALSE 64606
// result := Insert ( result , 1 , un ) else
64581: LD_ADDR_VAR 0 3
64585: PUSH
64586: LD_VAR 0 3
64590: PPUSH
64591: LD_INT 1
64593: PPUSH
64594: LD_VAR 0 4
64598: PPUSH
64599: CALL_OW 2
64603: ST_TO_ADDR
64604: GO 64635
// result := Replace ( result , result + 1 , un ) ;
64606: LD_ADDR_VAR 0 3
64610: PUSH
64611: LD_VAR 0 3
64615: PPUSH
64616: LD_VAR 0 3
64620: PUSH
64621: LD_INT 1
64623: PLUS
64624: PPUSH
64625: LD_VAR 0 4
64629: PPUSH
64630: CALL_OW 1
64634: ST_TO_ADDR
64635: GO 64561
64637: POP
64638: POP
// end ;
64639: LD_VAR 0 3
64643: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64644: LD_INT 0
64646: PPUSH
64647: PPUSH
64648: PPUSH
64649: PPUSH
64650: PPUSH
64651: PPUSH
64652: PPUSH
// result := [ ] ;
64653: LD_ADDR_VAR 0 4
64657: PUSH
64658: EMPTY
64659: ST_TO_ADDR
// if x - r < 0 then
64660: LD_VAR 0 1
64664: PUSH
64665: LD_VAR 0 3
64669: MINUS
64670: PUSH
64671: LD_INT 0
64673: LESS
64674: IFFALSE 64686
// min_x := 0 else
64676: LD_ADDR_VAR 0 8
64680: PUSH
64681: LD_INT 0
64683: ST_TO_ADDR
64684: GO 64702
// min_x := x - r ;
64686: LD_ADDR_VAR 0 8
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: LD_VAR 0 3
64700: MINUS
64701: ST_TO_ADDR
// if y - r < 0 then
64702: LD_VAR 0 2
64706: PUSH
64707: LD_VAR 0 3
64711: MINUS
64712: PUSH
64713: LD_INT 0
64715: LESS
64716: IFFALSE 64728
// min_y := 0 else
64718: LD_ADDR_VAR 0 7
64722: PUSH
64723: LD_INT 0
64725: ST_TO_ADDR
64726: GO 64744
// min_y := y - r ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 2
64737: PUSH
64738: LD_VAR 0 3
64742: MINUS
64743: ST_TO_ADDR
// max_x := x + r ;
64744: LD_ADDR_VAR 0 9
64748: PUSH
64749: LD_VAR 0 1
64753: PUSH
64754: LD_VAR 0 3
64758: PLUS
64759: ST_TO_ADDR
// max_y := y + r ;
64760: LD_ADDR_VAR 0 10
64764: PUSH
64765: LD_VAR 0 2
64769: PUSH
64770: LD_VAR 0 3
64774: PLUS
64775: ST_TO_ADDR
// for _x = min_x to max_x do
64776: LD_ADDR_VAR 0 5
64780: PUSH
64781: DOUBLE
64782: LD_VAR 0 8
64786: DEC
64787: ST_TO_ADDR
64788: LD_VAR 0 9
64792: PUSH
64793: FOR_TO
64794: IFFALSE 64895
// for _y = min_y to max_y do
64796: LD_ADDR_VAR 0 6
64800: PUSH
64801: DOUBLE
64802: LD_VAR 0 7
64806: DEC
64807: ST_TO_ADDR
64808: LD_VAR 0 10
64812: PUSH
64813: FOR_TO
64814: IFFALSE 64891
// begin if not ValidHex ( _x , _y ) then
64816: LD_VAR 0 5
64820: PPUSH
64821: LD_VAR 0 6
64825: PPUSH
64826: CALL_OW 488
64830: NOT
64831: IFFALSE 64835
// continue ;
64833: GO 64813
// if GetResourceTypeXY ( _x , _y ) then
64835: LD_VAR 0 5
64839: PPUSH
64840: LD_VAR 0 6
64844: PPUSH
64845: CALL_OW 283
64849: IFFALSE 64889
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64851: LD_ADDR_VAR 0 4
64855: PUSH
64856: LD_VAR 0 4
64860: PPUSH
64861: LD_VAR 0 4
64865: PUSH
64866: LD_INT 1
64868: PLUS
64869: PPUSH
64870: LD_VAR 0 5
64874: PUSH
64875: LD_VAR 0 6
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PPUSH
64884: CALL_OW 1
64888: ST_TO_ADDR
// end ;
64889: GO 64813
64891: POP
64892: POP
64893: GO 64793
64895: POP
64896: POP
// end ;
64897: LD_VAR 0 4
64901: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64902: LD_INT 0
64904: PPUSH
64905: PPUSH
64906: PPUSH
64907: PPUSH
64908: PPUSH
64909: PPUSH
64910: PPUSH
64911: PPUSH
// if not units then
64912: LD_VAR 0 1
64916: NOT
64917: IFFALSE 64921
// exit ;
64919: GO 65346
// result := UnitFilter ( units , [ f_ok ] ) ;
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: LD_VAR 0 1
64930: PPUSH
64931: LD_INT 50
64933: PUSH
64934: EMPTY
64935: LIST
64936: PPUSH
64937: CALL_OW 72
64941: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64942: LD_ADDR_VAR 0 8
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: LD_INT 1
64954: ARRAY
64955: PPUSH
64956: CALL_OW 255
64960: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64961: LD_ADDR_VAR 0 10
64965: PUSH
64966: LD_INT 29
64968: PUSH
64969: LD_EXP 100
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// if not result then
64978: LD_VAR 0 3
64982: NOT
64983: IFFALSE 64987
// exit ;
64985: GO 65346
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64987: LD_ADDR_VAR 0 5
64991: PUSH
64992: LD_INT 81
64994: PUSH
64995: LD_VAR 0 8
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PPUSH
65004: CALL_OW 69
65008: ST_TO_ADDR
// for i in result do
65009: LD_ADDR_VAR 0 4
65013: PUSH
65014: LD_VAR 0 3
65018: PUSH
65019: FOR_IN
65020: IFFALSE 65344
// begin tag := GetTag ( i ) + 1 ;
65022: LD_ADDR_VAR 0 9
65026: PUSH
65027: LD_VAR 0 4
65031: PPUSH
65032: CALL_OW 110
65036: PUSH
65037: LD_INT 1
65039: PLUS
65040: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65041: LD_ADDR_VAR 0 7
65045: PUSH
65046: LD_VAR 0 4
65050: PPUSH
65051: CALL_OW 250
65055: PPUSH
65056: LD_VAR 0 4
65060: PPUSH
65061: CALL_OW 251
65065: PPUSH
65066: LD_INT 6
65068: PPUSH
65069: CALL 64644 0 3
65073: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65074: LD_VAR 0 7
65078: PUSH
65079: LD_VAR 0 4
65083: PPUSH
65084: CALL_OW 264
65088: PUSH
65089: LD_VAR 0 10
65093: IN
65094: NOT
65095: AND
65096: IFFALSE 65135
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65098: LD_VAR 0 4
65102: PPUSH
65103: LD_VAR 0 7
65107: PUSH
65108: LD_INT 1
65110: ARRAY
65111: PUSH
65112: LD_INT 1
65114: ARRAY
65115: PPUSH
65116: LD_VAR 0 7
65120: PUSH
65121: LD_INT 1
65123: ARRAY
65124: PUSH
65125: LD_INT 2
65127: ARRAY
65128: PPUSH
65129: CALL_OW 116
65133: GO 65342
// if path > tag then
65135: LD_VAR 0 2
65139: PUSH
65140: LD_VAR 0 9
65144: GREATER
65145: IFFALSE 65312
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65147: LD_ADDR_VAR 0 6
65151: PUSH
65152: LD_VAR 0 5
65156: PPUSH
65157: LD_INT 91
65159: PUSH
65160: LD_VAR 0 4
65164: PUSH
65165: LD_INT 12
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PPUSH
65173: CALL_OW 72
65177: ST_TO_ADDR
// if nearEnemy then
65178: LD_VAR 0 6
65182: IFFALSE 65210
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65184: LD_VAR 0 4
65188: PPUSH
65189: LD_VAR 0 6
65193: PPUSH
65194: LD_VAR 0 4
65198: PPUSH
65199: CALL_OW 74
65203: PPUSH
65204: CALL_OW 115
65208: GO 65310
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65210: LD_VAR 0 4
65214: PPUSH
65215: LD_VAR 0 2
65219: PUSH
65220: LD_VAR 0 9
65224: ARRAY
65225: PUSH
65226: LD_INT 1
65228: ARRAY
65229: PPUSH
65230: LD_VAR 0 2
65234: PUSH
65235: LD_VAR 0 9
65239: ARRAY
65240: PUSH
65241: LD_INT 2
65243: ARRAY
65244: PPUSH
65245: CALL_OW 297
65249: PUSH
65250: LD_INT 6
65252: GREATER
65253: IFFALSE 65296
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65255: LD_VAR 0 4
65259: PPUSH
65260: LD_VAR 0 2
65264: PUSH
65265: LD_VAR 0 9
65269: ARRAY
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PPUSH
65275: LD_VAR 0 2
65279: PUSH
65280: LD_VAR 0 9
65284: ARRAY
65285: PUSH
65286: LD_INT 2
65288: ARRAY
65289: PPUSH
65290: CALL_OW 114
65294: GO 65310
// SetTag ( i , tag ) ;
65296: LD_VAR 0 4
65300: PPUSH
65301: LD_VAR 0 9
65305: PPUSH
65306: CALL_OW 109
// end else
65310: GO 65342
// if enemy then
65312: LD_VAR 0 5
65316: IFFALSE 65342
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65318: LD_VAR 0 4
65322: PPUSH
65323: LD_VAR 0 5
65327: PPUSH
65328: LD_VAR 0 4
65332: PPUSH
65333: CALL_OW 74
65337: PPUSH
65338: CALL_OW 115
// end ;
65342: GO 65019
65344: POP
65345: POP
// end ;
65346: LD_VAR 0 3
65350: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65351: LD_INT 0
65353: PPUSH
65354: PPUSH
65355: PPUSH
// if not unit or IsInUnit ( unit ) then
65356: LD_VAR 0 1
65360: NOT
65361: PUSH
65362: LD_VAR 0 1
65366: PPUSH
65367: CALL_OW 310
65371: OR
65372: IFFALSE 65376
// exit ;
65374: GO 65467
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65376: LD_ADDR_VAR 0 4
65380: PUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL_OW 250
65390: PPUSH
65391: LD_VAR 0 2
65395: PPUSH
65396: LD_INT 1
65398: PPUSH
65399: CALL_OW 272
65403: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65404: LD_ADDR_VAR 0 5
65408: PUSH
65409: LD_VAR 0 1
65413: PPUSH
65414: CALL_OW 251
65418: PPUSH
65419: LD_VAR 0 2
65423: PPUSH
65424: LD_INT 1
65426: PPUSH
65427: CALL_OW 273
65431: ST_TO_ADDR
// if ValidHex ( x , y ) then
65432: LD_VAR 0 4
65436: PPUSH
65437: LD_VAR 0 5
65441: PPUSH
65442: CALL_OW 488
65446: IFFALSE 65467
// ComTurnXY ( unit , x , y ) ;
65448: LD_VAR 0 1
65452: PPUSH
65453: LD_VAR 0 4
65457: PPUSH
65458: LD_VAR 0 5
65462: PPUSH
65463: CALL_OW 118
// end ;
65467: LD_VAR 0 3
65471: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65472: LD_INT 0
65474: PPUSH
65475: PPUSH
// result := false ;
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_INT 0
65483: ST_TO_ADDR
// if not units then
65484: LD_VAR 0 2
65488: NOT
65489: IFFALSE 65493
// exit ;
65491: GO 65538
// for i in units do
65493: LD_ADDR_VAR 0 4
65497: PUSH
65498: LD_VAR 0 2
65502: PUSH
65503: FOR_IN
65504: IFFALSE 65536
// if See ( side , i ) then
65506: LD_VAR 0 1
65510: PPUSH
65511: LD_VAR 0 4
65515: PPUSH
65516: CALL_OW 292
65520: IFFALSE 65534
// begin result := true ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_INT 1
65529: ST_TO_ADDR
// exit ;
65530: POP
65531: POP
65532: GO 65538
// end ;
65534: GO 65503
65536: POP
65537: POP
// end ;
65538: LD_VAR 0 3
65542: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65543: LD_INT 0
65545: PPUSH
65546: PPUSH
65547: PPUSH
65548: PPUSH
// if not unit or not points then
65549: LD_VAR 0 1
65553: NOT
65554: PUSH
65555: LD_VAR 0 2
65559: NOT
65560: OR
65561: IFFALSE 65565
// exit ;
65563: GO 65655
// dist := 99999 ;
65565: LD_ADDR_VAR 0 5
65569: PUSH
65570: LD_INT 99999
65572: ST_TO_ADDR
// for i in points do
65573: LD_ADDR_VAR 0 4
65577: PUSH
65578: LD_VAR 0 2
65582: PUSH
65583: FOR_IN
65584: IFFALSE 65653
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65586: LD_ADDR_VAR 0 6
65590: PUSH
65591: LD_VAR 0 1
65595: PPUSH
65596: LD_VAR 0 4
65600: PUSH
65601: LD_INT 1
65603: ARRAY
65604: PPUSH
65605: LD_VAR 0 4
65609: PUSH
65610: LD_INT 2
65612: ARRAY
65613: PPUSH
65614: CALL_OW 297
65618: ST_TO_ADDR
// if tmpDist < dist then
65619: LD_VAR 0 6
65623: PUSH
65624: LD_VAR 0 5
65628: LESS
65629: IFFALSE 65651
// begin result := i ;
65631: LD_ADDR_VAR 0 3
65635: PUSH
65636: LD_VAR 0 4
65640: ST_TO_ADDR
// dist := tmpDist ;
65641: LD_ADDR_VAR 0 5
65645: PUSH
65646: LD_VAR 0 6
65650: ST_TO_ADDR
// end ; end ;
65651: GO 65583
65653: POP
65654: POP
// end ; end_of_file
65655: LD_VAR 0 3
65659: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 200
65667: DOUBLE
65668: GREATEREQUAL
65669: IFFALSE 65677
65671: LD_INT 299
65673: DOUBLE
65674: LESSEQUAL
65675: IFTRUE 65679
65677: GO 65711
65679: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65680: LD_VAR 0 1
65684: PPUSH
65685: LD_VAR 0 2
65689: PPUSH
65690: LD_VAR 0 3
65694: PPUSH
65695: LD_VAR 0 4
65699: PPUSH
65700: LD_VAR 0 5
65704: PPUSH
65705: CALL 21195 0 5
65709: GO 65788
65711: LD_INT 300
65713: DOUBLE
65714: GREATEREQUAL
65715: IFFALSE 65723
65717: LD_INT 399
65719: DOUBLE
65720: LESSEQUAL
65721: IFTRUE 65725
65723: GO 65787
65725: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65726: LD_VAR 0 1
65730: PPUSH
65731: LD_VAR 0 2
65735: PPUSH
65736: LD_VAR 0 3
65740: PPUSH
65741: LD_VAR 0 4
65745: PPUSH
65746: LD_VAR 0 5
65750: PPUSH
65751: LD_VAR 0 6
65755: PPUSH
65756: LD_VAR 0 7
65760: PPUSH
65761: LD_VAR 0 8
65765: PPUSH
65766: LD_VAR 0 9
65770: PPUSH
65771: LD_VAR 0 10
65775: PPUSH
65776: LD_VAR 0 11
65780: PPUSH
65781: CALL 18837 0 11
65785: GO 65788
65787: POP
// end ;
65788: PPOPN 11
65790: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65791: LD_VAR 0 1
65795: PPUSH
65796: LD_VAR 0 2
65800: PPUSH
65801: LD_VAR 0 3
65805: PPUSH
65806: LD_VAR 0 4
65810: PPUSH
65811: LD_VAR 0 5
65815: PPUSH
65816: CALL 20931 0 5
// end ; end_of_file
65820: PPOPN 5
65822: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65823: LD_VAR 0 1
65827: PPUSH
65828: LD_VAR 0 2
65832: PPUSH
65833: LD_VAR 0 3
65837: PPUSH
65838: LD_VAR 0 4
65842: PPUSH
65843: LD_VAR 0 5
65847: PPUSH
65848: LD_VAR 0 6
65852: PPUSH
65853: CALL 6530 0 6
// end ;
65857: PPOPN 6
65859: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65860: CALL 6505 0 0
// end ;
65864: PPOPN 1
65866: END
