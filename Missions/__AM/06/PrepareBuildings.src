Export function PrepareDeltaBase;
var i, j, building, buildings, lab, tmp;
begin
buildings := LoadVariable('buildingsInDelta', []);

SetResourceVisibility (68, 40, 1);

uc_side := 1;
uc_nation := 1;

for i := 1 to buildings do
    begin
    InitBc;

    bc_type := buildings[i][1];
    bc_level := buildings[i][2];

    if bc_type in [b_lab, b_lab_half, b_lab_full] then
       begin
       bc_kind1 := b_lab_basic;
       bc_kind2 := b_lab_basic;

       if buildings[i][6] then
          begin
          bc_kind1 := buildings[i][6];
          bc_kind2 := b_lab_basic;

          if buildings[i][7] then
             bc_kind2 := buildings[i][7];
          end
       else
          begin
          bc_type := b_lab;

          bc_kind1 := b_lab_basic;
          bc_kind2 := b_lab_basic;
          end;
       end;

    building := CreateAndPlaceBuildingXYD(buildings[i][3], buildings[i][4], buildings[i][5]);

    if GetBType(building) = b_bunker and buildings[i][8] then
       PlaceWeaponTurret(building, buildings[i][8]);
    end;

lab := FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);
tmp := FilterAllUnits([[f_side, 1], [f_btype, b_depot]]);

if lab and tmp then
   baseCorrect := 1;

if not baseCorrect then
   begin
   for i in FilterAllUnits([[f_side, 1], [f_type, unit_building]]) do
       RemoveUnit(i);

   uc_nation := 1;
   uc_side := 1;

   bc_level := 5;
   bc_type := b_depot;
   CreateAndPlaceBuildingXYD(50, 22, 0);

   bc_type = b_bunker;
   building = CreateAndPlaceBuildingXYD(68, 24, 4);
   PlaceWeaponTurret(building, [4, 11][rand(1,2)]);

   building := CreateAndPlaceBuildingXYD(71, 34, 4);
   PlaceWeaponTurret(building, [4, 11][rand(1,2)]);

   bc_type := b_breastwork;
   CreateAndPlaceBuildingXYD(51, 7, 3);

   bc_type := b_oil_mine;
   CreateAndPlaceBuildingXYD(68, 40, 1);

   bc_type := b_factory;
   CreateAndPlaceBuildingXYD(38, 20, 2);

   bc_type := b_ext_noncombat;
   CreateAndPlaceBuildingXYD(38, 24, 2);

   bc_type := b_ext_radar;
   CreateAndPlaceBuildingXYD(35, 20, 1);

   bc_type := b_armoury;
   CreateAndPlaceBuildingXYD(33, 28, 1);

   bc_type := b_solar_power;   
   CreateAndPlaceBuildingXYD(46, 12, 1);
   CreateAndPlaceBuildingXYD(48, 11, 2);
   CreateAndPlaceBuildingXYD(35, 12, 3);

   bc_type := b_lab_half;
   bc_kind1 := b_lab_opto;
   bc_kind2 := b_lab_basic;
   CreateAndPlaceBuildingXYD(42, 15, 2);
   end;
End;