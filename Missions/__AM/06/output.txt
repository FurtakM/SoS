// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2403 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3321 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 28553 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 28553 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnitForce ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 28637 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 28553 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 28553 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnitForce ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 28637 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnitForce ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 28637 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnitForce ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 28637 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnitForce ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 28637 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnitForce ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 28637 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnitForce ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 28637 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 30777 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2291
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 4 ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: CALL_OW 380
// un := CreateHuman ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: CALL_OW 44
2229: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2230: LD_ADDR_EXP 12
2234: PUSH
2235: LD_EXP 12
2239: PUSH
2240: LD_VAR 0 3
2244: ADD
2245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2246: LD_VAR 0 3
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 250
2264: PPUSH
2265: LD_VAR 0 4
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PPUSH
2274: CALL_OW 251
2278: PPUSH
2279: LD_INT 15
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 50
// end ;
2289: GO 2161
2291: POP
2292: POP
// if deltaDoctor then
2293: LD_EXP 16
2297: IFFALSE 2301
// exit ;
2299: GO 2398
// hc_gallery := Dawkins ;
2301: LD_ADDR_OWVAR 33
2305: PUSH
2306: LD_STRING Dawkins
2308: ST_TO_ADDR
// hc_face_number := 1 ;
2309: LD_ADDR_OWVAR 34
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2317: LD_ADDR_OWVAR 26
2321: PUSH
2322: LD_STRING Dr. Adam Charles Dawkins
2324: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 380
// deltaDoctor := CreateHuman ;
2338: LD_ADDR_EXP 16
2342: PUSH
2343: CALL_OW 44
2347: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2348: LD_EXP 16
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 250
2366: PPUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: CALL_OW 251
2380: PPUSH
2381: LD_INT 5
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2391: LD_STRING enableBioCharacter(BIO_ADAM)
2393: PPUSH
2394: CALL_OW 559
// end ; end_of_file
2398: LD_VAR 0 1
2402: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2403: LD_INT 0
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2412: LD_ADDR_VAR 0 5
2416: PUSH
2417: LD_STRING buildingsInDelta
2419: PPUSH
2420: EMPTY
2421: PPUSH
2422: CALL_OW 30
2426: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2427: LD_INT 68
2429: PPUSH
2430: LD_INT 40
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: CALL_OW 441
// uc_side := 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation := 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// for i := 1 to buildings do
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: DOUBLE
2462: LD_INT 1
2464: DEC
2465: ST_TO_ADDR
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_TO
2472: IFFALSE 2775
// begin InitBc ;
2474: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2478: LD_ADDR_OWVAR 42
2482: PUSH
2483: LD_VAR 0 5
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2498: LD_ADDR_OWVAR 43
2502: PUSH
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2518: LD_OWVAR 42
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: LD_INT 8
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2661
// begin bc_kind1 := b_lab_basic ;
2539: LD_ADDR_OWVAR 44
2543: PUSH
2544: LD_INT 9
2546: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2547: LD_ADDR_OWVAR 45
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2555: LD_VAR 0 5
2559: PUSH
2560: LD_VAR 0 2
2564: ARRAY
2565: PUSH
2566: LD_INT 6
2568: ARRAY
2569: IFFALSE 2637
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2571: LD_ADDR_OWVAR 44
2575: PUSH
2576: LD_VAR 0 5
2580: PUSH
2581: LD_VAR 0 2
2585: ARRAY
2586: PUSH
2587: LD_INT 6
2589: ARRAY
2590: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2591: LD_ADDR_OWVAR 45
2595: PUSH
2596: LD_INT 9
2598: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2599: LD_VAR 0 5
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PUSH
2610: LD_INT 7
2612: ARRAY
2613: IFFALSE 2635
// bc_kind2 := buildings [ i ] [ 7 ] ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 2
2629: ARRAY
2630: PUSH
2631: LD_INT 7
2633: ARRAY
2634: ST_TO_ADDR
// end else
2635: GO 2661
// begin bc_type := b_lab ;
2637: LD_ADDR_OWVAR 42
2641: PUSH
2642: LD_INT 6
2644: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2645: LD_ADDR_OWVAR 44
2649: PUSH
2650: LD_INT 9
2652: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2653: LD_ADDR_OWVAR 45
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: LD_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: PUSH
2677: LD_INT 3
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 2
2690: ARRAY
2691: PUSH
2692: LD_INT 4
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 5
2700: PUSH
2701: LD_VAR 0 2
2705: ARRAY
2706: PUSH
2707: LD_INT 5
2709: ARRAY
2710: PPUSH
2711: CALL_OW 47
2715: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2716: LD_VAR 0 4
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 32
2728: EQUAL
2729: IFFALSE 2747
2731: PUSH
2732: LD_VAR 0 5
2736: PUSH
2737: LD_VAR 0 2
2741: ARRAY
2742: PUSH
2743: LD_INT 8
2745: ARRAY
2746: AND
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2471
2775: POP
2776: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab and tmp then
2874: LD_VAR 0 6
2878: IFFALSE 2886
2880: PUSH
2881: LD_VAR 0 7
2885: AND
2886: IFFALSE 2896
// baseCorrect := 1 ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 1
2895: ST_TO_ADDR
// if not baseCorrect then
2896: LD_EXP 19
2900: NOT
2901: IFFALSE 3316
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2903: LD_ADDR_VAR 0 2
2907: PUSH
2908: LD_INT 22
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 21
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PPUSH
2932: CALL_OW 69
2936: PUSH
2937: FOR_IN
2938: IFFALSE 2951
// RemoveUnit ( i ) ;
2940: LD_VAR 0 2
2944: PPUSH
2945: CALL_OW 64
2949: GO 2937
2951: POP
2952: POP
// uc_nation := 1 ;
2953: LD_ADDR_OWVAR 21
2957: PUSH
2958: LD_INT 1
2960: ST_TO_ADDR
// uc_side := 1 ;
2961: LD_ADDR_OWVAR 20
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// bc_level := 5 ;
2969: LD_ADDR_OWVAR 43
2973: PUSH
2974: LD_INT 5
2976: ST_TO_ADDR
// bc_type := b_depot ;
2977: LD_ADDR_OWVAR 42
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2985: LD_INT 50
2987: PPUSH
2988: LD_INT 22
2990: PPUSH
2991: LD_INT 0
2993: PPUSH
2994: CALL_OW 47
// bc_type = b_bunker ;
2998: LD_ADDR_OWVAR 42
3002: PUSH
3003: LD_INT 32
3005: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 68
3013: PPUSH
3014: LD_INT 24
3016: PPUSH
3017: LD_INT 4
3019: PPUSH
3020: CALL_OW 47
3024: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_INT 4
3032: PUSH
3033: LD_INT 11
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: CALL_OW 12
3050: ARRAY
3051: PPUSH
3052: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_INT 71
3063: PPUSH
3064: LD_INT 34
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 47
3074: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 4
3082: PUSH
3083: LD_INT 11
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 1
3092: PPUSH
3093: LD_INT 2
3095: PPUSH
3096: CALL_OW 12
3100: ARRAY
3101: PPUSH
3102: CALL_OW 431
// bc_type := b_breastwork ;
3106: LD_ADDR_OWVAR 42
3110: PUSH
3111: LD_INT 31
3113: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3114: LD_INT 51
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: LD_INT 3
3122: PPUSH
3123: CALL_OW 47
// bc_type := b_oil_mine ;
3127: LD_ADDR_OWVAR 42
3131: PUSH
3132: LD_INT 29
3134: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3135: LD_INT 68
3137: PPUSH
3138: LD_INT 40
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL_OW 47
// bc_type := b_factory ;
3148: LD_ADDR_OWVAR 42
3152: PUSH
3153: LD_INT 3
3155: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3156: LD_INT 38
3158: PPUSH
3159: LD_INT 20
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 47
// bc_type := b_ext_noncombat ;
3169: LD_ADDR_OWVAR 42
3173: PUSH
3174: LD_INT 19
3176: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3177: LD_INT 38
3179: PPUSH
3180: LD_INT 24
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 47
// bc_type := b_ext_radar ;
3190: LD_ADDR_OWVAR 42
3194: PUSH
3195: LD_INT 20
3197: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: CALL_OW 47
// bc_type := b_armoury ;
3211: LD_ADDR_OWVAR 42
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3219: LD_INT 33
3221: PPUSH
3222: LD_INT 28
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 47
// bc_type := b_solar_power ;
3232: LD_ADDR_OWVAR 42
3236: PUSH
3237: LD_INT 27
3239: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3240: LD_INT 46
3242: PPUSH
3243: LD_INT 12
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3253: LD_INT 48
3255: PPUSH
3256: LD_INT 11
3258: PPUSH
3259: LD_INT 2
3261: PPUSH
3262: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3266: LD_INT 35
3268: PPUSH
3269: LD_INT 12
3271: PPUSH
3272: LD_INT 3
3274: PPUSH
3275: CALL_OW 47
// bc_type := b_lab_half ;
3279: LD_ADDR_OWVAR 42
3283: PUSH
3284: LD_INT 7
3286: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3287: LD_ADDR_OWVAR 44
3291: PUSH
3292: LD_INT 15
3294: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3295: LD_ADDR_OWVAR 45
3299: PUSH
3300: LD_INT 9
3302: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3303: LD_INT 42
3305: PPUSH
3306: LD_INT 15
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 47
// end ; end ; end_of_file
3316: LD_VAR 0 1
3320: RET
// export function Action ; var i , j , tmp ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
// InGameOn ;
3327: CALL_OW 8
// if lab then
3331: LD_EXP 21
3335: IFFALSE 3352
// CenterNowOnUnits ( lab [ 1 ] ) else
3337: LD_EXP 21
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 87
3350: GO 3361
// CenterOnUnits ( JMM ) ;
3352: LD_EXP 1
3356: PPUSH
3357: CALL_OW 85
// if IsOK ( Denis ) then
3361: LD_EXP 3
3365: PPUSH
3366: CALL_OW 302
3370: IFFALSE 3398
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3372: LD_INT 6
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3385: LD_INT 20
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3398: LD_EXP 1
3402: PPUSH
3403: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3407: LD_EXP 1
3411: PPUSH
3412: LD_EXP 16
3416: PPUSH
3417: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3428: LD_EXP 16
3432: PPUSH
3433: LD_EXP 1
3437: PPUSH
3438: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3442: LD_EXP 1
3446: PPUSH
3447: LD_EXP 16
3451: PPUSH
3452: CALL_OW 296
3456: PUSH
3457: LD_INT 5
3459: LESS
3460: IFFALSE 3421
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3462: LD_EXP 16
3466: PPUSH
3467: LD_EXP 1
3471: PPUSH
3472: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3476: LD_EXP 1
3480: PPUSH
3481: LD_STRING D1-JMM-1
3483: PPUSH
3484: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3488: LD_EXP 16
3492: PPUSH
3493: LD_STRING D1-Sci-1
3495: PPUSH
3496: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3500: LD_EXP 1
3504: PUSH
3505: LD_EXP 16
3509: PUSH
3510: LD_EXP 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: PPUSH
3520: LD_EXP 21
3524: PUSH
3525: LD_INT 1
3527: ARRAY
3528: PPUSH
3529: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3540: LD_EXP 1
3544: PPUSH
3545: CALL_OW 310
3549: IFFALSE 3562
3551: PUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 310
3561: AND
3562: IFFALSE 3533
// CenterNowOnUnits ( lab [ 1 ] ) ;
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D1-JMM-2
3584: PPUSH
3585: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3589: LD_EXP 16
3593: PPUSH
3594: LD_STRING D1-Sci-2
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D1-JMM-3
3608: PPUSH
3609: CALL_OW 88
// if IsOK ( Denis ) then
3613: LD_EXP 3
3617: PPUSH
3618: CALL_OW 302
3622: IFFALSE 3638
// Say ( DeltaDoctor , D1-Sci-3 ) else
3624: LD_EXP 16
3628: PPUSH
3629: LD_STRING D1-Sci-3
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3638: LD_EXP 16
3642: PPUSH
3643: LD_STRING D1-Sci-3a
3645: PPUSH
3646: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3650: LD_EXP 1
3654: PPUSH
3655: LD_STRING D1-JMM-4
3657: PPUSH
3658: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 25
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 3
3689: PUSH
3690: LD_INT 54
3692: PUSH
3693: EMPTY
3694: LIST
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: LD_INT 22
3717: PUSH
3718: LD_INT 0
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PPUSH
3725: CALL_OW 69
3729: PUSH
3730: FOR_IN
3731: IFFALSE 3781
// for j in tmp do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 4
3742: PUSH
3743: FOR_IN
3744: IFFALSE 3777
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3746: LD_VAR 0 3
3750: PPUSH
3751: LD_VAR 0 2
3755: PPUSH
3756: CALL_OW 250
3760: PPUSH
3761: LD_VAR 0 2
3765: PPUSH
3766: CALL_OW 251
3770: PPUSH
3771: CALL_OW 191
3775: GO 3743
3777: POP
3778: POP
3779: GO 3730
3781: POP
3782: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3783: LD_EXP 16
3787: PPUSH
3788: LD_STRING D1-Sci-4
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-5
3802: PPUSH
3803: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Sci-5
3814: PPUSH
3815: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-6
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3831: LD_EXP 17
3835: PPUSH
3836: LD_STRING D1-Har-6
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-7
3850: PPUSH
3851: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3855: LD_EXP 17
3859: PPUSH
3860: LD_STRING D1-Har-7
3862: PPUSH
3863: CALL_OW 94
// if IsOK ( Denis ) then
3867: LD_EXP 3
3871: PPUSH
3872: CALL_OW 302
3876: IFFALSE 3890
// Say ( JMM , D1-JMM-8 ) ;
3878: LD_EXP 1
3882: PPUSH
3883: LD_STRING D1-JMM-8
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D1-JMM-8a
3897: PPUSH
3898: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3902: LD_EXP 17
3906: PPUSH
3907: LD_STRING D1-Har-8
3909: PPUSH
3910: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D1-JMM-9
3921: PPUSH
3922: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3926: LD_EXP 17
3930: PPUSH
3931: LD_STRING D1-Har-9
3933: PPUSH
3934: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D1-JMM-10
3945: PPUSH
3946: CALL_OW 88
// if IsOK ( Denis ) then
3950: LD_EXP 3
3954: PPUSH
3955: CALL_OW 302
3959: IFFALSE 3973
// Say ( JMM , D1-JMM-10a ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D1-JMM-10a
3968: PPUSH
3969: CALL_OW 88
// SelectDeltaCharacters ;
3973: CALL 4457 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3977: LD_EXP 21
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: CALL_OW 274
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: LD_INT 150
3996: PPUSH
3997: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4001: LD_INT 22
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 30
4013: PUSH
4014: LD_INT 29
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: IFFALSE 4055
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4031: LD_EXP 21
4035: PUSH
4036: LD_INT 1
4038: ARRAY
4039: PPUSH
4040: CALL_OW 274
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: LD_INT 300
4050: PPUSH
4051: CALL_OW 277
// InGameOff ;
4055: CALL_OW 9
// Query ( Q1 ) ;
4059: LD_STRING Q1
4061: PPUSH
4062: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 424
// if IsInUnit ( JMM ) then
4076: LD_EXP 1
4080: PPUSH
4081: CALL_OW 310
4085: IFFALSE 4096
// ComExitBuilding ( JMM ) ;
4087: LD_EXP 1
4091: PPUSH
4092: CALL_OW 122
// end ;
4096: LD_VAR 0 1
4100: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 71
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: IFFALSE 4454
4138: GO 4140
4140: DISABLE
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
// begin SaveDeltaCharacters ;
4145: CALL 4829 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 58
4167: PUSH
4168: EMPTY
4169: LIST
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: IFFALSE 4440
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4185: LD_ADDR_VAR 0 1
4189: PUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 3
4205: PUSH
4206: LD_INT 58
4208: PUSH
4209: EMPTY
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 70
4224: PUSH
4225: FOR_IN
4226: IFFALSE 4438
// begin cargoType := GetCargoType ( i ) ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 288
4242: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 264
4252: PUSH
4253: LD_INT 12
4255: EQUAL
4256: IFFALSE 4353
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4258: LD_ADDR_EXP 15
4262: PUSH
4263: LD_EXP 15
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 1
4327: PPUSH
4328: LD_VAR 0 2
4332: PPUSH
4333: CALL_OW 289
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: ADD
4350: ST_TO_ADDR
4351: GO 4424
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4353: LD_ADDR_EXP 15
4357: PUSH
4358: LD_EXP 15
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 248
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 265
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 262
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 263
4402: PUSH
4403: LD_VAR 0 1
4407: PPUSH
4408: CALL_OW 264
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: EMPTY
4421: LIST
4422: ADD
4423: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4424: LD_EXP 15
4428: PPUSH
4429: LD_STRING 06_VehiclesIn06_1
4431: PPUSH
4432: CALL_OW 39
// end ;
4436: GO 4225
4438: POP
4439: POP
// end ; SaveCargos ;
4440: CALL 5711 0 0
// ChangeMap ( 6 , %_cont ) ;
4444: LD_INT 6
4446: PPUSH
4447: LD_STRING %_cont
4449: PPUSH
4450: CALL_OW 340
// end ; end_of_file
4454: PPOPN 2
4456: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
// selectedPeople := [ ] ;
4462: LD_ADDR_EXP 18
4466: PUSH
4467: EMPTY
4468: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 22
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 25
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 25
4529: PUSH
4530: LD_INT 4
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_EXP 1
4558: PUSH
4559: LD_EXP 16
4563: PUSH
4564: LD_EXP 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: DIFF
4574: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4575: LD_ADDR_EXP 18
4579: PUSH
4580: LD_STRING text
4582: PPUSH
4583: LD_INT 5
4585: PPUSH
4586: LD_INT 5
4588: PPUSH
4589: LD_INT -5
4591: PUSH
4592: LD_EXP 1
4596: PUSH
4597: LD_INT -6
4599: PUSH
4600: LD_INT -2
4602: PUSH
4603: LD_INT -3
4605: PUSH
4606: LD_INT -5
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_VAR 0 3
4621: ADD
4622: PUSH
4623: LD_INT -6
4625: PUSH
4626: LD_INT -4
4628: PUSH
4629: LD_EXP 3
4633: PUSH
4634: LD_EXP 16
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ADD
4645: PPUSH
4646: LD_INT 1
4648: PUSH
4649: LD_INT 3
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 1
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 42
4675: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4676: LD_EXP 18
4680: PPUSH
4681: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4685: LD_INT 22
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PPUSH
4714: LD_INT 4
4716: PPUSH
4717: CALL_OW 235
// for i in selectedPeople do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: LD_EXP 18
4730: PUSH
4731: FOR_IN
4732: IFFALSE 4748
// SetSide ( i , 1 ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 235
4746: GO 4731
4748: POP
4749: POP
// for i in yourApemans do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_EXP 14
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4777
// SetSide ( i , 1 ) ;
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 235
4775: GO 4760
4777: POP
4778: POP
// if Mike then
4779: LD_EXP 10
4783: IFFALSE 4797
// SetSide ( Mike , 1 ) ;
4785: LD_EXP 10
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4797: LD_EXP 1
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4809: LD_EXP 14
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 237
// end ;
4824: LD_VAR 0 1
4828: RET
// export function SaveDeltaCharacters ; begin
4829: LD_INT 0
4831: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4832: LD_EXP 1
4836: PPUSH
4837: LD_EXP 23
4841: PUSH
4842: LD_STRING JMM
4844: STR
4845: PPUSH
4846: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4850: LD_EXP 16
4854: PPUSH
4855: LD_STRING DeltaDoctor
4857: PPUSH
4858: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4862: LD_EXP 3
4866: PPUSH
4867: LD_EXP 23
4871: PUSH
4872: LD_STRING Denis
4874: STR
4875: PPUSH
4876: CALL_OW 38
// if Lisa in selectedPeople then
4880: LD_EXP 4
4884: PUSH
4885: LD_EXP 18
4889: IN
4890: IFFALSE 4935
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4892: LD_EXP 4
4896: PPUSH
4897: LD_EXP 23
4901: PUSH
4902: LD_STRING Lisa
4904: STR
4905: PPUSH
4906: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
4910: LD_EXP 24
4914: PUSH
4915: LD_STRING Lisa
4917: STR
4918: PPUSH
4919: CALL_OW 40
// SaveVariable ( 1 , LisaIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING LisaIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Lisa ) then
4935: LD_EXP 4
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , LisaStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING LisaStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Bobby in selectedPeople then
4956: LD_EXP 6
4960: PUSH
4961: LD_EXP 18
4965: IN
4966: IFFALSE 5011
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4968: LD_EXP 6
4972: PPUSH
4973: LD_EXP 23
4977: PUSH
4978: LD_STRING Bobby
4980: STR
4981: PPUSH
4982: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
4986: LD_EXP 24
4990: PUSH
4991: LD_STRING Bobby
4993: STR
4994: PPUSH
4995: CALL_OW 40
// SaveVariable ( 1 , BobbyIn06 ) ;
4999: LD_INT 1
5001: PPUSH
5002: LD_STRING BobbyIn06
5004: PPUSH
5005: CALL_OW 39
// end else
5009: GO 5032
// if IsOk ( Bobby ) then
5011: LD_EXP 6
5015: PPUSH
5016: CALL_OW 302
5020: IFFALSE 5032
// SaveVariable ( 1 , BobbyStayInDelta ) ;
5022: LD_INT 1
5024: PPUSH
5025: LD_STRING BobbyStayInDelta
5027: PPUSH
5028: CALL_OW 39
// if Cyrus in selectedPeople then
5032: LD_EXP 7
5036: PUSH
5037: LD_EXP 18
5041: IN
5042: IFFALSE 5087
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5044: LD_EXP 7
5048: PPUSH
5049: LD_EXP 23
5053: PUSH
5054: LD_STRING Cyrus
5056: STR
5057: PPUSH
5058: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
5062: LD_EXP 24
5066: PUSH
5067: LD_STRING Cyrus
5069: STR
5070: PPUSH
5071: CALL_OW 40
// SaveVariable ( 1 , CyrusIn06 ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_STRING CyrusIn06
5080: PPUSH
5081: CALL_OW 39
// end else
5085: GO 5108
// if IsOk ( Cyrus ) then
5087: LD_EXP 7
5091: PPUSH
5092: CALL_OW 302
5096: IFFALSE 5108
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5098: LD_INT 1
5100: PPUSH
5101: LD_STRING CyrusStayInDelta
5103: PPUSH
5104: CALL_OW 39
// if Frank in selectedPeople then
5108: LD_EXP 5
5112: PUSH
5113: LD_EXP 18
5117: IN
5118: IFFALSE 5163
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5120: LD_EXP 5
5124: PPUSH
5125: LD_EXP 23
5129: PUSH
5130: LD_STRING Frank
5132: STR
5133: PPUSH
5134: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Frank ) ;
5138: LD_EXP 24
5142: PUSH
5143: LD_STRING Frank
5145: STR
5146: PPUSH
5147: CALL_OW 40
// SaveVariable ( 1 , FrankIn06 ) ;
5151: LD_INT 1
5153: PPUSH
5154: LD_STRING FrankIn06
5156: PPUSH
5157: CALL_OW 39
// end else
5161: GO 5184
// if IsOk ( Frank ) then
5163: LD_EXP 5
5167: PPUSH
5168: CALL_OW 302
5172: IFFALSE 5184
// SaveVariable ( 1 , FrankStayInDelta ) ;
5174: LD_INT 1
5176: PPUSH
5177: LD_STRING FrankStayInDelta
5179: PPUSH
5180: CALL_OW 39
// if Brown in selectedPeople then
5184: LD_EXP 8
5188: PUSH
5189: LD_EXP 18
5193: IN
5194: IFFALSE 5239
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5196: LD_EXP 8
5200: PPUSH
5201: LD_EXP 23
5205: PUSH
5206: LD_STRING Brown
5208: STR
5209: PPUSH
5210: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Brown ) ;
5214: LD_EXP 24
5218: PUSH
5219: LD_STRING Brown
5221: STR
5222: PPUSH
5223: CALL_OW 40
// SaveVariable ( 1 , BrownIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING BrownIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Brown ) then
5239: LD_EXP 8
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , BrownStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING BrownStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Donaldson in selectedPeople then
5260: LD_EXP 9
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5315
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5272: LD_EXP 9
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Donaldson
5284: STR
5285: PPUSH
5286: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Donaldson ) ;
5290: LD_EXP 24
5294: PUSH
5295: LD_STRING Donaldson
5297: STR
5298: PPUSH
5299: CALL_OW 40
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5303: LD_INT 1
5305: PPUSH
5306: LD_STRING DonaldsonIn06
5308: PPUSH
5309: CALL_OW 39
// end else
5313: GO 5336
// if IsOk ( Donaldson ) then
5315: LD_EXP 9
5319: PPUSH
5320: CALL_OW 302
5324: IFFALSE 5336
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5326: LD_INT 1
5328: PPUSH
5329: LD_STRING DonaldsonStayInDelta
5331: PPUSH
5332: CALL_OW 39
// if Gladstone in selectedPeople then
5336: LD_EXP 2
5340: PUSH
5341: LD_EXP 18
5345: IN
5346: IFFALSE 5391
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5348: LD_EXP 2
5352: PPUSH
5353: LD_EXP 23
5357: PUSH
5358: LD_STRING Gladstone
5360: STR
5361: PPUSH
5362: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Gladstone ) ;
5366: LD_EXP 24
5370: PUSH
5371: LD_STRING Gladstone
5373: STR
5374: PPUSH
5375: CALL_OW 40
// SaveVariable ( 1 , GladstoneIn06 ) ;
5379: LD_INT 1
5381: PPUSH
5382: LD_STRING GladstoneIn06
5384: PPUSH
5385: CALL_OW 39
// end else
5389: GO 5412
// if IsOk ( Gladstone ) then
5391: LD_EXP 2
5395: PPUSH
5396: CALL_OW 302
5400: IFFALSE 5412
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5402: LD_INT 1
5404: PPUSH
5405: LD_STRING GladstoneStayInDelta
5407: PPUSH
5408: CALL_OW 39
// if Mike then
5412: LD_EXP 10
5416: IFFALSE 5436
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5418: LD_EXP 10
5422: PPUSH
5423: LD_EXP 23
5427: PUSH
5428: LD_STRING Mike
5430: STR
5431: PPUSH
5432: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5436: LD_ADDR_EXP 18
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 23
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5481: LD_EXP 14
5485: PPUSH
5486: LD_STRING ApeIn06
5488: PPUSH
5489: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5493: LD_EXP 18
5497: PUSH
5498: LD_EXP 1
5502: PUSH
5503: LD_EXP 4
5507: PUSH
5508: LD_EXP 6
5512: PUSH
5513: LD_EXP 7
5517: PUSH
5518: LD_EXP 5
5522: PUSH
5523: LD_EXP 8
5527: PUSH
5528: LD_EXP 9
5532: PUSH
5533: LD_EXP 2
5537: PUSH
5538: LD_EXP 3
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: DIFF
5554: PPUSH
5555: LD_STRING OthersIn06
5557: PPUSH
5558: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5562: LD_INT 22
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 23
5574: PUSH
5575: LD_INT 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 25
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 25
5597: PUSH
5598: LD_INT 2
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 25
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 69
5641: PUSH
5642: LD_EXP 16
5646: PUSH
5647: LD_EXP 4
5651: PUSH
5652: LD_EXP 6
5656: PUSH
5657: LD_EXP 7
5661: PUSH
5662: LD_EXP 5
5666: PUSH
5667: LD_EXP 8
5671: PUSH
5672: LD_EXP 9
5676: PUSH
5677: LD_EXP 2
5681: PUSH
5682: LD_EXP 3
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: DIFF
5698: PPUSH
5699: LD_STRING OthersStayInDelta
5701: PPUSH
5702: CALL_OW 38
// end ;
5706: LD_VAR 0 1
5710: RET
// export function SaveCargos ; var i ; begin
5711: LD_INT 0
5713: PPUSH
5714: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5715: LD_ADDR_VAR 0 2
5719: PUSH
5720: LD_INT 3
5722: PPUSH
5723: LD_INT 22
5725: PUSH
5726: LD_INT 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 34
5735: PUSH
5736: LD_INT 12
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 70
5751: PUSH
5752: FOR_IN
5753: IFFALSE 5781
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5755: LD_ADDR_EXP 22
5759: PUSH
5760: LD_EXP 22
5764: PUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL 70492 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: ADD
5778: ST_TO_ADDR
5779: GO 5752
5781: POP
5782: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5783: LD_EXP 22
5787: PPUSH
5788: LD_STRING 06_ResourcesInCargo06_1
5790: PPUSH
5791: CALL_OW 39
// end ; end_of_file
5795: LD_VAR 0 1
5799: RET
// on Command ( comandid ) do var i ;
5800: LD_INT 0
5802: PPUSH
// begin if comandid = 65 then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_INT 65
5810: EQUAL
5811: IFFALSE 5852
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5813: LD_ADDR_VAR 0 2
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 1
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: EMPTY
5829: LIST
5830: PPUSH
5831: CALL_OW 69
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5850
// ComStop ( i ) ;
5839: LD_VAR 0 2
5843: PPUSH
5844: CALL_OW 141
5848: GO 5836
5850: POP
5851: POP
// end ;
5852: PPOPN 2
5854: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5855: LD_INT 0
5857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5858: LD_ADDR_VAR 0 3
5862: PUSH
5863: LD_INT 22
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 21
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 30
5885: PUSH
5886: LD_INT 0
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: PPUSH
5898: CALL_OW 69
5902: ST_TO_ADDR
// if not tmp then
5903: LD_VAR 0 3
5907: NOT
5908: IFFALSE 5912
// exit ;
5910: GO 5942
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 3
5921: PUSH
5922: LD_INT 1
5924: ARRAY
5925: PPUSH
5926: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5930: LD_VAR 0 1
5934: PPUSH
5935: LD_INT 4
5937: PPUSH
5938: CALL_OW 235
// end ;
5942: PPOPN 3
5944: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5945: LD_VAR 0 1
5949: PUSH
5950: LD_EXP 1
5954: EQUAL
5955: IFFALSE 5964
// YouLost ( JMM ) ;
5957: LD_STRING JMM
5959: PPUSH
5960: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: CALL 22079 0 1
// end ;
5973: PPOPN 1
5975: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL 22137 0 2
// end ; end_of_file
5990: PPOPN 2
5992: END
// export globalGameSaveCounter ; every 0 0$1 do
5993: GO 5995
5995: DISABLE
// begin enable ;
5996: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5997: LD_STRING updateTimer(
5999: PUSH
6000: LD_OWVAR 1
6004: STR
6005: PUSH
6006: LD_STRING );
6008: STR
6009: PPUSH
6010: CALL_OW 559
// end ;
6014: END
// every 0 0$1 do
6015: GO 6017
6017: DISABLE
// begin globalGameSaveCounter := 0 ;
6018: LD_ADDR_EXP 25
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6026: LD_STRING setGameSaveCounter(0)
6028: PPUSH
6029: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6033: LD_STRING initStreamRollete();
6035: PPUSH
6036: CALL_OW 559
// InitStreamMode ;
6040: CALL 7392 0 0
// DefineStreamItems ( false ) ;
6044: LD_INT 0
6046: PPUSH
6047: CALL 7856 0 1
// end ;
6051: END
// export function SOS_MapStart ( ) ; begin
6052: LD_INT 0
6054: PPUSH
// if streamModeActive then
6055: LD_EXP 26
6059: IFFALSE 6068
// DefineStreamItems ( true ) ;
6061: LD_INT 1
6063: PPUSH
6064: CALL 7856 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
6068: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
6070: PPUSH
6071: CALL_OW 559
// UpdateLuaVariables ( ) ;
6075: CALL 6092 0 0
// UpdateFactoryWaypoints ( ) ;
6079: CALL 20978 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6083: CALL 21230 0 0
// end ;
6087: LD_VAR 0 1
6091: RET
// function UpdateLuaVariables ( ) ; begin
6092: LD_INT 0
6094: PPUSH
// if globalGameSaveCounter then
6095: LD_EXP 25
6099: IFFALSE 6133
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6101: LD_ADDR_EXP 25
6105: PUSH
6106: LD_EXP 25
6110: PPUSH
6111: CALL 68126 0 1
6115: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6116: LD_STRING setGameSaveCounter(
6118: PUSH
6119: LD_EXP 25
6123: STR
6124: PUSH
6125: LD_STRING )
6127: STR
6128: PPUSH
6129: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6133: LD_STRING setGameDifficulty(
6135: PUSH
6136: LD_OWVAR 67
6140: STR
6141: PUSH
6142: LD_STRING )
6144: STR
6145: PPUSH
6146: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6150: LD_STRING displayDifficulty(
6152: PUSH
6153: LD_OWVAR 67
6157: STR
6158: PUSH
6159: LD_STRING )
6161: STR
6162: PPUSH
6163: CALL_OW 559
// end ;
6167: LD_VAR 0 1
6171: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6172: LD_INT 0
6174: PPUSH
// if p2 = stream_mode then
6175: LD_VAR 0 2
6179: PUSH
6180: LD_INT 100
6182: EQUAL
6183: IFFALSE 7186
// begin if not StreamModeActive then
6185: LD_EXP 26
6189: NOT
6190: IFFALSE 6200
// StreamModeActive := true ;
6192: LD_ADDR_EXP 26
6196: PUSH
6197: LD_INT 1
6199: ST_TO_ADDR
// if p3 = 0 then
6200: LD_VAR 0 3
6204: PUSH
6205: LD_INT 0
6207: EQUAL
6208: IFFALSE 6214
// InitStreamMode ;
6210: CALL 7392 0 0
// if p3 = 1 then
6214: LD_VAR 0 3
6218: PUSH
6219: LD_INT 1
6221: EQUAL
6222: IFFALSE 6232
// sRocket := true ;
6224: LD_ADDR_EXP 31
6228: PUSH
6229: LD_INT 1
6231: ST_TO_ADDR
// if p3 = 2 then
6232: LD_VAR 0 3
6236: PUSH
6237: LD_INT 2
6239: EQUAL
6240: IFFALSE 6250
// sSpeed := true ;
6242: LD_ADDR_EXP 30
6246: PUSH
6247: LD_INT 1
6249: ST_TO_ADDR
// if p3 = 3 then
6250: LD_VAR 0 3
6254: PUSH
6255: LD_INT 3
6257: EQUAL
6258: IFFALSE 6268
// sEngine := true ;
6260: LD_ADDR_EXP 32
6264: PUSH
6265: LD_INT 1
6267: ST_TO_ADDR
// if p3 = 4 then
6268: LD_VAR 0 3
6272: PUSH
6273: LD_INT 4
6275: EQUAL
6276: IFFALSE 6286
// sSpec := true ;
6278: LD_ADDR_EXP 29
6282: PUSH
6283: LD_INT 1
6285: ST_TO_ADDR
// if p3 = 5 then
6286: LD_VAR 0 3
6290: PUSH
6291: LD_INT 5
6293: EQUAL
6294: IFFALSE 6304
// sLevel := true ;
6296: LD_ADDR_EXP 33
6300: PUSH
6301: LD_INT 1
6303: ST_TO_ADDR
// if p3 = 6 then
6304: LD_VAR 0 3
6308: PUSH
6309: LD_INT 6
6311: EQUAL
6312: IFFALSE 6322
// sArmoury := true ;
6314: LD_ADDR_EXP 34
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// if p3 = 7 then
6322: LD_VAR 0 3
6326: PUSH
6327: LD_INT 7
6329: EQUAL
6330: IFFALSE 6340
// sRadar := true ;
6332: LD_ADDR_EXP 35
6336: PUSH
6337: LD_INT 1
6339: ST_TO_ADDR
// if p3 = 8 then
6340: LD_VAR 0 3
6344: PUSH
6345: LD_INT 8
6347: EQUAL
6348: IFFALSE 6358
// sBunker := true ;
6350: LD_ADDR_EXP 36
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// if p3 = 9 then
6358: LD_VAR 0 3
6362: PUSH
6363: LD_INT 9
6365: EQUAL
6366: IFFALSE 6376
// sHack := true ;
6368: LD_ADDR_EXP 37
6372: PUSH
6373: LD_INT 1
6375: ST_TO_ADDR
// if p3 = 10 then
6376: LD_VAR 0 3
6380: PUSH
6381: LD_INT 10
6383: EQUAL
6384: IFFALSE 6394
// sFire := true ;
6386: LD_ADDR_EXP 38
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// if p3 = 11 then
6394: LD_VAR 0 3
6398: PUSH
6399: LD_INT 11
6401: EQUAL
6402: IFFALSE 6412
// sRefresh := true ;
6404: LD_ADDR_EXP 39
6408: PUSH
6409: LD_INT 1
6411: ST_TO_ADDR
// if p3 = 12 then
6412: LD_VAR 0 3
6416: PUSH
6417: LD_INT 12
6419: EQUAL
6420: IFFALSE 6430
// sExp := true ;
6422: LD_ADDR_EXP 40
6426: PUSH
6427: LD_INT 1
6429: ST_TO_ADDR
// if p3 = 13 then
6430: LD_VAR 0 3
6434: PUSH
6435: LD_INT 13
6437: EQUAL
6438: IFFALSE 6448
// sDepot := true ;
6440: LD_ADDR_EXP 41
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// if p3 = 14 then
6448: LD_VAR 0 3
6452: PUSH
6453: LD_INT 14
6455: EQUAL
6456: IFFALSE 6466
// sFlag := true ;
6458: LD_ADDR_EXP 42
6462: PUSH
6463: LD_INT 1
6465: ST_TO_ADDR
// if p3 = 15 then
6466: LD_VAR 0 3
6470: PUSH
6471: LD_INT 15
6473: EQUAL
6474: IFFALSE 6484
// sKamikadze := true ;
6476: LD_ADDR_EXP 50
6480: PUSH
6481: LD_INT 1
6483: ST_TO_ADDR
// if p3 = 16 then
6484: LD_VAR 0 3
6488: PUSH
6489: LD_INT 16
6491: EQUAL
6492: IFFALSE 6502
// sTroll := true ;
6494: LD_ADDR_EXP 51
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if p3 = 17 then
6502: LD_VAR 0 3
6506: PUSH
6507: LD_INT 17
6509: EQUAL
6510: IFFALSE 6520
// sSlow := true ;
6512: LD_ADDR_EXP 52
6516: PUSH
6517: LD_INT 1
6519: ST_TO_ADDR
// if p3 = 18 then
6520: LD_VAR 0 3
6524: PUSH
6525: LD_INT 18
6527: EQUAL
6528: IFFALSE 6538
// sLack := true ;
6530: LD_ADDR_EXP 53
6534: PUSH
6535: LD_INT 1
6537: ST_TO_ADDR
// if p3 = 19 then
6538: LD_VAR 0 3
6542: PUSH
6543: LD_INT 19
6545: EQUAL
6546: IFFALSE 6556
// sTank := true ;
6548: LD_ADDR_EXP 55
6552: PUSH
6553: LD_INT 1
6555: ST_TO_ADDR
// if p3 = 20 then
6556: LD_VAR 0 3
6560: PUSH
6561: LD_INT 20
6563: EQUAL
6564: IFFALSE 6574
// sRemote := true ;
6566: LD_ADDR_EXP 56
6570: PUSH
6571: LD_INT 1
6573: ST_TO_ADDR
// if p3 = 21 then
6574: LD_VAR 0 3
6578: PUSH
6579: LD_INT 21
6581: EQUAL
6582: IFFALSE 6592
// sPowell := true ;
6584: LD_ADDR_EXP 57
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// if p3 = 22 then
6592: LD_VAR 0 3
6596: PUSH
6597: LD_INT 22
6599: EQUAL
6600: IFFALSE 6610
// sTeleport := true ;
6602: LD_ADDR_EXP 60
6606: PUSH
6607: LD_INT 1
6609: ST_TO_ADDR
// if p3 = 23 then
6610: LD_VAR 0 3
6614: PUSH
6615: LD_INT 23
6617: EQUAL
6618: IFFALSE 6628
// sOilTower := true ;
6620: LD_ADDR_EXP 62
6624: PUSH
6625: LD_INT 1
6627: ST_TO_ADDR
// if p3 = 24 then
6628: LD_VAR 0 3
6632: PUSH
6633: LD_INT 24
6635: EQUAL
6636: IFFALSE 6646
// sShovel := true ;
6638: LD_ADDR_EXP 63
6642: PUSH
6643: LD_INT 1
6645: ST_TO_ADDR
// if p3 = 25 then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_INT 25
6653: EQUAL
6654: IFFALSE 6664
// sSheik := true ;
6656: LD_ADDR_EXP 64
6660: PUSH
6661: LD_INT 1
6663: ST_TO_ADDR
// if p3 = 26 then
6664: LD_VAR 0 3
6668: PUSH
6669: LD_INT 26
6671: EQUAL
6672: IFFALSE 6682
// sEarthquake := true ;
6674: LD_ADDR_EXP 66
6678: PUSH
6679: LD_INT 1
6681: ST_TO_ADDR
// if p3 = 27 then
6682: LD_VAR 0 3
6686: PUSH
6687: LD_INT 27
6689: EQUAL
6690: IFFALSE 6700
// sAI := true ;
6692: LD_ADDR_EXP 67
6696: PUSH
6697: LD_INT 1
6699: ST_TO_ADDR
// if p3 = 28 then
6700: LD_VAR 0 3
6704: PUSH
6705: LD_INT 28
6707: EQUAL
6708: IFFALSE 6718
// sCargo := true ;
6710: LD_ADDR_EXP 70
6714: PUSH
6715: LD_INT 1
6717: ST_TO_ADDR
// if p3 = 29 then
6718: LD_VAR 0 3
6722: PUSH
6723: LD_INT 29
6725: EQUAL
6726: IFFALSE 6736
// sDLaser := true ;
6728: LD_ADDR_EXP 71
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// if p3 = 30 then
6736: LD_VAR 0 3
6740: PUSH
6741: LD_INT 30
6743: EQUAL
6744: IFFALSE 6754
// sExchange := true ;
6746: LD_ADDR_EXP 72
6750: PUSH
6751: LD_INT 1
6753: ST_TO_ADDR
// if p3 = 31 then
6754: LD_VAR 0 3
6758: PUSH
6759: LD_INT 31
6761: EQUAL
6762: IFFALSE 6772
// sFac := true ;
6764: LD_ADDR_EXP 73
6768: PUSH
6769: LD_INT 1
6771: ST_TO_ADDR
// if p3 = 32 then
6772: LD_VAR 0 3
6776: PUSH
6777: LD_INT 32
6779: EQUAL
6780: IFFALSE 6790
// sPower := true ;
6782: LD_ADDR_EXP 74
6786: PUSH
6787: LD_INT 1
6789: ST_TO_ADDR
// if p3 = 33 then
6790: LD_VAR 0 3
6794: PUSH
6795: LD_INT 33
6797: EQUAL
6798: IFFALSE 6808
// sRandom := true ;
6800: LD_ADDR_EXP 75
6804: PUSH
6805: LD_INT 1
6807: ST_TO_ADDR
// if p3 = 34 then
6808: LD_VAR 0 3
6812: PUSH
6813: LD_INT 34
6815: EQUAL
6816: IFFALSE 6826
// sShield := true ;
6818: LD_ADDR_EXP 76
6822: PUSH
6823: LD_INT 1
6825: ST_TO_ADDR
// if p3 = 35 then
6826: LD_VAR 0 3
6830: PUSH
6831: LD_INT 35
6833: EQUAL
6834: IFFALSE 6844
// sTime := true ;
6836: LD_ADDR_EXP 77
6840: PUSH
6841: LD_INT 1
6843: ST_TO_ADDR
// if p3 = 36 then
6844: LD_VAR 0 3
6848: PUSH
6849: LD_INT 36
6851: EQUAL
6852: IFFALSE 6862
// sTools := true ;
6854: LD_ADDR_EXP 78
6858: PUSH
6859: LD_INT 1
6861: ST_TO_ADDR
// if p3 = 101 then
6862: LD_VAR 0 3
6866: PUSH
6867: LD_INT 101
6869: EQUAL
6870: IFFALSE 6880
// sSold := true ;
6872: LD_ADDR_EXP 43
6876: PUSH
6877: LD_INT 1
6879: ST_TO_ADDR
// if p3 = 102 then
6880: LD_VAR 0 3
6884: PUSH
6885: LD_INT 102
6887: EQUAL
6888: IFFALSE 6898
// sDiff := true ;
6890: LD_ADDR_EXP 44
6894: PUSH
6895: LD_INT 1
6897: ST_TO_ADDR
// if p3 = 103 then
6898: LD_VAR 0 3
6902: PUSH
6903: LD_INT 103
6905: EQUAL
6906: IFFALSE 6916
// sFog := true ;
6908: LD_ADDR_EXP 47
6912: PUSH
6913: LD_INT 1
6915: ST_TO_ADDR
// if p3 = 104 then
6916: LD_VAR 0 3
6920: PUSH
6921: LD_INT 104
6923: EQUAL
6924: IFFALSE 6934
// sReset := true ;
6926: LD_ADDR_EXP 48
6930: PUSH
6931: LD_INT 1
6933: ST_TO_ADDR
// if p3 = 105 then
6934: LD_VAR 0 3
6938: PUSH
6939: LD_INT 105
6941: EQUAL
6942: IFFALSE 6952
// sSun := true ;
6944: LD_ADDR_EXP 49
6948: PUSH
6949: LD_INT 1
6951: ST_TO_ADDR
// if p3 = 106 then
6952: LD_VAR 0 3
6956: PUSH
6957: LD_INT 106
6959: EQUAL
6960: IFFALSE 6970
// sTiger := true ;
6962: LD_ADDR_EXP 45
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// if p3 = 107 then
6970: LD_VAR 0 3
6974: PUSH
6975: LD_INT 107
6977: EQUAL
6978: IFFALSE 6988
// sBomb := true ;
6980: LD_ADDR_EXP 46
6984: PUSH
6985: LD_INT 1
6987: ST_TO_ADDR
// if p3 = 108 then
6988: LD_VAR 0 3
6992: PUSH
6993: LD_INT 108
6995: EQUAL
6996: IFFALSE 7006
// sWound := true ;
6998: LD_ADDR_EXP 54
7002: PUSH
7003: LD_INT 1
7005: ST_TO_ADDR
// if p3 = 109 then
7006: LD_VAR 0 3
7010: PUSH
7011: LD_INT 109
7013: EQUAL
7014: IFFALSE 7024
// sBetray := true ;
7016: LD_ADDR_EXP 58
7020: PUSH
7021: LD_INT 1
7023: ST_TO_ADDR
// if p3 = 110 then
7024: LD_VAR 0 3
7028: PUSH
7029: LD_INT 110
7031: EQUAL
7032: IFFALSE 7042
// sContamin := true ;
7034: LD_ADDR_EXP 59
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// if p3 = 111 then
7042: LD_VAR 0 3
7046: PUSH
7047: LD_INT 111
7049: EQUAL
7050: IFFALSE 7060
// sOil := true ;
7052: LD_ADDR_EXP 61
7056: PUSH
7057: LD_INT 1
7059: ST_TO_ADDR
// if p3 = 112 then
7060: LD_VAR 0 3
7064: PUSH
7065: LD_INT 112
7067: EQUAL
7068: IFFALSE 7078
// sStu := true ;
7070: LD_ADDR_EXP 65
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// if p3 = 113 then
7078: LD_VAR 0 3
7082: PUSH
7083: LD_INT 113
7085: EQUAL
7086: IFFALSE 7096
// sBazooka := true ;
7088: LD_ADDR_EXP 68
7092: PUSH
7093: LD_INT 1
7095: ST_TO_ADDR
// if p3 = 114 then
7096: LD_VAR 0 3
7100: PUSH
7101: LD_INT 114
7103: EQUAL
7104: IFFALSE 7114
// sMortar := true ;
7106: LD_ADDR_EXP 69
7110: PUSH
7111: LD_INT 1
7113: ST_TO_ADDR
// if p3 = 115 then
7114: LD_VAR 0 3
7118: PUSH
7119: LD_INT 115
7121: EQUAL
7122: IFFALSE 7132
// sRanger := true ;
7124: LD_ADDR_EXP 79
7128: PUSH
7129: LD_INT 1
7131: ST_TO_ADDR
// if p3 = 116 then
7132: LD_VAR 0 3
7136: PUSH
7137: LD_INT 116
7139: EQUAL
7140: IFFALSE 7150
// sComputer := true ;
7142: LD_ADDR_EXP 80
7146: PUSH
7147: LD_INT 1
7149: ST_TO_ADDR
// if p3 = 117 then
7150: LD_VAR 0 3
7154: PUSH
7155: LD_INT 117
7157: EQUAL
7158: IFFALSE 7168
// s30 := true ;
7160: LD_ADDR_EXP 81
7164: PUSH
7165: LD_INT 1
7167: ST_TO_ADDR
// if p3 = 118 then
7168: LD_VAR 0 3
7172: PUSH
7173: LD_INT 118
7175: EQUAL
7176: IFFALSE 7186
// s60 := true ;
7178: LD_ADDR_EXP 82
7182: PUSH
7183: LD_INT 1
7185: ST_TO_ADDR
// end ; if p2 = hack_mode then
7186: LD_VAR 0 2
7190: PUSH
7191: LD_INT 101
7193: EQUAL
7194: IFFALSE 7322
// begin case p3 of 1 :
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 1
7203: DOUBLE
7204: EQUAL
7205: IFTRUE 7209
7207: GO 7216
7209: POP
// hHackUnlimitedResources ; 2 :
7210: CALL 19585 0 0
7214: GO 7322
7216: LD_INT 2
7218: DOUBLE
7219: EQUAL
7220: IFTRUE 7224
7222: GO 7231
7224: POP
// hHackSetLevel10 ; 3 :
7225: CALL 19718 0 0
7229: GO 7322
7231: LD_INT 3
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7239
7237: GO 7246
7239: POP
// hHackSetLevel10YourUnits ; 4 :
7240: CALL 19803 0 0
7244: GO 7322
7246: LD_INT 4
7248: DOUBLE
7249: EQUAL
7250: IFTRUE 7254
7252: GO 7261
7254: POP
// hHackInvincible ; 5 :
7255: CALL 20251 0 0
7259: GO 7322
7261: LD_INT 5
7263: DOUBLE
7264: EQUAL
7265: IFTRUE 7269
7267: GO 7276
7269: POP
// hHackInvisible ; 6 :
7270: CALL 20362 0 0
7274: GO 7322
7276: LD_INT 6
7278: DOUBLE
7279: EQUAL
7280: IFTRUE 7284
7282: GO 7291
7284: POP
// hHackChangeYourSide ; 7 :
7285: CALL 20419 0 0
7289: GO 7322
7291: LD_INT 7
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7306
7299: POP
// hHackChangeUnitSide ; 8 :
7300: CALL 20461 0 0
7304: GO 7322
7306: LD_INT 8
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7321
7314: POP
// hHackFog ; end ;
7315: CALL 20562 0 0
7319: GO 7322
7321: POP
// end ; if p2 = game_save_mode then
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 102
7329: EQUAL
7330: IFFALSE 7387
// begin if p3 = 1 then
7332: LD_VAR 0 3
7336: PUSH
7337: LD_INT 1
7339: EQUAL
7340: IFFALSE 7352
// globalGameSaveCounter := p4 ;
7342: LD_ADDR_EXP 25
7346: PUSH
7347: LD_VAR 0 4
7351: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 2
7359: EQUAL
7360: IFFALSE 7368
7362: PUSH
7363: LD_EXP 25
7367: AND
7368: IFFALSE 7387
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7370: LD_STRING setGameSaveCounter(
7372: PUSH
7373: LD_EXP 25
7377: STR
7378: PUSH
7379: LD_STRING )
7381: STR
7382: PPUSH
7383: CALL_OW 559
// end ; end ;
7387: LD_VAR 0 7
7391: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7392: LD_INT 0
7394: PPUSH
// streamModeActive := false ;
7395: LD_ADDR_EXP 26
7399: PUSH
7400: LD_INT 0
7402: ST_TO_ADDR
// normalCounter := 36 ;
7403: LD_ADDR_EXP 27
7407: PUSH
7408: LD_INT 36
7410: ST_TO_ADDR
// hardcoreCounter := 18 ;
7411: LD_ADDR_EXP 28
7415: PUSH
7416: LD_INT 18
7418: ST_TO_ADDR
// sRocket := false ;
7419: LD_ADDR_EXP 31
7423: PUSH
7424: LD_INT 0
7426: ST_TO_ADDR
// sSpeed := false ;
7427: LD_ADDR_EXP 30
7431: PUSH
7432: LD_INT 0
7434: ST_TO_ADDR
// sEngine := false ;
7435: LD_ADDR_EXP 32
7439: PUSH
7440: LD_INT 0
7442: ST_TO_ADDR
// sSpec := false ;
7443: LD_ADDR_EXP 29
7447: PUSH
7448: LD_INT 0
7450: ST_TO_ADDR
// sLevel := false ;
7451: LD_ADDR_EXP 33
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// sArmoury := false ;
7459: LD_ADDR_EXP 34
7463: PUSH
7464: LD_INT 0
7466: ST_TO_ADDR
// sRadar := false ;
7467: LD_ADDR_EXP 35
7471: PUSH
7472: LD_INT 0
7474: ST_TO_ADDR
// sBunker := false ;
7475: LD_ADDR_EXP 36
7479: PUSH
7480: LD_INT 0
7482: ST_TO_ADDR
// sHack := false ;
7483: LD_ADDR_EXP 37
7487: PUSH
7488: LD_INT 0
7490: ST_TO_ADDR
// sFire := false ;
7491: LD_ADDR_EXP 38
7495: PUSH
7496: LD_INT 0
7498: ST_TO_ADDR
// sRefresh := false ;
7499: LD_ADDR_EXP 39
7503: PUSH
7504: LD_INT 0
7506: ST_TO_ADDR
// sExp := false ;
7507: LD_ADDR_EXP 40
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// sDepot := false ;
7515: LD_ADDR_EXP 41
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// sFlag := false ;
7523: LD_ADDR_EXP 42
7527: PUSH
7528: LD_INT 0
7530: ST_TO_ADDR
// sKamikadze := false ;
7531: LD_ADDR_EXP 50
7535: PUSH
7536: LD_INT 0
7538: ST_TO_ADDR
// sTroll := false ;
7539: LD_ADDR_EXP 51
7543: PUSH
7544: LD_INT 0
7546: ST_TO_ADDR
// sSlow := false ;
7547: LD_ADDR_EXP 52
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// sLack := false ;
7555: LD_ADDR_EXP 53
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// sTank := false ;
7563: LD_ADDR_EXP 55
7567: PUSH
7568: LD_INT 0
7570: ST_TO_ADDR
// sRemote := false ;
7571: LD_ADDR_EXP 56
7575: PUSH
7576: LD_INT 0
7578: ST_TO_ADDR
// sPowell := false ;
7579: LD_ADDR_EXP 57
7583: PUSH
7584: LD_INT 0
7586: ST_TO_ADDR
// sTeleport := false ;
7587: LD_ADDR_EXP 60
7591: PUSH
7592: LD_INT 0
7594: ST_TO_ADDR
// sOilTower := false ;
7595: LD_ADDR_EXP 62
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// sShovel := false ;
7603: LD_ADDR_EXP 63
7607: PUSH
7608: LD_INT 0
7610: ST_TO_ADDR
// sSheik := false ;
7611: LD_ADDR_EXP 64
7615: PUSH
7616: LD_INT 0
7618: ST_TO_ADDR
// sEarthquake := false ;
7619: LD_ADDR_EXP 66
7623: PUSH
7624: LD_INT 0
7626: ST_TO_ADDR
// sAI := false ;
7627: LD_ADDR_EXP 67
7631: PUSH
7632: LD_INT 0
7634: ST_TO_ADDR
// sCargo := false ;
7635: LD_ADDR_EXP 70
7639: PUSH
7640: LD_INT 0
7642: ST_TO_ADDR
// sDLaser := false ;
7643: LD_ADDR_EXP 71
7647: PUSH
7648: LD_INT 0
7650: ST_TO_ADDR
// sExchange := false ;
7651: LD_ADDR_EXP 72
7655: PUSH
7656: LD_INT 0
7658: ST_TO_ADDR
// sFac := false ;
7659: LD_ADDR_EXP 73
7663: PUSH
7664: LD_INT 0
7666: ST_TO_ADDR
// sPower := false ;
7667: LD_ADDR_EXP 74
7671: PUSH
7672: LD_INT 0
7674: ST_TO_ADDR
// sRandom := false ;
7675: LD_ADDR_EXP 75
7679: PUSH
7680: LD_INT 0
7682: ST_TO_ADDR
// sShield := false ;
7683: LD_ADDR_EXP 76
7687: PUSH
7688: LD_INT 0
7690: ST_TO_ADDR
// sTime := false ;
7691: LD_ADDR_EXP 77
7695: PUSH
7696: LD_INT 0
7698: ST_TO_ADDR
// sTools := false ;
7699: LD_ADDR_EXP 78
7703: PUSH
7704: LD_INT 0
7706: ST_TO_ADDR
// sSold := false ;
7707: LD_ADDR_EXP 43
7711: PUSH
7712: LD_INT 0
7714: ST_TO_ADDR
// sDiff := false ;
7715: LD_ADDR_EXP 44
7719: PUSH
7720: LD_INT 0
7722: ST_TO_ADDR
// sFog := false ;
7723: LD_ADDR_EXP 47
7727: PUSH
7728: LD_INT 0
7730: ST_TO_ADDR
// sReset := false ;
7731: LD_ADDR_EXP 48
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// sSun := false ;
7739: LD_ADDR_EXP 49
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// sTiger := false ;
7747: LD_ADDR_EXP 45
7751: PUSH
7752: LD_INT 0
7754: ST_TO_ADDR
// sBomb := false ;
7755: LD_ADDR_EXP 46
7759: PUSH
7760: LD_INT 0
7762: ST_TO_ADDR
// sWound := false ;
7763: LD_ADDR_EXP 54
7767: PUSH
7768: LD_INT 0
7770: ST_TO_ADDR
// sBetray := false ;
7771: LD_ADDR_EXP 58
7775: PUSH
7776: LD_INT 0
7778: ST_TO_ADDR
// sContamin := false ;
7779: LD_ADDR_EXP 59
7783: PUSH
7784: LD_INT 0
7786: ST_TO_ADDR
// sOil := false ;
7787: LD_ADDR_EXP 61
7791: PUSH
7792: LD_INT 0
7794: ST_TO_ADDR
// sStu := false ;
7795: LD_ADDR_EXP 65
7799: PUSH
7800: LD_INT 0
7802: ST_TO_ADDR
// sBazooka := false ;
7803: LD_ADDR_EXP 68
7807: PUSH
7808: LD_INT 0
7810: ST_TO_ADDR
// sMortar := false ;
7811: LD_ADDR_EXP 69
7815: PUSH
7816: LD_INT 0
7818: ST_TO_ADDR
// sRanger := false ;
7819: LD_ADDR_EXP 79
7823: PUSH
7824: LD_INT 0
7826: ST_TO_ADDR
// sComputer := false ;
7827: LD_ADDR_EXP 80
7831: PUSH
7832: LD_INT 0
7834: ST_TO_ADDR
// s30 := false ;
7835: LD_ADDR_EXP 81
7839: PUSH
7840: LD_INT 0
7842: ST_TO_ADDR
// s60 := false ;
7843: LD_ADDR_EXP 82
7847: PUSH
7848: LD_INT 0
7850: ST_TO_ADDR
// end ;
7851: LD_VAR 0 1
7855: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7856: LD_INT 0
7858: PPUSH
7859: PPUSH
7860: PPUSH
7861: PPUSH
7862: PPUSH
7863: PPUSH
7864: PPUSH
// result := [ ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: EMPTY
7871: ST_TO_ADDR
// if campaign_id = 1 then
7872: LD_OWVAR 69
7876: PUSH
7877: LD_INT 1
7879: EQUAL
7880: IFFALSE 11046
// begin case mission_number of 1 :
7882: LD_OWVAR 70
7886: PUSH
7887: LD_INT 1
7889: DOUBLE
7890: EQUAL
7891: IFTRUE 7895
7893: GO 7971
7895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: PUSH
7904: LD_INT 4
7906: PUSH
7907: LD_INT 11
7909: PUSH
7910: LD_INT 12
7912: PUSH
7913: LD_INT 15
7915: PUSH
7916: LD_INT 16
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 23
7924: PUSH
7925: LD_INT 26
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 101
7941: PUSH
7942: LD_INT 102
7944: PUSH
7945: LD_INT 106
7947: PUSH
7948: LD_INT 116
7950: PUSH
7951: LD_INT 117
7953: PUSH
7954: LD_INT 118
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: ST_TO_ADDR
7969: GO 11044
7971: LD_INT 2
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 8063
7979: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7980: LD_ADDR_VAR 0 2
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: LD_INT 4
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 15
7999: PUSH
8000: LD_INT 16
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 23
8008: PUSH
8009: LD_INT 26
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 101
8025: PUSH
8026: LD_INT 102
8028: PUSH
8029: LD_INT 105
8031: PUSH
8032: LD_INT 106
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 116
8040: PUSH
8041: LD_INT 117
8043: PUSH
8044: LD_INT 118
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: ST_TO_ADDR
8061: GO 11044
8063: LD_INT 3
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8159
8071: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: LD_INT 5
8085: PUSH
8086: LD_INT 11
8088: PUSH
8089: LD_INT 12
8091: PUSH
8092: LD_INT 15
8094: PUSH
8095: LD_INT 16
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 26
8103: PUSH
8104: LD_INT 36
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 101
8121: PUSH
8122: LD_INT 102
8124: PUSH
8125: LD_INT 105
8127: PUSH
8128: LD_INT 106
8130: PUSH
8131: LD_INT 108
8133: PUSH
8134: LD_INT 116
8136: PUSH
8137: LD_INT 117
8139: PUSH
8140: LD_INT 118
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: ST_TO_ADDR
8157: GO 11044
8159: LD_INT 4
8161: DOUBLE
8162: EQUAL
8163: IFTRUE 8167
8165: GO 8263
8167: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8168: LD_ADDR_VAR 0 2
8172: PUSH
8173: LD_INT 2
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 8
8184: PUSH
8185: LD_INT 11
8187: PUSH
8188: LD_INT 12
8190: PUSH
8191: LD_INT 15
8193: PUSH
8194: LD_INT 16
8196: PUSH
8197: LD_INT 22
8199: PUSH
8200: LD_INT 23
8202: PUSH
8203: LD_INT 26
8205: PUSH
8206: LD_INT 36
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 101
8225: PUSH
8226: LD_INT 102
8228: PUSH
8229: LD_INT 105
8231: PUSH
8232: LD_INT 106
8234: PUSH
8235: LD_INT 108
8237: PUSH
8238: LD_INT 116
8240: PUSH
8241: LD_INT 117
8243: PUSH
8244: LD_INT 118
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: ST_TO_ADDR
8261: GO 11044
8263: LD_INT 5
8265: DOUBLE
8266: EQUAL
8267: IFTRUE 8271
8269: GO 8383
8271: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8272: LD_ADDR_VAR 0 2
8276: PUSH
8277: LD_INT 2
8279: PUSH
8280: LD_INT 4
8282: PUSH
8283: LD_INT 5
8285: PUSH
8286: LD_INT 6
8288: PUSH
8289: LD_INT 8
8291: PUSH
8292: LD_INT 11
8294: PUSH
8295: LD_INT 12
8297: PUSH
8298: LD_INT 15
8300: PUSH
8301: LD_INT 16
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_INT 23
8309: PUSH
8310: LD_INT 25
8312: PUSH
8313: LD_INT 26
8315: PUSH
8316: LD_INT 36
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 101
8337: PUSH
8338: LD_INT 102
8340: PUSH
8341: LD_INT 105
8343: PUSH
8344: LD_INT 106
8346: PUSH
8347: LD_INT 108
8349: PUSH
8350: LD_INT 109
8352: PUSH
8353: LD_INT 112
8355: PUSH
8356: LD_INT 116
8358: PUSH
8359: LD_INT 117
8361: PUSH
8362: LD_INT 118
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: ST_TO_ADDR
8381: GO 11044
8383: LD_INT 6
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8523
8391: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: LD_INT 2
8399: PUSH
8400: LD_INT 4
8402: PUSH
8403: LD_INT 5
8405: PUSH
8406: LD_INT 6
8408: PUSH
8409: LD_INT 8
8411: PUSH
8412: LD_INT 11
8414: PUSH
8415: LD_INT 12
8417: PUSH
8418: LD_INT 15
8420: PUSH
8421: LD_INT 16
8423: PUSH
8424: LD_INT 20
8426: PUSH
8427: LD_INT 21
8429: PUSH
8430: LD_INT 22
8432: PUSH
8433: LD_INT 23
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 26
8441: PUSH
8442: LD_INT 30
8444: PUSH
8445: LD_INT 31
8447: PUSH
8448: LD_INT 32
8450: PUSH
8451: LD_INT 36
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 101
8477: PUSH
8478: LD_INT 102
8480: PUSH
8481: LD_INT 105
8483: PUSH
8484: LD_INT 106
8486: PUSH
8487: LD_INT 108
8489: PUSH
8490: LD_INT 109
8492: PUSH
8493: LD_INT 112
8495: PUSH
8496: LD_INT 116
8498: PUSH
8499: LD_INT 117
8501: PUSH
8502: LD_INT 118
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: ST_TO_ADDR
8521: GO 11044
8523: LD_INT 7
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8643
8531: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8532: LD_ADDR_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: LD_INT 4
8542: PUSH
8543: LD_INT 5
8545: PUSH
8546: LD_INT 7
8548: PUSH
8549: LD_INT 11
8551: PUSH
8552: LD_INT 12
8554: PUSH
8555: LD_INT 15
8557: PUSH
8558: LD_INT 16
8560: PUSH
8561: LD_INT 20
8563: PUSH
8564: LD_INT 21
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 23
8572: PUSH
8573: LD_INT 25
8575: PUSH
8576: LD_INT 26
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 101
8597: PUSH
8598: LD_INT 102
8600: PUSH
8601: LD_INT 103
8603: PUSH
8604: LD_INT 105
8606: PUSH
8607: LD_INT 106
8609: PUSH
8610: LD_INT 108
8612: PUSH
8613: LD_INT 112
8615: PUSH
8616: LD_INT 116
8618: PUSH
8619: LD_INT 117
8621: PUSH
8622: LD_INT 118
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: ST_TO_ADDR
8641: GO 11044
8643: LD_INT 8
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8791
8651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: LD_INT 6
8668: PUSH
8669: LD_INT 7
8671: PUSH
8672: LD_INT 8
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 15
8683: PUSH
8684: LD_INT 16
8686: PUSH
8687: LD_INT 20
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 23
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 26
8704: PUSH
8705: LD_INT 30
8707: PUSH
8708: LD_INT 31
8710: PUSH
8711: LD_INT 32
8713: PUSH
8714: LD_INT 36
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 101
8741: PUSH
8742: LD_INT 102
8744: PUSH
8745: LD_INT 103
8747: PUSH
8748: LD_INT 105
8750: PUSH
8751: LD_INT 106
8753: PUSH
8754: LD_INT 108
8756: PUSH
8757: LD_INT 109
8759: PUSH
8760: LD_INT 112
8762: PUSH
8763: LD_INT 116
8765: PUSH
8766: LD_INT 117
8768: PUSH
8769: LD_INT 118
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: ST_TO_ADDR
8789: GO 11044
8791: LD_INT 9
8793: DOUBLE
8794: EQUAL
8795: IFTRUE 8799
8797: GO 8947
8799: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8800: LD_ADDR_VAR 0 2
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 4
8810: PUSH
8811: LD_INT 5
8813: PUSH
8814: LD_INT 6
8816: PUSH
8817: LD_INT 7
8819: PUSH
8820: LD_INT 8
8822: PUSH
8823: LD_INT 11
8825: PUSH
8826: LD_INT 12
8828: PUSH
8829: LD_INT 15
8831: PUSH
8832: LD_INT 16
8834: PUSH
8835: LD_INT 20
8837: PUSH
8838: LD_INT 21
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_INT 23
8846: PUSH
8847: LD_INT 25
8849: PUSH
8850: LD_INT 26
8852: PUSH
8853: LD_INT 28
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 31
8861: PUSH
8862: LD_INT 32
8864: PUSH
8865: LD_INT 36
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 101
8893: PUSH
8894: LD_INT 102
8896: PUSH
8897: LD_INT 103
8899: PUSH
8900: LD_INT 105
8902: PUSH
8903: LD_INT 106
8905: PUSH
8906: LD_INT 108
8908: PUSH
8909: LD_INT 109
8911: PUSH
8912: LD_INT 112
8914: PUSH
8915: LD_INT 114
8917: PUSH
8918: LD_INT 116
8920: PUSH
8921: LD_INT 117
8923: PUSH
8924: LD_INT 118
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: ST_TO_ADDR
8945: GO 11044
8947: LD_INT 10
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 9151
8955: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: LD_INT 2
8963: PUSH
8964: LD_INT 4
8966: PUSH
8967: LD_INT 5
8969: PUSH
8970: LD_INT 6
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: LD_INT 8
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 11
8987: PUSH
8988: LD_INT 12
8990: PUSH
8991: LD_INT 13
8993: PUSH
8994: LD_INT 14
8996: PUSH
8997: LD_INT 15
8999: PUSH
9000: LD_INT 16
9002: PUSH
9003: LD_INT 17
9005: PUSH
9006: LD_INT 18
9008: PUSH
9009: LD_INT 19
9011: PUSH
9012: LD_INT 20
9014: PUSH
9015: LD_INT 21
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_INT 23
9023: PUSH
9024: LD_INT 24
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 26
9032: PUSH
9033: LD_INT 28
9035: PUSH
9036: LD_INT 30
9038: PUSH
9039: LD_INT 31
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: LD_INT 36
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 101
9081: PUSH
9082: LD_INT 102
9084: PUSH
9085: LD_INT 103
9087: PUSH
9088: LD_INT 104
9090: PUSH
9091: LD_INT 105
9093: PUSH
9094: LD_INT 106
9096: PUSH
9097: LD_INT 107
9099: PUSH
9100: LD_INT 108
9102: PUSH
9103: LD_INT 109
9105: PUSH
9106: LD_INT 110
9108: PUSH
9109: LD_INT 111
9111: PUSH
9112: LD_INT 112
9114: PUSH
9115: LD_INT 114
9117: PUSH
9118: LD_INT 116
9120: PUSH
9121: LD_INT 117
9123: PUSH
9124: LD_INT 118
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 11044
9151: LD_INT 11
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9363
9159: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 3
9170: PUSH
9171: LD_INT 4
9173: PUSH
9174: LD_INT 5
9176: PUSH
9177: LD_INT 6
9179: PUSH
9180: LD_INT 7
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: LD_INT 9
9188: PUSH
9189: LD_INT 10
9191: PUSH
9192: LD_INT 11
9194: PUSH
9195: LD_INT 12
9197: PUSH
9198: LD_INT 13
9200: PUSH
9201: LD_INT 14
9203: PUSH
9204: LD_INT 15
9206: PUSH
9207: LD_INT 16
9209: PUSH
9210: LD_INT 17
9212: PUSH
9213: LD_INT 18
9215: PUSH
9216: LD_INT 19
9218: PUSH
9219: LD_INT 20
9221: PUSH
9222: LD_INT 21
9224: PUSH
9225: LD_INT 22
9227: PUSH
9228: LD_INT 23
9230: PUSH
9231: LD_INT 24
9233: PUSH
9234: LD_INT 25
9236: PUSH
9237: LD_INT 26
9239: PUSH
9240: LD_INT 28
9242: PUSH
9243: LD_INT 30
9245: PUSH
9246: LD_INT 31
9248: PUSH
9249: LD_INT 32
9251: PUSH
9252: LD_INT 34
9254: PUSH
9255: LD_INT 36
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 101
9293: PUSH
9294: LD_INT 102
9296: PUSH
9297: LD_INT 103
9299: PUSH
9300: LD_INT 104
9302: PUSH
9303: LD_INT 105
9305: PUSH
9306: LD_INT 106
9308: PUSH
9309: LD_INT 107
9311: PUSH
9312: LD_INT 108
9314: PUSH
9315: LD_INT 109
9317: PUSH
9318: LD_INT 110
9320: PUSH
9321: LD_INT 111
9323: PUSH
9324: LD_INT 112
9326: PUSH
9327: LD_INT 114
9329: PUSH
9330: LD_INT 116
9332: PUSH
9333: LD_INT 117
9335: PUSH
9336: LD_INT 118
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: ST_TO_ADDR
9361: GO 11044
9363: LD_INT 12
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9591
9371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9372: LD_ADDR_VAR 0 2
9376: PUSH
9377: LD_INT 1
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: LD_INT 3
9385: PUSH
9386: LD_INT 4
9388: PUSH
9389: LD_INT 5
9391: PUSH
9392: LD_INT 6
9394: PUSH
9395: LD_INT 7
9397: PUSH
9398: LD_INT 8
9400: PUSH
9401: LD_INT 9
9403: PUSH
9404: LD_INT 10
9406: PUSH
9407: LD_INT 11
9409: PUSH
9410: LD_INT 12
9412: PUSH
9413: LD_INT 13
9415: PUSH
9416: LD_INT 14
9418: PUSH
9419: LD_INT 15
9421: PUSH
9422: LD_INT 16
9424: PUSH
9425: LD_INT 17
9427: PUSH
9428: LD_INT 18
9430: PUSH
9431: LD_INT 19
9433: PUSH
9434: LD_INT 20
9436: PUSH
9437: LD_INT 21
9439: PUSH
9440: LD_INT 22
9442: PUSH
9443: LD_INT 23
9445: PUSH
9446: LD_INT 24
9448: PUSH
9449: LD_INT 25
9451: PUSH
9452: LD_INT 26
9454: PUSH
9455: LD_INT 27
9457: PUSH
9458: LD_INT 28
9460: PUSH
9461: LD_INT 30
9463: PUSH
9464: LD_INT 31
9466: PUSH
9467: LD_INT 32
9469: PUSH
9470: LD_INT 33
9472: PUSH
9473: LD_INT 34
9475: PUSH
9476: LD_INT 36
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 101
9517: PUSH
9518: LD_INT 102
9520: PUSH
9521: LD_INT 103
9523: PUSH
9524: LD_INT 104
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 107
9535: PUSH
9536: LD_INT 108
9538: PUSH
9539: LD_INT 109
9541: PUSH
9542: LD_INT 110
9544: PUSH
9545: LD_INT 111
9547: PUSH
9548: LD_INT 112
9550: PUSH
9551: LD_INT 113
9553: PUSH
9554: LD_INT 114
9556: PUSH
9557: LD_INT 116
9559: PUSH
9560: LD_INT 117
9562: PUSH
9563: LD_INT 118
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: ST_TO_ADDR
9589: GO 11044
9591: LD_INT 13
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9807
9599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 3
9613: PUSH
9614: LD_INT 4
9616: PUSH
9617: LD_INT 5
9619: PUSH
9620: LD_INT 8
9622: PUSH
9623: LD_INT 9
9625: PUSH
9626: LD_INT 10
9628: PUSH
9629: LD_INT 11
9631: PUSH
9632: LD_INT 12
9634: PUSH
9635: LD_INT 14
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: LD_INT 17
9646: PUSH
9647: LD_INT 18
9649: PUSH
9650: LD_INT 19
9652: PUSH
9653: LD_INT 20
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 22
9661: PUSH
9662: LD_INT 23
9664: PUSH
9665: LD_INT 24
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 26
9673: PUSH
9674: LD_INT 27
9676: PUSH
9677: LD_INT 28
9679: PUSH
9680: LD_INT 30
9682: PUSH
9683: LD_INT 31
9685: PUSH
9686: LD_INT 32
9688: PUSH
9689: LD_INT 33
9691: PUSH
9692: LD_INT 34
9694: PUSH
9695: LD_INT 36
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 101
9733: PUSH
9734: LD_INT 102
9736: PUSH
9737: LD_INT 103
9739: PUSH
9740: LD_INT 104
9742: PUSH
9743: LD_INT 105
9745: PUSH
9746: LD_INT 106
9748: PUSH
9749: LD_INT 107
9751: PUSH
9752: LD_INT 108
9754: PUSH
9755: LD_INT 109
9757: PUSH
9758: LD_INT 110
9760: PUSH
9761: LD_INT 111
9763: PUSH
9764: LD_INT 112
9766: PUSH
9767: LD_INT 113
9769: PUSH
9770: LD_INT 114
9772: PUSH
9773: LD_INT 116
9775: PUSH
9776: LD_INT 117
9778: PUSH
9779: LD_INT 118
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: ST_TO_ADDR
9805: GO 11044
9807: LD_INT 14
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 10039
9815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9816: LD_ADDR_VAR 0 2
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: LD_INT 6
9838: PUSH
9839: LD_INT 7
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: LD_INT 9
9847: PUSH
9848: LD_INT 10
9850: PUSH
9851: LD_INT 11
9853: PUSH
9854: LD_INT 12
9856: PUSH
9857: LD_INT 13
9859: PUSH
9860: LD_INT 14
9862: PUSH
9863: LD_INT 15
9865: PUSH
9866: LD_INT 16
9868: PUSH
9869: LD_INT 17
9871: PUSH
9872: LD_INT 18
9874: PUSH
9875: LD_INT 19
9877: PUSH
9878: LD_INT 20
9880: PUSH
9881: LD_INT 21
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: LD_INT 23
9889: PUSH
9890: LD_INT 24
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 26
9898: PUSH
9899: LD_INT 27
9901: PUSH
9902: LD_INT 28
9904: PUSH
9905: LD_INT 29
9907: PUSH
9908: LD_INT 30
9910: PUSH
9911: LD_INT 31
9913: PUSH
9914: LD_INT 32
9916: PUSH
9917: LD_INT 33
9919: PUSH
9920: LD_INT 34
9922: PUSH
9923: LD_INT 36
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 101
9965: PUSH
9966: LD_INT 102
9968: PUSH
9969: LD_INT 103
9971: PUSH
9972: LD_INT 104
9974: PUSH
9975: LD_INT 105
9977: PUSH
9978: LD_INT 106
9980: PUSH
9981: LD_INT 107
9983: PUSH
9984: LD_INT 108
9986: PUSH
9987: LD_INT 109
9989: PUSH
9990: LD_INT 110
9992: PUSH
9993: LD_INT 111
9995: PUSH
9996: LD_INT 112
9998: PUSH
9999: LD_INT 113
10001: PUSH
10002: LD_INT 114
10004: PUSH
10005: LD_INT 116
10007: PUSH
10008: LD_INT 117
10010: PUSH
10011: LD_INT 118
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: ST_TO_ADDR
10037: GO 11044
10039: LD_INT 15
10041: DOUBLE
10042: EQUAL
10043: IFTRUE 10047
10045: GO 10271
10047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10048: LD_ADDR_VAR 0 2
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 5
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: LD_INT 7
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: LD_INT 9
10079: PUSH
10080: LD_INT 10
10082: PUSH
10083: LD_INT 11
10085: PUSH
10086: LD_INT 12
10088: PUSH
10089: LD_INT 13
10091: PUSH
10092: LD_INT 14
10094: PUSH
10095: LD_INT 15
10097: PUSH
10098: LD_INT 16
10100: PUSH
10101: LD_INT 17
10103: PUSH
10104: LD_INT 18
10106: PUSH
10107: LD_INT 19
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 24
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 26
10130: PUSH
10131: LD_INT 27
10133: PUSH
10134: LD_INT 28
10136: PUSH
10137: LD_INT 29
10139: PUSH
10140: LD_INT 30
10142: PUSH
10143: LD_INT 31
10145: PUSH
10146: LD_INT 32
10148: PUSH
10149: LD_INT 33
10151: PUSH
10152: LD_INT 34
10154: PUSH
10155: LD_INT 36
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 101
10197: PUSH
10198: LD_INT 102
10200: PUSH
10201: LD_INT 103
10203: PUSH
10204: LD_INT 104
10206: PUSH
10207: LD_INT 105
10209: PUSH
10210: LD_INT 106
10212: PUSH
10213: LD_INT 107
10215: PUSH
10216: LD_INT 108
10218: PUSH
10219: LD_INT 109
10221: PUSH
10222: LD_INT 110
10224: PUSH
10225: LD_INT 111
10227: PUSH
10228: LD_INT 112
10230: PUSH
10231: LD_INT 113
10233: PUSH
10234: LD_INT 114
10236: PUSH
10237: LD_INT 116
10239: PUSH
10240: LD_INT 117
10242: PUSH
10243: LD_INT 118
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: ST_TO_ADDR
10269: GO 11044
10271: LD_INT 16
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10415
10279: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10280: LD_ADDR_VAR 0 2
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: LD_INT 4
10290: PUSH
10291: LD_INT 5
10293: PUSH
10294: LD_INT 7
10296: PUSH
10297: LD_INT 11
10299: PUSH
10300: LD_INT 12
10302: PUSH
10303: LD_INT 15
10305: PUSH
10306: LD_INT 16
10308: PUSH
10309: LD_INT 20
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 22
10317: PUSH
10318: LD_INT 23
10320: PUSH
10321: LD_INT 25
10323: PUSH
10324: LD_INT 26
10326: PUSH
10327: LD_INT 30
10329: PUSH
10330: LD_INT 31
10332: PUSH
10333: LD_INT 32
10335: PUSH
10336: LD_INT 33
10338: PUSH
10339: LD_INT 34
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 101
10365: PUSH
10366: LD_INT 102
10368: PUSH
10369: LD_INT 103
10371: PUSH
10372: LD_INT 106
10374: PUSH
10375: LD_INT 108
10377: PUSH
10378: LD_INT 112
10380: PUSH
10381: LD_INT 113
10383: PUSH
10384: LD_INT 114
10386: PUSH
10387: LD_INT 116
10389: PUSH
10390: LD_INT 117
10392: PUSH
10393: LD_INT 118
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: ST_TO_ADDR
10413: GO 11044
10415: LD_INT 17
10417: DOUBLE
10418: EQUAL
10419: IFTRUE 10423
10421: GO 10647
10423: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10424: LD_ADDR_VAR 0 2
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 2
10434: PUSH
10435: LD_INT 3
10437: PUSH
10438: LD_INT 4
10440: PUSH
10441: LD_INT 5
10443: PUSH
10444: LD_INT 6
10446: PUSH
10447: LD_INT 7
10449: PUSH
10450: LD_INT 8
10452: PUSH
10453: LD_INT 9
10455: PUSH
10456: LD_INT 10
10458: PUSH
10459: LD_INT 11
10461: PUSH
10462: LD_INT 12
10464: PUSH
10465: LD_INT 13
10467: PUSH
10468: LD_INT 14
10470: PUSH
10471: LD_INT 15
10473: PUSH
10474: LD_INT 16
10476: PUSH
10477: LD_INT 17
10479: PUSH
10480: LD_INT 18
10482: PUSH
10483: LD_INT 19
10485: PUSH
10486: LD_INT 20
10488: PUSH
10489: LD_INT 21
10491: PUSH
10492: LD_INT 22
10494: PUSH
10495: LD_INT 23
10497: PUSH
10498: LD_INT 24
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 26
10506: PUSH
10507: LD_INT 27
10509: PUSH
10510: LD_INT 28
10512: PUSH
10513: LD_INT 29
10515: PUSH
10516: LD_INT 30
10518: PUSH
10519: LD_INT 31
10521: PUSH
10522: LD_INT 32
10524: PUSH
10525: LD_INT 33
10527: PUSH
10528: LD_INT 34
10530: PUSH
10531: LD_INT 36
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 101
10573: PUSH
10574: LD_INT 102
10576: PUSH
10577: LD_INT 103
10579: PUSH
10580: LD_INT 104
10582: PUSH
10583: LD_INT 105
10585: PUSH
10586: LD_INT 106
10588: PUSH
10589: LD_INT 107
10591: PUSH
10592: LD_INT 108
10594: PUSH
10595: LD_INT 109
10597: PUSH
10598: LD_INT 110
10600: PUSH
10601: LD_INT 111
10603: PUSH
10604: LD_INT 112
10606: PUSH
10607: LD_INT 113
10609: PUSH
10610: LD_INT 114
10612: PUSH
10613: LD_INT 116
10615: PUSH
10616: LD_INT 117
10618: PUSH
10619: LD_INT 118
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: ST_TO_ADDR
10645: GO 11044
10647: LD_INT 18
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10803
10655: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10656: LD_ADDR_VAR 0 2
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 4
10666: PUSH
10667: LD_INT 5
10669: PUSH
10670: LD_INT 7
10672: PUSH
10673: LD_INT 11
10675: PUSH
10676: LD_INT 12
10678: PUSH
10679: LD_INT 15
10681: PUSH
10682: LD_INT 16
10684: PUSH
10685: LD_INT 20
10687: PUSH
10688: LD_INT 21
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_INT 23
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 30
10705: PUSH
10706: LD_INT 31
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: LD_INT 33
10714: PUSH
10715: LD_INT 34
10717: PUSH
10718: LD_INT 35
10720: PUSH
10721: LD_INT 36
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 101
10749: PUSH
10750: LD_INT 102
10752: PUSH
10753: LD_INT 103
10755: PUSH
10756: LD_INT 106
10758: PUSH
10759: LD_INT 108
10761: PUSH
10762: LD_INT 112
10764: PUSH
10765: LD_INT 113
10767: PUSH
10768: LD_INT 114
10770: PUSH
10771: LD_INT 115
10773: PUSH
10774: LD_INT 116
10776: PUSH
10777: LD_INT 117
10779: PUSH
10780: LD_INT 118
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: ST_TO_ADDR
10801: GO 11044
10803: LD_INT 19
10805: DOUBLE
10806: EQUAL
10807: IFTRUE 10811
10809: GO 11043
10811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10812: LD_ADDR_VAR 0 2
10816: PUSH
10817: LD_INT 1
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: LD_INT 5
10831: PUSH
10832: LD_INT 6
10834: PUSH
10835: LD_INT 7
10837: PUSH
10838: LD_INT 8
10840: PUSH
10841: LD_INT 9
10843: PUSH
10844: LD_INT 10
10846: PUSH
10847: LD_INT 11
10849: PUSH
10850: LD_INT 12
10852: PUSH
10853: LD_INT 13
10855: PUSH
10856: LD_INT 14
10858: PUSH
10859: LD_INT 15
10861: PUSH
10862: LD_INT 16
10864: PUSH
10865: LD_INT 17
10867: PUSH
10868: LD_INT 18
10870: PUSH
10871: LD_INT 19
10873: PUSH
10874: LD_INT 20
10876: PUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 23
10885: PUSH
10886: LD_INT 24
10888: PUSH
10889: LD_INT 25
10891: PUSH
10892: LD_INT 26
10894: PUSH
10895: LD_INT 27
10897: PUSH
10898: LD_INT 28
10900: PUSH
10901: LD_INT 29
10903: PUSH
10904: LD_INT 30
10906: PUSH
10907: LD_INT 31
10909: PUSH
10910: LD_INT 32
10912: PUSH
10913: LD_INT 33
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 35
10921: PUSH
10922: LD_INT 36
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 101
10965: PUSH
10966: LD_INT 102
10968: PUSH
10969: LD_INT 103
10971: PUSH
10972: LD_INT 104
10974: PUSH
10975: LD_INT 105
10977: PUSH
10978: LD_INT 106
10980: PUSH
10981: LD_INT 107
10983: PUSH
10984: LD_INT 108
10986: PUSH
10987: LD_INT 109
10989: PUSH
10990: LD_INT 110
10992: PUSH
10993: LD_INT 111
10995: PUSH
10996: LD_INT 112
10998: PUSH
10999: LD_INT 113
11001: PUSH
11002: LD_INT 114
11004: PUSH
11005: LD_INT 115
11007: PUSH
11008: LD_INT 116
11010: PUSH
11011: LD_INT 117
11013: PUSH
11014: LD_INT 118
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: ST_TO_ADDR
11041: GO 11044
11043: POP
// end else
11044: GO 11275
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: LD_INT 2
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 4
11062: PUSH
11063: LD_INT 5
11065: PUSH
11066: LD_INT 6
11068: PUSH
11069: LD_INT 7
11071: PUSH
11072: LD_INT 8
11074: PUSH
11075: LD_INT 9
11077: PUSH
11078: LD_INT 10
11080: PUSH
11081: LD_INT 11
11083: PUSH
11084: LD_INT 12
11086: PUSH
11087: LD_INT 13
11089: PUSH
11090: LD_INT 14
11092: PUSH
11093: LD_INT 15
11095: PUSH
11096: LD_INT 16
11098: PUSH
11099: LD_INT 17
11101: PUSH
11102: LD_INT 18
11104: PUSH
11105: LD_INT 19
11107: PUSH
11108: LD_INT 20
11110: PUSH
11111: LD_INT 21
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_INT 23
11119: PUSH
11120: LD_INT 24
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 27
11131: PUSH
11132: LD_INT 28
11134: PUSH
11135: LD_INT 29
11137: PUSH
11138: LD_INT 30
11140: PUSH
11141: LD_INT 31
11143: PUSH
11144: LD_INT 32
11146: PUSH
11147: LD_INT 33
11149: PUSH
11150: LD_INT 34
11152: PUSH
11153: LD_INT 35
11155: PUSH
11156: LD_INT 36
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 103
11205: PUSH
11206: LD_INT 104
11208: PUSH
11209: LD_INT 105
11211: PUSH
11212: LD_INT 106
11214: PUSH
11215: LD_INT 107
11217: PUSH
11218: LD_INT 108
11220: PUSH
11221: LD_INT 109
11223: PUSH
11224: LD_INT 110
11226: PUSH
11227: LD_INT 111
11229: PUSH
11230: LD_INT 112
11232: PUSH
11233: LD_INT 113
11235: PUSH
11236: LD_INT 114
11238: PUSH
11239: LD_INT 115
11241: PUSH
11242: LD_INT 116
11244: PUSH
11245: LD_INT 117
11247: PUSH
11248: LD_INT 118
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: ST_TO_ADDR
// if result then
11275: LD_VAR 0 2
11279: IFFALSE 12065
// begin normal :=  ;
11281: LD_ADDR_VAR 0 5
11285: PUSH
11286: LD_STRING 
11288: ST_TO_ADDR
// hardcore :=  ;
11289: LD_ADDR_VAR 0 6
11293: PUSH
11294: LD_STRING 
11296: ST_TO_ADDR
// active :=  ;
11297: LD_ADDR_VAR 0 7
11301: PUSH
11302: LD_STRING 
11304: ST_TO_ADDR
// for i = 1 to normalCounter do
11305: LD_ADDR_VAR 0 8
11309: PUSH
11310: DOUBLE
11311: LD_INT 1
11313: DEC
11314: ST_TO_ADDR
11315: LD_EXP 27
11319: PUSH
11320: FOR_TO
11321: IFFALSE 11422
// begin tmp := 0 ;
11323: LD_ADDR_VAR 0 3
11327: PUSH
11328: LD_STRING 0
11330: ST_TO_ADDR
// if result [ 1 ] then
11331: LD_VAR 0 2
11335: PUSH
11336: LD_INT 1
11338: ARRAY
11339: IFFALSE 11404
// if result [ 1 ] [ 1 ] = i then
11341: LD_VAR 0 2
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PUSH
11350: LD_INT 1
11352: ARRAY
11353: PUSH
11354: LD_VAR 0 8
11358: EQUAL
11359: IFFALSE 11404
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_VAR 0 2
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_VAR 0 2
11378: PUSH
11379: LD_INT 1
11381: ARRAY
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 3
11390: PPUSH
11391: CALL_OW 1
11395: ST_TO_ADDR
// tmp := 1 ;
11396: LD_ADDR_VAR 0 3
11400: PUSH
11401: LD_STRING 1
11403: ST_TO_ADDR
// end ; normal := normal & tmp ;
11404: LD_ADDR_VAR 0 5
11408: PUSH
11409: LD_VAR 0 5
11413: PUSH
11414: LD_VAR 0 3
11418: STR
11419: ST_TO_ADDR
// end ;
11420: GO 11320
11422: POP
11423: POP
// for i = 1 to hardcoreCounter do
11424: LD_ADDR_VAR 0 8
11428: PUSH
11429: DOUBLE
11430: LD_INT 1
11432: DEC
11433: ST_TO_ADDR
11434: LD_EXP 28
11438: PUSH
11439: FOR_TO
11440: IFFALSE 11545
// begin tmp := 0 ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_STRING 0
11449: ST_TO_ADDR
// if result [ 2 ] then
11450: LD_VAR 0 2
11454: PUSH
11455: LD_INT 2
11457: ARRAY
11458: IFFALSE 11527
// if result [ 2 ] [ 1 ] = 100 + i then
11460: LD_VAR 0 2
11464: PUSH
11465: LD_INT 2
11467: ARRAY
11468: PUSH
11469: LD_INT 1
11471: ARRAY
11472: PUSH
11473: LD_INT 100
11475: PUSH
11476: LD_VAR 0 8
11480: PLUS
11481: EQUAL
11482: IFFALSE 11527
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: LD_VAR 0 2
11493: PPUSH
11494: LD_INT 2
11496: PPUSH
11497: LD_VAR 0 2
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 3
11513: PPUSH
11514: CALL_OW 1
11518: ST_TO_ADDR
// tmp := 1 ;
11519: LD_ADDR_VAR 0 3
11523: PUSH
11524: LD_STRING 1
11526: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11527: LD_ADDR_VAR 0 6
11531: PUSH
11532: LD_VAR 0 6
11536: PUSH
11537: LD_VAR 0 3
11541: STR
11542: ST_TO_ADDR
// end ;
11543: GO 11439
11545: POP
11546: POP
// if isGameLoad then
11547: LD_VAR 0 1
11551: IFFALSE 12026
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11553: LD_ADDR_VAR 0 4
11557: PUSH
11558: LD_EXP 31
11562: PUSH
11563: LD_EXP 30
11567: PUSH
11568: LD_EXP 32
11572: PUSH
11573: LD_EXP 29
11577: PUSH
11578: LD_EXP 33
11582: PUSH
11583: LD_EXP 34
11587: PUSH
11588: LD_EXP 35
11592: PUSH
11593: LD_EXP 36
11597: PUSH
11598: LD_EXP 37
11602: PUSH
11603: LD_EXP 38
11607: PUSH
11608: LD_EXP 39
11612: PUSH
11613: LD_EXP 40
11617: PUSH
11618: LD_EXP 41
11622: PUSH
11623: LD_EXP 42
11627: PUSH
11628: LD_EXP 50
11632: PUSH
11633: LD_EXP 51
11637: PUSH
11638: LD_EXP 52
11642: PUSH
11643: LD_EXP 53
11647: PUSH
11648: LD_EXP 55
11652: PUSH
11653: LD_EXP 56
11657: PUSH
11658: LD_EXP 57
11662: PUSH
11663: LD_EXP 60
11667: PUSH
11668: LD_EXP 62
11672: PUSH
11673: LD_EXP 63
11677: PUSH
11678: LD_EXP 64
11682: PUSH
11683: LD_EXP 66
11687: PUSH
11688: LD_EXP 67
11692: PUSH
11693: LD_EXP 70
11697: PUSH
11698: LD_EXP 71
11702: PUSH
11703: LD_EXP 72
11707: PUSH
11708: LD_EXP 73
11712: PUSH
11713: LD_EXP 74
11717: PUSH
11718: LD_EXP 75
11722: PUSH
11723: LD_EXP 76
11727: PUSH
11728: LD_EXP 77
11732: PUSH
11733: LD_EXP 78
11737: PUSH
11738: LD_EXP 43
11742: PUSH
11743: LD_EXP 44
11747: PUSH
11748: LD_EXP 47
11752: PUSH
11753: LD_EXP 48
11757: PUSH
11758: LD_EXP 49
11762: PUSH
11763: LD_EXP 45
11767: PUSH
11768: LD_EXP 46
11772: PUSH
11773: LD_EXP 54
11777: PUSH
11778: LD_EXP 58
11782: PUSH
11783: LD_EXP 59
11787: PUSH
11788: LD_EXP 61
11792: PUSH
11793: LD_EXP 65
11797: PUSH
11798: LD_EXP 68
11802: PUSH
11803: LD_EXP 69
11807: PUSH
11808: LD_EXP 79
11812: PUSH
11813: LD_EXP 80
11817: PUSH
11818: LD_EXP 81
11822: PUSH
11823: LD_EXP 82
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: ST_TO_ADDR
// tmp :=  ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_STRING 
11891: ST_TO_ADDR
// for i = 1 to normalCounter do
11892: LD_ADDR_VAR 0 8
11896: PUSH
11897: DOUBLE
11898: LD_INT 1
11900: DEC
11901: ST_TO_ADDR
11902: LD_EXP 27
11906: PUSH
11907: FOR_TO
11908: IFFALSE 11944
// begin if flags [ i ] then
11910: LD_VAR 0 4
11914: PUSH
11915: LD_VAR 0 8
11919: ARRAY
11920: IFFALSE 11942
// tmp := tmp & i & ; ;
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: LD_VAR 0 3
11931: PUSH
11932: LD_VAR 0 8
11936: STR
11937: PUSH
11938: LD_STRING ;
11940: STR
11941: ST_TO_ADDR
// end ;
11942: GO 11907
11944: POP
11945: POP
// for i = 1 to hardcoreCounter do
11946: LD_ADDR_VAR 0 8
11950: PUSH
11951: DOUBLE
11952: LD_INT 1
11954: DEC
11955: ST_TO_ADDR
11956: LD_EXP 28
11960: PUSH
11961: FOR_TO
11962: IFFALSE 12008
// begin if flags [ normalCounter + i ] then
11964: LD_VAR 0 4
11968: PUSH
11969: LD_EXP 27
11973: PUSH
11974: LD_VAR 0 8
11978: PLUS
11979: ARRAY
11980: IFFALSE 12006
// tmp := tmp & ( 100 + i ) & ; ;
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: LD_VAR 0 3
11991: PUSH
11992: LD_INT 100
11994: PUSH
11995: LD_VAR 0 8
11999: PLUS
12000: STR
12001: PUSH
12002: LD_STRING ;
12004: STR
12005: ST_TO_ADDR
// end ;
12006: GO 11961
12008: POP
12009: POP
// if tmp then
12010: LD_VAR 0 3
12014: IFFALSE 12026
// active := tmp ;
12016: LD_ADDR_VAR 0 7
12020: PUSH
12021: LD_VAR 0 3
12025: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12026: LD_STRING getStreamItemsFromMission("
12028: PUSH
12029: LD_VAR 0 5
12033: STR
12034: PUSH
12035: LD_STRING ","
12037: STR
12038: PUSH
12039: LD_VAR 0 6
12043: STR
12044: PUSH
12045: LD_STRING ","
12047: STR
12048: PUSH
12049: LD_VAR 0 7
12053: STR
12054: PUSH
12055: LD_STRING ")
12057: STR
12058: PPUSH
12059: CALL_OW 559
// end else
12063: GO 12072
// ToLua ( getStreamItemsFromMission("","","") ) ;
12065: LD_STRING getStreamItemsFromMission("","","")
12067: PPUSH
12068: CALL_OW 559
// end ;
12072: LD_VAR 0 2
12076: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12077: LD_EXP 26
12081: IFFALSE 12089
12083: PUSH
12084: LD_EXP 31
12088: AND
12089: IFFALSE 12213
12091: GO 12093
12093: DISABLE
12094: LD_INT 0
12096: PPUSH
12097: PPUSH
// begin enable ;
12098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12099: LD_ADDR_VAR 0 2
12103: PUSH
12104: LD_INT 22
12106: PUSH
12107: LD_OWVAR 2
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 2
12118: PUSH
12119: LD_INT 34
12121: PUSH
12122: LD_INT 7
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 34
12131: PUSH
12132: LD_INT 45
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 34
12141: PUSH
12142: LD_INT 28
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 34
12151: PUSH
12152: LD_INT 47
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 69
12174: ST_TO_ADDR
// if not tmp then
12175: LD_VAR 0 2
12179: NOT
12180: IFFALSE 12184
// exit ;
12182: GO 12213
// for i in tmp do
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_VAR 0 2
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12211
// begin SetLives ( i , 0 ) ;
12197: LD_VAR 0 1
12201: PPUSH
12202: LD_INT 0
12204: PPUSH
12205: CALL_OW 234
// end ;
12209: GO 12194
12211: POP
12212: POP
// end ;
12213: PPOPN 2
12215: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12216: LD_EXP 26
12220: IFFALSE 12228
12222: PUSH
12223: LD_EXP 32
12227: AND
12228: IFFALSE 12312
12230: GO 12232
12232: DISABLE
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
// begin enable ;
12237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12238: LD_ADDR_VAR 0 2
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_OWVAR 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 32
12257: PUSH
12258: LD_INT 3
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 69
12273: ST_TO_ADDR
// if not tmp then
12274: LD_VAR 0 2
12278: NOT
12279: IFFALSE 12283
// exit ;
12281: GO 12312
// for i in tmp do
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_VAR 0 2
12292: PUSH
12293: FOR_IN
12294: IFFALSE 12310
// begin SetLives ( i , 0 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 234
// end ;
12308: GO 12293
12310: POP
12311: POP
// end ;
12312: PPOPN 2
12314: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12315: LD_EXP 26
12319: IFFALSE 12327
12321: PUSH
12322: LD_EXP 29
12326: AND
12327: IFFALSE 12420
12329: GO 12331
12331: DISABLE
12332: LD_INT 0
12334: PPUSH
// begin enable ;
12335: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12336: LD_ADDR_VAR 0 1
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_OWVAR 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 2
12355: PUSH
12356: LD_INT 25
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 9
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 8
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PPUSH
12396: CALL_OW 69
12400: PUSH
12401: FOR_IN
12402: IFFALSE 12418
// begin SetClass ( i , 1 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 336
// end ;
12416: GO 12401
12418: POP
12419: POP
// end ;
12420: PPOPN 1
12422: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12423: LD_EXP 26
12427: IFFALSE 12435
12429: PUSH
12430: LD_EXP 30
12434: AND
12435: IFFALSE 12447
12437: PUSH
12438: LD_OWVAR 65
12442: PUSH
12443: LD_INT 7
12445: LESS
12446: AND
12447: IFFALSE 12461
12449: GO 12451
12451: DISABLE
// begin enable ;
12452: ENABLE
// game_speed := 7 ;
12453: LD_ADDR_OWVAR 65
12457: PUSH
12458: LD_INT 7
12460: ST_TO_ADDR
// end ;
12461: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12462: LD_EXP 26
12466: IFFALSE 12474
12468: PUSH
12469: LD_EXP 33
12473: AND
12474: IFFALSE 12676
12476: GO 12478
12478: DISABLE
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
12483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12484: LD_ADDR_VAR 0 3
12488: PUSH
12489: LD_INT 81
12491: PUSH
12492: LD_OWVAR 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: ST_TO_ADDR
// if not tmp then
12520: LD_VAR 0 3
12524: NOT
12525: IFFALSE 12529
// exit ;
12527: GO 12676
// if tmp > 5 then
12529: LD_VAR 0 3
12533: PUSH
12534: LD_INT 5
12536: GREATER
12537: IFFALSE 12549
// k := 5 else
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_INT 5
12546: ST_TO_ADDR
12547: GO 12559
// k := tmp ;
12549: LD_ADDR_VAR 0 2
12553: PUSH
12554: LD_VAR 0 3
12558: ST_TO_ADDR
// for i := 1 to k do
12559: LD_ADDR_VAR 0 1
12563: PUSH
12564: DOUBLE
12565: LD_INT 1
12567: DEC
12568: ST_TO_ADDR
12569: LD_VAR 0 2
12573: PUSH
12574: FOR_TO
12575: IFFALSE 12674
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_VAR 0 1
12586: ARRAY
12587: PPUSH
12588: LD_VAR 0 1
12592: PUSH
12593: LD_INT 4
12595: MOD
12596: PUSH
12597: LD_INT 1
12599: PLUS
12600: PPUSH
12601: CALL_OW 259
12605: PUSH
12606: LD_INT 10
12608: LESS
12609: IFFALSE 12672
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12611: LD_VAR 0 3
12615: PUSH
12616: LD_VAR 0 1
12620: ARRAY
12621: PPUSH
12622: LD_VAR 0 1
12626: PUSH
12627: LD_INT 4
12629: MOD
12630: PUSH
12631: LD_INT 1
12633: PLUS
12634: PPUSH
12635: LD_VAR 0 3
12639: PUSH
12640: LD_VAR 0 1
12644: ARRAY
12645: PPUSH
12646: LD_VAR 0 1
12650: PUSH
12651: LD_INT 4
12653: MOD
12654: PUSH
12655: LD_INT 1
12657: PLUS
12658: PPUSH
12659: CALL_OW 259
12663: PUSH
12664: LD_INT 1
12666: PLUS
12667: PPUSH
12668: CALL_OW 237
12672: GO 12574
12674: POP
12675: POP
// end ;
12676: PPOPN 3
12678: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12679: LD_EXP 26
12683: IFFALSE 12691
12685: PUSH
12686: LD_EXP 34
12690: AND
12691: IFFALSE 12711
12693: GO 12695
12695: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12696: LD_INT 4
12698: PPUSH
12699: LD_OWVAR 2
12703: PPUSH
12704: LD_INT 0
12706: PPUSH
12707: CALL_OW 324
12711: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12712: LD_EXP 26
12716: IFFALSE 12724
12718: PUSH
12719: LD_EXP 63
12723: AND
12724: IFFALSE 12744
12726: GO 12728
12728: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12729: LD_INT 19
12731: PPUSH
12732: LD_OWVAR 2
12736: PPUSH
12737: LD_INT 0
12739: PPUSH
12740: CALL_OW 324
12744: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12745: LD_EXP 26
12749: IFFALSE 12757
12751: PUSH
12752: LD_EXP 35
12756: AND
12757: IFFALSE 12859
12759: GO 12761
12761: DISABLE
12762: LD_INT 0
12764: PPUSH
12765: PPUSH
// begin enable ;
12766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 34
12789: PUSH
12790: LD_INT 11
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 34
12799: PUSH
12800: LD_INT 30
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: ST_TO_ADDR
// if not tmp then
12821: LD_VAR 0 2
12825: NOT
12826: IFFALSE 12830
// exit ;
12828: GO 12859
// for i in tmp do
12830: LD_ADDR_VAR 0 1
12834: PUSH
12835: LD_VAR 0 2
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12857
// begin SetLives ( i , 0 ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 234
// end ;
12855: GO 12840
12857: POP
12858: POP
// end ;
12859: PPOPN 2
12861: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12862: LD_EXP 26
12866: IFFALSE 12874
12868: PUSH
12869: LD_EXP 36
12873: AND
12874: IFFALSE 12894
12876: GO 12878
12878: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12879: LD_INT 32
12881: PPUSH
12882: LD_OWVAR 2
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 324
12894: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12895: LD_EXP 26
12899: IFFALSE 12907
12901: PUSH
12902: LD_EXP 37
12906: AND
12907: IFFALSE 13090
12909: GO 12911
12911: DISABLE
12912: LD_INT 0
12914: PPUSH
12915: PPUSH
12916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12917: LD_ADDR_VAR 0 2
12921: PUSH
12922: LD_INT 22
12924: PUSH
12925: LD_OWVAR 2
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 33
12936: PUSH
12937: LD_INT 3
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PPUSH
12948: CALL_OW 69
12952: ST_TO_ADDR
// if not tmp then
12953: LD_VAR 0 2
12957: NOT
12958: IFFALSE 12962
// exit ;
12960: GO 13090
// side := 0 ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// for i := 1 to 8 do
12970: LD_ADDR_VAR 0 1
12974: PUSH
12975: DOUBLE
12976: LD_INT 1
12978: DEC
12979: ST_TO_ADDR
12980: LD_INT 8
12982: PUSH
12983: FOR_TO
12984: IFFALSE 13034
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12986: LD_OWVAR 2
12990: PUSH
12991: LD_VAR 0 1
12995: NONEQUAL
12996: IFFALSE 13018
12998: PUSH
12999: LD_OWVAR 2
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 81
13013: PUSH
13014: LD_INT 2
13016: EQUAL
13017: AND
13018: IFFALSE 13032
// begin side := i ;
13020: LD_ADDR_VAR 0 3
13024: PUSH
13025: LD_VAR 0 1
13029: ST_TO_ADDR
// break ;
13030: GO 13034
// end ;
13032: GO 12983
13034: POP
13035: POP
// if not side then
13036: LD_VAR 0 3
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13090
// for i := 1 to tmp do
13045: LD_ADDR_VAR 0 1
13049: PUSH
13050: DOUBLE
13051: LD_INT 1
13053: DEC
13054: ST_TO_ADDR
13055: LD_VAR 0 2
13059: PUSH
13060: FOR_TO
13061: IFFALSE 13088
// if Prob ( 60 ) then
13063: LD_INT 60
13065: PPUSH
13066: CALL_OW 13
13070: IFFALSE 13086
// SetSide ( i , side ) ;
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: CALL_OW 235
13086: GO 13060
13088: POP
13089: POP
// end ;
13090: PPOPN 3
13092: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13093: LD_EXP 26
13097: IFFALSE 13105
13099: PUSH
13100: LD_EXP 39
13104: AND
13105: IFFALSE 13224
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_OWVAR 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 23
13145: PUSH
13146: LD_INT 0
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: PPUSH
13162: CALL_OW 69
13166: PUSH
13167: FOR_IN
13168: IFFALSE 13222
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 257
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: IN
13198: IFFALSE 13220
// SetClass ( un , rand ( 1 , 4 ) ) ;
13200: LD_VAR 0 1
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: LD_INT 4
13210: PPUSH
13211: CALL_OW 12
13215: PPUSH
13216: CALL_OW 336
13220: GO 13167
13222: POP
13223: POP
// end ;
13224: PPOPN 1
13226: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13227: LD_EXP 26
13231: IFFALSE 13239
13233: PUSH
13234: LD_EXP 38
13238: AND
13239: IFFALSE 13318
13241: GO 13243
13243: DISABLE
13244: LD_INT 0
13246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_OWVAR 2
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 69
13282: ST_TO_ADDR
// if not tmp then
13283: LD_VAR 0 1
13287: NOT
13288: IFFALSE 13292
// exit ;
13290: GO 13318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13292: LD_VAR 0 1
13296: PUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 12
13309: ARRAY
13310: PPUSH
13311: LD_INT 100
13313: PPUSH
13314: CALL_OW 234
// end ;
13318: PPOPN 1
13320: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13321: LD_EXP 26
13325: IFFALSE 13333
13327: PUSH
13328: LD_EXP 40
13332: AND
13333: IFFALSE 13431
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13341: LD_ADDR_VAR 0 1
13345: PUSH
13346: LD_INT 22
13348: PUSH
13349: LD_OWVAR 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 21
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: ST_TO_ADDR
// if not tmp then
13377: LD_VAR 0 1
13381: NOT
13382: IFFALSE 13386
// exit ;
13384: GO 13431
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13386: LD_VAR 0 1
13390: PUSH
13391: LD_INT 1
13393: PPUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 12
13403: ARRAY
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: LD_INT 4
13410: PPUSH
13411: CALL_OW 12
13415: PPUSH
13416: LD_INT 3000
13418: PPUSH
13419: LD_INT 9000
13421: PPUSH
13422: CALL_OW 12
13426: PPUSH
13427: CALL_OW 492
// end ;
13431: PPOPN 1
13433: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13434: LD_EXP 26
13438: IFFALSE 13446
13440: PUSH
13441: LD_EXP 41
13445: AND
13446: IFFALSE 13466
13448: GO 13450
13450: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13451: LD_INT 1
13453: PPUSH
13454: LD_OWVAR 2
13458: PPUSH
13459: LD_INT 0
13461: PPUSH
13462: CALL_OW 324
13466: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13467: LD_EXP 26
13471: IFFALSE 13479
13473: PUSH
13474: LD_EXP 42
13478: AND
13479: IFFALSE 13562
13481: GO 13483
13483: DISABLE
13484: LD_INT 0
13486: PPUSH
13487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13488: LD_ADDR_VAR 0 2
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_OWVAR 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 21
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PPUSH
13519: CALL_OW 69
13523: ST_TO_ADDR
// if not tmp then
13524: LD_VAR 0 2
13528: NOT
13529: IFFALSE 13533
// exit ;
13531: GO 13562
// for i in tmp do
13533: LD_ADDR_VAR 0 1
13537: PUSH
13538: LD_VAR 0 2
13542: PUSH
13543: FOR_IN
13544: IFFALSE 13560
// SetBLevel ( i , 10 ) ;
13546: LD_VAR 0 1
13550: PPUSH
13551: LD_INT 10
13553: PPUSH
13554: CALL_OW 241
13558: GO 13543
13560: POP
13561: POP
// end ;
13562: PPOPN 2
13564: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13565: LD_EXP 26
13569: IFFALSE 13577
13571: PUSH
13572: LD_EXP 43
13576: AND
13577: IFFALSE 13688
13579: GO 13581
13581: DISABLE
13582: LD_INT 0
13584: PPUSH
13585: PPUSH
13586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13587: LD_ADDR_VAR 0 3
13591: PUSH
13592: LD_INT 22
13594: PUSH
13595: LD_OWVAR 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PPUSH
13618: CALL_OW 69
13622: ST_TO_ADDR
// if not tmp then
13623: LD_VAR 0 3
13627: NOT
13628: IFFALSE 13632
// exit ;
13630: GO 13688
// un := tmp [ rand ( 1 , tmp ) ] ;
13632: LD_ADDR_VAR 0 2
13636: PUSH
13637: LD_VAR 0 3
13641: PUSH
13642: LD_INT 1
13644: PPUSH
13645: LD_VAR 0 3
13649: PPUSH
13650: CALL_OW 12
13654: ARRAY
13655: ST_TO_ADDR
// if Crawls ( un ) then
13656: LD_VAR 0 2
13660: PPUSH
13661: CALL_OW 318
13665: IFFALSE 13676
// ComWalk ( un ) ;
13667: LD_VAR 0 2
13671: PPUSH
13672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_INT 5
13683: PPUSH
13684: CALL_OW 336
// end ;
13688: PPOPN 3
13690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13691: LD_EXP 26
13695: IFFALSE 13703
13697: PUSH
13698: LD_EXP 44
13702: AND
13703: IFFALSE 13715
13705: PUSH
13706: LD_OWVAR 67
13710: PUSH
13711: LD_INT 4
13713: LESS
13714: AND
13715: IFFALSE 13734
13717: GO 13719
13719: DISABLE
// begin Difficulty := Difficulty + 1 ;
13720: LD_ADDR_OWVAR 67
13724: PUSH
13725: LD_OWVAR 67
13729: PUSH
13730: LD_INT 1
13732: PLUS
13733: ST_TO_ADDR
// end ;
13734: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13735: LD_EXP 26
13739: IFFALSE 13747
13741: PUSH
13742: LD_EXP 45
13746: AND
13747: IFFALSE 13850
13749: GO 13751
13751: DISABLE
13752: LD_INT 0
13754: PPUSH
// begin for i := 1 to 5 do
13755: LD_ADDR_VAR 0 1
13759: PUSH
13760: DOUBLE
13761: LD_INT 1
13763: DEC
13764: ST_TO_ADDR
13765: LD_INT 5
13767: PUSH
13768: FOR_TO
13769: IFFALSE 13848
// begin uc_nation := nation_nature ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// uc_side := 0 ;
13779: LD_ADDR_OWVAR 20
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13787: LD_ADDR_OWVAR 29
13791: PUSH
13792: LD_INT 12
13794: PUSH
13795: LD_INT 12
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: ST_TO_ADDR
// hc_agressivity := 20 ;
13802: LD_ADDR_OWVAR 35
13806: PUSH
13807: LD_INT 20
13809: ST_TO_ADDR
// hc_class := class_tiger ;
13810: LD_ADDR_OWVAR 28
13814: PUSH
13815: LD_INT 14
13817: ST_TO_ADDR
// hc_gallery :=  ;
13818: LD_ADDR_OWVAR 33
13822: PUSH
13823: LD_STRING 
13825: ST_TO_ADDR
// hc_name :=  ;
13826: LD_ADDR_OWVAR 26
13830: PUSH
13831: LD_STRING 
13833: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13834: CALL_OW 44
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: CALL_OW 51
// end ;
13846: GO 13768
13848: POP
13849: POP
// end ;
13850: PPOPN 1
13852: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13853: LD_EXP 26
13857: IFFALSE 13865
13859: PUSH
13860: LD_EXP 46
13864: AND
13865: IFFALSE 13874
13867: GO 13869
13869: DISABLE
// StreamSibBomb ;
13870: CALL 13875 0 0
13874: END
// export function StreamSibBomb ; var i , x , y ; begin
13875: LD_INT 0
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
// result := false ;
13881: LD_ADDR_VAR 0 1
13885: PUSH
13886: LD_INT 0
13888: ST_TO_ADDR
// for i := 1 to 16 do
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: DOUBLE
13895: LD_INT 1
13897: DEC
13898: ST_TO_ADDR
13899: LD_INT 16
13901: PUSH
13902: FOR_TO
13903: IFFALSE 14102
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: LD_INT 10
13912: PUSH
13913: LD_INT 20
13915: PUSH
13916: LD_INT 30
13918: PUSH
13919: LD_INT 40
13921: PUSH
13922: LD_INT 50
13924: PUSH
13925: LD_INT 60
13927: PUSH
13928: LD_INT 70
13930: PUSH
13931: LD_INT 80
13933: PUSH
13934: LD_INT 90
13936: PUSH
13937: LD_INT 100
13939: PUSH
13940: LD_INT 110
13942: PUSH
13943: LD_INT 120
13945: PUSH
13946: LD_INT 130
13948: PUSH
13949: LD_INT 140
13951: PUSH
13952: LD_INT 150
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 1
13974: PPUSH
13975: LD_INT 15
13977: PPUSH
13978: CALL_OW 12
13982: ARRAY
13983: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13984: LD_ADDR_VAR 0 4
13988: PUSH
13989: LD_INT 10
13991: PUSH
13992: LD_INT 20
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 40
14000: PUSH
14001: LD_INT 50
14003: PUSH
14004: LD_INT 60
14006: PUSH
14007: LD_INT 70
14009: PUSH
14010: LD_INT 80
14012: PUSH
14013: LD_INT 90
14015: PUSH
14016: LD_INT 100
14018: PUSH
14019: LD_INT 110
14021: PUSH
14022: LD_INT 120
14024: PUSH
14025: LD_INT 130
14027: PUSH
14028: LD_INT 140
14030: PUSH
14031: LD_INT 150
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 1
14053: PPUSH
14054: LD_INT 15
14056: PPUSH
14057: CALL_OW 12
14061: ARRAY
14062: ST_TO_ADDR
// if ValidHex ( x , y ) then
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_VAR 0 4
14072: PPUSH
14073: CALL_OW 488
14077: IFFALSE 14100
// begin result := [ x , y ] ;
14079: LD_ADDR_VAR 0 1
14083: PUSH
14084: LD_VAR 0 3
14088: PUSH
14089: LD_VAR 0 4
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// break ;
14098: GO 14102
// end ; end ;
14100: GO 13902
14102: POP
14103: POP
// if result then
14104: LD_VAR 0 1
14108: IFFALSE 14168
// begin ToLua ( playSibBomb() ) ;
14110: LD_STRING playSibBomb()
14112: PPUSH
14113: CALL_OW 559
// wait ( 0 0$14 ) ;
14117: LD_INT 490
14119: PPUSH
14120: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14124: LD_VAR 0 1
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 1
14137: PUSH
14138: LD_INT 2
14140: ARRAY
14141: PPUSH
14142: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14146: LD_VAR 0 1
14150: PUSH
14151: LD_INT 1
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 1
14159: PUSH
14160: LD_INT 2
14162: ARRAY
14163: PPUSH
14164: CALL_OW 429
// end ; end ;
14168: LD_VAR 0 1
14172: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14173: LD_EXP 26
14177: IFFALSE 14185
14179: PUSH
14180: LD_EXP 48
14184: AND
14185: IFFALSE 14197
14187: GO 14189
14189: DISABLE
// YouLost (  ) ;
14190: LD_STRING 
14192: PPUSH
14193: CALL_OW 104
14197: END
// every 0 0$1 trigger StreamModeActive and sFog do
14198: LD_EXP 26
14202: IFFALSE 14210
14204: PUSH
14205: LD_EXP 47
14209: AND
14210: IFFALSE 14224
14212: GO 14214
14214: DISABLE
// FogOff ( your_side ) ;
14215: LD_OWVAR 2
14219: PPUSH
14220: CALL_OW 344
14224: END
// every 0 0$1 trigger StreamModeActive and sSun do
14225: LD_EXP 26
14229: IFFALSE 14237
14231: PUSH
14232: LD_EXP 49
14236: AND
14237: IFFALSE 14265
14239: GO 14241
14241: DISABLE
// begin solar_recharge_percent := 0 ;
14242: LD_ADDR_OWVAR 79
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14250: LD_INT 10500
14252: PPUSH
14253: CALL_OW 67
// solar_recharge_percent := 100 ;
14257: LD_ADDR_OWVAR 79
14261: PUSH
14262: LD_INT 100
14264: ST_TO_ADDR
// end ;
14265: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14266: LD_EXP 26
14270: IFFALSE 14278
14272: PUSH
14273: LD_EXP 50
14277: AND
14278: IFFALSE 14517
14280: GO 14282
14282: DISABLE
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
14287: PPUSH
// begin tmp := [ ] ;
14288: LD_ADDR_VAR 0 3
14292: PUSH
14293: EMPTY
14294: ST_TO_ADDR
// for i := 1 to 6 do
14295: LD_ADDR_VAR 0 1
14299: PUSH
14300: DOUBLE
14301: LD_INT 1
14303: DEC
14304: ST_TO_ADDR
14305: LD_INT 6
14307: PUSH
14308: FOR_TO
14309: IFFALSE 14414
// begin uc_nation := nation_nature ;
14311: LD_ADDR_OWVAR 21
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// uc_side := 0 ;
14319: LD_ADDR_OWVAR 20
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14327: LD_ADDR_OWVAR 29
14331: PUSH
14332: LD_INT 12
14334: PUSH
14335: LD_INT 12
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: ST_TO_ADDR
// hc_agressivity := 20 ;
14342: LD_ADDR_OWVAR 35
14346: PUSH
14347: LD_INT 20
14349: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14350: LD_ADDR_OWVAR 28
14354: PUSH
14355: LD_INT 17
14357: ST_TO_ADDR
// hc_gallery :=  ;
14358: LD_ADDR_OWVAR 33
14362: PUSH
14363: LD_STRING 
14365: ST_TO_ADDR
// hc_name :=  ;
14366: LD_ADDR_OWVAR 26
14370: PUSH
14371: LD_STRING 
14373: ST_TO_ADDR
// un := CreateHuman ;
14374: LD_ADDR_VAR 0 2
14378: PUSH
14379: CALL_OW 44
14383: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_INT 1
14391: PPUSH
14392: CALL_OW 51
// tmp := tmp ^ un ;
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_VAR 0 3
14405: PUSH
14406: LD_VAR 0 2
14410: ADD
14411: ST_TO_ADDR
// end ;
14412: GO 14308
14414: POP
14415: POP
// repeat wait ( 0 0$1 ) ;
14416: LD_INT 35
14418: PPUSH
14419: CALL_OW 67
// for un in tmp do
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: LD_VAR 0 3
14432: PUSH
14433: FOR_IN
14434: IFFALSE 14508
// begin if IsDead ( un ) then
14436: LD_VAR 0 2
14440: PPUSH
14441: CALL_OW 301
14445: IFFALSE 14465
// begin tmp := tmp diff un ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_VAR 0 3
14456: PUSH
14457: LD_VAR 0 2
14461: DIFF
14462: ST_TO_ADDR
// continue ;
14463: GO 14433
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14465: LD_VAR 0 2
14469: PPUSH
14470: LD_INT 3
14472: PUSH
14473: LD_INT 22
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: PPUSH
14492: LD_VAR 0 2
14496: PPUSH
14497: CALL_OW 74
14501: PPUSH
14502: CALL_OW 115
// end ;
14506: GO 14433
14508: POP
14509: POP
// until not tmp ;
14510: LD_VAR 0 3
14514: NOT
14515: IFFALSE 14416
// end ;
14517: PPOPN 3
14519: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14520: LD_EXP 26
14524: IFFALSE 14532
14526: PUSH
14527: LD_EXP 51
14531: AND
14532: IFFALSE 14586
14534: GO 14536
14536: DISABLE
// begin ToLua ( displayTroll(); ) ;
14537: LD_STRING displayTroll();
14539: PPUSH
14540: CALL_OW 559
// wait ( 3 3$00 ) ;
14544: LD_INT 6300
14546: PPUSH
14547: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14551: LD_STRING hideTroll();
14553: PPUSH
14554: CALL_OW 559
// wait ( 1 1$00 ) ;
14558: LD_INT 2100
14560: PPUSH
14561: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14565: LD_STRING displayTroll();
14567: PPUSH
14568: CALL_OW 559
// wait ( 1 1$00 ) ;
14572: LD_INT 2100
14574: PPUSH
14575: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14579: LD_STRING hideTroll();
14581: PPUSH
14582: CALL_OW 559
// end ;
14586: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14587: LD_EXP 26
14591: IFFALSE 14599
14593: PUSH
14594: LD_EXP 52
14598: AND
14599: IFFALSE 14662
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
// begin p := 0 ;
14607: LD_ADDR_VAR 0 1
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// repeat game_speed := 1 ;
14615: LD_ADDR_OWVAR 65
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14623: LD_INT 35
14625: PPUSH
14626: CALL_OW 67
// p := p + 1 ;
14630: LD_ADDR_VAR 0 1
14634: PUSH
14635: LD_VAR 0 1
14639: PUSH
14640: LD_INT 1
14642: PLUS
14643: ST_TO_ADDR
// until p >= 60 ;
14644: LD_VAR 0 1
14648: PUSH
14649: LD_INT 60
14651: GREATEREQUAL
14652: IFFALSE 14615
// game_speed := 4 ;
14654: LD_ADDR_OWVAR 65
14658: PUSH
14659: LD_INT 4
14661: ST_TO_ADDR
// end ;
14662: PPOPN 1
14664: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14665: LD_EXP 26
14669: IFFALSE 14677
14671: PUSH
14672: LD_EXP 53
14676: AND
14677: IFFALSE 14823
14679: GO 14681
14681: DISABLE
14682: LD_INT 0
14684: PPUSH
14685: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_OWVAR 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 30
14708: PUSH
14709: LD_INT 0
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: ST_TO_ADDR
// if not depot then
14740: LD_VAR 0 1
14744: NOT
14745: IFFALSE 14749
// exit ;
14747: GO 14823
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_VAR 0 1
14758: PUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 12
14771: ARRAY
14772: PPUSH
14773: CALL_OW 274
14777: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14778: LD_VAR 0 2
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: LD_INT 0
14788: PPUSH
14789: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14793: LD_VAR 0 2
14797: PPUSH
14798: LD_INT 2
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14808: LD_VAR 0 2
14812: PPUSH
14813: LD_INT 3
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 277
// end ;
14823: PPOPN 2
14825: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14826: LD_EXP 26
14830: IFFALSE 14838
14832: PUSH
14833: LD_EXP 54
14837: AND
14838: IFFALSE 14935
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14846: LD_ADDR_VAR 0 1
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_OWVAR 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 69
14899: ST_TO_ADDR
// if not tmp then
14900: LD_VAR 0 1
14904: NOT
14905: IFFALSE 14909
// exit ;
14907: GO 14935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14909: LD_VAR 0 1
14913: PUSH
14914: LD_INT 1
14916: PPUSH
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 12
14926: ARRAY
14927: PPUSH
14928: LD_INT 200
14930: PPUSH
14931: CALL_OW 234
// end ;
14935: PPOPN 1
14937: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14938: LD_EXP 26
14942: IFFALSE 14950
14944: PUSH
14945: LD_EXP 55
14949: AND
14950: IFFALSE 15029
14952: GO 14954
14954: DISABLE
14955: LD_INT 0
14957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14958: LD_ADDR_VAR 0 1
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_OWVAR 2
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 21
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: ST_TO_ADDR
// if not tmp then
14994: LD_VAR 0 1
14998: NOT
14999: IFFALSE 15003
// exit ;
15001: GO 15029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15003: LD_VAR 0 1
15007: PUSH
15008: LD_INT 1
15010: PPUSH
15011: LD_VAR 0 1
15015: PPUSH
15016: CALL_OW 12
15020: ARRAY
15021: PPUSH
15022: LD_INT 60
15024: PPUSH
15025: CALL_OW 234
// end ;
15029: PPOPN 1
15031: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15032: LD_EXP 26
15036: IFFALSE 15044
15038: PUSH
15039: LD_EXP 56
15043: AND
15044: IFFALSE 15143
15046: GO 15048
15048: DISABLE
15049: LD_INT 0
15051: PPUSH
15052: PPUSH
// begin enable ;
15053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15054: LD_ADDR_VAR 0 1
15058: PUSH
15059: LD_INT 22
15061: PUSH
15062: LD_OWVAR 2
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 61
15073: PUSH
15074: EMPTY
15075: LIST
15076: PUSH
15077: LD_INT 33
15079: PUSH
15080: LD_INT 2
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: ST_TO_ADDR
// if not tmp then
15097: LD_VAR 0 1
15101: NOT
15102: IFFALSE 15106
// exit ;
15104: GO 15143
// for i in tmp do
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: FOR_IN
15117: IFFALSE 15141
// if IsControledBy ( i ) then
15119: LD_VAR 0 2
15123: PPUSH
15124: CALL_OW 312
15128: IFFALSE 15139
// ComUnlink ( i ) ;
15130: LD_VAR 0 2
15134: PPUSH
15135: CALL_OW 136
15139: GO 15116
15141: POP
15142: POP
// end ;
15143: PPOPN 2
15145: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15146: LD_EXP 26
15150: IFFALSE 15158
15152: PUSH
15153: LD_EXP 57
15157: AND
15158: IFFALSE 15298
15160: GO 15162
15162: DISABLE
15163: LD_INT 0
15165: PPUSH
15166: PPUSH
// begin ToLua ( displayPowell(); ) ;
15167: LD_STRING displayPowell();
15169: PPUSH
15170: CALL_OW 559
// uc_side := 0 ;
15174: LD_ADDR_OWVAR 20
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// uc_nation := 2 ;
15182: LD_ADDR_OWVAR 21
15186: PUSH
15187: LD_INT 2
15189: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15190: LD_ADDR_OWVAR 37
15194: PUSH
15195: LD_INT 14
15197: ST_TO_ADDR
// vc_engine := engine_siberite ;
15198: LD_ADDR_OWVAR 39
15202: PUSH
15203: LD_INT 3
15205: ST_TO_ADDR
// vc_control := control_apeman ;
15206: LD_ADDR_OWVAR 38
15210: PUSH
15211: LD_INT 5
15213: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15214: LD_ADDR_OWVAR 40
15218: PUSH
15219: LD_INT 29
15221: ST_TO_ADDR
// un := CreateVehicle ;
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: CALL_OW 45
15231: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15232: LD_VAR 0 2
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15244: LD_INT 35
15246: PPUSH
15247: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15251: LD_VAR 0 2
15255: PPUSH
15256: LD_INT 22
15258: PUSH
15259: LD_OWVAR 2
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PPUSH
15268: CALL_OW 69
15272: PPUSH
15273: LD_VAR 0 2
15277: PPUSH
15278: CALL_OW 74
15282: PPUSH
15283: CALL_OW 115
// until IsDead ( un ) ;
15287: LD_VAR 0 2
15291: PPUSH
15292: CALL_OW 301
15296: IFFALSE 15244
// end ;
15298: PPOPN 2
15300: END
// every 0 0$1 trigger StreamModeActive and sStu do
15301: LD_EXP 26
15305: IFFALSE 15313
15307: PUSH
15308: LD_EXP 65
15312: AND
15313: IFFALSE 15329
15315: GO 15317
15317: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15318: LD_STRING displayStucuk();
15320: PPUSH
15321: CALL_OW 559
// ResetFog ;
15325: CALL_OW 335
// end ;
15329: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15330: LD_EXP 26
15334: IFFALSE 15342
15336: PUSH
15337: LD_EXP 58
15341: AND
15342: IFFALSE 15483
15344: GO 15346
15346: DISABLE
15347: LD_INT 0
15349: PPUSH
15350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15351: LD_ADDR_VAR 0 2
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_OWVAR 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 2
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15483
// un := tmp [ rand ( 1 , tmp ) ] ;
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_VAR 0 2
15405: PUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PPUSH
15414: CALL_OW 12
15418: ARRAY
15419: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15420: LD_VAR 0 1
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_OWVAR 3
15441: PUSH
15442: LD_VAR 0 1
15446: DIFF
15447: PPUSH
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 74
15457: PPUSH
15458: CALL_OW 115
// wait ( 0 0$20 ) ;
15462: LD_INT 700
15464: PPUSH
15465: CALL_OW 67
// SetSide ( un , your_side ) ;
15469: LD_VAR 0 1
15473: PPUSH
15474: LD_OWVAR 2
15478: PPUSH
15479: CALL_OW 235
// end ;
15483: PPOPN 2
15485: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15486: LD_EXP 26
15490: IFFALSE 15498
15492: PUSH
15493: LD_EXP 59
15497: AND
15498: IFFALSE 15604
15500: GO 15502
15502: DISABLE
15503: LD_INT 0
15505: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15506: LD_ADDR_VAR 0 1
15510: PUSH
15511: LD_INT 22
15513: PUSH
15514: LD_OWVAR 2
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 0
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 30
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PPUSH
15555: CALL_OW 69
15559: ST_TO_ADDR
// if not depot then
15560: LD_VAR 0 1
15564: NOT
15565: IFFALSE 15569
// exit ;
15567: GO 15604
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15569: LD_VAR 0 1
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: CALL_OW 250
15582: PPUSH
15583: LD_VAR 0 1
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: CALL_OW 251
15596: PPUSH
15597: LD_INT 70
15599: PPUSH
15600: CALL_OW 495
// end ;
15604: PPOPN 1
15606: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15607: LD_EXP 26
15611: IFFALSE 15619
15613: PUSH
15614: LD_EXP 60
15618: AND
15619: IFFALSE 15830
15621: GO 15623
15623: DISABLE
15624: LD_INT 0
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15631: LD_ADDR_VAR 0 5
15635: PUSH
15636: LD_INT 22
15638: PUSH
15639: LD_OWVAR 2
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 21
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PPUSH
15662: CALL_OW 69
15666: ST_TO_ADDR
// if not tmp then
15667: LD_VAR 0 5
15671: NOT
15672: IFFALSE 15676
// exit ;
15674: GO 15830
// for i in tmp do
15676: LD_ADDR_VAR 0 1
15680: PUSH
15681: LD_VAR 0 5
15685: PUSH
15686: FOR_IN
15687: IFFALSE 15828
// begin d := rand ( 0 , 5 ) ;
15689: LD_ADDR_VAR 0 4
15693: PUSH
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 5
15699: PPUSH
15700: CALL_OW 12
15704: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15705: LD_ADDR_VAR 0 2
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 250
15719: PPUSH
15720: LD_VAR 0 4
15724: PPUSH
15725: LD_INT 3
15727: PPUSH
15728: LD_INT 12
15730: PPUSH
15731: CALL_OW 12
15735: PPUSH
15736: CALL_OW 272
15740: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 251
15755: PPUSH
15756: LD_VAR 0 4
15760: PPUSH
15761: LD_INT 3
15763: PPUSH
15764: LD_INT 12
15766: PPUSH
15767: CALL_OW 12
15771: PPUSH
15772: CALL_OW 273
15776: ST_TO_ADDR
// if ValidHex ( x , y ) then
15777: LD_VAR 0 2
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: CALL_OW 488
15791: IFFALSE 15826
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15793: LD_VAR 0 1
15797: PPUSH
15798: LD_VAR 0 2
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: LD_INT 3
15810: PPUSH
15811: LD_INT 6
15813: PPUSH
15814: CALL_OW 12
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 483
// end ;
15826: GO 15686
15828: POP
15829: POP
// end ;
15830: PPOPN 5
15832: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15833: LD_EXP 26
15837: IFFALSE 15845
15839: PUSH
15840: LD_EXP 61
15844: AND
15845: IFFALSE 15939
15847: GO 15849
15849: DISABLE
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15854: LD_ADDR_VAR 0 2
15858: PUSH
15859: LD_INT 22
15861: PUSH
15862: LD_OWVAR 2
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 32
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 21
15883: PUSH
15884: LD_INT 2
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: PPUSH
15896: CALL_OW 69
15900: ST_TO_ADDR
// if not tmp then
15901: LD_VAR 0 2
15905: NOT
15906: IFFALSE 15910
// exit ;
15908: GO 15939
// for i in tmp do
15910: LD_ADDR_VAR 0 1
15914: PUSH
15915: LD_VAR 0 2
15919: PUSH
15920: FOR_IN
15921: IFFALSE 15937
// SetFuel ( i , 0 ) ;
15923: LD_VAR 0 1
15927: PPUSH
15928: LD_INT 0
15930: PPUSH
15931: CALL_OW 240
15935: GO 15920
15937: POP
15938: POP
// end ;
15939: PPOPN 2
15941: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15942: LD_EXP 26
15946: IFFALSE 15954
15948: PUSH
15949: LD_EXP 62
15953: AND
15954: IFFALSE 16020
15956: GO 15958
15958: DISABLE
15959: LD_INT 0
15961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15962: LD_ADDR_VAR 0 1
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_OWVAR 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 30
15981: PUSH
15982: LD_INT 29
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: ST_TO_ADDR
// if not tmp then
15998: LD_VAR 0 1
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16020
// DestroyUnit ( tmp [ 1 ] ) ;
16007: LD_VAR 0 1
16011: PUSH
16012: LD_INT 1
16014: ARRAY
16015: PPUSH
16016: CALL_OW 65
// end ;
16020: PPOPN 1
16022: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16023: LD_EXP 26
16027: IFFALSE 16035
16029: PUSH
16030: LD_EXP 64
16034: AND
16035: IFFALSE 16164
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
// begin uc_side := 0 ;
16043: LD_ADDR_OWVAR 20
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// uc_nation := nation_arabian ;
16051: LD_ADDR_OWVAR 21
16055: PUSH
16056: LD_INT 2
16058: ST_TO_ADDR
// hc_gallery :=  ;
16059: LD_ADDR_OWVAR 33
16063: PUSH
16064: LD_STRING 
16066: ST_TO_ADDR
// hc_name :=  ;
16067: LD_ADDR_OWVAR 26
16071: PUSH
16072: LD_STRING 
16074: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 11
16080: PPUSH
16081: LD_INT 10
16083: PPUSH
16084: CALL_OW 380
// un := CreateHuman ;
16088: LD_ADDR_VAR 0 1
16092: PUSH
16093: CALL_OW 44
16097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16098: LD_VAR 0 1
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16110: LD_INT 35
16112: PPUSH
16113: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16117: LD_VAR 0 1
16121: PPUSH
16122: LD_INT 22
16124: PUSH
16125: LD_OWVAR 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PPUSH
16134: CALL_OW 69
16138: PPUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 74
16148: PPUSH
16149: CALL_OW 115
// until IsDead ( un ) ;
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 301
16162: IFFALSE 16110
// end ;
16164: PPOPN 1
16166: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16167: LD_EXP 26
16171: IFFALSE 16179
16173: PUSH
16174: LD_EXP 66
16178: AND
16179: IFFALSE 16191
16181: GO 16183
16183: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16184: LD_STRING earthquake(getX(game), 0, 32)
16186: PPUSH
16187: CALL_OW 559
16191: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16192: LD_EXP 26
16196: IFFALSE 16204
16198: PUSH
16199: LD_EXP 67
16203: AND
16204: IFFALSE 16295
16206: GO 16208
16208: DISABLE
16209: LD_INT 0
16211: PPUSH
// begin enable ;
16212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16213: LD_ADDR_VAR 0 1
16217: PUSH
16218: LD_INT 22
16220: PUSH
16221: LD_OWVAR 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 33
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 1
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16269: LD_VAR 0 1
16273: PUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: PPUSH
16288: LD_INT 1
16290: PPUSH
16291: CALL_OW 234
// end ;
16295: PPOPN 1
16297: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16298: LD_EXP 26
16302: IFFALSE 16310
16304: PUSH
16305: LD_EXP 68
16309: AND
16310: IFFALSE 16451
16312: GO 16314
16314: DISABLE
16315: LD_INT 0
16317: PPUSH
16318: PPUSH
16319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_INT 22
16327: PUSH
16328: LD_OWVAR 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 25
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: ST_TO_ADDR
// if not tmp then
16356: LD_VAR 0 3
16360: NOT
16361: IFFALSE 16365
// exit ;
16363: GO 16451
// un := tmp [ rand ( 1 , tmp ) ] ;
16365: LD_ADDR_VAR 0 2
16369: PUSH
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 1
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: ST_TO_ADDR
// if Crawls ( un ) then
16389: LD_VAR 0 2
16393: PPUSH
16394: CALL_OW 318
16398: IFFALSE 16409
// ComWalk ( un ) ;
16400: LD_VAR 0 2
16404: PPUSH
16405: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16409: LD_VAR 0 2
16413: PPUSH
16414: LD_INT 9
16416: PPUSH
16417: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16421: LD_INT 28
16423: PPUSH
16424: LD_OWVAR 2
16428: PPUSH
16429: LD_INT 2
16431: PPUSH
16432: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16436: LD_INT 29
16438: PPUSH
16439: LD_OWVAR 2
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: CALL_OW 322
// end ;
16451: PPOPN 3
16453: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16454: LD_EXP 26
16458: IFFALSE 16466
16460: PUSH
16461: LD_EXP 69
16465: AND
16466: IFFALSE 16577
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
16475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_INT 22
16483: PUSH
16484: LD_OWVAR 2
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 25
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 3
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 16577
// un := tmp [ rand ( 1 , tmp ) ] ;
16521: LD_ADDR_VAR 0 2
16525: PUSH
16526: LD_VAR 0 3
16530: PUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: CALL_OW 12
16543: ARRAY
16544: ST_TO_ADDR
// if Crawls ( un ) then
16545: LD_VAR 0 2
16549: PPUSH
16550: CALL_OW 318
16554: IFFALSE 16565
// ComWalk ( un ) ;
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_INT 8
16572: PPUSH
16573: CALL_OW 336
// end ;
16577: PPOPN 3
16579: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16580: LD_EXP 26
16584: IFFALSE 16592
16586: PUSH
16587: LD_EXP 70
16591: AND
16592: IFFALSE 16736
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
16600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_INT 22
16608: PUSH
16609: LD_OWVAR 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 34
16633: PUSH
16634: LD_INT 12
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 34
16643: PUSH
16644: LD_INT 51
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 34
16653: PUSH
16654: LD_INT 32
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: PPUSH
16672: CALL_OW 69
16676: ST_TO_ADDR
// if not tmp then
16677: LD_VAR 0 2
16681: NOT
16682: IFFALSE 16686
// exit ;
16684: GO 16736
// for i in tmp do
16686: LD_ADDR_VAR 0 1
16690: PUSH
16691: LD_VAR 0 2
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16734
// if GetCargo ( i , mat_artifact ) = 0 then
16699: LD_VAR 0 1
16703: PPUSH
16704: LD_INT 4
16706: PPUSH
16707: CALL_OW 289
16711: PUSH
16712: LD_INT 0
16714: EQUAL
16715: IFFALSE 16732
// SetCargo ( i , mat_siberit , 100 ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_INT 3
16724: PPUSH
16725: LD_INT 100
16727: PPUSH
16728: CALL_OW 290
16732: GO 16696
16734: POP
16735: POP
// end ;
16736: PPOPN 2
16738: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16739: LD_EXP 26
16743: IFFALSE 16751
16745: PUSH
16746: LD_EXP 71
16750: AND
16751: IFFALSE 16934
16753: GO 16755
16755: DISABLE
16756: LD_INT 0
16758: PPUSH
16759: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16760: LD_ADDR_VAR 0 2
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_OWVAR 2
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: ST_TO_ADDR
// if not tmp then
16782: LD_VAR 0 2
16786: NOT
16787: IFFALSE 16791
// exit ;
16789: GO 16934
// for i := 1 to 2 do
16791: LD_ADDR_VAR 0 1
16795: PUSH
16796: DOUBLE
16797: LD_INT 1
16799: DEC
16800: ST_TO_ADDR
16801: LD_INT 2
16803: PUSH
16804: FOR_TO
16805: IFFALSE 16932
// begin uc_side := your_side ;
16807: LD_ADDR_OWVAR 20
16811: PUSH
16812: LD_OWVAR 2
16816: ST_TO_ADDR
// uc_nation := nation_american ;
16817: LD_ADDR_OWVAR 21
16821: PUSH
16822: LD_INT 1
16824: ST_TO_ADDR
// vc_chassis := us_morphling ;
16825: LD_ADDR_OWVAR 37
16829: PUSH
16830: LD_INT 5
16832: ST_TO_ADDR
// vc_engine := engine_siberite ;
16833: LD_ADDR_OWVAR 39
16837: PUSH
16838: LD_INT 3
16840: ST_TO_ADDR
// vc_control := control_computer ;
16841: LD_ADDR_OWVAR 38
16845: PUSH
16846: LD_INT 3
16848: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16849: LD_ADDR_OWVAR 40
16853: PUSH
16854: LD_INT 10
16856: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16857: LD_VAR 0 2
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: CALL_OW 310
16870: NOT
16871: IFFALSE 16918
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16873: CALL_OW 45
16877: PPUSH
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: PPUSH
16887: CALL_OW 250
16891: PPUSH
16892: LD_VAR 0 2
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: CALL_OW 251
16905: PPUSH
16906: LD_INT 12
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 50
16916: GO 16930
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16918: CALL_OW 45
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 51
// end ;
16930: GO 16804
16932: POP
16933: POP
// end ;
16934: PPOPN 2
16936: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16937: LD_EXP 26
16941: IFFALSE 16949
16943: PUSH
16944: LD_EXP 72
16948: AND
16949: IFFALSE 17171
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16962: LD_ADDR_VAR 0 6
16966: PUSH
16967: LD_INT 22
16969: PUSH
16970: LD_OWVAR 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 21
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 3
16991: PUSH
16992: LD_INT 23
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: PPUSH
17011: CALL_OW 69
17015: ST_TO_ADDR
// if not tmp then
17016: LD_VAR 0 6
17020: NOT
17021: IFFALSE 17025
// exit ;
17023: GO 17171
// s1 := rand ( 1 , 4 ) ;
17025: LD_ADDR_VAR 0 2
17029: PUSH
17030: LD_INT 1
17032: PPUSH
17033: LD_INT 4
17035: PPUSH
17036: CALL_OW 12
17040: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17041: LD_ADDR_VAR 0 4
17045: PUSH
17046: LD_VAR 0 6
17050: PUSH
17051: LD_INT 1
17053: ARRAY
17054: PPUSH
17055: LD_VAR 0 2
17059: PPUSH
17060: CALL_OW 259
17064: ST_TO_ADDR
// if s1 = 1 then
17065: LD_VAR 0 2
17069: PUSH
17070: LD_INT 1
17072: EQUAL
17073: IFFALSE 17093
// s2 := rand ( 2 , 4 ) else
17075: LD_ADDR_VAR 0 3
17079: PUSH
17080: LD_INT 2
17082: PPUSH
17083: LD_INT 4
17085: PPUSH
17086: CALL_OW 12
17090: ST_TO_ADDR
17091: GO 17101
// s2 := 1 ;
17093: LD_ADDR_VAR 0 3
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17101: LD_ADDR_VAR 0 5
17105: PUSH
17106: LD_VAR 0 6
17110: PUSH
17111: LD_INT 1
17113: ARRAY
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: CALL_OW 259
17124: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17125: LD_VAR 0 6
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: LD_VAR 0 2
17138: PPUSH
17139: LD_VAR 0 5
17143: PPUSH
17144: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17148: LD_VAR 0 6
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: PPUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: LD_VAR 0 4
17166: PPUSH
17167: CALL_OW 237
// end ;
17171: PPOPN 6
17173: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17174: LD_EXP 26
17178: IFFALSE 17186
17180: PUSH
17181: LD_EXP 73
17185: AND
17186: IFFALSE 17265
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17194: LD_ADDR_VAR 0 1
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 1
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17239: LD_VAR 0 1
17243: PUSH
17244: LD_INT 1
17246: PPUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 12
17256: ARRAY
17257: PPUSH
17258: LD_INT 1
17260: PPUSH
17261: CALL_OW 234
// end ;
17265: PPOPN 1
17267: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17268: LD_EXP 26
17272: IFFALSE 17280
17274: PUSH
17275: LD_EXP 74
17279: AND
17280: IFFALSE 17392
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
17288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17289: LD_ADDR_VAR 0 2
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_OWVAR 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 2
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: LD_INT 27
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 30
17321: PUSH
17322: LD_INT 26
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 30
17331: PUSH
17332: LD_INT 28
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: ST_TO_ADDR
// if not tmp then
17354: LD_VAR 0 2
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17392
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17390
// SetLives ( i , 1 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 1
17383: PPUSH
17384: CALL_OW 234
17388: GO 17373
17390: POP
17391: POP
// end ;
17392: PPOPN 2
17394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17395: LD_EXP 26
17399: IFFALSE 17407
17401: PUSH
17402: LD_EXP 75
17406: AND
17407: IFFALSE 17694
17409: GO 17411
17411: DISABLE
17412: LD_INT 0
17414: PPUSH
17415: PPUSH
17416: PPUSH
// begin i := rand ( 1 , 7 ) ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_INT 1
17424: PPUSH
17425: LD_INT 7
17427: PPUSH
17428: CALL_OW 12
17432: ST_TO_ADDR
// case i of 1 :
17433: LD_VAR 0 1
17437: PUSH
17438: LD_INT 1
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17446
17444: GO 17456
17446: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17447: LD_STRING earthquake(getX(game), 0, 32)
17449: PPUSH
17450: CALL_OW 559
17454: GO 17694
17456: LD_INT 2
17458: DOUBLE
17459: EQUAL
17460: IFTRUE 17464
17462: GO 17478
17464: POP
// begin ToLua ( displayStucuk(); ) ;
17465: LD_STRING displayStucuk();
17467: PPUSH
17468: CALL_OW 559
// ResetFog ;
17472: CALL_OW 335
// end ; 3 :
17476: GO 17694
17478: LD_INT 3
17480: DOUBLE
17481: EQUAL
17482: IFTRUE 17486
17484: GO 17590
17486: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_INT 22
17494: PUSH
17495: LD_OWVAR 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 25
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17694
// un := tmp [ rand ( 1 , tmp ) ] ;
17532: LD_ADDR_VAR 0 3
17536: PUSH
17537: LD_VAR 0 2
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 2
17549: PPUSH
17550: CALL_OW 12
17554: ARRAY
17555: ST_TO_ADDR
// if Crawls ( un ) then
17556: LD_VAR 0 3
17560: PPUSH
17561: CALL_OW 318
17565: IFFALSE 17576
// ComWalk ( un ) ;
17567: LD_VAR 0 3
17571: PPUSH
17572: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17576: LD_VAR 0 3
17580: PPUSH
17581: LD_INT 8
17583: PPUSH
17584: CALL_OW 336
// end ; 4 :
17588: GO 17694
17590: LD_INT 4
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17672
17598: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17599: LD_ADDR_VAR 0 2
17603: PUSH
17604: LD_INT 22
17606: PUSH
17607: LD_OWVAR 2
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 30
17618: PUSH
17619: LD_INT 29
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PPUSH
17630: CALL_OW 69
17634: ST_TO_ADDR
// if not tmp then
17635: LD_VAR 0 2
17639: NOT
17640: IFFALSE 17644
// exit ;
17642: GO 17694
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17644: LD_VAR 0 2
17648: PUSH
17649: LD_INT 1
17651: ARRAY
17652: PPUSH
17653: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17657: LD_VAR 0 2
17661: PUSH
17662: LD_INT 1
17664: ARRAY
17665: PPUSH
17666: CALL_OW 65
// end ; 5 .. 7 :
17670: GO 17694
17672: LD_INT 5
17674: DOUBLE
17675: GREATEREQUAL
17676: IFFALSE 17684
17678: LD_INT 7
17680: DOUBLE
17681: LESSEQUAL
17682: IFTRUE 17686
17684: GO 17693
17686: POP
// StreamSibBomb ; end ;
17687: CALL 13875 0 0
17691: GO 17694
17693: POP
// end ;
17694: PPOPN 3
17696: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17697: LD_EXP 26
17701: IFFALSE 17709
17703: PUSH
17704: LD_EXP 76
17708: AND
17709: IFFALSE 17865
17711: GO 17713
17713: DISABLE
17714: LD_INT 0
17716: PPUSH
17717: PPUSH
17718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_INT 81
17726: PUSH
17727: LD_OWVAR 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 21
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 21
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PPUSH
17768: CALL_OW 69
17772: ST_TO_ADDR
// if not tmp then
17773: LD_VAR 0 2
17777: NOT
17778: IFFALSE 17782
// exit ;
17780: GO 17865
// p := 0 ;
17782: LD_ADDR_VAR 0 3
17786: PUSH
17787: LD_INT 0
17789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17790: LD_INT 35
17792: PPUSH
17793: CALL_OW 67
// p := p + 1 ;
17797: LD_ADDR_VAR 0 3
17801: PUSH
17802: LD_VAR 0 3
17806: PUSH
17807: LD_INT 1
17809: PLUS
17810: ST_TO_ADDR
// for i in tmp do
17811: LD_ADDR_VAR 0 1
17815: PUSH
17816: LD_VAR 0 2
17820: PUSH
17821: FOR_IN
17822: IFFALSE 17853
// if GetLives ( i ) < 1000 then
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 256
17833: PUSH
17834: LD_INT 1000
17836: LESS
17837: IFFALSE 17851
// SetLives ( i , 1000 ) ;
17839: LD_VAR 0 1
17843: PPUSH
17844: LD_INT 1000
17846: PPUSH
17847: CALL_OW 234
17851: GO 17821
17853: POP
17854: POP
// until p > 20 ;
17855: LD_VAR 0 3
17859: PUSH
17860: LD_INT 20
17862: GREATER
17863: IFFALSE 17790
// end ;
17865: PPOPN 3
17867: END
// every 0 0$1 trigger StreamModeActive and sTime do
17868: LD_EXP 26
17872: IFFALSE 17880
17874: PUSH
17875: LD_EXP 77
17879: AND
17880: IFFALSE 17915
17882: GO 17884
17884: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17885: LD_INT 28
17887: PPUSH
17888: LD_OWVAR 2
17892: PPUSH
17893: LD_INT 2
17895: PPUSH
17896: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17900: LD_INT 30
17902: PPUSH
17903: LD_OWVAR 2
17907: PPUSH
17908: LD_INT 2
17910: PPUSH
17911: CALL_OW 322
// end ;
17915: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17916: LD_EXP 26
17920: IFFALSE 17928
17922: PUSH
17923: LD_EXP 78
17927: AND
17928: IFFALSE 18049
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_OWVAR 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: LD_INT 23
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 2
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18049
// for i in tmp do
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_VAR 0 2
18009: PUSH
18010: FOR_IN
18011: IFFALSE 18047
// begin if Crawls ( i ) then
18013: LD_VAR 0 1
18017: PPUSH
18018: CALL_OW 318
18022: IFFALSE 18033
// ComWalk ( i ) ;
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 138
// SetClass ( i , 2 ) ;
18033: LD_VAR 0 1
18037: PPUSH
18038: LD_INT 2
18040: PPUSH
18041: CALL_OW 336
// end ;
18045: GO 18010
18047: POP
18048: POP
// end ;
18049: PPOPN 2
18051: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18052: LD_EXP 26
18056: IFFALSE 18064
18058: PUSH
18059: LD_EXP 79
18063: AND
18064: IFFALSE 18354
18066: GO 18068
18068: DISABLE
18069: LD_INT 0
18071: PPUSH
18072: PPUSH
18073: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18074: LD_OWVAR 2
18078: PPUSH
18079: LD_INT 9
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: LD_INT 1
18087: PPUSH
18088: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18092: LD_INT 9
18094: PPUSH
18095: LD_OWVAR 2
18099: PPUSH
18100: CALL_OW 343
// uc_side := 9 ;
18104: LD_ADDR_OWVAR 20
18108: PUSH
18109: LD_INT 9
18111: ST_TO_ADDR
// uc_nation := 2 ;
18112: LD_ADDR_OWVAR 21
18116: PUSH
18117: LD_INT 2
18119: ST_TO_ADDR
// hc_name := Dark Warrior ;
18120: LD_ADDR_OWVAR 26
18124: PUSH
18125: LD_STRING Dark Warrior
18127: ST_TO_ADDR
// hc_gallery :=  ;
18128: LD_ADDR_OWVAR 33
18132: PUSH
18133: LD_STRING 
18135: ST_TO_ADDR
// hc_noskilllimit := true ;
18136: LD_ADDR_OWVAR 76
18140: PUSH
18141: LD_INT 1
18143: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18144: LD_ADDR_OWVAR 31
18148: PUSH
18149: LD_INT 30
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 30
18157: PUSH
18158: LD_INT 30
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: ST_TO_ADDR
// un := CreateHuman ;
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: CALL_OW 44
18176: ST_TO_ADDR
// hc_noskilllimit := false ;
18177: LD_ADDR_OWVAR 76
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18185: LD_VAR 0 3
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: CALL_OW 51
// ToLua ( playRanger() ) ;
18197: LD_STRING playRanger()
18199: PPUSH
18200: CALL_OW 559
// p := 0 ;
18204: LD_ADDR_VAR 0 2
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18212: LD_INT 35
18214: PPUSH
18215: CALL_OW 67
// p := p + 1 ;
18219: LD_ADDR_VAR 0 2
18223: PUSH
18224: LD_VAR 0 2
18228: PUSH
18229: LD_INT 1
18231: PLUS
18232: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18233: LD_VAR 0 3
18237: PPUSH
18238: CALL_OW 256
18242: PUSH
18243: LD_INT 1000
18245: LESS
18246: IFFALSE 18260
// SetLives ( un , 1000 ) ;
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 1000
18255: PPUSH
18256: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18260: LD_VAR 0 3
18264: PPUSH
18265: LD_INT 81
18267: PUSH
18268: LD_OWVAR 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 91
18279: PUSH
18280: LD_VAR 0 3
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 69
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL_OW 74
18311: PPUSH
18312: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18316: LD_VAR 0 2
18320: PUSH
18321: LD_INT 80
18323: GREATER
18324: IFTRUE 18337
18326: PUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: CALL_OW 301
18336: OR
18337: IFFALSE 18212
// if un then
18339: LD_VAR 0 3
18343: IFFALSE 18354
// RemoveUnit ( un ) ;
18345: LD_VAR 0 3
18349: PPUSH
18350: CALL_OW 64
// end ;
18354: PPOPN 3
18356: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18357: LD_EXP 80
18361: IFFALSE 18477
18363: GO 18365
18365: DISABLE
18366: LD_INT 0
18368: PPUSH
18369: PPUSH
18370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18371: LD_ADDR_VAR 0 2
18375: PUSH
18376: LD_INT 81
18378: PUSH
18379: LD_OWVAR 2
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 21
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18407: LD_STRING playComputer()
18409: PPUSH
18410: CALL_OW 559
// if not tmp then
18414: LD_VAR 0 2
18418: NOT
18419: IFFALSE 18423
// exit ;
18421: GO 18477
// for i in tmp do
18423: LD_ADDR_VAR 0 1
18427: PUSH
18428: LD_VAR 0 2
18432: PUSH
18433: FOR_IN
18434: IFFALSE 18475
// for j := 1 to 4 do
18436: LD_ADDR_VAR 0 3
18440: PUSH
18441: DOUBLE
18442: LD_INT 1
18444: DEC
18445: ST_TO_ADDR
18446: LD_INT 4
18448: PUSH
18449: FOR_TO
18450: IFFALSE 18471
// SetSkill ( i , j , 10 ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_VAR 0 3
18461: PPUSH
18462: LD_INT 10
18464: PPUSH
18465: CALL_OW 237
18469: GO 18449
18471: POP
18472: POP
18473: GO 18433
18475: POP
18476: POP
// end ;
18477: PPOPN 3
18479: END
// every 0 0$1 trigger s30 do var i , tmp ;
18480: LD_EXP 81
18484: IFFALSE 18553
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
18492: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18493: LD_ADDR_VAR 0 2
18497: PUSH
18498: LD_INT 22
18500: PUSH
18501: LD_OWVAR 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: ST_TO_ADDR
// if not tmp then
18515: LD_VAR 0 2
18519: NOT
18520: IFFALSE 18524
// exit ;
18522: GO 18553
// for i in tmp do
18524: LD_ADDR_VAR 0 1
18528: PUSH
18529: LD_VAR 0 2
18533: PUSH
18534: FOR_IN
18535: IFFALSE 18551
// SetLives ( i , 300 ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: LD_INT 300
18544: PPUSH
18545: CALL_OW 234
18549: GO 18534
18551: POP
18552: POP
// end ;
18553: PPOPN 2
18555: END
// every 0 0$1 trigger s60 do var i , tmp ;
18556: LD_EXP 82
18560: IFFALSE 18629
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_INT 22
18576: PUSH
18577: LD_OWVAR 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: ST_TO_ADDR
// if not tmp then
18591: LD_VAR 0 2
18595: NOT
18596: IFFALSE 18600
// exit ;
18598: GO 18629
// for i in tmp do
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: FOR_IN
18611: IFFALSE 18627
// SetLives ( i , 600 ) ;
18613: LD_VAR 0 1
18617: PPUSH
18618: LD_INT 600
18620: PPUSH
18621: CALL_OW 234
18625: GO 18610
18627: POP
18628: POP
// end ;
18629: PPOPN 2
18631: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18632: LD_INT 0
18634: PPUSH
// case cmd of 301 :
18635: LD_VAR 0 1
18639: PUSH
18640: LD_INT 301
18642: DOUBLE
18643: EQUAL
18644: IFTRUE 18648
18646: GO 18680
18648: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18649: LD_VAR 0 6
18653: PPUSH
18654: LD_VAR 0 7
18658: PPUSH
18659: LD_VAR 0 8
18663: PPUSH
18664: LD_VAR 0 4
18668: PPUSH
18669: LD_VAR 0 5
18673: PPUSH
18674: CALL 19893 0 5
18678: GO 18801
18680: LD_INT 302
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18725
18688: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18689: LD_VAR 0 6
18693: PPUSH
18694: LD_VAR 0 7
18698: PPUSH
18699: LD_VAR 0 8
18703: PPUSH
18704: LD_VAR 0 9
18708: PPUSH
18709: LD_VAR 0 4
18713: PPUSH
18714: LD_VAR 0 5
18718: PPUSH
18719: CALL 19984 0 6
18723: GO 18801
18725: LD_INT 303
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18770
18733: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18734: LD_VAR 0 6
18738: PPUSH
18739: LD_VAR 0 7
18743: PPUSH
18744: LD_VAR 0 8
18748: PPUSH
18749: LD_VAR 0 9
18753: PPUSH
18754: LD_VAR 0 4
18758: PPUSH
18759: LD_VAR 0 5
18763: PPUSH
18764: CALL 18806 0 6
18768: GO 18801
18770: LD_INT 304
18772: DOUBLE
18773: EQUAL
18774: IFTRUE 18778
18776: GO 18800
18778: POP
// hHackTeleport ( unit , x , y ) ; end ;
18779: LD_VAR 0 2
18783: PPUSH
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_VAR 0 5
18793: PPUSH
18794: CALL 20577 0 3
18798: GO 18801
18800: POP
// end ;
18801: LD_VAR 0 12
18805: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_INT 1
18817: LESS
18818: IFTRUE 18830
18820: PUSH
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 3
18828: GREATER
18829: OR
18830: IFTRUE 18848
18832: PUSH
18833: LD_VAR 0 5
18837: PPUSH
18838: LD_VAR 0 6
18842: PPUSH
18843: CALL_OW 428
18847: OR
18848: IFFALSE 18852
// exit ;
18850: GO 19580
// uc_side := your_side ;
18852: LD_ADDR_OWVAR 20
18856: PUSH
18857: LD_OWVAR 2
18861: ST_TO_ADDR
// uc_nation := nation ;
18862: LD_ADDR_OWVAR 21
18866: PUSH
18867: LD_VAR 0 1
18871: ST_TO_ADDR
// bc_level = 1 ;
18872: LD_ADDR_OWVAR 43
18876: PUSH
18877: LD_INT 1
18879: ST_TO_ADDR
// case btype of 1 :
18880: LD_VAR 0 2
18884: PUSH
18885: LD_INT 1
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18904
18893: POP
// bc_type := b_depot ; 2 :
18894: LD_ADDR_OWVAR 42
18898: PUSH
18899: LD_INT 0
18901: ST_TO_ADDR
18902: GO 19524
18904: LD_INT 2
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18923
18912: POP
// bc_type := b_warehouse ; 3 :
18913: LD_ADDR_OWVAR 42
18917: PUSH
18918: LD_INT 1
18920: ST_TO_ADDR
18921: GO 19524
18923: LD_INT 3
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 18942
18931: POP
// bc_type := b_lab ; 4 .. 9 :
18932: LD_ADDR_OWVAR 42
18936: PUSH
18937: LD_INT 6
18939: ST_TO_ADDR
18940: GO 19524
18942: LD_INT 4
18944: DOUBLE
18945: GREATEREQUAL
18946: IFFALSE 18954
18948: LD_INT 9
18950: DOUBLE
18951: LESSEQUAL
18952: IFTRUE 18956
18954: GO 19016
18956: POP
// begin bc_type := b_lab_half ;
18957: LD_ADDR_OWVAR 42
18961: PUSH
18962: LD_INT 7
18964: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18965: LD_ADDR_OWVAR 44
18969: PUSH
18970: LD_INT 10
18972: PUSH
18973: LD_INT 11
18975: PUSH
18976: LD_INT 12
18978: PUSH
18979: LD_INT 15
18981: PUSH
18982: LD_INT 14
18984: PUSH
18985: LD_INT 13
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: PUSH
18996: LD_VAR 0 2
19000: PUSH
19001: LD_INT 3
19003: MINUS
19004: ARRAY
19005: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19006: LD_ADDR_OWVAR 45
19010: PUSH
19011: LD_INT 9
19013: ST_TO_ADDR
// end ; 10 .. 13 :
19014: GO 19524
19016: LD_INT 10
19018: DOUBLE
19019: GREATEREQUAL
19020: IFFALSE 19028
19022: LD_INT 13
19024: DOUBLE
19025: LESSEQUAL
19026: IFTRUE 19030
19028: GO 19107
19030: POP
// begin bc_type := b_lab_full ;
19031: LD_ADDR_OWVAR 42
19035: PUSH
19036: LD_INT 8
19038: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19039: LD_ADDR_OWVAR 44
19043: PUSH
19044: LD_INT 10
19046: PUSH
19047: LD_INT 12
19049: PUSH
19050: LD_INT 14
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: LD_VAR 0 2
19066: PUSH
19067: LD_INT 9
19069: MINUS
19070: ARRAY
19071: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19072: LD_ADDR_OWVAR 45
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 15
19082: PUSH
19083: LD_INT 12
19085: PUSH
19086: LD_INT 15
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: LD_VAR 0 2
19099: PUSH
19100: LD_INT 9
19102: MINUS
19103: ARRAY
19104: ST_TO_ADDR
// end ; 14 :
19105: GO 19524
19107: LD_INT 14
19109: DOUBLE
19110: EQUAL
19111: IFTRUE 19115
19113: GO 19126
19115: POP
// bc_type := b_workshop ; 15 :
19116: LD_ADDR_OWVAR 42
19120: PUSH
19121: LD_INT 2
19123: ST_TO_ADDR
19124: GO 19524
19126: LD_INT 15
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19145
19134: POP
// bc_type := b_factory ; 16 :
19135: LD_ADDR_OWVAR 42
19139: PUSH
19140: LD_INT 3
19142: ST_TO_ADDR
19143: GO 19524
19145: LD_INT 16
19147: DOUBLE
19148: EQUAL
19149: IFTRUE 19153
19151: GO 19164
19153: POP
// bc_type := b_ext_gun ; 17 :
19154: LD_ADDR_OWVAR 42
19158: PUSH
19159: LD_INT 17
19161: ST_TO_ADDR
19162: GO 19524
19164: LD_INT 17
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19200
19172: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19173: LD_ADDR_OWVAR 42
19177: PUSH
19178: LD_INT 19
19180: PUSH
19181: LD_INT 23
19183: PUSH
19184: LD_INT 19
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: LD_VAR 0 1
19196: ARRAY
19197: ST_TO_ADDR
19198: GO 19524
19200: LD_INT 18
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19219
19208: POP
// bc_type := b_ext_radar ; 19 :
19209: LD_ADDR_OWVAR 42
19213: PUSH
19214: LD_INT 20
19216: ST_TO_ADDR
19217: GO 19524
19219: LD_INT 19
19221: DOUBLE
19222: EQUAL
19223: IFTRUE 19227
19225: GO 19238
19227: POP
// bc_type := b_ext_radio ; 20 :
19228: LD_ADDR_OWVAR 42
19232: PUSH
19233: LD_INT 22
19235: ST_TO_ADDR
19236: GO 19524
19238: LD_INT 20
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19257
19246: POP
// bc_type := b_ext_siberium ; 21 :
19247: LD_ADDR_OWVAR 42
19251: PUSH
19252: LD_INT 21
19254: ST_TO_ADDR
19255: GO 19524
19257: LD_INT 21
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19276
19265: POP
// bc_type := b_ext_computer ; 22 :
19266: LD_ADDR_OWVAR 42
19270: PUSH
19271: LD_INT 24
19273: ST_TO_ADDR
19274: GO 19524
19276: LD_INT 22
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19295
19284: POP
// bc_type := b_ext_track ; 23 :
19285: LD_ADDR_OWVAR 42
19289: PUSH
19290: LD_INT 16
19292: ST_TO_ADDR
19293: GO 19524
19295: LD_INT 23
19297: DOUBLE
19298: EQUAL
19299: IFTRUE 19303
19301: GO 19314
19303: POP
// bc_type := b_ext_laser ; 24 :
19304: LD_ADDR_OWVAR 42
19308: PUSH
19309: LD_INT 25
19311: ST_TO_ADDR
19312: GO 19524
19314: LD_INT 24
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19333
19322: POP
// bc_type := b_control_tower ; 25 :
19323: LD_ADDR_OWVAR 42
19327: PUSH
19328: LD_INT 36
19330: ST_TO_ADDR
19331: GO 19524
19333: LD_INT 25
19335: DOUBLE
19336: EQUAL
19337: IFTRUE 19341
19339: GO 19352
19341: POP
// bc_type := b_breastwork ; 26 :
19342: LD_ADDR_OWVAR 42
19346: PUSH
19347: LD_INT 31
19349: ST_TO_ADDR
19350: GO 19524
19352: LD_INT 26
19354: DOUBLE
19355: EQUAL
19356: IFTRUE 19360
19358: GO 19371
19360: POP
// bc_type := b_bunker ; 27 :
19361: LD_ADDR_OWVAR 42
19365: PUSH
19366: LD_INT 32
19368: ST_TO_ADDR
19369: GO 19524
19371: LD_INT 27
19373: DOUBLE
19374: EQUAL
19375: IFTRUE 19379
19377: GO 19390
19379: POP
// bc_type := b_turret ; 28 :
19380: LD_ADDR_OWVAR 42
19384: PUSH
19385: LD_INT 33
19387: ST_TO_ADDR
19388: GO 19524
19390: LD_INT 28
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19409
19398: POP
// bc_type := b_armoury ; 29 :
19399: LD_ADDR_OWVAR 42
19403: PUSH
19404: LD_INT 4
19406: ST_TO_ADDR
19407: GO 19524
19409: LD_INT 29
19411: DOUBLE
19412: EQUAL
19413: IFTRUE 19417
19415: GO 19428
19417: POP
// bc_type := b_barracks ; 30 :
19418: LD_ADDR_OWVAR 42
19422: PUSH
19423: LD_INT 5
19425: ST_TO_ADDR
19426: GO 19524
19428: LD_INT 30
19430: DOUBLE
19431: EQUAL
19432: IFTRUE 19436
19434: GO 19447
19436: POP
// bc_type := b_solar_power ; 31 :
19437: LD_ADDR_OWVAR 42
19441: PUSH
19442: LD_INT 27
19444: ST_TO_ADDR
19445: GO 19524
19447: LD_INT 31
19449: DOUBLE
19450: EQUAL
19451: IFTRUE 19455
19453: GO 19466
19455: POP
// bc_type := b_oil_power ; 32 :
19456: LD_ADDR_OWVAR 42
19460: PUSH
19461: LD_INT 26
19463: ST_TO_ADDR
19464: GO 19524
19466: LD_INT 32
19468: DOUBLE
19469: EQUAL
19470: IFTRUE 19474
19472: GO 19485
19474: POP
// bc_type := b_siberite_power ; 33 :
19475: LD_ADDR_OWVAR 42
19479: PUSH
19480: LD_INT 28
19482: ST_TO_ADDR
19483: GO 19524
19485: LD_INT 33
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19493
19491: GO 19504
19493: POP
// bc_type := b_oil_mine ; 34 :
19494: LD_ADDR_OWVAR 42
19498: PUSH
19499: LD_INT 29
19501: ST_TO_ADDR
19502: GO 19524
19504: LD_INT 34
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 19523
19512: POP
// bc_type := b_siberite_mine ; end ;
19513: LD_ADDR_OWVAR 42
19517: PUSH
19518: LD_INT 30
19520: ST_TO_ADDR
19521: GO 19524
19523: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19524: LD_ADDR_VAR 0 8
19528: PUSH
19529: LD_VAR 0 5
19533: PPUSH
19534: LD_VAR 0 6
19538: PPUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 47
19548: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19549: LD_OWVAR 42
19553: PUSH
19554: LD_INT 32
19556: PUSH
19557: LD_INT 33
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: IN
19564: IFFALSE 19580
// PlaceWeaponTurret ( b , weapon ) ;
19566: LD_VAR 0 8
19570: PPUSH
19571: LD_VAR 0 4
19575: PPUSH
19576: CALL_OW 431
// end ;
19580: LD_VAR 0 7
19584: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19585: LD_INT 0
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19591: LD_ADDR_VAR 0 4
19595: PUSH
19596: LD_INT 22
19598: PUSH
19599: LD_OWVAR 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: LD_INT 30
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 4
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 19713
// for i in tmp do
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_VAR 0 4
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19711
// for j = 1 to 3 do
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: DOUBLE
19673: LD_INT 1
19675: DEC
19676: ST_TO_ADDR
19677: LD_INT 3
19679: PUSH
19680: FOR_TO
19681: IFFALSE 19707
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 274
19692: PPUSH
19693: LD_VAR 0 3
19697: PPUSH
19698: LD_INT 99999
19700: PPUSH
19701: CALL_OW 277
19705: GO 19680
19707: POP
19708: POP
19709: GO 19664
19711: POP
19712: POP
// end ;
19713: LD_VAR 0 1
19717: RET
// export function hHackSetLevel10 ; var i , j ; begin
19718: LD_INT 0
19720: PPUSH
19721: PPUSH
19722: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_INT 21
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PPUSH
19738: CALL_OW 69
19742: PUSH
19743: FOR_IN
19744: IFFALSE 19796
// if IsSelected ( i ) then
19746: LD_VAR 0 2
19750: PPUSH
19751: CALL_OW 306
19755: IFFALSE 19794
// begin for j := 1 to 4 do
19757: LD_ADDR_VAR 0 3
19761: PUSH
19762: DOUBLE
19763: LD_INT 1
19765: DEC
19766: ST_TO_ADDR
19767: LD_INT 4
19769: PUSH
19770: FOR_TO
19771: IFFALSE 19792
// SetSkill ( i , j , 10 ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_VAR 0 3
19782: PPUSH
19783: LD_INT 10
19785: PPUSH
19786: CALL_OW 237
19790: GO 19770
19792: POP
19793: POP
// end ;
19794: GO 19743
19796: POP
19797: POP
// end ;
19798: LD_VAR 0 1
19802: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19808: LD_ADDR_VAR 0 2
19812: PUSH
19813: LD_INT 22
19815: PUSH
19816: LD_OWVAR 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 21
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PPUSH
19839: CALL_OW 69
19843: PUSH
19844: FOR_IN
19845: IFFALSE 19886
// begin for j := 1 to 4 do
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: DOUBLE
19853: LD_INT 1
19855: DEC
19856: ST_TO_ADDR
19857: LD_INT 4
19859: PUSH
19860: FOR_TO
19861: IFFALSE 19882
// SetSkill ( i , j , 10 ) ;
19863: LD_VAR 0 2
19867: PPUSH
19868: LD_VAR 0 3
19872: PPUSH
19873: LD_INT 10
19875: PPUSH
19876: CALL_OW 237
19880: GO 19860
19882: POP
19883: POP
// end ;
19884: GO 19844
19886: POP
19887: POP
// end ;
19888: LD_VAR 0 1
19892: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19893: LD_INT 0
19895: PPUSH
// uc_side := your_side ;
19896: LD_ADDR_OWVAR 20
19900: PUSH
19901: LD_OWVAR 2
19905: ST_TO_ADDR
// uc_nation := nation ;
19906: LD_ADDR_OWVAR 21
19910: PUSH
19911: LD_VAR 0 1
19915: ST_TO_ADDR
// InitHc ;
19916: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19920: LD_INT 0
19922: PPUSH
19923: LD_VAR 0 2
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19937: LD_VAR 0 4
19941: PPUSH
19942: LD_VAR 0 5
19946: PPUSH
19947: CALL_OW 428
19951: PUSH
19952: LD_INT 0
19954: EQUAL
19955: IFFALSE 19979
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19957: CALL_OW 44
19961: PPUSH
19962: LD_VAR 0 4
19966: PPUSH
19967: LD_VAR 0 5
19971: PPUSH
19972: LD_INT 1
19974: PPUSH
19975: CALL_OW 48
// end ;
19979: LD_VAR 0 6
19983: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19984: LD_INT 0
19986: PPUSH
19987: PPUSH
// uc_side := your_side ;
19988: LD_ADDR_OWVAR 20
19992: PUSH
19993: LD_OWVAR 2
19997: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19998: LD_VAR 0 1
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 4
20014: PUSH
20015: LD_INT 5
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: IN
20025: IFFALSE 20037
// uc_nation := nation_american else
20027: LD_ADDR_OWVAR 21
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
20035: GO 20080
// if chassis in [ 11 , 12 , 13 , 14 ] then
20037: LD_VAR 0 1
20041: PUSH
20042: LD_INT 11
20044: PUSH
20045: LD_INT 12
20047: PUSH
20048: LD_INT 13
20050: PUSH
20051: LD_INT 14
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: IN
20060: IFFALSE 20072
// uc_nation := nation_arabian else
20062: LD_ADDR_OWVAR 21
20066: PUSH
20067: LD_INT 2
20069: ST_TO_ADDR
20070: GO 20080
// uc_nation := nation_russian ;
20072: LD_ADDR_OWVAR 21
20076: PUSH
20077: LD_INT 3
20079: ST_TO_ADDR
// vc_chassis := chassis ;
20080: LD_ADDR_OWVAR 37
20084: PUSH
20085: LD_VAR 0 1
20089: ST_TO_ADDR
// vc_engine := engine ;
20090: LD_ADDR_OWVAR 39
20094: PUSH
20095: LD_VAR 0 2
20099: ST_TO_ADDR
// vc_control := control ;
20100: LD_ADDR_OWVAR 38
20104: PUSH
20105: LD_VAR 0 3
20109: ST_TO_ADDR
// vc_weapon := weapon ;
20110: LD_ADDR_OWVAR 40
20114: PUSH
20115: LD_VAR 0 4
20119: ST_TO_ADDR
// un := CreateVehicle ;
20120: LD_ADDR_VAR 0 8
20124: PUSH
20125: CALL_OW 45
20129: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20130: LD_VAR 0 8
20134: PPUSH
20135: LD_INT 0
20137: PPUSH
20138: LD_INT 5
20140: PPUSH
20141: CALL_OW 12
20145: PPUSH
20146: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20150: LD_VAR 0 8
20154: PPUSH
20155: LD_VAR 0 5
20159: PPUSH
20160: LD_VAR 0 6
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 48
// end ;
20172: LD_VAR 0 7
20176: RET
// export hInvincible ; every 1 do
20177: GO 20179
20179: DISABLE
// hInvincible := [ ] ;
20180: LD_ADDR_EXP 83
20184: PUSH
20185: EMPTY
20186: ST_TO_ADDR
20187: END
// every 10 do var i ;
20188: GO 20190
20190: DISABLE
20191: LD_INT 0
20193: PPUSH
// begin enable ;
20194: ENABLE
// if not hInvincible then
20195: LD_EXP 83
20199: NOT
20200: IFFALSE 20204
// exit ;
20202: GO 20248
// for i in hInvincible do
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_EXP 83
20213: PUSH
20214: FOR_IN
20215: IFFALSE 20246
// if GetLives ( i ) < 1000 then
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 256
20226: PUSH
20227: LD_INT 1000
20229: LESS
20230: IFFALSE 20244
// SetLives ( i , 1000 ) ;
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_INT 1000
20239: PPUSH
20240: CALL_OW 234
20244: GO 20214
20246: POP
20247: POP
// end ;
20248: PPOPN 1
20250: END
// export function hHackInvincible ; var i ; begin
20251: LD_INT 0
20253: PPUSH
20254: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20255: LD_ADDR_VAR 0 2
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: PUSH
20293: FOR_IN
20294: IFFALSE 20355
// if IsSelected ( i ) then
20296: LD_VAR 0 2
20300: PPUSH
20301: CALL_OW 306
20305: IFFALSE 20353
// begin if i in hInvincible then
20307: LD_VAR 0 2
20311: PUSH
20312: LD_EXP 83
20316: IN
20317: IFFALSE 20337
// hInvincible := hInvincible diff i else
20319: LD_ADDR_EXP 83
20323: PUSH
20324: LD_EXP 83
20328: PUSH
20329: LD_VAR 0 2
20333: DIFF
20334: ST_TO_ADDR
20335: GO 20353
// hInvincible := hInvincible union i ;
20337: LD_ADDR_EXP 83
20341: PUSH
20342: LD_EXP 83
20346: PUSH
20347: LD_VAR 0 2
20351: UNION
20352: ST_TO_ADDR
// end ;
20353: GO 20293
20355: POP
20356: POP
// end ;
20357: LD_VAR 0 1
20361: RET
// export function hHackInvisible ; var i , j ; begin
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
20366: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 21
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL_OW 69
20386: PUSH
20387: FOR_IN
20388: IFFALSE 20412
// if IsSelected ( i ) then
20390: LD_VAR 0 2
20394: PPUSH
20395: CALL_OW 306
20399: IFFALSE 20410
// ComForceInvisible ( i ) ;
20401: LD_VAR 0 2
20405: PPUSH
20406: CALL_OW 496
20410: GO 20387
20412: POP
20413: POP
// end ;
20414: LD_VAR 0 1
20418: RET
// export function hHackChangeYourSide ; begin
20419: LD_INT 0
20421: PPUSH
// if your_side = 8 then
20422: LD_OWVAR 2
20426: PUSH
20427: LD_INT 8
20429: EQUAL
20430: IFFALSE 20442
// your_side := 0 else
20432: LD_ADDR_OWVAR 2
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
20440: GO 20456
// your_side := your_side + 1 ;
20442: LD_ADDR_OWVAR 2
20446: PUSH
20447: LD_OWVAR 2
20451: PUSH
20452: LD_INT 1
20454: PLUS
20455: ST_TO_ADDR
// end ;
20456: LD_VAR 0 1
20460: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20461: LD_INT 0
20463: PPUSH
20464: PPUSH
20465: PPUSH
// for i in all_units do
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_OWVAR 3
20475: PUSH
20476: FOR_IN
20477: IFFALSE 20555
// if IsSelected ( i ) then
20479: LD_VAR 0 2
20483: PPUSH
20484: CALL_OW 306
20488: IFFALSE 20553
// begin j := GetSide ( i ) ;
20490: LD_ADDR_VAR 0 3
20494: PUSH
20495: LD_VAR 0 2
20499: PPUSH
20500: CALL_OW 255
20504: ST_TO_ADDR
// if j = 8 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 8
20512: EQUAL
20513: IFFALSE 20525
// j := 0 else
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
20523: GO 20539
// j := j + 1 ;
20525: LD_ADDR_VAR 0 3
20529: PUSH
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 1
20537: PLUS
20538: ST_TO_ADDR
// SetSide ( i , j ) ;
20539: LD_VAR 0 2
20543: PPUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: CALL_OW 235
// end ;
20553: GO 20476
20555: POP
20556: POP
// end ;
20557: LD_VAR 0 1
20561: RET
// export function hHackFog ; begin
20562: LD_INT 0
20564: PPUSH
// FogOff ( true ) ;
20565: LD_INT 1
20567: PPUSH
20568: CALL_OW 344
// end ;
20572: LD_VAR 0 1
20576: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20577: LD_INT 0
20579: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_VAR 0 3
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: LD_INT 1
20600: PPUSH
20601: CALL_OW 483
// CenterOnXY ( x , y ) ;
20605: LD_VAR 0 2
20609: PPUSH
20610: LD_VAR 0 3
20614: PPUSH
20615: CALL_OW 84
// end ;
20619: LD_VAR 0 4
20623: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20628: LD_VAR 0 1
20632: NOT
20633: IFTRUE 20652
20635: PUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: CALL_OW 488
20650: NOT
20651: OR
20652: IFTRUE 20687
20654: PUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: CALL_OW 266
20664: PUSH
20665: LD_INT 3
20667: NONEQUAL
20668: IFFALSE 20686
20670: PUSH
20671: LD_VAR 0 1
20675: PPUSH
20676: CALL_OW 247
20680: PUSH
20681: LD_INT 1
20683: EQUAL
20684: NOT
20685: AND
20686: OR
20687: IFFALSE 20691
// exit ;
20689: GO 20973
// if GetType ( factory ) = unit_human then
20691: LD_VAR 0 1
20695: PPUSH
20696: CALL_OW 247
20700: PUSH
20701: LD_INT 1
20703: EQUAL
20704: IFFALSE 20721
// factory := IsInUnit ( factory ) ;
20706: LD_ADDR_VAR 0 1
20710: PUSH
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 310
20720: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 266
20730: PUSH
20731: LD_INT 3
20733: NONEQUAL
20734: IFFALSE 20738
// exit ;
20736: GO 20973
// for i := 1 to Count ( factoryWaypoints ) do
20738: LD_ADDR_VAR 0 5
20742: PUSH
20743: DOUBLE
20744: LD_INT 1
20746: DEC
20747: ST_TO_ADDR
20748: LD_EXP 84
20752: PPUSH
20753: CALL 30777 0 1
20757: PUSH
20758: FOR_TO
20759: IFFALSE 20921
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20761: LD_VAR 0 2
20765: PPUSH
20766: LD_VAR 0 3
20770: PPUSH
20771: CALL_OW 428
20775: PUSH
20776: LD_EXP 84
20780: PUSH
20781: LD_VAR 0 5
20785: ARRAY
20786: PUSH
20787: LD_INT 2
20789: ARRAY
20790: EQUAL
20791: IFFALSE 20823
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20793: LD_ADDR_EXP 84
20797: PUSH
20798: LD_EXP 84
20802: PPUSH
20803: LD_VAR 0 5
20807: PPUSH
20808: CALL_OW 3
20812: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20813: CALL 20978 0 0
// exit ;
20817: POP
20818: POP
20819: GO 20973
// end else
20821: GO 20919
// if factory = factoryWaypoints [ i ] [ 2 ] then
20823: LD_VAR 0 1
20827: PUSH
20828: LD_EXP 84
20832: PUSH
20833: LD_VAR 0 5
20837: ARRAY
20838: PUSH
20839: LD_INT 2
20841: ARRAY
20842: EQUAL
20843: IFFALSE 20919
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20845: LD_ADDR_EXP 84
20849: PUSH
20850: LD_EXP 84
20854: PPUSH
20855: LD_VAR 0 5
20859: PPUSH
20860: CALL_OW 3
20864: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20865: LD_ADDR_EXP 84
20869: PUSH
20870: LD_EXP 84
20874: PPUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: CALL_OW 255
20884: PUSH
20885: LD_VAR 0 1
20889: PUSH
20890: LD_VAR 0 2
20894: PUSH
20895: LD_VAR 0 3
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL 66753 0 2
20910: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20911: CALL 20978 0 0
// exit ;
20915: POP
20916: POP
20917: GO 20973
// end ; end ;
20919: GO 20758
20921: POP
20922: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20923: LD_ADDR_EXP 84
20927: PUSH
20928: LD_EXP 84
20932: PPUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 255
20942: PUSH
20943: LD_VAR 0 1
20947: PUSH
20948: LD_VAR 0 2
20952: PUSH
20953: LD_VAR 0 3
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PPUSH
20964: CALL 66753 0 2
20968: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20969: CALL 20978 0 0
// end ;
20973: LD_VAR 0 4
20977: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20983: LD_STRING resetFactoryWaypoint();
20985: PPUSH
20986: CALL_OW 559
// if factoryWaypoints then
20990: LD_EXP 84
20994: IFFALSE 21115
// begin list := factoryWaypoints ;
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_EXP 84
21005: ST_TO_ADDR
// for i := 1 to list do
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: DOUBLE
21012: LD_INT 1
21014: DEC
21015: ST_TO_ADDR
21016: LD_VAR 0 3
21020: PUSH
21021: FOR_TO
21022: IFFALSE 21113
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21024: LD_STRING setFactoryWaypointXY(
21026: PUSH
21027: LD_VAR 0 3
21031: PUSH
21032: LD_VAR 0 2
21036: ARRAY
21037: PUSH
21038: LD_INT 1
21040: ARRAY
21041: STR
21042: PUSH
21043: LD_STRING ,
21045: STR
21046: PUSH
21047: LD_VAR 0 3
21051: PUSH
21052: LD_VAR 0 2
21056: ARRAY
21057: PUSH
21058: LD_INT 2
21060: ARRAY
21061: STR
21062: PUSH
21063: LD_STRING ,
21065: STR
21066: PUSH
21067: LD_VAR 0 3
21071: PUSH
21072: LD_VAR 0 2
21076: ARRAY
21077: PUSH
21078: LD_INT 3
21080: ARRAY
21081: STR
21082: PUSH
21083: LD_STRING ,
21085: STR
21086: PUSH
21087: LD_VAR 0 3
21091: PUSH
21092: LD_VAR 0 2
21096: ARRAY
21097: PUSH
21098: LD_INT 4
21100: ARRAY
21101: STR
21102: PUSH
21103: LD_STRING )
21105: STR
21106: PPUSH
21107: CALL_OW 559
21111: GO 21021
21113: POP
21114: POP
// end ; end ;
21115: LD_VAR 0 1
21119: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21120: LD_INT 0
21122: PPUSH
// if HexInfo ( x , y ) = warehouse then
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: CALL_OW 428
21137: PUSH
21138: LD_VAR 0 1
21142: EQUAL
21143: IFFALSE 21170
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21145: LD_ADDR_EXP 86
21149: PUSH
21150: LD_EXP 86
21154: PPUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: LD_INT 0
21162: PPUSH
21163: CALL_OW 1
21167: ST_TO_ADDR
21168: GO 21221
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21170: LD_ADDR_EXP 86
21174: PUSH
21175: LD_EXP 86
21179: PPUSH
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_VAR 0 1
21189: PPUSH
21190: CALL_OW 255
21194: PUSH
21195: LD_VAR 0 1
21199: PUSH
21200: LD_VAR 0 2
21204: PUSH
21205: LD_VAR 0 3
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 1
21220: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21221: CALL 21230 0 0
// end ;
21225: LD_VAR 0 4
21229: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21230: LD_INT 0
21232: PPUSH
21233: PPUSH
21234: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21235: LD_STRING resetWarehouseGatheringPoints();
21237: PPUSH
21238: CALL_OW 559
// if warehouseGatheringPoints then
21242: LD_EXP 86
21246: IFFALSE 21372
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21248: LD_ADDR_VAR 0 3
21252: PUSH
21253: LD_EXP 86
21257: PPUSH
21258: CALL 70687 0 1
21262: ST_TO_ADDR
// for i := 1 to list do
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: DOUBLE
21269: LD_INT 1
21271: DEC
21272: ST_TO_ADDR
21273: LD_VAR 0 3
21277: PUSH
21278: FOR_TO
21279: IFFALSE 21370
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21281: LD_STRING setWarehouseGatheringPointXY(
21283: PUSH
21284: LD_VAR 0 3
21288: PUSH
21289: LD_VAR 0 2
21293: ARRAY
21294: PUSH
21295: LD_INT 1
21297: ARRAY
21298: STR
21299: PUSH
21300: LD_STRING ,
21302: STR
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: LD_VAR 0 2
21313: ARRAY
21314: PUSH
21315: LD_INT 2
21317: ARRAY
21318: STR
21319: PUSH
21320: LD_STRING ,
21322: STR
21323: PUSH
21324: LD_VAR 0 3
21328: PUSH
21329: LD_VAR 0 2
21333: ARRAY
21334: PUSH
21335: LD_INT 3
21337: ARRAY
21338: STR
21339: PUSH
21340: LD_STRING ,
21342: STR
21343: PUSH
21344: LD_VAR 0 3
21348: PUSH
21349: LD_VAR 0 2
21353: ARRAY
21354: PUSH
21355: LD_INT 4
21357: ARRAY
21358: STR
21359: PUSH
21360: LD_STRING )
21362: STR
21363: PPUSH
21364: CALL_OW 559
21368: GO 21278
21370: POP
21371: POP
// end ; end ;
21372: LD_VAR 0 1
21376: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21377: LD_EXP 86
21381: IFFALSE 22076
21383: GO 21385
21385: DISABLE
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
21390: PPUSH
21391: PPUSH
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
// begin enable ;
21397: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21398: LD_ADDR_VAR 0 3
21402: PUSH
21403: LD_EXP 86
21407: PPUSH
21408: CALL 70687 0 1
21412: ST_TO_ADDR
// if not list then
21413: LD_VAR 0 3
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 22076
// for i := 1 to list do
21422: LD_ADDR_VAR 0 1
21426: PUSH
21427: DOUBLE
21428: LD_INT 1
21430: DEC
21431: ST_TO_ADDR
21432: LD_VAR 0 3
21436: PUSH
21437: FOR_TO
21438: IFFALSE 22074
// begin depot := list [ i ] [ 2 ] ;
21440: LD_ADDR_VAR 0 8
21444: PUSH
21445: LD_VAR 0 3
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PUSH
21456: LD_INT 2
21458: ARRAY
21459: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21460: LD_ADDR_VAR 0 5
21464: PUSH
21465: LD_VAR 0 3
21469: PUSH
21470: LD_VAR 0 1
21474: ARRAY
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21480: LD_VAR 0 8
21484: PPUSH
21485: CALL_OW 301
21489: IFTRUE 21508
21491: PUSH
21492: LD_VAR 0 5
21496: PUSH
21497: LD_VAR 0 8
21501: PPUSH
21502: CALL_OW 255
21506: NONEQUAL
21507: OR
21508: IFFALSE 21537
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21510: LD_ADDR_EXP 86
21514: PUSH
21515: LD_EXP 86
21519: PPUSH
21520: LD_VAR 0 8
21524: PPUSH
21525: LD_INT 0
21527: PPUSH
21528: CALL_OW 1
21532: ST_TO_ADDR
// exit ;
21533: POP
21534: POP
21535: GO 22076
// end ; x := list [ i ] [ 3 ] ;
21537: LD_ADDR_VAR 0 6
21541: PUSH
21542: LD_VAR 0 3
21546: PUSH
21547: LD_VAR 0 1
21551: ARRAY
21552: PUSH
21553: LD_INT 3
21555: ARRAY
21556: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21557: LD_ADDR_VAR 0 7
21561: PUSH
21562: LD_VAR 0 3
21566: PUSH
21567: LD_VAR 0 1
21571: ARRAY
21572: PUSH
21573: LD_INT 4
21575: ARRAY
21576: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21577: LD_ADDR_VAR 0 9
21581: PUSH
21582: LD_VAR 0 6
21586: PPUSH
21587: LD_VAR 0 7
21591: PPUSH
21592: LD_INT 16
21594: PPUSH
21595: CALL 69261 0 3
21599: ST_TO_ADDR
// if not cratesNearbyPoint then
21600: LD_VAR 0 9
21604: NOT
21605: IFFALSE 21611
// exit ;
21607: POP
21608: POP
21609: GO 22076
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21611: LD_ADDR_VAR 0 4
21615: PUSH
21616: LD_INT 22
21618: PUSH
21619: LD_VAR 0 5
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 60
21633: PUSH
21634: EMPTY
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 91
21643: PUSH
21644: LD_VAR 0 8
21648: PUSH
21649: LD_INT 6
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 25
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 25
21672: PUSH
21673: LD_INT 16
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: PUSH
21696: LD_VAR 0 8
21700: PPUSH
21701: CALL_OW 313
21705: PPUSH
21706: LD_INT 3
21708: PUSH
21709: LD_INT 60
21711: PUSH
21712: EMPTY
21713: LIST
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 25
21734: PUSH
21735: LD_INT 16
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PPUSH
21751: CALL_OW 72
21755: UNION
21756: ST_TO_ADDR
// if tmp then
21757: LD_VAR 0 4
21761: IFFALSE 21841
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21763: LD_ADDR_VAR 0 4
21767: PUSH
21768: LD_VAR 0 4
21772: PPUSH
21773: LD_INT 3
21775: PPUSH
21776: CALL 67068 0 2
21780: ST_TO_ADDR
// for j in tmp do
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_VAR 0 4
21790: PUSH
21791: FOR_IN
21792: IFFALSE 21835
// begin if IsInUnit ( j ) then
21794: LD_VAR 0 2
21798: PPUSH
21799: CALL_OW 310
21803: IFFALSE 21814
// ComExit ( j ) ;
21805: LD_VAR 0 2
21809: PPUSH
21810: CALL 67151 0 1
// AddComCollect ( j , x , y ) ;
21814: LD_VAR 0 2
21818: PPUSH
21819: LD_VAR 0 6
21823: PPUSH
21824: LD_VAR 0 7
21828: PPUSH
21829: CALL_OW 177
// end ;
21833: GO 21791
21835: POP
21836: POP
// exit ;
21837: POP
21838: POP
21839: GO 22076
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21841: LD_ADDR_VAR 0 4
21845: PUSH
21846: LD_INT 22
21848: PUSH
21849: LD_VAR 0 5
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 91
21860: PUSH
21861: LD_VAR 0 8
21865: PUSH
21866: LD_INT 8
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 34
21879: PUSH
21880: LD_INT 12
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 34
21889: PUSH
21890: LD_INT 51
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 34
21899: PUSH
21900: LD_INT 32
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 34
21909: PUSH
21910: LD_INT 89
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: ST_TO_ADDR
// if tmp then
21934: LD_VAR 0 4
21938: IFFALSE 22072
// begin for j in tmp do
21940: LD_ADDR_VAR 0 2
21944: PUSH
21945: LD_VAR 0 4
21949: PUSH
21950: FOR_IN
21951: IFFALSE 22070
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21953: LD_VAR 0 2
21957: PPUSH
21958: CALL_OW 262
21962: PUSH
21963: LD_INT 3
21965: EQUAL
21966: IFTRUE 21983
21968: PUSH
21969: LD_VAR 0 2
21973: PPUSH
21974: CALL_OW 261
21978: PUSH
21979: LD_INT 20
21981: GREATER
21982: OR
21983: IFFALSE 21997
21985: PUSH
21986: LD_VAR 0 2
21990: PPUSH
21991: CALL_OW 314
21995: NOT
21996: AND
21997: IFFALSE 22027
21999: PUSH
22000: LD_VAR 0 2
22004: PPUSH
22005: CALL_OW 263
22009: PUSH
22010: LD_INT 1
22012: NONEQUAL
22013: IFTRUE 22026
22015: PUSH
22016: LD_VAR 0 2
22020: PPUSH
22021: CALL_OW 311
22025: OR
22026: AND
22027: IFFALSE 22068
// begin ComCollect ( j , x , y ) ;
22029: LD_VAR 0 2
22033: PPUSH
22034: LD_VAR 0 6
22038: PPUSH
22039: LD_VAR 0 7
22043: PPUSH
22044: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22048: LD_VAR 0 2
22052: PPUSH
22053: LD_VAR 0 8
22057: PPUSH
22058: CALL_OW 172
// exit ;
22062: POP
22063: POP
22064: POP
22065: POP
22066: GO 22076
// end ;
22068: GO 21950
22070: POP
22071: POP
// end ; end ;
22072: GO 21437
22074: POP
22075: POP
// end ; end_of_file
22076: PPOPN 9
22078: END
// export function SOS_UnitDestroyed ( un ) ; begin
22079: LD_INT 0
22081: PPUSH
// ComRadiation ( un ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL 23249 0 1
// end ;
22091: LD_VAR 0 2
22095: RET
// export function SOS_UnitKamikazed ( un ) ; begin
22096: LD_INT 0
22098: PPUSH
// ComRadiation ( un ) ;
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL 23249 0 1
// end ;
22108: LD_VAR 0 2
22112: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22113: LD_INT 0
22115: PPUSH
// end ;
22116: LD_VAR 0 4
22120: RET
// export function SOS_Command ( cmd ) ; begin
22121: LD_INT 0
22123: PPUSH
// end ;
22124: LD_VAR 0 2
22128: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22129: LD_INT 0
22131: PPUSH
// end ;
22132: LD_VAR 0 6
22136: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
22137: LD_INT 0
22139: PPUSH
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
// if not vehicle or not factory then
22144: LD_VAR 0 1
22148: NOT
22149: IFTRUE 22158
22151: PUSH
22152: LD_VAR 0 2
22156: NOT
22157: OR
22158: IFFALSE 22162
// exit ;
22160: GO 22824
// weapon := GetWeapon ( vehicle ) ;
22162: LD_ADDR_VAR 0 7
22166: PUSH
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 264
22176: ST_TO_ADDR
// if weapon = ar_miner then
22177: LD_VAR 0 7
22181: PUSH
22182: LD_INT 81
22184: EQUAL
22185: IFFALSE 22242
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
22187: LD_ADDR_EXP 95
22191: PUSH
22192: LD_EXP 95
22196: PPUSH
22197: LD_EXP 95
22201: PUSH
22202: LD_INT 1
22204: PLUS
22205: PPUSH
22206: LD_VAR 0 1
22210: PPUSH
22211: CALL_OW 1
22215: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22216: LD_ADDR_EXP 96
22220: PUSH
22221: LD_EXP 96
22225: PPUSH
22226: LD_EXP 96
22230: PUSH
22231: LD_INT 1
22233: PLUS
22234: PPUSH
22235: EMPTY
22236: PPUSH
22237: CALL_OW 1
22241: ST_TO_ADDR
// end ; if not factoryWaypoints then
22242: LD_EXP 84
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22824
// for i := 1 to Count ( factoryWaypoints ) do
22251: LD_ADDR_VAR 0 4
22255: PUSH
22256: DOUBLE
22257: LD_INT 1
22259: DEC
22260: ST_TO_ADDR
22261: LD_EXP 84
22265: PPUSH
22266: CALL 30777 0 1
22270: PUSH
22271: FOR_TO
22272: IFFALSE 22822
// if factoryWaypoints [ i ] [ 2 ] = factory then
22274: LD_EXP 84
22278: PUSH
22279: LD_VAR 0 4
22283: ARRAY
22284: PUSH
22285: LD_INT 2
22287: ARRAY
22288: PUSH
22289: LD_VAR 0 2
22293: EQUAL
22294: IFFALSE 22820
// begin if GetControl ( vehicle ) = control_manual then
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 263
22305: PUSH
22306: LD_INT 1
22308: EQUAL
22309: IFFALSE 22673
// begin driver := IsDrivenBy ( vehicle ) ;
22311: LD_ADDR_VAR 0 5
22315: PUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 311
22325: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22326: LD_VAR 0 5
22330: PUSH
22331: LD_EXP 85
22335: IN
22336: IFTRUE 22350
22338: PUSH
22339: LD_VAR 0 1
22343: PUSH
22344: LD_EXP 85
22348: IN
22349: OR
22350: IFFALSE 22356
// exit ;
22352: POP
22353: POP
22354: GO 22824
// if not HasTask ( driver ) then
22356: LD_VAR 0 5
22360: PPUSH
22361: CALL_OW 314
22365: NOT
22366: IFFALSE 22671
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22368: LD_ADDR_EXP 85
22372: PUSH
22373: LD_EXP 85
22377: PPUSH
22378: LD_VAR 0 5
22382: PPUSH
22383: CALL 66753 0 2
22387: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22388: LD_ADDR_EXP 85
22392: PUSH
22393: LD_EXP 85
22397: PPUSH
22398: LD_VAR 0 1
22402: PPUSH
22403: CALL 66753 0 2
22407: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22408: LD_ADDR_VAR 0 6
22412: PUSH
22413: LD_EXP 84
22417: PUSH
22418: LD_VAR 0 4
22422: ARRAY
22423: PUSH
22424: LD_INT 3
22426: ARRAY
22427: PPUSH
22428: LD_EXP 84
22432: PUSH
22433: LD_VAR 0 4
22437: ARRAY
22438: PUSH
22439: LD_INT 4
22441: ARRAY
22442: PPUSH
22443: CALL_OW 428
22447: ST_TO_ADDR
// if hex then
22448: LD_VAR 0 6
22452: IFFALSE 22470
// ComMoveUnit ( driver , hex ) else
22454: LD_VAR 0 5
22458: PPUSH
22459: LD_VAR 0 6
22463: PPUSH
22464: CALL_OW 112
22468: GO 22554
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_EXP 84
22479: PUSH
22480: LD_VAR 0 4
22484: ARRAY
22485: PUSH
22486: LD_INT 3
22488: ARRAY
22489: PPUSH
22490: LD_EXP 84
22494: PUSH
22495: LD_VAR 0 4
22499: ARRAY
22500: PUSH
22501: LD_INT 4
22503: ARRAY
22504: PPUSH
22505: CALL_OW 297
22509: PUSH
22510: LD_INT 0
22512: GREATER
22513: IFFALSE 22554
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22515: LD_VAR 0 5
22519: PPUSH
22520: LD_EXP 84
22524: PUSH
22525: LD_VAR 0 4
22529: ARRAY
22530: PUSH
22531: LD_INT 3
22533: ARRAY
22534: PPUSH
22535: LD_EXP 84
22539: PUSH
22540: LD_VAR 0 4
22544: ARRAY
22545: PUSH
22546: LD_INT 4
22548: ARRAY
22549: PPUSH
22550: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22554: LD_VAR 0 5
22558: PPUSH
22559: CALL_OW 181
// if Multiplayer then
22563: LD_OWVAR 4
22567: IFFALSE 22616
// begin repeat wait ( 10 ) ;
22569: LD_INT 10
22571: PPUSH
22572: CALL_OW 67
// until not IsInUnit ( driver ) ;
22576: LD_VAR 0 5
22580: PPUSH
22581: CALL_OW 310
22585: NOT
22586: IFFALSE 22569
// if not HasTask ( driver ) then
22588: LD_VAR 0 5
22592: PPUSH
22593: CALL_OW 314
22597: NOT
22598: IFFALSE 22614
// ComEnterUnit ( driver , factory ) ;
22600: LD_VAR 0 5
22604: PPUSH
22605: LD_VAR 0 2
22609: PPUSH
22610: CALL_OW 120
// end else
22614: GO 22630
// AddComEnterUnit ( driver , factory ) ;
22616: LD_VAR 0 5
22620: PPUSH
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL_OW 180
// wait ( 0 0$1 ) ;
22630: LD_INT 35
22632: PPUSH
22633: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22637: LD_ADDR_EXP 85
22641: PUSH
22642: LD_EXP 85
22646: PUSH
22647: LD_VAR 0 5
22651: DIFF
22652: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22653: LD_ADDR_EXP 85
22657: PUSH
22658: LD_EXP 85
22662: PUSH
22663: LD_VAR 0 1
22667: DIFF
22668: ST_TO_ADDR
// break ;
22669: GO 22822
// end ; end else
22671: GO 22820
// if GetControl ( vehicle ) = control_remote then
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 263
22682: PUSH
22683: LD_INT 2
22685: EQUAL
22686: IFFALSE 22772
// begin wait ( 0 0$2 ) ;
22688: LD_INT 70
22690: PPUSH
22691: CALL_OW 67
// repeat wait ( 10 ) ;
22695: LD_INT 10
22697: PPUSH
22698: CALL_OW 67
// Connect ( vehicle ) ;
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL 37055 0 1
// until IsControledBy ( vehicle ) ;
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 312
22720: IFFALSE 22695
// wait ( 10 ) ;
22722: LD_INT 10
22724: PPUSH
22725: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22729: LD_VAR 0 1
22733: PPUSH
22734: LD_EXP 84
22738: PUSH
22739: LD_VAR 0 4
22743: ARRAY
22744: PUSH
22745: LD_INT 3
22747: ARRAY
22748: PPUSH
22749: LD_EXP 84
22753: PUSH
22754: LD_VAR 0 4
22758: ARRAY
22759: PUSH
22760: LD_INT 4
22762: ARRAY
22763: PPUSH
22764: CALL_OW 111
// break ;
22768: GO 22822
// end else
22770: GO 22820
// begin wait ( 0 0$3 ) ;
22772: LD_INT 105
22774: PPUSH
22775: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22779: LD_VAR 0 1
22783: PPUSH
22784: LD_EXP 84
22788: PUSH
22789: LD_VAR 0 4
22793: ARRAY
22794: PUSH
22795: LD_INT 3
22797: ARRAY
22798: PPUSH
22799: LD_EXP 84
22803: PUSH
22804: LD_VAR 0 4
22808: ARRAY
22809: PUSH
22810: LD_INT 4
22812: ARRAY
22813: PPUSH
22814: CALL_OW 111
// break ;
22818: GO 22822
// end ; end ;
22820: GO 22271
22822: POP
22823: POP
// end ;
22824: LD_VAR 0 3
22828: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22829: LD_INT 0
22831: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22832: LD_VAR 0 1
22836: PUSH
22837: LD_INT 250
22839: EQUAL
22840: IFFALSE 22857
22842: PUSH
22843: LD_VAR 0 2
22847: PPUSH
22848: CALL_OW 264
22852: PUSH
22853: LD_INT 81
22855: EQUAL
22856: AND
22857: IFFALSE 22878
// MinerPlaceMine ( unit , x , y ) ;
22859: LD_VAR 0 2
22863: PPUSH
22864: LD_VAR 0 4
22868: PPUSH
22869: LD_VAR 0 5
22873: PPUSH
22874: CALL 26224 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22878: LD_VAR 0 1
22882: PUSH
22883: LD_INT 251
22885: EQUAL
22886: IFFALSE 22903
22888: PUSH
22889: LD_VAR 0 2
22893: PPUSH
22894: CALL_OW 264
22898: PUSH
22899: LD_INT 81
22901: EQUAL
22902: AND
22903: IFFALSE 22924
// MinerDetonateMine ( unit , x , y ) ;
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_VAR 0 4
22914: PPUSH
22915: LD_VAR 0 5
22919: PPUSH
22920: CALL 26631 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 252
22931: EQUAL
22932: IFFALSE 22949
22934: PUSH
22935: LD_VAR 0 2
22939: PPUSH
22940: CALL_OW 264
22944: PUSH
22945: LD_INT 81
22947: EQUAL
22948: AND
22949: IFFALSE 22970
// MinerCreateMinefield ( unit , x , y ) ;
22951: LD_VAR 0 2
22955: PPUSH
22956: LD_VAR 0 4
22960: PPUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: CALL 26863 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22970: LD_VAR 0 1
22974: PUSH
22975: LD_INT 253
22977: EQUAL
22978: IFFALSE 22995
22980: PUSH
22981: LD_VAR 0 2
22985: PPUSH
22986: CALL_OW 257
22990: PUSH
22991: LD_INT 5
22993: EQUAL
22994: AND
22995: IFFALSE 23016
// ComBinocular ( unit , x , y ) ;
22997: LD_VAR 0 2
23001: PPUSH
23002: LD_VAR 0 4
23006: PPUSH
23007: LD_VAR 0 5
23011: PPUSH
23012: CALL 27238 0 3
// if selectedUnit then
23016: LD_VAR 0 3
23020: IFFALSE 23080
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23022: LD_VAR 0 1
23026: PUSH
23027: LD_INT 254
23029: EQUAL
23030: IFFALSE 23047
23032: PUSH
23033: LD_VAR 0 2
23037: PPUSH
23038: CALL_OW 264
23042: PUSH
23043: LD_INT 99
23045: EQUAL
23046: AND
23047: IFFALSE 23064
23049: PUSH
23050: LD_VAR 0 3
23054: PPUSH
23055: CALL_OW 263
23059: PUSH
23060: LD_INT 3
23062: EQUAL
23063: AND
23064: IFFALSE 23080
// HackDestroyVehicle ( unit , selectedUnit ) ;
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 3
23075: PPUSH
23076: CALL 25414 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23080: LD_VAR 0 1
23084: PUSH
23085: LD_INT 255
23087: EQUAL
23088: IFFALSE 23112
23090: PUSH
23091: LD_VAR 0 2
23095: PPUSH
23096: CALL_OW 264
23100: PUSH
23101: LD_INT 14
23103: PUSH
23104: LD_INT 53
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: IN
23111: AND
23112: IFFALSE 23130
23114: PUSH
23115: LD_VAR 0 4
23119: PPUSH
23120: LD_VAR 0 5
23124: PPUSH
23125: CALL_OW 488
23129: AND
23130: IFFALSE 23154
// CutTreeXYR ( unit , x , y , 12 ) ;
23132: LD_VAR 0 2
23136: PPUSH
23137: LD_VAR 0 4
23141: PPUSH
23142: LD_VAR 0 5
23146: PPUSH
23147: LD_INT 12
23149: PPUSH
23150: CALL 23345 0 4
// if cmd = 256 then
23154: LD_VAR 0 1
23158: PUSH
23159: LD_INT 256
23161: EQUAL
23162: IFFALSE 23183
// SetFactoryWaypoint ( unit , x , y ) ;
23164: LD_VAR 0 2
23168: PPUSH
23169: LD_VAR 0 4
23173: PPUSH
23174: LD_VAR 0 5
23178: PPUSH
23179: CALL 20624 0 3
// if cmd = 257 then
23183: LD_VAR 0 1
23187: PUSH
23188: LD_INT 257
23190: EQUAL
23191: IFFALSE 23212
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_VAR 0 4
23202: PPUSH
23203: LD_VAR 0 5
23207: PPUSH
23208: CALL 21120 0 3
// if cmd = 258 then
23212: LD_VAR 0 1
23216: PUSH
23217: LD_INT 258
23219: EQUAL
23220: IFFALSE 23244
// BurnTreeXYR ( unit , x , y , 8 ) ;
23222: LD_VAR 0 2
23226: PPUSH
23227: LD_VAR 0 4
23231: PPUSH
23232: LD_VAR 0 5
23236: PPUSH
23237: LD_INT 8
23239: PPUSH
23240: CALL 23767 0 4
// end ;
23244: LD_VAR 0 6
23248: RET
// export function ComRadiation ( un ) ; var eff ; begin
23249: LD_INT 0
23251: PPUSH
23252: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 264
23262: PUSH
23263: LD_INT 91
23265: NONEQUAL
23266: IFFALSE 23270
// exit ;
23268: GO 23340
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23270: LD_INT 68
23272: PPUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 255
23282: PPUSH
23283: CALL_OW 321
23287: PUSH
23288: LD_INT 2
23290: EQUAL
23291: IFFALSE 23303
// eff := 50 else
23293: LD_ADDR_VAR 0 3
23297: PUSH
23298: LD_INT 50
23300: ST_TO_ADDR
23301: GO 23311
// eff := 25 ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 25
23310: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23311: LD_VAR 0 1
23315: PPUSH
23316: CALL_OW 250
23320: PPUSH
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 251
23330: PPUSH
23331: LD_VAR 0 3
23335: PPUSH
23336: CALL_OW 495
// end ;
23340: LD_VAR 0 2
23344: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23345: LD_INT 0
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
23353: PPUSH
23354: PPUSH
23355: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 302
23365: NOT
23366: IFTRUE 23385
23368: PUSH
23369: LD_VAR 0 2
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: CALL_OW 488
23383: NOT
23384: OR
23385: IFTRUE 23394
23387: PUSH
23388: LD_VAR 0 4
23392: NOT
23393: OR
23394: IFFALSE 23398
// exit ;
23396: GO 23762
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
23398: LD_VAR 0 1
23402: PPUSH
23403: CALL_OW 437
23407: PPUSH
23408: CALL 30777 0 1
23412: PUSH
23413: LD_INT 10
23415: GREATER
23416: IFFALSE 23420
// exit ;
23418: GO 23762
// list := [ ] ;
23420: LD_ADDR_VAR 0 13
23424: PUSH
23425: EMPTY
23426: ST_TO_ADDR
// if x - r < 0 then
23427: LD_VAR 0 2
23431: PUSH
23432: LD_VAR 0 4
23436: MINUS
23437: PUSH
23438: LD_INT 0
23440: LESS
23441: IFFALSE 23453
// min_x := 0 else
23443: LD_ADDR_VAR 0 7
23447: PUSH
23448: LD_INT 0
23450: ST_TO_ADDR
23451: GO 23469
// min_x := x - r ;
23453: LD_ADDR_VAR 0 7
23457: PUSH
23458: LD_VAR 0 2
23462: PUSH
23463: LD_VAR 0 4
23467: MINUS
23468: ST_TO_ADDR
// if y - r < 0 then
23469: LD_VAR 0 3
23473: PUSH
23474: LD_VAR 0 4
23478: MINUS
23479: PUSH
23480: LD_INT 0
23482: LESS
23483: IFFALSE 23495
// min_y := 0 else
23485: LD_ADDR_VAR 0 8
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
23493: GO 23511
// min_y := y - r ;
23495: LD_ADDR_VAR 0 8
23499: PUSH
23500: LD_VAR 0 3
23504: PUSH
23505: LD_VAR 0 4
23509: MINUS
23510: ST_TO_ADDR
// max_x := x + r ;
23511: LD_ADDR_VAR 0 9
23515: PUSH
23516: LD_VAR 0 2
23520: PUSH
23521: LD_VAR 0 4
23525: PLUS
23526: ST_TO_ADDR
// max_y := y + r ;
23527: LD_ADDR_VAR 0 10
23531: PUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 4
23541: PLUS
23542: ST_TO_ADDR
// for _x = min_x to max_x do
23543: LD_ADDR_VAR 0 11
23547: PUSH
23548: DOUBLE
23549: LD_VAR 0 7
23553: DEC
23554: ST_TO_ADDR
23555: LD_VAR 0 9
23559: PUSH
23560: FOR_TO
23561: IFFALSE 23680
// for _y = min_y to max_y do
23563: LD_ADDR_VAR 0 12
23567: PUSH
23568: DOUBLE
23569: LD_VAR 0 8
23573: DEC
23574: ST_TO_ADDR
23575: LD_VAR 0 10
23579: PUSH
23580: FOR_TO
23581: IFFALSE 23676
// begin if not ValidHex ( _x , _y ) then
23583: LD_VAR 0 11
23587: PPUSH
23588: LD_VAR 0 12
23592: PPUSH
23593: CALL_OW 488
23597: NOT
23598: IFFALSE 23602
// continue ;
23600: GO 23580
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23602: LD_VAR 0 11
23606: PPUSH
23607: LD_VAR 0 12
23611: PPUSH
23612: CALL_OW 351
23616: IFFALSE 23634
23618: PUSH
23619: LD_VAR 0 11
23623: PPUSH
23624: LD_VAR 0 12
23628: PPUSH
23629: CALL_OW 554
23633: AND
23634: IFFALSE 23674
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23636: LD_ADDR_VAR 0 13
23640: PUSH
23641: LD_VAR 0 13
23645: PPUSH
23646: LD_VAR 0 13
23650: PUSH
23651: LD_INT 1
23653: PLUS
23654: PPUSH
23655: LD_VAR 0 11
23659: PUSH
23660: LD_VAR 0 12
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PPUSH
23669: CALL_OW 2
23673: ST_TO_ADDR
// end ;
23674: GO 23580
23676: POP
23677: POP
23678: GO 23560
23680: POP
23681: POP
// if not list then
23682: LD_VAR 0 13
23686: NOT
23687: IFFALSE 23691
// exit ;
23689: GO 23762
// for i in list do
23691: LD_ADDR_VAR 0 6
23695: PUSH
23696: LD_VAR 0 13
23700: PUSH
23701: FOR_IN
23702: IFFALSE 23760
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23704: LD_VAR 0 1
23708: PPUSH
23709: LD_STRING M
23711: PUSH
23712: LD_VAR 0 6
23716: PUSH
23717: LD_INT 1
23719: ARRAY
23720: PUSH
23721: LD_VAR 0 6
23725: PUSH
23726: LD_INT 2
23728: ARRAY
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: PPUSH
23754: CALL_OW 447
23758: GO 23701
23760: POP
23761: POP
// end ;
23762: LD_VAR 0 5
23766: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 302
23788: NOT
23789: IFTRUE 23808
23791: PUSH
23792: LD_VAR 0 2
23796: PPUSH
23797: LD_VAR 0 3
23801: PPUSH
23802: CALL_OW 488
23806: NOT
23807: OR
23808: IFTRUE 23817
23810: PUSH
23811: LD_VAR 0 4
23815: NOT
23816: OR
23817: IFFALSE 23821
// exit ;
23819: GO 24360
// if Count ( GetTaskList ( flame ) ) > 10 then
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 437
23830: PPUSH
23831: CALL 30777 0 1
23835: PUSH
23836: LD_INT 10
23838: GREATER
23839: IFFALSE 23843
// exit ;
23841: GO 24360
// list := [ ] ;
23843: LD_ADDR_VAR 0 13
23847: PUSH
23848: EMPTY
23849: ST_TO_ADDR
// if x - r < 0 then
23850: LD_VAR 0 2
23854: PUSH
23855: LD_VAR 0 4
23859: MINUS
23860: PUSH
23861: LD_INT 0
23863: LESS
23864: IFFALSE 23876
// min_x := 0 else
23866: LD_ADDR_VAR 0 7
23870: PUSH
23871: LD_INT 0
23873: ST_TO_ADDR
23874: GO 23892
// min_x := x - r ;
23876: LD_ADDR_VAR 0 7
23880: PUSH
23881: LD_VAR 0 2
23885: PUSH
23886: LD_VAR 0 4
23890: MINUS
23891: ST_TO_ADDR
// if y - r < 0 then
23892: LD_VAR 0 3
23896: PUSH
23897: LD_VAR 0 4
23901: MINUS
23902: PUSH
23903: LD_INT 0
23905: LESS
23906: IFFALSE 23918
// min_y := 0 else
23908: LD_ADDR_VAR 0 8
23912: PUSH
23913: LD_INT 0
23915: ST_TO_ADDR
23916: GO 23934
// min_y := y - r ;
23918: LD_ADDR_VAR 0 8
23922: PUSH
23923: LD_VAR 0 3
23927: PUSH
23928: LD_VAR 0 4
23932: MINUS
23933: ST_TO_ADDR
// max_x := x + r ;
23934: LD_ADDR_VAR 0 9
23938: PUSH
23939: LD_VAR 0 2
23943: PUSH
23944: LD_VAR 0 4
23948: PLUS
23949: ST_TO_ADDR
// max_y := y + r ;
23950: LD_ADDR_VAR 0 10
23954: PUSH
23955: LD_VAR 0 3
23959: PUSH
23960: LD_VAR 0 4
23964: PLUS
23965: ST_TO_ADDR
// for _x = min_x to max_x do
23966: LD_ADDR_VAR 0 11
23970: PUSH
23971: DOUBLE
23972: LD_VAR 0 7
23976: DEC
23977: ST_TO_ADDR
23978: LD_VAR 0 9
23982: PUSH
23983: FOR_TO
23984: IFFALSE 24103
// for _y = min_y to max_y do
23986: LD_ADDR_VAR 0 12
23990: PUSH
23991: DOUBLE
23992: LD_VAR 0 8
23996: DEC
23997: ST_TO_ADDR
23998: LD_VAR 0 10
24002: PUSH
24003: FOR_TO
24004: IFFALSE 24099
// begin if not ValidHex ( _x , _y ) then
24006: LD_VAR 0 11
24010: PPUSH
24011: LD_VAR 0 12
24015: PPUSH
24016: CALL_OW 488
24020: NOT
24021: IFFALSE 24025
// continue ;
24023: GO 24003
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24025: LD_VAR 0 11
24029: PPUSH
24030: LD_VAR 0 12
24034: PPUSH
24035: CALL_OW 351
24039: IFFALSE 24057
24041: PUSH
24042: LD_VAR 0 11
24046: PPUSH
24047: LD_VAR 0 12
24051: PPUSH
24052: CALL_OW 554
24056: AND
24057: IFFALSE 24097
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24059: LD_ADDR_VAR 0 13
24063: PUSH
24064: LD_VAR 0 13
24068: PPUSH
24069: LD_VAR 0 13
24073: PUSH
24074: LD_INT 1
24076: PLUS
24077: PPUSH
24078: LD_VAR 0 11
24082: PUSH
24083: LD_VAR 0 12
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 2
24096: ST_TO_ADDR
// end ;
24097: GO 24003
24099: POP
24100: POP
24101: GO 23983
24103: POP
24104: POP
// if not list then
24105: LD_VAR 0 13
24109: NOT
24110: IFFALSE 24114
// exit ;
24112: GO 24360
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24114: LD_ADDR_VAR 0 13
24118: PUSH
24119: LD_VAR 0 1
24123: PPUSH
24124: LD_VAR 0 13
24128: PPUSH
24129: LD_INT 1
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL 34183 0 4
24139: ST_TO_ADDR
// ComStop ( flame ) ;
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 141
// for i in list do
24149: LD_ADDR_VAR 0 6
24153: PUSH
24154: LD_VAR 0 13
24158: PUSH
24159: FOR_IN
24160: IFFALSE 24191
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_VAR 0 6
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 6
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: PPUSH
24185: CALL_OW 176
24189: GO 24159
24191: POP
24192: POP
// repeat wait ( 0 0$1 ) ;
24193: LD_INT 35
24195: PPUSH
24196: CALL_OW 67
// task := GetTaskList ( flame ) ;
24200: LD_ADDR_VAR 0 14
24204: PUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 437
24214: ST_TO_ADDR
// if not task then
24215: LD_VAR 0 14
24219: NOT
24220: IFFALSE 24224
// exit ;
24222: GO 24360
// if task [ 1 ] [ 1 ] <> | then
24224: LD_VAR 0 14
24228: PUSH
24229: LD_INT 1
24231: ARRAY
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: PUSH
24237: LD_STRING |
24239: NONEQUAL
24240: IFFALSE 24244
// exit ;
24242: GO 24360
// _x := task [ 1 ] [ 2 ] ;
24244: LD_ADDR_VAR 0 11
24248: PUSH
24249: LD_VAR 0 14
24253: PUSH
24254: LD_INT 1
24256: ARRAY
24257: PUSH
24258: LD_INT 2
24260: ARRAY
24261: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24262: LD_ADDR_VAR 0 12
24266: PUSH
24267: LD_VAR 0 14
24271: PUSH
24272: LD_INT 1
24274: ARRAY
24275: PUSH
24276: LD_INT 3
24278: ARRAY
24279: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24280: LD_VAR 0 11
24284: PPUSH
24285: LD_VAR 0 12
24289: PPUSH
24290: CALL_OW 351
24294: NOT
24295: IFTRUE 24314
24297: PUSH
24298: LD_VAR 0 11
24302: PPUSH
24303: LD_VAR 0 12
24307: PPUSH
24308: CALL_OW 554
24312: NOT
24313: OR
24314: IFFALSE 24348
// begin task := Delete ( task , 1 ) ;
24316: LD_ADDR_VAR 0 14
24320: PUSH
24321: LD_VAR 0 14
24325: PPUSH
24326: LD_INT 1
24328: PPUSH
24329: CALL_OW 3
24333: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_VAR 0 14
24343: PPUSH
24344: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 314
24357: NOT
24358: IFFALSE 24193
// end ;
24360: LD_VAR 0 5
24364: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24365: LD_EXP 88
24369: NOT
24370: IFFALSE 24420
24372: GO 24374
24374: DISABLE
// begin initHack := true ;
24375: LD_ADDR_EXP 88
24379: PUSH
24380: LD_INT 1
24382: ST_TO_ADDR
// hackTanks := [ ] ;
24383: LD_ADDR_EXP 89
24387: PUSH
24388: EMPTY
24389: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24390: LD_ADDR_EXP 90
24394: PUSH
24395: EMPTY
24396: ST_TO_ADDR
// hackLimit := 3 ;
24397: LD_ADDR_EXP 91
24401: PUSH
24402: LD_INT 3
24404: ST_TO_ADDR
// hackDist := 12 ;
24405: LD_ADDR_EXP 92
24409: PUSH
24410: LD_INT 12
24412: ST_TO_ADDR
// hackCounter := [ ] ;
24413: LD_ADDR_EXP 93
24417: PUSH
24418: EMPTY
24419: ST_TO_ADDR
// end ;
24420: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24421: LD_EXP 88
24425: IFFALSE 24443
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 99
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: AND
24443: IFFALSE 24696
24445: GO 24447
24447: DISABLE
24448: LD_INT 0
24450: PPUSH
24451: PPUSH
// begin enable ;
24452: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24453: LD_ADDR_VAR 0 1
24457: PUSH
24458: LD_INT 34
24460: PUSH
24461: LD_INT 99
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: PUSH
24473: FOR_IN
24474: IFFALSE 24694
// begin if not i in hackTanks then
24476: LD_VAR 0 1
24480: PUSH
24481: LD_EXP 89
24485: IN
24486: NOT
24487: IFFALSE 24570
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24489: LD_ADDR_EXP 89
24493: PUSH
24494: LD_EXP 89
24498: PPUSH
24499: LD_EXP 89
24503: PUSH
24504: LD_INT 1
24506: PLUS
24507: PPUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 1
24517: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24518: LD_ADDR_EXP 90
24522: PUSH
24523: LD_EXP 90
24527: PPUSH
24528: LD_EXP 90
24532: PUSH
24533: LD_INT 1
24535: PLUS
24536: PPUSH
24537: EMPTY
24538: PPUSH
24539: CALL_OW 1
24543: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24544: LD_ADDR_EXP 93
24548: PUSH
24549: LD_EXP 93
24553: PPUSH
24554: LD_EXP 93
24558: PUSH
24559: LD_INT 1
24561: PLUS
24562: PPUSH
24563: EMPTY
24564: PPUSH
24565: CALL_OW 1
24569: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 302
24579: NOT
24580: IFFALSE 24593
// begin HackUnlinkAll ( i ) ;
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL 24699 0 1
// continue ;
24591: GO 24473
// end ; HackCheckCapturedStatus ( i ) ;
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL 25144 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24602: LD_ADDR_VAR 0 2
24606: PUSH
24607: LD_INT 81
24609: PUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 255
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 33
24626: PUSH
24627: LD_INT 3
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 91
24636: PUSH
24637: LD_VAR 0 1
24641: PUSH
24642: LD_EXP 92
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 50
24654: PUSH
24655: EMPTY
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 69
24668: ST_TO_ADDR
// if not tmp then
24669: LD_VAR 0 2
24673: NOT
24674: IFFALSE 24678
// continue ;
24676: GO 24473
// HackLink ( i , tmp ) ;
24678: LD_VAR 0 1
24682: PPUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: CALL 24835 0 2
// end ;
24692: GO 24473
24694: POP
24695: POP
// end ;
24696: PPOPN 2
24698: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
24703: PPUSH
// if not hack in hackTanks then
24704: LD_VAR 0 1
24708: PUSH
24709: LD_EXP 89
24713: IN
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24830
// index := GetElementIndex ( hackTanks , hack ) ;
24719: LD_ADDR_VAR 0 4
24723: PUSH
24724: LD_EXP 89
24728: PPUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL 33478 0 2
24738: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24739: LD_EXP 90
24743: PUSH
24744: LD_VAR 0 4
24748: ARRAY
24749: IFFALSE 24830
// begin for i in hackTanksCaptured [ index ] do
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_EXP 90
24760: PUSH
24761: LD_VAR 0 4
24765: ARRAY
24766: PUSH
24767: FOR_IN
24768: IFFALSE 24794
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24770: LD_VAR 0 3
24774: PUSH
24775: LD_INT 1
24777: ARRAY
24778: PPUSH
24779: LD_VAR 0 3
24783: PUSH
24784: LD_INT 2
24786: ARRAY
24787: PPUSH
24788: CALL_OW 235
24792: GO 24767
24794: POP
24795: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24796: LD_ADDR_EXP 90
24800: PUSH
24801: LD_EXP 90
24805: PPUSH
24806: LD_VAR 0 4
24810: PPUSH
24811: EMPTY
24812: PPUSH
24813: CALL_OW 1
24817: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24818: LD_VAR 0 1
24822: PPUSH
24823: LD_INT 0
24825: PPUSH
24826: CALL_OW 505
// end ; end ;
24830: LD_VAR 0 2
24834: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
24839: PPUSH
// if not hack in hackTanks or not vehicles then
24840: LD_VAR 0 1
24844: PUSH
24845: LD_EXP 89
24849: IN
24850: NOT
24851: IFTRUE 24860
24853: PUSH
24854: LD_VAR 0 2
24858: NOT
24859: OR
24860: IFFALSE 24864
// exit ;
24862: GO 25139
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_VAR 0 2
24878: PPUSH
24879: LD_INT 1
24881: PPUSH
24882: LD_INT 1
24884: PPUSH
24885: CALL 34130 0 4
24889: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24890: LD_ADDR_VAR 0 5
24894: PUSH
24895: LD_EXP 89
24899: PPUSH
24900: LD_VAR 0 1
24904: PPUSH
24905: CALL 33478 0 2
24909: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24910: LD_EXP 90
24914: PUSH
24915: LD_VAR 0 5
24919: ARRAY
24920: PUSH
24921: LD_EXP 91
24925: LESS
24926: IFFALSE 25115
// begin for i := 1 to vehicles do
24928: LD_ADDR_VAR 0 4
24932: PUSH
24933: DOUBLE
24934: LD_INT 1
24936: DEC
24937: ST_TO_ADDR
24938: LD_VAR 0 2
24942: PUSH
24943: FOR_TO
24944: IFFALSE 25113
// begin if hackTanksCaptured [ index ] = hackLimit then
24946: LD_EXP 90
24950: PUSH
24951: LD_VAR 0 5
24955: ARRAY
24956: PUSH
24957: LD_EXP 91
24961: EQUAL
24962: IFFALSE 24966
// break ;
24964: GO 25113
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24966: LD_ADDR_EXP 93
24970: PUSH
24971: LD_EXP 93
24975: PPUSH
24976: LD_VAR 0 5
24980: PPUSH
24981: LD_EXP 93
24985: PUSH
24986: LD_VAR 0 5
24990: ARRAY
24991: PUSH
24992: LD_INT 1
24994: PLUS
24995: PPUSH
24996: CALL_OW 1
25000: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25001: LD_ADDR_EXP 90
25005: PUSH
25006: LD_EXP 90
25010: PPUSH
25011: LD_VAR 0 5
25015: PUSH
25016: LD_EXP 90
25020: PUSH
25021: LD_VAR 0 5
25025: ARRAY
25026: PUSH
25027: LD_INT 1
25029: PLUS
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PPUSH
25035: LD_VAR 0 2
25039: PUSH
25040: LD_VAR 0 4
25044: ARRAY
25045: PUSH
25046: LD_VAR 0 2
25050: PUSH
25051: LD_VAR 0 4
25055: ARRAY
25056: PPUSH
25057: CALL_OW 255
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL 33695 0 3
25070: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25071: LD_VAR 0 2
25075: PUSH
25076: LD_VAR 0 4
25080: ARRAY
25081: PPUSH
25082: LD_VAR 0 1
25086: PPUSH
25087: CALL_OW 255
25091: PPUSH
25092: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25096: LD_VAR 0 2
25100: PUSH
25101: LD_VAR 0 4
25105: ARRAY
25106: PPUSH
25107: CALL_OW 141
// end ;
25111: GO 24943
25113: POP
25114: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25115: LD_VAR 0 1
25119: PPUSH
25120: LD_EXP 90
25124: PUSH
25125: LD_VAR 0 5
25129: ARRAY
25130: PUSH
25131: LD_INT 0
25133: PLUS
25134: PPUSH
25135: CALL_OW 505
// end ;
25139: LD_VAR 0 3
25143: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25144: LD_INT 0
25146: PPUSH
25147: PPUSH
25148: PPUSH
25149: PPUSH
// if not hack in hackTanks then
25150: LD_VAR 0 1
25154: PUSH
25155: LD_EXP 89
25159: IN
25160: NOT
25161: IFFALSE 25165
// exit ;
25163: GO 25409
// index := GetElementIndex ( hackTanks , hack ) ;
25165: LD_ADDR_VAR 0 4
25169: PUSH
25170: LD_EXP 89
25174: PPUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL 33478 0 2
25184: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: DOUBLE
25191: LD_EXP 90
25195: PUSH
25196: LD_VAR 0 4
25200: ARRAY
25201: INC
25202: ST_TO_ADDR
25203: LD_INT 1
25205: PUSH
25206: FOR_DOWNTO
25207: IFFALSE 25383
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25209: LD_ADDR_VAR 0 5
25213: PUSH
25214: LD_EXP 90
25218: PUSH
25219: LD_VAR 0 4
25223: ARRAY
25224: PUSH
25225: LD_VAR 0 3
25229: ARRAY
25230: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25231: LD_VAR 0 5
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: CALL_OW 302
25244: NOT
25245: IFTRUE 25273
25247: PUSH
25248: LD_VAR 0 5
25252: PUSH
25253: LD_INT 1
25255: ARRAY
25256: PPUSH
25257: CALL_OW 255
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 255
25271: NONEQUAL
25272: OR
25273: IFFALSE 25381
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25275: LD_VAR 0 5
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 305
25288: IFFALSE 25316
25290: PUSH
25291: LD_VAR 0 5
25295: PUSH
25296: LD_INT 1
25298: ARRAY
25299: PPUSH
25300: CALL_OW 255
25304: PUSH
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 255
25314: EQUAL
25315: AND
25316: IFFALSE 25340
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25318: LD_VAR 0 5
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PPUSH
25327: LD_VAR 0 5
25331: PUSH
25332: LD_INT 2
25334: ARRAY
25335: PPUSH
25336: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25340: LD_ADDR_EXP 90
25344: PUSH
25345: LD_EXP 90
25349: PPUSH
25350: LD_VAR 0 4
25354: PPUSH
25355: LD_EXP 90
25359: PUSH
25360: LD_VAR 0 4
25364: ARRAY
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: CALL_OW 3
25375: PPUSH
25376: CALL_OW 1
25380: ST_TO_ADDR
// end ; end ;
25381: GO 25206
25383: POP
25384: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25385: LD_VAR 0 1
25389: PPUSH
25390: LD_EXP 90
25394: PUSH
25395: LD_VAR 0 4
25399: ARRAY
25400: PUSH
25401: LD_INT 0
25403: PLUS
25404: PPUSH
25405: CALL_OW 505
// end ;
25409: LD_VAR 0 2
25413: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
// if not hack in hackTanks then
25420: LD_VAR 0 1
25424: PUSH
25425: LD_EXP 89
25429: IN
25430: NOT
25431: IFFALSE 25435
// exit ;
25433: GO 25520
// index := GetElementIndex ( hackTanks , hack ) ;
25435: LD_ADDR_VAR 0 5
25439: PUSH
25440: LD_EXP 89
25444: PPUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL 33478 0 2
25454: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25455: LD_ADDR_VAR 0 4
25459: PUSH
25460: DOUBLE
25461: LD_INT 1
25463: DEC
25464: ST_TO_ADDR
25465: LD_EXP 90
25469: PUSH
25470: LD_VAR 0 5
25474: ARRAY
25475: PUSH
25476: FOR_TO
25477: IFFALSE 25518
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25479: LD_EXP 90
25483: PUSH
25484: LD_VAR 0 5
25488: ARRAY
25489: PUSH
25490: LD_VAR 0 4
25494: ARRAY
25495: PUSH
25496: LD_INT 1
25498: ARRAY
25499: PUSH
25500: LD_VAR 0 2
25504: EQUAL
25505: IFFALSE 25516
// KillUnit ( vehicle ) ;
25507: LD_VAR 0 2
25511: PPUSH
25512: CALL_OW 66
25516: GO 25476
25518: POP
25519: POP
// end ;
25520: LD_VAR 0 3
25524: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
25525: LD_EXP 94
25529: NOT
25530: IFFALSE 25663
25532: GO 25534
25534: DISABLE
25535: LD_INT 0
25537: PPUSH
// begin initMiner := true ;
25538: LD_ADDR_EXP 94
25542: PUSH
25543: LD_INT 1
25545: ST_TO_ADDR
// minersList := [ ] ;
25546: LD_ADDR_EXP 95
25550: PUSH
25551: EMPTY
25552: ST_TO_ADDR
// minerMinesList := [ ] ;
25553: LD_ADDR_EXP 96
25557: PUSH
25558: EMPTY
25559: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
25560: LD_ADDR_EXP 97
25564: PUSH
25565: LD_INT 10
25567: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25568: LD_ADDR_VAR 0 1
25572: PUSH
25573: LD_INT 34
25575: PUSH
25576: LD_INT 81
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PUSH
25588: FOR_IN
25589: IFFALSE 25661
// begin if not i in minersList then
25591: LD_VAR 0 1
25595: PUSH
25596: LD_EXP 95
25600: IN
25601: NOT
25602: IFFALSE 25659
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25604: LD_ADDR_EXP 95
25608: PUSH
25609: LD_EXP 95
25613: PPUSH
25614: LD_EXP 95
25618: PUSH
25619: LD_INT 1
25621: PLUS
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 1
25632: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25633: LD_ADDR_EXP 96
25637: PUSH
25638: LD_EXP 96
25642: PPUSH
25643: LD_EXP 96
25647: PUSH
25648: LD_INT 1
25650: PLUS
25651: PPUSH
25652: EMPTY
25653: PPUSH
25654: CALL_OW 1
25658: ST_TO_ADDR
// end end ;
25659: GO 25588
25661: POP
25662: POP
// end ;
25663: PPOPN 1
25665: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
25666: LD_EXP 94
25670: IFFALSE 25701
25672: PUSH
25673: LD_EXP 96
25677: PPUSH
25678: CALL 30777 0 1
25682: IFTRUE 25700
25684: PUSH
25685: LD_INT 34
25687: PUSH
25688: LD_INT 81
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL_OW 69
25699: OR
25700: AND
25701: IFFALSE 26221
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
// begin enable ;
25712: ENABLE
// for i := minerMinesList downto 1 do
25713: LD_ADDR_VAR 0 1
25717: PUSH
25718: DOUBLE
25719: LD_EXP 96
25723: INC
25724: ST_TO_ADDR
25725: LD_INT 1
25727: PUSH
25728: FOR_DOWNTO
25729: IFFALSE 26219
// begin side := GetSide ( minersList [ i ] ) ;
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_EXP 95
25740: PUSH
25741: LD_VAR 0 1
25745: ARRAY
25746: PPUSH
25747: CALL_OW 255
25751: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
25752: LD_EXP 95
25756: PUSH
25757: LD_VAR 0 1
25761: ARRAY
25762: PPUSH
25763: CALL_OW 300
25767: IFFALSE 25788
25769: PUSH
25770: LD_VAR 0 3
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: LD_INT 9
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: IN
25787: AND
25788: IFFALSE 25821
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
25790: LD_EXP 95
25794: PUSH
25795: LD_VAR 0 1
25799: ARRAY
25800: PPUSH
25801: LD_EXP 96
25805: PUSH
25806: LD_VAR 0 1
25810: ARRAY
25811: PPUSH
25812: CALL 30777 0 1
25816: PPUSH
25817: CALL_OW 505
// if not minerMinesList [ i ] then
25821: LD_EXP 96
25825: PUSH
25826: LD_VAR 0 1
25830: ARRAY
25831: NOT
25832: IFFALSE 25836
// continue ;
25834: GO 25728
// for j := minerMinesList [ i ] downto 1 do
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: DOUBLE
25842: LD_EXP 96
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: INC
25853: ST_TO_ADDR
25854: LD_INT 1
25856: PUSH
25857: FOR_DOWNTO
25858: IFFALSE 26215
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
25860: LD_EXP 95
25864: PUSH
25865: LD_VAR 0 1
25869: ARRAY
25870: PPUSH
25871: CALL_OW 301
25875: IFTRUE 25895
25877: PUSH
25878: LD_EXP 95
25882: PUSH
25883: LD_VAR 0 1
25887: ARRAY
25888: PPUSH
25889: CALL_OW 305
25893: NOT
25894: OR
25895: IFFALSE 25986
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25897: LD_EXP 96
25901: PUSH
25902: LD_VAR 0 1
25906: ARRAY
25907: PUSH
25908: LD_VAR 0 2
25912: ARRAY
25913: PUSH
25914: LD_INT 1
25916: ARRAY
25917: PPUSH
25918: LD_EXP 96
25922: PUSH
25923: LD_VAR 0 1
25927: ARRAY
25928: PUSH
25929: LD_VAR 0 2
25933: ARRAY
25934: PUSH
25935: LD_INT 2
25937: ARRAY
25938: PPUSH
25939: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25943: LD_ADDR_EXP 96
25947: PUSH
25948: LD_EXP 96
25952: PPUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_EXP 96
25962: PUSH
25963: LD_VAR 0 1
25967: ARRAY
25968: PPUSH
25969: LD_VAR 0 2
25973: PPUSH
25974: CALL_OW 3
25978: PPUSH
25979: CALL_OW 1
25983: ST_TO_ADDR
// continue ;
25984: GO 25857
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25986: LD_ADDR_VAR 0 4
25990: PUSH
25991: LD_EXP 96
25995: PUSH
25996: LD_VAR 0 1
26000: ARRAY
26001: PUSH
26002: LD_VAR 0 2
26006: ARRAY
26007: PUSH
26008: LD_INT 1
26010: ARRAY
26011: PPUSH
26012: LD_EXP 96
26016: PUSH
26017: LD_VAR 0 1
26021: ARRAY
26022: PUSH
26023: LD_VAR 0 2
26027: ARRAY
26028: PUSH
26029: LD_INT 2
26031: ARRAY
26032: PPUSH
26033: CALL_OW 428
26037: ST_TO_ADDR
// if not tmp then
26038: LD_VAR 0 4
26042: NOT
26043: IFFALSE 26047
// continue ;
26045: GO 25857
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26047: LD_VAR 0 4
26051: PUSH
26052: LD_INT 81
26054: PUSH
26055: LD_VAR 0 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PPUSH
26064: CALL_OW 69
26068: IN
26069: IFFALSE 26119
26071: PUSH
26072: LD_EXP 96
26076: PUSH
26077: LD_VAR 0 1
26081: ARRAY
26082: PUSH
26083: LD_VAR 0 2
26087: ARRAY
26088: PUSH
26089: LD_INT 1
26091: ARRAY
26092: PPUSH
26093: LD_EXP 96
26097: PUSH
26098: LD_VAR 0 1
26102: ARRAY
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PPUSH
26114: CALL_OW 458
26118: AND
26119: IFFALSE 26213
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26121: LD_EXP 96
26125: PUSH
26126: LD_VAR 0 1
26130: ARRAY
26131: PUSH
26132: LD_VAR 0 2
26136: ARRAY
26137: PUSH
26138: LD_INT 1
26140: ARRAY
26141: PPUSH
26142: LD_EXP 96
26146: PUSH
26147: LD_VAR 0 1
26151: ARRAY
26152: PUSH
26153: LD_VAR 0 2
26157: ARRAY
26158: PUSH
26159: LD_INT 2
26161: ARRAY
26162: PPUSH
26163: LD_VAR 0 3
26167: PPUSH
26168: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26172: LD_ADDR_EXP 96
26176: PUSH
26177: LD_EXP 96
26181: PPUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: LD_EXP 96
26191: PUSH
26192: LD_VAR 0 1
26196: ARRAY
26197: PPUSH
26198: LD_VAR 0 2
26202: PPUSH
26203: CALL_OW 3
26207: PPUSH
26208: CALL_OW 1
26212: ST_TO_ADDR
// end ; end ;
26213: GO 25857
26215: POP
26216: POP
// end ;
26217: GO 25728
26219: POP
26220: POP
// end ;
26221: PPOPN 4
26223: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
// result := false ;
26230: LD_ADDR_VAR 0 4
26234: PUSH
26235: LD_INT 0
26237: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26238: LD_VAR 0 1
26242: PPUSH
26243: CALL_OW 264
26247: PUSH
26248: LD_INT 81
26250: EQUAL
26251: NOT
26252: IFFALSE 26256
// exit ;
26254: GO 26626
// side := GetSide ( unit ) ;
26256: LD_ADDR_VAR 0 6
26260: PUSH
26261: LD_VAR 0 1
26265: PPUSH
26266: CALL_OW 255
26270: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
26271: LD_ADDR_VAR 0 5
26275: PUSH
26276: LD_EXP 95
26280: PPUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL 33478 0 2
26290: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26291: LD_EXP 96
26295: PUSH
26296: LD_VAR 0 5
26300: ARRAY
26301: PUSH
26302: LD_EXP 97
26306: GREATEREQUAL
26307: IFFALSE 26311
// exit ;
26309: GO 26626
// ComMoveXY ( unit , x , y ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: LD_VAR 0 2
26320: PPUSH
26321: LD_VAR 0 3
26325: PPUSH
26326: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26330: LD_INT 35
26332: PPUSH
26333: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL 65534 0 3
26356: NOT
26357: IFFALSE 26370
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 314
26369: AND
26370: IFFALSE 26374
// exit ;
26372: GO 26626
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26374: LD_VAR 0 2
26378: PPUSH
26379: LD_VAR 0 3
26383: PPUSH
26384: CALL_OW 428
26388: PUSH
26389: LD_VAR 0 1
26393: EQUAL
26394: IFFALSE 26408
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 314
26406: NOT
26407: AND
26408: IFFALSE 26330
// if MineAtPos ( x , y ) then
26410: LD_VAR 0 2
26414: PPUSH
26415: LD_VAR 0 3
26419: PPUSH
26420: CALL_OW 458
26424: IFFALSE 26428
// exit ;
26426: GO 26626
// if your_side = side then
26428: LD_OWVAR 2
26432: PUSH
26433: LD_VAR 0 6
26437: EQUAL
26438: IFFALSE 26457
// PlaySoundXY ( x , y , PlantMine ) ;
26440: LD_VAR 0 2
26444: PPUSH
26445: LD_VAR 0 3
26449: PPUSH
26450: LD_STRING PlantMine
26452: PPUSH
26453: CALL_OW 366
// repeat wait ( 1 ) ;
26457: LD_INT 1
26459: PPUSH
26460: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 3
26473: PPUSH
26474: LD_VAR 0 6
26478: PPUSH
26479: LD_INT 0
26481: PPUSH
26482: CALL_OW 454
26486: IFFALSE 26457
// if MineAtPos ( x , y ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: LD_VAR 0 3
26497: PPUSH
26498: CALL_OW 458
26502: IFFALSE 26618
// begin for i in minerMinesList [ index ] do
26504: LD_ADDR_VAR 0 7
26508: PUSH
26509: LD_EXP 96
26513: PUSH
26514: LD_VAR 0 5
26518: ARRAY
26519: PUSH
26520: FOR_IN
26521: IFFALSE 26563
// if i [ 1 ] = x and i [ 2 ] = y then
26523: LD_VAR 0 7
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: PUSH
26532: LD_VAR 0 2
26536: EQUAL
26537: IFFALSE 26555
26539: PUSH
26540: LD_VAR 0 7
26544: PUSH
26545: LD_INT 2
26547: ARRAY
26548: PUSH
26549: LD_VAR 0 3
26553: EQUAL
26554: AND
26555: IFFALSE 26561
// exit ;
26557: POP
26558: POP
26559: GO 26626
26561: GO 26520
26563: POP
26564: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26565: LD_ADDR_EXP 96
26569: PUSH
26570: LD_EXP 96
26574: PPUSH
26575: LD_VAR 0 5
26579: PUSH
26580: LD_EXP 96
26584: PUSH
26585: LD_VAR 0 5
26589: ARRAY
26590: PUSH
26591: LD_INT 1
26593: PLUS
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PPUSH
26599: LD_VAR 0 2
26603: PUSH
26604: LD_VAR 0 3
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PPUSH
26613: CALL 33695 0 3
26617: ST_TO_ADDR
// end ; result := true ;
26618: LD_ADDR_VAR 0 4
26622: PUSH
26623: LD_INT 1
26625: ST_TO_ADDR
// end ;
26626: LD_VAR 0 4
26630: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
26635: PPUSH
// if not unit in minersList then
26636: LD_VAR 0 1
26640: PUSH
26641: LD_EXP 95
26645: IN
26646: NOT
26647: IFFALSE 26651
// exit ;
26649: GO 26858
// index := GetElementIndex ( minersList , unit ) ;
26651: LD_ADDR_VAR 0 6
26655: PUSH
26656: LD_EXP 95
26660: PPUSH
26661: LD_VAR 0 1
26665: PPUSH
26666: CALL 33478 0 2
26670: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26671: LD_ADDR_VAR 0 5
26675: PUSH
26676: DOUBLE
26677: LD_EXP 96
26681: PUSH
26682: LD_VAR 0 6
26686: ARRAY
26687: INC
26688: ST_TO_ADDR
26689: LD_INT 1
26691: PUSH
26692: FOR_DOWNTO
26693: IFFALSE 26856
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26695: LD_EXP 96
26699: PUSH
26700: LD_VAR 0 6
26704: ARRAY
26705: PUSH
26706: LD_VAR 0 5
26710: ARRAY
26711: PUSH
26712: LD_INT 1
26714: ARRAY
26715: PPUSH
26716: LD_EXP 96
26720: PUSH
26721: LD_VAR 0 6
26725: ARRAY
26726: PUSH
26727: LD_VAR 0 5
26731: ARRAY
26732: PUSH
26733: LD_INT 2
26735: ARRAY
26736: PPUSH
26737: LD_VAR 0 2
26741: PPUSH
26742: LD_VAR 0 3
26746: PPUSH
26747: CALL_OW 298
26751: PUSH
26752: LD_INT 6
26754: LESS
26755: IFFALSE 26854
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26757: LD_EXP 96
26761: PUSH
26762: LD_VAR 0 6
26766: ARRAY
26767: PUSH
26768: LD_VAR 0 5
26772: ARRAY
26773: PUSH
26774: LD_INT 1
26776: ARRAY
26777: PPUSH
26778: LD_EXP 96
26782: PUSH
26783: LD_VAR 0 6
26787: ARRAY
26788: PUSH
26789: LD_VAR 0 5
26793: ARRAY
26794: PUSH
26795: LD_INT 2
26797: ARRAY
26798: PPUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 255
26808: PPUSH
26809: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26813: LD_ADDR_EXP 96
26817: PUSH
26818: LD_EXP 96
26822: PPUSH
26823: LD_VAR 0 6
26827: PPUSH
26828: LD_EXP 96
26832: PUSH
26833: LD_VAR 0 6
26837: ARRAY
26838: PPUSH
26839: LD_VAR 0 5
26843: PPUSH
26844: CALL_OW 3
26848: PPUSH
26849: CALL_OW 1
26853: ST_TO_ADDR
// end ; end ;
26854: GO 26692
26856: POP
26857: POP
// end ;
26858: LD_VAR 0 4
26862: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26863: LD_INT 0
26865: PPUSH
26866: PPUSH
26867: PPUSH
26868: PPUSH
26869: PPUSH
26870: PPUSH
26871: PPUSH
26872: PPUSH
26873: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26874: LD_VAR 0 1
26878: PPUSH
26879: CALL_OW 264
26883: PUSH
26884: LD_INT 81
26886: EQUAL
26887: NOT
26888: IFTRUE 26903
26890: PUSH
26891: LD_VAR 0 1
26895: PUSH
26896: LD_EXP 95
26900: IN
26901: NOT
26902: OR
26903: IFFALSE 26907
// exit ;
26905: GO 27233
// index := GetElementIndex ( minersList , unit ) ;
26907: LD_ADDR_VAR 0 6
26911: PUSH
26912: LD_EXP 95
26916: PPUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL 33478 0 2
26926: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26927: LD_ADDR_VAR 0 8
26931: PUSH
26932: LD_EXP 97
26936: PUSH
26937: LD_EXP 96
26941: PUSH
26942: LD_VAR 0 6
26946: ARRAY
26947: MINUS
26948: ST_TO_ADDR
// if not minesFreeAmount then
26949: LD_VAR 0 8
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 27233
// tmp := [ ] ;
26958: LD_ADDR_VAR 0 7
26962: PUSH
26963: EMPTY
26964: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26965: LD_ADDR_VAR 0 5
26969: PUSH
26970: DOUBLE
26971: LD_INT 1
26973: DEC
26974: ST_TO_ADDR
26975: LD_VAR 0 8
26979: PUSH
26980: FOR_TO
26981: IFFALSE 27180
// begin _d := rand ( 0 , 5 ) ;
26983: LD_ADDR_VAR 0 11
26987: PUSH
26988: LD_INT 0
26990: PPUSH
26991: LD_INT 5
26993: PPUSH
26994: CALL_OW 12
26998: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26999: LD_ADDR_VAR 0 12
27003: PUSH
27004: LD_INT 2
27006: PPUSH
27007: LD_INT 6
27009: PPUSH
27010: CALL_OW 12
27014: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27015: LD_ADDR_VAR 0 9
27019: PUSH
27020: LD_VAR 0 2
27024: PPUSH
27025: LD_VAR 0 11
27029: PPUSH
27030: LD_VAR 0 12
27034: PPUSH
27035: CALL_OW 272
27039: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27040: LD_ADDR_VAR 0 10
27044: PUSH
27045: LD_VAR 0 3
27049: PPUSH
27050: LD_VAR 0 11
27054: PPUSH
27055: LD_VAR 0 12
27059: PPUSH
27060: CALL_OW 273
27064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27065: LD_VAR 0 9
27069: PPUSH
27070: LD_VAR 0 10
27074: PPUSH
27075: CALL_OW 488
27079: IFFALSE 27103
27081: PUSH
27082: LD_VAR 0 9
27086: PUSH
27087: LD_VAR 0 10
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_VAR 0 7
27100: IN
27101: NOT
27102: AND
27103: IFFALSE 27122
27105: PUSH
27106: LD_VAR 0 9
27110: PPUSH
27111: LD_VAR 0 10
27115: PPUSH
27116: CALL_OW 458
27120: NOT
27121: AND
27122: IFFALSE 27164
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27124: LD_ADDR_VAR 0 7
27128: PUSH
27129: LD_VAR 0 7
27133: PPUSH
27134: LD_VAR 0 7
27138: PUSH
27139: LD_INT 1
27141: PLUS
27142: PPUSH
27143: LD_VAR 0 9
27147: PUSH
27148: LD_VAR 0 10
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PPUSH
27157: CALL_OW 1
27161: ST_TO_ADDR
27162: GO 27178
// i := i - 1 ;
27164: LD_ADDR_VAR 0 5
27168: PUSH
27169: LD_VAR 0 5
27173: PUSH
27174: LD_INT 1
27176: MINUS
27177: ST_TO_ADDR
// end ;
27178: GO 26980
27180: POP
27181: POP
// for i in tmp do
27182: LD_ADDR_VAR 0 5
27186: PUSH
27187: LD_VAR 0 7
27191: PUSH
27192: FOR_IN
27193: IFFALSE 27231
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27195: LD_VAR 0 1
27199: PPUSH
27200: LD_VAR 0 5
27204: PUSH
27205: LD_INT 1
27207: ARRAY
27208: PPUSH
27209: LD_VAR 0 5
27213: PUSH
27214: LD_INT 2
27216: ARRAY
27217: PPUSH
27218: CALL 26224 0 3
27222: NOT
27223: IFFALSE 27229
// exit ;
27225: POP
27226: POP
27227: GO 27233
27229: GO 27192
27231: POP
27232: POP
// end ;
27233: LD_VAR 0 4
27237: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
27238: LD_INT 0
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
// if GetClass ( unit ) <> class_sniper then
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 257
27258: PUSH
27259: LD_INT 5
27261: NONEQUAL
27262: IFFALSE 27266
// exit ;
27264: GO 27736
// dist := 8 ;
27266: LD_ADDR_VAR 0 5
27270: PUSH
27271: LD_INT 8
27273: ST_TO_ADDR
// viewRange := 12 ;
27274: LD_ADDR_VAR 0 8
27278: PUSH
27279: LD_INT 12
27281: ST_TO_ADDR
// side := GetSide ( unit ) ;
27282: LD_ADDR_VAR 0 6
27286: PUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: CALL_OW 255
27296: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27297: LD_INT 61
27299: PPUSH
27300: LD_VAR 0 6
27304: PPUSH
27305: CALL_OW 321
27309: PUSH
27310: LD_INT 2
27312: EQUAL
27313: IFFALSE 27323
// viewRange := 16 ;
27315: LD_ADDR_VAR 0 8
27319: PUSH
27320: LD_INT 16
27322: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 2
27332: PPUSH
27333: LD_VAR 0 3
27337: PPUSH
27338: CALL_OW 297
27342: PUSH
27343: LD_VAR 0 5
27347: GREATER
27348: IFFALSE 27427
// begin ComMoveXY ( unit , x , y ) ;
27350: LD_VAR 0 1
27354: PPUSH
27355: LD_VAR 0 2
27359: PPUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27369: LD_INT 35
27371: PPUSH
27372: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27376: LD_VAR 0 1
27380: PPUSH
27381: LD_VAR 0 2
27385: PPUSH
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL 65534 0 3
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27736
// until GetDistUnitXY ( unit , x , y ) < dist ;
27400: LD_VAR 0 1
27404: PPUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: CALL_OW 297
27419: PUSH
27420: LD_VAR 0 5
27424: LESS
27425: IFFALSE 27369
// end ; ComTurnXY ( unit , x , y ) ;
27427: LD_VAR 0 1
27431: PPUSH
27432: LD_VAR 0 2
27436: PPUSH
27437: LD_VAR 0 3
27441: PPUSH
27442: CALL_OW 118
// repeat if Multiplayer then
27446: LD_OWVAR 4
27450: IFFALSE 27461
// wait ( 35 ) else
27452: LD_INT 35
27454: PPUSH
27455: CALL_OW 67
27459: GO 27468
// wait ( 5 ) ;
27461: LD_INT 5
27463: PPUSH
27464: CALL_OW 67
// _d := GetDir ( unit ) ;
27468: LD_ADDR_VAR 0 11
27472: PUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 254
27482: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27483: LD_ADDR_VAR 0 7
27487: PUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 250
27497: PPUSH
27498: LD_VAR 0 1
27502: PPUSH
27503: CALL_OW 251
27507: PPUSH
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_VAR 0 3
27517: PPUSH
27518: CALL 68170 0 4
27522: ST_TO_ADDR
// until dir = _d ;
27523: LD_VAR 0 7
27527: PUSH
27528: LD_VAR 0 11
27532: EQUAL
27533: IFFALSE 27446
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27535: LD_ADDR_VAR 0 9
27539: PUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 250
27549: PPUSH
27550: LD_VAR 0 7
27554: PPUSH
27555: LD_VAR 0 5
27559: PPUSH
27560: CALL_OW 272
27564: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27565: LD_ADDR_VAR 0 10
27569: PUSH
27570: LD_VAR 0 1
27574: PPUSH
27575: CALL_OW 251
27579: PPUSH
27580: LD_VAR 0 7
27584: PPUSH
27585: LD_VAR 0 5
27589: PPUSH
27590: CALL_OW 273
27594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27595: LD_VAR 0 9
27599: PPUSH
27600: LD_VAR 0 10
27604: PPUSH
27605: CALL_OW 488
27609: NOT
27610: IFFALSE 27614
// exit ;
27612: GO 27736
// ComAnimCustom ( unit , 1 ) ;
27614: LD_VAR 0 1
27618: PPUSH
27619: LD_INT 1
27621: PPUSH
27622: CALL_OW 592
// p := 0 ;
27626: LD_ADDR_VAR 0 12
27630: PUSH
27631: LD_INT 0
27633: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27634: LD_VAR 0 9
27638: PPUSH
27639: LD_VAR 0 10
27643: PPUSH
27644: LD_VAR 0 6
27648: PPUSH
27649: LD_VAR 0 8
27653: PPUSH
27654: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27658: LD_INT 35
27660: PPUSH
27661: CALL_OW 67
// p := Inc ( p ) ;
27665: LD_ADDR_VAR 0 12
27669: PUSH
27670: LD_VAR 0 12
27674: PPUSH
27675: CALL 68126 0 1
27679: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27680: LD_VAR 0 12
27684: PUSH
27685: LD_INT 3
27687: EQUAL
27688: IFTRUE 27702
27690: PUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 302
27700: NOT
27701: OR
27702: IFTRUE 27715
27704: PUSH
27705: LD_VAR 0 1
27709: PPUSH
27710: CALL_OW 301
27714: OR
27715: IFFALSE 27658
// RemoveSeeing ( _x , _y , side ) ;
27717: LD_VAR 0 9
27721: PPUSH
27722: LD_VAR 0 10
27726: PPUSH
27727: LD_VAR 0 6
27731: PPUSH
27732: CALL_OW 331
// end ;
27736: LD_VAR 0 4
27740: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
27745: PPUSH
27746: PPUSH
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
// if not unit then
27754: LD_VAR 0 1
27758: NOT
27759: IFFALSE 27763
// exit ;
27761: GO 28034
// side := GetSide ( unit ) ;
27763: LD_ADDR_VAR 0 3
27767: PUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 255
27777: ST_TO_ADDR
// x := GetX ( unit ) ;
27778: LD_ADDR_VAR 0 5
27782: PUSH
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 250
27792: ST_TO_ADDR
// y := GetY ( unit ) ;
27793: LD_ADDR_VAR 0 6
27797: PUSH
27798: LD_VAR 0 1
27802: PPUSH
27803: CALL_OW 251
27807: ST_TO_ADDR
// r := 8 ;
27808: LD_ADDR_VAR 0 4
27812: PUSH
27813: LD_INT 8
27815: ST_TO_ADDR
// if x - r < 0 then
27816: LD_VAR 0 5
27820: PUSH
27821: LD_VAR 0 4
27825: MINUS
27826: PUSH
27827: LD_INT 0
27829: LESS
27830: IFFALSE 27842
// min_x := 0 else
27832: LD_ADDR_VAR 0 7
27836: PUSH
27837: LD_INT 0
27839: ST_TO_ADDR
27840: GO 27858
// min_x := x - r ;
27842: LD_ADDR_VAR 0 7
27846: PUSH
27847: LD_VAR 0 5
27851: PUSH
27852: LD_VAR 0 4
27856: MINUS
27857: ST_TO_ADDR
// if y - r < 0 then
27858: LD_VAR 0 6
27862: PUSH
27863: LD_VAR 0 4
27867: MINUS
27868: PUSH
27869: LD_INT 0
27871: LESS
27872: IFFALSE 27884
// min_y := 0 else
27874: LD_ADDR_VAR 0 8
27878: PUSH
27879: LD_INT 0
27881: ST_TO_ADDR
27882: GO 27900
// min_y := y - r ;
27884: LD_ADDR_VAR 0 8
27888: PUSH
27889: LD_VAR 0 6
27893: PUSH
27894: LD_VAR 0 4
27898: MINUS
27899: ST_TO_ADDR
// max_x := x + r ;
27900: LD_ADDR_VAR 0 9
27904: PUSH
27905: LD_VAR 0 5
27909: PUSH
27910: LD_VAR 0 4
27914: PLUS
27915: ST_TO_ADDR
// max_y := y + r ;
27916: LD_ADDR_VAR 0 10
27920: PUSH
27921: LD_VAR 0 6
27925: PUSH
27926: LD_VAR 0 4
27930: PLUS
27931: ST_TO_ADDR
// for _x = min_x to max_x do
27932: LD_ADDR_VAR 0 11
27936: PUSH
27937: DOUBLE
27938: LD_VAR 0 7
27942: DEC
27943: ST_TO_ADDR
27944: LD_VAR 0 9
27948: PUSH
27949: FOR_TO
27950: IFFALSE 28032
// for _y = min_y to max_y do
27952: LD_ADDR_VAR 0 12
27956: PUSH
27957: DOUBLE
27958: LD_VAR 0 8
27962: DEC
27963: ST_TO_ADDR
27964: LD_VAR 0 10
27968: PUSH
27969: FOR_TO
27970: IFFALSE 28028
// begin if not ValidHex ( _x , _y ) then
27972: LD_VAR 0 11
27976: PPUSH
27977: LD_VAR 0 12
27981: PPUSH
27982: CALL_OW 488
27986: NOT
27987: IFFALSE 27991
// continue ;
27989: GO 27969
// if MineAtPos ( _x , _y ) then
27991: LD_VAR 0 11
27995: PPUSH
27996: LD_VAR 0 12
28000: PPUSH
28001: CALL_OW 458
28005: IFFALSE 28026
// ViewMineAtPos ( _x , _y , side ) ;
28007: LD_VAR 0 11
28011: PPUSH
28012: LD_VAR 0 12
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 457
// end ;
28026: GO 27969
28028: POP
28029: POP
28030: GO 27949
28032: POP
28033: POP
// end ;
28034: LD_VAR 0 2
28038: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
28047: PPUSH
// if not units then
28048: LD_VAR 0 1
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28521
// scaners := [ ] ;
28057: LD_ADDR_VAR 0 6
28061: PUSH
28062: EMPTY
28063: ST_TO_ADDR
// for i in units do
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_VAR 0 1
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28232
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
28077: LD_VAR 0 3
28081: PPUSH
28082: CALL_OW 264
28086: PUSH
28087: LD_INT 11
28089: NONEQUAL
28090: IFTRUE 28104
28092: PUSH
28093: LD_VAR 0 3
28097: PPUSH
28098: CALL_OW 302
28102: NOT
28103: OR
28104: IFTRUE 28121
28106: PUSH
28107: LD_VAR 0 3
28111: PPUSH
28112: CALL_OW 110
28116: PUSH
28117: LD_INT 502
28119: EQUAL
28120: OR
28121: IFFALSE 28125
// continue ;
28123: GO 28074
// ComStop ( i ) ;
28125: LD_VAR 0 3
28129: PPUSH
28130: CALL_OW 141
// x := GetX ( i ) ;
28134: LD_ADDR_VAR 0 4
28138: PUSH
28139: LD_VAR 0 3
28143: PPUSH
28144: CALL_OW 250
28148: ST_TO_ADDR
// y := GetY ( i ) ;
28149: LD_ADDR_VAR 0 5
28153: PUSH
28154: LD_VAR 0 3
28158: PPUSH
28159: CALL_OW 251
28163: ST_TO_ADDR
// if GetSide ( i ) = your_side then
28164: LD_VAR 0 3
28168: PPUSH
28169: CALL_OW 255
28173: PUSH
28174: LD_OWVAR 2
28178: EQUAL
28179: IFFALSE 28198
// PlaySoundXY ( x , y , mineDetector ) ;
28181: LD_VAR 0 4
28185: PPUSH
28186: LD_VAR 0 5
28190: PPUSH
28191: LD_STRING mineDetector
28193: PPUSH
28194: CALL_OW 366
// scaners := Join ( scaners , i ) ;
28198: LD_ADDR_VAR 0 6
28202: PUSH
28203: LD_VAR 0 6
28207: PPUSH
28208: LD_VAR 0 3
28212: PPUSH
28213: CALL 66753 0 2
28217: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
28218: LD_VAR 0 3
28222: PPUSH
28223: LD_INT 502
28225: PPUSH
28226: CALL_OW 109
// end ;
28230: GO 28074
28232: POP
28233: POP
// if not scaners then
28234: LD_VAR 0 6
28238: NOT
28239: IFFALSE 28243
// exit ;
28241: GO 28521
// wait ( 3 ) ;
28243: LD_INT 3
28245: PPUSH
28246: CALL_OW 67
// timer := 6 ;
28250: LD_ADDR_VAR 0 7
28254: PUSH
28255: LD_INT 6
28257: ST_TO_ADDR
// repeat for i in scaners do
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_VAR 0 6
28267: PUSH
28268: FOR_IN
28269: IFFALSE 28419
// begin side := GetSide ( i ) ;
28271: LD_ADDR_VAR 0 8
28275: PUSH
28276: LD_VAR 0 3
28280: PPUSH
28281: CALL_OW 255
28285: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
28286: LD_VAR 0 3
28290: PPUSH
28291: CALL_OW 302
28295: NOT
28296: IFTRUE 28309
28298: PUSH
28299: LD_VAR 0 3
28303: PPUSH
28304: CALL_OW 314
28308: OR
28309: IFTRUE 28340
28311: PUSH
28312: LD_VAR 0 3
28316: PPUSH
28317: CALL_OW 263
28321: PUSH
28322: LD_INT 1
28324: EQUAL
28325: IFFALSE 28339
28327: PUSH
28328: LD_VAR 0 3
28332: PPUSH
28333: CALL_OW 311
28337: NOT
28338: AND
28339: OR
28340: IFFALSE 28384
// begin SetUnitDisplayNumber ( i , 0 ) ;
28342: LD_VAR 0 3
28346: PPUSH
28347: LD_INT 0
28349: PPUSH
28350: CALL_OW 505
// SetTag ( i , 0 ) ;
28354: LD_VAR 0 3
28358: PPUSH
28359: LD_INT 0
28361: PPUSH
28362: CALL_OW 109
// scaners := scaners diff i ;
28366: LD_ADDR_VAR 0 6
28370: PUSH
28371: LD_VAR 0 6
28375: PUSH
28376: LD_VAR 0 3
28380: DIFF
28381: ST_TO_ADDR
// continue ;
28382: GO 28268
// end ; if side in [ your_side , 9 ] then
28384: LD_VAR 0 8
28388: PUSH
28389: LD_OWVAR 2
28393: PUSH
28394: LD_INT 9
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: IN
28401: IFFALSE 28417
// SetUnitDisplayNumber ( i , timer ) ;
28403: LD_VAR 0 3
28407: PPUSH
28408: LD_VAR 0 7
28412: PPUSH
28413: CALL_OW 505
// end ;
28417: GO 28268
28419: POP
28420: POP
// if not scaners then
28421: LD_VAR 0 6
28425: NOT
28426: IFFALSE 28430
// exit ;
28428: GO 28521
// timer := Dec ( timer ) ;
28430: LD_ADDR_VAR 0 7
28434: PUSH
28435: LD_VAR 0 7
28439: PPUSH
28440: CALL 68148 0 1
28444: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28445: LD_INT 35
28447: PPUSH
28448: CALL_OW 67
// until timer = 0 ;
28452: LD_VAR 0 7
28456: PUSH
28457: LD_INT 0
28459: EQUAL
28460: IFFALSE 28258
// if not scaners then
28462: LD_VAR 0 6
28466: NOT
28467: IFFALSE 28471
// exit ;
28469: GO 28521
// for i in scaners do
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_VAR 0 6
28480: PUSH
28481: FOR_IN
28482: IFFALSE 28519
// begin SetUnitDisplayNumber ( i , 0 ) ;
28484: LD_VAR 0 3
28488: PPUSH
28489: LD_INT 0
28491: PPUSH
28492: CALL_OW 505
// SetTag ( i , 0 ) ;
28496: LD_VAR 0 3
28500: PPUSH
28501: LD_INT 0
28503: PPUSH
28504: CALL_OW 109
// RevealDetectorMine ( i ) ;
28508: LD_VAR 0 3
28512: PPUSH
28513: CALL 27741 0 1
// end ;
28517: GO 28481
28519: POP
28520: POP
// end ;
28521: LD_VAR 0 2
28525: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
28526: LD_INT 0
28528: PPUSH
// if p1 = mine_detector_mode then
28529: LD_VAR 0 2
28533: PUSH
28534: LD_INT 103
28536: EQUAL
28537: IFFALSE 28548
// DetectMine ( units ) ;
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL 28039 0 1
// end ; end_of_file
28548: LD_VAR 0 7
28552: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
// if exist_mode then
28557: LD_VAR 0 2
28561: IFFALSE 28607
// begin unit := CreateCharacter ( prefix & ident ) ;
28563: LD_ADDR_VAR 0 5
28567: PUSH
28568: LD_VAR 0 3
28572: PUSH
28573: LD_VAR 0 1
28577: STR
28578: PPUSH
28579: CALL_OW 34
28583: ST_TO_ADDR
// if unit then
28584: LD_VAR 0 5
28588: IFFALSE 28605
// DeleteCharacters ( prefix & ident ) ;
28590: LD_VAR 0 3
28594: PUSH
28595: LD_VAR 0 1
28599: STR
28600: PPUSH
28601: CALL_OW 40
// end else
28605: GO 28622
// unit := NewCharacter ( ident ) ;
28607: LD_ADDR_VAR 0 5
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 25
28621: ST_TO_ADDR
// result := unit ;
28622: LD_ADDR_VAR 0 4
28626: PUSH
28627: LD_VAR 0 5
28631: ST_TO_ADDR
// end ;
28632: LD_VAR 0 4
28636: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28637: LD_INT 0
28639: PPUSH
28640: PPUSH
// if exist_mode then
28641: LD_VAR 0 2
28645: IFFALSE 28670
// unit := CreateCharacter ( prefix & ident ) else
28647: LD_ADDR_VAR 0 5
28651: PUSH
28652: LD_VAR 0 3
28656: PUSH
28657: LD_VAR 0 1
28661: STR
28662: PPUSH
28663: CALL_OW 34
28667: ST_TO_ADDR
28668: GO 28685
// unit := NewCharacter ( ident ) ;
28670: LD_ADDR_VAR 0 5
28674: PUSH
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 25
28684: ST_TO_ADDR
// result := unit ;
28685: LD_ADDR_VAR 0 4
28689: PUSH
28690: LD_VAR 0 5
28694: ST_TO_ADDR
// end ;
28695: LD_VAR 0 4
28699: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
// if not side or not nation then
28704: LD_VAR 0 1
28708: NOT
28709: IFTRUE 28718
28711: PUSH
28712: LD_VAR 0 2
28716: NOT
28717: OR
28718: IFFALSE 28722
// exit ;
28720: GO 29516
// case nation of nation_american :
28722: LD_VAR 0 2
28726: PUSH
28727: LD_INT 1
28729: DOUBLE
28730: EQUAL
28731: IFTRUE 28735
28733: GO 28957
28735: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
28736: LD_ADDR_VAR 0 4
28740: PUSH
28741: LD_INT 35
28743: PUSH
28744: LD_INT 45
28746: PUSH
28747: LD_INT 46
28749: PUSH
28750: LD_INT 47
28752: PUSH
28753: LD_INT 82
28755: PUSH
28756: LD_INT 83
28758: PUSH
28759: LD_INT 84
28761: PUSH
28762: LD_INT 85
28764: PUSH
28765: LD_INT 86
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 6
28776: PUSH
28777: LD_INT 15
28779: PUSH
28780: LD_INT 16
28782: PUSH
28783: LD_INT 7
28785: PUSH
28786: LD_INT 12
28788: PUSH
28789: LD_INT 13
28791: PUSH
28792: LD_INT 10
28794: PUSH
28795: LD_INT 14
28797: PUSH
28798: LD_INT 20
28800: PUSH
28801: LD_INT 21
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_INT 25
28809: PUSH
28810: LD_INT 32
28812: PUSH
28813: LD_INT 27
28815: PUSH
28816: LD_INT 36
28818: PUSH
28819: LD_INT 69
28821: PUSH
28822: LD_INT 39
28824: PUSH
28825: LD_INT 34
28827: PUSH
28828: LD_INT 40
28830: PUSH
28831: LD_INT 48
28833: PUSH
28834: LD_INT 49
28836: PUSH
28837: LD_INT 50
28839: PUSH
28840: LD_INT 51
28842: PUSH
28843: LD_INT 52
28845: PUSH
28846: LD_INT 53
28848: PUSH
28849: LD_INT 54
28851: PUSH
28852: LD_INT 55
28854: PUSH
28855: LD_INT 56
28857: PUSH
28858: LD_INT 57
28860: PUSH
28861: LD_INT 58
28863: PUSH
28864: LD_INT 59
28866: PUSH
28867: LD_INT 60
28869: PUSH
28870: LD_INT 61
28872: PUSH
28873: LD_INT 62
28875: PUSH
28876: LD_INT 80
28878: PUSH
28879: LD_INT 82
28881: PUSH
28882: LD_INT 83
28884: PUSH
28885: LD_INT 84
28887: PUSH
28888: LD_INT 85
28890: PUSH
28891: LD_INT 86
28893: PUSH
28894: LD_INT 90
28896: PUSH
28897: LD_INT 93
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
28955: GO 29438
28957: LD_INT 2
28959: DOUBLE
28960: EQUAL
28961: IFTRUE 28965
28963: GO 29199
28965: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
28966: LD_ADDR_VAR 0 4
28970: PUSH
28971: LD_INT 35
28973: PUSH
28974: LD_INT 45
28976: PUSH
28977: LD_INT 46
28979: PUSH
28980: LD_INT 47
28982: PUSH
28983: LD_INT 82
28985: PUSH
28986: LD_INT 83
28988: PUSH
28989: LD_INT 84
28991: PUSH
28992: LD_INT 85
28994: PUSH
28995: LD_INT 87
28997: PUSH
28998: LD_INT 70
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 11
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 5
29015: PUSH
29016: LD_INT 6
29018: PUSH
29019: LD_INT 15
29021: PUSH
29022: LD_INT 18
29024: PUSH
29025: LD_INT 7
29027: PUSH
29028: LD_INT 17
29030: PUSH
29031: LD_INT 8
29033: PUSH
29034: LD_INT 20
29036: PUSH
29037: LD_INT 21
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_INT 72
29045: PUSH
29046: LD_INT 26
29048: PUSH
29049: LD_INT 69
29051: PUSH
29052: LD_INT 39
29054: PUSH
29055: LD_INT 40
29057: PUSH
29058: LD_INT 41
29060: PUSH
29061: LD_INT 42
29063: PUSH
29064: LD_INT 43
29066: PUSH
29067: LD_INT 48
29069: PUSH
29070: LD_INT 49
29072: PUSH
29073: LD_INT 50
29075: PUSH
29076: LD_INT 51
29078: PUSH
29079: LD_INT 52
29081: PUSH
29082: LD_INT 53
29084: PUSH
29085: LD_INT 54
29087: PUSH
29088: LD_INT 55
29090: PUSH
29091: LD_INT 56
29093: PUSH
29094: LD_INT 60
29096: PUSH
29097: LD_INT 61
29099: PUSH
29100: LD_INT 62
29102: PUSH
29103: LD_INT 66
29105: PUSH
29106: LD_INT 67
29108: PUSH
29109: LD_INT 68
29111: PUSH
29112: LD_INT 81
29114: PUSH
29115: LD_INT 82
29117: PUSH
29118: LD_INT 83
29120: PUSH
29121: LD_INT 84
29123: PUSH
29124: LD_INT 85
29126: PUSH
29127: LD_INT 87
29129: PUSH
29130: LD_INT 88
29132: PUSH
29133: LD_INT 92
29135: PUSH
29136: LD_INT 94
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
29197: GO 29438
29199: LD_INT 3
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29437
29207: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
29208: LD_ADDR_VAR 0 4
29212: PUSH
29213: LD_INT 46
29215: PUSH
29216: LD_INT 47
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: LD_INT 82
29227: PUSH
29228: LD_INT 83
29230: PUSH
29231: LD_INT 84
29233: PUSH
29234: LD_INT 85
29236: PUSH
29237: LD_INT 86
29239: PUSH
29240: LD_INT 11
29242: PUSH
29243: LD_INT 9
29245: PUSH
29246: LD_INT 20
29248: PUSH
29249: LD_INT 19
29251: PUSH
29252: LD_INT 21
29254: PUSH
29255: LD_INT 24
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 25
29263: PUSH
29264: LD_INT 28
29266: PUSH
29267: LD_INT 29
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 31
29275: PUSH
29276: LD_INT 37
29278: PUSH
29279: LD_INT 38
29281: PUSH
29282: LD_INT 32
29284: PUSH
29285: LD_INT 27
29287: PUSH
29288: LD_INT 33
29290: PUSH
29291: LD_INT 69
29293: PUSH
29294: LD_INT 39
29296: PUSH
29297: LD_INT 34
29299: PUSH
29300: LD_INT 40
29302: PUSH
29303: LD_INT 71
29305: PUSH
29306: LD_INT 23
29308: PUSH
29309: LD_INT 44
29311: PUSH
29312: LD_INT 48
29314: PUSH
29315: LD_INT 49
29317: PUSH
29318: LD_INT 50
29320: PUSH
29321: LD_INT 51
29323: PUSH
29324: LD_INT 52
29326: PUSH
29327: LD_INT 53
29329: PUSH
29330: LD_INT 54
29332: PUSH
29333: LD_INT 55
29335: PUSH
29336: LD_INT 56
29338: PUSH
29339: LD_INT 57
29341: PUSH
29342: LD_INT 58
29344: PUSH
29345: LD_INT 59
29347: PUSH
29348: LD_INT 63
29350: PUSH
29351: LD_INT 64
29353: PUSH
29354: LD_INT 65
29356: PUSH
29357: LD_INT 82
29359: PUSH
29360: LD_INT 83
29362: PUSH
29363: LD_INT 84
29365: PUSH
29366: LD_INT 85
29368: PUSH
29369: LD_INT 86
29371: PUSH
29372: LD_INT 89
29374: PUSH
29375: LD_INT 91
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
29435: GO 29438
29437: POP
// if state > - 1 and state < 3 then
29438: LD_VAR 0 3
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: GREATER
29447: IFFALSE 29459
29449: PUSH
29450: LD_VAR 0 3
29454: PUSH
29455: LD_INT 3
29457: LESS
29458: AND
29459: IFFALSE 29516
// for i in result do
29461: LD_ADDR_VAR 0 5
29465: PUSH
29466: LD_VAR 0 4
29470: PUSH
29471: FOR_IN
29472: IFFALSE 29514
// if GetTech ( i , side ) <> state then
29474: LD_VAR 0 5
29478: PPUSH
29479: LD_VAR 0 1
29483: PPUSH
29484: CALL_OW 321
29488: PUSH
29489: LD_VAR 0 3
29493: NONEQUAL
29494: IFFALSE 29512
// result := result diff i ;
29496: LD_ADDR_VAR 0 4
29500: PUSH
29501: LD_VAR 0 4
29505: PUSH
29506: LD_VAR 0 5
29510: DIFF
29511: ST_TO_ADDR
29512: GO 29471
29514: POP
29515: POP
// end ;
29516: LD_VAR 0 4
29520: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29521: LD_INT 0
29523: PPUSH
29524: PPUSH
29525: PPUSH
// result := true ;
29526: LD_ADDR_VAR 0 3
29530: PUSH
29531: LD_INT 1
29533: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29534: LD_ADDR_VAR 0 5
29538: PUSH
29539: LD_VAR 0 2
29543: PPUSH
29544: CALL_OW 480
29548: ST_TO_ADDR
// if not tmp then
29549: LD_VAR 0 5
29553: NOT
29554: IFFALSE 29558
// exit ;
29556: GO 29607
// for i in tmp do
29558: LD_ADDR_VAR 0 4
29562: PUSH
29563: LD_VAR 0 5
29567: PUSH
29568: FOR_IN
29569: IFFALSE 29605
// if GetTech ( i , side ) <> state_researched then
29571: LD_VAR 0 4
29575: PPUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: NONEQUAL
29589: IFFALSE 29603
// begin result := false ;
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// exit ;
29599: POP
29600: POP
29601: GO 29607
// end ;
29603: GO 29568
29605: POP
29606: POP
// end ;
29607: LD_VAR 0 3
29611: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29627: LD_VAR 0 1
29631: NOT
29632: IFTRUE 29649
29634: PUSH
29635: LD_VAR 0 1
29639: PPUSH
29640: CALL_OW 257
29644: PUSH
29645: LD_INT 9
29647: NONEQUAL
29648: OR
29649: IFFALSE 29653
// exit ;
29651: GO 30232
// side := GetSide ( unit ) ;
29653: LD_ADDR_VAR 0 9
29657: PUSH
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL_OW 255
29667: ST_TO_ADDR
// tech_space := tech_spacanom ;
29668: LD_ADDR_VAR 0 12
29672: PUSH
29673: LD_INT 29
29675: ST_TO_ADDR
// tech_time := tech_taurad ;
29676: LD_ADDR_VAR 0 13
29680: PUSH
29681: LD_INT 28
29683: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29684: LD_ADDR_VAR 0 11
29688: PUSH
29689: LD_VAR 0 1
29693: PPUSH
29694: CALL_OW 310
29698: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29699: LD_VAR 0 11
29703: PPUSH
29704: CALL_OW 247
29708: PUSH
29709: LD_INT 2
29711: EQUAL
29712: IFFALSE 29716
// exit ;
29714: GO 30232
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29716: LD_ADDR_VAR 0 8
29720: PUSH
29721: LD_INT 81
29723: PUSH
29724: LD_VAR 0 9
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 21
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: ST_TO_ADDR
// if not tmp then
29759: LD_VAR 0 8
29763: NOT
29764: IFFALSE 29768
// exit ;
29766: GO 30232
// if in_unit then
29768: LD_VAR 0 11
29772: IFFALSE 29796
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29774: LD_ADDR_VAR 0 10
29778: PUSH
29779: LD_VAR 0 8
29783: PPUSH
29784: LD_VAR 0 11
29788: PPUSH
29789: CALL_OW 74
29793: ST_TO_ADDR
29794: GO 29816
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29796: LD_ADDR_VAR 0 10
29800: PUSH
29801: LD_VAR 0 8
29805: PPUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: CALL_OW 74
29815: ST_TO_ADDR
// if not enemy then
29816: LD_VAR 0 10
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 30232
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29825: LD_VAR 0 11
29829: IFFALSE 29851
29831: PUSH
29832: LD_VAR 0 11
29836: PPUSH
29837: LD_VAR 0 10
29841: PPUSH
29842: CALL_OW 296
29846: PUSH
29847: LD_INT 13
29849: GREATER
29850: AND
29851: IFTRUE 29873
29853: PUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_VAR 0 10
29863: PPUSH
29864: CALL_OW 296
29868: PUSH
29869: LD_INT 12
29871: GREATER
29872: OR
29873: IFFALSE 29877
// exit ;
29875: GO 30232
// missile := [ 1 ] ;
29877: LD_ADDR_VAR 0 14
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29888: LD_VAR 0 9
29892: PPUSH
29893: LD_VAR 0 12
29897: PPUSH
29898: CALL_OW 325
29902: IFFALSE 29931
// missile := Replace ( missile , missile + 1 , 2 ) ;
29904: LD_ADDR_VAR 0 14
29908: PUSH
29909: LD_VAR 0 14
29913: PPUSH
29914: LD_VAR 0 14
29918: PUSH
29919: LD_INT 1
29921: PLUS
29922: PPUSH
29923: LD_INT 2
29925: PPUSH
29926: CALL_OW 1
29930: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29931: LD_VAR 0 9
29935: PPUSH
29936: LD_VAR 0 13
29940: PPUSH
29941: CALL_OW 325
29945: IFFALSE 29969
29947: PUSH
29948: LD_VAR 0 10
29952: PPUSH
29953: CALL_OW 255
29957: PPUSH
29958: LD_VAR 0 13
29962: PPUSH
29963: CALL_OW 325
29967: NOT
29968: AND
29969: IFFALSE 29998
// missile := Replace ( missile , missile + 1 , 3 ) ;
29971: LD_ADDR_VAR 0 14
29975: PUSH
29976: LD_VAR 0 14
29980: PPUSH
29981: LD_VAR 0 14
29985: PUSH
29986: LD_INT 1
29988: PLUS
29989: PPUSH
29990: LD_INT 3
29992: PPUSH
29993: CALL_OW 1
29997: ST_TO_ADDR
// if missile < 2 then
29998: LD_VAR 0 14
30002: PUSH
30003: LD_INT 2
30005: LESS
30006: IFFALSE 30010
// exit ;
30008: GO 30232
// x := GetX ( enemy ) ;
30010: LD_ADDR_VAR 0 4
30014: PUSH
30015: LD_VAR 0 10
30019: PPUSH
30020: CALL_OW 250
30024: ST_TO_ADDR
// y := GetY ( enemy ) ;
30025: LD_ADDR_VAR 0 5
30029: PUSH
30030: LD_VAR 0 10
30034: PPUSH
30035: CALL_OW 251
30039: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30040: LD_ADDR_VAR 0 6
30044: PUSH
30045: LD_VAR 0 4
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PPUSH
30054: LD_INT 1
30056: PPUSH
30057: CALL_OW 12
30061: PLUS
30062: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 5
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PPUSH
30077: LD_INT 1
30079: PPUSH
30080: CALL_OW 12
30084: PLUS
30085: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30086: LD_VAR 0 6
30090: PPUSH
30091: LD_VAR 0 7
30095: PPUSH
30096: CALL_OW 488
30100: NOT
30101: IFFALSE 30123
// begin _x := x ;
30103: LD_ADDR_VAR 0 6
30107: PUSH
30108: LD_VAR 0 4
30112: ST_TO_ADDR
// _y := y ;
30113: LD_ADDR_VAR 0 7
30117: PUSH
30118: LD_VAR 0 5
30122: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 1
30130: PPUSH
30131: LD_VAR 0 14
30135: PPUSH
30136: CALL_OW 12
30140: ST_TO_ADDR
// case i of 1 :
30141: LD_VAR 0 3
30145: PUSH
30146: LD_INT 1
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30154
30152: GO 30171
30154: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30155: LD_VAR 0 1
30159: PPUSH
30160: LD_VAR 0 10
30164: PPUSH
30165: CALL_OW 115
30169: GO 30232
30171: LD_INT 2
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30201
30179: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_VAR 0 6
30189: PPUSH
30190: LD_VAR 0 7
30194: PPUSH
30195: CALL_OW 153
30199: GO 30232
30201: LD_INT 3
30203: DOUBLE
30204: EQUAL
30205: IFTRUE 30209
30207: GO 30231
30209: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_VAR 0 6
30219: PPUSH
30220: LD_VAR 0 7
30224: PPUSH
30225: CALL_OW 154
30229: GO 30232
30231: POP
// end ;
30232: LD_VAR 0 2
30236: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30237: LD_INT 0
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
// if not unit or not building then
30245: LD_VAR 0 1
30249: NOT
30250: IFTRUE 30259
30252: PUSH
30253: LD_VAR 0 2
30257: NOT
30258: OR
30259: IFFALSE 30263
// exit ;
30261: GO 30421
// x := GetX ( building ) ;
30263: LD_ADDR_VAR 0 5
30267: PUSH
30268: LD_VAR 0 2
30272: PPUSH
30273: CALL_OW 250
30277: ST_TO_ADDR
// y := GetY ( building ) ;
30278: LD_ADDR_VAR 0 6
30282: PUSH
30283: LD_VAR 0 2
30287: PPUSH
30288: CALL_OW 251
30292: ST_TO_ADDR
// for i := 0 to 5 do
30293: LD_ADDR_VAR 0 4
30297: PUSH
30298: DOUBLE
30299: LD_INT 0
30301: DEC
30302: ST_TO_ADDR
30303: LD_INT 5
30305: PUSH
30306: FOR_TO
30307: IFFALSE 30419
// begin _x := ShiftX ( x , i , 3 ) ;
30309: LD_ADDR_VAR 0 7
30313: PUSH
30314: LD_VAR 0 5
30318: PPUSH
30319: LD_VAR 0 4
30323: PPUSH
30324: LD_INT 3
30326: PPUSH
30327: CALL_OW 272
30331: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30332: LD_ADDR_VAR 0 8
30336: PUSH
30337: LD_VAR 0 6
30341: PPUSH
30342: LD_VAR 0 4
30346: PPUSH
30347: LD_INT 3
30349: PPUSH
30350: CALL_OW 273
30354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30355: LD_VAR 0 7
30359: PPUSH
30360: LD_VAR 0 8
30364: PPUSH
30365: CALL_OW 488
30369: NOT
30370: IFFALSE 30374
// continue ;
30372: GO 30306
// if HexInfo ( _x , _y ) = 0 then
30374: LD_VAR 0 7
30378: PPUSH
30379: LD_VAR 0 8
30383: PPUSH
30384: CALL_OW 428
30388: PUSH
30389: LD_INT 0
30391: EQUAL
30392: IFFALSE 30417
// begin ComMoveXY ( unit , _x , _y ) ;
30394: LD_VAR 0 1
30398: PPUSH
30399: LD_VAR 0 7
30403: PPUSH
30404: LD_VAR 0 8
30408: PPUSH
30409: CALL_OW 111
// exit ;
30413: POP
30414: POP
30415: GO 30421
// end ; end ;
30417: GO 30306
30419: POP
30420: POP
// end ;
30421: LD_VAR 0 3
30425: RET
// export function ScanBase ( side , base_area ) ; begin
30426: LD_INT 0
30428: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_VAR 0 2
30438: PPUSH
30439: LD_INT 81
30441: PUSH
30442: LD_VAR 0 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PPUSH
30451: CALL_OW 70
30455: ST_TO_ADDR
// end ;
30456: LD_VAR 0 3
30460: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
// result := false ;
30467: LD_ADDR_VAR 0 2
30471: PUSH
30472: LD_INT 0
30474: ST_TO_ADDR
// side := GetSide ( unit ) ;
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 255
30489: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30490: LD_ADDR_VAR 0 4
30494: PUSH
30495: LD_VAR 0 1
30499: PPUSH
30500: CALL_OW 248
30504: ST_TO_ADDR
// case nat of 1 :
30505: LD_VAR 0 4
30509: PUSH
30510: LD_INT 1
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30529
30518: POP
// tech := tech_lassight ; 2 :
30519: LD_ADDR_VAR 0 5
30523: PUSH
30524: LD_INT 12
30526: ST_TO_ADDR
30527: GO 30568
30529: LD_INT 2
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30548
30537: POP
// tech := tech_mortar ; 3 :
30538: LD_ADDR_VAR 0 5
30542: PUSH
30543: LD_INT 41
30545: ST_TO_ADDR
30546: GO 30568
30548: LD_INT 3
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30567
30556: POP
// tech := tech_bazooka ; end ;
30557: LD_ADDR_VAR 0 5
30561: PUSH
30562: LD_INT 44
30564: ST_TO_ADDR
30565: GO 30568
30567: POP
// if Researched ( side , tech ) then
30568: LD_VAR 0 3
30572: PPUSH
30573: LD_VAR 0 5
30577: PPUSH
30578: CALL_OW 325
30582: IFFALSE 30609
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30584: LD_ADDR_VAR 0 2
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: LD_INT 8
30594: PUSH
30595: LD_INT 9
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: PUSH
30603: LD_VAR 0 4
30607: ARRAY
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 2
30613: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
// if not mines then
30619: LD_VAR 0 2
30623: NOT
30624: IFFALSE 30628
// exit ;
30626: GO 30772
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30628: LD_ADDR_VAR 0 5
30632: PUSH
30633: LD_INT 81
30635: PUSH
30636: LD_VAR 0 1
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 21
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PPUSH
30666: CALL_OW 69
30670: ST_TO_ADDR
// for i in mines do
30671: LD_ADDR_VAR 0 4
30675: PUSH
30676: LD_VAR 0 2
30680: PUSH
30681: FOR_IN
30682: IFFALSE 30770
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30684: LD_VAR 0 4
30688: PUSH
30689: LD_INT 1
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 4
30697: PUSH
30698: LD_INT 2
30700: ARRAY
30701: PPUSH
30702: CALL_OW 458
30706: NOT
30707: IFFALSE 30711
// continue ;
30709: GO 30681
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30711: LD_VAR 0 4
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: PPUSH
30720: LD_VAR 0 4
30724: PUSH
30725: LD_INT 2
30727: ARRAY
30728: PPUSH
30729: CALL_OW 428
30733: PUSH
30734: LD_VAR 0 5
30738: IN
30739: IFFALSE 30768
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30741: LD_VAR 0 4
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: LD_VAR 0 4
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 456
// end ;
30768: GO 30681
30770: POP
30771: POP
// end ;
30772: LD_VAR 0 3
30776: RET
// export function Count ( array ) ; begin
30777: LD_INT 0
30779: PPUSH
// result := array + 0 ;
30780: LD_ADDR_VAR 0 2
30784: PUSH
30785: LD_VAR 0 1
30789: PUSH
30790: LD_INT 0
30792: PLUS
30793: ST_TO_ADDR
// end ;
30794: LD_VAR 0 2
30798: RET
// export function IsEmpty ( building ) ; begin
30799: LD_INT 0
30801: PPUSH
// if not building then
30802: LD_VAR 0 1
30806: NOT
30807: IFFALSE 30811
// exit ;
30809: GO 30854
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30811: LD_ADDR_VAR 0 2
30815: PUSH
30816: LD_VAR 0 1
30820: PUSH
30821: LD_INT 22
30823: PUSH
30824: LD_VAR 0 1
30828: PPUSH
30829: CALL_OW 255
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 58
30840: PUSH
30841: EMPTY
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 69
30852: IN
30853: ST_TO_ADDR
// end ;
30854: LD_VAR 0 2
30858: RET
// export function IsNotFull ( building ) ; var places ; begin
30859: LD_INT 0
30861: PPUSH
30862: PPUSH
// if not building then
30863: LD_VAR 0 1
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 30900
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: LD_INT 3
30884: PUSH
30885: LD_INT 62
30887: PUSH
30888: EMPTY
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 72
30899: ST_TO_ADDR
// end ;
30900: LD_VAR 0 2
30904: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30905: LD_INT 0
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
// tmp := [ ] ;
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: EMPTY
30917: ST_TO_ADDR
// list := [ ] ;
30918: LD_ADDR_VAR 0 5
30922: PUSH
30923: EMPTY
30924: ST_TO_ADDR
// for i = 16 to 25 do
30925: LD_ADDR_VAR 0 4
30929: PUSH
30930: DOUBLE
30931: LD_INT 16
30933: DEC
30934: ST_TO_ADDR
30935: LD_INT 25
30937: PUSH
30938: FOR_TO
30939: IFFALSE 31012
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_VAR 0 3
30950: PUSH
30951: LD_INT 22
30953: PUSH
30954: LD_VAR 0 1
30958: PPUSH
30959: CALL_OW 255
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 91
30970: PUSH
30971: LD_VAR 0 1
30975: PUSH
30976: LD_INT 6
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_VAR 0 4
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: PPUSH
31004: CALL_OW 69
31008: ADD
31009: ST_TO_ADDR
31010: GO 30938
31012: POP
31013: POP
// for i = 1 to tmp do
31014: LD_ADDR_VAR 0 4
31018: PUSH
31019: DOUBLE
31020: LD_INT 1
31022: DEC
31023: ST_TO_ADDR
31024: LD_VAR 0 3
31028: PUSH
31029: FOR_TO
31030: IFFALSE 31118
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31032: LD_ADDR_VAR 0 5
31036: PUSH
31037: LD_VAR 0 5
31041: PUSH
31042: LD_VAR 0 3
31046: PUSH
31047: LD_VAR 0 4
31051: ARRAY
31052: PPUSH
31053: CALL_OW 266
31057: PUSH
31058: LD_VAR 0 3
31062: PUSH
31063: LD_VAR 0 4
31067: ARRAY
31068: PPUSH
31069: CALL_OW 250
31073: PUSH
31074: LD_VAR 0 3
31078: PUSH
31079: LD_VAR 0 4
31083: ARRAY
31084: PPUSH
31085: CALL_OW 251
31089: PUSH
31090: LD_VAR 0 3
31094: PUSH
31095: LD_VAR 0 4
31099: ARRAY
31100: PPUSH
31101: CALL_OW 254
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: ADD
31115: ST_TO_ADDR
31116: GO 31029
31118: POP
31119: POP
// result := list ;
31120: LD_ADDR_VAR 0 2
31124: PUSH
31125: LD_VAR 0 5
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 2
31134: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
// if not factory then
31144: LD_VAR 0 1
31148: NOT
31149: IFFALSE 31153
// exit ;
31151: GO 31756
// if control = control_apeman then
31153: LD_VAR 0 4
31157: PUSH
31158: LD_INT 5
31160: EQUAL
31161: IFFALSE 31270
// begin tmp := UnitsInside ( factory ) ;
31163: LD_ADDR_VAR 0 8
31167: PUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 313
31177: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31178: LD_VAR 0 8
31182: PPUSH
31183: LD_INT 25
31185: PUSH
31186: LD_INT 12
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PPUSH
31193: CALL_OW 72
31197: NOT
31198: IFFALSE 31208
// control := control_manual ;
31200: LD_ADDR_VAR 0 4
31204: PUSH
31205: LD_INT 1
31207: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31208: LD_ADDR_VAR 0 8
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL 30905 0 1
31222: ST_TO_ADDR
// if tmp then
31223: LD_VAR 0 8
31227: IFFALSE 31270
// begin for i in tmp do
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 8
31238: PUSH
31239: FOR_IN
31240: IFFALSE 31268
// if i [ 1 ] = b_ext_radio then
31242: LD_VAR 0 7
31246: PUSH
31247: LD_INT 1
31249: ARRAY
31250: PUSH
31251: LD_INT 22
31253: EQUAL
31254: IFFALSE 31266
// begin control := control_remote ;
31256: LD_ADDR_VAR 0 4
31260: PUSH
31261: LD_INT 2
31263: ST_TO_ADDR
// break ;
31264: GO 31268
// end ;
31266: GO 31239
31268: POP
31269: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31270: LD_VAR 0 1
31274: PPUSH
31275: LD_VAR 0 2
31279: PPUSH
31280: LD_VAR 0 3
31284: PPUSH
31285: LD_VAR 0 4
31289: PPUSH
31290: LD_VAR 0 5
31294: PPUSH
31295: CALL_OW 448
31299: IFFALSE 31334
// begin result := [ chassis , engine , control , weapon ] ;
31301: LD_ADDR_VAR 0 6
31305: PUSH
31306: LD_VAR 0 2
31310: PUSH
31311: LD_VAR 0 3
31315: PUSH
31316: LD_VAR 0 4
31320: PUSH
31321: LD_VAR 0 5
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// exit ;
31332: GO 31756
// end ; _chassis := AvailableChassisList ( factory ) ;
31334: LD_ADDR_VAR 0 9
31338: PUSH
31339: LD_VAR 0 1
31343: PPUSH
31344: CALL_OW 475
31348: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31349: LD_ADDR_VAR 0 11
31353: PUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 476
31363: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31364: LD_ADDR_VAR 0 12
31368: PUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 477
31378: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31379: LD_ADDR_VAR 0 10
31383: PUSH
31384: LD_VAR 0 1
31388: PPUSH
31389: CALL_OW 478
31393: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31394: LD_VAR 0 9
31398: NOT
31399: IFTRUE 31408
31401: PUSH
31402: LD_VAR 0 11
31406: NOT
31407: OR
31408: IFTRUE 31417
31410: PUSH
31411: LD_VAR 0 12
31415: NOT
31416: OR
31417: IFTRUE 31426
31419: PUSH
31420: LD_VAR 0 10
31424: NOT
31425: OR
31426: IFFALSE 31461
// begin result := [ chassis , engine , control , weapon ] ;
31428: LD_ADDR_VAR 0 6
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: LD_VAR 0 3
31442: PUSH
31443: LD_VAR 0 4
31447: PUSH
31448: LD_VAR 0 5
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// exit ;
31459: GO 31756
// end ; if not chassis in _chassis then
31461: LD_VAR 0 2
31465: PUSH
31466: LD_VAR 0 9
31470: IN
31471: NOT
31472: IFFALSE 31498
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31474: LD_ADDR_VAR 0 2
31478: PUSH
31479: LD_VAR 0 9
31483: PUSH
31484: LD_INT 1
31486: PPUSH
31487: LD_VAR 0 9
31491: PPUSH
31492: CALL_OW 12
31496: ARRAY
31497: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: CALL 31761 0 2
31512: NOT
31513: IFFALSE 31574
// repeat engine := _engine [ 1 ] ;
31515: LD_ADDR_VAR 0 3
31519: PUSH
31520: LD_VAR 0 11
31524: PUSH
31525: LD_INT 1
31527: ARRAY
31528: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31529: LD_ADDR_VAR 0 11
31533: PUSH
31534: LD_VAR 0 11
31538: PPUSH
31539: LD_INT 1
31541: PPUSH
31542: CALL_OW 3
31546: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31547: LD_VAR 0 2
31551: PPUSH
31552: LD_VAR 0 3
31556: PPUSH
31557: CALL 31761 0 2
31561: IFTRUE 31572
31563: PUSH
31564: LD_VAR 0 11
31568: PUSH
31569: EMPTY
31570: EQUAL
31571: OR
31572: IFFALSE 31515
// if not control in _control then
31574: LD_VAR 0 4
31578: PUSH
31579: LD_VAR 0 12
31583: IN
31584: NOT
31585: IFFALSE 31611
// control := _control [ rand ( 1 , _control ) ] ;
31587: LD_ADDR_VAR 0 4
31591: PUSH
31592: LD_VAR 0 12
31596: PUSH
31597: LD_INT 1
31599: PPUSH
31600: LD_VAR 0 12
31604: PPUSH
31605: CALL_OW 12
31609: ARRAY
31610: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31611: LD_VAR 0 2
31615: PPUSH
31616: LD_VAR 0 5
31620: PPUSH
31621: CALL 31983 0 2
31625: NOT
31626: IFFALSE 31687
// repeat weapon := _weapon [ 1 ] ;
31628: LD_ADDR_VAR 0 5
31632: PUSH
31633: LD_VAR 0 10
31637: PUSH
31638: LD_INT 1
31640: ARRAY
31641: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31642: LD_ADDR_VAR 0 10
31646: PUSH
31647: LD_VAR 0 10
31651: PPUSH
31652: LD_INT 1
31654: PPUSH
31655: CALL_OW 3
31659: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31660: LD_VAR 0 2
31664: PPUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: CALL 31983 0 2
31674: IFTRUE 31685
31676: PUSH
31677: LD_VAR 0 10
31681: PUSH
31682: EMPTY
31683: EQUAL
31684: OR
31685: IFFALSE 31628
// result := [ ] ;
31687: LD_ADDR_VAR 0 6
31691: PUSH
31692: EMPTY
31693: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31694: LD_VAR 0 1
31698: PPUSH
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 3
31708: PPUSH
31709: LD_VAR 0 4
31713: PPUSH
31714: LD_VAR 0 5
31718: PPUSH
31719: CALL_OW 448
31723: IFFALSE 31756
// result := [ chassis , engine , control , weapon ] ;
31725: LD_ADDR_VAR 0 6
31729: PUSH
31730: LD_VAR 0 2
31734: PUSH
31735: LD_VAR 0 3
31739: PUSH
31740: LD_VAR 0 4
31744: PUSH
31745: LD_VAR 0 5
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: ST_TO_ADDR
// end ;
31756: LD_VAR 0 6
31760: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31761: LD_INT 0
31763: PPUSH
// if not chassis or not engine then
31764: LD_VAR 0 1
31768: NOT
31769: IFTRUE 31778
31771: PUSH
31772: LD_VAR 0 2
31776: NOT
31777: OR
31778: IFFALSE 31782
// exit ;
31780: GO 31978
// case engine of engine_solar :
31782: LD_VAR 0 2
31786: PUSH
31787: LD_INT 2
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31833
31795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: LD_INT 11
31803: PUSH
31804: LD_INT 12
31806: PUSH
31807: LD_INT 13
31809: PUSH
31810: LD_INT 14
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: ST_TO_ADDR
31831: GO 31962
31833: LD_INT 1
31835: DOUBLE
31836: EQUAL
31837: IFTRUE 31841
31839: GO 31903
31841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_INT 11
31849: PUSH
31850: LD_INT 12
31852: PUSH
31853: LD_INT 13
31855: PUSH
31856: LD_INT 14
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 4
31870: PUSH
31871: LD_INT 5
31873: PUSH
31874: LD_INT 21
31876: PUSH
31877: LD_INT 23
31879: PUSH
31880: LD_INT 22
31882: PUSH
31883: LD_INT 24
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
31901: GO 31962
31903: LD_INT 3
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31961
31911: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31912: LD_ADDR_VAR 0 3
31916: PUSH
31917: LD_INT 13
31919: PUSH
31920: LD_INT 14
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: LD_INT 5
31934: PUSH
31935: LD_INT 21
31937: PUSH
31938: LD_INT 22
31940: PUSH
31941: LD_INT 23
31943: PUSH
31944: LD_INT 24
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
31959: GO 31962
31961: POP
// result := ( chassis in result ) ;
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_VAR 0 1
31971: PUSH
31972: LD_VAR 0 3
31976: IN
31977: ST_TO_ADDR
// end ;
31978: LD_VAR 0 3
31982: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31983: LD_INT 0
31985: PPUSH
// if not chassis or not weapon then
31986: LD_VAR 0 1
31990: NOT
31991: IFTRUE 32000
31993: PUSH
31994: LD_VAR 0 2
31998: NOT
31999: OR
32000: IFFALSE 32004
// exit ;
32002: GO 33098
// case weapon of us_machine_gun :
32004: LD_VAR 0 2
32008: PUSH
32009: LD_INT 2
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32047
32017: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32018: LD_ADDR_VAR 0 3
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: LD_INT 4
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
32045: GO 33082
32047: LD_INT 3
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32085
32055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: LD_INT 5
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: ST_TO_ADDR
32083: GO 33082
32085: LD_INT 11
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32123
32093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
32121: GO 33082
32123: LD_INT 4
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32157
32131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32132: LD_ADDR_VAR 0 3
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 4
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: ST_TO_ADDR
32155: GO 33082
32157: LD_INT 5
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32165
32163: GO 32191
32165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32166: LD_ADDR_VAR 0 3
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: LD_INT 5
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: ST_TO_ADDR
32189: GO 33082
32191: LD_INT 9
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32225
32199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32200: LD_ADDR_VAR 0 3
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: LD_INT 5
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
32223: GO 33082
32225: LD_INT 7
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32233
32231: GO 32259
32233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32234: LD_ADDR_VAR 0 3
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 4
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 33082
32259: LD_INT 12
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32293
32267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: LD_INT 4
32281: PUSH
32282: LD_INT 5
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
32291: GO 33082
32293: LD_INT 13
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32301
32299: GO 32327
32301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 5
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: ST_TO_ADDR
32325: GO 33082
32327: LD_INT 14
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32353
32335: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_INT 4
32343: PUSH
32344: LD_INT 5
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: ST_TO_ADDR
32351: GO 33082
32353: LD_INT 6
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32379
32361: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: LD_INT 5
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: ST_TO_ADDR
32377: GO 33082
32379: LD_INT 10
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32405
32387: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32388: LD_ADDR_VAR 0 3
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 5
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: ST_TO_ADDR
32403: GO 33082
32405: LD_INT 22
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32439
32413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32414: LD_ADDR_VAR 0 3
32418: PUSH
32419: LD_INT 11
32421: PUSH
32422: LD_INT 12
32424: PUSH
32425: LD_INT 13
32427: PUSH
32428: LD_INT 14
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
32437: GO 33082
32439: LD_INT 23
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32473
32447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_INT 11
32455: PUSH
32456: LD_INT 12
32458: PUSH
32459: LD_INT 13
32461: PUSH
32462: LD_INT 14
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: ST_TO_ADDR
32471: GO 33082
32473: LD_INT 24
32475: DOUBLE
32476: EQUAL
32477: IFTRUE 32481
32479: GO 32507
32481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32482: LD_ADDR_VAR 0 3
32486: PUSH
32487: LD_INT 11
32489: PUSH
32490: LD_INT 12
32492: PUSH
32493: LD_INT 13
32495: PUSH
32496: LD_INT 14
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: ST_TO_ADDR
32505: GO 33082
32507: LD_INT 30
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32541
32515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32516: LD_ADDR_VAR 0 3
32520: PUSH
32521: LD_INT 11
32523: PUSH
32524: LD_INT 12
32526: PUSH
32527: LD_INT 13
32529: PUSH
32530: LD_INT 14
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
32539: GO 33082
32541: LD_INT 25
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32567
32549: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_INT 13
32557: PUSH
32558: LD_INT 14
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: ST_TO_ADDR
32565: GO 33082
32567: LD_INT 27
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32593
32575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32576: LD_ADDR_VAR 0 3
32580: PUSH
32581: LD_INT 13
32583: PUSH
32584: LD_INT 14
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: ST_TO_ADDR
32591: GO 33082
32593: LD_INT 92
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32627
32601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32602: LD_ADDR_VAR 0 3
32606: PUSH
32607: LD_INT 11
32609: PUSH
32610: LD_INT 12
32612: PUSH
32613: LD_INT 13
32615: PUSH
32616: LD_INT 14
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: ST_TO_ADDR
32625: GO 33082
32627: LD_INT 28
32629: DOUBLE
32630: EQUAL
32631: IFTRUE 32635
32633: GO 32653
32635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32636: LD_ADDR_VAR 0 3
32640: PUSH
32641: LD_INT 13
32643: PUSH
32644: LD_INT 14
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: ST_TO_ADDR
32651: GO 33082
32653: LD_INT 29
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32679
32661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: LD_INT 13
32669: PUSH
32670: LD_INT 14
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: ST_TO_ADDR
32677: GO 33082
32679: LD_INT 31
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32705
32687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32688: LD_ADDR_VAR 0 3
32692: PUSH
32693: LD_INT 13
32695: PUSH
32696: LD_INT 14
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: ST_TO_ADDR
32703: GO 33082
32705: LD_INT 26
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32731
32713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32714: LD_ADDR_VAR 0 3
32718: PUSH
32719: LD_INT 13
32721: PUSH
32722: LD_INT 14
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: ST_TO_ADDR
32729: GO 33082
32731: LD_INT 42
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32739
32737: GO 32765
32739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32740: LD_ADDR_VAR 0 3
32744: PUSH
32745: LD_INT 21
32747: PUSH
32748: LD_INT 22
32750: PUSH
32751: LD_INT 23
32753: PUSH
32754: LD_INT 24
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
32763: GO 33082
32765: LD_INT 43
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32799
32773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32774: LD_ADDR_VAR 0 3
32778: PUSH
32779: LD_INT 21
32781: PUSH
32782: LD_INT 22
32784: PUSH
32785: LD_INT 23
32787: PUSH
32788: LD_INT 24
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: ST_TO_ADDR
32797: GO 33082
32799: LD_INT 44
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32833
32807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32808: LD_ADDR_VAR 0 3
32812: PUSH
32813: LD_INT 21
32815: PUSH
32816: LD_INT 22
32818: PUSH
32819: LD_INT 23
32821: PUSH
32822: LD_INT 24
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: ST_TO_ADDR
32831: GO 33082
32833: LD_INT 45
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32867
32841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 21
32849: PUSH
32850: LD_INT 22
32852: PUSH
32853: LD_INT 23
32855: PUSH
32856: LD_INT 24
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: ST_TO_ADDR
32865: GO 33082
32867: LD_INT 49
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32901
32875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32876: LD_ADDR_VAR 0 3
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 22
32886: PUSH
32887: LD_INT 23
32889: PUSH
32890: LD_INT 24
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
32899: GO 33082
32901: LD_INT 51
32903: DOUBLE
32904: EQUAL
32905: IFTRUE 32909
32907: GO 32935
32909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32910: LD_ADDR_VAR 0 3
32914: PUSH
32915: LD_INT 21
32917: PUSH
32918: LD_INT 22
32920: PUSH
32921: LD_INT 23
32923: PUSH
32924: LD_INT 24
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33082
32935: LD_INT 52
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32969
32943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 21
32951: PUSH
32952: LD_INT 22
32954: PUSH
32955: LD_INT 23
32957: PUSH
32958: LD_INT 24
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
32967: GO 33082
32969: LD_INT 53
32971: DOUBLE
32972: EQUAL
32973: IFTRUE 32977
32975: GO 32995
32977: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32978: LD_ADDR_VAR 0 3
32982: PUSH
32983: LD_INT 23
32985: PUSH
32986: LD_INT 24
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: ST_TO_ADDR
32993: GO 33082
32995: LD_INT 46
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33021
33003: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 23
33011: PUSH
33012: LD_INT 24
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: ST_TO_ADDR
33019: GO 33082
33021: LD_INT 47
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33047
33029: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_INT 23
33037: PUSH
33038: LD_INT 24
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: ST_TO_ADDR
33045: GO 33082
33047: LD_INT 98
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33081
33055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_INT 21
33063: PUSH
33064: LD_INT 22
33066: PUSH
33067: LD_INT 23
33069: PUSH
33070: LD_INT 24
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
33079: GO 33082
33081: POP
// result := ( chassis in result ) ;
33082: LD_ADDR_VAR 0 3
33086: PUSH
33087: LD_VAR 0 1
33091: PUSH
33092: LD_VAR 0 3
33096: IN
33097: ST_TO_ADDR
// end ;
33098: LD_VAR 0 3
33102: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33103: LD_INT 0
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
// result := array ;
33112: LD_ADDR_VAR 0 5
33116: PUSH
33117: LD_VAR 0 1
33121: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33122: LD_VAR 0 1
33126: NOT
33127: IFTRUE 33136
33129: PUSH
33130: LD_VAR 0 2
33134: NOT
33135: OR
33136: IFTRUE 33145
33138: PUSH
33139: LD_VAR 0 3
33143: NOT
33144: OR
33145: IFTRUE 33159
33147: PUSH
33148: LD_VAR 0 2
33152: PUSH
33153: LD_VAR 0 1
33157: GREATER
33158: OR
33159: IFTRUE 33173
33161: PUSH
33162: LD_VAR 0 3
33166: PUSH
33167: LD_VAR 0 1
33171: GREATER
33172: OR
33173: IFFALSE 33177
// exit ;
33175: GO 33473
// if direction then
33177: LD_VAR 0 4
33181: IFFALSE 33245
// begin d := 1 ;
33183: LD_ADDR_VAR 0 9
33187: PUSH
33188: LD_INT 1
33190: ST_TO_ADDR
// if i_from > i_to then
33191: LD_VAR 0 2
33195: PUSH
33196: LD_VAR 0 3
33200: GREATER
33201: IFFALSE 33227
// length := ( array - i_from ) + i_to else
33203: LD_ADDR_VAR 0 11
33207: PUSH
33208: LD_VAR 0 1
33212: PUSH
33213: LD_VAR 0 2
33217: MINUS
33218: PUSH
33219: LD_VAR 0 3
33223: PLUS
33224: ST_TO_ADDR
33225: GO 33243
// length := i_to - i_from ;
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: LD_VAR 0 3
33236: PUSH
33237: LD_VAR 0 2
33241: MINUS
33242: ST_TO_ADDR
// end else
33243: GO 33306
// begin d := - 1 ;
33245: LD_ADDR_VAR 0 9
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: ST_TO_ADDR
// if i_from > i_to then
33254: LD_VAR 0 2
33258: PUSH
33259: LD_VAR 0 3
33263: GREATER
33264: IFFALSE 33284
// length := i_from - i_to else
33266: LD_ADDR_VAR 0 11
33270: PUSH
33271: LD_VAR 0 2
33275: PUSH
33276: LD_VAR 0 3
33280: MINUS
33281: ST_TO_ADDR
33282: GO 33306
// length := ( array - i_to ) + i_from ;
33284: LD_ADDR_VAR 0 11
33288: PUSH
33289: LD_VAR 0 1
33293: PUSH
33294: LD_VAR 0 3
33298: MINUS
33299: PUSH
33300: LD_VAR 0 2
33304: PLUS
33305: ST_TO_ADDR
// end ; if not length then
33306: LD_VAR 0 11
33310: NOT
33311: IFFALSE 33315
// exit ;
33313: GO 33473
// tmp := array ;
33315: LD_ADDR_VAR 0 10
33319: PUSH
33320: LD_VAR 0 1
33324: ST_TO_ADDR
// for i = 1 to length do
33325: LD_ADDR_VAR 0 6
33329: PUSH
33330: DOUBLE
33331: LD_INT 1
33333: DEC
33334: ST_TO_ADDR
33335: LD_VAR 0 11
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33461
// begin for j = 1 to array do
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_VAR 0 1
33357: PUSH
33358: FOR_TO
33359: IFFALSE 33447
// begin k := j + d ;
33361: LD_ADDR_VAR 0 8
33365: PUSH
33366: LD_VAR 0 7
33370: PUSH
33371: LD_VAR 0 9
33375: PLUS
33376: ST_TO_ADDR
// if k > array then
33377: LD_VAR 0 8
33381: PUSH
33382: LD_VAR 0 1
33386: GREATER
33387: IFFALSE 33397
// k := 1 ;
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_INT 1
33396: ST_TO_ADDR
// if not k then
33397: LD_VAR 0 8
33401: NOT
33402: IFFALSE 33414
// k := array ;
33404: LD_ADDR_VAR 0 8
33408: PUSH
33409: LD_VAR 0 1
33413: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33414: LD_ADDR_VAR 0 10
33418: PUSH
33419: LD_VAR 0 10
33423: PPUSH
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 1
33433: PUSH
33434: LD_VAR 0 7
33438: ARRAY
33439: PPUSH
33440: CALL_OW 1
33444: ST_TO_ADDR
// end ;
33445: GO 33358
33447: POP
33448: POP
// array := tmp ;
33449: LD_ADDR_VAR 0 1
33453: PUSH
33454: LD_VAR 0 10
33458: ST_TO_ADDR
// end ;
33459: GO 33340
33461: POP
33462: POP
// result := array ;
33463: LD_ADDR_VAR 0 5
33467: PUSH
33468: LD_VAR 0 1
33472: ST_TO_ADDR
// end ;
33473: LD_VAR 0 5
33477: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33478: LD_INT 0
33480: PPUSH
33481: PPUSH
// result := 0 ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_INT 0
33489: ST_TO_ADDR
// if not array or not value in array then
33490: LD_VAR 0 1
33494: NOT
33495: IFTRUE 33510
33497: PUSH
33498: LD_VAR 0 2
33502: PUSH
33503: LD_VAR 0 1
33507: IN
33508: NOT
33509: OR
33510: IFFALSE 33514
// exit ;
33512: GO 33568
// for i = 1 to array do
33514: LD_ADDR_VAR 0 4
33518: PUSH
33519: DOUBLE
33520: LD_INT 1
33522: DEC
33523: ST_TO_ADDR
33524: LD_VAR 0 1
33528: PUSH
33529: FOR_TO
33530: IFFALSE 33566
// if value = array [ i ] then
33532: LD_VAR 0 2
33536: PUSH
33537: LD_VAR 0 1
33541: PUSH
33542: LD_VAR 0 4
33546: ARRAY
33547: EQUAL
33548: IFFALSE 33564
// begin result := i ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 4
33559: ST_TO_ADDR
// exit ;
33560: POP
33561: POP
33562: GO 33568
// end ;
33564: GO 33529
33566: POP
33567: POP
// end ;
33568: LD_VAR 0 3
33572: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33573: LD_INT 0
33575: PPUSH
// vc_chassis := chassis ;
33576: LD_ADDR_OWVAR 37
33580: PUSH
33581: LD_VAR 0 1
33585: ST_TO_ADDR
// vc_engine := engine ;
33586: LD_ADDR_OWVAR 39
33590: PUSH
33591: LD_VAR 0 2
33595: ST_TO_ADDR
// vc_control := control ;
33596: LD_ADDR_OWVAR 38
33600: PUSH
33601: LD_VAR 0 3
33605: ST_TO_ADDR
// vc_weapon := weapon ;
33606: LD_ADDR_OWVAR 40
33610: PUSH
33611: LD_VAR 0 4
33615: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33616: LD_ADDR_OWVAR 41
33620: PUSH
33621: LD_VAR 0 5
33625: ST_TO_ADDR
// end ;
33626: LD_VAR 0 6
33630: RET
// export function WantPlant ( unit ) ; var task ; begin
33631: LD_INT 0
33633: PPUSH
33634: PPUSH
// result := false ;
33635: LD_ADDR_VAR 0 2
33639: PUSH
33640: LD_INT 0
33642: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: LD_VAR 0 1
33652: PPUSH
33653: CALL_OW 437
33657: ST_TO_ADDR
// if task then
33658: LD_VAR 0 3
33662: IFFALSE 33690
// if task [ 1 ] [ 1 ] = p then
33664: LD_VAR 0 3
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PUSH
33677: LD_STRING p
33679: EQUAL
33680: IFFALSE 33690
// result := true ;
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: LD_INT 1
33689: ST_TO_ADDR
// end ;
33690: LD_VAR 0 2
33694: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33695: LD_INT 0
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
// if pos < 1 then
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 1
33708: LESS
33709: IFFALSE 33713
// exit ;
33711: GO 34016
// if pos = 1 then
33713: LD_VAR 0 2
33717: PUSH
33718: LD_INT 1
33720: EQUAL
33721: IFFALSE 33754
// result := Replace ( arr , pos [ 1 ] , value ) else
33723: LD_ADDR_VAR 0 4
33727: PUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: LD_VAR 0 2
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: PPUSH
33742: LD_VAR 0 3
33746: PPUSH
33747: CALL_OW 1
33751: ST_TO_ADDR
33752: GO 34016
// begin tmp := arr ;
33754: LD_ADDR_VAR 0 6
33758: PUSH
33759: LD_VAR 0 1
33763: ST_TO_ADDR
// s_arr := [ tmp ] ;
33764: LD_ADDR_VAR 0 7
33768: PUSH
33769: LD_VAR 0 6
33773: PUSH
33774: EMPTY
33775: LIST
33776: ST_TO_ADDR
// for i = 1 to pos - 1 do
33777: LD_ADDR_VAR 0 5
33781: PUSH
33782: DOUBLE
33783: LD_INT 1
33785: DEC
33786: ST_TO_ADDR
33787: LD_VAR 0 2
33791: PUSH
33792: LD_INT 1
33794: MINUS
33795: PUSH
33796: FOR_TO
33797: IFFALSE 33842
// begin tmp := tmp [ pos [ i ] ] ;
33799: LD_ADDR_VAR 0 6
33803: PUSH
33804: LD_VAR 0 6
33808: PUSH
33809: LD_VAR 0 2
33813: PUSH
33814: LD_VAR 0 5
33818: ARRAY
33819: ARRAY
33820: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33821: LD_ADDR_VAR 0 7
33825: PUSH
33826: LD_VAR 0 7
33830: PUSH
33831: LD_VAR 0 6
33835: PUSH
33836: EMPTY
33837: LIST
33838: ADD
33839: ST_TO_ADDR
// end ;
33840: GO 33796
33842: POP
33843: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33844: LD_ADDR_VAR 0 6
33848: PUSH
33849: LD_VAR 0 6
33853: PPUSH
33854: LD_VAR 0 2
33858: PUSH
33859: LD_VAR 0 2
33863: ARRAY
33864: PPUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: CALL_OW 1
33874: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33875: LD_ADDR_VAR 0 7
33879: PUSH
33880: LD_VAR 0 7
33884: PPUSH
33885: LD_VAR 0 7
33889: PPUSH
33890: LD_VAR 0 6
33894: PPUSH
33895: CALL_OW 1
33899: ST_TO_ADDR
// for i = s_arr downto 2 do
33900: LD_ADDR_VAR 0 5
33904: PUSH
33905: DOUBLE
33906: LD_VAR 0 7
33910: INC
33911: ST_TO_ADDR
33912: LD_INT 2
33914: PUSH
33915: FOR_DOWNTO
33916: IFFALSE 34000
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33918: LD_ADDR_VAR 0 6
33922: PUSH
33923: LD_VAR 0 7
33927: PUSH
33928: LD_VAR 0 5
33932: PUSH
33933: LD_INT 1
33935: MINUS
33936: ARRAY
33937: PPUSH
33938: LD_VAR 0 2
33942: PUSH
33943: LD_VAR 0 5
33947: PUSH
33948: LD_INT 1
33950: MINUS
33951: ARRAY
33952: PPUSH
33953: LD_VAR 0 7
33957: PUSH
33958: LD_VAR 0 5
33962: ARRAY
33963: PPUSH
33964: CALL_OW 1
33968: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33969: LD_ADDR_VAR 0 7
33973: PUSH
33974: LD_VAR 0 7
33978: PPUSH
33979: LD_VAR 0 5
33983: PUSH
33984: LD_INT 1
33986: MINUS
33987: PPUSH
33988: LD_VAR 0 6
33992: PPUSH
33993: CALL_OW 1
33997: ST_TO_ADDR
// end ;
33998: GO 33915
34000: POP
34001: POP
// result := s_arr [ 1 ] ;
34002: LD_ADDR_VAR 0 4
34006: PUSH
34007: LD_VAR 0 7
34011: PUSH
34012: LD_INT 1
34014: ARRAY
34015: ST_TO_ADDR
// end ; end ;
34016: LD_VAR 0 4
34020: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34021: LD_INT 0
34023: PPUSH
34024: PPUSH
// if not list then
34025: LD_VAR 0 1
34029: NOT
34030: IFFALSE 34034
// exit ;
34032: GO 34125
// i := list [ pos1 ] ;
34034: LD_ADDR_VAR 0 5
34038: PUSH
34039: LD_VAR 0 1
34043: PUSH
34044: LD_VAR 0 2
34048: ARRAY
34049: ST_TO_ADDR
// if not i then
34050: LD_VAR 0 5
34054: NOT
34055: IFFALSE 34059
// exit ;
34057: GO 34125
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34059: LD_ADDR_VAR 0 1
34063: PUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: LD_VAR 0 2
34073: PPUSH
34074: LD_VAR 0 1
34078: PUSH
34079: LD_VAR 0 3
34083: ARRAY
34084: PPUSH
34085: CALL_OW 1
34089: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34090: LD_ADDR_VAR 0 1
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: LD_VAR 0 3
34104: PPUSH
34105: LD_VAR 0 5
34109: PPUSH
34110: CALL_OW 1
34114: ST_TO_ADDR
// result := list ;
34115: LD_ADDR_VAR 0 4
34119: PUSH
34120: LD_VAR 0 1
34124: ST_TO_ADDR
// end ;
34125: LD_VAR 0 4
34129: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34130: LD_INT 0
34132: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34133: LD_ADDR_VAR 0 5
34137: PUSH
34138: LD_VAR 0 1
34142: PPUSH
34143: CALL_OW 250
34147: PPUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL_OW 251
34157: PPUSH
34158: LD_VAR 0 2
34162: PPUSH
34163: LD_VAR 0 3
34167: PPUSH
34168: LD_VAR 0 4
34172: PPUSH
34173: CALL 34555 0 5
34177: ST_TO_ADDR
// end ;
34178: LD_VAR 0 5
34182: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34183: LD_INT 0
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
// if not list or not unit then
34189: LD_VAR 0 2
34193: NOT
34194: IFTRUE 34203
34196: PUSH
34197: LD_VAR 0 1
34201: NOT
34202: OR
34203: IFFALSE 34207
// exit ;
34205: GO 34550
// result := [ ] ;
34207: LD_ADDR_VAR 0 5
34211: PUSH
34212: EMPTY
34213: ST_TO_ADDR
// for i in list do
34214: LD_ADDR_VAR 0 6
34218: PUSH
34219: LD_VAR 0 2
34223: PUSH
34224: FOR_IN
34225: IFFALSE 34443
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34227: LD_ADDR_VAR 0 8
34231: PUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: LD_VAR 0 6
34241: PUSH
34242: LD_INT 1
34244: ARRAY
34245: PPUSH
34246: LD_VAR 0 6
34250: PUSH
34251: LD_INT 2
34253: ARRAY
34254: PPUSH
34255: CALL_OW 297
34259: ST_TO_ADDR
// if not Count ( result ) then
34260: LD_VAR 0 5
34264: PPUSH
34265: CALL 30777 0 1
34269: NOT
34270: IFFALSE 34303
// begin result := Join ( result , [ i , tmp ] ) ;
34272: LD_ADDR_VAR 0 5
34276: PUSH
34277: LD_VAR 0 5
34281: PPUSH
34282: LD_VAR 0 6
34286: PUSH
34287: LD_VAR 0 8
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PPUSH
34296: CALL 66753 0 2
34300: ST_TO_ADDR
// continue ;
34301: GO 34224
// end ; if result [ result ] [ 2 ] <= tmp then
34303: LD_VAR 0 5
34307: PUSH
34308: LD_VAR 0 5
34312: ARRAY
34313: PUSH
34314: LD_INT 2
34316: ARRAY
34317: PUSH
34318: LD_VAR 0 8
34322: LESSEQUAL
34323: IFFALSE 34356
// result := Join ( result , [ i , tmp ] ) else
34325: LD_ADDR_VAR 0 5
34329: PUSH
34330: LD_VAR 0 5
34334: PPUSH
34335: LD_VAR 0 6
34339: PUSH
34340: LD_VAR 0 8
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PPUSH
34349: CALL 66753 0 2
34353: ST_TO_ADDR
34354: GO 34441
// begin for j := 1 to Count ( result ) do
34356: LD_ADDR_VAR 0 7
34360: PUSH
34361: DOUBLE
34362: LD_INT 1
34364: DEC
34365: ST_TO_ADDR
34366: LD_VAR 0 5
34370: PPUSH
34371: CALL 30777 0 1
34375: PUSH
34376: FOR_TO
34377: IFFALSE 34439
// begin if tmp < result [ j ] [ 2 ] then
34379: LD_VAR 0 8
34383: PUSH
34384: LD_VAR 0 5
34388: PUSH
34389: LD_VAR 0 7
34393: ARRAY
34394: PUSH
34395: LD_INT 2
34397: ARRAY
34398: LESS
34399: IFFALSE 34437
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34401: LD_ADDR_VAR 0 5
34405: PUSH
34406: LD_VAR 0 5
34410: PPUSH
34411: LD_VAR 0 7
34415: PPUSH
34416: LD_VAR 0 6
34420: PUSH
34421: LD_VAR 0 8
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PPUSH
34430: CALL_OW 2
34434: ST_TO_ADDR
// break ;
34435: GO 34439
// end ; end ;
34437: GO 34376
34439: POP
34440: POP
// end ; end ;
34441: GO 34224
34443: POP
34444: POP
// if result and not asc then
34445: LD_VAR 0 5
34449: IFFALSE 34458
34451: PUSH
34452: LD_VAR 0 3
34456: NOT
34457: AND
34458: IFFALSE 34475
// result := ReverseArray ( result ) ;
34460: LD_ADDR_VAR 0 5
34464: PUSH
34465: LD_VAR 0 5
34469: PPUSH
34470: CALL 61833 0 1
34474: ST_TO_ADDR
// tmp := [ ] ;
34475: LD_ADDR_VAR 0 8
34479: PUSH
34480: EMPTY
34481: ST_TO_ADDR
// if mode then
34482: LD_VAR 0 4
34486: IFFALSE 34550
// begin for i := 1 to result do
34488: LD_ADDR_VAR 0 6
34492: PUSH
34493: DOUBLE
34494: LD_INT 1
34496: DEC
34497: ST_TO_ADDR
34498: LD_VAR 0 5
34502: PUSH
34503: FOR_TO
34504: IFFALSE 34538
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34506: LD_ADDR_VAR 0 8
34510: PUSH
34511: LD_VAR 0 8
34515: PPUSH
34516: LD_VAR 0 5
34520: PUSH
34521: LD_VAR 0 6
34525: ARRAY
34526: PUSH
34527: LD_INT 1
34529: ARRAY
34530: PPUSH
34531: CALL 66753 0 2
34535: ST_TO_ADDR
34536: GO 34503
34538: POP
34539: POP
// result := tmp ;
34540: LD_ADDR_VAR 0 5
34544: PUSH
34545: LD_VAR 0 8
34549: ST_TO_ADDR
// end ; end ;
34550: LD_VAR 0 5
34554: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34555: LD_INT 0
34557: PPUSH
34558: PPUSH
34559: PPUSH
34560: PPUSH
// if not list then
34561: LD_VAR 0 3
34565: NOT
34566: IFFALSE 34570
// exit ;
34568: GO 34960
// result := [ ] ;
34570: LD_ADDR_VAR 0 6
34574: PUSH
34575: EMPTY
34576: ST_TO_ADDR
// for i in list do
34577: LD_ADDR_VAR 0 7
34581: PUSH
34582: LD_VAR 0 3
34586: PUSH
34587: FOR_IN
34588: IFFALSE 34790
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34590: LD_ADDR_VAR 0 9
34594: PUSH
34595: LD_VAR 0 7
34599: PPUSH
34600: LD_VAR 0 1
34604: PPUSH
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 297
34614: ST_TO_ADDR
// if not result then
34615: LD_VAR 0 6
34619: NOT
34620: IFFALSE 34646
// result := [ [ i , tmp ] ] else
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 7
34631: PUSH
34632: LD_VAR 0 9
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: ST_TO_ADDR
34644: GO 34788
// begin if result [ result ] [ 2 ] <= tmp then
34646: LD_VAR 0 6
34650: PUSH
34651: LD_VAR 0 6
34655: ARRAY
34656: PUSH
34657: LD_INT 2
34659: ARRAY
34660: PUSH
34661: LD_VAR 0 9
34665: LESSEQUAL
34666: IFFALSE 34708
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34668: LD_ADDR_VAR 0 6
34672: PUSH
34673: LD_VAR 0 6
34677: PPUSH
34678: LD_VAR 0 6
34682: PUSH
34683: LD_INT 1
34685: PLUS
34686: PPUSH
34687: LD_VAR 0 7
34691: PUSH
34692: LD_VAR 0 9
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PPUSH
34701: CALL_OW 2
34705: ST_TO_ADDR
34706: GO 34788
// for j := 1 to result do
34708: LD_ADDR_VAR 0 8
34712: PUSH
34713: DOUBLE
34714: LD_INT 1
34716: DEC
34717: ST_TO_ADDR
34718: LD_VAR 0 6
34722: PUSH
34723: FOR_TO
34724: IFFALSE 34786
// begin if tmp < result [ j ] [ 2 ] then
34726: LD_VAR 0 9
34730: PUSH
34731: LD_VAR 0 6
34735: PUSH
34736: LD_VAR 0 8
34740: ARRAY
34741: PUSH
34742: LD_INT 2
34744: ARRAY
34745: LESS
34746: IFFALSE 34784
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34748: LD_ADDR_VAR 0 6
34752: PUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: LD_VAR 0 8
34762: PPUSH
34763: LD_VAR 0 7
34767: PUSH
34768: LD_VAR 0 9
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PPUSH
34777: CALL_OW 2
34781: ST_TO_ADDR
// break ;
34782: GO 34786
// end ; end ;
34784: GO 34723
34786: POP
34787: POP
// end ; end ;
34788: GO 34587
34790: POP
34791: POP
// if result and not asc then
34792: LD_VAR 0 6
34796: IFFALSE 34805
34798: PUSH
34799: LD_VAR 0 4
34803: NOT
34804: AND
34805: IFFALSE 34880
// begin tmp := result ;
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_VAR 0 6
34816: ST_TO_ADDR
// for i = tmp downto 1 do
34817: LD_ADDR_VAR 0 7
34821: PUSH
34822: DOUBLE
34823: LD_VAR 0 9
34827: INC
34828: ST_TO_ADDR
34829: LD_INT 1
34831: PUSH
34832: FOR_DOWNTO
34833: IFFALSE 34878
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34835: LD_ADDR_VAR 0 6
34839: PUSH
34840: LD_VAR 0 6
34844: PPUSH
34845: LD_VAR 0 9
34849: PUSH
34850: LD_VAR 0 7
34854: MINUS
34855: PUSH
34856: LD_INT 1
34858: PLUS
34859: PPUSH
34860: LD_VAR 0 9
34864: PUSH
34865: LD_VAR 0 7
34869: ARRAY
34870: PPUSH
34871: CALL_OW 1
34875: ST_TO_ADDR
34876: GO 34832
34878: POP
34879: POP
// end ; tmp := [ ] ;
34880: LD_ADDR_VAR 0 9
34884: PUSH
34885: EMPTY
34886: ST_TO_ADDR
// if mode then
34887: LD_VAR 0 5
34891: IFFALSE 34960
// begin for i = 1 to result do
34893: LD_ADDR_VAR 0 7
34897: PUSH
34898: DOUBLE
34899: LD_INT 1
34901: DEC
34902: ST_TO_ADDR
34903: LD_VAR 0 6
34907: PUSH
34908: FOR_TO
34909: IFFALSE 34948
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: LD_VAR 0 9
34920: PPUSH
34921: LD_VAR 0 7
34925: PPUSH
34926: LD_VAR 0 6
34930: PUSH
34931: LD_VAR 0 7
34935: ARRAY
34936: PUSH
34937: LD_INT 1
34939: ARRAY
34940: PPUSH
34941: CALL_OW 1
34945: ST_TO_ADDR
34946: GO 34908
34948: POP
34949: POP
// result := tmp ;
34950: LD_ADDR_VAR 0 6
34954: PUSH
34955: LD_VAR 0 9
34959: ST_TO_ADDR
// end ; end ;
34960: LD_VAR 0 6
34964: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34965: LD_INT 0
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34973: LD_ADDR_VAR 0 5
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
// if not x or not y then
34995: LD_VAR 0 2
34999: NOT
35000: IFTRUE 35009
35002: PUSH
35003: LD_VAR 0 3
35007: NOT
35008: OR
35009: IFFALSE 35013
// exit ;
35011: GO 36669
// if not range then
35013: LD_VAR 0 4
35017: NOT
35018: IFFALSE 35028
// range := 10 ;
35020: LD_ADDR_VAR 0 4
35024: PUSH
35025: LD_INT 10
35027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35028: LD_ADDR_VAR 0 8
35032: PUSH
35033: LD_INT 81
35035: PUSH
35036: LD_VAR 0 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 92
35047: PUSH
35048: LD_VAR 0 2
35052: PUSH
35053: LD_VAR 0 3
35057: PUSH
35058: LD_VAR 0 4
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: LD_INT 21
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: PPUSH
35091: CALL_OW 69
35095: ST_TO_ADDR
// if not tmp then
35096: LD_VAR 0 8
35100: NOT
35101: IFFALSE 35105
// exit ;
35103: GO 36669
// for i in tmp do
35105: LD_ADDR_VAR 0 6
35109: PUSH
35110: LD_VAR 0 8
35114: PUSH
35115: FOR_IN
35116: IFFALSE 36644
// begin points := [ 0 , 0 , 0 ] ;
35118: LD_ADDR_VAR 0 9
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// bpoints := 1 ;
35137: LD_ADDR_VAR 0 10
35141: PUSH
35142: LD_INT 1
35144: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35145: LD_VAR 0 6
35149: PPUSH
35150: CALL_OW 247
35154: PUSH
35155: LD_INT 1
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35745
35163: POP
// begin if GetClass ( i ) = 1 then
35164: LD_VAR 0 6
35168: PPUSH
35169: CALL_OW 257
35173: PUSH
35174: LD_INT 1
35176: EQUAL
35177: IFFALSE 35198
// points := [ 10 , 5 , 3 ] ;
35179: LD_ADDR_VAR 0 9
35183: PUSH
35184: LD_INT 10
35186: PUSH
35187: LD_INT 5
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35198: LD_VAR 0 6
35202: PPUSH
35203: CALL_OW 257
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: LD_INT 4
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: IN
35222: IFFALSE 35243
// points := [ 3 , 2 , 1 ] ;
35224: LD_ADDR_VAR 0 9
35228: PUSH
35229: LD_INT 3
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35243: LD_VAR 0 6
35247: PPUSH
35248: CALL_OW 257
35252: PUSH
35253: LD_INT 5
35255: EQUAL
35256: IFFALSE 35277
// points := [ 130 , 5 , 2 ] ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_INT 130
35265: PUSH
35266: LD_INT 5
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35277: LD_VAR 0 6
35281: PPUSH
35282: CALL_OW 257
35286: PUSH
35287: LD_INT 8
35289: EQUAL
35290: IFFALSE 35311
// points := [ 35 , 35 , 30 ] ;
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_INT 35
35299: PUSH
35300: LD_INT 35
35302: PUSH
35303: LD_INT 30
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35311: LD_VAR 0 6
35315: PPUSH
35316: CALL_OW 257
35320: PUSH
35321: LD_INT 9
35323: EQUAL
35324: IFFALSE 35345
// points := [ 20 , 55 , 40 ] ;
35326: LD_ADDR_VAR 0 9
35330: PUSH
35331: LD_INT 20
35333: PUSH
35334: LD_INT 55
35336: PUSH
35337: LD_INT 40
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35345: LD_VAR 0 6
35349: PPUSH
35350: CALL_OW 257
35354: PUSH
35355: LD_INT 12
35357: PUSH
35358: LD_INT 16
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: IN
35365: IFFALSE 35386
// points := [ 5 , 3 , 2 ] ;
35367: LD_ADDR_VAR 0 9
35371: PUSH
35372: LD_INT 5
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35386: LD_VAR 0 6
35390: PPUSH
35391: CALL_OW 257
35395: PUSH
35396: LD_INT 17
35398: EQUAL
35399: IFFALSE 35420
// points := [ 100 , 50 , 75 ] ;
35401: LD_ADDR_VAR 0 9
35405: PUSH
35406: LD_INT 100
35408: PUSH
35409: LD_INT 50
35411: PUSH
35412: LD_INT 75
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35420: LD_VAR 0 6
35424: PPUSH
35425: CALL_OW 257
35429: PUSH
35430: LD_INT 15
35432: EQUAL
35433: IFFALSE 35454
// points := [ 10 , 5 , 3 ] ;
35435: LD_ADDR_VAR 0 9
35439: PUSH
35440: LD_INT 10
35442: PUSH
35443: LD_INT 5
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35454: LD_VAR 0 6
35458: PPUSH
35459: CALL_OW 257
35463: PUSH
35464: LD_INT 14
35466: EQUAL
35467: IFFALSE 35488
// points := [ 10 , 0 , 0 ] ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_INT 10
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35488: LD_VAR 0 6
35492: PPUSH
35493: CALL_OW 257
35497: PUSH
35498: LD_INT 11
35500: EQUAL
35501: IFFALSE 35522
// points := [ 30 , 10 , 5 ] ;
35503: LD_ADDR_VAR 0 9
35507: PUSH
35508: LD_INT 30
35510: PUSH
35511: LD_INT 10
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35522: LD_VAR 0 1
35526: PPUSH
35527: LD_INT 5
35529: PPUSH
35530: CALL_OW 321
35534: PUSH
35535: LD_INT 2
35537: EQUAL
35538: IFFALSE 35555
// bpoints := bpoints * 1.8 ;
35540: LD_ADDR_VAR 0 10
35544: PUSH
35545: LD_VAR 0 10
35549: PUSH
35550: LD_REAL  1.80000000000000E+0000
35553: MUL
35554: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35555: LD_VAR 0 6
35559: PPUSH
35560: CALL_OW 257
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 4
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: IN
35583: IFFALSE 35603
35585: PUSH
35586: LD_VAR 0 1
35590: PPUSH
35591: LD_INT 51
35593: PPUSH
35594: CALL_OW 321
35598: PUSH
35599: LD_INT 2
35601: EQUAL
35602: AND
35603: IFFALSE 35620
// bpoints := bpoints * 1.2 ;
35605: LD_ADDR_VAR 0 10
35609: PUSH
35610: LD_VAR 0 10
35614: PUSH
35615: LD_REAL  1.20000000000000E+0000
35618: MUL
35619: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35620: LD_VAR 0 6
35624: PPUSH
35625: CALL_OW 257
35629: PUSH
35630: LD_INT 5
35632: PUSH
35633: LD_INT 7
35635: PUSH
35636: LD_INT 9
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: IN
35644: IFFALSE 35664
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: LD_INT 52
35654: PPUSH
35655: CALL_OW 321
35659: PUSH
35660: LD_INT 2
35662: EQUAL
35663: AND
35664: IFFALSE 35681
// bpoints := bpoints * 1.5 ;
35666: LD_ADDR_VAR 0 10
35670: PUSH
35671: LD_VAR 0 10
35675: PUSH
35676: LD_REAL  1.50000000000000E+0000
35679: MUL
35680: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35681: LD_VAR 0 1
35685: PPUSH
35686: LD_INT 66
35688: PPUSH
35689: CALL_OW 321
35693: PUSH
35694: LD_INT 2
35696: EQUAL
35697: IFFALSE 35714
// bpoints := bpoints * 1.1 ;
35699: LD_ADDR_VAR 0 10
35703: PUSH
35704: LD_VAR 0 10
35708: PUSH
35709: LD_REAL  1.10000000000000E+0000
35712: MUL
35713: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35714: LD_ADDR_VAR 0 10
35718: PUSH
35719: LD_VAR 0 10
35723: PUSH
35724: LD_VAR 0 6
35728: PPUSH
35729: LD_INT 1
35731: PPUSH
35732: CALL_OW 259
35736: PUSH
35737: LD_REAL  1.15000000000000E+0000
35740: MUL
35741: MUL
35742: ST_TO_ADDR
// end ; unit_vehicle :
35743: GO 36573
35745: LD_INT 2
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35753
35751: GO 36561
35753: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35754: LD_VAR 0 6
35758: PPUSH
35759: CALL_OW 264
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: LD_INT 42
35769: PUSH
35770: LD_INT 24
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: IN
35778: IFFALSE 35799
// points := [ 25 , 5 , 3 ] ;
35780: LD_ADDR_VAR 0 9
35784: PUSH
35785: LD_INT 25
35787: PUSH
35788: LD_INT 5
35790: PUSH
35791: LD_INT 3
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35799: LD_VAR 0 6
35803: PPUSH
35804: CALL_OW 264
35808: PUSH
35809: LD_INT 4
35811: PUSH
35812: LD_INT 43
35814: PUSH
35815: LD_INT 25
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: IN
35823: IFFALSE 35844
// points := [ 40 , 15 , 5 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_INT 40
35832: PUSH
35833: LD_INT 15
35835: PUSH
35836: LD_INT 5
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35844: LD_VAR 0 6
35848: PPUSH
35849: CALL_OW 264
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: LD_INT 23
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: IN
35864: IFFALSE 35885
// points := [ 7 , 25 , 8 ] ;
35866: LD_ADDR_VAR 0 9
35870: PUSH
35871: LD_INT 7
35873: PUSH
35874: LD_INT 25
35876: PUSH
35877: LD_INT 8
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35885: LD_VAR 0 6
35889: PPUSH
35890: CALL_OW 264
35894: PUSH
35895: LD_INT 5
35897: PUSH
35898: LD_INT 27
35900: PUSH
35901: LD_INT 44
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: IN
35909: IFFALSE 35930
// points := [ 14 , 50 , 16 ] ;
35911: LD_ADDR_VAR 0 9
35915: PUSH
35916: LD_INT 14
35918: PUSH
35919: LD_INT 50
35921: PUSH
35922: LD_INT 16
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35930: LD_VAR 0 6
35934: PPUSH
35935: CALL_OW 264
35939: PUSH
35940: LD_INT 6
35942: PUSH
35943: LD_INT 46
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: IN
35950: IFFALSE 35971
// points := [ 32 , 120 , 70 ] ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_INT 32
35959: PUSH
35960: LD_INT 120
35962: PUSH
35963: LD_INT 70
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35971: LD_VAR 0 6
35975: PPUSH
35976: CALL_OW 264
35980: PUSH
35981: LD_INT 7
35983: PUSH
35984: LD_INT 28
35986: PUSH
35987: LD_INT 45
35989: PUSH
35990: LD_INT 92
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: IN
35999: IFFALSE 36020
// points := [ 35 , 20 , 45 ] ;
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_INT 35
36008: PUSH
36009: LD_INT 20
36011: PUSH
36012: LD_INT 45
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36020: LD_VAR 0 6
36024: PPUSH
36025: CALL_OW 264
36029: PUSH
36030: LD_INT 47
36032: PUSH
36033: EMPTY
36034: LIST
36035: IN
36036: IFFALSE 36057
// points := [ 67 , 45 , 75 ] ;
36038: LD_ADDR_VAR 0 9
36042: PUSH
36043: LD_INT 67
36045: PUSH
36046: LD_INT 45
36048: PUSH
36049: LD_INT 75
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36057: LD_VAR 0 6
36061: PPUSH
36062: CALL_OW 264
36066: PUSH
36067: LD_INT 26
36069: PUSH
36070: EMPTY
36071: LIST
36072: IN
36073: IFFALSE 36094
// points := [ 120 , 30 , 80 ] ;
36075: LD_ADDR_VAR 0 9
36079: PUSH
36080: LD_INT 120
36082: PUSH
36083: LD_INT 30
36085: PUSH
36086: LD_INT 80
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 264
36103: PUSH
36104: LD_INT 22
36106: PUSH
36107: EMPTY
36108: LIST
36109: IN
36110: IFFALSE 36131
// points := [ 40 , 1 , 1 ] ;
36112: LD_ADDR_VAR 0 9
36116: PUSH
36117: LD_INT 40
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36131: LD_VAR 0 6
36135: PPUSH
36136: CALL_OW 264
36140: PUSH
36141: LD_INT 29
36143: PUSH
36144: EMPTY
36145: LIST
36146: IN
36147: IFFALSE 36168
// points := [ 70 , 200 , 400 ] ;
36149: LD_ADDR_VAR 0 9
36153: PUSH
36154: LD_INT 70
36156: PUSH
36157: LD_INT 200
36159: PUSH
36160: LD_INT 400
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36168: LD_VAR 0 6
36172: PPUSH
36173: CALL_OW 264
36177: PUSH
36178: LD_INT 14
36180: PUSH
36181: LD_INT 53
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: IN
36188: IFFALSE 36209
// points := [ 40 , 10 , 20 ] ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_INT 40
36197: PUSH
36198: LD_INT 10
36200: PUSH
36201: LD_INT 20
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 264
36218: PUSH
36219: LD_INT 9
36221: PUSH
36222: EMPTY
36223: LIST
36224: IN
36225: IFFALSE 36246
// points := [ 5 , 70 , 20 ] ;
36227: LD_ADDR_VAR 0 9
36231: PUSH
36232: LD_INT 5
36234: PUSH
36235: LD_INT 70
36237: PUSH
36238: LD_INT 20
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36246: LD_VAR 0 6
36250: PPUSH
36251: CALL_OW 264
36255: PUSH
36256: LD_INT 10
36258: PUSH
36259: EMPTY
36260: LIST
36261: IN
36262: IFFALSE 36283
// points := [ 35 , 110 , 70 ] ;
36264: LD_ADDR_VAR 0 9
36268: PUSH
36269: LD_INT 35
36271: PUSH
36272: LD_INT 110
36274: PUSH
36275: LD_INT 70
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36283: LD_VAR 0 6
36287: PPUSH
36288: CALL_OW 265
36292: PUSH
36293: LD_INT 25
36295: EQUAL
36296: IFFALSE 36317
// points := [ 80 , 65 , 100 ] ;
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_INT 80
36305: PUSH
36306: LD_INT 65
36308: PUSH
36309: LD_INT 100
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 263
36326: PUSH
36327: LD_INT 1
36329: EQUAL
36330: IFFALSE 36365
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36332: LD_ADDR_VAR 0 10
36336: PUSH
36337: LD_VAR 0 10
36341: PUSH
36342: LD_VAR 0 6
36346: PPUSH
36347: CALL_OW 311
36351: PPUSH
36352: LD_INT 3
36354: PPUSH
36355: CALL_OW 259
36359: PUSH
36360: LD_INT 4
36362: MUL
36363: MUL
36364: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36365: LD_VAR 0 6
36369: PPUSH
36370: CALL_OW 263
36374: PUSH
36375: LD_INT 2
36377: EQUAL
36378: IFFALSE 36429
// begin j := IsControledBy ( i ) ;
36380: LD_ADDR_VAR 0 7
36384: PUSH
36385: LD_VAR 0 6
36389: PPUSH
36390: CALL_OW 312
36394: ST_TO_ADDR
// if j then
36395: LD_VAR 0 7
36399: IFFALSE 36429
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36401: LD_ADDR_VAR 0 10
36405: PUSH
36406: LD_VAR 0 10
36410: PUSH
36411: LD_VAR 0 7
36415: PPUSH
36416: LD_INT 3
36418: PPUSH
36419: CALL_OW 259
36423: PUSH
36424: LD_INT 3
36426: MUL
36427: MUL
36428: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36429: LD_VAR 0 6
36433: PPUSH
36434: CALL_OW 264
36438: PUSH
36439: LD_INT 5
36441: PUSH
36442: LD_INT 6
36444: PUSH
36445: LD_INT 46
36447: PUSH
36448: LD_INT 44
36450: PUSH
36451: LD_INT 47
36453: PUSH
36454: LD_INT 45
36456: PUSH
36457: LD_INT 28
36459: PUSH
36460: LD_INT 7
36462: PUSH
36463: LD_INT 27
36465: PUSH
36466: LD_INT 29
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: IN
36481: IFFALSE 36501
36483: PUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: LD_INT 52
36491: PPUSH
36492: CALL_OW 321
36496: PUSH
36497: LD_INT 2
36499: EQUAL
36500: AND
36501: IFFALSE 36518
// bpoints := bpoints * 1.2 ;
36503: LD_ADDR_VAR 0 10
36507: PUSH
36508: LD_VAR 0 10
36512: PUSH
36513: LD_REAL  1.20000000000000E+0000
36516: MUL
36517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36518: LD_VAR 0 6
36522: PPUSH
36523: CALL_OW 264
36527: PUSH
36528: LD_INT 6
36530: PUSH
36531: LD_INT 46
36533: PUSH
36534: LD_INT 47
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: IN
36542: IFFALSE 36559
// bpoints := bpoints * 1.2 ;
36544: LD_ADDR_VAR 0 10
36548: PUSH
36549: LD_VAR 0 10
36553: PUSH
36554: LD_REAL  1.20000000000000E+0000
36557: MUL
36558: ST_TO_ADDR
// end ; unit_building :
36559: GO 36573
36561: LD_INT 3
36563: DOUBLE
36564: EQUAL
36565: IFTRUE 36569
36567: GO 36572
36569: POP
// ; end ;
36570: GO 36573
36572: POP
// for j = 1 to 3 do
36573: LD_ADDR_VAR 0 7
36577: PUSH
36578: DOUBLE
36579: LD_INT 1
36581: DEC
36582: ST_TO_ADDR
36583: LD_INT 3
36585: PUSH
36586: FOR_TO
36587: IFFALSE 36640
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36589: LD_ADDR_VAR 0 5
36593: PUSH
36594: LD_VAR 0 5
36598: PPUSH
36599: LD_VAR 0 7
36603: PPUSH
36604: LD_VAR 0 5
36608: PUSH
36609: LD_VAR 0 7
36613: ARRAY
36614: PUSH
36615: LD_VAR 0 9
36619: PUSH
36620: LD_VAR 0 7
36624: ARRAY
36625: PUSH
36626: LD_VAR 0 10
36630: MUL
36631: PLUS
36632: PPUSH
36633: CALL_OW 1
36637: ST_TO_ADDR
36638: GO 36586
36640: POP
36641: POP
// end ;
36642: GO 35115
36644: POP
36645: POP
// result := Replace ( result , 4 , tmp ) ;
36646: LD_ADDR_VAR 0 5
36650: PUSH
36651: LD_VAR 0 5
36655: PPUSH
36656: LD_INT 4
36658: PPUSH
36659: LD_VAR 0 8
36663: PPUSH
36664: CALL_OW 1
36668: ST_TO_ADDR
// end ;
36669: LD_VAR 0 5
36673: RET
// export function DangerAtRange ( unit , range ) ; begin
36674: LD_INT 0
36676: PPUSH
// if not unit then
36677: LD_VAR 0 1
36681: NOT
36682: IFFALSE 36686
// exit ;
36684: GO 36731
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36686: LD_ADDR_VAR 0 3
36690: PUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 255
36700: PPUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: CALL_OW 250
36710: PPUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 251
36720: PPUSH
36721: LD_VAR 0 2
36725: PPUSH
36726: CALL 34965 0 4
36730: ST_TO_ADDR
// end ;
36731: LD_VAR 0 3
36735: RET
// export function DangerInArea ( side , area ) ; begin
36736: LD_INT 0
36738: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_VAR 0 2
36748: PPUSH
36749: LD_INT 81
36751: PUSH
36752: LD_VAR 0 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PPUSH
36761: CALL_OW 70
36765: ST_TO_ADDR
// end ;
36766: LD_VAR 0 3
36770: RET
// export function IsExtension ( b ) ; begin
36771: LD_INT 0
36773: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36774: LD_ADDR_VAR 0 2
36778: PUSH
36779: LD_VAR 0 1
36783: PUSH
36784: LD_INT 23
36786: PUSH
36787: LD_INT 20
36789: PUSH
36790: LD_INT 22
36792: PUSH
36793: LD_INT 17
36795: PUSH
36796: LD_INT 24
36798: PUSH
36799: LD_INT 21
36801: PUSH
36802: LD_INT 19
36804: PUSH
36805: LD_INT 16
36807: PUSH
36808: LD_INT 25
36810: PUSH
36811: LD_INT 18
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: IN
36826: ST_TO_ADDR
// end ;
36827: LD_VAR 0 2
36831: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36832: LD_INT 0
36834: PPUSH
36835: PPUSH
36836: PPUSH
// result := [ ] ;
36837: LD_ADDR_VAR 0 4
36841: PUSH
36842: EMPTY
36843: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36844: LD_ADDR_VAR 0 5
36848: PUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: LD_INT 21
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PPUSH
36864: CALL_OW 70
36868: ST_TO_ADDR
// if not tmp then
36869: LD_VAR 0 5
36873: NOT
36874: IFFALSE 36878
// exit ;
36876: GO 36942
// if checkLink then
36878: LD_VAR 0 3
36882: IFFALSE 36932
// begin for i in tmp do
36884: LD_ADDR_VAR 0 6
36888: PUSH
36889: LD_VAR 0 5
36893: PUSH
36894: FOR_IN
36895: IFFALSE 36930
// if GetBase ( i ) <> base then
36897: LD_VAR 0 6
36901: PPUSH
36902: CALL_OW 274
36906: PUSH
36907: LD_VAR 0 1
36911: NONEQUAL
36912: IFFALSE 36928
// ComLinkToBase ( base , i ) ;
36914: LD_VAR 0 1
36918: PPUSH
36919: LD_VAR 0 6
36923: PPUSH
36924: CALL_OW 169
36928: GO 36894
36930: POP
36931: POP
// end ; result := tmp ;
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: LD_VAR 0 5
36941: ST_TO_ADDR
// end ;
36942: LD_VAR 0 4
36946: RET
// export function ComComplete ( units , b ) ; var i ; begin
36947: LD_INT 0
36949: PPUSH
36950: PPUSH
// if not units then
36951: LD_VAR 0 1
36955: NOT
36956: IFFALSE 36960
// exit ;
36958: GO 37050
// for i in units do
36960: LD_ADDR_VAR 0 4
36964: PUSH
36965: LD_VAR 0 1
36969: PUSH
36970: FOR_IN
36971: IFFALSE 37048
// if BuildingStatus ( b ) = bs_build then
36973: LD_VAR 0 2
36977: PPUSH
36978: CALL_OW 461
36982: PUSH
36983: LD_INT 1
36985: EQUAL
36986: IFFALSE 37046
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36988: LD_VAR 0 4
36992: PPUSH
36993: LD_STRING h
36995: PUSH
36996: LD_VAR 0 2
37000: PPUSH
37001: CALL_OW 250
37005: PUSH
37006: LD_VAR 0 2
37010: PPUSH
37011: CALL_OW 251
37015: PUSH
37016: LD_VAR 0 2
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: PPUSH
37042: CALL_OW 446
37046: GO 36970
37048: POP
37049: POP
// end ;
37050: LD_VAR 0 3
37054: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37055: LD_INT 0
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37063: LD_VAR 0 1
37067: NOT
37068: IFTRUE 37085
37070: PUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: CALL_OW 263
37080: PUSH
37081: LD_INT 2
37083: NONEQUAL
37084: OR
37085: IFFALSE 37089
// exit ;
37087: GO 37405
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37089: LD_ADDR_VAR 0 6
37093: PUSH
37094: LD_INT 22
37096: PUSH
37097: LD_VAR 0 1
37101: PPUSH
37102: CALL_OW 255
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 30
37116: PUSH
37117: LD_INT 36
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 34
37126: PUSH
37127: LD_INT 31
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PPUSH
37143: CALL_OW 69
37147: ST_TO_ADDR
// if not tmp then
37148: LD_VAR 0 6
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37405
// result := [ ] ;
37157: LD_ADDR_VAR 0 2
37161: PUSH
37162: EMPTY
37163: ST_TO_ADDR
// for i in tmp do
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_VAR 0 6
37173: PUSH
37174: FOR_IN
37175: IFFALSE 37246
// begin t := UnitsInside ( i ) ;
37177: LD_ADDR_VAR 0 4
37181: PUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL_OW 313
37191: ST_TO_ADDR
// if t then
37192: LD_VAR 0 4
37196: IFFALSE 37244
// for j in t do
37198: LD_ADDR_VAR 0 7
37202: PUSH
37203: LD_VAR 0 4
37207: PUSH
37208: FOR_IN
37209: IFFALSE 37242
// result := Replace ( result , result + 1 , j ) ;
37211: LD_ADDR_VAR 0 2
37215: PUSH
37216: LD_VAR 0 2
37220: PPUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 1
37228: PLUS
37229: PPUSH
37230: LD_VAR 0 7
37234: PPUSH
37235: CALL_OW 1
37239: ST_TO_ADDR
37240: GO 37208
37242: POP
37243: POP
// end ;
37244: GO 37174
37246: POP
37247: POP
// if not result then
37248: LD_VAR 0 2
37252: NOT
37253: IFFALSE 37257
// exit ;
37255: GO 37405
// mech := result [ 1 ] ;
37257: LD_ADDR_VAR 0 5
37261: PUSH
37262: LD_VAR 0 2
37266: PUSH
37267: LD_INT 1
37269: ARRAY
37270: ST_TO_ADDR
// if result > 1 then
37271: LD_VAR 0 2
37275: PUSH
37276: LD_INT 1
37278: GREATER
37279: IFFALSE 37391
// begin for i = 2 to result do
37281: LD_ADDR_VAR 0 3
37285: PUSH
37286: DOUBLE
37287: LD_INT 2
37289: DEC
37290: ST_TO_ADDR
37291: LD_VAR 0 2
37295: PUSH
37296: FOR_TO
37297: IFFALSE 37389
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37299: LD_ADDR_VAR 0 4
37303: PUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_VAR 0 3
37313: ARRAY
37314: PPUSH
37315: LD_INT 3
37317: PPUSH
37318: CALL_OW 259
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_VAR 0 3
37332: ARRAY
37333: PPUSH
37334: CALL_OW 432
37338: MINUS
37339: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37340: LD_VAR 0 4
37344: PUSH
37345: LD_VAR 0 5
37349: PPUSH
37350: LD_INT 3
37352: PPUSH
37353: CALL_OW 259
37357: PUSH
37358: LD_VAR 0 5
37362: PPUSH
37363: CALL_OW 432
37367: MINUS
37368: GREATEREQUAL
37369: IFFALSE 37387
// mech := result [ i ] ;
37371: LD_ADDR_VAR 0 5
37375: PUSH
37376: LD_VAR 0 2
37380: PUSH
37381: LD_VAR 0 3
37385: ARRAY
37386: ST_TO_ADDR
// end ;
37387: GO 37296
37389: POP
37390: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37391: LD_VAR 0 1
37395: PPUSH
37396: LD_VAR 0 5
37400: PPUSH
37401: CALL_OW 135
// end ;
37405: LD_VAR 0 2
37409: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37410: LD_INT 0
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
// result := [ ] ;
37425: LD_ADDR_VAR 0 7
37429: PUSH
37430: EMPTY
37431: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37432: LD_VAR 0 1
37436: PPUSH
37437: CALL_OW 266
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: IN
37452: NOT
37453: IFFALSE 37457
// exit ;
37455: GO 39097
// if name then
37457: LD_VAR 0 3
37461: IFFALSE 37477
// SetBName ( base_dep , name ) ;
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_VAR 0 3
37472: PPUSH
37473: CALL_OW 500
// base := GetBase ( base_dep ) ;
37477: LD_ADDR_VAR 0 15
37481: PUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 274
37491: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37492: LD_ADDR_VAR 0 16
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 255
37506: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37507: LD_ADDR_VAR 0 17
37511: PUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL_OW 248
37521: ST_TO_ADDR
// if sources then
37522: LD_VAR 0 5
37526: IFFALSE 37573
// for i = 1 to 3 do
37528: LD_ADDR_VAR 0 8
37532: PUSH
37533: DOUBLE
37534: LD_INT 1
37536: DEC
37537: ST_TO_ADDR
37538: LD_INT 3
37540: PUSH
37541: FOR_TO
37542: IFFALSE 37571
// AddResourceType ( base , i , sources [ i ] ) ;
37544: LD_VAR 0 15
37548: PPUSH
37549: LD_VAR 0 8
37553: PPUSH
37554: LD_VAR 0 5
37558: PUSH
37559: LD_VAR 0 8
37563: ARRAY
37564: PPUSH
37565: CALL_OW 276
37569: GO 37541
37571: POP
37572: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37573: LD_ADDR_VAR 0 18
37577: PUSH
37578: LD_VAR 0 15
37582: PPUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_INT 1
37590: PPUSH
37591: CALL 36832 0 3
37595: ST_TO_ADDR
// InitHc ;
37596: CALL_OW 19
// InitUc ;
37600: CALL_OW 18
// uc_side := side ;
37604: LD_ADDR_OWVAR 20
37608: PUSH
37609: LD_VAR 0 16
37613: ST_TO_ADDR
// uc_nation := nation ;
37614: LD_ADDR_OWVAR 21
37618: PUSH
37619: LD_VAR 0 17
37623: ST_TO_ADDR
// if buildings then
37624: LD_VAR 0 18
37628: IFFALSE 38956
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37630: LD_ADDR_VAR 0 19
37634: PUSH
37635: LD_VAR 0 18
37639: PPUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 30
37645: PUSH
37646: LD_INT 29
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 30
37655: PUSH
37656: LD_INT 30
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: PPUSH
37668: CALL_OW 72
37672: ST_TO_ADDR
// if tmp then
37673: LD_VAR 0 19
37677: IFFALSE 37725
// for i in tmp do
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_VAR 0 19
37688: PUSH
37689: FOR_IN
37690: IFFALSE 37723
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37692: LD_VAR 0 8
37696: PPUSH
37697: CALL_OW 250
37701: PPUSH
37702: LD_VAR 0 8
37706: PPUSH
37707: CALL_OW 251
37711: PPUSH
37712: LD_VAR 0 16
37716: PPUSH
37717: CALL_OW 441
37721: GO 37689
37723: POP
37724: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37725: LD_VAR 0 18
37729: PPUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 30
37735: PUSH
37736: LD_INT 32
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: LD_INT 33
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: PPUSH
37758: CALL_OW 72
37762: IFFALSE 37850
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37764: LD_ADDR_VAR 0 8
37768: PUSH
37769: LD_VAR 0 18
37773: PPUSH
37774: LD_INT 2
37776: PUSH
37777: LD_INT 30
37779: PUSH
37780: LD_INT 32
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: LD_INT 33
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: PPUSH
37802: CALL_OW 72
37806: PUSH
37807: FOR_IN
37808: IFFALSE 37848
// begin if not GetBWeapon ( i ) then
37810: LD_VAR 0 8
37814: PPUSH
37815: CALL_OW 269
37819: NOT
37820: IFFALSE 37846
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37822: LD_VAR 0 8
37826: PPUSH
37827: LD_VAR 0 8
37831: PPUSH
37832: LD_VAR 0 2
37836: PPUSH
37837: CALL 39102 0 2
37841: PPUSH
37842: CALL_OW 431
// end ;
37846: GO 37807
37848: POP
37849: POP
// end ; for i = 1 to personel do
37850: LD_ADDR_VAR 0 8
37854: PUSH
37855: DOUBLE
37856: LD_INT 1
37858: DEC
37859: ST_TO_ADDR
37860: LD_VAR 0 6
37864: PUSH
37865: FOR_TO
37866: IFFALSE 38936
// begin if i > 4 then
37868: LD_VAR 0 8
37872: PUSH
37873: LD_INT 4
37875: GREATER
37876: IFFALSE 37880
// break ;
37878: GO 38936
// case i of 1 :
37880: LD_VAR 0 8
37884: PUSH
37885: LD_INT 1
37887: DOUBLE
37888: EQUAL
37889: IFTRUE 37893
37891: GO 37973
37893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37894: LD_ADDR_VAR 0 12
37898: PUSH
37899: LD_VAR 0 18
37903: PPUSH
37904: LD_INT 22
37906: PUSH
37907: LD_VAR 0 16
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 58
37918: PUSH
37919: EMPTY
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: LD_INT 30
37927: PUSH
37928: LD_INT 32
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 30
37937: PUSH
37938: LD_INT 4
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 30
37947: PUSH
37948: LD_INT 5
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: PPUSH
37966: CALL_OW 72
37970: ST_TO_ADDR
37971: GO 38195
37973: LD_INT 2
37975: DOUBLE
37976: EQUAL
37977: IFTRUE 37981
37979: GO 38043
37981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37982: LD_ADDR_VAR 0 12
37986: PUSH
37987: LD_VAR 0 18
37991: PPUSH
37992: LD_INT 22
37994: PUSH
37995: LD_VAR 0 16
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 30
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PPUSH
38036: CALL_OW 72
38040: ST_TO_ADDR
38041: GO 38195
38043: LD_INT 3
38045: DOUBLE
38046: EQUAL
38047: IFTRUE 38051
38049: GO 38113
38051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38052: LD_ADDR_VAR 0 12
38056: PUSH
38057: LD_VAR 0 18
38061: PPUSH
38062: LD_INT 22
38064: PUSH
38065: LD_VAR 0 16
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 30
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 30
38089: PUSH
38090: LD_INT 3
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PPUSH
38106: CALL_OW 72
38110: ST_TO_ADDR
38111: GO 38195
38113: LD_INT 4
38115: DOUBLE
38116: EQUAL
38117: IFTRUE 38121
38119: GO 38194
38121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38122: LD_ADDR_VAR 0 12
38126: PUSH
38127: LD_VAR 0 18
38131: PPUSH
38132: LD_INT 22
38134: PUSH
38135: LD_VAR 0 16
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_INT 6
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 30
38159: PUSH
38160: LD_INT 7
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 8
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PPUSH
38187: CALL_OW 72
38191: ST_TO_ADDR
38192: GO 38195
38194: POP
// if i = 1 then
38195: LD_VAR 0 8
38199: PUSH
38200: LD_INT 1
38202: EQUAL
38203: IFFALSE 38314
// begin tmp := [ ] ;
38205: LD_ADDR_VAR 0 19
38209: PUSH
38210: EMPTY
38211: ST_TO_ADDR
// for j in f do
38212: LD_ADDR_VAR 0 9
38216: PUSH
38217: LD_VAR 0 12
38221: PUSH
38222: FOR_IN
38223: IFFALSE 38296
// if GetBType ( j ) = b_bunker then
38225: LD_VAR 0 9
38229: PPUSH
38230: CALL_OW 266
38234: PUSH
38235: LD_INT 32
38237: EQUAL
38238: IFFALSE 38265
// tmp := Insert ( tmp , 1 , j ) else
38240: LD_ADDR_VAR 0 19
38244: PUSH
38245: LD_VAR 0 19
38249: PPUSH
38250: LD_INT 1
38252: PPUSH
38253: LD_VAR 0 9
38257: PPUSH
38258: CALL_OW 2
38262: ST_TO_ADDR
38263: GO 38294
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38265: LD_ADDR_VAR 0 19
38269: PUSH
38270: LD_VAR 0 19
38274: PPUSH
38275: LD_VAR 0 19
38279: PUSH
38280: LD_INT 1
38282: PLUS
38283: PPUSH
38284: LD_VAR 0 9
38288: PPUSH
38289: CALL_OW 2
38293: ST_TO_ADDR
38294: GO 38222
38296: POP
38297: POP
// if tmp then
38298: LD_VAR 0 19
38302: IFFALSE 38314
// f := tmp ;
38304: LD_ADDR_VAR 0 12
38308: PUSH
38309: LD_VAR 0 19
38313: ST_TO_ADDR
// end ; x := personel [ i ] ;
38314: LD_ADDR_VAR 0 13
38318: PUSH
38319: LD_VAR 0 6
38323: PUSH
38324: LD_VAR 0 8
38328: ARRAY
38329: ST_TO_ADDR
// if x = - 1 then
38330: LD_VAR 0 13
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: EQUAL
38339: IFFALSE 38550
// begin for j in f do
38341: LD_ADDR_VAR 0 9
38345: PUSH
38346: LD_VAR 0 12
38350: PUSH
38351: FOR_IN
38352: IFFALSE 38546
// repeat InitHc ;
38354: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38358: LD_VAR 0 9
38362: PPUSH
38363: CALL_OW 266
38367: PUSH
38368: LD_INT 5
38370: EQUAL
38371: IFFALSE 38441
// begin if UnitsInside ( j ) < 3 then
38373: LD_VAR 0 9
38377: PPUSH
38378: CALL_OW 313
38382: PUSH
38383: LD_INT 3
38385: LESS
38386: IFFALSE 38422
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38388: LD_INT 0
38390: PPUSH
38391: LD_INT 5
38393: PUSH
38394: LD_INT 8
38396: PUSH
38397: LD_INT 9
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: PUSH
38405: LD_VAR 0 17
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 4
38415: PPUSH
38416: CALL_OW 380
38420: GO 38439
// PrepareHuman ( false , i , skill ) ;
38422: LD_INT 0
38424: PPUSH
38425: LD_VAR 0 8
38429: PPUSH
38430: LD_VAR 0 4
38434: PPUSH
38435: CALL_OW 380
// end else
38439: GO 38458
// PrepareHuman ( false , i , skill ) ;
38441: LD_INT 0
38443: PPUSH
38444: LD_VAR 0 8
38448: PPUSH
38449: LD_VAR 0 4
38453: PPUSH
38454: CALL_OW 380
// un := CreateHuman ;
38458: LD_ADDR_VAR 0 14
38462: PUSH
38463: CALL_OW 44
38467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38468: LD_ADDR_VAR 0 7
38472: PUSH
38473: LD_VAR 0 7
38477: PPUSH
38478: LD_INT 1
38480: PPUSH
38481: LD_VAR 0 14
38485: PPUSH
38486: CALL_OW 2
38490: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38491: LD_VAR 0 14
38495: PPUSH
38496: LD_VAR 0 9
38500: PPUSH
38501: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38505: LD_VAR 0 9
38509: PPUSH
38510: CALL_OW 313
38514: PUSH
38515: LD_INT 6
38517: EQUAL
38518: IFTRUE 38542
38520: PUSH
38521: LD_VAR 0 9
38525: PPUSH
38526: CALL_OW 266
38530: PUSH
38531: LD_INT 32
38533: PUSH
38534: LD_INT 31
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: IN
38541: OR
38542: IFFALSE 38354
38544: GO 38351
38546: POP
38547: POP
// end else
38548: GO 38934
// for j = 1 to x do
38550: LD_ADDR_VAR 0 9
38554: PUSH
38555: DOUBLE
38556: LD_INT 1
38558: DEC
38559: ST_TO_ADDR
38560: LD_VAR 0 13
38564: PUSH
38565: FOR_TO
38566: IFFALSE 38932
// begin InitHc ;
38568: CALL_OW 19
// if not f then
38572: LD_VAR 0 12
38576: NOT
38577: IFFALSE 38666
// begin PrepareHuman ( false , i , skill ) ;
38579: LD_INT 0
38581: PPUSH
38582: LD_VAR 0 8
38586: PPUSH
38587: LD_VAR 0 4
38591: PPUSH
38592: CALL_OW 380
// un := CreateHuman ;
38596: LD_ADDR_VAR 0 14
38600: PUSH
38601: CALL_OW 44
38605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38606: LD_ADDR_VAR 0 7
38610: PUSH
38611: LD_VAR 0 7
38615: PPUSH
38616: LD_INT 1
38618: PPUSH
38619: LD_VAR 0 14
38623: PPUSH
38624: CALL_OW 2
38628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38629: LD_VAR 0 14
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 250
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 251
38653: PPUSH
38654: LD_INT 10
38656: PPUSH
38657: LD_INT 0
38659: PPUSH
38660: CALL_OW 50
// continue ;
38664: GO 38565
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38666: LD_VAR 0 12
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PPUSH
38675: CALL_OW 313
38679: IFFALSE 38707
38681: PUSH
38682: LD_VAR 0 12
38686: PUSH
38687: LD_INT 1
38689: ARRAY
38690: PPUSH
38691: CALL_OW 266
38695: PUSH
38696: LD_INT 32
38698: PUSH
38699: LD_INT 31
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: IN
38706: AND
38707: IFTRUE 38728
38709: PUSH
38710: LD_VAR 0 12
38714: PUSH
38715: LD_INT 1
38717: ARRAY
38718: PPUSH
38719: CALL_OW 313
38723: PUSH
38724: LD_INT 6
38726: EQUAL
38727: OR
38728: IFFALSE 38748
// f := Delete ( f , 1 ) ;
38730: LD_ADDR_VAR 0 12
38734: PUSH
38735: LD_VAR 0 12
38739: PPUSH
38740: LD_INT 1
38742: PPUSH
38743: CALL_OW 3
38747: ST_TO_ADDR
// if not f then
38748: LD_VAR 0 12
38752: NOT
38753: IFFALSE 38771
// begin x := x + 2 ;
38755: LD_ADDR_VAR 0 13
38759: PUSH
38760: LD_VAR 0 13
38764: PUSH
38765: LD_INT 2
38767: PLUS
38768: ST_TO_ADDR
// continue ;
38769: GO 38565
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38771: LD_VAR 0 12
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PPUSH
38780: CALL_OW 266
38784: PUSH
38785: LD_INT 5
38787: EQUAL
38788: IFFALSE 38862
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38790: LD_VAR 0 12
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PPUSH
38799: CALL_OW 313
38803: PUSH
38804: LD_INT 3
38806: LESS
38807: IFFALSE 38843
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38809: LD_INT 0
38811: PPUSH
38812: LD_INT 5
38814: PUSH
38815: LD_INT 8
38817: PUSH
38818: LD_INT 9
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: PUSH
38826: LD_VAR 0 17
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 4
38836: PPUSH
38837: CALL_OW 380
38841: GO 38860
// PrepareHuman ( false , i , skill ) ;
38843: LD_INT 0
38845: PPUSH
38846: LD_VAR 0 8
38850: PPUSH
38851: LD_VAR 0 4
38855: PPUSH
38856: CALL_OW 380
// end else
38860: GO 38879
// PrepareHuman ( false , i , skill ) ;
38862: LD_INT 0
38864: PPUSH
38865: LD_VAR 0 8
38869: PPUSH
38870: LD_VAR 0 4
38874: PPUSH
38875: CALL_OW 380
// un := CreateHuman ;
38879: LD_ADDR_VAR 0 14
38883: PUSH
38884: CALL_OW 44
38888: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38889: LD_ADDR_VAR 0 7
38893: PUSH
38894: LD_VAR 0 7
38898: PPUSH
38899: LD_INT 1
38901: PPUSH
38902: LD_VAR 0 14
38906: PPUSH
38907: CALL_OW 2
38911: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38912: LD_VAR 0 14
38916: PPUSH
38917: LD_VAR 0 12
38921: PUSH
38922: LD_INT 1
38924: ARRAY
38925: PPUSH
38926: CALL_OW 52
// end ;
38930: GO 38565
38932: POP
38933: POP
// end ;
38934: GO 37865
38936: POP
38937: POP
// result := result ^ buildings ;
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 7
38947: PUSH
38948: LD_VAR 0 18
38952: ADD
38953: ST_TO_ADDR
// end else
38954: GO 39097
// begin for i = 1 to personel do
38956: LD_ADDR_VAR 0 8
38960: PUSH
38961: DOUBLE
38962: LD_INT 1
38964: DEC
38965: ST_TO_ADDR
38966: LD_VAR 0 6
38970: PUSH
38971: FOR_TO
38972: IFFALSE 39095
// begin if i > 4 then
38974: LD_VAR 0 8
38978: PUSH
38979: LD_INT 4
38981: GREATER
38982: IFFALSE 38986
// break ;
38984: GO 39095
// x := personel [ i ] ;
38986: LD_ADDR_VAR 0 13
38990: PUSH
38991: LD_VAR 0 6
38995: PUSH
38996: LD_VAR 0 8
39000: ARRAY
39001: ST_TO_ADDR
// if x = - 1 then
39002: LD_VAR 0 13
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: EQUAL
39011: IFFALSE 39015
// continue ;
39013: GO 38971
// PrepareHuman ( false , i , skill ) ;
39015: LD_INT 0
39017: PPUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: LD_VAR 0 4
39027: PPUSH
39028: CALL_OW 380
// un := CreateHuman ;
39032: LD_ADDR_VAR 0 14
39036: PUSH
39037: CALL_OW 44
39041: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39042: LD_VAR 0 14
39046: PPUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 250
39056: PPUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 251
39066: PPUSH
39067: LD_INT 10
39069: PPUSH
39070: LD_INT 0
39072: PPUSH
39073: CALL_OW 50
// result := result ^ un ;
39077: LD_ADDR_VAR 0 7
39081: PUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_VAR 0 14
39091: ADD
39092: ST_TO_ADDR
// end ;
39093: GO 38971
39095: POP
39096: POP
// end ; end ;
39097: LD_VAR 0 7
39101: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39102: LD_INT 0
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
39111: PPUSH
39112: PPUSH
39113: PPUSH
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
// result := false ;
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_INT 0
39127: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39128: LD_VAR 0 1
39132: NOT
39133: IFTRUE 39158
39135: PUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 266
39145: PUSH
39146: LD_INT 32
39148: PUSH
39149: LD_INT 33
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: IN
39156: NOT
39157: OR
39158: IFFALSE 39162
// exit ;
39160: GO 40297
// nat := GetNation ( tower ) ;
39162: LD_ADDR_VAR 0 12
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: CALL_OW 248
39176: ST_TO_ADDR
// side := GetSide ( tower ) ;
39177: LD_ADDR_VAR 0 16
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 255
39191: ST_TO_ADDR
// x := GetX ( tower ) ;
39192: LD_ADDR_VAR 0 10
39196: PUSH
39197: LD_VAR 0 1
39201: PPUSH
39202: CALL_OW 250
39206: ST_TO_ADDR
// y := GetY ( tower ) ;
39207: LD_ADDR_VAR 0 11
39211: PUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 251
39221: ST_TO_ADDR
// if not x or not y then
39222: LD_VAR 0 10
39226: NOT
39227: IFTRUE 39236
39229: PUSH
39230: LD_VAR 0 11
39234: NOT
39235: OR
39236: IFFALSE 39240
// exit ;
39238: GO 40297
// weapon := 0 ;
39240: LD_ADDR_VAR 0 18
39244: PUSH
39245: LD_INT 0
39247: ST_TO_ADDR
// fac_list := [ ] ;
39248: LD_ADDR_VAR 0 17
39252: PUSH
39253: EMPTY
39254: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39255: LD_ADDR_VAR 0 6
39259: PUSH
39260: LD_VAR 0 1
39264: PPUSH
39265: CALL_OW 274
39269: PPUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: LD_INT 0
39277: PPUSH
39278: CALL 36832 0 3
39282: PPUSH
39283: LD_INT 30
39285: PUSH
39286: LD_INT 3
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 72
39297: ST_TO_ADDR
// if not factories then
39298: LD_VAR 0 6
39302: NOT
39303: IFFALSE 39307
// exit ;
39305: GO 40297
// for i in factories do
39307: LD_ADDR_VAR 0 8
39311: PUSH
39312: LD_VAR 0 6
39316: PUSH
39317: FOR_IN
39318: IFFALSE 39343
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39320: LD_ADDR_VAR 0 17
39324: PUSH
39325: LD_VAR 0 17
39329: PUSH
39330: LD_VAR 0 8
39334: PPUSH
39335: CALL_OW 478
39339: UNION
39340: ST_TO_ADDR
39341: GO 39317
39343: POP
39344: POP
// if not fac_list then
39345: LD_VAR 0 17
39349: NOT
39350: IFFALSE 39354
// exit ;
39352: GO 40297
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_INT 4
39361: PUSH
39362: LD_INT 5
39364: PUSH
39365: LD_INT 9
39367: PUSH
39368: LD_INT 10
39370: PUSH
39371: LD_INT 6
39373: PUSH
39374: LD_INT 7
39376: PUSH
39377: LD_INT 11
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 27
39391: PUSH
39392: LD_INT 28
39394: PUSH
39395: LD_INT 26
39397: PUSH
39398: LD_INT 30
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 43
39409: PUSH
39410: LD_INT 44
39412: PUSH
39413: LD_INT 46
39415: PUSH
39416: LD_INT 45
39418: PUSH
39419: LD_INT 47
39421: PUSH
39422: LD_INT 49
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: PUSH
39438: LD_VAR 0 12
39442: ARRAY
39443: ST_TO_ADDR
// list := list isect fac_list ;
39444: LD_ADDR_VAR 0 5
39448: PUSH
39449: LD_VAR 0 5
39453: PUSH
39454: LD_VAR 0 17
39458: ISECT
39459: ST_TO_ADDR
// if not list then
39460: LD_VAR 0 5
39464: NOT
39465: IFFALSE 39469
// exit ;
39467: GO 40297
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39469: LD_VAR 0 12
39473: PUSH
39474: LD_INT 3
39476: EQUAL
39477: IFFALSE 39489
39479: PUSH
39480: LD_INT 49
39482: PUSH
39483: LD_VAR 0 5
39487: IN
39488: AND
39489: IFFALSE 39509
39491: PUSH
39492: LD_INT 31
39494: PPUSH
39495: LD_VAR 0 16
39499: PPUSH
39500: CALL_OW 321
39504: PUSH
39505: LD_INT 2
39507: EQUAL
39508: AND
39509: IFFALSE 39569
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39511: LD_INT 22
39513: PUSH
39514: LD_VAR 0 16
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 35
39525: PUSH
39526: LD_INT 49
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 91
39535: PUSH
39536: LD_VAR 0 1
39540: PUSH
39541: LD_INT 10
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: PPUSH
39554: CALL_OW 69
39558: NOT
39559: IFFALSE 39569
// weapon := ru_time_lapser ;
39561: LD_ADDR_VAR 0 18
39565: PUSH
39566: LD_INT 49
39568: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39569: LD_VAR 0 12
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: IN
39584: IFFALSE 39608
39586: PUSH
39587: LD_INT 11
39589: PUSH
39590: LD_VAR 0 5
39594: IN
39595: IFTRUE 39607
39597: PUSH
39598: LD_INT 30
39600: PUSH
39601: LD_VAR 0 5
39605: IN
39606: OR
39607: AND
39608: IFFALSE 39628
39610: PUSH
39611: LD_INT 6
39613: PPUSH
39614: LD_VAR 0 16
39618: PPUSH
39619: CALL_OW 321
39623: PUSH
39624: LD_INT 2
39626: EQUAL
39627: AND
39628: IFFALSE 39795
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39630: LD_INT 22
39632: PUSH
39633: LD_VAR 0 16
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 35
39647: PUSH
39648: LD_INT 11
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 35
39657: PUSH
39658: LD_INT 30
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 91
39672: PUSH
39673: LD_VAR 0 1
39677: PUSH
39678: LD_INT 18
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: PPUSH
39691: CALL_OW 69
39695: NOT
39696: IFFALSE 39772
39698: PUSH
39699: LD_INT 22
39701: PUSH
39702: LD_VAR 0 16
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 32
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 30
39726: PUSH
39727: LD_INT 33
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 91
39741: PUSH
39742: LD_VAR 0 1
39746: PUSH
39747: LD_INT 12
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: PPUSH
39763: CALL_OW 69
39767: PUSH
39768: LD_INT 2
39770: GREATER
39771: AND
39772: IFFALSE 39795
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39774: LD_ADDR_VAR 0 18
39778: PUSH
39779: LD_INT 11
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_VAR 0 12
39793: ARRAY
39794: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39795: LD_VAR 0 18
39799: NOT
39800: IFFALSE 39820
39802: PUSH
39803: LD_INT 40
39805: PPUSH
39806: LD_VAR 0 16
39810: PPUSH
39811: CALL_OW 321
39815: PUSH
39816: LD_INT 2
39818: EQUAL
39819: AND
39820: IFFALSE 39856
39822: PUSH
39823: LD_INT 7
39825: PUSH
39826: LD_VAR 0 5
39830: IN
39831: IFTRUE 39843
39833: PUSH
39834: LD_INT 28
39836: PUSH
39837: LD_VAR 0 5
39841: IN
39842: OR
39843: IFTRUE 39855
39845: PUSH
39846: LD_INT 45
39848: PUSH
39849: LD_VAR 0 5
39853: IN
39854: OR
39855: AND
39856: IFFALSE 40110
// begin hex := GetHexInfo ( x , y ) ;
39858: LD_ADDR_VAR 0 4
39862: PUSH
39863: LD_VAR 0 10
39867: PPUSH
39868: LD_VAR 0 11
39872: PPUSH
39873: CALL_OW 546
39877: ST_TO_ADDR
// if hex [ 1 ] then
39878: LD_VAR 0 4
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: IFFALSE 39890
// exit ;
39888: GO 40297
// height := hex [ 2 ] ;
39890: LD_ADDR_VAR 0 15
39894: PUSH
39895: LD_VAR 0 4
39899: PUSH
39900: LD_INT 2
39902: ARRAY
39903: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39904: LD_ADDR_VAR 0 14
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 5
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: ST_TO_ADDR
// for i in tmp do
39927: LD_ADDR_VAR 0 8
39931: PUSH
39932: LD_VAR 0 14
39936: PUSH
39937: FOR_IN
39938: IFFALSE 40108
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39940: LD_ADDR_VAR 0 9
39944: PUSH
39945: LD_VAR 0 10
39949: PPUSH
39950: LD_VAR 0 8
39954: PPUSH
39955: LD_INT 5
39957: PPUSH
39958: CALL_OW 272
39962: PUSH
39963: LD_VAR 0 11
39967: PPUSH
39968: LD_VAR 0 8
39972: PPUSH
39973: LD_INT 5
39975: PPUSH
39976: CALL_OW 273
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39985: LD_VAR 0 9
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: PPUSH
39994: LD_VAR 0 9
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: PPUSH
40003: CALL_OW 488
40007: IFFALSE 40106
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40009: LD_ADDR_VAR 0 4
40013: PUSH
40014: LD_VAR 0 9
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: PPUSH
40023: LD_VAR 0 9
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: PPUSH
40032: CALL_OW 546
40036: ST_TO_ADDR
// if hex [ 1 ] then
40037: LD_VAR 0 4
40041: PUSH
40042: LD_INT 1
40044: ARRAY
40045: IFFALSE 40049
// continue ;
40047: GO 39937
// h := hex [ 2 ] ;
40049: LD_ADDR_VAR 0 13
40053: PUSH
40054: LD_VAR 0 4
40058: PUSH
40059: LD_INT 2
40061: ARRAY
40062: ST_TO_ADDR
// if h + 7 < height then
40063: LD_VAR 0 13
40067: PUSH
40068: LD_INT 7
40070: PLUS
40071: PUSH
40072: LD_VAR 0 15
40076: LESS
40077: IFFALSE 40106
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40079: LD_ADDR_VAR 0 18
40083: PUSH
40084: LD_INT 7
40086: PUSH
40087: LD_INT 28
40089: PUSH
40090: LD_INT 45
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: PUSH
40098: LD_VAR 0 12
40102: ARRAY
40103: ST_TO_ADDR
// break ;
40104: GO 40108
// end ; end ; end ;
40106: GO 39937
40108: POP
40109: POP
// end ; if not weapon then
40110: LD_VAR 0 18
40114: NOT
40115: IFFALSE 40175
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40117: LD_ADDR_VAR 0 5
40121: PUSH
40122: LD_VAR 0 5
40126: PUSH
40127: LD_INT 11
40129: PUSH
40130: LD_INT 30
40132: PUSH
40133: LD_INT 49
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: DIFF
40141: ST_TO_ADDR
// if not list then
40142: LD_VAR 0 5
40146: NOT
40147: IFFALSE 40151
// exit ;
40149: GO 40297
// weapon := list [ rand ( 1 , list ) ] ;
40151: LD_ADDR_VAR 0 18
40155: PUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_INT 1
40163: PPUSH
40164: LD_VAR 0 5
40168: PPUSH
40169: CALL_OW 12
40173: ARRAY
40174: ST_TO_ADDR
// end ; if weapon then
40175: LD_VAR 0 18
40179: IFFALSE 40297
// begin tmp := CostOfWeapon ( weapon ) ;
40181: LD_ADDR_VAR 0 14
40185: PUSH
40186: LD_VAR 0 18
40190: PPUSH
40191: CALL_OW 451
40195: ST_TO_ADDR
// j := GetBase ( tower ) ;
40196: LD_ADDR_VAR 0 9
40200: PUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 274
40210: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40211: LD_VAR 0 9
40215: PPUSH
40216: LD_INT 1
40218: PPUSH
40219: CALL_OW 275
40223: PUSH
40224: LD_VAR 0 14
40228: PUSH
40229: LD_INT 1
40231: ARRAY
40232: GREATEREQUAL
40233: IFFALSE 40259
40235: PUSH
40236: LD_VAR 0 9
40240: PPUSH
40241: LD_INT 2
40243: PPUSH
40244: CALL_OW 275
40248: PUSH
40249: LD_VAR 0 14
40253: PUSH
40254: LD_INT 2
40256: ARRAY
40257: GREATEREQUAL
40258: AND
40259: IFFALSE 40285
40261: PUSH
40262: LD_VAR 0 9
40266: PPUSH
40267: LD_INT 3
40269: PPUSH
40270: CALL_OW 275
40274: PUSH
40275: LD_VAR 0 14
40279: PUSH
40280: LD_INT 3
40282: ARRAY
40283: GREATEREQUAL
40284: AND
40285: IFFALSE 40297
// result := weapon ;
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_VAR 0 18
40296: ST_TO_ADDR
// end ; end ;
40297: LD_VAR 0 3
40301: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
// result := true ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_INT 1
40313: ST_TO_ADDR
// if array1 = array2 then
40314: LD_VAR 0 1
40318: PUSH
40319: LD_VAR 0 2
40323: EQUAL
40324: IFFALSE 40384
// begin for i = 1 to array1 do
40326: LD_ADDR_VAR 0 4
40330: PUSH
40331: DOUBLE
40332: LD_INT 1
40334: DEC
40335: ST_TO_ADDR
40336: LD_VAR 0 1
40340: PUSH
40341: FOR_TO
40342: IFFALSE 40380
// if array1 [ i ] <> array2 [ i ] then
40344: LD_VAR 0 1
40348: PUSH
40349: LD_VAR 0 4
40353: ARRAY
40354: PUSH
40355: LD_VAR 0 2
40359: PUSH
40360: LD_VAR 0 4
40364: ARRAY
40365: NONEQUAL
40366: IFFALSE 40378
// begin result := false ;
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 0
40375: ST_TO_ADDR
// break ;
40376: GO 40380
// end ;
40378: GO 40341
40380: POP
40381: POP
// end else
40382: GO 40392
// result := false ;
40384: LD_ADDR_VAR 0 3
40388: PUSH
40389: LD_INT 0
40391: ST_TO_ADDR
// end ;
40392: LD_VAR 0 3
40396: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40397: LD_INT 0
40399: PPUSH
40400: PPUSH
// if not array1 or not array2 then
40401: LD_VAR 0 1
40405: NOT
40406: IFTRUE 40415
40408: PUSH
40409: LD_VAR 0 2
40413: NOT
40414: OR
40415: IFFALSE 40419
// exit ;
40417: GO 40483
// result := true ;
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_INT 1
40426: ST_TO_ADDR
// for i = 1 to array1 do
40427: LD_ADDR_VAR 0 4
40431: PUSH
40432: DOUBLE
40433: LD_INT 1
40435: DEC
40436: ST_TO_ADDR
40437: LD_VAR 0 1
40441: PUSH
40442: FOR_TO
40443: IFFALSE 40481
// if array1 [ i ] <> array2 [ i ] then
40445: LD_VAR 0 1
40449: PUSH
40450: LD_VAR 0 4
40454: ARRAY
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_VAR 0 4
40465: ARRAY
40466: NONEQUAL
40467: IFFALSE 40479
// begin result := false ;
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_INT 0
40476: ST_TO_ADDR
// break ;
40477: GO 40481
// end ;
40479: GO 40442
40481: POP
40482: POP
// end ;
40483: LD_VAR 0 3
40487: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40488: LD_INT 0
40490: PPUSH
40491: PPUSH
40492: PPUSH
// pom := GetBase ( fac ) ;
40493: LD_ADDR_VAR 0 5
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 274
40507: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40508: LD_ADDR_VAR 0 4
40512: PUSH
40513: LD_VAR 0 2
40517: PUSH
40518: LD_INT 1
40520: ARRAY
40521: PPUSH
40522: LD_VAR 0 2
40526: PUSH
40527: LD_INT 2
40529: ARRAY
40530: PPUSH
40531: LD_VAR 0 2
40535: PUSH
40536: LD_INT 3
40538: ARRAY
40539: PPUSH
40540: LD_VAR 0 2
40544: PUSH
40545: LD_INT 4
40547: ARRAY
40548: PPUSH
40549: CALL_OW 449
40553: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_VAR 0 5
40563: PPUSH
40564: LD_INT 1
40566: PPUSH
40567: CALL_OW 275
40571: PUSH
40572: LD_VAR 0 4
40576: PUSH
40577: LD_INT 1
40579: ARRAY
40580: GREATEREQUAL
40581: IFFALSE 40607
40583: PUSH
40584: LD_VAR 0 5
40588: PPUSH
40589: LD_INT 2
40591: PPUSH
40592: CALL_OW 275
40596: PUSH
40597: LD_VAR 0 4
40601: PUSH
40602: LD_INT 2
40604: ARRAY
40605: GREATEREQUAL
40606: AND
40607: IFFALSE 40633
40609: PUSH
40610: LD_VAR 0 5
40614: PPUSH
40615: LD_INT 3
40617: PPUSH
40618: CALL_OW 275
40622: PUSH
40623: LD_VAR 0 4
40627: PUSH
40628: LD_INT 3
40630: ARRAY
40631: GREATEREQUAL
40632: AND
40633: ST_TO_ADDR
// end ;
40634: LD_VAR 0 3
40638: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40639: LD_INT 0
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
// pom := GetBase ( building ) ;
40645: LD_ADDR_VAR 0 3
40649: PUSH
40650: LD_VAR 0 1
40654: PPUSH
40655: CALL_OW 274
40659: ST_TO_ADDR
// if not pom then
40660: LD_VAR 0 3
40664: NOT
40665: IFFALSE 40669
// exit ;
40667: GO 40843
// btype := GetBType ( building ) ;
40669: LD_ADDR_VAR 0 5
40673: PUSH
40674: LD_VAR 0 1
40678: PPUSH
40679: CALL_OW 266
40683: ST_TO_ADDR
// if btype = b_armoury then
40684: LD_VAR 0 5
40688: PUSH
40689: LD_INT 4
40691: EQUAL
40692: IFFALSE 40702
// btype := b_barracks ;
40694: LD_ADDR_VAR 0 5
40698: PUSH
40699: LD_INT 5
40701: ST_TO_ADDR
// if btype = b_depot then
40702: LD_VAR 0 5
40706: PUSH
40707: LD_INT 0
40709: EQUAL
40710: IFFALSE 40720
// btype := b_warehouse ;
40712: LD_ADDR_VAR 0 5
40716: PUSH
40717: LD_INT 1
40719: ST_TO_ADDR
// if btype = b_workshop then
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 2
40727: EQUAL
40728: IFFALSE 40738
// btype := b_factory ;
40730: LD_ADDR_VAR 0 5
40734: PUSH
40735: LD_INT 3
40737: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40738: LD_ADDR_VAR 0 4
40742: PUSH
40743: LD_VAR 0 5
40747: PPUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 248
40757: PPUSH
40758: CALL_OW 450
40762: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: LD_VAR 0 3
40772: PPUSH
40773: LD_INT 1
40775: PPUSH
40776: CALL_OW 275
40780: PUSH
40781: LD_VAR 0 4
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: GREATEREQUAL
40790: IFFALSE 40816
40792: PUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: LD_INT 2
40800: PPUSH
40801: CALL_OW 275
40805: PUSH
40806: LD_VAR 0 4
40810: PUSH
40811: LD_INT 2
40813: ARRAY
40814: GREATEREQUAL
40815: AND
40816: IFFALSE 40842
40818: PUSH
40819: LD_VAR 0 3
40823: PPUSH
40824: LD_INT 3
40826: PPUSH
40827: CALL_OW 275
40831: PUSH
40832: LD_VAR 0 4
40836: PUSH
40837: LD_INT 3
40839: ARRAY
40840: GREATEREQUAL
40841: AND
40842: ST_TO_ADDR
// end ;
40843: LD_VAR 0 2
40847: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
40852: PPUSH
// pom := GetBase ( building ) ;
40853: LD_ADDR_VAR 0 4
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 274
40867: ST_TO_ADDR
// if not pom then
40868: LD_VAR 0 4
40872: NOT
40873: IFFALSE 40877
// exit ;
40875: GO 40982
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40877: LD_ADDR_VAR 0 5
40881: PUSH
40882: LD_VAR 0 2
40886: PPUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 248
40896: PPUSH
40897: CALL_OW 450
40901: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40902: LD_ADDR_VAR 0 3
40906: PUSH
40907: LD_VAR 0 4
40911: PPUSH
40912: LD_INT 1
40914: PPUSH
40915: CALL_OW 275
40919: PUSH
40920: LD_VAR 0 5
40924: PUSH
40925: LD_INT 1
40927: ARRAY
40928: GREATEREQUAL
40929: IFFALSE 40955
40931: PUSH
40932: LD_VAR 0 4
40936: PPUSH
40937: LD_INT 2
40939: PPUSH
40940: CALL_OW 275
40944: PUSH
40945: LD_VAR 0 5
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: GREATEREQUAL
40954: AND
40955: IFFALSE 40981
40957: PUSH
40958: LD_VAR 0 4
40962: PPUSH
40963: LD_INT 3
40965: PPUSH
40966: CALL_OW 275
40970: PUSH
40971: LD_VAR 0 5
40975: PUSH
40976: LD_INT 3
40978: ARRAY
40979: GREATEREQUAL
40980: AND
40981: ST_TO_ADDR
// end ;
40982: LD_VAR 0 3
40986: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40987: LD_INT 0
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
// result := false ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_INT 0
41007: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41008: LD_VAR 0 5
41012: NOT
41013: IFTRUE 41022
41015: PUSH
41016: LD_VAR 0 1
41020: NOT
41021: OR
41022: IFTRUE 41031
41024: PUSH
41025: LD_VAR 0 2
41029: NOT
41030: OR
41031: IFTRUE 41040
41033: PUSH
41034: LD_VAR 0 3
41038: NOT
41039: OR
41040: IFFALSE 41044
// exit ;
41042: GO 41870
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41044: LD_ADDR_VAR 0 14
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: LD_VAR 0 2
41058: PPUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: LD_VAR 0 4
41068: PPUSH
41069: LD_VAR 0 5
41073: PUSH
41074: LD_INT 1
41076: ARRAY
41077: PPUSH
41078: CALL_OW 248
41082: PPUSH
41083: LD_INT 0
41085: PPUSH
41086: CALL 43151 0 6
41090: ST_TO_ADDR
// if not hexes then
41091: LD_VAR 0 14
41095: NOT
41096: IFFALSE 41100
// exit ;
41098: GO 41870
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41100: LD_ADDR_VAR 0 17
41104: PUSH
41105: LD_VAR 0 5
41109: PPUSH
41110: LD_INT 22
41112: PUSH
41113: LD_VAR 0 13
41117: PPUSH
41118: CALL_OW 255
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 30
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 30
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 72
41163: ST_TO_ADDR
// for i = 1 to hexes do
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: DOUBLE
41170: LD_INT 1
41172: DEC
41173: ST_TO_ADDR
41174: LD_VAR 0 14
41178: PUSH
41179: FOR_TO
41180: IFFALSE 41868
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41182: LD_ADDR_VAR 0 13
41186: PUSH
41187: LD_VAR 0 14
41191: PUSH
41192: LD_VAR 0 9
41196: ARRAY
41197: PUSH
41198: LD_INT 1
41200: ARRAY
41201: PPUSH
41202: LD_VAR 0 14
41206: PUSH
41207: LD_VAR 0 9
41211: ARRAY
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: PPUSH
41217: CALL_OW 428
41221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41222: LD_VAR 0 14
41226: PUSH
41227: LD_VAR 0 9
41231: ARRAY
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PPUSH
41237: LD_VAR 0 14
41241: PUSH
41242: LD_VAR 0 9
41246: ARRAY
41247: PUSH
41248: LD_INT 2
41250: ARRAY
41251: PPUSH
41252: CALL_OW 351
41256: IFTRUE 41295
41258: PUSH
41259: LD_VAR 0 14
41263: PUSH
41264: LD_VAR 0 9
41268: ARRAY
41269: PUSH
41270: LD_INT 1
41272: ARRAY
41273: PPUSH
41274: LD_VAR 0 14
41278: PUSH
41279: LD_VAR 0 9
41283: ARRAY
41284: PUSH
41285: LD_INT 2
41287: ARRAY
41288: PPUSH
41289: CALL_OW 488
41293: NOT
41294: OR
41295: IFTRUE 41312
41297: PUSH
41298: LD_VAR 0 13
41302: PPUSH
41303: CALL_OW 247
41307: PUSH
41308: LD_INT 3
41310: EQUAL
41311: OR
41312: IFFALSE 41318
// exit ;
41314: POP
41315: POP
41316: GO 41870
// if not tmp then
41318: LD_VAR 0 13
41322: NOT
41323: IFFALSE 41327
// continue ;
41325: GO 41179
// result := true ;
41327: LD_ADDR_VAR 0 8
41331: PUSH
41332: LD_INT 1
41334: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41335: LD_VAR 0 6
41339: IFFALSE 41356
41341: PUSH
41342: LD_VAR 0 13
41346: PPUSH
41347: CALL_OW 247
41351: PUSH
41352: LD_INT 2
41354: EQUAL
41355: AND
41356: IFFALSE 41373
41358: PUSH
41359: LD_VAR 0 13
41363: PPUSH
41364: CALL_OW 263
41368: PUSH
41369: LD_INT 1
41371: EQUAL
41372: AND
41373: IFFALSE 41537
// begin if IsDrivenBy ( tmp ) then
41375: LD_VAR 0 13
41379: PPUSH
41380: CALL_OW 311
41384: IFFALSE 41388
// continue ;
41386: GO 41179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41388: LD_VAR 0 6
41392: PPUSH
41393: LD_INT 3
41395: PUSH
41396: LD_INT 60
41398: PUSH
41399: EMPTY
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: LD_INT 55
41411: PUSH
41412: EMPTY
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PPUSH
41423: CALL_OW 72
41427: IFFALSE 41535
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41429: LD_ADDR_VAR 0 18
41433: PUSH
41434: LD_VAR 0 6
41438: PPUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 60
41444: PUSH
41445: EMPTY
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: LD_INT 55
41457: PUSH
41458: EMPTY
41459: LIST
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 72
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: ST_TO_ADDR
// if IsInUnit ( driver ) then
41478: LD_VAR 0 18
41482: PPUSH
41483: CALL_OW 310
41487: IFFALSE 41498
// ComExit ( driver ) ;
41489: LD_VAR 0 18
41493: PPUSH
41494: CALL 67151 0 1
// AddComEnterUnit ( driver , tmp ) ;
41498: LD_VAR 0 18
41502: PPUSH
41503: LD_VAR 0 13
41507: PPUSH
41508: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41512: LD_VAR 0 18
41516: PPUSH
41517: LD_VAR 0 7
41521: PPUSH
41522: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41526: LD_VAR 0 18
41530: PPUSH
41531: CALL_OW 181
// end ; continue ;
41535: GO 41179
// end ; if not cleaners or not tmp in cleaners then
41537: LD_VAR 0 6
41541: NOT
41542: IFTRUE 41557
41544: PUSH
41545: LD_VAR 0 13
41549: PUSH
41550: LD_VAR 0 6
41554: IN
41555: NOT
41556: OR
41557: IFFALSE 41866
// begin if dep then
41559: LD_VAR 0 17
41563: IFFALSE 41699
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41565: LD_ADDR_VAR 0 16
41569: PUSH
41570: LD_VAR 0 17
41574: PUSH
41575: LD_INT 1
41577: ARRAY
41578: PPUSH
41579: CALL_OW 250
41583: PPUSH
41584: LD_VAR 0 17
41588: PUSH
41589: LD_INT 1
41591: ARRAY
41592: PPUSH
41593: CALL_OW 254
41597: PPUSH
41598: LD_INT 5
41600: PPUSH
41601: CALL_OW 272
41605: PUSH
41606: LD_VAR 0 17
41610: PUSH
41611: LD_INT 1
41613: ARRAY
41614: PPUSH
41615: CALL_OW 251
41619: PPUSH
41620: LD_VAR 0 17
41624: PUSH
41625: LD_INT 1
41627: ARRAY
41628: PPUSH
41629: CALL_OW 254
41633: PPUSH
41634: LD_INT 5
41636: PPUSH
41637: CALL_OW 273
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41646: LD_VAR 0 16
41650: PUSH
41651: LD_INT 1
41653: ARRAY
41654: PPUSH
41655: LD_VAR 0 16
41659: PUSH
41660: LD_INT 2
41662: ARRAY
41663: PPUSH
41664: CALL_OW 488
41668: IFFALSE 41699
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41670: LD_VAR 0 13
41674: PPUSH
41675: LD_VAR 0 16
41679: PUSH
41680: LD_INT 1
41682: ARRAY
41683: PPUSH
41684: LD_VAR 0 16
41688: PUSH
41689: LD_INT 2
41691: ARRAY
41692: PPUSH
41693: CALL_OW 111
// continue ;
41697: GO 41179
// end ; end ; r := GetDir ( tmp ) ;
41699: LD_ADDR_VAR 0 15
41703: PUSH
41704: LD_VAR 0 13
41708: PPUSH
41709: CALL_OW 254
41713: ST_TO_ADDR
// if r = 5 then
41714: LD_VAR 0 15
41718: PUSH
41719: LD_INT 5
41721: EQUAL
41722: IFFALSE 41732
// r := 0 ;
41724: LD_ADDR_VAR 0 15
41728: PUSH
41729: LD_INT 0
41731: ST_TO_ADDR
// for j = r to 5 do
41732: LD_ADDR_VAR 0 10
41736: PUSH
41737: DOUBLE
41738: LD_VAR 0 15
41742: DEC
41743: ST_TO_ADDR
41744: LD_INT 5
41746: PUSH
41747: FOR_TO
41748: IFFALSE 41864
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41750: LD_ADDR_VAR 0 11
41754: PUSH
41755: LD_VAR 0 13
41759: PPUSH
41760: CALL_OW 250
41764: PPUSH
41765: LD_VAR 0 10
41769: PPUSH
41770: LD_INT 2
41772: PPUSH
41773: CALL_OW 272
41777: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41778: LD_ADDR_VAR 0 12
41782: PUSH
41783: LD_VAR 0 13
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_VAR 0 10
41797: PPUSH
41798: LD_INT 2
41800: PPUSH
41801: CALL_OW 273
41805: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41806: LD_VAR 0 11
41810: PPUSH
41811: LD_VAR 0 12
41815: PPUSH
41816: CALL_OW 488
41820: IFFALSE 41839
41822: PUSH
41823: LD_VAR 0 11
41827: PPUSH
41828: LD_VAR 0 12
41832: PPUSH
41833: CALL_OW 428
41837: NOT
41838: AND
41839: IFFALSE 41862
// begin ComMoveXY ( tmp , _x , _y ) ;
41841: LD_VAR 0 13
41845: PPUSH
41846: LD_VAR 0 11
41850: PPUSH
41851: LD_VAR 0 12
41855: PPUSH
41856: CALL_OW 111
// break ;
41860: GO 41864
// end ; end ;
41862: GO 41747
41864: POP
41865: POP
// end ; end ;
41866: GO 41179
41868: POP
41869: POP
// end ;
41870: LD_VAR 0 8
41874: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41875: LD_INT 0
41877: PPUSH
// result := true ;
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 1
41885: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41886: LD_VAR 0 2
41890: PUSH
41891: LD_INT 24
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41905
41897: LD_INT 33
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41905
41903: GO 41930
41905: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_INT 32
41913: PPUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 321
41923: PUSH
41924: LD_INT 2
41926: EQUAL
41927: ST_TO_ADDR
41928: GO 42246
41930: LD_INT 20
41932: DOUBLE
41933: EQUAL
41934: IFTRUE 41938
41936: GO 41963
41938: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_INT 6
41946: PPUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 321
41956: PUSH
41957: LD_INT 2
41959: EQUAL
41960: ST_TO_ADDR
41961: GO 42246
41963: LD_INT 22
41965: DOUBLE
41966: EQUAL
41967: IFTRUE 41977
41969: LD_INT 36
41971: DOUBLE
41972: EQUAL
41973: IFTRUE 41977
41975: GO 42002
41977: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 15
41985: PPUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: CALL_OW 321
41995: PUSH
41996: LD_INT 2
41998: EQUAL
41999: ST_TO_ADDR
42000: GO 42246
42002: LD_INT 30
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42035
42010: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 20
42018: PPUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 321
42028: PUSH
42029: LD_INT 2
42031: EQUAL
42032: ST_TO_ADDR
42033: GO 42246
42035: LD_INT 28
42037: DOUBLE
42038: EQUAL
42039: IFTRUE 42049
42041: LD_INT 21
42043: DOUBLE
42044: EQUAL
42045: IFTRUE 42049
42047: GO 42074
42049: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42050: LD_ADDR_VAR 0 3
42054: PUSH
42055: LD_INT 21
42057: PPUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: CALL_OW 321
42067: PUSH
42068: LD_INT 2
42070: EQUAL
42071: ST_TO_ADDR
42072: GO 42246
42074: LD_INT 16
42076: DOUBLE
42077: EQUAL
42078: IFTRUE 42082
42080: GO 42107
42082: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_INT 84
42090: PPUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 321
42100: PUSH
42101: LD_INT 2
42103: EQUAL
42104: ST_TO_ADDR
42105: GO 42246
42107: LD_INT 19
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42121
42113: LD_INT 23
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42121
42119: GO 42146
42121: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_INT 83
42129: PPUSH
42130: LD_VAR 0 1
42134: PPUSH
42135: CALL_OW 321
42139: PUSH
42140: LD_INT 2
42142: EQUAL
42143: ST_TO_ADDR
42144: GO 42246
42146: LD_INT 17
42148: DOUBLE
42149: EQUAL
42150: IFTRUE 42154
42152: GO 42179
42154: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42155: LD_ADDR_VAR 0 3
42159: PUSH
42160: LD_INT 39
42162: PPUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 321
42172: PUSH
42173: LD_INT 2
42175: EQUAL
42176: ST_TO_ADDR
42177: GO 42246
42179: LD_INT 18
42181: DOUBLE
42182: EQUAL
42183: IFTRUE 42187
42185: GO 42212
42187: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42188: LD_ADDR_VAR 0 3
42192: PUSH
42193: LD_INT 40
42195: PPUSH
42196: LD_VAR 0 1
42200: PPUSH
42201: CALL_OW 321
42205: PUSH
42206: LD_INT 2
42208: EQUAL
42209: ST_TO_ADDR
42210: GO 42246
42212: LD_INT 27
42214: DOUBLE
42215: EQUAL
42216: IFTRUE 42220
42218: GO 42245
42220: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42221: LD_ADDR_VAR 0 3
42225: PUSH
42226: LD_INT 35
42228: PPUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 321
42238: PUSH
42239: LD_INT 2
42241: EQUAL
42242: ST_TO_ADDR
42243: GO 42246
42245: POP
// end ;
42246: LD_VAR 0 3
42250: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42251: LD_INT 0
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
// result := false ;
42264: LD_ADDR_VAR 0 6
42268: PUSH
42269: LD_INT 0
42271: ST_TO_ADDR
// if btype = b_depot then
42272: LD_VAR 0 2
42276: PUSH
42277: LD_INT 0
42279: EQUAL
42280: IFFALSE 42292
// begin result := true ;
42282: LD_ADDR_VAR 0 6
42286: PUSH
42287: LD_INT 1
42289: ST_TO_ADDR
// exit ;
42290: GO 43146
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42292: LD_VAR 0 1
42296: NOT
42297: IFTRUE 42322
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 266
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: IN
42320: NOT
42321: OR
42322: IFTRUE 42331
42324: PUSH
42325: LD_VAR 0 2
42329: NOT
42330: OR
42331: IFTRUE 42367
42333: PUSH
42334: LD_VAR 0 5
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 4
42353: PUSH
42354: LD_INT 5
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: IN
42365: NOT
42366: OR
42367: IFTRUE 42386
42369: PUSH
42370: LD_VAR 0 3
42374: PPUSH
42375: LD_VAR 0 4
42379: PPUSH
42380: CALL_OW 488
42384: NOT
42385: OR
42386: IFFALSE 42390
// exit ;
42388: GO 43146
// side := GetSide ( depot ) ;
42390: LD_ADDR_VAR 0 9
42394: PUSH
42395: LD_VAR 0 1
42399: PPUSH
42400: CALL_OW 255
42404: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42405: LD_VAR 0 9
42409: PPUSH
42410: LD_VAR 0 2
42414: PPUSH
42415: CALL 41875 0 2
42419: NOT
42420: IFFALSE 42424
// exit ;
42422: GO 43146
// pom := GetBase ( depot ) ;
42424: LD_ADDR_VAR 0 10
42428: PUSH
42429: LD_VAR 0 1
42433: PPUSH
42434: CALL_OW 274
42438: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42439: LD_ADDR_VAR 0 11
42443: PUSH
42444: LD_VAR 0 2
42448: PPUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 248
42458: PPUSH
42459: CALL_OW 450
42463: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42464: LD_VAR 0 10
42468: PPUSH
42469: LD_INT 1
42471: PPUSH
42472: CALL_OW 275
42476: PUSH
42477: LD_VAR 0 11
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: GREATEREQUAL
42486: IFFALSE 42512
42488: PUSH
42489: LD_VAR 0 10
42493: PPUSH
42494: LD_INT 2
42496: PPUSH
42497: CALL_OW 275
42501: PUSH
42502: LD_VAR 0 11
42506: PUSH
42507: LD_INT 2
42509: ARRAY
42510: GREATEREQUAL
42511: AND
42512: IFFALSE 42538
42514: PUSH
42515: LD_VAR 0 10
42519: PPUSH
42520: LD_INT 3
42522: PPUSH
42523: CALL_OW 275
42527: PUSH
42528: LD_VAR 0 11
42532: PUSH
42533: LD_INT 3
42535: ARRAY
42536: GREATEREQUAL
42537: AND
42538: NOT
42539: IFFALSE 42543
// exit ;
42541: GO 43146
// if GetBType ( depot ) = b_depot then
42543: LD_VAR 0 1
42547: PPUSH
42548: CALL_OW 266
42552: PUSH
42553: LD_INT 0
42555: EQUAL
42556: IFFALSE 42568
// dist := 28 else
42558: LD_ADDR_VAR 0 14
42562: PUSH
42563: LD_INT 28
42565: ST_TO_ADDR
42566: GO 42576
// dist := 36 ;
42568: LD_ADDR_VAR 0 14
42572: PUSH
42573: LD_INT 36
42575: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42576: LD_VAR 0 1
42580: PPUSH
42581: LD_VAR 0 3
42585: PPUSH
42586: LD_VAR 0 4
42590: PPUSH
42591: CALL_OW 297
42595: PUSH
42596: LD_VAR 0 14
42600: GREATER
42601: IFFALSE 42605
// exit ;
42603: GO 43146
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42605: LD_ADDR_VAR 0 12
42609: PUSH
42610: LD_VAR 0 2
42614: PPUSH
42615: LD_VAR 0 3
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: LD_VAR 0 5
42629: PPUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: CALL_OW 248
42639: PPUSH
42640: LD_INT 0
42642: PPUSH
42643: CALL 43151 0 6
42647: ST_TO_ADDR
// if not hexes then
42648: LD_VAR 0 12
42652: NOT
42653: IFFALSE 42657
// exit ;
42655: GO 43146
// hex := GetHexInfo ( x , y ) ;
42657: LD_ADDR_VAR 0 15
42661: PUSH
42662: LD_VAR 0 3
42666: PPUSH
42667: LD_VAR 0 4
42671: PPUSH
42672: CALL_OW 546
42676: ST_TO_ADDR
// if hex [ 1 ] then
42677: LD_VAR 0 15
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: IFFALSE 42689
// exit ;
42687: GO 43146
// height := hex [ 2 ] ;
42689: LD_ADDR_VAR 0 13
42693: PUSH
42694: LD_VAR 0 15
42698: PUSH
42699: LD_INT 2
42701: ARRAY
42702: ST_TO_ADDR
// for i = 1 to hexes do
42703: LD_ADDR_VAR 0 7
42707: PUSH
42708: DOUBLE
42709: LD_INT 1
42711: DEC
42712: ST_TO_ADDR
42713: LD_VAR 0 12
42717: PUSH
42718: FOR_TO
42719: IFFALSE 43063
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42721: LD_VAR 0 12
42725: PUSH
42726: LD_VAR 0 7
42730: ARRAY
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PPUSH
42736: LD_VAR 0 12
42740: PUSH
42741: LD_VAR 0 7
42745: ARRAY
42746: PUSH
42747: LD_INT 2
42749: ARRAY
42750: PPUSH
42751: CALL_OW 488
42755: NOT
42756: IFTRUE 42798
42758: PUSH
42759: LD_VAR 0 12
42763: PUSH
42764: LD_VAR 0 7
42768: ARRAY
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 12
42778: PUSH
42779: LD_VAR 0 7
42783: ARRAY
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 428
42793: PUSH
42794: LD_INT 0
42796: GREATER
42797: OR
42798: IFTRUE 42836
42800: PUSH
42801: LD_VAR 0 12
42805: PUSH
42806: LD_VAR 0 7
42810: ARRAY
42811: PUSH
42812: LD_INT 1
42814: ARRAY
42815: PPUSH
42816: LD_VAR 0 12
42820: PUSH
42821: LD_VAR 0 7
42825: ARRAY
42826: PUSH
42827: LD_INT 2
42829: ARRAY
42830: PPUSH
42831: CALL_OW 351
42835: OR
42836: IFFALSE 42842
// exit ;
42838: POP
42839: POP
42840: GO 43146
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42842: LD_ADDR_VAR 0 8
42846: PUSH
42847: LD_VAR 0 12
42851: PUSH
42852: LD_VAR 0 7
42856: ARRAY
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PPUSH
42862: LD_VAR 0 12
42866: PUSH
42867: LD_VAR 0 7
42871: ARRAY
42872: PUSH
42873: LD_INT 2
42875: ARRAY
42876: PPUSH
42877: CALL_OW 546
42881: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42882: LD_VAR 0 8
42886: PUSH
42887: LD_INT 1
42889: ARRAY
42890: IFTRUE 42912
42892: PUSH
42893: LD_VAR 0 8
42897: PUSH
42898: LD_INT 2
42900: ARRAY
42901: PUSH
42902: LD_VAR 0 13
42906: PUSH
42907: LD_INT 2
42909: PLUS
42910: GREATER
42911: OR
42912: IFTRUE 42934
42914: PUSH
42915: LD_VAR 0 8
42919: PUSH
42920: LD_INT 2
42922: ARRAY
42923: PUSH
42924: LD_VAR 0 13
42928: PUSH
42929: LD_INT 2
42931: MINUS
42932: LESS
42933: OR
42934: IFTRUE 43002
42936: PUSH
42937: LD_VAR 0 8
42941: PUSH
42942: LD_INT 3
42944: ARRAY
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 8
42951: PUSH
42952: LD_INT 9
42954: PUSH
42955: LD_INT 10
42957: PUSH
42958: LD_INT 11
42960: PUSH
42961: LD_INT 12
42963: PUSH
42964: LD_INT 13
42966: PUSH
42967: LD_INT 16
42969: PUSH
42970: LD_INT 17
42972: PUSH
42973: LD_INT 18
42975: PUSH
42976: LD_INT 19
42978: PUSH
42979: LD_INT 20
42981: PUSH
42982: LD_INT 21
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: IN
43000: NOT
43001: OR
43002: IFTRUE 43015
43004: PUSH
43005: LD_VAR 0 8
43009: PUSH
43010: LD_INT 5
43012: ARRAY
43013: NOT
43014: OR
43015: IFTRUE 43055
43017: PUSH
43018: LD_VAR 0 8
43022: PUSH
43023: LD_INT 6
43025: ARRAY
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 7
43035: PUSH
43036: LD_INT 9
43038: PUSH
43039: LD_INT 10
43041: PUSH
43042: LD_INT 11
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: IN
43053: NOT
43054: OR
43055: IFFALSE 43061
// exit ;
43057: POP
43058: POP
43059: GO 43146
// end ;
43061: GO 42718
43063: POP
43064: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43065: LD_VAR 0 9
43069: PPUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: LD_VAR 0 4
43079: PPUSH
43080: LD_INT 20
43082: PPUSH
43083: CALL 34965 0 4
43087: PUSH
43088: LD_INT 4
43090: ARRAY
43091: IFFALSE 43095
// exit ;
43093: GO 43146
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43095: LD_VAR 0 2
43099: PUSH
43100: LD_INT 29
43102: PUSH
43103: LD_INT 30
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: IN
43110: IFFALSE 43134
43112: PUSH
43113: LD_VAR 0 3
43117: PPUSH
43118: LD_VAR 0 4
43122: PPUSH
43123: LD_VAR 0 9
43127: PPUSH
43128: CALL_OW 440
43132: NOT
43133: AND
43134: IFFALSE 43138
// exit ;
43136: GO 43146
// result := true ;
43138: LD_ADDR_VAR 0 6
43142: PUSH
43143: LD_INT 1
43145: ST_TO_ADDR
// end ;
43146: LD_VAR 0 6
43150: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43151: LD_INT 0
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
// result = [ ] ;
43211: LD_ADDR_VAR 0 7
43215: PUSH
43216: EMPTY
43217: ST_TO_ADDR
// temp_list = [ ] ;
43218: LD_ADDR_VAR 0 9
43222: PUSH
43223: EMPTY
43224: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43225: LD_VAR 0 4
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: LD_INT 4
43244: PUSH
43245: LD_INT 5
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: IN
43256: NOT
43257: IFTRUE 43300
43259: PUSH
43260: LD_VAR 0 1
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: IN
43275: IFFALSE 43299
43277: PUSH
43278: LD_VAR 0 5
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: IN
43297: NOT
43298: AND
43299: OR
43300: IFFALSE 43304
// exit ;
43302: GO 61703
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43304: LD_VAR 0 1
43308: PUSH
43309: LD_INT 6
43311: PUSH
43312: LD_INT 7
43314: PUSH
43315: LD_INT 8
43317: PUSH
43318: LD_INT 13
43320: PUSH
43321: LD_INT 12
43323: PUSH
43324: LD_INT 15
43326: PUSH
43327: LD_INT 11
43329: PUSH
43330: LD_INT 14
43332: PUSH
43333: LD_INT 10
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: IN
43347: IFFALSE 43357
// btype = b_lab ;
43349: LD_ADDR_VAR 0 1
43353: PUSH
43354: LD_INT 6
43356: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43357: LD_VAR 0 6
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: IN
43376: NOT
43377: IFTRUE 43445
43379: PUSH
43380: LD_VAR 0 1
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: LD_INT 6
43399: PUSH
43400: LD_INT 36
43402: PUSH
43403: LD_INT 4
43405: PUSH
43406: LD_INT 5
43408: PUSH
43409: LD_INT 31
43411: PUSH
43412: LD_INT 32
43414: PUSH
43415: LD_INT 33
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: IN
43431: NOT
43432: IFFALSE 43444
43434: PUSH
43435: LD_VAR 0 6
43439: PUSH
43440: LD_INT 1
43442: EQUAL
43443: AND
43444: OR
43445: IFTRUE 43477
43447: PUSH
43448: LD_VAR 0 1
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: IN
43463: NOT
43464: IFFALSE 43476
43466: PUSH
43467: LD_VAR 0 6
43471: PUSH
43472: LD_INT 2
43474: EQUAL
43475: AND
43476: OR
43477: IFFALSE 43487
// mode = 0 ;
43479: LD_ADDR_VAR 0 6
43483: PUSH
43484: LD_INT 0
43486: ST_TO_ADDR
// case mode of 0 :
43487: LD_VAR 0 6
43491: PUSH
43492: LD_INT 0
43494: DOUBLE
43495: EQUAL
43496: IFTRUE 43500
43498: GO 54953
43500: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43501: LD_ADDR_VAR 0 11
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 3
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43694: LD_ADDR_VAR 0 12
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 3
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43890: LD_ADDR_VAR 0 13
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 3
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: NEG
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44089: LD_ADDR_VAR 0 14
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44285: LD_ADDR_VAR 0 15
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44478: LD_ADDR_VAR 0 16
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44671: LD_ADDR_VAR 0 17
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44901: LD_ADDR_VAR 0 18
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45131: LD_ADDR_VAR 0 19
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45361: LD_ADDR_VAR 0 20
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45591: LD_ADDR_VAR 0 21
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45821: LD_ADDR_VAR 0 22
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46051: LD_ADDR_VAR 0 23
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 3
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46331: LD_ADDR_VAR 0 24
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46607: LD_ADDR_VAR 0 25
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46881: LD_ADDR_VAR 0 26
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47157: LD_ADDR_VAR 0 27
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47437: LD_ADDR_VAR 0 28
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47719: LD_ADDR_VAR 0 29
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47998: LD_ADDR_VAR 0 30
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48276: LD_ADDR_VAR 0 31
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48554: LD_ADDR_VAR 0 32
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48832: LD_ADDR_VAR 0 33
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49111: LD_ADDR_VAR 0 34
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49391: LD_ADDR_VAR 0 35
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49503: LD_ADDR_VAR 0 36
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49615: LD_ADDR_VAR 0 37
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49727: LD_ADDR_VAR 0 38
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49839: LD_ADDR_VAR 0 39
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49951: LD_ADDR_VAR 0 40
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50063: LD_ADDR_VAR 0 41
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50413: LD_ADDR_VAR 0 42
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50763: LD_ADDR_VAR 0 43
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51111: LD_ADDR_VAR 0 44
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51461: LD_ADDR_VAR 0 45
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51811: LD_ADDR_VAR 0 46
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52159: LD_ADDR_VAR 0 47
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52310: LD_ADDR_VAR 0 48
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52457: LD_ADDR_VAR 0 49
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52601: LD_ADDR_VAR 0 50
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52745: LD_ADDR_VAR 0 51
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52892: LD_ADDR_VAR 0 52
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53043: LD_ADDR_VAR 0 53
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53273: LD_ADDR_VAR 0 54
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53503: LD_ADDR_VAR 0 55
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53733: LD_ADDR_VAR 0 56
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53963: LD_ADDR_VAR 0 57
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54193: LD_ADDR_VAR 0 58
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54423: LD_ADDR_VAR 0 59
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54511: LD_ADDR_VAR 0 60
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54599: LD_ADDR_VAR 0 61
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54687: LD_ADDR_VAR 0 62
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54775: LD_ADDR_VAR 0 63
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54863: LD_ADDR_VAR 0 64
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// end ; 1 :
54951: GO 60848
54953: LD_INT 1
54955: DOUBLE
54956: EQUAL
54957: IFTRUE 54961
54959: GO 57584
54961: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54962: LD_ADDR_VAR 0 11
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55006: LD_ADDR_VAR 0 12
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55047: LD_ADDR_VAR 0 13
55051: PUSH
55052: LD_INT 3
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55087: LD_ADDR_VAR 0 14
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55128: LD_ADDR_VAR 0 15
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55172: LD_ADDR_VAR 0 16
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55218: LD_ADDR_VAR 0 17
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55262: LD_ADDR_VAR 0 18
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55303: LD_ADDR_VAR 0 19
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55343: LD_ADDR_VAR 0 20
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55384: LD_ADDR_VAR 0 21
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55428: LD_ADDR_VAR 0 22
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 3
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55474: LD_ADDR_VAR 0 23
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 3
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 4
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 3
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55518: LD_ADDR_VAR 0 24
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55559: LD_ADDR_VAR 0 25
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 4
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55599: LD_ADDR_VAR 0 26
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55640: LD_ADDR_VAR 0 27
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55684: LD_ADDR_VAR 0 28
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: NEG
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55730: LD_ADDR_VAR 0 29
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 4
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 5
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 5
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 6
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 6
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55885: LD_ADDR_VAR 0 30
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 4
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 4
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 5
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 6
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 6
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56028: LD_ADDR_VAR 0 31
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: LD_INT 4
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: LD_INT 4
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: PUSH
56106: LD_INT 5
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 4
56115: PUSH
56116: LD_INT 5
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 6
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 6
56135: PUSH
56136: LD_INT 6
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: PUSH
56146: LD_INT 6
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56167: LD_ADDR_VAR 0 32
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 4
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 4
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 5
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 4
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 6
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 6
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 5
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56310: LD_ADDR_VAR 0 33
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 4
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 4
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 5
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 5
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 5
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 6
56430: NEG
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 6
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56465: LD_ADDR_VAR 0 34
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: NEG
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: LD_INT 4
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 4
56544: NEG
56545: PUSH
56546: LD_INT 5
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 5
56556: NEG
56557: PUSH
56558: LD_INT 4
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: NEG
56569: PUSH
56570: LD_INT 5
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: NEG
56581: PUSH
56582: LD_INT 6
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 6
56592: NEG
56593: PUSH
56594: LD_INT 5
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 6
56604: NEG
56605: PUSH
56606: LD_INT 6
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56628: LD_ADDR_VAR 0 41
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56672: LD_ADDR_VAR 0 42
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56713: LD_ADDR_VAR 0 43
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56753: LD_ADDR_VAR 0 44
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56794: LD_ADDR_VAR 0 45
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56838: LD_ADDR_VAR 0 46
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56884: LD_ADDR_VAR 0 47
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56917: LD_ADDR_VAR 0 48
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56948: LD_ADDR_VAR 0 49
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56977: LD_ADDR_VAR 0 50
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57006: LD_ADDR_VAR 0 51
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57037: LD_ADDR_VAR 0 52
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57070: LD_ADDR_VAR 0 53
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57114: LD_ADDR_VAR 0 54
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57155: LD_ADDR_VAR 0 55
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57195: LD_ADDR_VAR 0 56
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57236: LD_ADDR_VAR 0 57
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57280: LD_ADDR_VAR 0 58
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57326: LD_ADDR_VAR 0 59
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57370: LD_ADDR_VAR 0 60
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57411: LD_ADDR_VAR 0 61
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57451: LD_ADDR_VAR 0 62
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57492: LD_ADDR_VAR 0 63
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57536: LD_ADDR_VAR 0 64
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: ST_TO_ADDR
// end ; 2 :
57582: GO 60848
57584: LD_INT 2
57586: DOUBLE
57587: EQUAL
57588: IFTRUE 57592
57590: GO 60847
57592: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57593: LD_ADDR_VAR 0 29
57597: PUSH
57598: LD_INT 4
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 5
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 5
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 5
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 5
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 4
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 4
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: LD_INT 5
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 4
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 5
58050: NEG
58051: PUSH
58052: LD_INT 5
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: NEG
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58131: LD_ADDR_VAR 0 30
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: LD_INT 4
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 4
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: LD_INT 4
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: LD_INT 5
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 4
58178: PUSH
58179: LD_INT 5
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: LD_INT 4
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 5
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 5
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 5
58377: NEG
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: LD_INT 4
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 4
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 4
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 5
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 4
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 5
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 3
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 5
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58678: LD_ADDR_VAR 0 31
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 5
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 5
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 4
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: LD_INT 5
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 4
58892: NEG
58893: PUSH
58894: LD_INT 5
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 4
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 4
58928: NEG
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 5
58940: NEG
58941: PUSH
58942: LD_INT 4
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 5
58952: NEG
58953: PUSH
58954: LD_INT 5
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: LD_INT 5
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 5
58976: NEG
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 4
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 4
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 5
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 5
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59228: LD_ADDR_VAR 0 32
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 4
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 4
59280: NEG
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 5
59291: NEG
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: NEG
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 5
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 4
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 4
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 4
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 5
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 5
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 5
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 4
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 2
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: LD_INT 4
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 5
59670: PUSH
59671: LD_INT 5
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: LD_INT 5
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 5
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: LD_INT 5
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59775: LD_ADDR_VAR 0 33
59779: PUSH
59780: LD_INT 4
59782: NEG
59783: PUSH
59784: LD_INT 4
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 4
59794: NEG
59795: PUSH
59796: LD_INT 5
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 4
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 4
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 5
59842: NEG
59843: PUSH
59844: LD_INT 4
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 5
59854: NEG
59855: PUSH
59856: LD_INT 5
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 5
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 5
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 4
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 4
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 5
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 5
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: LD_INT 4
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 4
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 4
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 5
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 5
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 5
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60313: LD_ADDR_VAR 0 34
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 4
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 5
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 4
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 4
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 3
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: LD_INT 4
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 4
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 5
60535: PUSH
60536: LD_INT 4
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: LD_INT 5
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 4
60555: PUSH
60556: LD_INT 5
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 5
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: LD_INT 5
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: LD_INT 4
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// end ; end ;
60845: GO 60848
60847: POP
// case btype of b_depot , b_warehouse :
60848: LD_VAR 0 1
60852: PUSH
60853: LD_INT 0
60855: DOUBLE
60856: EQUAL
60857: IFTRUE 60867
60859: LD_INT 1
60861: DOUBLE
60862: EQUAL
60863: IFTRUE 60867
60865: GO 61068
60867: POP
// case nation of nation_american :
60868: LD_VAR 0 5
60872: PUSH
60873: LD_INT 1
60875: DOUBLE
60876: EQUAL
60877: IFTRUE 60881
60879: GO 60937
60881: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60882: LD_ADDR_VAR 0 9
60886: PUSH
60887: LD_VAR 0 11
60891: PUSH
60892: LD_VAR 0 12
60896: PUSH
60897: LD_VAR 0 13
60901: PUSH
60902: LD_VAR 0 14
60906: PUSH
60907: LD_VAR 0 15
60911: PUSH
60912: LD_VAR 0 16
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: PUSH
60925: LD_VAR 0 4
60929: PUSH
60930: LD_INT 1
60932: PLUS
60933: ARRAY
60934: ST_TO_ADDR
60935: GO 61066
60937: LD_INT 2
60939: DOUBLE
60940: EQUAL
60941: IFTRUE 60945
60943: GO 61001
60945: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60946: LD_ADDR_VAR 0 9
60950: PUSH
60951: LD_VAR 0 17
60955: PUSH
60956: LD_VAR 0 18
60960: PUSH
60961: LD_VAR 0 19
60965: PUSH
60966: LD_VAR 0 20
60970: PUSH
60971: LD_VAR 0 21
60975: PUSH
60976: LD_VAR 0 22
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: PUSH
60989: LD_VAR 0 4
60993: PUSH
60994: LD_INT 1
60996: PLUS
60997: ARRAY
60998: ST_TO_ADDR
60999: GO 61066
61001: LD_INT 3
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61065
61009: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61010: LD_ADDR_VAR 0 9
61014: PUSH
61015: LD_VAR 0 23
61019: PUSH
61020: LD_VAR 0 24
61024: PUSH
61025: LD_VAR 0 25
61029: PUSH
61030: LD_VAR 0 26
61034: PUSH
61035: LD_VAR 0 27
61039: PUSH
61040: LD_VAR 0 28
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: PUSH
61053: LD_VAR 0 4
61057: PUSH
61058: LD_INT 1
61060: PLUS
61061: ARRAY
61062: ST_TO_ADDR
61063: GO 61066
61065: POP
61066: GO 61621
61068: LD_INT 2
61070: DOUBLE
61071: EQUAL
61072: IFTRUE 61082
61074: LD_INT 3
61076: DOUBLE
61077: EQUAL
61078: IFTRUE 61082
61080: GO 61138
61082: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61083: LD_ADDR_VAR 0 9
61087: PUSH
61088: LD_VAR 0 29
61092: PUSH
61093: LD_VAR 0 30
61097: PUSH
61098: LD_VAR 0 31
61102: PUSH
61103: LD_VAR 0 32
61107: PUSH
61108: LD_VAR 0 33
61112: PUSH
61113: LD_VAR 0 34
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: PUSH
61126: LD_VAR 0 4
61130: PUSH
61131: LD_INT 1
61133: PLUS
61134: ARRAY
61135: ST_TO_ADDR
61136: GO 61621
61138: LD_INT 16
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61200
61144: LD_INT 17
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61200
61150: LD_INT 18
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61200
61156: LD_INT 19
61158: DOUBLE
61159: EQUAL
61160: IFTRUE 61200
61162: LD_INT 22
61164: DOUBLE
61165: EQUAL
61166: IFTRUE 61200
61168: LD_INT 20
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61200
61174: LD_INT 21
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61200
61180: LD_INT 23
61182: DOUBLE
61183: EQUAL
61184: IFTRUE 61200
61186: LD_INT 24
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61200
61192: LD_INT 25
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61200
61198: GO 61256
61200: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61201: LD_ADDR_VAR 0 9
61205: PUSH
61206: LD_VAR 0 35
61210: PUSH
61211: LD_VAR 0 36
61215: PUSH
61216: LD_VAR 0 37
61220: PUSH
61221: LD_VAR 0 38
61225: PUSH
61226: LD_VAR 0 39
61230: PUSH
61231: LD_VAR 0 40
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: LD_VAR 0 4
61248: PUSH
61249: LD_INT 1
61251: PLUS
61252: ARRAY
61253: ST_TO_ADDR
61254: GO 61621
61256: LD_INT 6
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61312
61262: LD_INT 7
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61312
61268: LD_INT 8
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61312
61274: LD_INT 13
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61312
61280: LD_INT 12
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61312
61286: LD_INT 15
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61312
61292: LD_INT 11
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61312
61298: LD_INT 14
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61312
61304: LD_INT 10
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61312
61310: GO 61368
61312: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61313: LD_ADDR_VAR 0 9
61317: PUSH
61318: LD_VAR 0 41
61322: PUSH
61323: LD_VAR 0 42
61327: PUSH
61328: LD_VAR 0 43
61332: PUSH
61333: LD_VAR 0 44
61337: PUSH
61338: LD_VAR 0 45
61342: PUSH
61343: LD_VAR 0 46
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: PUSH
61356: LD_VAR 0 4
61360: PUSH
61361: LD_INT 1
61363: PLUS
61364: ARRAY
61365: ST_TO_ADDR
61366: GO 61621
61368: LD_INT 36
61370: DOUBLE
61371: EQUAL
61372: IFTRUE 61376
61374: GO 61432
61376: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61377: LD_ADDR_VAR 0 9
61381: PUSH
61382: LD_VAR 0 47
61386: PUSH
61387: LD_VAR 0 48
61391: PUSH
61392: LD_VAR 0 49
61396: PUSH
61397: LD_VAR 0 50
61401: PUSH
61402: LD_VAR 0 51
61406: PUSH
61407: LD_VAR 0 52
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: PUSH
61420: LD_VAR 0 4
61424: PUSH
61425: LD_INT 1
61427: PLUS
61428: ARRAY
61429: ST_TO_ADDR
61430: GO 61621
61432: LD_INT 4
61434: DOUBLE
61435: EQUAL
61436: IFTRUE 61458
61438: LD_INT 5
61440: DOUBLE
61441: EQUAL
61442: IFTRUE 61458
61444: LD_INT 34
61446: DOUBLE
61447: EQUAL
61448: IFTRUE 61458
61450: LD_INT 37
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61458
61456: GO 61514
61458: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61459: LD_ADDR_VAR 0 9
61463: PUSH
61464: LD_VAR 0 53
61468: PUSH
61469: LD_VAR 0 54
61473: PUSH
61474: LD_VAR 0 55
61478: PUSH
61479: LD_VAR 0 56
61483: PUSH
61484: LD_VAR 0 57
61488: PUSH
61489: LD_VAR 0 58
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: PUSH
61502: LD_VAR 0 4
61506: PUSH
61507: LD_INT 1
61509: PLUS
61510: ARRAY
61511: ST_TO_ADDR
61512: GO 61621
61514: LD_INT 31
61516: DOUBLE
61517: EQUAL
61518: IFTRUE 61564
61520: LD_INT 32
61522: DOUBLE
61523: EQUAL
61524: IFTRUE 61564
61526: LD_INT 33
61528: DOUBLE
61529: EQUAL
61530: IFTRUE 61564
61532: LD_INT 27
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61564
61538: LD_INT 26
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61564
61544: LD_INT 28
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61564
61550: LD_INT 29
61552: DOUBLE
61553: EQUAL
61554: IFTRUE 61564
61556: LD_INT 30
61558: DOUBLE
61559: EQUAL
61560: IFTRUE 61564
61562: GO 61620
61564: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61565: LD_ADDR_VAR 0 9
61569: PUSH
61570: LD_VAR 0 59
61574: PUSH
61575: LD_VAR 0 60
61579: PUSH
61580: LD_VAR 0 61
61584: PUSH
61585: LD_VAR 0 62
61589: PUSH
61590: LD_VAR 0 63
61594: PUSH
61595: LD_VAR 0 64
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: PUSH
61608: LD_VAR 0 4
61612: PUSH
61613: LD_INT 1
61615: PLUS
61616: ARRAY
61617: ST_TO_ADDR
61618: GO 61621
61620: POP
// temp_list2 = [ ] ;
61621: LD_ADDR_VAR 0 10
61625: PUSH
61626: EMPTY
61627: ST_TO_ADDR
// for i in temp_list do
61628: LD_ADDR_VAR 0 8
61632: PUSH
61633: LD_VAR 0 9
61637: PUSH
61638: FOR_IN
61639: IFFALSE 61691
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61641: LD_ADDR_VAR 0 10
61645: PUSH
61646: LD_VAR 0 10
61650: PUSH
61651: LD_VAR 0 8
61655: PUSH
61656: LD_INT 1
61658: ARRAY
61659: PUSH
61660: LD_VAR 0 2
61664: PLUS
61665: PUSH
61666: LD_VAR 0 8
61670: PUSH
61671: LD_INT 2
61673: ARRAY
61674: PUSH
61675: LD_VAR 0 3
61679: PLUS
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: ADD
61688: ST_TO_ADDR
61689: GO 61638
61691: POP
61692: POP
// result = temp_list2 ;
61693: LD_ADDR_VAR 0 7
61697: PUSH
61698: LD_VAR 0 10
61702: ST_TO_ADDR
// end ;
61703: LD_VAR 0 7
61707: RET
// export function EnemyInRange ( unit , dist ) ; begin
61708: LD_INT 0
61710: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61711: LD_ADDR_VAR 0 3
61715: PUSH
61716: LD_VAR 0 1
61720: PPUSH
61721: CALL_OW 255
61725: PPUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 250
61735: PPUSH
61736: LD_VAR 0 1
61740: PPUSH
61741: CALL_OW 251
61745: PPUSH
61746: LD_VAR 0 2
61750: PPUSH
61751: CALL 34965 0 4
61755: PUSH
61756: LD_INT 4
61758: ARRAY
61759: ST_TO_ADDR
// end ;
61760: LD_VAR 0 3
61764: RET
// export function PlayerSeeMe ( unit ) ; begin
61765: LD_INT 0
61767: PPUSH
// result := See ( your_side , unit ) ;
61768: LD_ADDR_VAR 0 2
61772: PUSH
61773: LD_OWVAR 2
61777: PPUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: CALL_OW 292
61787: ST_TO_ADDR
// end ;
61788: LD_VAR 0 2
61792: RET
// export function ReverseDir ( unit ) ; begin
61793: LD_INT 0
61795: PPUSH
// if not unit then
61796: LD_VAR 0 1
61800: NOT
61801: IFFALSE 61805
// exit ;
61803: GO 61828
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61805: LD_ADDR_VAR 0 2
61809: PUSH
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL_OW 254
61819: PUSH
61820: LD_INT 3
61822: PLUS
61823: PUSH
61824: LD_INT 6
61826: MOD
61827: ST_TO_ADDR
// end ;
61828: LD_VAR 0 2
61832: RET
// export function ReverseArray ( array ) ; var i ; begin
61833: LD_INT 0
61835: PPUSH
61836: PPUSH
// if not array then
61837: LD_VAR 0 1
61841: NOT
61842: IFFALSE 61846
// exit ;
61844: GO 61901
// result := [ ] ;
61846: LD_ADDR_VAR 0 2
61850: PUSH
61851: EMPTY
61852: ST_TO_ADDR
// for i := array downto 1 do
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: DOUBLE
61859: LD_VAR 0 1
61863: INC
61864: ST_TO_ADDR
61865: LD_INT 1
61867: PUSH
61868: FOR_DOWNTO
61869: IFFALSE 61899
// result := Join ( result , array [ i ] ) ;
61871: LD_ADDR_VAR 0 2
61875: PUSH
61876: LD_VAR 0 2
61880: PPUSH
61881: LD_VAR 0 1
61885: PUSH
61886: LD_VAR 0 3
61890: ARRAY
61891: PPUSH
61892: CALL 66753 0 2
61896: ST_TO_ADDR
61897: GO 61868
61899: POP
61900: POP
// end ;
61901: LD_VAR 0 2
61905: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61906: LD_INT 0
61908: PPUSH
61909: PPUSH
61910: PPUSH
61911: PPUSH
61912: PPUSH
61913: PPUSH
// if not unit or not hexes then
61914: LD_VAR 0 1
61918: NOT
61919: IFTRUE 61928
61921: PUSH
61922: LD_VAR 0 2
61926: NOT
61927: OR
61928: IFFALSE 61932
// exit ;
61930: GO 62055
// dist := 9999 ;
61932: LD_ADDR_VAR 0 5
61936: PUSH
61937: LD_INT 9999
61939: ST_TO_ADDR
// for i = 1 to hexes do
61940: LD_ADDR_VAR 0 4
61944: PUSH
61945: DOUBLE
61946: LD_INT 1
61948: DEC
61949: ST_TO_ADDR
61950: LD_VAR 0 2
61954: PUSH
61955: FOR_TO
61956: IFFALSE 62043
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61958: LD_ADDR_VAR 0 6
61962: PUSH
61963: LD_VAR 0 1
61967: PPUSH
61968: LD_VAR 0 2
61972: PUSH
61973: LD_VAR 0 4
61977: ARRAY
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PPUSH
61983: LD_VAR 0 2
61987: PUSH
61988: LD_VAR 0 4
61992: ARRAY
61993: PUSH
61994: LD_INT 2
61996: ARRAY
61997: PPUSH
61998: CALL_OW 297
62002: ST_TO_ADDR
// if tdist < dist then
62003: LD_VAR 0 6
62007: PUSH
62008: LD_VAR 0 5
62012: LESS
62013: IFFALSE 62041
// begin hex := hexes [ i ] ;
62015: LD_ADDR_VAR 0 8
62019: PUSH
62020: LD_VAR 0 2
62024: PUSH
62025: LD_VAR 0 4
62029: ARRAY
62030: ST_TO_ADDR
// dist := tdist ;
62031: LD_ADDR_VAR 0 5
62035: PUSH
62036: LD_VAR 0 6
62040: ST_TO_ADDR
// end ; end ;
62041: GO 61955
62043: POP
62044: POP
// result := hex ;
62045: LD_ADDR_VAR 0 3
62049: PUSH
62050: LD_VAR 0 8
62054: ST_TO_ADDR
// end ;
62055: LD_VAR 0 3
62059: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62060: LD_INT 0
62062: PPUSH
62063: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62064: LD_VAR 0 1
62068: NOT
62069: IFTRUE 62108
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 21
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 23
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PPUSH
62101: CALL_OW 69
62105: IN
62106: NOT
62107: OR
62108: IFFALSE 62112
// exit ;
62110: GO 62159
// for i = 1 to 3 do
62112: LD_ADDR_VAR 0 3
62116: PUSH
62117: DOUBLE
62118: LD_INT 1
62120: DEC
62121: ST_TO_ADDR
62122: LD_INT 3
62124: PUSH
62125: FOR_TO
62126: IFFALSE 62157
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62128: LD_VAR 0 1
62132: PPUSH
62133: CALL_OW 250
62137: PPUSH
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 251
62147: PPUSH
62148: LD_INT 1
62150: PPUSH
62151: CALL_OW 453
62155: GO 62125
62157: POP
62158: POP
// end ;
62159: LD_VAR 0 2
62163: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62164: LD_INT 0
62166: PPUSH
62167: PPUSH
62168: PPUSH
62169: PPUSH
62170: PPUSH
62171: PPUSH
// if not unit or not enemy_unit then
62172: LD_VAR 0 1
62176: NOT
62177: IFTRUE 62186
62179: PUSH
62180: LD_VAR 0 2
62184: NOT
62185: OR
62186: IFFALSE 62190
// exit ;
62188: GO 62671
// if GetLives ( i ) < 250 then
62190: LD_VAR 0 4
62194: PPUSH
62195: CALL_OW 256
62199: PUSH
62200: LD_INT 250
62202: LESS
62203: IFFALSE 62216
// begin ComAutodestruct ( i ) ;
62205: LD_VAR 0 4
62209: PPUSH
62210: CALL 62060 0 1
// exit ;
62214: GO 62671
// end ; x := GetX ( enemy_unit ) ;
62216: LD_ADDR_VAR 0 7
62220: PUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: CALL_OW 250
62230: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62231: LD_ADDR_VAR 0 8
62235: PUSH
62236: LD_VAR 0 2
62240: PPUSH
62241: CALL_OW 251
62245: ST_TO_ADDR
// if not x or not y then
62246: LD_VAR 0 7
62250: NOT
62251: IFTRUE 62260
62253: PUSH
62254: LD_VAR 0 8
62258: NOT
62259: OR
62260: IFFALSE 62264
// exit ;
62262: GO 62671
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62264: LD_ADDR_VAR 0 6
62268: PUSH
62269: LD_VAR 0 7
62273: PPUSH
62274: LD_INT 0
62276: PPUSH
62277: LD_INT 4
62279: PPUSH
62280: CALL_OW 272
62284: PUSH
62285: LD_VAR 0 8
62289: PPUSH
62290: LD_INT 0
62292: PPUSH
62293: LD_INT 4
62295: PPUSH
62296: CALL_OW 273
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_VAR 0 7
62309: PPUSH
62310: LD_INT 1
62312: PPUSH
62313: LD_INT 4
62315: PPUSH
62316: CALL_OW 272
62320: PUSH
62321: LD_VAR 0 8
62325: PPUSH
62326: LD_INT 1
62328: PPUSH
62329: LD_INT 4
62331: PPUSH
62332: CALL_OW 273
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_VAR 0 7
62345: PPUSH
62346: LD_INT 2
62348: PPUSH
62349: LD_INT 4
62351: PPUSH
62352: CALL_OW 272
62356: PUSH
62357: LD_VAR 0 8
62361: PPUSH
62362: LD_INT 2
62364: PPUSH
62365: LD_INT 4
62367: PPUSH
62368: CALL_OW 273
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_VAR 0 7
62381: PPUSH
62382: LD_INT 3
62384: PPUSH
62385: LD_INT 4
62387: PPUSH
62388: CALL_OW 272
62392: PUSH
62393: LD_VAR 0 8
62397: PPUSH
62398: LD_INT 3
62400: PPUSH
62401: LD_INT 4
62403: PPUSH
62404: CALL_OW 273
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_VAR 0 7
62417: PPUSH
62418: LD_INT 4
62420: PPUSH
62421: LD_INT 4
62423: PPUSH
62424: CALL_OW 272
62428: PUSH
62429: LD_VAR 0 8
62433: PPUSH
62434: LD_INT 4
62436: PPUSH
62437: LD_INT 4
62439: PPUSH
62440: CALL_OW 273
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_VAR 0 7
62453: PPUSH
62454: LD_INT 5
62456: PPUSH
62457: LD_INT 4
62459: PPUSH
62460: CALL_OW 272
62464: PUSH
62465: LD_VAR 0 8
62469: PPUSH
62470: LD_INT 5
62472: PPUSH
62473: LD_INT 4
62475: PPUSH
62476: CALL_OW 273
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// for i = tmp downto 1 do
62493: LD_ADDR_VAR 0 4
62497: PUSH
62498: DOUBLE
62499: LD_VAR 0 6
62503: INC
62504: ST_TO_ADDR
62505: LD_INT 1
62507: PUSH
62508: FOR_DOWNTO
62509: IFFALSE 62612
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62511: LD_VAR 0 6
62515: PUSH
62516: LD_VAR 0 4
62520: ARRAY
62521: PUSH
62522: LD_INT 1
62524: ARRAY
62525: PPUSH
62526: LD_VAR 0 6
62530: PUSH
62531: LD_VAR 0 4
62535: ARRAY
62536: PUSH
62537: LD_INT 2
62539: ARRAY
62540: PPUSH
62541: CALL_OW 488
62545: NOT
62546: IFTRUE 62588
62548: PUSH
62549: LD_VAR 0 6
62553: PUSH
62554: LD_VAR 0 4
62558: ARRAY
62559: PUSH
62560: LD_INT 1
62562: ARRAY
62563: PPUSH
62564: LD_VAR 0 6
62568: PUSH
62569: LD_VAR 0 4
62573: ARRAY
62574: PUSH
62575: LD_INT 2
62577: ARRAY
62578: PPUSH
62579: CALL_OW 428
62583: PUSH
62584: LD_INT 0
62586: NONEQUAL
62587: OR
62588: IFFALSE 62610
// tmp := Delete ( tmp , i ) ;
62590: LD_ADDR_VAR 0 6
62594: PUSH
62595: LD_VAR 0 6
62599: PPUSH
62600: LD_VAR 0 4
62604: PPUSH
62605: CALL_OW 3
62609: ST_TO_ADDR
62610: GO 62508
62612: POP
62613: POP
// j := GetClosestHex ( unit , tmp ) ;
62614: LD_ADDR_VAR 0 5
62618: PUSH
62619: LD_VAR 0 1
62623: PPUSH
62624: LD_VAR 0 6
62628: PPUSH
62629: CALL 61906 0 2
62633: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62634: LD_VAR 0 1
62638: PPUSH
62639: LD_VAR 0 5
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: PPUSH
62648: LD_VAR 0 5
62652: PUSH
62653: LD_INT 2
62655: ARRAY
62656: PPUSH
62657: CALL_OW 111
// result := j ;
62661: LD_ADDR_VAR 0 3
62665: PUSH
62666: LD_VAR 0 5
62670: ST_TO_ADDR
// end ;
62671: LD_VAR 0 3
62675: RET
// export function PrepareApemanSoldier ( ) ; begin
62676: LD_INT 0
62678: PPUSH
// uc_nation := 0 ;
62679: LD_ADDR_OWVAR 21
62683: PUSH
62684: LD_INT 0
62686: ST_TO_ADDR
// hc_sex := sex_male ;
62687: LD_ADDR_OWVAR 27
62691: PUSH
62692: LD_INT 1
62694: ST_TO_ADDR
// hc_name :=  ;
62695: LD_ADDR_OWVAR 26
62699: PUSH
62700: LD_STRING 
62702: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62703: LD_ADDR_OWVAR 28
62707: PUSH
62708: LD_INT 15
62710: ST_TO_ADDR
// hc_gallery :=  ;
62711: LD_ADDR_OWVAR 33
62715: PUSH
62716: LD_STRING 
62718: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62719: LD_ADDR_OWVAR 31
62723: PUSH
62724: LD_INT 0
62726: PPUSH
62727: LD_INT 3
62729: PPUSH
62730: CALL_OW 12
62734: PUSH
62735: LD_INT 0
62737: PPUSH
62738: LD_INT 3
62740: PPUSH
62741: CALL_OW 12
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62758: LD_ADDR_OWVAR 29
62762: PUSH
62763: LD_INT 10
62765: PUSH
62766: LD_INT 12
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// end ;
62773: LD_VAR 0 1
62777: RET
// export function PrepareApemanEngineer ( ) ; begin
62778: LD_INT 0
62780: PPUSH
// uc_nation := 0 ;
62781: LD_ADDR_OWVAR 21
62785: PUSH
62786: LD_INT 0
62788: ST_TO_ADDR
// hc_sex := sex_male ;
62789: LD_ADDR_OWVAR 27
62793: PUSH
62794: LD_INT 1
62796: ST_TO_ADDR
// hc_name :=  ;
62797: LD_ADDR_OWVAR 26
62801: PUSH
62802: LD_STRING 
62804: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62805: LD_ADDR_OWVAR 28
62809: PUSH
62810: LD_INT 16
62812: ST_TO_ADDR
// hc_gallery :=  ;
62813: LD_ADDR_OWVAR 33
62817: PUSH
62818: LD_STRING 
62820: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62821: LD_ADDR_OWVAR 31
62825: PUSH
62826: LD_INT 0
62828: PPUSH
62829: LD_INT 3
62831: PPUSH
62832: CALL_OW 12
62836: PUSH
62837: LD_INT 0
62839: PPUSH
62840: LD_INT 3
62842: PPUSH
62843: CALL_OW 12
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62860: LD_ADDR_OWVAR 29
62864: PUSH
62865: LD_INT 10
62867: PUSH
62868: LD_INT 12
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// end ;
62875: LD_VAR 0 1
62879: RET
// export function PrepareApeman ( agressivity ) ; begin
62880: LD_INT 0
62882: PPUSH
// uc_side := 0 ;
62883: LD_ADDR_OWVAR 20
62887: PUSH
62888: LD_INT 0
62890: ST_TO_ADDR
// uc_nation := 0 ;
62891: LD_ADDR_OWVAR 21
62895: PUSH
62896: LD_INT 0
62898: ST_TO_ADDR
// hc_sex := sex_male ;
62899: LD_ADDR_OWVAR 27
62903: PUSH
62904: LD_INT 1
62906: ST_TO_ADDR
// hc_class := class_apeman ;
62907: LD_ADDR_OWVAR 28
62911: PUSH
62912: LD_INT 12
62914: ST_TO_ADDR
// hc_gallery :=  ;
62915: LD_ADDR_OWVAR 33
62919: PUSH
62920: LD_STRING 
62922: ST_TO_ADDR
// hc_name :=  ;
62923: LD_ADDR_OWVAR 26
62927: PUSH
62928: LD_STRING 
62930: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62931: LD_ADDR_OWVAR 29
62935: PUSH
62936: LD_INT 10
62938: PUSH
62939: LD_INT 12
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// if agressivity = 0 then
62946: LD_VAR 0 1
62950: PUSH
62951: LD_INT 0
62953: EQUAL
62954: IFFALSE 62966
// hc_agressivity := 0 else
62956: LD_ADDR_OWVAR 35
62960: PUSH
62961: LD_INT 0
62963: ST_TO_ADDR
62964: GO 62987
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62966: LD_ADDR_OWVAR 35
62970: PUSH
62971: LD_VAR 0 1
62975: NEG
62976: PPUSH
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 12
62986: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62987: LD_ADDR_OWVAR 31
62991: PUSH
62992: LD_INT 0
62994: PPUSH
62995: LD_INT 3
62997: PPUSH
62998: CALL_OW 12
63002: PUSH
63003: LD_INT 0
63005: PPUSH
63006: LD_INT 3
63008: PPUSH
63009: CALL_OW 12
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// end ;
63026: LD_VAR 0 2
63030: RET
// export function PrepareTiger ( agressivity ) ; begin
63031: LD_INT 0
63033: PPUSH
// uc_side := 0 ;
63034: LD_ADDR_OWVAR 20
63038: PUSH
63039: LD_INT 0
63041: ST_TO_ADDR
// uc_nation := 0 ;
63042: LD_ADDR_OWVAR 21
63046: PUSH
63047: LD_INT 0
63049: ST_TO_ADDR
// InitHc ;
63050: CALL_OW 19
// hc_class := class_tiger ;
63054: LD_ADDR_OWVAR 28
63058: PUSH
63059: LD_INT 14
63061: ST_TO_ADDR
// hc_gallery :=  ;
63062: LD_ADDR_OWVAR 33
63066: PUSH
63067: LD_STRING 
63069: ST_TO_ADDR
// hc_name :=  ;
63070: LD_ADDR_OWVAR 26
63074: PUSH
63075: LD_STRING 
63077: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63078: LD_ADDR_OWVAR 35
63082: PUSH
63083: LD_VAR 0 1
63087: NEG
63088: PPUSH
63089: LD_VAR 0 1
63093: PPUSH
63094: CALL_OW 12
63098: ST_TO_ADDR
// end ;
63099: LD_VAR 0 2
63103: RET
// export function PrepareEnchidna ( ) ; begin
63104: LD_INT 0
63106: PPUSH
// uc_side := 0 ;
63107: LD_ADDR_OWVAR 20
63111: PUSH
63112: LD_INT 0
63114: ST_TO_ADDR
// uc_nation := 0 ;
63115: LD_ADDR_OWVAR 21
63119: PUSH
63120: LD_INT 0
63122: ST_TO_ADDR
// InitHc ;
63123: CALL_OW 19
// hc_class := class_baggie ;
63127: LD_ADDR_OWVAR 28
63131: PUSH
63132: LD_INT 13
63134: ST_TO_ADDR
// hc_gallery :=  ;
63135: LD_ADDR_OWVAR 33
63139: PUSH
63140: LD_STRING 
63142: ST_TO_ADDR
// hc_name :=  ;
63143: LD_ADDR_OWVAR 26
63147: PUSH
63148: LD_STRING 
63150: ST_TO_ADDR
// end ;
63151: LD_VAR 0 1
63155: RET
// export function PrepareFrog ( ) ; begin
63156: LD_INT 0
63158: PPUSH
// uc_side := 0 ;
63159: LD_ADDR_OWVAR 20
63163: PUSH
63164: LD_INT 0
63166: ST_TO_ADDR
// uc_nation := 0 ;
63167: LD_ADDR_OWVAR 21
63171: PUSH
63172: LD_INT 0
63174: ST_TO_ADDR
// InitHc ;
63175: CALL_OW 19
// hc_class := class_frog ;
63179: LD_ADDR_OWVAR 28
63183: PUSH
63184: LD_INT 19
63186: ST_TO_ADDR
// hc_gallery :=  ;
63187: LD_ADDR_OWVAR 33
63191: PUSH
63192: LD_STRING 
63194: ST_TO_ADDR
// hc_name :=  ;
63195: LD_ADDR_OWVAR 26
63199: PUSH
63200: LD_STRING 
63202: ST_TO_ADDR
// end ;
63203: LD_VAR 0 1
63207: RET
// export function PrepareFish ( ) ; begin
63208: LD_INT 0
63210: PPUSH
// uc_side := 0 ;
63211: LD_ADDR_OWVAR 20
63215: PUSH
63216: LD_INT 0
63218: ST_TO_ADDR
// uc_nation := 0 ;
63219: LD_ADDR_OWVAR 21
63223: PUSH
63224: LD_INT 0
63226: ST_TO_ADDR
// InitHc ;
63227: CALL_OW 19
// hc_class := class_fish ;
63231: LD_ADDR_OWVAR 28
63235: PUSH
63236: LD_INT 20
63238: ST_TO_ADDR
// hc_gallery :=  ;
63239: LD_ADDR_OWVAR 33
63243: PUSH
63244: LD_STRING 
63246: ST_TO_ADDR
// hc_name :=  ;
63247: LD_ADDR_OWVAR 26
63251: PUSH
63252: LD_STRING 
63254: ST_TO_ADDR
// end ;
63255: LD_VAR 0 1
63259: RET
// export function PrepareBird ( ) ; begin
63260: LD_INT 0
63262: PPUSH
// uc_side := 0 ;
63263: LD_ADDR_OWVAR 20
63267: PUSH
63268: LD_INT 0
63270: ST_TO_ADDR
// uc_nation := 0 ;
63271: LD_ADDR_OWVAR 21
63275: PUSH
63276: LD_INT 0
63278: ST_TO_ADDR
// InitHc ;
63279: CALL_OW 19
// hc_class := class_phororhacos ;
63283: LD_ADDR_OWVAR 28
63287: PUSH
63288: LD_INT 18
63290: ST_TO_ADDR
// hc_gallery :=  ;
63291: LD_ADDR_OWVAR 33
63295: PUSH
63296: LD_STRING 
63298: ST_TO_ADDR
// hc_name :=  ;
63299: LD_ADDR_OWVAR 26
63303: PUSH
63304: LD_STRING 
63306: ST_TO_ADDR
// end ;
63307: LD_VAR 0 1
63311: RET
// export function PrepareHorse ( ) ; begin
63312: LD_INT 0
63314: PPUSH
// uc_side := 0 ;
63315: LD_ADDR_OWVAR 20
63319: PUSH
63320: LD_INT 0
63322: ST_TO_ADDR
// uc_nation := 0 ;
63323: LD_ADDR_OWVAR 21
63327: PUSH
63328: LD_INT 0
63330: ST_TO_ADDR
// InitHc ;
63331: CALL_OW 19
// hc_class := class_horse ;
63335: LD_ADDR_OWVAR 28
63339: PUSH
63340: LD_INT 21
63342: ST_TO_ADDR
// hc_gallery :=  ;
63343: LD_ADDR_OWVAR 33
63347: PUSH
63348: LD_STRING 
63350: ST_TO_ADDR
// hc_name :=  ;
63351: LD_ADDR_OWVAR 26
63355: PUSH
63356: LD_STRING 
63358: ST_TO_ADDR
// end ;
63359: LD_VAR 0 1
63363: RET
// export function PrepareMastodont ( ) ; begin
63364: LD_INT 0
63366: PPUSH
// uc_side := 0 ;
63367: LD_ADDR_OWVAR 20
63371: PUSH
63372: LD_INT 0
63374: ST_TO_ADDR
// uc_nation := 0 ;
63375: LD_ADDR_OWVAR 21
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63383: LD_ADDR_OWVAR 37
63387: PUSH
63388: LD_INT 31
63390: ST_TO_ADDR
// vc_control := control_rider ;
63391: LD_ADDR_OWVAR 38
63395: PUSH
63396: LD_INT 4
63398: ST_TO_ADDR
// end ;
63399: LD_VAR 0 1
63403: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63404: LD_INT 0
63406: PPUSH
63407: PPUSH
63408: PPUSH
// uc_side = 0 ;
63409: LD_ADDR_OWVAR 20
63413: PUSH
63414: LD_INT 0
63416: ST_TO_ADDR
// uc_nation = 0 ;
63417: LD_ADDR_OWVAR 21
63421: PUSH
63422: LD_INT 0
63424: ST_TO_ADDR
// InitHc_All ( ) ;
63425: CALL_OW 584
// InitVc ;
63429: CALL_OW 20
// if mastodonts then
63433: LD_VAR 0 6
63437: IFFALSE 63504
// for i = 1 to mastodonts do
63439: LD_ADDR_VAR 0 11
63443: PUSH
63444: DOUBLE
63445: LD_INT 1
63447: DEC
63448: ST_TO_ADDR
63449: LD_VAR 0 6
63453: PUSH
63454: FOR_TO
63455: IFFALSE 63502
// begin vc_chassis := 31 ;
63457: LD_ADDR_OWVAR 37
63461: PUSH
63462: LD_INT 31
63464: ST_TO_ADDR
// vc_control := control_rider ;
63465: LD_ADDR_OWVAR 38
63469: PUSH
63470: LD_INT 4
63472: ST_TO_ADDR
// animal := CreateVehicle ;
63473: LD_ADDR_VAR 0 12
63477: PUSH
63478: CALL_OW 45
63482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63483: LD_VAR 0 12
63487: PPUSH
63488: LD_VAR 0 8
63492: PPUSH
63493: LD_INT 0
63495: PPUSH
63496: CALL 65646 0 3
// end ;
63500: GO 63454
63502: POP
63503: POP
// if horses then
63504: LD_VAR 0 5
63508: IFFALSE 63575
// for i = 1 to horses do
63510: LD_ADDR_VAR 0 11
63514: PUSH
63515: DOUBLE
63516: LD_INT 1
63518: DEC
63519: ST_TO_ADDR
63520: LD_VAR 0 5
63524: PUSH
63525: FOR_TO
63526: IFFALSE 63573
// begin hc_class := 21 ;
63528: LD_ADDR_OWVAR 28
63532: PUSH
63533: LD_INT 21
63535: ST_TO_ADDR
// hc_gallery :=  ;
63536: LD_ADDR_OWVAR 33
63540: PUSH
63541: LD_STRING 
63543: ST_TO_ADDR
// animal := CreateHuman ;
63544: LD_ADDR_VAR 0 12
63548: PUSH
63549: CALL_OW 44
63553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63554: LD_VAR 0 12
63558: PPUSH
63559: LD_VAR 0 8
63563: PPUSH
63564: LD_INT 0
63566: PPUSH
63567: CALL 65646 0 3
// end ;
63571: GO 63525
63573: POP
63574: POP
// if birds then
63575: LD_VAR 0 1
63579: IFFALSE 63646
// for i = 1 to birds do
63581: LD_ADDR_VAR 0 11
63585: PUSH
63586: DOUBLE
63587: LD_INT 1
63589: DEC
63590: ST_TO_ADDR
63591: LD_VAR 0 1
63595: PUSH
63596: FOR_TO
63597: IFFALSE 63644
// begin hc_class := 18 ;
63599: LD_ADDR_OWVAR 28
63603: PUSH
63604: LD_INT 18
63606: ST_TO_ADDR
// hc_gallery =  ;
63607: LD_ADDR_OWVAR 33
63611: PUSH
63612: LD_STRING 
63614: ST_TO_ADDR
// animal := CreateHuman ;
63615: LD_ADDR_VAR 0 12
63619: PUSH
63620: CALL_OW 44
63624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63625: LD_VAR 0 12
63629: PPUSH
63630: LD_VAR 0 8
63634: PPUSH
63635: LD_INT 0
63637: PPUSH
63638: CALL 65646 0 3
// end ;
63642: GO 63596
63644: POP
63645: POP
// if tigers then
63646: LD_VAR 0 2
63650: IFFALSE 63734
// for i = 1 to tigers do
63652: LD_ADDR_VAR 0 11
63656: PUSH
63657: DOUBLE
63658: LD_INT 1
63660: DEC
63661: ST_TO_ADDR
63662: LD_VAR 0 2
63666: PUSH
63667: FOR_TO
63668: IFFALSE 63732
// begin hc_class = class_tiger ;
63670: LD_ADDR_OWVAR 28
63674: PUSH
63675: LD_INT 14
63677: ST_TO_ADDR
// hc_gallery =  ;
63678: LD_ADDR_OWVAR 33
63682: PUSH
63683: LD_STRING 
63685: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63686: LD_ADDR_OWVAR 35
63690: PUSH
63691: LD_INT 7
63693: NEG
63694: PPUSH
63695: LD_INT 7
63697: PPUSH
63698: CALL_OW 12
63702: ST_TO_ADDR
// animal := CreateHuman ;
63703: LD_ADDR_VAR 0 12
63707: PUSH
63708: CALL_OW 44
63712: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63713: LD_VAR 0 12
63717: PPUSH
63718: LD_VAR 0 8
63722: PPUSH
63723: LD_INT 0
63725: PPUSH
63726: CALL 65646 0 3
// end ;
63730: GO 63667
63732: POP
63733: POP
// if apemans then
63734: LD_VAR 0 3
63738: IFFALSE 63861
// for i = 1 to apemans do
63740: LD_ADDR_VAR 0 11
63744: PUSH
63745: DOUBLE
63746: LD_INT 1
63748: DEC
63749: ST_TO_ADDR
63750: LD_VAR 0 3
63754: PUSH
63755: FOR_TO
63756: IFFALSE 63859
// begin hc_class = class_apeman ;
63758: LD_ADDR_OWVAR 28
63762: PUSH
63763: LD_INT 12
63765: ST_TO_ADDR
// hc_gallery =  ;
63766: LD_ADDR_OWVAR 33
63770: PUSH
63771: LD_STRING 
63773: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63774: LD_ADDR_OWVAR 35
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PPUSH
63783: LD_INT 2
63785: PPUSH
63786: CALL_OW 12
63790: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63791: LD_ADDR_OWVAR 31
63795: PUSH
63796: LD_INT 1
63798: PPUSH
63799: LD_INT 3
63801: PPUSH
63802: CALL_OW 12
63806: PUSH
63807: LD_INT 1
63809: PPUSH
63810: LD_INT 3
63812: PPUSH
63813: CALL_OW 12
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: ST_TO_ADDR
// animal := CreateHuman ;
63830: LD_ADDR_VAR 0 12
63834: PUSH
63835: CALL_OW 44
63839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63840: LD_VAR 0 12
63844: PPUSH
63845: LD_VAR 0 8
63849: PPUSH
63850: LD_INT 0
63852: PPUSH
63853: CALL 65646 0 3
// end ;
63857: GO 63755
63859: POP
63860: POP
// if enchidnas then
63861: LD_VAR 0 4
63865: IFFALSE 63932
// for i = 1 to enchidnas do
63867: LD_ADDR_VAR 0 11
63871: PUSH
63872: DOUBLE
63873: LD_INT 1
63875: DEC
63876: ST_TO_ADDR
63877: LD_VAR 0 4
63881: PUSH
63882: FOR_TO
63883: IFFALSE 63930
// begin hc_class = 13 ;
63885: LD_ADDR_OWVAR 28
63889: PUSH
63890: LD_INT 13
63892: ST_TO_ADDR
// hc_gallery =  ;
63893: LD_ADDR_OWVAR 33
63897: PUSH
63898: LD_STRING 
63900: ST_TO_ADDR
// animal := CreateHuman ;
63901: LD_ADDR_VAR 0 12
63905: PUSH
63906: CALL_OW 44
63910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63911: LD_VAR 0 12
63915: PPUSH
63916: LD_VAR 0 8
63920: PPUSH
63921: LD_INT 0
63923: PPUSH
63924: CALL 65646 0 3
// end ;
63928: GO 63882
63930: POP
63931: POP
// if fishes then
63932: LD_VAR 0 7
63936: IFFALSE 64003
// for i = 1 to fishes do
63938: LD_ADDR_VAR 0 11
63942: PUSH
63943: DOUBLE
63944: LD_INT 1
63946: DEC
63947: ST_TO_ADDR
63948: LD_VAR 0 7
63952: PUSH
63953: FOR_TO
63954: IFFALSE 64001
// begin hc_class = 20 ;
63956: LD_ADDR_OWVAR 28
63960: PUSH
63961: LD_INT 20
63963: ST_TO_ADDR
// hc_gallery =  ;
63964: LD_ADDR_OWVAR 33
63968: PUSH
63969: LD_STRING 
63971: ST_TO_ADDR
// animal := CreateHuman ;
63972: LD_ADDR_VAR 0 12
63976: PUSH
63977: CALL_OW 44
63981: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63982: LD_VAR 0 12
63986: PPUSH
63987: LD_VAR 0 9
63991: PPUSH
63992: LD_INT 0
63994: PPUSH
63995: CALL 65646 0 3
// end ;
63999: GO 63953
64001: POP
64002: POP
// end ;
64003: LD_VAR 0 10
64007: RET
// export function WantHeal ( sci , unit ) ; begin
64008: LD_INT 0
64010: PPUSH
// if GetTaskList ( sci ) > 0 then
64011: LD_VAR 0 1
64015: PPUSH
64016: CALL_OW 437
64020: PUSH
64021: LD_INT 0
64023: GREATER
64024: IFFALSE 64096
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64026: LD_VAR 0 1
64030: PPUSH
64031: CALL_OW 437
64035: PUSH
64036: LD_INT 1
64038: ARRAY
64039: PUSH
64040: LD_INT 1
64042: ARRAY
64043: PUSH
64044: LD_STRING l
64046: EQUAL
64047: IFFALSE 64074
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 437
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 4
64066: ARRAY
64067: PUSH
64068: LD_VAR 0 2
64072: EQUAL
64073: AND
64074: IFFALSE 64086
// result := true else
64076: LD_ADDR_VAR 0 3
64080: PUSH
64081: LD_INT 1
64083: ST_TO_ADDR
64084: GO 64094
// result := false ;
64086: LD_ADDR_VAR 0 3
64090: PUSH
64091: LD_INT 0
64093: ST_TO_ADDR
// end else
64094: GO 64104
// result := false ;
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: LD_INT 0
64103: ST_TO_ADDR
// end ;
64104: LD_VAR 0 3
64108: RET
// export function HealTarget ( sci ) ; begin
64109: LD_INT 0
64111: PPUSH
// if not sci then
64112: LD_VAR 0 1
64116: NOT
64117: IFFALSE 64121
// exit ;
64119: GO 64186
// result := 0 ;
64121: LD_ADDR_VAR 0 2
64125: PUSH
64126: LD_INT 0
64128: ST_TO_ADDR
// if GetTaskList ( sci ) then
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 437
64138: IFFALSE 64186
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 437
64149: PUSH
64150: LD_INT 1
64152: ARRAY
64153: PUSH
64154: LD_INT 1
64156: ARRAY
64157: PUSH
64158: LD_STRING l
64160: EQUAL
64161: IFFALSE 64186
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64163: LD_ADDR_VAR 0 2
64167: PUSH
64168: LD_VAR 0 1
64172: PPUSH
64173: CALL_OW 437
64177: PUSH
64178: LD_INT 1
64180: ARRAY
64181: PUSH
64182: LD_INT 4
64184: ARRAY
64185: ST_TO_ADDR
// end ;
64186: LD_VAR 0 2
64190: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64191: LD_INT 0
64193: PPUSH
64194: PPUSH
64195: PPUSH
64196: PPUSH
// if not base_units then
64197: LD_VAR 0 1
64201: NOT
64202: IFFALSE 64206
// exit ;
64204: GO 64293
// result := false ;
64206: LD_ADDR_VAR 0 2
64210: PUSH
64211: LD_INT 0
64213: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64214: LD_ADDR_VAR 0 5
64218: PUSH
64219: LD_VAR 0 1
64223: PPUSH
64224: LD_INT 21
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PPUSH
64234: CALL_OW 72
64238: ST_TO_ADDR
// if not tmp then
64239: LD_VAR 0 5
64243: NOT
64244: IFFALSE 64248
// exit ;
64246: GO 64293
// for i in tmp do
64248: LD_ADDR_VAR 0 3
64252: PUSH
64253: LD_VAR 0 5
64257: PUSH
64258: FOR_IN
64259: IFFALSE 64291
// begin result := EnemyInRange ( i , 22 ) ;
64261: LD_ADDR_VAR 0 2
64265: PUSH
64266: LD_VAR 0 3
64270: PPUSH
64271: LD_INT 22
64273: PPUSH
64274: CALL 61708 0 2
64278: ST_TO_ADDR
// if result then
64279: LD_VAR 0 2
64283: IFFALSE 64289
// exit ;
64285: POP
64286: POP
64287: GO 64293
// end ;
64289: GO 64258
64291: POP
64292: POP
// end ;
64293: LD_VAR 0 2
64297: RET
// export function FilterByTag ( units , tag ) ; begin
64298: LD_INT 0
64300: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64301: LD_ADDR_VAR 0 3
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_INT 120
64313: PUSH
64314: LD_VAR 0 2
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PPUSH
64323: CALL_OW 72
64327: ST_TO_ADDR
// end ;
64328: LD_VAR 0 3
64332: RET
// export function IsDriver ( un ) ; begin
64333: LD_INT 0
64335: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_VAR 0 1
64345: PUSH
64346: LD_INT 55
64348: PUSH
64349: EMPTY
64350: LIST
64351: PPUSH
64352: CALL_OW 69
64356: IN
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 2
64362: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64363: LD_INT 0
64365: PPUSH
64366: PPUSH
// list := [ ] ;
64367: LD_ADDR_VAR 0 5
64371: PUSH
64372: EMPTY
64373: ST_TO_ADDR
// case d of 0 :
64374: LD_VAR 0 3
64378: PUSH
64379: LD_INT 0
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64387
64385: GO 64520
64387: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64388: LD_ADDR_VAR 0 5
64392: PUSH
64393: LD_VAR 0 1
64397: PUSH
64398: LD_INT 4
64400: MINUS
64401: PUSH
64402: LD_VAR 0 2
64406: PUSH
64407: LD_INT 4
64409: MINUS
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 3
64426: MINUS
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: LD_INT 4
64448: PLUS
64449: PUSH
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 4
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: PUSH
64463: LD_VAR 0 1
64467: PUSH
64468: LD_INT 3
64470: PLUS
64471: PUSH
64472: LD_VAR 0 2
64476: PUSH
64477: LD_INT 3
64479: PLUS
64480: PUSH
64481: LD_INT 5
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: PUSH
64489: LD_VAR 0 1
64493: PUSH
64494: LD_VAR 0 2
64498: PUSH
64499: LD_INT 4
64501: PLUS
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: ST_TO_ADDR
// end ; 1 :
64518: GO 65218
64520: LD_INT 1
64522: DOUBLE
64523: EQUAL
64524: IFTRUE 64528
64526: GO 64661
64528: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64529: LD_ADDR_VAR 0 5
64533: PUSH
64534: LD_VAR 0 1
64538: PUSH
64539: LD_VAR 0 2
64543: PUSH
64544: LD_INT 4
64546: MINUS
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: PUSH
64556: LD_VAR 0 1
64560: PUSH
64561: LD_INT 3
64563: MINUS
64564: PUSH
64565: LD_VAR 0 2
64569: PUSH
64570: LD_INT 3
64572: MINUS
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_INT 4
64589: MINUS
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: LIST
64603: PUSH
64604: LD_VAR 0 1
64608: PUSH
64609: LD_VAR 0 2
64613: PUSH
64614: LD_INT 3
64616: PLUS
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: PUSH
64626: LD_VAR 0 1
64630: PUSH
64631: LD_INT 4
64633: PLUS
64634: PUSH
64635: LD_VAR 0 2
64639: PUSH
64640: LD_INT 4
64642: PLUS
64643: PUSH
64644: LD_INT 5
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// end ; 2 :
64659: GO 65218
64661: LD_INT 2
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64669
64667: GO 64798
64669: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64670: LD_ADDR_VAR 0 5
64674: PUSH
64675: LD_VAR 0 1
64679: PUSH
64680: LD_VAR 0 2
64684: PUSH
64685: LD_INT 3
64687: MINUS
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: PUSH
64697: LD_VAR 0 1
64701: PUSH
64702: LD_INT 4
64704: PLUS
64705: PUSH
64706: LD_VAR 0 2
64710: PUSH
64711: LD_INT 4
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: PUSH
64719: LD_VAR 0 1
64723: PUSH
64724: LD_VAR 0 2
64728: PUSH
64729: LD_INT 4
64731: PLUS
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 3
64748: MINUS
64749: PUSH
64750: LD_VAR 0 2
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: PUSH
64763: LD_VAR 0 1
64767: PUSH
64768: LD_INT 4
64770: MINUS
64771: PUSH
64772: LD_VAR 0 2
64776: PUSH
64777: LD_INT 4
64779: MINUS
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: LIST
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: ST_TO_ADDR
// end ; 3 :
64796: GO 65218
64798: LD_INT 3
64800: DOUBLE
64801: EQUAL
64802: IFTRUE 64806
64804: GO 64939
64806: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64807: LD_ADDR_VAR 0 5
64811: PUSH
64812: LD_VAR 0 1
64816: PUSH
64817: LD_INT 3
64819: PLUS
64820: PUSH
64821: LD_VAR 0 2
64825: PUSH
64826: LD_INT 4
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: LIST
64833: PUSH
64834: LD_VAR 0 1
64838: PUSH
64839: LD_INT 4
64841: PLUS
64842: PUSH
64843: LD_VAR 0 2
64847: PUSH
64848: LD_INT 4
64850: PLUS
64851: PUSH
64852: LD_INT 5
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: PUSH
64860: LD_VAR 0 1
64864: PUSH
64865: LD_INT 4
64867: MINUS
64868: PUSH
64869: LD_VAR 0 2
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: PUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_VAR 0 2
64891: PUSH
64892: LD_INT 4
64894: MINUS
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: PUSH
64904: LD_VAR 0 1
64908: PUSH
64909: LD_INT 3
64911: MINUS
64912: PUSH
64913: LD_VAR 0 2
64917: PUSH
64918: LD_INT 3
64920: MINUS
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// end ; 4 :
64937: GO 65218
64939: LD_INT 4
64941: DOUBLE
64942: EQUAL
64943: IFTRUE 64947
64945: GO 65080
64947: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64948: LD_ADDR_VAR 0 5
64952: PUSH
64953: LD_VAR 0 1
64957: PUSH
64958: LD_VAR 0 2
64962: PUSH
64963: LD_INT 4
64965: PLUS
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: PUSH
64975: LD_VAR 0 1
64979: PUSH
64980: LD_INT 3
64982: PLUS
64983: PUSH
64984: LD_VAR 0 2
64988: PUSH
64989: LD_INT 3
64991: PLUS
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: PUSH
65001: LD_VAR 0 1
65005: PUSH
65006: LD_INT 4
65008: PLUS
65009: PUSH
65010: LD_VAR 0 2
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: PUSH
65023: LD_VAR 0 1
65027: PUSH
65028: LD_VAR 0 2
65032: PUSH
65033: LD_INT 3
65035: MINUS
65036: PUSH
65037: LD_INT 3
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: PUSH
65045: LD_VAR 0 1
65049: PUSH
65050: LD_INT 4
65052: MINUS
65053: PUSH
65054: LD_VAR 0 2
65058: PUSH
65059: LD_INT 4
65061: MINUS
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// end ; 5 :
65078: GO 65218
65080: LD_INT 5
65082: DOUBLE
65083: EQUAL
65084: IFTRUE 65088
65086: GO 65217
65088: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65089: LD_ADDR_VAR 0 5
65093: PUSH
65094: LD_VAR 0 1
65098: PUSH
65099: LD_INT 4
65101: MINUS
65102: PUSH
65103: LD_VAR 0 2
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: PUSH
65116: LD_VAR 0 1
65120: PUSH
65121: LD_VAR 0 2
65125: PUSH
65126: LD_INT 4
65128: MINUS
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: PUSH
65138: LD_VAR 0 1
65142: PUSH
65143: LD_INT 4
65145: PLUS
65146: PUSH
65147: LD_VAR 0 2
65151: PUSH
65152: LD_INT 4
65154: PLUS
65155: PUSH
65156: LD_INT 5
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_INT 3
65171: PLUS
65172: PUSH
65173: LD_VAR 0 2
65177: PUSH
65178: LD_INT 4
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: PUSH
65186: LD_VAR 0 1
65190: PUSH
65191: LD_VAR 0 2
65195: PUSH
65196: LD_INT 3
65198: PLUS
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: ST_TO_ADDR
// end ; end ;
65215: GO 65218
65217: POP
// result := list ;
65218: LD_ADDR_VAR 0 4
65222: PUSH
65223: LD_VAR 0 5
65227: ST_TO_ADDR
// end ;
65228: LD_VAR 0 4
65232: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65233: LD_INT 0
65235: PPUSH
65236: PPUSH
65237: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65238: LD_VAR 0 1
65242: NOT
65243: IFTRUE 65271
65245: PUSH
65246: LD_VAR 0 2
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 4
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: IN
65269: NOT
65270: OR
65271: IFFALSE 65275
// exit ;
65273: GO 65358
// tmp := [ ] ;
65275: LD_ADDR_VAR 0 5
65279: PUSH
65280: EMPTY
65281: ST_TO_ADDR
// for i in units do
65282: LD_ADDR_VAR 0 4
65286: PUSH
65287: LD_VAR 0 1
65291: PUSH
65292: FOR_IN
65293: IFFALSE 65327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65295: LD_ADDR_VAR 0 5
65299: PUSH
65300: LD_VAR 0 5
65304: PPUSH
65305: LD_VAR 0 4
65309: PPUSH
65310: LD_VAR 0 2
65314: PPUSH
65315: CALL_OW 259
65319: PPUSH
65320: CALL 66753 0 2
65324: ST_TO_ADDR
65325: GO 65292
65327: POP
65328: POP
// if not tmp then
65329: LD_VAR 0 5
65333: NOT
65334: IFFALSE 65338
// exit ;
65336: GO 65358
// result := SortListByListDesc ( units , tmp ) ;
65338: LD_ADDR_VAR 0 3
65342: PUSH
65343: LD_VAR 0 1
65347: PPUSH
65348: LD_VAR 0 5
65352: PPUSH
65353: CALL_OW 77
65357: ST_TO_ADDR
// end ;
65358: LD_VAR 0 3
65362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65363: LD_INT 0
65365: PPUSH
65366: PPUSH
65367: PPUSH
// result := false ;
65368: LD_ADDR_VAR 0 3
65372: PUSH
65373: LD_INT 0
65375: ST_TO_ADDR
// if not building then
65376: LD_VAR 0 2
65380: NOT
65381: IFFALSE 65385
// exit ;
65383: GO 65529
// x := GetX ( building ) ;
65385: LD_ADDR_VAR 0 4
65389: PUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: CALL_OW 250
65399: ST_TO_ADDR
// y := GetY ( building ) ;
65400: LD_ADDR_VAR 0 5
65404: PUSH
65405: LD_VAR 0 2
65409: PPUSH
65410: CALL_OW 251
65414: ST_TO_ADDR
// if not x or not y then
65415: LD_VAR 0 4
65419: NOT
65420: IFTRUE 65429
65422: PUSH
65423: LD_VAR 0 5
65427: NOT
65428: OR
65429: IFFALSE 65433
// exit ;
65431: GO 65529
// if GetTaskList ( unit ) then
65433: LD_VAR 0 1
65437: PPUSH
65438: CALL_OW 437
65442: IFFALSE 65529
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65444: LD_STRING e
65446: PUSH
65447: LD_VAR 0 1
65451: PPUSH
65452: CALL_OW 437
65456: PUSH
65457: LD_INT 1
65459: ARRAY
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: EQUAL
65465: IFFALSE 65492
65467: PUSH
65468: LD_VAR 0 4
65472: PUSH
65473: LD_VAR 0 1
65477: PPUSH
65478: CALL_OW 437
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PUSH
65487: LD_INT 2
65489: ARRAY
65490: EQUAL
65491: AND
65492: IFFALSE 65519
65494: PUSH
65495: LD_VAR 0 5
65499: PUSH
65500: LD_VAR 0 1
65504: PPUSH
65505: CALL_OW 437
65509: PUSH
65510: LD_INT 1
65512: ARRAY
65513: PUSH
65514: LD_INT 3
65516: ARRAY
65517: EQUAL
65518: AND
65519: IFFALSE 65529
// result := true end ;
65521: LD_ADDR_VAR 0 3
65525: PUSH
65526: LD_INT 1
65528: ST_TO_ADDR
// end ;
65529: LD_VAR 0 3
65533: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65534: LD_INT 0
65536: PPUSH
// result := false ;
65537: LD_ADDR_VAR 0 4
65541: PUSH
65542: LD_INT 0
65544: ST_TO_ADDR
// if GetTaskList ( unit ) then
65545: LD_VAR 0 1
65549: PPUSH
65550: CALL_OW 437
65554: IFFALSE 65641
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65556: LD_STRING M
65558: PUSH
65559: LD_VAR 0 1
65563: PPUSH
65564: CALL_OW 437
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: PUSH
65573: LD_INT 1
65575: ARRAY
65576: EQUAL
65577: IFFALSE 65604
65579: PUSH
65580: LD_VAR 0 2
65584: PUSH
65585: LD_VAR 0 1
65589: PPUSH
65590: CALL_OW 437
65594: PUSH
65595: LD_INT 1
65597: ARRAY
65598: PUSH
65599: LD_INT 2
65601: ARRAY
65602: EQUAL
65603: AND
65604: IFFALSE 65631
65606: PUSH
65607: LD_VAR 0 3
65611: PUSH
65612: LD_VAR 0 1
65616: PPUSH
65617: CALL_OW 437
65621: PUSH
65622: LD_INT 1
65624: ARRAY
65625: PUSH
65626: LD_INT 3
65628: ARRAY
65629: EQUAL
65630: AND
65631: IFFALSE 65641
// result := true ;
65633: LD_ADDR_VAR 0 4
65637: PUSH
65638: LD_INT 1
65640: ST_TO_ADDR
// end ; end ;
65641: LD_VAR 0 4
65645: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65646: LD_INT 0
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
// if not unit or not area then
65652: LD_VAR 0 1
65656: NOT
65657: IFTRUE 65666
65659: PUSH
65660: LD_VAR 0 2
65664: NOT
65665: OR
65666: IFFALSE 65670
// exit ;
65668: GO 65846
// tmp := AreaToList ( area , i ) ;
65670: LD_ADDR_VAR 0 6
65674: PUSH
65675: LD_VAR 0 2
65679: PPUSH
65680: LD_VAR 0 5
65684: PPUSH
65685: CALL_OW 517
65689: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65690: LD_ADDR_VAR 0 5
65694: PUSH
65695: DOUBLE
65696: LD_INT 1
65698: DEC
65699: ST_TO_ADDR
65700: LD_VAR 0 6
65704: PUSH
65705: LD_INT 1
65707: ARRAY
65708: PUSH
65709: FOR_TO
65710: IFFALSE 65844
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65712: LD_ADDR_VAR 0 7
65716: PUSH
65717: LD_VAR 0 6
65721: PUSH
65722: LD_INT 1
65724: ARRAY
65725: PUSH
65726: LD_VAR 0 5
65730: ARRAY
65731: PUSH
65732: LD_VAR 0 6
65736: PUSH
65737: LD_INT 2
65739: ARRAY
65740: PUSH
65741: LD_VAR 0 5
65745: ARRAY
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65751: LD_INT 92
65753: PUSH
65754: LD_VAR 0 7
65758: PUSH
65759: LD_INT 1
65761: ARRAY
65762: PUSH
65763: LD_VAR 0 7
65767: PUSH
65768: LD_INT 2
65770: ARRAY
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: PPUSH
65781: CALL_OW 69
65785: PUSH
65786: LD_INT 0
65788: EQUAL
65789: IFFALSE 65842
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65791: LD_VAR 0 1
65795: PPUSH
65796: LD_VAR 0 7
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PPUSH
65805: LD_VAR 0 7
65809: PUSH
65810: LD_INT 2
65812: ARRAY
65813: PPUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: CALL_OW 48
// result := IsPlaced ( unit ) ;
65823: LD_ADDR_VAR 0 4
65827: PUSH
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 305
65837: ST_TO_ADDR
// exit ;
65838: POP
65839: POP
65840: GO 65846
// end ; end ;
65842: GO 65709
65844: POP
65845: POP
// end ;
65846: LD_VAR 0 4
65850: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65851: LD_INT 0
65853: PPUSH
65854: PPUSH
65855: PPUSH
// if not side or side > 8 then
65856: LD_VAR 0 1
65860: NOT
65861: IFTRUE 65873
65863: PUSH
65864: LD_VAR 0 1
65868: PUSH
65869: LD_INT 8
65871: GREATER
65872: OR
65873: IFFALSE 65877
// exit ;
65875: GO 66064
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65877: LD_ADDR_VAR 0 4
65881: PUSH
65882: LD_INT 22
65884: PUSH
65885: LD_VAR 0 1
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 21
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PPUSH
65908: CALL_OW 69
65912: ST_TO_ADDR
// if not tmp then
65913: LD_VAR 0 4
65917: NOT
65918: IFFALSE 65922
// exit ;
65920: GO 66064
// enable_addtolog := true ;
65922: LD_ADDR_OWVAR 81
65926: PUSH
65927: LD_INT 1
65929: ST_TO_ADDR
// AddToLog ( [ ) ;
65930: LD_STRING [
65932: PPUSH
65933: CALL_OW 561
// for i in tmp do
65937: LD_ADDR_VAR 0 3
65941: PUSH
65942: LD_VAR 0 4
65946: PUSH
65947: FOR_IN
65948: IFFALSE 66055
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65950: LD_STRING [
65952: PUSH
65953: LD_VAR 0 3
65957: PPUSH
65958: CALL_OW 266
65962: STR
65963: PUSH
65964: LD_STRING , 
65966: STR
65967: PUSH
65968: LD_VAR 0 3
65972: PPUSH
65973: CALL_OW 250
65977: STR
65978: PUSH
65979: LD_STRING , 
65981: STR
65982: PUSH
65983: LD_VAR 0 3
65987: PPUSH
65988: CALL_OW 251
65992: STR
65993: PUSH
65994: LD_STRING , 
65996: STR
65997: PUSH
65998: LD_VAR 0 3
66002: PPUSH
66003: CALL_OW 254
66007: STR
66008: PUSH
66009: LD_STRING , 
66011: STR
66012: PUSH
66013: LD_VAR 0 3
66017: PPUSH
66018: LD_INT 1
66020: PPUSH
66021: CALL_OW 268
66025: STR
66026: PUSH
66027: LD_STRING , 
66029: STR
66030: PUSH
66031: LD_VAR 0 3
66035: PPUSH
66036: LD_INT 2
66038: PPUSH
66039: CALL_OW 268
66043: STR
66044: PUSH
66045: LD_STRING ],
66047: STR
66048: PPUSH
66049: CALL_OW 561
// end ;
66053: GO 65947
66055: POP
66056: POP
// AddToLog ( ]; ) ;
66057: LD_STRING ];
66059: PPUSH
66060: CALL_OW 561
// end ;
66064: LD_VAR 0 2
66068: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66069: LD_INT 0
66071: PPUSH
66072: PPUSH
66073: PPUSH
66074: PPUSH
66075: PPUSH
// if not area or not rate or not max then
66076: LD_VAR 0 1
66080: NOT
66081: IFTRUE 66090
66083: PUSH
66084: LD_VAR 0 2
66088: NOT
66089: OR
66090: IFTRUE 66099
66092: PUSH
66093: LD_VAR 0 4
66097: NOT
66098: OR
66099: IFFALSE 66103
// exit ;
66101: GO 66292
// while 1 do
66103: LD_INT 1
66105: IFFALSE 66292
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66107: LD_ADDR_VAR 0 9
66111: PUSH
66112: LD_VAR 0 1
66116: PPUSH
66117: LD_INT 1
66119: PPUSH
66120: CALL_OW 287
66124: PUSH
66125: LD_INT 10
66127: MUL
66128: ST_TO_ADDR
// r := rate / 10 ;
66129: LD_ADDR_VAR 0 7
66133: PUSH
66134: LD_VAR 0 2
66138: PUSH
66139: LD_INT 10
66141: DIVREAL
66142: ST_TO_ADDR
// time := 1 1$00 ;
66143: LD_ADDR_VAR 0 8
66147: PUSH
66148: LD_INT 2100
66150: ST_TO_ADDR
// if amount < min then
66151: LD_VAR 0 9
66155: PUSH
66156: LD_VAR 0 3
66160: LESS
66161: IFFALSE 66179
// r := r * 2 else
66163: LD_ADDR_VAR 0 7
66167: PUSH
66168: LD_VAR 0 7
66172: PUSH
66173: LD_INT 2
66175: MUL
66176: ST_TO_ADDR
66177: GO 66205
// if amount > max then
66179: LD_VAR 0 9
66183: PUSH
66184: LD_VAR 0 4
66188: GREATER
66189: IFFALSE 66205
// r := r / 2 ;
66191: LD_ADDR_VAR 0 7
66195: PUSH
66196: LD_VAR 0 7
66200: PUSH
66201: LD_INT 2
66203: DIVREAL
66204: ST_TO_ADDR
// time := time / r ;
66205: LD_ADDR_VAR 0 8
66209: PUSH
66210: LD_VAR 0 8
66214: PUSH
66215: LD_VAR 0 7
66219: DIVREAL
66220: ST_TO_ADDR
// if time < 0 then
66221: LD_VAR 0 8
66225: PUSH
66226: LD_INT 0
66228: LESS
66229: IFFALSE 66246
// time := time * - 1 ;
66231: LD_ADDR_VAR 0 8
66235: PUSH
66236: LD_VAR 0 8
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: MUL
66245: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66246: LD_VAR 0 8
66250: PUSH
66251: LD_INT 35
66253: PPUSH
66254: LD_INT 875
66256: PPUSH
66257: CALL_OW 12
66261: PLUS
66262: PPUSH
66263: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66267: LD_INT 1
66269: PPUSH
66270: LD_INT 5
66272: PPUSH
66273: CALL_OW 12
66277: PPUSH
66278: LD_VAR 0 1
66282: PPUSH
66283: LD_INT 1
66285: PPUSH
66286: CALL_OW 55
// end ;
66290: GO 66103
// end ;
66292: LD_VAR 0 5
66296: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66297: LD_INT 0
66299: PPUSH
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
66304: PPUSH
66305: PPUSH
66306: PPUSH
// if not turrets or not factories then
66307: LD_VAR 0 1
66311: NOT
66312: IFTRUE 66321
66314: PUSH
66315: LD_VAR 0 2
66319: NOT
66320: OR
66321: IFFALSE 66325
// exit ;
66323: GO 66632
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66325: LD_ADDR_VAR 0 10
66329: PUSH
66330: LD_INT 5
66332: PUSH
66333: LD_INT 6
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: LD_INT 4
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: LD_INT 5
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 24
66367: PUSH
66368: LD_INT 25
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 23
66377: PUSH
66378: LD_INT 27
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 42
66391: PUSH
66392: LD_INT 43
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 44
66401: PUSH
66402: LD_INT 46
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 45
66411: PUSH
66412: LD_INT 47
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// result := [ ] ;
66429: LD_ADDR_VAR 0 3
66433: PUSH
66434: EMPTY
66435: ST_TO_ADDR
// for i in turrets do
66436: LD_ADDR_VAR 0 4
66440: PUSH
66441: LD_VAR 0 1
66445: PUSH
66446: FOR_IN
66447: IFFALSE 66630
// begin nat := GetNation ( i ) ;
66449: LD_ADDR_VAR 0 7
66453: PUSH
66454: LD_VAR 0 4
66458: PPUSH
66459: CALL_OW 248
66463: ST_TO_ADDR
// weapon := 0 ;
66464: LD_ADDR_VAR 0 8
66468: PUSH
66469: LD_INT 0
66471: ST_TO_ADDR
// if not nat then
66472: LD_VAR 0 7
66476: NOT
66477: IFFALSE 66481
// continue ;
66479: GO 66446
// for j in list [ nat ] do
66481: LD_ADDR_VAR 0 5
66485: PUSH
66486: LD_VAR 0 10
66490: PUSH
66491: LD_VAR 0 7
66495: ARRAY
66496: PUSH
66497: FOR_IN
66498: IFFALSE 66539
// if GetBWeapon ( i ) = j [ 1 ] then
66500: LD_VAR 0 4
66504: PPUSH
66505: CALL_OW 269
66509: PUSH
66510: LD_VAR 0 5
66514: PUSH
66515: LD_INT 1
66517: ARRAY
66518: EQUAL
66519: IFFALSE 66537
// begin weapon := j [ 2 ] ;
66521: LD_ADDR_VAR 0 8
66525: PUSH
66526: LD_VAR 0 5
66530: PUSH
66531: LD_INT 2
66533: ARRAY
66534: ST_TO_ADDR
// break ;
66535: GO 66539
// end ;
66537: GO 66497
66539: POP
66540: POP
// if not weapon then
66541: LD_VAR 0 8
66545: NOT
66546: IFFALSE 66550
// continue ;
66548: GO 66446
// for k in factories do
66550: LD_ADDR_VAR 0 6
66554: PUSH
66555: LD_VAR 0 2
66559: PUSH
66560: FOR_IN
66561: IFFALSE 66626
// begin weapons := AvailableWeaponList ( k ) ;
66563: LD_ADDR_VAR 0 9
66567: PUSH
66568: LD_VAR 0 6
66572: PPUSH
66573: CALL_OW 478
66577: ST_TO_ADDR
// if not weapons then
66578: LD_VAR 0 9
66582: NOT
66583: IFFALSE 66587
// continue ;
66585: GO 66560
// if weapon in weapons then
66587: LD_VAR 0 8
66591: PUSH
66592: LD_VAR 0 9
66596: IN
66597: IFFALSE 66624
// begin result := [ i , weapon ] ;
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 4
66608: PUSH
66609: LD_VAR 0 8
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// exit ;
66618: POP
66619: POP
66620: POP
66621: POP
66622: GO 66632
// end ; end ;
66624: GO 66560
66626: POP
66627: POP
// end ;
66628: GO 66446
66630: POP
66631: POP
// end ;
66632: LD_VAR 0 3
66636: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66637: LD_INT 0
66639: PPUSH
// if not side or side > 8 then
66640: LD_VAR 0 3
66644: NOT
66645: IFTRUE 66657
66647: PUSH
66648: LD_VAR 0 3
66652: PUSH
66653: LD_INT 8
66655: GREATER
66656: OR
66657: IFFALSE 66661
// exit ;
66659: GO 66720
// if not range then
66661: LD_VAR 0 4
66665: NOT
66666: IFFALSE 66677
// range := - 12 ;
66668: LD_ADDR_VAR 0 4
66672: PUSH
66673: LD_INT 12
66675: NEG
66676: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66677: LD_VAR 0 1
66681: PPUSH
66682: LD_VAR 0 2
66686: PPUSH
66687: LD_VAR 0 3
66691: PPUSH
66692: LD_VAR 0 4
66696: PPUSH
66697: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66701: LD_VAR 0 1
66705: PPUSH
66706: LD_VAR 0 2
66710: PPUSH
66711: LD_VAR 0 3
66715: PPUSH
66716: CALL_OW 331
// end ;
66720: LD_VAR 0 5
66724: RET
// export function Video ( mode ) ; begin
66725: LD_INT 0
66727: PPUSH
// ingame_video = mode ;
66728: LD_ADDR_OWVAR 52
66732: PUSH
66733: LD_VAR 0 1
66737: ST_TO_ADDR
// interface_hidden = mode ;
66738: LD_ADDR_OWVAR 54
66742: PUSH
66743: LD_VAR 0 1
66747: ST_TO_ADDR
// end ;
66748: LD_VAR 0 2
66752: RET
// export function Join ( array , element ) ; begin
66753: LD_INT 0
66755: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66756: LD_ADDR_VAR 0 3
66760: PUSH
66761: LD_VAR 0 1
66765: PPUSH
66766: LD_VAR 0 1
66770: PUSH
66771: LD_INT 1
66773: PLUS
66774: PPUSH
66775: LD_VAR 0 2
66779: PPUSH
66780: CALL_OW 1
66784: ST_TO_ADDR
// end ;
66785: LD_VAR 0 3
66789: RET
// export function JoinUnion ( array , element ) ; begin
66790: LD_INT 0
66792: PPUSH
// result := array union element ;
66793: LD_ADDR_VAR 0 3
66797: PUSH
66798: LD_VAR 0 1
66802: PUSH
66803: LD_VAR 0 2
66807: UNION
66808: ST_TO_ADDR
// end ;
66809: LD_VAR 0 3
66813: RET
// export function GetBehemoths ( side ) ; begin
66814: LD_INT 0
66816: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66817: LD_ADDR_VAR 0 2
66821: PUSH
66822: LD_INT 22
66824: PUSH
66825: LD_VAR 0 1
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 31
66836: PUSH
66837: LD_INT 25
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PPUSH
66848: CALL_OW 69
66852: ST_TO_ADDR
// end ;
66853: LD_VAR 0 2
66857: RET
// export function Shuffle ( array ) ; var i , index ; begin
66858: LD_INT 0
66860: PPUSH
66861: PPUSH
66862: PPUSH
// result := [ ] ;
66863: LD_ADDR_VAR 0 2
66867: PUSH
66868: EMPTY
66869: ST_TO_ADDR
// if not array then
66870: LD_VAR 0 1
66874: NOT
66875: IFFALSE 66879
// exit ;
66877: GO 66978
// Randomize ;
66879: CALL_OW 10
// for i = array downto 1 do
66883: LD_ADDR_VAR 0 3
66887: PUSH
66888: DOUBLE
66889: LD_VAR 0 1
66893: INC
66894: ST_TO_ADDR
66895: LD_INT 1
66897: PUSH
66898: FOR_DOWNTO
66899: IFFALSE 66976
// begin index := rand ( 1 , array ) ;
66901: LD_ADDR_VAR 0 4
66905: PUSH
66906: LD_INT 1
66908: PPUSH
66909: LD_VAR 0 1
66913: PPUSH
66914: CALL_OW 12
66918: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66919: LD_ADDR_VAR 0 2
66923: PUSH
66924: LD_VAR 0 2
66928: PPUSH
66929: LD_VAR 0 2
66933: PUSH
66934: LD_INT 1
66936: PLUS
66937: PPUSH
66938: LD_VAR 0 1
66942: PUSH
66943: LD_VAR 0 4
66947: ARRAY
66948: PPUSH
66949: CALL_OW 2
66953: ST_TO_ADDR
// array := Delete ( array , index ) ;
66954: LD_ADDR_VAR 0 1
66958: PUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: LD_VAR 0 4
66968: PPUSH
66969: CALL_OW 3
66973: ST_TO_ADDR
// end ;
66974: GO 66898
66976: POP
66977: POP
// end ;
66978: LD_VAR 0 2
66982: RET
// export function GetBaseMaterials ( base ) ; begin
66983: LD_INT 0
66985: PPUSH
// result := [ 0 , 0 , 0 ] ;
66986: LD_ADDR_VAR 0 2
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: ST_TO_ADDR
// if not base then
67005: LD_VAR 0 1
67009: NOT
67010: IFFALSE 67014
// exit ;
67012: GO 67063
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67014: LD_ADDR_VAR 0 2
67018: PUSH
67019: LD_VAR 0 1
67023: PPUSH
67024: LD_INT 1
67026: PPUSH
67027: CALL_OW 275
67031: PUSH
67032: LD_VAR 0 1
67036: PPUSH
67037: LD_INT 2
67039: PPUSH
67040: CALL_OW 275
67044: PUSH
67045: LD_VAR 0 1
67049: PPUSH
67050: LD_INT 3
67052: PPUSH
67053: CALL_OW 275
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: ST_TO_ADDR
// end ;
67063: LD_VAR 0 2
67067: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67068: LD_INT 0
67070: PPUSH
67071: PPUSH
// result := array ;
67072: LD_ADDR_VAR 0 3
67076: PUSH
67077: LD_VAR 0 1
67081: ST_TO_ADDR
// if size >= result then
67082: LD_VAR 0 2
67086: PUSH
67087: LD_VAR 0 3
67091: GREATEREQUAL
67092: IFFALSE 67096
// exit ;
67094: GO 67146
// if size then
67096: LD_VAR 0 2
67100: IFFALSE 67146
// for i := array downto size do
67102: LD_ADDR_VAR 0 4
67106: PUSH
67107: DOUBLE
67108: LD_VAR 0 1
67112: INC
67113: ST_TO_ADDR
67114: LD_VAR 0 2
67118: PUSH
67119: FOR_DOWNTO
67120: IFFALSE 67144
// result := Delete ( result , result ) ;
67122: LD_ADDR_VAR 0 3
67126: PUSH
67127: LD_VAR 0 3
67131: PPUSH
67132: LD_VAR 0 3
67136: PPUSH
67137: CALL_OW 3
67141: ST_TO_ADDR
67142: GO 67119
67144: POP
67145: POP
// end ;
67146: LD_VAR 0 3
67150: RET
// export function ComExit ( unit ) ; var tmp ; begin
67151: LD_INT 0
67153: PPUSH
67154: PPUSH
// if not IsInUnit ( unit ) then
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 310
67164: NOT
67165: IFFALSE 67169
// exit ;
67167: GO 67229
// tmp := IsInUnit ( unit ) ;
67169: LD_ADDR_VAR 0 3
67173: PUSH
67174: LD_VAR 0 1
67178: PPUSH
67179: CALL_OW 310
67183: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67184: LD_VAR 0 3
67188: PPUSH
67189: CALL_OW 247
67193: PUSH
67194: LD_INT 2
67196: EQUAL
67197: IFFALSE 67210
// ComExitVehicle ( unit ) else
67199: LD_VAR 0 1
67203: PPUSH
67204: CALL_OW 121
67208: GO 67219
// ComExitBuilding ( unit ) ;
67210: LD_VAR 0 1
67214: PPUSH
67215: CALL_OW 122
// result := tmp ;
67219: LD_ADDR_VAR 0 2
67223: PUSH
67224: LD_VAR 0 3
67228: ST_TO_ADDR
// end ;
67229: LD_VAR 0 2
67233: RET
// export function ComExitAll ( units ) ; var i ; begin
67234: LD_INT 0
67236: PPUSH
67237: PPUSH
// if not units then
67238: LD_VAR 0 1
67242: NOT
67243: IFFALSE 67247
// exit ;
67245: GO 67273
// for i in units do
67247: LD_ADDR_VAR 0 3
67251: PUSH
67252: LD_VAR 0 1
67256: PUSH
67257: FOR_IN
67258: IFFALSE 67271
// ComExit ( i ) ;
67260: LD_VAR 0 3
67264: PPUSH
67265: CALL 67151 0 1
67269: GO 67257
67271: POP
67272: POP
// end ;
67273: LD_VAR 0 2
67277: RET
// export function ResetHc ; begin
67278: LD_INT 0
67280: PPUSH
// InitHc ;
67281: CALL_OW 19
// hc_importance := 0 ;
67285: LD_ADDR_OWVAR 32
67289: PUSH
67290: LD_INT 0
67292: ST_TO_ADDR
// end ;
67293: LD_VAR 0 1
67297: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67298: LD_INT 0
67300: PPUSH
67301: PPUSH
67302: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67303: LD_ADDR_VAR 0 6
67307: PUSH
67308: LD_VAR 0 1
67312: PUSH
67313: LD_VAR 0 3
67317: PLUS
67318: PUSH
67319: LD_INT 2
67321: DIV
67322: ST_TO_ADDR
// if _x < 0 then
67323: LD_VAR 0 6
67327: PUSH
67328: LD_INT 0
67330: LESS
67331: IFFALSE 67348
// _x := _x * - 1 ;
67333: LD_ADDR_VAR 0 6
67337: PUSH
67338: LD_VAR 0 6
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: MUL
67347: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67348: LD_ADDR_VAR 0 7
67352: PUSH
67353: LD_VAR 0 2
67357: PUSH
67358: LD_VAR 0 4
67362: PLUS
67363: PUSH
67364: LD_INT 2
67366: DIV
67367: ST_TO_ADDR
// if _y < 0 then
67368: LD_VAR 0 7
67372: PUSH
67373: LD_INT 0
67375: LESS
67376: IFFALSE 67393
// _y := _y * - 1 ;
67378: LD_ADDR_VAR 0 7
67382: PUSH
67383: LD_VAR 0 7
67387: PUSH
67388: LD_INT 1
67390: NEG
67391: MUL
67392: ST_TO_ADDR
// result := [ _x , _y ] ;
67393: LD_ADDR_VAR 0 5
67397: PUSH
67398: LD_VAR 0 6
67402: PUSH
67403: LD_VAR 0 7
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: ST_TO_ADDR
// end ;
67412: LD_VAR 0 5
67416: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67417: LD_INT 0
67419: PPUSH
67420: PPUSH
67421: PPUSH
67422: PPUSH
// task := GetTaskList ( unit ) ;
67423: LD_ADDR_VAR 0 7
67427: PUSH
67428: LD_VAR 0 1
67432: PPUSH
67433: CALL_OW 437
67437: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67438: LD_VAR 0 7
67442: NOT
67443: IFFALSE 67462
67445: PUSH
67446: LD_VAR 0 1
67450: PPUSH
67451: LD_VAR 0 2
67455: PPUSH
67456: CALL_OW 308
67460: NOT
67461: AND
67462: IFFALSE 67466
// exit ;
67464: GO 67584
// if IsInArea ( unit , area ) then
67466: LD_VAR 0 1
67470: PPUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 308
67480: IFFALSE 67498
// begin ComMoveToArea ( unit , goAway ) ;
67482: LD_VAR 0 1
67486: PPUSH
67487: LD_VAR 0 3
67491: PPUSH
67492: CALL_OW 113
// exit ;
67496: GO 67584
// end ; if task [ 1 ] [ 1 ] <> M then
67498: LD_VAR 0 7
67502: PUSH
67503: LD_INT 1
67505: ARRAY
67506: PUSH
67507: LD_INT 1
67509: ARRAY
67510: PUSH
67511: LD_STRING M
67513: NONEQUAL
67514: IFFALSE 67518
// exit ;
67516: GO 67584
// x := task [ 1 ] [ 2 ] ;
67518: LD_ADDR_VAR 0 5
67522: PUSH
67523: LD_VAR 0 7
67527: PUSH
67528: LD_INT 1
67530: ARRAY
67531: PUSH
67532: LD_INT 2
67534: ARRAY
67535: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67536: LD_ADDR_VAR 0 6
67540: PUSH
67541: LD_VAR 0 7
67545: PUSH
67546: LD_INT 1
67548: ARRAY
67549: PUSH
67550: LD_INT 3
67552: ARRAY
67553: ST_TO_ADDR
// if InArea ( x , y , area ) then
67554: LD_VAR 0 5
67558: PPUSH
67559: LD_VAR 0 6
67563: PPUSH
67564: LD_VAR 0 2
67568: PPUSH
67569: CALL_OW 309
67573: IFFALSE 67584
// ComStop ( unit ) ;
67575: LD_VAR 0 1
67579: PPUSH
67580: CALL_OW 141
// end ;
67584: LD_VAR 0 4
67588: RET
// export function Abs ( value ) ; begin
67589: LD_INT 0
67591: PPUSH
// result := value ;
67592: LD_ADDR_VAR 0 2
67596: PUSH
67597: LD_VAR 0 1
67601: ST_TO_ADDR
// if value < 0 then
67602: LD_VAR 0 1
67606: PUSH
67607: LD_INT 0
67609: LESS
67610: IFFALSE 67627
// result := value * - 1 ;
67612: LD_ADDR_VAR 0 2
67616: PUSH
67617: LD_VAR 0 1
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: MUL
67626: ST_TO_ADDR
// end ;
67627: LD_VAR 0 2
67631: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67632: LD_INT 0
67634: PPUSH
67635: PPUSH
67636: PPUSH
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
67641: PPUSH
// if not unit or not building then
67642: LD_VAR 0 1
67646: NOT
67647: IFTRUE 67656
67649: PUSH
67650: LD_VAR 0 2
67654: NOT
67655: OR
67656: IFFALSE 67660
// exit ;
67658: GO 67888
// x := GetX ( building ) ;
67660: LD_ADDR_VAR 0 4
67664: PUSH
67665: LD_VAR 0 2
67669: PPUSH
67670: CALL_OW 250
67674: ST_TO_ADDR
// y := GetY ( building ) ;
67675: LD_ADDR_VAR 0 6
67679: PUSH
67680: LD_VAR 0 2
67684: PPUSH
67685: CALL_OW 251
67689: ST_TO_ADDR
// d := GetDir ( building ) ;
67690: LD_ADDR_VAR 0 8
67694: PUSH
67695: LD_VAR 0 2
67699: PPUSH
67700: CALL_OW 254
67704: ST_TO_ADDR
// r := 4 ;
67705: LD_ADDR_VAR 0 9
67709: PUSH
67710: LD_INT 4
67712: ST_TO_ADDR
// for i := 1 to 5 do
67713: LD_ADDR_VAR 0 10
67717: PUSH
67718: DOUBLE
67719: LD_INT 1
67721: DEC
67722: ST_TO_ADDR
67723: LD_INT 5
67725: PUSH
67726: FOR_TO
67727: IFFALSE 67886
// begin _x := ShiftX ( x , d , r + i ) ;
67729: LD_ADDR_VAR 0 5
67733: PUSH
67734: LD_VAR 0 4
67738: PPUSH
67739: LD_VAR 0 8
67743: PPUSH
67744: LD_VAR 0 9
67748: PUSH
67749: LD_VAR 0 10
67753: PLUS
67754: PPUSH
67755: CALL_OW 272
67759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67760: LD_ADDR_VAR 0 7
67764: PUSH
67765: LD_VAR 0 6
67769: PPUSH
67770: LD_VAR 0 8
67774: PPUSH
67775: LD_VAR 0 9
67779: PUSH
67780: LD_VAR 0 10
67784: PLUS
67785: PPUSH
67786: CALL_OW 273
67790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67791: LD_VAR 0 5
67795: PPUSH
67796: LD_VAR 0 7
67800: PPUSH
67801: CALL_OW 488
67805: IFFALSE 67840
67807: PUSH
67808: LD_VAR 0 5
67812: PPUSH
67813: LD_VAR 0 7
67817: PPUSH
67818: CALL_OW 428
67822: PPUSH
67823: CALL_OW 247
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: LD_INT 2
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: IN
67838: NOT
67839: AND
67840: IFFALSE 67884
// begin ComMoveXY ( unit , _x , _y ) ;
67842: LD_VAR 0 1
67846: PPUSH
67847: LD_VAR 0 5
67851: PPUSH
67852: LD_VAR 0 7
67856: PPUSH
67857: CALL_OW 111
// result := [ _x , _y ] ;
67861: LD_ADDR_VAR 0 3
67865: PUSH
67866: LD_VAR 0 5
67870: PUSH
67871: LD_VAR 0 7
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: ST_TO_ADDR
// exit ;
67880: POP
67881: POP
67882: GO 67888
// end ; end ;
67884: GO 67726
67886: POP
67887: POP
// end ;
67888: LD_VAR 0 3
67892: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67893: LD_INT 0
67895: PPUSH
67896: PPUSH
67897: PPUSH
// result := 0 ;
67898: LD_ADDR_VAR 0 3
67902: PUSH
67903: LD_INT 0
67905: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67906: LD_VAR 0 1
67910: PUSH
67911: LD_INT 0
67913: LESS
67914: IFTRUE 67926
67916: PUSH
67917: LD_VAR 0 1
67921: PUSH
67922: LD_INT 8
67924: GREATER
67925: OR
67926: IFTRUE 67938
67928: PUSH
67929: LD_VAR 0 2
67933: PUSH
67934: LD_INT 0
67936: LESS
67937: OR
67938: IFTRUE 67950
67940: PUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 8
67948: GREATER
67949: OR
67950: IFFALSE 67954
// exit ;
67952: GO 68029
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67954: LD_ADDR_VAR 0 4
67958: PUSH
67959: LD_INT 22
67961: PUSH
67962: LD_VAR 0 2
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PPUSH
67971: CALL_OW 69
67975: PUSH
67976: FOR_IN
67977: IFFALSE 68027
// begin un := UnitShoot ( i ) ;
67979: LD_ADDR_VAR 0 5
67983: PUSH
67984: LD_VAR 0 4
67988: PPUSH
67989: CALL_OW 504
67993: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67994: LD_VAR 0 5
67998: PPUSH
67999: CALL_OW 255
68003: PUSH
68004: LD_VAR 0 1
68008: EQUAL
68009: IFFALSE 68025
// begin result := un ;
68011: LD_ADDR_VAR 0 3
68015: PUSH
68016: LD_VAR 0 5
68020: ST_TO_ADDR
// exit ;
68021: POP
68022: POP
68023: GO 68029
// end ; end ;
68025: GO 67976
68027: POP
68028: POP
// end ;
68029: LD_VAR 0 3
68033: RET
// export function GetCargoBay ( units ) ; begin
68034: LD_INT 0
68036: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68037: LD_ADDR_VAR 0 2
68041: PUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 34
68052: PUSH
68053: LD_INT 12
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 34
68062: PUSH
68063: LD_INT 51
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 34
68072: PUSH
68073: LD_INT 32
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 34
68082: PUSH
68083: LD_INT 89
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: PPUSH
68097: CALL_OW 72
68101: ST_TO_ADDR
// end ;
68102: LD_VAR 0 2
68106: RET
// export function Negate ( value ) ; begin
68107: LD_INT 0
68109: PPUSH
// result := not value ;
68110: LD_ADDR_VAR 0 2
68114: PUSH
68115: LD_VAR 0 1
68119: NOT
68120: ST_TO_ADDR
// end ;
68121: LD_VAR 0 2
68125: RET
// export function Inc ( value ) ; begin
68126: LD_INT 0
68128: PPUSH
// result := value + 1 ;
68129: LD_ADDR_VAR 0 2
68133: PUSH
68134: LD_VAR 0 1
68138: PUSH
68139: LD_INT 1
68141: PLUS
68142: ST_TO_ADDR
// end ;
68143: LD_VAR 0 2
68147: RET
// export function Dec ( value ) ; begin
68148: LD_INT 0
68150: PPUSH
// result := value - 1 ;
68151: LD_ADDR_VAR 0 2
68155: PUSH
68156: LD_VAR 0 1
68160: PUSH
68161: LD_INT 1
68163: MINUS
68164: ST_TO_ADDR
// end ;
68165: LD_VAR 0 2
68169: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68170: LD_INT 0
68172: PPUSH
68173: PPUSH
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
68178: PPUSH
68179: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68180: LD_VAR 0 1
68184: PPUSH
68185: LD_VAR 0 2
68189: PPUSH
68190: CALL_OW 488
68194: NOT
68195: IFTRUE 68214
68197: PUSH
68198: LD_VAR 0 3
68202: PPUSH
68203: LD_VAR 0 4
68207: PPUSH
68208: CALL_OW 488
68212: NOT
68213: OR
68214: IFFALSE 68227
// begin result := - 1 ;
68216: LD_ADDR_VAR 0 5
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: ST_TO_ADDR
// exit ;
68225: GO 68462
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68227: LD_ADDR_VAR 0 12
68231: PUSH
68232: LD_VAR 0 1
68236: PPUSH
68237: LD_VAR 0 2
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_VAR 0 4
68251: PPUSH
68252: CALL 67298 0 4
68256: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68257: LD_ADDR_VAR 0 11
68261: PUSH
68262: LD_VAR 0 1
68266: PPUSH
68267: LD_VAR 0 2
68271: PPUSH
68272: LD_VAR 0 12
68276: PUSH
68277: LD_INT 1
68279: ARRAY
68280: PPUSH
68281: LD_VAR 0 12
68285: PUSH
68286: LD_INT 2
68288: ARRAY
68289: PPUSH
68290: CALL_OW 298
68294: ST_TO_ADDR
// distance := 9999 ;
68295: LD_ADDR_VAR 0 10
68299: PUSH
68300: LD_INT 9999
68302: ST_TO_ADDR
// for i := 0 to 5 do
68303: LD_ADDR_VAR 0 6
68307: PUSH
68308: DOUBLE
68309: LD_INT 0
68311: DEC
68312: ST_TO_ADDR
68313: LD_INT 5
68315: PUSH
68316: FOR_TO
68317: IFFALSE 68460
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68319: LD_ADDR_VAR 0 7
68323: PUSH
68324: LD_VAR 0 1
68328: PPUSH
68329: LD_VAR 0 6
68333: PPUSH
68334: LD_VAR 0 11
68338: PPUSH
68339: CALL_OW 272
68343: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68344: LD_ADDR_VAR 0 8
68348: PUSH
68349: LD_VAR 0 2
68353: PPUSH
68354: LD_VAR 0 6
68358: PPUSH
68359: LD_VAR 0 11
68363: PPUSH
68364: CALL_OW 273
68368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68369: LD_VAR 0 7
68373: PPUSH
68374: LD_VAR 0 8
68378: PPUSH
68379: CALL_OW 488
68383: NOT
68384: IFFALSE 68388
// continue ;
68386: GO 68316
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68388: LD_ADDR_VAR 0 9
68392: PUSH
68393: LD_VAR 0 12
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PPUSH
68402: LD_VAR 0 12
68406: PUSH
68407: LD_INT 2
68409: ARRAY
68410: PPUSH
68411: LD_VAR 0 7
68415: PPUSH
68416: LD_VAR 0 8
68420: PPUSH
68421: CALL_OW 298
68425: ST_TO_ADDR
// if tmp < distance then
68426: LD_VAR 0 9
68430: PUSH
68431: LD_VAR 0 10
68435: LESS
68436: IFFALSE 68458
// begin result := i ;
68438: LD_ADDR_VAR 0 5
68442: PUSH
68443: LD_VAR 0 6
68447: ST_TO_ADDR
// distance := tmp ;
68448: LD_ADDR_VAR 0 10
68452: PUSH
68453: LD_VAR 0 9
68457: ST_TO_ADDR
// end ; end ;
68458: GO 68316
68460: POP
68461: POP
// end ;
68462: LD_VAR 0 5
68466: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68467: LD_INT 0
68469: PPUSH
68470: PPUSH
// if not driver or not IsInUnit ( driver ) then
68471: LD_VAR 0 1
68475: NOT
68476: IFTRUE 68490
68478: PUSH
68479: LD_VAR 0 1
68483: PPUSH
68484: CALL_OW 310
68488: NOT
68489: OR
68490: IFFALSE 68494
// exit ;
68492: GO 68584
// vehicle := IsInUnit ( driver ) ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_VAR 0 1
68503: PPUSH
68504: CALL_OW 310
68508: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68509: LD_VAR 0 1
68513: PPUSH
68514: LD_STRING \
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: PUSH
68544: LD_STRING E
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_VAR 0 3
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PPUSH
68580: CALL_OW 446
// end ;
68584: LD_VAR 0 2
68588: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68589: LD_INT 0
68591: PPUSH
68592: PPUSH
// if not driver or not IsInUnit ( driver ) then
68593: LD_VAR 0 1
68597: NOT
68598: IFTRUE 68612
68600: PUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: CALL_OW 310
68610: NOT
68611: OR
68612: IFFALSE 68616
// exit ;
68614: GO 68706
// vehicle := IsInUnit ( driver ) ;
68616: LD_ADDR_VAR 0 3
68620: PUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 310
68630: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68631: LD_VAR 0 1
68635: PPUSH
68636: LD_STRING \
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: LD_INT 0
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: PUSH
68666: LD_STRING E
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_VAR 0 3
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PPUSH
68702: CALL_OW 447
// end ;
68706: LD_VAR 0 2
68710: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
68715: PPUSH
// tmp := [ ] ;
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: EMPTY
68722: ST_TO_ADDR
// for i in units do
68723: LD_ADDR_VAR 0 4
68727: PUSH
68728: LD_VAR 0 1
68732: PUSH
68733: FOR_IN
68734: IFFALSE 68772
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68736: LD_ADDR_VAR 0 5
68740: PUSH
68741: LD_VAR 0 5
68745: PPUSH
68746: LD_VAR 0 5
68750: PUSH
68751: LD_INT 1
68753: PLUS
68754: PPUSH
68755: LD_VAR 0 4
68759: PPUSH
68760: CALL_OW 256
68764: PPUSH
68765: CALL_OW 2
68769: ST_TO_ADDR
68770: GO 68733
68772: POP
68773: POP
// if not tmp then
68774: LD_VAR 0 5
68778: NOT
68779: IFFALSE 68783
// exit ;
68781: GO 68831
// if asc then
68783: LD_VAR 0 2
68787: IFFALSE 68811
// result := SortListByListAsc ( units , tmp ) else
68789: LD_ADDR_VAR 0 3
68793: PUSH
68794: LD_VAR 0 1
68798: PPUSH
68799: LD_VAR 0 5
68803: PPUSH
68804: CALL_OW 76
68808: ST_TO_ADDR
68809: GO 68831
// result := SortListByListDesc ( units , tmp ) ;
68811: LD_ADDR_VAR 0 3
68815: PUSH
68816: LD_VAR 0 1
68820: PPUSH
68821: LD_VAR 0 5
68825: PPUSH
68826: CALL_OW 77
68830: ST_TO_ADDR
// end ;
68831: LD_VAR 0 3
68835: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68836: LD_INT 0
68838: PPUSH
68839: PPUSH
// task := GetTaskList ( mech ) ;
68840: LD_ADDR_VAR 0 4
68844: PUSH
68845: LD_VAR 0 1
68849: PPUSH
68850: CALL_OW 437
68854: ST_TO_ADDR
// if not task then
68855: LD_VAR 0 4
68859: NOT
68860: IFFALSE 68864
// exit ;
68862: GO 68908
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68864: LD_ADDR_VAR 0 3
68868: PUSH
68869: LD_VAR 0 4
68873: PUSH
68874: LD_INT 1
68876: ARRAY
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PUSH
68882: LD_STRING r
68884: EQUAL
68885: IFFALSE 68907
68887: PUSH
68888: LD_VAR 0 4
68892: PUSH
68893: LD_INT 1
68895: ARRAY
68896: PUSH
68897: LD_INT 4
68899: ARRAY
68900: PUSH
68901: LD_VAR 0 2
68905: EQUAL
68906: AND
68907: ST_TO_ADDR
// end ;
68908: LD_VAR 0 3
68912: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68913: LD_INT 0
68915: PPUSH
// SetDir ( unit , d ) ;
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_VAR 0 4
68925: PPUSH
68926: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68930: LD_ADDR_VAR 0 6
68934: PUSH
68935: LD_VAR 0 1
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_VAR 0 3
68949: PPUSH
68950: LD_VAR 0 5
68954: PPUSH
68955: CALL_OW 48
68959: ST_TO_ADDR
// end ;
68960: LD_VAR 0 6
68964: RET
// export function ToNaturalNumber ( number ) ; begin
68965: LD_INT 0
68967: PPUSH
// result := number div 1 ;
68968: LD_ADDR_VAR 0 2
68972: PUSH
68973: LD_VAR 0 1
68977: PUSH
68978: LD_INT 1
68980: DIV
68981: ST_TO_ADDR
// if number < 0 then
68982: LD_VAR 0 1
68986: PUSH
68987: LD_INT 0
68989: LESS
68990: IFFALSE 69000
// result := 0 ;
68992: LD_ADDR_VAR 0 2
68996: PUSH
68997: LD_INT 0
68999: ST_TO_ADDR
// end ;
69000: LD_VAR 0 2
69004: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
69005: LD_INT 0
69007: PPUSH
69008: PPUSH
69009: PPUSH
// if not buildings then
69010: LD_VAR 0 1
69014: NOT
69015: IFFALSE 69019
// exit ;
69017: GO 69134
// tmp := [ ] ;
69019: LD_ADDR_VAR 0 5
69023: PUSH
69024: EMPTY
69025: ST_TO_ADDR
// for b in buildings do
69026: LD_ADDR_VAR 0 4
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: FOR_IN
69037: IFFALSE 69075
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
69039: LD_ADDR_VAR 0 5
69043: PUSH
69044: LD_VAR 0 5
69048: PPUSH
69049: LD_VAR 0 5
69053: PUSH
69054: LD_INT 1
69056: PLUS
69057: PPUSH
69058: LD_VAR 0 4
69062: PPUSH
69063: CALL_OW 266
69067: PPUSH
69068: CALL_OW 1
69072: ST_TO_ADDR
69073: GO 69036
69075: POP
69076: POP
// if not tmp then
69077: LD_VAR 0 5
69081: NOT
69082: IFFALSE 69086
// exit ;
69084: GO 69134
// if asc then
69086: LD_VAR 0 2
69090: IFFALSE 69114
// result := SortListByListAsc ( buildings , tmp ) else
69092: LD_ADDR_VAR 0 3
69096: PUSH
69097: LD_VAR 0 1
69101: PPUSH
69102: LD_VAR 0 5
69106: PPUSH
69107: CALL_OW 76
69111: ST_TO_ADDR
69112: GO 69134
// result := SortListByListDesc ( buildings , tmp ) ;
69114: LD_ADDR_VAR 0 3
69118: PUSH
69119: LD_VAR 0 1
69123: PPUSH
69124: LD_VAR 0 5
69128: PPUSH
69129: CALL_OW 77
69133: ST_TO_ADDR
// end ;
69134: LD_VAR 0 3
69138: RET
// export function SortByClass ( units , class ) ; var un ; begin
69139: LD_INT 0
69141: PPUSH
69142: PPUSH
// if not units or not class then
69143: LD_VAR 0 1
69147: NOT
69148: IFTRUE 69157
69150: PUSH
69151: LD_VAR 0 2
69155: NOT
69156: OR
69157: IFFALSE 69161
// exit ;
69159: GO 69256
// result := [ ] ;
69161: LD_ADDR_VAR 0 3
69165: PUSH
69166: EMPTY
69167: ST_TO_ADDR
// for un in units do
69168: LD_ADDR_VAR 0 4
69172: PUSH
69173: LD_VAR 0 1
69177: PUSH
69178: FOR_IN
69179: IFFALSE 69254
// if GetClass ( un ) = class then
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 257
69190: PUSH
69191: LD_VAR 0 2
69195: EQUAL
69196: IFFALSE 69223
// result := Insert ( result , 1 , un ) else
69198: LD_ADDR_VAR 0 3
69202: PUSH
69203: LD_VAR 0 3
69207: PPUSH
69208: LD_INT 1
69210: PPUSH
69211: LD_VAR 0 4
69215: PPUSH
69216: CALL_OW 2
69220: ST_TO_ADDR
69221: GO 69252
// result := Replace ( result , result + 1 , un ) ;
69223: LD_ADDR_VAR 0 3
69227: PUSH
69228: LD_VAR 0 3
69232: PPUSH
69233: LD_VAR 0 3
69237: PUSH
69238: LD_INT 1
69240: PLUS
69241: PPUSH
69242: LD_VAR 0 4
69246: PPUSH
69247: CALL_OW 1
69251: ST_TO_ADDR
69252: GO 69178
69254: POP
69255: POP
// end ;
69256: LD_VAR 0 3
69260: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69261: LD_INT 0
69263: PPUSH
69264: PPUSH
69265: PPUSH
69266: PPUSH
69267: PPUSH
69268: PPUSH
69269: PPUSH
// result := [ ] ;
69270: LD_ADDR_VAR 0 4
69274: PUSH
69275: EMPTY
69276: ST_TO_ADDR
// if x - r < 0 then
69277: LD_VAR 0 1
69281: PUSH
69282: LD_VAR 0 3
69286: MINUS
69287: PUSH
69288: LD_INT 0
69290: LESS
69291: IFFALSE 69303
// min_x := 0 else
69293: LD_ADDR_VAR 0 8
69297: PUSH
69298: LD_INT 0
69300: ST_TO_ADDR
69301: GO 69319
// min_x := x - r ;
69303: LD_ADDR_VAR 0 8
69307: PUSH
69308: LD_VAR 0 1
69312: PUSH
69313: LD_VAR 0 3
69317: MINUS
69318: ST_TO_ADDR
// if y - r < 0 then
69319: LD_VAR 0 2
69323: PUSH
69324: LD_VAR 0 3
69328: MINUS
69329: PUSH
69330: LD_INT 0
69332: LESS
69333: IFFALSE 69345
// min_y := 0 else
69335: LD_ADDR_VAR 0 7
69339: PUSH
69340: LD_INT 0
69342: ST_TO_ADDR
69343: GO 69361
// min_y := y - r ;
69345: LD_ADDR_VAR 0 7
69349: PUSH
69350: LD_VAR 0 2
69354: PUSH
69355: LD_VAR 0 3
69359: MINUS
69360: ST_TO_ADDR
// max_x := x + r ;
69361: LD_ADDR_VAR 0 9
69365: PUSH
69366: LD_VAR 0 1
69370: PUSH
69371: LD_VAR 0 3
69375: PLUS
69376: ST_TO_ADDR
// max_y := y + r ;
69377: LD_ADDR_VAR 0 10
69381: PUSH
69382: LD_VAR 0 2
69386: PUSH
69387: LD_VAR 0 3
69391: PLUS
69392: ST_TO_ADDR
// for _x = min_x to max_x do
69393: LD_ADDR_VAR 0 5
69397: PUSH
69398: DOUBLE
69399: LD_VAR 0 8
69403: DEC
69404: ST_TO_ADDR
69405: LD_VAR 0 9
69409: PUSH
69410: FOR_TO
69411: IFFALSE 69512
// for _y = min_y to max_y do
69413: LD_ADDR_VAR 0 6
69417: PUSH
69418: DOUBLE
69419: LD_VAR 0 7
69423: DEC
69424: ST_TO_ADDR
69425: LD_VAR 0 10
69429: PUSH
69430: FOR_TO
69431: IFFALSE 69508
// begin if not ValidHex ( _x , _y ) then
69433: LD_VAR 0 5
69437: PPUSH
69438: LD_VAR 0 6
69442: PPUSH
69443: CALL_OW 488
69447: NOT
69448: IFFALSE 69452
// continue ;
69450: GO 69430
// if GetResourceTypeXY ( _x , _y ) then
69452: LD_VAR 0 5
69456: PPUSH
69457: LD_VAR 0 6
69461: PPUSH
69462: CALL_OW 283
69466: IFFALSE 69506
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69468: LD_ADDR_VAR 0 4
69472: PUSH
69473: LD_VAR 0 4
69477: PPUSH
69478: LD_VAR 0 4
69482: PUSH
69483: LD_INT 1
69485: PLUS
69486: PPUSH
69487: LD_VAR 0 5
69491: PUSH
69492: LD_VAR 0 6
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PPUSH
69501: CALL_OW 1
69505: ST_TO_ADDR
// end ;
69506: GO 69430
69508: POP
69509: POP
69510: GO 69410
69512: POP
69513: POP
// end ;
69514: LD_VAR 0 4
69518: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69519: LD_INT 0
69521: PPUSH
69522: PPUSH
69523: PPUSH
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
69528: PPUSH
// if not units then
69529: LD_VAR 0 1
69533: NOT
69534: IFFALSE 69538
// exit ;
69536: GO 70070
// result := UnitFilter ( units , [ f_ok ] ) ;
69538: LD_ADDR_VAR 0 3
69542: PUSH
69543: LD_VAR 0 1
69547: PPUSH
69548: LD_INT 50
69550: PUSH
69551: EMPTY
69552: LIST
69553: PPUSH
69554: CALL_OW 72
69558: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69559: LD_ADDR_VAR 0 8
69563: PUSH
69564: LD_VAR 0 1
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: CALL_OW 255
69577: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69578: LD_ADDR_VAR 0 10
69582: PUSH
69583: LD_INT 29
69585: PUSH
69586: LD_INT 91
69588: PUSH
69589: LD_INT 49
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: ST_TO_ADDR
// if not result then
69597: LD_VAR 0 3
69601: NOT
69602: IFFALSE 69606
// exit ;
69604: GO 70070
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69606: LD_ADDR_VAR 0 5
69610: PUSH
69611: LD_INT 81
69613: PUSH
69614: LD_VAR 0 8
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PPUSH
69623: CALL_OW 69
69627: ST_TO_ADDR
// for i in result do
69628: LD_ADDR_VAR 0 4
69632: PUSH
69633: LD_VAR 0 3
69637: PUSH
69638: FOR_IN
69639: IFFALSE 70068
// begin tag := GetTag ( i ) + 1 ;
69641: LD_ADDR_VAR 0 9
69645: PUSH
69646: LD_VAR 0 4
69650: PPUSH
69651: CALL_OW 110
69655: PUSH
69656: LD_INT 1
69658: PLUS
69659: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69660: LD_ADDR_VAR 0 7
69664: PUSH
69665: LD_VAR 0 4
69669: PPUSH
69670: CALL_OW 250
69674: PPUSH
69675: LD_VAR 0 4
69679: PPUSH
69680: CALL_OW 251
69684: PPUSH
69685: LD_INT 4
69687: PPUSH
69688: CALL 69261 0 3
69692: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69693: LD_VAR 0 4
69697: PPUSH
69698: CALL_OW 247
69702: PUSH
69703: LD_INT 2
69705: EQUAL
69706: IFFALSE 69718
69708: PUSH
69709: LD_VAR 0 7
69713: PUSH
69714: LD_INT 2
69716: GREATER
69717: AND
69718: IFFALSE 69738
69720: PUSH
69721: LD_VAR 0 4
69725: PPUSH
69726: CALL_OW 264
69730: PUSH
69731: LD_VAR 0 10
69735: IN
69736: NOT
69737: AND
69738: IFFALSE 69777
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69740: LD_VAR 0 4
69744: PPUSH
69745: LD_VAR 0 7
69749: PUSH
69750: LD_INT 1
69752: ARRAY
69753: PUSH
69754: LD_INT 1
69756: ARRAY
69757: PPUSH
69758: LD_VAR 0 7
69762: PUSH
69763: LD_INT 1
69765: ARRAY
69766: PUSH
69767: LD_INT 2
69769: ARRAY
69770: PPUSH
69771: CALL_OW 116
69775: GO 70066
// if path > tag then
69777: LD_VAR 0 2
69781: PUSH
69782: LD_VAR 0 9
69786: GREATER
69787: IFFALSE 69995
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69789: LD_ADDR_VAR 0 6
69793: PUSH
69794: LD_VAR 0 5
69798: PPUSH
69799: LD_INT 91
69801: PUSH
69802: LD_VAR 0 4
69806: PUSH
69807: LD_INT 8
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: PPUSH
69815: CALL_OW 72
69819: ST_TO_ADDR
// if nearEnemy then
69820: LD_VAR 0 6
69824: IFFALSE 69893
// begin if GetWeapon ( i ) = ru_time_lapser then
69826: LD_VAR 0 4
69830: PPUSH
69831: CALL_OW 264
69835: PUSH
69836: LD_INT 49
69838: EQUAL
69839: IFFALSE 69867
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69841: LD_VAR 0 4
69845: PPUSH
69846: LD_VAR 0 6
69850: PPUSH
69851: LD_VAR 0 4
69855: PPUSH
69856: CALL_OW 74
69860: PPUSH
69861: CALL_OW 112
69865: GO 69891
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69867: LD_VAR 0 4
69871: PPUSH
69872: LD_VAR 0 6
69876: PPUSH
69877: LD_VAR 0 4
69881: PPUSH
69882: CALL_OW 74
69886: PPUSH
69887: CALL 71151 0 2
// end else
69891: GO 69993
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69893: LD_VAR 0 4
69897: PPUSH
69898: LD_VAR 0 2
69902: PUSH
69903: LD_VAR 0 9
69907: ARRAY
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PPUSH
69913: LD_VAR 0 2
69917: PUSH
69918: LD_VAR 0 9
69922: ARRAY
69923: PUSH
69924: LD_INT 2
69926: ARRAY
69927: PPUSH
69928: CALL_OW 297
69932: PUSH
69933: LD_INT 6
69935: GREATER
69936: IFFALSE 69979
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69938: LD_VAR 0 4
69942: PPUSH
69943: LD_VAR 0 2
69947: PUSH
69948: LD_VAR 0 9
69952: ARRAY
69953: PUSH
69954: LD_INT 1
69956: ARRAY
69957: PPUSH
69958: LD_VAR 0 2
69962: PUSH
69963: LD_VAR 0 9
69967: ARRAY
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: PPUSH
69973: CALL_OW 114
69977: GO 69993
// SetTag ( i , tag ) ;
69979: LD_VAR 0 4
69983: PPUSH
69984: LD_VAR 0 9
69988: PPUSH
69989: CALL_OW 109
// end else
69993: GO 70066
// if enemy then
69995: LD_VAR 0 5
69999: IFFALSE 70066
// begin if GetWeapon ( i ) = ru_time_lapser then
70001: LD_VAR 0 4
70005: PPUSH
70006: CALL_OW 264
70010: PUSH
70011: LD_INT 49
70013: EQUAL
70014: IFFALSE 70042
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70016: LD_VAR 0 4
70020: PPUSH
70021: LD_VAR 0 5
70025: PPUSH
70026: LD_VAR 0 4
70030: PPUSH
70031: CALL_OW 74
70035: PPUSH
70036: CALL_OW 112
70040: GO 70066
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70042: LD_VAR 0 4
70046: PPUSH
70047: LD_VAR 0 5
70051: PPUSH
70052: LD_VAR 0 4
70056: PPUSH
70057: CALL_OW 74
70061: PPUSH
70062: CALL 71151 0 2
// end ; end ;
70066: GO 69638
70068: POP
70069: POP
// end ;
70070: LD_VAR 0 3
70074: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70075: LD_INT 0
70077: PPUSH
70078: PPUSH
70079: PPUSH
// if not unit or IsInUnit ( unit ) then
70080: LD_VAR 0 1
70084: NOT
70085: IFTRUE 70098
70087: PUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL_OW 310
70097: OR
70098: IFFALSE 70102
// exit ;
70100: GO 70193
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70102: LD_ADDR_VAR 0 4
70106: PUSH
70107: LD_VAR 0 1
70111: PPUSH
70112: CALL_OW 250
70116: PPUSH
70117: LD_VAR 0 2
70121: PPUSH
70122: LD_INT 1
70124: PPUSH
70125: CALL_OW 272
70129: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70130: LD_ADDR_VAR 0 5
70134: PUSH
70135: LD_VAR 0 1
70139: PPUSH
70140: CALL_OW 251
70144: PPUSH
70145: LD_VAR 0 2
70149: PPUSH
70150: LD_INT 1
70152: PPUSH
70153: CALL_OW 273
70157: ST_TO_ADDR
// if ValidHex ( x , y ) then
70158: LD_VAR 0 4
70162: PPUSH
70163: LD_VAR 0 5
70167: PPUSH
70168: CALL_OW 488
70172: IFFALSE 70193
// ComTurnXY ( unit , x , y ) ;
70174: LD_VAR 0 1
70178: PPUSH
70179: LD_VAR 0 4
70183: PPUSH
70184: LD_VAR 0 5
70188: PPUSH
70189: CALL_OW 118
// end ;
70193: LD_VAR 0 3
70197: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70198: LD_INT 0
70200: PPUSH
70201: PPUSH
// result := false ;
70202: LD_ADDR_VAR 0 3
70206: PUSH
70207: LD_INT 0
70209: ST_TO_ADDR
// if not units then
70210: LD_VAR 0 2
70214: NOT
70215: IFFALSE 70219
// exit ;
70217: GO 70264
// for i in units do
70219: LD_ADDR_VAR 0 4
70223: PUSH
70224: LD_VAR 0 2
70228: PUSH
70229: FOR_IN
70230: IFFALSE 70262
// if See ( side , i ) then
70232: LD_VAR 0 1
70236: PPUSH
70237: LD_VAR 0 4
70241: PPUSH
70242: CALL_OW 292
70246: IFFALSE 70260
// begin result := true ;
70248: LD_ADDR_VAR 0 3
70252: PUSH
70253: LD_INT 1
70255: ST_TO_ADDR
// exit ;
70256: POP
70257: POP
70258: GO 70264
// end ;
70260: GO 70229
70262: POP
70263: POP
// end ;
70264: LD_VAR 0 3
70268: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70269: LD_INT 0
70271: PPUSH
70272: PPUSH
70273: PPUSH
70274: PPUSH
// if not unit or not points then
70275: LD_VAR 0 1
70279: NOT
70280: IFTRUE 70289
70282: PUSH
70283: LD_VAR 0 2
70287: NOT
70288: OR
70289: IFFALSE 70293
// exit ;
70291: GO 70383
// dist := 99999 ;
70293: LD_ADDR_VAR 0 5
70297: PUSH
70298: LD_INT 99999
70300: ST_TO_ADDR
// for i in points do
70301: LD_ADDR_VAR 0 4
70305: PUSH
70306: LD_VAR 0 2
70310: PUSH
70311: FOR_IN
70312: IFFALSE 70381
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70314: LD_ADDR_VAR 0 6
70318: PUSH
70319: LD_VAR 0 1
70323: PPUSH
70324: LD_VAR 0 4
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PPUSH
70333: LD_VAR 0 4
70337: PUSH
70338: LD_INT 2
70340: ARRAY
70341: PPUSH
70342: CALL_OW 297
70346: ST_TO_ADDR
// if tmpDist < dist then
70347: LD_VAR 0 6
70351: PUSH
70352: LD_VAR 0 5
70356: LESS
70357: IFFALSE 70379
// begin result := i ;
70359: LD_ADDR_VAR 0 3
70363: PUSH
70364: LD_VAR 0 4
70368: ST_TO_ADDR
// dist := tmpDist ;
70369: LD_ADDR_VAR 0 5
70373: PUSH
70374: LD_VAR 0 6
70378: ST_TO_ADDR
// end ; end ;
70379: GO 70311
70381: POP
70382: POP
// end ;
70383: LD_VAR 0 3
70387: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70388: LD_INT 0
70390: PPUSH
// uc_side := side ;
70391: LD_ADDR_OWVAR 20
70395: PUSH
70396: LD_VAR 0 1
70400: ST_TO_ADDR
// uc_nation := 3 ;
70401: LD_ADDR_OWVAR 21
70405: PUSH
70406: LD_INT 3
70408: ST_TO_ADDR
// vc_chassis := 25 ;
70409: LD_ADDR_OWVAR 37
70413: PUSH
70414: LD_INT 25
70416: ST_TO_ADDR
// vc_engine := engine_siberite ;
70417: LD_ADDR_OWVAR 39
70421: PUSH
70422: LD_INT 3
70424: ST_TO_ADDR
// vc_control := control_computer ;
70425: LD_ADDR_OWVAR 38
70429: PUSH
70430: LD_INT 3
70432: ST_TO_ADDR
// vc_weapon := 59 ;
70433: LD_ADDR_OWVAR 40
70437: PUSH
70438: LD_INT 59
70440: ST_TO_ADDR
// result := CreateVehicle ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: CALL_OW 45
70450: ST_TO_ADDR
// SetDir ( result , d ) ;
70451: LD_VAR 0 5
70455: PPUSH
70456: LD_VAR 0 4
70460: PPUSH
70461: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70465: LD_VAR 0 5
70469: PPUSH
70470: LD_VAR 0 2
70474: PPUSH
70475: LD_VAR 0 3
70479: PPUSH
70480: LD_INT 0
70482: PPUSH
70483: CALL_OW 48
// end ;
70487: LD_VAR 0 5
70491: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
70496: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70497: LD_ADDR_VAR 0 2
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70520: LD_VAR 0 1
70524: NOT
70525: IFTRUE 70558
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: CALL_OW 264
70537: PUSH
70538: LD_INT 12
70540: PUSH
70541: LD_INT 51
70543: PUSH
70544: LD_INT 32
70546: PUSH
70547: LD_INT 89
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: IN
70556: NOT
70557: OR
70558: IFFALSE 70562
// exit ;
70560: GO 70660
// for i := 1 to 3 do
70562: LD_ADDR_VAR 0 3
70566: PUSH
70567: DOUBLE
70568: LD_INT 1
70570: DEC
70571: ST_TO_ADDR
70572: LD_INT 3
70574: PUSH
70575: FOR_TO
70576: IFFALSE 70658
// begin tmp := GetCargo ( cargo , i ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: LD_VAR 0 3
70592: PPUSH
70593: CALL_OW 289
70597: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70598: LD_ADDR_VAR 0 2
70602: PUSH
70603: LD_VAR 0 2
70607: PPUSH
70608: LD_VAR 0 3
70612: PPUSH
70613: LD_VAR 0 4
70617: PPUSH
70618: CALL_OW 1
70622: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70623: LD_ADDR_VAR 0 2
70627: PUSH
70628: LD_VAR 0 2
70632: PPUSH
70633: LD_INT 4
70635: PPUSH
70636: LD_VAR 0 2
70640: PUSH
70641: LD_INT 4
70643: ARRAY
70644: PUSH
70645: LD_VAR 0 4
70649: PLUS
70650: PPUSH
70651: CALL_OW 1
70655: ST_TO_ADDR
// end ;
70656: GO 70575
70658: POP
70659: POP
// end ;
70660: LD_VAR 0 2
70664: RET
// export function Length ( array ) ; begin
70665: LD_INT 0
70667: PPUSH
// result := array + 0 ;
70668: LD_ADDR_VAR 0 2
70672: PUSH
70673: LD_VAR 0 1
70677: PUSH
70678: LD_INT 0
70680: PLUS
70681: ST_TO_ADDR
// end ;
70682: LD_VAR 0 2
70686: RET
// export function PrepareArray ( array ) ; begin
70687: LD_INT 0
70689: PPUSH
// result := array diff 0 ;
70690: LD_ADDR_VAR 0 2
70694: PUSH
70695: LD_VAR 0 1
70699: PUSH
70700: LD_INT 0
70702: DIFF
70703: ST_TO_ADDR
// if not result [ 1 ] then
70704: LD_VAR 0 2
70708: PUSH
70709: LD_INT 1
70711: ARRAY
70712: NOT
70713: IFFALSE 70733
// result := Delete ( result , 1 ) ;
70715: LD_ADDR_VAR 0 2
70719: PUSH
70720: LD_VAR 0 2
70724: PPUSH
70725: LD_INT 1
70727: PPUSH
70728: CALL_OW 3
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 2
70737: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70738: LD_INT 0
70740: PPUSH
70741: PPUSH
70742: PPUSH
70743: PPUSH
// sibRocketRange := 25 ;
70744: LD_ADDR_VAR 0 6
70748: PUSH
70749: LD_INT 25
70751: ST_TO_ADDR
// result := false ;
70752: LD_ADDR_VAR 0 4
70756: PUSH
70757: LD_INT 0
70759: ST_TO_ADDR
// for i := 0 to 5 do
70760: LD_ADDR_VAR 0 5
70764: PUSH
70765: DOUBLE
70766: LD_INT 0
70768: DEC
70769: ST_TO_ADDR
70770: LD_INT 5
70772: PUSH
70773: FOR_TO
70774: IFFALSE 70841
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70776: LD_VAR 0 1
70780: PPUSH
70781: LD_VAR 0 5
70785: PPUSH
70786: LD_VAR 0 6
70790: PPUSH
70791: CALL_OW 272
70795: PPUSH
70796: LD_VAR 0 2
70800: PPUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: LD_VAR 0 6
70810: PPUSH
70811: CALL_OW 273
70815: PPUSH
70816: LD_VAR 0 3
70820: PPUSH
70821: CALL_OW 309
70825: IFFALSE 70839
// begin result := true ;
70827: LD_ADDR_VAR 0 4
70831: PUSH
70832: LD_INT 1
70834: ST_TO_ADDR
// exit ;
70835: POP
70836: POP
70837: GO 70843
// end ;
70839: GO 70773
70841: POP
70842: POP
// end ;
70843: LD_VAR 0 4
70847: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70848: LD_INT 0
70850: PPUSH
70851: PPUSH
70852: PPUSH
// if btype = b_depot then
70853: LD_VAR 0 2
70857: PUSH
70858: LD_INT 0
70860: EQUAL
70861: IFFALSE 70873
// begin result := true ;
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: LD_INT 1
70870: ST_TO_ADDR
// exit ;
70871: GO 70993
// end ; pom := GetBase ( depot ) ;
70873: LD_ADDR_VAR 0 4
70877: PUSH
70878: LD_VAR 0 1
70882: PPUSH
70883: CALL_OW 274
70887: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70888: LD_ADDR_VAR 0 5
70892: PUSH
70893: LD_VAR 0 2
70897: PPUSH
70898: LD_VAR 0 1
70902: PPUSH
70903: CALL_OW 248
70907: PPUSH
70908: CALL_OW 450
70912: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70913: LD_ADDR_VAR 0 3
70917: PUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: LD_INT 1
70925: PPUSH
70926: CALL_OW 275
70930: PUSH
70931: LD_VAR 0 5
70935: PUSH
70936: LD_INT 1
70938: ARRAY
70939: GREATEREQUAL
70940: IFFALSE 70966
70942: PUSH
70943: LD_VAR 0 4
70947: PPUSH
70948: LD_INT 2
70950: PPUSH
70951: CALL_OW 275
70955: PUSH
70956: LD_VAR 0 5
70960: PUSH
70961: LD_INT 2
70963: ARRAY
70964: GREATEREQUAL
70965: AND
70966: IFFALSE 70992
70968: PUSH
70969: LD_VAR 0 4
70973: PPUSH
70974: LD_INT 3
70976: PPUSH
70977: CALL_OW 275
70981: PUSH
70982: LD_VAR 0 5
70986: PUSH
70987: LD_INT 3
70989: ARRAY
70990: GREATEREQUAL
70991: AND
70992: ST_TO_ADDR
// end ;
70993: LD_VAR 0 3
70997: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70998: LD_INT 0
71000: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_VAR 0 2
71010: PPUSH
71011: LD_INT 0
71013: PPUSH
71014: LD_INT 0
71016: PPUSH
71017: LD_INT 1
71019: PPUSH
71020: LD_INT 0
71022: PPUSH
71023: CALL_OW 587
// end ;
71027: LD_VAR 0 3
71031: RET
// export function CenterOnNow ( unit ) ; begin
71032: LD_INT 0
71034: PPUSH
// result := IsInUnit ( unit ) ;
71035: LD_ADDR_VAR 0 2
71039: PUSH
71040: LD_VAR 0 1
71044: PPUSH
71045: CALL_OW 310
71049: ST_TO_ADDR
// if not result then
71050: LD_VAR 0 2
71054: NOT
71055: IFFALSE 71067
// result := unit ;
71057: LD_ADDR_VAR 0 2
71061: PUSH
71062: LD_VAR 0 1
71066: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71067: LD_VAR 0 1
71071: PPUSH
71072: CALL_OW 87
// end ;
71076: LD_VAR 0 2
71080: RET
// export function ComMoveHex ( unit , hex ) ; begin
71081: LD_INT 0
71083: PPUSH
// if not hex then
71084: LD_VAR 0 2
71088: NOT
71089: IFFALSE 71093
// exit ;
71091: GO 71146
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71093: LD_VAR 0 2
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PPUSH
71102: LD_VAR 0 2
71106: PUSH
71107: LD_INT 2
71109: ARRAY
71110: PPUSH
71111: CALL_OW 428
71115: IFFALSE 71119
// exit ;
71117: GO 71146
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71119: LD_VAR 0 1
71123: PPUSH
71124: LD_VAR 0 2
71128: PUSH
71129: LD_INT 1
71131: ARRAY
71132: PPUSH
71133: LD_VAR 0 2
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PPUSH
71142: CALL_OW 111
// end ;
71146: LD_VAR 0 3
71150: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71151: LD_INT 0
71153: PPUSH
71154: PPUSH
71155: PPUSH
// if not unit or not enemy then
71156: LD_VAR 0 1
71160: NOT
71161: IFTRUE 71170
71163: PUSH
71164: LD_VAR 0 2
71168: NOT
71169: OR
71170: IFFALSE 71174
// exit ;
71172: GO 71300
// x := GetX ( enemy ) ;
71174: LD_ADDR_VAR 0 4
71178: PUSH
71179: LD_VAR 0 2
71183: PPUSH
71184: CALL_OW 250
71188: ST_TO_ADDR
// y := GetY ( enemy ) ;
71189: LD_ADDR_VAR 0 5
71193: PUSH
71194: LD_VAR 0 2
71198: PPUSH
71199: CALL_OW 251
71203: ST_TO_ADDR
// if ValidHex ( x , y ) then
71204: LD_VAR 0 4
71208: PPUSH
71209: LD_VAR 0 5
71213: PPUSH
71214: CALL_OW 488
71218: IFFALSE 71300
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71220: LD_VAR 0 2
71224: PPUSH
71225: CALL_OW 247
71229: PUSH
71230: LD_INT 3
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: IN
71240: IFTRUE 71263
71242: PUSH
71243: LD_VAR 0 1
71247: PPUSH
71248: CALL_OW 255
71252: PPUSH
71253: LD_VAR 0 2
71257: PPUSH
71258: CALL_OW 292
71262: OR
71263: IFFALSE 71281
// ComAttackUnit ( unit , enemy ) else
71265: LD_VAR 0 1
71269: PPUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: CALL_OW 115
71279: GO 71300
// ComAgressiveMove ( unit , x , y ) ;
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_VAR 0 4
71290: PPUSH
71291: LD_VAR 0 5
71295: PPUSH
71296: CALL_OW 114
// end ;
71300: LD_VAR 0 3
71304: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71305: LD_INT 0
71307: PPUSH
71308: PPUSH
71309: PPUSH
// list := AreaToList ( area , 0 ) ;
71310: LD_ADDR_VAR 0 5
71314: PUSH
71315: LD_VAR 0 1
71319: PPUSH
71320: LD_INT 0
71322: PPUSH
71323: CALL_OW 517
71327: ST_TO_ADDR
// if not list then
71328: LD_VAR 0 5
71332: NOT
71333: IFFALSE 71337
// exit ;
71335: GO 71467
// if all then
71337: LD_VAR 0 2
71341: IFFALSE 71429
// begin for i := 1 to list [ 1 ] do
71343: LD_ADDR_VAR 0 4
71347: PUSH
71348: DOUBLE
71349: LD_INT 1
71351: DEC
71352: ST_TO_ADDR
71353: LD_VAR 0 5
71357: PUSH
71358: LD_INT 1
71360: ARRAY
71361: PUSH
71362: FOR_TO
71363: IFFALSE 71425
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71365: LD_ADDR_VAR 0 3
71369: PUSH
71370: LD_VAR 0 3
71374: PPUSH
71375: LD_VAR 0 3
71379: PUSH
71380: LD_INT 1
71382: PLUS
71383: PPUSH
71384: LD_VAR 0 5
71388: PUSH
71389: LD_INT 1
71391: ARRAY
71392: PUSH
71393: LD_VAR 0 4
71397: ARRAY
71398: PUSH
71399: LD_VAR 0 5
71403: PUSH
71404: LD_INT 2
71406: ARRAY
71407: PUSH
71408: LD_VAR 0 4
71412: ARRAY
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PPUSH
71418: CALL_OW 1
71422: ST_TO_ADDR
71423: GO 71362
71425: POP
71426: POP
// exit ;
71427: GO 71467
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71429: LD_ADDR_VAR 0 3
71433: PUSH
71434: LD_VAR 0 5
71438: PUSH
71439: LD_INT 1
71441: ARRAY
71442: PUSH
71443: LD_INT 1
71445: ARRAY
71446: PUSH
71447: LD_VAR 0 5
71451: PUSH
71452: LD_INT 2
71454: ARRAY
71455: PUSH
71456: LD_INT 1
71458: ARRAY
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: EMPTY
71465: LIST
71466: ST_TO_ADDR
// end ;
71467: LD_VAR 0 3
71471: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71472: LD_INT 0
71474: PPUSH
71475: PPUSH
// list := AreaToList ( area , 0 ) ;
71476: LD_ADDR_VAR 0 4
71480: PUSH
71481: LD_VAR 0 1
71485: PPUSH
71486: LD_INT 0
71488: PPUSH
71489: CALL_OW 517
71493: ST_TO_ADDR
// if not list then
71494: LD_VAR 0 4
71498: NOT
71499: IFFALSE 71503
// exit ;
71501: GO 71544
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71503: LD_ADDR_VAR 0 3
71507: PUSH
71508: LD_VAR 0 4
71512: PUSH
71513: LD_INT 1
71515: ARRAY
71516: PUSH
71517: LD_INT 1
71519: ARRAY
71520: PUSH
71521: LD_VAR 0 4
71525: PUSH
71526: LD_INT 2
71528: ARRAY
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PUSH
71534: LD_VAR 0 2
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: LIST
71543: ST_TO_ADDR
// end ;
71544: LD_VAR 0 3
71548: RET
// export function First ( array ) ; begin
71549: LD_INT 0
71551: PPUSH
// if not array then
71552: LD_VAR 0 1
71556: NOT
71557: IFFALSE 71561
// exit ;
71559: GO 71575
// result := array [ 1 ] ;
71561: LD_ADDR_VAR 0 2
71565: PUSH
71566: LD_VAR 0 1
71570: PUSH
71571: LD_INT 1
71573: ARRAY
71574: ST_TO_ADDR
// end ;
71575: LD_VAR 0 2
71579: RET
// export function Last ( array ) ; begin
71580: LD_INT 0
71582: PPUSH
// if not array then
71583: LD_VAR 0 1
71587: NOT
71588: IFFALSE 71592
// exit ;
71590: GO 71608
// result := array [ array ] ;
71592: LD_ADDR_VAR 0 2
71596: PUSH
71597: LD_VAR 0 1
71601: PUSH
71602: LD_VAR 0 1
71606: ARRAY
71607: ST_TO_ADDR
// end ;
71608: LD_VAR 0 2
71612: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71613: LD_INT 0
71615: PPUSH
71616: PPUSH
// result := [ ] ;
71617: LD_ADDR_VAR 0 5
71621: PUSH
71622: EMPTY
71623: ST_TO_ADDR
// if not array then
71624: LD_VAR 0 1
71628: NOT
71629: IFFALSE 71633
// exit ;
71631: GO 71745
// for i := 1 to array do
71633: LD_ADDR_VAR 0 6
71637: PUSH
71638: DOUBLE
71639: LD_INT 1
71641: DEC
71642: ST_TO_ADDR
71643: LD_VAR 0 1
71647: PUSH
71648: FOR_TO
71649: IFFALSE 71743
// if array [ i ] [ index ] = value then
71651: LD_VAR 0 1
71655: PUSH
71656: LD_VAR 0 6
71660: ARRAY
71661: PUSH
71662: LD_VAR 0 2
71666: ARRAY
71667: PUSH
71668: LD_VAR 0 3
71672: EQUAL
71673: IFFALSE 71741
// begin if indexColumn then
71675: LD_VAR 0 4
71679: IFFALSE 71715
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71681: LD_ADDR_VAR 0 5
71685: PUSH
71686: LD_VAR 0 5
71690: PPUSH
71691: LD_VAR 0 1
71695: PUSH
71696: LD_VAR 0 6
71700: ARRAY
71701: PUSH
71702: LD_VAR 0 4
71706: ARRAY
71707: PPUSH
71708: CALL 66753 0 2
71712: ST_TO_ADDR
71713: GO 71741
// result := Join ( result , array [ i ] ) ;
71715: LD_ADDR_VAR 0 5
71719: PUSH
71720: LD_VAR 0 5
71724: PPUSH
71725: LD_VAR 0 1
71729: PUSH
71730: LD_VAR 0 6
71734: ARRAY
71735: PPUSH
71736: CALL 66753 0 2
71740: ST_TO_ADDR
// end ;
71741: GO 71648
71743: POP
71744: POP
// end ;
71745: LD_VAR 0 5
71749: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71750: LD_INT 0
71752: PPUSH
// if not vehicles or not parkingPoint then
71753: LD_VAR 0 1
71757: NOT
71758: IFTRUE 71767
71760: PUSH
71761: LD_VAR 0 2
71765: NOT
71766: OR
71767: IFFALSE 71771
// exit ;
71769: GO 71869
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71771: LD_ADDR_VAR 0 1
71775: PUSH
71776: LD_VAR 0 1
71780: PPUSH
71781: LD_INT 50
71783: PUSH
71784: EMPTY
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: PUSH
71790: LD_INT 92
71792: PUSH
71793: LD_VAR 0 2
71797: PUSH
71798: LD_INT 1
71800: ARRAY
71801: PUSH
71802: LD_VAR 0 2
71806: PUSH
71807: LD_INT 2
71809: ARRAY
71810: PUSH
71811: LD_INT 8
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PPUSH
71828: CALL_OW 72
71832: ST_TO_ADDR
// if not vehicles then
71833: LD_VAR 0 1
71837: NOT
71838: IFFALSE 71842
// exit ;
71840: GO 71869
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71842: LD_VAR 0 1
71846: PPUSH
71847: LD_VAR 0 2
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: PPUSH
71856: LD_VAR 0 2
71860: PUSH
71861: LD_INT 2
71863: ARRAY
71864: PPUSH
71865: CALL_OW 111
// end ;
71869: LD_VAR 0 3
71873: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71874: LD_INT 0
71876: PPUSH
71877: PPUSH
71878: PPUSH
// if not side or not area then
71879: LD_VAR 0 1
71883: NOT
71884: IFTRUE 71893
71886: PUSH
71887: LD_VAR 0 2
71891: NOT
71892: OR
71893: IFFALSE 71897
// exit ;
71895: GO 72016
// tmp := AreaToList ( area , 0 ) ;
71897: LD_ADDR_VAR 0 5
71901: PUSH
71902: LD_VAR 0 2
71906: PPUSH
71907: LD_INT 0
71909: PPUSH
71910: CALL_OW 517
71914: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71915: LD_ADDR_VAR 0 4
71919: PUSH
71920: DOUBLE
71921: LD_INT 1
71923: DEC
71924: ST_TO_ADDR
71925: LD_VAR 0 5
71929: PUSH
71930: LD_INT 1
71932: ARRAY
71933: PUSH
71934: FOR_TO
71935: IFFALSE 72014
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71937: LD_VAR 0 5
71941: PUSH
71942: LD_INT 1
71944: ARRAY
71945: PUSH
71946: LD_VAR 0 4
71950: ARRAY
71951: PPUSH
71952: LD_VAR 0 5
71956: PUSH
71957: LD_INT 2
71959: ARRAY
71960: PUSH
71961: LD_VAR 0 4
71965: ARRAY
71966: PPUSH
71967: CALL_OW 351
71971: IFFALSE 72012
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71973: LD_VAR 0 5
71977: PUSH
71978: LD_INT 1
71980: ARRAY
71981: PUSH
71982: LD_VAR 0 4
71986: ARRAY
71987: PPUSH
71988: LD_VAR 0 5
71992: PUSH
71993: LD_INT 2
71995: ARRAY
71996: PUSH
71997: LD_VAR 0 4
72001: ARRAY
72002: PPUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 244
// end ;
72012: GO 71934
72014: POP
72015: POP
// end ;
72016: LD_VAR 0 3
72020: RET
// export function UniqueArray ( array ) ; var i ; begin
72021: LD_INT 0
72023: PPUSH
72024: PPUSH
// result := [ ] ;
72025: LD_ADDR_VAR 0 2
72029: PUSH
72030: EMPTY
72031: ST_TO_ADDR
// if not array then
72032: LD_VAR 0 1
72036: NOT
72037: IFFALSE 72041
// exit ;
72039: GO 72102
// for i := 1 to array do
72041: LD_ADDR_VAR 0 3
72045: PUSH
72046: DOUBLE
72047: LD_INT 1
72049: DEC
72050: ST_TO_ADDR
72051: LD_VAR 0 1
72055: PUSH
72056: FOR_TO
72057: IFFALSE 72100
// if not array [ i ] in result then
72059: LD_VAR 0 1
72063: PUSH
72064: LD_VAR 0 3
72068: ARRAY
72069: PUSH
72070: LD_VAR 0 2
72074: IN
72075: NOT
72076: IFFALSE 72098
// result := Join ( result , i ) ;
72078: LD_ADDR_VAR 0 2
72082: PUSH
72083: LD_VAR 0 2
72087: PPUSH
72088: LD_VAR 0 3
72092: PPUSH
72093: CALL 66753 0 2
72097: ST_TO_ADDR
72098: GO 72056
72100: POP
72101: POP
// end ; end_of_file
72102: LD_VAR 0 2
72106: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72107: LD_VAR 0 1
72111: PPUSH
72112: LD_VAR 0 2
72116: PPUSH
72117: LD_VAR 0 3
72121: PPUSH
72122: LD_VAR 0 4
72126: PPUSH
72127: LD_VAR 0 5
72131: PPUSH
72132: LD_VAR 0 6
72136: PPUSH
72137: CALL 6172 0 6
// end ;
72141: PPOPN 6
72143: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72144: LD_INT 0
72146: PPUSH
// begin if not units then
72147: LD_VAR 0 1
72151: NOT
72152: IFFALSE 72156
// exit ;
72154: GO 72190
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
72156: LD_VAR 0 1
72160: PPUSH
72161: LD_VAR 0 2
72165: PPUSH
72166: LD_VAR 0 3
72170: PPUSH
72171: LD_VAR 0 4
72175: PPUSH
72176: LD_VAR 0 5
72180: PPUSH
72181: LD_VAR 0 6
72185: PPUSH
72186: CALL 28526 0 6
// end ;
72190: PPOPN 7
72192: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72193: CALL 6052 0 0
// end ; end_of_file
72197: PPOPN 1
72199: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72200: LD_VAR 0 1
72204: PUSH
72205: LD_INT 200
72207: DOUBLE
72208: GREATEREQUAL
72209: IFFALSE 72217
72211: LD_INT 299
72213: DOUBLE
72214: LESSEQUAL
72215: IFTRUE 72219
72217: GO 72251
72219: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72220: LD_VAR 0 1
72224: PPUSH
72225: LD_VAR 0 2
72229: PPUSH
72230: LD_VAR 0 3
72234: PPUSH
72235: LD_VAR 0 4
72239: PPUSH
72240: LD_VAR 0 5
72244: PPUSH
72245: CALL 22829 0 5
72249: GO 72328
72251: LD_INT 300
72253: DOUBLE
72254: GREATEREQUAL
72255: IFFALSE 72263
72257: LD_INT 399
72259: DOUBLE
72260: LESSEQUAL
72261: IFTRUE 72265
72263: GO 72327
72265: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72266: LD_VAR 0 1
72270: PPUSH
72271: LD_VAR 0 2
72275: PPUSH
72276: LD_VAR 0 3
72280: PPUSH
72281: LD_VAR 0 4
72285: PPUSH
72286: LD_VAR 0 5
72290: PPUSH
72291: LD_VAR 0 6
72295: PPUSH
72296: LD_VAR 0 7
72300: PPUSH
72301: LD_VAR 0 8
72305: PPUSH
72306: LD_VAR 0 9
72310: PPUSH
72311: LD_VAR 0 10
72315: PPUSH
72316: LD_VAR 0 11
72320: PPUSH
72321: CALL 18632 0 11
72325: GO 72328
72327: POP
// end ;
72328: PPOPN 11
72330: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72331: LD_VAR 0 1
72335: PPUSH
72336: LD_VAR 0 2
72340: PPUSH
72341: LD_VAR 0 3
72345: PPUSH
72346: LD_VAR 0 4
72350: PPUSH
72351: LD_VAR 0 5
72355: PPUSH
72356: CALL 22129 0 5
// end ;
72360: PPOPN 5
72362: END
